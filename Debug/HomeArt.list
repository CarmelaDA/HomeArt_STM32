
HomeArt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fd4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000764  08006164  08006164  00016164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068c8  080068c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080068c8  080068c8  000168c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068d0  080068d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068d0  080068d0  000168d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068d4  080068d4  000168d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080068d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000bc4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c34  20000c34  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011fe5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025e0  00000000  00000000  00032085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  00034668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cf0  00000000  00000000  00035400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002235a  00000000  00000000  000360f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a1c  00000000  00000000  0005844a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbf86  00000000  00000000  00068e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00134dec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c5c  00000000  00000000  00134e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800614c 	.word	0x0800614c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800614c 	.word	0x0800614c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <ESP_clearBuffer>:
char *Terminate = "</body></html>";


/*****************************************************************************************************************************************/

void ESP_clearBuffer(void){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

	memset(buffer_app, 0, 60);
 800057c:	223c      	movs	r2, #60	; 0x3c
 800057e:	2100      	movs	r1, #0
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <ESP_clearBuffer+0x18>)
 8000582:	f005 f9ad 	bl	80058e0 <memset>
	buffer_index = 0;
 8000586:	4b03      	ldr	r3, [pc, #12]	; (8000594 <ESP_clearBuffer+0x1c>)
 8000588:	2200      	movs	r2, #0
 800058a:	801a      	strh	r2, [r3, #0]
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200008f0 	.word	0x200008f0
 8000594:	200009d6 	.word	0x200009d6

08000598 <ESP_Init>:


void ESP_Init(char *SSID, char *PASSWD){
 8000598:	b580      	push	{r7, lr}
 800059a:	b09a      	sub	sp, #104	; 0x68
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]

	ESP_clearBuffer();
 80005a2:	f7ff ffe9 	bl	8000578 <ESP_clearBuffer>
	char data[80];

	ringInit();
 80005a6:	f000 fc41 	bl	8000e2c <ringInit>

	HAL_Delay(1000);
 80005aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ae:	f002 fa69 	bl	8002a84 <HAL_Delay>

	/********** AT **********/

	UART_send("AT\r\n", WiFi_UART);
 80005b2:	4974      	ldr	r1, [pc, #464]	; (8000784 <ESP_Init+0x1ec>)
 80005b4:	4874      	ldr	r0, [pc, #464]	; (8000788 <ESP_Init+0x1f0>)
 80005b6:	f000 fdf7 	bl	80011a8 <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 80005ba:	bf00      	nop
 80005bc:	4971      	ldr	r1, [pc, #452]	; (8000784 <ESP_Init+0x1ec>)
 80005be:	4873      	ldr	r0, [pc, #460]	; (800078c <ESP_Init+0x1f4>)
 80005c0:	f000 fe88 	bl	80012d4 <UART_waitFor>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f8      	beq.n	80005bc <ESP_Init+0x24>
	UART_send("AT  ---->  OK\n", PC_UART);
 80005ca:	4971      	ldr	r1, [pc, #452]	; (8000790 <ESP_Init+0x1f8>)
 80005cc:	4871      	ldr	r0, [pc, #452]	; (8000794 <ESP_Init+0x1fc>)
 80005ce:	f000 fdeb 	bl	80011a8 <UART_send>


	HAL_Delay(2000);
 80005d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005d6:	f002 fa55 	bl	8002a84 <HAL_Delay>


	/********** AT+RST **********/
	UART_send("AT+RST\r\n", WiFi_UART);
 80005da:	496a      	ldr	r1, [pc, #424]	; (8000784 <ESP_Init+0x1ec>)
 80005dc:	486e      	ldr	r0, [pc, #440]	; (8000798 <ESP_Init+0x200>)
 80005de:	f000 fde3 	bl	80011a8 <UART_send>
	UART_send("\nReseteando ", PC_UART);
 80005e2:	496b      	ldr	r1, [pc, #428]	; (8000790 <ESP_Init+0x1f8>)
 80005e4:	486d      	ldr	r0, [pc, #436]	; (800079c <ESP_Init+0x204>)
 80005e6:	f000 fddf 	bl	80011a8 <UART_send>

	for (int i=0; i<3; i++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	667b      	str	r3, [r7, #100]	; 0x64
 80005ee:	e00a      	b.n	8000606 <ESP_Init+0x6e>
	{
		UART_send(" . ", PC_UART);
 80005f0:	4967      	ldr	r1, [pc, #412]	; (8000790 <ESP_Init+0x1f8>)
 80005f2:	486b      	ldr	r0, [pc, #428]	; (80007a0 <ESP_Init+0x208>)
 80005f4:	f000 fdd8 	bl	80011a8 <UART_send>
		HAL_Delay(1500);
 80005f8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005fc:	f002 fa42 	bl	8002a84 <HAL_Delay>
	for (int i=0; i<3; i++)
 8000600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000602:	3301      	adds	r3, #1
 8000604:	667b      	str	r3, [r7, #100]	; 0x64
 8000606:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000608:	2b02      	cmp	r3, #2
 800060a:	ddf1      	ble.n	80005f0 <ESP_Init+0x58>
	}


	/********** AT **********/
	UART_send("AT\r\n", WiFi_UART);
 800060c:	495d      	ldr	r1, [pc, #372]	; (8000784 <ESP_Init+0x1ec>)
 800060e:	485e      	ldr	r0, [pc, #376]	; (8000788 <ESP_Init+0x1f0>)
 8000610:	f000 fdca 	bl	80011a8 <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 8000614:	bf00      	nop
 8000616:	495b      	ldr	r1, [pc, #364]	; (8000784 <ESP_Init+0x1ec>)
 8000618:	485c      	ldr	r0, [pc, #368]	; (800078c <ESP_Init+0x1f4>)
 800061a:	f000 fe5b 	bl	80012d4 <UART_waitFor>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d0f8      	beq.n	8000616 <ESP_Init+0x7e>
	UART_send("\n\nAT  ---->  OK\n\n", PC_UART);
 8000624:	495a      	ldr	r1, [pc, #360]	; (8000790 <ESP_Init+0x1f8>)
 8000626:	485f      	ldr	r0, [pc, #380]	; (80007a4 <ESP_Init+0x20c>)
 8000628:	f000 fdbe 	bl	80011a8 <UART_send>


	HAL_Delay(2000);
 800062c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000630:	f002 fa28 	bl	8002a84 <HAL_Delay>


	/********** AT+CWMODE=3 **********/
	UART_send("AT+CWMODE=3\r\n", WiFi_UART);
 8000634:	4953      	ldr	r1, [pc, #332]	; (8000784 <ESP_Init+0x1ec>)
 8000636:	485c      	ldr	r0, [pc, #368]	; (80007a8 <ESP_Init+0x210>)
 8000638:	f000 fdb6 	bl	80011a8 <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 800063c:	bf00      	nop
 800063e:	4951      	ldr	r1, [pc, #324]	; (8000784 <ESP_Init+0x1ec>)
 8000640:	4852      	ldr	r0, [pc, #328]	; (800078c <ESP_Init+0x1f4>)
 8000642:	f000 fe47 	bl	80012d4 <UART_waitFor>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d0f8      	beq.n	800063e <ESP_Init+0xa6>
	UART_send("CW MODE  ---->  3\n\n", PC_UART);
 800064c:	4950      	ldr	r1, [pc, #320]	; (8000790 <ESP_Init+0x1f8>)
 800064e:	4857      	ldr	r0, [pc, #348]	; (80007ac <ESP_Init+0x214>)
 8000650:	f000 fdaa 	bl	80011a8 <UART_send>


	/********** AT+CWJAP="SSID","PASSWD" **********/
	UART_send("Conectando con la RED proporcionada ", PC_UART);
 8000654:	494e      	ldr	r1, [pc, #312]	; (8000790 <ESP_Init+0x1f8>)
 8000656:	4856      	ldr	r0, [pc, #344]	; (80007b0 <ESP_Init+0x218>)
 8000658:	f000 fda6 	bl	80011a8 <UART_send>

	for (int i=0; i<3; i++)
 800065c:	2300      	movs	r3, #0
 800065e:	663b      	str	r3, [r7, #96]	; 0x60
 8000660:	e00a      	b.n	8000678 <ESP_Init+0xe0>
	{
		UART_send(" . ", PC_UART);
 8000662:	494b      	ldr	r1, [pc, #300]	; (8000790 <ESP_Init+0x1f8>)
 8000664:	484e      	ldr	r0, [pc, #312]	; (80007a0 <ESP_Init+0x208>)
 8000666:	f000 fd9f 	bl	80011a8 <UART_send>
		HAL_Delay(1500);
 800066a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800066e:	f002 fa09 	bl	8002a84 <HAL_Delay>
	for (int i=0; i<3; i++)
 8000672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000674:	3301      	adds	r3, #1
 8000676:	663b      	str	r3, [r7, #96]	; 0x60
 8000678:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800067a:	2b02      	cmp	r3, #2
 800067c:	ddf1      	ble.n	8000662 <ESP_Init+0xca>
	}

	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 800067e:	f107 000c 	add.w	r0, r7, #12
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	494b      	ldr	r1, [pc, #300]	; (80007b4 <ESP_Init+0x21c>)
 8000688:	f005 f932 	bl	80058f0 <siprintf>
	UART_send(data, WiFi_UART);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	493c      	ldr	r1, [pc, #240]	; (8000784 <ESP_Init+0x1ec>)
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fd88 	bl	80011a8 <UART_send>
	while (!(UART_waitFor("WIFI GOT IP\r\n\r\nOK\r\n", WiFi_UART)));
 8000698:	bf00      	nop
 800069a:	493a      	ldr	r1, [pc, #232]	; (8000784 <ESP_Init+0x1ec>)
 800069c:	4846      	ldr	r0, [pc, #280]	; (80007b8 <ESP_Init+0x220>)
 800069e:	f000 fe19 	bl	80012d4 <UART_waitFor>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d0f8      	beq.n	800069a <ESP_Init+0x102>
	sprintf (data, "\n\nConectado a  \"%s\"\n\n", SSID);
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	4943      	ldr	r1, [pc, #268]	; (80007bc <ESP_Init+0x224>)
 80006b0:	4618      	mov	r0, r3
 80006b2:	f005 f91d 	bl	80058f0 <siprintf>
	UART_send(data,PC_UART);
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	4935      	ldr	r1, [pc, #212]	; (8000790 <ESP_Init+0x1f8>)
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fd73 	bl	80011a8 <UART_send>
	//UART_send("AT+CIPSTA?\r\n", WiFi_UART);
	//sprintf (data, "AT+CIPSTA?\r\n");


	/********** AT+CIFSR **********/
	UART_send("AT+CIFSR\r\n", WiFi_UART);
 80006c2:	4930      	ldr	r1, [pc, #192]	; (8000784 <ESP_Init+0x1ec>)
 80006c4:	483e      	ldr	r0, [pc, #248]	; (80007c0 <ESP_Init+0x228>)
 80006c6:	f000 fd6f 	bl	80011a8 <UART_send>
	while (!(UART_waitFor("CIFSR:STAIP,\"", WiFi_UART)));
 80006ca:	bf00      	nop
 80006cc:	492d      	ldr	r1, [pc, #180]	; (8000784 <ESP_Init+0x1ec>)
 80006ce:	483d      	ldr	r0, [pc, #244]	; (80007c4 <ESP_Init+0x22c>)
 80006d0:	f000 fe00 	bl	80012d4 <UART_waitFor>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d0f8      	beq.n	80006cc <ESP_Init+0x134>
	while (!(UART_copyUpto("\"",buffer, WiFi_UART)));
 80006da:	bf00      	nop
 80006dc:	4a29      	ldr	r2, [pc, #164]	; (8000784 <ESP_Init+0x1ec>)
 80006de:	493a      	ldr	r1, [pc, #232]	; (80007c8 <ESP_Init+0x230>)
 80006e0:	483a      	ldr	r0, [pc, #232]	; (80007cc <ESP_Init+0x234>)
 80006e2:	f000 fd79 	bl	80011d8 <UART_copyUpto>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0f7      	beq.n	80006dc <ESP_Init+0x144>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 80006ec:	bf00      	nop
 80006ee:	4925      	ldr	r1, [pc, #148]	; (8000784 <ESP_Init+0x1ec>)
 80006f0:	4826      	ldr	r0, [pc, #152]	; (800078c <ESP_Init+0x1f4>)
 80006f2:	f000 fdef 	bl	80012d4 <UART_waitFor>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d0f8      	beq.n	80006ee <ESP_Init+0x156>
	int len = strlen (buffer);
 80006fc:	4832      	ldr	r0, [pc, #200]	; (80007c8 <ESP_Init+0x230>)
 80006fe:	f7ff fd67 	bl	80001d0 <strlen>
 8000702:	4603      	mov	r3, r0
 8000704:	65fb      	str	r3, [r7, #92]	; 0x5c
	buffer[len-1] = '\0';
 8000706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000708:	3b01      	subs	r3, #1
 800070a:	4a2f      	ldr	r2, [pc, #188]	; (80007c8 <ESP_Init+0x230>)
 800070c:	2100      	movs	r1, #0
 800070e:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP :  %s\n\n", buffer);
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	4a2c      	ldr	r2, [pc, #176]	; (80007c8 <ESP_Init+0x230>)
 8000716:	492e      	ldr	r1, [pc, #184]	; (80007d0 <ESP_Init+0x238>)
 8000718:	4618      	mov	r0, r3
 800071a:	f005 f8e9 	bl	80058f0 <siprintf>
	UART_send(data, PC_UART);
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	491b      	ldr	r1, [pc, #108]	; (8000790 <ESP_Init+0x1f8>)
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fd3f 	bl	80011a8 <UART_send>


	/********** AT+CIPMUX=1 **********/
	UART_send("AT+CIPMUX=1\r\n", WiFi_UART);
 800072a:	4916      	ldr	r1, [pc, #88]	; (8000784 <ESP_Init+0x1ec>)
 800072c:	4829      	ldr	r0, [pc, #164]	; (80007d4 <ESP_Init+0x23c>)
 800072e:	f000 fd3b 	bl	80011a8 <UART_send>
	while (!(UART_waitFor("AT+CIPMUX=1\r\r\n\r\nOK\r\n", WiFi_UART)));
 8000732:	bf00      	nop
 8000734:	4913      	ldr	r1, [pc, #76]	; (8000784 <ESP_Init+0x1ec>)
 8000736:	4828      	ldr	r0, [pc, #160]	; (80007d8 <ESP_Init+0x240>)
 8000738:	f000 fdcc 	bl	80012d4 <UART_waitFor>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0f8      	beq.n	8000734 <ESP_Init+0x19c>
	UART_send("CIPMUX  ---->  OK\n\n", PC_UART);
 8000742:	4913      	ldr	r1, [pc, #76]	; (8000790 <ESP_Init+0x1f8>)
 8000744:	4825      	ldr	r0, [pc, #148]	; (80007dc <ESP_Init+0x244>)
 8000746:	f000 fd2f 	bl	80011a8 <UART_send>
	//while (!(UART_waitFor("OK\r\n", WiFi_UART)));
	//UART_send("CIPSTART  ---->  OK\n\n", PC_UART);


	/********** AT+CIPSERVER=1,80 **********/
	UART_send("AT+CIPSERVER=1,80\r\n", WiFi_UART);
 800074a:	490e      	ldr	r1, [pc, #56]	; (8000784 <ESP_Init+0x1ec>)
 800074c:	4824      	ldr	r0, [pc, #144]	; (80007e0 <ESP_Init+0x248>)
 800074e:	f000 fd2b 	bl	80011a8 <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 8000752:	bf00      	nop
 8000754:	490b      	ldr	r1, [pc, #44]	; (8000784 <ESP_Init+0x1ec>)
 8000756:	480d      	ldr	r0, [pc, #52]	; (800078c <ESP_Init+0x1f4>)
 8000758:	f000 fdbc 	bl	80012d4 <UART_waitFor>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d0f8      	beq.n	8000754 <ESP_Init+0x1bc>
	UART_send("CIPSERVER  ---->  OK\n\n", PC_UART);
 8000762:	490b      	ldr	r1, [pc, #44]	; (8000790 <ESP_Init+0x1f8>)
 8000764:	481f      	ldr	r0, [pc, #124]	; (80007e4 <ESP_Init+0x24c>)
 8000766:	f000 fd1f 	bl	80011a8 <UART_send>


	/********** FIN **********/
	UART_send("Conectado a la IP\n\n", PC_UART);
 800076a:	4909      	ldr	r1, [pc, #36]	; (8000790 <ESP_Init+0x1f8>)
 800076c:	481e      	ldr	r0, [pc, #120]	; (80007e8 <ESP_Init+0x250>)
 800076e:	f000 fd1b 	bl	80011a8 <UART_send>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1); // CONNECTED
 8000772:	2201      	movs	r2, #1
 8000774:	2101      	movs	r1, #1
 8000776:	481d      	ldr	r0, [pc, #116]	; (80007ec <ESP_Init+0x254>)
 8000778:	f002 fd00 	bl	800317c <HAL_GPIO_WritePin>
}
 800077c:	bf00      	nop
 800077e:	3768      	adds	r7, #104	; 0x68
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000bdc 	.word	0x20000bdc
 8000788:	08006578 	.word	0x08006578
 800078c:	08006580 	.word	0x08006580
 8000790:	20000b50 	.word	0x20000b50
 8000794:	08006588 	.word	0x08006588
 8000798:	08006598 	.word	0x08006598
 800079c:	080065a4 	.word	0x080065a4
 80007a0:	080065b4 	.word	0x080065b4
 80007a4:	080065b8 	.word	0x080065b8
 80007a8:	080065cc 	.word	0x080065cc
 80007ac:	080065dc 	.word	0x080065dc
 80007b0:	080065f0 	.word	0x080065f0
 80007b4:	08006618 	.word	0x08006618
 80007b8:	08006630 	.word	0x08006630
 80007bc:	08006644 	.word	0x08006644
 80007c0:	0800665c 	.word	0x0800665c
 80007c4:	08006668 	.word	0x08006668
 80007c8:	2000092c 	.word	0x2000092c
 80007cc:	08006678 	.word	0x08006678
 80007d0:	0800667c 	.word	0x0800667c
 80007d4:	08006688 	.word	0x08006688
 80007d8:	08006698 	.word	0x08006698
 80007dc:	080066b0 	.word	0x080066b0
 80007e0:	080066c4 	.word	0x080066c4
 80007e4:	080066d8 	.word	0x080066d8
 80007e8:	080066f0 	.word	0x080066f0
 80007ec:	40020800 	.word	0x40020800

080007f0 <ESP_messageHandler>:
	}
	return -1;
}


void ESP_messageHandler(void){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

	//__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);

	memset(textrc, 0, 100);
 80007f4:	2264      	movs	r2, #100	; 0x64
 80007f6:	2100      	movs	r1, #0
 80007f8:	48a5      	ldr	r0, [pc, #660]	; (8000a90 <ESP_messageHandler+0x2a0>)
 80007fa:	f005 f871 	bl	80058e0 <memset>

	HAL_UART_Receive(&huart2, (uint8_t *)textrc, 100, 100); //(uint8_t *)
 80007fe:	2364      	movs	r3, #100	; 0x64
 8000800:	2264      	movs	r2, #100	; 0x64
 8000802:	49a3      	ldr	r1, [pc, #652]	; (8000a90 <ESP_messageHandler+0x2a0>)
 8000804:	48a3      	ldr	r0, [pc, #652]	; (8000a94 <ESP_messageHandler+0x2a4>)
 8000806:	f004 f916 	bl	8004a36 <HAL_UART_Receive>

	HAL_UART_Transmit(&huart6, (uint8_t *)textrc, 100, HAL_MAX_DELAY);
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	2264      	movs	r2, #100	; 0x64
 8000810:	499f      	ldr	r1, [pc, #636]	; (8000a90 <ESP_messageHandler+0x2a0>)
 8000812:	48a1      	ldr	r0, [pc, #644]	; (8000a98 <ESP_messageHandler+0x2a8>)
 8000814:	f004 f87d 	bl	8004912 <HAL_UART_Transmit>
	UART_send("\n", PC_UART);
 8000818:	499f      	ldr	r1, [pc, #636]	; (8000a98 <ESP_messageHandler+0x2a8>)
 800081a:	48a0      	ldr	r0, [pc, #640]	; (8000a9c <ESP_messageHandler+0x2ac>)
 800081c:	f000 fcc4 	bl	80011a8 <UART_send>

	fragment[0] = textrc[25]; // Asignación de Fragmento
 8000820:	4b9b      	ldr	r3, [pc, #620]	; (8000a90 <ESP_messageHandler+0x2a0>)
 8000822:	7e5a      	ldrb	r2, [r3, #25]
 8000824:	4b9e      	ldr	r3, [pc, #632]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000826:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart6, (uint8_t *)fragment, 1, HAL_MAX_DELAY);
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	2201      	movs	r2, #1
 800082e:	499c      	ldr	r1, [pc, #624]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000830:	4899      	ldr	r0, [pc, #612]	; (8000a98 <ESP_messageHandler+0x2a8>)
 8000832:	f004 f86e 	bl	8004912 <HAL_UART_Transmit>
	UART_send("\n", PC_UART);
 8000836:	4998      	ldr	r1, [pc, #608]	; (8000a98 <ESP_messageHandler+0x2a8>)
 8000838:	4898      	ldr	r0, [pc, #608]	; (8000a9c <ESP_messageHandler+0x2ac>)
 800083a:	f000 fcb5 	bl	80011a8 <UART_send>


	// SEGURIDAD
	if (fragment[0] == 's'){
 800083e:	4b98      	ldr	r3, [pc, #608]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b73      	cmp	r3, #115	; 0x73
 8000844:	d10b      	bne.n	800085e <ESP_messageHandler+0x6e>
		UART_send("SEGURIDAD \n", PC_UART);
 8000846:	4994      	ldr	r1, [pc, #592]	; (8000a98 <ESP_messageHandler+0x2a8>)
 8000848:	4896      	ldr	r0, [pc, #600]	; (8000aa4 <ESP_messageHandler+0x2b4>)
 800084a:	f000 fcad 	bl	80011a8 <UART_send>
		vSeg[0] = textrc[28]; // Alarma Interior
 800084e:	4b90      	ldr	r3, [pc, #576]	; (8000a90 <ESP_messageHandler+0x2a0>)
 8000850:	7f1a      	ldrb	r2, [r3, #28]
 8000852:	4b95      	ldr	r3, [pc, #596]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 8000854:	701a      	strb	r2, [r3, #0]
		vSeg[1] = textrc[31]; // Alarma Exterior
 8000856:	4b8e      	ldr	r3, [pc, #568]	; (8000a90 <ESP_messageHandler+0x2a0>)
 8000858:	7fda      	ldrb	r2, [r3, #31]
 800085a:	4b93      	ldr	r3, [pc, #588]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 800085c:	705a      	strb	r2, [r3, #1]
	}

	// ILUMINACIÓN
	if (fragment[0] == 'i'){
 800085e:	4b90      	ldr	r3, [pc, #576]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b69      	cmp	r3, #105	; 0x69
 8000864:	f040 8228 	bne.w	8000cb8 <ESP_messageHandler+0x4c8>
		UART_send("ILUMINACION \n", PC_UART);
 8000868:	498b      	ldr	r1, [pc, #556]	; (8000a98 <ESP_messageHandler+0x2a8>)
 800086a:	4890      	ldr	r0, [pc, #576]	; (8000aac <ESP_messageHandler+0x2bc>)
 800086c:	f000 fc9c 	bl	80011a8 <UART_send>
		vIlum[0] = textrc[28]; 	// Luz Sala
 8000870:	4b87      	ldr	r3, [pc, #540]	; (8000a90 <ESP_messageHandler+0x2a0>)
 8000872:	7f1a      	ldrb	r2, [r3, #28]
 8000874:	4b8e      	ldr	r3, [pc, #568]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000876:	701a      	strb	r2, [r3, #0]
		vIlum[1] = textrc[31]; 	// Luz Comedor
 8000878:	4b85      	ldr	r3, [pc, #532]	; (8000a90 <ESP_messageHandler+0x2a0>)
 800087a:	7fda      	ldrb	r2, [r3, #31]
 800087c:	4b8c      	ldr	r3, [pc, #560]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 800087e:	705a      	strb	r2, [r3, #1]
		vIlum[2] = textrc[34]; 	// Luz Ambiente
 8000880:	4b83      	ldr	r3, [pc, #524]	; (8000a90 <ESP_messageHandler+0x2a0>)
 8000882:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000886:	4b8a      	ldr	r3, [pc, #552]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000888:	709a      	strb	r2, [r3, #2]
		vIlum[3] = textrc[37]; 	// Luz Recibidor
 800088a:	4b81      	ldr	r3, [pc, #516]	; (8000a90 <ESP_messageHandler+0x2a0>)
 800088c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000890:	4b87      	ldr	r3, [pc, #540]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000892:	70da      	strb	r2, [r3, #3]
		vIlum[4] = textrc[40]; 	// Luz Cocina
 8000894:	4b7e      	ldr	r3, [pc, #504]	; (8000a90 <ESP_messageHandler+0x2a0>)
 8000896:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800089a:	4b85      	ldr	r3, [pc, #532]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 800089c:	711a      	strb	r2, [r3, #4]
		vIlum[5] = textrc[43]; 	// Luz Fregadero
 800089e:	4b7c      	ldr	r3, [pc, #496]	; (8000a90 <ESP_messageHandler+0x2a0>)
 80008a0:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80008a4:	4b82      	ldr	r3, [pc, #520]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 80008a6:	715a      	strb	r2, [r3, #5]
		vIlum[6] = textrc[46]; 	// Luz Baño
 80008a8:	4b79      	ldr	r3, [pc, #484]	; (8000a90 <ESP_messageHandler+0x2a0>)
 80008aa:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80008ae:	4b80      	ldr	r3, [pc, #512]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 80008b0:	719a      	strb	r2, [r3, #6]
		vIlum[7] = textrc[49]; 	// Luz Espejo
 80008b2:	4b77      	ldr	r3, [pc, #476]	; (8000a90 <ESP_messageHandler+0x2a0>)
 80008b4:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80008b8:	4b7d      	ldr	r3, [pc, #500]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 80008ba:	71da      	strb	r2, [r3, #7]
		vIlum[8] = textrc[52]; 	// Luz Dormitorio
 80008bc:	4b74      	ldr	r3, [pc, #464]	; (8000a90 <ESP_messageHandler+0x2a0>)
 80008be:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80008c2:	4b7b      	ldr	r3, [pc, #492]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 80008c4:	721a      	strb	r2, [r3, #8]
		vIlum[9] = textrc[55]; 	// Luz Mesita Izq
 80008c6:	4b72      	ldr	r3, [pc, #456]	; (8000a90 <ESP_messageHandler+0x2a0>)
 80008c8:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80008cc:	4b78      	ldr	r3, [pc, #480]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 80008ce:	725a      	strb	r2, [r3, #9]
		vIlum[10] = textrc[58]; // Luz Mesita Dch
 80008d0:	4b6f      	ldr	r3, [pc, #444]	; (8000a90 <ESP_messageHandler+0x2a0>)
 80008d2:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80008d6:	4b76      	ldr	r3, [pc, #472]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 80008d8:	729a      	strb	r2, [r3, #10]
		vIlum[11] = textrc[61]; // Luz Oficina
 80008da:	4b6d      	ldr	r3, [pc, #436]	; (8000a90 <ESP_messageHandler+0x2a0>)
 80008dc:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80008e0:	4b73      	ldr	r3, [pc, #460]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 80008e2:	72da      	strb	r2, [r3, #11]
		vIlum[12] = textrc[64]; // Luz Gaming
 80008e4:	4b6a      	ldr	r3, [pc, #424]	; (8000a90 <ESP_messageHandler+0x2a0>)
 80008e6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80008ea:	4b71      	ldr	r3, [pc, #452]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 80008ec:	731a      	strb	r2, [r3, #12]
		vIlum[13] = textrc[67]; // Luz Rx100
 80008ee:	4b68      	ldr	r3, [pc, #416]	; (8000a90 <ESP_messageHandler+0x2a0>)
 80008f0:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80008f4:	4b6e      	ldr	r3, [pc, #440]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 80008f6:	735a      	strb	r2, [r3, #13]
		vIlum[14] = textrc[68]; // Luz Rx10
 80008f8:	4b65      	ldr	r3, [pc, #404]	; (8000a90 <ESP_messageHandler+0x2a0>)
 80008fa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80008fe:	4b6c      	ldr	r3, [pc, #432]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000900:	739a      	strb	r2, [r3, #14]
		vIlum[15] = textrc[69]; // Luz Rx1
 8000902:	4b63      	ldr	r3, [pc, #396]	; (8000a90 <ESP_messageHandler+0x2a0>)
 8000904:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8000908:	4b69      	ldr	r3, [pc, #420]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 800090a:	73da      	strb	r2, [r3, #15]
		vIlum[16] = textrc[72]; // Luz Gx100
 800090c:	4b60      	ldr	r3, [pc, #384]	; (8000a90 <ESP_messageHandler+0x2a0>)
 800090e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8000912:	4b67      	ldr	r3, [pc, #412]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000914:	741a      	strb	r2, [r3, #16]
		vIlum[17] = textrc[73]; // Luz Gx10
 8000916:	4b5e      	ldr	r3, [pc, #376]	; (8000a90 <ESP_messageHandler+0x2a0>)
 8000918:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800091c:	4b64      	ldr	r3, [pc, #400]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 800091e:	745a      	strb	r2, [r3, #17]
		vIlum[18] = textrc[74]; // Luz Gx1
 8000920:	4b5b      	ldr	r3, [pc, #364]	; (8000a90 <ESP_messageHandler+0x2a0>)
 8000922:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8000926:	4b62      	ldr	r3, [pc, #392]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000928:	749a      	strb	r2, [r3, #18]
		vIlum[19] = textrc[77]; // Luz Bx100
 800092a:	4b59      	ldr	r3, [pc, #356]	; (8000a90 <ESP_messageHandler+0x2a0>)
 800092c:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8000930:	4b5f      	ldr	r3, [pc, #380]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000932:	74da      	strb	r2, [r3, #19]
		vIlum[20] = textrc[78]; // Luz Bx10
 8000934:	4b56      	ldr	r3, [pc, #344]	; (8000a90 <ESP_messageHandler+0x2a0>)
 8000936:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 800093a:	4b5d      	ldr	r3, [pc, #372]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 800093c:	751a      	strb	r2, [r3, #20]
		vIlum[21] = textrc[79]; // Luz Bx1
 800093e:	4b54      	ldr	r3, [pc, #336]	; (8000a90 <ESP_messageHandler+0x2a0>)
 8000940:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8000944:	4b5a      	ldr	r3, [pc, #360]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000946:	755a      	strb	r2, [r3, #21]
		vIlum[22] = textrc[82]; // Luz Garaje
 8000948:	4b51      	ldr	r3, [pc, #324]	; (8000a90 <ESP_messageHandler+0x2a0>)
 800094a:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 800094e:	4b58      	ldr	r3, [pc, #352]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000950:	759a      	strb	r2, [r3, #22]
		vIlum[23] = textrc[85]; // Luz Jardín
 8000952:	4b4f      	ldr	r3, [pc, #316]	; (8000a90 <ESP_messageHandler+0x2a0>)
 8000954:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8000958:	4b55      	ldr	r3, [pc, #340]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 800095a:	75da      	strb	r2, [r3, #23]
		vIlum[24] = textrc[88]; // Luz Porche
 800095c:	4b4c      	ldr	r3, [pc, #304]	; (8000a90 <ESP_messageHandler+0x2a0>)
 800095e:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8000962:	4b53      	ldr	r3, [pc, #332]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000964:	761a      	strb	r2, [r3, #24]
		vIlum[25] = textrc[91]; // Luz Tendedero
 8000966:	4b4a      	ldr	r3, [pc, #296]	; (8000a90 <ESP_messageHandler+0x2a0>)
 8000968:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 800096c:	4b50      	ldr	r3, [pc, #320]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 800096e:	765a      	strb	r2, [r3, #25]


		if(vIlum[0] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8000970:	4b4f      	ldr	r3, [pc, #316]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b30      	cmp	r3, #48	; 0x30
 8000976:	d105      	bne.n	8000984 <ESP_messageHandler+0x194>
 8000978:	2200      	movs	r2, #0
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	484d      	ldr	r0, [pc, #308]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 800097e:	f002 fbfd 	bl	800317c <HAL_GPIO_WritePin>
 8000982:	e008      	b.n	8000996 <ESP_messageHandler+0x1a6>
		else if(vIlum[0] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 8000984:	4b4a      	ldr	r3, [pc, #296]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b31      	cmp	r3, #49	; 0x31
 800098a:	d104      	bne.n	8000996 <ESP_messageHandler+0x1a6>
 800098c:	2201      	movs	r2, #1
 800098e:	2180      	movs	r1, #128	; 0x80
 8000990:	4848      	ldr	r0, [pc, #288]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 8000992:	f002 fbf3 	bl	800317c <HAL_GPIO_WritePin>

		if(vIlum[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000996:	4b46      	ldr	r3, [pc, #280]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000998:	785b      	ldrb	r3, [r3, #1]
 800099a:	2b30      	cmp	r3, #48	; 0x30
 800099c:	d105      	bne.n	80009aa <ESP_messageHandler+0x1ba>
 800099e:	2200      	movs	r2, #0
 80009a0:	2140      	movs	r1, #64	; 0x40
 80009a2:	4844      	ldr	r0, [pc, #272]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 80009a4:	f002 fbea 	bl	800317c <HAL_GPIO_WritePin>
 80009a8:	e008      	b.n	80009bc <ESP_messageHandler+0x1cc>
		else if(vIlum[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 80009aa:	4b41      	ldr	r3, [pc, #260]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 80009ac:	785b      	ldrb	r3, [r3, #1]
 80009ae:	2b31      	cmp	r3, #49	; 0x31
 80009b0:	d104      	bne.n	80009bc <ESP_messageHandler+0x1cc>
 80009b2:	2201      	movs	r2, #1
 80009b4:	2140      	movs	r1, #64	; 0x40
 80009b6:	483f      	ldr	r0, [pc, #252]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 80009b8:	f002 fbe0 	bl	800317c <HAL_GPIO_WritePin>

		if(vIlum[2] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80009bc:	4b3c      	ldr	r3, [pc, #240]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 80009be:	789b      	ldrb	r3, [r3, #2]
 80009c0:	2b30      	cmp	r3, #48	; 0x30
 80009c2:	d105      	bne.n	80009d0 <ESP_messageHandler+0x1e0>
 80009c4:	2200      	movs	r2, #0
 80009c6:	2120      	movs	r1, #32
 80009c8:	483a      	ldr	r0, [pc, #232]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 80009ca:	f002 fbd7 	bl	800317c <HAL_GPIO_WritePin>
 80009ce:	e008      	b.n	80009e2 <ESP_messageHandler+0x1f2>
		else if(vIlum[2] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80009d0:	4b37      	ldr	r3, [pc, #220]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 80009d2:	789b      	ldrb	r3, [r3, #2]
 80009d4:	2b31      	cmp	r3, #49	; 0x31
 80009d6:	d104      	bne.n	80009e2 <ESP_messageHandler+0x1f2>
 80009d8:	2201      	movs	r2, #1
 80009da:	2120      	movs	r1, #32
 80009dc:	4835      	ldr	r0, [pc, #212]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 80009de:	f002 fbcd 	bl	800317c <HAL_GPIO_WritePin>

		if(vIlum[3] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80009e2:	4b33      	ldr	r3, [pc, #204]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 80009e4:	78db      	ldrb	r3, [r3, #3]
 80009e6:	2b30      	cmp	r3, #48	; 0x30
 80009e8:	d105      	bne.n	80009f6 <ESP_messageHandler+0x206>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2110      	movs	r1, #16
 80009ee:	4831      	ldr	r0, [pc, #196]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 80009f0:	f002 fbc4 	bl	800317c <HAL_GPIO_WritePin>
 80009f4:	e008      	b.n	8000a08 <ESP_messageHandler+0x218>
		else if(vIlum[3] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80009f6:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 80009f8:	78db      	ldrb	r3, [r3, #3]
 80009fa:	2b31      	cmp	r3, #49	; 0x31
 80009fc:	d104      	bne.n	8000a08 <ESP_messageHandler+0x218>
 80009fe:	2201      	movs	r2, #1
 8000a00:	2110      	movs	r1, #16
 8000a02:	482c      	ldr	r0, [pc, #176]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 8000a04:	f002 fbba 	bl	800317c <HAL_GPIO_WritePin>

		if(vIlum[4] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000a0a:	791b      	ldrb	r3, [r3, #4]
 8000a0c:	2b30      	cmp	r3, #48	; 0x30
 8000a0e:	d105      	bne.n	8000a1c <ESP_messageHandler+0x22c>
 8000a10:	2200      	movs	r2, #0
 8000a12:	2108      	movs	r1, #8
 8000a14:	4827      	ldr	r0, [pc, #156]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 8000a16:	f002 fbb1 	bl	800317c <HAL_GPIO_WritePin>
 8000a1a:	e008      	b.n	8000a2e <ESP_messageHandler+0x23e>
		else if(vIlum[4] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8000a1c:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000a1e:	791b      	ldrb	r3, [r3, #4]
 8000a20:	2b31      	cmp	r3, #49	; 0x31
 8000a22:	d104      	bne.n	8000a2e <ESP_messageHandler+0x23e>
 8000a24:	2201      	movs	r2, #1
 8000a26:	2108      	movs	r1, #8
 8000a28:	4822      	ldr	r0, [pc, #136]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 8000a2a:	f002 fba7 	bl	800317c <HAL_GPIO_WritePin>

		if(vIlum[5] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, RESET);
 8000a2e:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000a30:	795b      	ldrb	r3, [r3, #5]
 8000a32:	2b30      	cmp	r3, #48	; 0x30
 8000a34:	d105      	bne.n	8000a42 <ESP_messageHandler+0x252>
 8000a36:	2200      	movs	r2, #0
 8000a38:	2180      	movs	r1, #128	; 0x80
 8000a3a:	481f      	ldr	r0, [pc, #124]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000a3c:	f002 fb9e 	bl	800317c <HAL_GPIO_WritePin>
 8000a40:	e008      	b.n	8000a54 <ESP_messageHandler+0x264>
		else if(vIlum[5] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET);
 8000a42:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000a44:	795b      	ldrb	r3, [r3, #5]
 8000a46:	2b31      	cmp	r3, #49	; 0x31
 8000a48:	d104      	bne.n	8000a54 <ESP_messageHandler+0x264>
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2180      	movs	r1, #128	; 0x80
 8000a4e:	481a      	ldr	r0, [pc, #104]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000a50:	f002 fb94 	bl	800317c <HAL_GPIO_WritePin>

		if(vIlum[6] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, RESET);
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000a56:	799b      	ldrb	r3, [r3, #6]
 8000a58:	2b30      	cmp	r3, #48	; 0x30
 8000a5a:	d105      	bne.n	8000a68 <ESP_messageHandler+0x278>
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2140      	movs	r1, #64	; 0x40
 8000a60:	4815      	ldr	r0, [pc, #84]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000a62:	f002 fb8b 	bl	800317c <HAL_GPIO_WritePin>
 8000a66:	e008      	b.n	8000a7a <ESP_messageHandler+0x28a>
		else if(vIlum[6] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, SET);
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000a6a:	799b      	ldrb	r3, [r3, #6]
 8000a6c:	2b31      	cmp	r3, #49	; 0x31
 8000a6e:	d104      	bne.n	8000a7a <ESP_messageHandler+0x28a>
 8000a70:	2201      	movs	r2, #1
 8000a72:	2140      	movs	r1, #64	; 0x40
 8000a74:	4810      	ldr	r0, [pc, #64]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000a76:	f002 fb81 	bl	800317c <HAL_GPIO_WritePin>

		if(vIlum[7] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, RESET);
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000a7c:	79db      	ldrb	r3, [r3, #7]
 8000a7e:	2b30      	cmp	r3, #48	; 0x30
 8000a80:	d11c      	bne.n	8000abc <ESP_messageHandler+0x2cc>
 8000a82:	2200      	movs	r2, #0
 8000a84:	2120      	movs	r1, #32
 8000a86:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000a88:	f002 fb78 	bl	800317c <HAL_GPIO_WritePin>
 8000a8c:	e01f      	b.n	8000ace <ESP_messageHandler+0x2de>
 8000a8e:	bf00      	nop
 8000a90:	20000964 	.word	0x20000964
 8000a94:	20000bdc 	.word	0x20000bdc
 8000a98:	20000b50 	.word	0x20000b50
 8000a9c:	0800676c 	.word	0x0800676c
 8000aa0:	2000095c 	.word	0x2000095c
 8000aa4:	08006770 	.word	0x08006770
 8000aa8:	200009d4 	.word	0x200009d4
 8000aac:	0800677c 	.word	0x0800677c
 8000ab0:	20000940 	.word	0x20000940
 8000ab4:	40020400 	.word	0x40020400
 8000ab8:	40020c00 	.word	0x40020c00
		else if(vIlum[7] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, SET);
 8000abc:	4b72      	ldr	r3, [pc, #456]	; (8000c88 <ESP_messageHandler+0x498>)
 8000abe:	79db      	ldrb	r3, [r3, #7]
 8000ac0:	2b31      	cmp	r3, #49	; 0x31
 8000ac2:	d104      	bne.n	8000ace <ESP_messageHandler+0x2de>
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2120      	movs	r1, #32
 8000ac8:	4870      	ldr	r0, [pc, #448]	; (8000c8c <ESP_messageHandler+0x49c>)
 8000aca:	f002 fb57 	bl	800317c <HAL_GPIO_WritePin>

		if(vIlum[8] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
 8000ace:	4b6e      	ldr	r3, [pc, #440]	; (8000c88 <ESP_messageHandler+0x498>)
 8000ad0:	7a1b      	ldrb	r3, [r3, #8]
 8000ad2:	2b30      	cmp	r3, #48	; 0x30
 8000ad4:	d105      	bne.n	8000ae2 <ESP_messageHandler+0x2f2>
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2110      	movs	r1, #16
 8000ada:	486c      	ldr	r0, [pc, #432]	; (8000c8c <ESP_messageHandler+0x49c>)
 8000adc:	f002 fb4e 	bl	800317c <HAL_GPIO_WritePin>
 8000ae0:	e008      	b.n	8000af4 <ESP_messageHandler+0x304>
		else if(vIlum[8] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 8000ae2:	4b69      	ldr	r3, [pc, #420]	; (8000c88 <ESP_messageHandler+0x498>)
 8000ae4:	7a1b      	ldrb	r3, [r3, #8]
 8000ae6:	2b31      	cmp	r3, #49	; 0x31
 8000ae8:	d104      	bne.n	8000af4 <ESP_messageHandler+0x304>
 8000aea:	2201      	movs	r2, #1
 8000aec:	2110      	movs	r1, #16
 8000aee:	4867      	ldr	r0, [pc, #412]	; (8000c8c <ESP_messageHandler+0x49c>)
 8000af0:	f002 fb44 	bl	800317c <HAL_GPIO_WritePin>

		if(vIlum[9] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, RESET);
 8000af4:	4b64      	ldr	r3, [pc, #400]	; (8000c88 <ESP_messageHandler+0x498>)
 8000af6:	7a5b      	ldrb	r3, [r3, #9]
 8000af8:	2b30      	cmp	r3, #48	; 0x30
 8000afa:	d105      	bne.n	8000b08 <ESP_messageHandler+0x318>
 8000afc:	2200      	movs	r2, #0
 8000afe:	2108      	movs	r1, #8
 8000b00:	4862      	ldr	r0, [pc, #392]	; (8000c8c <ESP_messageHandler+0x49c>)
 8000b02:	f002 fb3b 	bl	800317c <HAL_GPIO_WritePin>
 8000b06:	e008      	b.n	8000b1a <ESP_messageHandler+0x32a>
		else if(vIlum[9] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, SET);
 8000b08:	4b5f      	ldr	r3, [pc, #380]	; (8000c88 <ESP_messageHandler+0x498>)
 8000b0a:	7a5b      	ldrb	r3, [r3, #9]
 8000b0c:	2b31      	cmp	r3, #49	; 0x31
 8000b0e:	d104      	bne.n	8000b1a <ESP_messageHandler+0x32a>
 8000b10:	2201      	movs	r2, #1
 8000b12:	2108      	movs	r1, #8
 8000b14:	485d      	ldr	r0, [pc, #372]	; (8000c8c <ESP_messageHandler+0x49c>)
 8000b16:	f002 fb31 	bl	800317c <HAL_GPIO_WritePin>

		if(vIlum[10] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET);
 8000b1a:	4b5b      	ldr	r3, [pc, #364]	; (8000c88 <ESP_messageHandler+0x498>)
 8000b1c:	7a9b      	ldrb	r3, [r3, #10]
 8000b1e:	2b30      	cmp	r3, #48	; 0x30
 8000b20:	d105      	bne.n	8000b2e <ESP_messageHandler+0x33e>
 8000b22:	2200      	movs	r2, #0
 8000b24:	2104      	movs	r1, #4
 8000b26:	4859      	ldr	r0, [pc, #356]	; (8000c8c <ESP_messageHandler+0x49c>)
 8000b28:	f002 fb28 	bl	800317c <HAL_GPIO_WritePin>
 8000b2c:	e008      	b.n	8000b40 <ESP_messageHandler+0x350>
		else if(vIlum[10] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8000b2e:	4b56      	ldr	r3, [pc, #344]	; (8000c88 <ESP_messageHandler+0x498>)
 8000b30:	7a9b      	ldrb	r3, [r3, #10]
 8000b32:	2b31      	cmp	r3, #49	; 0x31
 8000b34:	d104      	bne.n	8000b40 <ESP_messageHandler+0x350>
 8000b36:	2201      	movs	r2, #1
 8000b38:	2104      	movs	r1, #4
 8000b3a:	4854      	ldr	r0, [pc, #336]	; (8000c8c <ESP_messageHandler+0x49c>)
 8000b3c:	f002 fb1e 	bl	800317c <HAL_GPIO_WritePin>

		if(vIlum[11] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET);
 8000b40:	4b51      	ldr	r3, [pc, #324]	; (8000c88 <ESP_messageHandler+0x498>)
 8000b42:	7adb      	ldrb	r3, [r3, #11]
 8000b44:	2b30      	cmp	r3, #48	; 0x30
 8000b46:	d105      	bne.n	8000b54 <ESP_messageHandler+0x364>
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2102      	movs	r1, #2
 8000b4c:	484f      	ldr	r0, [pc, #316]	; (8000c8c <ESP_messageHandler+0x49c>)
 8000b4e:	f002 fb15 	bl	800317c <HAL_GPIO_WritePin>
 8000b52:	e008      	b.n	8000b66 <ESP_messageHandler+0x376>
		else if(vIlum[11] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, SET);
 8000b54:	4b4c      	ldr	r3, [pc, #304]	; (8000c88 <ESP_messageHandler+0x498>)
 8000b56:	7adb      	ldrb	r3, [r3, #11]
 8000b58:	2b31      	cmp	r3, #49	; 0x31
 8000b5a:	d104      	bne.n	8000b66 <ESP_messageHandler+0x376>
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2102      	movs	r1, #2
 8000b60:	484a      	ldr	r0, [pc, #296]	; (8000c8c <ESP_messageHandler+0x49c>)
 8000b62:	f002 fb0b 	bl	800317c <HAL_GPIO_WritePin>

		if(vIlum[12] == '0'){
 8000b66:	4b48      	ldr	r3, [pc, #288]	; (8000c88 <ESP_messageHandler+0x498>)
 8000b68:	7b1b      	ldrb	r3, [r3, #12]
 8000b6a:	2b30      	cmp	r3, #48	; 0x30
 8000b6c:	d10c      	bne.n	8000b88 <ESP_messageHandler+0x398>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000b6e:	4b48      	ldr	r3, [pc, #288]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2200      	movs	r2, #0
 8000b74:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000b76:	4b46      	ldr	r3, [pc, #280]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000b7e:	4b44      	ldr	r3, [pc, #272]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2200      	movs	r2, #0
 8000b84:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b86:	e036      	b.n	8000bf6 <ESP_messageHandler+0x406>
		}
		else if(vIlum[12] == '1'){
 8000b88:	4b3f      	ldr	r3, [pc, #252]	; (8000c88 <ESP_messageHandler+0x498>)
 8000b8a:	7b1b      	ldrb	r3, [r3, #12]
 8000b8c:	2b31      	cmp	r3, #49	; 0x31
 8000b8e:	d132      	bne.n	8000bf6 <ESP_messageHandler+0x406>

			//uint8_t r, g, b;

			r = rgb_value (vIlum[13],vIlum[14],vIlum[15]);
 8000b90:	4b3d      	ldr	r3, [pc, #244]	; (8000c88 <ESP_messageHandler+0x498>)
 8000b92:	7b5b      	ldrb	r3, [r3, #13]
 8000b94:	4a3c      	ldr	r2, [pc, #240]	; (8000c88 <ESP_messageHandler+0x498>)
 8000b96:	7b91      	ldrb	r1, [r2, #14]
 8000b98:	4a3b      	ldr	r2, [pc, #236]	; (8000c88 <ESP_messageHandler+0x498>)
 8000b9a:	7bd2      	ldrb	r2, [r2, #15]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 fc9f 	bl	80014e0 <rgb_value>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4a3b      	ldr	r2, [pc, #236]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000ba6:	6013      	str	r3, [r2, #0]
			g = rgb_value (vIlum[16],vIlum[17],vIlum[18]);
 8000ba8:	4b37      	ldr	r3, [pc, #220]	; (8000c88 <ESP_messageHandler+0x498>)
 8000baa:	7c1b      	ldrb	r3, [r3, #16]
 8000bac:	4a36      	ldr	r2, [pc, #216]	; (8000c88 <ESP_messageHandler+0x498>)
 8000bae:	7c51      	ldrb	r1, [r2, #17]
 8000bb0:	4a35      	ldr	r2, [pc, #212]	; (8000c88 <ESP_messageHandler+0x498>)
 8000bb2:	7c92      	ldrb	r2, [r2, #18]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 fc93 	bl	80014e0 <rgb_value>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	4a36      	ldr	r2, [pc, #216]	; (8000c98 <ESP_messageHandler+0x4a8>)
 8000bbe:	6013      	str	r3, [r2, #0]
			b = rgb_value (vIlum[19],vIlum[20],vIlum[21]);
 8000bc0:	4b31      	ldr	r3, [pc, #196]	; (8000c88 <ESP_messageHandler+0x498>)
 8000bc2:	7cdb      	ldrb	r3, [r3, #19]
 8000bc4:	4a30      	ldr	r2, [pc, #192]	; (8000c88 <ESP_messageHandler+0x498>)
 8000bc6:	7d11      	ldrb	r1, [r2, #20]
 8000bc8:	4a2f      	ldr	r2, [pc, #188]	; (8000c88 <ESP_messageHandler+0x498>)
 8000bca:	7d52      	ldrb	r2, [r2, #21]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 fc87 	bl	80014e0 <rgb_value>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4a31      	ldr	r2, [pc, #196]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000bd6:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, g); // PA8
 8000bd8:	4b2f      	ldr	r3, [pc, #188]	; (8000c98 <ESP_messageHandler+0x4a8>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b2c      	ldr	r3, [pc, #176]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, r); // PA9
 8000be2:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b); // PA10
 8000bec:	4b2b      	ldr	r3, [pc, #172]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		if(vIlum[22] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 8000bf6:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <ESP_messageHandler+0x498>)
 8000bf8:	7d9b      	ldrb	r3, [r3, #22]
 8000bfa:	2b30      	cmp	r3, #48	; 0x30
 8000bfc:	d106      	bne.n	8000c0c <ESP_messageHandler+0x41c>
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c04:	4826      	ldr	r0, [pc, #152]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000c06:	f002 fab9 	bl	800317c <HAL_GPIO_WritePin>
 8000c0a:	e009      	b.n	8000c20 <ESP_messageHandler+0x430>
		else if(vIlum[22] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <ESP_messageHandler+0x498>)
 8000c0e:	7d9b      	ldrb	r3, [r3, #22]
 8000c10:	2b31      	cmp	r3, #49	; 0x31
 8000c12:	d105      	bne.n	8000c20 <ESP_messageHandler+0x430>
 8000c14:	2201      	movs	r2, #1
 8000c16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c1a:	4821      	ldr	r0, [pc, #132]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000c1c:	f002 faae 	bl	800317c <HAL_GPIO_WritePin>

		if(vIlum[23] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET);
 8000c20:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <ESP_messageHandler+0x498>)
 8000c22:	7ddb      	ldrb	r3, [r3, #23]
 8000c24:	2b30      	cmp	r3, #48	; 0x30
 8000c26:	d105      	bne.n	8000c34 <ESP_messageHandler+0x444>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	4817      	ldr	r0, [pc, #92]	; (8000c8c <ESP_messageHandler+0x49c>)
 8000c2e:	f002 faa5 	bl	800317c <HAL_GPIO_WritePin>
 8000c32:	e008      	b.n	8000c46 <ESP_messageHandler+0x456>
		else if(vIlum[23] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <ESP_messageHandler+0x498>)
 8000c36:	7ddb      	ldrb	r3, [r3, #23]
 8000c38:	2b31      	cmp	r3, #49	; 0x31
 8000c3a:	d104      	bne.n	8000c46 <ESP_messageHandler+0x456>
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2101      	movs	r1, #1
 8000c40:	4812      	ldr	r0, [pc, #72]	; (8000c8c <ESP_messageHandler+0x49c>)
 8000c42:	f002 fa9b 	bl	800317c <HAL_GPIO_WritePin>

		if(vIlum[24] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET);
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <ESP_messageHandler+0x498>)
 8000c48:	7e1b      	ldrb	r3, [r3, #24]
 8000c4a:	2b30      	cmp	r3, #48	; 0x30
 8000c4c:	d106      	bne.n	8000c5c <ESP_messageHandler+0x46c>
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c54:	4812      	ldr	r0, [pc, #72]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000c56:	f002 fa91 	bl	800317c <HAL_GPIO_WritePin>
 8000c5a:	e009      	b.n	8000c70 <ESP_messageHandler+0x480>
		else if(vIlum[24] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <ESP_messageHandler+0x498>)
 8000c5e:	7e1b      	ldrb	r3, [r3, #24]
 8000c60:	2b31      	cmp	r3, #49	; 0x31
 8000c62:	d105      	bne.n	8000c70 <ESP_messageHandler+0x480>
 8000c64:	2201      	movs	r2, #1
 8000c66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c6a:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000c6c:	f002 fa86 	bl	800317c <HAL_GPIO_WritePin>

		if(vIlum[25] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET);
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <ESP_messageHandler+0x498>)
 8000c72:	7e5b      	ldrb	r3, [r3, #25]
 8000c74:	2b30      	cmp	r3, #48	; 0x30
 8000c76:	d115      	bne.n	8000ca4 <ESP_messageHandler+0x4b4>
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c7e:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000c80:	f002 fa7c 	bl	800317c <HAL_GPIO_WritePin>
 8000c84:	e018      	b.n	8000cb8 <ESP_messageHandler+0x4c8>
 8000c86:	bf00      	nop
 8000c88:	20000940 	.word	0x20000940
 8000c8c:	40020c00 	.word	0x40020c00
 8000c90:	20000b08 	.word	0x20000b08
 8000c94:	200008e4 	.word	0x200008e4
 8000c98:	200008d8 	.word	0x200008d8
 8000c9c:	200008d4 	.word	0x200008d4
 8000ca0:	40020800 	.word	0x40020800
		else if(vIlum[25] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 8000ca4:	4b53      	ldr	r3, [pc, #332]	; (8000df4 <ESP_messageHandler+0x604>)
 8000ca6:	7e5b      	ldrb	r3, [r3, #25]
 8000ca8:	2b31      	cmp	r3, #49	; 0x31
 8000caa:	d105      	bne.n	8000cb8 <ESP_messageHandler+0x4c8>
 8000cac:	2201      	movs	r2, #1
 8000cae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cb2:	4851      	ldr	r0, [pc, #324]	; (8000df8 <ESP_messageHandler+0x608>)
 8000cb4:	f002 fa62 	bl	800317c <HAL_GPIO_WritePin>
	}

	// PUERTAS Y VENTANAS
	if (fragment[0] == 'p'){
 8000cb8:	4b50      	ldr	r3, [pc, #320]	; (8000dfc <ESP_messageHandler+0x60c>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b70      	cmp	r3, #112	; 0x70
 8000cbe:	d107      	bne.n	8000cd0 <ESP_messageHandler+0x4e0>
		UART_send("PUERTAS Y VENTANAS (PUERTA PARCELA)\n", PC_UART);
 8000cc0:	494f      	ldr	r1, [pc, #316]	; (8000e00 <ESP_messageHandler+0x610>)
 8000cc2:	4850      	ldr	r0, [pc, #320]	; (8000e04 <ESP_messageHandler+0x614>)
 8000cc4:	f000 fa70 	bl	80011a8 <UART_send>
		vVent[1] = textrc[28]; // Puerta Parcela
 8000cc8:	4b4f      	ldr	r3, [pc, #316]	; (8000e08 <ESP_messageHandler+0x618>)
 8000cca:	7f1a      	ldrb	r2, [r3, #28]
 8000ccc:	4b4f      	ldr	r3, [pc, #316]	; (8000e0c <ESP_messageHandler+0x61c>)
 8000cce:	705a      	strb	r2, [r3, #1]
	}
	if (fragment[0] == 'g'){
 8000cd0:	4b4a      	ldr	r3, [pc, #296]	; (8000dfc <ESP_messageHandler+0x60c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b67      	cmp	r3, #103	; 0x67
 8000cd6:	d107      	bne.n	8000ce8 <ESP_messageHandler+0x4f8>
		UART_send("PUERTAS Y VENTANAS (PUERTA GARAJE)\n", PC_UART);
 8000cd8:	4949      	ldr	r1, [pc, #292]	; (8000e00 <ESP_messageHandler+0x610>)
 8000cda:	484d      	ldr	r0, [pc, #308]	; (8000e10 <ESP_messageHandler+0x620>)
 8000cdc:	f000 fa64 	bl	80011a8 <UART_send>
		vVent[0] = textrc[31]; // Puerta Garaje
 8000ce0:	4b49      	ldr	r3, [pc, #292]	; (8000e08 <ESP_messageHandler+0x618>)
 8000ce2:	7fda      	ldrb	r2, [r3, #31]
 8000ce4:	4b49      	ldr	r3, [pc, #292]	; (8000e0c <ESP_messageHandler+0x61c>)
 8000ce6:	701a      	strb	r2, [r3, #0]
	}
	if (fragment[0] == 'l'){
 8000ce8:	4b44      	ldr	r3, [pc, #272]	; (8000dfc <ESP_messageHandler+0x60c>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b6c      	cmp	r3, #108	; 0x6c
 8000cee:	d108      	bne.n	8000d02 <ESP_messageHandler+0x512>
		UART_send("PUERTAS Y VENTANAS (VENTANA SALÓN)\n", PC_UART);
 8000cf0:	4943      	ldr	r1, [pc, #268]	; (8000e00 <ESP_messageHandler+0x610>)
 8000cf2:	4848      	ldr	r0, [pc, #288]	; (8000e14 <ESP_messageHandler+0x624>)
 8000cf4:	f000 fa58 	bl	80011a8 <UART_send>
		vVent[2] = textrc[34]; // Ventana Salón
 8000cf8:	4b43      	ldr	r3, [pc, #268]	; (8000e08 <ESP_messageHandler+0x618>)
 8000cfa:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000cfe:	4b43      	ldr	r3, [pc, #268]	; (8000e0c <ESP_messageHandler+0x61c>)
 8000d00:	709a      	strb	r2, [r3, #2]
	}
	if (fragment[0] == 'd'){
 8000d02:	4b3e      	ldr	r3, [pc, #248]	; (8000dfc <ESP_messageHandler+0x60c>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b64      	cmp	r3, #100	; 0x64
 8000d08:	d108      	bne.n	8000d1c <ESP_messageHandler+0x52c>
		UART_send("PUERTAS Y VENTANAS (VENTANA DORMITORIO)\n", PC_UART);
 8000d0a:	493d      	ldr	r1, [pc, #244]	; (8000e00 <ESP_messageHandler+0x610>)
 8000d0c:	4842      	ldr	r0, [pc, #264]	; (8000e18 <ESP_messageHandler+0x628>)
 8000d0e:	f000 fa4b 	bl	80011a8 <UART_send>
		vVent[3] = textrc[37]; // Ventana Dormitorio
 8000d12:	4b3d      	ldr	r3, [pc, #244]	; (8000e08 <ESP_messageHandler+0x618>)
 8000d14:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000d18:	4b3c      	ldr	r3, [pc, #240]	; (8000e0c <ESP_messageHandler+0x61c>)
 8000d1a:	70da      	strb	r2, [r3, #3]
	}
	if (fragment[0] == 'o'){
 8000d1c:	4b37      	ldr	r3, [pc, #220]	; (8000dfc <ESP_messageHandler+0x60c>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b6f      	cmp	r3, #111	; 0x6f
 8000d22:	d108      	bne.n	8000d36 <ESP_messageHandler+0x546>
		UART_send("PUERTAS Y VENTANAS (VENTANA OFICINA)\n", PC_UART);
 8000d24:	4936      	ldr	r1, [pc, #216]	; (8000e00 <ESP_messageHandler+0x610>)
 8000d26:	483d      	ldr	r0, [pc, #244]	; (8000e1c <ESP_messageHandler+0x62c>)
 8000d28:	f000 fa3e 	bl	80011a8 <UART_send>
		vVent[4] = textrc[40]; // Ventana Oficina
 8000d2c:	4b36      	ldr	r3, [pc, #216]	; (8000e08 <ESP_messageHandler+0x618>)
 8000d2e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000d32:	4b36      	ldr	r3, [pc, #216]	; (8000e0c <ESP_messageHandler+0x61c>)
 8000d34:	711a      	strb	r2, [r3, #4]
	// TIEMPO
	if (fragment[0] == 't'){
    }

	// EXTERIOR
	if (fragment[0] == 'e'){
 8000d36:	4b31      	ldr	r3, [pc, #196]	; (8000dfc <ESP_messageHandler+0x60c>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b65      	cmp	r3, #101	; 0x65
 8000d3c:	d157      	bne.n	8000dee <ESP_messageHandler+0x5fe>
		UART_send("EXTERIOR\n", PC_UART);
 8000d3e:	4930      	ldr	r1, [pc, #192]	; (8000e00 <ESP_messageHandler+0x610>)
 8000d40:	4837      	ldr	r0, [pc, #220]	; (8000e20 <ESP_messageHandler+0x630>)
 8000d42:	f000 fa31 	bl	80011a8 <UART_send>
		vExt[0] = textrc[28]; 	// Toldo Tendedero
 8000d46:	4b30      	ldr	r3, [pc, #192]	; (8000e08 <ESP_messageHandler+0x618>)
 8000d48:	7f1a      	ldrb	r2, [r3, #28]
 8000d4a:	4b36      	ldr	r3, [pc, #216]	; (8000e24 <ESP_messageHandler+0x634>)
 8000d4c:	701a      	strb	r2, [r3, #0]
		vExt[1] = textrc[31]; 	// Luz Tendedero
 8000d4e:	4b2e      	ldr	r3, [pc, #184]	; (8000e08 <ESP_messageHandler+0x618>)
 8000d50:	7fda      	ldrb	r2, [r3, #31]
 8000d52:	4b34      	ldr	r3, [pc, #208]	; (8000e24 <ESP_messageHandler+0x634>)
 8000d54:	705a      	strb	r2, [r3, #1]
		vExt[2] = textrc[34]; 	// Luz Porche
 8000d56:	4b2c      	ldr	r3, [pc, #176]	; (8000e08 <ESP_messageHandler+0x618>)
 8000d58:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000d5c:	4b31      	ldr	r3, [pc, #196]	; (8000e24 <ESP_messageHandler+0x634>)
 8000d5e:	709a      	strb	r2, [r3, #2]
		vExt[3] = textrc[37]; 	// Luz Jardín
 8000d60:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <ESP_messageHandler+0x618>)
 8000d62:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000d66:	4b2f      	ldr	r3, [pc, #188]	; (8000e24 <ESP_messageHandler+0x634>)
 8000d68:	70da      	strb	r2, [r3, #3]
		vExt[4] = textrc[40]; 	// Puerta Parcela
 8000d6a:	4b27      	ldr	r3, [pc, #156]	; (8000e08 <ESP_messageHandler+0x618>)
 8000d6c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000d70:	4b2c      	ldr	r3, [pc, #176]	; (8000e24 <ESP_messageHandler+0x634>)
 8000d72:	711a      	strb	r2, [r3, #4]

		if(vExt[1] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET); // Luz Tendedero
 8000d74:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <ESP_messageHandler+0x634>)
 8000d76:	785b      	ldrb	r3, [r3, #1]
 8000d78:	2b30      	cmp	r3, #48	; 0x30
 8000d7a:	d106      	bne.n	8000d8a <ESP_messageHandler+0x59a>
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d82:	481d      	ldr	r0, [pc, #116]	; (8000df8 <ESP_messageHandler+0x608>)
 8000d84:	f002 f9fa 	bl	800317c <HAL_GPIO_WritePin>
 8000d88:	e009      	b.n	8000d9e <ESP_messageHandler+0x5ae>
		else if(vExt[1] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 8000d8a:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <ESP_messageHandler+0x634>)
 8000d8c:	785b      	ldrb	r3, [r3, #1]
 8000d8e:	2b31      	cmp	r3, #49	; 0x31
 8000d90:	d105      	bne.n	8000d9e <ESP_messageHandler+0x5ae>
 8000d92:	2201      	movs	r2, #1
 8000d94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d98:	4817      	ldr	r0, [pc, #92]	; (8000df8 <ESP_messageHandler+0x608>)
 8000d9a:	f002 f9ef 	bl	800317c <HAL_GPIO_WritePin>

		if(vExt[2] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET); // Luz Porche
 8000d9e:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <ESP_messageHandler+0x634>)
 8000da0:	789b      	ldrb	r3, [r3, #2]
 8000da2:	2b30      	cmp	r3, #48	; 0x30
 8000da4:	d106      	bne.n	8000db4 <ESP_messageHandler+0x5c4>
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dac:	4812      	ldr	r0, [pc, #72]	; (8000df8 <ESP_messageHandler+0x608>)
 8000dae:	f002 f9e5 	bl	800317c <HAL_GPIO_WritePin>
 8000db2:	e009      	b.n	8000dc8 <ESP_messageHandler+0x5d8>
		else if(vExt[2] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <ESP_messageHandler+0x634>)
 8000db6:	789b      	ldrb	r3, [r3, #2]
 8000db8:	2b31      	cmp	r3, #49	; 0x31
 8000dba:	d105      	bne.n	8000dc8 <ESP_messageHandler+0x5d8>
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <ESP_messageHandler+0x608>)
 8000dc4:	f002 f9da 	bl	800317c <HAL_GPIO_WritePin>

		if(vExt[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET); // Luz Jardín
 8000dc8:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <ESP_messageHandler+0x634>)
 8000dca:	78db      	ldrb	r3, [r3, #3]
 8000dcc:	2b30      	cmp	r3, #48	; 0x30
 8000dce:	d105      	bne.n	8000ddc <ESP_messageHandler+0x5ec>
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	4814      	ldr	r0, [pc, #80]	; (8000e28 <ESP_messageHandler+0x638>)
 8000dd6:	f002 f9d1 	bl	800317c <HAL_GPIO_WritePin>
 8000dda:	e008      	b.n	8000dee <ESP_messageHandler+0x5fe>
		else if(vExt[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <ESP_messageHandler+0x634>)
 8000dde:	78db      	ldrb	r3, [r3, #3]
 8000de0:	2b31      	cmp	r3, #49	; 0x31
 8000de2:	d104      	bne.n	8000dee <ESP_messageHandler+0x5fe>
 8000de4:	2201      	movs	r2, #1
 8000de6:	2101      	movs	r1, #1
 8000de8:	480f      	ldr	r0, [pc, #60]	; (8000e28 <ESP_messageHandler+0x638>)
 8000dea:	f002 f9c7 	bl	800317c <HAL_GPIO_WritePin>
	// AJUSTES
	if (fragment[0] == 'a'){
	}

	//__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000940 	.word	0x20000940
 8000df8:	40020800 	.word	0x40020800
 8000dfc:	2000095c 	.word	0x2000095c
 8000e00:	20000b50 	.word	0x20000b50
 8000e04:	0800678c 	.word	0x0800678c
 8000e08:	20000964 	.word	0x20000964
 8000e0c:	200008dc 	.word	0x200008dc
 8000e10:	080067b4 	.word	0x080067b4
 8000e14:	080067d8 	.word	0x080067d8
 8000e18:	08006800 	.word	0x08006800
 8000e1c:	0800682c 	.word	0x0800682c
 8000e20:	08006854 	.word	0x08006854
 8000e24:	200008e8 	.word	0x200008e8
 8000e28:	40020c00 	.word	0x40020c00

08000e2c <ringInit>:

void storeChar(unsigned char c, Ring_Buffer *buffer);


void ringInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
	_rx_buffer1 = &rx_buffer1;
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <ringInit+0x68>)
 8000e32:	4a19      	ldr	r2, [pc, #100]	; (8000e98 <ringInit+0x6c>)
 8000e34:	601a      	str	r2, [r3, #0]
    _tx_buffer1 = &tx_buffer1;
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <ringInit+0x70>)
 8000e38:	4a19      	ldr	r2, [pc, #100]	; (8000ea0 <ringInit+0x74>)
 8000e3a:	601a      	str	r2, [r3, #0]
    _rx_buffer2 = &rx_buffer2;
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <ringInit+0x78>)
 8000e3e:	4a1a      	ldr	r2, [pc, #104]	; (8000ea8 <ringInit+0x7c>)
 8000e40:	601a      	str	r2, [r3, #0]
    _tx_buffer2 = &tx_buffer2;
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <ringInit+0x80>)
 8000e44:	4a1a      	ldr	r2, [pc, #104]	; (8000eb0 <ringInit+0x84>)
 8000e46:	601a      	str	r2, [r3, #0]

    /* Habilita la INTERRUPCIÓN por ERROR del UART (frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_ERR);
 8000e48:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <ringInit+0x88>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	695a      	ldr	r2, [r3, #20]
 8000e4e:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <ringInit+0x88>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f042 0201 	orr.w	r2, r2, #1
 8000e56:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_ERR);
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <ringInit+0x8c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	695a      	ldr	r2, [r3, #20]
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <ringInit+0x8c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0201 	orr.w	r2, r2, #1
 8000e66:	615a      	str	r2, [r3, #20]

    /* Habilita la INTERRUPCIÓN por REGISTRO DE DATA VACÍO */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_RXNE);
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <ringInit+0x88>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68da      	ldr	r2, [r3, #12]
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <ringInit+0x88>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f042 0220 	orr.w	r2, r2, #32
 8000e76:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_RXNE);
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <ringInit+0x8c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	68da      	ldr	r2, [r3, #12]
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <ringInit+0x8c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f042 0220 	orr.w	r2, r2, #32
 8000e86:	60da      	str	r2, [r3, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	200009dc 	.word	0x200009dc
 8000e98:	2000008c 	.word	0x2000008c
 8000e9c:	200009e0 	.word	0x200009e0
 8000ea0:	20000294 	.word	0x20000294
 8000ea4:	200009e4 	.word	0x200009e4
 8000ea8:	2000049c 	.word	0x2000049c
 8000eac:	200009d8 	.word	0x200009d8
 8000eb0:	200006a4 	.word	0x200006a4
 8000eb4:	20000bdc 	.word	0x20000bdc
 8000eb8:	20000b50 	.word	0x20000b50

08000ebc <storeChar>:


void storeChar(unsigned char c, Ring_Buffer *buffer)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
    int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ece:	3301      	adds	r3, #1
 8000ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ed4:	60fb      	str	r3, [r7, #12]

    // Si queremos almacenar lo recibido justo antes de TAIL, significando que HEAD avanzará hasta la posición de TAIL,
    // se provocará un desbordamiento (overflow) del BUFFER, y, por lo tanto, no se escribirá el caracter o ni avanzaremos HEAD.
    if(i != buffer->tail)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d009      	beq.n	8000ef6 <storeChar+0x3a>
    {
    	buffer->buffer[buffer->head] = c;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	79f9      	ldrb	r1, [r7, #7]
 8000eec:	54d1      	strb	r1, [r2, r3]
        buffer->head = i;
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }
}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <UART_peek>:
	}
}


int UART_peek(UART_HandleTypeDef *uart)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a1c      	ldr	r2, [pc, #112]	; (8000f80 <UART_peek+0x7c>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d114      	bne.n	8000f3e <UART_peek+0x3a>
	{
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <UART_peek+0x80>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000f1c:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <UART_peek+0x80>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d102      	bne.n	8000f2e <UART_peek+0x2a>
 8000f28:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2c:	e022      	b.n	8000f74 <UART_peek+0x70>

		else return _rx_buffer1->buffer[_rx_buffer1->tail];
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <UART_peek+0x80>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <UART_peek+0x80>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000f3a:	5cd3      	ldrb	r3, [r2, r3]
 8000f3c:	e01a      	b.n	8000f74 <UART_peek+0x70>
	}

	else if (uart == PC_UART)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a11      	ldr	r2, [pc, #68]	; (8000f88 <UART_peek+0x84>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d114      	bne.n	8000f70 <UART_peek+0x6c>
	{
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <UART_peek+0x88>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <UART_peek+0x88>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d102      	bne.n	8000f60 <UART_peek+0x5c>
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	e009      	b.n	8000f74 <UART_peek+0x70>

		else return _rx_buffer2->buffer[_rx_buffer2->tail];
 8000f60:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <UART_peek+0x88>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <UART_peek+0x88>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000f6c:	5cd3      	ldrb	r3, [r2, r3]
 8000f6e:	e001      	b.n	8000f74 <UART_peek+0x70>
	}

	return -1;
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	20000bdc 	.word	0x20000bdc
 8000f84:	200009dc 	.word	0x200009dc
 8000f88:	20000b50 	.word	0x20000b50
 8000f8c:	200009e4 	.word	0x200009e4

08000f90 <UART_read>:


int UART_read(UART_HandleTypeDef *uart)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a29      	ldr	r2, [pc, #164]	; (8001040 <UART_read+0xb0>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d121      	bne.n	8000fe4 <UART_read+0x54>
	{
		// Si HEAD no está delante de TAIL, no tenemos ningún CARACTER
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 8000fa0:	4b28      	ldr	r3, [pc, #160]	; (8001044 <UART_read+0xb4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000fa8:	4b26      	ldr	r3, [pc, #152]	; (8001044 <UART_read+0xb4>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d102      	bne.n	8000fba <UART_read+0x2a>
 8000fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb8:	e03c      	b.n	8001034 <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000fba:	4b22      	ldr	r3, [pc, #136]	; (8001044 <UART_read+0xb4>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	4b21      	ldr	r3, [pc, #132]	; (8001044 <UART_read+0xb4>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000fc6:	5cd3      	ldrb	r3, [r2, r3]
 8000fc8:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000fca:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <UART_read+0xb4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <UART_read+0xb4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000fdc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8000fe0:	7bbb      	ldrb	r3, [r7, #14]
 8000fe2:	e027      	b.n	8001034 <UART_read+0xa4>
		}
	}

	else if (uart == PC_UART)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a18      	ldr	r2, [pc, #96]	; (8001048 <UART_read+0xb8>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d121      	bne.n	8001030 <UART_read+0xa0>
	{
		// Si HEAD no está delante de TAIL, no tenemos ningún CARACTER
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <UART_read+0xbc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <UART_read+0xbc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d102      	bne.n	8001006 <UART_read+0x76>
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	e016      	b.n	8001034 <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <UART_read+0xbc>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <UART_read+0xbc>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001012:	5cd3      	ldrb	r3, [r2, r3]
 8001014:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <UART_read+0xbc>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <UART_read+0xbc>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001028:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	e001      	b.n	8001034 <UART_read+0xa4>
		}
	}

	else return -1;
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001034:	4618      	mov	r0, r3
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	20000bdc 	.word	0x20000bdc
 8001044:	200009dc 	.word	0x200009dc
 8001048:	20000b50 	.word	0x20000b50
 800104c:	200009e4 	.word	0x200009e4

08001050 <UART_write>:


void UART_write(int c, UART_HandleTypeDef *uart)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
	if (c>=0)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db54      	blt.n	800110a <UART_write+0xba>
	{
		if (uart == WiFi_UART)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	4a2d      	ldr	r2, [pc, #180]	; (8001118 <UART_write+0xc8>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d126      	bne.n	80010b6 <UART_write+0x66>
		{
			int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8001068:	4b2c      	ldr	r3, [pc, #176]	; (800111c <UART_write+0xcc>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001070:	3301      	adds	r3, #1
 8001072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001076:	60bb      	str	r3, [r7, #8]

			// Si el BUFFER de salida está lleno, sólo se puede esperar a la INTERRUPCIÓN que lo vacia */
		    while (i == _tx_buffer1->tail);
 8001078:	bf00      	nop
 800107a:	4b28      	ldr	r3, [pc, #160]	; (800111c <UART_write+0xcc>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	429a      	cmp	r2, r3
 8001086:	d0f8      	beq.n	800107a <UART_write+0x2a>

		   _tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8001088:	4b24      	ldr	r3, [pc, #144]	; (800111c <UART_write+0xcc>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b23      	ldr	r3, [pc, #140]	; (800111c <UART_write+0xcc>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	b2c9      	uxtb	r1, r1
 8001098:	54d1      	strb	r1, [r2, r3]
		   _tx_buffer1->head = i;
 800109a:	4b20      	ldr	r3, [pc, #128]	; (800111c <UART_write+0xcc>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		   // Habilitar la INTERRUPCIÓN de TRANSMISIÓN del UART
		   __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_TXE);
 80010a4:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <UART_write+0xc8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <UART_write+0xc8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010b2:	60da      	str	r2, [r3, #12]

			// Habilitar la INTERRUPCIÓN de TRANSMISIÓN del UART
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
		}
	}
}
 80010b4:	e029      	b.n	800110a <UART_write+0xba>
		else if (uart == PC_UART)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	4a19      	ldr	r2, [pc, #100]	; (8001120 <UART_write+0xd0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d125      	bne.n	800110a <UART_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <UART_write+0xd4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010c6:	3301      	adds	r3, #1
 80010c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010cc:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 80010ce:	bf00      	nop
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <UART_write+0xd4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d0f8      	beq.n	80010d0 <UART_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <UART_write+0xd4>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <UART_write+0xd4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	b2c9      	uxtb	r1, r1
 80010ee:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <UART_write+0xd4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <UART_write+0xd0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <UART_write+0xd0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001108:	60da      	str	r2, [r3, #12]
}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000bdc 	.word	0x20000bdc
 800111c:	200009e0 	.word	0x200009e0
 8001120:	20000b50 	.word	0x20000b50
 8001124:	200009d8 	.word	0x200009d8

08001128 <UART_available>:


int UART_available(UART_HandleTypeDef *uart)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a19      	ldr	r2, [pc, #100]	; (8001198 <UART_available+0x70>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d111      	bne.n	800115c <UART_available+0x34>
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <UART_available+0x74>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001140:	b29a      	uxth	r2, r3
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <UART_available+0x74>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800114a:	b29b      	uxth	r3, r3
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	b29b      	uxth	r3, r3
 8001150:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001154:	b29b      	uxth	r3, r3
 8001156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800115a:	e017      	b.n	800118c <UART_available+0x64>

	else if (uart == PC_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a10      	ldr	r2, [pc, #64]	; (80011a0 <UART_available+0x78>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d111      	bne.n	8001188 <UART_available+0x60>
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <UART_available+0x7c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <UART_available+0x7c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001176:	b29b      	uxth	r3, r3
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	b29b      	uxth	r3, r3
 800117c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001180:	b29b      	uxth	r3, r3
 8001182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001186:	e001      	b.n	800118c <UART_available+0x64>

	return -1;
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	20000bdc 	.word	0x20000bdc
 800119c:	200009dc 	.word	0x200009dc
 80011a0:	20000b50 	.word	0x20000b50
 80011a4:	200009e4 	.word	0x200009e4

080011a8 <UART_send>:
	return 1;
}


void UART_send (const char *s, UART_HandleTypeDef *uart)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
	while(*s!='\0') UART_write(*s++, uart);
 80011b2:	e007      	b.n	80011c4 <UART_send+0x1c>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	6839      	ldr	r1, [r7, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff46 	bl	8001050 <UART_write>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1f3      	bne.n	80011b4 <UART_send+0xc>
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <UART_copyUpto>:
  while(*s) UART_write(*s++, uart);
}


int UART_copyUpto(char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
	int so_far =0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f7fe fff1 	bl	80001d0 <strlen>
 80011ee:	4603      	mov	r3, r0
 80011f0:	617b      	str	r3, [r7, #20]
	int indx = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]

again:
	while (!UART_available(uart));
 80011f6:	bf00      	nop
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff95 	bl	8001128 <UART_available>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f9      	beq.n	80011f8 <UART_copyUpto+0x20>

	while (UART_peek(uart) != string[so_far])
 8001204:	e01f      	b.n	8001246 <UART_copyUpto+0x6e>
	{
		buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8001206:	4b32      	ldr	r3, [pc, #200]	; (80012d0 <UART_copyUpto+0xf8>)
 8001208:	6819      	ldr	r1, [r3, #0]
 800120a:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <UART_copyUpto+0xf8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	68b8      	ldr	r0, [r7, #8]
 8001216:	4403      	add	r3, r0
 8001218:	5c8a      	ldrb	r2, [r1, r2]
 800121a:	701a      	strb	r2, [r3, #0]
		_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 800121c:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <UART_copyUpto+0xf8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001224:	1c5a      	adds	r2, r3, #1
 8001226:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <UART_copyUpto+0xf8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800122e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		indx++;
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	3301      	adds	r3, #1
 8001236:	61bb      	str	r3, [r7, #24]
		while (!UART_available(uart));
 8001238:	bf00      	nop
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ff74 	bl	8001128 <UART_available>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0f9      	beq.n	800123a <UART_copyUpto+0x62>
	while (UART_peek(uart) != string[so_far])
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fe5c 	bl	8000f04 <UART_peek>
 800124c:	4601      	mov	r1, r0
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	4413      	add	r3, r2
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	4299      	cmp	r1, r3
 8001258:	d1d5      	bne.n	8001206 <UART_copyUpto+0x2e>

	}

	while (UART_peek(uart) == string [so_far])
 800125a:	e01b      	b.n	8001294 <UART_copyUpto+0xbc>
	{
		so_far++;
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	3301      	adds	r3, #1
 8001260:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = UART_read(uart);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fe94 	bl	8000f90 <UART_read>
 8001268:	4601      	mov	r1, r0
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	61ba      	str	r2, [r7, #24]
 8001270:	461a      	mov	r2, r3
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	4413      	add	r3, r2
 8001276:	b2ca      	uxtb	r2, r1
 8001278:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 800127a:	69fa      	ldr	r2, [r7, #28]
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	429a      	cmp	r2, r3
 8001280:	d101      	bne.n	8001286 <UART_copyUpto+0xae>
 8001282:	2301      	movs	r3, #1
 8001284:	e01f      	b.n	80012c6 <UART_copyUpto+0xee>
		while (!UART_available(uart));
 8001286:	bf00      	nop
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff4d 	bl	8001128 <UART_available>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0f9      	beq.n	8001288 <UART_copyUpto+0xb0>
	while (UART_peek(uart) == string [so_far])
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff fe35 	bl	8000f04 <UART_peek>
 800129a:	4601      	mov	r1, r0
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	4413      	add	r3, r2
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4299      	cmp	r1, r3
 80012a6:	d0d9      	beq.n	800125c <UART_copyUpto+0x84>
	}

	if (so_far != len)
 80012a8:	69fa      	ldr	r2, [r7, #28]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d002      	beq.n	80012b6 <UART_copyUpto+0xde>
	{
		so_far = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
		goto again;
 80012b4:	e79f      	b.n	80011f6 <UART_copyUpto+0x1e>
	}

	if (so_far == len) return 1;
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d101      	bne.n	80012c2 <UART_copyUpto+0xea>
 80012be:	2301      	movs	r3, #1
 80012c0:	e001      	b.n	80012c6 <UART_copyUpto+0xee>

	else return -1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3720      	adds	r7, #32
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200009dc 	.word	0x200009dc

080012d4 <UART_waitFor>:


int UART_waitFor(char *string,UART_HandleTypeDef *uart)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
	int so_far =0;
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7fe ff74 	bl	80001d0 <strlen>
 80012e8:	4603      	mov	r3, r0
 80012ea:	60bb      	str	r3, [r7, #8]

again_device:
	while (!UART_available(uart));
 80012ec:	bf00      	nop
 80012ee:	6838      	ldr	r0, [r7, #0]
 80012f0:	f7ff ff1a 	bl	8001128 <UART_available>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f9      	beq.n	80012ee <UART_waitFor+0x1a>

	if (UART_peek(uart) != string[so_far])
 80012fa:	6838      	ldr	r0, [r7, #0]
 80012fc:	f7ff fe02 	bl	8000f04 <UART_peek>
 8001300:	4601      	mov	r1, r0
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	4413      	add	r3, r2
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	4299      	cmp	r1, r3
 800130c:	d01e      	beq.n	800134c <UART_waitFor+0x78>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 800130e:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <UART_waitFor+0xb4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <UART_waitFor+0xb4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001320:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 8001324:	e7e2      	b.n	80012ec <UART_waitFor+0x18>

	}

	while (UART_peek(uart) == string [so_far])
	{
		so_far++;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3301      	adds	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
		UART_read(uart);
 800132c:	6838      	ldr	r0, [r7, #0]
 800132e:	f7ff fe2f 	bl	8000f90 <UART_read>
		if (so_far == len) return 1;
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	429a      	cmp	r2, r3
 8001338:	d101      	bne.n	800133e <UART_waitFor+0x6a>
 800133a:	2301      	movs	r3, #1
 800133c:	e01f      	b.n	800137e <UART_waitFor+0xaa>
		while (!UART_available(uart));
 800133e:	bf00      	nop
 8001340:	6838      	ldr	r0, [r7, #0]
 8001342:	f7ff fef1 	bl	8001128 <UART_available>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f9      	beq.n	8001340 <UART_waitFor+0x6c>
	while (UART_peek(uart) == string [so_far])
 800134c:	6838      	ldr	r0, [r7, #0]
 800134e:	f7ff fdd9 	bl	8000f04 <UART_peek>
 8001352:	4601      	mov	r1, r0
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4299      	cmp	r1, r3
 800135e:	d0e2      	beq.n	8001326 <UART_waitFor+0x52>
	}

	if (so_far != len)
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	429a      	cmp	r2, r3
 8001366:	d002      	beq.n	800136e <UART_waitFor+0x9a>
	{
		so_far = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
		goto again_device;
 800136c:	e7be      	b.n	80012ec <UART_waitFor+0x18>
	}

	if (so_far == len) return 1;
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	429a      	cmp	r2, r3
 8001374:	d101      	bne.n	800137a <UART_waitFor+0xa6>
 8001376:	2301      	movs	r3, #1
 8001378:	e001      	b.n	800137e <UART_waitFor+0xaa>

	else return -1;
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200009dc 	.word	0x200009dc

0800138c <UART_isr>:


void UART_isr(UART_HandleTypeDef *huart)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	613b      	str	r3, [r7, #16]

	/* Si DR (DATA REGISTER) no está vacío y RX INT está habilitado */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f003 0320 	and.w	r3, r3, #32
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d023      	beq.n	80013f6 <UART_isr+0x6a>
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	f003 0320 	and.w	r3, r3, #32
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d01e      	beq.n	80013f6 <UART_isr+0x6a>
    	    	                USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	************************************************************************************************************/

		huart->Instance->SR;                   // Leer SR (STATUS REGISTER)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR; // Leer DR (DATA REGISTER)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	73fb      	strb	r3, [r7, #15]

        if (huart == WiFi_UART)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a3f      	ldr	r2, [pc, #252]	; (80014c8 <UART_isr+0x13c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d107      	bne.n	80013de <UART_isr+0x52>
        {
        	storeChar(c, _rx_buffer1); // Almacena DATA en el BUFFER
 80013ce:	4b3f      	ldr	r3, [pc, #252]	; (80014cc <UART_isr+0x140>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	4611      	mov	r1, r2
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fd70 	bl	8000ebc <storeChar>
        else if (huart == PC_UART)
        {
        	storeChar(c, _rx_buffer2); // Almacena DATA en el BUFFER
        }

        return;
 80013dc:	e06d      	b.n	80014ba <UART_isr+0x12e>
        else if (huart == PC_UART)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a3b      	ldr	r2, [pc, #236]	; (80014d0 <UART_isr+0x144>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d169      	bne.n	80014ba <UART_isr+0x12e>
        	storeChar(c, _rx_buffer2); // Almacena DATA en el BUFFER
 80013e6:	4b3b      	ldr	r3, [pc, #236]	; (80014d4 <UART_isr+0x148>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	4611      	mov	r1, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fd64 	bl	8000ebc <storeChar>
        return;
 80013f4:	e061      	b.n	80014ba <UART_isr+0x12e>
    }

    /* Si la INTERRUPCIÓN se produce por el TRANSMIT DATA REGISTER EMPTY */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d05f      	beq.n	80014c0 <UART_isr+0x134>
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001406:	2b00      	cmp	r3, #0
 8001408:	d05a      	beq.n	80014c0 <UART_isr+0x134>
    {
    	if (huart == WiFi_UART)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a2e      	ldr	r2, [pc, #184]	; (80014c8 <UART_isr+0x13c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d127      	bne.n	8001462 <UART_isr+0xd6>
    	{
    		if(tx_buffer1.head == tx_buffer1.tail)
 8001412:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <UART_isr+0x14c>)
 8001414:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001418:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <UART_isr+0x14c>)
 800141a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800141e:	429a      	cmp	r2, r3
 8001420:	d108      	bne.n	8001434 <UART_isr+0xa8>
    	    {
    			// BUFFER vacío, inhabilitamos la INTERRUPCIÓN
    	        __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001430:	60da      	str	r2, [r3, #12]
        	     huart->Instance->DR = c;

        	}
        }

    	return;
 8001432:	e044      	b.n	80014be <UART_isr+0x132>
    			unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8001434:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <UART_isr+0x14c>)
 8001436:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800143a:	4a27      	ldr	r2, [pc, #156]	; (80014d8 <UART_isr+0x14c>)
 800143c:	5cd3      	ldrb	r3, [r2, r3]
 800143e:	737b      	strb	r3, [r7, #13]
    			tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8001440:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <UART_isr+0x14c>)
 8001442:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001446:	3301      	adds	r3, #1
 8001448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800144c:	4a22      	ldr	r2, [pc, #136]	; (80014d8 <UART_isr+0x14c>)
 800144e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    			huart->Instance->SR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
    			huart->Instance->DR = c;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	7b7a      	ldrb	r2, [r7, #13]
 800145e:	605a      	str	r2, [r3, #4]
    	return;
 8001460:	e02d      	b.n	80014be <UART_isr+0x132>
    	else if (huart == PC_UART)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a1a      	ldr	r2, [pc, #104]	; (80014d0 <UART_isr+0x144>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d129      	bne.n	80014be <UART_isr+0x132>
    		if(tx_buffer2.head == tx_buffer2.tail)
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <UART_isr+0x150>)
 800146c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001470:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <UART_isr+0x150>)
 8001472:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001476:	429a      	cmp	r2, r3
 8001478:	d108      	bne.n	800148c <UART_isr+0x100>
        	    __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68da      	ldr	r2, [r3, #12]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001488:	60da      	str	r2, [r3, #12]
    	return;
 800148a:	e018      	b.n	80014be <UART_isr+0x132>
        	    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 800148c:	4b13      	ldr	r3, [pc, #76]	; (80014dc <UART_isr+0x150>)
 800148e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001492:	4a12      	ldr	r2, [pc, #72]	; (80014dc <UART_isr+0x150>)
 8001494:	5cd3      	ldrb	r3, [r2, r3]
 8001496:	73bb      	strb	r3, [r7, #14]
        	    tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8001498:	4b10      	ldr	r3, [pc, #64]	; (80014dc <UART_isr+0x150>)
 800149a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800149e:	3301      	adds	r3, #1
 80014a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014a4:	4a0d      	ldr	r2, [pc, #52]	; (80014dc <UART_isr+0x150>)
 80014a6:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	     huart->Instance->SR;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
        	     huart->Instance->DR = c;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	7bba      	ldrb	r2, [r7, #14]
 80014b6:	605a      	str	r2, [r3, #4]
    	return;
 80014b8:	e001      	b.n	80014be <UART_isr+0x132>
        return;
 80014ba:	bf00      	nop
 80014bc:	e000      	b.n	80014c0 <UART_isr+0x134>
    	return;
 80014be:	bf00      	nop
    }
}
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000bdc 	.word	0x20000bdc
 80014cc:	200009dc 	.word	0x200009dc
 80014d0:	20000b50 	.word	0x20000b50
 80014d4:	200009e4 	.word	0x200009e4
 80014d8:	20000294 	.word	0x20000294
 80014dc:	200006a4 	.word	0x200006a4

080014e0 <rgb_value>:
 */


#include <action.h>

int rgb_value(char i, char j, char k){
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
 80014ea:	460b      	mov	r3, r1
 80014ec:	71bb      	strb	r3, [r7, #6]
 80014ee:	4613      	mov	r3, r2
 80014f0:	717b      	strb	r3, [r7, #5]

	int a, b, c;

	if(i == '0') a = 0;
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2b30      	cmp	r3, #48	; 0x30
 80014f6:	d102      	bne.n	80014fe <rgb_value+0x1e>
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	e00a      	b.n	8001514 <rgb_value+0x34>
	else if(i == '1') a = 100;
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2b31      	cmp	r3, #49	; 0x31
 8001502:	d102      	bne.n	800150a <rgb_value+0x2a>
 8001504:	2364      	movs	r3, #100	; 0x64
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e004      	b.n	8001514 <rgb_value+0x34>
	else if(i == '2') a = 200;
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2b32      	cmp	r3, #50	; 0x32
 800150e:	d101      	bne.n	8001514 <rgb_value+0x34>
 8001510:	23c8      	movs	r3, #200	; 0xc8
 8001512:	617b      	str	r3, [r7, #20]

	if(j == '0') b = 0;
 8001514:	79bb      	ldrb	r3, [r7, #6]
 8001516:	2b30      	cmp	r3, #48	; 0x30
 8001518:	d102      	bne.n	8001520 <rgb_value+0x40>
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	e034      	b.n	800158a <rgb_value+0xaa>
	else if(j == '1') b = 10;
 8001520:	79bb      	ldrb	r3, [r7, #6]
 8001522:	2b31      	cmp	r3, #49	; 0x31
 8001524:	d102      	bne.n	800152c <rgb_value+0x4c>
 8001526:	230a      	movs	r3, #10
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	e02e      	b.n	800158a <rgb_value+0xaa>
	else if(j == '2') b = 20;
 800152c:	79bb      	ldrb	r3, [r7, #6]
 800152e:	2b32      	cmp	r3, #50	; 0x32
 8001530:	d102      	bne.n	8001538 <rgb_value+0x58>
 8001532:	2314      	movs	r3, #20
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	e028      	b.n	800158a <rgb_value+0xaa>
	else if(j == '3') b = 30;
 8001538:	79bb      	ldrb	r3, [r7, #6]
 800153a:	2b33      	cmp	r3, #51	; 0x33
 800153c:	d102      	bne.n	8001544 <rgb_value+0x64>
 800153e:	231e      	movs	r3, #30
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	e022      	b.n	800158a <rgb_value+0xaa>
	else if(j == '4') b = 40;
 8001544:	79bb      	ldrb	r3, [r7, #6]
 8001546:	2b34      	cmp	r3, #52	; 0x34
 8001548:	d102      	bne.n	8001550 <rgb_value+0x70>
 800154a:	2328      	movs	r3, #40	; 0x28
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	e01c      	b.n	800158a <rgb_value+0xaa>
	else if(j == '5') b = 50;
 8001550:	79bb      	ldrb	r3, [r7, #6]
 8001552:	2b35      	cmp	r3, #53	; 0x35
 8001554:	d102      	bne.n	800155c <rgb_value+0x7c>
 8001556:	2332      	movs	r3, #50	; 0x32
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	e016      	b.n	800158a <rgb_value+0xaa>
	else if(j == '6') b = 60;
 800155c:	79bb      	ldrb	r3, [r7, #6]
 800155e:	2b36      	cmp	r3, #54	; 0x36
 8001560:	d102      	bne.n	8001568 <rgb_value+0x88>
 8001562:	233c      	movs	r3, #60	; 0x3c
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	e010      	b.n	800158a <rgb_value+0xaa>
	else if(j == '7') b = 70;
 8001568:	79bb      	ldrb	r3, [r7, #6]
 800156a:	2b37      	cmp	r3, #55	; 0x37
 800156c:	d102      	bne.n	8001574 <rgb_value+0x94>
 800156e:	2346      	movs	r3, #70	; 0x46
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	e00a      	b.n	800158a <rgb_value+0xaa>
	else if(j == '8') b = 80;
 8001574:	79bb      	ldrb	r3, [r7, #6]
 8001576:	2b38      	cmp	r3, #56	; 0x38
 8001578:	d102      	bne.n	8001580 <rgb_value+0xa0>
 800157a:	2350      	movs	r3, #80	; 0x50
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	e004      	b.n	800158a <rgb_value+0xaa>
	else if(j == '9') b = 90;
 8001580:	79bb      	ldrb	r3, [r7, #6]
 8001582:	2b39      	cmp	r3, #57	; 0x39
 8001584:	d101      	bne.n	800158a <rgb_value+0xaa>
 8001586:	235a      	movs	r3, #90	; 0x5a
 8001588:	613b      	str	r3, [r7, #16]

	if(k == '0') c = 0;
 800158a:	797b      	ldrb	r3, [r7, #5]
 800158c:	2b30      	cmp	r3, #48	; 0x30
 800158e:	d102      	bne.n	8001596 <rgb_value+0xb6>
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	e034      	b.n	8001600 <rgb_value+0x120>
	else if(k == '1') c = 1;
 8001596:	797b      	ldrb	r3, [r7, #5]
 8001598:	2b31      	cmp	r3, #49	; 0x31
 800159a:	d102      	bne.n	80015a2 <rgb_value+0xc2>
 800159c:	2301      	movs	r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	e02e      	b.n	8001600 <rgb_value+0x120>
	else if(k == '2') c = 2;
 80015a2:	797b      	ldrb	r3, [r7, #5]
 80015a4:	2b32      	cmp	r3, #50	; 0x32
 80015a6:	d102      	bne.n	80015ae <rgb_value+0xce>
 80015a8:	2302      	movs	r3, #2
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	e028      	b.n	8001600 <rgb_value+0x120>
	else if(k == '3') c = 3;
 80015ae:	797b      	ldrb	r3, [r7, #5]
 80015b0:	2b33      	cmp	r3, #51	; 0x33
 80015b2:	d102      	bne.n	80015ba <rgb_value+0xda>
 80015b4:	2303      	movs	r3, #3
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	e022      	b.n	8001600 <rgb_value+0x120>
	else if(k == '4') c = 4;
 80015ba:	797b      	ldrb	r3, [r7, #5]
 80015bc:	2b34      	cmp	r3, #52	; 0x34
 80015be:	d102      	bne.n	80015c6 <rgb_value+0xe6>
 80015c0:	2304      	movs	r3, #4
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	e01c      	b.n	8001600 <rgb_value+0x120>
	else if(k == '5') c = 5;
 80015c6:	797b      	ldrb	r3, [r7, #5]
 80015c8:	2b35      	cmp	r3, #53	; 0x35
 80015ca:	d102      	bne.n	80015d2 <rgb_value+0xf2>
 80015cc:	2305      	movs	r3, #5
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	e016      	b.n	8001600 <rgb_value+0x120>
	else if(k == '6') c = 6;
 80015d2:	797b      	ldrb	r3, [r7, #5]
 80015d4:	2b36      	cmp	r3, #54	; 0x36
 80015d6:	d102      	bne.n	80015de <rgb_value+0xfe>
 80015d8:	2306      	movs	r3, #6
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	e010      	b.n	8001600 <rgb_value+0x120>
	else if(k == '7') c = 7;
 80015de:	797b      	ldrb	r3, [r7, #5]
 80015e0:	2b37      	cmp	r3, #55	; 0x37
 80015e2:	d102      	bne.n	80015ea <rgb_value+0x10a>
 80015e4:	2307      	movs	r3, #7
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	e00a      	b.n	8001600 <rgb_value+0x120>
	else if(k == '8') c = 8;
 80015ea:	797b      	ldrb	r3, [r7, #5]
 80015ec:	2b38      	cmp	r3, #56	; 0x38
 80015ee:	d102      	bne.n	80015f6 <rgb_value+0x116>
 80015f0:	2308      	movs	r3, #8
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	e004      	b.n	8001600 <rgb_value+0x120>
	else if(k == '9') c = 9;
 80015f6:	797b      	ldrb	r3, [r7, #5]
 80015f8:	2b39      	cmp	r3, #57	; 0x39
 80015fa:	d101      	bne.n	8001600 <rgb_value+0x120>
 80015fc:	2309      	movs	r3, #9
 80015fe:	60fb      	str	r3, [r7, #12]

	return a+b+c;
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	441a      	add	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4413      	add	r3, r2
}
 800160a:	4618      	mov	r0, r3
 800160c:	371c      	adds	r7, #28
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin==B_Timbre_Pin)
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d102      	bne.n	800162e <HAL_GPIO_EXTI_Callback+0x16>
	{
		timbre = 1;
 8001628:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_GPIO_EXTI_Callback+0x54>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]
	}
    if (GPIO_Pin==B_Stop_Pin)
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	2b04      	cmp	r3, #4
 8001632:	d102      	bne.n	800163a <HAL_GPIO_EXTI_Callback+0x22>
    {
    	stop = 1;
 8001634:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_GPIO_EXTI_Callback+0x58>)
 8001636:	2201      	movs	r2, #1
 8001638:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin==S_Int_Pin)
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	2b08      	cmp	r3, #8
 800163e:	d102      	bne.n	8001646 <HAL_GPIO_EXTI_Callback+0x2e>
    {
        interior = 1;
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin==S_Ext_Pin)
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d102      	bne.n	8001652 <HAL_GPIO_EXTI_Callback+0x3a>
    {
        exterior = 1;
 800164c:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <HAL_GPIO_EXTI_Callback+0x60>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin==Fin_Servo_Pin)
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	2b10      	cmp	r3, #16
 8001656:	d102      	bne.n	800165e <HAL_GPIO_EXTI_Callback+0x46>
    {
        fin = 1;
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <HAL_GPIO_EXTI_Callback+0x64>)
 800165a:	2201      	movs	r2, #1
 800165c:	601a      	str	r2, [r3, #0]
    }
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	200008ac 	.word	0x200008ac
 8001670:	200008b0 	.word	0x200008b0
 8001674:	200008b4 	.word	0x200008b4
 8001678:	200008b8 	.word	0x200008b8
 800167c:	200008bc 	.word	0x200008bc

08001680 <debouncer>:

int debouncer(volatile int* button_int, GPIO_TypeDef* GPIO_port, uint16_t GPIO_number) // Control de los rebotes
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	4613      	mov	r3, r2
 800168c:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count=0;
	static int counter=0;

	if (*button_int==1)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d13b      	bne.n	800170e <debouncer+0x8e>
	{
		if (button_count==0)
 8001696:	4b20      	ldr	r3, [pc, #128]	; (8001718 <debouncer+0x98>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10b      	bne.n	80016b6 <debouncer+0x36>
		{
			counter=HAL_GetTick();
 800169e:	f001 f9e5 	bl	8002a6c <HAL_GetTick>
 80016a2:	4603      	mov	r3, r0
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <debouncer+0x9c>)
 80016a8:	601a      	str	r2, [r3, #0]
			button_count++;
 80016aa:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <debouncer+0x98>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4b19      	ldr	r3, [pc, #100]	; (8001718 <debouncer+0x98>)
 80016b4:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick()-counter>=20)
 80016b6:	f001 f9d9 	bl	8002a6c <HAL_GetTick>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4a17      	ldr	r2, [pc, #92]	; (800171c <debouncer+0x9c>)
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	1a9b      	subs	r3, r3, r2
 80016c2:	2b13      	cmp	r3, #19
 80016c4:	d923      	bls.n	800170e <debouncer+0x8e>
		{
			counter=HAL_GetTick();
 80016c6:	f001 f9d1 	bl	8002a6c <HAL_GetTick>
 80016ca:	4603      	mov	r3, r0
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <debouncer+0x9c>)
 80016d0:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number)!=1)
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	4619      	mov	r1, r3
 80016d6:	68b8      	ldr	r0, [r7, #8]
 80016d8:	f001 fd38 	bl	800314c <HAL_GPIO_ReadPin>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d003      	beq.n	80016ea <debouncer+0x6a>
			{
				button_count=1;
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <debouncer+0x98>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	701a      	strb	r2, [r3, #0]
 80016e8:	e005      	b.n	80016f6 <debouncer+0x76>
			}
			else
			{
				button_count++;
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <debouncer+0x98>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	3301      	adds	r3, #1
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <debouncer+0x98>)
 80016f4:	701a      	strb	r2, [r3, #0]
			}
			if (button_count==4 ) // Periodo antirebotes
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <debouncer+0x98>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	d107      	bne.n	800170e <debouncer+0x8e>
			{
				button_count=0;
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <debouncer+0x98>)
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
				*button_int=0;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
				return 1;
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <debouncer+0x90>
			}
		}
	}
	return 0;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	200008c0 	.word	0x200008c0
 800171c:	200008c4 	.word	0x200008c4

08001720 <play_Timbre>:


void play_Timbre(void){
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0

	uint8_t tone;

	tone = 20;
 8001726:	2314      	movs	r3, #20
 8001728:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	005a      	lsls	r2, r3, #1
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <play_Timbre+0x68>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	62da      	str	r2, [r3, #44]	; 0x2c
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	461a      	mov	r2, r3
 800173a:	4b13      	ldr	r3, [pc, #76]	; (8001788 <play_Timbre+0x68>)
 800173c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <play_Timbre+0x68>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	79fa      	ldrb	r2, [r7, #7]
 8001744:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(300);
 8001746:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800174a:	f001 f99b 	bl	8002a84 <HAL_Delay>

	tone = 40;
 800174e:	2328      	movs	r3, #40	; 0x28
 8001750:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	005a      	lsls	r2, r3, #1
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <play_Timbre+0x68>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	62da      	str	r2, [r3, #44]	; 0x2c
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	461a      	mov	r2, r3
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <play_Timbre+0x68>)
 8001764:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 8001766:	4b08      	ldr	r3, [pc, #32]	; (8001788 <play_Timbre+0x68>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	79fa      	ldrb	r2, [r7, #7]
 800176c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 800176e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001772:	f001 f987 	bl	8002a84 <HAL_Delay>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001776:	4b04      	ldr	r3, [pc, #16]	; (8001788 <play_Timbre+0x68>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2200      	movs	r2, #0
 800177c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000a30 	.word	0x20000a30

0800178c <play_Alarma>:


void play_Alarma(){
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0

	uint8_t tone;

	for(tone = 40; tone >= 10; tone = tone-10){
 8001792:	2328      	movs	r3, #40	; 0x28
 8001794:	71fb      	strb	r3, [r7, #7]
 8001796:	e014      	b.n	80017c2 <play_Alarma+0x36>
		__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	005a      	lsls	r2, r3, #1
 800179c:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <play_Alarma+0x48>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <play_Alarma+0x48>)
 80017aa:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <play_Alarma+0x48>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	79fa      	ldrb	r2, [r7, #7]
 80017b2:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(300);
 80017b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80017b8:	f001 f964 	bl	8002a84 <HAL_Delay>
	for(tone = 40; tone >= 10; tone = tone-10){
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	3b0a      	subs	r3, #10
 80017c0:	71fb      	strb	r3, [r7, #7]
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	2b09      	cmp	r3, #9
 80017c6:	d8e7      	bhi.n	8001798 <play_Alarma+0xc>
	}
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000a30 	.word	0x20000a30

080017d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017dc:	f001 f8e0 	bl	80029a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017e0:	f000 f946 	bl	8001a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e4:	f000 fce6 	bl	80021b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017e8:	f000 fc90 	bl	800210c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80017ec:	f000 fcb8 	bl	8002160 <MX_USART6_UART_Init>
  MX_TIM5_Init();
 80017f0:	f000 fbee 	bl	8001fd0 <MX_TIM5_Init>
  MX_TIM1_Init();
 80017f4:	f000 f9a6 	bl	8001b44 <MX_TIM1_Init>
  MX_TIM4_Init();
 80017f8:	f000 fb74 	bl	8001ee4 <MX_TIM4_Init>
  MX_TIM2_Init();
 80017fc:	f000 fa5a 	bl	8001cb4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001800:	f000 fae4 	bl	8001dcc <MX_TIM3_Init>
  MX_TIM8_Init();
 8001804:	f000 fc32 	bl	800206c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  // LED RGB Gaming
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001808:	2100      	movs	r1, #0
 800180a:	488b      	ldr	r0, [pc, #556]	; (8001a38 <main+0x260>)
 800180c:	f002 fa04 	bl	8003c18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001810:	2104      	movs	r1, #4
 8001812:	4889      	ldr	r0, [pc, #548]	; (8001a38 <main+0x260>)
 8001814:	f002 fa00 	bl	8003c18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001818:	2108      	movs	r1, #8
 800181a:	4887      	ldr	r0, [pc, #540]	; (8001a38 <main+0x260>)
 800181c:	f002 f9fc 	bl	8003c18 <HAL_TIM_PWM_Start>
  // Servo Parcela
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001820:	2100      	movs	r1, #0
 8001822:	4886      	ldr	r0, [pc, #536]	; (8001a3c <main+0x264>)
 8001824:	f002 f9f8 	bl	8003c18 <HAL_TIM_PWM_Start>
  // Servo Garaje
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001828:	2104      	movs	r1, #4
 800182a:	4884      	ldr	r0, [pc, #528]	; (8001a3c <main+0x264>)
 800182c:	f002 f9f4 	bl	8003c18 <HAL_TIM_PWM_Start>
  // Servo Tendedero
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001830:	2108      	movs	r1, #8
 8001832:	4882      	ldr	r0, [pc, #520]	; (8001a3c <main+0x264>)
 8001834:	f002 f9f0 	bl	8003c18 <HAL_TIM_PWM_Start>
  // Servo Salón
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001838:	210c      	movs	r1, #12
 800183a:	4881      	ldr	r0, [pc, #516]	; (8001a40 <main+0x268>)
 800183c:	f002 f9ec 	bl	8003c18 <HAL_TIM_PWM_Start>
  // Servo Dormitorio
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001840:	2104      	movs	r1, #4
 8001842:	487f      	ldr	r0, [pc, #508]	; (8001a40 <main+0x268>)
 8001844:	f002 f9e8 	bl	8003c18 <HAL_TIM_PWM_Start>
  // Servo Oficina
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001848:	2108      	movs	r1, #8
 800184a:	487d      	ldr	r0, [pc, #500]	; (8001a40 <main+0x268>)
 800184c:	f002 f9e4 	bl	8003c18 <HAL_TIM_PWM_Start>
  // Zumbador
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001850:	2100      	movs	r1, #0
 8001852:	487c      	ldr	r0, [pc, #496]	; (8001a44 <main+0x26c>)
 8001854:	f002 f9e0 	bl	8003c18 <HAL_TIM_PWM_Start>

  //__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
  ESP_Init("iPhone Carmela","pistacho");
 8001858:	497b      	ldr	r1, [pc, #492]	; (8001a48 <main+0x270>)
 800185a:	487c      	ldr	r0, [pc, #496]	; (8001a4c <main+0x274>)
 800185c:	f7fe fe9c 	bl	8000598 <ESP_Init>
  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		ESP_messageHandler();
 8001860:	f7fe ffc6 	bl	80007f0 <ESP_messageHandler>

		// TIMBRE
		if (debouncer(&timbre, B_Timbre_GPIO_Port, B_Timbre_Pin)){
 8001864:	2201      	movs	r2, #1
 8001866:	497a      	ldr	r1, [pc, #488]	; (8001a50 <main+0x278>)
 8001868:	487a      	ldr	r0, [pc, #488]	; (8001a54 <main+0x27c>)
 800186a:	f7ff ff09 	bl	8001680 <debouncer>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <main+0xa0>
			play_Timbre();
 8001874:	f7ff ff54 	bl	8001720 <play_Timbre>

		// STOP ALARMA
		// Conexión Wi-Fi

		// ALARMA
		if (debouncer(&interior, S_Int_GPIO_Port, S_Int_Pin)){
 8001878:	2208      	movs	r2, #8
 800187a:	4975      	ldr	r1, [pc, #468]	; (8001a50 <main+0x278>)
 800187c:	4876      	ldr	r0, [pc, #472]	; (8001a58 <main+0x280>)
 800187e:	f7ff feff 	bl	8001680 <debouncer>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <main+0xbc>
			if(vSeg[0] == '1') play_Alarma();
 8001888:	4b74      	ldr	r3, [pc, #464]	; (8001a5c <main+0x284>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b31      	cmp	r3, #49	; 0x31
 800188e:	d101      	bne.n	8001894 <main+0xbc>
 8001890:	f7ff ff7c 	bl	800178c <play_Alarma>
		}
		if (debouncer(&exterior, S_Ext_GPIO_Port, S_Ext_Pin)){
 8001894:	2202      	movs	r2, #2
 8001896:	496e      	ldr	r1, [pc, #440]	; (8001a50 <main+0x278>)
 8001898:	4871      	ldr	r0, [pc, #452]	; (8001a60 <main+0x288>)
 800189a:	f7ff fef1 	bl	8001680 <debouncer>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d005      	beq.n	80018b0 <main+0xd8>
			if(vSeg[1] == '1') play_Alarma();
 80018a4:	4b6d      	ldr	r3, [pc, #436]	; (8001a5c <main+0x284>)
 80018a6:	785b      	ldrb	r3, [r3, #1]
 80018a8:	2b31      	cmp	r3, #49	; 0x31
 80018aa:	d101      	bne.n	80018b0 <main+0xd8>
 80018ac:	f7ff ff6e 	bl	800178c <play_Alarma>
		}

		// PUERTA PARCELA (90)
		if(vVent[1]=='1' || vExt[4]=='1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89);
 80018b0:	4b6c      	ldr	r3, [pc, #432]	; (8001a64 <main+0x28c>)
 80018b2:	785b      	ldrb	r3, [r3, #1]
 80018b4:	2b31      	cmp	r3, #49	; 0x31
 80018b6:	d003      	beq.n	80018c0 <main+0xe8>
 80018b8:	4b6b      	ldr	r3, [pc, #428]	; (8001a68 <main+0x290>)
 80018ba:	791b      	ldrb	r3, [r3, #4]
 80018bc:	2b31      	cmp	r3, #49	; 0x31
 80018be:	d103      	bne.n	80018c8 <main+0xf0>
 80018c0:	4b5e      	ldr	r3, [pc, #376]	; (8001a3c <main+0x264>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2259      	movs	r2, #89	; 0x59
 80018c6:	635a      	str	r2, [r3, #52]	; 0x34
		if(vVent[1]=='0' || vExt[4]=='0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 92);
 80018c8:	4b66      	ldr	r3, [pc, #408]	; (8001a64 <main+0x28c>)
 80018ca:	785b      	ldrb	r3, [r3, #1]
 80018cc:	2b30      	cmp	r3, #48	; 0x30
 80018ce:	d003      	beq.n	80018d8 <main+0x100>
 80018d0:	4b65      	ldr	r3, [pc, #404]	; (8001a68 <main+0x290>)
 80018d2:	791b      	ldrb	r3, [r3, #4]
 80018d4:	2b30      	cmp	r3, #48	; 0x30
 80018d6:	d103      	bne.n	80018e0 <main+0x108>
 80018d8:	4b58      	ldr	r3, [pc, #352]	; (8001a3c <main+0x264>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	225c      	movs	r2, #92	; 0x5c
 80018de:	635a      	str	r2, [r3, #52]	; 0x34

		// PUERTA GARAJE (90)
		if(vVent[0]=='1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 89); //50 HORARIO
 80018e0:	4b60      	ldr	r3, [pc, #384]	; (8001a64 <main+0x28c>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b31      	cmp	r3, #49	; 0x31
 80018e6:	d103      	bne.n	80018f0 <main+0x118>
 80018e8:	4b54      	ldr	r3, [pc, #336]	; (8001a3c <main+0x264>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2259      	movs	r2, #89	; 0x59
 80018ee:	639a      	str	r2, [r3, #56]	; 0x38
		if(vVent[0]=='0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 92); //100 ANTIHORARIO
 80018f0:	4b5c      	ldr	r3, [pc, #368]	; (8001a64 <main+0x28c>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b30      	cmp	r3, #48	; 0x30
 80018f6:	d103      	bne.n	8001900 <main+0x128>
 80018f8:	4b50      	ldr	r3, [pc, #320]	; (8001a3c <main+0x264>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	225c      	movs	r2, #92	; 0x5c
 80018fe:	639a      	str	r2, [r3, #56]	; 0x38

		// TOLDO TENDEDERO (90)
		if(vExt[0]=='1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 89);
 8001900:	4b59      	ldr	r3, [pc, #356]	; (8001a68 <main+0x290>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b31      	cmp	r3, #49	; 0x31
 8001906:	d103      	bne.n	8001910 <main+0x138>
 8001908:	4b4c      	ldr	r3, [pc, #304]	; (8001a3c <main+0x264>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2259      	movs	r2, #89	; 0x59
 800190e:	63da      	str	r2, [r3, #60]	; 0x3c
		if(vExt[0]=='0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 92);
 8001910:	4b55      	ldr	r3, [pc, #340]	; (8001a68 <main+0x290>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b30      	cmp	r3, #48	; 0x30
 8001916:	d103      	bne.n	8001920 <main+0x148>
 8001918:	4b48      	ldr	r3, [pc, #288]	; (8001a3c <main+0x264>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	225c      	movs	r2, #92	; 0x5c
 800191e:	63da      	str	r2, [r3, #60]	; 0x3c

		// VENTANA SALÓN (96)
		if(vVent[2]=='1') {
 8001920:	4b50      	ldr	r3, [pc, #320]	; (8001a64 <main+0x28c>)
 8001922:	789b      	ldrb	r3, [r3, #2]
 8001924:	2b31      	cmp	r3, #49	; 0x31
 8001926:	d10b      	bne.n	8001940 <main+0x168>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 95);
 8001928:	4b45      	ldr	r3, [pc, #276]	; (8001a40 <main+0x268>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	225f      	movs	r2, #95	; 0x5f
 800192e:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(3000);
 8001930:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001934:	f001 f8a6 	bl	8002a84 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 96);
 8001938:	4b41      	ldr	r3, [pc, #260]	; (8001a40 <main+0x268>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2260      	movs	r2, #96	; 0x60
 800193e:	641a      	str	r2, [r3, #64]	; 0x40
		}
		if(vVent[2]=='0') {
 8001940:	4b48      	ldr	r3, [pc, #288]	; (8001a64 <main+0x28c>)
 8001942:	789b      	ldrb	r3, [r3, #2]
 8001944:	2b30      	cmp	r3, #48	; 0x30
 8001946:	d10b      	bne.n	8001960 <main+0x188>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 97);
 8001948:	4b3d      	ldr	r3, [pc, #244]	; (8001a40 <main+0x268>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2261      	movs	r2, #97	; 0x61
 800194e:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(3000);
 8001950:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001954:	f001 f896 	bl	8002a84 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 96);
 8001958:	4b39      	ldr	r3, [pc, #228]	; (8001a40 <main+0x268>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2260      	movs	r2, #96	; 0x60
 800195e:	641a      	str	r2, [r3, #64]	; 0x40
		}
		vVent[2]='x';
 8001960:	4b40      	ldr	r3, [pc, #256]	; (8001a64 <main+0x28c>)
 8001962:	2278      	movs	r2, #120	; 0x78
 8001964:	709a      	strb	r2, [r3, #2]

		// VENTANA DORMITORIO (170)
		if(vVent[3]=='1') {
 8001966:	4b3f      	ldr	r3, [pc, #252]	; (8001a64 <main+0x28c>)
 8001968:	78db      	ldrb	r3, [r3, #3]
 800196a:	2b31      	cmp	r3, #49	; 0x31
 800196c:	d10b      	bne.n	8001986 <main+0x1ae>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 168);
 800196e:	4b34      	ldr	r3, [pc, #208]	; (8001a40 <main+0x268>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	22a8      	movs	r2, #168	; 0xa8
 8001974:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(3000);
 8001976:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800197a:	f001 f883 	bl	8002a84 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 171);
 800197e:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <main+0x268>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	22ab      	movs	r2, #171	; 0xab
 8001984:	639a      	str	r2, [r3, #56]	; 0x38
		}
		if(vVent[3]=='0') {
 8001986:	4b37      	ldr	r3, [pc, #220]	; (8001a64 <main+0x28c>)
 8001988:	78db      	ldrb	r3, [r3, #3]
 800198a:	2b30      	cmp	r3, #48	; 0x30
 800198c:	d10b      	bne.n	80019a6 <main+0x1ce>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 172);
 800198e:	4b2c      	ldr	r3, [pc, #176]	; (8001a40 <main+0x268>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	22ac      	movs	r2, #172	; 0xac
 8001994:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(3000);
 8001996:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800199a:	f001 f873 	bl	8002a84 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 171);
 800199e:	4b28      	ldr	r3, [pc, #160]	; (8001a40 <main+0x268>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	22ab      	movs	r2, #171	; 0xab
 80019a4:	639a      	str	r2, [r3, #56]	; 0x38
		}
		vVent[3]='x';
 80019a6:	4b2f      	ldr	r3, [pc, #188]	; (8001a64 <main+0x28c>)
 80019a8:	2278      	movs	r2, #120	; 0x78
 80019aa:	70da      	strb	r2, [r3, #3]

		// VENTANA OFICINA
		if(vVent[4]=='1') {
 80019ac:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <main+0x28c>)
 80019ae:	791b      	ldrb	r3, [r3, #4]
 80019b0:	2b31      	cmp	r3, #49	; 0x31
 80019b2:	d10b      	bne.n	80019cc <main+0x1f4>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 45);
 80019b4:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <main+0x268>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	222d      	movs	r2, #45	; 0x2d
 80019ba:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 80019bc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019c0:	f001 f860 	bl	8002a84 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 135);
 80019c4:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <main+0x268>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2287      	movs	r2, #135	; 0x87
 80019ca:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		if(vVent[4]=='0') {
 80019cc:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <main+0x28c>)
 80019ce:	791b      	ldrb	r3, [r3, #4]
 80019d0:	2b30      	cmp	r3, #48	; 0x30
 80019d2:	d10b      	bne.n	80019ec <main+0x214>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 100);
 80019d4:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <main+0x268>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2264      	movs	r2, #100	; 0x64
 80019da:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 80019dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019e0:	f001 f850 	bl	8002a84 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 90);
 80019e4:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <main+0x268>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	225a      	movs	r2, #90	; 0x5a
 80019ea:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		vVent[4]='x';
 80019ec:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <main+0x28c>)
 80019ee:	2278      	movs	r2, #120	; 0x78
 80019f0:	711a      	strb	r2, [r3, #4]

		// FINALES DE CARRERA
		if(debouncer(&fin, Fin_Servo_GPIO_Port, Fin_Servo_Pin)){
 80019f2:	2210      	movs	r2, #16
 80019f4:	4916      	ldr	r1, [pc, #88]	; (8001a50 <main+0x278>)
 80019f6:	481d      	ldr	r0, [pc, #116]	; (8001a6c <main+0x294>)
 80019f8:	f7ff fe42 	bl	8001680 <debouncer>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f43f af2e 	beq.w	8001860 <main+0x88>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 90); // S_Parcela
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <main+0x264>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	225a      	movs	r2, #90	; 0x5a
 8001a0a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 90); // S_Garaje
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <main+0x264>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	225a      	movs	r2, #90	; 0x5a
 8001a12:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90); // S_Tendedero
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <main+0x264>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	225a      	movs	r2, #90	; 0x5a
 8001a1a:	63da      	str	r2, [r3, #60]	; 0x3c
			vVent[0]='x'; // S_Parcela
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <main+0x28c>)
 8001a1e:	2278      	movs	r2, #120	; 0x78
 8001a20:	701a      	strb	r2, [r3, #0]
			vExt[4]='x'; // S_Parcela
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <main+0x290>)
 8001a24:	2278      	movs	r2, #120	; 0x78
 8001a26:	711a      	strb	r2, [r3, #4]
			vVent[1]='x'; // S_Garaje
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <main+0x28c>)
 8001a2a:	2278      	movs	r2, #120	; 0x78
 8001a2c:	705a      	strb	r2, [r3, #1]
			vExt[0]='x'; // S_Tendedero
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <main+0x290>)
 8001a30:	2278      	movs	r2, #120	; 0x78
 8001a32:	701a      	strb	r2, [r3, #0]
		ESP_messageHandler();
 8001a34:	e714      	b.n	8001860 <main+0x88>
 8001a36:	bf00      	nop
 8001a38:	20000b08 	.word	0x20000b08
 8001a3c:	20000b94 	.word	0x20000b94
 8001a40:	20000ac0 	.word	0x20000ac0
 8001a44:	20000a30 	.word	0x20000a30
 8001a48:	08006860 	.word	0x08006860
 8001a4c:	0800686c 	.word	0x0800686c
 8001a50:	40021000 	.word	0x40021000
 8001a54:	200008ac 	.word	0x200008ac
 8001a58:	200008b4 	.word	0x200008b4
 8001a5c:	200009d4 	.word	0x200009d4
 8001a60:	200008b8 	.word	0x200008b8
 8001a64:	200008dc 	.word	0x200008dc
 8001a68:	200008e8 	.word	0x200008e8
 8001a6c:	200008bc 	.word	0x200008bc

08001a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b094      	sub	sp, #80	; 0x50
 8001a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a76:	f107 0320 	add.w	r3, r7, #32
 8001a7a:	2230      	movs	r2, #48	; 0x30
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 ff2e 	bl	80058e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a94:	2300      	movs	r3, #0
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <SystemClock_Config+0xcc>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	4a27      	ldr	r2, [pc, #156]	; (8001b3c <SystemClock_Config+0xcc>)
 8001a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa4:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <SystemClock_Config+0xcc>)
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <SystemClock_Config+0xd0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a21      	ldr	r2, [pc, #132]	; (8001b40 <SystemClock_Config+0xd0>)
 8001aba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <SystemClock_Config+0xd0>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001acc:	2302      	movs	r3, #2
 8001ace:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ad4:	2310      	movs	r3, #16
 8001ad6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001adc:	2300      	movs	r3, #0
 8001ade:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ae0:	2308      	movs	r3, #8
 8001ae2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001ae4:	2332      	movs	r3, #50	; 0x32
 8001ae6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ae8:	2304      	movs	r3, #4
 8001aea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001aec:	2307      	movs	r3, #7
 8001aee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001af0:	f107 0320 	add.w	r3, r7, #32
 8001af4:	4618      	mov	r0, r3
 8001af6:	f001 fb73 	bl	80031e0 <HAL_RCC_OscConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b00:	f000 fc48 	bl	8002394 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b04:	230f      	movs	r3, #15
 8001b06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001b10:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f001 fdd4 	bl	80036d0 <HAL_RCC_ClockConfig>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b2e:	f000 fc31 	bl	8002394 <Error_Handler>
  }
}
 8001b32:	bf00      	nop
 8001b34:	3750      	adds	r7, #80	; 0x50
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40007000 	.word	0x40007000

08001b44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b096      	sub	sp, #88	; 0x58
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
 8001b70:	611a      	str	r2, [r3, #16]
 8001b72:	615a      	str	r2, [r3, #20]
 8001b74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	2220      	movs	r2, #32
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f003 feaf 	bl	80058e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b82:	4b4a      	ldr	r3, [pc, #296]	; (8001cac <MX_TIM1_Init+0x168>)
 8001b84:	4a4a      	ldr	r2, [pc, #296]	; (8001cb0 <MX_TIM1_Init+0x16c>)
 8001b86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8001b88:	4b48      	ldr	r3, [pc, #288]	; (8001cac <MX_TIM1_Init+0x168>)
 8001b8a:	225f      	movs	r2, #95	; 0x5f
 8001b8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8e:	4b47      	ldr	r3, [pc, #284]	; (8001cac <MX_TIM1_Init+0x168>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 8001b94:	4b45      	ldr	r3, [pc, #276]	; (8001cac <MX_TIM1_Init+0x168>)
 8001b96:	22fe      	movs	r2, #254	; 0xfe
 8001b98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9a:	4b44      	ldr	r3, [pc, #272]	; (8001cac <MX_TIM1_Init+0x168>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ba0:	4b42      	ldr	r3, [pc, #264]	; (8001cac <MX_TIM1_Init+0x168>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba6:	4b41      	ldr	r3, [pc, #260]	; (8001cac <MX_TIM1_Init+0x168>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bac:	483f      	ldr	r0, [pc, #252]	; (8001cac <MX_TIM1_Init+0x168>)
 8001bae:	f001 ff8b 	bl	8003ac8 <HAL_TIM_Base_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001bb8:	f000 fbec 	bl	8002394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4838      	ldr	r0, [pc, #224]	; (8001cac <MX_TIM1_Init+0x168>)
 8001bca:	f002 f9af 	bl	8003f2c <HAL_TIM_ConfigClockSource>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001bd4:	f000 fbde 	bl	8002394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bd8:	4834      	ldr	r0, [pc, #208]	; (8001cac <MX_TIM1_Init+0x168>)
 8001bda:	f001 ffc4 	bl	8003b66 <HAL_TIM_PWM_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001be4:	f000 fbd6 	bl	8002394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be8:	2300      	movs	r3, #0
 8001bea:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bf0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	482d      	ldr	r0, [pc, #180]	; (8001cac <MX_TIM1_Init+0x168>)
 8001bf8:	f002 fd70 	bl	80046dc <HAL_TIMEx_MasterConfigSynchronization>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001c02:	f000 fbc7 	bl	8002394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c06:	2360      	movs	r3, #96	; 0x60
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c12:	2300      	movs	r3, #0
 8001c14:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c26:	2200      	movs	r2, #0
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4820      	ldr	r0, [pc, #128]	; (8001cac <MX_TIM1_Init+0x168>)
 8001c2c:	f002 f8bc 	bl	8003da8 <HAL_TIM_PWM_ConfigChannel>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001c36:	f000 fbad 	bl	8002394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3e:	2204      	movs	r2, #4
 8001c40:	4619      	mov	r1, r3
 8001c42:	481a      	ldr	r0, [pc, #104]	; (8001cac <MX_TIM1_Init+0x168>)
 8001c44:	f002 f8b0 	bl	8003da8 <HAL_TIM_PWM_ConfigChannel>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001c4e:	f000 fba1 	bl	8002394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c56:	2208      	movs	r2, #8
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4814      	ldr	r0, [pc, #80]	; (8001cac <MX_TIM1_Init+0x168>)
 8001c5c:	f002 f8a4 	bl	8003da8 <HAL_TIM_PWM_ConfigChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001c66:	f000 fb95 	bl	8002394 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4807      	ldr	r0, [pc, #28]	; (8001cac <MX_TIM1_Init+0x168>)
 8001c8e:	f002 fda1 	bl	80047d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001c98:	f000 fb7c 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c9c:	4803      	ldr	r0, [pc, #12]	; (8001cac <MX_TIM1_Init+0x168>)
 8001c9e:	f000 fc35 	bl	800250c <HAL_TIM_MspPostInit>

}
 8001ca2:	bf00      	nop
 8001ca4:	3758      	adds	r7, #88	; 0x58
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000b08 	.word	0x20000b08
 8001cb0:	40010000 	.word	0x40010000

08001cb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08e      	sub	sp, #56	; 0x38
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc8:	f107 0320 	add.w	r3, r7, #32
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
 8001ce0:	615a      	str	r2, [r3, #20]
 8001ce2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ce4:	4b38      	ldr	r3, [pc, #224]	; (8001dc8 <MX_TIM2_Init+0x114>)
 8001ce6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8001cec:	4b36      	ldr	r3, [pc, #216]	; (8001dc8 <MX_TIM2_Init+0x114>)
 8001cee:	225f      	movs	r2, #95	; 0x5f
 8001cf0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf2:	4b35      	ldr	r3, [pc, #212]	; (8001dc8 <MX_TIM2_Init+0x114>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8001cf8:	4b33      	ldr	r3, [pc, #204]	; (8001dc8 <MX_TIM2_Init+0x114>)
 8001cfa:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001cfe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d00:	4b31      	ldr	r3, [pc, #196]	; (8001dc8 <MX_TIM2_Init+0x114>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d06:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <MX_TIM2_Init+0x114>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d0c:	482e      	ldr	r0, [pc, #184]	; (8001dc8 <MX_TIM2_Init+0x114>)
 8001d0e:	f001 fedb 	bl	8003ac8 <HAL_TIM_Base_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001d18:	f000 fb3c 	bl	8002394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d26:	4619      	mov	r1, r3
 8001d28:	4827      	ldr	r0, [pc, #156]	; (8001dc8 <MX_TIM2_Init+0x114>)
 8001d2a:	f002 f8ff 	bl	8003f2c <HAL_TIM_ConfigClockSource>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001d34:	f000 fb2e 	bl	8002394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d38:	4823      	ldr	r0, [pc, #140]	; (8001dc8 <MX_TIM2_Init+0x114>)
 8001d3a:	f001 ff14 	bl	8003b66 <HAL_TIM_PWM_Init>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001d44:	f000 fb26 	bl	8002394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d50:	f107 0320 	add.w	r3, r7, #32
 8001d54:	4619      	mov	r1, r3
 8001d56:	481c      	ldr	r0, [pc, #112]	; (8001dc8 <MX_TIM2_Init+0x114>)
 8001d58:	f002 fcc0 	bl	80046dc <HAL_TIMEx_MasterConfigSynchronization>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001d62:	f000 fb17 	bl	8002394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d66:	2360      	movs	r3, #96	; 0x60
 8001d68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	2200      	movs	r2, #0
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4812      	ldr	r0, [pc, #72]	; (8001dc8 <MX_TIM2_Init+0x114>)
 8001d7e:	f002 f813 	bl	8003da8 <HAL_TIM_PWM_ConfigChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001d88:	f000 fb04 	bl	8002394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	2204      	movs	r2, #4
 8001d90:	4619      	mov	r1, r3
 8001d92:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <MX_TIM2_Init+0x114>)
 8001d94:	f002 f808 	bl	8003da8 <HAL_TIM_PWM_ConfigChannel>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001d9e:	f000 faf9 	bl	8002394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	2208      	movs	r2, #8
 8001da6:	4619      	mov	r1, r3
 8001da8:	4807      	ldr	r0, [pc, #28]	; (8001dc8 <MX_TIM2_Init+0x114>)
 8001daa:	f001 fffd 	bl	8003da8 <HAL_TIM_PWM_ConfigChannel>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001db4:	f000 faee 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001db8:	4803      	ldr	r0, [pc, #12]	; (8001dc8 <MX_TIM2_Init+0x114>)
 8001dba:	f000 fba7 	bl	800250c <HAL_TIM_MspPostInit>

}
 8001dbe:	bf00      	nop
 8001dc0:	3738      	adds	r7, #56	; 0x38
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000b94 	.word	0x20000b94

08001dcc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08e      	sub	sp, #56	; 0x38
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de0:	f107 0320 	add.w	r3, r7, #32
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
 8001df8:	615a      	str	r2, [r3, #20]
 8001dfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dfc:	4b37      	ldr	r3, [pc, #220]	; (8001edc <MX_TIM3_Init+0x110>)
 8001dfe:	4a38      	ldr	r2, [pc, #224]	; (8001ee0 <MX_TIM3_Init+0x114>)
 8001e00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 8001e02:	4b36      	ldr	r3, [pc, #216]	; (8001edc <MX_TIM3_Init+0x110>)
 8001e04:	225f      	movs	r2, #95	; 0x5f
 8001e06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e08:	4b34      	ldr	r3, [pc, #208]	; (8001edc <MX_TIM3_Init+0x110>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8001e0e:	4b33      	ldr	r3, [pc, #204]	; (8001edc <MX_TIM3_Init+0x110>)
 8001e10:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001e14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e16:	4b31      	ldr	r3, [pc, #196]	; (8001edc <MX_TIM3_Init+0x110>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1c:	4b2f      	ldr	r3, [pc, #188]	; (8001edc <MX_TIM3_Init+0x110>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e22:	482e      	ldr	r0, [pc, #184]	; (8001edc <MX_TIM3_Init+0x110>)
 8001e24:	f001 fe50 	bl	8003ac8 <HAL_TIM_Base_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001e2e:	f000 fab1 	bl	8002394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e36:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4827      	ldr	r0, [pc, #156]	; (8001edc <MX_TIM3_Init+0x110>)
 8001e40:	f002 f874 	bl	8003f2c <HAL_TIM_ConfigClockSource>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001e4a:	f000 faa3 	bl	8002394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e4e:	4823      	ldr	r0, [pc, #140]	; (8001edc <MX_TIM3_Init+0x110>)
 8001e50:	f001 fe89 	bl	8003b66 <HAL_TIM_PWM_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001e5a:	f000 fa9b 	bl	8002394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e66:	f107 0320 	add.w	r3, r7, #32
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	481b      	ldr	r0, [pc, #108]	; (8001edc <MX_TIM3_Init+0x110>)
 8001e6e:	f002 fc35 	bl	80046dc <HAL_TIMEx_MasterConfigSynchronization>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001e78:	f000 fa8c 	bl	8002394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e7c:	2360      	movs	r3, #96	; 0x60
 8001e7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	2204      	movs	r2, #4
 8001e90:	4619      	mov	r1, r3
 8001e92:	4812      	ldr	r0, [pc, #72]	; (8001edc <MX_TIM3_Init+0x110>)
 8001e94:	f001 ff88 	bl	8003da8 <HAL_TIM_PWM_ConfigChannel>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001e9e:	f000 fa79 	bl	8002394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	2208      	movs	r2, #8
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	480c      	ldr	r0, [pc, #48]	; (8001edc <MX_TIM3_Init+0x110>)
 8001eaa:	f001 ff7d 	bl	8003da8 <HAL_TIM_PWM_ConfigChannel>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001eb4:	f000 fa6e 	bl	8002394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	220c      	movs	r2, #12
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4807      	ldr	r0, [pc, #28]	; (8001edc <MX_TIM3_Init+0x110>)
 8001ec0:	f001 ff72 	bl	8003da8 <HAL_TIM_PWM_ConfigChannel>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001eca:	f000 fa63 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ece:	4803      	ldr	r0, [pc, #12]	; (8001edc <MX_TIM3_Init+0x110>)
 8001ed0:	f000 fb1c 	bl	800250c <HAL_TIM_MspPostInit>

}
 8001ed4:	bf00      	nop
 8001ed6:	3738      	adds	r7, #56	; 0x38
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000ac0 	.word	0x20000ac0
 8001ee0:	40000400 	.word	0x40000400

08001ee4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08e      	sub	sp, #56	; 0x38
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	609a      	str	r2, [r3, #8]
 8001ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef8:	f107 0320 	add.w	r3, r7, #32
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
 8001f10:	615a      	str	r2, [r3, #20]
 8001f12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f14:	4b2c      	ldr	r3, [pc, #176]	; (8001fc8 <MX_TIM4_Init+0xe4>)
 8001f16:	4a2d      	ldr	r2, [pc, #180]	; (8001fcc <MX_TIM4_Init+0xe8>)
 8001f18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 8001f1a:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <MX_TIM4_Init+0xe4>)
 8001f1c:	225f      	movs	r2, #95	; 0x5f
 8001f1e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f20:	4b29      	ldr	r3, [pc, #164]	; (8001fc8 <MX_TIM4_Init+0xe4>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20;
 8001f26:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <MX_TIM4_Init+0xe4>)
 8001f28:	2214      	movs	r2, #20
 8001f2a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f2c:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <MX_TIM4_Init+0xe4>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f32:	4b25      	ldr	r3, [pc, #148]	; (8001fc8 <MX_TIM4_Init+0xe4>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f38:	4823      	ldr	r0, [pc, #140]	; (8001fc8 <MX_TIM4_Init+0xe4>)
 8001f3a:	f001 fdc5 	bl	8003ac8 <HAL_TIM_Base_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001f44:	f000 fa26 	bl	8002394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f52:	4619      	mov	r1, r3
 8001f54:	481c      	ldr	r0, [pc, #112]	; (8001fc8 <MX_TIM4_Init+0xe4>)
 8001f56:	f001 ffe9 	bl	8003f2c <HAL_TIM_ConfigClockSource>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001f60:	f000 fa18 	bl	8002394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f64:	4818      	ldr	r0, [pc, #96]	; (8001fc8 <MX_TIM4_Init+0xe4>)
 8001f66:	f001 fdfe 	bl	8003b66 <HAL_TIM_PWM_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001f70:	f000 fa10 	bl	8002394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f74:	2300      	movs	r3, #0
 8001f76:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f7c:	f107 0320 	add.w	r3, r7, #32
 8001f80:	4619      	mov	r1, r3
 8001f82:	4811      	ldr	r0, [pc, #68]	; (8001fc8 <MX_TIM4_Init+0xe4>)
 8001f84:	f002 fbaa 	bl	80046dc <HAL_TIMEx_MasterConfigSynchronization>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001f8e:	f000 fa01 	bl	8002394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f92:	2360      	movs	r3, #96	; 0x60
 8001f94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4807      	ldr	r0, [pc, #28]	; (8001fc8 <MX_TIM4_Init+0xe4>)
 8001faa:	f001 fefd 	bl	8003da8 <HAL_TIM_PWM_ConfigChannel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001fb4:	f000 f9ee 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001fb8:	4803      	ldr	r0, [pc, #12]	; (8001fc8 <MX_TIM4_Init+0xe4>)
 8001fba:	f000 faa7 	bl	800250c <HAL_TIM_MspPostInit>

}
 8001fbe:	bf00      	nop
 8001fc0:	3738      	adds	r7, #56	; 0x38
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000a30 	.word	0x20000a30
 8001fcc:	40000800 	.word	0x40000800

08001fd0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fd6:	f107 0308 	add.w	r3, r7, #8
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe4:	463b      	mov	r3, r7
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001fec:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <MX_TIM5_Init+0x94>)
 8001fee:	4a1e      	ldr	r2, [pc, #120]	; (8002068 <MX_TIM5_Init+0x98>)
 8001ff0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 96-1;
 8001ff2:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <MX_TIM5_Init+0x94>)
 8001ff4:	225f      	movs	r2, #95	; 0x5f
 8001ff6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff8:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <MX_TIM5_Init+0x94>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 8001ffe:	4b19      	ldr	r3, [pc, #100]	; (8002064 <MX_TIM5_Init+0x94>)
 8002000:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002004:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002006:	4b17      	ldr	r3, [pc, #92]	; (8002064 <MX_TIM5_Init+0x94>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800200c:	4b15      	ldr	r3, [pc, #84]	; (8002064 <MX_TIM5_Init+0x94>)
 800200e:	2200      	movs	r2, #0
 8002010:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002012:	4814      	ldr	r0, [pc, #80]	; (8002064 <MX_TIM5_Init+0x94>)
 8002014:	f001 fd58 	bl	8003ac8 <HAL_TIM_Base_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800201e:	f000 f9b9 	bl	8002394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002026:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002028:	f107 0308 	add.w	r3, r7, #8
 800202c:	4619      	mov	r1, r3
 800202e:	480d      	ldr	r0, [pc, #52]	; (8002064 <MX_TIM5_Init+0x94>)
 8002030:	f001 ff7c 	bl	8003f2c <HAL_TIM_ConfigClockSource>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800203a:	f000 f9ab 	bl	8002394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800203e:	2300      	movs	r3, #0
 8002040:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002046:	463b      	mov	r3, r7
 8002048:	4619      	mov	r1, r3
 800204a:	4806      	ldr	r0, [pc, #24]	; (8002064 <MX_TIM5_Init+0x94>)
 800204c:	f002 fb46 	bl	80046dc <HAL_TIMEx_MasterConfigSynchronization>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002056:	f000 f99d 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800205a:	bf00      	nop
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000a78 	.word	0x20000a78
 8002068:	40000c00 	.word	0x40000c00

0800206c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002072:	f107 0308 	add.w	r3, r7, #8
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002080:	463b      	mov	r3, r7
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002088:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <MX_TIM8_Init+0x98>)
 800208a:	4a1f      	ldr	r2, [pc, #124]	; (8002108 <MX_TIM8_Init+0x9c>)
 800208c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800208e:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <MX_TIM8_Init+0x98>)
 8002090:	2200      	movs	r2, #0
 8002092:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002094:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <MX_TIM8_Init+0x98>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800209a:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <MX_TIM8_Init+0x98>)
 800209c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020a0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a2:	4b18      	ldr	r3, [pc, #96]	; (8002104 <MX_TIM8_Init+0x98>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80020a8:	4b16      	ldr	r3, [pc, #88]	; (8002104 <MX_TIM8_Init+0x98>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <MX_TIM8_Init+0x98>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80020b4:	4813      	ldr	r0, [pc, #76]	; (8002104 <MX_TIM8_Init+0x98>)
 80020b6:	f001 fd07 	bl	8003ac8 <HAL_TIM_Base_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80020c0:	f000 f968 	bl	8002394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80020ca:	f107 0308 	add.w	r3, r7, #8
 80020ce:	4619      	mov	r1, r3
 80020d0:	480c      	ldr	r0, [pc, #48]	; (8002104 <MX_TIM8_Init+0x98>)
 80020d2:	f001 ff2b 	bl	8003f2c <HAL_TIM_ConfigClockSource>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80020dc:	f000 f95a 	bl	8002394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e0:	2300      	movs	r3, #0
 80020e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80020e8:	463b      	mov	r3, r7
 80020ea:	4619      	mov	r1, r3
 80020ec:	4805      	ldr	r0, [pc, #20]	; (8002104 <MX_TIM8_Init+0x98>)
 80020ee:	f002 faf5 	bl	80046dc <HAL_TIMEx_MasterConfigSynchronization>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80020f8:	f000 f94c 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80020fc:	bf00      	nop
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	200009e8 	.word	0x200009e8
 8002108:	40010400 	.word	0x40010400

0800210c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <MX_USART2_UART_Init+0x4c>)
 8002112:	4a12      	ldr	r2, [pc, #72]	; (800215c <MX_USART2_UART_Init+0x50>)
 8002114:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <MX_USART2_UART_Init+0x4c>)
 8002118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800211c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <MX_USART2_UART_Init+0x4c>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <MX_USART2_UART_Init+0x4c>)
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <MX_USART2_UART_Init+0x4c>)
 800212c:	2200      	movs	r2, #0
 800212e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <MX_USART2_UART_Init+0x4c>)
 8002132:	220c      	movs	r2, #12
 8002134:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <MX_USART2_UART_Init+0x4c>)
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <MX_USART2_UART_Init+0x4c>)
 800213e:	2200      	movs	r2, #0
 8002140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_USART2_UART_Init+0x4c>)
 8002144:	f002 fb98 	bl	8004878 <HAL_UART_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800214e:	f000 f921 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000bdc 	.word	0x20000bdc
 800215c:	40004400 	.word	0x40004400

08002160 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <MX_USART6_UART_Init+0x4c>)
 8002166:	4a12      	ldr	r2, [pc, #72]	; (80021b0 <MX_USART6_UART_Init+0x50>)
 8002168:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <MX_USART6_UART_Init+0x4c>)
 800216c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002170:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002172:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <MX_USART6_UART_Init+0x4c>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <MX_USART6_UART_Init+0x4c>)
 800217a:	2200      	movs	r2, #0
 800217c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800217e:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <MX_USART6_UART_Init+0x4c>)
 8002180:	2200      	movs	r2, #0
 8002182:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <MX_USART6_UART_Init+0x4c>)
 8002186:	220c      	movs	r2, #12
 8002188:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800218a:	4b08      	ldr	r3, [pc, #32]	; (80021ac <MX_USART6_UART_Init+0x4c>)
 800218c:	2200      	movs	r2, #0
 800218e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <MX_USART6_UART_Init+0x4c>)
 8002192:	2200      	movs	r2, #0
 8002194:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002196:	4805      	ldr	r0, [pc, #20]	; (80021ac <MX_USART6_UART_Init+0x4c>)
 8002198:	f002 fb6e 	bl	8004878 <HAL_UART_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80021a2:	f000 f8f7 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000b50 	.word	0x20000b50
 80021b0:	40011400 	.word	0x40011400

080021b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08c      	sub	sp, #48	; 0x30
 80021b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ba:	f107 031c 	add.w	r3, r7, #28
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
 80021c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	4b6c      	ldr	r3, [pc, #432]	; (8002380 <MX_GPIO_Init+0x1cc>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a6b      	ldr	r2, [pc, #428]	; (8002380 <MX_GPIO_Init+0x1cc>)
 80021d4:	f043 0310 	orr.w	r3, r3, #16
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b69      	ldr	r3, [pc, #420]	; (8002380 <MX_GPIO_Init+0x1cc>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	61bb      	str	r3, [r7, #24]
 80021e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	4b65      	ldr	r3, [pc, #404]	; (8002380 <MX_GPIO_Init+0x1cc>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a64      	ldr	r2, [pc, #400]	; (8002380 <MX_GPIO_Init+0x1cc>)
 80021f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b62      	ldr	r3, [pc, #392]	; (8002380 <MX_GPIO_Init+0x1cc>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	4b5e      	ldr	r3, [pc, #376]	; (8002380 <MX_GPIO_Init+0x1cc>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a5d      	ldr	r2, [pc, #372]	; (8002380 <MX_GPIO_Init+0x1cc>)
 800220c:	f043 0304 	orr.w	r3, r3, #4
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b5b      	ldr	r3, [pc, #364]	; (8002380 <MX_GPIO_Init+0x1cc>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	4b57      	ldr	r3, [pc, #348]	; (8002380 <MX_GPIO_Init+0x1cc>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a56      	ldr	r2, [pc, #344]	; (8002380 <MX_GPIO_Init+0x1cc>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b54      	ldr	r3, [pc, #336]	; (8002380 <MX_GPIO_Init+0x1cc>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	4b50      	ldr	r3, [pc, #320]	; (8002380 <MX_GPIO_Init+0x1cc>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a4f      	ldr	r2, [pc, #316]	; (8002380 <MX_GPIO_Init+0x1cc>)
 8002244:	f043 0302 	orr.w	r3, r3, #2
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b4d      	ldr	r3, [pc, #308]	; (8002380 <MX_GPIO_Init+0x1cc>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
 800225a:	4b49      	ldr	r3, [pc, #292]	; (8002380 <MX_GPIO_Init+0x1cc>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a48      	ldr	r2, [pc, #288]	; (8002380 <MX_GPIO_Init+0x1cc>)
 8002260:	f043 0308 	orr.w	r3, r3, #8
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b46      	ldr	r3, [pc, #280]	; (8002380 <MX_GPIO_Init+0x1cc>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WiFi_OK_Pin|L_Porche_Pin|L_Tendedero_Pin|L_Garaje_Pin, GPIO_PIN_RESET);
 8002272:	2200      	movs	r2, #0
 8002274:	f641 4101 	movw	r1, #7169	; 0x1c01
 8002278:	4842      	ldr	r0, [pc, #264]	; (8002384 <MX_GPIO_Init+0x1d0>)
 800227a:	f000 ff7f 	bl	800317c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, L_Jardin_Pin|L_Oficina_Pin|L_Derecha_Pin|GPIO_PIN_3
 800227e:	2200      	movs	r2, #0
 8002280:	21ff      	movs	r1, #255	; 0xff
 8002282:	4841      	ldr	r0, [pc, #260]	; (8002388 <MX_GPIO_Init+0x1d4>)
 8002284:	f000 ff7a 	bl	800317c <HAL_GPIO_WritePin>
                          |L_Domitorio_Pin|L_Espejo_Pin|L_Bano_Pin|L_Fregadero_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L_Cocina_Pin|L_Recibidor_Pin|L_Ambiente_Pin|L_Comedor_Pin
 8002288:	2200      	movs	r2, #0
 800228a:	21f8      	movs	r1, #248	; 0xf8
 800228c:	483f      	ldr	r0, [pc, #252]	; (800238c <MX_GPIO_Init+0x1d8>)
 800228e:	f000 ff75 	bl	800317c <HAL_GPIO_WritePin>
                          |L_Sala_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B_Stop_Pin */
  GPIO_InitStruct.Pin = B_Stop_Pin;
 8002292:	2304      	movs	r3, #4
 8002294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002296:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800229a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B_Stop_GPIO_Port, &GPIO_InitStruct);
 80022a0:	f107 031c 	add.w	r3, r7, #28
 80022a4:	4619      	mov	r1, r3
 80022a6:	483a      	ldr	r0, [pc, #232]	; (8002390 <MX_GPIO_Init+0x1dc>)
 80022a8:	f000 fdb4 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : S_Int_Pin B_Timbre_Pin S_Ext_Pin */
  GPIO_InitStruct.Pin = S_Int_Pin|B_Timbre_Pin|S_Ext_Pin;
 80022ac:	230b      	movs	r3, #11
 80022ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80022b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022b6:	2301      	movs	r3, #1
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022ba:	f107 031c 	add.w	r3, r7, #28
 80022be:	4619      	mov	r1, r3
 80022c0:	4833      	ldr	r0, [pc, #204]	; (8002390 <MX_GPIO_Init+0x1dc>)
 80022c2:	f000 fda7 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : Fin_Servo_Pin */
  GPIO_InitStruct.Pin = Fin_Servo_Pin;
 80022c6:	2310      	movs	r3, #16
 80022c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022d0:	2302      	movs	r3, #2
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Fin_Servo_GPIO_Port, &GPIO_InitStruct);
 80022d4:	f107 031c 	add.w	r3, r7, #28
 80022d8:	4619      	mov	r1, r3
 80022da:	482d      	ldr	r0, [pc, #180]	; (8002390 <MX_GPIO_Init+0x1dc>)
 80022dc:	f000 fd9a 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : WiFi_OK_Pin L_Porche_Pin L_Tendedero_Pin L_Garaje_Pin */
  GPIO_InitStruct.Pin = WiFi_OK_Pin|L_Porche_Pin|L_Tendedero_Pin|L_Garaje_Pin;
 80022e0:	f641 4301 	movw	r3, #7169	; 0x1c01
 80022e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e6:	2301      	movs	r3, #1
 80022e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ee:	2300      	movs	r3, #0
 80022f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f2:	f107 031c 	add.w	r3, r7, #28
 80022f6:	4619      	mov	r1, r3
 80022f8:	4822      	ldr	r0, [pc, #136]	; (8002384 <MX_GPIO_Init+0x1d0>)
 80022fa:	f000 fd8b 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_Jardin_Pin L_Oficina_Pin L_Derecha_Pin PD3
                           L_Domitorio_Pin L_Espejo_Pin L_Bano_Pin L_Fregadero_Pin */
  GPIO_InitStruct.Pin = L_Jardin_Pin|L_Oficina_Pin|L_Derecha_Pin|GPIO_PIN_3
 80022fe:	23ff      	movs	r3, #255	; 0xff
 8002300:	61fb      	str	r3, [r7, #28]
                          |L_Domitorio_Pin|L_Espejo_Pin|L_Bano_Pin|L_Fregadero_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002302:	2301      	movs	r3, #1
 8002304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800230e:	f107 031c 	add.w	r3, r7, #28
 8002312:	4619      	mov	r1, r3
 8002314:	481c      	ldr	r0, [pc, #112]	; (8002388 <MX_GPIO_Init+0x1d4>)
 8002316:	f000 fd7d 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_Cocina_Pin L_Recibidor_Pin L_Ambiente_Pin L_Comedor_Pin
                           L_Sala_Pin */
  GPIO_InitStruct.Pin = L_Cocina_Pin|L_Recibidor_Pin|L_Ambiente_Pin|L_Comedor_Pin
 800231a:	23f8      	movs	r3, #248	; 0xf8
 800231c:	61fb      	str	r3, [r7, #28]
                          |L_Sala_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231e:	2301      	movs	r3, #1
 8002320:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002326:	2300      	movs	r3, #0
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232a:	f107 031c 	add.w	r3, r7, #28
 800232e:	4619      	mov	r1, r3
 8002330:	4816      	ldr	r0, [pc, #88]	; (800238c <MX_GPIO_Init+0x1d8>)
 8002332:	f000 fd6f 	bl	8002e14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002336:	2200      	movs	r2, #0
 8002338:	2100      	movs	r1, #0
 800233a:	2006      	movs	r0, #6
 800233c:	f000 fca1 	bl	8002c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002340:	2006      	movs	r0, #6
 8002342:	f000 fcba 	bl	8002cba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	2007      	movs	r0, #7
 800234c:	f000 fc99 	bl	8002c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002350:	2007      	movs	r0, #7
 8002352:	f000 fcb2 	bl	8002cba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	2100      	movs	r1, #0
 800235a:	2009      	movs	r0, #9
 800235c:	f000 fc91 	bl	8002c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002360:	2009      	movs	r0, #9
 8002362:	f000 fcaa 	bl	8002cba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	2100      	movs	r1, #0
 800236a:	200a      	movs	r0, #10
 800236c:	f000 fc89 	bl	8002c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002370:	200a      	movs	r0, #10
 8002372:	f000 fca2 	bl	8002cba <HAL_NVIC_EnableIRQ>

}
 8002376:	bf00      	nop
 8002378:	3730      	adds	r7, #48	; 0x30
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	40020800 	.word	0x40020800
 8002388:	40020c00 	.word	0x40020c00
 800238c:	40020400 	.word	0x40020400
 8002390:	40021000 	.word	0x40021000

08002394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002398:	b672      	cpsid	i
}
 800239a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800239c:	e7fe      	b.n	800239c <Error_Handler+0x8>
	...

080023a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	607b      	str	r3, [r7, #4]
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <HAL_MspInit+0x4c>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	4a0f      	ldr	r2, [pc, #60]	; (80023ec <HAL_MspInit+0x4c>)
 80023b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b4:	6453      	str	r3, [r2, #68]	; 0x44
 80023b6:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <HAL_MspInit+0x4c>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023be:	607b      	str	r3, [r7, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	603b      	str	r3, [r7, #0]
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_MspInit+0x4c>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	4a08      	ldr	r2, [pc, #32]	; (80023ec <HAL_MspInit+0x4c>)
 80023cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_MspInit+0x4c>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023de:	2007      	movs	r0, #7
 80023e0:	f000 fc44 	bl	8002c6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40023800 	.word	0x40023800

080023f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b089      	sub	sp, #36	; 0x24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a3d      	ldr	r2, [pc, #244]	; (80024f4 <HAL_TIM_Base_MspInit+0x104>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d10e      	bne.n	8002420 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	4b3c      	ldr	r3, [pc, #240]	; (80024f8 <HAL_TIM_Base_MspInit+0x108>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	4a3b      	ldr	r2, [pc, #236]	; (80024f8 <HAL_TIM_Base_MspInit+0x108>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6453      	str	r3, [r2, #68]	; 0x44
 8002412:	4b39      	ldr	r3, [pc, #228]	; (80024f8 <HAL_TIM_Base_MspInit+0x108>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	61fb      	str	r3, [r7, #28]
 800241c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800241e:	e062      	b.n	80024e6 <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002428:	d10e      	bne.n	8002448 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	4b32      	ldr	r3, [pc, #200]	; (80024f8 <HAL_TIM_Base_MspInit+0x108>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	4a31      	ldr	r2, [pc, #196]	; (80024f8 <HAL_TIM_Base_MspInit+0x108>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6413      	str	r3, [r2, #64]	; 0x40
 800243a:	4b2f      	ldr	r3, [pc, #188]	; (80024f8 <HAL_TIM_Base_MspInit+0x108>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	61bb      	str	r3, [r7, #24]
 8002444:	69bb      	ldr	r3, [r7, #24]
}
 8002446:	e04e      	b.n	80024e6 <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM3)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a2b      	ldr	r2, [pc, #172]	; (80024fc <HAL_TIM_Base_MspInit+0x10c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d10e      	bne.n	8002470 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	4b28      	ldr	r3, [pc, #160]	; (80024f8 <HAL_TIM_Base_MspInit+0x108>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	4a27      	ldr	r2, [pc, #156]	; (80024f8 <HAL_TIM_Base_MspInit+0x108>)
 800245c:	f043 0302 	orr.w	r3, r3, #2
 8002460:	6413      	str	r3, [r2, #64]	; 0x40
 8002462:	4b25      	ldr	r3, [pc, #148]	; (80024f8 <HAL_TIM_Base_MspInit+0x108>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	697b      	ldr	r3, [r7, #20]
}
 800246e:	e03a      	b.n	80024e6 <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM4)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a22      	ldr	r2, [pc, #136]	; (8002500 <HAL_TIM_Base_MspInit+0x110>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d10e      	bne.n	8002498 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <HAL_TIM_Base_MspInit+0x108>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	4a1d      	ldr	r2, [pc, #116]	; (80024f8 <HAL_TIM_Base_MspInit+0x108>)
 8002484:	f043 0304 	orr.w	r3, r3, #4
 8002488:	6413      	str	r3, [r2, #64]	; 0x40
 800248a:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <HAL_TIM_Base_MspInit+0x108>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]
}
 8002496:	e026      	b.n	80024e6 <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM5)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a19      	ldr	r2, [pc, #100]	; (8002504 <HAL_TIM_Base_MspInit+0x114>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d10e      	bne.n	80024c0 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <HAL_TIM_Base_MspInit+0x108>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	4a13      	ldr	r2, [pc, #76]	; (80024f8 <HAL_TIM_Base_MspInit+0x108>)
 80024ac:	f043 0308 	orr.w	r3, r3, #8
 80024b0:	6413      	str	r3, [r2, #64]	; 0x40
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_TIM_Base_MspInit+0x108>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
}
 80024be:	e012      	b.n	80024e6 <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM8)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a10      	ldr	r2, [pc, #64]	; (8002508 <HAL_TIM_Base_MspInit+0x118>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d10d      	bne.n	80024e6 <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <HAL_TIM_Base_MspInit+0x108>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	4a09      	ldr	r2, [pc, #36]	; (80024f8 <HAL_TIM_Base_MspInit+0x108>)
 80024d4:	f043 0302 	orr.w	r3, r3, #2
 80024d8:	6453      	str	r3, [r2, #68]	; 0x44
 80024da:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <HAL_TIM_Base_MspInit+0x108>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	68bb      	ldr	r3, [r7, #8]
}
 80024e6:	bf00      	nop
 80024e8:	3724      	adds	r7, #36	; 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40010000 	.word	0x40010000
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40000400 	.word	0x40000400
 8002500:	40000800 	.word	0x40000800
 8002504:	40000c00 	.word	0x40000c00
 8002508:	40010400 	.word	0x40010400

0800250c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08e      	sub	sp, #56	; 0x38
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a67      	ldr	r2, [pc, #412]	; (80026c8 <HAL_TIM_MspPostInit+0x1bc>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d11f      	bne.n	800256e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	623b      	str	r3, [r7, #32]
 8002532:	4b66      	ldr	r3, [pc, #408]	; (80026cc <HAL_TIM_MspPostInit+0x1c0>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a65      	ldr	r2, [pc, #404]	; (80026cc <HAL_TIM_MspPostInit+0x1c0>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b63      	ldr	r3, [pc, #396]	; (80026cc <HAL_TIM_MspPostInit+0x1c0>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	623b      	str	r3, [r7, #32]
 8002548:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = L_GamingG_Pin|L_GamingR_Pin|L_GamingB_Pin;
 800254a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002550:	2302      	movs	r3, #2
 8002552:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002558:	2300      	movs	r3, #0
 800255a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800255c:	2301      	movs	r3, #1
 800255e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002564:	4619      	mov	r1, r3
 8002566:	485a      	ldr	r0, [pc, #360]	; (80026d0 <HAL_TIM_MspPostInit+0x1c4>)
 8002568:	f000 fc54 	bl	8002e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800256c:	e0a8      	b.n	80026c0 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM2)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002576:	d13d      	bne.n	80025f4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002578:	2300      	movs	r3, #0
 800257a:	61fb      	str	r3, [r7, #28]
 800257c:	4b53      	ldr	r3, [pc, #332]	; (80026cc <HAL_TIM_MspPostInit+0x1c0>)
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	4a52      	ldr	r2, [pc, #328]	; (80026cc <HAL_TIM_MspPostInit+0x1c0>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	6313      	str	r3, [r2, #48]	; 0x30
 8002588:	4b50      	ldr	r3, [pc, #320]	; (80026cc <HAL_TIM_MspPostInit+0x1c0>)
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002594:	2300      	movs	r3, #0
 8002596:	61bb      	str	r3, [r7, #24]
 8002598:	4b4c      	ldr	r3, [pc, #304]	; (80026cc <HAL_TIM_MspPostInit+0x1c0>)
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	4a4b      	ldr	r2, [pc, #300]	; (80026cc <HAL_TIM_MspPostInit+0x1c0>)
 800259e:	f043 0302 	orr.w	r3, r3, #2
 80025a2:	6313      	str	r3, [r2, #48]	; 0x30
 80025a4:	4b49      	ldr	r3, [pc, #292]	; (80026cc <HAL_TIM_MspPostInit+0x1c0>)
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	61bb      	str	r3, [r7, #24]
 80025ae:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = S_Parcela_Pin|S_Garaje_Pin;
 80025b0:	2303      	movs	r3, #3
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b4:	2302      	movs	r3, #2
 80025b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025bc:	2300      	movs	r3, #0
 80025be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025c0:	2301      	movs	r3, #1
 80025c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c8:	4619      	mov	r1, r3
 80025ca:	4841      	ldr	r0, [pc, #260]	; (80026d0 <HAL_TIM_MspPostInit+0x1c4>)
 80025cc:	f000 fc22 	bl	8002e14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S_Tendedero_Pin;
 80025d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	2302      	movs	r3, #2
 80025d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025de:	2300      	movs	r3, #0
 80025e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025e2:	2301      	movs	r3, #1
 80025e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(S_Tendedero_GPIO_Port, &GPIO_InitStruct);
 80025e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ea:	4619      	mov	r1, r3
 80025ec:	4839      	ldr	r0, [pc, #228]	; (80026d4 <HAL_TIM_MspPostInit+0x1c8>)
 80025ee:	f000 fc11 	bl	8002e14 <HAL_GPIO_Init>
}
 80025f2:	e065      	b.n	80026c0 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM3)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a37      	ldr	r2, [pc, #220]	; (80026d8 <HAL_TIM_MspPostInit+0x1cc>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d13c      	bne.n	8002678 <HAL_TIM_MspPostInit+0x16c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	4b32      	ldr	r3, [pc, #200]	; (80026cc <HAL_TIM_MspPostInit+0x1c0>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a31      	ldr	r2, [pc, #196]	; (80026cc <HAL_TIM_MspPostInit+0x1c0>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b2f      	ldr	r3, [pc, #188]	; (80026cc <HAL_TIM_MspPostInit+0x1c0>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	4b2b      	ldr	r3, [pc, #172]	; (80026cc <HAL_TIM_MspPostInit+0x1c0>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	4a2a      	ldr	r2, [pc, #168]	; (80026cc <HAL_TIM_MspPostInit+0x1c0>)
 8002624:	f043 0302 	orr.w	r3, r3, #2
 8002628:	6313      	str	r3, [r2, #48]	; 0x30
 800262a:	4b28      	ldr	r3, [pc, #160]	; (80026cc <HAL_TIM_MspPostInit+0x1c0>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = S_Dormitorio_Pin;
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263a:	2302      	movs	r3, #2
 800263c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	2300      	movs	r3, #0
 8002644:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002646:	2302      	movs	r3, #2
 8002648:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(S_Dormitorio_GPIO_Port, &GPIO_InitStruct);
 800264a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800264e:	4619      	mov	r1, r3
 8002650:	481f      	ldr	r0, [pc, #124]	; (80026d0 <HAL_TIM_MspPostInit+0x1c4>)
 8002652:	f000 fbdf 	bl	8002e14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S_Oficina_Pin|S_Salon_Pin;
 8002656:	2303      	movs	r3, #3
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265a:	2302      	movs	r3, #2
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002662:	2300      	movs	r3, #0
 8002664:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002666:	2302      	movs	r3, #2
 8002668:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800266e:	4619      	mov	r1, r3
 8002670:	4818      	ldr	r0, [pc, #96]	; (80026d4 <HAL_TIM_MspPostInit+0x1c8>)
 8002672:	f000 fbcf 	bl	8002e14 <HAL_GPIO_Init>
}
 8002676:	e023      	b.n	80026c0 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM4)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a17      	ldr	r2, [pc, #92]	; (80026dc <HAL_TIM_MspPostInit+0x1d0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d11e      	bne.n	80026c0 <HAL_TIM_MspPostInit+0x1b4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	4b11      	ldr	r3, [pc, #68]	; (80026cc <HAL_TIM_MspPostInit+0x1c0>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	4a10      	ldr	r2, [pc, #64]	; (80026cc <HAL_TIM_MspPostInit+0x1c0>)
 800268c:	f043 0308 	orr.w	r3, r3, #8
 8002690:	6313      	str	r3, [r2, #48]	; 0x30
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <HAL_TIM_MspPostInit+0x1c0>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Z_Timbre_Pin;
 800269e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ac:	2300      	movs	r3, #0
 80026ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026b0:	2302      	movs	r3, #2
 80026b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Z_Timbre_GPIO_Port, &GPIO_InitStruct);
 80026b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b8:	4619      	mov	r1, r3
 80026ba:	4809      	ldr	r0, [pc, #36]	; (80026e0 <HAL_TIM_MspPostInit+0x1d4>)
 80026bc:	f000 fbaa 	bl	8002e14 <HAL_GPIO_Init>
}
 80026c0:	bf00      	nop
 80026c2:	3738      	adds	r7, #56	; 0x38
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40010000 	.word	0x40010000
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40020000 	.word	0x40020000
 80026d4:	40020400 	.word	0x40020400
 80026d8:	40000400 	.word	0x40000400
 80026dc:	40000800 	.word	0x40000800
 80026e0:	40020c00 	.word	0x40020c00

080026e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08c      	sub	sp, #48	; 0x30
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 031c 	add.w	r3, r7, #28
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a3a      	ldr	r2, [pc, #232]	; (80027ec <HAL_UART_MspInit+0x108>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d134      	bne.n	8002770 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	4b39      	ldr	r3, [pc, #228]	; (80027f0 <HAL_UART_MspInit+0x10c>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	4a38      	ldr	r2, [pc, #224]	; (80027f0 <HAL_UART_MspInit+0x10c>)
 8002710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002714:	6413      	str	r3, [r2, #64]	; 0x40
 8002716:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <HAL_UART_MspInit+0x10c>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	61bb      	str	r3, [r7, #24]
 8002720:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	4b32      	ldr	r3, [pc, #200]	; (80027f0 <HAL_UART_MspInit+0x10c>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a31      	ldr	r2, [pc, #196]	; (80027f0 <HAL_UART_MspInit+0x10c>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b2f      	ldr	r3, [pc, #188]	; (80027f0 <HAL_UART_MspInit+0x10c>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800273e:	230c      	movs	r3, #12
 8002740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	2302      	movs	r3, #2
 8002744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274a:	2303      	movs	r3, #3
 800274c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800274e:	2307      	movs	r3, #7
 8002750:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002752:	f107 031c 	add.w	r3, r7, #28
 8002756:	4619      	mov	r1, r3
 8002758:	4826      	ldr	r0, [pc, #152]	; (80027f4 <HAL_UART_MspInit+0x110>)
 800275a:	f000 fb5b 	bl	8002e14 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	2100      	movs	r1, #0
 8002762:	2026      	movs	r0, #38	; 0x26
 8002764:	f000 fa8d 	bl	8002c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002768:	2026      	movs	r0, #38	; 0x26
 800276a:	f000 faa6 	bl	8002cba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800276e:	e038      	b.n	80027e2 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a20      	ldr	r2, [pc, #128]	; (80027f8 <HAL_UART_MspInit+0x114>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d133      	bne.n	80027e2 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <HAL_UART_MspInit+0x10c>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	4a1b      	ldr	r2, [pc, #108]	; (80027f0 <HAL_UART_MspInit+0x10c>)
 8002784:	f043 0320 	orr.w	r3, r3, #32
 8002788:	6453      	str	r3, [r2, #68]	; 0x44
 800278a:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_UART_MspInit+0x10c>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	f003 0320 	and.w	r3, r3, #32
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <HAL_UART_MspInit+0x10c>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a14      	ldr	r2, [pc, #80]	; (80027f0 <HAL_UART_MspInit+0x10c>)
 80027a0:	f043 0304 	orr.w	r3, r3, #4
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
 80027a6:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_UART_MspInit+0x10c>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027b2:	23c0      	movs	r3, #192	; 0xc0
 80027b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027be:	2303      	movs	r3, #3
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027c2:	2308      	movs	r3, #8
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c6:	f107 031c 	add.w	r3, r7, #28
 80027ca:	4619      	mov	r1, r3
 80027cc:	480b      	ldr	r0, [pc, #44]	; (80027fc <HAL_UART_MspInit+0x118>)
 80027ce:	f000 fb21 	bl	8002e14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80027d2:	2200      	movs	r2, #0
 80027d4:	2100      	movs	r1, #0
 80027d6:	2047      	movs	r0, #71	; 0x47
 80027d8:	f000 fa53 	bl	8002c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80027dc:	2047      	movs	r0, #71	; 0x47
 80027de:	f000 fa6c 	bl	8002cba <HAL_NVIC_EnableIRQ>
}
 80027e2:	bf00      	nop
 80027e4:	3730      	adds	r7, #48	; 0x30
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40004400 	.word	0x40004400
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40020000 	.word	0x40020000
 80027f8:	40011400 	.word	0x40011400
 80027fc:	40020800 	.word	0x40020800

08002800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002804:	e7fe      	b.n	8002804 <NMI_Handler+0x4>

08002806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800280a:	e7fe      	b.n	800280a <HardFault_Handler+0x4>

0800280c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002810:	e7fe      	b.n	8002810 <MemManage_Handler+0x4>

08002812 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002812:	b480      	push	{r7}
 8002814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002816:	e7fe      	b.n	8002816 <BusFault_Handler+0x4>

08002818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800281c:	e7fe      	b.n	800281c <UsageFault_Handler+0x4>

0800281e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800283a:	b480      	push	{r7}
 800283c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800284c:	f000 f8fa 	bl	8002a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}

08002854 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002858:	2001      	movs	r0, #1
 800285a:	f000 fca9 	bl	80031b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}

08002862 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002866:	2002      	movs	r0, #2
 8002868:	f000 fca2 	bl	80031b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}

08002870 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002874:	2008      	movs	r0, #8
 8002876:	f000 fc9b 	bl	80031b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}

0800287e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002882:	2010      	movs	r0, #16
 8002884:	f000 fc94 	bl	80031b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002888:	bf00      	nop
 800288a:	bd80      	pop	{r7, pc}

0800288c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UART_isr(&huart2);
 8002890:	4803      	ldr	r0, [pc, #12]	; (80028a0 <USART2_IRQHandler+0x14>)
 8002892:	f7fe fd7b 	bl	800138c <UART_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002896:	4802      	ldr	r0, [pc, #8]	; (80028a0 <USART2_IRQHandler+0x14>)
 8002898:	f002 f970 	bl	8004b7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800289c:	bf00      	nop
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000bdc 	.word	0x20000bdc

080028a4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	UART_isr(&huart6);
 80028a8:	4803      	ldr	r0, [pc, #12]	; (80028b8 <USART6_IRQHandler+0x14>)
 80028aa:	f7fe fd6f 	bl	800138c <UART_isr>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80028ae:	4802      	ldr	r0, [pc, #8]	; (80028b8 <USART6_IRQHandler+0x14>)
 80028b0:	f002 f964 	bl	8004b7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80028b4:	bf00      	nop
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000b50 	.word	0x20000b50

080028bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028c4:	4a14      	ldr	r2, [pc, #80]	; (8002918 <_sbrk+0x5c>)
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <_sbrk+0x60>)
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028d0:	4b13      	ldr	r3, [pc, #76]	; (8002920 <_sbrk+0x64>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d102      	bne.n	80028de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <_sbrk+0x64>)
 80028da:	4a12      	ldr	r2, [pc, #72]	; (8002924 <_sbrk+0x68>)
 80028dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028de:	4b10      	ldr	r3, [pc, #64]	; (8002920 <_sbrk+0x64>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4413      	add	r3, r2
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d207      	bcs.n	80028fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028ec:	f002 ffce 	bl	800588c <__errno>
 80028f0:	4603      	mov	r3, r0
 80028f2:	220c      	movs	r2, #12
 80028f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028f6:	f04f 33ff 	mov.w	r3, #4294967295
 80028fa:	e009      	b.n	8002910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028fc:	4b08      	ldr	r3, [pc, #32]	; (8002920 <_sbrk+0x64>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002902:	4b07      	ldr	r3, [pc, #28]	; (8002920 <_sbrk+0x64>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4413      	add	r3, r2
 800290a:	4a05      	ldr	r2, [pc, #20]	; (8002920 <_sbrk+0x64>)
 800290c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800290e:	68fb      	ldr	r3, [r7, #12]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20020000 	.word	0x20020000
 800291c:	00000400 	.word	0x00000400
 8002920:	200008c8 	.word	0x200008c8
 8002924:	20000c38 	.word	0x20000c38

08002928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <SystemInit+0x20>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002932:	4a05      	ldr	r2, [pc, #20]	; (8002948 <SystemInit+0x20>)
 8002934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800294c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002984 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002950:	480d      	ldr	r0, [pc, #52]	; (8002988 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002952:	490e      	ldr	r1, [pc, #56]	; (800298c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002954:	4a0e      	ldr	r2, [pc, #56]	; (8002990 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002958:	e002      	b.n	8002960 <LoopCopyDataInit>

0800295a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800295a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800295c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800295e:	3304      	adds	r3, #4

08002960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002964:	d3f9      	bcc.n	800295a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002966:	4a0b      	ldr	r2, [pc, #44]	; (8002994 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002968:	4c0b      	ldr	r4, [pc, #44]	; (8002998 <LoopFillZerobss+0x26>)
  movs r3, #0
 800296a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800296c:	e001      	b.n	8002972 <LoopFillZerobss>

0800296e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800296e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002970:	3204      	adds	r2, #4

08002972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002974:	d3fb      	bcc.n	800296e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002976:	f7ff ffd7 	bl	8002928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800297a:	f002 ff8d 	bl	8005898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800297e:	f7fe ff2b 	bl	80017d8 <main>
  bx  lr    
 8002982:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002984:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800298c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002990:	080068d8 	.word	0x080068d8
  ldr r2, =_sbss
 8002994:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002998:	20000c34 	.word	0x20000c34

0800299c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800299c:	e7fe      	b.n	800299c <ADC_IRQHandler>
	...

080029a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029a4:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <HAL_Init+0x40>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <HAL_Init+0x40>)
 80029aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_Init+0x40>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <HAL_Init+0x40>)
 80029b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029bc:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <HAL_Init+0x40>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <HAL_Init+0x40>)
 80029c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029c8:	2003      	movs	r0, #3
 80029ca:	f000 f94f 	bl	8002c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ce:	2000      	movs	r0, #0
 80029d0:	f000 f808 	bl	80029e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029d4:	f7ff fce4 	bl	80023a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40023c00 	.word	0x40023c00

080029e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029ec:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <HAL_InitTick+0x54>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <HAL_InitTick+0x58>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	4619      	mov	r1, r3
 80029f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80029fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 f967 	bl	8002cd6 <HAL_SYSTICK_Config>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e00e      	b.n	8002a30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b0f      	cmp	r3, #15
 8002a16:	d80a      	bhi.n	8002a2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a18:	2200      	movs	r2, #0
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a20:	f000 f92f 	bl	8002c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a24:	4a06      	ldr	r2, [pc, #24]	; (8002a40 <HAL_InitTick+0x5c>)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	e000      	b.n	8002a30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	20000008 	.word	0x20000008
 8002a40:	20000004 	.word	0x20000004

08002a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_IncTick+0x20>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <HAL_IncTick+0x24>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4413      	add	r3, r2
 8002a54:	4a04      	ldr	r2, [pc, #16]	; (8002a68 <HAL_IncTick+0x24>)
 8002a56:	6013      	str	r3, [r2, #0]
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	20000008 	.word	0x20000008
 8002a68:	20000c20 	.word	0x20000c20

08002a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <HAL_GetTick+0x14>)
 8002a72:	681b      	ldr	r3, [r3, #0]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000c20 	.word	0x20000c20

08002a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a8c:	f7ff ffee 	bl	8002a6c <HAL_GetTick>
 8002a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9c:	d005      	beq.n	8002aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <HAL_Delay+0x44>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002aaa:	bf00      	nop
 8002aac:	f7ff ffde 	bl	8002a6c <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d8f7      	bhi.n	8002aac <HAL_Delay+0x28>
  {
  }
}
 8002abc:	bf00      	nop
 8002abe:	bf00      	nop
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000008 	.word	0x20000008

08002acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002adc:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <__NVIC_SetPriorityGrouping+0x44>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ae8:	4013      	ands	r3, r2
 8002aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002afe:	4a04      	ldr	r2, [pc, #16]	; (8002b10 <__NVIC_SetPriorityGrouping+0x44>)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	60d3      	str	r3, [r2, #12]
}
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b18:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <__NVIC_GetPriorityGrouping+0x18>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	0a1b      	lsrs	r3, r3, #8
 8002b1e:	f003 0307 	and.w	r3, r3, #7
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	db0b      	blt.n	8002b5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	f003 021f 	and.w	r2, r3, #31
 8002b48:	4907      	ldr	r1, [pc, #28]	; (8002b68 <__NVIC_EnableIRQ+0x38>)
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	2001      	movs	r0, #1
 8002b52:	fa00 f202 	lsl.w	r2, r0, r2
 8002b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	e000e100 	.word	0xe000e100

08002b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	6039      	str	r1, [r7, #0]
 8002b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	db0a      	blt.n	8002b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	490c      	ldr	r1, [pc, #48]	; (8002bb8 <__NVIC_SetPriority+0x4c>)
 8002b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8a:	0112      	lsls	r2, r2, #4
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	440b      	add	r3, r1
 8002b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b94:	e00a      	b.n	8002bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	4908      	ldr	r1, [pc, #32]	; (8002bbc <__NVIC_SetPriority+0x50>)
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	3b04      	subs	r3, #4
 8002ba4:	0112      	lsls	r2, r2, #4
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	440b      	add	r3, r1
 8002baa:	761a      	strb	r2, [r3, #24]
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000e100 	.word	0xe000e100
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b089      	sub	sp, #36	; 0x24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f1c3 0307 	rsb	r3, r3, #7
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	bf28      	it	cs
 8002bde:	2304      	movcs	r3, #4
 8002be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3304      	adds	r3, #4
 8002be6:	2b06      	cmp	r3, #6
 8002be8:	d902      	bls.n	8002bf0 <NVIC_EncodePriority+0x30>
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3b03      	subs	r3, #3
 8002bee:	e000      	b.n	8002bf2 <NVIC_EncodePriority+0x32>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43da      	mvns	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	401a      	ands	r2, r3
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c08:	f04f 31ff 	mov.w	r1, #4294967295
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c12:	43d9      	mvns	r1, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c18:	4313      	orrs	r3, r2
         );
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3724      	adds	r7, #36	; 0x24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c38:	d301      	bcc.n	8002c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e00f      	b.n	8002c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c3e:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <SysTick_Config+0x40>)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c46:	210f      	movs	r1, #15
 8002c48:	f04f 30ff 	mov.w	r0, #4294967295
 8002c4c:	f7ff ff8e 	bl	8002b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <SysTick_Config+0x40>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c56:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <SysTick_Config+0x40>)
 8002c58:	2207      	movs	r2, #7
 8002c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	e000e010 	.word	0xe000e010

08002c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff ff29 	bl	8002acc <__NVIC_SetPriorityGrouping>
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b086      	sub	sp, #24
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	4603      	mov	r3, r0
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
 8002c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c94:	f7ff ff3e 	bl	8002b14 <__NVIC_GetPriorityGrouping>
 8002c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	68b9      	ldr	r1, [r7, #8]
 8002c9e:	6978      	ldr	r0, [r7, #20]
 8002ca0:	f7ff ff8e 	bl	8002bc0 <NVIC_EncodePriority>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002caa:	4611      	mov	r1, r2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff5d 	bl	8002b6c <__NVIC_SetPriority>
}
 8002cb2:	bf00      	nop
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ff31 	bl	8002b30 <__NVIC_EnableIRQ>
}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff ffa2 	bl	8002c28 <SysTick_Config>
 8002ce4:	4603      	mov	r3, r0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b084      	sub	sp, #16
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cfc:	f7ff feb6 	bl	8002a6c <HAL_GetTick>
 8002d00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d008      	beq.n	8002d20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2280      	movs	r2, #128	; 0x80
 8002d12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e052      	b.n	8002dc6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0216 	bic.w	r2, r2, #22
 8002d2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695a      	ldr	r2, [r3, #20]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d103      	bne.n	8002d50 <HAL_DMA_Abort+0x62>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d007      	beq.n	8002d60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0208 	bic.w	r2, r2, #8
 8002d5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0201 	bic.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d70:	e013      	b.n	8002d9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d72:	f7ff fe7b 	bl	8002a6c <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b05      	cmp	r3, #5
 8002d7e:	d90c      	bls.n	8002d9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2203      	movs	r2, #3
 8002d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e015      	b.n	8002dc6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1e4      	bne.n	8002d72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dac:	223f      	movs	r2, #63	; 0x3f
 8002dae:	409a      	lsls	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d004      	beq.n	8002dec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2280      	movs	r2, #128	; 0x80
 8002de6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e00c      	b.n	8002e06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2205      	movs	r2, #5
 8002df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0201 	bic.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	; 0x24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
 8002e2e:	e16b      	b.n	8003108 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e30:	2201      	movs	r2, #1
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	4013      	ands	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	f040 815a 	bne.w	8003102 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d005      	beq.n	8002e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d130      	bne.n	8002ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	2203      	movs	r2, #3
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f003 0201 	and.w	r2, r3, #1
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d017      	beq.n	8002f04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	2203      	movs	r2, #3
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d123      	bne.n	8002f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	08da      	lsrs	r2, r3, #3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3208      	adds	r2, #8
 8002f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	220f      	movs	r2, #15
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	08da      	lsrs	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3208      	adds	r2, #8
 8002f52:	69b9      	ldr	r1, [r7, #24]
 8002f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	2203      	movs	r2, #3
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 0203 	and.w	r2, r3, #3
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 80b4 	beq.w	8003102 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	4b60      	ldr	r3, [pc, #384]	; (8003120 <HAL_GPIO_Init+0x30c>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	4a5f      	ldr	r2, [pc, #380]	; (8003120 <HAL_GPIO_Init+0x30c>)
 8002fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8002faa:	4b5d      	ldr	r3, [pc, #372]	; (8003120 <HAL_GPIO_Init+0x30c>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fb6:	4a5b      	ldr	r2, [pc, #364]	; (8003124 <HAL_GPIO_Init+0x310>)
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	089b      	lsrs	r3, r3, #2
 8002fbc:	3302      	adds	r3, #2
 8002fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	220f      	movs	r2, #15
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a52      	ldr	r2, [pc, #328]	; (8003128 <HAL_GPIO_Init+0x314>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d02b      	beq.n	800303a <HAL_GPIO_Init+0x226>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a51      	ldr	r2, [pc, #324]	; (800312c <HAL_GPIO_Init+0x318>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d025      	beq.n	8003036 <HAL_GPIO_Init+0x222>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a50      	ldr	r2, [pc, #320]	; (8003130 <HAL_GPIO_Init+0x31c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d01f      	beq.n	8003032 <HAL_GPIO_Init+0x21e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a4f      	ldr	r2, [pc, #316]	; (8003134 <HAL_GPIO_Init+0x320>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d019      	beq.n	800302e <HAL_GPIO_Init+0x21a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a4e      	ldr	r2, [pc, #312]	; (8003138 <HAL_GPIO_Init+0x324>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d013      	beq.n	800302a <HAL_GPIO_Init+0x216>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a4d      	ldr	r2, [pc, #308]	; (800313c <HAL_GPIO_Init+0x328>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00d      	beq.n	8003026 <HAL_GPIO_Init+0x212>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a4c      	ldr	r2, [pc, #304]	; (8003140 <HAL_GPIO_Init+0x32c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d007      	beq.n	8003022 <HAL_GPIO_Init+0x20e>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a4b      	ldr	r2, [pc, #300]	; (8003144 <HAL_GPIO_Init+0x330>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d101      	bne.n	800301e <HAL_GPIO_Init+0x20a>
 800301a:	2307      	movs	r3, #7
 800301c:	e00e      	b.n	800303c <HAL_GPIO_Init+0x228>
 800301e:	2308      	movs	r3, #8
 8003020:	e00c      	b.n	800303c <HAL_GPIO_Init+0x228>
 8003022:	2306      	movs	r3, #6
 8003024:	e00a      	b.n	800303c <HAL_GPIO_Init+0x228>
 8003026:	2305      	movs	r3, #5
 8003028:	e008      	b.n	800303c <HAL_GPIO_Init+0x228>
 800302a:	2304      	movs	r3, #4
 800302c:	e006      	b.n	800303c <HAL_GPIO_Init+0x228>
 800302e:	2303      	movs	r3, #3
 8003030:	e004      	b.n	800303c <HAL_GPIO_Init+0x228>
 8003032:	2302      	movs	r3, #2
 8003034:	e002      	b.n	800303c <HAL_GPIO_Init+0x228>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <HAL_GPIO_Init+0x228>
 800303a:	2300      	movs	r3, #0
 800303c:	69fa      	ldr	r2, [r7, #28]
 800303e:	f002 0203 	and.w	r2, r2, #3
 8003042:	0092      	lsls	r2, r2, #2
 8003044:	4093      	lsls	r3, r2
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800304c:	4935      	ldr	r1, [pc, #212]	; (8003124 <HAL_GPIO_Init+0x310>)
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	089b      	lsrs	r3, r3, #2
 8003052:	3302      	adds	r3, #2
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800305a:	4b3b      	ldr	r3, [pc, #236]	; (8003148 <HAL_GPIO_Init+0x334>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	43db      	mvns	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800307e:	4a32      	ldr	r2, [pc, #200]	; (8003148 <HAL_GPIO_Init+0x334>)
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003084:	4b30      	ldr	r3, [pc, #192]	; (8003148 <HAL_GPIO_Init+0x334>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030a8:	4a27      	ldr	r2, [pc, #156]	; (8003148 <HAL_GPIO_Init+0x334>)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030ae:	4b26      	ldr	r3, [pc, #152]	; (8003148 <HAL_GPIO_Init+0x334>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	43db      	mvns	r3, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4013      	ands	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030d2:	4a1d      	ldr	r2, [pc, #116]	; (8003148 <HAL_GPIO_Init+0x334>)
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030d8:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <HAL_GPIO_Init+0x334>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030fc:	4a12      	ldr	r2, [pc, #72]	; (8003148 <HAL_GPIO_Init+0x334>)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	3301      	adds	r3, #1
 8003106:	61fb      	str	r3, [r7, #28]
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	2b0f      	cmp	r3, #15
 800310c:	f67f ae90 	bls.w	8002e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003110:	bf00      	nop
 8003112:	bf00      	nop
 8003114:	3724      	adds	r7, #36	; 0x24
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40023800 	.word	0x40023800
 8003124:	40013800 	.word	0x40013800
 8003128:	40020000 	.word	0x40020000
 800312c:	40020400 	.word	0x40020400
 8003130:	40020800 	.word	0x40020800
 8003134:	40020c00 	.word	0x40020c00
 8003138:	40021000 	.word	0x40021000
 800313c:	40021400 	.word	0x40021400
 8003140:	40021800 	.word	0x40021800
 8003144:	40021c00 	.word	0x40021c00
 8003148:	40013c00 	.word	0x40013c00

0800314c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	887b      	ldrh	r3, [r7, #2]
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003164:	2301      	movs	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
 8003168:	e001      	b.n	800316e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800316a:	2300      	movs	r3, #0
 800316c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800316e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	807b      	strh	r3, [r7, #2]
 8003188:	4613      	mov	r3, r2
 800318a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800318c:	787b      	ldrb	r3, [r7, #1]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003192:	887a      	ldrh	r2, [r7, #2]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003198:	e003      	b.n	80031a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800319a:	887b      	ldrh	r3, [r7, #2]
 800319c:	041a      	lsls	r2, r3, #16
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	619a      	str	r2, [r3, #24]
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
	...

080031b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80031ba:	4b08      	ldr	r3, [pc, #32]	; (80031dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031bc:	695a      	ldr	r2, [r3, #20]
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d006      	beq.n	80031d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031c6:	4a05      	ldr	r2, [pc, #20]	; (80031dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031cc:	88fb      	ldrh	r3, [r7, #6]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fe fa22 	bl	8001618 <HAL_GPIO_EXTI_Callback>
  }
}
 80031d4:	bf00      	nop
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40013c00 	.word	0x40013c00

080031e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e264      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d075      	beq.n	80032ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031fe:	4ba3      	ldr	r3, [pc, #652]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
 8003206:	2b04      	cmp	r3, #4
 8003208:	d00c      	beq.n	8003224 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800320a:	4ba0      	ldr	r3, [pc, #640]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003212:	2b08      	cmp	r3, #8
 8003214:	d112      	bne.n	800323c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003216:	4b9d      	ldr	r3, [pc, #628]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003222:	d10b      	bne.n	800323c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003224:	4b99      	ldr	r3, [pc, #612]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d05b      	beq.n	80032e8 <HAL_RCC_OscConfig+0x108>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d157      	bne.n	80032e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e23f      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003244:	d106      	bne.n	8003254 <HAL_RCC_OscConfig+0x74>
 8003246:	4b91      	ldr	r3, [pc, #580]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a90      	ldr	r2, [pc, #576]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e01d      	b.n	8003290 <HAL_RCC_OscConfig+0xb0>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800325c:	d10c      	bne.n	8003278 <HAL_RCC_OscConfig+0x98>
 800325e:	4b8b      	ldr	r3, [pc, #556]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a8a      	ldr	r2, [pc, #552]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	4b88      	ldr	r3, [pc, #544]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a87      	ldr	r2, [pc, #540]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e00b      	b.n	8003290 <HAL_RCC_OscConfig+0xb0>
 8003278:	4b84      	ldr	r3, [pc, #528]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a83      	ldr	r2, [pc, #524]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 800327e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b81      	ldr	r3, [pc, #516]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a80      	ldr	r2, [pc, #512]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 800328a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800328e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d013      	beq.n	80032c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7ff fbe8 	bl	8002a6c <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a0:	f7ff fbe4 	bl	8002a6c <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	; 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e204      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b2:	4b76      	ldr	r3, [pc, #472]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0xc0>
 80032be:	e014      	b.n	80032ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7ff fbd4 	bl	8002a6c <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c8:	f7ff fbd0 	bl	8002a6c <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	; 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e1f0      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032da:	4b6c      	ldr	r3, [pc, #432]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0xe8>
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d063      	beq.n	80033be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032f6:	4b65      	ldr	r3, [pc, #404]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00b      	beq.n	800331a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003302:	4b62      	ldr	r3, [pc, #392]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800330a:	2b08      	cmp	r3, #8
 800330c:	d11c      	bne.n	8003348 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800330e:	4b5f      	ldr	r3, [pc, #380]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d116      	bne.n	8003348 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331a:	4b5c      	ldr	r3, [pc, #368]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <HAL_RCC_OscConfig+0x152>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d001      	beq.n	8003332 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e1c4      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003332:	4b56      	ldr	r3, [pc, #344]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4952      	ldr	r1, [pc, #328]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003342:	4313      	orrs	r3, r2
 8003344:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003346:	e03a      	b.n	80033be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d020      	beq.n	8003392 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003350:	4b4f      	ldr	r3, [pc, #316]	; (8003490 <HAL_RCC_OscConfig+0x2b0>)
 8003352:	2201      	movs	r2, #1
 8003354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003356:	f7ff fb89 	bl	8002a6c <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800335e:	f7ff fb85 	bl	8002a6c <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e1a5      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003370:	4b46      	ldr	r3, [pc, #280]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f0      	beq.n	800335e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337c:	4b43      	ldr	r3, [pc, #268]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4940      	ldr	r1, [pc, #256]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 800338c:	4313      	orrs	r3, r2
 800338e:	600b      	str	r3, [r1, #0]
 8003390:	e015      	b.n	80033be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003392:	4b3f      	ldr	r3, [pc, #252]	; (8003490 <HAL_RCC_OscConfig+0x2b0>)
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7ff fb68 	bl	8002a6c <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033a0:	f7ff fb64 	bl	8002a6c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e184      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b2:	4b36      	ldr	r3, [pc, #216]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d030      	beq.n	800342c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d016      	beq.n	8003400 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d2:	4b30      	ldr	r3, [pc, #192]	; (8003494 <HAL_RCC_OscConfig+0x2b4>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d8:	f7ff fb48 	bl	8002a6c <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e0:	f7ff fb44 	bl	8002a6c <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e164      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f2:	4b26      	ldr	r3, [pc, #152]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x200>
 80033fe:	e015      	b.n	800342c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003400:	4b24      	ldr	r3, [pc, #144]	; (8003494 <HAL_RCC_OscConfig+0x2b4>)
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003406:	f7ff fb31 	bl	8002a6c <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800340e:	f7ff fb2d 	bl	8002a6c <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e14d      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003420:	4b1a      	ldr	r3, [pc, #104]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f0      	bne.n	800340e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80a0 	beq.w	800357a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343a:	2300      	movs	r3, #0
 800343c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800343e:	4b13      	ldr	r3, [pc, #76]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10f      	bne.n	800346a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	60bb      	str	r3, [r7, #8]
 800344e:	4b0f      	ldr	r3, [pc, #60]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	4a0e      	ldr	r2, [pc, #56]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003458:	6413      	str	r3, [r2, #64]	; 0x40
 800345a:	4b0c      	ldr	r3, [pc, #48]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003466:	2301      	movs	r3, #1
 8003468:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346a:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCC_OscConfig+0x2b8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d121      	bne.n	80034ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003476:	4b08      	ldr	r3, [pc, #32]	; (8003498 <HAL_RCC_OscConfig+0x2b8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a07      	ldr	r2, [pc, #28]	; (8003498 <HAL_RCC_OscConfig+0x2b8>)
 800347c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003482:	f7ff faf3 	bl	8002a6c <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003488:	e011      	b.n	80034ae <HAL_RCC_OscConfig+0x2ce>
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800
 8003490:	42470000 	.word	0x42470000
 8003494:	42470e80 	.word	0x42470e80
 8003498:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349c:	f7ff fae6 	bl	8002a6c <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e106      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ae:	4b85      	ldr	r3, [pc, #532]	; (80036c4 <HAL_RCC_OscConfig+0x4e4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d106      	bne.n	80034d0 <HAL_RCC_OscConfig+0x2f0>
 80034c2:	4b81      	ldr	r3, [pc, #516]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c6:	4a80      	ldr	r2, [pc, #512]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6713      	str	r3, [r2, #112]	; 0x70
 80034ce:	e01c      	b.n	800350a <HAL_RCC_OscConfig+0x32a>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b05      	cmp	r3, #5
 80034d6:	d10c      	bne.n	80034f2 <HAL_RCC_OscConfig+0x312>
 80034d8:	4b7b      	ldr	r3, [pc, #492]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	4a7a      	ldr	r2, [pc, #488]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 80034de:	f043 0304 	orr.w	r3, r3, #4
 80034e2:	6713      	str	r3, [r2, #112]	; 0x70
 80034e4:	4b78      	ldr	r3, [pc, #480]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	4a77      	ldr	r2, [pc, #476]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	6713      	str	r3, [r2, #112]	; 0x70
 80034f0:	e00b      	b.n	800350a <HAL_RCC_OscConfig+0x32a>
 80034f2:	4b75      	ldr	r3, [pc, #468]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f6:	4a74      	ldr	r2, [pc, #464]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 80034f8:	f023 0301 	bic.w	r3, r3, #1
 80034fc:	6713      	str	r3, [r2, #112]	; 0x70
 80034fe:	4b72      	ldr	r3, [pc, #456]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003502:	4a71      	ldr	r2, [pc, #452]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 8003504:	f023 0304 	bic.w	r3, r3, #4
 8003508:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d015      	beq.n	800353e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003512:	f7ff faab 	bl	8002a6c <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003518:	e00a      	b.n	8003530 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800351a:	f7ff faa7 	bl	8002a6c <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	f241 3288 	movw	r2, #5000	; 0x1388
 8003528:	4293      	cmp	r3, r2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e0c5      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003530:	4b65      	ldr	r3, [pc, #404]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 8003532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0ee      	beq.n	800351a <HAL_RCC_OscConfig+0x33a>
 800353c:	e014      	b.n	8003568 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353e:	f7ff fa95 	bl	8002a6c <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003544:	e00a      	b.n	800355c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003546:	f7ff fa91 	bl	8002a6c <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	f241 3288 	movw	r2, #5000	; 0x1388
 8003554:	4293      	cmp	r3, r2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e0af      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800355c:	4b5a      	ldr	r3, [pc, #360]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 800355e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1ee      	bne.n	8003546 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003568:	7dfb      	ldrb	r3, [r7, #23]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d105      	bne.n	800357a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800356e:	4b56      	ldr	r3, [pc, #344]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	4a55      	ldr	r2, [pc, #340]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 8003574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003578:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 809b 	beq.w	80036ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003584:	4b50      	ldr	r3, [pc, #320]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 030c 	and.w	r3, r3, #12
 800358c:	2b08      	cmp	r3, #8
 800358e:	d05c      	beq.n	800364a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d141      	bne.n	800361c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003598:	4b4c      	ldr	r3, [pc, #304]	; (80036cc <HAL_RCC_OscConfig+0x4ec>)
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359e:	f7ff fa65 	bl	8002a6c <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a6:	f7ff fa61 	bl	8002a6c <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e081      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b8:	4b43      	ldr	r3, [pc, #268]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1f0      	bne.n	80035a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69da      	ldr	r2, [r3, #28]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	019b      	lsls	r3, r3, #6
 80035d4:	431a      	orrs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	085b      	lsrs	r3, r3, #1
 80035dc:	3b01      	subs	r3, #1
 80035de:	041b      	lsls	r3, r3, #16
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e6:	061b      	lsls	r3, r3, #24
 80035e8:	4937      	ldr	r1, [pc, #220]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035ee:	4b37      	ldr	r3, [pc, #220]	; (80036cc <HAL_RCC_OscConfig+0x4ec>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f4:	f7ff fa3a 	bl	8002a6c <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035fc:	f7ff fa36 	bl	8002a6c <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e056      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800360e:	4b2e      	ldr	r3, [pc, #184]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0x41c>
 800361a:	e04e      	b.n	80036ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361c:	4b2b      	ldr	r3, [pc, #172]	; (80036cc <HAL_RCC_OscConfig+0x4ec>)
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003622:	f7ff fa23 	bl	8002a6c <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800362a:	f7ff fa1f 	bl	8002a6c <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e03f      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800363c:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f0      	bne.n	800362a <HAL_RCC_OscConfig+0x44a>
 8003648:	e037      	b.n	80036ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e032      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003656:	4b1c      	ldr	r3, [pc, #112]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d028      	beq.n	80036b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800366e:	429a      	cmp	r2, r3
 8003670:	d121      	bne.n	80036b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800367c:	429a      	cmp	r2, r3
 800367e:	d11a      	bne.n	80036b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003686:	4013      	ands	r3, r2
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800368c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800368e:	4293      	cmp	r3, r2
 8003690:	d111      	bne.n	80036b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369c:	085b      	lsrs	r3, r3, #1
 800369e:	3b01      	subs	r3, #1
 80036a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d107      	bne.n	80036b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d001      	beq.n	80036ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40007000 	.word	0x40007000
 80036c8:	40023800 	.word	0x40023800
 80036cc:	42470060 	.word	0x42470060

080036d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0cc      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036e4:	4b68      	ldr	r3, [pc, #416]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d90c      	bls.n	800370c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b65      	ldr	r3, [pc, #404]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fa:	4b63      	ldr	r3, [pc, #396]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0b8      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d020      	beq.n	800375a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003724:	4b59      	ldr	r3, [pc, #356]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4a58      	ldr	r2, [pc, #352]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800372e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800373c:	4b53      	ldr	r3, [pc, #332]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	4a52      	ldr	r2, [pc, #328]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003748:	4b50      	ldr	r3, [pc, #320]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	494d      	ldr	r1, [pc, #308]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	4313      	orrs	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d044      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376e:	4b47      	ldr	r3, [pc, #284]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d119      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e07f      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d003      	beq.n	800378e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800378a:	2b03      	cmp	r3, #3
 800378c:	d107      	bne.n	800379e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378e:	4b3f      	ldr	r3, [pc, #252]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e06f      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379e:	4b3b      	ldr	r3, [pc, #236]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e067      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ae:	4b37      	ldr	r3, [pc, #220]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f023 0203 	bic.w	r2, r3, #3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4934      	ldr	r1, [pc, #208]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037c0:	f7ff f954 	bl	8002a6c <HAL_GetTick>
 80037c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c6:	e00a      	b.n	80037de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c8:	f7ff f950 	bl	8002a6c <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e04f      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037de:	4b2b      	ldr	r3, [pc, #172]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 020c 	and.w	r2, r3, #12
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d1eb      	bne.n	80037c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037f0:	4b25      	ldr	r3, [pc, #148]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d20c      	bcs.n	8003818 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fe:	4b22      	ldr	r3, [pc, #136]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	4b20      	ldr	r3, [pc, #128]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e032      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003824:	4b19      	ldr	r3, [pc, #100]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4916      	ldr	r1, [pc, #88]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d009      	beq.n	8003856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003842:	4b12      	ldr	r3, [pc, #72]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	490e      	ldr	r1, [pc, #56]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	4313      	orrs	r3, r2
 8003854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003856:	f000 f821 	bl	800389c <HAL_RCC_GetSysClockFreq>
 800385a:	4602      	mov	r2, r0
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	490a      	ldr	r1, [pc, #40]	; (8003890 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	5ccb      	ldrb	r3, [r1, r3]
 800386a:	fa22 f303 	lsr.w	r3, r2, r3
 800386e:	4a09      	ldr	r2, [pc, #36]	; (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003872:	4b09      	ldr	r3, [pc, #36]	; (8003898 <HAL_RCC_ClockConfig+0x1c8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff f8b4 	bl	80029e4 <HAL_InitTick>

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40023c00 	.word	0x40023c00
 800388c:	40023800 	.word	0x40023800
 8003890:	0800687c 	.word	0x0800687c
 8003894:	20000000 	.word	0x20000000
 8003898:	20000004 	.word	0x20000004

0800389c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800389c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	607b      	str	r3, [r7, #4]
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	2300      	movs	r3, #0
 80038ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038b4:	4b67      	ldr	r3, [pc, #412]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 030c 	and.w	r3, r3, #12
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d00d      	beq.n	80038dc <HAL_RCC_GetSysClockFreq+0x40>
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	f200 80bd 	bhi.w	8003a40 <HAL_RCC_GetSysClockFreq+0x1a4>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_RCC_GetSysClockFreq+0x34>
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d003      	beq.n	80038d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80038ce:	e0b7      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038d0:	4b61      	ldr	r3, [pc, #388]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80038d2:	60bb      	str	r3, [r7, #8]
       break;
 80038d4:	e0b7      	b.n	8003a46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038d6:	4b61      	ldr	r3, [pc, #388]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80038d8:	60bb      	str	r3, [r7, #8]
      break;
 80038da:	e0b4      	b.n	8003a46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038dc:	4b5d      	ldr	r3, [pc, #372]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038e6:	4b5b      	ldr	r3, [pc, #364]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d04d      	beq.n	800398e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038f2:	4b58      	ldr	r3, [pc, #352]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	099b      	lsrs	r3, r3, #6
 80038f8:	461a      	mov	r2, r3
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003902:	f04f 0100 	mov.w	r1, #0
 8003906:	ea02 0800 	and.w	r8, r2, r0
 800390a:	ea03 0901 	and.w	r9, r3, r1
 800390e:	4640      	mov	r0, r8
 8003910:	4649      	mov	r1, r9
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	f04f 0300 	mov.w	r3, #0
 800391a:	014b      	lsls	r3, r1, #5
 800391c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003920:	0142      	lsls	r2, r0, #5
 8003922:	4610      	mov	r0, r2
 8003924:	4619      	mov	r1, r3
 8003926:	ebb0 0008 	subs.w	r0, r0, r8
 800392a:	eb61 0109 	sbc.w	r1, r1, r9
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	018b      	lsls	r3, r1, #6
 8003938:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800393c:	0182      	lsls	r2, r0, #6
 800393e:	1a12      	subs	r2, r2, r0
 8003940:	eb63 0301 	sbc.w	r3, r3, r1
 8003944:	f04f 0000 	mov.w	r0, #0
 8003948:	f04f 0100 	mov.w	r1, #0
 800394c:	00d9      	lsls	r1, r3, #3
 800394e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003952:	00d0      	lsls	r0, r2, #3
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	eb12 0208 	adds.w	r2, r2, r8
 800395c:	eb43 0309 	adc.w	r3, r3, r9
 8003960:	f04f 0000 	mov.w	r0, #0
 8003964:	f04f 0100 	mov.w	r1, #0
 8003968:	0259      	lsls	r1, r3, #9
 800396a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800396e:	0250      	lsls	r0, r2, #9
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4610      	mov	r0, r2
 8003976:	4619      	mov	r1, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	461a      	mov	r2, r3
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	f7fc fc7e 	bl	8000280 <__aeabi_uldivmod>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4613      	mov	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	e04a      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800398e:	4b31      	ldr	r3, [pc, #196]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	099b      	lsrs	r3, r3, #6
 8003994:	461a      	mov	r2, r3
 8003996:	f04f 0300 	mov.w	r3, #0
 800399a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800399e:	f04f 0100 	mov.w	r1, #0
 80039a2:	ea02 0400 	and.w	r4, r2, r0
 80039a6:	ea03 0501 	and.w	r5, r3, r1
 80039aa:	4620      	mov	r0, r4
 80039ac:	4629      	mov	r1, r5
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	014b      	lsls	r3, r1, #5
 80039b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039bc:	0142      	lsls	r2, r0, #5
 80039be:	4610      	mov	r0, r2
 80039c0:	4619      	mov	r1, r3
 80039c2:	1b00      	subs	r0, r0, r4
 80039c4:	eb61 0105 	sbc.w	r1, r1, r5
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	018b      	lsls	r3, r1, #6
 80039d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039d6:	0182      	lsls	r2, r0, #6
 80039d8:	1a12      	subs	r2, r2, r0
 80039da:	eb63 0301 	sbc.w	r3, r3, r1
 80039de:	f04f 0000 	mov.w	r0, #0
 80039e2:	f04f 0100 	mov.w	r1, #0
 80039e6:	00d9      	lsls	r1, r3, #3
 80039e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039ec:	00d0      	lsls	r0, r2, #3
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	1912      	adds	r2, r2, r4
 80039f4:	eb45 0303 	adc.w	r3, r5, r3
 80039f8:	f04f 0000 	mov.w	r0, #0
 80039fc:	f04f 0100 	mov.w	r1, #0
 8003a00:	0299      	lsls	r1, r3, #10
 8003a02:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a06:	0290      	lsls	r0, r2, #10
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	4619      	mov	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	461a      	mov	r2, r3
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	f7fc fc32 	bl	8000280 <__aeabi_uldivmod>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4613      	mov	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a24:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	0c1b      	lsrs	r3, r3, #16
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	3301      	adds	r3, #1
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3c:	60bb      	str	r3, [r7, #8]
      break;
 8003a3e:	e002      	b.n	8003a46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a40:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a42:	60bb      	str	r3, [r7, #8]
      break;
 8003a44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a46:	68bb      	ldr	r3, [r7, #8]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a52:	bf00      	nop
 8003a54:	40023800 	.word	0x40023800
 8003a58:	00f42400 	.word	0x00f42400
 8003a5c:	007a1200 	.word	0x007a1200

08003a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a64:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a66:	681b      	ldr	r3, [r3, #0]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	20000000 	.word	0x20000000

08003a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a7c:	f7ff fff0 	bl	8003a60 <HAL_RCC_GetHCLKFreq>
 8003a80:	4602      	mov	r2, r0
 8003a82:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	0a9b      	lsrs	r3, r3, #10
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	4903      	ldr	r1, [pc, #12]	; (8003a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a8e:	5ccb      	ldrb	r3, [r1, r3]
 8003a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	0800688c 	.word	0x0800688c

08003aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003aa4:	f7ff ffdc 	bl	8003a60 <HAL_RCC_GetHCLKFreq>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	0b5b      	lsrs	r3, r3, #13
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	4903      	ldr	r1, [pc, #12]	; (8003ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ab6:	5ccb      	ldrb	r3, [r1, r3]
 8003ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	0800688c 	.word	0x0800688c

08003ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e041      	b.n	8003b5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fe fc7e 	bl	80023f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3304      	adds	r3, #4
 8003b04:	4619      	mov	r1, r3
 8003b06:	4610      	mov	r0, r2
 8003b08:	f000 fad8 	bl	80040bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e041      	b.n	8003bfc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d106      	bne.n	8003b92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f839 	bl	8003c04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2202      	movs	r2, #2
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	f000 fa89 	bl	80040bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d109      	bne.n	8003c3c <HAL_TIM_PWM_Start+0x24>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	bf14      	ite	ne
 8003c34:	2301      	movne	r3, #1
 8003c36:	2300      	moveq	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	e022      	b.n	8003c82 <HAL_TIM_PWM_Start+0x6a>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d109      	bne.n	8003c56 <HAL_TIM_PWM_Start+0x3e>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	bf14      	ite	ne
 8003c4e:	2301      	movne	r3, #1
 8003c50:	2300      	moveq	r3, #0
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	e015      	b.n	8003c82 <HAL_TIM_PWM_Start+0x6a>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d109      	bne.n	8003c70 <HAL_TIM_PWM_Start+0x58>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	bf14      	ite	ne
 8003c68:	2301      	movne	r3, #1
 8003c6a:	2300      	moveq	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	e008      	b.n	8003c82 <HAL_TIM_PWM_Start+0x6a>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	bf14      	ite	ne
 8003c7c:	2301      	movne	r3, #1
 8003c7e:	2300      	moveq	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e07c      	b.n	8003d84 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d104      	bne.n	8003c9a <HAL_TIM_PWM_Start+0x82>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c98:	e013      	b.n	8003cc2 <HAL_TIM_PWM_Start+0xaa>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d104      	bne.n	8003caa <HAL_TIM_PWM_Start+0x92>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ca8:	e00b      	b.n	8003cc2 <HAL_TIM_PWM_Start+0xaa>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d104      	bne.n	8003cba <HAL_TIM_PWM_Start+0xa2>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cb8:	e003      	b.n	8003cc2 <HAL_TIM_PWM_Start+0xaa>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	6839      	ldr	r1, [r7, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fce0 	bl	8004690 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a2d      	ldr	r2, [pc, #180]	; (8003d8c <HAL_TIM_PWM_Start+0x174>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d004      	beq.n	8003ce4 <HAL_TIM_PWM_Start+0xcc>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a2c      	ldr	r2, [pc, #176]	; (8003d90 <HAL_TIM_PWM_Start+0x178>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d101      	bne.n	8003ce8 <HAL_TIM_PWM_Start+0xd0>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <HAL_TIM_PWM_Start+0xd2>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d007      	beq.n	8003cfe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cfc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a22      	ldr	r2, [pc, #136]	; (8003d8c <HAL_TIM_PWM_Start+0x174>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d022      	beq.n	8003d4e <HAL_TIM_PWM_Start+0x136>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d10:	d01d      	beq.n	8003d4e <HAL_TIM_PWM_Start+0x136>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a1f      	ldr	r2, [pc, #124]	; (8003d94 <HAL_TIM_PWM_Start+0x17c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d018      	beq.n	8003d4e <HAL_TIM_PWM_Start+0x136>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a1d      	ldr	r2, [pc, #116]	; (8003d98 <HAL_TIM_PWM_Start+0x180>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d013      	beq.n	8003d4e <HAL_TIM_PWM_Start+0x136>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a1c      	ldr	r2, [pc, #112]	; (8003d9c <HAL_TIM_PWM_Start+0x184>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00e      	beq.n	8003d4e <HAL_TIM_PWM_Start+0x136>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a16      	ldr	r2, [pc, #88]	; (8003d90 <HAL_TIM_PWM_Start+0x178>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d009      	beq.n	8003d4e <HAL_TIM_PWM_Start+0x136>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a18      	ldr	r2, [pc, #96]	; (8003da0 <HAL_TIM_PWM_Start+0x188>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d004      	beq.n	8003d4e <HAL_TIM_PWM_Start+0x136>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a16      	ldr	r2, [pc, #88]	; (8003da4 <HAL_TIM_PWM_Start+0x18c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d111      	bne.n	8003d72 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b06      	cmp	r3, #6
 8003d5e:	d010      	beq.n	8003d82 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0201 	orr.w	r2, r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d70:	e007      	b.n	8003d82 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f042 0201 	orr.w	r2, r2, #1
 8003d80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40010000 	.word	0x40010000
 8003d90:	40010400 	.word	0x40010400
 8003d94:	40000400 	.word	0x40000400
 8003d98:	40000800 	.word	0x40000800
 8003d9c:	40000c00 	.word	0x40000c00
 8003da0:	40014000 	.word	0x40014000
 8003da4:	40001800 	.word	0x40001800

08003da8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e0ae      	b.n	8003f24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b0c      	cmp	r3, #12
 8003dd2:	f200 809f 	bhi.w	8003f14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003dd6:	a201      	add	r2, pc, #4	; (adr r2, 8003ddc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ddc:	08003e11 	.word	0x08003e11
 8003de0:	08003f15 	.word	0x08003f15
 8003de4:	08003f15 	.word	0x08003f15
 8003de8:	08003f15 	.word	0x08003f15
 8003dec:	08003e51 	.word	0x08003e51
 8003df0:	08003f15 	.word	0x08003f15
 8003df4:	08003f15 	.word	0x08003f15
 8003df8:	08003f15 	.word	0x08003f15
 8003dfc:	08003e93 	.word	0x08003e93
 8003e00:	08003f15 	.word	0x08003f15
 8003e04:	08003f15 	.word	0x08003f15
 8003e08:	08003f15 	.word	0x08003f15
 8003e0c:	08003ed3 	.word	0x08003ed3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68b9      	ldr	r1, [r7, #8]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 f9f0 	bl	80041fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699a      	ldr	r2, [r3, #24]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0208 	orr.w	r2, r2, #8
 8003e2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699a      	ldr	r2, [r3, #24]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0204 	bic.w	r2, r2, #4
 8003e3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6999      	ldr	r1, [r3, #24]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	691a      	ldr	r2, [r3, #16]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	619a      	str	r2, [r3, #24]
      break;
 8003e4e:	e064      	b.n	8003f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68b9      	ldr	r1, [r7, #8]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fa40 	bl	80042dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699a      	ldr	r2, [r3, #24]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6999      	ldr	r1, [r3, #24]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	021a      	lsls	r2, r3, #8
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	619a      	str	r2, [r3, #24]
      break;
 8003e90:	e043      	b.n	8003f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68b9      	ldr	r1, [r7, #8]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 fa95 	bl	80043c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69da      	ldr	r2, [r3, #28]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0208 	orr.w	r2, r2, #8
 8003eac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69da      	ldr	r2, [r3, #28]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0204 	bic.w	r2, r2, #4
 8003ebc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	69d9      	ldr	r1, [r3, #28]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	61da      	str	r2, [r3, #28]
      break;
 8003ed0:	e023      	b.n	8003f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 fae9 	bl	80044b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69da      	ldr	r2, [r3, #28]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69da      	ldr	r2, [r3, #28]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69d9      	ldr	r1, [r3, #28]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	021a      	lsls	r2, r3, #8
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	61da      	str	r2, [r3, #28]
      break;
 8003f12:	e002      	b.n	8003f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	75fb      	strb	r3, [r7, #23]
      break;
 8003f18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_TIM_ConfigClockSource+0x1c>
 8003f44:	2302      	movs	r3, #2
 8003f46:	e0b4      	b.n	80040b2 <HAL_TIM_ConfigClockSource+0x186>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f80:	d03e      	beq.n	8004000 <HAL_TIM_ConfigClockSource+0xd4>
 8003f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f86:	f200 8087 	bhi.w	8004098 <HAL_TIM_ConfigClockSource+0x16c>
 8003f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8e:	f000 8086 	beq.w	800409e <HAL_TIM_ConfigClockSource+0x172>
 8003f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f96:	d87f      	bhi.n	8004098 <HAL_TIM_ConfigClockSource+0x16c>
 8003f98:	2b70      	cmp	r3, #112	; 0x70
 8003f9a:	d01a      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0xa6>
 8003f9c:	2b70      	cmp	r3, #112	; 0x70
 8003f9e:	d87b      	bhi.n	8004098 <HAL_TIM_ConfigClockSource+0x16c>
 8003fa0:	2b60      	cmp	r3, #96	; 0x60
 8003fa2:	d050      	beq.n	8004046 <HAL_TIM_ConfigClockSource+0x11a>
 8003fa4:	2b60      	cmp	r3, #96	; 0x60
 8003fa6:	d877      	bhi.n	8004098 <HAL_TIM_ConfigClockSource+0x16c>
 8003fa8:	2b50      	cmp	r3, #80	; 0x50
 8003faa:	d03c      	beq.n	8004026 <HAL_TIM_ConfigClockSource+0xfa>
 8003fac:	2b50      	cmp	r3, #80	; 0x50
 8003fae:	d873      	bhi.n	8004098 <HAL_TIM_ConfigClockSource+0x16c>
 8003fb0:	2b40      	cmp	r3, #64	; 0x40
 8003fb2:	d058      	beq.n	8004066 <HAL_TIM_ConfigClockSource+0x13a>
 8003fb4:	2b40      	cmp	r3, #64	; 0x40
 8003fb6:	d86f      	bhi.n	8004098 <HAL_TIM_ConfigClockSource+0x16c>
 8003fb8:	2b30      	cmp	r3, #48	; 0x30
 8003fba:	d064      	beq.n	8004086 <HAL_TIM_ConfigClockSource+0x15a>
 8003fbc:	2b30      	cmp	r3, #48	; 0x30
 8003fbe:	d86b      	bhi.n	8004098 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc0:	2b20      	cmp	r3, #32
 8003fc2:	d060      	beq.n	8004086 <HAL_TIM_ConfigClockSource+0x15a>
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	d867      	bhi.n	8004098 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d05c      	beq.n	8004086 <HAL_TIM_ConfigClockSource+0x15a>
 8003fcc:	2b10      	cmp	r3, #16
 8003fce:	d05a      	beq.n	8004086 <HAL_TIM_ConfigClockSource+0x15a>
 8003fd0:	e062      	b.n	8004098 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6818      	ldr	r0, [r3, #0]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	6899      	ldr	r1, [r3, #8]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f000 fb35 	bl	8004650 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ff4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	609a      	str	r2, [r3, #8]
      break;
 8003ffe:	e04f      	b.n	80040a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6818      	ldr	r0, [r3, #0]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	6899      	ldr	r1, [r3, #8]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f000 fb1e 	bl	8004650 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004022:	609a      	str	r2, [r3, #8]
      break;
 8004024:	e03c      	b.n	80040a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6818      	ldr	r0, [r3, #0]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	6859      	ldr	r1, [r3, #4]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	461a      	mov	r2, r3
 8004034:	f000 fa92 	bl	800455c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2150      	movs	r1, #80	; 0x50
 800403e:	4618      	mov	r0, r3
 8004040:	f000 faeb 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 8004044:	e02c      	b.n	80040a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6818      	ldr	r0, [r3, #0]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	6859      	ldr	r1, [r3, #4]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	461a      	mov	r2, r3
 8004054:	f000 fab1 	bl	80045ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2160      	movs	r1, #96	; 0x60
 800405e:	4618      	mov	r0, r3
 8004060:	f000 fadb 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 8004064:	e01c      	b.n	80040a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6818      	ldr	r0, [r3, #0]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	6859      	ldr	r1, [r3, #4]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	461a      	mov	r2, r3
 8004074:	f000 fa72 	bl	800455c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2140      	movs	r1, #64	; 0x40
 800407e:	4618      	mov	r0, r3
 8004080:	f000 facb 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 8004084:	e00c      	b.n	80040a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4619      	mov	r1, r3
 8004090:	4610      	mov	r0, r2
 8004092:	f000 fac2 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 8004096:	e003      	b.n	80040a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
      break;
 800409c:	e000      	b.n	80040a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800409e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a40      	ldr	r2, [pc, #256]	; (80041d0 <TIM_Base_SetConfig+0x114>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d013      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040da:	d00f      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a3d      	ldr	r2, [pc, #244]	; (80041d4 <TIM_Base_SetConfig+0x118>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00b      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a3c      	ldr	r2, [pc, #240]	; (80041d8 <TIM_Base_SetConfig+0x11c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d007      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a3b      	ldr	r2, [pc, #236]	; (80041dc <TIM_Base_SetConfig+0x120>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d003      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a3a      	ldr	r2, [pc, #232]	; (80041e0 <TIM_Base_SetConfig+0x124>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d108      	bne.n	800410e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a2f      	ldr	r2, [pc, #188]	; (80041d0 <TIM_Base_SetConfig+0x114>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d02b      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411c:	d027      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a2c      	ldr	r2, [pc, #176]	; (80041d4 <TIM_Base_SetConfig+0x118>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d023      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a2b      	ldr	r2, [pc, #172]	; (80041d8 <TIM_Base_SetConfig+0x11c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d01f      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a2a      	ldr	r2, [pc, #168]	; (80041dc <TIM_Base_SetConfig+0x120>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d01b      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a29      	ldr	r2, [pc, #164]	; (80041e0 <TIM_Base_SetConfig+0x124>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d017      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a28      	ldr	r2, [pc, #160]	; (80041e4 <TIM_Base_SetConfig+0x128>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d013      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a27      	ldr	r2, [pc, #156]	; (80041e8 <TIM_Base_SetConfig+0x12c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00f      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a26      	ldr	r2, [pc, #152]	; (80041ec <TIM_Base_SetConfig+0x130>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00b      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a25      	ldr	r2, [pc, #148]	; (80041f0 <TIM_Base_SetConfig+0x134>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d007      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a24      	ldr	r2, [pc, #144]	; (80041f4 <TIM_Base_SetConfig+0x138>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d003      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a23      	ldr	r2, [pc, #140]	; (80041f8 <TIM_Base_SetConfig+0x13c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d108      	bne.n	8004180 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4313      	orrs	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a0a      	ldr	r2, [pc, #40]	; (80041d0 <TIM_Base_SetConfig+0x114>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d003      	beq.n	80041b4 <TIM_Base_SetConfig+0xf8>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a0c      	ldr	r2, [pc, #48]	; (80041e0 <TIM_Base_SetConfig+0x124>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d103      	bne.n	80041bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	615a      	str	r2, [r3, #20]
}
 80041c2:	bf00      	nop
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40010000 	.word	0x40010000
 80041d4:	40000400 	.word	0x40000400
 80041d8:	40000800 	.word	0x40000800
 80041dc:	40000c00 	.word	0x40000c00
 80041e0:	40010400 	.word	0x40010400
 80041e4:	40014000 	.word	0x40014000
 80041e8:	40014400 	.word	0x40014400
 80041ec:	40014800 	.word	0x40014800
 80041f0:	40001800 	.word	0x40001800
 80041f4:	40001c00 	.word	0x40001c00
 80041f8:	40002000 	.word	0x40002000

080041fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	f023 0201 	bic.w	r2, r3, #1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0303 	bic.w	r3, r3, #3
 8004232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f023 0302 	bic.w	r3, r3, #2
 8004244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4313      	orrs	r3, r2
 800424e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a20      	ldr	r2, [pc, #128]	; (80042d4 <TIM_OC1_SetConfig+0xd8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d003      	beq.n	8004260 <TIM_OC1_SetConfig+0x64>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a1f      	ldr	r2, [pc, #124]	; (80042d8 <TIM_OC1_SetConfig+0xdc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d10c      	bne.n	800427a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f023 0308 	bic.w	r3, r3, #8
 8004266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	4313      	orrs	r3, r2
 8004270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f023 0304 	bic.w	r3, r3, #4
 8004278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a15      	ldr	r2, [pc, #84]	; (80042d4 <TIM_OC1_SetConfig+0xd8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_OC1_SetConfig+0x8e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a14      	ldr	r2, [pc, #80]	; (80042d8 <TIM_OC1_SetConfig+0xdc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d111      	bne.n	80042ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	621a      	str	r2, [r3, #32]
}
 80042c8:	bf00      	nop
 80042ca:	371c      	adds	r7, #28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	40010000 	.word	0x40010000
 80042d8:	40010400 	.word	0x40010400

080042dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	f023 0210 	bic.w	r2, r3, #16
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800430a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	021b      	lsls	r3, r3, #8
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	4313      	orrs	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f023 0320 	bic.w	r3, r3, #32
 8004326:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a22      	ldr	r2, [pc, #136]	; (80043c0 <TIM_OC2_SetConfig+0xe4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d003      	beq.n	8004344 <TIM_OC2_SetConfig+0x68>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a21      	ldr	r2, [pc, #132]	; (80043c4 <TIM_OC2_SetConfig+0xe8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d10d      	bne.n	8004360 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800434a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	4313      	orrs	r3, r2
 8004356:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800435e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a17      	ldr	r2, [pc, #92]	; (80043c0 <TIM_OC2_SetConfig+0xe4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d003      	beq.n	8004370 <TIM_OC2_SetConfig+0x94>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a16      	ldr	r2, [pc, #88]	; (80043c4 <TIM_OC2_SetConfig+0xe8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d113      	bne.n	8004398 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004376:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800437e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	621a      	str	r2, [r3, #32]
}
 80043b2:	bf00      	nop
 80043b4:	371c      	adds	r7, #28
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40010000 	.word	0x40010000
 80043c4:	40010400 	.word	0x40010400

080043c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0303 	bic.w	r3, r3, #3
 80043fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a21      	ldr	r2, [pc, #132]	; (80044a8 <TIM_OC3_SetConfig+0xe0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d003      	beq.n	800442e <TIM_OC3_SetConfig+0x66>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a20      	ldr	r2, [pc, #128]	; (80044ac <TIM_OC3_SetConfig+0xe4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d10d      	bne.n	800444a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004434:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	021b      	lsls	r3, r3, #8
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	4313      	orrs	r3, r2
 8004440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a16      	ldr	r2, [pc, #88]	; (80044a8 <TIM_OC3_SetConfig+0xe0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d003      	beq.n	800445a <TIM_OC3_SetConfig+0x92>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a15      	ldr	r2, [pc, #84]	; (80044ac <TIM_OC3_SetConfig+0xe4>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d113      	bne.n	8004482 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	621a      	str	r2, [r3, #32]
}
 800449c:	bf00      	nop
 800449e:	371c      	adds	r7, #28
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	40010000 	.word	0x40010000
 80044ac:	40010400 	.word	0x40010400

080044b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	021b      	lsls	r3, r3, #8
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	031b      	lsls	r3, r3, #12
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a12      	ldr	r2, [pc, #72]	; (8004554 <TIM_OC4_SetConfig+0xa4>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d003      	beq.n	8004518 <TIM_OC4_SetConfig+0x68>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a11      	ldr	r2, [pc, #68]	; (8004558 <TIM_OC4_SetConfig+0xa8>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d109      	bne.n	800452c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800451e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	019b      	lsls	r3, r3, #6
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	4313      	orrs	r3, r2
 800452a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	621a      	str	r2, [r3, #32]
}
 8004546:	bf00      	nop
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40010000 	.word	0x40010000
 8004558:	40010400 	.word	0x40010400

0800455c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f023 0201 	bic.w	r2, r3, #1
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f023 030a 	bic.w	r3, r3, #10
 8004598:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	621a      	str	r2, [r3, #32]
}
 80045ae:	bf00      	nop
 80045b0:	371c      	adds	r7, #28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b087      	sub	sp, #28
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	f023 0210 	bic.w	r2, r3, #16
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	031b      	lsls	r3, r3, #12
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	621a      	str	r2, [r3, #32]
}
 800460e:	bf00      	nop
 8004610:	371c      	adds	r7, #28
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800461a:	b480      	push	{r7}
 800461c:	b085      	sub	sp, #20
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	f043 0307 	orr.w	r3, r3, #7
 800463c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	609a      	str	r2, [r3, #8]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800466a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	021a      	lsls	r2, r3, #8
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	431a      	orrs	r2, r3
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4313      	orrs	r3, r2
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	609a      	str	r2, [r3, #8]
}
 8004684:	bf00      	nop
 8004686:	371c      	adds	r7, #28
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 031f 	and.w	r3, r3, #31
 80046a2:	2201      	movs	r2, #1
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a1a      	ldr	r2, [r3, #32]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	43db      	mvns	r3, r3
 80046b2:	401a      	ands	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a1a      	ldr	r2, [r3, #32]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	fa01 f303 	lsl.w	r3, r1, r3
 80046c8:	431a      	orrs	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	621a      	str	r2, [r3, #32]
}
 80046ce:	bf00      	nop
 80046d0:	371c      	adds	r7, #28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
	...

080046dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e05a      	b.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a21      	ldr	r2, [pc, #132]	; (80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d022      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004740:	d01d      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a1d      	ldr	r2, [pc, #116]	; (80047bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d018      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1b      	ldr	r2, [pc, #108]	; (80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d013      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1a      	ldr	r2, [pc, #104]	; (80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00e      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a18      	ldr	r2, [pc, #96]	; (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d009      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a17      	ldr	r2, [pc, #92]	; (80047cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d004      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a15      	ldr	r2, [pc, #84]	; (80047d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d10c      	bne.n	8004798 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004784:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	4313      	orrs	r3, r2
 800478e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40010000 	.word	0x40010000
 80047bc:	40000400 	.word	0x40000400
 80047c0:	40000800 	.word	0x40000800
 80047c4:	40000c00 	.word	0x40000c00
 80047c8:	40010400 	.word	0x40010400
 80047cc:	40014000 	.word	0x40014000
 80047d0:	40001800 	.word	0x40001800

080047d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e03d      	b.n	800486c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	4313      	orrs	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e03f      	b.n	800490a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fd ff20 	bl	80026e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2224      	movs	r2, #36	; 0x24
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fe1d 	bl	80054fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	691a      	ldr	r2, [r3, #16]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695a      	ldr	r2, [r3, #20]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b08a      	sub	sp, #40	; 0x28
 8004916:	af02      	add	r7, sp, #8
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	603b      	str	r3, [r7, #0]
 800491e:	4613      	mov	r3, r2
 8004920:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b20      	cmp	r3, #32
 8004930:	d17c      	bne.n	8004a2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <HAL_UART_Transmit+0x2c>
 8004938:	88fb      	ldrh	r3, [r7, #6]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e075      	b.n	8004a2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_UART_Transmit+0x3e>
 800494c:	2302      	movs	r3, #2
 800494e:	e06e      	b.n	8004a2e <HAL_UART_Transmit+0x11c>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2221      	movs	r2, #33	; 0x21
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004966:	f7fe f881 	bl	8002a6c <HAL_GetTick>
 800496a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	88fa      	ldrh	r2, [r7, #6]
 8004970:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	88fa      	ldrh	r2, [r7, #6]
 8004976:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004980:	d108      	bne.n	8004994 <HAL_UART_Transmit+0x82>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d104      	bne.n	8004994 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800498a:	2300      	movs	r3, #0
 800498c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	e003      	b.n	800499c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004998:	2300      	movs	r3, #0
 800499a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80049a4:	e02a      	b.n	80049fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2200      	movs	r2, #0
 80049ae:	2180      	movs	r1, #128	; 0x80
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 fb9b 	bl	80050ec <UART_WaitOnFlagUntilTimeout>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e036      	b.n	8004a2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10b      	bne.n	80049de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	3302      	adds	r3, #2
 80049da:	61bb      	str	r3, [r7, #24]
 80049dc:	e007      	b.n	80049ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	781a      	ldrb	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	3301      	adds	r3, #1
 80049ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1cf      	bne.n	80049a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2140      	movs	r1, #64	; 0x40
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 fb6b 	bl	80050ec <UART_WaitOnFlagUntilTimeout>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e006      	b.n	8004a2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	e000      	b.n	8004a2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a2c:	2302      	movs	r3, #2
  }
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3720      	adds	r7, #32
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b08a      	sub	sp, #40	; 0x28
 8004a3a:	af02      	add	r7, sp, #8
 8004a3c:	60f8      	str	r0, [r7, #12]
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	603b      	str	r3, [r7, #0]
 8004a42:	4613      	mov	r3, r2
 8004a44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b20      	cmp	r3, #32
 8004a54:	f040 808c 	bne.w	8004b70 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <HAL_UART_Receive+0x2e>
 8004a5e:	88fb      	ldrh	r3, [r7, #6]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e084      	b.n	8004b72 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <HAL_UART_Receive+0x40>
 8004a72:	2302      	movs	r3, #2
 8004a74:	e07d      	b.n	8004b72 <HAL_UART_Receive+0x13c>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2222      	movs	r2, #34	; 0x22
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a92:	f7fd ffeb 	bl	8002a6c <HAL_GetTick>
 8004a96:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	88fa      	ldrh	r2, [r7, #6]
 8004a9c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	88fa      	ldrh	r2, [r7, #6]
 8004aa2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aac:	d108      	bne.n	8004ac0 <HAL_UART_Receive+0x8a>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d104      	bne.n	8004ac0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	61bb      	str	r3, [r7, #24]
 8004abe:	e003      	b.n	8004ac8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004ad0:	e043      	b.n	8004b5a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2120      	movs	r1, #32
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 fb05 	bl	80050ec <UART_WaitOnFlagUntilTimeout>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e042      	b.n	8004b72 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10c      	bne.n	8004b0c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	3302      	adds	r3, #2
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	e01f      	b.n	8004b4c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b14:	d007      	beq.n	8004b26 <HAL_UART_Receive+0xf0>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10a      	bne.n	8004b34 <HAL_UART_Receive+0xfe>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	e008      	b.n	8004b46 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1b6      	bne.n	8004ad2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	e000      	b.n	8004b72 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004b70:	2302      	movs	r3, #2
  }
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3720      	adds	r7, #32
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b0ba      	sub	sp, #232	; 0xe8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004bba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10f      	bne.n	8004be2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d009      	beq.n	8004be2 <HAL_UART_IRQHandler+0x66>
 8004bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bd2:	f003 0320 	and.w	r3, r3, #32
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fbd3 	bl	8005386 <UART_Receive_IT>
      return;
 8004be0:	e256      	b.n	8005090 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004be2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 80de 	beq.w	8004da8 <HAL_UART_IRQHandler+0x22c>
 8004bec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d106      	bne.n	8004c06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bfc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 80d1 	beq.w	8004da8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00b      	beq.n	8004c2a <HAL_UART_IRQHandler+0xae>
 8004c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d005      	beq.n	8004c2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	f043 0201 	orr.w	r2, r3, #1
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00b      	beq.n	8004c4e <HAL_UART_IRQHandler+0xd2>
 8004c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d005      	beq.n	8004c4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	f043 0202 	orr.w	r2, r3, #2
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00b      	beq.n	8004c72 <HAL_UART_IRQHandler+0xf6>
 8004c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d005      	beq.n	8004c72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	f043 0204 	orr.w	r2, r3, #4
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d011      	beq.n	8004ca2 <HAL_UART_IRQHandler+0x126>
 8004c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c82:	f003 0320 	and.w	r3, r3, #32
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d105      	bne.n	8004c96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d005      	beq.n	8004ca2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f043 0208 	orr.w	r2, r3, #8
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 81ed 	beq.w	8005086 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb0:	f003 0320 	and.w	r3, r3, #32
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d008      	beq.n	8004cca <HAL_UART_IRQHandler+0x14e>
 8004cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cbc:	f003 0320 	and.w	r3, r3, #32
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fb5e 	bl	8005386 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd4:	2b40      	cmp	r3, #64	; 0x40
 8004cd6:	bf0c      	ite	eq
 8004cd8:	2301      	moveq	r3, #1
 8004cda:	2300      	movne	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d103      	bne.n	8004cf6 <HAL_UART_IRQHandler+0x17a>
 8004cee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d04f      	beq.n	8004d96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fa66 	bl	80051c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d06:	2b40      	cmp	r3, #64	; 0x40
 8004d08:	d141      	bne.n	8004d8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3314      	adds	r3, #20
 8004d10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d18:	e853 3f00 	ldrex	r3, [r3]
 8004d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3314      	adds	r3, #20
 8004d32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d46:	e841 2300 	strex	r3, r2, [r1]
 8004d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1d9      	bne.n	8004d0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d013      	beq.n	8004d86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d62:	4a7d      	ldr	r2, [pc, #500]	; (8004f58 <HAL_UART_IRQHandler+0x3dc>)
 8004d64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fe f82f 	bl	8002dce <HAL_DMA_Abort_IT>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d016      	beq.n	8004da4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d80:	4610      	mov	r0, r2
 8004d82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d84:	e00e      	b.n	8004da4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f99a 	bl	80050c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d8c:	e00a      	b.n	8004da4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f996 	bl	80050c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d94:	e006      	b.n	8004da4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f992 	bl	80050c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004da2:	e170      	b.n	8005086 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da4:	bf00      	nop
    return;
 8004da6:	e16e      	b.n	8005086 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	f040 814a 	bne.w	8005046 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004db6:	f003 0310 	and.w	r3, r3, #16
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 8143 	beq.w	8005046 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dc4:	f003 0310 	and.w	r3, r3, #16
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 813c 	beq.w	8005046 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60bb      	str	r3, [r7, #8]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	60bb      	str	r3, [r7, #8]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	60bb      	str	r3, [r7, #8]
 8004de2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dee:	2b40      	cmp	r3, #64	; 0x40
 8004df0:	f040 80b4 	bne.w	8004f5c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 8140 	beq.w	800508a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e12:	429a      	cmp	r2, r3
 8004e14:	f080 8139 	bcs.w	800508a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e2a:	f000 8088 	beq.w	8004f3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	330c      	adds	r3, #12
 8004e34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e3c:	e853 3f00 	ldrex	r3, [r3]
 8004e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	330c      	adds	r3, #12
 8004e56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004e5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e6a:	e841 2300 	strex	r3, r2, [r1]
 8004e6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1d9      	bne.n	8004e2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3314      	adds	r3, #20
 8004e80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e84:	e853 3f00 	ldrex	r3, [r3]
 8004e88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e8c:	f023 0301 	bic.w	r3, r3, #1
 8004e90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3314      	adds	r3, #20
 8004e9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ea2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ea6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004eb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e1      	bne.n	8004e7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3314      	adds	r3, #20
 8004ebc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ec0:	e853 3f00 	ldrex	r3, [r3]
 8004ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ec8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ecc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3314      	adds	r3, #20
 8004ed6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004eda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004edc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ede:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ee0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1e3      	bne.n	8004eb6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	330c      	adds	r3, #12
 8004f02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f06:	e853 3f00 	ldrex	r3, [r3]
 8004f0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f0e:	f023 0310 	bic.w	r3, r3, #16
 8004f12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	330c      	adds	r3, #12
 8004f1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f20:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f22:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f28:	e841 2300 	strex	r3, r2, [r1]
 8004f2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e3      	bne.n	8004efc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fd fed8 	bl	8002cee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f8c0 	bl	80050d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f54:	e099      	b.n	800508a <HAL_UART_IRQHandler+0x50e>
 8004f56:	bf00      	nop
 8004f58:	0800528f 	.word	0x0800528f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 808b 	beq.w	800508e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004f78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 8086 	beq.w	800508e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	330c      	adds	r3, #12
 8004f88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8c:	e853 3f00 	ldrex	r3, [r3]
 8004f90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	330c      	adds	r3, #12
 8004fa2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004fa6:	647a      	str	r2, [r7, #68]	; 0x44
 8004fa8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004faa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fae:	e841 2300 	strex	r3, r2, [r1]
 8004fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1e3      	bne.n	8004f82 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	3314      	adds	r3, #20
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	e853 3f00 	ldrex	r3, [r3]
 8004fc8:	623b      	str	r3, [r7, #32]
   return(result);
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	f023 0301 	bic.w	r3, r3, #1
 8004fd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3314      	adds	r3, #20
 8004fda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004fde:	633a      	str	r2, [r7, #48]	; 0x30
 8004fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fe6:	e841 2300 	strex	r3, r2, [r1]
 8004fea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1e3      	bne.n	8004fba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	330c      	adds	r3, #12
 8005006:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	e853 3f00 	ldrex	r3, [r3]
 800500e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0310 	bic.w	r3, r3, #16
 8005016:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	330c      	adds	r3, #12
 8005020:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005024:	61fa      	str	r2, [r7, #28]
 8005026:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	69b9      	ldr	r1, [r7, #24]
 800502a:	69fa      	ldr	r2, [r7, #28]
 800502c:	e841 2300 	strex	r3, r2, [r1]
 8005030:	617b      	str	r3, [r7, #20]
   return(result);
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1e3      	bne.n	8005000 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005038:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800503c:	4619      	mov	r1, r3
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f848 	bl	80050d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005044:	e023      	b.n	800508e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800504a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504e:	2b00      	cmp	r3, #0
 8005050:	d009      	beq.n	8005066 <HAL_UART_IRQHandler+0x4ea>
 8005052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f929 	bl	80052b6 <UART_Transmit_IT>
    return;
 8005064:	e014      	b.n	8005090 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800506a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00e      	beq.n	8005090 <HAL_UART_IRQHandler+0x514>
 8005072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	d008      	beq.n	8005090 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f969 	bl	8005356 <UART_EndTransmit_IT>
    return;
 8005084:	e004      	b.n	8005090 <HAL_UART_IRQHandler+0x514>
    return;
 8005086:	bf00      	nop
 8005088:	e002      	b.n	8005090 <HAL_UART_IRQHandler+0x514>
      return;
 800508a:	bf00      	nop
 800508c:	e000      	b.n	8005090 <HAL_UART_IRQHandler+0x514>
      return;
 800508e:	bf00      	nop
  }
}
 8005090:	37e8      	adds	r7, #232	; 0xe8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop

08005098 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b090      	sub	sp, #64	; 0x40
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	603b      	str	r3, [r7, #0]
 80050f8:	4613      	mov	r3, r2
 80050fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050fc:	e050      	b.n	80051a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005104:	d04c      	beq.n	80051a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005108:	2b00      	cmp	r3, #0
 800510a:	d007      	beq.n	800511c <UART_WaitOnFlagUntilTimeout+0x30>
 800510c:	f7fd fcae 	bl	8002a6c <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005118:	429a      	cmp	r2, r3
 800511a:	d241      	bcs.n	80051a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	330c      	adds	r3, #12
 8005122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005126:	e853 3f00 	ldrex	r3, [r3]
 800512a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	330c      	adds	r3, #12
 800513a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800513c:	637a      	str	r2, [r7, #52]	; 0x34
 800513e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005140:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005144:	e841 2300 	strex	r3, r2, [r1]
 8005148:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800514a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1e5      	bne.n	800511c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3314      	adds	r3, #20
 8005156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	e853 3f00 	ldrex	r3, [r3]
 800515e:	613b      	str	r3, [r7, #16]
   return(result);
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f023 0301 	bic.w	r3, r3, #1
 8005166:	63bb      	str	r3, [r7, #56]	; 0x38
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3314      	adds	r3, #20
 800516e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005170:	623a      	str	r2, [r7, #32]
 8005172:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005174:	69f9      	ldr	r1, [r7, #28]
 8005176:	6a3a      	ldr	r2, [r7, #32]
 8005178:	e841 2300 	strex	r3, r2, [r1]
 800517c:	61bb      	str	r3, [r7, #24]
   return(result);
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1e5      	bne.n	8005150 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e00f      	b.n	80051c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	4013      	ands	r3, r2
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	bf0c      	ite	eq
 80051b0:	2301      	moveq	r3, #1
 80051b2:	2300      	movne	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d09f      	beq.n	80050fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3740      	adds	r7, #64	; 0x40
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b095      	sub	sp, #84	; 0x54
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	330c      	adds	r3, #12
 80051d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051da:	e853 3f00 	ldrex	r3, [r3]
 80051de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	330c      	adds	r3, #12
 80051ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051f0:	643a      	str	r2, [r7, #64]	; 0x40
 80051f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051f8:	e841 2300 	strex	r3, r2, [r1]
 80051fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1e5      	bne.n	80051d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3314      	adds	r3, #20
 800520a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	e853 3f00 	ldrex	r3, [r3]
 8005212:	61fb      	str	r3, [r7, #28]
   return(result);
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	f023 0301 	bic.w	r3, r3, #1
 800521a:	64bb      	str	r3, [r7, #72]	; 0x48
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3314      	adds	r3, #20
 8005222:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005224:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005226:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005228:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800522a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800522c:	e841 2300 	strex	r3, r2, [r1]
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1e5      	bne.n	8005204 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523c:	2b01      	cmp	r3, #1
 800523e:	d119      	bne.n	8005274 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	330c      	adds	r3, #12
 8005246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	e853 3f00 	ldrex	r3, [r3]
 800524e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	f023 0310 	bic.w	r3, r3, #16
 8005256:	647b      	str	r3, [r7, #68]	; 0x44
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	330c      	adds	r3, #12
 800525e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005260:	61ba      	str	r2, [r7, #24]
 8005262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005264:	6979      	ldr	r1, [r7, #20]
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	e841 2300 	strex	r3, r2, [r1]
 800526c:	613b      	str	r3, [r7, #16]
   return(result);
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1e5      	bne.n	8005240 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2220      	movs	r2, #32
 8005278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005282:	bf00      	nop
 8005284:	3754      	adds	r7, #84	; 0x54
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f7ff ff09 	bl	80050c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052ae:	bf00      	nop
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b085      	sub	sp, #20
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b21      	cmp	r3, #33	; 0x21
 80052c8:	d13e      	bne.n	8005348 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d2:	d114      	bne.n	80052fe <UART_Transmit_IT+0x48>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d110      	bne.n	80052fe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	1c9a      	adds	r2, r3, #2
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	621a      	str	r2, [r3, #32]
 80052fc:	e008      	b.n	8005310 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	1c59      	adds	r1, r3, #1
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6211      	str	r1, [r2, #32]
 8005308:	781a      	ldrb	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005314:	b29b      	uxth	r3, r3
 8005316:	3b01      	subs	r3, #1
 8005318:	b29b      	uxth	r3, r3
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	4619      	mov	r1, r3
 800531e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10f      	bne.n	8005344 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005332:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68da      	ldr	r2, [r3, #12]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005342:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	e000      	b.n	800534a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005348:	2302      	movs	r3, #2
  }
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b082      	sub	sp, #8
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68da      	ldr	r2, [r3, #12]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800536c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2220      	movs	r2, #32
 8005372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7ff fe8e 	bl	8005098 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b08c      	sub	sp, #48	; 0x30
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b22      	cmp	r3, #34	; 0x22
 8005398:	f040 80ab 	bne.w	80054f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a4:	d117      	bne.n	80053d6 <UART_Receive_IT+0x50>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d113      	bne.n	80053d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	b29b      	uxth	r3, r3
 80053c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ce:	1c9a      	adds	r2, r3, #2
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	629a      	str	r2, [r3, #40]	; 0x28
 80053d4:	e026      	b.n	8005424 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80053dc:	2300      	movs	r3, #0
 80053de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e8:	d007      	beq.n	80053fa <UART_Receive_IT+0x74>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10a      	bne.n	8005408 <UART_Receive_IT+0x82>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	b2da      	uxtb	r2, r3
 8005402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005404:	701a      	strb	r2, [r3, #0]
 8005406:	e008      	b.n	800541a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	b2db      	uxtb	r3, r3
 8005410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005414:	b2da      	uxtb	r2, r3
 8005416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005418:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005428:	b29b      	uxth	r3, r3
 800542a:	3b01      	subs	r3, #1
 800542c:	b29b      	uxth	r3, r3
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	4619      	mov	r1, r3
 8005432:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005434:	2b00      	cmp	r3, #0
 8005436:	d15a      	bne.n	80054ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0220 	bic.w	r2, r2, #32
 8005446:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68da      	ldr	r2, [r3, #12]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005456:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695a      	ldr	r2, [r3, #20]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0201 	bic.w	r2, r2, #1
 8005466:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005474:	2b01      	cmp	r3, #1
 8005476:	d135      	bne.n	80054e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	330c      	adds	r3, #12
 8005484:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	e853 3f00 	ldrex	r3, [r3]
 800548c:	613b      	str	r3, [r7, #16]
   return(result);
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f023 0310 	bic.w	r3, r3, #16
 8005494:	627b      	str	r3, [r7, #36]	; 0x24
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	330c      	adds	r3, #12
 800549c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800549e:	623a      	str	r2, [r7, #32]
 80054a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a2:	69f9      	ldr	r1, [r7, #28]
 80054a4:	6a3a      	ldr	r2, [r7, #32]
 80054a6:	e841 2300 	strex	r3, r2, [r1]
 80054aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1e5      	bne.n	800547e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	2b10      	cmp	r3, #16
 80054be:	d10a      	bne.n	80054d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054c0:	2300      	movs	r3, #0
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054da:	4619      	mov	r1, r3
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7ff fdf9 	bl	80050d4 <HAL_UARTEx_RxEventCallback>
 80054e2:	e002      	b.n	80054ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7ff fde1 	bl	80050ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	e002      	b.n	80054f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	e000      	b.n	80054f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80054f2:	2302      	movs	r3, #2
  }
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3730      	adds	r7, #48	; 0x30
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005500:	b09f      	sub	sp, #124	; 0x7c
 8005502:	af00      	add	r7, sp, #0
 8005504:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005512:	68d9      	ldr	r1, [r3, #12]
 8005514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	ea40 0301 	orr.w	r3, r0, r1
 800551c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800551e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	431a      	orrs	r2, r3
 8005528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	431a      	orrs	r2, r3
 800552e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	4313      	orrs	r3, r2
 8005534:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005540:	f021 010c 	bic.w	r1, r1, #12
 8005544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800554a:	430b      	orrs	r3, r1
 800554c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800554e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800555a:	6999      	ldr	r1, [r3, #24]
 800555c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	ea40 0301 	orr.w	r3, r0, r1
 8005564:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	4bc5      	ldr	r3, [pc, #788]	; (8005880 <UART_SetConfig+0x384>)
 800556c:	429a      	cmp	r2, r3
 800556e:	d004      	beq.n	800557a <UART_SetConfig+0x7e>
 8005570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	4bc3      	ldr	r3, [pc, #780]	; (8005884 <UART_SetConfig+0x388>)
 8005576:	429a      	cmp	r2, r3
 8005578:	d103      	bne.n	8005582 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800557a:	f7fe fa91 	bl	8003aa0 <HAL_RCC_GetPCLK2Freq>
 800557e:	6778      	str	r0, [r7, #116]	; 0x74
 8005580:	e002      	b.n	8005588 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005582:	f7fe fa79 	bl	8003a78 <HAL_RCC_GetPCLK1Freq>
 8005586:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005590:	f040 80b6 	bne.w	8005700 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005594:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005596:	461c      	mov	r4, r3
 8005598:	f04f 0500 	mov.w	r5, #0
 800559c:	4622      	mov	r2, r4
 800559e:	462b      	mov	r3, r5
 80055a0:	1891      	adds	r1, r2, r2
 80055a2:	6439      	str	r1, [r7, #64]	; 0x40
 80055a4:	415b      	adcs	r3, r3
 80055a6:	647b      	str	r3, [r7, #68]	; 0x44
 80055a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80055ac:	1912      	adds	r2, r2, r4
 80055ae:	eb45 0303 	adc.w	r3, r5, r3
 80055b2:	f04f 0000 	mov.w	r0, #0
 80055b6:	f04f 0100 	mov.w	r1, #0
 80055ba:	00d9      	lsls	r1, r3, #3
 80055bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055c0:	00d0      	lsls	r0, r2, #3
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	1911      	adds	r1, r2, r4
 80055c8:	6639      	str	r1, [r7, #96]	; 0x60
 80055ca:	416b      	adcs	r3, r5
 80055cc:	667b      	str	r3, [r7, #100]	; 0x64
 80055ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	461a      	mov	r2, r3
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	1891      	adds	r1, r2, r2
 80055da:	63b9      	str	r1, [r7, #56]	; 0x38
 80055dc:	415b      	adcs	r3, r3
 80055de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055e4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80055e8:	f7fa fe4a 	bl	8000280 <__aeabi_uldivmod>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4ba5      	ldr	r3, [pc, #660]	; (8005888 <UART_SetConfig+0x38c>)
 80055f2:	fba3 2302 	umull	r2, r3, r3, r2
 80055f6:	095b      	lsrs	r3, r3, #5
 80055f8:	011e      	lsls	r6, r3, #4
 80055fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055fc:	461c      	mov	r4, r3
 80055fe:	f04f 0500 	mov.w	r5, #0
 8005602:	4622      	mov	r2, r4
 8005604:	462b      	mov	r3, r5
 8005606:	1891      	adds	r1, r2, r2
 8005608:	6339      	str	r1, [r7, #48]	; 0x30
 800560a:	415b      	adcs	r3, r3
 800560c:	637b      	str	r3, [r7, #52]	; 0x34
 800560e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005612:	1912      	adds	r2, r2, r4
 8005614:	eb45 0303 	adc.w	r3, r5, r3
 8005618:	f04f 0000 	mov.w	r0, #0
 800561c:	f04f 0100 	mov.w	r1, #0
 8005620:	00d9      	lsls	r1, r3, #3
 8005622:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005626:	00d0      	lsls	r0, r2, #3
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	1911      	adds	r1, r2, r4
 800562e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005630:	416b      	adcs	r3, r5
 8005632:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	461a      	mov	r2, r3
 800563a:	f04f 0300 	mov.w	r3, #0
 800563e:	1891      	adds	r1, r2, r2
 8005640:	62b9      	str	r1, [r7, #40]	; 0x28
 8005642:	415b      	adcs	r3, r3
 8005644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005646:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800564a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800564e:	f7fa fe17 	bl	8000280 <__aeabi_uldivmod>
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	4b8c      	ldr	r3, [pc, #560]	; (8005888 <UART_SetConfig+0x38c>)
 8005658:	fba3 1302 	umull	r1, r3, r3, r2
 800565c:	095b      	lsrs	r3, r3, #5
 800565e:	2164      	movs	r1, #100	; 0x64
 8005660:	fb01 f303 	mul.w	r3, r1, r3
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	3332      	adds	r3, #50	; 0x32
 800566a:	4a87      	ldr	r2, [pc, #540]	; (8005888 <UART_SetConfig+0x38c>)
 800566c:	fba2 2303 	umull	r2, r3, r2, r3
 8005670:	095b      	lsrs	r3, r3, #5
 8005672:	005b      	lsls	r3, r3, #1
 8005674:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005678:	441e      	add	r6, r3
 800567a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800567c:	4618      	mov	r0, r3
 800567e:	f04f 0100 	mov.w	r1, #0
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	1894      	adds	r4, r2, r2
 8005688:	623c      	str	r4, [r7, #32]
 800568a:	415b      	adcs	r3, r3
 800568c:	627b      	str	r3, [r7, #36]	; 0x24
 800568e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005692:	1812      	adds	r2, r2, r0
 8005694:	eb41 0303 	adc.w	r3, r1, r3
 8005698:	f04f 0400 	mov.w	r4, #0
 800569c:	f04f 0500 	mov.w	r5, #0
 80056a0:	00dd      	lsls	r5, r3, #3
 80056a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056a6:	00d4      	lsls	r4, r2, #3
 80056a8:	4622      	mov	r2, r4
 80056aa:	462b      	mov	r3, r5
 80056ac:	1814      	adds	r4, r2, r0
 80056ae:	653c      	str	r4, [r7, #80]	; 0x50
 80056b0:	414b      	adcs	r3, r1
 80056b2:	657b      	str	r3, [r7, #84]	; 0x54
 80056b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	461a      	mov	r2, r3
 80056ba:	f04f 0300 	mov.w	r3, #0
 80056be:	1891      	adds	r1, r2, r2
 80056c0:	61b9      	str	r1, [r7, #24]
 80056c2:	415b      	adcs	r3, r3
 80056c4:	61fb      	str	r3, [r7, #28]
 80056c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80056ce:	f7fa fdd7 	bl	8000280 <__aeabi_uldivmod>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	4b6c      	ldr	r3, [pc, #432]	; (8005888 <UART_SetConfig+0x38c>)
 80056d8:	fba3 1302 	umull	r1, r3, r3, r2
 80056dc:	095b      	lsrs	r3, r3, #5
 80056de:	2164      	movs	r1, #100	; 0x64
 80056e0:	fb01 f303 	mul.w	r3, r1, r3
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	3332      	adds	r3, #50	; 0x32
 80056ea:	4a67      	ldr	r2, [pc, #412]	; (8005888 <UART_SetConfig+0x38c>)
 80056ec:	fba2 2303 	umull	r2, r3, r2, r3
 80056f0:	095b      	lsrs	r3, r3, #5
 80056f2:	f003 0207 	and.w	r2, r3, #7
 80056f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4432      	add	r2, r6
 80056fc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056fe:	e0b9      	b.n	8005874 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005702:	461c      	mov	r4, r3
 8005704:	f04f 0500 	mov.w	r5, #0
 8005708:	4622      	mov	r2, r4
 800570a:	462b      	mov	r3, r5
 800570c:	1891      	adds	r1, r2, r2
 800570e:	6139      	str	r1, [r7, #16]
 8005710:	415b      	adcs	r3, r3
 8005712:	617b      	str	r3, [r7, #20]
 8005714:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005718:	1912      	adds	r2, r2, r4
 800571a:	eb45 0303 	adc.w	r3, r5, r3
 800571e:	f04f 0000 	mov.w	r0, #0
 8005722:	f04f 0100 	mov.w	r1, #0
 8005726:	00d9      	lsls	r1, r3, #3
 8005728:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800572c:	00d0      	lsls	r0, r2, #3
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	eb12 0804 	adds.w	r8, r2, r4
 8005736:	eb43 0905 	adc.w	r9, r3, r5
 800573a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	4618      	mov	r0, r3
 8005740:	f04f 0100 	mov.w	r1, #0
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	008b      	lsls	r3, r1, #2
 800574e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005752:	0082      	lsls	r2, r0, #2
 8005754:	4640      	mov	r0, r8
 8005756:	4649      	mov	r1, r9
 8005758:	f7fa fd92 	bl	8000280 <__aeabi_uldivmod>
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	4b49      	ldr	r3, [pc, #292]	; (8005888 <UART_SetConfig+0x38c>)
 8005762:	fba3 2302 	umull	r2, r3, r3, r2
 8005766:	095b      	lsrs	r3, r3, #5
 8005768:	011e      	lsls	r6, r3, #4
 800576a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800576c:	4618      	mov	r0, r3
 800576e:	f04f 0100 	mov.w	r1, #0
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	1894      	adds	r4, r2, r2
 8005778:	60bc      	str	r4, [r7, #8]
 800577a:	415b      	adcs	r3, r3
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005782:	1812      	adds	r2, r2, r0
 8005784:	eb41 0303 	adc.w	r3, r1, r3
 8005788:	f04f 0400 	mov.w	r4, #0
 800578c:	f04f 0500 	mov.w	r5, #0
 8005790:	00dd      	lsls	r5, r3, #3
 8005792:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005796:	00d4      	lsls	r4, r2, #3
 8005798:	4622      	mov	r2, r4
 800579a:	462b      	mov	r3, r5
 800579c:	1814      	adds	r4, r2, r0
 800579e:	64bc      	str	r4, [r7, #72]	; 0x48
 80057a0:	414b      	adcs	r3, r1
 80057a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f04f 0100 	mov.w	r1, #0
 80057ae:	f04f 0200 	mov.w	r2, #0
 80057b2:	f04f 0300 	mov.w	r3, #0
 80057b6:	008b      	lsls	r3, r1, #2
 80057b8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80057bc:	0082      	lsls	r2, r0, #2
 80057be:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80057c2:	f7fa fd5d 	bl	8000280 <__aeabi_uldivmod>
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	4b2f      	ldr	r3, [pc, #188]	; (8005888 <UART_SetConfig+0x38c>)
 80057cc:	fba3 1302 	umull	r1, r3, r3, r2
 80057d0:	095b      	lsrs	r3, r3, #5
 80057d2:	2164      	movs	r1, #100	; 0x64
 80057d4:	fb01 f303 	mul.w	r3, r1, r3
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	3332      	adds	r3, #50	; 0x32
 80057de:	4a2a      	ldr	r2, [pc, #168]	; (8005888 <UART_SetConfig+0x38c>)
 80057e0:	fba2 2303 	umull	r2, r3, r2, r3
 80057e4:	095b      	lsrs	r3, r3, #5
 80057e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057ea:	441e      	add	r6, r3
 80057ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ee:	4618      	mov	r0, r3
 80057f0:	f04f 0100 	mov.w	r1, #0
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	1894      	adds	r4, r2, r2
 80057fa:	603c      	str	r4, [r7, #0]
 80057fc:	415b      	adcs	r3, r3
 80057fe:	607b      	str	r3, [r7, #4]
 8005800:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005804:	1812      	adds	r2, r2, r0
 8005806:	eb41 0303 	adc.w	r3, r1, r3
 800580a:	f04f 0400 	mov.w	r4, #0
 800580e:	f04f 0500 	mov.w	r5, #0
 8005812:	00dd      	lsls	r5, r3, #3
 8005814:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005818:	00d4      	lsls	r4, r2, #3
 800581a:	4622      	mov	r2, r4
 800581c:	462b      	mov	r3, r5
 800581e:	eb12 0a00 	adds.w	sl, r2, r0
 8005822:	eb43 0b01 	adc.w	fp, r3, r1
 8005826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	4618      	mov	r0, r3
 800582c:	f04f 0100 	mov.w	r1, #0
 8005830:	f04f 0200 	mov.w	r2, #0
 8005834:	f04f 0300 	mov.w	r3, #0
 8005838:	008b      	lsls	r3, r1, #2
 800583a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800583e:	0082      	lsls	r2, r0, #2
 8005840:	4650      	mov	r0, sl
 8005842:	4659      	mov	r1, fp
 8005844:	f7fa fd1c 	bl	8000280 <__aeabi_uldivmod>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	4b0e      	ldr	r3, [pc, #56]	; (8005888 <UART_SetConfig+0x38c>)
 800584e:	fba3 1302 	umull	r1, r3, r3, r2
 8005852:	095b      	lsrs	r3, r3, #5
 8005854:	2164      	movs	r1, #100	; 0x64
 8005856:	fb01 f303 	mul.w	r3, r1, r3
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	3332      	adds	r3, #50	; 0x32
 8005860:	4a09      	ldr	r2, [pc, #36]	; (8005888 <UART_SetConfig+0x38c>)
 8005862:	fba2 2303 	umull	r2, r3, r2, r3
 8005866:	095b      	lsrs	r3, r3, #5
 8005868:	f003 020f 	and.w	r2, r3, #15
 800586c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4432      	add	r2, r6
 8005872:	609a      	str	r2, [r3, #8]
}
 8005874:	bf00      	nop
 8005876:	377c      	adds	r7, #124	; 0x7c
 8005878:	46bd      	mov	sp, r7
 800587a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800587e:	bf00      	nop
 8005880:	40011000 	.word	0x40011000
 8005884:	40011400 	.word	0x40011400
 8005888:	51eb851f 	.word	0x51eb851f

0800588c <__errno>:
 800588c:	4b01      	ldr	r3, [pc, #4]	; (8005894 <__errno+0x8>)
 800588e:	6818      	ldr	r0, [r3, #0]
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	2000000c 	.word	0x2000000c

08005898 <__libc_init_array>:
 8005898:	b570      	push	{r4, r5, r6, lr}
 800589a:	4d0d      	ldr	r5, [pc, #52]	; (80058d0 <__libc_init_array+0x38>)
 800589c:	4c0d      	ldr	r4, [pc, #52]	; (80058d4 <__libc_init_array+0x3c>)
 800589e:	1b64      	subs	r4, r4, r5
 80058a0:	10a4      	asrs	r4, r4, #2
 80058a2:	2600      	movs	r6, #0
 80058a4:	42a6      	cmp	r6, r4
 80058a6:	d109      	bne.n	80058bc <__libc_init_array+0x24>
 80058a8:	4d0b      	ldr	r5, [pc, #44]	; (80058d8 <__libc_init_array+0x40>)
 80058aa:	4c0c      	ldr	r4, [pc, #48]	; (80058dc <__libc_init_array+0x44>)
 80058ac:	f000 fc4e 	bl	800614c <_init>
 80058b0:	1b64      	subs	r4, r4, r5
 80058b2:	10a4      	asrs	r4, r4, #2
 80058b4:	2600      	movs	r6, #0
 80058b6:	42a6      	cmp	r6, r4
 80058b8:	d105      	bne.n	80058c6 <__libc_init_array+0x2e>
 80058ba:	bd70      	pop	{r4, r5, r6, pc}
 80058bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80058c0:	4798      	blx	r3
 80058c2:	3601      	adds	r6, #1
 80058c4:	e7ee      	b.n	80058a4 <__libc_init_array+0xc>
 80058c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ca:	4798      	blx	r3
 80058cc:	3601      	adds	r6, #1
 80058ce:	e7f2      	b.n	80058b6 <__libc_init_array+0x1e>
 80058d0:	080068d0 	.word	0x080068d0
 80058d4:	080068d0 	.word	0x080068d0
 80058d8:	080068d0 	.word	0x080068d0
 80058dc:	080068d4 	.word	0x080068d4

080058e0 <memset>:
 80058e0:	4402      	add	r2, r0
 80058e2:	4603      	mov	r3, r0
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d100      	bne.n	80058ea <memset+0xa>
 80058e8:	4770      	bx	lr
 80058ea:	f803 1b01 	strb.w	r1, [r3], #1
 80058ee:	e7f9      	b.n	80058e4 <memset+0x4>

080058f0 <siprintf>:
 80058f0:	b40e      	push	{r1, r2, r3}
 80058f2:	b500      	push	{lr}
 80058f4:	b09c      	sub	sp, #112	; 0x70
 80058f6:	ab1d      	add	r3, sp, #116	; 0x74
 80058f8:	9002      	str	r0, [sp, #8]
 80058fa:	9006      	str	r0, [sp, #24]
 80058fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005900:	4809      	ldr	r0, [pc, #36]	; (8005928 <siprintf+0x38>)
 8005902:	9107      	str	r1, [sp, #28]
 8005904:	9104      	str	r1, [sp, #16]
 8005906:	4909      	ldr	r1, [pc, #36]	; (800592c <siprintf+0x3c>)
 8005908:	f853 2b04 	ldr.w	r2, [r3], #4
 800590c:	9105      	str	r1, [sp, #20]
 800590e:	6800      	ldr	r0, [r0, #0]
 8005910:	9301      	str	r3, [sp, #4]
 8005912:	a902      	add	r1, sp, #8
 8005914:	f000 f868 	bl	80059e8 <_svfiprintf_r>
 8005918:	9b02      	ldr	r3, [sp, #8]
 800591a:	2200      	movs	r2, #0
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	b01c      	add	sp, #112	; 0x70
 8005920:	f85d eb04 	ldr.w	lr, [sp], #4
 8005924:	b003      	add	sp, #12
 8005926:	4770      	bx	lr
 8005928:	2000000c 	.word	0x2000000c
 800592c:	ffff0208 	.word	0xffff0208

08005930 <__ssputs_r>:
 8005930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005934:	688e      	ldr	r6, [r1, #8]
 8005936:	429e      	cmp	r6, r3
 8005938:	4682      	mov	sl, r0
 800593a:	460c      	mov	r4, r1
 800593c:	4690      	mov	r8, r2
 800593e:	461f      	mov	r7, r3
 8005940:	d838      	bhi.n	80059b4 <__ssputs_r+0x84>
 8005942:	898a      	ldrh	r2, [r1, #12]
 8005944:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005948:	d032      	beq.n	80059b0 <__ssputs_r+0x80>
 800594a:	6825      	ldr	r5, [r4, #0]
 800594c:	6909      	ldr	r1, [r1, #16]
 800594e:	eba5 0901 	sub.w	r9, r5, r1
 8005952:	6965      	ldr	r5, [r4, #20]
 8005954:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005958:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800595c:	3301      	adds	r3, #1
 800595e:	444b      	add	r3, r9
 8005960:	106d      	asrs	r5, r5, #1
 8005962:	429d      	cmp	r5, r3
 8005964:	bf38      	it	cc
 8005966:	461d      	movcc	r5, r3
 8005968:	0553      	lsls	r3, r2, #21
 800596a:	d531      	bpl.n	80059d0 <__ssputs_r+0xa0>
 800596c:	4629      	mov	r1, r5
 800596e:	f000 fb47 	bl	8006000 <_malloc_r>
 8005972:	4606      	mov	r6, r0
 8005974:	b950      	cbnz	r0, 800598c <__ssputs_r+0x5c>
 8005976:	230c      	movs	r3, #12
 8005978:	f8ca 3000 	str.w	r3, [sl]
 800597c:	89a3      	ldrh	r3, [r4, #12]
 800597e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005982:	81a3      	strh	r3, [r4, #12]
 8005984:	f04f 30ff 	mov.w	r0, #4294967295
 8005988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800598c:	6921      	ldr	r1, [r4, #16]
 800598e:	464a      	mov	r2, r9
 8005990:	f000 fabe 	bl	8005f10 <memcpy>
 8005994:	89a3      	ldrh	r3, [r4, #12]
 8005996:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800599a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800599e:	81a3      	strh	r3, [r4, #12]
 80059a0:	6126      	str	r6, [r4, #16]
 80059a2:	6165      	str	r5, [r4, #20]
 80059a4:	444e      	add	r6, r9
 80059a6:	eba5 0509 	sub.w	r5, r5, r9
 80059aa:	6026      	str	r6, [r4, #0]
 80059ac:	60a5      	str	r5, [r4, #8]
 80059ae:	463e      	mov	r6, r7
 80059b0:	42be      	cmp	r6, r7
 80059b2:	d900      	bls.n	80059b6 <__ssputs_r+0x86>
 80059b4:	463e      	mov	r6, r7
 80059b6:	4632      	mov	r2, r6
 80059b8:	6820      	ldr	r0, [r4, #0]
 80059ba:	4641      	mov	r1, r8
 80059bc:	f000 fab6 	bl	8005f2c <memmove>
 80059c0:	68a3      	ldr	r3, [r4, #8]
 80059c2:	6822      	ldr	r2, [r4, #0]
 80059c4:	1b9b      	subs	r3, r3, r6
 80059c6:	4432      	add	r2, r6
 80059c8:	60a3      	str	r3, [r4, #8]
 80059ca:	6022      	str	r2, [r4, #0]
 80059cc:	2000      	movs	r0, #0
 80059ce:	e7db      	b.n	8005988 <__ssputs_r+0x58>
 80059d0:	462a      	mov	r2, r5
 80059d2:	f000 fb6f 	bl	80060b4 <_realloc_r>
 80059d6:	4606      	mov	r6, r0
 80059d8:	2800      	cmp	r0, #0
 80059da:	d1e1      	bne.n	80059a0 <__ssputs_r+0x70>
 80059dc:	6921      	ldr	r1, [r4, #16]
 80059de:	4650      	mov	r0, sl
 80059e0:	f000 fabe 	bl	8005f60 <_free_r>
 80059e4:	e7c7      	b.n	8005976 <__ssputs_r+0x46>
	...

080059e8 <_svfiprintf_r>:
 80059e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ec:	4698      	mov	r8, r3
 80059ee:	898b      	ldrh	r3, [r1, #12]
 80059f0:	061b      	lsls	r3, r3, #24
 80059f2:	b09d      	sub	sp, #116	; 0x74
 80059f4:	4607      	mov	r7, r0
 80059f6:	460d      	mov	r5, r1
 80059f8:	4614      	mov	r4, r2
 80059fa:	d50e      	bpl.n	8005a1a <_svfiprintf_r+0x32>
 80059fc:	690b      	ldr	r3, [r1, #16]
 80059fe:	b963      	cbnz	r3, 8005a1a <_svfiprintf_r+0x32>
 8005a00:	2140      	movs	r1, #64	; 0x40
 8005a02:	f000 fafd 	bl	8006000 <_malloc_r>
 8005a06:	6028      	str	r0, [r5, #0]
 8005a08:	6128      	str	r0, [r5, #16]
 8005a0a:	b920      	cbnz	r0, 8005a16 <_svfiprintf_r+0x2e>
 8005a0c:	230c      	movs	r3, #12
 8005a0e:	603b      	str	r3, [r7, #0]
 8005a10:	f04f 30ff 	mov.w	r0, #4294967295
 8005a14:	e0d1      	b.n	8005bba <_svfiprintf_r+0x1d2>
 8005a16:	2340      	movs	r3, #64	; 0x40
 8005a18:	616b      	str	r3, [r5, #20]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a1e:	2320      	movs	r3, #32
 8005a20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a24:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a28:	2330      	movs	r3, #48	; 0x30
 8005a2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005bd4 <_svfiprintf_r+0x1ec>
 8005a2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a32:	f04f 0901 	mov.w	r9, #1
 8005a36:	4623      	mov	r3, r4
 8005a38:	469a      	mov	sl, r3
 8005a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a3e:	b10a      	cbz	r2, 8005a44 <_svfiprintf_r+0x5c>
 8005a40:	2a25      	cmp	r2, #37	; 0x25
 8005a42:	d1f9      	bne.n	8005a38 <_svfiprintf_r+0x50>
 8005a44:	ebba 0b04 	subs.w	fp, sl, r4
 8005a48:	d00b      	beq.n	8005a62 <_svfiprintf_r+0x7a>
 8005a4a:	465b      	mov	r3, fp
 8005a4c:	4622      	mov	r2, r4
 8005a4e:	4629      	mov	r1, r5
 8005a50:	4638      	mov	r0, r7
 8005a52:	f7ff ff6d 	bl	8005930 <__ssputs_r>
 8005a56:	3001      	adds	r0, #1
 8005a58:	f000 80aa 	beq.w	8005bb0 <_svfiprintf_r+0x1c8>
 8005a5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a5e:	445a      	add	r2, fp
 8005a60:	9209      	str	r2, [sp, #36]	; 0x24
 8005a62:	f89a 3000 	ldrb.w	r3, [sl]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 80a2 	beq.w	8005bb0 <_svfiprintf_r+0x1c8>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a76:	f10a 0a01 	add.w	sl, sl, #1
 8005a7a:	9304      	str	r3, [sp, #16]
 8005a7c:	9307      	str	r3, [sp, #28]
 8005a7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a82:	931a      	str	r3, [sp, #104]	; 0x68
 8005a84:	4654      	mov	r4, sl
 8005a86:	2205      	movs	r2, #5
 8005a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a8c:	4851      	ldr	r0, [pc, #324]	; (8005bd4 <_svfiprintf_r+0x1ec>)
 8005a8e:	f7fa fba7 	bl	80001e0 <memchr>
 8005a92:	9a04      	ldr	r2, [sp, #16]
 8005a94:	b9d8      	cbnz	r0, 8005ace <_svfiprintf_r+0xe6>
 8005a96:	06d0      	lsls	r0, r2, #27
 8005a98:	bf44      	itt	mi
 8005a9a:	2320      	movmi	r3, #32
 8005a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005aa0:	0711      	lsls	r1, r2, #28
 8005aa2:	bf44      	itt	mi
 8005aa4:	232b      	movmi	r3, #43	; 0x2b
 8005aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8005aae:	2b2a      	cmp	r3, #42	; 0x2a
 8005ab0:	d015      	beq.n	8005ade <_svfiprintf_r+0xf6>
 8005ab2:	9a07      	ldr	r2, [sp, #28]
 8005ab4:	4654      	mov	r4, sl
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	f04f 0c0a 	mov.w	ip, #10
 8005abc:	4621      	mov	r1, r4
 8005abe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ac2:	3b30      	subs	r3, #48	; 0x30
 8005ac4:	2b09      	cmp	r3, #9
 8005ac6:	d94e      	bls.n	8005b66 <_svfiprintf_r+0x17e>
 8005ac8:	b1b0      	cbz	r0, 8005af8 <_svfiprintf_r+0x110>
 8005aca:	9207      	str	r2, [sp, #28]
 8005acc:	e014      	b.n	8005af8 <_svfiprintf_r+0x110>
 8005ace:	eba0 0308 	sub.w	r3, r0, r8
 8005ad2:	fa09 f303 	lsl.w	r3, r9, r3
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	9304      	str	r3, [sp, #16]
 8005ada:	46a2      	mov	sl, r4
 8005adc:	e7d2      	b.n	8005a84 <_svfiprintf_r+0x9c>
 8005ade:	9b03      	ldr	r3, [sp, #12]
 8005ae0:	1d19      	adds	r1, r3, #4
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	9103      	str	r1, [sp, #12]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	bfbb      	ittet	lt
 8005aea:	425b      	neglt	r3, r3
 8005aec:	f042 0202 	orrlt.w	r2, r2, #2
 8005af0:	9307      	strge	r3, [sp, #28]
 8005af2:	9307      	strlt	r3, [sp, #28]
 8005af4:	bfb8      	it	lt
 8005af6:	9204      	strlt	r2, [sp, #16]
 8005af8:	7823      	ldrb	r3, [r4, #0]
 8005afa:	2b2e      	cmp	r3, #46	; 0x2e
 8005afc:	d10c      	bne.n	8005b18 <_svfiprintf_r+0x130>
 8005afe:	7863      	ldrb	r3, [r4, #1]
 8005b00:	2b2a      	cmp	r3, #42	; 0x2a
 8005b02:	d135      	bne.n	8005b70 <_svfiprintf_r+0x188>
 8005b04:	9b03      	ldr	r3, [sp, #12]
 8005b06:	1d1a      	adds	r2, r3, #4
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	9203      	str	r2, [sp, #12]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	bfb8      	it	lt
 8005b10:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b14:	3402      	adds	r4, #2
 8005b16:	9305      	str	r3, [sp, #20]
 8005b18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005be4 <_svfiprintf_r+0x1fc>
 8005b1c:	7821      	ldrb	r1, [r4, #0]
 8005b1e:	2203      	movs	r2, #3
 8005b20:	4650      	mov	r0, sl
 8005b22:	f7fa fb5d 	bl	80001e0 <memchr>
 8005b26:	b140      	cbz	r0, 8005b3a <_svfiprintf_r+0x152>
 8005b28:	2340      	movs	r3, #64	; 0x40
 8005b2a:	eba0 000a 	sub.w	r0, r0, sl
 8005b2e:	fa03 f000 	lsl.w	r0, r3, r0
 8005b32:	9b04      	ldr	r3, [sp, #16]
 8005b34:	4303      	orrs	r3, r0
 8005b36:	3401      	adds	r4, #1
 8005b38:	9304      	str	r3, [sp, #16]
 8005b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b3e:	4826      	ldr	r0, [pc, #152]	; (8005bd8 <_svfiprintf_r+0x1f0>)
 8005b40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b44:	2206      	movs	r2, #6
 8005b46:	f7fa fb4b 	bl	80001e0 <memchr>
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	d038      	beq.n	8005bc0 <_svfiprintf_r+0x1d8>
 8005b4e:	4b23      	ldr	r3, [pc, #140]	; (8005bdc <_svfiprintf_r+0x1f4>)
 8005b50:	bb1b      	cbnz	r3, 8005b9a <_svfiprintf_r+0x1b2>
 8005b52:	9b03      	ldr	r3, [sp, #12]
 8005b54:	3307      	adds	r3, #7
 8005b56:	f023 0307 	bic.w	r3, r3, #7
 8005b5a:	3308      	adds	r3, #8
 8005b5c:	9303      	str	r3, [sp, #12]
 8005b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b60:	4433      	add	r3, r6
 8005b62:	9309      	str	r3, [sp, #36]	; 0x24
 8005b64:	e767      	b.n	8005a36 <_svfiprintf_r+0x4e>
 8005b66:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	2001      	movs	r0, #1
 8005b6e:	e7a5      	b.n	8005abc <_svfiprintf_r+0xd4>
 8005b70:	2300      	movs	r3, #0
 8005b72:	3401      	adds	r4, #1
 8005b74:	9305      	str	r3, [sp, #20]
 8005b76:	4619      	mov	r1, r3
 8005b78:	f04f 0c0a 	mov.w	ip, #10
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b82:	3a30      	subs	r2, #48	; 0x30
 8005b84:	2a09      	cmp	r2, #9
 8005b86:	d903      	bls.n	8005b90 <_svfiprintf_r+0x1a8>
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0c5      	beq.n	8005b18 <_svfiprintf_r+0x130>
 8005b8c:	9105      	str	r1, [sp, #20]
 8005b8e:	e7c3      	b.n	8005b18 <_svfiprintf_r+0x130>
 8005b90:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b94:	4604      	mov	r4, r0
 8005b96:	2301      	movs	r3, #1
 8005b98:	e7f0      	b.n	8005b7c <_svfiprintf_r+0x194>
 8005b9a:	ab03      	add	r3, sp, #12
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	462a      	mov	r2, r5
 8005ba0:	4b0f      	ldr	r3, [pc, #60]	; (8005be0 <_svfiprintf_r+0x1f8>)
 8005ba2:	a904      	add	r1, sp, #16
 8005ba4:	4638      	mov	r0, r7
 8005ba6:	f3af 8000 	nop.w
 8005baa:	1c42      	adds	r2, r0, #1
 8005bac:	4606      	mov	r6, r0
 8005bae:	d1d6      	bne.n	8005b5e <_svfiprintf_r+0x176>
 8005bb0:	89ab      	ldrh	r3, [r5, #12]
 8005bb2:	065b      	lsls	r3, r3, #25
 8005bb4:	f53f af2c 	bmi.w	8005a10 <_svfiprintf_r+0x28>
 8005bb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bba:	b01d      	add	sp, #116	; 0x74
 8005bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc0:	ab03      	add	r3, sp, #12
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	462a      	mov	r2, r5
 8005bc6:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <_svfiprintf_r+0x1f8>)
 8005bc8:	a904      	add	r1, sp, #16
 8005bca:	4638      	mov	r0, r7
 8005bcc:	f000 f87a 	bl	8005cc4 <_printf_i>
 8005bd0:	e7eb      	b.n	8005baa <_svfiprintf_r+0x1c2>
 8005bd2:	bf00      	nop
 8005bd4:	08006894 	.word	0x08006894
 8005bd8:	0800689e 	.word	0x0800689e
 8005bdc:	00000000 	.word	0x00000000
 8005be0:	08005931 	.word	0x08005931
 8005be4:	0800689a 	.word	0x0800689a

08005be8 <_printf_common>:
 8005be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bec:	4616      	mov	r6, r2
 8005bee:	4699      	mov	r9, r3
 8005bf0:	688a      	ldr	r2, [r1, #8]
 8005bf2:	690b      	ldr	r3, [r1, #16]
 8005bf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	bfb8      	it	lt
 8005bfc:	4613      	movlt	r3, r2
 8005bfe:	6033      	str	r3, [r6, #0]
 8005c00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c04:	4607      	mov	r7, r0
 8005c06:	460c      	mov	r4, r1
 8005c08:	b10a      	cbz	r2, 8005c0e <_printf_common+0x26>
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	6033      	str	r3, [r6, #0]
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	0699      	lsls	r1, r3, #26
 8005c12:	bf42      	ittt	mi
 8005c14:	6833      	ldrmi	r3, [r6, #0]
 8005c16:	3302      	addmi	r3, #2
 8005c18:	6033      	strmi	r3, [r6, #0]
 8005c1a:	6825      	ldr	r5, [r4, #0]
 8005c1c:	f015 0506 	ands.w	r5, r5, #6
 8005c20:	d106      	bne.n	8005c30 <_printf_common+0x48>
 8005c22:	f104 0a19 	add.w	sl, r4, #25
 8005c26:	68e3      	ldr	r3, [r4, #12]
 8005c28:	6832      	ldr	r2, [r6, #0]
 8005c2a:	1a9b      	subs	r3, r3, r2
 8005c2c:	42ab      	cmp	r3, r5
 8005c2e:	dc26      	bgt.n	8005c7e <_printf_common+0x96>
 8005c30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c34:	1e13      	subs	r3, r2, #0
 8005c36:	6822      	ldr	r2, [r4, #0]
 8005c38:	bf18      	it	ne
 8005c3a:	2301      	movne	r3, #1
 8005c3c:	0692      	lsls	r2, r2, #26
 8005c3e:	d42b      	bmi.n	8005c98 <_printf_common+0xb0>
 8005c40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c44:	4649      	mov	r1, r9
 8005c46:	4638      	mov	r0, r7
 8005c48:	47c0      	blx	r8
 8005c4a:	3001      	adds	r0, #1
 8005c4c:	d01e      	beq.n	8005c8c <_printf_common+0xa4>
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	68e5      	ldr	r5, [r4, #12]
 8005c52:	6832      	ldr	r2, [r6, #0]
 8005c54:	f003 0306 	and.w	r3, r3, #6
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	bf08      	it	eq
 8005c5c:	1aad      	subeq	r5, r5, r2
 8005c5e:	68a3      	ldr	r3, [r4, #8]
 8005c60:	6922      	ldr	r2, [r4, #16]
 8005c62:	bf0c      	ite	eq
 8005c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c68:	2500      	movne	r5, #0
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	bfc4      	itt	gt
 8005c6e:	1a9b      	subgt	r3, r3, r2
 8005c70:	18ed      	addgt	r5, r5, r3
 8005c72:	2600      	movs	r6, #0
 8005c74:	341a      	adds	r4, #26
 8005c76:	42b5      	cmp	r5, r6
 8005c78:	d11a      	bne.n	8005cb0 <_printf_common+0xc8>
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	e008      	b.n	8005c90 <_printf_common+0xa8>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	4652      	mov	r2, sl
 8005c82:	4649      	mov	r1, r9
 8005c84:	4638      	mov	r0, r7
 8005c86:	47c0      	blx	r8
 8005c88:	3001      	adds	r0, #1
 8005c8a:	d103      	bne.n	8005c94 <_printf_common+0xac>
 8005c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c94:	3501      	adds	r5, #1
 8005c96:	e7c6      	b.n	8005c26 <_printf_common+0x3e>
 8005c98:	18e1      	adds	r1, r4, r3
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	2030      	movs	r0, #48	; 0x30
 8005c9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ca2:	4422      	add	r2, r4
 8005ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ca8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cac:	3302      	adds	r3, #2
 8005cae:	e7c7      	b.n	8005c40 <_printf_common+0x58>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	4622      	mov	r2, r4
 8005cb4:	4649      	mov	r1, r9
 8005cb6:	4638      	mov	r0, r7
 8005cb8:	47c0      	blx	r8
 8005cba:	3001      	adds	r0, #1
 8005cbc:	d0e6      	beq.n	8005c8c <_printf_common+0xa4>
 8005cbe:	3601      	adds	r6, #1
 8005cc0:	e7d9      	b.n	8005c76 <_printf_common+0x8e>
	...

08005cc4 <_printf_i>:
 8005cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc8:	460c      	mov	r4, r1
 8005cca:	4691      	mov	r9, r2
 8005ccc:	7e27      	ldrb	r7, [r4, #24]
 8005cce:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005cd0:	2f78      	cmp	r7, #120	; 0x78
 8005cd2:	4680      	mov	r8, r0
 8005cd4:	469a      	mov	sl, r3
 8005cd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cda:	d807      	bhi.n	8005cec <_printf_i+0x28>
 8005cdc:	2f62      	cmp	r7, #98	; 0x62
 8005cde:	d80a      	bhi.n	8005cf6 <_printf_i+0x32>
 8005ce0:	2f00      	cmp	r7, #0
 8005ce2:	f000 80d8 	beq.w	8005e96 <_printf_i+0x1d2>
 8005ce6:	2f58      	cmp	r7, #88	; 0x58
 8005ce8:	f000 80a3 	beq.w	8005e32 <_printf_i+0x16e>
 8005cec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005cf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cf4:	e03a      	b.n	8005d6c <_printf_i+0xa8>
 8005cf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cfa:	2b15      	cmp	r3, #21
 8005cfc:	d8f6      	bhi.n	8005cec <_printf_i+0x28>
 8005cfe:	a001      	add	r0, pc, #4	; (adr r0, 8005d04 <_printf_i+0x40>)
 8005d00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005d04:	08005d5d 	.word	0x08005d5d
 8005d08:	08005d71 	.word	0x08005d71
 8005d0c:	08005ced 	.word	0x08005ced
 8005d10:	08005ced 	.word	0x08005ced
 8005d14:	08005ced 	.word	0x08005ced
 8005d18:	08005ced 	.word	0x08005ced
 8005d1c:	08005d71 	.word	0x08005d71
 8005d20:	08005ced 	.word	0x08005ced
 8005d24:	08005ced 	.word	0x08005ced
 8005d28:	08005ced 	.word	0x08005ced
 8005d2c:	08005ced 	.word	0x08005ced
 8005d30:	08005e7d 	.word	0x08005e7d
 8005d34:	08005da1 	.word	0x08005da1
 8005d38:	08005e5f 	.word	0x08005e5f
 8005d3c:	08005ced 	.word	0x08005ced
 8005d40:	08005ced 	.word	0x08005ced
 8005d44:	08005e9f 	.word	0x08005e9f
 8005d48:	08005ced 	.word	0x08005ced
 8005d4c:	08005da1 	.word	0x08005da1
 8005d50:	08005ced 	.word	0x08005ced
 8005d54:	08005ced 	.word	0x08005ced
 8005d58:	08005e67 	.word	0x08005e67
 8005d5c:	680b      	ldr	r3, [r1, #0]
 8005d5e:	1d1a      	adds	r2, r3, #4
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	600a      	str	r2, [r1, #0]
 8005d64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e0a3      	b.n	8005eb8 <_printf_i+0x1f4>
 8005d70:	6825      	ldr	r5, [r4, #0]
 8005d72:	6808      	ldr	r0, [r1, #0]
 8005d74:	062e      	lsls	r6, r5, #24
 8005d76:	f100 0304 	add.w	r3, r0, #4
 8005d7a:	d50a      	bpl.n	8005d92 <_printf_i+0xce>
 8005d7c:	6805      	ldr	r5, [r0, #0]
 8005d7e:	600b      	str	r3, [r1, #0]
 8005d80:	2d00      	cmp	r5, #0
 8005d82:	da03      	bge.n	8005d8c <_printf_i+0xc8>
 8005d84:	232d      	movs	r3, #45	; 0x2d
 8005d86:	426d      	negs	r5, r5
 8005d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d8c:	485e      	ldr	r0, [pc, #376]	; (8005f08 <_printf_i+0x244>)
 8005d8e:	230a      	movs	r3, #10
 8005d90:	e019      	b.n	8005dc6 <_printf_i+0x102>
 8005d92:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005d96:	6805      	ldr	r5, [r0, #0]
 8005d98:	600b      	str	r3, [r1, #0]
 8005d9a:	bf18      	it	ne
 8005d9c:	b22d      	sxthne	r5, r5
 8005d9e:	e7ef      	b.n	8005d80 <_printf_i+0xbc>
 8005da0:	680b      	ldr	r3, [r1, #0]
 8005da2:	6825      	ldr	r5, [r4, #0]
 8005da4:	1d18      	adds	r0, r3, #4
 8005da6:	6008      	str	r0, [r1, #0]
 8005da8:	0628      	lsls	r0, r5, #24
 8005daa:	d501      	bpl.n	8005db0 <_printf_i+0xec>
 8005dac:	681d      	ldr	r5, [r3, #0]
 8005dae:	e002      	b.n	8005db6 <_printf_i+0xf2>
 8005db0:	0669      	lsls	r1, r5, #25
 8005db2:	d5fb      	bpl.n	8005dac <_printf_i+0xe8>
 8005db4:	881d      	ldrh	r5, [r3, #0]
 8005db6:	4854      	ldr	r0, [pc, #336]	; (8005f08 <_printf_i+0x244>)
 8005db8:	2f6f      	cmp	r7, #111	; 0x6f
 8005dba:	bf0c      	ite	eq
 8005dbc:	2308      	moveq	r3, #8
 8005dbe:	230a      	movne	r3, #10
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dc6:	6866      	ldr	r6, [r4, #4]
 8005dc8:	60a6      	str	r6, [r4, #8]
 8005dca:	2e00      	cmp	r6, #0
 8005dcc:	bfa2      	ittt	ge
 8005dce:	6821      	ldrge	r1, [r4, #0]
 8005dd0:	f021 0104 	bicge.w	r1, r1, #4
 8005dd4:	6021      	strge	r1, [r4, #0]
 8005dd6:	b90d      	cbnz	r5, 8005ddc <_printf_i+0x118>
 8005dd8:	2e00      	cmp	r6, #0
 8005dda:	d04d      	beq.n	8005e78 <_printf_i+0x1b4>
 8005ddc:	4616      	mov	r6, r2
 8005dde:	fbb5 f1f3 	udiv	r1, r5, r3
 8005de2:	fb03 5711 	mls	r7, r3, r1, r5
 8005de6:	5dc7      	ldrb	r7, [r0, r7]
 8005de8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005dec:	462f      	mov	r7, r5
 8005dee:	42bb      	cmp	r3, r7
 8005df0:	460d      	mov	r5, r1
 8005df2:	d9f4      	bls.n	8005dde <_printf_i+0x11a>
 8005df4:	2b08      	cmp	r3, #8
 8005df6:	d10b      	bne.n	8005e10 <_printf_i+0x14c>
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	07df      	lsls	r7, r3, #31
 8005dfc:	d508      	bpl.n	8005e10 <_printf_i+0x14c>
 8005dfe:	6923      	ldr	r3, [r4, #16]
 8005e00:	6861      	ldr	r1, [r4, #4]
 8005e02:	4299      	cmp	r1, r3
 8005e04:	bfde      	ittt	le
 8005e06:	2330      	movle	r3, #48	; 0x30
 8005e08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e10:	1b92      	subs	r2, r2, r6
 8005e12:	6122      	str	r2, [r4, #16]
 8005e14:	f8cd a000 	str.w	sl, [sp]
 8005e18:	464b      	mov	r3, r9
 8005e1a:	aa03      	add	r2, sp, #12
 8005e1c:	4621      	mov	r1, r4
 8005e1e:	4640      	mov	r0, r8
 8005e20:	f7ff fee2 	bl	8005be8 <_printf_common>
 8005e24:	3001      	adds	r0, #1
 8005e26:	d14c      	bne.n	8005ec2 <_printf_i+0x1fe>
 8005e28:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2c:	b004      	add	sp, #16
 8005e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e32:	4835      	ldr	r0, [pc, #212]	; (8005f08 <_printf_i+0x244>)
 8005e34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	680e      	ldr	r6, [r1, #0]
 8005e3c:	061f      	lsls	r7, r3, #24
 8005e3e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005e42:	600e      	str	r6, [r1, #0]
 8005e44:	d514      	bpl.n	8005e70 <_printf_i+0x1ac>
 8005e46:	07d9      	lsls	r1, r3, #31
 8005e48:	bf44      	itt	mi
 8005e4a:	f043 0320 	orrmi.w	r3, r3, #32
 8005e4e:	6023      	strmi	r3, [r4, #0]
 8005e50:	b91d      	cbnz	r5, 8005e5a <_printf_i+0x196>
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	f023 0320 	bic.w	r3, r3, #32
 8005e58:	6023      	str	r3, [r4, #0]
 8005e5a:	2310      	movs	r3, #16
 8005e5c:	e7b0      	b.n	8005dc0 <_printf_i+0xfc>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	f043 0320 	orr.w	r3, r3, #32
 8005e64:	6023      	str	r3, [r4, #0]
 8005e66:	2378      	movs	r3, #120	; 0x78
 8005e68:	4828      	ldr	r0, [pc, #160]	; (8005f0c <_printf_i+0x248>)
 8005e6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e6e:	e7e3      	b.n	8005e38 <_printf_i+0x174>
 8005e70:	065e      	lsls	r6, r3, #25
 8005e72:	bf48      	it	mi
 8005e74:	b2ad      	uxthmi	r5, r5
 8005e76:	e7e6      	b.n	8005e46 <_printf_i+0x182>
 8005e78:	4616      	mov	r6, r2
 8005e7a:	e7bb      	b.n	8005df4 <_printf_i+0x130>
 8005e7c:	680b      	ldr	r3, [r1, #0]
 8005e7e:	6826      	ldr	r6, [r4, #0]
 8005e80:	6960      	ldr	r0, [r4, #20]
 8005e82:	1d1d      	adds	r5, r3, #4
 8005e84:	600d      	str	r5, [r1, #0]
 8005e86:	0635      	lsls	r5, r6, #24
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	d501      	bpl.n	8005e90 <_printf_i+0x1cc>
 8005e8c:	6018      	str	r0, [r3, #0]
 8005e8e:	e002      	b.n	8005e96 <_printf_i+0x1d2>
 8005e90:	0671      	lsls	r1, r6, #25
 8005e92:	d5fb      	bpl.n	8005e8c <_printf_i+0x1c8>
 8005e94:	8018      	strh	r0, [r3, #0]
 8005e96:	2300      	movs	r3, #0
 8005e98:	6123      	str	r3, [r4, #16]
 8005e9a:	4616      	mov	r6, r2
 8005e9c:	e7ba      	b.n	8005e14 <_printf_i+0x150>
 8005e9e:	680b      	ldr	r3, [r1, #0]
 8005ea0:	1d1a      	adds	r2, r3, #4
 8005ea2:	600a      	str	r2, [r1, #0]
 8005ea4:	681e      	ldr	r6, [r3, #0]
 8005ea6:	6862      	ldr	r2, [r4, #4]
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	4630      	mov	r0, r6
 8005eac:	f7fa f998 	bl	80001e0 <memchr>
 8005eb0:	b108      	cbz	r0, 8005eb6 <_printf_i+0x1f2>
 8005eb2:	1b80      	subs	r0, r0, r6
 8005eb4:	6060      	str	r0, [r4, #4]
 8005eb6:	6863      	ldr	r3, [r4, #4]
 8005eb8:	6123      	str	r3, [r4, #16]
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ec0:	e7a8      	b.n	8005e14 <_printf_i+0x150>
 8005ec2:	6923      	ldr	r3, [r4, #16]
 8005ec4:	4632      	mov	r2, r6
 8005ec6:	4649      	mov	r1, r9
 8005ec8:	4640      	mov	r0, r8
 8005eca:	47d0      	blx	sl
 8005ecc:	3001      	adds	r0, #1
 8005ece:	d0ab      	beq.n	8005e28 <_printf_i+0x164>
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	079b      	lsls	r3, r3, #30
 8005ed4:	d413      	bmi.n	8005efe <_printf_i+0x23a>
 8005ed6:	68e0      	ldr	r0, [r4, #12]
 8005ed8:	9b03      	ldr	r3, [sp, #12]
 8005eda:	4298      	cmp	r0, r3
 8005edc:	bfb8      	it	lt
 8005ede:	4618      	movlt	r0, r3
 8005ee0:	e7a4      	b.n	8005e2c <_printf_i+0x168>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	4632      	mov	r2, r6
 8005ee6:	4649      	mov	r1, r9
 8005ee8:	4640      	mov	r0, r8
 8005eea:	47d0      	blx	sl
 8005eec:	3001      	adds	r0, #1
 8005eee:	d09b      	beq.n	8005e28 <_printf_i+0x164>
 8005ef0:	3501      	adds	r5, #1
 8005ef2:	68e3      	ldr	r3, [r4, #12]
 8005ef4:	9903      	ldr	r1, [sp, #12]
 8005ef6:	1a5b      	subs	r3, r3, r1
 8005ef8:	42ab      	cmp	r3, r5
 8005efa:	dcf2      	bgt.n	8005ee2 <_printf_i+0x21e>
 8005efc:	e7eb      	b.n	8005ed6 <_printf_i+0x212>
 8005efe:	2500      	movs	r5, #0
 8005f00:	f104 0619 	add.w	r6, r4, #25
 8005f04:	e7f5      	b.n	8005ef2 <_printf_i+0x22e>
 8005f06:	bf00      	nop
 8005f08:	080068a5 	.word	0x080068a5
 8005f0c:	080068b6 	.word	0x080068b6

08005f10 <memcpy>:
 8005f10:	440a      	add	r2, r1
 8005f12:	4291      	cmp	r1, r2
 8005f14:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f18:	d100      	bne.n	8005f1c <memcpy+0xc>
 8005f1a:	4770      	bx	lr
 8005f1c:	b510      	push	{r4, lr}
 8005f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f26:	4291      	cmp	r1, r2
 8005f28:	d1f9      	bne.n	8005f1e <memcpy+0xe>
 8005f2a:	bd10      	pop	{r4, pc}

08005f2c <memmove>:
 8005f2c:	4288      	cmp	r0, r1
 8005f2e:	b510      	push	{r4, lr}
 8005f30:	eb01 0402 	add.w	r4, r1, r2
 8005f34:	d902      	bls.n	8005f3c <memmove+0x10>
 8005f36:	4284      	cmp	r4, r0
 8005f38:	4623      	mov	r3, r4
 8005f3a:	d807      	bhi.n	8005f4c <memmove+0x20>
 8005f3c:	1e43      	subs	r3, r0, #1
 8005f3e:	42a1      	cmp	r1, r4
 8005f40:	d008      	beq.n	8005f54 <memmove+0x28>
 8005f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f4a:	e7f8      	b.n	8005f3e <memmove+0x12>
 8005f4c:	4402      	add	r2, r0
 8005f4e:	4601      	mov	r1, r0
 8005f50:	428a      	cmp	r2, r1
 8005f52:	d100      	bne.n	8005f56 <memmove+0x2a>
 8005f54:	bd10      	pop	{r4, pc}
 8005f56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f5e:	e7f7      	b.n	8005f50 <memmove+0x24>

08005f60 <_free_r>:
 8005f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f62:	2900      	cmp	r1, #0
 8005f64:	d048      	beq.n	8005ff8 <_free_r+0x98>
 8005f66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f6a:	9001      	str	r0, [sp, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f1a1 0404 	sub.w	r4, r1, #4
 8005f72:	bfb8      	it	lt
 8005f74:	18e4      	addlt	r4, r4, r3
 8005f76:	f000 f8d3 	bl	8006120 <__malloc_lock>
 8005f7a:	4a20      	ldr	r2, [pc, #128]	; (8005ffc <_free_r+0x9c>)
 8005f7c:	9801      	ldr	r0, [sp, #4]
 8005f7e:	6813      	ldr	r3, [r2, #0]
 8005f80:	4615      	mov	r5, r2
 8005f82:	b933      	cbnz	r3, 8005f92 <_free_r+0x32>
 8005f84:	6063      	str	r3, [r4, #4]
 8005f86:	6014      	str	r4, [r2, #0]
 8005f88:	b003      	add	sp, #12
 8005f8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f8e:	f000 b8cd 	b.w	800612c <__malloc_unlock>
 8005f92:	42a3      	cmp	r3, r4
 8005f94:	d90b      	bls.n	8005fae <_free_r+0x4e>
 8005f96:	6821      	ldr	r1, [r4, #0]
 8005f98:	1862      	adds	r2, r4, r1
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	bf04      	itt	eq
 8005f9e:	681a      	ldreq	r2, [r3, #0]
 8005fa0:	685b      	ldreq	r3, [r3, #4]
 8005fa2:	6063      	str	r3, [r4, #4]
 8005fa4:	bf04      	itt	eq
 8005fa6:	1852      	addeq	r2, r2, r1
 8005fa8:	6022      	streq	r2, [r4, #0]
 8005faa:	602c      	str	r4, [r5, #0]
 8005fac:	e7ec      	b.n	8005f88 <_free_r+0x28>
 8005fae:	461a      	mov	r2, r3
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	b10b      	cbz	r3, 8005fb8 <_free_r+0x58>
 8005fb4:	42a3      	cmp	r3, r4
 8005fb6:	d9fa      	bls.n	8005fae <_free_r+0x4e>
 8005fb8:	6811      	ldr	r1, [r2, #0]
 8005fba:	1855      	adds	r5, r2, r1
 8005fbc:	42a5      	cmp	r5, r4
 8005fbe:	d10b      	bne.n	8005fd8 <_free_r+0x78>
 8005fc0:	6824      	ldr	r4, [r4, #0]
 8005fc2:	4421      	add	r1, r4
 8005fc4:	1854      	adds	r4, r2, r1
 8005fc6:	42a3      	cmp	r3, r4
 8005fc8:	6011      	str	r1, [r2, #0]
 8005fca:	d1dd      	bne.n	8005f88 <_free_r+0x28>
 8005fcc:	681c      	ldr	r4, [r3, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	6053      	str	r3, [r2, #4]
 8005fd2:	4421      	add	r1, r4
 8005fd4:	6011      	str	r1, [r2, #0]
 8005fd6:	e7d7      	b.n	8005f88 <_free_r+0x28>
 8005fd8:	d902      	bls.n	8005fe0 <_free_r+0x80>
 8005fda:	230c      	movs	r3, #12
 8005fdc:	6003      	str	r3, [r0, #0]
 8005fde:	e7d3      	b.n	8005f88 <_free_r+0x28>
 8005fe0:	6825      	ldr	r5, [r4, #0]
 8005fe2:	1961      	adds	r1, r4, r5
 8005fe4:	428b      	cmp	r3, r1
 8005fe6:	bf04      	itt	eq
 8005fe8:	6819      	ldreq	r1, [r3, #0]
 8005fea:	685b      	ldreq	r3, [r3, #4]
 8005fec:	6063      	str	r3, [r4, #4]
 8005fee:	bf04      	itt	eq
 8005ff0:	1949      	addeq	r1, r1, r5
 8005ff2:	6021      	streq	r1, [r4, #0]
 8005ff4:	6054      	str	r4, [r2, #4]
 8005ff6:	e7c7      	b.n	8005f88 <_free_r+0x28>
 8005ff8:	b003      	add	sp, #12
 8005ffa:	bd30      	pop	{r4, r5, pc}
 8005ffc:	200008cc 	.word	0x200008cc

08006000 <_malloc_r>:
 8006000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006002:	1ccd      	adds	r5, r1, #3
 8006004:	f025 0503 	bic.w	r5, r5, #3
 8006008:	3508      	adds	r5, #8
 800600a:	2d0c      	cmp	r5, #12
 800600c:	bf38      	it	cc
 800600e:	250c      	movcc	r5, #12
 8006010:	2d00      	cmp	r5, #0
 8006012:	4606      	mov	r6, r0
 8006014:	db01      	blt.n	800601a <_malloc_r+0x1a>
 8006016:	42a9      	cmp	r1, r5
 8006018:	d903      	bls.n	8006022 <_malloc_r+0x22>
 800601a:	230c      	movs	r3, #12
 800601c:	6033      	str	r3, [r6, #0]
 800601e:	2000      	movs	r0, #0
 8006020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006022:	f000 f87d 	bl	8006120 <__malloc_lock>
 8006026:	4921      	ldr	r1, [pc, #132]	; (80060ac <_malloc_r+0xac>)
 8006028:	680a      	ldr	r2, [r1, #0]
 800602a:	4614      	mov	r4, r2
 800602c:	b99c      	cbnz	r4, 8006056 <_malloc_r+0x56>
 800602e:	4f20      	ldr	r7, [pc, #128]	; (80060b0 <_malloc_r+0xb0>)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	b923      	cbnz	r3, 800603e <_malloc_r+0x3e>
 8006034:	4621      	mov	r1, r4
 8006036:	4630      	mov	r0, r6
 8006038:	f000 f862 	bl	8006100 <_sbrk_r>
 800603c:	6038      	str	r0, [r7, #0]
 800603e:	4629      	mov	r1, r5
 8006040:	4630      	mov	r0, r6
 8006042:	f000 f85d 	bl	8006100 <_sbrk_r>
 8006046:	1c43      	adds	r3, r0, #1
 8006048:	d123      	bne.n	8006092 <_malloc_r+0x92>
 800604a:	230c      	movs	r3, #12
 800604c:	6033      	str	r3, [r6, #0]
 800604e:	4630      	mov	r0, r6
 8006050:	f000 f86c 	bl	800612c <__malloc_unlock>
 8006054:	e7e3      	b.n	800601e <_malloc_r+0x1e>
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	1b5b      	subs	r3, r3, r5
 800605a:	d417      	bmi.n	800608c <_malloc_r+0x8c>
 800605c:	2b0b      	cmp	r3, #11
 800605e:	d903      	bls.n	8006068 <_malloc_r+0x68>
 8006060:	6023      	str	r3, [r4, #0]
 8006062:	441c      	add	r4, r3
 8006064:	6025      	str	r5, [r4, #0]
 8006066:	e004      	b.n	8006072 <_malloc_r+0x72>
 8006068:	6863      	ldr	r3, [r4, #4]
 800606a:	42a2      	cmp	r2, r4
 800606c:	bf0c      	ite	eq
 800606e:	600b      	streq	r3, [r1, #0]
 8006070:	6053      	strne	r3, [r2, #4]
 8006072:	4630      	mov	r0, r6
 8006074:	f000 f85a 	bl	800612c <__malloc_unlock>
 8006078:	f104 000b 	add.w	r0, r4, #11
 800607c:	1d23      	adds	r3, r4, #4
 800607e:	f020 0007 	bic.w	r0, r0, #7
 8006082:	1ac2      	subs	r2, r0, r3
 8006084:	d0cc      	beq.n	8006020 <_malloc_r+0x20>
 8006086:	1a1b      	subs	r3, r3, r0
 8006088:	50a3      	str	r3, [r4, r2]
 800608a:	e7c9      	b.n	8006020 <_malloc_r+0x20>
 800608c:	4622      	mov	r2, r4
 800608e:	6864      	ldr	r4, [r4, #4]
 8006090:	e7cc      	b.n	800602c <_malloc_r+0x2c>
 8006092:	1cc4      	adds	r4, r0, #3
 8006094:	f024 0403 	bic.w	r4, r4, #3
 8006098:	42a0      	cmp	r0, r4
 800609a:	d0e3      	beq.n	8006064 <_malloc_r+0x64>
 800609c:	1a21      	subs	r1, r4, r0
 800609e:	4630      	mov	r0, r6
 80060a0:	f000 f82e 	bl	8006100 <_sbrk_r>
 80060a4:	3001      	adds	r0, #1
 80060a6:	d1dd      	bne.n	8006064 <_malloc_r+0x64>
 80060a8:	e7cf      	b.n	800604a <_malloc_r+0x4a>
 80060aa:	bf00      	nop
 80060ac:	200008cc 	.word	0x200008cc
 80060b0:	200008d0 	.word	0x200008d0

080060b4 <_realloc_r>:
 80060b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b6:	4607      	mov	r7, r0
 80060b8:	4614      	mov	r4, r2
 80060ba:	460e      	mov	r6, r1
 80060bc:	b921      	cbnz	r1, 80060c8 <_realloc_r+0x14>
 80060be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80060c2:	4611      	mov	r1, r2
 80060c4:	f7ff bf9c 	b.w	8006000 <_malloc_r>
 80060c8:	b922      	cbnz	r2, 80060d4 <_realloc_r+0x20>
 80060ca:	f7ff ff49 	bl	8005f60 <_free_r>
 80060ce:	4625      	mov	r5, r4
 80060d0:	4628      	mov	r0, r5
 80060d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060d4:	f000 f830 	bl	8006138 <_malloc_usable_size_r>
 80060d8:	42a0      	cmp	r0, r4
 80060da:	d20f      	bcs.n	80060fc <_realloc_r+0x48>
 80060dc:	4621      	mov	r1, r4
 80060de:	4638      	mov	r0, r7
 80060e0:	f7ff ff8e 	bl	8006000 <_malloc_r>
 80060e4:	4605      	mov	r5, r0
 80060e6:	2800      	cmp	r0, #0
 80060e8:	d0f2      	beq.n	80060d0 <_realloc_r+0x1c>
 80060ea:	4631      	mov	r1, r6
 80060ec:	4622      	mov	r2, r4
 80060ee:	f7ff ff0f 	bl	8005f10 <memcpy>
 80060f2:	4631      	mov	r1, r6
 80060f4:	4638      	mov	r0, r7
 80060f6:	f7ff ff33 	bl	8005f60 <_free_r>
 80060fa:	e7e9      	b.n	80060d0 <_realloc_r+0x1c>
 80060fc:	4635      	mov	r5, r6
 80060fe:	e7e7      	b.n	80060d0 <_realloc_r+0x1c>

08006100 <_sbrk_r>:
 8006100:	b538      	push	{r3, r4, r5, lr}
 8006102:	4d06      	ldr	r5, [pc, #24]	; (800611c <_sbrk_r+0x1c>)
 8006104:	2300      	movs	r3, #0
 8006106:	4604      	mov	r4, r0
 8006108:	4608      	mov	r0, r1
 800610a:	602b      	str	r3, [r5, #0]
 800610c:	f7fc fbd6 	bl	80028bc <_sbrk>
 8006110:	1c43      	adds	r3, r0, #1
 8006112:	d102      	bne.n	800611a <_sbrk_r+0x1a>
 8006114:	682b      	ldr	r3, [r5, #0]
 8006116:	b103      	cbz	r3, 800611a <_sbrk_r+0x1a>
 8006118:	6023      	str	r3, [r4, #0]
 800611a:	bd38      	pop	{r3, r4, r5, pc}
 800611c:	20000c24 	.word	0x20000c24

08006120 <__malloc_lock>:
 8006120:	4801      	ldr	r0, [pc, #4]	; (8006128 <__malloc_lock+0x8>)
 8006122:	f000 b811 	b.w	8006148 <__retarget_lock_acquire_recursive>
 8006126:	bf00      	nop
 8006128:	20000c2c 	.word	0x20000c2c

0800612c <__malloc_unlock>:
 800612c:	4801      	ldr	r0, [pc, #4]	; (8006134 <__malloc_unlock+0x8>)
 800612e:	f000 b80c 	b.w	800614a <__retarget_lock_release_recursive>
 8006132:	bf00      	nop
 8006134:	20000c2c 	.word	0x20000c2c

08006138 <_malloc_usable_size_r>:
 8006138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800613c:	1f18      	subs	r0, r3, #4
 800613e:	2b00      	cmp	r3, #0
 8006140:	bfbc      	itt	lt
 8006142:	580b      	ldrlt	r3, [r1, r0]
 8006144:	18c0      	addlt	r0, r0, r3
 8006146:	4770      	bx	lr

08006148 <__retarget_lock_acquire_recursive>:
 8006148:	4770      	bx	lr

0800614a <__retarget_lock_release_recursive>:
 800614a:	4770      	bx	lr

0800614c <_init>:
 800614c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614e:	bf00      	nop
 8006150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006152:	bc08      	pop	{r3}
 8006154:	469e      	mov	lr, r3
 8006156:	4770      	bx	lr

08006158 <_fini>:
 8006158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615a:	bf00      	nop
 800615c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800615e:	bc08      	pop	{r3}
 8006160:	469e      	mov	lr, r3
 8006162:	4770      	bx	lr
