
HomeArt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008600  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000890  08008790  08008790  00018790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009020  08009020  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009020  08009020  00019020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009028  08009028  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009028  08009028  00019028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800902c  0800902c  0001902c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000e3c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000eac  20000eac  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c884  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036bf  00000000  00000000  0003c924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001250  00000000  00000000  0003ffe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001150  00000000  00000000  00041238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f1b  00000000  00000000  00042388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a4cd  00000000  00000000  000672a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db49a  00000000  00000000  00081770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015cc0a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fd4  00000000  00000000  0015cc60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008778 	.word	0x08008778

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008778 	.word	0x08008778

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <playBell>:
#include "ESP8266_HAL.h"

extern TIM_HandleTypeDef htim4;


void playBell(){
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0

	uint8_t tone;

	tone = 25;
 800057e:	2319      	movs	r3, #25
 8000580:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	005a      	lsls	r2, r3, #1
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <playBell+0x68>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	62da      	str	r2, [r3, #44]	; 0x2c
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	461a      	mov	r2, r3
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <playBell+0x68>)
 8000594:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 8000596:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <playBell+0x68>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	79fa      	ldrb	r2, [r7, #7]
 800059c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(300);
 800059e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005a2:	f004 f80b 	bl	80045bc <HAL_Delay>

	tone = 40;
 80005a6:	2328      	movs	r3, #40	; 0x28
 80005a8:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	005a      	lsls	r2, r3, #1
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <playBell+0x68>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <playBell+0x68>)
 80005bc:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <playBell+0x68>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	79fa      	ldrb	r2, [r7, #7]
 80005c4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 80005c6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80005ca:	f003 fff7 	bl	80045bc <HAL_Delay>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80005ce:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <playBell+0x68>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2200      	movs	r2, #0
 80005d4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000a98 	.word	0x20000a98

080005e4 <playAlarm>:


void playAlarm(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0

	uint8_t tone;

	for(tone = 40; tone >= 10; tone = tone-10){
 80005ea:	2328      	movs	r3, #40	; 0x28
 80005ec:	71fb      	strb	r3, [r7, #7]
 80005ee:	e014      	b.n	800061a <playAlarm+0x36>
		__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	005a      	lsls	r2, r3, #1
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <playAlarm+0x5c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	461a      	mov	r2, r3
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <playAlarm+0x5c>)
 8000602:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 8000604:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <playAlarm+0x5c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	79fa      	ldrb	r2, [r7, #7]
 800060a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(300);
 800060c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000610:	f003 ffd4 	bl	80045bc <HAL_Delay>
	for(tone = 40; tone >= 10; tone = tone-10){
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	3b0a      	subs	r3, #10
 8000618:	71fb      	strb	r3, [r7, #7]
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b09      	cmp	r3, #9
 800061e:	d8e7      	bhi.n	80005f0 <playAlarm+0xc>
	}

	__HAL_TIM_SET_AUTORELOAD(&htim4, 80);
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <playAlarm+0x5c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2250      	movs	r2, #80	; 0x50
 8000626:	62da      	str	r2, [r3, #44]	; 0x2c
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <playAlarm+0x5c>)
 800062a:	2250      	movs	r2, #80	; 0x50
 800062c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 40);
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <playAlarm+0x5c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2228      	movs	r2, #40	; 0x28
 8000634:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000a98 	.word	0x20000a98

08000644 <ESP_clearBuffer>:
char *Terminate = "</body></html>";


/*****************************************************************************************************************************************/

void ESP_clearBuffer(void){
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0

	memset(buffer_app, 0, 60);
 8000648:	223c      	movs	r2, #60	; 0x3c
 800064a:	2100      	movs	r1, #0
 800064c:	4803      	ldr	r0, [pc, #12]	; (800065c <ESP_clearBuffer+0x18>)
 800064e:	f007 fc5d 	bl	8007f0c <memset>
	buffer_index = 0;
 8000652:	4b03      	ldr	r3, [pc, #12]	; (8000660 <ESP_clearBuffer+0x1c>)
 8000654:	2200      	movs	r2, #0
 8000656:	801a      	strh	r2, [r3, #0]
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000978 	.word	0x20000978
 8000660:	20000a3e 	.word	0x20000a3e

08000664 <ESP_Init>:


void ESP_Init(char *SSID, char *PASSWD){
 8000664:	b580      	push	{r7, lr}
 8000666:	b09a      	sub	sp, #104	; 0x68
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]

	ESP_clearBuffer();
 800066e:	f7ff ffe9 	bl	8000644 <ESP_clearBuffer>
	char data[80];

	ringInit();
 8000672:	f001 fc05 	bl	8001e80 <ringInit>

	HAL_Delay(1000);
 8000676:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800067a:	f003 ff9f 	bl	80045bc <HAL_Delay>

	/********** AT **********/

	UART_send("AT\r\n", WiFi_UART);
 800067e:	4974      	ldr	r1, [pc, #464]	; (8000850 <ESP_Init+0x1ec>)
 8000680:	4874      	ldr	r0, [pc, #464]	; (8000854 <ESP_Init+0x1f0>)
 8000682:	f001 fdbb 	bl	80021fc <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 8000686:	bf00      	nop
 8000688:	4971      	ldr	r1, [pc, #452]	; (8000850 <ESP_Init+0x1ec>)
 800068a:	4873      	ldr	r0, [pc, #460]	; (8000858 <ESP_Init+0x1f4>)
 800068c:	f001 fe4c 	bl	8002328 <UART_waitFor>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0f8      	beq.n	8000688 <ESP_Init+0x24>
	UART_send("\nAT  ---->  OK\n", PC_UART);
 8000696:	4971      	ldr	r1, [pc, #452]	; (800085c <ESP_Init+0x1f8>)
 8000698:	4871      	ldr	r0, [pc, #452]	; (8000860 <ESP_Init+0x1fc>)
 800069a:	f001 fdaf 	bl	80021fc <UART_send>


	HAL_Delay(2000);
 800069e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006a2:	f003 ff8b 	bl	80045bc <HAL_Delay>


	/********** AT+RST **********/
	UART_send("AT+RST\r\n", WiFi_UART);
 80006a6:	496a      	ldr	r1, [pc, #424]	; (8000850 <ESP_Init+0x1ec>)
 80006a8:	486e      	ldr	r0, [pc, #440]	; (8000864 <ESP_Init+0x200>)
 80006aa:	f001 fda7 	bl	80021fc <UART_send>
	UART_send("\nResetting ", PC_UART);
 80006ae:	496b      	ldr	r1, [pc, #428]	; (800085c <ESP_Init+0x1f8>)
 80006b0:	486d      	ldr	r0, [pc, #436]	; (8000868 <ESP_Init+0x204>)
 80006b2:	f001 fda3 	bl	80021fc <UART_send>

	for (int i=0; i<3; i++)
 80006b6:	2300      	movs	r3, #0
 80006b8:	667b      	str	r3, [r7, #100]	; 0x64
 80006ba:	e00a      	b.n	80006d2 <ESP_Init+0x6e>
	{
		UART_send(" . ", PC_UART);
 80006bc:	4967      	ldr	r1, [pc, #412]	; (800085c <ESP_Init+0x1f8>)
 80006be:	486b      	ldr	r0, [pc, #428]	; (800086c <ESP_Init+0x208>)
 80006c0:	f001 fd9c 	bl	80021fc <UART_send>
		HAL_Delay(1500);
 80006c4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80006c8:	f003 ff78 	bl	80045bc <HAL_Delay>
	for (int i=0; i<3; i++)
 80006cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006ce:	3301      	adds	r3, #1
 80006d0:	667b      	str	r3, [r7, #100]	; 0x64
 80006d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	ddf1      	ble.n	80006bc <ESP_Init+0x58>
	}


	/********** AT **********/
	UART_send("AT\r\n", WiFi_UART);
 80006d8:	495d      	ldr	r1, [pc, #372]	; (8000850 <ESP_Init+0x1ec>)
 80006da:	485e      	ldr	r0, [pc, #376]	; (8000854 <ESP_Init+0x1f0>)
 80006dc:	f001 fd8e 	bl	80021fc <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 80006e0:	bf00      	nop
 80006e2:	495b      	ldr	r1, [pc, #364]	; (8000850 <ESP_Init+0x1ec>)
 80006e4:	485c      	ldr	r0, [pc, #368]	; (8000858 <ESP_Init+0x1f4>)
 80006e6:	f001 fe1f 	bl	8002328 <UART_waitFor>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d0f8      	beq.n	80006e2 <ESP_Init+0x7e>
	UART_send("\n\nAT  ---->  OK\n\n", PC_UART);
 80006f0:	495a      	ldr	r1, [pc, #360]	; (800085c <ESP_Init+0x1f8>)
 80006f2:	485f      	ldr	r0, [pc, #380]	; (8000870 <ESP_Init+0x20c>)
 80006f4:	f001 fd82 	bl	80021fc <UART_send>


	HAL_Delay(2000);
 80006f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006fc:	f003 ff5e 	bl	80045bc <HAL_Delay>


	/********** AT+CWMODE=3 **********/
	UART_send("AT+CWMODE=3\r\n", WiFi_UART);
 8000700:	4953      	ldr	r1, [pc, #332]	; (8000850 <ESP_Init+0x1ec>)
 8000702:	485c      	ldr	r0, [pc, #368]	; (8000874 <ESP_Init+0x210>)
 8000704:	f001 fd7a 	bl	80021fc <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 8000708:	bf00      	nop
 800070a:	4951      	ldr	r1, [pc, #324]	; (8000850 <ESP_Init+0x1ec>)
 800070c:	4852      	ldr	r0, [pc, #328]	; (8000858 <ESP_Init+0x1f4>)
 800070e:	f001 fe0b 	bl	8002328 <UART_waitFor>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d0f8      	beq.n	800070a <ESP_Init+0xa6>
	UART_send("CW MODE  ---->  3\n\n", PC_UART);
 8000718:	4950      	ldr	r1, [pc, #320]	; (800085c <ESP_Init+0x1f8>)
 800071a:	4857      	ldr	r0, [pc, #348]	; (8000878 <ESP_Init+0x214>)
 800071c:	f001 fd6e 	bl	80021fc <UART_send>


	/********** AT+CWJAP="SSID","PASSWD" **********/
	UART_send("Connecting ", PC_UART);
 8000720:	494e      	ldr	r1, [pc, #312]	; (800085c <ESP_Init+0x1f8>)
 8000722:	4856      	ldr	r0, [pc, #344]	; (800087c <ESP_Init+0x218>)
 8000724:	f001 fd6a 	bl	80021fc <UART_send>

	for (int i=0; i<3; i++)
 8000728:	2300      	movs	r3, #0
 800072a:	663b      	str	r3, [r7, #96]	; 0x60
 800072c:	e00a      	b.n	8000744 <ESP_Init+0xe0>
	{
		UART_send(" . ", PC_UART);
 800072e:	494b      	ldr	r1, [pc, #300]	; (800085c <ESP_Init+0x1f8>)
 8000730:	484e      	ldr	r0, [pc, #312]	; (800086c <ESP_Init+0x208>)
 8000732:	f001 fd63 	bl	80021fc <UART_send>
		HAL_Delay(1500);
 8000736:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800073a:	f003 ff3f 	bl	80045bc <HAL_Delay>
	for (int i=0; i<3; i++)
 800073e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000740:	3301      	adds	r3, #1
 8000742:	663b      	str	r3, [r7, #96]	; 0x60
 8000744:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000746:	2b02      	cmp	r3, #2
 8000748:	ddf1      	ble.n	800072e <ESP_Init+0xca>
	}

	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 800074a:	f107 000c 	add.w	r0, r7, #12
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	494b      	ldr	r1, [pc, #300]	; (8000880 <ESP_Init+0x21c>)
 8000754:	f007 fbe2 	bl	8007f1c <siprintf>
	UART_send(data, WiFi_UART);
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	493c      	ldr	r1, [pc, #240]	; (8000850 <ESP_Init+0x1ec>)
 800075e:	4618      	mov	r0, r3
 8000760:	f001 fd4c 	bl	80021fc <UART_send>
	while (!(UART_waitFor("WIFI GOT IP\r\n\r\nOK\r\n", WiFi_UART)));
 8000764:	bf00      	nop
 8000766:	493a      	ldr	r1, [pc, #232]	; (8000850 <ESP_Init+0x1ec>)
 8000768:	4846      	ldr	r0, [pc, #280]	; (8000884 <ESP_Init+0x220>)
 800076a:	f001 fddd 	bl	8002328 <UART_waitFor>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d0f8      	beq.n	8000766 <ESP_Init+0x102>
	sprintf (data, "\n\nConnected to \"%s\"\n\n", SSID);
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	4943      	ldr	r1, [pc, #268]	; (8000888 <ESP_Init+0x224>)
 800077c:	4618      	mov	r0, r3
 800077e:	f007 fbcd 	bl	8007f1c <siprintf>
	UART_send(data,PC_UART);
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	4935      	ldr	r1, [pc, #212]	; (800085c <ESP_Init+0x1f8>)
 8000788:	4618      	mov	r0, r3
 800078a:	f001 fd37 	bl	80021fc <UART_send>
	//UART_send("AT+CIPSTA?\r\n", WiFi_UART);
	//sprintf (data, "AT+CIPSTA?\r\n");


	/********** AT+CIFSR **********/
	UART_send("AT+CIFSR\r\n", WiFi_UART);
 800078e:	4930      	ldr	r1, [pc, #192]	; (8000850 <ESP_Init+0x1ec>)
 8000790:	483e      	ldr	r0, [pc, #248]	; (800088c <ESP_Init+0x228>)
 8000792:	f001 fd33 	bl	80021fc <UART_send>
	while (!(UART_waitFor("CIFSR:STAIP,\"", WiFi_UART)));
 8000796:	bf00      	nop
 8000798:	492d      	ldr	r1, [pc, #180]	; (8000850 <ESP_Init+0x1ec>)
 800079a:	483d      	ldr	r0, [pc, #244]	; (8000890 <ESP_Init+0x22c>)
 800079c:	f001 fdc4 	bl	8002328 <UART_waitFor>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d0f8      	beq.n	8000798 <ESP_Init+0x134>
	while (!(UART_copyUpto("\"",buffer, WiFi_UART)));
 80007a6:	bf00      	nop
 80007a8:	4a29      	ldr	r2, [pc, #164]	; (8000850 <ESP_Init+0x1ec>)
 80007aa:	493a      	ldr	r1, [pc, #232]	; (8000894 <ESP_Init+0x230>)
 80007ac:	483a      	ldr	r0, [pc, #232]	; (8000898 <ESP_Init+0x234>)
 80007ae:	f001 fd3d 	bl	800222c <UART_copyUpto>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d0f7      	beq.n	80007a8 <ESP_Init+0x144>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 80007b8:	bf00      	nop
 80007ba:	4925      	ldr	r1, [pc, #148]	; (8000850 <ESP_Init+0x1ec>)
 80007bc:	4826      	ldr	r0, [pc, #152]	; (8000858 <ESP_Init+0x1f4>)
 80007be:	f001 fdb3 	bl	8002328 <UART_waitFor>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d0f8      	beq.n	80007ba <ESP_Init+0x156>
	int len = strlen (buffer);
 80007c8:	4832      	ldr	r0, [pc, #200]	; (8000894 <ESP_Init+0x230>)
 80007ca:	f7ff fd01 	bl	80001d0 <strlen>
 80007ce:	4603      	mov	r3, r0
 80007d0:	65fb      	str	r3, [r7, #92]	; 0x5c
	buffer[len-1] = '\0';
 80007d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007d4:	3b01      	subs	r3, #1
 80007d6:	4a2f      	ldr	r2, [pc, #188]	; (8000894 <ESP_Init+0x230>)
 80007d8:	2100      	movs	r1, #0
 80007da:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP :  %s\n\n", buffer);
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	4a2c      	ldr	r2, [pc, #176]	; (8000894 <ESP_Init+0x230>)
 80007e2:	492e      	ldr	r1, [pc, #184]	; (800089c <ESP_Init+0x238>)
 80007e4:	4618      	mov	r0, r3
 80007e6:	f007 fb99 	bl	8007f1c <siprintf>
	UART_send(data, PC_UART);
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	491b      	ldr	r1, [pc, #108]	; (800085c <ESP_Init+0x1f8>)
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 fd03 	bl	80021fc <UART_send>


	/********** AT+CIPMUX=1 **********/
	UART_send("AT+CIPMUX=1\r\n", WiFi_UART);
 80007f6:	4916      	ldr	r1, [pc, #88]	; (8000850 <ESP_Init+0x1ec>)
 80007f8:	4829      	ldr	r0, [pc, #164]	; (80008a0 <ESP_Init+0x23c>)
 80007fa:	f001 fcff 	bl	80021fc <UART_send>
	while (!(UART_waitFor("AT+CIPMUX=1\r\r\n\r\nOK\r\n", WiFi_UART)));
 80007fe:	bf00      	nop
 8000800:	4913      	ldr	r1, [pc, #76]	; (8000850 <ESP_Init+0x1ec>)
 8000802:	4828      	ldr	r0, [pc, #160]	; (80008a4 <ESP_Init+0x240>)
 8000804:	f001 fd90 	bl	8002328 <UART_waitFor>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d0f8      	beq.n	8000800 <ESP_Init+0x19c>
	UART_send("CIPMUX  ---->  OK\n\n", PC_UART);
 800080e:	4913      	ldr	r1, [pc, #76]	; (800085c <ESP_Init+0x1f8>)
 8000810:	4825      	ldr	r0, [pc, #148]	; (80008a8 <ESP_Init+0x244>)
 8000812:	f001 fcf3 	bl	80021fc <UART_send>
	//while (!(UART_waitFor("OK\r\n", WiFi_UART)));
	//UART_send("CIPSTART  ---->  OK\n\n", PC_UART);


	/********** AT+CIPSERVER=1,80 **********/
	UART_send("AT+CIPSERVER=1,80\r\n", WiFi_UART);
 8000816:	490e      	ldr	r1, [pc, #56]	; (8000850 <ESP_Init+0x1ec>)
 8000818:	4824      	ldr	r0, [pc, #144]	; (80008ac <ESP_Init+0x248>)
 800081a:	f001 fcef 	bl	80021fc <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 800081e:	bf00      	nop
 8000820:	490b      	ldr	r1, [pc, #44]	; (8000850 <ESP_Init+0x1ec>)
 8000822:	480d      	ldr	r0, [pc, #52]	; (8000858 <ESP_Init+0x1f4>)
 8000824:	f001 fd80 	bl	8002328 <UART_waitFor>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d0f8      	beq.n	8000820 <ESP_Init+0x1bc>
	UART_send("CIPSERVER  ---->  OK\n\n", PC_UART);
 800082e:	490b      	ldr	r1, [pc, #44]	; (800085c <ESP_Init+0x1f8>)
 8000830:	481f      	ldr	r0, [pc, #124]	; (80008b0 <ESP_Init+0x24c>)
 8000832:	f001 fce3 	bl	80021fc <UART_send>


	/********** FIN **********/
	UART_send("Conected to the IP\n\n", PC_UART);
 8000836:	4909      	ldr	r1, [pc, #36]	; (800085c <ESP_Init+0x1f8>)
 8000838:	481e      	ldr	r0, [pc, #120]	; (80008b4 <ESP_Init+0x250>)
 800083a:	f001 fcdf 	bl	80021fc <UART_send>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1); // CONNECTED
 800083e:	2201      	movs	r2, #1
 8000840:	2101      	movs	r1, #1
 8000842:	481d      	ldr	r0, [pc, #116]	; (80008b8 <ESP_Init+0x254>)
 8000844:	f004 fe02 	bl	800544c <HAL_GPIO_WritePin>
}
 8000848:	bf00      	nop
 800084a:	3768      	adds	r7, #104	; 0x68
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000e4c 	.word	0x20000e4c
 8000854:	08008ba4 	.word	0x08008ba4
 8000858:	08008bac 	.word	0x08008bac
 800085c:	20000dc0 	.word	0x20000dc0
 8000860:	08008bb4 	.word	0x08008bb4
 8000864:	08008bc4 	.word	0x08008bc4
 8000868:	08008bd0 	.word	0x08008bd0
 800086c:	08008bdc 	.word	0x08008bdc
 8000870:	08008be0 	.word	0x08008be0
 8000874:	08008bf4 	.word	0x08008bf4
 8000878:	08008c04 	.word	0x08008c04
 800087c:	08008c18 	.word	0x08008c18
 8000880:	08008c24 	.word	0x08008c24
 8000884:	08008c3c 	.word	0x08008c3c
 8000888:	08008c50 	.word	0x08008c50
 800088c:	08008c68 	.word	0x08008c68
 8000890:	08008c74 	.word	0x08008c74
 8000894:	200009b4 	.word	0x200009b4
 8000898:	08008c84 	.word	0x08008c84
 800089c:	08008c88 	.word	0x08008c88
 80008a0:	08008c94 	.word	0x08008c94
 80008a4:	08008ca4 	.word	0x08008ca4
 80008a8:	08008cbc 	.word	0x08008cbc
 80008ac:	08008cd0 	.word	0x08008cd0
 80008b0:	08008ce4 	.word	0x08008ce4
 80008b4:	08008cfc 	.word	0x08008cfc
 80008b8:	40020800 	.word	0x40020800

080008bc <ESP_messageHandler>:
	}
	return -1;
}


void ESP_messageHandler(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0

	//__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);

	memset(textrc, 0, 100);
 80008c0:	2264      	movs	r2, #100	; 0x64
 80008c2:	2100      	movs	r1, #0
 80008c4:	48a6      	ldr	r0, [pc, #664]	; (8000b60 <ESP_messageHandler+0x2a4>)
 80008c6:	f007 fb21 	bl	8007f0c <memset>

	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) != 0){
 80008ca:	2101      	movs	r1, #1
 80008cc:	48a5      	ldr	r0, [pc, #660]	; (8000b64 <ESP_messageHandler+0x2a8>)
 80008ce:	f004 fda5 	bl	800541c <HAL_GPIO_ReadPin>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d01f      	beq.n	8000918 <ESP_messageHandler+0x5c>

		HAL_UART_Receive(&huart2, (uint8_t *)textrc, 100, 100); //(uint8_t *)
 80008d8:	2364      	movs	r3, #100	; 0x64
 80008da:	2264      	movs	r2, #100	; 0x64
 80008dc:	49a0      	ldr	r1, [pc, #640]	; (8000b60 <ESP_messageHandler+0x2a4>)
 80008de:	48a2      	ldr	r0, [pc, #648]	; (8000b68 <ESP_messageHandler+0x2ac>)
 80008e0:	f006 fbbf 	bl	8007062 <HAL_UART_Receive>

		HAL_UART_Transmit(&huart6, (uint8_t *)textrc, 100, HAL_MAX_DELAY);
 80008e4:	f04f 33ff 	mov.w	r3, #4294967295
 80008e8:	2264      	movs	r2, #100	; 0x64
 80008ea:	499d      	ldr	r1, [pc, #628]	; (8000b60 <ESP_messageHandler+0x2a4>)
 80008ec:	489f      	ldr	r0, [pc, #636]	; (8000b6c <ESP_messageHandler+0x2b0>)
 80008ee:	f006 fb26 	bl	8006f3e <HAL_UART_Transmit>
		UART_send("\n", PC_UART);
 80008f2:	499e      	ldr	r1, [pc, #632]	; (8000b6c <ESP_messageHandler+0x2b0>)
 80008f4:	489e      	ldr	r0, [pc, #632]	; (8000b70 <ESP_messageHandler+0x2b4>)
 80008f6:	f001 fc81 	bl	80021fc <UART_send>

		fragment[0] = textrc[25]; // Fragment assignment
 80008fa:	4b99      	ldr	r3, [pc, #612]	; (8000b60 <ESP_messageHandler+0x2a4>)
 80008fc:	7e5a      	ldrb	r2, [r3, #25]
 80008fe:	4b9d      	ldr	r3, [pc, #628]	; (8000b74 <ESP_messageHandler+0x2b8>)
 8000900:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart6, (uint8_t *)fragment, 1, HAL_MAX_DELAY);
 8000902:	f04f 33ff 	mov.w	r3, #4294967295
 8000906:	2201      	movs	r2, #1
 8000908:	499a      	ldr	r1, [pc, #616]	; (8000b74 <ESP_messageHandler+0x2b8>)
 800090a:	4898      	ldr	r0, [pc, #608]	; (8000b6c <ESP_messageHandler+0x2b0>)
 800090c:	f006 fb17 	bl	8006f3e <HAL_UART_Transmit>
		UART_send("\n", PC_UART);
 8000910:	4996      	ldr	r1, [pc, #600]	; (8000b6c <ESP_messageHandler+0x2b0>)
 8000912:	4897      	ldr	r0, [pc, #604]	; (8000b70 <ESP_messageHandler+0x2b4>)
 8000914:	f001 fc72 	bl	80021fc <UART_send>
	}


	// DHT22
	readDHT = 0;
 8000918:	4b97      	ldr	r3, [pc, #604]	; (8000b78 <ESP_messageHandler+0x2bc>)
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]

	if(textrc[27] == '[') readDHT = 1;
 800091e:	4b90      	ldr	r3, [pc, #576]	; (8000b60 <ESP_messageHandler+0x2a4>)
 8000920:	7edb      	ldrb	r3, [r3, #27]
 8000922:	2b5b      	cmp	r3, #91	; 0x5b
 8000924:	d102      	bne.n	800092c <ESP_messageHandler+0x70>
 8000926:	4b94      	ldr	r3, [pc, #592]	; (8000b78 <ESP_messageHandler+0x2bc>)
 8000928:	2201      	movs	r2, #1
 800092a:	601a      	str	r2, [r3, #0]


	// SECURITY
	if (fragment[0] == 's'){
 800092c:	4b91      	ldr	r3, [pc, #580]	; (8000b74 <ESP_messageHandler+0x2b8>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b73      	cmp	r3, #115	; 0x73
 8000932:	d10b      	bne.n	800094c <ESP_messageHandler+0x90>
		UART_send("SEGURIDAD \n", PC_UART);
 8000934:	498d      	ldr	r1, [pc, #564]	; (8000b6c <ESP_messageHandler+0x2b0>)
 8000936:	4891      	ldr	r0, [pc, #580]	; (8000b7c <ESP_messageHandler+0x2c0>)
 8000938:	f001 fc60 	bl	80021fc <UART_send>
		vSecurity[0] = textrc[28]; // Alarma Interior
 800093c:	4b88      	ldr	r3, [pc, #544]	; (8000b60 <ESP_messageHandler+0x2a4>)
 800093e:	7f1a      	ldrb	r2, [r3, #28]
 8000940:	4b8f      	ldr	r3, [pc, #572]	; (8000b80 <ESP_messageHandler+0x2c4>)
 8000942:	701a      	strb	r2, [r3, #0]
		vSecurity[1] = textrc[31]; // Alarma Exterior
 8000944:	4b86      	ldr	r3, [pc, #536]	; (8000b60 <ESP_messageHandler+0x2a4>)
 8000946:	7fda      	ldrb	r2, [r3, #31]
 8000948:	4b8d      	ldr	r3, [pc, #564]	; (8000b80 <ESP_messageHandler+0x2c4>)
 800094a:	705a      	strb	r2, [r3, #1]
	}

	// LIGHTS
	if (fragment[0] == 'i'){
 800094c:	4b89      	ldr	r3, [pc, #548]	; (8000b74 <ESP_messageHandler+0x2b8>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b69      	cmp	r3, #105	; 0x69
 8000952:	f040 82cc 	bne.w	8000eee <ESP_messageHandler+0x632>
		UART_send("ILUMINACION \n", PC_UART);
 8000956:	4985      	ldr	r1, [pc, #532]	; (8000b6c <ESP_messageHandler+0x2b0>)
 8000958:	488a      	ldr	r0, [pc, #552]	; (8000b84 <ESP_messageHandler+0x2c8>)
 800095a:	f001 fc4f 	bl	80021fc <UART_send>
		vLight[0] = textrc[28]; 	// Luz Sala
 800095e:	4b80      	ldr	r3, [pc, #512]	; (8000b60 <ESP_messageHandler+0x2a4>)
 8000960:	7f1a      	ldrb	r2, [r3, #28]
 8000962:	4b89      	ldr	r3, [pc, #548]	; (8000b88 <ESP_messageHandler+0x2cc>)
 8000964:	701a      	strb	r2, [r3, #0]
		vLight[1] = textrc[31]; 	// Luz Comedor
 8000966:	4b7e      	ldr	r3, [pc, #504]	; (8000b60 <ESP_messageHandler+0x2a4>)
 8000968:	7fda      	ldrb	r2, [r3, #31]
 800096a:	4b87      	ldr	r3, [pc, #540]	; (8000b88 <ESP_messageHandler+0x2cc>)
 800096c:	705a      	strb	r2, [r3, #1]
		vLight[2] = textrc[34]; 	// Luz Ambiente
 800096e:	4b7c      	ldr	r3, [pc, #496]	; (8000b60 <ESP_messageHandler+0x2a4>)
 8000970:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000974:	4b84      	ldr	r3, [pc, #528]	; (8000b88 <ESP_messageHandler+0x2cc>)
 8000976:	709a      	strb	r2, [r3, #2]
		vLight[3] = textrc[37]; 	// Luz Recibidor
 8000978:	4b79      	ldr	r3, [pc, #484]	; (8000b60 <ESP_messageHandler+0x2a4>)
 800097a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800097e:	4b82      	ldr	r3, [pc, #520]	; (8000b88 <ESP_messageHandler+0x2cc>)
 8000980:	70da      	strb	r2, [r3, #3]
		vLight[4] = textrc[40]; 	// Luz Cocina
 8000982:	4b77      	ldr	r3, [pc, #476]	; (8000b60 <ESP_messageHandler+0x2a4>)
 8000984:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000988:	4b7f      	ldr	r3, [pc, #508]	; (8000b88 <ESP_messageHandler+0x2cc>)
 800098a:	711a      	strb	r2, [r3, #4]
		vLight[5] = textrc[43]; 	// Luz Fregadero
 800098c:	4b74      	ldr	r3, [pc, #464]	; (8000b60 <ESP_messageHandler+0x2a4>)
 800098e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8000992:	4b7d      	ldr	r3, [pc, #500]	; (8000b88 <ESP_messageHandler+0x2cc>)
 8000994:	715a      	strb	r2, [r3, #5]
		vLight[6] = textrc[46]; 	// Luz Baño
 8000996:	4b72      	ldr	r3, [pc, #456]	; (8000b60 <ESP_messageHandler+0x2a4>)
 8000998:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800099c:	4b7a      	ldr	r3, [pc, #488]	; (8000b88 <ESP_messageHandler+0x2cc>)
 800099e:	719a      	strb	r2, [r3, #6]
		vLight[7] = textrc[49]; 	// Luz Espejo
 80009a0:	4b6f      	ldr	r3, [pc, #444]	; (8000b60 <ESP_messageHandler+0x2a4>)
 80009a2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80009a6:	4b78      	ldr	r3, [pc, #480]	; (8000b88 <ESP_messageHandler+0x2cc>)
 80009a8:	71da      	strb	r2, [r3, #7]
		vLight[8] = textrc[52]; 	// Luz Dormitorio
 80009aa:	4b6d      	ldr	r3, [pc, #436]	; (8000b60 <ESP_messageHandler+0x2a4>)
 80009ac:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80009b0:	4b75      	ldr	r3, [pc, #468]	; (8000b88 <ESP_messageHandler+0x2cc>)
 80009b2:	721a      	strb	r2, [r3, #8]
		vLight[9] = textrc[55]; 	// Luz Mesita Izq
 80009b4:	4b6a      	ldr	r3, [pc, #424]	; (8000b60 <ESP_messageHandler+0x2a4>)
 80009b6:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80009ba:	4b73      	ldr	r3, [pc, #460]	; (8000b88 <ESP_messageHandler+0x2cc>)
 80009bc:	725a      	strb	r2, [r3, #9]
		vLight[10] = textrc[58]; 	// Luz Mesita Dch
 80009be:	4b68      	ldr	r3, [pc, #416]	; (8000b60 <ESP_messageHandler+0x2a4>)
 80009c0:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80009c4:	4b70      	ldr	r3, [pc, #448]	; (8000b88 <ESP_messageHandler+0x2cc>)
 80009c6:	729a      	strb	r2, [r3, #10]
		vLight[11] = textrc[61]; 	// Luz Oficina
 80009c8:	4b65      	ldr	r3, [pc, #404]	; (8000b60 <ESP_messageHandler+0x2a4>)
 80009ca:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80009ce:	4b6e      	ldr	r3, [pc, #440]	; (8000b88 <ESP_messageHandler+0x2cc>)
 80009d0:	72da      	strb	r2, [r3, #11]
		vLight[12] = textrc[64]; 	// Luz Gaming
 80009d2:	4b63      	ldr	r3, [pc, #396]	; (8000b60 <ESP_messageHandler+0x2a4>)
 80009d4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80009d8:	4b6b      	ldr	r3, [pc, #428]	; (8000b88 <ESP_messageHandler+0x2cc>)
 80009da:	731a      	strb	r2, [r3, #12]
		vLight[13] = textrc[67]; 	// Luz Rx100
 80009dc:	4b60      	ldr	r3, [pc, #384]	; (8000b60 <ESP_messageHandler+0x2a4>)
 80009de:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80009e2:	4b69      	ldr	r3, [pc, #420]	; (8000b88 <ESP_messageHandler+0x2cc>)
 80009e4:	735a      	strb	r2, [r3, #13]
		vLight[14] = textrc[68]; 	// Luz Rx10
 80009e6:	4b5e      	ldr	r3, [pc, #376]	; (8000b60 <ESP_messageHandler+0x2a4>)
 80009e8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80009ec:	4b66      	ldr	r3, [pc, #408]	; (8000b88 <ESP_messageHandler+0x2cc>)
 80009ee:	739a      	strb	r2, [r3, #14]
		vLight[15] = textrc[69]; 	// Luz Rx1
 80009f0:	4b5b      	ldr	r3, [pc, #364]	; (8000b60 <ESP_messageHandler+0x2a4>)
 80009f2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80009f6:	4b64      	ldr	r3, [pc, #400]	; (8000b88 <ESP_messageHandler+0x2cc>)
 80009f8:	73da      	strb	r2, [r3, #15]
		vLight[16] = textrc[72]; 	// Luz Gx100
 80009fa:	4b59      	ldr	r3, [pc, #356]	; (8000b60 <ESP_messageHandler+0x2a4>)
 80009fc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8000a00:	4b61      	ldr	r3, [pc, #388]	; (8000b88 <ESP_messageHandler+0x2cc>)
 8000a02:	741a      	strb	r2, [r3, #16]
		vLight[17] = textrc[73]; 	// Luz Gx10
 8000a04:	4b56      	ldr	r3, [pc, #344]	; (8000b60 <ESP_messageHandler+0x2a4>)
 8000a06:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8000a0a:	4b5f      	ldr	r3, [pc, #380]	; (8000b88 <ESP_messageHandler+0x2cc>)
 8000a0c:	745a      	strb	r2, [r3, #17]
		vLight[18] = textrc[74]; 	// Luz Gx1
 8000a0e:	4b54      	ldr	r3, [pc, #336]	; (8000b60 <ESP_messageHandler+0x2a4>)
 8000a10:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8000a14:	4b5c      	ldr	r3, [pc, #368]	; (8000b88 <ESP_messageHandler+0x2cc>)
 8000a16:	749a      	strb	r2, [r3, #18]
		vLight[19] = textrc[77]; 	// Luz Bx100
 8000a18:	4b51      	ldr	r3, [pc, #324]	; (8000b60 <ESP_messageHandler+0x2a4>)
 8000a1a:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8000a1e:	4b5a      	ldr	r3, [pc, #360]	; (8000b88 <ESP_messageHandler+0x2cc>)
 8000a20:	74da      	strb	r2, [r3, #19]
		vLight[20] = textrc[78]; 	// Luz Bx10
 8000a22:	4b4f      	ldr	r3, [pc, #316]	; (8000b60 <ESP_messageHandler+0x2a4>)
 8000a24:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8000a28:	4b57      	ldr	r3, [pc, #348]	; (8000b88 <ESP_messageHandler+0x2cc>)
 8000a2a:	751a      	strb	r2, [r3, #20]
		vLight[21] = textrc[79]; 	// Luz Bx1
 8000a2c:	4b4c      	ldr	r3, [pc, #304]	; (8000b60 <ESP_messageHandler+0x2a4>)
 8000a2e:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8000a32:	4b55      	ldr	r3, [pc, #340]	; (8000b88 <ESP_messageHandler+0x2cc>)
 8000a34:	755a      	strb	r2, [r3, #21]
		vLight[22] = textrc[82]; 	// Luz Garaje
 8000a36:	4b4a      	ldr	r3, [pc, #296]	; (8000b60 <ESP_messageHandler+0x2a4>)
 8000a38:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8000a3c:	4b52      	ldr	r3, [pc, #328]	; (8000b88 <ESP_messageHandler+0x2cc>)
 8000a3e:	759a      	strb	r2, [r3, #22]
		vLight[23] = textrc[85]; 	// Luz Jardín
 8000a40:	4b47      	ldr	r3, [pc, #284]	; (8000b60 <ESP_messageHandler+0x2a4>)
 8000a42:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8000a46:	4b50      	ldr	r3, [pc, #320]	; (8000b88 <ESP_messageHandler+0x2cc>)
 8000a48:	75da      	strb	r2, [r3, #23]
		vLight[24] = textrc[88]; 	// Luz Porche
 8000a4a:	4b45      	ldr	r3, [pc, #276]	; (8000b60 <ESP_messageHandler+0x2a4>)
 8000a4c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8000a50:	4b4d      	ldr	r3, [pc, #308]	; (8000b88 <ESP_messageHandler+0x2cc>)
 8000a52:	761a      	strb	r2, [r3, #24]
		vLight[25] = textrc[91]; 	// Luz Tendedero
 8000a54:	4b42      	ldr	r3, [pc, #264]	; (8000b60 <ESP_messageHandler+0x2a4>)
 8000a56:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 8000a5a:	4b4b      	ldr	r3, [pc, #300]	; (8000b88 <ESP_messageHandler+0x2cc>)
 8000a5c:	765a      	strb	r2, [r3, #25]
		vLight[26] = textrc[94]; 	// Automático
 8000a5e:	4b40      	ldr	r3, [pc, #256]	; (8000b60 <ESP_messageHandler+0x2a4>)
 8000a60:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 8000a64:	4b48      	ldr	r3, [pc, #288]	; (8000b88 <ESP_messageHandler+0x2cc>)
 8000a66:	769a      	strb	r2, [r3, #26]


		if(vLight[0] == '0' || vLiving[1] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, RESET); 			// Luz Sala
 8000a68:	4b47      	ldr	r3, [pc, #284]	; (8000b88 <ESP_messageHandler+0x2cc>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b30      	cmp	r3, #48	; 0x30
 8000a6e:	d003      	beq.n	8000a78 <ESP_messageHandler+0x1bc>
 8000a70:	4b46      	ldr	r3, [pc, #280]	; (8000b8c <ESP_messageHandler+0x2d0>)
 8000a72:	785b      	ldrb	r3, [r3, #1]
 8000a74:	2b30      	cmp	r3, #48	; 0x30
 8000a76:	d105      	bne.n	8000a84 <ESP_messageHandler+0x1c8>
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2108      	movs	r1, #8
 8000a7c:	4844      	ldr	r0, [pc, #272]	; (8000b90 <ESP_messageHandler+0x2d4>)
 8000a7e:	f004 fce5 	bl	800544c <HAL_GPIO_WritePin>
 8000a82:	e00c      	b.n	8000a9e <ESP_messageHandler+0x1e2>
		else if(vLight[0] == '1' || vLiving[1] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, SET);
 8000a84:	4b40      	ldr	r3, [pc, #256]	; (8000b88 <ESP_messageHandler+0x2cc>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b31      	cmp	r3, #49	; 0x31
 8000a8a:	d003      	beq.n	8000a94 <ESP_messageHandler+0x1d8>
 8000a8c:	4b3f      	ldr	r3, [pc, #252]	; (8000b8c <ESP_messageHandler+0x2d0>)
 8000a8e:	785b      	ldrb	r3, [r3, #1]
 8000a90:	2b31      	cmp	r3, #49	; 0x31
 8000a92:	d104      	bne.n	8000a9e <ESP_messageHandler+0x1e2>
 8000a94:	2201      	movs	r2, #1
 8000a96:	2108      	movs	r1, #8
 8000a98:	483d      	ldr	r0, [pc, #244]	; (8000b90 <ESP_messageHandler+0x2d4>)
 8000a9a:	f004 fcd7 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[1] == '0' || vLiving[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET); 			// Luz Comedor
 8000a9e:	4b3a      	ldr	r3, [pc, #232]	; (8000b88 <ESP_messageHandler+0x2cc>)
 8000aa0:	785b      	ldrb	r3, [r3, #1]
 8000aa2:	2b30      	cmp	r3, #48	; 0x30
 8000aa4:	d003      	beq.n	8000aae <ESP_messageHandler+0x1f2>
 8000aa6:	4b39      	ldr	r3, [pc, #228]	; (8000b8c <ESP_messageHandler+0x2d0>)
 8000aa8:	789b      	ldrb	r3, [r3, #2]
 8000aaa:	2b30      	cmp	r3, #48	; 0x30
 8000aac:	d105      	bne.n	8000aba <ESP_messageHandler+0x1fe>
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	4837      	ldr	r0, [pc, #220]	; (8000b90 <ESP_messageHandler+0x2d4>)
 8000ab4:	f004 fcca 	bl	800544c <HAL_GPIO_WritePin>
 8000ab8:	e00c      	b.n	8000ad4 <ESP_messageHandler+0x218>
		else if(vLight[1] == '1'|| vLiving[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, SET);
 8000aba:	4b33      	ldr	r3, [pc, #204]	; (8000b88 <ESP_messageHandler+0x2cc>)
 8000abc:	785b      	ldrb	r3, [r3, #1]
 8000abe:	2b31      	cmp	r3, #49	; 0x31
 8000ac0:	d003      	beq.n	8000aca <ESP_messageHandler+0x20e>
 8000ac2:	4b32      	ldr	r3, [pc, #200]	; (8000b8c <ESP_messageHandler+0x2d0>)
 8000ac4:	789b      	ldrb	r3, [r3, #2]
 8000ac6:	2b31      	cmp	r3, #49	; 0x31
 8000ac8:	d104      	bne.n	8000ad4 <ESP_messageHandler+0x218>
 8000aca:	2201      	movs	r2, #1
 8000acc:	2102      	movs	r1, #2
 8000ace:	4830      	ldr	r0, [pc, #192]	; (8000b90 <ESP_messageHandler+0x2d4>)
 8000ad0:	f004 fcbc 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[2] == '0' || vLiving[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, RESET); 			// Luz Ambiente
 8000ad4:	4b2c      	ldr	r3, [pc, #176]	; (8000b88 <ESP_messageHandler+0x2cc>)
 8000ad6:	789b      	ldrb	r3, [r3, #2]
 8000ad8:	2b30      	cmp	r3, #48	; 0x30
 8000ada:	d003      	beq.n	8000ae4 <ESP_messageHandler+0x228>
 8000adc:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <ESP_messageHandler+0x2d0>)
 8000ade:	78db      	ldrb	r3, [r3, #3]
 8000ae0:	2b30      	cmp	r3, #48	; 0x30
 8000ae2:	d105      	bne.n	8000af0 <ESP_messageHandler+0x234>
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2120      	movs	r1, #32
 8000ae8:	4829      	ldr	r0, [pc, #164]	; (8000b90 <ESP_messageHandler+0x2d4>)
 8000aea:	f004 fcaf 	bl	800544c <HAL_GPIO_WritePin>
 8000aee:	e00c      	b.n	8000b0a <ESP_messageHandler+0x24e>
		else if(vLight[2] == '1' || vLiving[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, SET);
 8000af0:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <ESP_messageHandler+0x2cc>)
 8000af2:	789b      	ldrb	r3, [r3, #2]
 8000af4:	2b31      	cmp	r3, #49	; 0x31
 8000af6:	d003      	beq.n	8000b00 <ESP_messageHandler+0x244>
 8000af8:	4b24      	ldr	r3, [pc, #144]	; (8000b8c <ESP_messageHandler+0x2d0>)
 8000afa:	78db      	ldrb	r3, [r3, #3]
 8000afc:	2b31      	cmp	r3, #49	; 0x31
 8000afe:	d104      	bne.n	8000b0a <ESP_messageHandler+0x24e>
 8000b00:	2201      	movs	r2, #1
 8000b02:	2120      	movs	r1, #32
 8000b04:	4822      	ldr	r0, [pc, #136]	; (8000b90 <ESP_messageHandler+0x2d4>)
 8000b06:	f004 fca1 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[3] == '0' || vLiving[4] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET); 			// Luz Recibidor
 8000b0a:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <ESP_messageHandler+0x2cc>)
 8000b0c:	78db      	ldrb	r3, [r3, #3]
 8000b0e:	2b30      	cmp	r3, #48	; 0x30
 8000b10:	d003      	beq.n	8000b1a <ESP_messageHandler+0x25e>
 8000b12:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <ESP_messageHandler+0x2d0>)
 8000b14:	791b      	ldrb	r3, [r3, #4]
 8000b16:	2b30      	cmp	r3, #48	; 0x30
 8000b18:	d105      	bne.n	8000b26 <ESP_messageHandler+0x26a>
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	481c      	ldr	r0, [pc, #112]	; (8000b90 <ESP_messageHandler+0x2d4>)
 8000b20:	f004 fc94 	bl	800544c <HAL_GPIO_WritePin>
 8000b24:	e00c      	b.n	8000b40 <ESP_messageHandler+0x284>
		else if(vLight[3] == '1' || vLiving[4] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <ESP_messageHandler+0x2cc>)
 8000b28:	78db      	ldrb	r3, [r3, #3]
 8000b2a:	2b31      	cmp	r3, #49	; 0x31
 8000b2c:	d003      	beq.n	8000b36 <ESP_messageHandler+0x27a>
 8000b2e:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <ESP_messageHandler+0x2d0>)
 8000b30:	791b      	ldrb	r3, [r3, #4]
 8000b32:	2b31      	cmp	r3, #49	; 0x31
 8000b34:	d104      	bne.n	8000b40 <ESP_messageHandler+0x284>
 8000b36:	2201      	movs	r2, #1
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4815      	ldr	r0, [pc, #84]	; (8000b90 <ESP_messageHandler+0x2d4>)
 8000b3c:	f004 fc86 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[4] == '0' || vKitchen[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET); 		// Luz Cocina
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <ESP_messageHandler+0x2cc>)
 8000b42:	791b      	ldrb	r3, [r3, #4]
 8000b44:	2b30      	cmp	r3, #48	; 0x30
 8000b46:	d003      	beq.n	8000b50 <ESP_messageHandler+0x294>
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <ESP_messageHandler+0x2d8>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b30      	cmp	r3, #48	; 0x30
 8000b4e:	d125      	bne.n	8000b9c <ESP_messageHandler+0x2e0>
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b56:	4810      	ldr	r0, [pc, #64]	; (8000b98 <ESP_messageHandler+0x2dc>)
 8000b58:	f004 fc78 	bl	800544c <HAL_GPIO_WritePin>
 8000b5c:	e02c      	b.n	8000bb8 <ESP_messageHandler+0x2fc>
 8000b5e:	bf00      	nop
 8000b60:	200009d0 	.word	0x200009d0
 8000b64:	40021000 	.word	0x40021000
 8000b68:	20000e4c 	.word	0x20000e4c
 8000b6c:	20000dc0 	.word	0x20000dc0
 8000b70:	08008d7c 	.word	0x08008d7c
 8000b74:	200009c8 	.word	0x200009c8
 8000b78:	2000093c 	.word	0x2000093c
 8000b7c:	08008d80 	.word	0x08008d80
 8000b80:	20000960 	.word	0x20000960
 8000b84:	08008d8c 	.word	0x08008d8c
 8000b88:	20000914 	.word	0x20000914
 8000b8c:	20000904 	.word	0x20000904
 8000b90:	40020c00 	.word	0x40020c00
 8000b94:	20000954 	.word	0x20000954
 8000b98:	40020800 	.word	0x40020800
		else if(vLight[4] == '1' || vKitchen[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 8000b9c:	4b95      	ldr	r3, [pc, #596]	; (8000df4 <ESP_messageHandler+0x538>)
 8000b9e:	791b      	ldrb	r3, [r3, #4]
 8000ba0:	2b31      	cmp	r3, #49	; 0x31
 8000ba2:	d003      	beq.n	8000bac <ESP_messageHandler+0x2f0>
 8000ba4:	4b94      	ldr	r3, [pc, #592]	; (8000df8 <ESP_messageHandler+0x53c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b31      	cmp	r3, #49	; 0x31
 8000baa:	d105      	bne.n	8000bb8 <ESP_messageHandler+0x2fc>
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb2:	4892      	ldr	r0, [pc, #584]	; (8000dfc <ESP_messageHandler+0x540>)
 8000bb4:	f004 fc4a 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[5] == '0' || vKitchen[1] == '0') HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET); 		// Luz Fregadero
 8000bb8:	4b8e      	ldr	r3, [pc, #568]	; (8000df4 <ESP_messageHandler+0x538>)
 8000bba:	795b      	ldrb	r3, [r3, #5]
 8000bbc:	2b30      	cmp	r3, #48	; 0x30
 8000bbe:	d003      	beq.n	8000bc8 <ESP_messageHandler+0x30c>
 8000bc0:	4b8d      	ldr	r3, [pc, #564]	; (8000df8 <ESP_messageHandler+0x53c>)
 8000bc2:	785b      	ldrb	r3, [r3, #1]
 8000bc4:	2b30      	cmp	r3, #48	; 0x30
 8000bc6:	d106      	bne.n	8000bd6 <ESP_messageHandler+0x31a>
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bce:	488c      	ldr	r0, [pc, #560]	; (8000e00 <ESP_messageHandler+0x544>)
 8000bd0:	f004 fc3c 	bl	800544c <HAL_GPIO_WritePin>
 8000bd4:	e00d      	b.n	8000bf2 <ESP_messageHandler+0x336>
		else if(vLight[5] == '1' || vKitchen[1] == '1')HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 8000bd6:	4b87      	ldr	r3, [pc, #540]	; (8000df4 <ESP_messageHandler+0x538>)
 8000bd8:	795b      	ldrb	r3, [r3, #5]
 8000bda:	2b31      	cmp	r3, #49	; 0x31
 8000bdc:	d003      	beq.n	8000be6 <ESP_messageHandler+0x32a>
 8000bde:	4b86      	ldr	r3, [pc, #536]	; (8000df8 <ESP_messageHandler+0x53c>)
 8000be0:	785b      	ldrb	r3, [r3, #1]
 8000be2:	2b31      	cmp	r3, #49	; 0x31
 8000be4:	d105      	bne.n	8000bf2 <ESP_messageHandler+0x336>
 8000be6:	2201      	movs	r2, #1
 8000be8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bec:	4884      	ldr	r0, [pc, #528]	; (8000e00 <ESP_messageHandler+0x544>)
 8000bee:	f004 fc2d 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[6] == '0' || vBath[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, RESET); 			// Luz Baño
 8000bf2:	4b80      	ldr	r3, [pc, #512]	; (8000df4 <ESP_messageHandler+0x538>)
 8000bf4:	799b      	ldrb	r3, [r3, #6]
 8000bf6:	2b30      	cmp	r3, #48	; 0x30
 8000bf8:	d003      	beq.n	8000c02 <ESP_messageHandler+0x346>
 8000bfa:	4b82      	ldr	r3, [pc, #520]	; (8000e04 <ESP_messageHandler+0x548>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b30      	cmp	r3, #48	; 0x30
 8000c00:	d105      	bne.n	8000c0e <ESP_messageHandler+0x352>
 8000c02:	2200      	movs	r2, #0
 8000c04:	2140      	movs	r1, #64	; 0x40
 8000c06:	4880      	ldr	r0, [pc, #512]	; (8000e08 <ESP_messageHandler+0x54c>)
 8000c08:	f004 fc20 	bl	800544c <HAL_GPIO_WritePin>
 8000c0c:	e00c      	b.n	8000c28 <ESP_messageHandler+0x36c>
		else if(vLight[6] == '1' || vBath[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, SET);
 8000c0e:	4b79      	ldr	r3, [pc, #484]	; (8000df4 <ESP_messageHandler+0x538>)
 8000c10:	799b      	ldrb	r3, [r3, #6]
 8000c12:	2b31      	cmp	r3, #49	; 0x31
 8000c14:	d003      	beq.n	8000c1e <ESP_messageHandler+0x362>
 8000c16:	4b7b      	ldr	r3, [pc, #492]	; (8000e04 <ESP_messageHandler+0x548>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b31      	cmp	r3, #49	; 0x31
 8000c1c:	d104      	bne.n	8000c28 <ESP_messageHandler+0x36c>
 8000c1e:	2201      	movs	r2, #1
 8000c20:	2140      	movs	r1, #64	; 0x40
 8000c22:	4879      	ldr	r0, [pc, #484]	; (8000e08 <ESP_messageHandler+0x54c>)
 8000c24:	f004 fc12 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[7] == '0' || vBath[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET); 			// Luz Espejo
 8000c28:	4b72      	ldr	r3, [pc, #456]	; (8000df4 <ESP_messageHandler+0x538>)
 8000c2a:	79db      	ldrb	r3, [r3, #7]
 8000c2c:	2b30      	cmp	r3, #48	; 0x30
 8000c2e:	d003      	beq.n	8000c38 <ESP_messageHandler+0x37c>
 8000c30:	4b74      	ldr	r3, [pc, #464]	; (8000e04 <ESP_messageHandler+0x548>)
 8000c32:	785b      	ldrb	r3, [r3, #1]
 8000c34:	2b30      	cmp	r3, #48	; 0x30
 8000c36:	d105      	bne.n	8000c44 <ESP_messageHandler+0x388>
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2108      	movs	r1, #8
 8000c3c:	4873      	ldr	r0, [pc, #460]	; (8000e0c <ESP_messageHandler+0x550>)
 8000c3e:	f004 fc05 	bl	800544c <HAL_GPIO_WritePin>
 8000c42:	e00c      	b.n	8000c5e <ESP_messageHandler+0x3a2>
		else if(vLight[7] == '1' || vBath[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8000c44:	4b6b      	ldr	r3, [pc, #428]	; (8000df4 <ESP_messageHandler+0x538>)
 8000c46:	79db      	ldrb	r3, [r3, #7]
 8000c48:	2b31      	cmp	r3, #49	; 0x31
 8000c4a:	d003      	beq.n	8000c54 <ESP_messageHandler+0x398>
 8000c4c:	4b6d      	ldr	r3, [pc, #436]	; (8000e04 <ESP_messageHandler+0x548>)
 8000c4e:	785b      	ldrb	r3, [r3, #1]
 8000c50:	2b31      	cmp	r3, #49	; 0x31
 8000c52:	d104      	bne.n	8000c5e <ESP_messageHandler+0x3a2>
 8000c54:	2201      	movs	r2, #1
 8000c56:	2108      	movs	r1, #8
 8000c58:	486c      	ldr	r0, [pc, #432]	; (8000e0c <ESP_messageHandler+0x550>)
 8000c5a:	f004 fbf7 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[8] == '0' || vBedroom[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, RESET);			// Luz Dormitorio
 8000c5e:	4b65      	ldr	r3, [pc, #404]	; (8000df4 <ESP_messageHandler+0x538>)
 8000c60:	7a1b      	ldrb	r3, [r3, #8]
 8000c62:	2b30      	cmp	r3, #48	; 0x30
 8000c64:	d003      	beq.n	8000c6e <ESP_messageHandler+0x3b2>
 8000c66:	4b6a      	ldr	r3, [pc, #424]	; (8000e10 <ESP_messageHandler+0x554>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b30      	cmp	r3, #48	; 0x30
 8000c6c:	d105      	bne.n	8000c7a <ESP_messageHandler+0x3be>
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	4865      	ldr	r0, [pc, #404]	; (8000e08 <ESP_messageHandler+0x54c>)
 8000c74:	f004 fbea 	bl	800544c <HAL_GPIO_WritePin>
 8000c78:	e00c      	b.n	8000c94 <ESP_messageHandler+0x3d8>
		else if(vLight[8] == '1' || vBedroom[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET);
 8000c7a:	4b5e      	ldr	r3, [pc, #376]	; (8000df4 <ESP_messageHandler+0x538>)
 8000c7c:	7a1b      	ldrb	r3, [r3, #8]
 8000c7e:	2b31      	cmp	r3, #49	; 0x31
 8000c80:	d003      	beq.n	8000c8a <ESP_messageHandler+0x3ce>
 8000c82:	4b63      	ldr	r3, [pc, #396]	; (8000e10 <ESP_messageHandler+0x554>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b31      	cmp	r3, #49	; 0x31
 8000c88:	d104      	bne.n	8000c94 <ESP_messageHandler+0x3d8>
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2180      	movs	r1, #128	; 0x80
 8000c8e:	485e      	ldr	r0, [pc, #376]	; (8000e08 <ESP_messageHandler+0x54c>)
 8000c90:	f004 fbdc 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[9] == '0' || vBedroom[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET); 		// Luz Mesita Izq
 8000c94:	4b57      	ldr	r3, [pc, #348]	; (8000df4 <ESP_messageHandler+0x538>)
 8000c96:	7a5b      	ldrb	r3, [r3, #9]
 8000c98:	2b30      	cmp	r3, #48	; 0x30
 8000c9a:	d003      	beq.n	8000ca4 <ESP_messageHandler+0x3e8>
 8000c9c:	4b5c      	ldr	r3, [pc, #368]	; (8000e10 <ESP_messageHandler+0x554>)
 8000c9e:	785b      	ldrb	r3, [r3, #1]
 8000ca0:	2b30      	cmp	r3, #48	; 0x30
 8000ca2:	d105      	bne.n	8000cb0 <ESP_messageHandler+0x3f4>
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2110      	movs	r1, #16
 8000ca8:	4858      	ldr	r0, [pc, #352]	; (8000e0c <ESP_messageHandler+0x550>)
 8000caa:	f004 fbcf 	bl	800544c <HAL_GPIO_WritePin>
 8000cae:	e00c      	b.n	8000cca <ESP_messageHandler+0x40e>
		else if(vLight[9] == '1' || vBedroom[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000cb0:	4b50      	ldr	r3, [pc, #320]	; (8000df4 <ESP_messageHandler+0x538>)
 8000cb2:	7a5b      	ldrb	r3, [r3, #9]
 8000cb4:	2b31      	cmp	r3, #49	; 0x31
 8000cb6:	d003      	beq.n	8000cc0 <ESP_messageHandler+0x404>
 8000cb8:	4b55      	ldr	r3, [pc, #340]	; (8000e10 <ESP_messageHandler+0x554>)
 8000cba:	785b      	ldrb	r3, [r3, #1]
 8000cbc:	2b31      	cmp	r3, #49	; 0x31
 8000cbe:	d104      	bne.n	8000cca <ESP_messageHandler+0x40e>
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2110      	movs	r1, #16
 8000cc4:	4851      	ldr	r0, [pc, #324]	; (8000e0c <ESP_messageHandler+0x550>)
 8000cc6:	f004 fbc1 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[10] == '0' || vBedroom[2] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET); 		// Luz Mesita Dch
 8000cca:	4b4a      	ldr	r3, [pc, #296]	; (8000df4 <ESP_messageHandler+0x538>)
 8000ccc:	7a9b      	ldrb	r3, [r3, #10]
 8000cce:	2b30      	cmp	r3, #48	; 0x30
 8000cd0:	d003      	beq.n	8000cda <ESP_messageHandler+0x41e>
 8000cd2:	4b4f      	ldr	r3, [pc, #316]	; (8000e10 <ESP_messageHandler+0x554>)
 8000cd4:	789b      	ldrb	r3, [r3, #2]
 8000cd6:	2b30      	cmp	r3, #48	; 0x30
 8000cd8:	d105      	bne.n	8000ce6 <ESP_messageHandler+0x42a>
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2140      	movs	r1, #64	; 0x40
 8000cde:	484b      	ldr	r0, [pc, #300]	; (8000e0c <ESP_messageHandler+0x550>)
 8000ce0:	f004 fbb4 	bl	800544c <HAL_GPIO_WritePin>
 8000ce4:	e00c      	b.n	8000d00 <ESP_messageHandler+0x444>
		else if(vLight[10] == '1' || vBedroom[2] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8000ce6:	4b43      	ldr	r3, [pc, #268]	; (8000df4 <ESP_messageHandler+0x538>)
 8000ce8:	7a9b      	ldrb	r3, [r3, #10]
 8000cea:	2b31      	cmp	r3, #49	; 0x31
 8000cec:	d003      	beq.n	8000cf6 <ESP_messageHandler+0x43a>
 8000cee:	4b48      	ldr	r3, [pc, #288]	; (8000e10 <ESP_messageHandler+0x554>)
 8000cf0:	789b      	ldrb	r3, [r3, #2]
 8000cf2:	2b31      	cmp	r3, #49	; 0x31
 8000cf4:	d104      	bne.n	8000d00 <ESP_messageHandler+0x444>
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2140      	movs	r1, #64	; 0x40
 8000cfa:	4844      	ldr	r0, [pc, #272]	; (8000e0c <ESP_messageHandler+0x550>)
 8000cfc:	f004 fba6 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[11] == '0' || vOffice[0] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET); 		// Luz Oficina
 8000d00:	4b3c      	ldr	r3, [pc, #240]	; (8000df4 <ESP_messageHandler+0x538>)
 8000d02:	7adb      	ldrb	r3, [r3, #11]
 8000d04:	2b30      	cmp	r3, #48	; 0x30
 8000d06:	d003      	beq.n	8000d10 <ESP_messageHandler+0x454>
 8000d08:	4b42      	ldr	r3, [pc, #264]	; (8000e14 <ESP_messageHandler+0x558>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b30      	cmp	r3, #48	; 0x30
 8000d0e:	d105      	bne.n	8000d1c <ESP_messageHandler+0x460>
 8000d10:	2200      	movs	r2, #0
 8000d12:	2120      	movs	r1, #32
 8000d14:	483d      	ldr	r0, [pc, #244]	; (8000e0c <ESP_messageHandler+0x550>)
 8000d16:	f004 fb99 	bl	800544c <HAL_GPIO_WritePin>
 8000d1a:	e00c      	b.n	8000d36 <ESP_messageHandler+0x47a>
		else if(vLight[11] == '1' || vOffice[0] == '1') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000d1c:	4b35      	ldr	r3, [pc, #212]	; (8000df4 <ESP_messageHandler+0x538>)
 8000d1e:	7adb      	ldrb	r3, [r3, #11]
 8000d20:	2b31      	cmp	r3, #49	; 0x31
 8000d22:	d003      	beq.n	8000d2c <ESP_messageHandler+0x470>
 8000d24:	4b3b      	ldr	r3, [pc, #236]	; (8000e14 <ESP_messageHandler+0x558>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b31      	cmp	r3, #49	; 0x31
 8000d2a:	d104      	bne.n	8000d36 <ESP_messageHandler+0x47a>
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2120      	movs	r1, #32
 8000d30:	4836      	ldr	r0, [pc, #216]	; (8000e0c <ESP_messageHandler+0x550>)
 8000d32:	f004 fb8b 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[12] == '0' || vOffice[1] == '0'){ 													// Luz Gaming
 8000d36:	4b2f      	ldr	r3, [pc, #188]	; (8000df4 <ESP_messageHandler+0x538>)
 8000d38:	7b1b      	ldrb	r3, [r3, #12]
 8000d3a:	2b30      	cmp	r3, #48	; 0x30
 8000d3c:	d003      	beq.n	8000d46 <ESP_messageHandler+0x48a>
 8000d3e:	4b35      	ldr	r3, [pc, #212]	; (8000e14 <ESP_messageHandler+0x558>)
 8000d40:	785b      	ldrb	r3, [r3, #1]
 8000d42:	2b30      	cmp	r3, #48	; 0x30
 8000d44:	d10c      	bne.n	8000d60 <ESP_messageHandler+0x4a4>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000d46:	4b34      	ldr	r3, [pc, #208]	; (8000e18 <ESP_messageHandler+0x55c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000d4e:	4b32      	ldr	r3, [pc, #200]	; (8000e18 <ESP_messageHandler+0x55c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2200      	movs	r2, #0
 8000d54:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000d56:	4b30      	ldr	r3, [pc, #192]	; (8000e18 <ESP_messageHandler+0x55c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d5e:	e03a      	b.n	8000dd6 <ESP_messageHandler+0x51a>
		}
		else if(vLight[12] == '1' || vOffice[1] == '1'){
 8000d60:	4b24      	ldr	r3, [pc, #144]	; (8000df4 <ESP_messageHandler+0x538>)
 8000d62:	7b1b      	ldrb	r3, [r3, #12]
 8000d64:	2b31      	cmp	r3, #49	; 0x31
 8000d66:	d003      	beq.n	8000d70 <ESP_messageHandler+0x4b4>
 8000d68:	4b2a      	ldr	r3, [pc, #168]	; (8000e14 <ESP_messageHandler+0x558>)
 8000d6a:	785b      	ldrb	r3, [r3, #1]
 8000d6c:	2b31      	cmp	r3, #49	; 0x31
 8000d6e:	d132      	bne.n	8000dd6 <ESP_messageHandler+0x51a>

			//uint8_t r, g, b;

			r = rgb_value (vLight[13],vLight[14],vLight[15]);
 8000d70:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <ESP_messageHandler+0x538>)
 8000d72:	7b5b      	ldrb	r3, [r3, #13]
 8000d74:	4a1f      	ldr	r2, [pc, #124]	; (8000df4 <ESP_messageHandler+0x538>)
 8000d76:	7b91      	ldrb	r1, [r2, #14]
 8000d78:	4a1e      	ldr	r2, [pc, #120]	; (8000df4 <ESP_messageHandler+0x538>)
 8000d7a:	7bd2      	ldrb	r2, [r2, #15]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 fda1 	bl	80018c4 <rgb_value>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a25      	ldr	r2, [pc, #148]	; (8000e1c <ESP_messageHandler+0x560>)
 8000d86:	6013      	str	r3, [r2, #0]
			g = rgb_value (vLight[16],vLight[17],vLight[18]);
 8000d88:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <ESP_messageHandler+0x538>)
 8000d8a:	7c1b      	ldrb	r3, [r3, #16]
 8000d8c:	4a19      	ldr	r2, [pc, #100]	; (8000df4 <ESP_messageHandler+0x538>)
 8000d8e:	7c51      	ldrb	r1, [r2, #17]
 8000d90:	4a18      	ldr	r2, [pc, #96]	; (8000df4 <ESP_messageHandler+0x538>)
 8000d92:	7c92      	ldrb	r2, [r2, #18]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 fd95 	bl	80018c4 <rgb_value>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4a20      	ldr	r2, [pc, #128]	; (8000e20 <ESP_messageHandler+0x564>)
 8000d9e:	6013      	str	r3, [r2, #0]
			b = rgb_value (vLight[19],vLight[20],vLight[21]);
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <ESP_messageHandler+0x538>)
 8000da2:	7cdb      	ldrb	r3, [r3, #19]
 8000da4:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <ESP_messageHandler+0x538>)
 8000da6:	7d11      	ldrb	r1, [r2, #20]
 8000da8:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <ESP_messageHandler+0x538>)
 8000daa:	7d52      	ldrb	r2, [r2, #21]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 fd89 	bl	80018c4 <rgb_value>
 8000db2:	4603      	mov	r3, r0
 8000db4:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <ESP_messageHandler+0x568>)
 8000db6:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, g); // PA8
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <ESP_messageHandler+0x564>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <ESP_messageHandler+0x55c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, r); // PA9
 8000dc2:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <ESP_messageHandler+0x560>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <ESP_messageHandler+0x55c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b); // PA10
 8000dcc:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <ESP_messageHandler+0x568>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <ESP_messageHandler+0x55c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		if(vLight[22] == '0' || vGarage[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET); 		// Luz Garaje
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <ESP_messageHandler+0x538>)
 8000dd8:	7d9b      	ldrb	r3, [r3, #22]
 8000dda:	2b30      	cmp	r3, #48	; 0x30
 8000ddc:	d003      	beq.n	8000de6 <ESP_messageHandler+0x52a>
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <ESP_messageHandler+0x56c>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b30      	cmp	r3, #48	; 0x30
 8000de4:	d122      	bne.n	8000e2c <ESP_messageHandler+0x570>
 8000de6:	2200      	movs	r2, #0
 8000de8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dec:	4803      	ldr	r0, [pc, #12]	; (8000dfc <ESP_messageHandler+0x540>)
 8000dee:	f004 fb2d 	bl	800544c <HAL_GPIO_WritePin>
 8000df2:	e029      	b.n	8000e48 <ESP_messageHandler+0x58c>
 8000df4:	20000914 	.word	0x20000914
 8000df8:	20000954 	.word	0x20000954
 8000dfc:	40020800 	.word	0x40020800
 8000e00:	40020000 	.word	0x40020000
 8000e04:	20000938 	.word	0x20000938
 8000e08:	40020c00 	.word	0x40020c00
 8000e0c:	40020400 	.word	0x40020400
 8000e10:	20000964 	.word	0x20000964
 8000e14:	20000940 	.word	0x20000940
 8000e18:	20000d30 	.word	0x20000d30
 8000e1c:	20000974 	.word	0x20000974
 8000e20:	20000970 	.word	0x20000970
 8000e24:	20000968 	.word	0x20000968
 8000e28:	20000958 	.word	0x20000958
		else if(vLight[22] == '1' || vGarage[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 8000e2c:	4b9f      	ldr	r3, [pc, #636]	; (80010ac <ESP_messageHandler+0x7f0>)
 8000e2e:	7d9b      	ldrb	r3, [r3, #22]
 8000e30:	2b31      	cmp	r3, #49	; 0x31
 8000e32:	d003      	beq.n	8000e3c <ESP_messageHandler+0x580>
 8000e34:	4b9e      	ldr	r3, [pc, #632]	; (80010b0 <ESP_messageHandler+0x7f4>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b31      	cmp	r3, #49	; 0x31
 8000e3a:	d105      	bne.n	8000e48 <ESP_messageHandler+0x58c>
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e42:	489c      	ldr	r0, [pc, #624]	; (80010b4 <ESP_messageHandler+0x7f8>)
 8000e44:	f004 fb02 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[23] == '0' || vOutside[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET); 		// Luz Jardín
 8000e48:	4b98      	ldr	r3, [pc, #608]	; (80010ac <ESP_messageHandler+0x7f0>)
 8000e4a:	7ddb      	ldrb	r3, [r3, #23]
 8000e4c:	2b30      	cmp	r3, #48	; 0x30
 8000e4e:	d003      	beq.n	8000e58 <ESP_messageHandler+0x59c>
 8000e50:	4b99      	ldr	r3, [pc, #612]	; (80010b8 <ESP_messageHandler+0x7fc>)
 8000e52:	78db      	ldrb	r3, [r3, #3]
 8000e54:	2b30      	cmp	r3, #48	; 0x30
 8000e56:	d105      	bne.n	8000e64 <ESP_messageHandler+0x5a8>
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2104      	movs	r1, #4
 8000e5c:	4897      	ldr	r0, [pc, #604]	; (80010bc <ESP_messageHandler+0x800>)
 8000e5e:	f004 faf5 	bl	800544c <HAL_GPIO_WritePin>
 8000e62:	e00c      	b.n	8000e7e <ESP_messageHandler+0x5c2>
		else if(vLight[23] == '1' || vOutside[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8000e64:	4b91      	ldr	r3, [pc, #580]	; (80010ac <ESP_messageHandler+0x7f0>)
 8000e66:	7ddb      	ldrb	r3, [r3, #23]
 8000e68:	2b31      	cmp	r3, #49	; 0x31
 8000e6a:	d003      	beq.n	8000e74 <ESP_messageHandler+0x5b8>
 8000e6c:	4b92      	ldr	r3, [pc, #584]	; (80010b8 <ESP_messageHandler+0x7fc>)
 8000e6e:	78db      	ldrb	r3, [r3, #3]
 8000e70:	2b31      	cmp	r3, #49	; 0x31
 8000e72:	d104      	bne.n	8000e7e <ESP_messageHandler+0x5c2>
 8000e74:	2201      	movs	r2, #1
 8000e76:	2104      	movs	r1, #4
 8000e78:	4890      	ldr	r0, [pc, #576]	; (80010bc <ESP_messageHandler+0x800>)
 8000e7a:	f004 fae7 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[24] == '0' || vOutside[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET); 		// Luz Porche
 8000e7e:	4b8b      	ldr	r3, [pc, #556]	; (80010ac <ESP_messageHandler+0x7f0>)
 8000e80:	7e1b      	ldrb	r3, [r3, #24]
 8000e82:	2b30      	cmp	r3, #48	; 0x30
 8000e84:	d003      	beq.n	8000e8e <ESP_messageHandler+0x5d2>
 8000e86:	4b8c      	ldr	r3, [pc, #560]	; (80010b8 <ESP_messageHandler+0x7fc>)
 8000e88:	789b      	ldrb	r3, [r3, #2]
 8000e8a:	2b30      	cmp	r3, #48	; 0x30
 8000e8c:	d105      	bne.n	8000e9a <ESP_messageHandler+0x5de>
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2110      	movs	r1, #16
 8000e92:	488a      	ldr	r0, [pc, #552]	; (80010bc <ESP_messageHandler+0x800>)
 8000e94:	f004 fada 	bl	800544c <HAL_GPIO_WritePin>
 8000e98:	e00c      	b.n	8000eb4 <ESP_messageHandler+0x5f8>
		else if(vLight[24] == '1' || vOutside[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 8000e9a:	4b84      	ldr	r3, [pc, #528]	; (80010ac <ESP_messageHandler+0x7f0>)
 8000e9c:	7e1b      	ldrb	r3, [r3, #24]
 8000e9e:	2b31      	cmp	r3, #49	; 0x31
 8000ea0:	d003      	beq.n	8000eaa <ESP_messageHandler+0x5ee>
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <ESP_messageHandler+0x7fc>)
 8000ea4:	789b      	ldrb	r3, [r3, #2]
 8000ea6:	2b31      	cmp	r3, #49	; 0x31
 8000ea8:	d104      	bne.n	8000eb4 <ESP_messageHandler+0x5f8>
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2110      	movs	r1, #16
 8000eae:	4883      	ldr	r0, [pc, #524]	; (80010bc <ESP_messageHandler+0x800>)
 8000eb0:	f004 facc 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[25] == '0' || vOutside[1] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET); 		// Luz Tendedero
 8000eb4:	4b7d      	ldr	r3, [pc, #500]	; (80010ac <ESP_messageHandler+0x7f0>)
 8000eb6:	7e5b      	ldrb	r3, [r3, #25]
 8000eb8:	2b30      	cmp	r3, #48	; 0x30
 8000eba:	d003      	beq.n	8000ec4 <ESP_messageHandler+0x608>
 8000ebc:	4b7e      	ldr	r3, [pc, #504]	; (80010b8 <ESP_messageHandler+0x7fc>)
 8000ebe:	785b      	ldrb	r3, [r3, #1]
 8000ec0:	2b30      	cmp	r3, #48	; 0x30
 8000ec2:	d106      	bne.n	8000ed2 <ESP_messageHandler+0x616>
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eca:	487a      	ldr	r0, [pc, #488]	; (80010b4 <ESP_messageHandler+0x7f8>)
 8000ecc:	f004 fabe 	bl	800544c <HAL_GPIO_WritePin>
 8000ed0:	e00d      	b.n	8000eee <ESP_messageHandler+0x632>
		else if(vLight[25] == '1' || vOutside[1] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8000ed2:	4b76      	ldr	r3, [pc, #472]	; (80010ac <ESP_messageHandler+0x7f0>)
 8000ed4:	7e5b      	ldrb	r3, [r3, #25]
 8000ed6:	2b31      	cmp	r3, #49	; 0x31
 8000ed8:	d003      	beq.n	8000ee2 <ESP_messageHandler+0x626>
 8000eda:	4b77      	ldr	r3, [pc, #476]	; (80010b8 <ESP_messageHandler+0x7fc>)
 8000edc:	785b      	ldrb	r3, [r3, #1]
 8000ede:	2b31      	cmp	r3, #49	; 0x31
 8000ee0:	d105      	bne.n	8000eee <ESP_messageHandler+0x632>
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee8:	4872      	ldr	r0, [pc, #456]	; (80010b4 <ESP_messageHandler+0x7f8>)
 8000eea:	f004 faaf 	bl	800544c <HAL_GPIO_WritePin>
	}

	// DOORS & WINDOWS
	if (fragment[0] == 'p'){
 8000eee:	4b74      	ldr	r3, [pc, #464]	; (80010c0 <ESP_messageHandler+0x804>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b70      	cmp	r3, #112	; 0x70
 8000ef4:	d107      	bne.n	8000f06 <ESP_messageHandler+0x64a>
		UART_send("PUERTAS Y VENTANAS (PUERTA PARCELA)\n", PC_UART);
 8000ef6:	4973      	ldr	r1, [pc, #460]	; (80010c4 <ESP_messageHandler+0x808>)
 8000ef8:	4873      	ldr	r0, [pc, #460]	; (80010c8 <ESP_messageHandler+0x80c>)
 8000efa:	f001 f97f 	bl	80021fc <UART_send>
		vWindow[0] = textrc[28]; 	// P. Parcela
 8000efe:	4b73      	ldr	r3, [pc, #460]	; (80010cc <ESP_messageHandler+0x810>)
 8000f00:	7f1a      	ldrb	r2, [r3, #28]
 8000f02:	4b73      	ldr	r3, [pc, #460]	; (80010d0 <ESP_messageHandler+0x814>)
 8000f04:	701a      	strb	r2, [r3, #0]
	}
	if (fragment[0] == 'g'){
 8000f06:	4b6e      	ldr	r3, [pc, #440]	; (80010c0 <ESP_messageHandler+0x804>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b67      	cmp	r3, #103	; 0x67
 8000f0c:	d107      	bne.n	8000f1e <ESP_messageHandler+0x662>
		UART_send("PUERTAS Y VENTANAS (PUERTA GARAJE)\n", PC_UART);
 8000f0e:	496d      	ldr	r1, [pc, #436]	; (80010c4 <ESP_messageHandler+0x808>)
 8000f10:	4870      	ldr	r0, [pc, #448]	; (80010d4 <ESP_messageHandler+0x818>)
 8000f12:	f001 f973 	bl	80021fc <UART_send>
		vWindow[1] = textrc[31]; 	// P. Garaje
 8000f16:	4b6d      	ldr	r3, [pc, #436]	; (80010cc <ESP_messageHandler+0x810>)
 8000f18:	7fda      	ldrb	r2, [r3, #31]
 8000f1a:	4b6d      	ldr	r3, [pc, #436]	; (80010d0 <ESP_messageHandler+0x814>)
 8000f1c:	705a      	strb	r2, [r3, #1]
	}
	if (fragment[0] == 'l'){
 8000f1e:	4b68      	ldr	r3, [pc, #416]	; (80010c0 <ESP_messageHandler+0x804>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b6c      	cmp	r3, #108	; 0x6c
 8000f24:	d108      	bne.n	8000f38 <ESP_messageHandler+0x67c>
		UART_send("PUERTAS Y VENTANAS (VENTANA SALÓN)\n", PC_UART);
 8000f26:	4967      	ldr	r1, [pc, #412]	; (80010c4 <ESP_messageHandler+0x808>)
 8000f28:	486b      	ldr	r0, [pc, #428]	; (80010d8 <ESP_messageHandler+0x81c>)
 8000f2a:	f001 f967 	bl	80021fc <UART_send>
		vWindow[2] = textrc[34]; 	// V. Salón
 8000f2e:	4b67      	ldr	r3, [pc, #412]	; (80010cc <ESP_messageHandler+0x810>)
 8000f30:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000f34:	4b66      	ldr	r3, [pc, #408]	; (80010d0 <ESP_messageHandler+0x814>)
 8000f36:	709a      	strb	r2, [r3, #2]
	}
	if (fragment[0] == 'd'){
 8000f38:	4b61      	ldr	r3, [pc, #388]	; (80010c0 <ESP_messageHandler+0x804>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b64      	cmp	r3, #100	; 0x64
 8000f3e:	d108      	bne.n	8000f52 <ESP_messageHandler+0x696>
		UART_send("PUERTAS Y VENTANAS (VENTANA DORMITORIO)\n", PC_UART);
 8000f40:	4960      	ldr	r1, [pc, #384]	; (80010c4 <ESP_messageHandler+0x808>)
 8000f42:	4866      	ldr	r0, [pc, #408]	; (80010dc <ESP_messageHandler+0x820>)
 8000f44:	f001 f95a 	bl	80021fc <UART_send>
		vWindow[3] = textrc[37]; 	// V. Dormitorio
 8000f48:	4b60      	ldr	r3, [pc, #384]	; (80010cc <ESP_messageHandler+0x810>)
 8000f4a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000f4e:	4b60      	ldr	r3, [pc, #384]	; (80010d0 <ESP_messageHandler+0x814>)
 8000f50:	70da      	strb	r2, [r3, #3]
	}
	if (fragment[0] == 'o'){
 8000f52:	4b5b      	ldr	r3, [pc, #364]	; (80010c0 <ESP_messageHandler+0x804>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b6f      	cmp	r3, #111	; 0x6f
 8000f58:	d108      	bne.n	8000f6c <ESP_messageHandler+0x6b0>
		UART_send("PUERTAS Y VENTANAS (VENTANA OFICINA)\n", PC_UART);
 8000f5a:	495a      	ldr	r1, [pc, #360]	; (80010c4 <ESP_messageHandler+0x808>)
 8000f5c:	4860      	ldr	r0, [pc, #384]	; (80010e0 <ESP_messageHandler+0x824>)
 8000f5e:	f001 f94d 	bl	80021fc <UART_send>
		vWindow[4] = textrc[40]; 	// V. Oficina
 8000f62:	4b5a      	ldr	r3, [pc, #360]	; (80010cc <ESP_messageHandler+0x810>)
 8000f64:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000f68:	4b59      	ldr	r3, [pc, #356]	; (80010d0 <ESP_messageHandler+0x814>)
 8000f6a:	711a      	strb	r2, [r3, #4]
	}

	// WEATHER
	if (fragment[0] == 't'){
 8000f6c:	4b54      	ldr	r3, [pc, #336]	; (80010c0 <ESP_messageHandler+0x804>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b74      	cmp	r3, #116	; 0x74
 8000f72:	d133      	bne.n	8000fdc <ESP_messageHandler+0x720>
		UART_send("TIEMPO\n", PC_UART);
 8000f74:	4953      	ldr	r1, [pc, #332]	; (80010c4 <ESP_messageHandler+0x808>)
 8000f76:	485b      	ldr	r0, [pc, #364]	; (80010e4 <ESP_messageHandler+0x828>)
 8000f78:	f001 f940 	bl	80021fc <UART_send>
		vWeather[0] = textrc[28]; 	// Vent. Salón
 8000f7c:	4b53      	ldr	r3, [pc, #332]	; (80010cc <ESP_messageHandler+0x810>)
 8000f7e:	7f1a      	ldrb	r2, [r3, #28]
 8000f80:	4b59      	ldr	r3, [pc, #356]	; (80010e8 <ESP_messageHandler+0x82c>)
 8000f82:	701a      	strb	r2, [r3, #0]
		vWeather[1] = textrc[31]; 	// Vent. Dormitorio
 8000f84:	4b51      	ldr	r3, [pc, #324]	; (80010cc <ESP_messageHandler+0x810>)
 8000f86:	7fda      	ldrb	r2, [r3, #31]
 8000f88:	4b57      	ldr	r3, [pc, #348]	; (80010e8 <ESP_messageHandler+0x82c>)
 8000f8a:	705a      	strb	r2, [r3, #1]
		vWeather[2] = textrc[34]; 	// Vent. Oficina
 8000f8c:	4b4f      	ldr	r3, [pc, #316]	; (80010cc <ESP_messageHandler+0x810>)
 8000f8e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000f92:	4b55      	ldr	r3, [pc, #340]	; (80010e8 <ESP_messageHandler+0x82c>)
 8000f94:	709a      	strb	r2, [r3, #2]
		vWeather[3] = textrc[37]; 	// Calefacción
 8000f96:	4b4d      	ldr	r3, [pc, #308]	; (80010cc <ESP_messageHandler+0x810>)
 8000f98:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000f9c:	4b52      	ldr	r3, [pc, #328]	; (80010e8 <ESP_messageHandler+0x82c>)
 8000f9e:	70da      	strb	r2, [r3, #3]
		vWeather[4] = textrc[40]; 	// Automático
 8000fa0:	4b4a      	ldr	r3, [pc, #296]	; (80010cc <ESP_messageHandler+0x810>)
 8000fa2:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000fa6:	4b50      	ldr	r3, [pc, #320]	; (80010e8 <ESP_messageHandler+0x82c>)
 8000fa8:	711a      	strb	r2, [r3, #4]

		if(vWeather[4] == '0'){
 8000faa:	4b4f      	ldr	r3, [pc, #316]	; (80010e8 <ESP_messageHandler+0x82c>)
 8000fac:	791b      	ldrb	r3, [r3, #4]
 8000fae:	2b30      	cmp	r3, #48	; 0x30
 8000fb0:	d114      	bne.n	8000fdc <ESP_messageHandler+0x720>
			if(vWeather[3] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);		// Calefacción
 8000fb2:	4b4d      	ldr	r3, [pc, #308]	; (80010e8 <ESP_messageHandler+0x82c>)
 8000fb4:	78db      	ldrb	r3, [r3, #3]
 8000fb6:	2b30      	cmp	r3, #48	; 0x30
 8000fb8:	d106      	bne.n	8000fc8 <ESP_messageHandler+0x70c>
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc0:	484a      	ldr	r0, [pc, #296]	; (80010ec <ESP_messageHandler+0x830>)
 8000fc2:	f004 fa43 	bl	800544c <HAL_GPIO_WritePin>
 8000fc6:	e009      	b.n	8000fdc <ESP_messageHandler+0x720>
			else if(vWeather[3] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 8000fc8:	4b47      	ldr	r3, [pc, #284]	; (80010e8 <ESP_messageHandler+0x82c>)
 8000fca:	78db      	ldrb	r3, [r3, #3]
 8000fcc:	2b31      	cmp	r3, #49	; 0x31
 8000fce:	d105      	bne.n	8000fdc <ESP_messageHandler+0x720>
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd6:	4845      	ldr	r0, [pc, #276]	; (80010ec <ESP_messageHandler+0x830>)
 8000fd8:	f004 fa38 	bl	800544c <HAL_GPIO_WritePin>
		}
    }

	// OUTSIDE
	if (fragment[0] == 'e'){
 8000fdc:	4b38      	ldr	r3, [pc, #224]	; (80010c0 <ESP_messageHandler+0x804>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b65      	cmp	r3, #101	; 0x65
 8000fe2:	f040 8094 	bne.w	800110e <ESP_messageHandler+0x852>
		UART_send("LUCES (EXTERIOR)\n", PC_UART);
 8000fe6:	4937      	ldr	r1, [pc, #220]	; (80010c4 <ESP_messageHandler+0x808>)
 8000fe8:	4841      	ldr	r0, [pc, #260]	; (80010f0 <ESP_messageHandler+0x834>)
 8000fea:	f001 f907 	bl	80021fc <UART_send>
		//vExt[0] = textrc[28]; 	// Toldo Tendedero
		vOutside[1] = textrc[31]; 	// Luz Tendedero
 8000fee:	4b37      	ldr	r3, [pc, #220]	; (80010cc <ESP_messageHandler+0x810>)
 8000ff0:	7fda      	ldrb	r2, [r3, #31]
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <ESP_messageHandler+0x7fc>)
 8000ff4:	705a      	strb	r2, [r3, #1]
		vOutside[2] = textrc[34]; 	// Luz Porche
 8000ff6:	4b35      	ldr	r3, [pc, #212]	; (80010cc <ESP_messageHandler+0x810>)
 8000ff8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000ffc:	4b2e      	ldr	r3, [pc, #184]	; (80010b8 <ESP_messageHandler+0x7fc>)
 8000ffe:	709a      	strb	r2, [r3, #2]
		vOutside[3] = textrc[37]; 	// Luz Jardín
 8001000:	4b32      	ldr	r3, [pc, #200]	; (80010cc <ESP_messageHandler+0x810>)
 8001002:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001006:	4b2c      	ldr	r3, [pc, #176]	; (80010b8 <ESP_messageHandler+0x7fc>)
 8001008:	70da      	strb	r2, [r3, #3]
		//vExt[4] = textrc[40]; 	// Puerta Parcela
		vOutside[5] = textrc[43]; 	// Automático
 800100a:	4b30      	ldr	r3, [pc, #192]	; (80010cc <ESP_messageHandler+0x810>)
 800100c:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8001010:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <ESP_messageHandler+0x7fc>)
 8001012:	715a      	strb	r2, [r3, #5]
		vOutside[6] = textrc[46]; 	// Ropa tendida
 8001014:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <ESP_messageHandler+0x810>)
 8001016:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800101a:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <ESP_messageHandler+0x7fc>)
 800101c:	719a      	strb	r2, [r3, #6]

		if(vLight[25] == '0' || vOutside[1] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET); 		// Luz Tendedero
 800101e:	4b23      	ldr	r3, [pc, #140]	; (80010ac <ESP_messageHandler+0x7f0>)
 8001020:	7e5b      	ldrb	r3, [r3, #25]
 8001022:	2b30      	cmp	r3, #48	; 0x30
 8001024:	d003      	beq.n	800102e <ESP_messageHandler+0x772>
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <ESP_messageHandler+0x7fc>)
 8001028:	785b      	ldrb	r3, [r3, #1]
 800102a:	2b30      	cmp	r3, #48	; 0x30
 800102c:	d106      	bne.n	800103c <ESP_messageHandler+0x780>
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001034:	481f      	ldr	r0, [pc, #124]	; (80010b4 <ESP_messageHandler+0x7f8>)
 8001036:	f004 fa09 	bl	800544c <HAL_GPIO_WritePin>
 800103a:	e00d      	b.n	8001058 <ESP_messageHandler+0x79c>
		else if(vLight[25] == '1' || vOutside[1] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <ESP_messageHandler+0x7f0>)
 800103e:	7e5b      	ldrb	r3, [r3, #25]
 8001040:	2b31      	cmp	r3, #49	; 0x31
 8001042:	d003      	beq.n	800104c <ESP_messageHandler+0x790>
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <ESP_messageHandler+0x7fc>)
 8001046:	785b      	ldrb	r3, [r3, #1]
 8001048:	2b31      	cmp	r3, #49	; 0x31
 800104a:	d105      	bne.n	8001058 <ESP_messageHandler+0x79c>
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001052:	4818      	ldr	r0, [pc, #96]	; (80010b4 <ESP_messageHandler+0x7f8>)
 8001054:	f004 f9fa 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[24] == '0' || vOutside[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET); 		// Luz Porche
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <ESP_messageHandler+0x7f0>)
 800105a:	7e1b      	ldrb	r3, [r3, #24]
 800105c:	2b30      	cmp	r3, #48	; 0x30
 800105e:	d003      	beq.n	8001068 <ESP_messageHandler+0x7ac>
 8001060:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <ESP_messageHandler+0x7fc>)
 8001062:	789b      	ldrb	r3, [r3, #2]
 8001064:	2b30      	cmp	r3, #48	; 0x30
 8001066:	d105      	bne.n	8001074 <ESP_messageHandler+0x7b8>
 8001068:	2200      	movs	r2, #0
 800106a:	2110      	movs	r1, #16
 800106c:	4813      	ldr	r0, [pc, #76]	; (80010bc <ESP_messageHandler+0x800>)
 800106e:	f004 f9ed 	bl	800544c <HAL_GPIO_WritePin>
 8001072:	e00c      	b.n	800108e <ESP_messageHandler+0x7d2>
		else if(vLight[24] == '1' || vOutside[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <ESP_messageHandler+0x7f0>)
 8001076:	7e1b      	ldrb	r3, [r3, #24]
 8001078:	2b31      	cmp	r3, #49	; 0x31
 800107a:	d003      	beq.n	8001084 <ESP_messageHandler+0x7c8>
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <ESP_messageHandler+0x7fc>)
 800107e:	789b      	ldrb	r3, [r3, #2]
 8001080:	2b31      	cmp	r3, #49	; 0x31
 8001082:	d104      	bne.n	800108e <ESP_messageHandler+0x7d2>
 8001084:	2201      	movs	r2, #1
 8001086:	2110      	movs	r1, #16
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <ESP_messageHandler+0x800>)
 800108a:	f004 f9df 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[23] == '0' || vOutside[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET); 		// Luz Jardín
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <ESP_messageHandler+0x7f0>)
 8001090:	7ddb      	ldrb	r3, [r3, #23]
 8001092:	2b30      	cmp	r3, #48	; 0x30
 8001094:	d003      	beq.n	800109e <ESP_messageHandler+0x7e2>
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <ESP_messageHandler+0x7fc>)
 8001098:	78db      	ldrb	r3, [r3, #3]
 800109a:	2b30      	cmp	r3, #48	; 0x30
 800109c:	d12a      	bne.n	80010f4 <ESP_messageHandler+0x838>
 800109e:	2200      	movs	r2, #0
 80010a0:	2104      	movs	r1, #4
 80010a2:	4806      	ldr	r0, [pc, #24]	; (80010bc <ESP_messageHandler+0x800>)
 80010a4:	f004 f9d2 	bl	800544c <HAL_GPIO_WritePin>
 80010a8:	e031      	b.n	800110e <ESP_messageHandler+0x852>
 80010aa:	bf00      	nop
 80010ac:	20000914 	.word	0x20000914
 80010b0:	20000958 	.word	0x20000958
 80010b4:	40020800 	.word	0x40020800
 80010b8:	2000094c 	.word	0x2000094c
 80010bc:	40020c00 	.word	0x40020c00
 80010c0:	200009c8 	.word	0x200009c8
 80010c4:	20000dc0 	.word	0x20000dc0
 80010c8:	08008d9c 	.word	0x08008d9c
 80010cc:	200009d0 	.word	0x200009d0
 80010d0:	2000090c 	.word	0x2000090c
 80010d4:	08008dc4 	.word	0x08008dc4
 80010d8:	08008de8 	.word	0x08008de8
 80010dc:	08008e10 	.word	0x08008e10
 80010e0:	08008e3c 	.word	0x08008e3c
 80010e4:	08008e64 	.word	0x08008e64
 80010e8:	20000930 	.word	0x20000930
 80010ec:	40020400 	.word	0x40020400
 80010f0:	08008e6c 	.word	0x08008e6c
		else if(vLight[23] == '1' || vOutside[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 80010f4:	4b9c      	ldr	r3, [pc, #624]	; (8001368 <ESP_messageHandler+0xaac>)
 80010f6:	7ddb      	ldrb	r3, [r3, #23]
 80010f8:	2b31      	cmp	r3, #49	; 0x31
 80010fa:	d003      	beq.n	8001104 <ESP_messageHandler+0x848>
 80010fc:	4b9b      	ldr	r3, [pc, #620]	; (800136c <ESP_messageHandler+0xab0>)
 80010fe:	78db      	ldrb	r3, [r3, #3]
 8001100:	2b31      	cmp	r3, #49	; 0x31
 8001102:	d104      	bne.n	800110e <ESP_messageHandler+0x852>
 8001104:	2201      	movs	r2, #1
 8001106:	2104      	movs	r1, #4
 8001108:	4899      	ldr	r0, [pc, #612]	; (8001370 <ESP_messageHandler+0xab4>)
 800110a:	f004 f99f 	bl	800544c <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'P'){
 800110e:	4b99      	ldr	r3, [pc, #612]	; (8001374 <ESP_messageHandler+0xab8>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b50      	cmp	r3, #80	; 0x50
 8001114:	d108      	bne.n	8001128 <ESP_messageHandler+0x86c>
		UART_send("PARCELA (EXTERIOR)\n", PC_UART);
 8001116:	4998      	ldr	r1, [pc, #608]	; (8001378 <ESP_messageHandler+0xabc>)
 8001118:	4898      	ldr	r0, [pc, #608]	; (800137c <ESP_messageHandler+0xac0>)
 800111a:	f001 f86f 	bl	80021fc <UART_send>
		//vExt[0] = textrc[28]; 	// Toldo Tendedero
		//vExt[1] = textrc[31]; 	// Luz Tendedero
		//vExt[2] = textrc[34]; 	// Luz Porche
		//vExt[3] = textrc[37]; 	// Luz Jardín
		vOutside[4] = textrc[40]; 	// Puerta Parcela
 800111e:	4b98      	ldr	r3, [pc, #608]	; (8001380 <ESP_messageHandler+0xac4>)
 8001120:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001124:	4b91      	ldr	r3, [pc, #580]	; (800136c <ESP_messageHandler+0xab0>)
 8001126:	711a      	strb	r2, [r3, #4]
	}

	if (fragment[0] == 'R'){
 8001128:	4b92      	ldr	r3, [pc, #584]	; (8001374 <ESP_messageHandler+0xab8>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b52      	cmp	r3, #82	; 0x52
 800112e:	d107      	bne.n	8001140 <ESP_messageHandler+0x884>
		UART_send("TENDEDERO (EXTERIOR)\n", PC_UART);
 8001130:	4991      	ldr	r1, [pc, #580]	; (8001378 <ESP_messageHandler+0xabc>)
 8001132:	4894      	ldr	r0, [pc, #592]	; (8001384 <ESP_messageHandler+0xac8>)
 8001134:	f001 f862 	bl	80021fc <UART_send>
		vOutside[0] = textrc[28]; 	// Toldo Tendedero
 8001138:	4b91      	ldr	r3, [pc, #580]	; (8001380 <ESP_messageHandler+0xac4>)
 800113a:	7f1a      	ldrb	r2, [r3, #28]
 800113c:	4b8b      	ldr	r3, [pc, #556]	; (800136c <ESP_messageHandler+0xab0>)
 800113e:	701a      	strb	r2, [r3, #0]
		//vExt[3] = textrc[37]; 	// Luz Jardín
		//vExt[4] = textrc[40]; 	// Puerta Parcela
	}

	// LIVING ROOM
	if (fragment[0] == 'n'){
 8001140:	4b8c      	ldr	r3, [pc, #560]	; (8001374 <ESP_messageHandler+0xab8>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b6e      	cmp	r3, #110	; 0x6e
 8001146:	f040 809a 	bne.w	800127e <ESP_messageHandler+0x9c2>
		UART_send("SALON \n", PC_UART);
 800114a:	498b      	ldr	r1, [pc, #556]	; (8001378 <ESP_messageHandler+0xabc>)
 800114c:	488e      	ldr	r0, [pc, #568]	; (8001388 <ESP_messageHandler+0xacc>)
 800114e:	f001 f855 	bl	80021fc <UART_send>
		vLiving[0] = textrc[28]; 	// Televisión
 8001152:	4b8b      	ldr	r3, [pc, #556]	; (8001380 <ESP_messageHandler+0xac4>)
 8001154:	7f1a      	ldrb	r2, [r3, #28]
 8001156:	4b8d      	ldr	r3, [pc, #564]	; (800138c <ESP_messageHandler+0xad0>)
 8001158:	701a      	strb	r2, [r3, #0]
		vLiving[1] = textrc[31]; 	// Luz Sala
 800115a:	4b89      	ldr	r3, [pc, #548]	; (8001380 <ESP_messageHandler+0xac4>)
 800115c:	7fda      	ldrb	r2, [r3, #31]
 800115e:	4b8b      	ldr	r3, [pc, #556]	; (800138c <ESP_messageHandler+0xad0>)
 8001160:	705a      	strb	r2, [r3, #1]
		vLiving[2] = textrc[34]; 	// Luz Comedor
 8001162:	4b87      	ldr	r3, [pc, #540]	; (8001380 <ESP_messageHandler+0xac4>)
 8001164:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001168:	4b88      	ldr	r3, [pc, #544]	; (800138c <ESP_messageHandler+0xad0>)
 800116a:	709a      	strb	r2, [r3, #2]
		vLiving[3] = textrc[37]; 	// Luz Ambiente
 800116c:	4b84      	ldr	r3, [pc, #528]	; (8001380 <ESP_messageHandler+0xac4>)
 800116e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001172:	4b86      	ldr	r3, [pc, #536]	; (800138c <ESP_messageHandler+0xad0>)
 8001174:	70da      	strb	r2, [r3, #3]
		vLiving[4] = textrc[40]; 	// Luz Recibidor
 8001176:	4b82      	ldr	r3, [pc, #520]	; (8001380 <ESP_messageHandler+0xac4>)
 8001178:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800117c:	4b83      	ldr	r3, [pc, #524]	; (800138c <ESP_messageHandler+0xad0>)
 800117e:	711a      	strb	r2, [r3, #4]
		//vSal[5] = textrc[43]; 	// V. Salón

		if(vLiving[0] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET); 							// Televisión
 8001180:	4b82      	ldr	r3, [pc, #520]	; (800138c <ESP_messageHandler+0xad0>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b30      	cmp	r3, #48	; 0x30
 8001186:	d105      	bne.n	8001194 <ESP_messageHandler+0x8d8>
 8001188:	2200      	movs	r2, #0
 800118a:	2180      	movs	r1, #128	; 0x80
 800118c:	4880      	ldr	r0, [pc, #512]	; (8001390 <ESP_messageHandler+0xad4>)
 800118e:	f004 f95d 	bl	800544c <HAL_GPIO_WritePin>
 8001192:	e008      	b.n	80011a6 <ESP_messageHandler+0x8ea>
		else if(vLiving[0] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 8001194:	4b7d      	ldr	r3, [pc, #500]	; (800138c <ESP_messageHandler+0xad0>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b31      	cmp	r3, #49	; 0x31
 800119a:	d104      	bne.n	80011a6 <ESP_messageHandler+0x8ea>
 800119c:	2201      	movs	r2, #1
 800119e:	2180      	movs	r1, #128	; 0x80
 80011a0:	487b      	ldr	r0, [pc, #492]	; (8001390 <ESP_messageHandler+0xad4>)
 80011a2:	f004 f953 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[0] == '0' || vLiving[1] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, RESET); 		// Luz Sala
 80011a6:	4b70      	ldr	r3, [pc, #448]	; (8001368 <ESP_messageHandler+0xaac>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b30      	cmp	r3, #48	; 0x30
 80011ac:	d003      	beq.n	80011b6 <ESP_messageHandler+0x8fa>
 80011ae:	4b77      	ldr	r3, [pc, #476]	; (800138c <ESP_messageHandler+0xad0>)
 80011b0:	785b      	ldrb	r3, [r3, #1]
 80011b2:	2b30      	cmp	r3, #48	; 0x30
 80011b4:	d105      	bne.n	80011c2 <ESP_messageHandler+0x906>
 80011b6:	2200      	movs	r2, #0
 80011b8:	2108      	movs	r1, #8
 80011ba:	486d      	ldr	r0, [pc, #436]	; (8001370 <ESP_messageHandler+0xab4>)
 80011bc:	f004 f946 	bl	800544c <HAL_GPIO_WritePin>
 80011c0:	e00c      	b.n	80011dc <ESP_messageHandler+0x920>
		else if(vLight[0] == '1' || vLiving[1] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, SET);
 80011c2:	4b69      	ldr	r3, [pc, #420]	; (8001368 <ESP_messageHandler+0xaac>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b31      	cmp	r3, #49	; 0x31
 80011c8:	d003      	beq.n	80011d2 <ESP_messageHandler+0x916>
 80011ca:	4b70      	ldr	r3, [pc, #448]	; (800138c <ESP_messageHandler+0xad0>)
 80011cc:	785b      	ldrb	r3, [r3, #1]
 80011ce:	2b31      	cmp	r3, #49	; 0x31
 80011d0:	d104      	bne.n	80011dc <ESP_messageHandler+0x920>
 80011d2:	2201      	movs	r2, #1
 80011d4:	2108      	movs	r1, #8
 80011d6:	4866      	ldr	r0, [pc, #408]	; (8001370 <ESP_messageHandler+0xab4>)
 80011d8:	f004 f938 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[1] == '0' || vLiving[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET); 		// Luz Comedor
 80011dc:	4b62      	ldr	r3, [pc, #392]	; (8001368 <ESP_messageHandler+0xaac>)
 80011de:	785b      	ldrb	r3, [r3, #1]
 80011e0:	2b30      	cmp	r3, #48	; 0x30
 80011e2:	d003      	beq.n	80011ec <ESP_messageHandler+0x930>
 80011e4:	4b69      	ldr	r3, [pc, #420]	; (800138c <ESP_messageHandler+0xad0>)
 80011e6:	789b      	ldrb	r3, [r3, #2]
 80011e8:	2b30      	cmp	r3, #48	; 0x30
 80011ea:	d105      	bne.n	80011f8 <ESP_messageHandler+0x93c>
 80011ec:	2200      	movs	r2, #0
 80011ee:	2102      	movs	r1, #2
 80011f0:	485f      	ldr	r0, [pc, #380]	; (8001370 <ESP_messageHandler+0xab4>)
 80011f2:	f004 f92b 	bl	800544c <HAL_GPIO_WritePin>
 80011f6:	e00c      	b.n	8001212 <ESP_messageHandler+0x956>
		else if(vLight[1] == '1' || vLiving[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, SET);
 80011f8:	4b5b      	ldr	r3, [pc, #364]	; (8001368 <ESP_messageHandler+0xaac>)
 80011fa:	785b      	ldrb	r3, [r3, #1]
 80011fc:	2b31      	cmp	r3, #49	; 0x31
 80011fe:	d003      	beq.n	8001208 <ESP_messageHandler+0x94c>
 8001200:	4b62      	ldr	r3, [pc, #392]	; (800138c <ESP_messageHandler+0xad0>)
 8001202:	789b      	ldrb	r3, [r3, #2]
 8001204:	2b31      	cmp	r3, #49	; 0x31
 8001206:	d104      	bne.n	8001212 <ESP_messageHandler+0x956>
 8001208:	2201      	movs	r2, #1
 800120a:	2102      	movs	r1, #2
 800120c:	4858      	ldr	r0, [pc, #352]	; (8001370 <ESP_messageHandler+0xab4>)
 800120e:	f004 f91d 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[2] == '0' || vLiving[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, RESET); 		// Luz Ambiente
 8001212:	4b55      	ldr	r3, [pc, #340]	; (8001368 <ESP_messageHandler+0xaac>)
 8001214:	789b      	ldrb	r3, [r3, #2]
 8001216:	2b30      	cmp	r3, #48	; 0x30
 8001218:	d003      	beq.n	8001222 <ESP_messageHandler+0x966>
 800121a:	4b5c      	ldr	r3, [pc, #368]	; (800138c <ESP_messageHandler+0xad0>)
 800121c:	78db      	ldrb	r3, [r3, #3]
 800121e:	2b30      	cmp	r3, #48	; 0x30
 8001220:	d105      	bne.n	800122e <ESP_messageHandler+0x972>
 8001222:	2200      	movs	r2, #0
 8001224:	2120      	movs	r1, #32
 8001226:	4852      	ldr	r0, [pc, #328]	; (8001370 <ESP_messageHandler+0xab4>)
 8001228:	f004 f910 	bl	800544c <HAL_GPIO_WritePin>
 800122c:	e00c      	b.n	8001248 <ESP_messageHandler+0x98c>
		else if(vLight[2] == '1' || vLiving[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, SET);
 800122e:	4b4e      	ldr	r3, [pc, #312]	; (8001368 <ESP_messageHandler+0xaac>)
 8001230:	789b      	ldrb	r3, [r3, #2]
 8001232:	2b31      	cmp	r3, #49	; 0x31
 8001234:	d003      	beq.n	800123e <ESP_messageHandler+0x982>
 8001236:	4b55      	ldr	r3, [pc, #340]	; (800138c <ESP_messageHandler+0xad0>)
 8001238:	78db      	ldrb	r3, [r3, #3]
 800123a:	2b31      	cmp	r3, #49	; 0x31
 800123c:	d104      	bne.n	8001248 <ESP_messageHandler+0x98c>
 800123e:	2201      	movs	r2, #1
 8001240:	2120      	movs	r1, #32
 8001242:	484b      	ldr	r0, [pc, #300]	; (8001370 <ESP_messageHandler+0xab4>)
 8001244:	f004 f902 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[3] == '0' || vLiving[4] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET); 		// Luz Recibidor
 8001248:	4b47      	ldr	r3, [pc, #284]	; (8001368 <ESP_messageHandler+0xaac>)
 800124a:	78db      	ldrb	r3, [r3, #3]
 800124c:	2b30      	cmp	r3, #48	; 0x30
 800124e:	d003      	beq.n	8001258 <ESP_messageHandler+0x99c>
 8001250:	4b4e      	ldr	r3, [pc, #312]	; (800138c <ESP_messageHandler+0xad0>)
 8001252:	791b      	ldrb	r3, [r3, #4]
 8001254:	2b30      	cmp	r3, #48	; 0x30
 8001256:	d105      	bne.n	8001264 <ESP_messageHandler+0x9a8>
 8001258:	2200      	movs	r2, #0
 800125a:	2101      	movs	r1, #1
 800125c:	4844      	ldr	r0, [pc, #272]	; (8001370 <ESP_messageHandler+0xab4>)
 800125e:	f004 f8f5 	bl	800544c <HAL_GPIO_WritePin>
 8001262:	e00c      	b.n	800127e <ESP_messageHandler+0x9c2>
		else if(vLight[3] == '1' || vLiving[4] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 8001264:	4b40      	ldr	r3, [pc, #256]	; (8001368 <ESP_messageHandler+0xaac>)
 8001266:	78db      	ldrb	r3, [r3, #3]
 8001268:	2b31      	cmp	r3, #49	; 0x31
 800126a:	d003      	beq.n	8001274 <ESP_messageHandler+0x9b8>
 800126c:	4b47      	ldr	r3, [pc, #284]	; (800138c <ESP_messageHandler+0xad0>)
 800126e:	791b      	ldrb	r3, [r3, #4]
 8001270:	2b31      	cmp	r3, #49	; 0x31
 8001272:	d104      	bne.n	800127e <ESP_messageHandler+0x9c2>
 8001274:	2201      	movs	r2, #1
 8001276:	2101      	movs	r1, #1
 8001278:	483d      	ldr	r0, [pc, #244]	; (8001370 <ESP_messageHandler+0xab4>)
 800127a:	f004 f8e7 	bl	800544c <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'N'){
 800127e:	4b3d      	ldr	r3, [pc, #244]	; (8001374 <ESP_messageHandler+0xab8>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b4e      	cmp	r3, #78	; 0x4e
 8001284:	d108      	bne.n	8001298 <ESP_messageHandler+0x9dc>
			UART_send("V. SALON (SALON) \n", PC_UART);
 8001286:	493c      	ldr	r1, [pc, #240]	; (8001378 <ESP_messageHandler+0xabc>)
 8001288:	4842      	ldr	r0, [pc, #264]	; (8001394 <ESP_messageHandler+0xad8>)
 800128a:	f000 ffb7 	bl	80021fc <UART_send>
			//vSal[0] = textrc[28]; 	// Televisión
			//vSal[1] = textrc[31]; 	// Luz Sala
			//vSal[2] = textrc[34]; 	// Luz Comedor
			//vSal[3] = textrc[37]; 	// Luz Ambiente
			//vSal[4] = textrc[40]; 	// Luz Recibidor
			vLiving[5] = textrc[43]; 	// V. Salón
 800128e:	4b3c      	ldr	r3, [pc, #240]	; (8001380 <ESP_messageHandler+0xac4>)
 8001290:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8001294:	4b3d      	ldr	r3, [pc, #244]	; (800138c <ESP_messageHandler+0xad0>)
 8001296:	715a      	strb	r2, [r3, #5]
	}

	// KITCHEN
	if (fragment[0] == 'c'){
 8001298:	4b36      	ldr	r3, [pc, #216]	; (8001374 <ESP_messageHandler+0xab8>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b63      	cmp	r3, #99	; 0x63
 800129e:	d145      	bne.n	800132c <ESP_messageHandler+0xa70>
		UART_send("COCINA \n", PC_UART);
 80012a0:	4935      	ldr	r1, [pc, #212]	; (8001378 <ESP_messageHandler+0xabc>)
 80012a2:	483d      	ldr	r0, [pc, #244]	; (8001398 <ESP_messageHandler+0xadc>)
 80012a4:	f000 ffaa 	bl	80021fc <UART_send>
		vKitchen[0] = textrc[28]; 	// Luz Cocina
 80012a8:	4b35      	ldr	r3, [pc, #212]	; (8001380 <ESP_messageHandler+0xac4>)
 80012aa:	7f1a      	ldrb	r2, [r3, #28]
 80012ac:	4b3b      	ldr	r3, [pc, #236]	; (800139c <ESP_messageHandler+0xae0>)
 80012ae:	701a      	strb	r2, [r3, #0]
		vKitchen[1] = textrc[31]; 	// Luz Fregadero
 80012b0:	4b33      	ldr	r3, [pc, #204]	; (8001380 <ESP_messageHandler+0xac4>)
 80012b2:	7fda      	ldrb	r2, [r3, #31]
 80012b4:	4b39      	ldr	r3, [pc, #228]	; (800139c <ESP_messageHandler+0xae0>)
 80012b6:	705a      	strb	r2, [r3, #1]

		if(vLight[4] == '0' || vKitchen[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET); 		// Luz Cocina
 80012b8:	4b2b      	ldr	r3, [pc, #172]	; (8001368 <ESP_messageHandler+0xaac>)
 80012ba:	791b      	ldrb	r3, [r3, #4]
 80012bc:	2b30      	cmp	r3, #48	; 0x30
 80012be:	d003      	beq.n	80012c8 <ESP_messageHandler+0xa0c>
 80012c0:	4b36      	ldr	r3, [pc, #216]	; (800139c <ESP_messageHandler+0xae0>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b30      	cmp	r3, #48	; 0x30
 80012c6:	d106      	bne.n	80012d6 <ESP_messageHandler+0xa1a>
 80012c8:	2200      	movs	r2, #0
 80012ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ce:	4834      	ldr	r0, [pc, #208]	; (80013a0 <ESP_messageHandler+0xae4>)
 80012d0:	f004 f8bc 	bl	800544c <HAL_GPIO_WritePin>
 80012d4:	e00d      	b.n	80012f2 <ESP_messageHandler+0xa36>
		else if(vLight[4] == '1' || vKitchen[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <ESP_messageHandler+0xaac>)
 80012d8:	791b      	ldrb	r3, [r3, #4]
 80012da:	2b31      	cmp	r3, #49	; 0x31
 80012dc:	d003      	beq.n	80012e6 <ESP_messageHandler+0xa2a>
 80012de:	4b2f      	ldr	r3, [pc, #188]	; (800139c <ESP_messageHandler+0xae0>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b31      	cmp	r3, #49	; 0x31
 80012e4:	d105      	bne.n	80012f2 <ESP_messageHandler+0xa36>
 80012e6:	2201      	movs	r2, #1
 80012e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ec:	482c      	ldr	r0, [pc, #176]	; (80013a0 <ESP_messageHandler+0xae4>)
 80012ee:	f004 f8ad 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[5] == '0' || vKitchen[1] == '0') HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET); 		// Luz Fregadero
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <ESP_messageHandler+0xaac>)
 80012f4:	795b      	ldrb	r3, [r3, #5]
 80012f6:	2b30      	cmp	r3, #48	; 0x30
 80012f8:	d003      	beq.n	8001302 <ESP_messageHandler+0xa46>
 80012fa:	4b28      	ldr	r3, [pc, #160]	; (800139c <ESP_messageHandler+0xae0>)
 80012fc:	785b      	ldrb	r3, [r3, #1]
 80012fe:	2b30      	cmp	r3, #48	; 0x30
 8001300:	d106      	bne.n	8001310 <ESP_messageHandler+0xa54>
 8001302:	2200      	movs	r2, #0
 8001304:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001308:	4826      	ldr	r0, [pc, #152]	; (80013a4 <ESP_messageHandler+0xae8>)
 800130a:	f004 f89f 	bl	800544c <HAL_GPIO_WritePin>
 800130e:	e00d      	b.n	800132c <ESP_messageHandler+0xa70>
		else if(vLight[5] == '1' || vKitchen[1] == '1')HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <ESP_messageHandler+0xaac>)
 8001312:	795b      	ldrb	r3, [r3, #5]
 8001314:	2b31      	cmp	r3, #49	; 0x31
 8001316:	d003      	beq.n	8001320 <ESP_messageHandler+0xa64>
 8001318:	4b20      	ldr	r3, [pc, #128]	; (800139c <ESP_messageHandler+0xae0>)
 800131a:	785b      	ldrb	r3, [r3, #1]
 800131c:	2b31      	cmp	r3, #49	; 0x31
 800131e:	d105      	bne.n	800132c <ESP_messageHandler+0xa70>
 8001320:	2201      	movs	r2, #1
 8001322:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001326:	481f      	ldr	r0, [pc, #124]	; (80013a4 <ESP_messageHandler+0xae8>)
 8001328:	f004 f890 	bl	800544c <HAL_GPIO_WritePin>
	}

	// BATHROOM
	if (fragment[0] == 'b'){
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <ESP_messageHandler+0xab8>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b62      	cmp	r3, #98	; 0x62
 8001332:	d165      	bne.n	8001400 <ESP_messageHandler+0xb44>
		UART_send("BAÑO \n", PC_UART);
 8001334:	4910      	ldr	r1, [pc, #64]	; (8001378 <ESP_messageHandler+0xabc>)
 8001336:	481c      	ldr	r0, [pc, #112]	; (80013a8 <ESP_messageHandler+0xaec>)
 8001338:	f000 ff60 	bl	80021fc <UART_send>
		vBath[0] = textrc[28]; 	// Luz Baño
 800133c:	4b10      	ldr	r3, [pc, #64]	; (8001380 <ESP_messageHandler+0xac4>)
 800133e:	7f1a      	ldrb	r2, [r3, #28]
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <ESP_messageHandler+0xaf0>)
 8001342:	701a      	strb	r2, [r3, #0]
		vBath[1] = textrc[31]; 	// Luz Espejo
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <ESP_messageHandler+0xac4>)
 8001346:	7fda      	ldrb	r2, [r3, #31]
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <ESP_messageHandler+0xaf0>)
 800134a:	705a      	strb	r2, [r3, #1]

		if(vLight[6] == '0' || vBath[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, RESET); 		// Luz Baño
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <ESP_messageHandler+0xaac>)
 800134e:	799b      	ldrb	r3, [r3, #6]
 8001350:	2b30      	cmp	r3, #48	; 0x30
 8001352:	d003      	beq.n	800135c <ESP_messageHandler+0xaa0>
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <ESP_messageHandler+0xaf0>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b30      	cmp	r3, #48	; 0x30
 800135a:	d129      	bne.n	80013b0 <ESP_messageHandler+0xaf4>
 800135c:	2200      	movs	r2, #0
 800135e:	2140      	movs	r1, #64	; 0x40
 8001360:	4803      	ldr	r0, [pc, #12]	; (8001370 <ESP_messageHandler+0xab4>)
 8001362:	f004 f873 	bl	800544c <HAL_GPIO_WritePin>
 8001366:	e030      	b.n	80013ca <ESP_messageHandler+0xb0e>
 8001368:	20000914 	.word	0x20000914
 800136c:	2000094c 	.word	0x2000094c
 8001370:	40020c00 	.word	0x40020c00
 8001374:	200009c8 	.word	0x200009c8
 8001378:	20000dc0 	.word	0x20000dc0
 800137c:	08008e80 	.word	0x08008e80
 8001380:	200009d0 	.word	0x200009d0
 8001384:	08008e94 	.word	0x08008e94
 8001388:	08008eac 	.word	0x08008eac
 800138c:	20000904 	.word	0x20000904
 8001390:	40020400 	.word	0x40020400
 8001394:	08008eb4 	.word	0x08008eb4
 8001398:	08008ec8 	.word	0x08008ec8
 800139c:	20000954 	.word	0x20000954
 80013a0:	40020800 	.word	0x40020800
 80013a4:	40020000 	.word	0x40020000
 80013a8:	08008ed4 	.word	0x08008ed4
 80013ac:	20000938 	.word	0x20000938
		else if(vLight[6] == '1' || vBath[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, SET);
 80013b0:	4b84      	ldr	r3, [pc, #528]	; (80015c4 <ESP_messageHandler+0xd08>)
 80013b2:	799b      	ldrb	r3, [r3, #6]
 80013b4:	2b31      	cmp	r3, #49	; 0x31
 80013b6:	d003      	beq.n	80013c0 <ESP_messageHandler+0xb04>
 80013b8:	4b83      	ldr	r3, [pc, #524]	; (80015c8 <ESP_messageHandler+0xd0c>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b31      	cmp	r3, #49	; 0x31
 80013be:	d104      	bne.n	80013ca <ESP_messageHandler+0xb0e>
 80013c0:	2201      	movs	r2, #1
 80013c2:	2140      	movs	r1, #64	; 0x40
 80013c4:	4881      	ldr	r0, [pc, #516]	; (80015cc <ESP_messageHandler+0xd10>)
 80013c6:	f004 f841 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[7] == '0' || vBath[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET); 		// Luz Espejo
 80013ca:	4b7e      	ldr	r3, [pc, #504]	; (80015c4 <ESP_messageHandler+0xd08>)
 80013cc:	79db      	ldrb	r3, [r3, #7]
 80013ce:	2b30      	cmp	r3, #48	; 0x30
 80013d0:	d003      	beq.n	80013da <ESP_messageHandler+0xb1e>
 80013d2:	4b7d      	ldr	r3, [pc, #500]	; (80015c8 <ESP_messageHandler+0xd0c>)
 80013d4:	785b      	ldrb	r3, [r3, #1]
 80013d6:	2b30      	cmp	r3, #48	; 0x30
 80013d8:	d105      	bne.n	80013e6 <ESP_messageHandler+0xb2a>
 80013da:	2200      	movs	r2, #0
 80013dc:	2108      	movs	r1, #8
 80013de:	487c      	ldr	r0, [pc, #496]	; (80015d0 <ESP_messageHandler+0xd14>)
 80013e0:	f004 f834 	bl	800544c <HAL_GPIO_WritePin>
 80013e4:	e00c      	b.n	8001400 <ESP_messageHandler+0xb44>
		else if(vLight[7] == '1' || vBath[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 80013e6:	4b77      	ldr	r3, [pc, #476]	; (80015c4 <ESP_messageHandler+0xd08>)
 80013e8:	79db      	ldrb	r3, [r3, #7]
 80013ea:	2b31      	cmp	r3, #49	; 0x31
 80013ec:	d003      	beq.n	80013f6 <ESP_messageHandler+0xb3a>
 80013ee:	4b76      	ldr	r3, [pc, #472]	; (80015c8 <ESP_messageHandler+0xd0c>)
 80013f0:	785b      	ldrb	r3, [r3, #1]
 80013f2:	2b31      	cmp	r3, #49	; 0x31
 80013f4:	d104      	bne.n	8001400 <ESP_messageHandler+0xb44>
 80013f6:	2201      	movs	r2, #1
 80013f8:	2108      	movs	r1, #8
 80013fa:	4875      	ldr	r0, [pc, #468]	; (80015d0 <ESP_messageHandler+0xd14>)
 80013fc:	f004 f826 	bl	800544c <HAL_GPIO_WritePin>
	}

	// BEDROOM
	if (fragment[0] == 'r'){
 8001400:	4b74      	ldr	r3, [pc, #464]	; (80015d4 <ESP_messageHandler+0xd18>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b72      	cmp	r3, #114	; 0x72
 8001406:	d161      	bne.n	80014cc <ESP_messageHandler+0xc10>
		UART_send("LUCES (DORMITORIO) \n", PC_UART);
 8001408:	4973      	ldr	r1, [pc, #460]	; (80015d8 <ESP_messageHandler+0xd1c>)
 800140a:	4874      	ldr	r0, [pc, #464]	; (80015dc <ESP_messageHandler+0xd20>)
 800140c:	f000 fef6 	bl	80021fc <UART_send>
		vBedroom[0] = textrc[28]; 	// Luz Dormitorio
 8001410:	4b73      	ldr	r3, [pc, #460]	; (80015e0 <ESP_messageHandler+0xd24>)
 8001412:	7f1a      	ldrb	r2, [r3, #28]
 8001414:	4b73      	ldr	r3, [pc, #460]	; (80015e4 <ESP_messageHandler+0xd28>)
 8001416:	701a      	strb	r2, [r3, #0]
		vBedroom[1] = textrc[31]; 	// Luz Mesita Izq
 8001418:	4b71      	ldr	r3, [pc, #452]	; (80015e0 <ESP_messageHandler+0xd24>)
 800141a:	7fda      	ldrb	r2, [r3, #31]
 800141c:	4b71      	ldr	r3, [pc, #452]	; (80015e4 <ESP_messageHandler+0xd28>)
 800141e:	705a      	strb	r2, [r3, #1]
		vBedroom[2] = textrc[34]; 	// Luz Mesita Dch
 8001420:	4b6f      	ldr	r3, [pc, #444]	; (80015e0 <ESP_messageHandler+0xd24>)
 8001422:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001426:	4b6f      	ldr	r3, [pc, #444]	; (80015e4 <ESP_messageHandler+0xd28>)
 8001428:	709a      	strb	r2, [r3, #2]
		//vDor[3] = textrc[37]; 	// V. Dormitorio

		if(vLight[8] == '0' || vBedroom[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, RESET); 		// Luz Dormitorio
 800142a:	4b66      	ldr	r3, [pc, #408]	; (80015c4 <ESP_messageHandler+0xd08>)
 800142c:	7a1b      	ldrb	r3, [r3, #8]
 800142e:	2b30      	cmp	r3, #48	; 0x30
 8001430:	d003      	beq.n	800143a <ESP_messageHandler+0xb7e>
 8001432:	4b6c      	ldr	r3, [pc, #432]	; (80015e4 <ESP_messageHandler+0xd28>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b30      	cmp	r3, #48	; 0x30
 8001438:	d105      	bne.n	8001446 <ESP_messageHandler+0xb8a>
 800143a:	2200      	movs	r2, #0
 800143c:	2180      	movs	r1, #128	; 0x80
 800143e:	4863      	ldr	r0, [pc, #396]	; (80015cc <ESP_messageHandler+0xd10>)
 8001440:	f004 f804 	bl	800544c <HAL_GPIO_WritePin>
 8001444:	e00c      	b.n	8001460 <ESP_messageHandler+0xba4>
		else if(vLight[8] == '1' || vBedroom[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET);
 8001446:	4b5f      	ldr	r3, [pc, #380]	; (80015c4 <ESP_messageHandler+0xd08>)
 8001448:	7a1b      	ldrb	r3, [r3, #8]
 800144a:	2b31      	cmp	r3, #49	; 0x31
 800144c:	d003      	beq.n	8001456 <ESP_messageHandler+0xb9a>
 800144e:	4b65      	ldr	r3, [pc, #404]	; (80015e4 <ESP_messageHandler+0xd28>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b31      	cmp	r3, #49	; 0x31
 8001454:	d104      	bne.n	8001460 <ESP_messageHandler+0xba4>
 8001456:	2201      	movs	r2, #1
 8001458:	2180      	movs	r1, #128	; 0x80
 800145a:	485c      	ldr	r0, [pc, #368]	; (80015cc <ESP_messageHandler+0xd10>)
 800145c:	f003 fff6 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[9] == '0' || vBedroom[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET); 		// Luz Mesita Izq
 8001460:	4b58      	ldr	r3, [pc, #352]	; (80015c4 <ESP_messageHandler+0xd08>)
 8001462:	7a5b      	ldrb	r3, [r3, #9]
 8001464:	2b30      	cmp	r3, #48	; 0x30
 8001466:	d003      	beq.n	8001470 <ESP_messageHandler+0xbb4>
 8001468:	4b5e      	ldr	r3, [pc, #376]	; (80015e4 <ESP_messageHandler+0xd28>)
 800146a:	785b      	ldrb	r3, [r3, #1]
 800146c:	2b30      	cmp	r3, #48	; 0x30
 800146e:	d105      	bne.n	800147c <ESP_messageHandler+0xbc0>
 8001470:	2200      	movs	r2, #0
 8001472:	2110      	movs	r1, #16
 8001474:	4856      	ldr	r0, [pc, #344]	; (80015d0 <ESP_messageHandler+0xd14>)
 8001476:	f003 ffe9 	bl	800544c <HAL_GPIO_WritePin>
 800147a:	e00c      	b.n	8001496 <ESP_messageHandler+0xbda>
		else if(vLight[9] == '1' || vBedroom[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 800147c:	4b51      	ldr	r3, [pc, #324]	; (80015c4 <ESP_messageHandler+0xd08>)
 800147e:	7a5b      	ldrb	r3, [r3, #9]
 8001480:	2b31      	cmp	r3, #49	; 0x31
 8001482:	d003      	beq.n	800148c <ESP_messageHandler+0xbd0>
 8001484:	4b57      	ldr	r3, [pc, #348]	; (80015e4 <ESP_messageHandler+0xd28>)
 8001486:	785b      	ldrb	r3, [r3, #1]
 8001488:	2b31      	cmp	r3, #49	; 0x31
 800148a:	d104      	bne.n	8001496 <ESP_messageHandler+0xbda>
 800148c:	2201      	movs	r2, #1
 800148e:	2110      	movs	r1, #16
 8001490:	484f      	ldr	r0, [pc, #316]	; (80015d0 <ESP_messageHandler+0xd14>)
 8001492:	f003 ffdb 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[10] == '0' || vBedroom[2] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET); 		// Luz Mesita Dch
 8001496:	4b4b      	ldr	r3, [pc, #300]	; (80015c4 <ESP_messageHandler+0xd08>)
 8001498:	7a9b      	ldrb	r3, [r3, #10]
 800149a:	2b30      	cmp	r3, #48	; 0x30
 800149c:	d003      	beq.n	80014a6 <ESP_messageHandler+0xbea>
 800149e:	4b51      	ldr	r3, [pc, #324]	; (80015e4 <ESP_messageHandler+0xd28>)
 80014a0:	789b      	ldrb	r3, [r3, #2]
 80014a2:	2b30      	cmp	r3, #48	; 0x30
 80014a4:	d105      	bne.n	80014b2 <ESP_messageHandler+0xbf6>
 80014a6:	2200      	movs	r2, #0
 80014a8:	2140      	movs	r1, #64	; 0x40
 80014aa:	4849      	ldr	r0, [pc, #292]	; (80015d0 <ESP_messageHandler+0xd14>)
 80014ac:	f003 ffce 	bl	800544c <HAL_GPIO_WritePin>
 80014b0:	e00c      	b.n	80014cc <ESP_messageHandler+0xc10>
		else if(vLight[10] == '1' || vBedroom[2] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 80014b2:	4b44      	ldr	r3, [pc, #272]	; (80015c4 <ESP_messageHandler+0xd08>)
 80014b4:	7a9b      	ldrb	r3, [r3, #10]
 80014b6:	2b31      	cmp	r3, #49	; 0x31
 80014b8:	d003      	beq.n	80014c2 <ESP_messageHandler+0xc06>
 80014ba:	4b4a      	ldr	r3, [pc, #296]	; (80015e4 <ESP_messageHandler+0xd28>)
 80014bc:	789b      	ldrb	r3, [r3, #2]
 80014be:	2b31      	cmp	r3, #49	; 0x31
 80014c0:	d104      	bne.n	80014cc <ESP_messageHandler+0xc10>
 80014c2:	2201      	movs	r2, #1
 80014c4:	2140      	movs	r1, #64	; 0x40
 80014c6:	4842      	ldr	r0, [pc, #264]	; (80015d0 <ESP_messageHandler+0xd14>)
 80014c8:	f003 ffc0 	bl	800544c <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'D'){
 80014cc:	4b41      	ldr	r3, [pc, #260]	; (80015d4 <ESP_messageHandler+0xd18>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b44      	cmp	r3, #68	; 0x44
 80014d2:	d108      	bne.n	80014e6 <ESP_messageHandler+0xc2a>
		UART_send("V. DORMITORIO (DORMITORIO) \n", PC_UART);
 80014d4:	4940      	ldr	r1, [pc, #256]	; (80015d8 <ESP_messageHandler+0xd1c>)
 80014d6:	4844      	ldr	r0, [pc, #272]	; (80015e8 <ESP_messageHandler+0xd2c>)
 80014d8:	f000 fe90 	bl	80021fc <UART_send>
		//vDor[0] = textrc[28]; 	// Luz Dormitorio
		//vDor[1] = textrc[31]; 	// Luz Mesita Izq
		//vDor[2] = textrc[34]; 	// Luz Mesita Dch
		vBedroom[3] = textrc[37]; 	// V. Dormitorio
 80014dc:	4b40      	ldr	r3, [pc, #256]	; (80015e0 <ESP_messageHandler+0xd24>)
 80014de:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80014e2:	4b40      	ldr	r3, [pc, #256]	; (80015e4 <ESP_messageHandler+0xd28>)
 80014e4:	70da      	strb	r2, [r3, #3]
	}

	// OFFICE
	if (fragment[0] == 'f'){
 80014e6:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <ESP_messageHandler+0xd18>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b66      	cmp	r3, #102	; 0x66
 80014ec:	f040 80bf 	bne.w	800166e <ESP_messageHandler+0xdb2>
		UART_send("LUCES (OFICINA) \n", PC_UART);
 80014f0:	4939      	ldr	r1, [pc, #228]	; (80015d8 <ESP_messageHandler+0xd1c>)
 80014f2:	483e      	ldr	r0, [pc, #248]	; (80015ec <ESP_messageHandler+0xd30>)
 80014f4:	f000 fe82 	bl	80021fc <UART_send>
		vOffice[0] = textrc[28]; 	// Luz Oficina
 80014f8:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <ESP_messageHandler+0xd24>)
 80014fa:	7f1a      	ldrb	r2, [r3, #28]
 80014fc:	4b3c      	ldr	r3, [pc, #240]	; (80015f0 <ESP_messageHandler+0xd34>)
 80014fe:	701a      	strb	r2, [r3, #0]
		vOffice[1] = textrc[31]; 	// Luz Gaming
 8001500:	4b37      	ldr	r3, [pc, #220]	; (80015e0 <ESP_messageHandler+0xd24>)
 8001502:	7fda      	ldrb	r2, [r3, #31]
 8001504:	4b3a      	ldr	r3, [pc, #232]	; (80015f0 <ESP_messageHandler+0xd34>)
 8001506:	705a      	strb	r2, [r3, #1]
		vOffice[2] = textrc[34]; 	// Luz Rx100
 8001508:	4b35      	ldr	r3, [pc, #212]	; (80015e0 <ESP_messageHandler+0xd24>)
 800150a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800150e:	4b38      	ldr	r3, [pc, #224]	; (80015f0 <ESP_messageHandler+0xd34>)
 8001510:	709a      	strb	r2, [r3, #2]
		vOffice[3] = textrc[35]; 	// Luz Rx10
 8001512:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <ESP_messageHandler+0xd24>)
 8001514:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8001518:	4b35      	ldr	r3, [pc, #212]	; (80015f0 <ESP_messageHandler+0xd34>)
 800151a:	70da      	strb	r2, [r3, #3]
		vOffice[4] = textrc[36];	// Luz Rx1
 800151c:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <ESP_messageHandler+0xd24>)
 800151e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8001522:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <ESP_messageHandler+0xd34>)
 8001524:	711a      	strb	r2, [r3, #4]
		vOffice[5] = textrc[39]; 	// Luz Gx100
 8001526:	4b2e      	ldr	r3, [pc, #184]	; (80015e0 <ESP_messageHandler+0xd24>)
 8001528:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800152c:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <ESP_messageHandler+0xd34>)
 800152e:	715a      	strb	r2, [r3, #5]
		vOffice[6] = textrc[40]; 	// Luz Gx10
 8001530:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <ESP_messageHandler+0xd24>)
 8001532:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001536:	4b2e      	ldr	r3, [pc, #184]	; (80015f0 <ESP_messageHandler+0xd34>)
 8001538:	719a      	strb	r2, [r3, #6]
		vOffice[7] = textrc[41]; 	// Luz Gx1
 800153a:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <ESP_messageHandler+0xd24>)
 800153c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001540:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <ESP_messageHandler+0xd34>)
 8001542:	71da      	strb	r2, [r3, #7]
		vOffice[8] = textrc[44];	// Luz Bx100
 8001544:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <ESP_messageHandler+0xd24>)
 8001546:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800154a:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <ESP_messageHandler+0xd34>)
 800154c:	721a      	strb	r2, [r3, #8]
		vOffice[9] = textrc[45]; 	// Luz Bx10
 800154e:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <ESP_messageHandler+0xd24>)
 8001550:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8001554:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <ESP_messageHandler+0xd34>)
 8001556:	725a      	strb	r2, [r3, #9]
		vOffice[10] = textrc[46];	// Luz Bx1
 8001558:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <ESP_messageHandler+0xd24>)
 800155a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <ESP_messageHandler+0xd34>)
 8001560:	729a      	strb	r2, [r3, #10]
		//vOfi[11] = textrc[49]; 	// V. Oficina

		if(vLight[11] == '0' || vOffice[0] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET); 		// Luz Oficina
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <ESP_messageHandler+0xd08>)
 8001564:	7adb      	ldrb	r3, [r3, #11]
 8001566:	2b30      	cmp	r3, #48	; 0x30
 8001568:	d003      	beq.n	8001572 <ESP_messageHandler+0xcb6>
 800156a:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <ESP_messageHandler+0xd34>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b30      	cmp	r3, #48	; 0x30
 8001570:	d105      	bne.n	800157e <ESP_messageHandler+0xcc2>
 8001572:	2200      	movs	r2, #0
 8001574:	2120      	movs	r1, #32
 8001576:	4816      	ldr	r0, [pc, #88]	; (80015d0 <ESP_messageHandler+0xd14>)
 8001578:	f003 ff68 	bl	800544c <HAL_GPIO_WritePin>
 800157c:	e00c      	b.n	8001598 <ESP_messageHandler+0xcdc>
		else if(vLight[11] == '1' || vOffice[0] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <ESP_messageHandler+0xd08>)
 8001580:	7adb      	ldrb	r3, [r3, #11]
 8001582:	2b31      	cmp	r3, #49	; 0x31
 8001584:	d003      	beq.n	800158e <ESP_messageHandler+0xcd2>
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <ESP_messageHandler+0xd34>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b31      	cmp	r3, #49	; 0x31
 800158c:	d104      	bne.n	8001598 <ESP_messageHandler+0xcdc>
 800158e:	2201      	movs	r2, #1
 8001590:	2120      	movs	r1, #32
 8001592:	480f      	ldr	r0, [pc, #60]	; (80015d0 <ESP_messageHandler+0xd14>)
 8001594:	f003 ff5a 	bl	800544c <HAL_GPIO_WritePin>

		if(vLight[12] == '0' || vOffice[1] == '0'){
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <ESP_messageHandler+0xd08>)
 800159a:	7b1b      	ldrb	r3, [r3, #12]
 800159c:	2b30      	cmp	r3, #48	; 0x30
 800159e:	d003      	beq.n	80015a8 <ESP_messageHandler+0xcec>
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <ESP_messageHandler+0xd34>)
 80015a2:	785b      	ldrb	r3, [r3, #1]
 80015a4:	2b30      	cmp	r3, #48	; 0x30
 80015a6:	d127      	bne.n	80015f8 <ESP_messageHandler+0xd3c>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <ESP_messageHandler+0xd38>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2200      	movs	r2, #0
 80015ae:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80015b0:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <ESP_messageHandler+0xd38>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2200      	movs	r2, #0
 80015b6:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80015b8:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <ESP_messageHandler+0xd38>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2200      	movs	r2, #0
 80015be:	63da      	str	r2, [r3, #60]	; 0x3c
 80015c0:	e055      	b.n	800166e <ESP_messageHandler+0xdb2>
 80015c2:	bf00      	nop
 80015c4:	20000914 	.word	0x20000914
 80015c8:	20000938 	.word	0x20000938
 80015cc:	40020c00 	.word	0x40020c00
 80015d0:	40020400 	.word	0x40020400
 80015d4:	200009c8 	.word	0x200009c8
 80015d8:	20000dc0 	.word	0x20000dc0
 80015dc:	08008edc 	.word	0x08008edc
 80015e0:	200009d0 	.word	0x200009d0
 80015e4:	20000964 	.word	0x20000964
 80015e8:	08008ef4 	.word	0x08008ef4
 80015ec:	08008f14 	.word	0x08008f14
 80015f0:	20000940 	.word	0x20000940
 80015f4:	20000d30 	.word	0x20000d30
		}
		else if(vLight[12] == '1' || vOffice[1] == '1'){ 												// Luz Gaming
 80015f8:	4b71      	ldr	r3, [pc, #452]	; (80017c0 <ESP_messageHandler+0xf04>)
 80015fa:	7b1b      	ldrb	r3, [r3, #12]
 80015fc:	2b31      	cmp	r3, #49	; 0x31
 80015fe:	d003      	beq.n	8001608 <ESP_messageHandler+0xd4c>
 8001600:	4b70      	ldr	r3, [pc, #448]	; (80017c4 <ESP_messageHandler+0xf08>)
 8001602:	785b      	ldrb	r3, [r3, #1]
 8001604:	2b31      	cmp	r3, #49	; 0x31
 8001606:	d132      	bne.n	800166e <ESP_messageHandler+0xdb2>

			//uint8_t r, g, b;

			r = rgb_value(vOffice[2],vOffice[3],vOffice[4]);
 8001608:	4b6e      	ldr	r3, [pc, #440]	; (80017c4 <ESP_messageHandler+0xf08>)
 800160a:	789b      	ldrb	r3, [r3, #2]
 800160c:	4a6d      	ldr	r2, [pc, #436]	; (80017c4 <ESP_messageHandler+0xf08>)
 800160e:	78d1      	ldrb	r1, [r2, #3]
 8001610:	4a6c      	ldr	r2, [pc, #432]	; (80017c4 <ESP_messageHandler+0xf08>)
 8001612:	7912      	ldrb	r2, [r2, #4]
 8001614:	4618      	mov	r0, r3
 8001616:	f000 f955 	bl	80018c4 <rgb_value>
 800161a:	4603      	mov	r3, r0
 800161c:	4a6a      	ldr	r2, [pc, #424]	; (80017c8 <ESP_messageHandler+0xf0c>)
 800161e:	6013      	str	r3, [r2, #0]
			g = rgb_value(vOffice[5],vOffice[6],vOffice[7]);
 8001620:	4b68      	ldr	r3, [pc, #416]	; (80017c4 <ESP_messageHandler+0xf08>)
 8001622:	795b      	ldrb	r3, [r3, #5]
 8001624:	4a67      	ldr	r2, [pc, #412]	; (80017c4 <ESP_messageHandler+0xf08>)
 8001626:	7991      	ldrb	r1, [r2, #6]
 8001628:	4a66      	ldr	r2, [pc, #408]	; (80017c4 <ESP_messageHandler+0xf08>)
 800162a:	79d2      	ldrb	r2, [r2, #7]
 800162c:	4618      	mov	r0, r3
 800162e:	f000 f949 	bl	80018c4 <rgb_value>
 8001632:	4603      	mov	r3, r0
 8001634:	4a65      	ldr	r2, [pc, #404]	; (80017cc <ESP_messageHandler+0xf10>)
 8001636:	6013      	str	r3, [r2, #0]
			b = rgb_value(vOffice[8],vOffice[9],vOffice[10]);
 8001638:	4b62      	ldr	r3, [pc, #392]	; (80017c4 <ESP_messageHandler+0xf08>)
 800163a:	7a1b      	ldrb	r3, [r3, #8]
 800163c:	4a61      	ldr	r2, [pc, #388]	; (80017c4 <ESP_messageHandler+0xf08>)
 800163e:	7a51      	ldrb	r1, [r2, #9]
 8001640:	4a60      	ldr	r2, [pc, #384]	; (80017c4 <ESP_messageHandler+0xf08>)
 8001642:	7a92      	ldrb	r2, [r2, #10]
 8001644:	4618      	mov	r0, r3
 8001646:	f000 f93d 	bl	80018c4 <rgb_value>
 800164a:	4603      	mov	r3, r0
 800164c:	4a60      	ldr	r2, [pc, #384]	; (80017d0 <ESP_messageHandler+0xf14>)
 800164e:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, g); // PA8
 8001650:	4b5e      	ldr	r3, [pc, #376]	; (80017cc <ESP_messageHandler+0xf10>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b5f      	ldr	r3, [pc, #380]	; (80017d4 <ESP_messageHandler+0xf18>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, r); // PA9
 800165a:	4b5b      	ldr	r3, [pc, #364]	; (80017c8 <ESP_messageHandler+0xf0c>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	4b5d      	ldr	r3, [pc, #372]	; (80017d4 <ESP_messageHandler+0xf18>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b); // PA10
 8001664:	4b5a      	ldr	r3, [pc, #360]	; (80017d0 <ESP_messageHandler+0xf14>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b5a      	ldr	r3, [pc, #360]	; (80017d4 <ESP_messageHandler+0xf18>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}

	if (fragment[0] == 'F'){
 800166e:	4b5a      	ldr	r3, [pc, #360]	; (80017d8 <ESP_messageHandler+0xf1c>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b46      	cmp	r3, #70	; 0x46
 8001674:	d108      	bne.n	8001688 <ESP_messageHandler+0xdcc>
		UART_send("V. OFICINA (OFICINA) \n", PC_UART);
 8001676:	4959      	ldr	r1, [pc, #356]	; (80017dc <ESP_messageHandler+0xf20>)
 8001678:	4859      	ldr	r0, [pc, #356]	; (80017e0 <ESP_messageHandler+0xf24>)
 800167a:	f000 fdbf 	bl	80021fc <UART_send>
		//vOfi[6] = textrc[40]; 	// Luz Gx10
		//vOfi[7] = textrc[41]; 	// Luz Gx1
		//vOfi[8] = textrc[44]; 	// Luz Bx100
		//vOfi[9] = textrc[45]; 	// Luz Bx10
		//vOfi[10] = textrc[46]; 	// Luz Bx1
		vOffice[11] = textrc[49]; 	// V. Oficina
 800167e:	4b59      	ldr	r3, [pc, #356]	; (80017e4 <ESP_messageHandler+0xf28>)
 8001680:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8001684:	4b4f      	ldr	r3, [pc, #316]	; (80017c4 <ESP_messageHandler+0xf08>)
 8001686:	72da      	strb	r2, [r3, #11]
	}

	// GARAGE
	if (fragment[0] == 'j'){
 8001688:	4b53      	ldr	r3, [pc, #332]	; (80017d8 <ESP_messageHandler+0xf1c>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b6a      	cmp	r3, #106	; 0x6a
 800168e:	d124      	bne.n	80016da <ESP_messageHandler+0xe1e>
		UART_send("LUZ GARAJE (GARAJE) \n", PC_UART);
 8001690:	4952      	ldr	r1, [pc, #328]	; (80017dc <ESP_messageHandler+0xf20>)
 8001692:	4855      	ldr	r0, [pc, #340]	; (80017e8 <ESP_messageHandler+0xf2c>)
 8001694:	f000 fdb2 	bl	80021fc <UART_send>
		vGarage[0] = textrc[28]; 	// Luz Garaje
 8001698:	4b52      	ldr	r3, [pc, #328]	; (80017e4 <ESP_messageHandler+0xf28>)
 800169a:	7f1a      	ldrb	r2, [r3, #28]
 800169c:	4b53      	ldr	r3, [pc, #332]	; (80017ec <ESP_messageHandler+0xf30>)
 800169e:	701a      	strb	r2, [r3, #0]
		//vGar[1] = textrc[31]; 	// P. Garaje

		if(vLight[22] == '0' || vGarage[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET);		// Luz Garaje
 80016a0:	4b47      	ldr	r3, [pc, #284]	; (80017c0 <ESP_messageHandler+0xf04>)
 80016a2:	7d9b      	ldrb	r3, [r3, #22]
 80016a4:	2b30      	cmp	r3, #48	; 0x30
 80016a6:	d003      	beq.n	80016b0 <ESP_messageHandler+0xdf4>
 80016a8:	4b50      	ldr	r3, [pc, #320]	; (80017ec <ESP_messageHandler+0xf30>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b30      	cmp	r3, #48	; 0x30
 80016ae:	d106      	bne.n	80016be <ESP_messageHandler+0xe02>
 80016b0:	2200      	movs	r2, #0
 80016b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b6:	484e      	ldr	r0, [pc, #312]	; (80017f0 <ESP_messageHandler+0xf34>)
 80016b8:	f003 fec8 	bl	800544c <HAL_GPIO_WritePin>
 80016bc:	e00d      	b.n	80016da <ESP_messageHandler+0xe1e>
		else if(vLight[22] == '1' || vGarage[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 80016be:	4b40      	ldr	r3, [pc, #256]	; (80017c0 <ESP_messageHandler+0xf04>)
 80016c0:	7d9b      	ldrb	r3, [r3, #22]
 80016c2:	2b31      	cmp	r3, #49	; 0x31
 80016c4:	d003      	beq.n	80016ce <ESP_messageHandler+0xe12>
 80016c6:	4b49      	ldr	r3, [pc, #292]	; (80017ec <ESP_messageHandler+0xf30>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b31      	cmp	r3, #49	; 0x31
 80016cc:	d105      	bne.n	80016da <ESP_messageHandler+0xe1e>
 80016ce:	2201      	movs	r2, #1
 80016d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016d4:	4846      	ldr	r0, [pc, #280]	; (80017f0 <ESP_messageHandler+0xf34>)
 80016d6:	f003 feb9 	bl	800544c <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'J'){
 80016da:	4b3f      	ldr	r3, [pc, #252]	; (80017d8 <ESP_messageHandler+0xf1c>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b4a      	cmp	r3, #74	; 0x4a
 80016e0:	d107      	bne.n	80016f2 <ESP_messageHandler+0xe36>
		UART_send("P. GARAJE (GARAJE) \n", PC_UART);
 80016e2:	493e      	ldr	r1, [pc, #248]	; (80017dc <ESP_messageHandler+0xf20>)
 80016e4:	4843      	ldr	r0, [pc, #268]	; (80017f4 <ESP_messageHandler+0xf38>)
 80016e6:	f000 fd89 	bl	80021fc <UART_send>
		//vGar[0] = textrc[28]; 	// Luz Garaje
		vGarage[1] = textrc[31]; 	// P. Garaje
 80016ea:	4b3e      	ldr	r3, [pc, #248]	; (80017e4 <ESP_messageHandler+0xf28>)
 80016ec:	7fda      	ldrb	r2, [r3, #31]
 80016ee:	4b3f      	ldr	r3, [pc, #252]	; (80017ec <ESP_messageHandler+0xf30>)
 80016f0:	705a      	strb	r2, [r3, #1]
	}

	// GARDEN
	if (fragment[0] == 'h'){
 80016f2:	4b39      	ldr	r3, [pc, #228]	; (80017d8 <ESP_messageHandler+0xf1c>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b68      	cmp	r3, #104	; 0x68
 80016f8:	d10b      	bne.n	8001712 <ESP_messageHandler+0xe56>
		UART_send("RIEGO HUERTO \n", PC_UART);
 80016fa:	4938      	ldr	r1, [pc, #224]	; (80017dc <ESP_messageHandler+0xf20>)
 80016fc:	483e      	ldr	r0, [pc, #248]	; (80017f8 <ESP_messageHandler+0xf3c>)
 80016fe:	f000 fd7d 	bl	80021fc <UART_send>
		vGarden[0] = textrc[28]; 	// Riego
 8001702:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <ESP_messageHandler+0xf28>)
 8001704:	7f1a      	ldrb	r2, [r3, #28]
 8001706:	4b3d      	ldr	r3, [pc, #244]	; (80017fc <ESP_messageHandler+0xf40>)
 8001708:	701a      	strb	r2, [r3, #0]
		vGarden[1] = textrc[31]; 	// Automático
 800170a:	4b36      	ldr	r3, [pc, #216]	; (80017e4 <ESP_messageHandler+0xf28>)
 800170c:	7fda      	ldrb	r2, [r3, #31]
 800170e:	4b3b      	ldr	r3, [pc, #236]	; (80017fc <ESP_messageHandler+0xf40>)
 8001710:	705a      	strb	r2, [r3, #1]
			else if(vHuer[0] == '1') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
		}*/
	}

	// SETTINGS
	if (fragment[0] == 'a'){
 8001712:	4b31      	ldr	r3, [pc, #196]	; (80017d8 <ESP_messageHandler+0xf1c>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b61      	cmp	r3, #97	; 0x61
 8001718:	d150      	bne.n	80017bc <ESP_messageHandler+0xf00>
		UART_send("AJUSTES \n", PC_UART);
 800171a:	4930      	ldr	r1, [pc, #192]	; (80017dc <ESP_messageHandler+0xf20>)
 800171c:	4838      	ldr	r0, [pc, #224]	; (8001800 <ESP_messageHandler+0xf44>)
 800171e:	f000 fd6d 	bl	80021fc <UART_send>
		vSettings[0] = textrc[28]; 		// Vent. Enc. x 10
 8001722:	4b30      	ldr	r3, [pc, #192]	; (80017e4 <ESP_messageHandler+0xf28>)
 8001724:	7f1a      	ldrb	r2, [r3, #28]
 8001726:	4b37      	ldr	r3, [pc, #220]	; (8001804 <ESP_messageHandler+0xf48>)
 8001728:	701a      	strb	r2, [r3, #0]
		vSettings[1] = textrc[29]; 		// Vent. Enc. x 1
 800172a:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <ESP_messageHandler+0xf28>)
 800172c:	7f5a      	ldrb	r2, [r3, #29]
 800172e:	4b35      	ldr	r3, [pc, #212]	; (8001804 <ESP_messageHandler+0xf48>)
 8001730:	705a      	strb	r2, [r3, #1]
		vSettings[2] = textrc[31]; 		// Vent. Enc. x 0.1
 8001732:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <ESP_messageHandler+0xf28>)
 8001734:	7fda      	ldrb	r2, [r3, #31]
 8001736:	4b33      	ldr	r3, [pc, #204]	; (8001804 <ESP_messageHandler+0xf48>)
 8001738:	709a      	strb	r2, [r3, #2]
		vSettings[3] = textrc[34]; 		// Vent. Apa. x 10
 800173a:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <ESP_messageHandler+0xf28>)
 800173c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001740:	4b30      	ldr	r3, [pc, #192]	; (8001804 <ESP_messageHandler+0xf48>)
 8001742:	70da      	strb	r2, [r3, #3]
		vSettings[4] = textrc[35]; 		// Vent. Apa. x 1
 8001744:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <ESP_messageHandler+0xf28>)
 8001746:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800174a:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <ESP_messageHandler+0xf48>)
 800174c:	711a      	strb	r2, [r3, #4]
		vSettings[5] = textrc[37]; 		// Vent. Apa. x 0.1
 800174e:	4b25      	ldr	r3, [pc, #148]	; (80017e4 <ESP_messageHandler+0xf28>)
 8001750:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001754:	4b2b      	ldr	r3, [pc, #172]	; (8001804 <ESP_messageHandler+0xf48>)
 8001756:	715a      	strb	r2, [r3, #5]
		vSettings[6] = textrc[40]; 		// Calef. Enc. x 10
 8001758:	4b22      	ldr	r3, [pc, #136]	; (80017e4 <ESP_messageHandler+0xf28>)
 800175a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800175e:	4b29      	ldr	r3, [pc, #164]	; (8001804 <ESP_messageHandler+0xf48>)
 8001760:	719a      	strb	r2, [r3, #6]
		vSettings[7] = textrc[41]; 		// Calef. Enc. x 1
 8001762:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <ESP_messageHandler+0xf28>)
 8001764:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001768:	4b26      	ldr	r3, [pc, #152]	; (8001804 <ESP_messageHandler+0xf48>)
 800176a:	71da      	strb	r2, [r3, #7]
		vSettings[8] = textrc[43]; 		// Calef. Enc. x 0.1
 800176c:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <ESP_messageHandler+0xf28>)
 800176e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8001772:	4b24      	ldr	r3, [pc, #144]	; (8001804 <ESP_messageHandler+0xf48>)
 8001774:	721a      	strb	r2, [r3, #8]
		vSettings[9] = textrc[46]; 		// Calef. Apa. x 10
 8001776:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <ESP_messageHandler+0xf28>)
 8001778:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <ESP_messageHandler+0xf48>)
 800177e:	725a      	strb	r2, [r3, #9]
		vSettings[10] = textrc[47]; 	// Calef. Apa. x 1
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <ESP_messageHandler+0xf28>)
 8001782:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8001786:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <ESP_messageHandler+0xf48>)
 8001788:	729a      	strb	r2, [r3, #10]
		vSettings[11] = textrc[49]; 	// Calef. Apa. x 0.1
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <ESP_messageHandler+0xf28>)
 800178c:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8001790:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <ESP_messageHandler+0xf48>)
 8001792:	72da      	strb	r2, [r3, #11]
		vSettings[12] = textrc[52]; 	// RH Mínimo x 10
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <ESP_messageHandler+0xf28>)
 8001796:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <ESP_messageHandler+0xf48>)
 800179c:	731a      	strb	r2, [r3, #12]
		vSettings[13] = textrc[53]; 	// RH Mínimo x 1
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <ESP_messageHandler+0xf28>)
 80017a0:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <ESP_messageHandler+0xf48>)
 80017a6:	735a      	strb	r2, [r3, #13]
		vSettings[14] = textrc[56]; 	// RH Máximo x 10
 80017a8:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <ESP_messageHandler+0xf28>)
 80017aa:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <ESP_messageHandler+0xf48>)
 80017b0:	739a      	strb	r2, [r3, #14]
		vSettings[15] = textrc[57]; 	// RH Máximo x 1
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <ESP_messageHandler+0xf28>)
 80017b4:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <ESP_messageHandler+0xf48>)
 80017ba:	73da      	strb	r2, [r3, #15]
	}

	//__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000914 	.word	0x20000914
 80017c4:	20000940 	.word	0x20000940
 80017c8:	20000974 	.word	0x20000974
 80017cc:	20000970 	.word	0x20000970
 80017d0:	20000968 	.word	0x20000968
 80017d4:	20000d30 	.word	0x20000d30
 80017d8:	200009c8 	.word	0x200009c8
 80017dc:	20000dc0 	.word	0x20000dc0
 80017e0:	08008f28 	.word	0x08008f28
 80017e4:	200009d0 	.word	0x200009d0
 80017e8:	08008f40 	.word	0x08008f40
 80017ec:	20000958 	.word	0x20000958
 80017f0:	40020800 	.word	0x40020800
 80017f4:	08008f58 	.word	0x08008f58
 80017f8:	08008f70 	.word	0x08008f70
 80017fc:	2000095c 	.word	0x2000095c
 8001800:	08008f80 	.word	0x08008f80
 8001804:	200008f4 	.word	0x200008f4

08001808 <ldr>:


#include "LDR.h"
#include "ESP8266_HAL.h"

void ldr(uint16_t value){
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	80fb      	strh	r3, [r7, #6]


	if (vLight[26] == '1'){
 8001812:	4b28      	ldr	r3, [pc, #160]	; (80018b4 <ldr+0xac>)
 8001814:	7e9b      	ldrb	r3, [r3, #26]
 8001816:	2b31      	cmp	r3, #49	; 0x31
 8001818:	d147      	bne.n	80018aa <ldr+0xa2>

		if(value<90) {
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	2b59      	cmp	r3, #89	; 0x59
 800181e:	d822      	bhi.n	8001866 <ldr+0x5e>
			vLight[23] = 'x';		// Jardín
 8001820:	4b24      	ldr	r3, [pc, #144]	; (80018b4 <ldr+0xac>)
 8001822:	2278      	movs	r2, #120	; 0x78
 8001824:	75da      	strb	r2, [r3, #23]
			vOutside[3] = 'x';
 8001826:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <ldr+0xb0>)
 8001828:	2278      	movs	r2, #120	; 0x78
 800182a:	70da      	strb	r2, [r3, #3]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 800182c:	2201      	movs	r2, #1
 800182e:	2104      	movs	r1, #4
 8001830:	4822      	ldr	r0, [pc, #136]	; (80018bc <ldr+0xb4>)
 8001832:	f003 fe0b 	bl	800544c <HAL_GPIO_WritePin>
			vLight[24] = 'x';		// Porche
 8001836:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <ldr+0xac>)
 8001838:	2278      	movs	r2, #120	; 0x78
 800183a:	761a      	strb	r2, [r3, #24]
			vOutside[2] = 'x';
 800183c:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <ldr+0xb0>)
 800183e:	2278      	movs	r2, #120	; 0x78
 8001840:	709a      	strb	r2, [r3, #2]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 8001842:	2201      	movs	r2, #1
 8001844:	2110      	movs	r1, #16
 8001846:	481d      	ldr	r0, [pc, #116]	; (80018bc <ldr+0xb4>)
 8001848:	f003 fe00 	bl	800544c <HAL_GPIO_WritePin>
			vLight[25] = 'x';		// Tendedero
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <ldr+0xac>)
 800184e:	2278      	movs	r2, #120	; 0x78
 8001850:	765a      	strb	r2, [r3, #25]
			vOutside[1] = 'x';
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <ldr+0xb0>)
 8001854:	2278      	movs	r2, #120	; 0x78
 8001856:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8001858:	2201      	movs	r2, #1
 800185a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800185e:	4818      	ldr	r0, [pc, #96]	; (80018c0 <ldr+0xb8>)
 8001860:	f003 fdf4 	bl	800544c <HAL_GPIO_WritePin>
			vLight[25] = 'x';		// Tendedero
			vOutside[1] = 'x';
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
		}
	}
}
 8001864:	e021      	b.n	80018aa <ldr+0xa2>
			vLight[23] = 'x';		// Jardín
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <ldr+0xac>)
 8001868:	2278      	movs	r2, #120	; 0x78
 800186a:	75da      	strb	r2, [r3, #23]
			vOutside[3] = 'x';
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <ldr+0xb0>)
 800186e:	2278      	movs	r2, #120	; 0x78
 8001870:	70da      	strb	r2, [r3, #3]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET);
 8001872:	2200      	movs	r2, #0
 8001874:	2104      	movs	r1, #4
 8001876:	4811      	ldr	r0, [pc, #68]	; (80018bc <ldr+0xb4>)
 8001878:	f003 fde8 	bl	800544c <HAL_GPIO_WritePin>
			vLight[24] = 'x';		// Porche
 800187c:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <ldr+0xac>)
 800187e:	2278      	movs	r2, #120	; 0x78
 8001880:	761a      	strb	r2, [r3, #24]
			vOutside[2] = 'x';
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <ldr+0xb0>)
 8001884:	2278      	movs	r2, #120	; 0x78
 8001886:	709a      	strb	r2, [r3, #2]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
 8001888:	2200      	movs	r2, #0
 800188a:	2110      	movs	r1, #16
 800188c:	480b      	ldr	r0, [pc, #44]	; (80018bc <ldr+0xb4>)
 800188e:	f003 fddd 	bl	800544c <HAL_GPIO_WritePin>
			vLight[25] = 'x';		// Tendedero
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <ldr+0xac>)
 8001894:	2278      	movs	r2, #120	; 0x78
 8001896:	765a      	strb	r2, [r3, #25]
			vOutside[1] = 'x';
 8001898:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <ldr+0xb0>)
 800189a:	2278      	movs	r2, #120	; 0x78
 800189c:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018a4:	4806      	ldr	r0, [pc, #24]	; (80018c0 <ldr+0xb8>)
 80018a6:	f003 fdd1 	bl	800544c <HAL_GPIO_WritePin>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000914 	.word	0x20000914
 80018b8:	2000094c 	.word	0x2000094c
 80018bc:	40020c00 	.word	0x40020c00
 80018c0:	40020800 	.word	0x40020800

080018c4 <rgb_value>:


#include "LED.h"


int rgb_value(char i, char j, char k){
 80018c4:	b480      	push	{r7}
 80018c6:	b087      	sub	sp, #28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
 80018ce:	460b      	mov	r3, r1
 80018d0:	71bb      	strb	r3, [r7, #6]
 80018d2:	4613      	mov	r3, r2
 80018d4:	717b      	strb	r3, [r7, #5]

	int a, b, c;

	if(i == '0') a = 0;
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	2b30      	cmp	r3, #48	; 0x30
 80018da:	d102      	bne.n	80018e2 <rgb_value+0x1e>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e00a      	b.n	80018f8 <rgb_value+0x34>
	else if(i == '1') a = 100;
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	2b31      	cmp	r3, #49	; 0x31
 80018e6:	d102      	bne.n	80018ee <rgb_value+0x2a>
 80018e8:	2364      	movs	r3, #100	; 0x64
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	e004      	b.n	80018f8 <rgb_value+0x34>
	else if(i == '2') a = 200;
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	2b32      	cmp	r3, #50	; 0x32
 80018f2:	d101      	bne.n	80018f8 <rgb_value+0x34>
 80018f4:	23c8      	movs	r3, #200	; 0xc8
 80018f6:	617b      	str	r3, [r7, #20]

	if(j == '0') b = 0;
 80018f8:	79bb      	ldrb	r3, [r7, #6]
 80018fa:	2b30      	cmp	r3, #48	; 0x30
 80018fc:	d102      	bne.n	8001904 <rgb_value+0x40>
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	e034      	b.n	800196e <rgb_value+0xaa>
	else if(j == '1') b = 10;
 8001904:	79bb      	ldrb	r3, [r7, #6]
 8001906:	2b31      	cmp	r3, #49	; 0x31
 8001908:	d102      	bne.n	8001910 <rgb_value+0x4c>
 800190a:	230a      	movs	r3, #10
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	e02e      	b.n	800196e <rgb_value+0xaa>
	else if(j == '2') b = 20;
 8001910:	79bb      	ldrb	r3, [r7, #6]
 8001912:	2b32      	cmp	r3, #50	; 0x32
 8001914:	d102      	bne.n	800191c <rgb_value+0x58>
 8001916:	2314      	movs	r3, #20
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	e028      	b.n	800196e <rgb_value+0xaa>
	else if(j == '3') b = 30;
 800191c:	79bb      	ldrb	r3, [r7, #6]
 800191e:	2b33      	cmp	r3, #51	; 0x33
 8001920:	d102      	bne.n	8001928 <rgb_value+0x64>
 8001922:	231e      	movs	r3, #30
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	e022      	b.n	800196e <rgb_value+0xaa>
	else if(j == '4') b = 40;
 8001928:	79bb      	ldrb	r3, [r7, #6]
 800192a:	2b34      	cmp	r3, #52	; 0x34
 800192c:	d102      	bne.n	8001934 <rgb_value+0x70>
 800192e:	2328      	movs	r3, #40	; 0x28
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	e01c      	b.n	800196e <rgb_value+0xaa>
	else if(j == '5') b = 50;
 8001934:	79bb      	ldrb	r3, [r7, #6]
 8001936:	2b35      	cmp	r3, #53	; 0x35
 8001938:	d102      	bne.n	8001940 <rgb_value+0x7c>
 800193a:	2332      	movs	r3, #50	; 0x32
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	e016      	b.n	800196e <rgb_value+0xaa>
	else if(j == '6') b = 60;
 8001940:	79bb      	ldrb	r3, [r7, #6]
 8001942:	2b36      	cmp	r3, #54	; 0x36
 8001944:	d102      	bne.n	800194c <rgb_value+0x88>
 8001946:	233c      	movs	r3, #60	; 0x3c
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	e010      	b.n	800196e <rgb_value+0xaa>
	else if(j == '7') b = 70;
 800194c:	79bb      	ldrb	r3, [r7, #6]
 800194e:	2b37      	cmp	r3, #55	; 0x37
 8001950:	d102      	bne.n	8001958 <rgb_value+0x94>
 8001952:	2346      	movs	r3, #70	; 0x46
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	e00a      	b.n	800196e <rgb_value+0xaa>
	else if(j == '8') b = 80;
 8001958:	79bb      	ldrb	r3, [r7, #6]
 800195a:	2b38      	cmp	r3, #56	; 0x38
 800195c:	d102      	bne.n	8001964 <rgb_value+0xa0>
 800195e:	2350      	movs	r3, #80	; 0x50
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	e004      	b.n	800196e <rgb_value+0xaa>
	else if(j == '9') b = 90;
 8001964:	79bb      	ldrb	r3, [r7, #6]
 8001966:	2b39      	cmp	r3, #57	; 0x39
 8001968:	d101      	bne.n	800196e <rgb_value+0xaa>
 800196a:	235a      	movs	r3, #90	; 0x5a
 800196c:	613b      	str	r3, [r7, #16]

	if(k == '0') c = 0;
 800196e:	797b      	ldrb	r3, [r7, #5]
 8001970:	2b30      	cmp	r3, #48	; 0x30
 8001972:	d102      	bne.n	800197a <rgb_value+0xb6>
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	e034      	b.n	80019e4 <rgb_value+0x120>
	else if(k == '1') c = 1;
 800197a:	797b      	ldrb	r3, [r7, #5]
 800197c:	2b31      	cmp	r3, #49	; 0x31
 800197e:	d102      	bne.n	8001986 <rgb_value+0xc2>
 8001980:	2301      	movs	r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	e02e      	b.n	80019e4 <rgb_value+0x120>
	else if(k == '2') c = 2;
 8001986:	797b      	ldrb	r3, [r7, #5]
 8001988:	2b32      	cmp	r3, #50	; 0x32
 800198a:	d102      	bne.n	8001992 <rgb_value+0xce>
 800198c:	2302      	movs	r3, #2
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	e028      	b.n	80019e4 <rgb_value+0x120>
	else if(k == '3') c = 3;
 8001992:	797b      	ldrb	r3, [r7, #5]
 8001994:	2b33      	cmp	r3, #51	; 0x33
 8001996:	d102      	bne.n	800199e <rgb_value+0xda>
 8001998:	2303      	movs	r3, #3
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	e022      	b.n	80019e4 <rgb_value+0x120>
	else if(k == '4') c = 4;
 800199e:	797b      	ldrb	r3, [r7, #5]
 80019a0:	2b34      	cmp	r3, #52	; 0x34
 80019a2:	d102      	bne.n	80019aa <rgb_value+0xe6>
 80019a4:	2304      	movs	r3, #4
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	e01c      	b.n	80019e4 <rgb_value+0x120>
	else if(k == '5') c = 5;
 80019aa:	797b      	ldrb	r3, [r7, #5]
 80019ac:	2b35      	cmp	r3, #53	; 0x35
 80019ae:	d102      	bne.n	80019b6 <rgb_value+0xf2>
 80019b0:	2305      	movs	r3, #5
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	e016      	b.n	80019e4 <rgb_value+0x120>
	else if(k == '6') c = 6;
 80019b6:	797b      	ldrb	r3, [r7, #5]
 80019b8:	2b36      	cmp	r3, #54	; 0x36
 80019ba:	d102      	bne.n	80019c2 <rgb_value+0xfe>
 80019bc:	2306      	movs	r3, #6
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	e010      	b.n	80019e4 <rgb_value+0x120>
	else if(k == '7') c = 7;
 80019c2:	797b      	ldrb	r3, [r7, #5]
 80019c4:	2b37      	cmp	r3, #55	; 0x37
 80019c6:	d102      	bne.n	80019ce <rgb_value+0x10a>
 80019c8:	2307      	movs	r3, #7
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	e00a      	b.n	80019e4 <rgb_value+0x120>
	else if(k == '8') c = 8;
 80019ce:	797b      	ldrb	r3, [r7, #5]
 80019d0:	2b38      	cmp	r3, #56	; 0x38
 80019d2:	d102      	bne.n	80019da <rgb_value+0x116>
 80019d4:	2308      	movs	r3, #8
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	e004      	b.n	80019e4 <rgb_value+0x120>
	else if(k == '9') c = 9;
 80019da:	797b      	ldrb	r3, [r7, #5]
 80019dc:	2b39      	cmp	r3, #57	; 0x39
 80019de:	d101      	bne.n	80019e4 <rgb_value+0x120>
 80019e0:	2309      	movs	r3, #9
 80019e2:	60fb      	str	r3, [r7, #12]

	return a+b+c;
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	441a      	add	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4413      	add	r3, r2
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	371c      	adds	r7, #28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
	...

080019fc <readRFID>:

extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart6;


int readRFID(){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	; 0x28
 8001a00:	af00      	add	r7, sp, #0

	  char vehicle[16] = "";
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]

	  char car[3] = "247";
 8001a12:	4a36      	ldr	r2, [pc, #216]	; (8001aec <readRFID+0xf0>)
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	4611      	mov	r1, r2
 8001a1a:	8019      	strh	r1, [r3, #0]
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	0c12      	lsrs	r2, r2, #16
 8001a20:	701a      	strb	r2, [r3, #0]
	  char motorcycle[3] = "355";
 8001a22:	4a33      	ldr	r2, [pc, #204]	; (8001af0 <readRFID+0xf4>)
 8001a24:	463b      	mov	r3, r7
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	4611      	mov	r1, r2
 8001a2a:	8019      	strh	r1, [r3, #0]
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	0c12      	lsrs	r2, r2, #16
 8001a30:	701a      	strb	r2, [r3, #0]

	  int family = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24

	  for(int i=0; i<16; i++) vehicle[i] = '_';
 8001a36:	2300      	movs	r3, #0
 8001a38:	623b      	str	r3, [r7, #32]
 8001a3a:	e008      	b.n	8001a4e <readRFID+0x52>
 8001a3c:	f107 0208 	add.w	r2, r7, #8
 8001a40:	6a3b      	ldr	r3, [r7, #32]
 8001a42:	4413      	add	r3, r2
 8001a44:	225f      	movs	r2, #95	; 0x5f
 8001a46:	701a      	strb	r2, [r3, #0]
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	623b      	str	r3, [r7, #32]
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	2b0f      	cmp	r3, #15
 8001a52:	ddf3      	ble.n	8001a3c <readRFID+0x40>

	  HAL_UART_Receive(&huart3, (uint8_t *) vehicle, 16, 100);
 8001a54:	f107 0108 	add.w	r1, r7, #8
 8001a58:	2364      	movs	r3, #100	; 0x64
 8001a5a:	2210      	movs	r2, #16
 8001a5c:	4825      	ldr	r0, [pc, #148]	; (8001af4 <readRFID+0xf8>)
 8001a5e:	f005 fb00 	bl	8007062 <HAL_UART_Receive>

	  if (vehicle[15] == '_') return 2;
 8001a62:	7dfb      	ldrb	r3, [r7, #23]
 8001a64:	2b5f      	cmp	r3, #95	; 0x5f
 8001a66:	d101      	bne.n	8001a6c <readRFID+0x70>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e03b      	b.n	8001ae4 <readRFID+0xe8>

	  else {
		  for(int i = 0; i<3; i++){
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
 8001a70:	e015      	b.n	8001a9e <readRFID+0xa2>
			  family = 1;
 8001a72:	2301      	movs	r3, #1
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
			  if(vehicle[i+13] != car[i]){
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	330d      	adds	r3, #13
 8001a7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a7e:	4413      	add	r3, r2
 8001a80:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 8001a84:	1d39      	adds	r1, r7, #4
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	440b      	add	r3, r1
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d003      	beq.n	8001a98 <readRFID+0x9c>
				  family = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
				  i = 2;
 8001a94:	2302      	movs	r3, #2
 8001a96:	61fb      	str	r3, [r7, #28]
		  for(int i = 0; i<3; i++){
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	dde6      	ble.n	8001a72 <readRFID+0x76>
			  }
		  }

		  if(!family){
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d11b      	bne.n	8001ae2 <readRFID+0xe6>
			  for(int i = 0; i<3; i++){
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	e015      	b.n	8001adc <readRFID+0xe0>
				  family = 1;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
				  if(vehicle[13+i] != motorcycle[i]){
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	330d      	adds	r3, #13
 8001ab8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001abc:	4413      	add	r3, r2
 8001abe:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 8001ac2:	4639      	mov	r1, r7
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	440b      	add	r3, r1
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d003      	beq.n	8001ad6 <readRFID+0xda>
					  family = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
					  i = 2;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	61bb      	str	r3, [r7, #24]
			  for(int i = 0; i<3; i++){
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	61bb      	str	r3, [r7, #24]
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	dde6      	ble.n	8001ab0 <readRFID+0xb4>
				  }
			  }
		  }
	  }

	  return family;
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3728      	adds	r7, #40	; 0x28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	08008f8c 	.word	0x08008f8c
 8001af0:	08008f90 	.word	0x08008f90
 8001af4:	20000ae8 	.word	0x20000ae8

08001af8 <rh_value>:


#include "RH.h"


int rh_value(char i, char j){
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	460a      	mov	r2, r1
 8001b02:	71fb      	strb	r3, [r7, #7]
 8001b04:	4613      	mov	r3, r2
 8001b06:	71bb      	strb	r3, [r7, #6]

	int a, b;

	if(i == '0') a = 0;
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	2b30      	cmp	r3, #48	; 0x30
 8001b0c:	d102      	bne.n	8001b14 <rh_value+0x1c>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	e034      	b.n	8001b7e <rh_value+0x86>
	else if(i == '1') a = 10;
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	2b31      	cmp	r3, #49	; 0x31
 8001b18:	d102      	bne.n	8001b20 <rh_value+0x28>
 8001b1a:	230a      	movs	r3, #10
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	e02e      	b.n	8001b7e <rh_value+0x86>
	else if(i == '2') a = 20;
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	2b32      	cmp	r3, #50	; 0x32
 8001b24:	d102      	bne.n	8001b2c <rh_value+0x34>
 8001b26:	2314      	movs	r3, #20
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	e028      	b.n	8001b7e <rh_value+0x86>
	else if(i == '3') a = 30;
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	2b33      	cmp	r3, #51	; 0x33
 8001b30:	d102      	bne.n	8001b38 <rh_value+0x40>
 8001b32:	231e      	movs	r3, #30
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	e022      	b.n	8001b7e <rh_value+0x86>
	else if(i == '4') a = 40;
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	2b34      	cmp	r3, #52	; 0x34
 8001b3c:	d102      	bne.n	8001b44 <rh_value+0x4c>
 8001b3e:	2328      	movs	r3, #40	; 0x28
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	e01c      	b.n	8001b7e <rh_value+0x86>
	else if(i == '5') a = 50;
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	2b35      	cmp	r3, #53	; 0x35
 8001b48:	d102      	bne.n	8001b50 <rh_value+0x58>
 8001b4a:	2332      	movs	r3, #50	; 0x32
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	e016      	b.n	8001b7e <rh_value+0x86>
	else if(i == '6') a = 60;
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	2b36      	cmp	r3, #54	; 0x36
 8001b54:	d102      	bne.n	8001b5c <rh_value+0x64>
 8001b56:	233c      	movs	r3, #60	; 0x3c
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	e010      	b.n	8001b7e <rh_value+0x86>
	else if(i == '7') a = 70;
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	2b37      	cmp	r3, #55	; 0x37
 8001b60:	d102      	bne.n	8001b68 <rh_value+0x70>
 8001b62:	2346      	movs	r3, #70	; 0x46
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	e00a      	b.n	8001b7e <rh_value+0x86>
	else if(i == '8') a = 80;
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	2b38      	cmp	r3, #56	; 0x38
 8001b6c:	d102      	bne.n	8001b74 <rh_value+0x7c>
 8001b6e:	2350      	movs	r3, #80	; 0x50
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	e004      	b.n	8001b7e <rh_value+0x86>
	else if(i == '9') a = 90;
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	2b39      	cmp	r3, #57	; 0x39
 8001b78:	d101      	bne.n	8001b7e <rh_value+0x86>
 8001b7a:	235a      	movs	r3, #90	; 0x5a
 8001b7c:	60fb      	str	r3, [r7, #12]


	if(j == '0') b = 0;
 8001b7e:	79bb      	ldrb	r3, [r7, #6]
 8001b80:	2b30      	cmp	r3, #48	; 0x30
 8001b82:	d102      	bne.n	8001b8a <rh_value+0x92>
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	e034      	b.n	8001bf4 <rh_value+0xfc>
	else if(j == '1') b = 1;
 8001b8a:	79bb      	ldrb	r3, [r7, #6]
 8001b8c:	2b31      	cmp	r3, #49	; 0x31
 8001b8e:	d102      	bne.n	8001b96 <rh_value+0x9e>
 8001b90:	2301      	movs	r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	e02e      	b.n	8001bf4 <rh_value+0xfc>
	else if(j == '2') b = 2;
 8001b96:	79bb      	ldrb	r3, [r7, #6]
 8001b98:	2b32      	cmp	r3, #50	; 0x32
 8001b9a:	d102      	bne.n	8001ba2 <rh_value+0xaa>
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	e028      	b.n	8001bf4 <rh_value+0xfc>
	else if(j == '3') b = 3;
 8001ba2:	79bb      	ldrb	r3, [r7, #6]
 8001ba4:	2b33      	cmp	r3, #51	; 0x33
 8001ba6:	d102      	bne.n	8001bae <rh_value+0xb6>
 8001ba8:	2303      	movs	r3, #3
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	e022      	b.n	8001bf4 <rh_value+0xfc>
	else if(j == '4') b = 4;
 8001bae:	79bb      	ldrb	r3, [r7, #6]
 8001bb0:	2b34      	cmp	r3, #52	; 0x34
 8001bb2:	d102      	bne.n	8001bba <rh_value+0xc2>
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	e01c      	b.n	8001bf4 <rh_value+0xfc>
	else if(j == '5') b = 5;
 8001bba:	79bb      	ldrb	r3, [r7, #6]
 8001bbc:	2b35      	cmp	r3, #53	; 0x35
 8001bbe:	d102      	bne.n	8001bc6 <rh_value+0xce>
 8001bc0:	2305      	movs	r3, #5
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	e016      	b.n	8001bf4 <rh_value+0xfc>
	else if(j == '6') b = 6;
 8001bc6:	79bb      	ldrb	r3, [r7, #6]
 8001bc8:	2b36      	cmp	r3, #54	; 0x36
 8001bca:	d102      	bne.n	8001bd2 <rh_value+0xda>
 8001bcc:	2306      	movs	r3, #6
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	e010      	b.n	8001bf4 <rh_value+0xfc>
	else if(j == '7') b = 7;
 8001bd2:	79bb      	ldrb	r3, [r7, #6]
 8001bd4:	2b37      	cmp	r3, #55	; 0x37
 8001bd6:	d102      	bne.n	8001bde <rh_value+0xe6>
 8001bd8:	2307      	movs	r3, #7
 8001bda:	60bb      	str	r3, [r7, #8]
 8001bdc:	e00a      	b.n	8001bf4 <rh_value+0xfc>
	else if(j == '8') b = 8;
 8001bde:	79bb      	ldrb	r3, [r7, #6]
 8001be0:	2b38      	cmp	r3, #56	; 0x38
 8001be2:	d102      	bne.n	8001bea <rh_value+0xf2>
 8001be4:	2308      	movs	r3, #8
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	e004      	b.n	8001bf4 <rh_value+0xfc>
	else if(j == '9') b = 9;
 8001bea:	79bb      	ldrb	r3, [r7, #6]
 8001bec:	2b39      	cmp	r3, #57	; 0x39
 8001bee:	d101      	bne.n	8001bf4 <rh_value+0xfc>
 8001bf0:	2309      	movs	r3, #9
 8001bf2:	60bb      	str	r3, [r7, #8]

	return a+b;
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	4413      	add	r3, r2
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <actParcelRFID>:

extern TIM_HandleTypeDef htim2;
extern UART_HandleTypeDef huart6;


void actParcelRFID(){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0

	while(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == 1) __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 91); 	// Abrir S_Parcela
 8001c0c:	e003      	b.n	8001c16 <actParcelRFID+0xe>
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <actParcelRFID+0x70>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	225b      	movs	r2, #91	; 0x5b
 8001c14:	635a      	str	r2, [r3, #52]	; 0x34
 8001c16:	2140      	movs	r1, #64	; 0x40
 8001c18:	4818      	ldr	r0, [pc, #96]	; (8001c7c <actParcelRFID+0x74>)
 8001c1a:	f003 fbff 	bl	800541c <HAL_GPIO_ReadPin>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d0f4      	beq.n	8001c0e <actParcelRFID+0x6>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89); 	// Rebote
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <actParcelRFID+0x70>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2259      	movs	r2, #89	; 0x59
 8001c2a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 8001c2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c30:	f002 fcc4 	bl	80045bc <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 90); 	// Parar S_Parcela
 8001c34:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <actParcelRFID+0x70>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	225a      	movs	r2, #90	; 0x5a
 8001c3a:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_Delay(5000);
 8001c3c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c40:	f002 fcbc 	bl	80045bc <HAL_Delay>

	while(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == 1) __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89); 	// Cerrar S_Parcela
 8001c44:	e003      	b.n	8001c4e <actParcelRFID+0x46>
 8001c46:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <actParcelRFID+0x70>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2259      	movs	r2, #89	; 0x59
 8001c4c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c4e:	2140      	movs	r1, #64	; 0x40
 8001c50:	480a      	ldr	r0, [pc, #40]	; (8001c7c <actParcelRFID+0x74>)
 8001c52:	f003 fbe3 	bl	800541c <HAL_GPIO_ReadPin>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d0f4      	beq.n	8001c46 <actParcelRFID+0x3e>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 91); 	// Rebote
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <actParcelRFID+0x70>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	225b      	movs	r2, #91	; 0x5b
 8001c62:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 8001c64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c68:	f002 fca8 	bl	80045bc <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 90); 	// Parar S_Parcela
 8001c6c:	4b02      	ldr	r3, [pc, #8]	; (8001c78 <actParcelRFID+0x70>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	225a      	movs	r2, #90	; 0x5a
 8001c72:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000e04 	.word	0x20000e04
 8001c7c:	40021000 	.word	0x40021000

08001c80 <temp_value>:


#include "Temperature.h"


float temp_value(char i, char j, char k){
 8001c80:	b480      	push	{r7}
 8001c82:	b087      	sub	sp, #28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	71bb      	strb	r3, [r7, #6]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	717b      	strb	r3, [r7, #5]

	float a, b, c;

	if(i == '0') a = 0;
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	2b30      	cmp	r3, #48	; 0x30
 8001c96:	d103      	bne.n	8001ca0 <temp_value+0x20>
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	e034      	b.n	8001d0a <temp_value+0x8a>
	else if(i == '1') a = 10;
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	2b31      	cmp	r3, #49	; 0x31
 8001ca4:	d102      	bne.n	8001cac <temp_value+0x2c>
 8001ca6:	4b60      	ldr	r3, [pc, #384]	; (8001e28 <temp_value+0x1a8>)
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	e02e      	b.n	8001d0a <temp_value+0x8a>
	else if(i == '2') a = 20;
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	2b32      	cmp	r3, #50	; 0x32
 8001cb0:	d102      	bne.n	8001cb8 <temp_value+0x38>
 8001cb2:	4b5e      	ldr	r3, [pc, #376]	; (8001e2c <temp_value+0x1ac>)
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	e028      	b.n	8001d0a <temp_value+0x8a>
	else if(i == '3') a = 30;
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	2b33      	cmp	r3, #51	; 0x33
 8001cbc:	d102      	bne.n	8001cc4 <temp_value+0x44>
 8001cbe:	4b5c      	ldr	r3, [pc, #368]	; (8001e30 <temp_value+0x1b0>)
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	e022      	b.n	8001d0a <temp_value+0x8a>
	else if(i == '4') a = 40;
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	2b34      	cmp	r3, #52	; 0x34
 8001cc8:	d102      	bne.n	8001cd0 <temp_value+0x50>
 8001cca:	4b5a      	ldr	r3, [pc, #360]	; (8001e34 <temp_value+0x1b4>)
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	e01c      	b.n	8001d0a <temp_value+0x8a>
	else if(i == '5') a = 50;
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	2b35      	cmp	r3, #53	; 0x35
 8001cd4:	d102      	bne.n	8001cdc <temp_value+0x5c>
 8001cd6:	4b58      	ldr	r3, [pc, #352]	; (8001e38 <temp_value+0x1b8>)
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	e016      	b.n	8001d0a <temp_value+0x8a>
	else if(i == '6') a = 60;
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	2b36      	cmp	r3, #54	; 0x36
 8001ce0:	d102      	bne.n	8001ce8 <temp_value+0x68>
 8001ce2:	4b56      	ldr	r3, [pc, #344]	; (8001e3c <temp_value+0x1bc>)
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	e010      	b.n	8001d0a <temp_value+0x8a>
	else if(i == '7') a = 70;
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	2b37      	cmp	r3, #55	; 0x37
 8001cec:	d102      	bne.n	8001cf4 <temp_value+0x74>
 8001cee:	4b54      	ldr	r3, [pc, #336]	; (8001e40 <temp_value+0x1c0>)
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	e00a      	b.n	8001d0a <temp_value+0x8a>
	else if(i == '8') a = 80;
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	2b38      	cmp	r3, #56	; 0x38
 8001cf8:	d102      	bne.n	8001d00 <temp_value+0x80>
 8001cfa:	4b52      	ldr	r3, [pc, #328]	; (8001e44 <temp_value+0x1c4>)
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	e004      	b.n	8001d0a <temp_value+0x8a>
	else if(i == '9') a = 90;
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	2b39      	cmp	r3, #57	; 0x39
 8001d04:	d101      	bne.n	8001d0a <temp_value+0x8a>
 8001d06:	4b50      	ldr	r3, [pc, #320]	; (8001e48 <temp_value+0x1c8>)
 8001d08:	617b      	str	r3, [r7, #20]


	if(j == '0') b = 0;
 8001d0a:	79bb      	ldrb	r3, [r7, #6]
 8001d0c:	2b30      	cmp	r3, #48	; 0x30
 8001d0e:	d103      	bne.n	8001d18 <temp_value+0x98>
 8001d10:	f04f 0300 	mov.w	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	e038      	b.n	8001d8a <temp_value+0x10a>
	else if(j == '1') b = 1;
 8001d18:	79bb      	ldrb	r3, [r7, #6]
 8001d1a:	2b31      	cmp	r3, #49	; 0x31
 8001d1c:	d103      	bne.n	8001d26 <temp_value+0xa6>
 8001d1e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	e031      	b.n	8001d8a <temp_value+0x10a>
	else if(j == '2') b = 2;
 8001d26:	79bb      	ldrb	r3, [r7, #6]
 8001d28:	2b32      	cmp	r3, #50	; 0x32
 8001d2a:	d103      	bne.n	8001d34 <temp_value+0xb4>
 8001d2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	e02a      	b.n	8001d8a <temp_value+0x10a>
	else if(j == '3') b = 3;
 8001d34:	79bb      	ldrb	r3, [r7, #6]
 8001d36:	2b33      	cmp	r3, #51	; 0x33
 8001d38:	d102      	bne.n	8001d40 <temp_value+0xc0>
 8001d3a:	4b44      	ldr	r3, [pc, #272]	; (8001e4c <temp_value+0x1cc>)
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	e024      	b.n	8001d8a <temp_value+0x10a>
	else if(j == '4') b = 4;
 8001d40:	79bb      	ldrb	r3, [r7, #6]
 8001d42:	2b34      	cmp	r3, #52	; 0x34
 8001d44:	d103      	bne.n	8001d4e <temp_value+0xce>
 8001d46:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	e01d      	b.n	8001d8a <temp_value+0x10a>
	else if(j == '5') b = 5;
 8001d4e:	79bb      	ldrb	r3, [r7, #6]
 8001d50:	2b35      	cmp	r3, #53	; 0x35
 8001d52:	d102      	bne.n	8001d5a <temp_value+0xda>
 8001d54:	4b3e      	ldr	r3, [pc, #248]	; (8001e50 <temp_value+0x1d0>)
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	e017      	b.n	8001d8a <temp_value+0x10a>
	else if(j == '6') b = 6;
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	2b36      	cmp	r3, #54	; 0x36
 8001d5e:	d102      	bne.n	8001d66 <temp_value+0xe6>
 8001d60:	4b3c      	ldr	r3, [pc, #240]	; (8001e54 <temp_value+0x1d4>)
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	e011      	b.n	8001d8a <temp_value+0x10a>
	else if(j == '7') b = 7;
 8001d66:	79bb      	ldrb	r3, [r7, #6]
 8001d68:	2b37      	cmp	r3, #55	; 0x37
 8001d6a:	d102      	bne.n	8001d72 <temp_value+0xf2>
 8001d6c:	4b3a      	ldr	r3, [pc, #232]	; (8001e58 <temp_value+0x1d8>)
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	e00b      	b.n	8001d8a <temp_value+0x10a>
	else if(j == '8') b = 8;
 8001d72:	79bb      	ldrb	r3, [r7, #6]
 8001d74:	2b38      	cmp	r3, #56	; 0x38
 8001d76:	d103      	bne.n	8001d80 <temp_value+0x100>
 8001d78:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	e004      	b.n	8001d8a <temp_value+0x10a>
	else if(j == '9') b = 9;
 8001d80:	79bb      	ldrb	r3, [r7, #6]
 8001d82:	2b39      	cmp	r3, #57	; 0x39
 8001d84:	d101      	bne.n	8001d8a <temp_value+0x10a>
 8001d86:	4b35      	ldr	r3, [pc, #212]	; (8001e5c <temp_value+0x1dc>)
 8001d88:	613b      	str	r3, [r7, #16]

	if(k == '0') c = 0;
 8001d8a:	797b      	ldrb	r3, [r7, #5]
 8001d8c:	2b30      	cmp	r3, #48	; 0x30
 8001d8e:	d103      	bne.n	8001d98 <temp_value+0x118>
 8001d90:	f04f 0300 	mov.w	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	e035      	b.n	8001e04 <temp_value+0x184>
	else if(k == '1') c = 0.1;
 8001d98:	797b      	ldrb	r3, [r7, #5]
 8001d9a:	2b31      	cmp	r3, #49	; 0x31
 8001d9c:	d102      	bne.n	8001da4 <temp_value+0x124>
 8001d9e:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <temp_value+0x1e0>)
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	e02f      	b.n	8001e04 <temp_value+0x184>
	else if(k == '2') c = 0.2;
 8001da4:	797b      	ldrb	r3, [r7, #5]
 8001da6:	2b32      	cmp	r3, #50	; 0x32
 8001da8:	d102      	bne.n	8001db0 <temp_value+0x130>
 8001daa:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <temp_value+0x1e4>)
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	e029      	b.n	8001e04 <temp_value+0x184>
	else if(k == '3') c = 0.3;
 8001db0:	797b      	ldrb	r3, [r7, #5]
 8001db2:	2b33      	cmp	r3, #51	; 0x33
 8001db4:	d102      	bne.n	8001dbc <temp_value+0x13c>
 8001db6:	4b2c      	ldr	r3, [pc, #176]	; (8001e68 <temp_value+0x1e8>)
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	e023      	b.n	8001e04 <temp_value+0x184>
	else if(k == '4') c = 0.4;
 8001dbc:	797b      	ldrb	r3, [r7, #5]
 8001dbe:	2b34      	cmp	r3, #52	; 0x34
 8001dc0:	d102      	bne.n	8001dc8 <temp_value+0x148>
 8001dc2:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <temp_value+0x1ec>)
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	e01d      	b.n	8001e04 <temp_value+0x184>
	else if(k == '5') c = 0.5;
 8001dc8:	797b      	ldrb	r3, [r7, #5]
 8001dca:	2b35      	cmp	r3, #53	; 0x35
 8001dcc:	d103      	bne.n	8001dd6 <temp_value+0x156>
 8001dce:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	e016      	b.n	8001e04 <temp_value+0x184>
	else if(k == '6') c = 0.6;
 8001dd6:	797b      	ldrb	r3, [r7, #5]
 8001dd8:	2b36      	cmp	r3, #54	; 0x36
 8001dda:	d102      	bne.n	8001de2 <temp_value+0x162>
 8001ddc:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <temp_value+0x1f0>)
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	e010      	b.n	8001e04 <temp_value+0x184>
	else if(k == '7') c = 0.7;
 8001de2:	797b      	ldrb	r3, [r7, #5]
 8001de4:	2b37      	cmp	r3, #55	; 0x37
 8001de6:	d102      	bne.n	8001dee <temp_value+0x16e>
 8001de8:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <temp_value+0x1f4>)
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	e00a      	b.n	8001e04 <temp_value+0x184>
	else if(k == '8') c = 0.8;
 8001dee:	797b      	ldrb	r3, [r7, #5]
 8001df0:	2b38      	cmp	r3, #56	; 0x38
 8001df2:	d102      	bne.n	8001dfa <temp_value+0x17a>
 8001df4:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <temp_value+0x1f8>)
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	e004      	b.n	8001e04 <temp_value+0x184>
	else if(k == '9') c = 0.9;
 8001dfa:	797b      	ldrb	r3, [r7, #5]
 8001dfc:	2b39      	cmp	r3, #57	; 0x39
 8001dfe:	d101      	bne.n	8001e04 <temp_value+0x184>
 8001e00:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <temp_value+0x1fc>)
 8001e02:	60fb      	str	r3, [r7, #12]

	return a+b+c;
 8001e04:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e08:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e10:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e14:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001e18:	eeb0 0a67 	vmov.f32	s0, s15
 8001e1c:	371c      	adds	r7, #28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	41200000 	.word	0x41200000
 8001e2c:	41a00000 	.word	0x41a00000
 8001e30:	41f00000 	.word	0x41f00000
 8001e34:	42200000 	.word	0x42200000
 8001e38:	42480000 	.word	0x42480000
 8001e3c:	42700000 	.word	0x42700000
 8001e40:	428c0000 	.word	0x428c0000
 8001e44:	42a00000 	.word	0x42a00000
 8001e48:	42b40000 	.word	0x42b40000
 8001e4c:	40400000 	.word	0x40400000
 8001e50:	40a00000 	.word	0x40a00000
 8001e54:	40c00000 	.word	0x40c00000
 8001e58:	40e00000 	.word	0x40e00000
 8001e5c:	41100000 	.word	0x41100000
 8001e60:	3dcccccd 	.word	0x3dcccccd
 8001e64:	3e4ccccd 	.word	0x3e4ccccd
 8001e68:	3e99999a 	.word	0x3e99999a
 8001e6c:	3ecccccd 	.word	0x3ecccccd
 8001e70:	3f19999a 	.word	0x3f19999a
 8001e74:	3f333333 	.word	0x3f333333
 8001e78:	3f4ccccd 	.word	0x3f4ccccd
 8001e7c:	3f666666 	.word	0x3f666666

08001e80 <ringInit>:


void storeChar(unsigned char c, Ring_Buffer *buffer);


void ringInit(void){
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0

	_rx_buffer1 = &rx_buffer1;
 8001e84:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <ringInit+0x68>)
 8001e86:	4a19      	ldr	r2, [pc, #100]	; (8001eec <ringInit+0x6c>)
 8001e88:	601a      	str	r2, [r3, #0]
    _tx_buffer1 = &tx_buffer1;
 8001e8a:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <ringInit+0x70>)
 8001e8c:	4a19      	ldr	r2, [pc, #100]	; (8001ef4 <ringInit+0x74>)
 8001e8e:	601a      	str	r2, [r3, #0]
    _rx_buffer2 = &rx_buffer2;
 8001e90:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <ringInit+0x78>)
 8001e92:	4a1a      	ldr	r2, [pc, #104]	; (8001efc <ringInit+0x7c>)
 8001e94:	601a      	str	r2, [r3, #0]
    _tx_buffer2 = &tx_buffer2;
 8001e96:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <ringInit+0x80>)
 8001e98:	4a1a      	ldr	r2, [pc, #104]	; (8001f04 <ringInit+0x84>)
 8001e9a:	601a      	str	r2, [r3, #0]

    /* Enable the INTERRUPTION by UART ERROR (frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_ERR);
 8001e9c:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <ringInit+0x88>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	695a      	ldr	r2, [r3, #20]
 8001ea2:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <ringInit+0x88>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_ERR);
 8001eac:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <ringInit+0x8c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <ringInit+0x8c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	615a      	str	r2, [r3, #20]

    /* Enable the INTERRUPTION by EMPTY DATA REGISTER */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_RXNE);
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <ringInit+0x88>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <ringInit+0x88>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0220 	orr.w	r2, r2, #32
 8001eca:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_RXNE);
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <ringInit+0x8c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <ringInit+0x8c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0220 	orr.w	r2, r2, #32
 8001eda:	60da      	str	r2, [r3, #12]
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000a44 	.word	0x20000a44
 8001eec:	2000008c 	.word	0x2000008c
 8001ef0:	20000a48 	.word	0x20000a48
 8001ef4:	20000294 	.word	0x20000294
 8001ef8:	20000a4c 	.word	0x20000a4c
 8001efc:	2000049c 	.word	0x2000049c
 8001f00:	20000a40 	.word	0x20000a40
 8001f04:	200006a4 	.word	0x200006a4
 8001f08:	20000e4c 	.word	0x20000e4c
 8001f0c:	20000dc0 	.word	0x20000dc0

08001f10 <storeChar>:


void storeChar(unsigned char c, Ring_Buffer *buffer){
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	6039      	str	r1, [r7, #0]
 8001f1a:	71fb      	strb	r3, [r7, #7]

    int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f22:	3301      	adds	r3, #1
 8001f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f28:	60fb      	str	r3, [r7, #12]

    // If we want to stock something before the TAIL, meaning that HEAD will reach the TAIL position, it will cause a BUFFER overflow

    if(i != buffer->tail)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d009      	beq.n	8001f4a <storeChar+0x3a>
    {
    	buffer->buffer[buffer->head] = c;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	79f9      	ldrb	r1, [r7, #7]
 8001f40:	54d1      	strb	r1, [r2, r3]
        buffer->head = i;
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }
}
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <UART_peek>:
		_rx_buffer2->head = 0;
	}
}


int UART_peek(UART_HandleTypeDef *uart){
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

	if (uart == WiFi_UART)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a1c      	ldr	r2, [pc, #112]	; (8001fd4 <UART_peek+0x7c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d114      	bne.n	8001f92 <UART_peek+0x3a>
	{
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 8001f68:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <UART_peek+0x80>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001f70:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <UART_peek+0x80>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d102      	bne.n	8001f82 <UART_peek+0x2a>
 8001f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f80:	e022      	b.n	8001fc8 <UART_peek+0x70>

		else return _rx_buffer1->buffer[_rx_buffer1->tail];
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <UART_peek+0x80>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <UART_peek+0x80>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f8e:	5cd3      	ldrb	r3, [r2, r3]
 8001f90:	e01a      	b.n	8001fc8 <UART_peek+0x70>
	}

	else if (uart == PC_UART)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a11      	ldr	r2, [pc, #68]	; (8001fdc <UART_peek+0x84>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d114      	bne.n	8001fc4 <UART_peek+0x6c>
	{
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <UART_peek+0x88>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <UART_peek+0x88>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d102      	bne.n	8001fb4 <UART_peek+0x5c>
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb2:	e009      	b.n	8001fc8 <UART_peek+0x70>

		else return _rx_buffer2->buffer[_rx_buffer2->tail];
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <UART_peek+0x88>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <UART_peek+0x88>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001fc0:	5cd3      	ldrb	r3, [r2, r3]
 8001fc2:	e001      	b.n	8001fc8 <UART_peek+0x70>
	}

	return -1;
 8001fc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	20000e4c 	.word	0x20000e4c
 8001fd8:	20000a44 	.word	0x20000a44
 8001fdc:	20000dc0 	.word	0x20000dc0
 8001fe0:	20000a4c 	.word	0x20000a4c

08001fe4 <UART_read>:


int UART_read(UART_HandleTypeDef *uart){
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

	if (uart == WiFi_UART)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a29      	ldr	r2, [pc, #164]	; (8002094 <UART_read+0xb0>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d121      	bne.n	8002038 <UART_read+0x54>
	{
		// If HEAD is not before TAIL, there is not CHARACTER
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 8001ff4:	4b28      	ldr	r3, [pc, #160]	; (8002098 <UART_read+0xb4>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001ffc:	4b26      	ldr	r3, [pc, #152]	; (8002098 <UART_read+0xb4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002004:	429a      	cmp	r2, r3
 8002006:	d102      	bne.n	800200e <UART_read+0x2a>
 8002008:	f04f 33ff 	mov.w	r3, #4294967295
 800200c:	e03c      	b.n	8002088 <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 800200e:	4b22      	ldr	r3, [pc, #136]	; (8002098 <UART_read+0xb4>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4b21      	ldr	r3, [pc, #132]	; (8002098 <UART_read+0xb4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800201a:	5cd3      	ldrb	r3, [r2, r3]
 800201c:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 800201e:	4b1e      	ldr	r3, [pc, #120]	; (8002098 <UART_read+0xb4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <UART_read+0xb4>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002030:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8002034:	7bbb      	ldrb	r3, [r7, #14]
 8002036:	e027      	b.n	8002088 <UART_read+0xa4>
		}
	}

	else if (uart == PC_UART)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a18      	ldr	r2, [pc, #96]	; (800209c <UART_read+0xb8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d121      	bne.n	8002084 <UART_read+0xa0>
	{
		// If HEAD is not before TAIL, there is not CHARACTER
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 8002040:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <UART_read+0xbc>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002048:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <UART_read+0xbc>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002050:	429a      	cmp	r2, r3
 8002052:	d102      	bne.n	800205a <UART_read+0x76>
 8002054:	f04f 33ff 	mov.w	r3, #4294967295
 8002058:	e016      	b.n	8002088 <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 800205a:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <UART_read+0xbc>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <UART_read+0xbc>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002066:	5cd3      	ldrb	r3, [r2, r3]
 8002068:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <UART_read+0xbc>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <UART_read+0xbc>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800207c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	e001      	b.n	8002088 <UART_read+0xa4>
		}
	}

	else return -1;
 8002084:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002088:	4618      	mov	r0, r3
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	20000e4c 	.word	0x20000e4c
 8002098:	20000a44 	.word	0x20000a44
 800209c:	20000dc0 	.word	0x20000dc0
 80020a0:	20000a4c 	.word	0x20000a4c

080020a4 <UART_write>:


void UART_write(int c, UART_HandleTypeDef *uart){
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]

	if (c>=0)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	db54      	blt.n	800215e <UART_write+0xba>
	{
		if (uart == WiFi_UART)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	4a2d      	ldr	r2, [pc, #180]	; (800216c <UART_write+0xc8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d126      	bne.n	800210a <UART_write+0x66>
		{
			int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 80020bc:	4b2c      	ldr	r3, [pc, #176]	; (8002170 <UART_write+0xcc>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020c4:	3301      	adds	r3, #1
 80020c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ca:	60bb      	str	r3, [r7, #8]

			// If OUTPUT BUFFER is full, INTERRUPTION empties it
		    while (i == _tx_buffer1->tail);
 80020cc:	bf00      	nop
 80020ce:	4b28      	ldr	r3, [pc, #160]	; (8002170 <UART_write+0xcc>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d0f8      	beq.n	80020ce <UART_write+0x2a>

		   _tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 80020dc:	4b24      	ldr	r3, [pc, #144]	; (8002170 <UART_write+0xcc>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4b23      	ldr	r3, [pc, #140]	; (8002170 <UART_write+0xcc>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	b2c9      	uxtb	r1, r1
 80020ec:	54d1      	strb	r1, [r2, r3]
		   _tx_buffer1->head = i;
 80020ee:	4b20      	ldr	r3, [pc, #128]	; (8002170 <UART_write+0xcc>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		   // Enables INTERRUPTION in the UART TRANSMISSION
		   __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_TXE);
 80020f8:	4b1c      	ldr	r3, [pc, #112]	; (800216c <UART_write+0xc8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	4b1b      	ldr	r3, [pc, #108]	; (800216c <UART_write+0xc8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002106:	60da      	str	r2, [r3, #12]

			// Enables INTERRUPTION in the UART TRANSMISSION
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
		}
	}
}
 8002108:	e029      	b.n	800215e <UART_write+0xba>
		else if (uart == PC_UART)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	4a19      	ldr	r2, [pc, #100]	; (8002174 <UART_write+0xd0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d125      	bne.n	800215e <UART_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8002112:	4b19      	ldr	r3, [pc, #100]	; (8002178 <UART_write+0xd4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800211a:	3301      	adds	r3, #1
 800211c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002120:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 8002122:	bf00      	nop
 8002124:	4b14      	ldr	r3, [pc, #80]	; (8002178 <UART_write+0xd4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	429a      	cmp	r2, r3
 8002130:	d0f8      	beq.n	8002124 <UART_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8002132:	4b11      	ldr	r3, [pc, #68]	; (8002178 <UART_write+0xd4>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <UART_write+0xd4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	b2c9      	uxtb	r1, r1
 8002142:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <UART_write+0xd4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
 800214e:	4b09      	ldr	r3, [pc, #36]	; (8002174 <UART_write+0xd0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	4b07      	ldr	r3, [pc, #28]	; (8002174 <UART_write+0xd0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800215c:	60da      	str	r2, [r3, #12]
}
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000e4c 	.word	0x20000e4c
 8002170:	20000a48 	.word	0x20000a48
 8002174:	20000dc0 	.word	0x20000dc0
 8002178:	20000a40 	.word	0x20000a40

0800217c <UART_available>:


int UART_available(UART_HandleTypeDef *uart){
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

	if (uart == WiFi_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a19      	ldr	r2, [pc, #100]	; (80021ec <UART_available+0x70>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d111      	bne.n	80021b0 <UART_available+0x34>
 800218c:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <UART_available+0x74>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002194:	b29a      	uxth	r2, r3
 8002196:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <UART_available+0x74>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800219e:	b29b      	uxth	r3, r3
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ae:	e017      	b.n	80021e0 <UART_available+0x64>

	else if (uart == PC_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a10      	ldr	r2, [pc, #64]	; (80021f4 <UART_available+0x78>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d111      	bne.n	80021dc <UART_available+0x60>
 80021b8:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <UART_available+0x7c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <UART_available+0x7c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021da:	e001      	b.n	80021e0 <UART_available+0x64>

	return -1;
 80021dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	20000e4c 	.word	0x20000e4c
 80021f0:	20000a44 	.word	0x20000a44
 80021f4:	20000dc0 	.word	0x20000dc0
 80021f8:	20000a4c 	.word	0x20000a4c

080021fc <UART_send>:

	return 1;
}


void UART_send (const char *s, UART_HandleTypeDef *uart){
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]

	while(*s!='\0') UART_write(*s++, uart);
 8002206:	e007      	b.n	8002218 <UART_send+0x1c>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	6839      	ldr	r1, [r7, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ff46 	bl	80020a4 <UART_write>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f3      	bne.n	8002208 <UART_send+0xc>
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <UART_copyUpto>:

  while(*s) UART_write(*s++, uart);
}


int UART_copyUpto(char *string, char *buffertocopyinto, UART_HandleTypeDef *uart){
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]

	int so_far =0;
 8002238:	2300      	movs	r3, #0
 800223a:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f7fd ffc7 	bl	80001d0 <strlen>
 8002242:	4603      	mov	r3, r0
 8002244:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	61bb      	str	r3, [r7, #24]

again:
	while (!UART_available(uart));
 800224a:	bf00      	nop
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ff95 	bl	800217c <UART_available>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f9      	beq.n	800224c <UART_copyUpto+0x20>

	while (UART_peek(uart) != string[so_far]){
 8002258:	e01f      	b.n	800229a <UART_copyUpto+0x6e>

		buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 800225a:	4b32      	ldr	r3, [pc, #200]	; (8002324 <UART_copyUpto+0xf8>)
 800225c:	6819      	ldr	r1, [r3, #0]
 800225e:	4b31      	ldr	r3, [pc, #196]	; (8002324 <UART_copyUpto+0xf8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	68b8      	ldr	r0, [r7, #8]
 800226a:	4403      	add	r3, r0
 800226c:	5c8a      	ldrb	r2, [r1, r2]
 800226e:	701a      	strb	r2, [r3, #0]
		_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8002270:	4b2c      	ldr	r3, [pc, #176]	; (8002324 <UART_copyUpto+0xf8>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <UART_copyUpto+0xf8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002282:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		indx++;
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	3301      	adds	r3, #1
 800228a:	61bb      	str	r3, [r7, #24]
		while (!UART_available(uart));
 800228c:	bf00      	nop
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ff74 	bl	800217c <UART_available>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f9      	beq.n	800228e <UART_copyUpto+0x62>
	while (UART_peek(uart) != string[so_far]){
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff fe5c 	bl	8001f58 <UART_peek>
 80022a0:	4601      	mov	r1, r0
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	4299      	cmp	r1, r3
 80022ac:	d1d5      	bne.n	800225a <UART_copyUpto+0x2e>

	}

	while (UART_peek(uart) == string [so_far]){
 80022ae:	e01b      	b.n	80022e8 <UART_copyUpto+0xbc>

		so_far++;
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	3301      	adds	r3, #1
 80022b4:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = UART_read(uart);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff fe94 	bl	8001fe4 <UART_read>
 80022bc:	4601      	mov	r1, r0
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	61ba      	str	r2, [r7, #24]
 80022c4:	461a      	mov	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	4413      	add	r3, r2
 80022ca:	b2ca      	uxtb	r2, r1
 80022cc:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d101      	bne.n	80022da <UART_copyUpto+0xae>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e01f      	b.n	800231a <UART_copyUpto+0xee>
		while (!UART_available(uart));
 80022da:	bf00      	nop
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ff4d 	bl	800217c <UART_available>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f9      	beq.n	80022dc <UART_copyUpto+0xb0>
	while (UART_peek(uart) == string [so_far]){
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff fe35 	bl	8001f58 <UART_peek>
 80022ee:	4601      	mov	r1, r0
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4413      	add	r3, r2
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	4299      	cmp	r1, r3
 80022fa:	d0d9      	beq.n	80022b0 <UART_copyUpto+0x84>
	}

	if (so_far != len){
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	429a      	cmp	r2, r3
 8002302:	d002      	beq.n	800230a <UART_copyUpto+0xde>

		so_far = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
		goto again;
 8002308:	e79f      	b.n	800224a <UART_copyUpto+0x1e>
	}

	if (so_far == len) return 1;
 800230a:	69fa      	ldr	r2, [r7, #28]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	429a      	cmp	r2, r3
 8002310:	d101      	bne.n	8002316 <UART_copyUpto+0xea>
 8002312:	2301      	movs	r3, #1
 8002314:	e001      	b.n	800231a <UART_copyUpto+0xee>

	else return -1;
 8002316:	f04f 33ff 	mov.w	r3, #4294967295
}
 800231a:	4618      	mov	r0, r3
 800231c:	3720      	adds	r7, #32
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000a44 	.word	0x20000a44

08002328 <UART_waitFor>:


int UART_waitFor(char *string,UART_HandleTypeDef *uart){
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]

	int so_far =0;
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7fd ff4a 	bl	80001d0 <strlen>
 800233c:	4603      	mov	r3, r0
 800233e:	60bb      	str	r3, [r7, #8]

again_device:
	while (!UART_available(uart));
 8002340:	bf00      	nop
 8002342:	6838      	ldr	r0, [r7, #0]
 8002344:	f7ff ff1a 	bl	800217c <UART_available>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f9      	beq.n	8002342 <UART_waitFor+0x1a>

	if (UART_peek(uart) != string[so_far]){
 800234e:	6838      	ldr	r0, [r7, #0]
 8002350:	f7ff fe02 	bl	8001f58 <UART_peek>
 8002354:	4601      	mov	r1, r0
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	4413      	add	r3, r2
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	4299      	cmp	r1, r3
 8002360:	d01e      	beq.n	80023a0 <UART_waitFor+0x78>

		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 8002362:	4b1e      	ldr	r3, [pc, #120]	; (80023dc <UART_waitFor+0xb4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <UART_waitFor+0xb4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002374:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 8002378:	e7e2      	b.n	8002340 <UART_waitFor+0x18>

	}

	while (UART_peek(uart) == string [so_far]){

		so_far++;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	3301      	adds	r3, #1
 800237e:	60fb      	str	r3, [r7, #12]
		UART_read(uart);
 8002380:	6838      	ldr	r0, [r7, #0]
 8002382:	f7ff fe2f 	bl	8001fe4 <UART_read>
		if (so_far == len) return 1;
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	429a      	cmp	r2, r3
 800238c:	d101      	bne.n	8002392 <UART_waitFor+0x6a>
 800238e:	2301      	movs	r3, #1
 8002390:	e01f      	b.n	80023d2 <UART_waitFor+0xaa>
		while (!UART_available(uart));
 8002392:	bf00      	nop
 8002394:	6838      	ldr	r0, [r7, #0]
 8002396:	f7ff fef1 	bl	800217c <UART_available>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f9      	beq.n	8002394 <UART_waitFor+0x6c>
	while (UART_peek(uart) == string [so_far]){
 80023a0:	6838      	ldr	r0, [r7, #0]
 80023a2:	f7ff fdd9 	bl	8001f58 <UART_peek>
 80023a6:	4601      	mov	r1, r0
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4299      	cmp	r1, r3
 80023b2:	d0e2      	beq.n	800237a <UART_waitFor+0x52>
	}

	if (so_far != len){
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d002      	beq.n	80023c2 <UART_waitFor+0x9a>

		so_far = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
		goto again_device;
 80023c0:	e7be      	b.n	8002340 <UART_waitFor+0x18>
	}

	if (so_far == len) return 1;
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d101      	bne.n	80023ce <UART_waitFor+0xa6>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e001      	b.n	80023d2 <UART_waitFor+0xaa>

	else return -1;
 80023ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000a44 	.word	0x20000a44

080023e0 <UART_isr>:


void UART_isr(UART_HandleTypeDef *huart){
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

	uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	613b      	str	r3, [r7, #16]

	/* If DR (DATA REGISTER) is not empty and RX INT is ENABLE */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d023      	beq.n	800244a <UART_isr+0x6a>
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	f003 0320 	and.w	r3, r3, #32
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01e      	beq.n	800244a <UART_isr+0x6a>
    	    	                USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	************************************************************************************************************/

		huart->Instance->SR;                   // Read SR (STATUS REGISTER)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR; // Read DR (DATA REGISTER)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	73fb      	strb	r3, [r7, #15]

        if (huart == WiFi_UART){
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a3f      	ldr	r2, [pc, #252]	; (800251c <UART_isr+0x13c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d107      	bne.n	8002432 <UART_isr+0x52>

        	storeChar(c, _rx_buffer1); // Stock DATA in BUFFER
 8002422:	4b3f      	ldr	r3, [pc, #252]	; (8002520 <UART_isr+0x140>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fd70 	bl	8001f10 <storeChar>
        else if (huart == PC_UART){

        	storeChar(c, _rx_buffer2); // Stock DATA in BUFFER
        }

        return;
 8002430:	e06d      	b.n	800250e <UART_isr+0x12e>
        else if (huart == PC_UART){
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a3b      	ldr	r2, [pc, #236]	; (8002524 <UART_isr+0x144>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d169      	bne.n	800250e <UART_isr+0x12e>
        	storeChar(c, _rx_buffer2); // Stock DATA in BUFFER
 800243a:	4b3b      	ldr	r3, [pc, #236]	; (8002528 <UART_isr+0x148>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fd64 	bl	8001f10 <storeChar>
        return;
 8002448:	e061      	b.n	800250e <UART_isr+0x12e>
    }

    /* If INTERRUPTION is produced by TRANSMIT DATA REGISTER EMPTY */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET)){
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002450:	2b00      	cmp	r3, #0
 8002452:	d05f      	beq.n	8002514 <UART_isr+0x134>
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245a:	2b00      	cmp	r3, #0
 800245c:	d05a      	beq.n	8002514 <UART_isr+0x134>

    	if (huart == WiFi_UART){
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a2e      	ldr	r2, [pc, #184]	; (800251c <UART_isr+0x13c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d127      	bne.n	80024b6 <UART_isr+0xd6>

    		if(tx_buffer1.head == tx_buffer1.tail){
 8002466:	4b31      	ldr	r3, [pc, #196]	; (800252c <UART_isr+0x14c>)
 8002468:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800246c:	4b2f      	ldr	r3, [pc, #188]	; (800252c <UART_isr+0x14c>)
 800246e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002472:	429a      	cmp	r2, r3
 8002474:	d108      	bne.n	8002488 <UART_isr+0xa8>

    			// Empty BUFFER, disable INTERRUPTION
    	        __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002484:	60da      	str	r2, [r3, #12]
        	     huart->Instance->DR = c;

        	}
        }

    	return;
 8002486:	e044      	b.n	8002512 <UART_isr+0x132>
    			unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8002488:	4b28      	ldr	r3, [pc, #160]	; (800252c <UART_isr+0x14c>)
 800248a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800248e:	4a27      	ldr	r2, [pc, #156]	; (800252c <UART_isr+0x14c>)
 8002490:	5cd3      	ldrb	r3, [r2, r3]
 8002492:	737b      	strb	r3, [r7, #13]
    			tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8002494:	4b25      	ldr	r3, [pc, #148]	; (800252c <UART_isr+0x14c>)
 8002496:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800249a:	3301      	adds	r3, #1
 800249c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024a0:	4a22      	ldr	r2, [pc, #136]	; (800252c <UART_isr+0x14c>)
 80024a2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    			huart->Instance->SR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
    			huart->Instance->DR = c;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	7b7a      	ldrb	r2, [r7, #13]
 80024b2:	605a      	str	r2, [r3, #4]
    	return;
 80024b4:	e02d      	b.n	8002512 <UART_isr+0x132>
    	else if (huart == PC_UART){
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a1a      	ldr	r2, [pc, #104]	; (8002524 <UART_isr+0x144>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d129      	bne.n	8002512 <UART_isr+0x132>
    		if(tx_buffer2.head == tx_buffer2.tail){
 80024be:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <UART_isr+0x150>)
 80024c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80024c4:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <UART_isr+0x150>)
 80024c6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d108      	bne.n	80024e0 <UART_isr+0x100>
        	    __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024dc:	60da      	str	r2, [r3, #12]
    	return;
 80024de:	e018      	b.n	8002512 <UART_isr+0x132>
        	    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <UART_isr+0x150>)
 80024e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80024e6:	4a12      	ldr	r2, [pc, #72]	; (8002530 <UART_isr+0x150>)
 80024e8:	5cd3      	ldrb	r3, [r2, r3]
 80024ea:	73bb      	strb	r3, [r7, #14]
        	    tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 80024ec:	4b10      	ldr	r3, [pc, #64]	; (8002530 <UART_isr+0x150>)
 80024ee:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80024f2:	3301      	adds	r3, #1
 80024f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f8:	4a0d      	ldr	r2, [pc, #52]	; (8002530 <UART_isr+0x150>)
 80024fa:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	     huart->Instance->SR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
        	     huart->Instance->DR = c;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	7bba      	ldrb	r2, [r7, #14]
 800250a:	605a      	str	r2, [r3, #4]
    	return;
 800250c:	e001      	b.n	8002512 <UART_isr+0x132>
        return;
 800250e:	bf00      	nop
 8002510:	e000      	b.n	8002514 <UART_isr+0x134>
    	return;
 8002512:	bf00      	nop
    }
}
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000e4c 	.word	0x20000e4c
 8002520:	20000a44 	.word	0x20000a44
 8002524:	20000dc0 	.word	0x20000dc0
 8002528:	20000a4c 	.word	0x20000a4c
 800252c:	20000294 	.word	0x20000294
 8002530:	200006a4 	.word	0x200006a4

08002534 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	80fb      	strh	r3, [r7, #6]

    if (GPIO_Pin==S_In_Pin)
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	2b08      	cmp	r3, #8
 8002542:	d102      	bne.n	800254a <HAL_GPIO_EXTI_Callback+0x16>
    {
        inside = 1;
 8002544:	4b07      	ldr	r3, [pc, #28]	; (8002564 <HAL_GPIO_EXTI_Callback+0x30>)
 8002546:	2201      	movs	r2, #1
 8002548:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin==S_Out_Pin)
 800254a:	88fb      	ldrh	r3, [r7, #6]
 800254c:	2b02      	cmp	r3, #2
 800254e:	d102      	bne.n	8002556 <HAL_GPIO_EXTI_Callback+0x22>
    {
        outside = 1;
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_GPIO_EXTI_Callback+0x34>)
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]
    }
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	200008ac 	.word	0x200008ac
 8002568:	200008b0 	.word	0x200008b0

0800256c <debouncer>:

int debouncer(volatile int* button_int, GPIO_TypeDef* GPIO_port, uint16_t GPIO_number){ // Bounce Control
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	4613      	mov	r3, r2
 8002578:	80fb      	strh	r3, [r7, #6]

	static uint8_t button_count=0;
	static int counter=0;

	if (*button_int==1)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d13b      	bne.n	80025fa <debouncer+0x8e>
	{
		if (button_count==0)
 8002582:	4b20      	ldr	r3, [pc, #128]	; (8002604 <debouncer+0x98>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10b      	bne.n	80025a2 <debouncer+0x36>
		{
			counter=HAL_GetTick();
 800258a:	f002 f80b 	bl	80045a4 <HAL_GetTick>
 800258e:	4603      	mov	r3, r0
 8002590:	461a      	mov	r2, r3
 8002592:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <debouncer+0x9c>)
 8002594:	601a      	str	r2, [r3, #0]
			button_count++;
 8002596:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <debouncer+0x98>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	3301      	adds	r3, #1
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4b19      	ldr	r3, [pc, #100]	; (8002604 <debouncer+0x98>)
 80025a0:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick()-counter>=20)
 80025a2:	f001 ffff 	bl	80045a4 <HAL_GetTick>
 80025a6:	4603      	mov	r3, r0
 80025a8:	4a17      	ldr	r2, [pc, #92]	; (8002608 <debouncer+0x9c>)
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	2b13      	cmp	r3, #19
 80025b0:	d923      	bls.n	80025fa <debouncer+0x8e>
		{
			counter=HAL_GetTick();
 80025b2:	f001 fff7 	bl	80045a4 <HAL_GetTick>
 80025b6:	4603      	mov	r3, r0
 80025b8:	461a      	mov	r2, r3
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <debouncer+0x9c>)
 80025bc:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number)!=1)
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	4619      	mov	r1, r3
 80025c2:	68b8      	ldr	r0, [r7, #8]
 80025c4:	f002 ff2a 	bl	800541c <HAL_GPIO_ReadPin>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d003      	beq.n	80025d6 <debouncer+0x6a>
			{
				button_count=1;
 80025ce:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <debouncer+0x98>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	e005      	b.n	80025e2 <debouncer+0x76>
			}
			else
			{
				button_count++;
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <debouncer+0x98>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	3301      	adds	r3, #1
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <debouncer+0x98>)
 80025e0:	701a      	strb	r2, [r3, #0]
			}
			if (button_count==4 ) // Debounce Period
 80025e2:	4b08      	ldr	r3, [pc, #32]	; (8002604 <debouncer+0x98>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d107      	bne.n	80025fa <debouncer+0x8e>
			{
				button_count=0;
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <debouncer+0x98>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
				*button_int=0;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
				return 1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <debouncer+0x90>
			}
		}
	}
	return 0;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	200008e0 	.word	0x200008e0
 8002608:	200008e4 	.word	0x200008e4

0800260c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800260c:	b5b0      	push	{r4, r5, r7, lr}
 800260e:	b08a      	sub	sp, #40	; 0x28
 8002610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002612:	f001 ff61 	bl	80044d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002616:	f000 fbdd 	bl	8002dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800261a:	f001 f967 	bl	80038ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800261e:	f001 f8e7 	bl	80037f0 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8002622:	f001 f939 	bl	8003898 <MX_USART6_UART_Init>
  MX_TIM5_Init();
 8002626:	f000 ffab 	bl	8003580 <MX_TIM5_Init>
  MX_TIM1_Init();
 800262a:	f000 fd61 	bl	80030f0 <MX_TIM1_Init>
  MX_TIM4_Init();
 800262e:	f000 ff31 	bl	8003494 <MX_TIM4_Init>
  MX_TIM2_Init();
 8002632:	f000 fe15 	bl	8003260 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002636:	f000 fe9f 	bl	8003378 <MX_TIM3_Init>
  MX_TIM8_Init();
 800263a:	f001 f825 	bl	8003688 <MX_TIM8_Init>
  MX_TIM9_Init();
 800263e:	f001 f873 	bl	8003728 <MX_TIM9_Init>
  MX_TIM6_Init();
 8002642:	f000 ffeb 	bl	800361c <MX_TIM6_Init>
  MX_ADC1_Init();
 8002646:	f000 fc2f 	bl	8002ea8 <MX_ADC1_Init>
  MX_ADC2_Init();
 800264a:	f000 fc7f 	bl	8002f4c <MX_ADC2_Init>
  MX_ADC3_Init();
 800264e:	f000 fccf 	bl	8002ff0 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8002652:	f001 f8f7 	bl	8003844 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002656:	f000 fd1d 	bl	8003094 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // RGB Gaming LED
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800265a:	2100      	movs	r1, #0
 800265c:	482e      	ldr	r0, [pc, #184]	; (8002718 <main+0x10c>)
 800265e:	f003 fdf1 	bl	8006244 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002662:	2104      	movs	r1, #4
 8002664:	482c      	ldr	r0, [pc, #176]	; (8002718 <main+0x10c>)
 8002666:	f003 fded 	bl	8006244 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800266a:	2108      	movs	r1, #8
 800266c:	482a      	ldr	r0, [pc, #168]	; (8002718 <main+0x10c>)
 800266e:	f003 fde9 	bl	8006244 <HAL_TIM_PWM_Start>

  // Parcel Servo
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002672:	2100      	movs	r1, #0
 8002674:	4829      	ldr	r0, [pc, #164]	; (800271c <main+0x110>)
 8002676:	f003 fde5 	bl	8006244 <HAL_TIM_PWM_Start>

  // Garage Servo
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800267a:	2104      	movs	r1, #4
 800267c:	4827      	ldr	r0, [pc, #156]	; (800271c <main+0x110>)
 800267e:	f003 fde1 	bl	8006244 <HAL_TIM_PWM_Start>

  // Swning Servo
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002682:	2108      	movs	r1, #8
 8002684:	4825      	ldr	r0, [pc, #148]	; (800271c <main+0x110>)
 8002686:	f003 fddd 	bl	8006244 <HAL_TIM_PWM_Start>

  // Living Room Servo
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800268a:	210c      	movs	r1, #12
 800268c:	4824      	ldr	r0, [pc, #144]	; (8002720 <main+0x114>)
 800268e:	f003 fdd9 	bl	8006244 <HAL_TIM_PWM_Start>

  // Bedroom Servo
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002692:	2104      	movs	r1, #4
 8002694:	4822      	ldr	r0, [pc, #136]	; (8002720 <main+0x114>)
 8002696:	f003 fdd5 	bl	8006244 <HAL_TIM_PWM_Start>

  // Office Servo
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800269a:	2108      	movs	r1, #8
 800269c:	4820      	ldr	r0, [pc, #128]	; (8002720 <main+0x114>)
 800269e:	f003 fdd1 	bl	8006244 <HAL_TIM_PWM_Start>

  // Living Room DC Motor
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80026a2:	2100      	movs	r1, #0
 80026a4:	481f      	ldr	r0, [pc, #124]	; (8002724 <main+0x118>)
 80026a6:	f003 fdcd 	bl	8006244 <HAL_TIM_PWM_Start>

  // Buzzer
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80026aa:	2100      	movs	r1, #0
 80026ac:	481e      	ldr	r0, [pc, #120]	; (8002728 <main+0x11c>)
 80026ae:	f003 fdc9 	bl	8006244 <HAL_TIM_PWM_Start>

  /*----------- DHT22 Sensor-----------*/
  HAL_TIM_Base_Start(&htim6);
 80026b2:	481e      	ldr	r0, [pc, #120]	; (800272c <main+0x120>)
 80026b4:	f003 fd04 	bl	80060c0 <HAL_TIM_Base_Start>

  /*----------- LDR & HW390 & Rain Initialization  -----------*/
  HAL_ADC_Start(&hadc1); // LDR
 80026b8:	481d      	ldr	r0, [pc, #116]	; (8002730 <main+0x124>)
 80026ba:	f001 ffe7 	bl	800468c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2); // HW-390
 80026be:	481d      	ldr	r0, [pc, #116]	; (8002734 <main+0x128>)
 80026c0:	f001 ffe4 	bl	800468c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3); // Rain
 80026c4:	481c      	ldr	r0, [pc, #112]	; (8002738 <main+0x12c>)
 80026c6:	f001 ffe1 	bl	800468c <HAL_ADC_Start>

  //__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
  ESP_Init("iPhone Carmela","pistacho");
 80026ca:	491c      	ldr	r1, [pc, #112]	; (800273c <main+0x130>)
 80026cc:	481c      	ldr	r0, [pc, #112]	; (8002740 <main+0x134>)
 80026ce:	f7fd ffc9 	bl	8000664 <ESP_Init>
  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	ESP_messageHandler();
 80026d2:	f7fe f8f3 	bl	80008bc <ESP_messageHandler>

		// Vehicle Doorbell
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) == 0){
 80026d6:	2101      	movs	r1, #1
 80026d8:	481a      	ldr	r0, [pc, #104]	; (8002744 <main+0x138>)
 80026da:	f002 fe9f 	bl	800541c <HAL_GPIO_ReadPin>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d14c      	bne.n	800277e <main+0x172>

			int known = readRFID();
 80026e4:	f7ff f98a 	bl	80019fc <readRFID>
 80026e8:	6278      	str	r0, [r7, #36]	; 0x24
			if(known == 1){
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d12f      	bne.n	8002750 <main+0x144>
				char kn[15] = "OPENING DOOR \n\n";
 80026f0:	4b15      	ldr	r3, [pc, #84]	; (8002748 <main+0x13c>)
 80026f2:	f107 0414 	add.w	r4, r7, #20
 80026f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026f8:	c407      	stmia	r4!, {r0, r1, r2}
 80026fa:	8023      	strh	r3, [r4, #0]
 80026fc:	3402      	adds	r4, #2
 80026fe:	0c1b      	lsrs	r3, r3, #16
 8002700:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart6, (uint8_t *) kn, 15, HAL_MAX_DELAY);
 8002702:	f107 0114 	add.w	r1, r7, #20
 8002706:	f04f 33ff 	mov.w	r3, #4294967295
 800270a:	220f      	movs	r2, #15
 800270c:	480f      	ldr	r0, [pc, #60]	; (800274c <main+0x140>)
 800270e:	f004 fc16 	bl	8006f3e <HAL_UART_Transmit>

				actParcelRFID();
 8002712:	f7ff fa79 	bl	8001c08 <actParcelRFID>
 8002716:	e032      	b.n	800277e <main+0x172>
 8002718:	20000d30 	.word	0x20000d30
 800271c:	20000e04 	.word	0x20000e04
 8002720:	20000c10 	.word	0x20000c10
 8002724:	20000d78 	.word	0x20000d78
 8002728:	20000a98 	.word	0x20000a98
 800272c:	20000ce8 	.word	0x20000ce8
 8002730:	20000c58 	.word	0x20000c58
 8002734:	20000b2c 	.word	0x20000b2c
 8002738:	20000ca0 	.word	0x20000ca0
 800273c:	08008f94 	.word	0x08008f94
 8002740:	08008fa0 	.word	0x08008fa0
 8002744:	40021000 	.word	0x40021000
 8002748:	08008fb0 	.word	0x08008fb0
 800274c:	20000dc0 	.word	0x20000dc0
			}
			else if(known == 0){
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	2b00      	cmp	r3, #0
 8002754:	d113      	bne.n	800277e <main+0x172>
				char unkn[19] = "CALLING THE BELL \n\n";
 8002756:	4ba4      	ldr	r3, [pc, #656]	; (80029e8 <main+0x3dc>)
 8002758:	463c      	mov	r4, r7
 800275a:	461d      	mov	r5, r3
 800275c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800275e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002760:	682b      	ldr	r3, [r5, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	8022      	strh	r2, [r4, #0]
 8002766:	3402      	adds	r4, #2
 8002768:	0c1b      	lsrs	r3, r3, #16
 800276a:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart6, (uint8_t *) unkn, 19, HAL_MAX_DELAY);
 800276c:	4639      	mov	r1, r7
 800276e:	f04f 33ff 	mov.w	r3, #4294967295
 8002772:	2213      	movs	r2, #19
 8002774:	489d      	ldr	r0, [pc, #628]	; (80029ec <main+0x3e0>)
 8002776:	f004 fbe2 	bl	8006f3e <HAL_UART_Transmit>

				playBell();
 800277a:	f7fd fefd 	bl	8000578 <playBell>
			}
		}

		// People Doorbell
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){
 800277e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002782:	489b      	ldr	r0, [pc, #620]	; (80029f0 <main+0x3e4>)
 8002784:	f002 fe4a 	bl	800541c <HAL_GPIO_ReadPin>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <main+0x186>

				playBell();
 800278e:	f7fd fef3 	bl	8000578 <playBell>
		}

		// Alarm Stop
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == 0){
 8002792:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002796:	4896      	ldr	r0, [pc, #600]	; (80029f0 <main+0x3e4>)
 8002798:	f002 fe40 	bl	800541c <HAL_GPIO_ReadPin>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d103      	bne.n	80027aa <main+0x19e>

			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80027a2:	4b94      	ldr	r3, [pc, #592]	; (80029f4 <main+0x3e8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2200      	movs	r2, #0
 80027a8:	635a      	str	r2, [r3, #52]	; 0x34
		}

		// Alarm
		if (debouncer(&inside, S_In_GPIO_Port, S_In_Pin)){
 80027aa:	2208      	movs	r2, #8
 80027ac:	4992      	ldr	r1, [pc, #584]	; (80029f8 <main+0x3ec>)
 80027ae:	4893      	ldr	r0, [pc, #588]	; (80029fc <main+0x3f0>)
 80027b0:	f7ff fedc 	bl	800256c <debouncer>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <main+0x1ba>

			if(vSecurity[0] == '1') playAlarm();
 80027ba:	4b91      	ldr	r3, [pc, #580]	; (8002a00 <main+0x3f4>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b31      	cmp	r3, #49	; 0x31
 80027c0:	d101      	bne.n	80027c6 <main+0x1ba>
 80027c2:	f7fd ff0f 	bl	80005e4 <playAlarm>
		}
		if (debouncer(&outside, S_Out_GPIO_Port, S_Out_Pin)){
 80027c6:	2202      	movs	r2, #2
 80027c8:	498b      	ldr	r1, [pc, #556]	; (80029f8 <main+0x3ec>)
 80027ca:	488e      	ldr	r0, [pc, #568]	; (8002a04 <main+0x3f8>)
 80027cc:	f7ff fece 	bl	800256c <debouncer>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d005      	beq.n	80027e2 <main+0x1d6>

			if(vSecurity[1] == '1') playAlarm();
 80027d6:	4b8a      	ldr	r3, [pc, #552]	; (8002a00 <main+0x3f4>)
 80027d8:	785b      	ldrb	r3, [r3, #1]
 80027da:	2b31      	cmp	r3, #49	; 0x31
 80027dc:	d101      	bne.n	80027e2 <main+0x1d6>
 80027de:	f7fd ff01 	bl	80005e4 <playAlarm>
		}

		// PARCEL DOOR (90)
		if(vWindow[0]=='1' || vOutside[4]=='1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 91);
 80027e2:	4b89      	ldr	r3, [pc, #548]	; (8002a08 <main+0x3fc>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b31      	cmp	r3, #49	; 0x31
 80027e8:	d003      	beq.n	80027f2 <main+0x1e6>
 80027ea:	4b88      	ldr	r3, [pc, #544]	; (8002a0c <main+0x400>)
 80027ec:	791b      	ldrb	r3, [r3, #4]
 80027ee:	2b31      	cmp	r3, #49	; 0x31
 80027f0:	d103      	bne.n	80027fa <main+0x1ee>
 80027f2:	4b87      	ldr	r3, [pc, #540]	; (8002a10 <main+0x404>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	225b      	movs	r2, #91	; 0x5b
 80027f8:	635a      	str	r2, [r3, #52]	; 0x34
		if(vWindow[0]=='0' || vOutside[4]=='0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89);
 80027fa:	4b83      	ldr	r3, [pc, #524]	; (8002a08 <main+0x3fc>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b30      	cmp	r3, #48	; 0x30
 8002800:	d003      	beq.n	800280a <main+0x1fe>
 8002802:	4b82      	ldr	r3, [pc, #520]	; (8002a0c <main+0x400>)
 8002804:	791b      	ldrb	r3, [r3, #4]
 8002806:	2b30      	cmp	r3, #48	; 0x30
 8002808:	d103      	bne.n	8002812 <main+0x206>
 800280a:	4b81      	ldr	r3, [pc, #516]	; (8002a10 <main+0x404>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2259      	movs	r2, #89	; 0x59
 8002810:	635a      	str	r2, [r3, #52]	; 0x34

		// GARAGE DOOR (90)
		if(vWindow[1]=='1' || vGarage[1] == '1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 92); // Faster at 30
 8002812:	4b7d      	ldr	r3, [pc, #500]	; (8002a08 <main+0x3fc>)
 8002814:	785b      	ldrb	r3, [r3, #1]
 8002816:	2b31      	cmp	r3, #49	; 0x31
 8002818:	d003      	beq.n	8002822 <main+0x216>
 800281a:	4b7e      	ldr	r3, [pc, #504]	; (8002a14 <main+0x408>)
 800281c:	785b      	ldrb	r3, [r3, #1]
 800281e:	2b31      	cmp	r3, #49	; 0x31
 8002820:	d103      	bne.n	800282a <main+0x21e>
 8002822:	4b7b      	ldr	r3, [pc, #492]	; (8002a10 <main+0x404>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	225c      	movs	r2, #92	; 0x5c
 8002828:	639a      	str	r2, [r3, #56]	; 0x38
		if(vWindow[1]=='0' || vGarage[1] == '0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 89);
 800282a:	4b77      	ldr	r3, [pc, #476]	; (8002a08 <main+0x3fc>)
 800282c:	785b      	ldrb	r3, [r3, #1]
 800282e:	2b30      	cmp	r3, #48	; 0x30
 8002830:	d003      	beq.n	800283a <main+0x22e>
 8002832:	4b78      	ldr	r3, [pc, #480]	; (8002a14 <main+0x408>)
 8002834:	785b      	ldrb	r3, [r3, #1]
 8002836:	2b30      	cmp	r3, #48	; 0x30
 8002838:	d103      	bne.n	8002842 <main+0x236>
 800283a:	4b75      	ldr	r3, [pc, #468]	; (8002a10 <main+0x404>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2259      	movs	r2, #89	; 0x59
 8002840:	639a      	str	r2, [r3, #56]	; 0x38

		// CLOTHES LINE AWNING (90)
		if(vOutside[0]=='1'){
 8002842:	4b72      	ldr	r3, [pc, #456]	; (8002a0c <main+0x400>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b31      	cmp	r3, #49	; 0x31
 8002848:	d10e      	bne.n	8002868 <main+0x25c>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 91);
 800284a:	4b71      	ldr	r3, [pc, #452]	; (8002a10 <main+0x404>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	225b      	movs	r2, #91	; 0x5b
 8002850:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8002852:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002856:	f001 feb1 	bl	80045bc <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90);
 800285a:	4b6d      	ldr	r3, [pc, #436]	; (8002a10 <main+0x404>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	225a      	movs	r2, #90	; 0x5a
 8002860:	63da      	str	r2, [r3, #60]	; 0x3c
			awning = 1;
 8002862:	4b6d      	ldr	r3, [pc, #436]	; (8002a18 <main+0x40c>)
 8002864:	2201      	movs	r2, #1
 8002866:	601a      	str	r2, [r3, #0]
		}
		if(vOutside[0]=='0'){
 8002868:	4b68      	ldr	r3, [pc, #416]	; (8002a0c <main+0x400>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b30      	cmp	r3, #48	; 0x30
 800286e:	d10e      	bne.n	800288e <main+0x282>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 88);
 8002870:	4b67      	ldr	r3, [pc, #412]	; (8002a10 <main+0x404>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2258      	movs	r2, #88	; 0x58
 8002876:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8002878:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800287c:	f001 fe9e 	bl	80045bc <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90);
 8002880:	4b63      	ldr	r3, [pc, #396]	; (8002a10 <main+0x404>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	225a      	movs	r2, #90	; 0x5a
 8002886:	63da      	str	r2, [r3, #60]	; 0x3c
			awning = 0;
 8002888:	4b63      	ldr	r3, [pc, #396]	; (8002a18 <main+0x40c>)
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
		}
		vOutside[0]='x';
 800288e:	4b5f      	ldr	r3, [pc, #380]	; (8002a0c <main+0x400>)
 8002890:	2278      	movs	r2, #120	; 0x78
 8002892:	701a      	strb	r2, [r3, #0]

		// LIVING ROOM WINDOW (90)
		if(vWindow[2]=='1' || vLiving[5]=='1') {
 8002894:	4b5c      	ldr	r3, [pc, #368]	; (8002a08 <main+0x3fc>)
 8002896:	789b      	ldrb	r3, [r3, #2]
 8002898:	2b31      	cmp	r3, #49	; 0x31
 800289a:	d003      	beq.n	80028a4 <main+0x298>
 800289c:	4b5f      	ldr	r3, [pc, #380]	; (8002a1c <main+0x410>)
 800289e:	795b      	ldrb	r3, [r3, #5]
 80028a0:	2b31      	cmp	r3, #49	; 0x31
 80028a2:	d10b      	bne.n	80028bc <main+0x2b0>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 91);
 80028a4:	4b5e      	ldr	r3, [pc, #376]	; (8002a20 <main+0x414>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	225b      	movs	r2, #91	; 0x5b
 80028aa:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(3000);
 80028ac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80028b0:	f001 fe84 	bl	80045bc <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 90);
 80028b4:	4b5a      	ldr	r3, [pc, #360]	; (8002a20 <main+0x414>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	225a      	movs	r2, #90	; 0x5a
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40
		}
		if(vWindow[2]=='0'|| vLiving[5]=='0') {
 80028bc:	4b52      	ldr	r3, [pc, #328]	; (8002a08 <main+0x3fc>)
 80028be:	789b      	ldrb	r3, [r3, #2]
 80028c0:	2b30      	cmp	r3, #48	; 0x30
 80028c2:	d003      	beq.n	80028cc <main+0x2c0>
 80028c4:	4b55      	ldr	r3, [pc, #340]	; (8002a1c <main+0x410>)
 80028c6:	795b      	ldrb	r3, [r3, #5]
 80028c8:	2b30      	cmp	r3, #48	; 0x30
 80028ca:	d10b      	bne.n	80028e4 <main+0x2d8>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 89);
 80028cc:	4b54      	ldr	r3, [pc, #336]	; (8002a20 <main+0x414>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2259      	movs	r2, #89	; 0x59
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(3000);
 80028d4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80028d8:	f001 fe70 	bl	80045bc <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 90);
 80028dc:	4b50      	ldr	r3, [pc, #320]	; (8002a20 <main+0x414>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	225a      	movs	r2, #90	; 0x5a
 80028e2:	641a      	str	r2, [r3, #64]	; 0x40
		}
		vWindow[2]='x';
 80028e4:	4b48      	ldr	r3, [pc, #288]	; (8002a08 <main+0x3fc>)
 80028e6:	2278      	movs	r2, #120	; 0x78
 80028e8:	709a      	strb	r2, [r3, #2]
		vLiving[5]='x';
 80028ea:	4b4c      	ldr	r3, [pc, #304]	; (8002a1c <main+0x410>)
 80028ec:	2278      	movs	r2, #120	; 0x78
 80028ee:	715a      	strb	r2, [r3, #5]

		// BEDROOM WINDOW (90)
		if(vWindow[3]=='1' || vBedroom[3]=='1') {
 80028f0:	4b45      	ldr	r3, [pc, #276]	; (8002a08 <main+0x3fc>)
 80028f2:	78db      	ldrb	r3, [r3, #3]
 80028f4:	2b31      	cmp	r3, #49	; 0x31
 80028f6:	d003      	beq.n	8002900 <main+0x2f4>
 80028f8:	4b4a      	ldr	r3, [pc, #296]	; (8002a24 <main+0x418>)
 80028fa:	78db      	ldrb	r3, [r3, #3]
 80028fc:	2b31      	cmp	r3, #49	; 0x31
 80028fe:	d10b      	bne.n	8002918 <main+0x30c>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 92);
 8002900:	4b47      	ldr	r3, [pc, #284]	; (8002a20 <main+0x414>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	225c      	movs	r2, #92	; 0x5c
 8002906:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(3000);
 8002908:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800290c:	f001 fe56 	bl	80045bc <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 90);
 8002910:	4b43      	ldr	r3, [pc, #268]	; (8002a20 <main+0x414>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	225a      	movs	r2, #90	; 0x5a
 8002916:	639a      	str	r2, [r3, #56]	; 0x38
		}
		if(vWindow[3]=='0' || vBedroom[3]=='0') {
 8002918:	4b3b      	ldr	r3, [pc, #236]	; (8002a08 <main+0x3fc>)
 800291a:	78db      	ldrb	r3, [r3, #3]
 800291c:	2b30      	cmp	r3, #48	; 0x30
 800291e:	d003      	beq.n	8002928 <main+0x31c>
 8002920:	4b40      	ldr	r3, [pc, #256]	; (8002a24 <main+0x418>)
 8002922:	78db      	ldrb	r3, [r3, #3]
 8002924:	2b30      	cmp	r3, #48	; 0x30
 8002926:	d10b      	bne.n	8002940 <main+0x334>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 89);
 8002928:	4b3d      	ldr	r3, [pc, #244]	; (8002a20 <main+0x414>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2259      	movs	r2, #89	; 0x59
 800292e:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(3000);
 8002930:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002934:	f001 fe42 	bl	80045bc <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 90);
 8002938:	4b39      	ldr	r3, [pc, #228]	; (8002a20 <main+0x414>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	225a      	movs	r2, #90	; 0x5a
 800293e:	639a      	str	r2, [r3, #56]	; 0x38
		}
		vWindow[3]='x';
 8002940:	4b31      	ldr	r3, [pc, #196]	; (8002a08 <main+0x3fc>)
 8002942:	2278      	movs	r2, #120	; 0x78
 8002944:	70da      	strb	r2, [r3, #3]
		vBedroom[3]='x';
 8002946:	4b37      	ldr	r3, [pc, #220]	; (8002a24 <main+0x418>)
 8002948:	2278      	movs	r2, #120	; 0x78
 800294a:	70da      	strb	r2, [r3, #3]

		// OFFICE WINDOW (90)
		if(vWindow[4]=='1' || vOffice[11]=='1') {
 800294c:	4b2e      	ldr	r3, [pc, #184]	; (8002a08 <main+0x3fc>)
 800294e:	791b      	ldrb	r3, [r3, #4]
 8002950:	2b31      	cmp	r3, #49	; 0x31
 8002952:	d003      	beq.n	800295c <main+0x350>
 8002954:	4b34      	ldr	r3, [pc, #208]	; (8002a28 <main+0x41c>)
 8002956:	7adb      	ldrb	r3, [r3, #11]
 8002958:	2b31      	cmp	r3, #49	; 0x31
 800295a:	d10b      	bne.n	8002974 <main+0x368>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 91);
 800295c:	4b30      	ldr	r3, [pc, #192]	; (8002a20 <main+0x414>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	225b      	movs	r2, #91	; 0x5b
 8002962:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8002964:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002968:	f001 fe28 	bl	80045bc <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 90);
 800296c:	4b2c      	ldr	r3, [pc, #176]	; (8002a20 <main+0x414>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	225a      	movs	r2, #90	; 0x5a
 8002972:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		if(vWindow[4]=='0' || vOffice[11]=='0') {
 8002974:	4b24      	ldr	r3, [pc, #144]	; (8002a08 <main+0x3fc>)
 8002976:	791b      	ldrb	r3, [r3, #4]
 8002978:	2b30      	cmp	r3, #48	; 0x30
 800297a:	d003      	beq.n	8002984 <main+0x378>
 800297c:	4b2a      	ldr	r3, [pc, #168]	; (8002a28 <main+0x41c>)
 800297e:	7adb      	ldrb	r3, [r3, #11]
 8002980:	2b30      	cmp	r3, #48	; 0x30
 8002982:	d10b      	bne.n	800299c <main+0x390>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 88);
 8002984:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <main+0x414>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2258      	movs	r2, #88	; 0x58
 800298a:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 800298c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002990:	f001 fe14 	bl	80045bc <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 90);
 8002994:	4b22      	ldr	r3, [pc, #136]	; (8002a20 <main+0x414>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	225a      	movs	r2, #90	; 0x5a
 800299a:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		vWindow[4]='x';
 800299c:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <main+0x3fc>)
 800299e:	2278      	movs	r2, #120	; 0x78
 80029a0:	711a      	strb	r2, [r3, #4]
		vOffice[11]='x';
 80029a2:	4b21      	ldr	r3, [pc, #132]	; (8002a28 <main+0x41c>)
 80029a4:	2278      	movs	r2, #120	; 0x78
 80029a6:	72da      	strb	r2, [r3, #11]

		// PARCEL LIMIT SWITCH
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == 0){
 80029a8:	2140      	movs	r1, #64	; 0x40
 80029aa:	4813      	ldr	r0, [pc, #76]	; (80029f8 <main+0x3ec>)
 80029ac:	f002 fd36 	bl	800541c <HAL_GPIO_ReadPin>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d14c      	bne.n	8002a50 <main+0x444>

			if (vWindow[0]=='1' || vOutside[4]=='1'){
 80029b6:	4b14      	ldr	r3, [pc, #80]	; (8002a08 <main+0x3fc>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b31      	cmp	r3, #49	; 0x31
 80029bc:	d003      	beq.n	80029c6 <main+0x3ba>
 80029be:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <main+0x400>)
 80029c0:	791b      	ldrb	r3, [r3, #4]
 80029c2:	2b31      	cmp	r3, #49	; 0x31
 80029c4:	d107      	bne.n	80029d6 <main+0x3ca>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89); // Parcel Servo
 80029c6:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <main+0x404>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2259      	movs	r2, #89	; 0x59
 80029cc:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(1000);
 80029ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029d2:	f001 fdf3 	bl	80045bc <HAL_Delay>
			}
			if (vWindow[0]=='0' || vOutside[4]=='0'){
 80029d6:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <main+0x3fc>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b30      	cmp	r3, #48	; 0x30
 80029dc:	d026      	beq.n	8002a2c <main+0x420>
 80029de:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <main+0x400>)
 80029e0:	791b      	ldrb	r3, [r3, #4]
 80029e2:	2b30      	cmp	r3, #48	; 0x30
 80029e4:	d12a      	bne.n	8002a3c <main+0x430>
 80029e6:	e021      	b.n	8002a2c <main+0x420>
 80029e8:	08008fc0 	.word	0x08008fc0
 80029ec:	20000dc0 	.word	0x20000dc0
 80029f0:	40020800 	.word	0x40020800
 80029f4:	20000a98 	.word	0x20000a98
 80029f8:	40021000 	.word	0x40021000
 80029fc:	200008ac 	.word	0x200008ac
 8002a00:	20000960 	.word	0x20000960
 8002a04:	200008b0 	.word	0x200008b0
 8002a08:	2000090c 	.word	0x2000090c
 8002a0c:	2000094c 	.word	0x2000094c
 8002a10:	20000e04 	.word	0x20000e04
 8002a14:	20000958 	.word	0x20000958
 8002a18:	200008cc 	.word	0x200008cc
 8002a1c:	20000904 	.word	0x20000904
 8002a20:	20000c10 	.word	0x20000c10
 8002a24:	20000964 	.word	0x20000964
 8002a28:	20000940 	.word	0x20000940
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 91); // Parcel Servo
 8002a2c:	4b85      	ldr	r3, [pc, #532]	; (8002c44 <main+0x638>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	225b      	movs	r2, #91	; 0x5b
 8002a32:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(1000);
 8002a34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a38:	f001 fdc0 	bl	80045bc <HAL_Delay>
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 90); // Parcel Servo
 8002a3c:	4b81      	ldr	r3, [pc, #516]	; (8002c44 <main+0x638>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	225a      	movs	r2, #90	; 0x5a
 8002a42:	635a      	str	r2, [r3, #52]	; 0x34
			vWindow[0]='x'; // Parcel Servo
 8002a44:	4b80      	ldr	r3, [pc, #512]	; (8002c48 <main+0x63c>)
 8002a46:	2278      	movs	r2, #120	; 0x78
 8002a48:	701a      	strb	r2, [r3, #0]
			vOutside[4]='x'; // Parcel Servo
 8002a4a:	4b80      	ldr	r3, [pc, #512]	; (8002c4c <main+0x640>)
 8002a4c:	2278      	movs	r2, #120	; 0x78
 8002a4e:	711a      	strb	r2, [r3, #4]
		}

		// GARAGE LIMIT SWITCH
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == 0){
 8002a50:	2110      	movs	r1, #16
 8002a52:	487f      	ldr	r0, [pc, #508]	; (8002c50 <main+0x644>)
 8002a54:	f002 fce2 	bl	800541c <HAL_GPIO_ReadPin>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d129      	bne.n	8002ab2 <main+0x4a6>

			if (vWindow[1]=='1' || vGarage[1]=='1'){
 8002a5e:	4b7a      	ldr	r3, [pc, #488]	; (8002c48 <main+0x63c>)
 8002a60:	785b      	ldrb	r3, [r3, #1]
 8002a62:	2b31      	cmp	r3, #49	; 0x31
 8002a64:	d003      	beq.n	8002a6e <main+0x462>
 8002a66:	4b7b      	ldr	r3, [pc, #492]	; (8002c54 <main+0x648>)
 8002a68:	785b      	ldrb	r3, [r3, #1]
 8002a6a:	2b31      	cmp	r3, #49	; 0x31
 8002a6c:	d107      	bne.n	8002a7e <main+0x472>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 89); // Garage Servo
 8002a6e:	4b75      	ldr	r3, [pc, #468]	; (8002c44 <main+0x638>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2259      	movs	r2, #89	; 0x59
 8002a74:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(1000);
 8002a76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a7a:	f001 fd9f 	bl	80045bc <HAL_Delay>
			}
			if (vWindow[1]=='0' || vGarage[1]=='0'){
 8002a7e:	4b72      	ldr	r3, [pc, #456]	; (8002c48 <main+0x63c>)
 8002a80:	785b      	ldrb	r3, [r3, #1]
 8002a82:	2b30      	cmp	r3, #48	; 0x30
 8002a84:	d003      	beq.n	8002a8e <main+0x482>
 8002a86:	4b73      	ldr	r3, [pc, #460]	; (8002c54 <main+0x648>)
 8002a88:	785b      	ldrb	r3, [r3, #1]
 8002a8a:	2b30      	cmp	r3, #48	; 0x30
 8002a8c:	d107      	bne.n	8002a9e <main+0x492>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 92); // Garage Servo
 8002a8e:	4b6d      	ldr	r3, [pc, #436]	; (8002c44 <main+0x638>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	225c      	movs	r2, #92	; 0x5c
 8002a94:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(1000);
 8002a96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a9a:	f001 fd8f 	bl	80045bc <HAL_Delay>
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 90); // Garage Servo
 8002a9e:	4b69      	ldr	r3, [pc, #420]	; (8002c44 <main+0x638>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	225a      	movs	r2, #90	; 0x5a
 8002aa4:	639a      	str	r2, [r3, #56]	; 0x38
			vWindow[1]='x'; // Garage Servo
 8002aa6:	4b68      	ldr	r3, [pc, #416]	; (8002c48 <main+0x63c>)
 8002aa8:	2278      	movs	r2, #120	; 0x78
 8002aaa:	705a      	strb	r2, [r3, #1]
			vGarage[1]='x'; // Garage Servo
 8002aac:	4b69      	ldr	r3, [pc, #420]	; (8002c54 <main+0x648>)
 8002aae:	2278      	movs	r2, #120	; 0x78
 8002ab0:	705a      	strb	r2, [r3, #1]
		}

		// LINVING ROOM FAN
		if(vWeather[0]=='1') {
 8002ab2:	4b69      	ldr	r3, [pc, #420]	; (8002c58 <main+0x64c>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b31      	cmp	r3, #49	; 0x31
 8002ab8:	d10e      	bne.n	8002ad8 <main+0x4cc>
			__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 1000);
 8002aba:	4b68      	ldr	r3, [pc, #416]	; (8002c5c <main+0x650>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ac2:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	2110      	movs	r1, #16
 8002ac8:	4865      	ldr	r0, [pc, #404]	; (8002c60 <main+0x654>)
 8002aca:	f002 fcbf 	bl	800544c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,GPIO_PIN_RESET);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2120      	movs	r1, #32
 8002ad2:	4863      	ldr	r0, [pc, #396]	; (8002c60 <main+0x654>)
 8002ad4:	f002 fcba 	bl	800544c <HAL_GPIO_WritePin>
		}
		if(vWeather[0]=='0') {
 8002ad8:	4b5f      	ldr	r3, [pc, #380]	; (8002c58 <main+0x64c>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b30      	cmp	r3, #48	; 0x30
 8002ade:	d10d      	bne.n	8002afc <main+0x4f0>
			__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 8002ae0:	4b5e      	ldr	r3, [pc, #376]	; (8002c5c <main+0x650>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_RESET);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2110      	movs	r1, #16
 8002aec:	485c      	ldr	r0, [pc, #368]	; (8002c60 <main+0x654>)
 8002aee:	f002 fcad 	bl	800544c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,GPIO_PIN_RESET);
 8002af2:	2200      	movs	r2, #0
 8002af4:	2120      	movs	r1, #32
 8002af6:	485a      	ldr	r0, [pc, #360]	; (8002c60 <main+0x654>)
 8002af8:	f002 fca8 	bl	800544c <HAL_GPIO_WritePin>
		}

		// SETTINGS
		f_on = temp_value(vSettings[0], vSettings[1], vSettings[2]);
 8002afc:	4b59      	ldr	r3, [pc, #356]	; (8002c64 <main+0x658>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	4a58      	ldr	r2, [pc, #352]	; (8002c64 <main+0x658>)
 8002b02:	7851      	ldrb	r1, [r2, #1]
 8002b04:	4a57      	ldr	r2, [pc, #348]	; (8002c64 <main+0x658>)
 8002b06:	7892      	ldrb	r2, [r2, #2]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff f8b9 	bl	8001c80 <temp_value>
 8002b0e:	eef0 7a40 	vmov.f32	s15, s0
 8002b12:	4b55      	ldr	r3, [pc, #340]	; (8002c68 <main+0x65c>)
 8002b14:	edc3 7a00 	vstr	s15, [r3]
		f_off = temp_value(vSettings[3], vSettings[4], vSettings[5]);
 8002b18:	4b52      	ldr	r3, [pc, #328]	; (8002c64 <main+0x658>)
 8002b1a:	78db      	ldrb	r3, [r3, #3]
 8002b1c:	4a51      	ldr	r2, [pc, #324]	; (8002c64 <main+0x658>)
 8002b1e:	7911      	ldrb	r1, [r2, #4]
 8002b20:	4a50      	ldr	r2, [pc, #320]	; (8002c64 <main+0x658>)
 8002b22:	7952      	ldrb	r2, [r2, #5]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff f8ab 	bl	8001c80 <temp_value>
 8002b2a:	eef0 7a40 	vmov.f32	s15, s0
 8002b2e:	4b4f      	ldr	r3, [pc, #316]	; (8002c6c <main+0x660>)
 8002b30:	edc3 7a00 	vstr	s15, [r3]
		h_on = temp_value(vSettings[6], vSettings[7], vSettings[8]);
 8002b34:	4b4b      	ldr	r3, [pc, #300]	; (8002c64 <main+0x658>)
 8002b36:	799b      	ldrb	r3, [r3, #6]
 8002b38:	4a4a      	ldr	r2, [pc, #296]	; (8002c64 <main+0x658>)
 8002b3a:	79d1      	ldrb	r1, [r2, #7]
 8002b3c:	4a49      	ldr	r2, [pc, #292]	; (8002c64 <main+0x658>)
 8002b3e:	7a12      	ldrb	r2, [r2, #8]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff f89d 	bl	8001c80 <temp_value>
 8002b46:	eef0 7a40 	vmov.f32	s15, s0
 8002b4a:	4b49      	ldr	r3, [pc, #292]	; (8002c70 <main+0x664>)
 8002b4c:	edc3 7a00 	vstr	s15, [r3]
		h_off = temp_value(vSettings[9], vSettings[10], vSettings[11]);
 8002b50:	4b44      	ldr	r3, [pc, #272]	; (8002c64 <main+0x658>)
 8002b52:	7a5b      	ldrb	r3, [r3, #9]
 8002b54:	4a43      	ldr	r2, [pc, #268]	; (8002c64 <main+0x658>)
 8002b56:	7a91      	ldrb	r1, [r2, #10]
 8002b58:	4a42      	ldr	r2, [pc, #264]	; (8002c64 <main+0x658>)
 8002b5a:	7ad2      	ldrb	r2, [r2, #11]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff f88f 	bl	8001c80 <temp_value>
 8002b62:	eef0 7a40 	vmov.f32	s15, s0
 8002b66:	4b43      	ldr	r3, [pc, #268]	; (8002c74 <main+0x668>)
 8002b68:	edc3 7a00 	vstr	s15, [r3]

		rh_min = rh_value(vSettings[12], vSettings[13]);
 8002b6c:	4b3d      	ldr	r3, [pc, #244]	; (8002c64 <main+0x658>)
 8002b6e:	7b1b      	ldrb	r3, [r3, #12]
 8002b70:	4a3c      	ldr	r2, [pc, #240]	; (8002c64 <main+0x658>)
 8002b72:	7b52      	ldrb	r2, [r2, #13]
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe ffbe 	bl	8001af8 <rh_value>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	4a3e      	ldr	r2, [pc, #248]	; (8002c78 <main+0x66c>)
 8002b80:	6013      	str	r3, [r2, #0]
		rh_max = rh_value(vSettings[14], vSettings[15]);
 8002b82:	4b38      	ldr	r3, [pc, #224]	; (8002c64 <main+0x658>)
 8002b84:	7b9b      	ldrb	r3, [r3, #14]
 8002b86:	4a37      	ldr	r2, [pc, #220]	; (8002c64 <main+0x658>)
 8002b88:	7bd2      	ldrb	r2, [r2, #15]
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fe ffb3 	bl	8001af8 <rh_value>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4a39      	ldr	r2, [pc, #228]	; (8002c7c <main+0x670>)
 8002b96:	6013      	str	r3, [r2, #0]


		/*----------- Sensor Reading -----------*/

		// LDR
		if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8002b98:	f04f 31ff 	mov.w	r1, #4294967295
 8002b9c:	4838      	ldr	r0, [pc, #224]	; (8002c80 <main+0x674>)
 8002b9e:	f001 fe47 	bl	8004830 <HAL_ADC_PollForConversion>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d106      	bne.n	8002bb6 <main+0x5aa>
			LDR_value = HAL_ADC_GetValue(&hadc1);
 8002ba8:	4835      	ldr	r0, [pc, #212]	; (8002c80 <main+0x674>)
 8002baa:	f001 fecc 	bl	8004946 <HAL_ADC_GetValue>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	4b34      	ldr	r3, [pc, #208]	; (8002c84 <main+0x678>)
 8002bb4:	801a      	strh	r2, [r3, #0]

		ldr(LDR_value);
 8002bb6:	4b33      	ldr	r3, [pc, #204]	; (8002c84 <main+0x678>)
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe fe24 	bl	8001808 <ldr>

		// Rain
		if(HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY) == HAL_OK)
 8002bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc4:	4830      	ldr	r0, [pc, #192]	; (8002c88 <main+0x67c>)
 8002bc6:	f001 fe33 	bl	8004830 <HAL_ADC_PollForConversion>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d106      	bne.n	8002bde <main+0x5d2>
			Rain_read = HAL_ADC_GetValue(&hadc3);
 8002bd0:	482d      	ldr	r0, [pc, #180]	; (8002c88 <main+0x67c>)
 8002bd2:	f001 feb8 	bl	8004946 <HAL_ADC_GetValue>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	4b2c      	ldr	r3, [pc, #176]	; (8002c8c <main+0x680>)
 8002bdc:	801a      	strh	r2, [r3, #0]

		Rain = 100 - ((100*Rain_read)/255);
 8002bde:	4b2b      	ldr	r3, [pc, #172]	; (8002c8c <main+0x680>)
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	2364      	movs	r3, #100	; 0x64
 8002be6:	fb03 f302 	mul.w	r3, r3, r2
 8002bea:	4a29      	ldr	r2, [pc, #164]	; (8002c90 <main+0x684>)
 8002bec:	fb82 1203 	smull	r1, r2, r2, r3
 8002bf0:	441a      	add	r2, r3
 8002bf2:	11d2      	asrs	r2, r2, #7
 8002bf4:	17db      	asrs	r3, r3, #31
 8002bf6:	1a9b      	subs	r3, r3, r2
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3364      	adds	r3, #100	; 0x64
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	4b25      	ldr	r3, [pc, #148]	; (8002c94 <main+0x688>)
 8002c00:	801a      	strh	r2, [r3, #0]

		if(vOutside[5] == '1'){
 8002c02:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <main+0x640>)
 8002c04:	795b      	ldrb	r3, [r3, #5]
 8002c06:	2b31      	cmp	r3, #49	; 0x31
 8002c08:	d166      	bne.n	8002cd8 <main+0x6cc>
			// There are clothes and it is raining (closed awning)
			if (Rain>5 && vOutside[6] == '1' && awning == 0){
 8002c0a:	4b22      	ldr	r3, [pc, #136]	; (8002c94 <main+0x688>)
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	2b05      	cmp	r3, #5
 8002c10:	d944      	bls.n	8002c9c <main+0x690>
 8002c12:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <main+0x640>)
 8002c14:	799b      	ldrb	r3, [r3, #6]
 8002c16:	2b31      	cmp	r3, #49	; 0x31
 8002c18:	d140      	bne.n	8002c9c <main+0x690>
 8002c1a:	4b1f      	ldr	r3, [pc, #124]	; (8002c98 <main+0x68c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d13c      	bne.n	8002c9c <main+0x690>

				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 91); // Open awning
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <main+0x638>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	225b      	movs	r2, #91	; 0x5b
 8002c28:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_Delay(3000);
 8002c2a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002c2e:	f001 fcc5 	bl	80045bc <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90);
 8002c32:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <main+0x638>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	225a      	movs	r2, #90	; 0x5a
 8002c38:	63da      	str	r2, [r3, #60]	; 0x3c
				awning = 1;
 8002c3a:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <main+0x68c>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	e047      	b.n	8002cd2 <main+0x6c6>
 8002c42:	bf00      	nop
 8002c44:	20000e04 	.word	0x20000e04
 8002c48:	2000090c 	.word	0x2000090c
 8002c4c:	2000094c 	.word	0x2000094c
 8002c50:	40021000 	.word	0x40021000
 8002c54:	20000958 	.word	0x20000958
 8002c58:	20000930 	.word	0x20000930
 8002c5c:	20000d78 	.word	0x20000d78
 8002c60:	40020800 	.word	0x40020800
 8002c64:	200008f4 	.word	0x200008f4
 8002c68:	200008b4 	.word	0x200008b4
 8002c6c:	200008b8 	.word	0x200008b8
 8002c70:	200008bc 	.word	0x200008bc
 8002c74:	200008c0 	.word	0x200008c0
 8002c78:	200008c4 	.word	0x200008c4
 8002c7c:	200008c8 	.word	0x200008c8
 8002c80:	20000c58 	.word	0x20000c58
 8002c84:	200008d0 	.word	0x200008d0
 8002c88:	20000ca0 	.word	0x20000ca0
 8002c8c:	200008d6 	.word	0x200008d6
 8002c90:	80808081 	.word	0x80808081
 8002c94:	200008d8 	.word	0x200008d8
 8002c98:	200008cc 	.word	0x200008cc

			// There are clothes and it is raining (opened awning)
			// There are not clothes and it is raining (closed awning)

			// There are not clothes and it is raining (opened awning)
			else if (Rain>5 && vOutside[6] == '0' && awning == 1){
 8002c9c:	4b3f      	ldr	r3, [pc, #252]	; (8002d9c <main+0x790>)
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	2b05      	cmp	r3, #5
 8002ca2:	d916      	bls.n	8002cd2 <main+0x6c6>
 8002ca4:	4b3e      	ldr	r3, [pc, #248]	; (8002da0 <main+0x794>)
 8002ca6:	799b      	ldrb	r3, [r3, #6]
 8002ca8:	2b30      	cmp	r3, #48	; 0x30
 8002caa:	d112      	bne.n	8002cd2 <main+0x6c6>
 8002cac:	4b3d      	ldr	r3, [pc, #244]	; (8002da4 <main+0x798>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d10e      	bne.n	8002cd2 <main+0x6c6>

				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 88); // Close awning
 8002cb4:	4b3c      	ldr	r3, [pc, #240]	; (8002da8 <main+0x79c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2258      	movs	r2, #88	; 0x58
 8002cba:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_Delay(3000);
 8002cbc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002cc0:	f001 fc7c 	bl	80045bc <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90);
 8002cc4:	4b38      	ldr	r3, [pc, #224]	; (8002da8 <main+0x79c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	225a      	movs	r2, #90	; 0x5a
 8002cca:	63da      	str	r2, [r3, #60]	; 0x3c
				awning = 0;
 8002ccc:	4b35      	ldr	r3, [pc, #212]	; (8002da4 <main+0x798>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
			}

			// There are clothes and it is not raining (awning does not matter)
			// There are not clothes and it is not raining (awning does not matter)

			vOutside[0]='x';
 8002cd2:	4b33      	ldr	r3, [pc, #204]	; (8002da0 <main+0x794>)
 8002cd4:	2278      	movs	r2, #120	; 0x78
 8002cd6:	701a      	strb	r2, [r3, #0]
		}

		// HW-390
		if(HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK)
 8002cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cdc:	4833      	ldr	r0, [pc, #204]	; (8002dac <main+0x7a0>)
 8002cde:	f001 fda7 	bl	8004830 <HAL_ADC_PollForConversion>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d106      	bne.n	8002cf6 <main+0x6ea>
			Hygro_read = HAL_ADC_GetValue(&hadc2);
 8002ce8:	4830      	ldr	r0, [pc, #192]	; (8002dac <main+0x7a0>)
 8002cea:	f001 fe2c 	bl	8004946 <HAL_ADC_GetValue>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	4b2f      	ldr	r3, [pc, #188]	; (8002db0 <main+0x7a4>)
 8002cf4:	801a      	strh	r2, [r3, #0]

		Hygro = 100 - ((100*Hygro_read)/255);
 8002cf6:	4b2e      	ldr	r3, [pc, #184]	; (8002db0 <main+0x7a4>)
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	2364      	movs	r3, #100	; 0x64
 8002cfe:	fb03 f302 	mul.w	r3, r3, r2
 8002d02:	4a2c      	ldr	r2, [pc, #176]	; (8002db4 <main+0x7a8>)
 8002d04:	fb82 1203 	smull	r1, r2, r2, r3
 8002d08:	441a      	add	r2, r3
 8002d0a:	11d2      	asrs	r2, r2, #7
 8002d0c:	17db      	asrs	r3, r3, #31
 8002d0e:	1a9b      	subs	r3, r3, r2
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3364      	adds	r3, #100	; 0x64
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	4b28      	ldr	r3, [pc, #160]	; (8002db8 <main+0x7ac>)
 8002d18:	801a      	strh	r2, [r3, #0]
			}
			else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET); // Water
		}*/

		//DHT22
		if(readDHT == 1){
 8002d1a:	4b28      	ldr	r3, [pc, #160]	; (8002dbc <main+0x7b0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d102      	bne.n	8002d28 <main+0x71c>
		  	// Interior
		  	//DHT22_getData(&DHT22_inside);
		  	//TempInside = DHT22_inside.Temperature;
		  	//RHInside = DHT22_inside.Humidity;

		  	readDHT = 0;
 8002d22:	4b26      	ldr	r3, [pc, #152]	; (8002dbc <main+0x7b0>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
		}

		if(vWeather[4] == '1'){
 8002d28:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <main+0x7b4>)
 8002d2a:	791b      	ldrb	r3, [r3, #4]
 8002d2c:	2b31      	cmp	r3, #49	; 0x31
 8002d2e:	f47f acd0 	bne.w	80026d2 <main+0xc6>
				HAL_GPIO_WritePin(GPIOX, GPIO_PIN_XX, SET); // Living Room Fan
			}
			else HAL_GPIO_WritePin(GPIOX, GPIO_PIN_X, RESET); // Living Room Fan*/

			// Heat is turned off and it does not reach the minimum temperature or it is turned on and it does not reach the maximum temperature
			if (((!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) && (TempInside<h_on)) || ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)) && (TempInside<h_off))){
 8002d32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d36:	4823      	ldr	r0, [pc, #140]	; (8002dc4 <main+0x7b8>)
 8002d38:	f002 fb70 	bl	800541c <HAL_GPIO_ReadPin>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10a      	bne.n	8002d58 <main+0x74c>
 8002d42:	4b21      	ldr	r3, [pc, #132]	; (8002dc8 <main+0x7bc>)
 8002d44:	ed93 7a00 	vldr	s14, [r3]
 8002d48:	4b20      	ldr	r3, [pc, #128]	; (8002dcc <main+0x7c0>)
 8002d4a:	edd3 7a00 	vldr	s15, [r3]
 8002d4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d56:	d412      	bmi.n	8002d7e <main+0x772>
 8002d58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d5c:	4819      	ldr	r0, [pc, #100]	; (8002dc4 <main+0x7b8>)
 8002d5e:	f002 fb5d 	bl	800541c <HAL_GPIO_ReadPin>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d011      	beq.n	8002d8c <main+0x780>
 8002d68:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <main+0x7bc>)
 8002d6a:	ed93 7a00 	vldr	s14, [r3]
 8002d6e:	4b18      	ldr	r3, [pc, #96]	; (8002dd0 <main+0x7c4>)
 8002d70:	edd3 7a00 	vldr	s15, [r3]
 8002d74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7c:	d506      	bpl.n	8002d8c <main+0x780>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET); // Heat
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d84:	480f      	ldr	r0, [pc, #60]	; (8002dc4 <main+0x7b8>)
 8002d86:	f002 fb61 	bl	800544c <HAL_GPIO_WritePin>
 8002d8a:	e005      	b.n	8002d98 <main+0x78c>
			}
			else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET); // Heat
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d92:	480c      	ldr	r0, [pc, #48]	; (8002dc4 <main+0x7b8>)
 8002d94:	f002 fb5a 	bl	800544c <HAL_GPIO_WritePin>
  while (1){
 8002d98:	e49b      	b.n	80026d2 <main+0xc6>
 8002d9a:	bf00      	nop
 8002d9c:	200008d8 	.word	0x200008d8
 8002da0:	2000094c 	.word	0x2000094c
 8002da4:	200008cc 	.word	0x200008cc
 8002da8:	20000e04 	.word	0x20000e04
 8002dac:	20000b2c 	.word	0x20000b2c
 8002db0:	200008d2 	.word	0x200008d2
 8002db4:	80808081 	.word	0x80808081
 8002db8:	200008d4 	.word	0x200008d4
 8002dbc:	2000093c 	.word	0x2000093c
 8002dc0:	20000930 	.word	0x20000930
 8002dc4:	40020400 	.word	0x40020400
 8002dc8:	200008dc 	.word	0x200008dc
 8002dcc:	200008bc 	.word	0x200008bc
 8002dd0:	200008c0 	.word	0x200008c0

08002dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b094      	sub	sp, #80	; 0x50
 8002dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dda:	f107 0320 	add.w	r3, r7, #32
 8002dde:	2230      	movs	r2, #48	; 0x30
 8002de0:	2100      	movs	r1, #0
 8002de2:	4618      	mov	r0, r3
 8002de4:	f005 f892 	bl	8007f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002de8:	f107 030c 	add.w	r3, r7, #12
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	4b28      	ldr	r3, [pc, #160]	; (8002ea0 <SystemClock_Config+0xcc>)
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	4a27      	ldr	r2, [pc, #156]	; (8002ea0 <SystemClock_Config+0xcc>)
 8002e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e06:	6413      	str	r3, [r2, #64]	; 0x40
 8002e08:	4b25      	ldr	r3, [pc, #148]	; (8002ea0 <SystemClock_Config+0xcc>)
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e14:	2300      	movs	r3, #0
 8002e16:	607b      	str	r3, [r7, #4]
 8002e18:	4b22      	ldr	r3, [pc, #136]	; (8002ea4 <SystemClock_Config+0xd0>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a21      	ldr	r2, [pc, #132]	; (8002ea4 <SystemClock_Config+0xd0>)
 8002e1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	4b1f      	ldr	r3, [pc, #124]	; (8002ea4 <SystemClock_Config+0xd0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e2c:	607b      	str	r3, [r7, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e30:	2301      	movs	r3, #1
 8002e32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002e44:	2304      	movs	r3, #4
 8002e46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8002e48:	2332      	movs	r3, #50	; 0x32
 8002e4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002e50:	2307      	movs	r3, #7
 8002e52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e54:	f107 0320 	add.w	r3, r7, #32
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f002 fc6d 	bl	8005738 <HAL_RCC_OscConfig>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002e64:	f000 fe7e 	bl	8003b64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e68:	230f      	movs	r3, #15
 8002e6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002e80:	f107 030c 	add.w	r3, r7, #12
 8002e84:	2101      	movs	r1, #1
 8002e86:	4618      	mov	r0, r3
 8002e88:	f002 fece 	bl	8005c28 <HAL_RCC_ClockConfig>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002e92:	f000 fe67 	bl	8003b64 <Error_Handler>
  }
}
 8002e96:	bf00      	nop
 8002e98:	3750      	adds	r7, #80	; 0x50
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	40007000 	.word	0x40007000

08002ea8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002eae:	463b      	mov	r3, r7
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002eba:	4b21      	ldr	r3, [pc, #132]	; (8002f40 <MX_ADC1_Init+0x98>)
 8002ebc:	4a21      	ldr	r2, [pc, #132]	; (8002f44 <MX_ADC1_Init+0x9c>)
 8002ebe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002ec0:	4b1f      	ldr	r3, [pc, #124]	; (8002f40 <MX_ADC1_Init+0x98>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8002ec6:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <MX_ADC1_Init+0x98>)
 8002ec8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ecc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002ece:	4b1c      	ldr	r3, [pc, #112]	; (8002f40 <MX_ADC1_Init+0x98>)
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002ed4:	4b1a      	ldr	r3, [pc, #104]	; (8002f40 <MX_ADC1_Init+0x98>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002eda:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <MX_ADC1_Init+0x98>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ee2:	4b17      	ldr	r3, [pc, #92]	; (8002f40 <MX_ADC1_Init+0x98>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ee8:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <MX_ADC1_Init+0x98>)
 8002eea:	4a17      	ldr	r2, [pc, #92]	; (8002f48 <MX_ADC1_Init+0xa0>)
 8002eec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002eee:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <MX_ADC1_Init+0x98>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002ef4:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <MX_ADC1_Init+0x98>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <MX_ADC1_Init+0x98>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002f02:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <MX_ADC1_Init+0x98>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f08:	480d      	ldr	r0, [pc, #52]	; (8002f40 <MX_ADC1_Init+0x98>)
 8002f0a:	f001 fb7b 	bl	8004604 <HAL_ADC_Init>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002f14:	f000 fe26 	bl	8003b64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002f18:	2304      	movs	r3, #4
 8002f1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002f20:	2307      	movs	r3, #7
 8002f22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f24:	463b      	mov	r3, r7
 8002f26:	4619      	mov	r1, r3
 8002f28:	4805      	ldr	r0, [pc, #20]	; (8002f40 <MX_ADC1_Init+0x98>)
 8002f2a:	f001 fd19 	bl	8004960 <HAL_ADC_ConfigChannel>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002f34:	f000 fe16 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002f38:	bf00      	nop
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	20000c58 	.word	0x20000c58
 8002f44:	40012000 	.word	0x40012000
 8002f48:	0f000001 	.word	0x0f000001

08002f4c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f52:	463b      	mov	r3, r7
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002f5e:	4b21      	ldr	r3, [pc, #132]	; (8002fe4 <MX_ADC2_Init+0x98>)
 8002f60:	4a21      	ldr	r2, [pc, #132]	; (8002fe8 <MX_ADC2_Init+0x9c>)
 8002f62:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002f64:	4b1f      	ldr	r3, [pc, #124]	; (8002fe4 <MX_ADC2_Init+0x98>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8002f6a:	4b1e      	ldr	r3, [pc, #120]	; (8002fe4 <MX_ADC2_Init+0x98>)
 8002f6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f70:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002f72:	4b1c      	ldr	r3, [pc, #112]	; (8002fe4 <MX_ADC2_Init+0x98>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002f78:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <MX_ADC2_Init+0x98>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002f7e:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <MX_ADC2_Init+0x98>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f86:	4b17      	ldr	r3, [pc, #92]	; (8002fe4 <MX_ADC2_Init+0x98>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f8c:	4b15      	ldr	r3, [pc, #84]	; (8002fe4 <MX_ADC2_Init+0x98>)
 8002f8e:	4a17      	ldr	r2, [pc, #92]	; (8002fec <MX_ADC2_Init+0xa0>)
 8002f90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f92:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <MX_ADC2_Init+0x98>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002f98:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <MX_ADC2_Init+0x98>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002f9e:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <MX_ADC2_Init+0x98>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002fa6:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <MX_ADC2_Init+0x98>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002fac:	480d      	ldr	r0, [pc, #52]	; (8002fe4 <MX_ADC2_Init+0x98>)
 8002fae:	f001 fb29 	bl	8004604 <HAL_ADC_Init>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002fb8:	f000 fdd4 	bl	8003b64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002fbc:	2308      	movs	r3, #8
 8002fbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002fc4:	2307      	movs	r3, #7
 8002fc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002fc8:	463b      	mov	r3, r7
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4805      	ldr	r0, [pc, #20]	; (8002fe4 <MX_ADC2_Init+0x98>)
 8002fce:	f001 fcc7 	bl	8004960 <HAL_ADC_ConfigChannel>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002fd8:	f000 fdc4 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002fdc:	bf00      	nop
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20000b2c 	.word	0x20000b2c
 8002fe8:	40012100 	.word	0x40012100
 8002fec:	0f000001 	.word	0x0f000001

08002ff0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ff6:	463b      	mov	r3, r7
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8003002:	4b21      	ldr	r3, [pc, #132]	; (8003088 <MX_ADC3_Init+0x98>)
 8003004:	4a21      	ldr	r2, [pc, #132]	; (800308c <MX_ADC3_Init+0x9c>)
 8003006:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003008:	4b1f      	ldr	r3, [pc, #124]	; (8003088 <MX_ADC3_Init+0x98>)
 800300a:	2200      	movs	r2, #0
 800300c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 800300e:	4b1e      	ldr	r3, [pc, #120]	; (8003088 <MX_ADC3_Init+0x98>)
 8003010:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003014:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8003016:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <MX_ADC3_Init+0x98>)
 8003018:	2200      	movs	r2, #0
 800301a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800301c:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <MX_ADC3_Init+0x98>)
 800301e:	2201      	movs	r2, #1
 8003020:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003022:	4b19      	ldr	r3, [pc, #100]	; (8003088 <MX_ADC3_Init+0x98>)
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800302a:	4b17      	ldr	r3, [pc, #92]	; (8003088 <MX_ADC3_Init+0x98>)
 800302c:	2200      	movs	r2, #0
 800302e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003030:	4b15      	ldr	r3, [pc, #84]	; (8003088 <MX_ADC3_Init+0x98>)
 8003032:	4a17      	ldr	r2, [pc, #92]	; (8003090 <MX_ADC3_Init+0xa0>)
 8003034:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003036:	4b14      	ldr	r3, [pc, #80]	; (8003088 <MX_ADC3_Init+0x98>)
 8003038:	2200      	movs	r2, #0
 800303a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800303c:	4b12      	ldr	r3, [pc, #72]	; (8003088 <MX_ADC3_Init+0x98>)
 800303e:	2201      	movs	r2, #1
 8003040:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8003042:	4b11      	ldr	r3, [pc, #68]	; (8003088 <MX_ADC3_Init+0x98>)
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800304a:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <MX_ADC3_Init+0x98>)
 800304c:	2200      	movs	r2, #0
 800304e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003050:	480d      	ldr	r0, [pc, #52]	; (8003088 <MX_ADC3_Init+0x98>)
 8003052:	f001 fad7 	bl	8004604 <HAL_ADC_Init>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800305c:	f000 fd82 	bl	8003b64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003060:	230b      	movs	r3, #11
 8003062:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003064:	2301      	movs	r3, #1
 8003066:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003068:	2307      	movs	r3, #7
 800306a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800306c:	463b      	mov	r3, r7
 800306e:	4619      	mov	r1, r3
 8003070:	4805      	ldr	r0, [pc, #20]	; (8003088 <MX_ADC3_Init+0x98>)
 8003072:	f001 fc75 	bl	8004960 <HAL_ADC_ConfigChannel>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800307c:	f000 fd72 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8003080:	bf00      	nop
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20000ca0 	.word	0x20000ca0
 800308c:	40012200 	.word	0x40012200
 8003090:	0f000001 	.word	0x0f000001

08003094 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003098:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <MX_I2C1_Init+0x50>)
 800309a:	4a13      	ldr	r2, [pc, #76]	; (80030e8 <MX_I2C1_Init+0x54>)
 800309c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800309e:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <MX_I2C1_Init+0x50>)
 80030a0:	4a12      	ldr	r2, [pc, #72]	; (80030ec <MX_I2C1_Init+0x58>)
 80030a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80030a4:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <MX_I2C1_Init+0x50>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80030aa:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <MX_I2C1_Init+0x50>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <MX_I2C1_Init+0x50>)
 80030b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030b8:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <MX_I2C1_Init+0x50>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <MX_I2C1_Init+0x50>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030c4:	4b07      	ldr	r3, [pc, #28]	; (80030e4 <MX_I2C1_Init+0x50>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <MX_I2C1_Init+0x50>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80030d0:	4804      	ldr	r0, [pc, #16]	; (80030e4 <MX_I2C1_Init+0x50>)
 80030d2:	f002 f9ed 	bl	80054b0 <HAL_I2C_Init>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80030dc:	f000 fd42 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80030e0:	bf00      	nop
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20000b74 	.word	0x20000b74
 80030e8:	40005400 	.word	0x40005400
 80030ec:	00061a80 	.word	0x00061a80

080030f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b096      	sub	sp, #88	; 0x58
 80030f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	605a      	str	r2, [r3, #4]
 8003100:	609a      	str	r2, [r3, #8]
 8003102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003104:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800310e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	605a      	str	r2, [r3, #4]
 8003118:	609a      	str	r2, [r3, #8]
 800311a:	60da      	str	r2, [r3, #12]
 800311c:	611a      	str	r2, [r3, #16]
 800311e:	615a      	str	r2, [r3, #20]
 8003120:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003122:	1d3b      	adds	r3, r7, #4
 8003124:	2220      	movs	r2, #32
 8003126:	2100      	movs	r1, #0
 8003128:	4618      	mov	r0, r3
 800312a:	f004 feef 	bl	8007f0c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800312e:	4b4a      	ldr	r3, [pc, #296]	; (8003258 <MX_TIM1_Init+0x168>)
 8003130:	4a4a      	ldr	r2, [pc, #296]	; (800325c <MX_TIM1_Init+0x16c>)
 8003132:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8003134:	4b48      	ldr	r3, [pc, #288]	; (8003258 <MX_TIM1_Init+0x168>)
 8003136:	225f      	movs	r2, #95	; 0x5f
 8003138:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800313a:	4b47      	ldr	r3, [pc, #284]	; (8003258 <MX_TIM1_Init+0x168>)
 800313c:	2200      	movs	r2, #0
 800313e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 8003140:	4b45      	ldr	r3, [pc, #276]	; (8003258 <MX_TIM1_Init+0x168>)
 8003142:	22fe      	movs	r2, #254	; 0xfe
 8003144:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003146:	4b44      	ldr	r3, [pc, #272]	; (8003258 <MX_TIM1_Init+0x168>)
 8003148:	2200      	movs	r2, #0
 800314a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800314c:	4b42      	ldr	r3, [pc, #264]	; (8003258 <MX_TIM1_Init+0x168>)
 800314e:	2200      	movs	r2, #0
 8003150:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003152:	4b41      	ldr	r3, [pc, #260]	; (8003258 <MX_TIM1_Init+0x168>)
 8003154:	2200      	movs	r2, #0
 8003156:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003158:	483f      	ldr	r0, [pc, #252]	; (8003258 <MX_TIM1_Init+0x168>)
 800315a:	f002 ff61 	bl	8006020 <HAL_TIM_Base_Init>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003164:	f000 fcfe 	bl	8003b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800316c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800316e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003172:	4619      	mov	r1, r3
 8003174:	4838      	ldr	r0, [pc, #224]	; (8003258 <MX_TIM1_Init+0x168>)
 8003176:	f003 f9ef 	bl	8006558 <HAL_TIM_ConfigClockSource>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003180:	f000 fcf0 	bl	8003b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003184:	4834      	ldr	r0, [pc, #208]	; (8003258 <MX_TIM1_Init+0x168>)
 8003186:	f003 f803 	bl	8006190 <HAL_TIM_PWM_Init>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003190:	f000 fce8 	bl	8003b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003194:	2300      	movs	r3, #0
 8003196:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003198:	2300      	movs	r3, #0
 800319a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800319c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031a0:	4619      	mov	r1, r3
 80031a2:	482d      	ldr	r0, [pc, #180]	; (8003258 <MX_TIM1_Init+0x168>)
 80031a4:	f003 fdb0 	bl	8006d08 <HAL_TIMEx_MasterConfigSynchronization>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80031ae:	f000 fcd9 	bl	8003b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031b2:	2360      	movs	r3, #96	; 0x60
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031ba:	2300      	movs	r3, #0
 80031bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80031be:	2300      	movs	r3, #0
 80031c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031c2:	2300      	movs	r3, #0
 80031c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80031c6:	2300      	movs	r3, #0
 80031c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80031ca:	2300      	movs	r3, #0
 80031cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031d2:	2200      	movs	r2, #0
 80031d4:	4619      	mov	r1, r3
 80031d6:	4820      	ldr	r0, [pc, #128]	; (8003258 <MX_TIM1_Init+0x168>)
 80031d8:	f003 f8fc 	bl	80063d4 <HAL_TIM_PWM_ConfigChannel>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80031e2:	f000 fcbf 	bl	8003b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ea:	2204      	movs	r2, #4
 80031ec:	4619      	mov	r1, r3
 80031ee:	481a      	ldr	r0, [pc, #104]	; (8003258 <MX_TIM1_Init+0x168>)
 80031f0:	f003 f8f0 	bl	80063d4 <HAL_TIM_PWM_ConfigChannel>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80031fa:	f000 fcb3 	bl	8003b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80031fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003202:	2208      	movs	r2, #8
 8003204:	4619      	mov	r1, r3
 8003206:	4814      	ldr	r0, [pc, #80]	; (8003258 <MX_TIM1_Init+0x168>)
 8003208:	f003 f8e4 	bl	80063d4 <HAL_TIM_PWM_ConfigChannel>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8003212:	f000 fca7 	bl	8003b64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003216:	2300      	movs	r3, #0
 8003218:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800322a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800322e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003230:	2300      	movs	r3, #0
 8003232:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003234:	1d3b      	adds	r3, r7, #4
 8003236:	4619      	mov	r1, r3
 8003238:	4807      	ldr	r0, [pc, #28]	; (8003258 <MX_TIM1_Init+0x168>)
 800323a:	f003 fde1 	bl	8006e00 <HAL_TIMEx_ConfigBreakDeadTime>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8003244:	f000 fc8e 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003248:	4803      	ldr	r0, [pc, #12]	; (8003258 <MX_TIM1_Init+0x168>)
 800324a:	f000 fe63 	bl	8003f14 <HAL_TIM_MspPostInit>

}
 800324e:	bf00      	nop
 8003250:	3758      	adds	r7, #88	; 0x58
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000d30 	.word	0x20000d30
 800325c:	40010000 	.word	0x40010000

08003260 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08e      	sub	sp, #56	; 0x38
 8003264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003266:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	605a      	str	r2, [r3, #4]
 8003270:	609a      	str	r2, [r3, #8]
 8003272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003274:	f107 0320 	add.w	r3, r7, #32
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800327e:	1d3b      	adds	r3, r7, #4
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	60da      	str	r2, [r3, #12]
 800328a:	611a      	str	r2, [r3, #16]
 800328c:	615a      	str	r2, [r3, #20]
 800328e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003290:	4b38      	ldr	r3, [pc, #224]	; (8003374 <MX_TIM2_Init+0x114>)
 8003292:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003296:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 500-1;
 8003298:	4b36      	ldr	r3, [pc, #216]	; (8003374 <MX_TIM2_Init+0x114>)
 800329a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800329e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032a0:	4b34      	ldr	r3, [pc, #208]	; (8003374 <MX_TIM2_Init+0x114>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 80032a6:	4b33      	ldr	r3, [pc, #204]	; (8003374 <MX_TIM2_Init+0x114>)
 80032a8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80032ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032ae:	4b31      	ldr	r3, [pc, #196]	; (8003374 <MX_TIM2_Init+0x114>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032b4:	4b2f      	ldr	r3, [pc, #188]	; (8003374 <MX_TIM2_Init+0x114>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80032ba:	482e      	ldr	r0, [pc, #184]	; (8003374 <MX_TIM2_Init+0x114>)
 80032bc:	f002 feb0 	bl	8006020 <HAL_TIM_Base_Init>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80032c6:	f000 fc4d 	bl	8003b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80032d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032d4:	4619      	mov	r1, r3
 80032d6:	4827      	ldr	r0, [pc, #156]	; (8003374 <MX_TIM2_Init+0x114>)
 80032d8:	f003 f93e 	bl	8006558 <HAL_TIM_ConfigClockSource>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80032e2:	f000 fc3f 	bl	8003b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80032e6:	4823      	ldr	r0, [pc, #140]	; (8003374 <MX_TIM2_Init+0x114>)
 80032e8:	f002 ff52 	bl	8006190 <HAL_TIM_PWM_Init>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80032f2:	f000 fc37 	bl	8003b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032f6:	2300      	movs	r3, #0
 80032f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032fa:	2300      	movs	r3, #0
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032fe:	f107 0320 	add.w	r3, r7, #32
 8003302:	4619      	mov	r1, r3
 8003304:	481b      	ldr	r0, [pc, #108]	; (8003374 <MX_TIM2_Init+0x114>)
 8003306:	f003 fcff 	bl	8006d08 <HAL_TIMEx_MasterConfigSynchronization>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003310:	f000 fc28 	bl	8003b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003314:	2360      	movs	r3, #96	; 0x60
 8003316:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800331c:	2300      	movs	r3, #0
 800331e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003324:	1d3b      	adds	r3, r7, #4
 8003326:	2200      	movs	r2, #0
 8003328:	4619      	mov	r1, r3
 800332a:	4812      	ldr	r0, [pc, #72]	; (8003374 <MX_TIM2_Init+0x114>)
 800332c:	f003 f852 	bl	80063d4 <HAL_TIM_PWM_ConfigChannel>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003336:	f000 fc15 	bl	8003b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800333a:	1d3b      	adds	r3, r7, #4
 800333c:	2204      	movs	r2, #4
 800333e:	4619      	mov	r1, r3
 8003340:	480c      	ldr	r0, [pc, #48]	; (8003374 <MX_TIM2_Init+0x114>)
 8003342:	f003 f847 	bl	80063d4 <HAL_TIM_PWM_ConfigChannel>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800334c:	f000 fc0a 	bl	8003b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003350:	1d3b      	adds	r3, r7, #4
 8003352:	2208      	movs	r2, #8
 8003354:	4619      	mov	r1, r3
 8003356:	4807      	ldr	r0, [pc, #28]	; (8003374 <MX_TIM2_Init+0x114>)
 8003358:	f003 f83c 	bl	80063d4 <HAL_TIM_PWM_ConfigChannel>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8003362:	f000 fbff 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003366:	4803      	ldr	r0, [pc, #12]	; (8003374 <MX_TIM2_Init+0x114>)
 8003368:	f000 fdd4 	bl	8003f14 <HAL_TIM_MspPostInit>

}
 800336c:	bf00      	nop
 800336e:	3738      	adds	r7, #56	; 0x38
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	20000e04 	.word	0x20000e04

08003378 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08e      	sub	sp, #56	; 0x38
 800337c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800337e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	605a      	str	r2, [r3, #4]
 8003388:	609a      	str	r2, [r3, #8]
 800338a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800338c:	f107 0320 	add.w	r3, r7, #32
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003396:	1d3b      	adds	r3, r7, #4
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	60da      	str	r2, [r3, #12]
 80033a2:	611a      	str	r2, [r3, #16]
 80033a4:	615a      	str	r2, [r3, #20]
 80033a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80033a8:	4b38      	ldr	r3, [pc, #224]	; (800348c <MX_TIM3_Init+0x114>)
 80033aa:	4a39      	ldr	r2, [pc, #228]	; (8003490 <MX_TIM3_Init+0x118>)
 80033ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 80033ae:	4b37      	ldr	r3, [pc, #220]	; (800348c <MX_TIM3_Init+0x114>)
 80033b0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80033b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033b6:	4b35      	ldr	r3, [pc, #212]	; (800348c <MX_TIM3_Init+0x114>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80033bc:	4b33      	ldr	r3, [pc, #204]	; (800348c <MX_TIM3_Init+0x114>)
 80033be:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80033c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033c4:	4b31      	ldr	r3, [pc, #196]	; (800348c <MX_TIM3_Init+0x114>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ca:	4b30      	ldr	r3, [pc, #192]	; (800348c <MX_TIM3_Init+0x114>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80033d0:	482e      	ldr	r0, [pc, #184]	; (800348c <MX_TIM3_Init+0x114>)
 80033d2:	f002 fe25 	bl	8006020 <HAL_TIM_Base_Init>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80033dc:	f000 fbc2 	bl	8003b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80033e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033ea:	4619      	mov	r1, r3
 80033ec:	4827      	ldr	r0, [pc, #156]	; (800348c <MX_TIM3_Init+0x114>)
 80033ee:	f003 f8b3 	bl	8006558 <HAL_TIM_ConfigClockSource>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80033f8:	f000 fbb4 	bl	8003b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80033fc:	4823      	ldr	r0, [pc, #140]	; (800348c <MX_TIM3_Init+0x114>)
 80033fe:	f002 fec7 	bl	8006190 <HAL_TIM_PWM_Init>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003408:	f000 fbac 	bl	8003b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800340c:	2300      	movs	r3, #0
 800340e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003410:	2300      	movs	r3, #0
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003414:	f107 0320 	add.w	r3, r7, #32
 8003418:	4619      	mov	r1, r3
 800341a:	481c      	ldr	r0, [pc, #112]	; (800348c <MX_TIM3_Init+0x114>)
 800341c:	f003 fc74 	bl	8006d08 <HAL_TIMEx_MasterConfigSynchronization>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003426:	f000 fb9d 	bl	8003b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800342a:	2360      	movs	r3, #96	; 0x60
 800342c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800343a:	1d3b      	adds	r3, r7, #4
 800343c:	2204      	movs	r2, #4
 800343e:	4619      	mov	r1, r3
 8003440:	4812      	ldr	r0, [pc, #72]	; (800348c <MX_TIM3_Init+0x114>)
 8003442:	f002 ffc7 	bl	80063d4 <HAL_TIM_PWM_ConfigChannel>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800344c:	f000 fb8a 	bl	8003b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003450:	1d3b      	adds	r3, r7, #4
 8003452:	2208      	movs	r2, #8
 8003454:	4619      	mov	r1, r3
 8003456:	480d      	ldr	r0, [pc, #52]	; (800348c <MX_TIM3_Init+0x114>)
 8003458:	f002 ffbc 	bl	80063d4 <HAL_TIM_PWM_ConfigChannel>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003462:	f000 fb7f 	bl	8003b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003466:	1d3b      	adds	r3, r7, #4
 8003468:	220c      	movs	r2, #12
 800346a:	4619      	mov	r1, r3
 800346c:	4807      	ldr	r0, [pc, #28]	; (800348c <MX_TIM3_Init+0x114>)
 800346e:	f002 ffb1 	bl	80063d4 <HAL_TIM_PWM_ConfigChannel>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8003478:	f000 fb74 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800347c:	4803      	ldr	r0, [pc, #12]	; (800348c <MX_TIM3_Init+0x114>)
 800347e:	f000 fd49 	bl	8003f14 <HAL_TIM_MspPostInit>

}
 8003482:	bf00      	nop
 8003484:	3738      	adds	r7, #56	; 0x38
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000c10 	.word	0x20000c10
 8003490:	40000400 	.word	0x40000400

08003494 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08e      	sub	sp, #56	; 0x38
 8003498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800349a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	605a      	str	r2, [r3, #4]
 80034a4:	609a      	str	r2, [r3, #8]
 80034a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034a8:	f107 0320 	add.w	r3, r7, #32
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034b2:	1d3b      	adds	r3, r7, #4
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	611a      	str	r2, [r3, #16]
 80034c0:	615a      	str	r2, [r3, #20]
 80034c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80034c4:	4b2c      	ldr	r3, [pc, #176]	; (8003578 <MX_TIM4_Init+0xe4>)
 80034c6:	4a2d      	ldr	r2, [pc, #180]	; (800357c <MX_TIM4_Init+0xe8>)
 80034c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 80034ca:	4b2b      	ldr	r3, [pc, #172]	; (8003578 <MX_TIM4_Init+0xe4>)
 80034cc:	225f      	movs	r2, #95	; 0x5f
 80034ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034d0:	4b29      	ldr	r3, [pc, #164]	; (8003578 <MX_TIM4_Init+0xe4>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20;
 80034d6:	4b28      	ldr	r3, [pc, #160]	; (8003578 <MX_TIM4_Init+0xe4>)
 80034d8:	2214      	movs	r2, #20
 80034da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034dc:	4b26      	ldr	r3, [pc, #152]	; (8003578 <MX_TIM4_Init+0xe4>)
 80034de:	2200      	movs	r2, #0
 80034e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034e2:	4b25      	ldr	r3, [pc, #148]	; (8003578 <MX_TIM4_Init+0xe4>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80034e8:	4823      	ldr	r0, [pc, #140]	; (8003578 <MX_TIM4_Init+0xe4>)
 80034ea:	f002 fd99 	bl	8006020 <HAL_TIM_Base_Init>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80034f4:	f000 fb36 	bl	8003b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80034fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003502:	4619      	mov	r1, r3
 8003504:	481c      	ldr	r0, [pc, #112]	; (8003578 <MX_TIM4_Init+0xe4>)
 8003506:	f003 f827 	bl	8006558 <HAL_TIM_ConfigClockSource>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8003510:	f000 fb28 	bl	8003b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003514:	4818      	ldr	r0, [pc, #96]	; (8003578 <MX_TIM4_Init+0xe4>)
 8003516:	f002 fe3b 	bl	8006190 <HAL_TIM_PWM_Init>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8003520:	f000 fb20 	bl	8003b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003524:	2300      	movs	r3, #0
 8003526:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003528:	2300      	movs	r3, #0
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800352c:	f107 0320 	add.w	r3, r7, #32
 8003530:	4619      	mov	r1, r3
 8003532:	4811      	ldr	r0, [pc, #68]	; (8003578 <MX_TIM4_Init+0xe4>)
 8003534:	f003 fbe8 	bl	8006d08 <HAL_TIMEx_MasterConfigSynchronization>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800353e:	f000 fb11 	bl	8003b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003542:	2360      	movs	r3, #96	; 0x60
 8003544:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003546:	2300      	movs	r3, #0
 8003548:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003552:	1d3b      	adds	r3, r7, #4
 8003554:	2200      	movs	r2, #0
 8003556:	4619      	mov	r1, r3
 8003558:	4807      	ldr	r0, [pc, #28]	; (8003578 <MX_TIM4_Init+0xe4>)
 800355a:	f002 ff3b 	bl	80063d4 <HAL_TIM_PWM_ConfigChannel>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8003564:	f000 fafe 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003568:	4803      	ldr	r0, [pc, #12]	; (8003578 <MX_TIM4_Init+0xe4>)
 800356a:	f000 fcd3 	bl	8003f14 <HAL_TIM_MspPostInit>

}
 800356e:	bf00      	nop
 8003570:	3738      	adds	r7, #56	; 0x38
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000a98 	.word	0x20000a98
 800357c:	40000800 	.word	0x40000800

08003580 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003586:	f107 0308 	add.w	r3, r7, #8
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	605a      	str	r2, [r3, #4]
 8003590:	609a      	str	r2, [r3, #8]
 8003592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003594:	463b      	mov	r3, r7
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800359c:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <MX_TIM5_Init+0x94>)
 800359e:	4a1e      	ldr	r2, [pc, #120]	; (8003618 <MX_TIM5_Init+0x98>)
 80035a0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 96-1;
 80035a2:	4b1c      	ldr	r3, [pc, #112]	; (8003614 <MX_TIM5_Init+0x94>)
 80035a4:	225f      	movs	r2, #95	; 0x5f
 80035a6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035a8:	4b1a      	ldr	r3, [pc, #104]	; (8003614 <MX_TIM5_Init+0x94>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 80035ae:	4b19      	ldr	r3, [pc, #100]	; (8003614 <MX_TIM5_Init+0x94>)
 80035b0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80035b4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035b6:	4b17      	ldr	r3, [pc, #92]	; (8003614 <MX_TIM5_Init+0x94>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035bc:	4b15      	ldr	r3, [pc, #84]	; (8003614 <MX_TIM5_Init+0x94>)
 80035be:	2200      	movs	r2, #0
 80035c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80035c2:	4814      	ldr	r0, [pc, #80]	; (8003614 <MX_TIM5_Init+0x94>)
 80035c4:	f002 fd2c 	bl	8006020 <HAL_TIM_Base_Init>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80035ce:	f000 fac9 	bl	8003b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80035d8:	f107 0308 	add.w	r3, r7, #8
 80035dc:	4619      	mov	r1, r3
 80035de:	480d      	ldr	r0, [pc, #52]	; (8003614 <MX_TIM5_Init+0x94>)
 80035e0:	f002 ffba 	bl	8006558 <HAL_TIM_ConfigClockSource>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80035ea:	f000 fabb 	bl	8003b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ee:	2300      	movs	r3, #0
 80035f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80035f6:	463b      	mov	r3, r7
 80035f8:	4619      	mov	r1, r3
 80035fa:	4806      	ldr	r0, [pc, #24]	; (8003614 <MX_TIM5_Init+0x94>)
 80035fc:	f003 fb84 	bl	8006d08 <HAL_TIMEx_MasterConfigSynchronization>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003606:	f000 faad 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800360a:	bf00      	nop
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20000bc8 	.word	0x20000bc8
 8003618:	40000c00 	.word	0x40000c00

0800361c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003622:	463b      	mov	r3, r7
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800362a:	4b15      	ldr	r3, [pc, #84]	; (8003680 <MX_TIM6_Init+0x64>)
 800362c:	4a15      	ldr	r2, [pc, #84]	; (8003684 <MX_TIM6_Init+0x68>)
 800362e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8003630:	4b13      	ldr	r3, [pc, #76]	; (8003680 <MX_TIM6_Init+0x64>)
 8003632:	2231      	movs	r2, #49	; 0x31
 8003634:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003636:	4b12      	ldr	r3, [pc, #72]	; (8003680 <MX_TIM6_Init+0x64>)
 8003638:	2200      	movs	r2, #0
 800363a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 800363c:	4b10      	ldr	r3, [pc, #64]	; (8003680 <MX_TIM6_Init+0x64>)
 800363e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003642:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003644:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <MX_TIM6_Init+0x64>)
 8003646:	2200      	movs	r2, #0
 8003648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800364a:	480d      	ldr	r0, [pc, #52]	; (8003680 <MX_TIM6_Init+0x64>)
 800364c:	f002 fce8 	bl	8006020 <HAL_TIM_Base_Init>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003656:	f000 fa85 	bl	8003b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800365a:	2300      	movs	r3, #0
 800365c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800365e:	2300      	movs	r3, #0
 8003660:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003662:	463b      	mov	r3, r7
 8003664:	4619      	mov	r1, r3
 8003666:	4806      	ldr	r0, [pc, #24]	; (8003680 <MX_TIM6_Init+0x64>)
 8003668:	f003 fb4e 	bl	8006d08 <HAL_TIMEx_MasterConfigSynchronization>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003672:	f000 fa77 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003676:	bf00      	nop
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20000ce8 	.word	0x20000ce8
 8003684:	40001000 	.word	0x40001000

08003688 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800368e:	f107 0308 	add.w	r3, r7, #8
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	605a      	str	r2, [r3, #4]
 8003698:	609a      	str	r2, [r3, #8]
 800369a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800369c:	463b      	mov	r3, r7
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80036a4:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <MX_TIM8_Init+0x98>)
 80036a6:	4a1f      	ldr	r2, [pc, #124]	; (8003724 <MX_TIM8_Init+0x9c>)
 80036a8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80036aa:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <MX_TIM8_Init+0x98>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b0:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <MX_TIM8_Init+0x98>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80036b6:	4b1a      	ldr	r3, [pc, #104]	; (8003720 <MX_TIM8_Init+0x98>)
 80036b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036bc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036be:	4b18      	ldr	r3, [pc, #96]	; (8003720 <MX_TIM8_Init+0x98>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80036c4:	4b16      	ldr	r3, [pc, #88]	; (8003720 <MX_TIM8_Init+0x98>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036ca:	4b15      	ldr	r3, [pc, #84]	; (8003720 <MX_TIM8_Init+0x98>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80036d0:	4813      	ldr	r0, [pc, #76]	; (8003720 <MX_TIM8_Init+0x98>)
 80036d2:	f002 fca5 	bl	8006020 <HAL_TIM_Base_Init>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80036dc:	f000 fa42 	bl	8003b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80036e6:	f107 0308 	add.w	r3, r7, #8
 80036ea:	4619      	mov	r1, r3
 80036ec:	480c      	ldr	r0, [pc, #48]	; (8003720 <MX_TIM8_Init+0x98>)
 80036ee:	f002 ff33 	bl	8006558 <HAL_TIM_ConfigClockSource>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80036f8:	f000 fa34 	bl	8003b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036fc:	2300      	movs	r3, #0
 80036fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003700:	2300      	movs	r3, #0
 8003702:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003704:	463b      	mov	r3, r7
 8003706:	4619      	mov	r1, r3
 8003708:	4805      	ldr	r0, [pc, #20]	; (8003720 <MX_TIM8_Init+0x98>)
 800370a:	f003 fafd 	bl	8006d08 <HAL_TIMEx_MasterConfigSynchronization>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8003714:	f000 fa26 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003718:	bf00      	nop
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	20000a50 	.word	0x20000a50
 8003724:	40010400 	.word	0x40010400

08003728 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08c      	sub	sp, #48	; 0x30
 800372c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800372e:	f107 0320 	add.w	r3, r7, #32
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	609a      	str	r2, [r3, #8]
 800373a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800373c:	1d3b      	adds	r3, r7, #4
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	605a      	str	r2, [r3, #4]
 8003744:	609a      	str	r2, [r3, #8]
 8003746:	60da      	str	r2, [r3, #12]
 8003748:	611a      	str	r2, [r3, #16]
 800374a:	615a      	str	r2, [r3, #20]
 800374c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800374e:	4b26      	ldr	r3, [pc, #152]	; (80037e8 <MX_TIM9_Init+0xc0>)
 8003750:	4a26      	ldr	r2, [pc, #152]	; (80037ec <MX_TIM9_Init+0xc4>)
 8003752:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 500-1;
 8003754:	4b24      	ldr	r3, [pc, #144]	; (80037e8 <MX_TIM9_Init+0xc0>)
 8003756:	f240 12f3 	movw	r2, #499	; 0x1f3
 800375a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800375c:	4b22      	ldr	r3, [pc, #136]	; (80037e8 <MX_TIM9_Init+0xc0>)
 800375e:	2200      	movs	r2, #0
 8003760:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2000-1;
 8003762:	4b21      	ldr	r3, [pc, #132]	; (80037e8 <MX_TIM9_Init+0xc0>)
 8003764:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003768:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800376a:	4b1f      	ldr	r3, [pc, #124]	; (80037e8 <MX_TIM9_Init+0xc0>)
 800376c:	2200      	movs	r2, #0
 800376e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003770:	4b1d      	ldr	r3, [pc, #116]	; (80037e8 <MX_TIM9_Init+0xc0>)
 8003772:	2200      	movs	r2, #0
 8003774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003776:	481c      	ldr	r0, [pc, #112]	; (80037e8 <MX_TIM9_Init+0xc0>)
 8003778:	f002 fc52 	bl	8006020 <HAL_TIM_Base_Init>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 8003782:	f000 f9ef 	bl	8003b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800378a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800378c:	f107 0320 	add.w	r3, r7, #32
 8003790:	4619      	mov	r1, r3
 8003792:	4815      	ldr	r0, [pc, #84]	; (80037e8 <MX_TIM9_Init+0xc0>)
 8003794:	f002 fee0 	bl	8006558 <HAL_TIM_ConfigClockSource>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 800379e:	f000 f9e1 	bl	8003b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80037a2:	4811      	ldr	r0, [pc, #68]	; (80037e8 <MX_TIM9_Init+0xc0>)
 80037a4:	f002 fcf4 	bl	8006190 <HAL_TIM_PWM_Init>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80037ae:	f000 f9d9 	bl	8003b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037b2:	2360      	movs	r3, #96	; 0x60
 80037b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80037b6:	2300      	movs	r3, #0
 80037b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037be:	2300      	movs	r3, #0
 80037c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037c2:	1d3b      	adds	r3, r7, #4
 80037c4:	2200      	movs	r2, #0
 80037c6:	4619      	mov	r1, r3
 80037c8:	4807      	ldr	r0, [pc, #28]	; (80037e8 <MX_TIM9_Init+0xc0>)
 80037ca:	f002 fe03 	bl	80063d4 <HAL_TIM_PWM_ConfigChannel>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 80037d4:	f000 f9c6 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80037d8:	4803      	ldr	r0, [pc, #12]	; (80037e8 <MX_TIM9_Init+0xc0>)
 80037da:	f000 fb9b 	bl	8003f14 <HAL_TIM_MspPostInit>

}
 80037de:	bf00      	nop
 80037e0:	3730      	adds	r7, #48	; 0x30
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20000d78 	.word	0x20000d78
 80037ec:	40014000 	.word	0x40014000

080037f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80037f4:	4b11      	ldr	r3, [pc, #68]	; (800383c <MX_USART2_UART_Init+0x4c>)
 80037f6:	4a12      	ldr	r2, [pc, #72]	; (8003840 <MX_USART2_UART_Init+0x50>)
 80037f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80037fa:	4b10      	ldr	r3, [pc, #64]	; (800383c <MX_USART2_UART_Init+0x4c>)
 80037fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003802:	4b0e      	ldr	r3, [pc, #56]	; (800383c <MX_USART2_UART_Init+0x4c>)
 8003804:	2200      	movs	r2, #0
 8003806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003808:	4b0c      	ldr	r3, [pc, #48]	; (800383c <MX_USART2_UART_Init+0x4c>)
 800380a:	2200      	movs	r2, #0
 800380c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <MX_USART2_UART_Init+0x4c>)
 8003810:	2200      	movs	r2, #0
 8003812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003814:	4b09      	ldr	r3, [pc, #36]	; (800383c <MX_USART2_UART_Init+0x4c>)
 8003816:	220c      	movs	r2, #12
 8003818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800381a:	4b08      	ldr	r3, [pc, #32]	; (800383c <MX_USART2_UART_Init+0x4c>)
 800381c:	2200      	movs	r2, #0
 800381e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003820:	4b06      	ldr	r3, [pc, #24]	; (800383c <MX_USART2_UART_Init+0x4c>)
 8003822:	2200      	movs	r2, #0
 8003824:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003826:	4805      	ldr	r0, [pc, #20]	; (800383c <MX_USART2_UART_Init+0x4c>)
 8003828:	f003 fb3c 	bl	8006ea4 <HAL_UART_Init>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003832:	f000 f997 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003836:	bf00      	nop
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000e4c 	.word	0x20000e4c
 8003840:	40004400 	.word	0x40004400

08003844 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003848:	4b11      	ldr	r3, [pc, #68]	; (8003890 <MX_USART3_UART_Init+0x4c>)
 800384a:	4a12      	ldr	r2, [pc, #72]	; (8003894 <MX_USART3_UART_Init+0x50>)
 800384c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800384e:	4b10      	ldr	r3, [pc, #64]	; (8003890 <MX_USART3_UART_Init+0x4c>)
 8003850:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003854:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003856:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <MX_USART3_UART_Init+0x4c>)
 8003858:	2200      	movs	r2, #0
 800385a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800385c:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <MX_USART3_UART_Init+0x4c>)
 800385e:	2200      	movs	r2, #0
 8003860:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003862:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <MX_USART3_UART_Init+0x4c>)
 8003864:	2200      	movs	r2, #0
 8003866:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003868:	4b09      	ldr	r3, [pc, #36]	; (8003890 <MX_USART3_UART_Init+0x4c>)
 800386a:	220c      	movs	r2, #12
 800386c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800386e:	4b08      	ldr	r3, [pc, #32]	; (8003890 <MX_USART3_UART_Init+0x4c>)
 8003870:	2200      	movs	r2, #0
 8003872:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003874:	4b06      	ldr	r3, [pc, #24]	; (8003890 <MX_USART3_UART_Init+0x4c>)
 8003876:	2200      	movs	r2, #0
 8003878:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800387a:	4805      	ldr	r0, [pc, #20]	; (8003890 <MX_USART3_UART_Init+0x4c>)
 800387c:	f003 fb12 	bl	8006ea4 <HAL_UART_Init>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003886:	f000 f96d 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800388a:	bf00      	nop
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20000ae8 	.word	0x20000ae8
 8003894:	40004800 	.word	0x40004800

08003898 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800389c:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <MX_USART6_UART_Init+0x4c>)
 800389e:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <MX_USART6_UART_Init+0x50>)
 80038a0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80038a2:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <MX_USART6_UART_Init+0x4c>)
 80038a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80038a8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80038aa:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <MX_USART6_UART_Init+0x4c>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80038b0:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <MX_USART6_UART_Init+0x4c>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80038b6:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <MX_USART6_UART_Init+0x4c>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80038bc:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <MX_USART6_UART_Init+0x4c>)
 80038be:	220c      	movs	r2, #12
 80038c0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038c2:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <MX_USART6_UART_Init+0x4c>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80038c8:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <MX_USART6_UART_Init+0x4c>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80038ce:	4805      	ldr	r0, [pc, #20]	; (80038e4 <MX_USART6_UART_Init+0x4c>)
 80038d0:	f003 fae8 	bl	8006ea4 <HAL_UART_Init>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80038da:	f000 f943 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80038de:	bf00      	nop
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20000dc0 	.word	0x20000dc0
 80038e8:	40011400 	.word	0x40011400

080038ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08c      	sub	sp, #48	; 0x30
 80038f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f2:	f107 031c 	add.w	r3, r7, #28
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	605a      	str	r2, [r3, #4]
 80038fc:	609a      	str	r2, [r3, #8]
 80038fe:	60da      	str	r2, [r3, #12]
 8003900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	61bb      	str	r3, [r7, #24]
 8003906:	4b91      	ldr	r3, [pc, #580]	; (8003b4c <MX_GPIO_Init+0x260>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	4a90      	ldr	r2, [pc, #576]	; (8003b4c <MX_GPIO_Init+0x260>)
 800390c:	f043 0310 	orr.w	r3, r3, #16
 8003910:	6313      	str	r3, [r2, #48]	; 0x30
 8003912:	4b8e      	ldr	r3, [pc, #568]	; (8003b4c <MX_GPIO_Init+0x260>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	f003 0310 	and.w	r3, r3, #16
 800391a:	61bb      	str	r3, [r7, #24]
 800391c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
 8003922:	4b8a      	ldr	r3, [pc, #552]	; (8003b4c <MX_GPIO_Init+0x260>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	4a89      	ldr	r2, [pc, #548]	; (8003b4c <MX_GPIO_Init+0x260>)
 8003928:	f043 0304 	orr.w	r3, r3, #4
 800392c:	6313      	str	r3, [r2, #48]	; 0x30
 800392e:	4b87      	ldr	r3, [pc, #540]	; (8003b4c <MX_GPIO_Init+0x260>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	f003 0304 	and.w	r3, r3, #4
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	4b83      	ldr	r3, [pc, #524]	; (8003b4c <MX_GPIO_Init+0x260>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	4a82      	ldr	r2, [pc, #520]	; (8003b4c <MX_GPIO_Init+0x260>)
 8003944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003948:	6313      	str	r3, [r2, #48]	; 0x30
 800394a:	4b80      	ldr	r3, [pc, #512]	; (8003b4c <MX_GPIO_Init+0x260>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	4b7c      	ldr	r3, [pc, #496]	; (8003b4c <MX_GPIO_Init+0x260>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	4a7b      	ldr	r2, [pc, #492]	; (8003b4c <MX_GPIO_Init+0x260>)
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	6313      	str	r3, [r2, #48]	; 0x30
 8003966:	4b79      	ldr	r3, [pc, #484]	; (8003b4c <MX_GPIO_Init+0x260>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	4b75      	ldr	r3, [pc, #468]	; (8003b4c <MX_GPIO_Init+0x260>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	4a74      	ldr	r2, [pc, #464]	; (8003b4c <MX_GPIO_Init+0x260>)
 800397c:	f043 0302 	orr.w	r3, r3, #2
 8003980:	6313      	str	r3, [r2, #48]	; 0x30
 8003982:	4b72      	ldr	r3, [pc, #456]	; (8003b4c <MX_GPIO_Init+0x260>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	607b      	str	r3, [r7, #4]
 8003992:	4b6e      	ldr	r3, [pc, #440]	; (8003b4c <MX_GPIO_Init+0x260>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	4a6d      	ldr	r2, [pc, #436]	; (8003b4c <MX_GPIO_Init+0x260>)
 8003998:	f043 0308 	orr.w	r3, r3, #8
 800399c:	6313      	str	r3, [r2, #48]	; 0x30
 800399e:	4b6b      	ldr	r3, [pc, #428]	; (8003b4c <MX_GPIO_Init+0x260>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	607b      	str	r3, [r7, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WiFi_OK_Pin|Living_Fan_1_Pin|Livin_Fan_2_Pin|L_Kitchen_Pin
 80039aa:	2200      	movs	r2, #0
 80039ac:	f641 4131 	movw	r1, #7217	; 0x1c31
 80039b0:	4867      	ldr	r0, [pc, #412]	; (8003b50 <MX_GPIO_Init+0x264>)
 80039b2:	f001 fd4b 	bl	800544c <HAL_GPIO_WritePin>
                          |L_Garage_Pin|L_ClothesLine_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DHT22_In_Pin|DHT22_Out_Pin, GPIO_PIN_RESET);
 80039b6:	2200      	movs	r2, #0
 80039b8:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80039bc:	4865      	ldr	r0, [pc, #404]	; (8003b54 <MX_GPIO_Init+0x268>)
 80039be:	f001 fd45 	bl	800544c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Water_Pin|Heat_Pin|L_Mirror_Pin|L_Left_Pin
 80039c2:	2200      	movs	r2, #0
 80039c4:	f24a 01f8 	movw	r1, #41208	; 0xa0f8
 80039c8:	4863      	ldr	r0, [pc, #396]	; (8003b58 <MX_GPIO_Init+0x26c>)
 80039ca:	f001 fd3f 	bl	800544c <HAL_GPIO_WritePin>
                          |L_Office_Pin|L_Right_Pin|L_TV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L_Sink_GPIO_Port, L_Sink_Pin, GPIO_PIN_RESET);
 80039ce:	2200      	movs	r2, #0
 80039d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039d4:	4861      	ldr	r0, [pc, #388]	; (8003b5c <MX_GPIO_Init+0x270>)
 80039d6:	f001 fd39 	bl	800544c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, L_Hall_Pin|L_Dining_Pin|L_Garden_Pin|L_Living_Pin
 80039da:	2200      	movs	r2, #0
 80039dc:	21ff      	movs	r1, #255	; 0xff
 80039de:	4860      	ldr	r0, [pc, #384]	; (8003b60 <MX_GPIO_Init+0x274>)
 80039e0:	f001 fd34 	bl	800544c <HAL_GPIO_WritePin>
                          |L_Porch_Pin|L_Relax_Pin|L_Bathroom_Pin|L_Bedroom_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : S_In_Pin Parcel_Limit_Pin S_Out_Pin */
  GPIO_InitStruct.Pin = S_In_Pin|Parcel_Limit_Pin|S_Out_Pin;
 80039e4:	231a      	movs	r3, #26
 80039e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039e8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80039ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039ee:	2301      	movs	r3, #1
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039f2:	f107 031c 	add.w	r3, r7, #28
 80039f6:	4619      	mov	r1, r3
 80039f8:	4856      	ldr	r0, [pc, #344]	; (8003b54 <MX_GPIO_Init+0x268>)
 80039fa:	f001 fb73 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Parcel_Garage_Pin */
  GPIO_InitStruct.Pin = Parcel_Garage_Pin;
 80039fe:	2340      	movs	r3, #64	; 0x40
 8003a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Parcel_Garage_GPIO_Port, &GPIO_InitStruct);
 8003a0c:	f107 031c 	add.w	r3, r7, #28
 8003a10:	4619      	mov	r1, r3
 8003a12:	4850      	ldr	r0, [pc, #320]	; (8003b54 <MX_GPIO_Init+0x268>)
 8003a14:	f001 fb66 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_People_Bell_Pin B_Stop_Pin */
  GPIO_InitStruct.Pin = B_People_Bell_Pin|B_Stop_Pin;
 8003a18:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a28:	f107 031c 	add.w	r3, r7, #28
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4848      	ldr	r0, [pc, #288]	; (8003b50 <MX_GPIO_Init+0x264>)
 8003a30:	f001 fb58 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : WiFi_OK_Pin Living_Fan_1_Pin Livin_Fan_2_Pin L_Kitchen_Pin
                           L_Garage_Pin L_ClothesLine_Pin */
  GPIO_InitStruct.Pin = WiFi_OK_Pin|Living_Fan_1_Pin|Livin_Fan_2_Pin|L_Kitchen_Pin
 8003a34:	f641 4331 	movw	r3, #7217	; 0x1c31
 8003a38:	61fb      	str	r3, [r7, #28]
                          |L_Garage_Pin|L_ClothesLine_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a42:	2300      	movs	r3, #0
 8003a44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a46:	f107 031c 	add.w	r3, r7, #28
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4840      	ldr	r0, [pc, #256]	; (8003b50 <MX_GPIO_Init+0x264>)
 8003a4e:	f001 fb49 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT22_In_Pin DHT22_Out_Pin */
  GPIO_InitStruct.Pin = DHT22_In_Pin|DHT22_Out_Pin;
 8003a52:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a60:	2300      	movs	r3, #0
 8003a62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a64:	f107 031c 	add.w	r3, r7, #28
 8003a68:	4619      	mov	r1, r3
 8003a6a:	483a      	ldr	r0, [pc, #232]	; (8003b54 <MX_GPIO_Init+0x268>)
 8003a6c:	f001 fb3a 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Water_Pin Heat_Pin L_Mirror_Pin L_Left_Pin
                           L_Office_Pin L_Right_Pin L_TV_Pin */
  GPIO_InitStruct.Pin = Water_Pin|Heat_Pin|L_Mirror_Pin|L_Left_Pin
 8003a70:	f24a 03f8 	movw	r3, #41208	; 0xa0f8
 8003a74:	61fb      	str	r3, [r7, #28]
                          |L_Office_Pin|L_Right_Pin|L_TV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a76:	2301      	movs	r3, #1
 8003a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a82:	f107 031c 	add.w	r3, r7, #28
 8003a86:	4619      	mov	r1, r3
 8003a88:	4833      	ldr	r0, [pc, #204]	; (8003b58 <MX_GPIO_Init+0x26c>)
 8003a8a:	f001 fb2b 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_Sink_Pin */
  GPIO_InitStruct.Pin = L_Sink_Pin;
 8003a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a94:	2301      	movs	r3, #1
 8003a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(L_Sink_GPIO_Port, &GPIO_InitStruct);
 8003aa0:	f107 031c 	add.w	r3, r7, #28
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	482d      	ldr	r0, [pc, #180]	; (8003b5c <MX_GPIO_Init+0x270>)
 8003aa8:	f001 fb1c 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_Hall_Pin L_Dining_Pin L_Garden_Pin L_Living_Pin
                           L_Porch_Pin L_Relax_Pin L_Bathroom_Pin L_Bedroom_Pin */
  GPIO_InitStruct.Pin = L_Hall_Pin|L_Dining_Pin|L_Garden_Pin|L_Living_Pin
 8003aac:	23ff      	movs	r3, #255	; 0xff
 8003aae:	61fb      	str	r3, [r7, #28]
                          |L_Porch_Pin|L_Relax_Pin|L_Bathroom_Pin|L_Bedroom_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003abc:	f107 031c 	add.w	r3, r7, #28
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4827      	ldr	r0, [pc, #156]	; (8003b60 <MX_GPIO_Init+0x274>)
 8003ac4:	f001 fb0e 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_Vehicle_Bell_Pin */
  GPIO_InitStruct.Pin = B_Vehicle_Bell_Pin;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003acc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B_Vehicle_Bell_GPIO_Port, &GPIO_InitStruct);
 8003ad6:	f107 031c 	add.w	r3, r7, #28
 8003ada:	4619      	mov	r1, r3
 8003adc:	481d      	ldr	r0, [pc, #116]	; (8003b54 <MX_GPIO_Init+0x268>)
 8003ade:	f001 fb01 	bl	80050e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	2006      	movs	r0, #6
 8003ae8:	f001 fa33 	bl	8004f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003aec:	2006      	movs	r0, #6
 8003aee:	f001 fa4c 	bl	8004f8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003af2:	2200      	movs	r2, #0
 8003af4:	2100      	movs	r1, #0
 8003af6:	2007      	movs	r0, #7
 8003af8:	f001 fa2b 	bl	8004f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003afc:	2007      	movs	r0, #7
 8003afe:	f001 fa44 	bl	8004f8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003b02:	2200      	movs	r2, #0
 8003b04:	2100      	movs	r1, #0
 8003b06:	2009      	movs	r0, #9
 8003b08:	f001 fa23 	bl	8004f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003b0c:	2009      	movs	r0, #9
 8003b0e:	f001 fa3c 	bl	8004f8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003b12:	2200      	movs	r2, #0
 8003b14:	2100      	movs	r1, #0
 8003b16:	200a      	movs	r0, #10
 8003b18:	f001 fa1b 	bl	8004f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003b1c:	200a      	movs	r0, #10
 8003b1e:	f001 fa34 	bl	8004f8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003b22:	2200      	movs	r2, #0
 8003b24:	2100      	movs	r1, #0
 8003b26:	2017      	movs	r0, #23
 8003b28:	f001 fa13 	bl	8004f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003b2c:	2017      	movs	r0, #23
 8003b2e:	f001 fa2c 	bl	8004f8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003b32:	2200      	movs	r2, #0
 8003b34:	2100      	movs	r1, #0
 8003b36:	2028      	movs	r0, #40	; 0x28
 8003b38:	f001 fa0b 	bl	8004f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003b3c:	2028      	movs	r0, #40	; 0x28
 8003b3e:	f001 fa24 	bl	8004f8a <HAL_NVIC_EnableIRQ>

}
 8003b42:	bf00      	nop
 8003b44:	3730      	adds	r7, #48	; 0x30
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40020800 	.word	0x40020800
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40020400 	.word	0x40020400
 8003b5c:	40020000 	.word	0x40020000
 8003b60:	40020c00 	.word	0x40020c00

08003b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b68:	b672      	cpsid	i
}
 8003b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b6c:	e7fe      	b.n	8003b6c <Error_Handler+0x8>
	...

08003b70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	607b      	str	r3, [r7, #4]
 8003b7a:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <HAL_MspInit+0x4c>)
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	4a0f      	ldr	r2, [pc, #60]	; (8003bbc <HAL_MspInit+0x4c>)
 8003b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b84:	6453      	str	r3, [r2, #68]	; 0x44
 8003b86:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <HAL_MspInit+0x4c>)
 8003b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b8e:	607b      	str	r3, [r7, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b92:	2300      	movs	r3, #0
 8003b94:	603b      	str	r3, [r7, #0]
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <HAL_MspInit+0x4c>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	4a08      	ldr	r2, [pc, #32]	; (8003bbc <HAL_MspInit+0x4c>)
 8003b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba2:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <HAL_MspInit+0x4c>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003bae:	2007      	movs	r0, #7
 8003bb0:	f001 f9c4 	bl	8004f3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bb4:	bf00      	nop
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40023800 	.word	0x40023800

08003bc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08e      	sub	sp, #56	; 0x38
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	60da      	str	r2, [r3, #12]
 8003bd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a45      	ldr	r2, [pc, #276]	; (8003cf4 <HAL_ADC_MspInit+0x134>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d128      	bne.n	8003c34 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	623b      	str	r3, [r7, #32]
 8003be6:	4b44      	ldr	r3, [pc, #272]	; (8003cf8 <HAL_ADC_MspInit+0x138>)
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	4a43      	ldr	r2, [pc, #268]	; (8003cf8 <HAL_ADC_MspInit+0x138>)
 8003bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bf2:	4b41      	ldr	r3, [pc, #260]	; (8003cf8 <HAL_ADC_MspInit+0x138>)
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfa:	623b      	str	r3, [r7, #32]
 8003bfc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
 8003c02:	4b3d      	ldr	r3, [pc, #244]	; (8003cf8 <HAL_ADC_MspInit+0x138>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	4a3c      	ldr	r2, [pc, #240]	; (8003cf8 <HAL_ADC_MspInit+0x138>)
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c0e:	4b3a      	ldr	r3, [pc, #232]	; (8003cf8 <HAL_ADC_MspInit+0x138>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	61fb      	str	r3, [r7, #28]
 8003c18:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = LDR_Pin;
 8003c1a:	2310      	movs	r3, #16
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 8003c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4833      	ldr	r0, [pc, #204]	; (8003cfc <HAL_ADC_MspInit+0x13c>)
 8003c2e:	f001 fa59 	bl	80050e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003c32:	e05a      	b.n	8003cea <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a31      	ldr	r2, [pc, #196]	; (8003d00 <HAL_ADC_MspInit+0x140>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d128      	bne.n	8003c90 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61bb      	str	r3, [r7, #24]
 8003c42:	4b2d      	ldr	r3, [pc, #180]	; (8003cf8 <HAL_ADC_MspInit+0x138>)
 8003c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c46:	4a2c      	ldr	r2, [pc, #176]	; (8003cf8 <HAL_ADC_MspInit+0x138>)
 8003c48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c4e:	4b2a      	ldr	r3, [pc, #168]	; (8003cf8 <HAL_ADC_MspInit+0x138>)
 8003c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	4b26      	ldr	r3, [pc, #152]	; (8003cf8 <HAL_ADC_MspInit+0x138>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	4a25      	ldr	r2, [pc, #148]	; (8003cf8 <HAL_ADC_MspInit+0x138>)
 8003c64:	f043 0302 	orr.w	r3, r3, #2
 8003c68:	6313      	str	r3, [r2, #48]	; 0x30
 8003c6a:	4b23      	ldr	r3, [pc, #140]	; (8003cf8 <HAL_ADC_MspInit+0x138>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = HW_390_Pin;
 8003c76:	2301      	movs	r3, #1
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HW_390_GPIO_Port, &GPIO_InitStruct);
 8003c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c86:	4619      	mov	r1, r3
 8003c88:	481e      	ldr	r0, [pc, #120]	; (8003d04 <HAL_ADC_MspInit+0x144>)
 8003c8a:	f001 fa2b 	bl	80050e4 <HAL_GPIO_Init>
}
 8003c8e:	e02c      	b.n	8003cea <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a1c      	ldr	r2, [pc, #112]	; (8003d08 <HAL_ADC_MspInit+0x148>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d127      	bne.n	8003cea <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	4b16      	ldr	r3, [pc, #88]	; (8003cf8 <HAL_ADC_MspInit+0x138>)
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca2:	4a15      	ldr	r2, [pc, #84]	; (8003cf8 <HAL_ADC_MspInit+0x138>)
 8003ca4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8003caa:	4b13      	ldr	r3, [pc, #76]	; (8003cf8 <HAL_ADC_MspInit+0x138>)
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	4b0f      	ldr	r3, [pc, #60]	; (8003cf8 <HAL_ADC_MspInit+0x138>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	4a0e      	ldr	r2, [pc, #56]	; (8003cf8 <HAL_ADC_MspInit+0x138>)
 8003cc0:	f043 0304 	orr.w	r3, r3, #4
 8003cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc6:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <HAL_ADC_MspInit+0x138>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Rain_Pin;
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Rain_GPIO_Port, &GPIO_InitStruct);
 8003cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4809      	ldr	r0, [pc, #36]	; (8003d0c <HAL_ADC_MspInit+0x14c>)
 8003ce6:	f001 f9fd 	bl	80050e4 <HAL_GPIO_Init>
}
 8003cea:	bf00      	nop
 8003cec:	3738      	adds	r7, #56	; 0x38
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40012000 	.word	0x40012000
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	40020000 	.word	0x40020000
 8003d00:	40012100 	.word	0x40012100
 8003d04:	40020400 	.word	0x40020400
 8003d08:	40012200 	.word	0x40012200
 8003d0c:	40020800 	.word	0x40020800

08003d10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08a      	sub	sp, #40	; 0x28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d18:	f107 0314 	add.w	r3, r7, #20
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	605a      	str	r2, [r3, #4]
 8003d22:	609a      	str	r2, [r3, #8]
 8003d24:	60da      	str	r2, [r3, #12]
 8003d26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a19      	ldr	r2, [pc, #100]	; (8003d94 <HAL_I2C_MspInit+0x84>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d12c      	bne.n	8003d8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	613b      	str	r3, [r7, #16]
 8003d36:	4b18      	ldr	r3, [pc, #96]	; (8003d98 <HAL_I2C_MspInit+0x88>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	4a17      	ldr	r2, [pc, #92]	; (8003d98 <HAL_I2C_MspInit+0x88>)
 8003d3c:	f043 0302 	orr.w	r3, r3, #2
 8003d40:	6313      	str	r3, [r2, #48]	; 0x30
 8003d42:	4b15      	ldr	r3, [pc, #84]	; (8003d98 <HAL_I2C_MspInit+0x88>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8003d4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d54:	2312      	movs	r3, #18
 8003d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d60:	2304      	movs	r3, #4
 8003d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d64:	f107 0314 	add.w	r3, r7, #20
 8003d68:	4619      	mov	r1, r3
 8003d6a:	480c      	ldr	r0, [pc, #48]	; (8003d9c <HAL_I2C_MspInit+0x8c>)
 8003d6c:	f001 f9ba 	bl	80050e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	4b08      	ldr	r3, [pc, #32]	; (8003d98 <HAL_I2C_MspInit+0x88>)
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	4a07      	ldr	r2, [pc, #28]	; (8003d98 <HAL_I2C_MspInit+0x88>)
 8003d7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8003d80:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <HAL_I2C_MspInit+0x88>)
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003d8c:	bf00      	nop
 8003d8e:	3728      	adds	r7, #40	; 0x28
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40005400 	.word	0x40005400
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	40020400 	.word	0x40020400

08003da0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b08b      	sub	sp, #44	; 0x2c
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a51      	ldr	r2, [pc, #324]	; (8003ef4 <HAL_TIM_Base_MspInit+0x154>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d10e      	bne.n	8003dd0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
 8003db6:	4b50      	ldr	r3, [pc, #320]	; (8003ef8 <HAL_TIM_Base_MspInit+0x158>)
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	4a4f      	ldr	r2, [pc, #316]	; (8003ef8 <HAL_TIM_Base_MspInit+0x158>)
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003dc2:	4b4d      	ldr	r3, [pc, #308]	; (8003ef8 <HAL_TIM_Base_MspInit+0x158>)
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	627b      	str	r3, [r7, #36]	; 0x24
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003dce:	e08a      	b.n	8003ee6 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM2)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd8:	d10e      	bne.n	8003df8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003dda:	2300      	movs	r3, #0
 8003ddc:	623b      	str	r3, [r7, #32]
 8003dde:	4b46      	ldr	r3, [pc, #280]	; (8003ef8 <HAL_TIM_Base_MspInit+0x158>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	4a45      	ldr	r2, [pc, #276]	; (8003ef8 <HAL_TIM_Base_MspInit+0x158>)
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dea:	4b43      	ldr	r3, [pc, #268]	; (8003ef8 <HAL_TIM_Base_MspInit+0x158>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	623b      	str	r3, [r7, #32]
 8003df4:	6a3b      	ldr	r3, [r7, #32]
}
 8003df6:	e076      	b.n	8003ee6 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM3)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a3f      	ldr	r2, [pc, #252]	; (8003efc <HAL_TIM_Base_MspInit+0x15c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d10e      	bne.n	8003e20 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	4b3c      	ldr	r3, [pc, #240]	; (8003ef8 <HAL_TIM_Base_MspInit+0x158>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	4a3b      	ldr	r2, [pc, #236]	; (8003ef8 <HAL_TIM_Base_MspInit+0x158>)
 8003e0c:	f043 0302 	orr.w	r3, r3, #2
 8003e10:	6413      	str	r3, [r2, #64]	; 0x40
 8003e12:	4b39      	ldr	r3, [pc, #228]	; (8003ef8 <HAL_TIM_Base_MspInit+0x158>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	61fb      	str	r3, [r7, #28]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
}
 8003e1e:	e062      	b.n	8003ee6 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM4)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a36      	ldr	r2, [pc, #216]	; (8003f00 <HAL_TIM_Base_MspInit+0x160>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d10e      	bne.n	8003e48 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61bb      	str	r3, [r7, #24]
 8003e2e:	4b32      	ldr	r3, [pc, #200]	; (8003ef8 <HAL_TIM_Base_MspInit+0x158>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	4a31      	ldr	r2, [pc, #196]	; (8003ef8 <HAL_TIM_Base_MspInit+0x158>)
 8003e34:	f043 0304 	orr.w	r3, r3, #4
 8003e38:	6413      	str	r3, [r2, #64]	; 0x40
 8003e3a:	4b2f      	ldr	r3, [pc, #188]	; (8003ef8 <HAL_TIM_Base_MspInit+0x158>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	61bb      	str	r3, [r7, #24]
 8003e44:	69bb      	ldr	r3, [r7, #24]
}
 8003e46:	e04e      	b.n	8003ee6 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM5)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a2d      	ldr	r2, [pc, #180]	; (8003f04 <HAL_TIM_Base_MspInit+0x164>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d10e      	bne.n	8003e70 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003e52:	2300      	movs	r3, #0
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	4b28      	ldr	r3, [pc, #160]	; (8003ef8 <HAL_TIM_Base_MspInit+0x158>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	4a27      	ldr	r2, [pc, #156]	; (8003ef8 <HAL_TIM_Base_MspInit+0x158>)
 8003e5c:	f043 0308 	orr.w	r3, r3, #8
 8003e60:	6413      	str	r3, [r2, #64]	; 0x40
 8003e62:	4b25      	ldr	r3, [pc, #148]	; (8003ef8 <HAL_TIM_Base_MspInit+0x158>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	697b      	ldr	r3, [r7, #20]
}
 8003e6e:	e03a      	b.n	8003ee6 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM6)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a24      	ldr	r2, [pc, #144]	; (8003f08 <HAL_TIM_Base_MspInit+0x168>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d10e      	bne.n	8003e98 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	613b      	str	r3, [r7, #16]
 8003e7e:	4b1e      	ldr	r3, [pc, #120]	; (8003ef8 <HAL_TIM_Base_MspInit+0x158>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	4a1d      	ldr	r2, [pc, #116]	; (8003ef8 <HAL_TIM_Base_MspInit+0x158>)
 8003e84:	f043 0310 	orr.w	r3, r3, #16
 8003e88:	6413      	str	r3, [r2, #64]	; 0x40
 8003e8a:	4b1b      	ldr	r3, [pc, #108]	; (8003ef8 <HAL_TIM_Base_MspInit+0x158>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f003 0310 	and.w	r3, r3, #16
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	693b      	ldr	r3, [r7, #16]
}
 8003e96:	e026      	b.n	8003ee6 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM8)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1b      	ldr	r2, [pc, #108]	; (8003f0c <HAL_TIM_Base_MspInit+0x16c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d10e      	bne.n	8003ec0 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <HAL_TIM_Base_MspInit+0x158>)
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	4a13      	ldr	r2, [pc, #76]	; (8003ef8 <HAL_TIM_Base_MspInit+0x158>)
 8003eac:	f043 0302 	orr.w	r3, r3, #2
 8003eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8003eb2:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <HAL_TIM_Base_MspInit+0x158>)
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
}
 8003ebe:	e012      	b.n	8003ee6 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM9)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a12      	ldr	r2, [pc, #72]	; (8003f10 <HAL_TIM_Base_MspInit+0x170>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d10d      	bne.n	8003ee6 <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <HAL_TIM_Base_MspInit+0x158>)
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed2:	4a09      	ldr	r2, [pc, #36]	; (8003ef8 <HAL_TIM_Base_MspInit+0x158>)
 8003ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8003eda:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <HAL_TIM_Base_MspInit+0x158>)
 8003edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee2:	60bb      	str	r3, [r7, #8]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
}
 8003ee6:	bf00      	nop
 8003ee8:	372c      	adds	r7, #44	; 0x2c
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40010000 	.word	0x40010000
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	40000400 	.word	0x40000400
 8003f00:	40000800 	.word	0x40000800
 8003f04:	40000c00 	.word	0x40000c00
 8003f08:	40001000 	.word	0x40001000
 8003f0c:	40010400 	.word	0x40010400
 8003f10:	40014000 	.word	0x40014000

08003f14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08e      	sub	sp, #56	; 0x38
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	605a      	str	r2, [r3, #4]
 8003f26:	609a      	str	r2, [r3, #8]
 8003f28:	60da      	str	r2, [r3, #12]
 8003f2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a7a      	ldr	r2, [pc, #488]	; (800411c <HAL_TIM_MspPostInit+0x208>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d11f      	bne.n	8003f76 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f36:	2300      	movs	r3, #0
 8003f38:	623b      	str	r3, [r7, #32]
 8003f3a:	4b79      	ldr	r3, [pc, #484]	; (8004120 <HAL_TIM_MspPostInit+0x20c>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	4a78      	ldr	r2, [pc, #480]	; (8004120 <HAL_TIM_MspPostInit+0x20c>)
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	6313      	str	r3, [r2, #48]	; 0x30
 8003f46:	4b76      	ldr	r3, [pc, #472]	; (8004120 <HAL_TIM_MspPostInit+0x20c>)
 8003f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	623b      	str	r3, [r7, #32]
 8003f50:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = L_GamingG_Pin|L_GamingR_Pin|L_GamingB_Pin;
 8003f52:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f58:	2302      	movs	r3, #2
 8003f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f60:	2300      	movs	r3, #0
 8003f62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003f64:	2301      	movs	r3, #1
 8003f66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	486d      	ldr	r0, [pc, #436]	; (8004124 <HAL_TIM_MspPostInit+0x210>)
 8003f70:	f001 f8b8 	bl	80050e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8003f74:	e0cd      	b.n	8004112 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM2)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7e:	d13d      	bne.n	8003ffc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f80:	2300      	movs	r3, #0
 8003f82:	61fb      	str	r3, [r7, #28]
 8003f84:	4b66      	ldr	r3, [pc, #408]	; (8004120 <HAL_TIM_MspPostInit+0x20c>)
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	4a65      	ldr	r2, [pc, #404]	; (8004120 <HAL_TIM_MspPostInit+0x20c>)
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8003f90:	4b63      	ldr	r3, [pc, #396]	; (8004120 <HAL_TIM_MspPostInit+0x20c>)
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	61fb      	str	r3, [r7, #28]
 8003f9a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61bb      	str	r3, [r7, #24]
 8003fa0:	4b5f      	ldr	r3, [pc, #380]	; (8004120 <HAL_TIM_MspPostInit+0x20c>)
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	4a5e      	ldr	r2, [pc, #376]	; (8004120 <HAL_TIM_MspPostInit+0x20c>)
 8003fa6:	f043 0302 	orr.w	r3, r3, #2
 8003faa:	6313      	str	r3, [r2, #48]	; 0x30
 8003fac:	4b5c      	ldr	r3, [pc, #368]	; (8004120 <HAL_TIM_MspPostInit+0x20c>)
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	61bb      	str	r3, [r7, #24]
 8003fb6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = Parcel_Servo_Pin|Garaje_Servo_Pin;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4854      	ldr	r0, [pc, #336]	; (8004124 <HAL_TIM_MspPostInit+0x210>)
 8003fd4:	f001 f886 	bl	80050e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Awning_Servo_Pin;
 8003fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fde:	2302      	movs	r3, #2
 8003fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fea:	2301      	movs	r3, #1
 8003fec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Awning_Servo_GPIO_Port, &GPIO_InitStruct);
 8003fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	484c      	ldr	r0, [pc, #304]	; (8004128 <HAL_TIM_MspPostInit+0x214>)
 8003ff6:	f001 f875 	bl	80050e4 <HAL_GPIO_Init>
}
 8003ffa:	e08a      	b.n	8004112 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM3)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a4a      	ldr	r2, [pc, #296]	; (800412c <HAL_TIM_MspPostInit+0x218>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d13d      	bne.n	8004082 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	4b45      	ldr	r3, [pc, #276]	; (8004120 <HAL_TIM_MspPostInit+0x20c>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	4a44      	ldr	r2, [pc, #272]	; (8004120 <HAL_TIM_MspPostInit+0x20c>)
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	6313      	str	r3, [r2, #48]	; 0x30
 8004016:	4b42      	ldr	r3, [pc, #264]	; (8004120 <HAL_TIM_MspPostInit+0x20c>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	613b      	str	r3, [r7, #16]
 8004026:	4b3e      	ldr	r3, [pc, #248]	; (8004120 <HAL_TIM_MspPostInit+0x20c>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	4a3d      	ldr	r2, [pc, #244]	; (8004120 <HAL_TIM_MspPostInit+0x20c>)
 800402c:	f043 0304 	orr.w	r3, r3, #4
 8004030:	6313      	str	r3, [r2, #48]	; 0x30
 8004032:	4b3b      	ldr	r3, [pc, #236]	; (8004120 <HAL_TIM_MspPostInit+0x20c>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	613b      	str	r3, [r7, #16]
 800403c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Bedroom_Servo_Pin;
 800403e:	2380      	movs	r3, #128	; 0x80
 8004040:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004042:	2302      	movs	r3, #2
 8004044:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004046:	2300      	movs	r3, #0
 8004048:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800404a:	2300      	movs	r3, #0
 800404c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800404e:	2302      	movs	r3, #2
 8004050:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Bedroom_Servo_GPIO_Port, &GPIO_InitStruct);
 8004052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004056:	4619      	mov	r1, r3
 8004058:	4832      	ldr	r0, [pc, #200]	; (8004124 <HAL_TIM_MspPostInit+0x210>)
 800405a:	f001 f843 	bl	80050e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Office_Servo_Pin|Living_Servo_Pin;
 800405e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004062:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004064:	2302      	movs	r3, #2
 8004066:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004068:	2300      	movs	r3, #0
 800406a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800406c:	2300      	movs	r3, #0
 800406e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004070:	2302      	movs	r3, #2
 8004072:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004078:	4619      	mov	r1, r3
 800407a:	482d      	ldr	r0, [pc, #180]	; (8004130 <HAL_TIM_MspPostInit+0x21c>)
 800407c:	f001 f832 	bl	80050e4 <HAL_GPIO_Init>
}
 8004080:	e047      	b.n	8004112 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM4)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a2b      	ldr	r2, [pc, #172]	; (8004134 <HAL_TIM_MspPostInit+0x220>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d11f      	bne.n	80040cc <HAL_TIM_MspPostInit+0x1b8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	4b23      	ldr	r3, [pc, #140]	; (8004120 <HAL_TIM_MspPostInit+0x20c>)
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	4a22      	ldr	r2, [pc, #136]	; (8004120 <HAL_TIM_MspPostInit+0x20c>)
 8004096:	f043 0308 	orr.w	r3, r3, #8
 800409a:	6313      	str	r3, [r2, #48]	; 0x30
 800409c:	4b20      	ldr	r3, [pc, #128]	; (8004120 <HAL_TIM_MspPostInit+0x20c>)
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	f003 0308 	and.w	r3, r3, #8
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80040a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ae:	2302      	movs	r3, #2
 80040b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b6:	2300      	movs	r3, #0
 80040b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80040ba:	2302      	movs	r3, #2
 80040bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040c2:	4619      	mov	r1, r3
 80040c4:	481c      	ldr	r0, [pc, #112]	; (8004138 <HAL_TIM_MspPostInit+0x224>)
 80040c6:	f001 f80d 	bl	80050e4 <HAL_GPIO_Init>
}
 80040ca:	e022      	b.n	8004112 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM9)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a1a      	ldr	r2, [pc, #104]	; (800413c <HAL_TIM_MspPostInit+0x228>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d11d      	bne.n	8004112 <HAL_TIM_MspPostInit+0x1fe>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80040d6:	2300      	movs	r3, #0
 80040d8:	60bb      	str	r3, [r7, #8]
 80040da:	4b11      	ldr	r3, [pc, #68]	; (8004120 <HAL_TIM_MspPostInit+0x20c>)
 80040dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040de:	4a10      	ldr	r2, [pc, #64]	; (8004120 <HAL_TIM_MspPostInit+0x20c>)
 80040e0:	f043 0310 	orr.w	r3, r3, #16
 80040e4:	6313      	str	r3, [r2, #48]	; 0x30
 80040e6:	4b0e      	ldr	r3, [pc, #56]	; (8004120 <HAL_TIM_MspPostInit+0x20c>)
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	60bb      	str	r3, [r7, #8]
 80040f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80040f2:	2320      	movs	r3, #32
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f6:	2302      	movs	r3, #2
 80040f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040fe:	2300      	movs	r3, #0
 8004100:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8004102:	2303      	movs	r3, #3
 8004104:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800410a:	4619      	mov	r1, r3
 800410c:	480c      	ldr	r0, [pc, #48]	; (8004140 <HAL_TIM_MspPostInit+0x22c>)
 800410e:	f000 ffe9 	bl	80050e4 <HAL_GPIO_Init>
}
 8004112:	bf00      	nop
 8004114:	3738      	adds	r7, #56	; 0x38
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40010000 	.word	0x40010000
 8004120:	40023800 	.word	0x40023800
 8004124:	40020000 	.word	0x40020000
 8004128:	40020400 	.word	0x40020400
 800412c:	40000400 	.word	0x40000400
 8004130:	40020800 	.word	0x40020800
 8004134:	40000800 	.word	0x40000800
 8004138:	40020c00 	.word	0x40020c00
 800413c:	40014000 	.word	0x40014000
 8004140:	40021000 	.word	0x40021000

08004144 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08e      	sub	sp, #56	; 0x38
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800414c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	605a      	str	r2, [r3, #4]
 8004156:	609a      	str	r2, [r3, #8]
 8004158:	60da      	str	r2, [r3, #12]
 800415a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a63      	ldr	r2, [pc, #396]	; (80042f0 <HAL_UART_MspInit+0x1ac>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d134      	bne.n	80041d0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004166:	2300      	movs	r3, #0
 8004168:	623b      	str	r3, [r7, #32]
 800416a:	4b62      	ldr	r3, [pc, #392]	; (80042f4 <HAL_UART_MspInit+0x1b0>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	4a61      	ldr	r2, [pc, #388]	; (80042f4 <HAL_UART_MspInit+0x1b0>)
 8004170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004174:	6413      	str	r3, [r2, #64]	; 0x40
 8004176:	4b5f      	ldr	r3, [pc, #380]	; (80042f4 <HAL_UART_MspInit+0x1b0>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	623b      	str	r3, [r7, #32]
 8004180:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004182:	2300      	movs	r3, #0
 8004184:	61fb      	str	r3, [r7, #28]
 8004186:	4b5b      	ldr	r3, [pc, #364]	; (80042f4 <HAL_UART_MspInit+0x1b0>)
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418a:	4a5a      	ldr	r2, [pc, #360]	; (80042f4 <HAL_UART_MspInit+0x1b0>)
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	6313      	str	r3, [r2, #48]	; 0x30
 8004192:	4b58      	ldr	r3, [pc, #352]	; (80042f4 <HAL_UART_MspInit+0x1b0>)
 8004194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	61fb      	str	r3, [r7, #28]
 800419c:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800419e:	230c      	movs	r3, #12
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a2:	2302      	movs	r3, #2
 80041a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041aa:	2303      	movs	r3, #3
 80041ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80041ae:	2307      	movs	r3, #7
 80041b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041b6:	4619      	mov	r1, r3
 80041b8:	484f      	ldr	r0, [pc, #316]	; (80042f8 <HAL_UART_MspInit+0x1b4>)
 80041ba:	f000 ff93 	bl	80050e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80041be:	2200      	movs	r2, #0
 80041c0:	2100      	movs	r1, #0
 80041c2:	2026      	movs	r0, #38	; 0x26
 80041c4:	f000 fec5 	bl	8004f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80041c8:	2026      	movs	r0, #38	; 0x26
 80041ca:	f000 fede 	bl	8004f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80041ce:	e08a      	b.n	80042e6 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART3)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a49      	ldr	r2, [pc, #292]	; (80042fc <HAL_UART_MspInit+0x1b8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d14c      	bne.n	8004274 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART3_CLK_ENABLE();
 80041da:	2300      	movs	r3, #0
 80041dc:	61bb      	str	r3, [r7, #24]
 80041de:	4b45      	ldr	r3, [pc, #276]	; (80042f4 <HAL_UART_MspInit+0x1b0>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	4a44      	ldr	r2, [pc, #272]	; (80042f4 <HAL_UART_MspInit+0x1b0>)
 80041e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041e8:	6413      	str	r3, [r2, #64]	; 0x40
 80041ea:	4b42      	ldr	r3, [pc, #264]	; (80042f4 <HAL_UART_MspInit+0x1b0>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041f2:	61bb      	str	r3, [r7, #24]
 80041f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	4b3e      	ldr	r3, [pc, #248]	; (80042f4 <HAL_UART_MspInit+0x1b0>)
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	4a3d      	ldr	r2, [pc, #244]	; (80042f4 <HAL_UART_MspInit+0x1b0>)
 8004200:	f043 0302 	orr.w	r3, r3, #2
 8004204:	6313      	str	r3, [r2, #48]	; 0x30
 8004206:	4b3b      	ldr	r3, [pc, #236]	; (80042f4 <HAL_UART_MspInit+0x1b0>)
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	4b37      	ldr	r3, [pc, #220]	; (80042f4 <HAL_UART_MspInit+0x1b0>)
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	4a36      	ldr	r2, [pc, #216]	; (80042f4 <HAL_UART_MspInit+0x1b0>)
 800421c:	f043 0308 	orr.w	r3, r3, #8
 8004220:	6313      	str	r3, [r2, #48]	; 0x30
 8004222:	4b34      	ldr	r3, [pc, #208]	; (80042f4 <HAL_UART_MspInit+0x1b0>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800422e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004234:	2302      	movs	r3, #2
 8004236:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004238:	2300      	movs	r3, #0
 800423a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800423c:	2303      	movs	r3, #3
 800423e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004240:	2307      	movs	r3, #7
 8004242:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004248:	4619      	mov	r1, r3
 800424a:	482d      	ldr	r0, [pc, #180]	; (8004300 <HAL_UART_MspInit+0x1bc>)
 800424c:	f000 ff4a 	bl	80050e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004256:	2302      	movs	r3, #2
 8004258:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425a:	2300      	movs	r3, #0
 800425c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800425e:	2303      	movs	r3, #3
 8004260:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004262:	2307      	movs	r3, #7
 8004264:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800426a:	4619      	mov	r1, r3
 800426c:	4825      	ldr	r0, [pc, #148]	; (8004304 <HAL_UART_MspInit+0x1c0>)
 800426e:	f000 ff39 	bl	80050e4 <HAL_GPIO_Init>
}
 8004272:	e038      	b.n	80042e6 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART6)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a23      	ldr	r2, [pc, #140]	; (8004308 <HAL_UART_MspInit+0x1c4>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d133      	bne.n	80042e6 <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	4b1c      	ldr	r3, [pc, #112]	; (80042f4 <HAL_UART_MspInit+0x1b0>)
 8004284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004286:	4a1b      	ldr	r2, [pc, #108]	; (80042f4 <HAL_UART_MspInit+0x1b0>)
 8004288:	f043 0320 	orr.w	r3, r3, #32
 800428c:	6453      	str	r3, [r2, #68]	; 0x44
 800428e:	4b19      	ldr	r3, [pc, #100]	; (80042f4 <HAL_UART_MspInit+0x1b0>)
 8004290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800429a:	2300      	movs	r3, #0
 800429c:	60bb      	str	r3, [r7, #8]
 800429e:	4b15      	ldr	r3, [pc, #84]	; (80042f4 <HAL_UART_MspInit+0x1b0>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	4a14      	ldr	r2, [pc, #80]	; (80042f4 <HAL_UART_MspInit+0x1b0>)
 80042a4:	f043 0304 	orr.w	r3, r3, #4
 80042a8:	6313      	str	r3, [r2, #48]	; 0x30
 80042aa:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <HAL_UART_MspInit+0x1b0>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	60bb      	str	r3, [r7, #8]
 80042b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042b6:	23c0      	movs	r3, #192	; 0xc0
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ba:	2302      	movs	r3, #2
 80042bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042c2:	2303      	movs	r3, #3
 80042c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80042c6:	2308      	movs	r3, #8
 80042c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042ce:	4619      	mov	r1, r3
 80042d0:	480e      	ldr	r0, [pc, #56]	; (800430c <HAL_UART_MspInit+0x1c8>)
 80042d2:	f000 ff07 	bl	80050e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80042d6:	2200      	movs	r2, #0
 80042d8:	2100      	movs	r1, #0
 80042da:	2047      	movs	r0, #71	; 0x47
 80042dc:	f000 fe39 	bl	8004f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80042e0:	2047      	movs	r0, #71	; 0x47
 80042e2:	f000 fe52 	bl	8004f8a <HAL_NVIC_EnableIRQ>
}
 80042e6:	bf00      	nop
 80042e8:	3738      	adds	r7, #56	; 0x38
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40004400 	.word	0x40004400
 80042f4:	40023800 	.word	0x40023800
 80042f8:	40020000 	.word	0x40020000
 80042fc:	40004800 	.word	0x40004800
 8004300:	40020400 	.word	0x40020400
 8004304:	40020c00 	.word	0x40020c00
 8004308:	40011400 	.word	0x40011400
 800430c:	40020800 	.word	0x40020800

08004310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004314:	e7fe      	b.n	8004314 <NMI_Handler+0x4>

08004316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004316:	b480      	push	{r7}
 8004318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800431a:	e7fe      	b.n	800431a <HardFault_Handler+0x4>

0800431c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004320:	e7fe      	b.n	8004320 <MemManage_Handler+0x4>

08004322 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004322:	b480      	push	{r7}
 8004324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004326:	e7fe      	b.n	8004326 <BusFault_Handler+0x4>

08004328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800432c:	e7fe      	b.n	800432c <UsageFault_Handler+0x4>

0800432e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800432e:	b480      	push	{r7}
 8004330:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004332:	bf00      	nop
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004340:	bf00      	nop
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800434a:	b480      	push	{r7}
 800434c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800434e:	bf00      	nop
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800435c:	f000 f90e 	bl	800457c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004360:	bf00      	nop
 8004362:	bd80      	pop	{r7, pc}

08004364 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004368:	2001      	movs	r0, #1
 800436a:	f001 f889 	bl	8005480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800436e:	bf00      	nop
 8004370:	bd80      	pop	{r7, pc}

08004372 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004376:	2002      	movs	r0, #2
 8004378:	f001 f882 	bl	8005480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800437c:	bf00      	nop
 800437e:	bd80      	pop	{r7, pc}

08004380 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004384:	2008      	movs	r0, #8
 8004386:	f001 f87b 	bl	8005480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800438a:	bf00      	nop
 800438c:	bd80      	pop	{r7, pc}

0800438e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004392:	2010      	movs	r0, #16
 8004394:	f001 f874 	bl	8005480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004398:	bf00      	nop
 800439a:	bd80      	pop	{r7, pc}

0800439c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80043a0:	2040      	movs	r0, #64	; 0x40
 80043a2:	f001 f86d 	bl	8005480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80043a6:	bf00      	nop
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UART_isr(&huart2);
 80043b0:	4803      	ldr	r0, [pc, #12]	; (80043c0 <USART2_IRQHandler+0x14>)
 80043b2:	f7fe f815 	bl	80023e0 <UART_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80043b6:	4802      	ldr	r0, [pc, #8]	; (80043c0 <USART2_IRQHandler+0x14>)
 80043b8:	f002 fef6 	bl	80071a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80043bc:	bf00      	nop
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20000e4c 	.word	0x20000e4c

080043c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80043c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80043cc:	f001 f858 	bl	8005480 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80043d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80043d4:	f001 f854 	bl	8005480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80043d8:	bf00      	nop
 80043da:	bd80      	pop	{r7, pc}

080043dc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	UART_isr(&huart6);
 80043e0:	4803      	ldr	r0, [pc, #12]	; (80043f0 <USART6_IRQHandler+0x14>)
 80043e2:	f7fd fffd 	bl	80023e0 <UART_isr>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80043e6:	4802      	ldr	r0, [pc, #8]	; (80043f0 <USART6_IRQHandler+0x14>)
 80043e8:	f002 fede 	bl	80071a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80043ec:	bf00      	nop
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	20000dc0 	.word	0x20000dc0

080043f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043fc:	4a14      	ldr	r2, [pc, #80]	; (8004450 <_sbrk+0x5c>)
 80043fe:	4b15      	ldr	r3, [pc, #84]	; (8004454 <_sbrk+0x60>)
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004408:	4b13      	ldr	r3, [pc, #76]	; (8004458 <_sbrk+0x64>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d102      	bne.n	8004416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004410:	4b11      	ldr	r3, [pc, #68]	; (8004458 <_sbrk+0x64>)
 8004412:	4a12      	ldr	r2, [pc, #72]	; (800445c <_sbrk+0x68>)
 8004414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004416:	4b10      	ldr	r3, [pc, #64]	; (8004458 <_sbrk+0x64>)
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4413      	add	r3, r2
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	429a      	cmp	r2, r3
 8004422:	d207      	bcs.n	8004434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004424:	f003 fd48 	bl	8007eb8 <__errno>
 8004428:	4603      	mov	r3, r0
 800442a:	220c      	movs	r2, #12
 800442c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800442e:	f04f 33ff 	mov.w	r3, #4294967295
 8004432:	e009      	b.n	8004448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004434:	4b08      	ldr	r3, [pc, #32]	; (8004458 <_sbrk+0x64>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800443a:	4b07      	ldr	r3, [pc, #28]	; (8004458 <_sbrk+0x64>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4413      	add	r3, r2
 8004442:	4a05      	ldr	r2, [pc, #20]	; (8004458 <_sbrk+0x64>)
 8004444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004446:	68fb      	ldr	r3, [r7, #12]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	20020000 	.word	0x20020000
 8004454:	00000400 	.word	0x00000400
 8004458:	200008e8 	.word	0x200008e8
 800445c:	20000eb0 	.word	0x20000eb0

08004460 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004464:	4b06      	ldr	r3, [pc, #24]	; (8004480 <SystemInit+0x20>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446a:	4a05      	ldr	r2, [pc, #20]	; (8004480 <SystemInit+0x20>)
 800446c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004474:	bf00      	nop
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	e000ed00 	.word	0xe000ed00

08004484 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004484:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004488:	480d      	ldr	r0, [pc, #52]	; (80044c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800448a:	490e      	ldr	r1, [pc, #56]	; (80044c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800448c:	4a0e      	ldr	r2, [pc, #56]	; (80044c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800448e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004490:	e002      	b.n	8004498 <LoopCopyDataInit>

08004492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004496:	3304      	adds	r3, #4

08004498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800449a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800449c:	d3f9      	bcc.n	8004492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800449e:	4a0b      	ldr	r2, [pc, #44]	; (80044cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80044a0:	4c0b      	ldr	r4, [pc, #44]	; (80044d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80044a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044a4:	e001      	b.n	80044aa <LoopFillZerobss>

080044a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044a8:	3204      	adds	r2, #4

080044aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044ac:	d3fb      	bcc.n	80044a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80044ae:	f7ff ffd7 	bl	8004460 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044b2:	f003 fd07 	bl	8007ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044b6:	f7fe f8a9 	bl	800260c <main>
  bx  lr    
 80044ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80044bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80044c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80044c8:	08009030 	.word	0x08009030
  ldr r2, =_sbss
 80044cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80044d0:	20000eac 	.word	0x20000eac

080044d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044d4:	e7fe      	b.n	80044d4 <ADC_IRQHandler>
	...

080044d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80044dc:	4b0e      	ldr	r3, [pc, #56]	; (8004518 <HAL_Init+0x40>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a0d      	ldr	r2, [pc, #52]	; (8004518 <HAL_Init+0x40>)
 80044e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <HAL_Init+0x40>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a0a      	ldr	r2, [pc, #40]	; (8004518 <HAL_Init+0x40>)
 80044ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044f4:	4b08      	ldr	r3, [pc, #32]	; (8004518 <HAL_Init+0x40>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a07      	ldr	r2, [pc, #28]	; (8004518 <HAL_Init+0x40>)
 80044fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004500:	2003      	movs	r0, #3
 8004502:	f000 fd1b 	bl	8004f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004506:	2000      	movs	r0, #0
 8004508:	f000 f808 	bl	800451c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800450c:	f7ff fb30 	bl	8003b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40023c00 	.word	0x40023c00

0800451c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004524:	4b12      	ldr	r3, [pc, #72]	; (8004570 <HAL_InitTick+0x54>)
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	4b12      	ldr	r3, [pc, #72]	; (8004574 <HAL_InitTick+0x58>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	4619      	mov	r1, r3
 800452e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004532:	fbb3 f3f1 	udiv	r3, r3, r1
 8004536:	fbb2 f3f3 	udiv	r3, r2, r3
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fd33 	bl	8004fa6 <HAL_SYSTICK_Config>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e00e      	b.n	8004568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b0f      	cmp	r3, #15
 800454e:	d80a      	bhi.n	8004566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004550:	2200      	movs	r2, #0
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	f04f 30ff 	mov.w	r0, #4294967295
 8004558:	f000 fcfb 	bl	8004f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800455c:	4a06      	ldr	r2, [pc, #24]	; (8004578 <HAL_InitTick+0x5c>)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	e000      	b.n	8004568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
}
 8004568:	4618      	mov	r0, r3
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20000000 	.word	0x20000000
 8004574:	20000008 	.word	0x20000008
 8004578:	20000004 	.word	0x20000004

0800457c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004580:	4b06      	ldr	r3, [pc, #24]	; (800459c <HAL_IncTick+0x20>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <HAL_IncTick+0x24>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4413      	add	r3, r2
 800458c:	4a04      	ldr	r2, [pc, #16]	; (80045a0 <HAL_IncTick+0x24>)
 800458e:	6013      	str	r3, [r2, #0]
}
 8004590:	bf00      	nop
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	20000008 	.word	0x20000008
 80045a0:	20000e98 	.word	0x20000e98

080045a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  return uwTick;
 80045a8:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <HAL_GetTick+0x14>)
 80045aa:	681b      	ldr	r3, [r3, #0]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000e98 	.word	0x20000e98

080045bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045c4:	f7ff ffee 	bl	80045a4 <HAL_GetTick>
 80045c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d4:	d005      	beq.n	80045e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045d6:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <HAL_Delay+0x44>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80045e2:	bf00      	nop
 80045e4:	f7ff ffde 	bl	80045a4 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d8f7      	bhi.n	80045e4 <HAL_Delay+0x28>
  {
  }
}
 80045f4:	bf00      	nop
 80045f6:	bf00      	nop
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20000008 	.word	0x20000008

08004604 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e033      	b.n	8004682 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d109      	bne.n	8004636 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff facc 	bl	8003bc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f003 0310 	and.w	r3, r3, #16
 800463e:	2b00      	cmp	r3, #0
 8004640:	d118      	bne.n	8004674 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800464a:	f023 0302 	bic.w	r3, r3, #2
 800464e:	f043 0202 	orr.w	r2, r3, #2
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 faa4 	bl	8004ba4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f023 0303 	bic.w	r3, r3, #3
 800466a:	f043 0201 	orr.w	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	641a      	str	r2, [r3, #64]	; 0x40
 8004672:	e001      	b.n	8004678 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004680:	7bfb      	ldrb	r3, [r7, #15]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_ADC_Start+0x1a>
 80046a2:	2302      	movs	r3, #2
 80046a4:	e0b2      	b.n	800480c <HAL_ADC_Start+0x180>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d018      	beq.n	80046ee <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0201 	orr.w	r2, r2, #1
 80046ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80046cc:	4b52      	ldr	r3, [pc, #328]	; (8004818 <HAL_ADC_Start+0x18c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a52      	ldr	r2, [pc, #328]	; (800481c <HAL_ADC_Start+0x190>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	0c9a      	lsrs	r2, r3, #18
 80046d8:	4613      	mov	r3, r2
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	4413      	add	r3, r2
 80046de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80046e0:	e002      	b.n	80046e8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	3b01      	subs	r3, #1
 80046e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f9      	bne.n	80046e2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d17a      	bne.n	80047f2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004704:	f023 0301 	bic.w	r3, r3, #1
 8004708:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800471a:	2b00      	cmp	r3, #0
 800471c:	d007      	beq.n	800472e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004726:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800473a:	d106      	bne.n	800474a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004740:	f023 0206 	bic.w	r2, r3, #6
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	645a      	str	r2, [r3, #68]	; 0x44
 8004748:	e002      	b.n	8004750 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004758:	4b31      	ldr	r3, [pc, #196]	; (8004820 <HAL_ADC_Start+0x194>)
 800475a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004764:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f003 031f 	and.w	r3, r3, #31
 800476e:	2b00      	cmp	r3, #0
 8004770:	d12a      	bne.n	80047c8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a2b      	ldr	r2, [pc, #172]	; (8004824 <HAL_ADC_Start+0x198>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d015      	beq.n	80047a8 <HAL_ADC_Start+0x11c>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a29      	ldr	r2, [pc, #164]	; (8004828 <HAL_ADC_Start+0x19c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d105      	bne.n	8004792 <HAL_ADC_Start+0x106>
 8004786:	4b26      	ldr	r3, [pc, #152]	; (8004820 <HAL_ADC_Start+0x194>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f003 031f 	and.w	r3, r3, #31
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a25      	ldr	r2, [pc, #148]	; (800482c <HAL_ADC_Start+0x1a0>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d136      	bne.n	800480a <HAL_ADC_Start+0x17e>
 800479c:	4b20      	ldr	r3, [pc, #128]	; (8004820 <HAL_ADC_Start+0x194>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d130      	bne.n	800480a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d129      	bne.n	800480a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80047c4:	609a      	str	r2, [r3, #8]
 80047c6:	e020      	b.n	800480a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a15      	ldr	r2, [pc, #84]	; (8004824 <HAL_ADC_Start+0x198>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d11b      	bne.n	800480a <HAL_ADC_Start+0x17e>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d114      	bne.n	800480a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80047ee:	609a      	str	r2, [r3, #8]
 80047f0:	e00b      	b.n	800480a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f043 0210 	orr.w	r2, r3, #16
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	f043 0201 	orr.w	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	20000000 	.word	0x20000000
 800481c:	431bde83 	.word	0x431bde83
 8004820:	40012300 	.word	0x40012300
 8004824:	40012000 	.word	0x40012000
 8004828:	40012100 	.word	0x40012100
 800482c:	40012200 	.word	0x40012200

08004830 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800483a:	2300      	movs	r3, #0
 800483c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484c:	d113      	bne.n	8004876 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800485c:	d10b      	bne.n	8004876 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	f043 0220 	orr.w	r2, r3, #32
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e063      	b.n	800493e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004876:	f7ff fe95 	bl	80045a4 <HAL_GetTick>
 800487a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800487c:	e021      	b.n	80048c2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004884:	d01d      	beq.n	80048c2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d007      	beq.n	800489c <HAL_ADC_PollForConversion+0x6c>
 800488c:	f7ff fe8a 	bl	80045a4 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d212      	bcs.n	80048c2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d00b      	beq.n	80048c2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f043 0204 	orr.w	r2, r3, #4
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e03d      	b.n	800493e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d1d6      	bne.n	800487e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0212 	mvn.w	r2, #18
 80048d8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d123      	bne.n	800493c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d11f      	bne.n	800493c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004902:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004906:	2b00      	cmp	r3, #0
 8004908:	d006      	beq.n	8004918 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004914:	2b00      	cmp	r3, #0
 8004916:	d111      	bne.n	800493c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d105      	bne.n	800493c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	f043 0201 	orr.w	r2, r3, #1
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004954:	4618      	mov	r0, r3
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004974:	2b01      	cmp	r3, #1
 8004976:	d101      	bne.n	800497c <HAL_ADC_ConfigChannel+0x1c>
 8004978:	2302      	movs	r3, #2
 800497a:	e105      	b.n	8004b88 <HAL_ADC_ConfigChannel+0x228>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b09      	cmp	r3, #9
 800498a:	d925      	bls.n	80049d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68d9      	ldr	r1, [r3, #12]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	b29b      	uxth	r3, r3
 8004998:	461a      	mov	r2, r3
 800499a:	4613      	mov	r3, r2
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	4413      	add	r3, r2
 80049a0:	3b1e      	subs	r3, #30
 80049a2:	2207      	movs	r2, #7
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	43da      	mvns	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	400a      	ands	r2, r1
 80049b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68d9      	ldr	r1, [r3, #12]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	4618      	mov	r0, r3
 80049c4:	4603      	mov	r3, r0
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	4403      	add	r3, r0
 80049ca:	3b1e      	subs	r3, #30
 80049cc:	409a      	lsls	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	60da      	str	r2, [r3, #12]
 80049d6:	e022      	b.n	8004a1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6919      	ldr	r1, [r3, #16]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	461a      	mov	r2, r3
 80049e6:	4613      	mov	r3, r2
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	4413      	add	r3, r2
 80049ec:	2207      	movs	r2, #7
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43da      	mvns	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	400a      	ands	r2, r1
 80049fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6919      	ldr	r1, [r3, #16]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	689a      	ldr	r2, [r3, #8]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	4603      	mov	r3, r0
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	4403      	add	r3, r0
 8004a14:	409a      	lsls	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b06      	cmp	r3, #6
 8004a24:	d824      	bhi.n	8004a70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	3b05      	subs	r3, #5
 8004a38:	221f      	movs	r2, #31
 8004a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3e:	43da      	mvns	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	400a      	ands	r2, r1
 8004a46:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	4618      	mov	r0, r3
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	3b05      	subs	r3, #5
 8004a62:	fa00 f203 	lsl.w	r2, r0, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	635a      	str	r2, [r3, #52]	; 0x34
 8004a6e:	e04c      	b.n	8004b0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b0c      	cmp	r3, #12
 8004a76:	d824      	bhi.n	8004ac2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	3b23      	subs	r3, #35	; 0x23
 8004a8a:	221f      	movs	r2, #31
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	43da      	mvns	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	400a      	ands	r2, r1
 8004a98:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	3b23      	subs	r3, #35	; 0x23
 8004ab4:	fa00 f203 	lsl.w	r2, r0, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30
 8004ac0:	e023      	b.n	8004b0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3b41      	subs	r3, #65	; 0x41
 8004ad4:	221f      	movs	r2, #31
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	43da      	mvns	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	400a      	ands	r2, r1
 8004ae2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	4618      	mov	r0, r3
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	3b41      	subs	r3, #65	; 0x41
 8004afe:	fa00 f203 	lsl.w	r2, r0, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b0a:	4b22      	ldr	r3, [pc, #136]	; (8004b94 <HAL_ADC_ConfigChannel+0x234>)
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a21      	ldr	r2, [pc, #132]	; (8004b98 <HAL_ADC_ConfigChannel+0x238>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d109      	bne.n	8004b2c <HAL_ADC_ConfigChannel+0x1cc>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b12      	cmp	r3, #18
 8004b1e:	d105      	bne.n	8004b2c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a19      	ldr	r2, [pc, #100]	; (8004b98 <HAL_ADC_ConfigChannel+0x238>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d123      	bne.n	8004b7e <HAL_ADC_ConfigChannel+0x21e>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b10      	cmp	r3, #16
 8004b3c:	d003      	beq.n	8004b46 <HAL_ADC_ConfigChannel+0x1e6>
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b11      	cmp	r3, #17
 8004b44:	d11b      	bne.n	8004b7e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b10      	cmp	r3, #16
 8004b58:	d111      	bne.n	8004b7e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b5a:	4b10      	ldr	r3, [pc, #64]	; (8004b9c <HAL_ADC_ConfigChannel+0x23c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a10      	ldr	r2, [pc, #64]	; (8004ba0 <HAL_ADC_ConfigChannel+0x240>)
 8004b60:	fba2 2303 	umull	r2, r3, r2, r3
 8004b64:	0c9a      	lsrs	r2, r3, #18
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b70:	e002      	b.n	8004b78 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	3b01      	subs	r3, #1
 8004b76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f9      	bne.n	8004b72 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	40012300 	.word	0x40012300
 8004b98:	40012000 	.word	0x40012000
 8004b9c:	20000000 	.word	0x20000000
 8004ba0:	431bde83 	.word	0x431bde83

08004ba4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004bac:	4b79      	ldr	r3, [pc, #484]	; (8004d94 <ADC_Init+0x1f0>)
 8004bae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6859      	ldr	r1, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	021a      	lsls	r2, r3, #8
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004bfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6859      	ldr	r1, [r3, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6899      	ldr	r1, [r3, #8]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c36:	4a58      	ldr	r2, [pc, #352]	; (8004d98 <ADC_Init+0x1f4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d022      	beq.n	8004c82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6899      	ldr	r1, [r3, #8]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6899      	ldr	r1, [r3, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	609a      	str	r2, [r3, #8]
 8004c80:	e00f      	b.n	8004ca2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ca0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0202 	bic.w	r2, r2, #2
 8004cb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6899      	ldr	r1, [r3, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	7e1b      	ldrb	r3, [r3, #24]
 8004cbc:	005a      	lsls	r2, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01b      	beq.n	8004d08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cde:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004cee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6859      	ldr	r1, [r3, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	035a      	lsls	r2, r3, #13
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
 8004d06:	e007      	b.n	8004d18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d16:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004d26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	051a      	lsls	r2, r3, #20
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6899      	ldr	r1, [r3, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d5a:	025a      	lsls	r2, r3, #9
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6899      	ldr	r1, [r3, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	029a      	lsls	r2, r3, #10
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	609a      	str	r2, [r3, #8]
}
 8004d88:	bf00      	nop
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	40012300 	.word	0x40012300
 8004d98:	0f000001 	.word	0x0f000001

08004d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dac:	4b0c      	ldr	r3, [pc, #48]	; (8004de0 <__NVIC_SetPriorityGrouping+0x44>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004db8:	4013      	ands	r3, r2
 8004dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dce:	4a04      	ldr	r2, [pc, #16]	; (8004de0 <__NVIC_SetPriorityGrouping+0x44>)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	60d3      	str	r3, [r2, #12]
}
 8004dd4:	bf00      	nop
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	e000ed00 	.word	0xe000ed00

08004de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004de8:	4b04      	ldr	r3, [pc, #16]	; (8004dfc <__NVIC_GetPriorityGrouping+0x18>)
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	0a1b      	lsrs	r3, r3, #8
 8004dee:	f003 0307 	and.w	r3, r3, #7
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	e000ed00 	.word	0xe000ed00

08004e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4603      	mov	r3, r0
 8004e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	db0b      	blt.n	8004e2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e12:	79fb      	ldrb	r3, [r7, #7]
 8004e14:	f003 021f 	and.w	r2, r3, #31
 8004e18:	4907      	ldr	r1, [pc, #28]	; (8004e38 <__NVIC_EnableIRQ+0x38>)
 8004e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1e:	095b      	lsrs	r3, r3, #5
 8004e20:	2001      	movs	r0, #1
 8004e22:	fa00 f202 	lsl.w	r2, r0, r2
 8004e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	e000e100 	.word	0xe000e100

08004e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	4603      	mov	r3, r0
 8004e44:	6039      	str	r1, [r7, #0]
 8004e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	db0a      	blt.n	8004e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	490c      	ldr	r1, [pc, #48]	; (8004e88 <__NVIC_SetPriority+0x4c>)
 8004e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e5a:	0112      	lsls	r2, r2, #4
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	440b      	add	r3, r1
 8004e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e64:	e00a      	b.n	8004e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	4908      	ldr	r1, [pc, #32]	; (8004e8c <__NVIC_SetPriority+0x50>)
 8004e6c:	79fb      	ldrb	r3, [r7, #7]
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	3b04      	subs	r3, #4
 8004e74:	0112      	lsls	r2, r2, #4
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	440b      	add	r3, r1
 8004e7a:	761a      	strb	r2, [r3, #24]
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	e000e100 	.word	0xe000e100
 8004e8c:	e000ed00 	.word	0xe000ed00

08004e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b089      	sub	sp, #36	; 0x24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f003 0307 	and.w	r3, r3, #7
 8004ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	f1c3 0307 	rsb	r3, r3, #7
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	bf28      	it	cs
 8004eae:	2304      	movcs	r3, #4
 8004eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	2b06      	cmp	r3, #6
 8004eb8:	d902      	bls.n	8004ec0 <NVIC_EncodePriority+0x30>
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	3b03      	subs	r3, #3
 8004ebe:	e000      	b.n	8004ec2 <NVIC_EncodePriority+0x32>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	43da      	mvns	r2, r3
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	401a      	ands	r2, r3
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee2:	43d9      	mvns	r1, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ee8:	4313      	orrs	r3, r2
         );
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3724      	adds	r7, #36	; 0x24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
	...

08004ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f08:	d301      	bcc.n	8004f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e00f      	b.n	8004f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f0e:	4a0a      	ldr	r2, [pc, #40]	; (8004f38 <SysTick_Config+0x40>)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f16:	210f      	movs	r1, #15
 8004f18:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1c:	f7ff ff8e 	bl	8004e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f20:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <SysTick_Config+0x40>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f26:	4b04      	ldr	r3, [pc, #16]	; (8004f38 <SysTick_Config+0x40>)
 8004f28:	2207      	movs	r2, #7
 8004f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	e000e010 	.word	0xe000e010

08004f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff ff29 	bl	8004d9c <__NVIC_SetPriorityGrouping>
}
 8004f4a:	bf00      	nop
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b086      	sub	sp, #24
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	4603      	mov	r3, r0
 8004f5a:	60b9      	str	r1, [r7, #8]
 8004f5c:	607a      	str	r2, [r7, #4]
 8004f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f64:	f7ff ff3e 	bl	8004de4 <__NVIC_GetPriorityGrouping>
 8004f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	68b9      	ldr	r1, [r7, #8]
 8004f6e:	6978      	ldr	r0, [r7, #20]
 8004f70:	f7ff ff8e 	bl	8004e90 <NVIC_EncodePriority>
 8004f74:	4602      	mov	r2, r0
 8004f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff ff5d 	bl	8004e3c <__NVIC_SetPriority>
}
 8004f82:	bf00      	nop
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b082      	sub	sp, #8
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	4603      	mov	r3, r0
 8004f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff ff31 	bl	8004e00 <__NVIC_EnableIRQ>
}
 8004f9e:	bf00      	nop
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b082      	sub	sp, #8
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff ffa2 	bl	8004ef8 <SysTick_Config>
 8004fb4:	4603      	mov	r3, r0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004fcc:	f7ff faea 	bl	80045a4 <HAL_GetTick>
 8004fd0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d008      	beq.n	8004ff0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2280      	movs	r2, #128	; 0x80
 8004fe2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e052      	b.n	8005096 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0216 	bic.w	r2, r2, #22
 8004ffe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695a      	ldr	r2, [r3, #20]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800500e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	2b00      	cmp	r3, #0
 8005016:	d103      	bne.n	8005020 <HAL_DMA_Abort+0x62>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800501c:	2b00      	cmp	r3, #0
 800501e:	d007      	beq.n	8005030 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0208 	bic.w	r2, r2, #8
 800502e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0201 	bic.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005040:	e013      	b.n	800506a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005042:	f7ff faaf 	bl	80045a4 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b05      	cmp	r3, #5
 800504e:	d90c      	bls.n	800506a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2220      	movs	r2, #32
 8005054:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2203      	movs	r2, #3
 800505a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e015      	b.n	8005096 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e4      	bne.n	8005042 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800507c:	223f      	movs	r2, #63	; 0x3f
 800507e:	409a      	lsls	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d004      	beq.n	80050bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2280      	movs	r2, #128	; 0x80
 80050b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e00c      	b.n	80050d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2205      	movs	r2, #5
 80050c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0201 	bic.w	r2, r2, #1
 80050d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
	...

080050e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b089      	sub	sp, #36	; 0x24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050fa:	2300      	movs	r3, #0
 80050fc:	61fb      	str	r3, [r7, #28]
 80050fe:	e16b      	b.n	80053d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005100:	2201      	movs	r2, #1
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4013      	ands	r3, r2
 8005112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	429a      	cmp	r2, r3
 800511a:	f040 815a 	bne.w	80053d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	2b01      	cmp	r3, #1
 8005128:	d005      	beq.n	8005136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005132:	2b02      	cmp	r3, #2
 8005134:	d130      	bne.n	8005198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	2203      	movs	r2, #3
 8005142:	fa02 f303 	lsl.w	r3, r2, r3
 8005146:	43db      	mvns	r3, r3
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	4013      	ands	r3, r2
 800514c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	4313      	orrs	r3, r2
 800515e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800516c:	2201      	movs	r2, #1
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	43db      	mvns	r3, r3
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	4013      	ands	r3, r2
 800517a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	091b      	lsrs	r3, r3, #4
 8005182:	f003 0201 	and.w	r2, r3, #1
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	fa02 f303 	lsl.w	r3, r2, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	4313      	orrs	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d017      	beq.n	80051d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	2203      	movs	r2, #3
 80051b0:	fa02 f303 	lsl.w	r3, r2, r3
 80051b4:	43db      	mvns	r3, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4013      	ands	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f003 0303 	and.w	r3, r3, #3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d123      	bne.n	8005228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	08da      	lsrs	r2, r3, #3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3208      	adds	r2, #8
 80051e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	220f      	movs	r2, #15
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	43db      	mvns	r3, r3
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	4013      	ands	r3, r2
 8005202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	4313      	orrs	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	08da      	lsrs	r2, r3, #3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	3208      	adds	r2, #8
 8005222:	69b9      	ldr	r1, [r7, #24]
 8005224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	2203      	movs	r2, #3
 8005234:	fa02 f303 	lsl.w	r3, r2, r3
 8005238:	43db      	mvns	r3, r3
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	4013      	ands	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f003 0203 	and.w	r2, r3, #3
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	4313      	orrs	r3, r2
 8005254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 80b4 	beq.w	80053d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	4b60      	ldr	r3, [pc, #384]	; (80053f0 <HAL_GPIO_Init+0x30c>)
 8005270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005272:	4a5f      	ldr	r2, [pc, #380]	; (80053f0 <HAL_GPIO_Init+0x30c>)
 8005274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005278:	6453      	str	r3, [r2, #68]	; 0x44
 800527a:	4b5d      	ldr	r3, [pc, #372]	; (80053f0 <HAL_GPIO_Init+0x30c>)
 800527c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005286:	4a5b      	ldr	r2, [pc, #364]	; (80053f4 <HAL_GPIO_Init+0x310>)
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	089b      	lsrs	r3, r3, #2
 800528c:	3302      	adds	r3, #2
 800528e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	220f      	movs	r2, #15
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	43db      	mvns	r3, r3
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	4013      	ands	r3, r2
 80052a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a52      	ldr	r2, [pc, #328]	; (80053f8 <HAL_GPIO_Init+0x314>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d02b      	beq.n	800530a <HAL_GPIO_Init+0x226>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a51      	ldr	r2, [pc, #324]	; (80053fc <HAL_GPIO_Init+0x318>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d025      	beq.n	8005306 <HAL_GPIO_Init+0x222>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a50      	ldr	r2, [pc, #320]	; (8005400 <HAL_GPIO_Init+0x31c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01f      	beq.n	8005302 <HAL_GPIO_Init+0x21e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a4f      	ldr	r2, [pc, #316]	; (8005404 <HAL_GPIO_Init+0x320>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d019      	beq.n	80052fe <HAL_GPIO_Init+0x21a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a4e      	ldr	r2, [pc, #312]	; (8005408 <HAL_GPIO_Init+0x324>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d013      	beq.n	80052fa <HAL_GPIO_Init+0x216>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a4d      	ldr	r2, [pc, #308]	; (800540c <HAL_GPIO_Init+0x328>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00d      	beq.n	80052f6 <HAL_GPIO_Init+0x212>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a4c      	ldr	r2, [pc, #304]	; (8005410 <HAL_GPIO_Init+0x32c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d007      	beq.n	80052f2 <HAL_GPIO_Init+0x20e>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a4b      	ldr	r2, [pc, #300]	; (8005414 <HAL_GPIO_Init+0x330>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d101      	bne.n	80052ee <HAL_GPIO_Init+0x20a>
 80052ea:	2307      	movs	r3, #7
 80052ec:	e00e      	b.n	800530c <HAL_GPIO_Init+0x228>
 80052ee:	2308      	movs	r3, #8
 80052f0:	e00c      	b.n	800530c <HAL_GPIO_Init+0x228>
 80052f2:	2306      	movs	r3, #6
 80052f4:	e00a      	b.n	800530c <HAL_GPIO_Init+0x228>
 80052f6:	2305      	movs	r3, #5
 80052f8:	e008      	b.n	800530c <HAL_GPIO_Init+0x228>
 80052fa:	2304      	movs	r3, #4
 80052fc:	e006      	b.n	800530c <HAL_GPIO_Init+0x228>
 80052fe:	2303      	movs	r3, #3
 8005300:	e004      	b.n	800530c <HAL_GPIO_Init+0x228>
 8005302:	2302      	movs	r3, #2
 8005304:	e002      	b.n	800530c <HAL_GPIO_Init+0x228>
 8005306:	2301      	movs	r3, #1
 8005308:	e000      	b.n	800530c <HAL_GPIO_Init+0x228>
 800530a:	2300      	movs	r3, #0
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	f002 0203 	and.w	r2, r2, #3
 8005312:	0092      	lsls	r2, r2, #2
 8005314:	4093      	lsls	r3, r2
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	4313      	orrs	r3, r2
 800531a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800531c:	4935      	ldr	r1, [pc, #212]	; (80053f4 <HAL_GPIO_Init+0x310>)
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	089b      	lsrs	r3, r3, #2
 8005322:	3302      	adds	r3, #2
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800532a:	4b3b      	ldr	r3, [pc, #236]	; (8005418 <HAL_GPIO_Init+0x334>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	43db      	mvns	r3, r3
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	4013      	ands	r3, r2
 8005338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800534e:	4a32      	ldr	r2, [pc, #200]	; (8005418 <HAL_GPIO_Init+0x334>)
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005354:	4b30      	ldr	r3, [pc, #192]	; (8005418 <HAL_GPIO_Init+0x334>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	43db      	mvns	r3, r3
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	4013      	ands	r3, r2
 8005362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	4313      	orrs	r3, r2
 8005376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005378:	4a27      	ldr	r2, [pc, #156]	; (8005418 <HAL_GPIO_Init+0x334>)
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800537e:	4b26      	ldr	r3, [pc, #152]	; (8005418 <HAL_GPIO_Init+0x334>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	43db      	mvns	r3, r3
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	4013      	ands	r3, r2
 800538c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053a2:	4a1d      	ldr	r2, [pc, #116]	; (8005418 <HAL_GPIO_Init+0x334>)
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053a8:	4b1b      	ldr	r3, [pc, #108]	; (8005418 <HAL_GPIO_Init+0x334>)
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	43db      	mvns	r3, r3
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	4013      	ands	r3, r2
 80053b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d003      	beq.n	80053cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053cc:	4a12      	ldr	r2, [pc, #72]	; (8005418 <HAL_GPIO_Init+0x334>)
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	3301      	adds	r3, #1
 80053d6:	61fb      	str	r3, [r7, #28]
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	2b0f      	cmp	r3, #15
 80053dc:	f67f ae90 	bls.w	8005100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053e0:	bf00      	nop
 80053e2:	bf00      	nop
 80053e4:	3724      	adds	r7, #36	; 0x24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40023800 	.word	0x40023800
 80053f4:	40013800 	.word	0x40013800
 80053f8:	40020000 	.word	0x40020000
 80053fc:	40020400 	.word	0x40020400
 8005400:	40020800 	.word	0x40020800
 8005404:	40020c00 	.word	0x40020c00
 8005408:	40021000 	.word	0x40021000
 800540c:	40021400 	.word	0x40021400
 8005410:	40021800 	.word	0x40021800
 8005414:	40021c00 	.word	0x40021c00
 8005418:	40013c00 	.word	0x40013c00

0800541c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	460b      	mov	r3, r1
 8005426:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	887b      	ldrh	r3, [r7, #2]
 800542e:	4013      	ands	r3, r2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005434:	2301      	movs	r3, #1
 8005436:	73fb      	strb	r3, [r7, #15]
 8005438:	e001      	b.n	800543e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800543a:	2300      	movs	r3, #0
 800543c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800543e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	807b      	strh	r3, [r7, #2]
 8005458:	4613      	mov	r3, r2
 800545a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800545c:	787b      	ldrb	r3, [r7, #1]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005462:	887a      	ldrh	r2, [r7, #2]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005468:	e003      	b.n	8005472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800546a:	887b      	ldrh	r3, [r7, #2]
 800546c:	041a      	lsls	r2, r3, #16
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	619a      	str	r2, [r3, #24]
}
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
	...

08005480 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	4603      	mov	r3, r0
 8005488:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800548a:	4b08      	ldr	r3, [pc, #32]	; (80054ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800548c:	695a      	ldr	r2, [r3, #20]
 800548e:	88fb      	ldrh	r3, [r7, #6]
 8005490:	4013      	ands	r3, r2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d006      	beq.n	80054a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005496:	4a05      	ldr	r2, [pc, #20]	; (80054ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005498:	88fb      	ldrh	r3, [r7, #6]
 800549a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800549c:	88fb      	ldrh	r3, [r7, #6]
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fd f848 	bl	8002534 <HAL_GPIO_EXTI_Callback>
  }
}
 80054a4:	bf00      	nop
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40013c00 	.word	0x40013c00

080054b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e12b      	b.n	800571a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d106      	bne.n	80054dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7fe fc1a 	bl	8003d10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2224      	movs	r2, #36	; 0x24
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0201 	bic.w	r2, r2, #1
 80054f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005502:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005512:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005514:	f000 fd5c 	bl	8005fd0 <HAL_RCC_GetPCLK1Freq>
 8005518:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	4a81      	ldr	r2, [pc, #516]	; (8005724 <HAL_I2C_Init+0x274>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d807      	bhi.n	8005534 <HAL_I2C_Init+0x84>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4a80      	ldr	r2, [pc, #512]	; (8005728 <HAL_I2C_Init+0x278>)
 8005528:	4293      	cmp	r3, r2
 800552a:	bf94      	ite	ls
 800552c:	2301      	movls	r3, #1
 800552e:	2300      	movhi	r3, #0
 8005530:	b2db      	uxtb	r3, r3
 8005532:	e006      	b.n	8005542 <HAL_I2C_Init+0x92>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4a7d      	ldr	r2, [pc, #500]	; (800572c <HAL_I2C_Init+0x27c>)
 8005538:	4293      	cmp	r3, r2
 800553a:	bf94      	ite	ls
 800553c:	2301      	movls	r3, #1
 800553e:	2300      	movhi	r3, #0
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e0e7      	b.n	800571a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4a78      	ldr	r2, [pc, #480]	; (8005730 <HAL_I2C_Init+0x280>)
 800554e:	fba2 2303 	umull	r2, r3, r2, r3
 8005552:	0c9b      	lsrs	r3, r3, #18
 8005554:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	430a      	orrs	r2, r1
 8005568:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	4a6a      	ldr	r2, [pc, #424]	; (8005724 <HAL_I2C_Init+0x274>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d802      	bhi.n	8005584 <HAL_I2C_Init+0xd4>
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	3301      	adds	r3, #1
 8005582:	e009      	b.n	8005598 <HAL_I2C_Init+0xe8>
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800558a:	fb02 f303 	mul.w	r3, r2, r3
 800558e:	4a69      	ldr	r2, [pc, #420]	; (8005734 <HAL_I2C_Init+0x284>)
 8005590:	fba2 2303 	umull	r2, r3, r2, r3
 8005594:	099b      	lsrs	r3, r3, #6
 8005596:	3301      	adds	r3, #1
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6812      	ldr	r2, [r2, #0]
 800559c:	430b      	orrs	r3, r1
 800559e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80055aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	495c      	ldr	r1, [pc, #368]	; (8005724 <HAL_I2C_Init+0x274>)
 80055b4:	428b      	cmp	r3, r1
 80055b6:	d819      	bhi.n	80055ec <HAL_I2C_Init+0x13c>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	1e59      	subs	r1, r3, #1
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80055c6:	1c59      	adds	r1, r3, #1
 80055c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80055cc:	400b      	ands	r3, r1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <HAL_I2C_Init+0x138>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	1e59      	subs	r1, r3, #1
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80055e0:	3301      	adds	r3, #1
 80055e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055e6:	e051      	b.n	800568c <HAL_I2C_Init+0x1dc>
 80055e8:	2304      	movs	r3, #4
 80055ea:	e04f      	b.n	800568c <HAL_I2C_Init+0x1dc>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d111      	bne.n	8005618 <HAL_I2C_Init+0x168>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	1e58      	subs	r0, r3, #1
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6859      	ldr	r1, [r3, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	440b      	add	r3, r1
 8005602:	fbb0 f3f3 	udiv	r3, r0, r3
 8005606:	3301      	adds	r3, #1
 8005608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800560c:	2b00      	cmp	r3, #0
 800560e:	bf0c      	ite	eq
 8005610:	2301      	moveq	r3, #1
 8005612:	2300      	movne	r3, #0
 8005614:	b2db      	uxtb	r3, r3
 8005616:	e012      	b.n	800563e <HAL_I2C_Init+0x18e>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	1e58      	subs	r0, r3, #1
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6859      	ldr	r1, [r3, #4]
 8005620:	460b      	mov	r3, r1
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	440b      	add	r3, r1
 8005626:	0099      	lsls	r1, r3, #2
 8005628:	440b      	add	r3, r1
 800562a:	fbb0 f3f3 	udiv	r3, r0, r3
 800562e:	3301      	adds	r3, #1
 8005630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005634:	2b00      	cmp	r3, #0
 8005636:	bf0c      	ite	eq
 8005638:	2301      	moveq	r3, #1
 800563a:	2300      	movne	r3, #0
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <HAL_I2C_Init+0x196>
 8005642:	2301      	movs	r3, #1
 8005644:	e022      	b.n	800568c <HAL_I2C_Init+0x1dc>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10e      	bne.n	800566c <HAL_I2C_Init+0x1bc>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	1e58      	subs	r0, r3, #1
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6859      	ldr	r1, [r3, #4]
 8005656:	460b      	mov	r3, r1
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	440b      	add	r3, r1
 800565c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005660:	3301      	adds	r3, #1
 8005662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800566a:	e00f      	b.n	800568c <HAL_I2C_Init+0x1dc>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	1e58      	subs	r0, r3, #1
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6859      	ldr	r1, [r3, #4]
 8005674:	460b      	mov	r3, r1
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	440b      	add	r3, r1
 800567a:	0099      	lsls	r1, r3, #2
 800567c:	440b      	add	r3, r1
 800567e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005682:	3301      	adds	r3, #1
 8005684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005688:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	6809      	ldr	r1, [r1, #0]
 8005690:	4313      	orrs	r3, r2
 8005692:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	69da      	ldr	r2, [r3, #28]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	431a      	orrs	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80056ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6911      	ldr	r1, [r2, #16]
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	68d2      	ldr	r2, [r2, #12]
 80056c6:	4311      	orrs	r1, r2
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6812      	ldr	r2, [r2, #0]
 80056cc:	430b      	orrs	r3, r1
 80056ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	695a      	ldr	r2, [r3, #20]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	431a      	orrs	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0201 	orr.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2220      	movs	r2, #32
 8005706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	000186a0 	.word	0x000186a0
 8005728:	001e847f 	.word	0x001e847f
 800572c:	003d08ff 	.word	0x003d08ff
 8005730:	431bde83 	.word	0x431bde83
 8005734:	10624dd3 	.word	0x10624dd3

08005738 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e264      	b.n	8005c14 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d075      	beq.n	8005842 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005756:	4ba3      	ldr	r3, [pc, #652]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 030c 	and.w	r3, r3, #12
 800575e:	2b04      	cmp	r3, #4
 8005760:	d00c      	beq.n	800577c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005762:	4ba0      	ldr	r3, [pc, #640]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800576a:	2b08      	cmp	r3, #8
 800576c:	d112      	bne.n	8005794 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800576e:	4b9d      	ldr	r3, [pc, #628]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800577a:	d10b      	bne.n	8005794 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800577c:	4b99      	ldr	r3, [pc, #612]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d05b      	beq.n	8005840 <HAL_RCC_OscConfig+0x108>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d157      	bne.n	8005840 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e23f      	b.n	8005c14 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800579c:	d106      	bne.n	80057ac <HAL_RCC_OscConfig+0x74>
 800579e:	4b91      	ldr	r3, [pc, #580]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a90      	ldr	r2, [pc, #576]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 80057a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a8:	6013      	str	r3, [r2, #0]
 80057aa:	e01d      	b.n	80057e8 <HAL_RCC_OscConfig+0xb0>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057b4:	d10c      	bne.n	80057d0 <HAL_RCC_OscConfig+0x98>
 80057b6:	4b8b      	ldr	r3, [pc, #556]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a8a      	ldr	r2, [pc, #552]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 80057bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	4b88      	ldr	r3, [pc, #544]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a87      	ldr	r2, [pc, #540]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 80057c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	e00b      	b.n	80057e8 <HAL_RCC_OscConfig+0xb0>
 80057d0:	4b84      	ldr	r3, [pc, #528]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a83      	ldr	r2, [pc, #524]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 80057d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	4b81      	ldr	r3, [pc, #516]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a80      	ldr	r2, [pc, #512]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 80057e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d013      	beq.n	8005818 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f0:	f7fe fed8 	bl	80045a4 <HAL_GetTick>
 80057f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057f6:	e008      	b.n	800580a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057f8:	f7fe fed4 	bl	80045a4 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b64      	cmp	r3, #100	; 0x64
 8005804:	d901      	bls.n	800580a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e204      	b.n	8005c14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800580a:	4b76      	ldr	r3, [pc, #472]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0f0      	beq.n	80057f8 <HAL_RCC_OscConfig+0xc0>
 8005816:	e014      	b.n	8005842 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005818:	f7fe fec4 	bl	80045a4 <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005820:	f7fe fec0 	bl	80045a4 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b64      	cmp	r3, #100	; 0x64
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e1f0      	b.n	8005c14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005832:	4b6c      	ldr	r3, [pc, #432]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1f0      	bne.n	8005820 <HAL_RCC_OscConfig+0xe8>
 800583e:	e000      	b.n	8005842 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d063      	beq.n	8005916 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800584e:	4b65      	ldr	r3, [pc, #404]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 030c 	and.w	r3, r3, #12
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00b      	beq.n	8005872 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800585a:	4b62      	ldr	r3, [pc, #392]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005862:	2b08      	cmp	r3, #8
 8005864:	d11c      	bne.n	80058a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005866:	4b5f      	ldr	r3, [pc, #380]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d116      	bne.n	80058a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005872:	4b5c      	ldr	r3, [pc, #368]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d005      	beq.n	800588a <HAL_RCC_OscConfig+0x152>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d001      	beq.n	800588a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e1c4      	b.n	8005c14 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800588a:	4b56      	ldr	r3, [pc, #344]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	4952      	ldr	r1, [pc, #328]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 800589a:	4313      	orrs	r3, r2
 800589c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800589e:	e03a      	b.n	8005916 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d020      	beq.n	80058ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058a8:	4b4f      	ldr	r3, [pc, #316]	; (80059e8 <HAL_RCC_OscConfig+0x2b0>)
 80058aa:	2201      	movs	r2, #1
 80058ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ae:	f7fe fe79 	bl	80045a4 <HAL_GetTick>
 80058b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058b4:	e008      	b.n	80058c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058b6:	f7fe fe75 	bl	80045a4 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d901      	bls.n	80058c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e1a5      	b.n	8005c14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058c8:	4b46      	ldr	r3, [pc, #280]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d0f0      	beq.n	80058b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d4:	4b43      	ldr	r3, [pc, #268]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	00db      	lsls	r3, r3, #3
 80058e2:	4940      	ldr	r1, [pc, #256]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	600b      	str	r3, [r1, #0]
 80058e8:	e015      	b.n	8005916 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058ea:	4b3f      	ldr	r3, [pc, #252]	; (80059e8 <HAL_RCC_OscConfig+0x2b0>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f0:	f7fe fe58 	bl	80045a4 <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058f8:	f7fe fe54 	bl	80045a4 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e184      	b.n	8005c14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800590a:	4b36      	ldr	r3, [pc, #216]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1f0      	bne.n	80058f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0308 	and.w	r3, r3, #8
 800591e:	2b00      	cmp	r3, #0
 8005920:	d030      	beq.n	8005984 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d016      	beq.n	8005958 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800592a:	4b30      	ldr	r3, [pc, #192]	; (80059ec <HAL_RCC_OscConfig+0x2b4>)
 800592c:	2201      	movs	r2, #1
 800592e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005930:	f7fe fe38 	bl	80045a4 <HAL_GetTick>
 8005934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005938:	f7fe fe34 	bl	80045a4 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e164      	b.n	8005c14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800594a:	4b26      	ldr	r3, [pc, #152]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 800594c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0f0      	beq.n	8005938 <HAL_RCC_OscConfig+0x200>
 8005956:	e015      	b.n	8005984 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005958:	4b24      	ldr	r3, [pc, #144]	; (80059ec <HAL_RCC_OscConfig+0x2b4>)
 800595a:	2200      	movs	r2, #0
 800595c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800595e:	f7fe fe21 	bl	80045a4 <HAL_GetTick>
 8005962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005964:	e008      	b.n	8005978 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005966:	f7fe fe1d 	bl	80045a4 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d901      	bls.n	8005978 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e14d      	b.n	8005c14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005978:	4b1a      	ldr	r3, [pc, #104]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 800597a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1f0      	bne.n	8005966 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 80a0 	beq.w	8005ad2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005992:	2300      	movs	r3, #0
 8005994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005996:	4b13      	ldr	r3, [pc, #76]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10f      	bne.n	80059c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059a2:	2300      	movs	r3, #0
 80059a4:	60bb      	str	r3, [r7, #8]
 80059a6:	4b0f      	ldr	r3, [pc, #60]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	4a0e      	ldr	r2, [pc, #56]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 80059ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b0:	6413      	str	r3, [r2, #64]	; 0x40
 80059b2:	4b0c      	ldr	r3, [pc, #48]	; (80059e4 <HAL_RCC_OscConfig+0x2ac>)
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ba:	60bb      	str	r3, [r7, #8]
 80059bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059be:	2301      	movs	r3, #1
 80059c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059c2:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <HAL_RCC_OscConfig+0x2b8>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d121      	bne.n	8005a12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059ce:	4b08      	ldr	r3, [pc, #32]	; (80059f0 <HAL_RCC_OscConfig+0x2b8>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a07      	ldr	r2, [pc, #28]	; (80059f0 <HAL_RCC_OscConfig+0x2b8>)
 80059d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059da:	f7fe fde3 	bl	80045a4 <HAL_GetTick>
 80059de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059e0:	e011      	b.n	8005a06 <HAL_RCC_OscConfig+0x2ce>
 80059e2:	bf00      	nop
 80059e4:	40023800 	.word	0x40023800
 80059e8:	42470000 	.word	0x42470000
 80059ec:	42470e80 	.word	0x42470e80
 80059f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059f4:	f7fe fdd6 	bl	80045a4 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e106      	b.n	8005c14 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a06:	4b85      	ldr	r3, [pc, #532]	; (8005c1c <HAL_RCC_OscConfig+0x4e4>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0f0      	beq.n	80059f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d106      	bne.n	8005a28 <HAL_RCC_OscConfig+0x2f0>
 8005a1a:	4b81      	ldr	r3, [pc, #516]	; (8005c20 <HAL_RCC_OscConfig+0x4e8>)
 8005a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1e:	4a80      	ldr	r2, [pc, #512]	; (8005c20 <HAL_RCC_OscConfig+0x4e8>)
 8005a20:	f043 0301 	orr.w	r3, r3, #1
 8005a24:	6713      	str	r3, [r2, #112]	; 0x70
 8005a26:	e01c      	b.n	8005a62 <HAL_RCC_OscConfig+0x32a>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	2b05      	cmp	r3, #5
 8005a2e:	d10c      	bne.n	8005a4a <HAL_RCC_OscConfig+0x312>
 8005a30:	4b7b      	ldr	r3, [pc, #492]	; (8005c20 <HAL_RCC_OscConfig+0x4e8>)
 8005a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a34:	4a7a      	ldr	r2, [pc, #488]	; (8005c20 <HAL_RCC_OscConfig+0x4e8>)
 8005a36:	f043 0304 	orr.w	r3, r3, #4
 8005a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a3c:	4b78      	ldr	r3, [pc, #480]	; (8005c20 <HAL_RCC_OscConfig+0x4e8>)
 8005a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a40:	4a77      	ldr	r2, [pc, #476]	; (8005c20 <HAL_RCC_OscConfig+0x4e8>)
 8005a42:	f043 0301 	orr.w	r3, r3, #1
 8005a46:	6713      	str	r3, [r2, #112]	; 0x70
 8005a48:	e00b      	b.n	8005a62 <HAL_RCC_OscConfig+0x32a>
 8005a4a:	4b75      	ldr	r3, [pc, #468]	; (8005c20 <HAL_RCC_OscConfig+0x4e8>)
 8005a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4e:	4a74      	ldr	r2, [pc, #464]	; (8005c20 <HAL_RCC_OscConfig+0x4e8>)
 8005a50:	f023 0301 	bic.w	r3, r3, #1
 8005a54:	6713      	str	r3, [r2, #112]	; 0x70
 8005a56:	4b72      	ldr	r3, [pc, #456]	; (8005c20 <HAL_RCC_OscConfig+0x4e8>)
 8005a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5a:	4a71      	ldr	r2, [pc, #452]	; (8005c20 <HAL_RCC_OscConfig+0x4e8>)
 8005a5c:	f023 0304 	bic.w	r3, r3, #4
 8005a60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d015      	beq.n	8005a96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a6a:	f7fe fd9b 	bl	80045a4 <HAL_GetTick>
 8005a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a70:	e00a      	b.n	8005a88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a72:	f7fe fd97 	bl	80045a4 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e0c5      	b.n	8005c14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a88:	4b65      	ldr	r3, [pc, #404]	; (8005c20 <HAL_RCC_OscConfig+0x4e8>)
 8005a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0ee      	beq.n	8005a72 <HAL_RCC_OscConfig+0x33a>
 8005a94:	e014      	b.n	8005ac0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a96:	f7fe fd85 	bl	80045a4 <HAL_GetTick>
 8005a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a9c:	e00a      	b.n	8005ab4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a9e:	f7fe fd81 	bl	80045a4 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d901      	bls.n	8005ab4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e0af      	b.n	8005c14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ab4:	4b5a      	ldr	r3, [pc, #360]	; (8005c20 <HAL_RCC_OscConfig+0x4e8>)
 8005ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1ee      	bne.n	8005a9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ac0:	7dfb      	ldrb	r3, [r7, #23]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d105      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ac6:	4b56      	ldr	r3, [pc, #344]	; (8005c20 <HAL_RCC_OscConfig+0x4e8>)
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	4a55      	ldr	r2, [pc, #340]	; (8005c20 <HAL_RCC_OscConfig+0x4e8>)
 8005acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ad0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 809b 	beq.w	8005c12 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005adc:	4b50      	ldr	r3, [pc, #320]	; (8005c20 <HAL_RCC_OscConfig+0x4e8>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f003 030c 	and.w	r3, r3, #12
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d05c      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d141      	bne.n	8005b74 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af0:	4b4c      	ldr	r3, [pc, #304]	; (8005c24 <HAL_RCC_OscConfig+0x4ec>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af6:	f7fe fd55 	bl	80045a4 <HAL_GetTick>
 8005afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005afc:	e008      	b.n	8005b10 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005afe:	f7fe fd51 	bl	80045a4 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e081      	b.n	8005c14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b10:	4b43      	ldr	r3, [pc, #268]	; (8005c20 <HAL_RCC_OscConfig+0x4e8>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1f0      	bne.n	8005afe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	69da      	ldr	r2, [r3, #28]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	431a      	orrs	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	019b      	lsls	r3, r3, #6
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b32:	085b      	lsrs	r3, r3, #1
 8005b34:	3b01      	subs	r3, #1
 8005b36:	041b      	lsls	r3, r3, #16
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3e:	061b      	lsls	r3, r3, #24
 8005b40:	4937      	ldr	r1, [pc, #220]	; (8005c20 <HAL_RCC_OscConfig+0x4e8>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b46:	4b37      	ldr	r3, [pc, #220]	; (8005c24 <HAL_RCC_OscConfig+0x4ec>)
 8005b48:	2201      	movs	r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b4c:	f7fe fd2a 	bl	80045a4 <HAL_GetTick>
 8005b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b52:	e008      	b.n	8005b66 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b54:	f7fe fd26 	bl	80045a4 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e056      	b.n	8005c14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b66:	4b2e      	ldr	r3, [pc, #184]	; (8005c20 <HAL_RCC_OscConfig+0x4e8>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d0f0      	beq.n	8005b54 <HAL_RCC_OscConfig+0x41c>
 8005b72:	e04e      	b.n	8005c12 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b74:	4b2b      	ldr	r3, [pc, #172]	; (8005c24 <HAL_RCC_OscConfig+0x4ec>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b7a:	f7fe fd13 	bl	80045a4 <HAL_GetTick>
 8005b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b80:	e008      	b.n	8005b94 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b82:	f7fe fd0f 	bl	80045a4 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e03f      	b.n	8005c14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b94:	4b22      	ldr	r3, [pc, #136]	; (8005c20 <HAL_RCC_OscConfig+0x4e8>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1f0      	bne.n	8005b82 <HAL_RCC_OscConfig+0x44a>
 8005ba0:	e037      	b.n	8005c12 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d101      	bne.n	8005bae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e032      	b.n	8005c14 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bae:	4b1c      	ldr	r3, [pc, #112]	; (8005c20 <HAL_RCC_OscConfig+0x4e8>)
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d028      	beq.n	8005c0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d121      	bne.n	8005c0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d11a      	bne.n	8005c0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005bde:	4013      	ands	r3, r2
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005be4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d111      	bne.n	8005c0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf4:	085b      	lsrs	r3, r3, #1
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d107      	bne.n	8005c0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c08:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d001      	beq.n	8005c12 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e000      	b.n	8005c14 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3718      	adds	r7, #24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	40007000 	.word	0x40007000
 8005c20:	40023800 	.word	0x40023800
 8005c24:	42470060 	.word	0x42470060

08005c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0cc      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c3c:	4b68      	ldr	r3, [pc, #416]	; (8005de0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d90c      	bls.n	8005c64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c4a:	4b65      	ldr	r3, [pc, #404]	; (8005de0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c52:	4b63      	ldr	r3, [pc, #396]	; (8005de0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d001      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e0b8      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d020      	beq.n	8005cb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d005      	beq.n	8005c88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c7c:	4b59      	ldr	r3, [pc, #356]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	4a58      	ldr	r2, [pc, #352]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0308 	and.w	r3, r3, #8
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d005      	beq.n	8005ca0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c94:	4b53      	ldr	r3, [pc, #332]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	4a52      	ldr	r2, [pc, #328]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ca0:	4b50      	ldr	r3, [pc, #320]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	494d      	ldr	r1, [pc, #308]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d044      	beq.n	8005d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d107      	bne.n	8005cd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cc6:	4b47      	ldr	r3, [pc, #284]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d119      	bne.n	8005d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e07f      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d003      	beq.n	8005ce6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	d107      	bne.n	8005cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ce6:	4b3f      	ldr	r3, [pc, #252]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d109      	bne.n	8005d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e06f      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cf6:	4b3b      	ldr	r3, [pc, #236]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e067      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d06:	4b37      	ldr	r3, [pc, #220]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f023 0203 	bic.w	r2, r3, #3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	4934      	ldr	r1, [pc, #208]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d18:	f7fe fc44 	bl	80045a4 <HAL_GetTick>
 8005d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d1e:	e00a      	b.n	8005d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d20:	f7fe fc40 	bl	80045a4 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e04f      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d36:	4b2b      	ldr	r3, [pc, #172]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f003 020c 	and.w	r2, r3, #12
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d1eb      	bne.n	8005d20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d48:	4b25      	ldr	r3, [pc, #148]	; (8005de0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d20c      	bcs.n	8005d70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d56:	4b22      	ldr	r3, [pc, #136]	; (8005de0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d5e:	4b20      	ldr	r3, [pc, #128]	; (8005de0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d001      	beq.n	8005d70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e032      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d008      	beq.n	8005d8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d7c:	4b19      	ldr	r3, [pc, #100]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	4916      	ldr	r1, [pc, #88]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0308 	and.w	r3, r3, #8
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d009      	beq.n	8005dae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d9a:	4b12      	ldr	r3, [pc, #72]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	490e      	ldr	r1, [pc, #56]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005dae:	f000 f821 	bl	8005df4 <HAL_RCC_GetSysClockFreq>
 8005db2:	4602      	mov	r2, r0
 8005db4:	4b0b      	ldr	r3, [pc, #44]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	091b      	lsrs	r3, r3, #4
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	490a      	ldr	r1, [pc, #40]	; (8005de8 <HAL_RCC_ClockConfig+0x1c0>)
 8005dc0:	5ccb      	ldrb	r3, [r1, r3]
 8005dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc6:	4a09      	ldr	r2, [pc, #36]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005dc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005dca:	4b09      	ldr	r3, [pc, #36]	; (8005df0 <HAL_RCC_ClockConfig+0x1c8>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7fe fba4 	bl	800451c <HAL_InitTick>

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	40023c00 	.word	0x40023c00
 8005de4:	40023800 	.word	0x40023800
 8005de8:	08008fd4 	.word	0x08008fd4
 8005dec:	20000000 	.word	0x20000000
 8005df0:	20000004 	.word	0x20000004

08005df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005df4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005df8:	b084      	sub	sp, #16
 8005dfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	607b      	str	r3, [r7, #4]
 8005e00:	2300      	movs	r3, #0
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	2300      	movs	r3, #0
 8005e06:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e0c:	4b67      	ldr	r3, [pc, #412]	; (8005fac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f003 030c 	and.w	r3, r3, #12
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d00d      	beq.n	8005e34 <HAL_RCC_GetSysClockFreq+0x40>
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	f200 80bd 	bhi.w	8005f98 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <HAL_RCC_GetSysClockFreq+0x34>
 8005e22:	2b04      	cmp	r3, #4
 8005e24:	d003      	beq.n	8005e2e <HAL_RCC_GetSysClockFreq+0x3a>
 8005e26:	e0b7      	b.n	8005f98 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e28:	4b61      	ldr	r3, [pc, #388]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005e2a:	60bb      	str	r3, [r7, #8]
       break;
 8005e2c:	e0b7      	b.n	8005f9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e2e:	4b61      	ldr	r3, [pc, #388]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005e30:	60bb      	str	r3, [r7, #8]
      break;
 8005e32:	e0b4      	b.n	8005f9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e34:	4b5d      	ldr	r3, [pc, #372]	; (8005fac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e3e:	4b5b      	ldr	r3, [pc, #364]	; (8005fac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d04d      	beq.n	8005ee6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e4a:	4b58      	ldr	r3, [pc, #352]	; (8005fac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	099b      	lsrs	r3, r3, #6
 8005e50:	461a      	mov	r2, r3
 8005e52:	f04f 0300 	mov.w	r3, #0
 8005e56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005e5a:	f04f 0100 	mov.w	r1, #0
 8005e5e:	ea02 0800 	and.w	r8, r2, r0
 8005e62:	ea03 0901 	and.w	r9, r3, r1
 8005e66:	4640      	mov	r0, r8
 8005e68:	4649      	mov	r1, r9
 8005e6a:	f04f 0200 	mov.w	r2, #0
 8005e6e:	f04f 0300 	mov.w	r3, #0
 8005e72:	014b      	lsls	r3, r1, #5
 8005e74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005e78:	0142      	lsls	r2, r0, #5
 8005e7a:	4610      	mov	r0, r2
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	ebb0 0008 	subs.w	r0, r0, r8
 8005e82:	eb61 0109 	sbc.w	r1, r1, r9
 8005e86:	f04f 0200 	mov.w	r2, #0
 8005e8a:	f04f 0300 	mov.w	r3, #0
 8005e8e:	018b      	lsls	r3, r1, #6
 8005e90:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005e94:	0182      	lsls	r2, r0, #6
 8005e96:	1a12      	subs	r2, r2, r0
 8005e98:	eb63 0301 	sbc.w	r3, r3, r1
 8005e9c:	f04f 0000 	mov.w	r0, #0
 8005ea0:	f04f 0100 	mov.w	r1, #0
 8005ea4:	00d9      	lsls	r1, r3, #3
 8005ea6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005eaa:	00d0      	lsls	r0, r2, #3
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	eb12 0208 	adds.w	r2, r2, r8
 8005eb4:	eb43 0309 	adc.w	r3, r3, r9
 8005eb8:	f04f 0000 	mov.w	r0, #0
 8005ebc:	f04f 0100 	mov.w	r1, #0
 8005ec0:	0259      	lsls	r1, r3, #9
 8005ec2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005ec6:	0250      	lsls	r0, r2, #9
 8005ec8:	4602      	mov	r2, r0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	4610      	mov	r0, r2
 8005ece:	4619      	mov	r1, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f04f 0300 	mov.w	r3, #0
 8005ed8:	f7fa f9d2 	bl	8000280 <__aeabi_uldivmod>
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	e04a      	b.n	8005f7c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ee6:	4b31      	ldr	r3, [pc, #196]	; (8005fac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	099b      	lsrs	r3, r3, #6
 8005eec:	461a      	mov	r2, r3
 8005eee:	f04f 0300 	mov.w	r3, #0
 8005ef2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ef6:	f04f 0100 	mov.w	r1, #0
 8005efa:	ea02 0400 	and.w	r4, r2, r0
 8005efe:	ea03 0501 	and.w	r5, r3, r1
 8005f02:	4620      	mov	r0, r4
 8005f04:	4629      	mov	r1, r5
 8005f06:	f04f 0200 	mov.w	r2, #0
 8005f0a:	f04f 0300 	mov.w	r3, #0
 8005f0e:	014b      	lsls	r3, r1, #5
 8005f10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f14:	0142      	lsls	r2, r0, #5
 8005f16:	4610      	mov	r0, r2
 8005f18:	4619      	mov	r1, r3
 8005f1a:	1b00      	subs	r0, r0, r4
 8005f1c:	eb61 0105 	sbc.w	r1, r1, r5
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	f04f 0300 	mov.w	r3, #0
 8005f28:	018b      	lsls	r3, r1, #6
 8005f2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f2e:	0182      	lsls	r2, r0, #6
 8005f30:	1a12      	subs	r2, r2, r0
 8005f32:	eb63 0301 	sbc.w	r3, r3, r1
 8005f36:	f04f 0000 	mov.w	r0, #0
 8005f3a:	f04f 0100 	mov.w	r1, #0
 8005f3e:	00d9      	lsls	r1, r3, #3
 8005f40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f44:	00d0      	lsls	r0, r2, #3
 8005f46:	4602      	mov	r2, r0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	1912      	adds	r2, r2, r4
 8005f4c:	eb45 0303 	adc.w	r3, r5, r3
 8005f50:	f04f 0000 	mov.w	r0, #0
 8005f54:	f04f 0100 	mov.w	r1, #0
 8005f58:	0299      	lsls	r1, r3, #10
 8005f5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005f5e:	0290      	lsls	r0, r2, #10
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4610      	mov	r0, r2
 8005f66:	4619      	mov	r1, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	f04f 0300 	mov.w	r3, #0
 8005f70:	f7fa f986 	bl	8000280 <__aeabi_uldivmod>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4613      	mov	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f7c:	4b0b      	ldr	r3, [pc, #44]	; (8005fac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	0c1b      	lsrs	r3, r3, #16
 8005f82:	f003 0303 	and.w	r3, r3, #3
 8005f86:	3301      	adds	r3, #1
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f94:	60bb      	str	r3, [r7, #8]
      break;
 8005f96:	e002      	b.n	8005f9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f98:	4b05      	ldr	r3, [pc, #20]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005f9a:	60bb      	str	r3, [r7, #8]
      break;
 8005f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005faa:	bf00      	nop
 8005fac:	40023800 	.word	0x40023800
 8005fb0:	00f42400 	.word	0x00f42400
 8005fb4:	007a1200 	.word	0x007a1200

08005fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fbc:	4b03      	ldr	r3, [pc, #12]	; (8005fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	20000000 	.word	0x20000000

08005fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005fd4:	f7ff fff0 	bl	8005fb8 <HAL_RCC_GetHCLKFreq>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	4b05      	ldr	r3, [pc, #20]	; (8005ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	0a9b      	lsrs	r3, r3, #10
 8005fe0:	f003 0307 	and.w	r3, r3, #7
 8005fe4:	4903      	ldr	r1, [pc, #12]	; (8005ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fe6:	5ccb      	ldrb	r3, [r1, r3]
 8005fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	40023800 	.word	0x40023800
 8005ff4:	08008fe4 	.word	0x08008fe4

08005ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ffc:	f7ff ffdc 	bl	8005fb8 <HAL_RCC_GetHCLKFreq>
 8006000:	4602      	mov	r2, r0
 8006002:	4b05      	ldr	r3, [pc, #20]	; (8006018 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	0b5b      	lsrs	r3, r3, #13
 8006008:	f003 0307 	and.w	r3, r3, #7
 800600c:	4903      	ldr	r1, [pc, #12]	; (800601c <HAL_RCC_GetPCLK2Freq+0x24>)
 800600e:	5ccb      	ldrb	r3, [r1, r3]
 8006010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006014:	4618      	mov	r0, r3
 8006016:	bd80      	pop	{r7, pc}
 8006018:	40023800 	.word	0x40023800
 800601c:	08008fe4 	.word	0x08008fe4

08006020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e041      	b.n	80060b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d106      	bne.n	800604c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7fd feaa 	bl	8003da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3304      	adds	r3, #4
 800605c:	4619      	mov	r1, r3
 800605e:	4610      	mov	r0, r2
 8006060:	f000 fb42 	bl	80066e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d001      	beq.n	80060d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e046      	b.n	8006166 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a23      	ldr	r2, [pc, #140]	; (8006174 <HAL_TIM_Base_Start+0xb4>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d022      	beq.n	8006130 <HAL_TIM_Base_Start+0x70>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f2:	d01d      	beq.n	8006130 <HAL_TIM_Base_Start+0x70>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a1f      	ldr	r2, [pc, #124]	; (8006178 <HAL_TIM_Base_Start+0xb8>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d018      	beq.n	8006130 <HAL_TIM_Base_Start+0x70>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a1e      	ldr	r2, [pc, #120]	; (800617c <HAL_TIM_Base_Start+0xbc>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d013      	beq.n	8006130 <HAL_TIM_Base_Start+0x70>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a1c      	ldr	r2, [pc, #112]	; (8006180 <HAL_TIM_Base_Start+0xc0>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d00e      	beq.n	8006130 <HAL_TIM_Base_Start+0x70>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a1b      	ldr	r2, [pc, #108]	; (8006184 <HAL_TIM_Base_Start+0xc4>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d009      	beq.n	8006130 <HAL_TIM_Base_Start+0x70>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a19      	ldr	r2, [pc, #100]	; (8006188 <HAL_TIM_Base_Start+0xc8>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d004      	beq.n	8006130 <HAL_TIM_Base_Start+0x70>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a18      	ldr	r2, [pc, #96]	; (800618c <HAL_TIM_Base_Start+0xcc>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d111      	bne.n	8006154 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2b06      	cmp	r3, #6
 8006140:	d010      	beq.n	8006164 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f042 0201 	orr.w	r2, r2, #1
 8006150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006152:	e007      	b.n	8006164 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f042 0201 	orr.w	r2, r2, #1
 8006162:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	40010000 	.word	0x40010000
 8006178:	40000400 	.word	0x40000400
 800617c:	40000800 	.word	0x40000800
 8006180:	40000c00 	.word	0x40000c00
 8006184:	40010400 	.word	0x40010400
 8006188:	40014000 	.word	0x40014000
 800618c:	40001800 	.word	0x40001800

08006190 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e041      	b.n	8006226 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d106      	bne.n	80061bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f839 	bl	800622e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3304      	adds	r3, #4
 80061cc:	4619      	mov	r1, r3
 80061ce:	4610      	mov	r0, r2
 80061d0:	f000 fa8a 	bl	80066e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
	...

08006244 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d109      	bne.n	8006268 <HAL_TIM_PWM_Start+0x24>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b01      	cmp	r3, #1
 800625e:	bf14      	ite	ne
 8006260:	2301      	movne	r3, #1
 8006262:	2300      	moveq	r3, #0
 8006264:	b2db      	uxtb	r3, r3
 8006266:	e022      	b.n	80062ae <HAL_TIM_PWM_Start+0x6a>
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	2b04      	cmp	r3, #4
 800626c:	d109      	bne.n	8006282 <HAL_TIM_PWM_Start+0x3e>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b01      	cmp	r3, #1
 8006278:	bf14      	ite	ne
 800627a:	2301      	movne	r3, #1
 800627c:	2300      	moveq	r3, #0
 800627e:	b2db      	uxtb	r3, r3
 8006280:	e015      	b.n	80062ae <HAL_TIM_PWM_Start+0x6a>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b08      	cmp	r3, #8
 8006286:	d109      	bne.n	800629c <HAL_TIM_PWM_Start+0x58>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b01      	cmp	r3, #1
 8006292:	bf14      	ite	ne
 8006294:	2301      	movne	r3, #1
 8006296:	2300      	moveq	r3, #0
 8006298:	b2db      	uxtb	r3, r3
 800629a:	e008      	b.n	80062ae <HAL_TIM_PWM_Start+0x6a>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	bf14      	ite	ne
 80062a8:	2301      	movne	r3, #1
 80062aa:	2300      	moveq	r3, #0
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e07c      	b.n	80063b0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d104      	bne.n	80062c6 <HAL_TIM_PWM_Start+0x82>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062c4:	e013      	b.n	80062ee <HAL_TIM_PWM_Start+0xaa>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b04      	cmp	r3, #4
 80062ca:	d104      	bne.n	80062d6 <HAL_TIM_PWM_Start+0x92>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2202      	movs	r2, #2
 80062d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062d4:	e00b      	b.n	80062ee <HAL_TIM_PWM_Start+0xaa>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b08      	cmp	r3, #8
 80062da:	d104      	bne.n	80062e6 <HAL_TIM_PWM_Start+0xa2>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062e4:	e003      	b.n	80062ee <HAL_TIM_PWM_Start+0xaa>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2202      	movs	r2, #2
 80062ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2201      	movs	r2, #1
 80062f4:	6839      	ldr	r1, [r7, #0]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 fce0 	bl	8006cbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a2d      	ldr	r2, [pc, #180]	; (80063b8 <HAL_TIM_PWM_Start+0x174>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d004      	beq.n	8006310 <HAL_TIM_PWM_Start+0xcc>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a2c      	ldr	r2, [pc, #176]	; (80063bc <HAL_TIM_PWM_Start+0x178>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d101      	bne.n	8006314 <HAL_TIM_PWM_Start+0xd0>
 8006310:	2301      	movs	r3, #1
 8006312:	e000      	b.n	8006316 <HAL_TIM_PWM_Start+0xd2>
 8006314:	2300      	movs	r3, #0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d007      	beq.n	800632a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006328:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a22      	ldr	r2, [pc, #136]	; (80063b8 <HAL_TIM_PWM_Start+0x174>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d022      	beq.n	800637a <HAL_TIM_PWM_Start+0x136>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800633c:	d01d      	beq.n	800637a <HAL_TIM_PWM_Start+0x136>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a1f      	ldr	r2, [pc, #124]	; (80063c0 <HAL_TIM_PWM_Start+0x17c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d018      	beq.n	800637a <HAL_TIM_PWM_Start+0x136>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a1d      	ldr	r2, [pc, #116]	; (80063c4 <HAL_TIM_PWM_Start+0x180>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d013      	beq.n	800637a <HAL_TIM_PWM_Start+0x136>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a1c      	ldr	r2, [pc, #112]	; (80063c8 <HAL_TIM_PWM_Start+0x184>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00e      	beq.n	800637a <HAL_TIM_PWM_Start+0x136>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a16      	ldr	r2, [pc, #88]	; (80063bc <HAL_TIM_PWM_Start+0x178>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d009      	beq.n	800637a <HAL_TIM_PWM_Start+0x136>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a18      	ldr	r2, [pc, #96]	; (80063cc <HAL_TIM_PWM_Start+0x188>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d004      	beq.n	800637a <HAL_TIM_PWM_Start+0x136>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a16      	ldr	r2, [pc, #88]	; (80063d0 <HAL_TIM_PWM_Start+0x18c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d111      	bne.n	800639e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f003 0307 	and.w	r3, r3, #7
 8006384:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2b06      	cmp	r3, #6
 800638a:	d010      	beq.n	80063ae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0201 	orr.w	r2, r2, #1
 800639a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800639c:	e007      	b.n	80063ae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f042 0201 	orr.w	r2, r2, #1
 80063ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	40010000 	.word	0x40010000
 80063bc:	40010400 	.word	0x40010400
 80063c0:	40000400 	.word	0x40000400
 80063c4:	40000800 	.word	0x40000800
 80063c8:	40000c00 	.word	0x40000c00
 80063cc:	40014000 	.word	0x40014000
 80063d0:	40001800 	.word	0x40001800

080063d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063e0:	2300      	movs	r3, #0
 80063e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d101      	bne.n	80063f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063ee:	2302      	movs	r3, #2
 80063f0:	e0ae      	b.n	8006550 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b0c      	cmp	r3, #12
 80063fe:	f200 809f 	bhi.w	8006540 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006402:	a201      	add	r2, pc, #4	; (adr r2, 8006408 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006408:	0800643d 	.word	0x0800643d
 800640c:	08006541 	.word	0x08006541
 8006410:	08006541 	.word	0x08006541
 8006414:	08006541 	.word	0x08006541
 8006418:	0800647d 	.word	0x0800647d
 800641c:	08006541 	.word	0x08006541
 8006420:	08006541 	.word	0x08006541
 8006424:	08006541 	.word	0x08006541
 8006428:	080064bf 	.word	0x080064bf
 800642c:	08006541 	.word	0x08006541
 8006430:	08006541 	.word	0x08006541
 8006434:	08006541 	.word	0x08006541
 8006438:	080064ff 	.word	0x080064ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68b9      	ldr	r1, [r7, #8]
 8006442:	4618      	mov	r0, r3
 8006444:	f000 f9f0 	bl	8006828 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699a      	ldr	r2, [r3, #24]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0208 	orr.w	r2, r2, #8
 8006456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699a      	ldr	r2, [r3, #24]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0204 	bic.w	r2, r2, #4
 8006466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6999      	ldr	r1, [r3, #24]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	691a      	ldr	r2, [r3, #16]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	619a      	str	r2, [r3, #24]
      break;
 800647a:	e064      	b.n	8006546 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68b9      	ldr	r1, [r7, #8]
 8006482:	4618      	mov	r0, r3
 8006484:	f000 fa40 	bl	8006908 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699a      	ldr	r2, [r3, #24]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699a      	ldr	r2, [r3, #24]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6999      	ldr	r1, [r3, #24]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	021a      	lsls	r2, r3, #8
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	619a      	str	r2, [r3, #24]
      break;
 80064bc:	e043      	b.n	8006546 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68b9      	ldr	r1, [r7, #8]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 fa95 	bl	80069f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69da      	ldr	r2, [r3, #28]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f042 0208 	orr.w	r2, r2, #8
 80064d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	69da      	ldr	r2, [r3, #28]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 0204 	bic.w	r2, r2, #4
 80064e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69d9      	ldr	r1, [r3, #28]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	691a      	ldr	r2, [r3, #16]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	430a      	orrs	r2, r1
 80064fa:	61da      	str	r2, [r3, #28]
      break;
 80064fc:	e023      	b.n	8006546 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68b9      	ldr	r1, [r7, #8]
 8006504:	4618      	mov	r0, r3
 8006506:	f000 fae9 	bl	8006adc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	69da      	ldr	r2, [r3, #28]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69da      	ldr	r2, [r3, #28]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	69d9      	ldr	r1, [r3, #28]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	021a      	lsls	r2, r3, #8
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	61da      	str	r2, [r3, #28]
      break;
 800653e:	e002      	b.n	8006546 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	75fb      	strb	r3, [r7, #23]
      break;
 8006544:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800654e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3718      	adds	r7, #24
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800656c:	2b01      	cmp	r3, #1
 800656e:	d101      	bne.n	8006574 <HAL_TIM_ConfigClockSource+0x1c>
 8006570:	2302      	movs	r3, #2
 8006572:	e0b4      	b.n	80066de <HAL_TIM_ConfigClockSource+0x186>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800659a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ac:	d03e      	beq.n	800662c <HAL_TIM_ConfigClockSource+0xd4>
 80065ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b2:	f200 8087 	bhi.w	80066c4 <HAL_TIM_ConfigClockSource+0x16c>
 80065b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ba:	f000 8086 	beq.w	80066ca <HAL_TIM_ConfigClockSource+0x172>
 80065be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c2:	d87f      	bhi.n	80066c4 <HAL_TIM_ConfigClockSource+0x16c>
 80065c4:	2b70      	cmp	r3, #112	; 0x70
 80065c6:	d01a      	beq.n	80065fe <HAL_TIM_ConfigClockSource+0xa6>
 80065c8:	2b70      	cmp	r3, #112	; 0x70
 80065ca:	d87b      	bhi.n	80066c4 <HAL_TIM_ConfigClockSource+0x16c>
 80065cc:	2b60      	cmp	r3, #96	; 0x60
 80065ce:	d050      	beq.n	8006672 <HAL_TIM_ConfigClockSource+0x11a>
 80065d0:	2b60      	cmp	r3, #96	; 0x60
 80065d2:	d877      	bhi.n	80066c4 <HAL_TIM_ConfigClockSource+0x16c>
 80065d4:	2b50      	cmp	r3, #80	; 0x50
 80065d6:	d03c      	beq.n	8006652 <HAL_TIM_ConfigClockSource+0xfa>
 80065d8:	2b50      	cmp	r3, #80	; 0x50
 80065da:	d873      	bhi.n	80066c4 <HAL_TIM_ConfigClockSource+0x16c>
 80065dc:	2b40      	cmp	r3, #64	; 0x40
 80065de:	d058      	beq.n	8006692 <HAL_TIM_ConfigClockSource+0x13a>
 80065e0:	2b40      	cmp	r3, #64	; 0x40
 80065e2:	d86f      	bhi.n	80066c4 <HAL_TIM_ConfigClockSource+0x16c>
 80065e4:	2b30      	cmp	r3, #48	; 0x30
 80065e6:	d064      	beq.n	80066b2 <HAL_TIM_ConfigClockSource+0x15a>
 80065e8:	2b30      	cmp	r3, #48	; 0x30
 80065ea:	d86b      	bhi.n	80066c4 <HAL_TIM_ConfigClockSource+0x16c>
 80065ec:	2b20      	cmp	r3, #32
 80065ee:	d060      	beq.n	80066b2 <HAL_TIM_ConfigClockSource+0x15a>
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	d867      	bhi.n	80066c4 <HAL_TIM_ConfigClockSource+0x16c>
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d05c      	beq.n	80066b2 <HAL_TIM_ConfigClockSource+0x15a>
 80065f8:	2b10      	cmp	r3, #16
 80065fa:	d05a      	beq.n	80066b2 <HAL_TIM_ConfigClockSource+0x15a>
 80065fc:	e062      	b.n	80066c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6818      	ldr	r0, [r3, #0]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	6899      	ldr	r1, [r3, #8]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	f000 fb35 	bl	8006c7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006620:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	609a      	str	r2, [r3, #8]
      break;
 800662a:	e04f      	b.n	80066cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6818      	ldr	r0, [r3, #0]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	6899      	ldr	r1, [r3, #8]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f000 fb1e 	bl	8006c7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689a      	ldr	r2, [r3, #8]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800664e:	609a      	str	r2, [r3, #8]
      break;
 8006650:	e03c      	b.n	80066cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	6859      	ldr	r1, [r3, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	461a      	mov	r2, r3
 8006660:	f000 fa92 	bl	8006b88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2150      	movs	r1, #80	; 0x50
 800666a:	4618      	mov	r0, r3
 800666c:	f000 faeb 	bl	8006c46 <TIM_ITRx_SetConfig>
      break;
 8006670:	e02c      	b.n	80066cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	6859      	ldr	r1, [r3, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	461a      	mov	r2, r3
 8006680:	f000 fab1 	bl	8006be6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2160      	movs	r1, #96	; 0x60
 800668a:	4618      	mov	r0, r3
 800668c:	f000 fadb 	bl	8006c46 <TIM_ITRx_SetConfig>
      break;
 8006690:	e01c      	b.n	80066cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6818      	ldr	r0, [r3, #0]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	6859      	ldr	r1, [r3, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	461a      	mov	r2, r3
 80066a0:	f000 fa72 	bl	8006b88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2140      	movs	r1, #64	; 0x40
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 facb 	bl	8006c46 <TIM_ITRx_SetConfig>
      break;
 80066b0:	e00c      	b.n	80066cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4619      	mov	r1, r3
 80066bc:	4610      	mov	r0, r2
 80066be:	f000 fac2 	bl	8006c46 <TIM_ITRx_SetConfig>
      break;
 80066c2:	e003      	b.n	80066cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	73fb      	strb	r3, [r7, #15]
      break;
 80066c8:	e000      	b.n	80066cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
	...

080066e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a40      	ldr	r2, [pc, #256]	; (80067fc <TIM_Base_SetConfig+0x114>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d013      	beq.n	8006728 <TIM_Base_SetConfig+0x40>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006706:	d00f      	beq.n	8006728 <TIM_Base_SetConfig+0x40>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a3d      	ldr	r2, [pc, #244]	; (8006800 <TIM_Base_SetConfig+0x118>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d00b      	beq.n	8006728 <TIM_Base_SetConfig+0x40>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a3c      	ldr	r2, [pc, #240]	; (8006804 <TIM_Base_SetConfig+0x11c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d007      	beq.n	8006728 <TIM_Base_SetConfig+0x40>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a3b      	ldr	r2, [pc, #236]	; (8006808 <TIM_Base_SetConfig+0x120>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d003      	beq.n	8006728 <TIM_Base_SetConfig+0x40>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a3a      	ldr	r2, [pc, #232]	; (800680c <TIM_Base_SetConfig+0x124>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d108      	bne.n	800673a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a2f      	ldr	r2, [pc, #188]	; (80067fc <TIM_Base_SetConfig+0x114>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d02b      	beq.n	800679a <TIM_Base_SetConfig+0xb2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006748:	d027      	beq.n	800679a <TIM_Base_SetConfig+0xb2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a2c      	ldr	r2, [pc, #176]	; (8006800 <TIM_Base_SetConfig+0x118>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d023      	beq.n	800679a <TIM_Base_SetConfig+0xb2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a2b      	ldr	r2, [pc, #172]	; (8006804 <TIM_Base_SetConfig+0x11c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d01f      	beq.n	800679a <TIM_Base_SetConfig+0xb2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a2a      	ldr	r2, [pc, #168]	; (8006808 <TIM_Base_SetConfig+0x120>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d01b      	beq.n	800679a <TIM_Base_SetConfig+0xb2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a29      	ldr	r2, [pc, #164]	; (800680c <TIM_Base_SetConfig+0x124>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d017      	beq.n	800679a <TIM_Base_SetConfig+0xb2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a28      	ldr	r2, [pc, #160]	; (8006810 <TIM_Base_SetConfig+0x128>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d013      	beq.n	800679a <TIM_Base_SetConfig+0xb2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a27      	ldr	r2, [pc, #156]	; (8006814 <TIM_Base_SetConfig+0x12c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00f      	beq.n	800679a <TIM_Base_SetConfig+0xb2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a26      	ldr	r2, [pc, #152]	; (8006818 <TIM_Base_SetConfig+0x130>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00b      	beq.n	800679a <TIM_Base_SetConfig+0xb2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a25      	ldr	r2, [pc, #148]	; (800681c <TIM_Base_SetConfig+0x134>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d007      	beq.n	800679a <TIM_Base_SetConfig+0xb2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a24      	ldr	r2, [pc, #144]	; (8006820 <TIM_Base_SetConfig+0x138>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d003      	beq.n	800679a <TIM_Base_SetConfig+0xb2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a23      	ldr	r2, [pc, #140]	; (8006824 <TIM_Base_SetConfig+0x13c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d108      	bne.n	80067ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a0a      	ldr	r2, [pc, #40]	; (80067fc <TIM_Base_SetConfig+0x114>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d003      	beq.n	80067e0 <TIM_Base_SetConfig+0xf8>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a0c      	ldr	r2, [pc, #48]	; (800680c <TIM_Base_SetConfig+0x124>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d103      	bne.n	80067e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	691a      	ldr	r2, [r3, #16]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	615a      	str	r2, [r3, #20]
}
 80067ee:	bf00      	nop
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	40010000 	.word	0x40010000
 8006800:	40000400 	.word	0x40000400
 8006804:	40000800 	.word	0x40000800
 8006808:	40000c00 	.word	0x40000c00
 800680c:	40010400 	.word	0x40010400
 8006810:	40014000 	.word	0x40014000
 8006814:	40014400 	.word	0x40014400
 8006818:	40014800 	.word	0x40014800
 800681c:	40001800 	.word	0x40001800
 8006820:	40001c00 	.word	0x40001c00
 8006824:	40002000 	.word	0x40002000

08006828 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	f023 0201 	bic.w	r2, r3, #1
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0303 	bic.w	r3, r3, #3
 800685e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	4313      	orrs	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f023 0302 	bic.w	r3, r3, #2
 8006870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	4313      	orrs	r3, r2
 800687a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a20      	ldr	r2, [pc, #128]	; (8006900 <TIM_OC1_SetConfig+0xd8>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d003      	beq.n	800688c <TIM_OC1_SetConfig+0x64>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a1f      	ldr	r2, [pc, #124]	; (8006904 <TIM_OC1_SetConfig+0xdc>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d10c      	bne.n	80068a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	f023 0308 	bic.w	r3, r3, #8
 8006892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	4313      	orrs	r3, r2
 800689c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f023 0304 	bic.w	r3, r3, #4
 80068a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a15      	ldr	r2, [pc, #84]	; (8006900 <TIM_OC1_SetConfig+0xd8>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d003      	beq.n	80068b6 <TIM_OC1_SetConfig+0x8e>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a14      	ldr	r2, [pc, #80]	; (8006904 <TIM_OC1_SetConfig+0xdc>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d111      	bne.n	80068da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	621a      	str	r2, [r3, #32]
}
 80068f4:	bf00      	nop
 80068f6:	371c      	adds	r7, #28
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	40010000 	.word	0x40010000
 8006904:	40010400 	.word	0x40010400

08006908 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	f023 0210 	bic.w	r2, r3, #16
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800693e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	021b      	lsls	r3, r3, #8
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	4313      	orrs	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f023 0320 	bic.w	r3, r3, #32
 8006952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4313      	orrs	r3, r2
 800695e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a22      	ldr	r2, [pc, #136]	; (80069ec <TIM_OC2_SetConfig+0xe4>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d003      	beq.n	8006970 <TIM_OC2_SetConfig+0x68>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a21      	ldr	r2, [pc, #132]	; (80069f0 <TIM_OC2_SetConfig+0xe8>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d10d      	bne.n	800698c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	011b      	lsls	r3, r3, #4
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	4313      	orrs	r3, r2
 8006982:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800698a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a17      	ldr	r2, [pc, #92]	; (80069ec <TIM_OC2_SetConfig+0xe4>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d003      	beq.n	800699c <TIM_OC2_SetConfig+0x94>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a16      	ldr	r2, [pc, #88]	; (80069f0 <TIM_OC2_SetConfig+0xe8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d113      	bne.n	80069c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	621a      	str	r2, [r3, #32]
}
 80069de:	bf00      	nop
 80069e0:	371c      	adds	r7, #28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	40010000 	.word	0x40010000
 80069f0:	40010400 	.word	0x40010400

080069f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 0303 	bic.w	r3, r3, #3
 8006a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	021b      	lsls	r3, r3, #8
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a21      	ldr	r2, [pc, #132]	; (8006ad4 <TIM_OC3_SetConfig+0xe0>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d003      	beq.n	8006a5a <TIM_OC3_SetConfig+0x66>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a20      	ldr	r2, [pc, #128]	; (8006ad8 <TIM_OC3_SetConfig+0xe4>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d10d      	bne.n	8006a76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	021b      	lsls	r3, r3, #8
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a16      	ldr	r2, [pc, #88]	; (8006ad4 <TIM_OC3_SetConfig+0xe0>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d003      	beq.n	8006a86 <TIM_OC3_SetConfig+0x92>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a15      	ldr	r2, [pc, #84]	; (8006ad8 <TIM_OC3_SetConfig+0xe4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d113      	bne.n	8006aae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	011b      	lsls	r3, r3, #4
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	011b      	lsls	r3, r3, #4
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	621a      	str	r2, [r3, #32]
}
 8006ac8:	bf00      	nop
 8006aca:	371c      	adds	r7, #28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	40010000 	.word	0x40010000
 8006ad8:	40010400 	.word	0x40010400

08006adc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	021b      	lsls	r3, r3, #8
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	031b      	lsls	r3, r3, #12
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a12      	ldr	r2, [pc, #72]	; (8006b80 <TIM_OC4_SetConfig+0xa4>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d003      	beq.n	8006b44 <TIM_OC4_SetConfig+0x68>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a11      	ldr	r2, [pc, #68]	; (8006b84 <TIM_OC4_SetConfig+0xa8>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d109      	bne.n	8006b58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	019b      	lsls	r3, r3, #6
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	621a      	str	r2, [r3, #32]
}
 8006b72:	bf00      	nop
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	40010000 	.word	0x40010000
 8006b84:	40010400 	.word	0x40010400

08006b88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b087      	sub	sp, #28
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	f023 0201 	bic.w	r2, r3, #1
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	011b      	lsls	r3, r3, #4
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	f023 030a 	bic.w	r3, r3, #10
 8006bc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	621a      	str	r2, [r3, #32]
}
 8006bda:	bf00      	nop
 8006bdc:	371c      	adds	r7, #28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b087      	sub	sp, #28
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	60f8      	str	r0, [r7, #12]
 8006bee:	60b9      	str	r1, [r7, #8]
 8006bf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	f023 0210 	bic.w	r2, r3, #16
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	031b      	lsls	r3, r3, #12
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	011b      	lsls	r3, r3, #4
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	621a      	str	r2, [r3, #32]
}
 8006c3a:	bf00      	nop
 8006c3c:	371c      	adds	r7, #28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b085      	sub	sp, #20
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	f043 0307 	orr.w	r3, r3, #7
 8006c68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	609a      	str	r2, [r3, #8]
}
 8006c70:	bf00      	nop
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b087      	sub	sp, #28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
 8006c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	021a      	lsls	r2, r3, #8
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	431a      	orrs	r2, r3
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	609a      	str	r2, [r3, #8]
}
 8006cb0:	bf00      	nop
 8006cb2:	371c      	adds	r7, #28
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	f003 031f 	and.w	r3, r3, #31
 8006cce:	2201      	movs	r2, #1
 8006cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6a1a      	ldr	r2, [r3, #32]
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	43db      	mvns	r3, r3
 8006cde:	401a      	ands	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a1a      	ldr	r2, [r3, #32]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f003 031f 	and.w	r3, r3, #31
 8006cee:	6879      	ldr	r1, [r7, #4]
 8006cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	621a      	str	r2, [r3, #32]
}
 8006cfa:	bf00      	nop
 8006cfc:	371c      	adds	r7, #28
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
	...

08006d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d101      	bne.n	8006d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	e05a      	b.n	8006dd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a21      	ldr	r2, [pc, #132]	; (8006de4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d022      	beq.n	8006daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d6c:	d01d      	beq.n	8006daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a1d      	ldr	r2, [pc, #116]	; (8006de8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d018      	beq.n	8006daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a1b      	ldr	r2, [pc, #108]	; (8006dec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d013      	beq.n	8006daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a1a      	ldr	r2, [pc, #104]	; (8006df0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d00e      	beq.n	8006daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a18      	ldr	r2, [pc, #96]	; (8006df4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d009      	beq.n	8006daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a17      	ldr	r2, [pc, #92]	; (8006df8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d004      	beq.n	8006daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a15      	ldr	r2, [pc, #84]	; (8006dfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d10c      	bne.n	8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006db0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	40010000 	.word	0x40010000
 8006de8:	40000400 	.word	0x40000400
 8006dec:	40000800 	.word	0x40000800
 8006df0:	40000c00 	.word	0x40000c00
 8006df4:	40010400 	.word	0x40010400
 8006df8:	40014000 	.word	0x40014000
 8006dfc:	40001800 	.word	0x40001800

08006e00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d101      	bne.n	8006e1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e18:	2302      	movs	r3, #2
 8006e1a:	e03d      	b.n	8006e98 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e03f      	b.n	8006f36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d106      	bne.n	8006ed0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7fd f93a 	bl	8004144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2224      	movs	r2, #36	; 0x24
 8006ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68da      	ldr	r2, [r3, #12]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ee6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fe1d 	bl	8007b28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	691a      	ldr	r2, [r3, #16]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006efc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	695a      	ldr	r2, [r3, #20]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68da      	ldr	r2, [r3, #12]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2220      	movs	r2, #32
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b08a      	sub	sp, #40	; 0x28
 8006f42:	af02      	add	r7, sp, #8
 8006f44:	60f8      	str	r0, [r7, #12]
 8006f46:	60b9      	str	r1, [r7, #8]
 8006f48:	603b      	str	r3, [r7, #0]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b20      	cmp	r3, #32
 8006f5c:	d17c      	bne.n	8007058 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <HAL_UART_Transmit+0x2c>
 8006f64:	88fb      	ldrh	r3, [r7, #6]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e075      	b.n	800705a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d101      	bne.n	8006f7c <HAL_UART_Transmit+0x3e>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e06e      	b.n	800705a <HAL_UART_Transmit+0x11c>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2221      	movs	r2, #33	; 0x21
 8006f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f92:	f7fd fb07 	bl	80045a4 <HAL_GetTick>
 8006f96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	88fa      	ldrh	r2, [r7, #6]
 8006f9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	88fa      	ldrh	r2, [r7, #6]
 8006fa2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fac:	d108      	bne.n	8006fc0 <HAL_UART_Transmit+0x82>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d104      	bne.n	8006fc0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	61bb      	str	r3, [r7, #24]
 8006fbe:	e003      	b.n	8006fc8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006fd0:	e02a      	b.n	8007028 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	2180      	movs	r1, #128	; 0x80
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f000 fb9b 	bl	8007718 <UART_WaitOnFlagUntilTimeout>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e036      	b.n	800705a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10b      	bne.n	800700a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007000:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	3302      	adds	r3, #2
 8007006:	61bb      	str	r3, [r7, #24]
 8007008:	e007      	b.n	800701a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	781a      	ldrb	r2, [r3, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	3301      	adds	r3, #1
 8007018:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800701e:	b29b      	uxth	r3, r3
 8007020:	3b01      	subs	r3, #1
 8007022:	b29a      	uxth	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800702c:	b29b      	uxth	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1cf      	bne.n	8006fd2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2200      	movs	r2, #0
 800703a:	2140      	movs	r1, #64	; 0x40
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f000 fb6b 	bl	8007718 <UART_WaitOnFlagUntilTimeout>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e006      	b.n	800705a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2220      	movs	r2, #32
 8007050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	e000      	b.n	800705a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007058:	2302      	movs	r3, #2
  }
}
 800705a:	4618      	mov	r0, r3
 800705c:	3720      	adds	r7, #32
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b08a      	sub	sp, #40	; 0x28
 8007066:	af02      	add	r7, sp, #8
 8007068:	60f8      	str	r0, [r7, #12]
 800706a:	60b9      	str	r1, [r7, #8]
 800706c:	603b      	str	r3, [r7, #0]
 800706e:	4613      	mov	r3, r2
 8007070:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b20      	cmp	r3, #32
 8007080:	f040 808c 	bne.w	800719c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d002      	beq.n	8007090 <HAL_UART_Receive+0x2e>
 800708a:	88fb      	ldrh	r3, [r7, #6]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d101      	bne.n	8007094 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e084      	b.n	800719e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800709a:	2b01      	cmp	r3, #1
 800709c:	d101      	bne.n	80070a2 <HAL_UART_Receive+0x40>
 800709e:	2302      	movs	r3, #2
 80070a0:	e07d      	b.n	800719e <HAL_UART_Receive+0x13c>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2222      	movs	r2, #34	; 0x22
 80070b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070be:	f7fd fa71 	bl	80045a4 <HAL_GetTick>
 80070c2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	88fa      	ldrh	r2, [r7, #6]
 80070c8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	88fa      	ldrh	r2, [r7, #6]
 80070ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070d8:	d108      	bne.n	80070ec <HAL_UART_Receive+0x8a>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d104      	bne.n	80070ec <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80070e2:	2300      	movs	r3, #0
 80070e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	61bb      	str	r3, [r7, #24]
 80070ea:	e003      	b.n	80070f4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070f0:	2300      	movs	r3, #0
 80070f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80070fc:	e043      	b.n	8007186 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2200      	movs	r2, #0
 8007106:	2120      	movs	r1, #32
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f000 fb05 	bl	8007718 <UART_WaitOnFlagUntilTimeout>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d001      	beq.n	8007118 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e042      	b.n	800719e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10c      	bne.n	8007138 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	b29b      	uxth	r3, r3
 8007126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712a:	b29a      	uxth	r2, r3
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	3302      	adds	r3, #2
 8007134:	61bb      	str	r3, [r7, #24]
 8007136:	e01f      	b.n	8007178 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007140:	d007      	beq.n	8007152 <HAL_UART_Receive+0xf0>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10a      	bne.n	8007160 <HAL_UART_Receive+0xfe>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d106      	bne.n	8007160 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	b2da      	uxtb	r2, r3
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	701a      	strb	r2, [r3, #0]
 800715e:	e008      	b.n	8007172 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	b2db      	uxtb	r3, r3
 8007168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800716c:	b2da      	uxtb	r2, r3
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	3301      	adds	r3, #1
 8007176:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800717c:	b29b      	uxth	r3, r3
 800717e:	3b01      	subs	r3, #1
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800718a:	b29b      	uxth	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1b6      	bne.n	80070fe <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2220      	movs	r2, #32
 8007194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	e000      	b.n	800719e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800719c:	2302      	movs	r3, #2
  }
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3720      	adds	r7, #32
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
	...

080071a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b0ba      	sub	sp, #232	; 0xe8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80071ce:	2300      	movs	r3, #0
 80071d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80071d4:	2300      	movs	r3, #0
 80071d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071de:	f003 030f 	and.w	r3, r3, #15
 80071e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80071e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10f      	bne.n	800720e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f2:	f003 0320 	and.w	r3, r3, #32
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d009      	beq.n	800720e <HAL_UART_IRQHandler+0x66>
 80071fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071fe:	f003 0320 	and.w	r3, r3, #32
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fbd3 	bl	80079b2 <UART_Receive_IT>
      return;
 800720c:	e256      	b.n	80076bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800720e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 80de 	beq.w	80073d4 <HAL_UART_IRQHandler+0x22c>
 8007218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	2b00      	cmp	r3, #0
 8007222:	d106      	bne.n	8007232 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007228:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 80d1 	beq.w	80073d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00b      	beq.n	8007256 <HAL_UART_IRQHandler+0xae>
 800723e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007246:	2b00      	cmp	r3, #0
 8007248:	d005      	beq.n	8007256 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724e:	f043 0201 	orr.w	r2, r3, #1
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800725a:	f003 0304 	and.w	r3, r3, #4
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00b      	beq.n	800727a <HAL_UART_IRQHandler+0xd2>
 8007262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b00      	cmp	r3, #0
 800726c:	d005      	beq.n	800727a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	f043 0202 	orr.w	r2, r3, #2
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800727a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800727e:	f003 0302 	and.w	r3, r3, #2
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00b      	beq.n	800729e <HAL_UART_IRQHandler+0xf6>
 8007286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b00      	cmp	r3, #0
 8007290:	d005      	beq.n	800729e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007296:	f043 0204 	orr.w	r2, r3, #4
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800729e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a2:	f003 0308 	and.w	r3, r3, #8
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d011      	beq.n	80072ce <HAL_UART_IRQHandler+0x126>
 80072aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ae:	f003 0320 	and.w	r3, r3, #32
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d105      	bne.n	80072c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80072b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d005      	beq.n	80072ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c6:	f043 0208 	orr.w	r2, r3, #8
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f000 81ed 	beq.w	80076b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072dc:	f003 0320 	and.w	r3, r3, #32
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d008      	beq.n	80072f6 <HAL_UART_IRQHandler+0x14e>
 80072e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072e8:	f003 0320 	and.w	r3, r3, #32
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fb5e 	bl	80079b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007300:	2b40      	cmp	r3, #64	; 0x40
 8007302:	bf0c      	ite	eq
 8007304:	2301      	moveq	r3, #1
 8007306:	2300      	movne	r3, #0
 8007308:	b2db      	uxtb	r3, r3
 800730a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007312:	f003 0308 	and.w	r3, r3, #8
 8007316:	2b00      	cmp	r3, #0
 8007318:	d103      	bne.n	8007322 <HAL_UART_IRQHandler+0x17a>
 800731a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800731e:	2b00      	cmp	r3, #0
 8007320:	d04f      	beq.n	80073c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fa66 	bl	80077f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007332:	2b40      	cmp	r3, #64	; 0x40
 8007334:	d141      	bne.n	80073ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3314      	adds	r3, #20
 800733c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007340:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007344:	e853 3f00 	ldrex	r3, [r3]
 8007348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800734c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007354:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3314      	adds	r3, #20
 800735e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007362:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800736e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007372:	e841 2300 	strex	r3, r2, [r1]
 8007376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800737a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1d9      	bne.n	8007336 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007386:	2b00      	cmp	r3, #0
 8007388:	d013      	beq.n	80073b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738e:	4a7d      	ldr	r2, [pc, #500]	; (8007584 <HAL_UART_IRQHandler+0x3dc>)
 8007390:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007396:	4618      	mov	r0, r3
 8007398:	f7fd fe81 	bl	800509e <HAL_DMA_Abort_IT>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d016      	beq.n	80073d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073ac:	4610      	mov	r0, r2
 80073ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b0:	e00e      	b.n	80073d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f99a 	bl	80076ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b8:	e00a      	b.n	80073d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f996 	bl	80076ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c0:	e006      	b.n	80073d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 f992 	bl	80076ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80073ce:	e170      	b.n	80076b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d0:	bf00      	nop
    return;
 80073d2:	e16e      	b.n	80076b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d8:	2b01      	cmp	r3, #1
 80073da:	f040 814a 	bne.w	8007672 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80073de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e2:	f003 0310 	and.w	r3, r3, #16
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 8143 	beq.w	8007672 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80073ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073f0:	f003 0310 	and.w	r3, r3, #16
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 813c 	beq.w	8007672 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073fa:	2300      	movs	r3, #0
 80073fc:	60bb      	str	r3, [r7, #8]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	60bb      	str	r3, [r7, #8]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	60bb      	str	r3, [r7, #8]
 800740e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800741a:	2b40      	cmp	r3, #64	; 0x40
 800741c:	f040 80b4 	bne.w	8007588 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800742c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 8140 	beq.w	80076b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800743a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800743e:	429a      	cmp	r2, r3
 8007440:	f080 8139 	bcs.w	80076b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800744a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007456:	f000 8088 	beq.w	800756a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	330c      	adds	r3, #12
 8007460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007464:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007468:	e853 3f00 	ldrex	r3, [r3]
 800746c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007470:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007478:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	330c      	adds	r3, #12
 8007482:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007486:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800748a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007492:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007496:	e841 2300 	strex	r3, r2, [r1]
 800749a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800749e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1d9      	bne.n	800745a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3314      	adds	r3, #20
 80074ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074b0:	e853 3f00 	ldrex	r3, [r3]
 80074b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80074b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074b8:	f023 0301 	bic.w	r3, r3, #1
 80074bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	3314      	adds	r3, #20
 80074c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80074ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80074d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074d6:	e841 2300 	strex	r3, r2, [r1]
 80074da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1e1      	bne.n	80074a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	3314      	adds	r3, #20
 80074e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074ec:	e853 3f00 	ldrex	r3, [r3]
 80074f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80074f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3314      	adds	r3, #20
 8007502:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007506:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007508:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800750c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800750e:	e841 2300 	strex	r3, r2, [r1]
 8007512:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1e3      	bne.n	80074e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2220      	movs	r2, #32
 800751e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	330c      	adds	r3, #12
 800752e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007532:	e853 3f00 	ldrex	r3, [r3]
 8007536:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800753a:	f023 0310 	bic.w	r3, r3, #16
 800753e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	330c      	adds	r3, #12
 8007548:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800754c:	65ba      	str	r2, [r7, #88]	; 0x58
 800754e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007550:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007552:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007554:	e841 2300 	strex	r3, r2, [r1]
 8007558:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800755a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1e3      	bne.n	8007528 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007564:	4618      	mov	r0, r3
 8007566:	f7fd fd2a 	bl	8004fbe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007572:	b29b      	uxth	r3, r3
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	b29b      	uxth	r3, r3
 8007578:	4619      	mov	r1, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f8c0 	bl	8007700 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007580:	e099      	b.n	80076b6 <HAL_UART_IRQHandler+0x50e>
 8007582:	bf00      	nop
 8007584:	080078bb 	.word	0x080078bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007590:	b29b      	uxth	r3, r3
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800759c:	b29b      	uxth	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f000 808b 	beq.w	80076ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80075a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 8086 	beq.w	80076ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	330c      	adds	r3, #12
 80075b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b8:	e853 3f00 	ldrex	r3, [r3]
 80075bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	330c      	adds	r3, #12
 80075ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80075d2:	647a      	str	r2, [r7, #68]	; 0x44
 80075d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075da:	e841 2300 	strex	r3, r2, [r1]
 80075de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1e3      	bne.n	80075ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3314      	adds	r3, #20
 80075ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f0:	e853 3f00 	ldrex	r3, [r3]
 80075f4:	623b      	str	r3, [r7, #32]
   return(result);
 80075f6:	6a3b      	ldr	r3, [r7, #32]
 80075f8:	f023 0301 	bic.w	r3, r3, #1
 80075fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3314      	adds	r3, #20
 8007606:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800760a:	633a      	str	r2, [r7, #48]	; 0x30
 800760c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007612:	e841 2300 	strex	r3, r2, [r1]
 8007616:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1e3      	bne.n	80075e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2220      	movs	r2, #32
 8007622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	330c      	adds	r3, #12
 8007632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	60fb      	str	r3, [r7, #12]
   return(result);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f023 0310 	bic.w	r3, r3, #16
 8007642:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	330c      	adds	r3, #12
 800764c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007650:	61fa      	str	r2, [r7, #28]
 8007652:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007654:	69b9      	ldr	r1, [r7, #24]
 8007656:	69fa      	ldr	r2, [r7, #28]
 8007658:	e841 2300 	strex	r3, r2, [r1]
 800765c:	617b      	str	r3, [r7, #20]
   return(result);
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1e3      	bne.n	800762c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007664:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007668:	4619      	mov	r1, r3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f848 	bl	8007700 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007670:	e023      	b.n	80076ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800767a:	2b00      	cmp	r3, #0
 800767c:	d009      	beq.n	8007692 <HAL_UART_IRQHandler+0x4ea>
 800767e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007686:	2b00      	cmp	r3, #0
 8007688:	d003      	beq.n	8007692 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f929 	bl	80078e2 <UART_Transmit_IT>
    return;
 8007690:	e014      	b.n	80076bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00e      	beq.n	80076bc <HAL_UART_IRQHandler+0x514>
 800769e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d008      	beq.n	80076bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f969 	bl	8007982 <UART_EndTransmit_IT>
    return;
 80076b0:	e004      	b.n	80076bc <HAL_UART_IRQHandler+0x514>
    return;
 80076b2:	bf00      	nop
 80076b4:	e002      	b.n	80076bc <HAL_UART_IRQHandler+0x514>
      return;
 80076b6:	bf00      	nop
 80076b8:	e000      	b.n	80076bc <HAL_UART_IRQHandler+0x514>
      return;
 80076ba:	bf00      	nop
  }
}
 80076bc:	37e8      	adds	r7, #232	; 0xe8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop

080076c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b090      	sub	sp, #64	; 0x40
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	603b      	str	r3, [r7, #0]
 8007724:	4613      	mov	r3, r2
 8007726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007728:	e050      	b.n	80077cc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800772a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800772c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007730:	d04c      	beq.n	80077cc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007734:	2b00      	cmp	r3, #0
 8007736:	d007      	beq.n	8007748 <UART_WaitOnFlagUntilTimeout+0x30>
 8007738:	f7fc ff34 	bl	80045a4 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007744:	429a      	cmp	r2, r3
 8007746:	d241      	bcs.n	80077cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	330c      	adds	r3, #12
 800774e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007752:	e853 3f00 	ldrex	r3, [r3]
 8007756:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800775e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	330c      	adds	r3, #12
 8007766:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007768:	637a      	str	r2, [r7, #52]	; 0x34
 800776a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800776e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007770:	e841 2300 	strex	r3, r2, [r1]
 8007774:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1e5      	bne.n	8007748 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	3314      	adds	r3, #20
 8007782:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	e853 3f00 	ldrex	r3, [r3]
 800778a:	613b      	str	r3, [r7, #16]
   return(result);
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	f023 0301 	bic.w	r3, r3, #1
 8007792:	63bb      	str	r3, [r7, #56]	; 0x38
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3314      	adds	r3, #20
 800779a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800779c:	623a      	str	r2, [r7, #32]
 800779e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a0:	69f9      	ldr	r1, [r7, #28]
 80077a2:	6a3a      	ldr	r2, [r7, #32]
 80077a4:	e841 2300 	strex	r3, r2, [r1]
 80077a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1e5      	bne.n	800777c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2220      	movs	r2, #32
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2220      	movs	r2, #32
 80077bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e00f      	b.n	80077ec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	4013      	ands	r3, r2
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	429a      	cmp	r2, r3
 80077da:	bf0c      	ite	eq
 80077dc:	2301      	moveq	r3, #1
 80077de:	2300      	movne	r3, #0
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	461a      	mov	r2, r3
 80077e4:	79fb      	ldrb	r3, [r7, #7]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d09f      	beq.n	800772a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3740      	adds	r7, #64	; 0x40
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b095      	sub	sp, #84	; 0x54
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	330c      	adds	r3, #12
 8007802:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007806:	e853 3f00 	ldrex	r3, [r3]
 800780a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800780c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	330c      	adds	r3, #12
 800781a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800781c:	643a      	str	r2, [r7, #64]	; 0x40
 800781e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007820:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007822:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007824:	e841 2300 	strex	r3, r2, [r1]
 8007828:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800782a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e5      	bne.n	80077fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	3314      	adds	r3, #20
 8007836:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	e853 3f00 	ldrex	r3, [r3]
 800783e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	f023 0301 	bic.w	r3, r3, #1
 8007846:	64bb      	str	r3, [r7, #72]	; 0x48
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3314      	adds	r3, #20
 800784e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007850:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007852:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007854:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007858:	e841 2300 	strex	r3, r2, [r1]
 800785c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e5      	bne.n	8007830 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007868:	2b01      	cmp	r3, #1
 800786a:	d119      	bne.n	80078a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	330c      	adds	r3, #12
 8007872:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	e853 3f00 	ldrex	r3, [r3]
 800787a:	60bb      	str	r3, [r7, #8]
   return(result);
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	f023 0310 	bic.w	r3, r3, #16
 8007882:	647b      	str	r3, [r7, #68]	; 0x44
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	330c      	adds	r3, #12
 800788a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800788c:	61ba      	str	r2, [r7, #24]
 800788e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007890:	6979      	ldr	r1, [r7, #20]
 8007892:	69ba      	ldr	r2, [r7, #24]
 8007894:	e841 2300 	strex	r3, r2, [r1]
 8007898:	613b      	str	r3, [r7, #16]
   return(result);
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1e5      	bne.n	800786c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2220      	movs	r2, #32
 80078a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80078ae:	bf00      	nop
 80078b0:	3754      	adds	r7, #84	; 0x54
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b084      	sub	sp, #16
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f7ff ff09 	bl	80076ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078da:	bf00      	nop
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b085      	sub	sp, #20
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b21      	cmp	r3, #33	; 0x21
 80078f4:	d13e      	bne.n	8007974 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078fe:	d114      	bne.n	800792a <UART_Transmit_IT+0x48>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d110      	bne.n	800792a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a1b      	ldr	r3, [r3, #32]
 800790c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	881b      	ldrh	r3, [r3, #0]
 8007912:	461a      	mov	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800791c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	1c9a      	adds	r2, r3, #2
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	621a      	str	r2, [r3, #32]
 8007928:	e008      	b.n	800793c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	1c59      	adds	r1, r3, #1
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	6211      	str	r1, [r2, #32]
 8007934:	781a      	ldrb	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007940:	b29b      	uxth	r3, r3
 8007942:	3b01      	subs	r3, #1
 8007944:	b29b      	uxth	r3, r3
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	4619      	mov	r1, r3
 800794a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10f      	bne.n	8007970 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68da      	ldr	r2, [r3, #12]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800795e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68da      	ldr	r2, [r3, #12]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800796e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	e000      	b.n	8007976 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007974:	2302      	movs	r3, #2
  }
}
 8007976:	4618      	mov	r0, r3
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b082      	sub	sp, #8
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68da      	ldr	r2, [r3, #12]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007998:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2220      	movs	r2, #32
 800799e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7ff fe8e 	bl	80076c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b08c      	sub	sp, #48	; 0x30
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b22      	cmp	r3, #34	; 0x22
 80079c4:	f040 80ab 	bne.w	8007b1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d0:	d117      	bne.n	8007a02 <UART_Receive_IT+0x50>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d113      	bne.n	8007a02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80079da:	2300      	movs	r3, #0
 80079dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fa:	1c9a      	adds	r2, r3, #2
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	629a      	str	r2, [r3, #40]	; 0x28
 8007a00:	e026      	b.n	8007a50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a14:	d007      	beq.n	8007a26 <UART_Receive_IT+0x74>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10a      	bne.n	8007a34 <UART_Receive_IT+0x82>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d106      	bne.n	8007a34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a30:	701a      	strb	r2, [r3, #0]
 8007a32:	e008      	b.n	8007a46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4a:	1c5a      	adds	r2, r3, #1
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	3b01      	subs	r3, #1
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d15a      	bne.n	8007b1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68da      	ldr	r2, [r3, #12]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f022 0220 	bic.w	r2, r2, #32
 8007a72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68da      	ldr	r2, [r3, #12]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	695a      	ldr	r2, [r3, #20]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 0201 	bic.w	r2, r2, #1
 8007a92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2220      	movs	r2, #32
 8007a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d135      	bne.n	8007b10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	330c      	adds	r3, #12
 8007ab0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	e853 3f00 	ldrex	r3, [r3]
 8007ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	f023 0310 	bic.w	r3, r3, #16
 8007ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	330c      	adds	r3, #12
 8007ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aca:	623a      	str	r2, [r7, #32]
 8007acc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ace:	69f9      	ldr	r1, [r7, #28]
 8007ad0:	6a3a      	ldr	r2, [r7, #32]
 8007ad2:	e841 2300 	strex	r3, r2, [r1]
 8007ad6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1e5      	bne.n	8007aaa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0310 	and.w	r3, r3, #16
 8007ae8:	2b10      	cmp	r3, #16
 8007aea:	d10a      	bne.n	8007b02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007aec:	2300      	movs	r3, #0
 8007aee:	60fb      	str	r3, [r7, #12]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	60fb      	str	r3, [r7, #12]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	60fb      	str	r3, [r7, #12]
 8007b00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b06:	4619      	mov	r1, r3
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7ff fdf9 	bl	8007700 <HAL_UARTEx_RxEventCallback>
 8007b0e:	e002      	b.n	8007b16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7ff fde1 	bl	80076d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	e002      	b.n	8007b20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	e000      	b.n	8007b20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007b1e:	2302      	movs	r3, #2
  }
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3730      	adds	r7, #48	; 0x30
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	b09f      	sub	sp, #124	; 0x7c
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b3e:	68d9      	ldr	r1, [r3, #12]
 8007b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	ea40 0301 	orr.w	r3, r0, r1
 8007b48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b4c:	689a      	ldr	r2, [r3, #8]
 8007b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	431a      	orrs	r2, r3
 8007b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b6c:	f021 010c 	bic.w	r1, r1, #12
 8007b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b76:	430b      	orrs	r3, r1
 8007b78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	695b      	ldr	r3, [r3, #20]
 8007b80:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b86:	6999      	ldr	r1, [r3, #24]
 8007b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	ea40 0301 	orr.w	r3, r0, r1
 8007b90:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	4bc5      	ldr	r3, [pc, #788]	; (8007eac <UART_SetConfig+0x384>)
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d004      	beq.n	8007ba6 <UART_SetConfig+0x7e>
 8007b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	4bc3      	ldr	r3, [pc, #780]	; (8007eb0 <UART_SetConfig+0x388>)
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d103      	bne.n	8007bae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ba6:	f7fe fa27 	bl	8005ff8 <HAL_RCC_GetPCLK2Freq>
 8007baa:	6778      	str	r0, [r7, #116]	; 0x74
 8007bac:	e002      	b.n	8007bb4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007bae:	f7fe fa0f 	bl	8005fd0 <HAL_RCC_GetPCLK1Freq>
 8007bb2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bbc:	f040 80b6 	bne.w	8007d2c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007bc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bc2:	461c      	mov	r4, r3
 8007bc4:	f04f 0500 	mov.w	r5, #0
 8007bc8:	4622      	mov	r2, r4
 8007bca:	462b      	mov	r3, r5
 8007bcc:	1891      	adds	r1, r2, r2
 8007bce:	6439      	str	r1, [r7, #64]	; 0x40
 8007bd0:	415b      	adcs	r3, r3
 8007bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8007bd4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007bd8:	1912      	adds	r2, r2, r4
 8007bda:	eb45 0303 	adc.w	r3, r5, r3
 8007bde:	f04f 0000 	mov.w	r0, #0
 8007be2:	f04f 0100 	mov.w	r1, #0
 8007be6:	00d9      	lsls	r1, r3, #3
 8007be8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007bec:	00d0      	lsls	r0, r2, #3
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	1911      	adds	r1, r2, r4
 8007bf4:	6639      	str	r1, [r7, #96]	; 0x60
 8007bf6:	416b      	adcs	r3, r5
 8007bf8:	667b      	str	r3, [r7, #100]	; 0x64
 8007bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f04f 0300 	mov.w	r3, #0
 8007c04:	1891      	adds	r1, r2, r2
 8007c06:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c08:	415b      	adcs	r3, r3
 8007c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c10:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007c14:	f7f8 fb34 	bl	8000280 <__aeabi_uldivmod>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4ba5      	ldr	r3, [pc, #660]	; (8007eb4 <UART_SetConfig+0x38c>)
 8007c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c22:	095b      	lsrs	r3, r3, #5
 8007c24:	011e      	lsls	r6, r3, #4
 8007c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c28:	461c      	mov	r4, r3
 8007c2a:	f04f 0500 	mov.w	r5, #0
 8007c2e:	4622      	mov	r2, r4
 8007c30:	462b      	mov	r3, r5
 8007c32:	1891      	adds	r1, r2, r2
 8007c34:	6339      	str	r1, [r7, #48]	; 0x30
 8007c36:	415b      	adcs	r3, r3
 8007c38:	637b      	str	r3, [r7, #52]	; 0x34
 8007c3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007c3e:	1912      	adds	r2, r2, r4
 8007c40:	eb45 0303 	adc.w	r3, r5, r3
 8007c44:	f04f 0000 	mov.w	r0, #0
 8007c48:	f04f 0100 	mov.w	r1, #0
 8007c4c:	00d9      	lsls	r1, r3, #3
 8007c4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c52:	00d0      	lsls	r0, r2, #3
 8007c54:	4602      	mov	r2, r0
 8007c56:	460b      	mov	r3, r1
 8007c58:	1911      	adds	r1, r2, r4
 8007c5a:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c5c:	416b      	adcs	r3, r5
 8007c5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	461a      	mov	r2, r3
 8007c66:	f04f 0300 	mov.w	r3, #0
 8007c6a:	1891      	adds	r1, r2, r2
 8007c6c:	62b9      	str	r1, [r7, #40]	; 0x28
 8007c6e:	415b      	adcs	r3, r3
 8007c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c76:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007c7a:	f7f8 fb01 	bl	8000280 <__aeabi_uldivmod>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	460b      	mov	r3, r1
 8007c82:	4b8c      	ldr	r3, [pc, #560]	; (8007eb4 <UART_SetConfig+0x38c>)
 8007c84:	fba3 1302 	umull	r1, r3, r3, r2
 8007c88:	095b      	lsrs	r3, r3, #5
 8007c8a:	2164      	movs	r1, #100	; 0x64
 8007c8c:	fb01 f303 	mul.w	r3, r1, r3
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	00db      	lsls	r3, r3, #3
 8007c94:	3332      	adds	r3, #50	; 0x32
 8007c96:	4a87      	ldr	r2, [pc, #540]	; (8007eb4 <UART_SetConfig+0x38c>)
 8007c98:	fba2 2303 	umull	r2, r3, r2, r3
 8007c9c:	095b      	lsrs	r3, r3, #5
 8007c9e:	005b      	lsls	r3, r3, #1
 8007ca0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ca4:	441e      	add	r6, r3
 8007ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f04f 0100 	mov.w	r1, #0
 8007cae:	4602      	mov	r2, r0
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	1894      	adds	r4, r2, r2
 8007cb4:	623c      	str	r4, [r7, #32]
 8007cb6:	415b      	adcs	r3, r3
 8007cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8007cba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007cbe:	1812      	adds	r2, r2, r0
 8007cc0:	eb41 0303 	adc.w	r3, r1, r3
 8007cc4:	f04f 0400 	mov.w	r4, #0
 8007cc8:	f04f 0500 	mov.w	r5, #0
 8007ccc:	00dd      	lsls	r5, r3, #3
 8007cce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007cd2:	00d4      	lsls	r4, r2, #3
 8007cd4:	4622      	mov	r2, r4
 8007cd6:	462b      	mov	r3, r5
 8007cd8:	1814      	adds	r4, r2, r0
 8007cda:	653c      	str	r4, [r7, #80]	; 0x50
 8007cdc:	414b      	adcs	r3, r1
 8007cde:	657b      	str	r3, [r7, #84]	; 0x54
 8007ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	f04f 0300 	mov.w	r3, #0
 8007cea:	1891      	adds	r1, r2, r2
 8007cec:	61b9      	str	r1, [r7, #24]
 8007cee:	415b      	adcs	r3, r3
 8007cf0:	61fb      	str	r3, [r7, #28]
 8007cf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cf6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007cfa:	f7f8 fac1 	bl	8000280 <__aeabi_uldivmod>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	4b6c      	ldr	r3, [pc, #432]	; (8007eb4 <UART_SetConfig+0x38c>)
 8007d04:	fba3 1302 	umull	r1, r3, r3, r2
 8007d08:	095b      	lsrs	r3, r3, #5
 8007d0a:	2164      	movs	r1, #100	; 0x64
 8007d0c:	fb01 f303 	mul.w	r3, r1, r3
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	00db      	lsls	r3, r3, #3
 8007d14:	3332      	adds	r3, #50	; 0x32
 8007d16:	4a67      	ldr	r2, [pc, #412]	; (8007eb4 <UART_SetConfig+0x38c>)
 8007d18:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1c:	095b      	lsrs	r3, r3, #5
 8007d1e:	f003 0207 	and.w	r2, r3, #7
 8007d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4432      	add	r2, r6
 8007d28:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d2a:	e0b9      	b.n	8007ea0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d2e:	461c      	mov	r4, r3
 8007d30:	f04f 0500 	mov.w	r5, #0
 8007d34:	4622      	mov	r2, r4
 8007d36:	462b      	mov	r3, r5
 8007d38:	1891      	adds	r1, r2, r2
 8007d3a:	6139      	str	r1, [r7, #16]
 8007d3c:	415b      	adcs	r3, r3
 8007d3e:	617b      	str	r3, [r7, #20]
 8007d40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007d44:	1912      	adds	r2, r2, r4
 8007d46:	eb45 0303 	adc.w	r3, r5, r3
 8007d4a:	f04f 0000 	mov.w	r0, #0
 8007d4e:	f04f 0100 	mov.w	r1, #0
 8007d52:	00d9      	lsls	r1, r3, #3
 8007d54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d58:	00d0      	lsls	r0, r2, #3
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	eb12 0804 	adds.w	r8, r2, r4
 8007d62:	eb43 0905 	adc.w	r9, r3, r5
 8007d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f04f 0100 	mov.w	r1, #0
 8007d70:	f04f 0200 	mov.w	r2, #0
 8007d74:	f04f 0300 	mov.w	r3, #0
 8007d78:	008b      	lsls	r3, r1, #2
 8007d7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d7e:	0082      	lsls	r2, r0, #2
 8007d80:	4640      	mov	r0, r8
 8007d82:	4649      	mov	r1, r9
 8007d84:	f7f8 fa7c 	bl	8000280 <__aeabi_uldivmod>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	4b49      	ldr	r3, [pc, #292]	; (8007eb4 <UART_SetConfig+0x38c>)
 8007d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8007d92:	095b      	lsrs	r3, r3, #5
 8007d94:	011e      	lsls	r6, r3, #4
 8007d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f04f 0100 	mov.w	r1, #0
 8007d9e:	4602      	mov	r2, r0
 8007da0:	460b      	mov	r3, r1
 8007da2:	1894      	adds	r4, r2, r2
 8007da4:	60bc      	str	r4, [r7, #8]
 8007da6:	415b      	adcs	r3, r3
 8007da8:	60fb      	str	r3, [r7, #12]
 8007daa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007dae:	1812      	adds	r2, r2, r0
 8007db0:	eb41 0303 	adc.w	r3, r1, r3
 8007db4:	f04f 0400 	mov.w	r4, #0
 8007db8:	f04f 0500 	mov.w	r5, #0
 8007dbc:	00dd      	lsls	r5, r3, #3
 8007dbe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007dc2:	00d4      	lsls	r4, r2, #3
 8007dc4:	4622      	mov	r2, r4
 8007dc6:	462b      	mov	r3, r5
 8007dc8:	1814      	adds	r4, r2, r0
 8007dca:	64bc      	str	r4, [r7, #72]	; 0x48
 8007dcc:	414b      	adcs	r3, r1
 8007dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f04f 0100 	mov.w	r1, #0
 8007dda:	f04f 0200 	mov.w	r2, #0
 8007dde:	f04f 0300 	mov.w	r3, #0
 8007de2:	008b      	lsls	r3, r1, #2
 8007de4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007de8:	0082      	lsls	r2, r0, #2
 8007dea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007dee:	f7f8 fa47 	bl	8000280 <__aeabi_uldivmod>
 8007df2:	4602      	mov	r2, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	4b2f      	ldr	r3, [pc, #188]	; (8007eb4 <UART_SetConfig+0x38c>)
 8007df8:	fba3 1302 	umull	r1, r3, r3, r2
 8007dfc:	095b      	lsrs	r3, r3, #5
 8007dfe:	2164      	movs	r1, #100	; 0x64
 8007e00:	fb01 f303 	mul.w	r3, r1, r3
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	011b      	lsls	r3, r3, #4
 8007e08:	3332      	adds	r3, #50	; 0x32
 8007e0a:	4a2a      	ldr	r2, [pc, #168]	; (8007eb4 <UART_SetConfig+0x38c>)
 8007e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e10:	095b      	lsrs	r3, r3, #5
 8007e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e16:	441e      	add	r6, r3
 8007e18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f04f 0100 	mov.w	r1, #0
 8007e20:	4602      	mov	r2, r0
 8007e22:	460b      	mov	r3, r1
 8007e24:	1894      	adds	r4, r2, r2
 8007e26:	603c      	str	r4, [r7, #0]
 8007e28:	415b      	adcs	r3, r3
 8007e2a:	607b      	str	r3, [r7, #4]
 8007e2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e30:	1812      	adds	r2, r2, r0
 8007e32:	eb41 0303 	adc.w	r3, r1, r3
 8007e36:	f04f 0400 	mov.w	r4, #0
 8007e3a:	f04f 0500 	mov.w	r5, #0
 8007e3e:	00dd      	lsls	r5, r3, #3
 8007e40:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e44:	00d4      	lsls	r4, r2, #3
 8007e46:	4622      	mov	r2, r4
 8007e48:	462b      	mov	r3, r5
 8007e4a:	eb12 0a00 	adds.w	sl, r2, r0
 8007e4e:	eb43 0b01 	adc.w	fp, r3, r1
 8007e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f04f 0100 	mov.w	r1, #0
 8007e5c:	f04f 0200 	mov.w	r2, #0
 8007e60:	f04f 0300 	mov.w	r3, #0
 8007e64:	008b      	lsls	r3, r1, #2
 8007e66:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007e6a:	0082      	lsls	r2, r0, #2
 8007e6c:	4650      	mov	r0, sl
 8007e6e:	4659      	mov	r1, fp
 8007e70:	f7f8 fa06 	bl	8000280 <__aeabi_uldivmod>
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	4b0e      	ldr	r3, [pc, #56]	; (8007eb4 <UART_SetConfig+0x38c>)
 8007e7a:	fba3 1302 	umull	r1, r3, r3, r2
 8007e7e:	095b      	lsrs	r3, r3, #5
 8007e80:	2164      	movs	r1, #100	; 0x64
 8007e82:	fb01 f303 	mul.w	r3, r1, r3
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	011b      	lsls	r3, r3, #4
 8007e8a:	3332      	adds	r3, #50	; 0x32
 8007e8c:	4a09      	ldr	r2, [pc, #36]	; (8007eb4 <UART_SetConfig+0x38c>)
 8007e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e92:	095b      	lsrs	r3, r3, #5
 8007e94:	f003 020f 	and.w	r2, r3, #15
 8007e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4432      	add	r2, r6
 8007e9e:	609a      	str	r2, [r3, #8]
}
 8007ea0:	bf00      	nop
 8007ea2:	377c      	adds	r7, #124	; 0x7c
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eaa:	bf00      	nop
 8007eac:	40011000 	.word	0x40011000
 8007eb0:	40011400 	.word	0x40011400
 8007eb4:	51eb851f 	.word	0x51eb851f

08007eb8 <__errno>:
 8007eb8:	4b01      	ldr	r3, [pc, #4]	; (8007ec0 <__errno+0x8>)
 8007eba:	6818      	ldr	r0, [r3, #0]
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	2000000c 	.word	0x2000000c

08007ec4 <__libc_init_array>:
 8007ec4:	b570      	push	{r4, r5, r6, lr}
 8007ec6:	4d0d      	ldr	r5, [pc, #52]	; (8007efc <__libc_init_array+0x38>)
 8007ec8:	4c0d      	ldr	r4, [pc, #52]	; (8007f00 <__libc_init_array+0x3c>)
 8007eca:	1b64      	subs	r4, r4, r5
 8007ecc:	10a4      	asrs	r4, r4, #2
 8007ece:	2600      	movs	r6, #0
 8007ed0:	42a6      	cmp	r6, r4
 8007ed2:	d109      	bne.n	8007ee8 <__libc_init_array+0x24>
 8007ed4:	4d0b      	ldr	r5, [pc, #44]	; (8007f04 <__libc_init_array+0x40>)
 8007ed6:	4c0c      	ldr	r4, [pc, #48]	; (8007f08 <__libc_init_array+0x44>)
 8007ed8:	f000 fc4e 	bl	8008778 <_init>
 8007edc:	1b64      	subs	r4, r4, r5
 8007ede:	10a4      	asrs	r4, r4, #2
 8007ee0:	2600      	movs	r6, #0
 8007ee2:	42a6      	cmp	r6, r4
 8007ee4:	d105      	bne.n	8007ef2 <__libc_init_array+0x2e>
 8007ee6:	bd70      	pop	{r4, r5, r6, pc}
 8007ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eec:	4798      	blx	r3
 8007eee:	3601      	adds	r6, #1
 8007ef0:	e7ee      	b.n	8007ed0 <__libc_init_array+0xc>
 8007ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ef6:	4798      	blx	r3
 8007ef8:	3601      	adds	r6, #1
 8007efa:	e7f2      	b.n	8007ee2 <__libc_init_array+0x1e>
 8007efc:	08009028 	.word	0x08009028
 8007f00:	08009028 	.word	0x08009028
 8007f04:	08009028 	.word	0x08009028
 8007f08:	0800902c 	.word	0x0800902c

08007f0c <memset>:
 8007f0c:	4402      	add	r2, r0
 8007f0e:	4603      	mov	r3, r0
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d100      	bne.n	8007f16 <memset+0xa>
 8007f14:	4770      	bx	lr
 8007f16:	f803 1b01 	strb.w	r1, [r3], #1
 8007f1a:	e7f9      	b.n	8007f10 <memset+0x4>

08007f1c <siprintf>:
 8007f1c:	b40e      	push	{r1, r2, r3}
 8007f1e:	b500      	push	{lr}
 8007f20:	b09c      	sub	sp, #112	; 0x70
 8007f22:	ab1d      	add	r3, sp, #116	; 0x74
 8007f24:	9002      	str	r0, [sp, #8]
 8007f26:	9006      	str	r0, [sp, #24]
 8007f28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f2c:	4809      	ldr	r0, [pc, #36]	; (8007f54 <siprintf+0x38>)
 8007f2e:	9107      	str	r1, [sp, #28]
 8007f30:	9104      	str	r1, [sp, #16]
 8007f32:	4909      	ldr	r1, [pc, #36]	; (8007f58 <siprintf+0x3c>)
 8007f34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f38:	9105      	str	r1, [sp, #20]
 8007f3a:	6800      	ldr	r0, [r0, #0]
 8007f3c:	9301      	str	r3, [sp, #4]
 8007f3e:	a902      	add	r1, sp, #8
 8007f40:	f000 f868 	bl	8008014 <_svfiprintf_r>
 8007f44:	9b02      	ldr	r3, [sp, #8]
 8007f46:	2200      	movs	r2, #0
 8007f48:	701a      	strb	r2, [r3, #0]
 8007f4a:	b01c      	add	sp, #112	; 0x70
 8007f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f50:	b003      	add	sp, #12
 8007f52:	4770      	bx	lr
 8007f54:	2000000c 	.word	0x2000000c
 8007f58:	ffff0208 	.word	0xffff0208

08007f5c <__ssputs_r>:
 8007f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f60:	688e      	ldr	r6, [r1, #8]
 8007f62:	429e      	cmp	r6, r3
 8007f64:	4682      	mov	sl, r0
 8007f66:	460c      	mov	r4, r1
 8007f68:	4690      	mov	r8, r2
 8007f6a:	461f      	mov	r7, r3
 8007f6c:	d838      	bhi.n	8007fe0 <__ssputs_r+0x84>
 8007f6e:	898a      	ldrh	r2, [r1, #12]
 8007f70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f74:	d032      	beq.n	8007fdc <__ssputs_r+0x80>
 8007f76:	6825      	ldr	r5, [r4, #0]
 8007f78:	6909      	ldr	r1, [r1, #16]
 8007f7a:	eba5 0901 	sub.w	r9, r5, r1
 8007f7e:	6965      	ldr	r5, [r4, #20]
 8007f80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f88:	3301      	adds	r3, #1
 8007f8a:	444b      	add	r3, r9
 8007f8c:	106d      	asrs	r5, r5, #1
 8007f8e:	429d      	cmp	r5, r3
 8007f90:	bf38      	it	cc
 8007f92:	461d      	movcc	r5, r3
 8007f94:	0553      	lsls	r3, r2, #21
 8007f96:	d531      	bpl.n	8007ffc <__ssputs_r+0xa0>
 8007f98:	4629      	mov	r1, r5
 8007f9a:	f000 fb47 	bl	800862c <_malloc_r>
 8007f9e:	4606      	mov	r6, r0
 8007fa0:	b950      	cbnz	r0, 8007fb8 <__ssputs_r+0x5c>
 8007fa2:	230c      	movs	r3, #12
 8007fa4:	f8ca 3000 	str.w	r3, [sl]
 8007fa8:	89a3      	ldrh	r3, [r4, #12]
 8007faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fae:	81a3      	strh	r3, [r4, #12]
 8007fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fb8:	6921      	ldr	r1, [r4, #16]
 8007fba:	464a      	mov	r2, r9
 8007fbc:	f000 fabe 	bl	800853c <memcpy>
 8007fc0:	89a3      	ldrh	r3, [r4, #12]
 8007fc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fca:	81a3      	strh	r3, [r4, #12]
 8007fcc:	6126      	str	r6, [r4, #16]
 8007fce:	6165      	str	r5, [r4, #20]
 8007fd0:	444e      	add	r6, r9
 8007fd2:	eba5 0509 	sub.w	r5, r5, r9
 8007fd6:	6026      	str	r6, [r4, #0]
 8007fd8:	60a5      	str	r5, [r4, #8]
 8007fda:	463e      	mov	r6, r7
 8007fdc:	42be      	cmp	r6, r7
 8007fde:	d900      	bls.n	8007fe2 <__ssputs_r+0x86>
 8007fe0:	463e      	mov	r6, r7
 8007fe2:	4632      	mov	r2, r6
 8007fe4:	6820      	ldr	r0, [r4, #0]
 8007fe6:	4641      	mov	r1, r8
 8007fe8:	f000 fab6 	bl	8008558 <memmove>
 8007fec:	68a3      	ldr	r3, [r4, #8]
 8007fee:	6822      	ldr	r2, [r4, #0]
 8007ff0:	1b9b      	subs	r3, r3, r6
 8007ff2:	4432      	add	r2, r6
 8007ff4:	60a3      	str	r3, [r4, #8]
 8007ff6:	6022      	str	r2, [r4, #0]
 8007ff8:	2000      	movs	r0, #0
 8007ffa:	e7db      	b.n	8007fb4 <__ssputs_r+0x58>
 8007ffc:	462a      	mov	r2, r5
 8007ffe:	f000 fb6f 	bl	80086e0 <_realloc_r>
 8008002:	4606      	mov	r6, r0
 8008004:	2800      	cmp	r0, #0
 8008006:	d1e1      	bne.n	8007fcc <__ssputs_r+0x70>
 8008008:	6921      	ldr	r1, [r4, #16]
 800800a:	4650      	mov	r0, sl
 800800c:	f000 fabe 	bl	800858c <_free_r>
 8008010:	e7c7      	b.n	8007fa2 <__ssputs_r+0x46>
	...

08008014 <_svfiprintf_r>:
 8008014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008018:	4698      	mov	r8, r3
 800801a:	898b      	ldrh	r3, [r1, #12]
 800801c:	061b      	lsls	r3, r3, #24
 800801e:	b09d      	sub	sp, #116	; 0x74
 8008020:	4607      	mov	r7, r0
 8008022:	460d      	mov	r5, r1
 8008024:	4614      	mov	r4, r2
 8008026:	d50e      	bpl.n	8008046 <_svfiprintf_r+0x32>
 8008028:	690b      	ldr	r3, [r1, #16]
 800802a:	b963      	cbnz	r3, 8008046 <_svfiprintf_r+0x32>
 800802c:	2140      	movs	r1, #64	; 0x40
 800802e:	f000 fafd 	bl	800862c <_malloc_r>
 8008032:	6028      	str	r0, [r5, #0]
 8008034:	6128      	str	r0, [r5, #16]
 8008036:	b920      	cbnz	r0, 8008042 <_svfiprintf_r+0x2e>
 8008038:	230c      	movs	r3, #12
 800803a:	603b      	str	r3, [r7, #0]
 800803c:	f04f 30ff 	mov.w	r0, #4294967295
 8008040:	e0d1      	b.n	80081e6 <_svfiprintf_r+0x1d2>
 8008042:	2340      	movs	r3, #64	; 0x40
 8008044:	616b      	str	r3, [r5, #20]
 8008046:	2300      	movs	r3, #0
 8008048:	9309      	str	r3, [sp, #36]	; 0x24
 800804a:	2320      	movs	r3, #32
 800804c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008050:	f8cd 800c 	str.w	r8, [sp, #12]
 8008054:	2330      	movs	r3, #48	; 0x30
 8008056:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008200 <_svfiprintf_r+0x1ec>
 800805a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800805e:	f04f 0901 	mov.w	r9, #1
 8008062:	4623      	mov	r3, r4
 8008064:	469a      	mov	sl, r3
 8008066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800806a:	b10a      	cbz	r2, 8008070 <_svfiprintf_r+0x5c>
 800806c:	2a25      	cmp	r2, #37	; 0x25
 800806e:	d1f9      	bne.n	8008064 <_svfiprintf_r+0x50>
 8008070:	ebba 0b04 	subs.w	fp, sl, r4
 8008074:	d00b      	beq.n	800808e <_svfiprintf_r+0x7a>
 8008076:	465b      	mov	r3, fp
 8008078:	4622      	mov	r2, r4
 800807a:	4629      	mov	r1, r5
 800807c:	4638      	mov	r0, r7
 800807e:	f7ff ff6d 	bl	8007f5c <__ssputs_r>
 8008082:	3001      	adds	r0, #1
 8008084:	f000 80aa 	beq.w	80081dc <_svfiprintf_r+0x1c8>
 8008088:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800808a:	445a      	add	r2, fp
 800808c:	9209      	str	r2, [sp, #36]	; 0x24
 800808e:	f89a 3000 	ldrb.w	r3, [sl]
 8008092:	2b00      	cmp	r3, #0
 8008094:	f000 80a2 	beq.w	80081dc <_svfiprintf_r+0x1c8>
 8008098:	2300      	movs	r3, #0
 800809a:	f04f 32ff 	mov.w	r2, #4294967295
 800809e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080a2:	f10a 0a01 	add.w	sl, sl, #1
 80080a6:	9304      	str	r3, [sp, #16]
 80080a8:	9307      	str	r3, [sp, #28]
 80080aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080ae:	931a      	str	r3, [sp, #104]	; 0x68
 80080b0:	4654      	mov	r4, sl
 80080b2:	2205      	movs	r2, #5
 80080b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080b8:	4851      	ldr	r0, [pc, #324]	; (8008200 <_svfiprintf_r+0x1ec>)
 80080ba:	f7f8 f891 	bl	80001e0 <memchr>
 80080be:	9a04      	ldr	r2, [sp, #16]
 80080c0:	b9d8      	cbnz	r0, 80080fa <_svfiprintf_r+0xe6>
 80080c2:	06d0      	lsls	r0, r2, #27
 80080c4:	bf44      	itt	mi
 80080c6:	2320      	movmi	r3, #32
 80080c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080cc:	0711      	lsls	r1, r2, #28
 80080ce:	bf44      	itt	mi
 80080d0:	232b      	movmi	r3, #43	; 0x2b
 80080d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080d6:	f89a 3000 	ldrb.w	r3, [sl]
 80080da:	2b2a      	cmp	r3, #42	; 0x2a
 80080dc:	d015      	beq.n	800810a <_svfiprintf_r+0xf6>
 80080de:	9a07      	ldr	r2, [sp, #28]
 80080e0:	4654      	mov	r4, sl
 80080e2:	2000      	movs	r0, #0
 80080e4:	f04f 0c0a 	mov.w	ip, #10
 80080e8:	4621      	mov	r1, r4
 80080ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080ee:	3b30      	subs	r3, #48	; 0x30
 80080f0:	2b09      	cmp	r3, #9
 80080f2:	d94e      	bls.n	8008192 <_svfiprintf_r+0x17e>
 80080f4:	b1b0      	cbz	r0, 8008124 <_svfiprintf_r+0x110>
 80080f6:	9207      	str	r2, [sp, #28]
 80080f8:	e014      	b.n	8008124 <_svfiprintf_r+0x110>
 80080fa:	eba0 0308 	sub.w	r3, r0, r8
 80080fe:	fa09 f303 	lsl.w	r3, r9, r3
 8008102:	4313      	orrs	r3, r2
 8008104:	9304      	str	r3, [sp, #16]
 8008106:	46a2      	mov	sl, r4
 8008108:	e7d2      	b.n	80080b0 <_svfiprintf_r+0x9c>
 800810a:	9b03      	ldr	r3, [sp, #12]
 800810c:	1d19      	adds	r1, r3, #4
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	9103      	str	r1, [sp, #12]
 8008112:	2b00      	cmp	r3, #0
 8008114:	bfbb      	ittet	lt
 8008116:	425b      	neglt	r3, r3
 8008118:	f042 0202 	orrlt.w	r2, r2, #2
 800811c:	9307      	strge	r3, [sp, #28]
 800811e:	9307      	strlt	r3, [sp, #28]
 8008120:	bfb8      	it	lt
 8008122:	9204      	strlt	r2, [sp, #16]
 8008124:	7823      	ldrb	r3, [r4, #0]
 8008126:	2b2e      	cmp	r3, #46	; 0x2e
 8008128:	d10c      	bne.n	8008144 <_svfiprintf_r+0x130>
 800812a:	7863      	ldrb	r3, [r4, #1]
 800812c:	2b2a      	cmp	r3, #42	; 0x2a
 800812e:	d135      	bne.n	800819c <_svfiprintf_r+0x188>
 8008130:	9b03      	ldr	r3, [sp, #12]
 8008132:	1d1a      	adds	r2, r3, #4
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	9203      	str	r2, [sp, #12]
 8008138:	2b00      	cmp	r3, #0
 800813a:	bfb8      	it	lt
 800813c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008140:	3402      	adds	r4, #2
 8008142:	9305      	str	r3, [sp, #20]
 8008144:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008210 <_svfiprintf_r+0x1fc>
 8008148:	7821      	ldrb	r1, [r4, #0]
 800814a:	2203      	movs	r2, #3
 800814c:	4650      	mov	r0, sl
 800814e:	f7f8 f847 	bl	80001e0 <memchr>
 8008152:	b140      	cbz	r0, 8008166 <_svfiprintf_r+0x152>
 8008154:	2340      	movs	r3, #64	; 0x40
 8008156:	eba0 000a 	sub.w	r0, r0, sl
 800815a:	fa03 f000 	lsl.w	r0, r3, r0
 800815e:	9b04      	ldr	r3, [sp, #16]
 8008160:	4303      	orrs	r3, r0
 8008162:	3401      	adds	r4, #1
 8008164:	9304      	str	r3, [sp, #16]
 8008166:	f814 1b01 	ldrb.w	r1, [r4], #1
 800816a:	4826      	ldr	r0, [pc, #152]	; (8008204 <_svfiprintf_r+0x1f0>)
 800816c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008170:	2206      	movs	r2, #6
 8008172:	f7f8 f835 	bl	80001e0 <memchr>
 8008176:	2800      	cmp	r0, #0
 8008178:	d038      	beq.n	80081ec <_svfiprintf_r+0x1d8>
 800817a:	4b23      	ldr	r3, [pc, #140]	; (8008208 <_svfiprintf_r+0x1f4>)
 800817c:	bb1b      	cbnz	r3, 80081c6 <_svfiprintf_r+0x1b2>
 800817e:	9b03      	ldr	r3, [sp, #12]
 8008180:	3307      	adds	r3, #7
 8008182:	f023 0307 	bic.w	r3, r3, #7
 8008186:	3308      	adds	r3, #8
 8008188:	9303      	str	r3, [sp, #12]
 800818a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800818c:	4433      	add	r3, r6
 800818e:	9309      	str	r3, [sp, #36]	; 0x24
 8008190:	e767      	b.n	8008062 <_svfiprintf_r+0x4e>
 8008192:	fb0c 3202 	mla	r2, ip, r2, r3
 8008196:	460c      	mov	r4, r1
 8008198:	2001      	movs	r0, #1
 800819a:	e7a5      	b.n	80080e8 <_svfiprintf_r+0xd4>
 800819c:	2300      	movs	r3, #0
 800819e:	3401      	adds	r4, #1
 80081a0:	9305      	str	r3, [sp, #20]
 80081a2:	4619      	mov	r1, r3
 80081a4:	f04f 0c0a 	mov.w	ip, #10
 80081a8:	4620      	mov	r0, r4
 80081aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081ae:	3a30      	subs	r2, #48	; 0x30
 80081b0:	2a09      	cmp	r2, #9
 80081b2:	d903      	bls.n	80081bc <_svfiprintf_r+0x1a8>
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d0c5      	beq.n	8008144 <_svfiprintf_r+0x130>
 80081b8:	9105      	str	r1, [sp, #20]
 80081ba:	e7c3      	b.n	8008144 <_svfiprintf_r+0x130>
 80081bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80081c0:	4604      	mov	r4, r0
 80081c2:	2301      	movs	r3, #1
 80081c4:	e7f0      	b.n	80081a8 <_svfiprintf_r+0x194>
 80081c6:	ab03      	add	r3, sp, #12
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	462a      	mov	r2, r5
 80081cc:	4b0f      	ldr	r3, [pc, #60]	; (800820c <_svfiprintf_r+0x1f8>)
 80081ce:	a904      	add	r1, sp, #16
 80081d0:	4638      	mov	r0, r7
 80081d2:	f3af 8000 	nop.w
 80081d6:	1c42      	adds	r2, r0, #1
 80081d8:	4606      	mov	r6, r0
 80081da:	d1d6      	bne.n	800818a <_svfiprintf_r+0x176>
 80081dc:	89ab      	ldrh	r3, [r5, #12]
 80081de:	065b      	lsls	r3, r3, #25
 80081e0:	f53f af2c 	bmi.w	800803c <_svfiprintf_r+0x28>
 80081e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081e6:	b01d      	add	sp, #116	; 0x74
 80081e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ec:	ab03      	add	r3, sp, #12
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	462a      	mov	r2, r5
 80081f2:	4b06      	ldr	r3, [pc, #24]	; (800820c <_svfiprintf_r+0x1f8>)
 80081f4:	a904      	add	r1, sp, #16
 80081f6:	4638      	mov	r0, r7
 80081f8:	f000 f87a 	bl	80082f0 <_printf_i>
 80081fc:	e7eb      	b.n	80081d6 <_svfiprintf_r+0x1c2>
 80081fe:	bf00      	nop
 8008200:	08008fec 	.word	0x08008fec
 8008204:	08008ff6 	.word	0x08008ff6
 8008208:	00000000 	.word	0x00000000
 800820c:	08007f5d 	.word	0x08007f5d
 8008210:	08008ff2 	.word	0x08008ff2

08008214 <_printf_common>:
 8008214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008218:	4616      	mov	r6, r2
 800821a:	4699      	mov	r9, r3
 800821c:	688a      	ldr	r2, [r1, #8]
 800821e:	690b      	ldr	r3, [r1, #16]
 8008220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008224:	4293      	cmp	r3, r2
 8008226:	bfb8      	it	lt
 8008228:	4613      	movlt	r3, r2
 800822a:	6033      	str	r3, [r6, #0]
 800822c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008230:	4607      	mov	r7, r0
 8008232:	460c      	mov	r4, r1
 8008234:	b10a      	cbz	r2, 800823a <_printf_common+0x26>
 8008236:	3301      	adds	r3, #1
 8008238:	6033      	str	r3, [r6, #0]
 800823a:	6823      	ldr	r3, [r4, #0]
 800823c:	0699      	lsls	r1, r3, #26
 800823e:	bf42      	ittt	mi
 8008240:	6833      	ldrmi	r3, [r6, #0]
 8008242:	3302      	addmi	r3, #2
 8008244:	6033      	strmi	r3, [r6, #0]
 8008246:	6825      	ldr	r5, [r4, #0]
 8008248:	f015 0506 	ands.w	r5, r5, #6
 800824c:	d106      	bne.n	800825c <_printf_common+0x48>
 800824e:	f104 0a19 	add.w	sl, r4, #25
 8008252:	68e3      	ldr	r3, [r4, #12]
 8008254:	6832      	ldr	r2, [r6, #0]
 8008256:	1a9b      	subs	r3, r3, r2
 8008258:	42ab      	cmp	r3, r5
 800825a:	dc26      	bgt.n	80082aa <_printf_common+0x96>
 800825c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008260:	1e13      	subs	r3, r2, #0
 8008262:	6822      	ldr	r2, [r4, #0]
 8008264:	bf18      	it	ne
 8008266:	2301      	movne	r3, #1
 8008268:	0692      	lsls	r2, r2, #26
 800826a:	d42b      	bmi.n	80082c4 <_printf_common+0xb0>
 800826c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008270:	4649      	mov	r1, r9
 8008272:	4638      	mov	r0, r7
 8008274:	47c0      	blx	r8
 8008276:	3001      	adds	r0, #1
 8008278:	d01e      	beq.n	80082b8 <_printf_common+0xa4>
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	68e5      	ldr	r5, [r4, #12]
 800827e:	6832      	ldr	r2, [r6, #0]
 8008280:	f003 0306 	and.w	r3, r3, #6
 8008284:	2b04      	cmp	r3, #4
 8008286:	bf08      	it	eq
 8008288:	1aad      	subeq	r5, r5, r2
 800828a:	68a3      	ldr	r3, [r4, #8]
 800828c:	6922      	ldr	r2, [r4, #16]
 800828e:	bf0c      	ite	eq
 8008290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008294:	2500      	movne	r5, #0
 8008296:	4293      	cmp	r3, r2
 8008298:	bfc4      	itt	gt
 800829a:	1a9b      	subgt	r3, r3, r2
 800829c:	18ed      	addgt	r5, r5, r3
 800829e:	2600      	movs	r6, #0
 80082a0:	341a      	adds	r4, #26
 80082a2:	42b5      	cmp	r5, r6
 80082a4:	d11a      	bne.n	80082dc <_printf_common+0xc8>
 80082a6:	2000      	movs	r0, #0
 80082a8:	e008      	b.n	80082bc <_printf_common+0xa8>
 80082aa:	2301      	movs	r3, #1
 80082ac:	4652      	mov	r2, sl
 80082ae:	4649      	mov	r1, r9
 80082b0:	4638      	mov	r0, r7
 80082b2:	47c0      	blx	r8
 80082b4:	3001      	adds	r0, #1
 80082b6:	d103      	bne.n	80082c0 <_printf_common+0xac>
 80082b8:	f04f 30ff 	mov.w	r0, #4294967295
 80082bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c0:	3501      	adds	r5, #1
 80082c2:	e7c6      	b.n	8008252 <_printf_common+0x3e>
 80082c4:	18e1      	adds	r1, r4, r3
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	2030      	movs	r0, #48	; 0x30
 80082ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082ce:	4422      	add	r2, r4
 80082d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082d8:	3302      	adds	r3, #2
 80082da:	e7c7      	b.n	800826c <_printf_common+0x58>
 80082dc:	2301      	movs	r3, #1
 80082de:	4622      	mov	r2, r4
 80082e0:	4649      	mov	r1, r9
 80082e2:	4638      	mov	r0, r7
 80082e4:	47c0      	blx	r8
 80082e6:	3001      	adds	r0, #1
 80082e8:	d0e6      	beq.n	80082b8 <_printf_common+0xa4>
 80082ea:	3601      	adds	r6, #1
 80082ec:	e7d9      	b.n	80082a2 <_printf_common+0x8e>
	...

080082f0 <_printf_i>:
 80082f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082f4:	460c      	mov	r4, r1
 80082f6:	4691      	mov	r9, r2
 80082f8:	7e27      	ldrb	r7, [r4, #24]
 80082fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80082fc:	2f78      	cmp	r7, #120	; 0x78
 80082fe:	4680      	mov	r8, r0
 8008300:	469a      	mov	sl, r3
 8008302:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008306:	d807      	bhi.n	8008318 <_printf_i+0x28>
 8008308:	2f62      	cmp	r7, #98	; 0x62
 800830a:	d80a      	bhi.n	8008322 <_printf_i+0x32>
 800830c:	2f00      	cmp	r7, #0
 800830e:	f000 80d8 	beq.w	80084c2 <_printf_i+0x1d2>
 8008312:	2f58      	cmp	r7, #88	; 0x58
 8008314:	f000 80a3 	beq.w	800845e <_printf_i+0x16e>
 8008318:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800831c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008320:	e03a      	b.n	8008398 <_printf_i+0xa8>
 8008322:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008326:	2b15      	cmp	r3, #21
 8008328:	d8f6      	bhi.n	8008318 <_printf_i+0x28>
 800832a:	a001      	add	r0, pc, #4	; (adr r0, 8008330 <_printf_i+0x40>)
 800832c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008330:	08008389 	.word	0x08008389
 8008334:	0800839d 	.word	0x0800839d
 8008338:	08008319 	.word	0x08008319
 800833c:	08008319 	.word	0x08008319
 8008340:	08008319 	.word	0x08008319
 8008344:	08008319 	.word	0x08008319
 8008348:	0800839d 	.word	0x0800839d
 800834c:	08008319 	.word	0x08008319
 8008350:	08008319 	.word	0x08008319
 8008354:	08008319 	.word	0x08008319
 8008358:	08008319 	.word	0x08008319
 800835c:	080084a9 	.word	0x080084a9
 8008360:	080083cd 	.word	0x080083cd
 8008364:	0800848b 	.word	0x0800848b
 8008368:	08008319 	.word	0x08008319
 800836c:	08008319 	.word	0x08008319
 8008370:	080084cb 	.word	0x080084cb
 8008374:	08008319 	.word	0x08008319
 8008378:	080083cd 	.word	0x080083cd
 800837c:	08008319 	.word	0x08008319
 8008380:	08008319 	.word	0x08008319
 8008384:	08008493 	.word	0x08008493
 8008388:	680b      	ldr	r3, [r1, #0]
 800838a:	1d1a      	adds	r2, r3, #4
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	600a      	str	r2, [r1, #0]
 8008390:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008398:	2301      	movs	r3, #1
 800839a:	e0a3      	b.n	80084e4 <_printf_i+0x1f4>
 800839c:	6825      	ldr	r5, [r4, #0]
 800839e:	6808      	ldr	r0, [r1, #0]
 80083a0:	062e      	lsls	r6, r5, #24
 80083a2:	f100 0304 	add.w	r3, r0, #4
 80083a6:	d50a      	bpl.n	80083be <_printf_i+0xce>
 80083a8:	6805      	ldr	r5, [r0, #0]
 80083aa:	600b      	str	r3, [r1, #0]
 80083ac:	2d00      	cmp	r5, #0
 80083ae:	da03      	bge.n	80083b8 <_printf_i+0xc8>
 80083b0:	232d      	movs	r3, #45	; 0x2d
 80083b2:	426d      	negs	r5, r5
 80083b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083b8:	485e      	ldr	r0, [pc, #376]	; (8008534 <_printf_i+0x244>)
 80083ba:	230a      	movs	r3, #10
 80083bc:	e019      	b.n	80083f2 <_printf_i+0x102>
 80083be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80083c2:	6805      	ldr	r5, [r0, #0]
 80083c4:	600b      	str	r3, [r1, #0]
 80083c6:	bf18      	it	ne
 80083c8:	b22d      	sxthne	r5, r5
 80083ca:	e7ef      	b.n	80083ac <_printf_i+0xbc>
 80083cc:	680b      	ldr	r3, [r1, #0]
 80083ce:	6825      	ldr	r5, [r4, #0]
 80083d0:	1d18      	adds	r0, r3, #4
 80083d2:	6008      	str	r0, [r1, #0]
 80083d4:	0628      	lsls	r0, r5, #24
 80083d6:	d501      	bpl.n	80083dc <_printf_i+0xec>
 80083d8:	681d      	ldr	r5, [r3, #0]
 80083da:	e002      	b.n	80083e2 <_printf_i+0xf2>
 80083dc:	0669      	lsls	r1, r5, #25
 80083de:	d5fb      	bpl.n	80083d8 <_printf_i+0xe8>
 80083e0:	881d      	ldrh	r5, [r3, #0]
 80083e2:	4854      	ldr	r0, [pc, #336]	; (8008534 <_printf_i+0x244>)
 80083e4:	2f6f      	cmp	r7, #111	; 0x6f
 80083e6:	bf0c      	ite	eq
 80083e8:	2308      	moveq	r3, #8
 80083ea:	230a      	movne	r3, #10
 80083ec:	2100      	movs	r1, #0
 80083ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083f2:	6866      	ldr	r6, [r4, #4]
 80083f4:	60a6      	str	r6, [r4, #8]
 80083f6:	2e00      	cmp	r6, #0
 80083f8:	bfa2      	ittt	ge
 80083fa:	6821      	ldrge	r1, [r4, #0]
 80083fc:	f021 0104 	bicge.w	r1, r1, #4
 8008400:	6021      	strge	r1, [r4, #0]
 8008402:	b90d      	cbnz	r5, 8008408 <_printf_i+0x118>
 8008404:	2e00      	cmp	r6, #0
 8008406:	d04d      	beq.n	80084a4 <_printf_i+0x1b4>
 8008408:	4616      	mov	r6, r2
 800840a:	fbb5 f1f3 	udiv	r1, r5, r3
 800840e:	fb03 5711 	mls	r7, r3, r1, r5
 8008412:	5dc7      	ldrb	r7, [r0, r7]
 8008414:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008418:	462f      	mov	r7, r5
 800841a:	42bb      	cmp	r3, r7
 800841c:	460d      	mov	r5, r1
 800841e:	d9f4      	bls.n	800840a <_printf_i+0x11a>
 8008420:	2b08      	cmp	r3, #8
 8008422:	d10b      	bne.n	800843c <_printf_i+0x14c>
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	07df      	lsls	r7, r3, #31
 8008428:	d508      	bpl.n	800843c <_printf_i+0x14c>
 800842a:	6923      	ldr	r3, [r4, #16]
 800842c:	6861      	ldr	r1, [r4, #4]
 800842e:	4299      	cmp	r1, r3
 8008430:	bfde      	ittt	le
 8008432:	2330      	movle	r3, #48	; 0x30
 8008434:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008438:	f106 36ff 	addle.w	r6, r6, #4294967295
 800843c:	1b92      	subs	r2, r2, r6
 800843e:	6122      	str	r2, [r4, #16]
 8008440:	f8cd a000 	str.w	sl, [sp]
 8008444:	464b      	mov	r3, r9
 8008446:	aa03      	add	r2, sp, #12
 8008448:	4621      	mov	r1, r4
 800844a:	4640      	mov	r0, r8
 800844c:	f7ff fee2 	bl	8008214 <_printf_common>
 8008450:	3001      	adds	r0, #1
 8008452:	d14c      	bne.n	80084ee <_printf_i+0x1fe>
 8008454:	f04f 30ff 	mov.w	r0, #4294967295
 8008458:	b004      	add	sp, #16
 800845a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800845e:	4835      	ldr	r0, [pc, #212]	; (8008534 <_printf_i+0x244>)
 8008460:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008464:	6823      	ldr	r3, [r4, #0]
 8008466:	680e      	ldr	r6, [r1, #0]
 8008468:	061f      	lsls	r7, r3, #24
 800846a:	f856 5b04 	ldr.w	r5, [r6], #4
 800846e:	600e      	str	r6, [r1, #0]
 8008470:	d514      	bpl.n	800849c <_printf_i+0x1ac>
 8008472:	07d9      	lsls	r1, r3, #31
 8008474:	bf44      	itt	mi
 8008476:	f043 0320 	orrmi.w	r3, r3, #32
 800847a:	6023      	strmi	r3, [r4, #0]
 800847c:	b91d      	cbnz	r5, 8008486 <_printf_i+0x196>
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	f023 0320 	bic.w	r3, r3, #32
 8008484:	6023      	str	r3, [r4, #0]
 8008486:	2310      	movs	r3, #16
 8008488:	e7b0      	b.n	80083ec <_printf_i+0xfc>
 800848a:	6823      	ldr	r3, [r4, #0]
 800848c:	f043 0320 	orr.w	r3, r3, #32
 8008490:	6023      	str	r3, [r4, #0]
 8008492:	2378      	movs	r3, #120	; 0x78
 8008494:	4828      	ldr	r0, [pc, #160]	; (8008538 <_printf_i+0x248>)
 8008496:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800849a:	e7e3      	b.n	8008464 <_printf_i+0x174>
 800849c:	065e      	lsls	r6, r3, #25
 800849e:	bf48      	it	mi
 80084a0:	b2ad      	uxthmi	r5, r5
 80084a2:	e7e6      	b.n	8008472 <_printf_i+0x182>
 80084a4:	4616      	mov	r6, r2
 80084a6:	e7bb      	b.n	8008420 <_printf_i+0x130>
 80084a8:	680b      	ldr	r3, [r1, #0]
 80084aa:	6826      	ldr	r6, [r4, #0]
 80084ac:	6960      	ldr	r0, [r4, #20]
 80084ae:	1d1d      	adds	r5, r3, #4
 80084b0:	600d      	str	r5, [r1, #0]
 80084b2:	0635      	lsls	r5, r6, #24
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	d501      	bpl.n	80084bc <_printf_i+0x1cc>
 80084b8:	6018      	str	r0, [r3, #0]
 80084ba:	e002      	b.n	80084c2 <_printf_i+0x1d2>
 80084bc:	0671      	lsls	r1, r6, #25
 80084be:	d5fb      	bpl.n	80084b8 <_printf_i+0x1c8>
 80084c0:	8018      	strh	r0, [r3, #0]
 80084c2:	2300      	movs	r3, #0
 80084c4:	6123      	str	r3, [r4, #16]
 80084c6:	4616      	mov	r6, r2
 80084c8:	e7ba      	b.n	8008440 <_printf_i+0x150>
 80084ca:	680b      	ldr	r3, [r1, #0]
 80084cc:	1d1a      	adds	r2, r3, #4
 80084ce:	600a      	str	r2, [r1, #0]
 80084d0:	681e      	ldr	r6, [r3, #0]
 80084d2:	6862      	ldr	r2, [r4, #4]
 80084d4:	2100      	movs	r1, #0
 80084d6:	4630      	mov	r0, r6
 80084d8:	f7f7 fe82 	bl	80001e0 <memchr>
 80084dc:	b108      	cbz	r0, 80084e2 <_printf_i+0x1f2>
 80084de:	1b80      	subs	r0, r0, r6
 80084e0:	6060      	str	r0, [r4, #4]
 80084e2:	6863      	ldr	r3, [r4, #4]
 80084e4:	6123      	str	r3, [r4, #16]
 80084e6:	2300      	movs	r3, #0
 80084e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084ec:	e7a8      	b.n	8008440 <_printf_i+0x150>
 80084ee:	6923      	ldr	r3, [r4, #16]
 80084f0:	4632      	mov	r2, r6
 80084f2:	4649      	mov	r1, r9
 80084f4:	4640      	mov	r0, r8
 80084f6:	47d0      	blx	sl
 80084f8:	3001      	adds	r0, #1
 80084fa:	d0ab      	beq.n	8008454 <_printf_i+0x164>
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	079b      	lsls	r3, r3, #30
 8008500:	d413      	bmi.n	800852a <_printf_i+0x23a>
 8008502:	68e0      	ldr	r0, [r4, #12]
 8008504:	9b03      	ldr	r3, [sp, #12]
 8008506:	4298      	cmp	r0, r3
 8008508:	bfb8      	it	lt
 800850a:	4618      	movlt	r0, r3
 800850c:	e7a4      	b.n	8008458 <_printf_i+0x168>
 800850e:	2301      	movs	r3, #1
 8008510:	4632      	mov	r2, r6
 8008512:	4649      	mov	r1, r9
 8008514:	4640      	mov	r0, r8
 8008516:	47d0      	blx	sl
 8008518:	3001      	adds	r0, #1
 800851a:	d09b      	beq.n	8008454 <_printf_i+0x164>
 800851c:	3501      	adds	r5, #1
 800851e:	68e3      	ldr	r3, [r4, #12]
 8008520:	9903      	ldr	r1, [sp, #12]
 8008522:	1a5b      	subs	r3, r3, r1
 8008524:	42ab      	cmp	r3, r5
 8008526:	dcf2      	bgt.n	800850e <_printf_i+0x21e>
 8008528:	e7eb      	b.n	8008502 <_printf_i+0x212>
 800852a:	2500      	movs	r5, #0
 800852c:	f104 0619 	add.w	r6, r4, #25
 8008530:	e7f5      	b.n	800851e <_printf_i+0x22e>
 8008532:	bf00      	nop
 8008534:	08008ffd 	.word	0x08008ffd
 8008538:	0800900e 	.word	0x0800900e

0800853c <memcpy>:
 800853c:	440a      	add	r2, r1
 800853e:	4291      	cmp	r1, r2
 8008540:	f100 33ff 	add.w	r3, r0, #4294967295
 8008544:	d100      	bne.n	8008548 <memcpy+0xc>
 8008546:	4770      	bx	lr
 8008548:	b510      	push	{r4, lr}
 800854a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800854e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008552:	4291      	cmp	r1, r2
 8008554:	d1f9      	bne.n	800854a <memcpy+0xe>
 8008556:	bd10      	pop	{r4, pc}

08008558 <memmove>:
 8008558:	4288      	cmp	r0, r1
 800855a:	b510      	push	{r4, lr}
 800855c:	eb01 0402 	add.w	r4, r1, r2
 8008560:	d902      	bls.n	8008568 <memmove+0x10>
 8008562:	4284      	cmp	r4, r0
 8008564:	4623      	mov	r3, r4
 8008566:	d807      	bhi.n	8008578 <memmove+0x20>
 8008568:	1e43      	subs	r3, r0, #1
 800856a:	42a1      	cmp	r1, r4
 800856c:	d008      	beq.n	8008580 <memmove+0x28>
 800856e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008572:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008576:	e7f8      	b.n	800856a <memmove+0x12>
 8008578:	4402      	add	r2, r0
 800857a:	4601      	mov	r1, r0
 800857c:	428a      	cmp	r2, r1
 800857e:	d100      	bne.n	8008582 <memmove+0x2a>
 8008580:	bd10      	pop	{r4, pc}
 8008582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008586:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800858a:	e7f7      	b.n	800857c <memmove+0x24>

0800858c <_free_r>:
 800858c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800858e:	2900      	cmp	r1, #0
 8008590:	d048      	beq.n	8008624 <_free_r+0x98>
 8008592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008596:	9001      	str	r0, [sp, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	f1a1 0404 	sub.w	r4, r1, #4
 800859e:	bfb8      	it	lt
 80085a0:	18e4      	addlt	r4, r4, r3
 80085a2:	f000 f8d3 	bl	800874c <__malloc_lock>
 80085a6:	4a20      	ldr	r2, [pc, #128]	; (8008628 <_free_r+0x9c>)
 80085a8:	9801      	ldr	r0, [sp, #4]
 80085aa:	6813      	ldr	r3, [r2, #0]
 80085ac:	4615      	mov	r5, r2
 80085ae:	b933      	cbnz	r3, 80085be <_free_r+0x32>
 80085b0:	6063      	str	r3, [r4, #4]
 80085b2:	6014      	str	r4, [r2, #0]
 80085b4:	b003      	add	sp, #12
 80085b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085ba:	f000 b8cd 	b.w	8008758 <__malloc_unlock>
 80085be:	42a3      	cmp	r3, r4
 80085c0:	d90b      	bls.n	80085da <_free_r+0x4e>
 80085c2:	6821      	ldr	r1, [r4, #0]
 80085c4:	1862      	adds	r2, r4, r1
 80085c6:	4293      	cmp	r3, r2
 80085c8:	bf04      	itt	eq
 80085ca:	681a      	ldreq	r2, [r3, #0]
 80085cc:	685b      	ldreq	r3, [r3, #4]
 80085ce:	6063      	str	r3, [r4, #4]
 80085d0:	bf04      	itt	eq
 80085d2:	1852      	addeq	r2, r2, r1
 80085d4:	6022      	streq	r2, [r4, #0]
 80085d6:	602c      	str	r4, [r5, #0]
 80085d8:	e7ec      	b.n	80085b4 <_free_r+0x28>
 80085da:	461a      	mov	r2, r3
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	b10b      	cbz	r3, 80085e4 <_free_r+0x58>
 80085e0:	42a3      	cmp	r3, r4
 80085e2:	d9fa      	bls.n	80085da <_free_r+0x4e>
 80085e4:	6811      	ldr	r1, [r2, #0]
 80085e6:	1855      	adds	r5, r2, r1
 80085e8:	42a5      	cmp	r5, r4
 80085ea:	d10b      	bne.n	8008604 <_free_r+0x78>
 80085ec:	6824      	ldr	r4, [r4, #0]
 80085ee:	4421      	add	r1, r4
 80085f0:	1854      	adds	r4, r2, r1
 80085f2:	42a3      	cmp	r3, r4
 80085f4:	6011      	str	r1, [r2, #0]
 80085f6:	d1dd      	bne.n	80085b4 <_free_r+0x28>
 80085f8:	681c      	ldr	r4, [r3, #0]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	6053      	str	r3, [r2, #4]
 80085fe:	4421      	add	r1, r4
 8008600:	6011      	str	r1, [r2, #0]
 8008602:	e7d7      	b.n	80085b4 <_free_r+0x28>
 8008604:	d902      	bls.n	800860c <_free_r+0x80>
 8008606:	230c      	movs	r3, #12
 8008608:	6003      	str	r3, [r0, #0]
 800860a:	e7d3      	b.n	80085b4 <_free_r+0x28>
 800860c:	6825      	ldr	r5, [r4, #0]
 800860e:	1961      	adds	r1, r4, r5
 8008610:	428b      	cmp	r3, r1
 8008612:	bf04      	itt	eq
 8008614:	6819      	ldreq	r1, [r3, #0]
 8008616:	685b      	ldreq	r3, [r3, #4]
 8008618:	6063      	str	r3, [r4, #4]
 800861a:	bf04      	itt	eq
 800861c:	1949      	addeq	r1, r1, r5
 800861e:	6021      	streq	r1, [r4, #0]
 8008620:	6054      	str	r4, [r2, #4]
 8008622:	e7c7      	b.n	80085b4 <_free_r+0x28>
 8008624:	b003      	add	sp, #12
 8008626:	bd30      	pop	{r4, r5, pc}
 8008628:	200008ec 	.word	0x200008ec

0800862c <_malloc_r>:
 800862c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800862e:	1ccd      	adds	r5, r1, #3
 8008630:	f025 0503 	bic.w	r5, r5, #3
 8008634:	3508      	adds	r5, #8
 8008636:	2d0c      	cmp	r5, #12
 8008638:	bf38      	it	cc
 800863a:	250c      	movcc	r5, #12
 800863c:	2d00      	cmp	r5, #0
 800863e:	4606      	mov	r6, r0
 8008640:	db01      	blt.n	8008646 <_malloc_r+0x1a>
 8008642:	42a9      	cmp	r1, r5
 8008644:	d903      	bls.n	800864e <_malloc_r+0x22>
 8008646:	230c      	movs	r3, #12
 8008648:	6033      	str	r3, [r6, #0]
 800864a:	2000      	movs	r0, #0
 800864c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800864e:	f000 f87d 	bl	800874c <__malloc_lock>
 8008652:	4921      	ldr	r1, [pc, #132]	; (80086d8 <_malloc_r+0xac>)
 8008654:	680a      	ldr	r2, [r1, #0]
 8008656:	4614      	mov	r4, r2
 8008658:	b99c      	cbnz	r4, 8008682 <_malloc_r+0x56>
 800865a:	4f20      	ldr	r7, [pc, #128]	; (80086dc <_malloc_r+0xb0>)
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	b923      	cbnz	r3, 800866a <_malloc_r+0x3e>
 8008660:	4621      	mov	r1, r4
 8008662:	4630      	mov	r0, r6
 8008664:	f000 f862 	bl	800872c <_sbrk_r>
 8008668:	6038      	str	r0, [r7, #0]
 800866a:	4629      	mov	r1, r5
 800866c:	4630      	mov	r0, r6
 800866e:	f000 f85d 	bl	800872c <_sbrk_r>
 8008672:	1c43      	adds	r3, r0, #1
 8008674:	d123      	bne.n	80086be <_malloc_r+0x92>
 8008676:	230c      	movs	r3, #12
 8008678:	6033      	str	r3, [r6, #0]
 800867a:	4630      	mov	r0, r6
 800867c:	f000 f86c 	bl	8008758 <__malloc_unlock>
 8008680:	e7e3      	b.n	800864a <_malloc_r+0x1e>
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	1b5b      	subs	r3, r3, r5
 8008686:	d417      	bmi.n	80086b8 <_malloc_r+0x8c>
 8008688:	2b0b      	cmp	r3, #11
 800868a:	d903      	bls.n	8008694 <_malloc_r+0x68>
 800868c:	6023      	str	r3, [r4, #0]
 800868e:	441c      	add	r4, r3
 8008690:	6025      	str	r5, [r4, #0]
 8008692:	e004      	b.n	800869e <_malloc_r+0x72>
 8008694:	6863      	ldr	r3, [r4, #4]
 8008696:	42a2      	cmp	r2, r4
 8008698:	bf0c      	ite	eq
 800869a:	600b      	streq	r3, [r1, #0]
 800869c:	6053      	strne	r3, [r2, #4]
 800869e:	4630      	mov	r0, r6
 80086a0:	f000 f85a 	bl	8008758 <__malloc_unlock>
 80086a4:	f104 000b 	add.w	r0, r4, #11
 80086a8:	1d23      	adds	r3, r4, #4
 80086aa:	f020 0007 	bic.w	r0, r0, #7
 80086ae:	1ac2      	subs	r2, r0, r3
 80086b0:	d0cc      	beq.n	800864c <_malloc_r+0x20>
 80086b2:	1a1b      	subs	r3, r3, r0
 80086b4:	50a3      	str	r3, [r4, r2]
 80086b6:	e7c9      	b.n	800864c <_malloc_r+0x20>
 80086b8:	4622      	mov	r2, r4
 80086ba:	6864      	ldr	r4, [r4, #4]
 80086bc:	e7cc      	b.n	8008658 <_malloc_r+0x2c>
 80086be:	1cc4      	adds	r4, r0, #3
 80086c0:	f024 0403 	bic.w	r4, r4, #3
 80086c4:	42a0      	cmp	r0, r4
 80086c6:	d0e3      	beq.n	8008690 <_malloc_r+0x64>
 80086c8:	1a21      	subs	r1, r4, r0
 80086ca:	4630      	mov	r0, r6
 80086cc:	f000 f82e 	bl	800872c <_sbrk_r>
 80086d0:	3001      	adds	r0, #1
 80086d2:	d1dd      	bne.n	8008690 <_malloc_r+0x64>
 80086d4:	e7cf      	b.n	8008676 <_malloc_r+0x4a>
 80086d6:	bf00      	nop
 80086d8:	200008ec 	.word	0x200008ec
 80086dc:	200008f0 	.word	0x200008f0

080086e0 <_realloc_r>:
 80086e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e2:	4607      	mov	r7, r0
 80086e4:	4614      	mov	r4, r2
 80086e6:	460e      	mov	r6, r1
 80086e8:	b921      	cbnz	r1, 80086f4 <_realloc_r+0x14>
 80086ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80086ee:	4611      	mov	r1, r2
 80086f0:	f7ff bf9c 	b.w	800862c <_malloc_r>
 80086f4:	b922      	cbnz	r2, 8008700 <_realloc_r+0x20>
 80086f6:	f7ff ff49 	bl	800858c <_free_r>
 80086fa:	4625      	mov	r5, r4
 80086fc:	4628      	mov	r0, r5
 80086fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008700:	f000 f830 	bl	8008764 <_malloc_usable_size_r>
 8008704:	42a0      	cmp	r0, r4
 8008706:	d20f      	bcs.n	8008728 <_realloc_r+0x48>
 8008708:	4621      	mov	r1, r4
 800870a:	4638      	mov	r0, r7
 800870c:	f7ff ff8e 	bl	800862c <_malloc_r>
 8008710:	4605      	mov	r5, r0
 8008712:	2800      	cmp	r0, #0
 8008714:	d0f2      	beq.n	80086fc <_realloc_r+0x1c>
 8008716:	4631      	mov	r1, r6
 8008718:	4622      	mov	r2, r4
 800871a:	f7ff ff0f 	bl	800853c <memcpy>
 800871e:	4631      	mov	r1, r6
 8008720:	4638      	mov	r0, r7
 8008722:	f7ff ff33 	bl	800858c <_free_r>
 8008726:	e7e9      	b.n	80086fc <_realloc_r+0x1c>
 8008728:	4635      	mov	r5, r6
 800872a:	e7e7      	b.n	80086fc <_realloc_r+0x1c>

0800872c <_sbrk_r>:
 800872c:	b538      	push	{r3, r4, r5, lr}
 800872e:	4d06      	ldr	r5, [pc, #24]	; (8008748 <_sbrk_r+0x1c>)
 8008730:	2300      	movs	r3, #0
 8008732:	4604      	mov	r4, r0
 8008734:	4608      	mov	r0, r1
 8008736:	602b      	str	r3, [r5, #0]
 8008738:	f7fb fe5c 	bl	80043f4 <_sbrk>
 800873c:	1c43      	adds	r3, r0, #1
 800873e:	d102      	bne.n	8008746 <_sbrk_r+0x1a>
 8008740:	682b      	ldr	r3, [r5, #0]
 8008742:	b103      	cbz	r3, 8008746 <_sbrk_r+0x1a>
 8008744:	6023      	str	r3, [r4, #0]
 8008746:	bd38      	pop	{r3, r4, r5, pc}
 8008748:	20000e9c 	.word	0x20000e9c

0800874c <__malloc_lock>:
 800874c:	4801      	ldr	r0, [pc, #4]	; (8008754 <__malloc_lock+0x8>)
 800874e:	f000 b811 	b.w	8008774 <__retarget_lock_acquire_recursive>
 8008752:	bf00      	nop
 8008754:	20000ea4 	.word	0x20000ea4

08008758 <__malloc_unlock>:
 8008758:	4801      	ldr	r0, [pc, #4]	; (8008760 <__malloc_unlock+0x8>)
 800875a:	f000 b80c 	b.w	8008776 <__retarget_lock_release_recursive>
 800875e:	bf00      	nop
 8008760:	20000ea4 	.word	0x20000ea4

08008764 <_malloc_usable_size_r>:
 8008764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008768:	1f18      	subs	r0, r3, #4
 800876a:	2b00      	cmp	r3, #0
 800876c:	bfbc      	itt	lt
 800876e:	580b      	ldrlt	r3, [r1, r0]
 8008770:	18c0      	addlt	r0, r0, r3
 8008772:	4770      	bx	lr

08008774 <__retarget_lock_acquire_recursive>:
 8008774:	4770      	bx	lr

08008776 <__retarget_lock_release_recursive>:
 8008776:	4770      	bx	lr

08008778 <_init>:
 8008778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877a:	bf00      	nop
 800877c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800877e:	bc08      	pop	{r3}
 8008780:	469e      	mov	lr, r3
 8008782:	4770      	bx	lr

08008784 <_fini>:
 8008784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008786:	bf00      	nop
 8008788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800878a:	bc08      	pop	{r3}
 800878c:	469e      	mov	lr, r3
 800878e:	4770      	bx	lr
