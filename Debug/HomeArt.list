
HomeArt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005810  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  080059a0  080059a0  000159a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006030  08006030  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006030  08006030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006038  08006038  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006038  08006038  00016038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800603c  0800603c  0001603c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000ad8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b48  20000b48  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011d8f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025b1  00000000  00000000  00031e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  000343e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cd8  00000000  00000000  00035160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022280  00000000  00000000  00035e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010663  00000000  00000000  000580b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbd62  00000000  00000000  0006871b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013447d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bf0  00000000  00000000  001344d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005988 	.word	0x08005988

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005988 	.word	0x08005988

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <ESP_clearBuffer>:
char *Terminate = "</body></html>";


/*****************************************************************************************************************************************/

void ESP_clearBuffer(void){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

	memset(buffer_app, 0, 60);
 800057c:	223c      	movs	r2, #60	; 0x3c
 800057e:	2100      	movs	r1, #0
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <ESP_clearBuffer+0x18>)
 8000582:	f004 fdcb 	bl	800511c <memset>
	buffer_index = 0;
 8000586:	4b03      	ldr	r3, [pc, #12]	; (8000594 <ESP_clearBuffer+0x1c>)
 8000588:	2200      	movs	r2, #0
 800058a:	801a      	strh	r2, [r3, #0]
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200008dc 	.word	0x200008dc
 8000594:	200009c2 	.word	0x200009c2

08000598 <ESP_Init>:


void ESP_Init(char *SSID, char *PASSWD){
 8000598:	b580      	push	{r7, lr}
 800059a:	b09a      	sub	sp, #104	; 0x68
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]

	ESP_clearBuffer();
 80005a2:	f7ff ffe9 	bl	8000578 <ESP_clearBuffer>
	char data[80];

	ringInit();
 80005a6:	f000 fb8b 	bl	8000cc0 <ringInit>

	HAL_Delay(1000);
 80005aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ae:	f001 fe87 	bl	80022c0 <HAL_Delay>

	/********** AT **********/

	UART_send("AT\r\n", WiFi_UART);
 80005b2:	4974      	ldr	r1, [pc, #464]	; (8000784 <ESP_Init+0x1ec>)
 80005b4:	4874      	ldr	r0, [pc, #464]	; (8000788 <ESP_Init+0x1f0>)
 80005b6:	f000 fd41 	bl	800103c <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 80005ba:	bf00      	nop
 80005bc:	4971      	ldr	r1, [pc, #452]	; (8000784 <ESP_Init+0x1ec>)
 80005be:	4873      	ldr	r0, [pc, #460]	; (800078c <ESP_Init+0x1f4>)
 80005c0:	f000 fdd2 	bl	8001168 <UART_waitFor>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f8      	beq.n	80005bc <ESP_Init+0x24>
	UART_send("AT  ---->  OK\n", PC_UART);
 80005ca:	4971      	ldr	r1, [pc, #452]	; (8000790 <ESP_Init+0x1f8>)
 80005cc:	4871      	ldr	r0, [pc, #452]	; (8000794 <ESP_Init+0x1fc>)
 80005ce:	f000 fd35 	bl	800103c <UART_send>


	HAL_Delay(2000);
 80005d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005d6:	f001 fe73 	bl	80022c0 <HAL_Delay>


	/********** AT+RST **********/
	UART_send("AT+RST\r\n", WiFi_UART);
 80005da:	496a      	ldr	r1, [pc, #424]	; (8000784 <ESP_Init+0x1ec>)
 80005dc:	486e      	ldr	r0, [pc, #440]	; (8000798 <ESP_Init+0x200>)
 80005de:	f000 fd2d 	bl	800103c <UART_send>
	UART_send("\nReseteando ", PC_UART);
 80005e2:	496b      	ldr	r1, [pc, #428]	; (8000790 <ESP_Init+0x1f8>)
 80005e4:	486d      	ldr	r0, [pc, #436]	; (800079c <ESP_Init+0x204>)
 80005e6:	f000 fd29 	bl	800103c <UART_send>

	for (int i=0; i<3; i++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	667b      	str	r3, [r7, #100]	; 0x64
 80005ee:	e00a      	b.n	8000606 <ESP_Init+0x6e>
	{
		UART_send(" . ", PC_UART);
 80005f0:	4967      	ldr	r1, [pc, #412]	; (8000790 <ESP_Init+0x1f8>)
 80005f2:	486b      	ldr	r0, [pc, #428]	; (80007a0 <ESP_Init+0x208>)
 80005f4:	f000 fd22 	bl	800103c <UART_send>
		HAL_Delay(1500);
 80005f8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005fc:	f001 fe60 	bl	80022c0 <HAL_Delay>
	for (int i=0; i<3; i++)
 8000600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000602:	3301      	adds	r3, #1
 8000604:	667b      	str	r3, [r7, #100]	; 0x64
 8000606:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000608:	2b02      	cmp	r3, #2
 800060a:	ddf1      	ble.n	80005f0 <ESP_Init+0x58>
	}


	/********** AT **********/
	UART_send("AT\r\n", WiFi_UART);
 800060c:	495d      	ldr	r1, [pc, #372]	; (8000784 <ESP_Init+0x1ec>)
 800060e:	485e      	ldr	r0, [pc, #376]	; (8000788 <ESP_Init+0x1f0>)
 8000610:	f000 fd14 	bl	800103c <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 8000614:	bf00      	nop
 8000616:	495b      	ldr	r1, [pc, #364]	; (8000784 <ESP_Init+0x1ec>)
 8000618:	485c      	ldr	r0, [pc, #368]	; (800078c <ESP_Init+0x1f4>)
 800061a:	f000 fda5 	bl	8001168 <UART_waitFor>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d0f8      	beq.n	8000616 <ESP_Init+0x7e>
	UART_send("\n\nAT  ---->  OK\n\n", PC_UART);
 8000624:	495a      	ldr	r1, [pc, #360]	; (8000790 <ESP_Init+0x1f8>)
 8000626:	485f      	ldr	r0, [pc, #380]	; (80007a4 <ESP_Init+0x20c>)
 8000628:	f000 fd08 	bl	800103c <UART_send>


	HAL_Delay(2000);
 800062c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000630:	f001 fe46 	bl	80022c0 <HAL_Delay>


	/********** AT+CWMODE=3 **********/
	UART_send("AT+CWMODE=3\r\n", WiFi_UART);
 8000634:	4953      	ldr	r1, [pc, #332]	; (8000784 <ESP_Init+0x1ec>)
 8000636:	485c      	ldr	r0, [pc, #368]	; (80007a8 <ESP_Init+0x210>)
 8000638:	f000 fd00 	bl	800103c <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 800063c:	bf00      	nop
 800063e:	4951      	ldr	r1, [pc, #324]	; (8000784 <ESP_Init+0x1ec>)
 8000640:	4852      	ldr	r0, [pc, #328]	; (800078c <ESP_Init+0x1f4>)
 8000642:	f000 fd91 	bl	8001168 <UART_waitFor>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d0f8      	beq.n	800063e <ESP_Init+0xa6>
	UART_send("CW MODE  ---->  3\n\n", PC_UART);
 800064c:	4950      	ldr	r1, [pc, #320]	; (8000790 <ESP_Init+0x1f8>)
 800064e:	4857      	ldr	r0, [pc, #348]	; (80007ac <ESP_Init+0x214>)
 8000650:	f000 fcf4 	bl	800103c <UART_send>


	/********** AT+CWJAP="SSID","PASSWD" **********/
	UART_send("Conectando con la RED proporcionada ", PC_UART);
 8000654:	494e      	ldr	r1, [pc, #312]	; (8000790 <ESP_Init+0x1f8>)
 8000656:	4856      	ldr	r0, [pc, #344]	; (80007b0 <ESP_Init+0x218>)
 8000658:	f000 fcf0 	bl	800103c <UART_send>

	for (int i=0; i<3; i++)
 800065c:	2300      	movs	r3, #0
 800065e:	663b      	str	r3, [r7, #96]	; 0x60
 8000660:	e00a      	b.n	8000678 <ESP_Init+0xe0>
	{
		UART_send(" . ", PC_UART);
 8000662:	494b      	ldr	r1, [pc, #300]	; (8000790 <ESP_Init+0x1f8>)
 8000664:	484e      	ldr	r0, [pc, #312]	; (80007a0 <ESP_Init+0x208>)
 8000666:	f000 fce9 	bl	800103c <UART_send>
		HAL_Delay(1500);
 800066a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800066e:	f001 fe27 	bl	80022c0 <HAL_Delay>
	for (int i=0; i<3; i++)
 8000672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000674:	3301      	adds	r3, #1
 8000676:	663b      	str	r3, [r7, #96]	; 0x60
 8000678:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800067a:	2b02      	cmp	r3, #2
 800067c:	ddf1      	ble.n	8000662 <ESP_Init+0xca>
	}

	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 800067e:	f107 000c 	add.w	r0, r7, #12
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	494b      	ldr	r1, [pc, #300]	; (80007b4 <ESP_Init+0x21c>)
 8000688:	f004 fd50 	bl	800512c <siprintf>
	UART_send(data, WiFi_UART);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	493c      	ldr	r1, [pc, #240]	; (8000784 <ESP_Init+0x1ec>)
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fcd2 	bl	800103c <UART_send>
	while (!(UART_waitFor("WIFI GOT IP\r\n\r\nOK\r\n", WiFi_UART)));
 8000698:	bf00      	nop
 800069a:	493a      	ldr	r1, [pc, #232]	; (8000784 <ESP_Init+0x1ec>)
 800069c:	4846      	ldr	r0, [pc, #280]	; (80007b8 <ESP_Init+0x220>)
 800069e:	f000 fd63 	bl	8001168 <UART_waitFor>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d0f8      	beq.n	800069a <ESP_Init+0x102>
	sprintf (data, "\n\nConectado a  \"%s\"\n\n", SSID);
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	4943      	ldr	r1, [pc, #268]	; (80007bc <ESP_Init+0x224>)
 80006b0:	4618      	mov	r0, r3
 80006b2:	f004 fd3b 	bl	800512c <siprintf>
	UART_send(data,PC_UART);
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	4935      	ldr	r1, [pc, #212]	; (8000790 <ESP_Init+0x1f8>)
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fcbd 	bl	800103c <UART_send>
	//UART_send("AT+CIPSTA?\r\n", WiFi_UART);
	//sprintf (data, "AT+CIPSTA?\r\n");


	/********** AT+CIFSR **********/
	UART_send("AT+CIFSR\r\n", WiFi_UART);
 80006c2:	4930      	ldr	r1, [pc, #192]	; (8000784 <ESP_Init+0x1ec>)
 80006c4:	483e      	ldr	r0, [pc, #248]	; (80007c0 <ESP_Init+0x228>)
 80006c6:	f000 fcb9 	bl	800103c <UART_send>
	while (!(UART_waitFor("CIFSR:STAIP,\"", WiFi_UART)));
 80006ca:	bf00      	nop
 80006cc:	492d      	ldr	r1, [pc, #180]	; (8000784 <ESP_Init+0x1ec>)
 80006ce:	483d      	ldr	r0, [pc, #244]	; (80007c4 <ESP_Init+0x22c>)
 80006d0:	f000 fd4a 	bl	8001168 <UART_waitFor>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d0f8      	beq.n	80006cc <ESP_Init+0x134>
	while (!(UART_copyUpto("\"",buffer, WiFi_UART)));
 80006da:	bf00      	nop
 80006dc:	4a29      	ldr	r2, [pc, #164]	; (8000784 <ESP_Init+0x1ec>)
 80006de:	493a      	ldr	r1, [pc, #232]	; (80007c8 <ESP_Init+0x230>)
 80006e0:	483a      	ldr	r0, [pc, #232]	; (80007cc <ESP_Init+0x234>)
 80006e2:	f000 fcc3 	bl	800106c <UART_copyUpto>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0f7      	beq.n	80006dc <ESP_Init+0x144>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 80006ec:	bf00      	nop
 80006ee:	4925      	ldr	r1, [pc, #148]	; (8000784 <ESP_Init+0x1ec>)
 80006f0:	4826      	ldr	r0, [pc, #152]	; (800078c <ESP_Init+0x1f4>)
 80006f2:	f000 fd39 	bl	8001168 <UART_waitFor>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d0f8      	beq.n	80006ee <ESP_Init+0x156>
	int len = strlen (buffer);
 80006fc:	4832      	ldr	r0, [pc, #200]	; (80007c8 <ESP_Init+0x230>)
 80006fe:	f7ff fd67 	bl	80001d0 <strlen>
 8000702:	4603      	mov	r3, r0
 8000704:	65fb      	str	r3, [r7, #92]	; 0x5c
	buffer[len-1] = '\0';
 8000706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000708:	3b01      	subs	r3, #1
 800070a:	4a2f      	ldr	r2, [pc, #188]	; (80007c8 <ESP_Init+0x230>)
 800070c:	2100      	movs	r1, #0
 800070e:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP :  %s\n\n", buffer);
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	4a2c      	ldr	r2, [pc, #176]	; (80007c8 <ESP_Init+0x230>)
 8000716:	492e      	ldr	r1, [pc, #184]	; (80007d0 <ESP_Init+0x238>)
 8000718:	4618      	mov	r0, r3
 800071a:	f004 fd07 	bl	800512c <siprintf>
	UART_send(data, PC_UART);
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	491b      	ldr	r1, [pc, #108]	; (8000790 <ESP_Init+0x1f8>)
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fc89 	bl	800103c <UART_send>


	/********** AT+CIPMUX=1 **********/
	UART_send("AT+CIPMUX=1\r\n", WiFi_UART);
 800072a:	4916      	ldr	r1, [pc, #88]	; (8000784 <ESP_Init+0x1ec>)
 800072c:	4829      	ldr	r0, [pc, #164]	; (80007d4 <ESP_Init+0x23c>)
 800072e:	f000 fc85 	bl	800103c <UART_send>
	while (!(UART_waitFor("AT+CIPMUX=1\r\r\n\r\nOK\r\n", WiFi_UART)));
 8000732:	bf00      	nop
 8000734:	4913      	ldr	r1, [pc, #76]	; (8000784 <ESP_Init+0x1ec>)
 8000736:	4828      	ldr	r0, [pc, #160]	; (80007d8 <ESP_Init+0x240>)
 8000738:	f000 fd16 	bl	8001168 <UART_waitFor>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0f8      	beq.n	8000734 <ESP_Init+0x19c>
	UART_send("CIPMUX  ---->  OK\n\n", PC_UART);
 8000742:	4913      	ldr	r1, [pc, #76]	; (8000790 <ESP_Init+0x1f8>)
 8000744:	4825      	ldr	r0, [pc, #148]	; (80007dc <ESP_Init+0x244>)
 8000746:	f000 fc79 	bl	800103c <UART_send>
	//while (!(UART_waitFor("OK\r\n", WiFi_UART)));
	//UART_send("CIPSTART  ---->  OK\n\n", PC_UART);


	/********** AT+CIPSERVER=1,80 **********/
	UART_send("AT+CIPSERVER=1,80\r\n", WiFi_UART);
 800074a:	490e      	ldr	r1, [pc, #56]	; (8000784 <ESP_Init+0x1ec>)
 800074c:	4824      	ldr	r0, [pc, #144]	; (80007e0 <ESP_Init+0x248>)
 800074e:	f000 fc75 	bl	800103c <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 8000752:	bf00      	nop
 8000754:	490b      	ldr	r1, [pc, #44]	; (8000784 <ESP_Init+0x1ec>)
 8000756:	480d      	ldr	r0, [pc, #52]	; (800078c <ESP_Init+0x1f4>)
 8000758:	f000 fd06 	bl	8001168 <UART_waitFor>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d0f8      	beq.n	8000754 <ESP_Init+0x1bc>
	UART_send("CIPSERVER  ---->  OK\n\n", PC_UART);
 8000762:	490b      	ldr	r1, [pc, #44]	; (8000790 <ESP_Init+0x1f8>)
 8000764:	481f      	ldr	r0, [pc, #124]	; (80007e4 <ESP_Init+0x24c>)
 8000766:	f000 fc69 	bl	800103c <UART_send>


	/********** FIN **********/
	UART_send("Conectado a la IP\n\n", PC_UART);
 800076a:	4909      	ldr	r1, [pc, #36]	; (8000790 <ESP_Init+0x1f8>)
 800076c:	481e      	ldr	r0, [pc, #120]	; (80007e8 <ESP_Init+0x250>)
 800076e:	f000 fc65 	bl	800103c <UART_send>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1); // CONNECTED
 8000772:	2201      	movs	r2, #1
 8000774:	2101      	movs	r1, #1
 8000776:	481d      	ldr	r0, [pc, #116]	; (80007ec <ESP_Init+0x254>)
 8000778:	f002 f91e 	bl	80029b8 <HAL_GPIO_WritePin>
}
 800077c:	bf00      	nop
 800077e:	3768      	adds	r7, #104	; 0x68
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000af0 	.word	0x20000af0
 8000788:	08005db4 	.word	0x08005db4
 800078c:	08005dbc 	.word	0x08005dbc
 8000790:	20000aac 	.word	0x20000aac
 8000794:	08005dc4 	.word	0x08005dc4
 8000798:	08005dd4 	.word	0x08005dd4
 800079c:	08005de0 	.word	0x08005de0
 80007a0:	08005df0 	.word	0x08005df0
 80007a4:	08005df4 	.word	0x08005df4
 80007a8:	08005e08 	.word	0x08005e08
 80007ac:	08005e18 	.word	0x08005e18
 80007b0:	08005e2c 	.word	0x08005e2c
 80007b4:	08005e54 	.word	0x08005e54
 80007b8:	08005e6c 	.word	0x08005e6c
 80007bc:	08005e80 	.word	0x08005e80
 80007c0:	08005e98 	.word	0x08005e98
 80007c4:	08005ea4 	.word	0x08005ea4
 80007c8:	20000918 	.word	0x20000918
 80007cc:	08005eb4 	.word	0x08005eb4
 80007d0:	08005eb8 	.word	0x08005eb8
 80007d4:	08005ec4 	.word	0x08005ec4
 80007d8:	08005ed4 	.word	0x08005ed4
 80007dc:	08005eec 	.word	0x08005eec
 80007e0:	08005f00 	.word	0x08005f00
 80007e4:	08005f14 	.word	0x08005f14
 80007e8:	08005f2c 	.word	0x08005f2c
 80007ec:	40020800 	.word	0x40020800

080007f0 <ESP_messageHandler>:
	}
	return -1;
}


void ESP_messageHandler(void){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

	//__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
	ESP_clearBuffer();
 80007f4:	f7ff fec0 	bl	8000578 <ESP_clearBuffer>
	//memset(textrc, 0, 70);

	HAL_UART_Receive(&huart2, (uint8_t *)textrc, 100, 100); //(uint8_t *)
 80007f8:	2364      	movs	r3, #100	; 0x64
 80007fa:	2264      	movs	r2, #100	; 0x64
 80007fc:	49ad      	ldr	r1, [pc, #692]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 80007fe:	48ae      	ldr	r0, [pc, #696]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000800:	f003 fd37 	bl	8004272 <HAL_UART_Receive>

	//while (!(UART_waitFor("SET", WiFi_UART)))
	{
		HAL_UART_Transmit(&huart6, (uint8_t *)textrc, 100, HAL_MAX_DELAY);
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
 8000808:	2264      	movs	r2, #100	; 0x64
 800080a:	49aa      	ldr	r1, [pc, #680]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 800080c:	48ab      	ldr	r0, [pc, #684]	; (8000abc <ESP_messageHandler+0x2cc>)
 800080e:	f003 fc9e 	bl	800414e <HAL_UART_Transmit>
		//HAL_Delay(10);
		UART_send("\n", PC_UART);
 8000812:	49aa      	ldr	r1, [pc, #680]	; (8000abc <ESP_messageHandler+0x2cc>)
 8000814:	48aa      	ldr	r0, [pc, #680]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000816:	f000 fc11 	bl	800103c <UART_send>
	}

	fragment[0] = textrc[25]; // Asignación de Fragmento
 800081a:	4ba6      	ldr	r3, [pc, #664]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 800081c:	7e5a      	ldrb	r2, [r3, #25]
 800081e:	4ba9      	ldr	r3, [pc, #676]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 8000820:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart6, (uint8_t *)fragment, 1, HAL_MAX_DELAY);
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	2201      	movs	r2, #1
 8000828:	49a6      	ldr	r1, [pc, #664]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 800082a:	48a4      	ldr	r0, [pc, #656]	; (8000abc <ESP_messageHandler+0x2cc>)
 800082c:	f003 fc8f 	bl	800414e <HAL_UART_Transmit>
	UART_send("\n", PC_UART);
 8000830:	49a2      	ldr	r1, [pc, #648]	; (8000abc <ESP_messageHandler+0x2cc>)
 8000832:	48a3      	ldr	r0, [pc, #652]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000834:	f000 fc02 	bl	800103c <UART_send>
	//HAL_UART_Transmit(&huart6, (uint8_t *)vIlum, 2, HAL_MAX_DELAY);
	//UART_send("\n", PC_UART);

	// ILUMINACIÓN
	if (fragment[0] == 'i'){
 8000838:	4ba2      	ldr	r3, [pc, #648]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b69      	cmp	r3, #105	; 0x69
 800083e:	f040 8214 	bne.w	8000c6a <ESP_messageHandler+0x47a>
		UART_send("ILUMINACION \n", PC_UART);
 8000842:	499e      	ldr	r1, [pc, #632]	; (8000abc <ESP_messageHandler+0x2cc>)
 8000844:	48a0      	ldr	r0, [pc, #640]	; (8000ac8 <ESP_messageHandler+0x2d8>)
 8000846:	f000 fbf9 	bl	800103c <UART_send>
		vIlum[0] = textrc[28]; 	// Luz Sala
 800084a:	4b9a      	ldr	r3, [pc, #616]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 800084c:	7f1a      	ldrb	r2, [r3, #28]
 800084e:	4b9f      	ldr	r3, [pc, #636]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000850:	701a      	strb	r2, [r3, #0]
		vIlum[1] = textrc[31]; 	// Luz Comedor
 8000852:	4b98      	ldr	r3, [pc, #608]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 8000854:	7fda      	ldrb	r2, [r3, #31]
 8000856:	4b9d      	ldr	r3, [pc, #628]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000858:	705a      	strb	r2, [r3, #1]
		vIlum[2] = textrc[34]; 	// Luz Ambiente
 800085a:	4b96      	ldr	r3, [pc, #600]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 800085c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000860:	4b9a      	ldr	r3, [pc, #616]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000862:	709a      	strb	r2, [r3, #2]
		vIlum[3] = textrc[37]; 	// Luz Recibidor
 8000864:	4b93      	ldr	r3, [pc, #588]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 8000866:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800086a:	4b98      	ldr	r3, [pc, #608]	; (8000acc <ESP_messageHandler+0x2dc>)
 800086c:	70da      	strb	r2, [r3, #3]
		vIlum[4] = textrc[40]; 	// Luz Cocina
 800086e:	4b91      	ldr	r3, [pc, #580]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 8000870:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000874:	4b95      	ldr	r3, [pc, #596]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000876:	711a      	strb	r2, [r3, #4]
		vIlum[5] = textrc[43]; 	// Luz Fregadero
 8000878:	4b8e      	ldr	r3, [pc, #568]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 800087a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800087e:	4b93      	ldr	r3, [pc, #588]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000880:	715a      	strb	r2, [r3, #5]
		vIlum[6] = textrc[46]; 	// Luz Baño
 8000882:	4b8c      	ldr	r3, [pc, #560]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 8000884:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8000888:	4b90      	ldr	r3, [pc, #576]	; (8000acc <ESP_messageHandler+0x2dc>)
 800088a:	719a      	strb	r2, [r3, #6]
		vIlum[7] = textrc[49]; 	// Luz Espejo
 800088c:	4b89      	ldr	r3, [pc, #548]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 800088e:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8000892:	4b8e      	ldr	r3, [pc, #568]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000894:	71da      	strb	r2, [r3, #7]
		vIlum[8] = textrc[52]; 	// Luz Dormitorio
 8000896:	4b87      	ldr	r3, [pc, #540]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 8000898:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800089c:	4b8b      	ldr	r3, [pc, #556]	; (8000acc <ESP_messageHandler+0x2dc>)
 800089e:	721a      	strb	r2, [r3, #8]
		vIlum[9] = textrc[55]; 	// Luz Mesita Izq
 80008a0:	4b84      	ldr	r3, [pc, #528]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 80008a2:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80008a6:	4b89      	ldr	r3, [pc, #548]	; (8000acc <ESP_messageHandler+0x2dc>)
 80008a8:	725a      	strb	r2, [r3, #9]
		vIlum[10] = textrc[58]; // Luz Mesita Dch
 80008aa:	4b82      	ldr	r3, [pc, #520]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 80008ac:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80008b0:	4b86      	ldr	r3, [pc, #536]	; (8000acc <ESP_messageHandler+0x2dc>)
 80008b2:	729a      	strb	r2, [r3, #10]
		vIlum[11] = textrc[61]; // Luz Oficina
 80008b4:	4b7f      	ldr	r3, [pc, #508]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 80008b6:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80008ba:	4b84      	ldr	r3, [pc, #528]	; (8000acc <ESP_messageHandler+0x2dc>)
 80008bc:	72da      	strb	r2, [r3, #11]
		vIlum[12] = textrc[64]; // Luz Gaming
 80008be:	4b7d      	ldr	r3, [pc, #500]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 80008c0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80008c4:	4b81      	ldr	r3, [pc, #516]	; (8000acc <ESP_messageHandler+0x2dc>)
 80008c6:	731a      	strb	r2, [r3, #12]
		vIlum[13] = textrc[67]; // Luz Rx100
 80008c8:	4b7a      	ldr	r3, [pc, #488]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 80008ca:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80008ce:	4b7f      	ldr	r3, [pc, #508]	; (8000acc <ESP_messageHandler+0x2dc>)
 80008d0:	735a      	strb	r2, [r3, #13]
		vIlum[14] = textrc[68]; // Luz Rx10
 80008d2:	4b78      	ldr	r3, [pc, #480]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 80008d4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80008d8:	4b7c      	ldr	r3, [pc, #496]	; (8000acc <ESP_messageHandler+0x2dc>)
 80008da:	739a      	strb	r2, [r3, #14]
		vIlum[15] = textrc[69]; // Luz Rx1
 80008dc:	4b75      	ldr	r3, [pc, #468]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 80008de:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80008e2:	4b7a      	ldr	r3, [pc, #488]	; (8000acc <ESP_messageHandler+0x2dc>)
 80008e4:	73da      	strb	r2, [r3, #15]
		vIlum[16] = textrc[72]; // Luz Gx100
 80008e6:	4b73      	ldr	r3, [pc, #460]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 80008e8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80008ec:	4b77      	ldr	r3, [pc, #476]	; (8000acc <ESP_messageHandler+0x2dc>)
 80008ee:	741a      	strb	r2, [r3, #16]
		vIlum[17] = textrc[73]; // Luz Gx10
 80008f0:	4b70      	ldr	r3, [pc, #448]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 80008f2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 80008f6:	4b75      	ldr	r3, [pc, #468]	; (8000acc <ESP_messageHandler+0x2dc>)
 80008f8:	745a      	strb	r2, [r3, #17]
		vIlum[18] = textrc[74]; // Luz Gx1
 80008fa:	4b6e      	ldr	r3, [pc, #440]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 80008fc:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8000900:	4b72      	ldr	r3, [pc, #456]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000902:	749a      	strb	r2, [r3, #18]
		vIlum[19] = textrc[77]; // Luz Bx100
 8000904:	4b6b      	ldr	r3, [pc, #428]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 8000906:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 800090a:	4b70      	ldr	r3, [pc, #448]	; (8000acc <ESP_messageHandler+0x2dc>)
 800090c:	74da      	strb	r2, [r3, #19]
		vIlum[20] = textrc[78]; // Luz Bx10
 800090e:	4b69      	ldr	r3, [pc, #420]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 8000910:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8000914:	4b6d      	ldr	r3, [pc, #436]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000916:	751a      	strb	r2, [r3, #20]
		vIlum[21] = textrc[79]; // Luz Bx1
 8000918:	4b66      	ldr	r3, [pc, #408]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 800091a:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 800091e:	4b6b      	ldr	r3, [pc, #428]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000920:	755a      	strb	r2, [r3, #21]
		vIlum[22] = textrc[82]; // Luz Garaje
 8000922:	4b64      	ldr	r3, [pc, #400]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 8000924:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8000928:	4b68      	ldr	r3, [pc, #416]	; (8000acc <ESP_messageHandler+0x2dc>)
 800092a:	759a      	strb	r2, [r3, #22]
		vIlum[23] = textrc[85]; // Luz Jardín
 800092c:	4b61      	ldr	r3, [pc, #388]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 800092e:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8000932:	4b66      	ldr	r3, [pc, #408]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000934:	75da      	strb	r2, [r3, #23]
		vIlum[24] = textrc[88]; // Luz Porche
 8000936:	4b5f      	ldr	r3, [pc, #380]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 8000938:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800093c:	4b63      	ldr	r3, [pc, #396]	; (8000acc <ESP_messageHandler+0x2dc>)
 800093e:	761a      	strb	r2, [r3, #24]
		vIlum[25] = textrc[91]; // Luz Tendedero
 8000940:	4b5c      	ldr	r3, [pc, #368]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 8000942:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 8000946:	4b61      	ldr	r3, [pc, #388]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000948:	765a      	strb	r2, [r3, #25]


		if(vIlum[0] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 800094a:	4b60      	ldr	r3, [pc, #384]	; (8000acc <ESP_messageHandler+0x2dc>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b30      	cmp	r3, #48	; 0x30
 8000950:	d105      	bne.n	800095e <ESP_messageHandler+0x16e>
 8000952:	2200      	movs	r2, #0
 8000954:	2180      	movs	r1, #128	; 0x80
 8000956:	485e      	ldr	r0, [pc, #376]	; (8000ad0 <ESP_messageHandler+0x2e0>)
 8000958:	f002 f82e 	bl	80029b8 <HAL_GPIO_WritePin>
 800095c:	e008      	b.n	8000970 <ESP_messageHandler+0x180>
		else if(vIlum[0] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 800095e:	4b5b      	ldr	r3, [pc, #364]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b31      	cmp	r3, #49	; 0x31
 8000964:	d104      	bne.n	8000970 <ESP_messageHandler+0x180>
 8000966:	2201      	movs	r2, #1
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	4859      	ldr	r0, [pc, #356]	; (8000ad0 <ESP_messageHandler+0x2e0>)
 800096c:	f002 f824 	bl	80029b8 <HAL_GPIO_WritePin>

		if(vIlum[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000970:	4b56      	ldr	r3, [pc, #344]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000972:	785b      	ldrb	r3, [r3, #1]
 8000974:	2b30      	cmp	r3, #48	; 0x30
 8000976:	d105      	bne.n	8000984 <ESP_messageHandler+0x194>
 8000978:	2200      	movs	r2, #0
 800097a:	2140      	movs	r1, #64	; 0x40
 800097c:	4854      	ldr	r0, [pc, #336]	; (8000ad0 <ESP_messageHandler+0x2e0>)
 800097e:	f002 f81b 	bl	80029b8 <HAL_GPIO_WritePin>
 8000982:	e008      	b.n	8000996 <ESP_messageHandler+0x1a6>
		else if(vIlum[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8000984:	4b51      	ldr	r3, [pc, #324]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000986:	785b      	ldrb	r3, [r3, #1]
 8000988:	2b31      	cmp	r3, #49	; 0x31
 800098a:	d104      	bne.n	8000996 <ESP_messageHandler+0x1a6>
 800098c:	2201      	movs	r2, #1
 800098e:	2140      	movs	r1, #64	; 0x40
 8000990:	484f      	ldr	r0, [pc, #316]	; (8000ad0 <ESP_messageHandler+0x2e0>)
 8000992:	f002 f811 	bl	80029b8 <HAL_GPIO_WritePin>

		if(vIlum[2] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000996:	4b4d      	ldr	r3, [pc, #308]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000998:	789b      	ldrb	r3, [r3, #2]
 800099a:	2b30      	cmp	r3, #48	; 0x30
 800099c:	d105      	bne.n	80009aa <ESP_messageHandler+0x1ba>
 800099e:	2200      	movs	r2, #0
 80009a0:	2120      	movs	r1, #32
 80009a2:	484b      	ldr	r0, [pc, #300]	; (8000ad0 <ESP_messageHandler+0x2e0>)
 80009a4:	f002 f808 	bl	80029b8 <HAL_GPIO_WritePin>
 80009a8:	e008      	b.n	80009bc <ESP_messageHandler+0x1cc>
		else if(vIlum[2] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80009aa:	4b48      	ldr	r3, [pc, #288]	; (8000acc <ESP_messageHandler+0x2dc>)
 80009ac:	789b      	ldrb	r3, [r3, #2]
 80009ae:	2b31      	cmp	r3, #49	; 0x31
 80009b0:	d104      	bne.n	80009bc <ESP_messageHandler+0x1cc>
 80009b2:	2201      	movs	r2, #1
 80009b4:	2120      	movs	r1, #32
 80009b6:	4846      	ldr	r0, [pc, #280]	; (8000ad0 <ESP_messageHandler+0x2e0>)
 80009b8:	f001 fffe 	bl	80029b8 <HAL_GPIO_WritePin>

		if(vIlum[3] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80009bc:	4b43      	ldr	r3, [pc, #268]	; (8000acc <ESP_messageHandler+0x2dc>)
 80009be:	78db      	ldrb	r3, [r3, #3]
 80009c0:	2b30      	cmp	r3, #48	; 0x30
 80009c2:	d105      	bne.n	80009d0 <ESP_messageHandler+0x1e0>
 80009c4:	2200      	movs	r2, #0
 80009c6:	2110      	movs	r1, #16
 80009c8:	4841      	ldr	r0, [pc, #260]	; (8000ad0 <ESP_messageHandler+0x2e0>)
 80009ca:	f001 fff5 	bl	80029b8 <HAL_GPIO_WritePin>
 80009ce:	e008      	b.n	80009e2 <ESP_messageHandler+0x1f2>
		else if(vIlum[3] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80009d0:	4b3e      	ldr	r3, [pc, #248]	; (8000acc <ESP_messageHandler+0x2dc>)
 80009d2:	78db      	ldrb	r3, [r3, #3]
 80009d4:	2b31      	cmp	r3, #49	; 0x31
 80009d6:	d104      	bne.n	80009e2 <ESP_messageHandler+0x1f2>
 80009d8:	2201      	movs	r2, #1
 80009da:	2110      	movs	r1, #16
 80009dc:	483c      	ldr	r0, [pc, #240]	; (8000ad0 <ESP_messageHandler+0x2e0>)
 80009de:	f001 ffeb 	bl	80029b8 <HAL_GPIO_WritePin>

		if(vIlum[4] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 80009e2:	4b3a      	ldr	r3, [pc, #232]	; (8000acc <ESP_messageHandler+0x2dc>)
 80009e4:	791b      	ldrb	r3, [r3, #4]
 80009e6:	2b30      	cmp	r3, #48	; 0x30
 80009e8:	d105      	bne.n	80009f6 <ESP_messageHandler+0x206>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2108      	movs	r1, #8
 80009ee:	4838      	ldr	r0, [pc, #224]	; (8000ad0 <ESP_messageHandler+0x2e0>)
 80009f0:	f001 ffe2 	bl	80029b8 <HAL_GPIO_WritePin>
 80009f4:	e008      	b.n	8000a08 <ESP_messageHandler+0x218>
		else if(vIlum[4] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 80009f6:	4b35      	ldr	r3, [pc, #212]	; (8000acc <ESP_messageHandler+0x2dc>)
 80009f8:	791b      	ldrb	r3, [r3, #4]
 80009fa:	2b31      	cmp	r3, #49	; 0x31
 80009fc:	d104      	bne.n	8000a08 <ESP_messageHandler+0x218>
 80009fe:	2201      	movs	r2, #1
 8000a00:	2108      	movs	r1, #8
 8000a02:	4833      	ldr	r0, [pc, #204]	; (8000ad0 <ESP_messageHandler+0x2e0>)
 8000a04:	f001 ffd8 	bl	80029b8 <HAL_GPIO_WritePin>

		if(vIlum[5] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, RESET);
 8000a08:	4b30      	ldr	r3, [pc, #192]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000a0a:	795b      	ldrb	r3, [r3, #5]
 8000a0c:	2b30      	cmp	r3, #48	; 0x30
 8000a0e:	d105      	bne.n	8000a1c <ESP_messageHandler+0x22c>
 8000a10:	2200      	movs	r2, #0
 8000a12:	2180      	movs	r1, #128	; 0x80
 8000a14:	482f      	ldr	r0, [pc, #188]	; (8000ad4 <ESP_messageHandler+0x2e4>)
 8000a16:	f001 ffcf 	bl	80029b8 <HAL_GPIO_WritePin>
 8000a1a:	e008      	b.n	8000a2e <ESP_messageHandler+0x23e>
		else if(vIlum[5] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET);
 8000a1c:	4b2b      	ldr	r3, [pc, #172]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000a1e:	795b      	ldrb	r3, [r3, #5]
 8000a20:	2b31      	cmp	r3, #49	; 0x31
 8000a22:	d104      	bne.n	8000a2e <ESP_messageHandler+0x23e>
 8000a24:	2201      	movs	r2, #1
 8000a26:	2180      	movs	r1, #128	; 0x80
 8000a28:	482a      	ldr	r0, [pc, #168]	; (8000ad4 <ESP_messageHandler+0x2e4>)
 8000a2a:	f001 ffc5 	bl	80029b8 <HAL_GPIO_WritePin>

		if(vIlum[6] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, RESET);
 8000a2e:	4b27      	ldr	r3, [pc, #156]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000a30:	799b      	ldrb	r3, [r3, #6]
 8000a32:	2b30      	cmp	r3, #48	; 0x30
 8000a34:	d105      	bne.n	8000a42 <ESP_messageHandler+0x252>
 8000a36:	2200      	movs	r2, #0
 8000a38:	2140      	movs	r1, #64	; 0x40
 8000a3a:	4826      	ldr	r0, [pc, #152]	; (8000ad4 <ESP_messageHandler+0x2e4>)
 8000a3c:	f001 ffbc 	bl	80029b8 <HAL_GPIO_WritePin>
 8000a40:	e008      	b.n	8000a54 <ESP_messageHandler+0x264>
		else if(vIlum[6] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, SET);
 8000a42:	4b22      	ldr	r3, [pc, #136]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000a44:	799b      	ldrb	r3, [r3, #6]
 8000a46:	2b31      	cmp	r3, #49	; 0x31
 8000a48:	d104      	bne.n	8000a54 <ESP_messageHandler+0x264>
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2140      	movs	r1, #64	; 0x40
 8000a4e:	4821      	ldr	r0, [pc, #132]	; (8000ad4 <ESP_messageHandler+0x2e4>)
 8000a50:	f001 ffb2 	bl	80029b8 <HAL_GPIO_WritePin>

		if(vIlum[7] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, RESET);
 8000a54:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000a56:	79db      	ldrb	r3, [r3, #7]
 8000a58:	2b30      	cmp	r3, #48	; 0x30
 8000a5a:	d105      	bne.n	8000a68 <ESP_messageHandler+0x278>
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2120      	movs	r1, #32
 8000a60:	481c      	ldr	r0, [pc, #112]	; (8000ad4 <ESP_messageHandler+0x2e4>)
 8000a62:	f001 ffa9 	bl	80029b8 <HAL_GPIO_WritePin>
 8000a66:	e008      	b.n	8000a7a <ESP_messageHandler+0x28a>
		else if(vIlum[7] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, SET);
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000a6a:	79db      	ldrb	r3, [r3, #7]
 8000a6c:	2b31      	cmp	r3, #49	; 0x31
 8000a6e:	d104      	bne.n	8000a7a <ESP_messageHandler+0x28a>
 8000a70:	2201      	movs	r2, #1
 8000a72:	2120      	movs	r1, #32
 8000a74:	4817      	ldr	r0, [pc, #92]	; (8000ad4 <ESP_messageHandler+0x2e4>)
 8000a76:	f001 ff9f 	bl	80029b8 <HAL_GPIO_WritePin>

		if(vIlum[8] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000a7c:	7a1b      	ldrb	r3, [r3, #8]
 8000a7e:	2b30      	cmp	r3, #48	; 0x30
 8000a80:	d105      	bne.n	8000a8e <ESP_messageHandler+0x29e>
 8000a82:	2200      	movs	r2, #0
 8000a84:	2110      	movs	r1, #16
 8000a86:	4813      	ldr	r0, [pc, #76]	; (8000ad4 <ESP_messageHandler+0x2e4>)
 8000a88:	f001 ff96 	bl	80029b8 <HAL_GPIO_WritePin>
 8000a8c:	e008      	b.n	8000aa0 <ESP_messageHandler+0x2b0>
		else if(vIlum[8] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000a90:	7a1b      	ldrb	r3, [r3, #8]
 8000a92:	2b31      	cmp	r3, #49	; 0x31
 8000a94:	d104      	bne.n	8000aa0 <ESP_messageHandler+0x2b0>
 8000a96:	2201      	movs	r2, #1
 8000a98:	2110      	movs	r1, #16
 8000a9a:	480e      	ldr	r0, [pc, #56]	; (8000ad4 <ESP_messageHandler+0x2e4>)
 8000a9c:	f001 ff8c 	bl	80029b8 <HAL_GPIO_WritePin>

		if(vIlum[9] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, RESET);
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000aa2:	7a5b      	ldrb	r3, [r3, #9]
 8000aa4:	2b30      	cmp	r3, #48	; 0x30
 8000aa6:	d117      	bne.n	8000ad8 <ESP_messageHandler+0x2e8>
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2108      	movs	r1, #8
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <ESP_messageHandler+0x2e4>)
 8000aae:	f001 ff83 	bl	80029b8 <HAL_GPIO_WritePin>
 8000ab2:	e01a      	b.n	8000aea <ESP_messageHandler+0x2fa>
 8000ab4:	20000950 	.word	0x20000950
 8000ab8:	20000af0 	.word	0x20000af0
 8000abc:	20000aac 	.word	0x20000aac
 8000ac0:	08005fa8 	.word	0x08005fa8
 8000ac4:	20000948 	.word	0x20000948
 8000ac8:	08005fac 	.word	0x08005fac
 8000acc:	2000092c 	.word	0x2000092c
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40020c00 	.word	0x40020c00
		else if(vIlum[9] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, SET);
 8000ad8:	4b6d      	ldr	r3, [pc, #436]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000ada:	7a5b      	ldrb	r3, [r3, #9]
 8000adc:	2b31      	cmp	r3, #49	; 0x31
 8000ade:	d104      	bne.n	8000aea <ESP_messageHandler+0x2fa>
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2108      	movs	r1, #8
 8000ae4:	486b      	ldr	r0, [pc, #428]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000ae6:	f001 ff67 	bl	80029b8 <HAL_GPIO_WritePin>

		if(vIlum[10] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET);
 8000aea:	4b69      	ldr	r3, [pc, #420]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000aec:	7a9b      	ldrb	r3, [r3, #10]
 8000aee:	2b30      	cmp	r3, #48	; 0x30
 8000af0:	d105      	bne.n	8000afe <ESP_messageHandler+0x30e>
 8000af2:	2200      	movs	r2, #0
 8000af4:	2104      	movs	r1, #4
 8000af6:	4867      	ldr	r0, [pc, #412]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000af8:	f001 ff5e 	bl	80029b8 <HAL_GPIO_WritePin>
 8000afc:	e008      	b.n	8000b10 <ESP_messageHandler+0x320>
		else if(vIlum[10] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8000afe:	4b64      	ldr	r3, [pc, #400]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000b00:	7a9b      	ldrb	r3, [r3, #10]
 8000b02:	2b31      	cmp	r3, #49	; 0x31
 8000b04:	d104      	bne.n	8000b10 <ESP_messageHandler+0x320>
 8000b06:	2201      	movs	r2, #1
 8000b08:	2104      	movs	r1, #4
 8000b0a:	4862      	ldr	r0, [pc, #392]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000b0c:	f001 ff54 	bl	80029b8 <HAL_GPIO_WritePin>

		if(vIlum[11] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET);
 8000b10:	4b5f      	ldr	r3, [pc, #380]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000b12:	7adb      	ldrb	r3, [r3, #11]
 8000b14:	2b30      	cmp	r3, #48	; 0x30
 8000b16:	d105      	bne.n	8000b24 <ESP_messageHandler+0x334>
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	485d      	ldr	r0, [pc, #372]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000b1e:	f001 ff4b 	bl	80029b8 <HAL_GPIO_WritePin>
 8000b22:	e008      	b.n	8000b36 <ESP_messageHandler+0x346>
		else if(vIlum[11] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, SET);
 8000b24:	4b5a      	ldr	r3, [pc, #360]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000b26:	7adb      	ldrb	r3, [r3, #11]
 8000b28:	2b31      	cmp	r3, #49	; 0x31
 8000b2a:	d104      	bne.n	8000b36 <ESP_messageHandler+0x346>
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2102      	movs	r1, #2
 8000b30:	4858      	ldr	r0, [pc, #352]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000b32:	f001 ff41 	bl	80029b8 <HAL_GPIO_WritePin>

		if(vIlum[12] == '0'){
 8000b36:	4b56      	ldr	r3, [pc, #344]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000b38:	7b1b      	ldrb	r3, [r3, #12]
 8000b3a:	2b30      	cmp	r3, #48	; 0x30
 8000b3c:	d10c      	bne.n	8000b58 <ESP_messageHandler+0x368>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000b3e:	4b56      	ldr	r3, [pc, #344]	; (8000c98 <ESP_messageHandler+0x4a8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2200      	movs	r2, #0
 8000b44:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000b46:	4b54      	ldr	r3, [pc, #336]	; (8000c98 <ESP_messageHandler+0x4a8>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000b4e:	4b52      	ldr	r3, [pc, #328]	; (8000c98 <ESP_messageHandler+0x4a8>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2200      	movs	r2, #0
 8000b54:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b56:	e036      	b.n	8000bc6 <ESP_messageHandler+0x3d6>
		}
		else if(vIlum[12] == '1'){
 8000b58:	4b4d      	ldr	r3, [pc, #308]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000b5a:	7b1b      	ldrb	r3, [r3, #12]
 8000b5c:	2b31      	cmp	r3, #49	; 0x31
 8000b5e:	d132      	bne.n	8000bc6 <ESP_messageHandler+0x3d6>

			//uint8_t r, g, b;

			r = rgb_value (vIlum[13],vIlum[14],vIlum[15]);
 8000b60:	4b4b      	ldr	r3, [pc, #300]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000b62:	7b5b      	ldrb	r3, [r3, #13]
 8000b64:	4a4a      	ldr	r2, [pc, #296]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000b66:	7b91      	ldrb	r1, [r2, #14]
 8000b68:	4a49      	ldr	r2, [pc, #292]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000b6a:	7bd2      	ldrb	r2, [r2, #15]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 fc01 	bl	8001374 <rgb_value>
 8000b72:	4603      	mov	r3, r0
 8000b74:	4a49      	ldr	r2, [pc, #292]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000b76:	6013      	str	r3, [r2, #0]
			g = rgb_value (vIlum[16],vIlum[17],vIlum[18]);
 8000b78:	4b45      	ldr	r3, [pc, #276]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000b7a:	7c1b      	ldrb	r3, [r3, #16]
 8000b7c:	4a44      	ldr	r2, [pc, #272]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000b7e:	7c51      	ldrb	r1, [r2, #17]
 8000b80:	4a43      	ldr	r2, [pc, #268]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000b82:	7c92      	ldrb	r2, [r2, #18]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 fbf5 	bl	8001374 <rgb_value>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	4a44      	ldr	r2, [pc, #272]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000b8e:	6013      	str	r3, [r2, #0]
			b = rgb_value (vIlum[19],vIlum[20],vIlum[21]);
 8000b90:	4b3f      	ldr	r3, [pc, #252]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000b92:	7cdb      	ldrb	r3, [r3, #19]
 8000b94:	4a3e      	ldr	r2, [pc, #248]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000b96:	7d11      	ldrb	r1, [r2, #20]
 8000b98:	4a3d      	ldr	r2, [pc, #244]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000b9a:	7d52      	ldrb	r2, [r2, #21]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 fbe9 	bl	8001374 <rgb_value>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4a3f      	ldr	r2, [pc, #252]	; (8000ca4 <ESP_messageHandler+0x4b4>)
 8000ba6:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, g); // PA8
 8000ba8:	4b3d      	ldr	r3, [pc, #244]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b3a      	ldr	r3, [pc, #232]	; (8000c98 <ESP_messageHandler+0x4a8>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, r); // PA9
 8000bb2:	4b3a      	ldr	r3, [pc, #232]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	4b38      	ldr	r3, [pc, #224]	; (8000c98 <ESP_messageHandler+0x4a8>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b); // PA10
 8000bbc:	4b39      	ldr	r3, [pc, #228]	; (8000ca4 <ESP_messageHandler+0x4b4>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b35      	ldr	r3, [pc, #212]	; (8000c98 <ESP_messageHandler+0x4a8>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		if(vIlum[22] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 8000bc6:	4b32      	ldr	r3, [pc, #200]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000bc8:	7d9b      	ldrb	r3, [r3, #22]
 8000bca:	2b30      	cmp	r3, #48	; 0x30
 8000bcc:	d106      	bne.n	8000bdc <ESP_messageHandler+0x3ec>
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd4:	4834      	ldr	r0, [pc, #208]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000bd6:	f001 feef 	bl	80029b8 <HAL_GPIO_WritePin>
 8000bda:	e009      	b.n	8000bf0 <ESP_messageHandler+0x400>
		else if(vIlum[22] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8000bdc:	4b2c      	ldr	r3, [pc, #176]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000bde:	7d9b      	ldrb	r3, [r3, #22]
 8000be0:	2b31      	cmp	r3, #49	; 0x31
 8000be2:	d105      	bne.n	8000bf0 <ESP_messageHandler+0x400>
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bea:	482f      	ldr	r0, [pc, #188]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000bec:	f001 fee4 	bl	80029b8 <HAL_GPIO_WritePin>

		if(vIlum[23] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET);
 8000bf0:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000bf2:	7ddb      	ldrb	r3, [r3, #23]
 8000bf4:	2b30      	cmp	r3, #48	; 0x30
 8000bf6:	d105      	bne.n	8000c04 <ESP_messageHandler+0x414>
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	4825      	ldr	r0, [pc, #148]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000bfe:	f001 fedb 	bl	80029b8 <HAL_GPIO_WritePin>
 8000c02:	e008      	b.n	8000c16 <ESP_messageHandler+0x426>
		else if(vIlum[23] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 8000c04:	4b22      	ldr	r3, [pc, #136]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000c06:	7ddb      	ldrb	r3, [r3, #23]
 8000c08:	2b31      	cmp	r3, #49	; 0x31
 8000c0a:	d104      	bne.n	8000c16 <ESP_messageHandler+0x426>
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2101      	movs	r1, #1
 8000c10:	4820      	ldr	r0, [pc, #128]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000c12:	f001 fed1 	bl	80029b8 <HAL_GPIO_WritePin>

		if(vIlum[24] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET);
 8000c16:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000c18:	7e1b      	ldrb	r3, [r3, #24]
 8000c1a:	2b30      	cmp	r3, #48	; 0x30
 8000c1c:	d106      	bne.n	8000c2c <ESP_messageHandler+0x43c>
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c24:	4820      	ldr	r0, [pc, #128]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000c26:	f001 fec7 	bl	80029b8 <HAL_GPIO_WritePin>
 8000c2a:	e009      	b.n	8000c40 <ESP_messageHandler+0x450>
		else if(vIlum[24] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 8000c2c:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000c2e:	7e1b      	ldrb	r3, [r3, #24]
 8000c30:	2b31      	cmp	r3, #49	; 0x31
 8000c32:	d105      	bne.n	8000c40 <ESP_messageHandler+0x450>
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c3a:	481b      	ldr	r0, [pc, #108]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000c3c:	f001 febc 	bl	80029b8 <HAL_GPIO_WritePin>

		if(vIlum[25] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET);
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000c42:	7e5b      	ldrb	r3, [r3, #25]
 8000c44:	2b30      	cmp	r3, #48	; 0x30
 8000c46:	d106      	bne.n	8000c56 <ESP_messageHandler+0x466>
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c4e:	4816      	ldr	r0, [pc, #88]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000c50:	f001 feb2 	bl	80029b8 <HAL_GPIO_WritePin>
 8000c54:	e009      	b.n	8000c6a <ESP_messageHandler+0x47a>
		else if(vIlum[25] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <ESP_messageHandler+0x4a0>)
 8000c58:	7e5b      	ldrb	r3, [r3, #25]
 8000c5a:	2b31      	cmp	r3, #49	; 0x31
 8000c5c:	d105      	bne.n	8000c6a <ESP_messageHandler+0x47a>
 8000c5e:	2201      	movs	r2, #1
 8000c60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c64:	4810      	ldr	r0, [pc, #64]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000c66:	f001 fea7 	bl	80029b8 <HAL_GPIO_WritePin>
	}

	// SEGURIDAD
	if (fragment[0] == 'a'){
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <ESP_messageHandler+0x4bc>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b61      	cmp	r3, #97	; 0x61
 8000c70:	d10b      	bne.n	8000c8a <ESP_messageHandler+0x49a>
		UART_send("SEGURIDAD \n", PC_UART);
 8000c72:	490f      	ldr	r1, [pc, #60]	; (8000cb0 <ESP_messageHandler+0x4c0>)
 8000c74:	480f      	ldr	r0, [pc, #60]	; (8000cb4 <ESP_messageHandler+0x4c4>)
 8000c76:	f000 f9e1 	bl	800103c <UART_send>
		vSeg[0] = textrc[28]; // Alarma Interior
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <ESP_messageHandler+0x4c8>)
 8000c7c:	7f1a      	ldrb	r2, [r3, #28]
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <ESP_messageHandler+0x4cc>)
 8000c80:	701a      	strb	r2, [r3, #0]
		vSeg[1] = textrc[31]; // Alarma Exterior
 8000c82:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <ESP_messageHandler+0x4c8>)
 8000c84:	7fda      	ldrb	r2, [r3, #31]
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <ESP_messageHandler+0x4cc>)
 8000c88:	705a      	strb	r2, [r3, #1]



	//ESP_clearBuffer();
	//__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000092c 	.word	0x2000092c
 8000c94:	40020c00 	.word	0x40020c00
 8000c98:	20000a64 	.word	0x20000a64
 8000c9c:	200008d8 	.word	0x200008d8
 8000ca0:	200008d4 	.word	0x200008d4
 8000ca4:	200008d0 	.word	0x200008d0
 8000ca8:	40020800 	.word	0x40020800
 8000cac:	20000948 	.word	0x20000948
 8000cb0:	20000aac 	.word	0x20000aac
 8000cb4:	08005fbc 	.word	0x08005fbc
 8000cb8:	20000950 	.word	0x20000950
 8000cbc:	200009c0 	.word	0x200009c0

08000cc0 <ringInit>:

void storeChar(unsigned char c, Ring_Buffer *buffer);


void ringInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
	_rx_buffer1 = &rx_buffer1;
 8000cc4:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <ringInit+0x68>)
 8000cc6:	4a19      	ldr	r2, [pc, #100]	; (8000d2c <ringInit+0x6c>)
 8000cc8:	601a      	str	r2, [r3, #0]
    _tx_buffer1 = &tx_buffer1;
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <ringInit+0x70>)
 8000ccc:	4a19      	ldr	r2, [pc, #100]	; (8000d34 <ringInit+0x74>)
 8000cce:	601a      	str	r2, [r3, #0]
    _rx_buffer2 = &rx_buffer2;
 8000cd0:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <ringInit+0x78>)
 8000cd2:	4a1a      	ldr	r2, [pc, #104]	; (8000d3c <ringInit+0x7c>)
 8000cd4:	601a      	str	r2, [r3, #0]
    _tx_buffer2 = &tx_buffer2;
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <ringInit+0x80>)
 8000cd8:	4a1a      	ldr	r2, [pc, #104]	; (8000d44 <ringInit+0x84>)
 8000cda:	601a      	str	r2, [r3, #0]

    /* Habilita la INTERRUPCIÓN por ERROR del UART (frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_ERR);
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <ringInit+0x88>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	695a      	ldr	r2, [r3, #20]
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <ringInit+0x88>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f042 0201 	orr.w	r2, r2, #1
 8000cea:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_ERR);
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <ringInit+0x8c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	695a      	ldr	r2, [r3, #20]
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <ringInit+0x8c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f042 0201 	orr.w	r2, r2, #1
 8000cfa:	615a      	str	r2, [r3, #20]

    /* Habilita la INTERRUPCIÓN por REGISTRO DE DATA VACÍO */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_RXNE);
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <ringInit+0x88>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	68da      	ldr	r2, [r3, #12]
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <ringInit+0x88>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f042 0220 	orr.w	r2, r2, #32
 8000d0a:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_RXNE);
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <ringInit+0x8c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	68da      	ldr	r2, [r3, #12]
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <ringInit+0x8c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f042 0220 	orr.w	r2, r2, #32
 8000d1a:	60da      	str	r2, [r3, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	200009c8 	.word	0x200009c8
 8000d2c:	2000008c 	.word	0x2000008c
 8000d30:	200009cc 	.word	0x200009cc
 8000d34:	20000294 	.word	0x20000294
 8000d38:	200009d0 	.word	0x200009d0
 8000d3c:	2000049c 	.word	0x2000049c
 8000d40:	200009c4 	.word	0x200009c4
 8000d44:	200006a4 	.word	0x200006a4
 8000d48:	20000af0 	.word	0x20000af0
 8000d4c:	20000aac 	.word	0x20000aac

08000d50 <storeChar>:


void storeChar(unsigned char c, Ring_Buffer *buffer)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
    int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d62:	3301      	adds	r3, #1
 8000d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d68:	60fb      	str	r3, [r7, #12]

    // Si queremos almacenar lo recibido justo antes de TAIL, significando que HEAD avanzará hasta la posición de TAIL,
    // se provocará un desbordamiento (overflow) del BUFFER, y, por lo tanto, no se escribirá el caracter o ni avanzaremos HEAD.
    if(i != buffer->tail)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d009      	beq.n	8000d8a <storeChar+0x3a>
    {
    	buffer->buffer[buffer->head] = c;
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d7c:	683a      	ldr	r2, [r7, #0]
 8000d7e:	79f9      	ldrb	r1, [r7, #7]
 8000d80:	54d1      	strb	r1, [r2, r3]
        buffer->head = i;
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }
}
 8000d8a:	bf00      	nop
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <UART_peek>:
	}
}


int UART_peek(UART_HandleTypeDef *uart)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a1c      	ldr	r2, [pc, #112]	; (8000e14 <UART_peek+0x7c>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d114      	bne.n	8000dd2 <UART_peek+0x3a>
	{
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <UART_peek+0x80>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <UART_peek+0x80>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d102      	bne.n	8000dc2 <UART_peek+0x2a>
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc0:	e022      	b.n	8000e08 <UART_peek+0x70>

		else return _rx_buffer1->buffer[_rx_buffer1->tail];
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <UART_peek+0x80>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <UART_peek+0x80>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000dce:	5cd3      	ldrb	r3, [r2, r3]
 8000dd0:	e01a      	b.n	8000e08 <UART_peek+0x70>
	}

	else if (uart == PC_UART)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a11      	ldr	r2, [pc, #68]	; (8000e1c <UART_peek+0x84>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d114      	bne.n	8000e04 <UART_peek+0x6c>
	{
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <UART_peek+0x88>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <UART_peek+0x88>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d102      	bne.n	8000df4 <UART_peek+0x5c>
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	e009      	b.n	8000e08 <UART_peek+0x70>

		else return _rx_buffer2->buffer[_rx_buffer2->tail];
 8000df4:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <UART_peek+0x88>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <UART_peek+0x88>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e00:	5cd3      	ldrb	r3, [r2, r3]
 8000e02:	e001      	b.n	8000e08 <UART_peek+0x70>
	}

	return -1;
 8000e04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	20000af0 	.word	0x20000af0
 8000e18:	200009c8 	.word	0x200009c8
 8000e1c:	20000aac 	.word	0x20000aac
 8000e20:	200009d0 	.word	0x200009d0

08000e24 <UART_read>:


int UART_read(UART_HandleTypeDef *uart)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a29      	ldr	r2, [pc, #164]	; (8000ed4 <UART_read+0xb0>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d121      	bne.n	8000e78 <UART_read+0x54>
	{
		// Si HEAD no está delante de TAIL, no tenemos ningún CARACTER
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 8000e34:	4b28      	ldr	r3, [pc, #160]	; (8000ed8 <UART_read+0xb4>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000e3c:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <UART_read+0xb4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d102      	bne.n	8000e4e <UART_read+0x2a>
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4c:	e03c      	b.n	8000ec8 <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000e4e:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <UART_read+0xb4>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <UART_read+0xb4>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e5a:	5cd3      	ldrb	r3, [r2, r3]
 8000e5c:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <UART_read+0xb4>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <UART_read+0xb4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e70:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8000e74:	7bbb      	ldrb	r3, [r7, #14]
 8000e76:	e027      	b.n	8000ec8 <UART_read+0xa4>
		}
	}

	else if (uart == PC_UART)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a18      	ldr	r2, [pc, #96]	; (8000edc <UART_read+0xb8>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d121      	bne.n	8000ec4 <UART_read+0xa0>
	{
		// Si HEAD no está delante de TAIL, no tenemos ningún CARACTER
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 8000e80:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <UART_read+0xbc>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <UART_read+0xbc>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d102      	bne.n	8000e9a <UART_read+0x76>
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295
 8000e98:	e016      	b.n	8000ec8 <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <UART_read+0xbc>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <UART_read+0xbc>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000ea6:	5cd3      	ldrb	r3, [r2, r3]
 8000ea8:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <UART_read+0xbc>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <UART_read+0xbc>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ebc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	e001      	b.n	8000ec8 <UART_read+0xa4>
		}
	}

	else return -1;
 8000ec4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	20000af0 	.word	0x20000af0
 8000ed8:	200009c8 	.word	0x200009c8
 8000edc:	20000aac 	.word	0x20000aac
 8000ee0:	200009d0 	.word	0x200009d0

08000ee4 <UART_write>:


void UART_write(int c, UART_HandleTypeDef *uart)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db54      	blt.n	8000f9e <UART_write+0xba>
	{
		if (uart == WiFi_UART)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	4a2d      	ldr	r2, [pc, #180]	; (8000fac <UART_write+0xc8>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d126      	bne.n	8000f4a <UART_write+0x66>
		{
			int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8000efc:	4b2c      	ldr	r3, [pc, #176]	; (8000fb0 <UART_write+0xcc>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f04:	3301      	adds	r3, #1
 8000f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f0a:	60bb      	str	r3, [r7, #8]

			// Si el BUFFER de salida está lleno, sólo se puede esperar a la INTERRUPCIÓN que lo vacia */
		    while (i == _tx_buffer1->tail);
 8000f0c:	bf00      	nop
 8000f0e:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <UART_write+0xcc>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d0f8      	beq.n	8000f0e <UART_write+0x2a>

		   _tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8000f1c:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <UART_write+0xcc>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <UART_write+0xcc>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	b2c9      	uxtb	r1, r1
 8000f2c:	54d1      	strb	r1, [r2, r3]
		   _tx_buffer1->head = i;
 8000f2e:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <UART_write+0xcc>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		   // Habilitar la INTERRUPCIÓN de TRANSMISIÓN del UART
		   __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_TXE);
 8000f38:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <UART_write+0xc8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	68da      	ldr	r2, [r3, #12]
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <UART_write+0xc8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f46:	60da      	str	r2, [r3, #12]

			// Habilitar la INTERRUPCIÓN de TRANSMISIÓN del UART
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
		}
	}
}
 8000f48:	e029      	b.n	8000f9e <UART_write+0xba>
		else if (uart == PC_UART)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	4a19      	ldr	r2, [pc, #100]	; (8000fb4 <UART_write+0xd0>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d125      	bne.n	8000f9e <UART_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8000f52:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <UART_write+0xd4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f60:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 8000f62:	bf00      	nop
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <UART_write+0xd4>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d0f8      	beq.n	8000f64 <UART_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <UART_write+0xd4>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <UART_write+0xd4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	b2c9      	uxtb	r1, r1
 8000f82:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <UART_write+0xd4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	68fa      	ldr	r2, [r7, #12]
 8000f8a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <UART_write+0xd0>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <UART_write+0xd0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f9c:	60da      	str	r2, [r3, #12]
}
 8000f9e:	bf00      	nop
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000af0 	.word	0x20000af0
 8000fb0:	200009cc 	.word	0x200009cc
 8000fb4:	20000aac 	.word	0x20000aac
 8000fb8:	200009c4 	.word	0x200009c4

08000fbc <UART_available>:


int UART_available(UART_HandleTypeDef *uart)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a19      	ldr	r2, [pc, #100]	; (800102c <UART_available+0x70>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d111      	bne.n	8000ff0 <UART_available+0x34>
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <UART_available+0x74>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <UART_available+0x74>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fee:	e017      	b.n	8001020 <UART_available+0x64>

	else if (uart == PC_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a10      	ldr	r2, [pc, #64]	; (8001034 <UART_available+0x78>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d111      	bne.n	800101c <UART_available+0x60>
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <UART_available+0x7c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001000:	b29a      	uxth	r2, r3
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <UART_available+0x7c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800100a:	b29b      	uxth	r3, r3
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	b29b      	uxth	r3, r3
 8001010:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001014:	b29b      	uxth	r3, r3
 8001016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800101a:	e001      	b.n	8001020 <UART_available+0x64>

	return -1;
 800101c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	20000af0 	.word	0x20000af0
 8001030:	200009c8 	.word	0x200009c8
 8001034:	20000aac 	.word	0x20000aac
 8001038:	200009d0 	.word	0x200009d0

0800103c <UART_send>:
	return 1;
}


void UART_send (const char *s, UART_HandleTypeDef *uart)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	while(*s!='\0') UART_write(*s++, uart);
 8001046:	e007      	b.n	8001058 <UART_send+0x1c>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	1c5a      	adds	r2, r3, #1
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	6839      	ldr	r1, [r7, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff46 	bl	8000ee4 <UART_write>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1f3      	bne.n	8001048 <UART_send+0xc>
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <UART_copyUpto>:
  while(*s) UART_write(*s++, uart);
}


int UART_copyUpto(char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f7ff f8a7 	bl	80001d0 <strlen>
 8001082:	4603      	mov	r3, r0
 8001084:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]

again:
	while (!UART_available(uart));
 800108a:	bf00      	nop
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff95 	bl	8000fbc <UART_available>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f9      	beq.n	800108c <UART_copyUpto+0x20>

	while (UART_peek(uart) != string[so_far])
 8001098:	e01f      	b.n	80010da <UART_copyUpto+0x6e>
	{
		buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 800109a:	4b32      	ldr	r3, [pc, #200]	; (8001164 <UART_copyUpto+0xf8>)
 800109c:	6819      	ldr	r1, [r3, #0]
 800109e:	4b31      	ldr	r3, [pc, #196]	; (8001164 <UART_copyUpto+0xf8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	68b8      	ldr	r0, [r7, #8]
 80010aa:	4403      	add	r3, r0
 80010ac:	5c8a      	ldrb	r2, [r1, r2]
 80010ae:	701a      	strb	r2, [r3, #0]
		_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 80010b0:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <UART_copyUpto+0xf8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	4b2a      	ldr	r3, [pc, #168]	; (8001164 <UART_copyUpto+0xf8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		indx++;
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	3301      	adds	r3, #1
 80010ca:	61bb      	str	r3, [r7, #24]
		while (!UART_available(uart));
 80010cc:	bf00      	nop
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ff74 	bl	8000fbc <UART_available>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f9      	beq.n	80010ce <UART_copyUpto+0x62>
	while (UART_peek(uart) != string[so_far])
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff fe5c 	bl	8000d98 <UART_peek>
 80010e0:	4601      	mov	r1, r0
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	4299      	cmp	r1, r3
 80010ec:	d1d5      	bne.n	800109a <UART_copyUpto+0x2e>

	}

	while (UART_peek(uart) == string [so_far])
 80010ee:	e01b      	b.n	8001128 <UART_copyUpto+0xbc>
	{
		so_far++;
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	3301      	adds	r3, #1
 80010f4:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = UART_read(uart);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff fe94 	bl	8000e24 <UART_read>
 80010fc:	4601      	mov	r1, r0
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	1c5a      	adds	r2, r3, #1
 8001102:	61ba      	str	r2, [r7, #24]
 8001104:	461a      	mov	r2, r3
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	4413      	add	r3, r2
 800110a:	b2ca      	uxtb	r2, r1
 800110c:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 800110e:	69fa      	ldr	r2, [r7, #28]
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	429a      	cmp	r2, r3
 8001114:	d101      	bne.n	800111a <UART_copyUpto+0xae>
 8001116:	2301      	movs	r3, #1
 8001118:	e01f      	b.n	800115a <UART_copyUpto+0xee>
		while (!UART_available(uart));
 800111a:	bf00      	nop
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff4d 	bl	8000fbc <UART_available>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d0f9      	beq.n	800111c <UART_copyUpto+0xb0>
	while (UART_peek(uart) == string [so_far])
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff fe35 	bl	8000d98 <UART_peek>
 800112e:	4601      	mov	r1, r0
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	4413      	add	r3, r2
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4299      	cmp	r1, r3
 800113a:	d0d9      	beq.n	80010f0 <UART_copyUpto+0x84>
	}

	if (so_far != len)
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	429a      	cmp	r2, r3
 8001142:	d002      	beq.n	800114a <UART_copyUpto+0xde>
	{
		so_far = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
		goto again;
 8001148:	e79f      	b.n	800108a <UART_copyUpto+0x1e>
	}

	if (so_far == len) return 1;
 800114a:	69fa      	ldr	r2, [r7, #28]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	429a      	cmp	r2, r3
 8001150:	d101      	bne.n	8001156 <UART_copyUpto+0xea>
 8001152:	2301      	movs	r3, #1
 8001154:	e001      	b.n	800115a <UART_copyUpto+0xee>

	else return -1;
 8001156:	f04f 33ff 	mov.w	r3, #4294967295
}
 800115a:	4618      	mov	r0, r3
 800115c:	3720      	adds	r7, #32
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200009c8 	.word	0x200009c8

08001168 <UART_waitFor>:


int UART_waitFor(char *string,UART_HandleTypeDef *uart)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff f82a 	bl	80001d0 <strlen>
 800117c:	4603      	mov	r3, r0
 800117e:	60bb      	str	r3, [r7, #8]

again_device:
	while (!UART_available(uart));
 8001180:	bf00      	nop
 8001182:	6838      	ldr	r0, [r7, #0]
 8001184:	f7ff ff1a 	bl	8000fbc <UART_available>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0f9      	beq.n	8001182 <UART_waitFor+0x1a>

	if (UART_peek(uart) != string[so_far])
 800118e:	6838      	ldr	r0, [r7, #0]
 8001190:	f7ff fe02 	bl	8000d98 <UART_peek>
 8001194:	4601      	mov	r1, r0
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	4413      	add	r3, r2
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	4299      	cmp	r1, r3
 80011a0:	d01e      	beq.n	80011e0 <UART_waitFor+0x78>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 80011a2:	4b1e      	ldr	r3, [pc, #120]	; (800121c <UART_waitFor+0xb4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011aa:	1c5a      	adds	r2, r3, #1
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <UART_waitFor+0xb4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 80011b8:	e7e2      	b.n	8001180 <UART_waitFor+0x18>

	}

	while (UART_peek(uart) == string [so_far])
	{
		so_far++;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	3301      	adds	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
		UART_read(uart);
 80011c0:	6838      	ldr	r0, [r7, #0]
 80011c2:	f7ff fe2f 	bl	8000e24 <UART_read>
		if (so_far == len) return 1;
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d101      	bne.n	80011d2 <UART_waitFor+0x6a>
 80011ce:	2301      	movs	r3, #1
 80011d0:	e01f      	b.n	8001212 <UART_waitFor+0xaa>
		while (!UART_available(uart));
 80011d2:	bf00      	nop
 80011d4:	6838      	ldr	r0, [r7, #0]
 80011d6:	f7ff fef1 	bl	8000fbc <UART_available>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f9      	beq.n	80011d4 <UART_waitFor+0x6c>
	while (UART_peek(uart) == string [so_far])
 80011e0:	6838      	ldr	r0, [r7, #0]
 80011e2:	f7ff fdd9 	bl	8000d98 <UART_peek>
 80011e6:	4601      	mov	r1, r0
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4299      	cmp	r1, r3
 80011f2:	d0e2      	beq.n	80011ba <UART_waitFor+0x52>
	}

	if (so_far != len)
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d002      	beq.n	8001202 <UART_waitFor+0x9a>
	{
		so_far = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
		goto again_device;
 8001200:	e7be      	b.n	8001180 <UART_waitFor+0x18>
	}

	if (so_far == len) return 1;
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	429a      	cmp	r2, r3
 8001208:	d101      	bne.n	800120e <UART_waitFor+0xa6>
 800120a:	2301      	movs	r3, #1
 800120c:	e001      	b.n	8001212 <UART_waitFor+0xaa>

	else return -1;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200009c8 	.word	0x200009c8

08001220 <UART_isr>:


void UART_isr(UART_HandleTypeDef *huart)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	613b      	str	r3, [r7, #16]

	/* Si DR (DATA REGISTER) no está vacío y RX INT está habilitado */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f003 0320 	and.w	r3, r3, #32
 800123e:	2b00      	cmp	r3, #0
 8001240:	d023      	beq.n	800128a <UART_isr+0x6a>
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	f003 0320 	and.w	r3, r3, #32
 8001248:	2b00      	cmp	r3, #0
 800124a:	d01e      	beq.n	800128a <UART_isr+0x6a>
    	    	                USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	************************************************************************************************************/

		huart->Instance->SR;                   // Leer SR (STATUS REGISTER)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR; // Leer DR (DATA REGISTER)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	73fb      	strb	r3, [r7, #15]

        if (huart == WiFi_UART)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a3f      	ldr	r2, [pc, #252]	; (800135c <UART_isr+0x13c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d107      	bne.n	8001272 <UART_isr+0x52>
        {
        	storeChar(c, _rx_buffer1); // Almacena DATA en el BUFFER
 8001262:	4b3f      	ldr	r3, [pc, #252]	; (8001360 <UART_isr+0x140>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fd70 	bl	8000d50 <storeChar>
        else if (huart == PC_UART)
        {
        	storeChar(c, _rx_buffer2); // Almacena DATA en el BUFFER
        }

        return;
 8001270:	e06d      	b.n	800134e <UART_isr+0x12e>
        else if (huart == PC_UART)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a3b      	ldr	r2, [pc, #236]	; (8001364 <UART_isr+0x144>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d169      	bne.n	800134e <UART_isr+0x12e>
        	storeChar(c, _rx_buffer2); // Almacena DATA en el BUFFER
 800127a:	4b3b      	ldr	r3, [pc, #236]	; (8001368 <UART_isr+0x148>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fd64 	bl	8000d50 <storeChar>
        return;
 8001288:	e061      	b.n	800134e <UART_isr+0x12e>
    }

    /* Si la INTERRUPCIÓN se produce por el TRANSMIT DATA REGISTER EMPTY */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001290:	2b00      	cmp	r3, #0
 8001292:	d05f      	beq.n	8001354 <UART_isr+0x134>
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129a:	2b00      	cmp	r3, #0
 800129c:	d05a      	beq.n	8001354 <UART_isr+0x134>
    {
    	if (huart == WiFi_UART)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a2e      	ldr	r2, [pc, #184]	; (800135c <UART_isr+0x13c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d127      	bne.n	80012f6 <UART_isr+0xd6>
    	{
    		if(tx_buffer1.head == tx_buffer1.tail)
 80012a6:	4b31      	ldr	r3, [pc, #196]	; (800136c <UART_isr+0x14c>)
 80012a8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80012ac:	4b2f      	ldr	r3, [pc, #188]	; (800136c <UART_isr+0x14c>)
 80012ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d108      	bne.n	80012c8 <UART_isr+0xa8>
    	    {
    			// BUFFER vacío, inhabilitamos la INTERRUPCIÓN
    	        __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68da      	ldr	r2, [r3, #12]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012c4:	60da      	str	r2, [r3, #12]
        	     huart->Instance->DR = c;

        	}
        }

    	return;
 80012c6:	e044      	b.n	8001352 <UART_isr+0x132>
    			unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 80012c8:	4b28      	ldr	r3, [pc, #160]	; (800136c <UART_isr+0x14c>)
 80012ca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80012ce:	4a27      	ldr	r2, [pc, #156]	; (800136c <UART_isr+0x14c>)
 80012d0:	5cd3      	ldrb	r3, [r2, r3]
 80012d2:	737b      	strb	r3, [r7, #13]
    			tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 80012d4:	4b25      	ldr	r3, [pc, #148]	; (800136c <UART_isr+0x14c>)
 80012d6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80012da:	3301      	adds	r3, #1
 80012dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012e0:	4a22      	ldr	r2, [pc, #136]	; (800136c <UART_isr+0x14c>)
 80012e2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    			huart->Instance->SR;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
    			huart->Instance->DR = c;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	7b7a      	ldrb	r2, [r7, #13]
 80012f2:	605a      	str	r2, [r3, #4]
    	return;
 80012f4:	e02d      	b.n	8001352 <UART_isr+0x132>
    	else if (huart == PC_UART)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a1a      	ldr	r2, [pc, #104]	; (8001364 <UART_isr+0x144>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d129      	bne.n	8001352 <UART_isr+0x132>
    		if(tx_buffer2.head == tx_buffer2.tail)
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <UART_isr+0x150>)
 8001300:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <UART_isr+0x150>)
 8001306:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800130a:	429a      	cmp	r2, r3
 800130c:	d108      	bne.n	8001320 <UART_isr+0x100>
        	    __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68da      	ldr	r2, [r3, #12]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800131c:	60da      	str	r2, [r3, #12]
    	return;
 800131e:	e018      	b.n	8001352 <UART_isr+0x132>
        	    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <UART_isr+0x150>)
 8001322:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001326:	4a12      	ldr	r2, [pc, #72]	; (8001370 <UART_isr+0x150>)
 8001328:	5cd3      	ldrb	r3, [r2, r3]
 800132a:	73bb      	strb	r3, [r7, #14]
        	    tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 800132c:	4b10      	ldr	r3, [pc, #64]	; (8001370 <UART_isr+0x150>)
 800132e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001332:	3301      	adds	r3, #1
 8001334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001338:	4a0d      	ldr	r2, [pc, #52]	; (8001370 <UART_isr+0x150>)
 800133a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	     huart->Instance->SR;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
        	     huart->Instance->DR = c;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	7bba      	ldrb	r2, [r7, #14]
 800134a:	605a      	str	r2, [r3, #4]
    	return;
 800134c:	e001      	b.n	8001352 <UART_isr+0x132>
        return;
 800134e:	bf00      	nop
 8001350:	e000      	b.n	8001354 <UART_isr+0x134>
    	return;
 8001352:	bf00      	nop
    }
}
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000af0 	.word	0x20000af0
 8001360:	200009c8 	.word	0x200009c8
 8001364:	20000aac 	.word	0x20000aac
 8001368:	200009d0 	.word	0x200009d0
 800136c:	20000294 	.word	0x20000294
 8001370:	200006a4 	.word	0x200006a4

08001374 <rgb_value>:
 */


#include <action.h>

int rgb_value(char i, char j, char k){
 8001374:	b480      	push	{r7}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
 800137e:	460b      	mov	r3, r1
 8001380:	71bb      	strb	r3, [r7, #6]
 8001382:	4613      	mov	r3, r2
 8001384:	717b      	strb	r3, [r7, #5]

	int a, b, c;

	if(i == '0') a = 0;
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	2b30      	cmp	r3, #48	; 0x30
 800138a:	d102      	bne.n	8001392 <rgb_value+0x1e>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	e00a      	b.n	80013a8 <rgb_value+0x34>
	else if(i == '1') a = 100;
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2b31      	cmp	r3, #49	; 0x31
 8001396:	d102      	bne.n	800139e <rgb_value+0x2a>
 8001398:	2364      	movs	r3, #100	; 0x64
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	e004      	b.n	80013a8 <rgb_value+0x34>
	else if(i == '2') a = 200;
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b32      	cmp	r3, #50	; 0x32
 80013a2:	d101      	bne.n	80013a8 <rgb_value+0x34>
 80013a4:	23c8      	movs	r3, #200	; 0xc8
 80013a6:	617b      	str	r3, [r7, #20]

	if(j == '0') b = 0;
 80013a8:	79bb      	ldrb	r3, [r7, #6]
 80013aa:	2b30      	cmp	r3, #48	; 0x30
 80013ac:	d102      	bne.n	80013b4 <rgb_value+0x40>
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	e034      	b.n	800141e <rgb_value+0xaa>
	else if(j == '1') b = 10;
 80013b4:	79bb      	ldrb	r3, [r7, #6]
 80013b6:	2b31      	cmp	r3, #49	; 0x31
 80013b8:	d102      	bne.n	80013c0 <rgb_value+0x4c>
 80013ba:	230a      	movs	r3, #10
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	e02e      	b.n	800141e <rgb_value+0xaa>
	else if(j == '2') b = 20;
 80013c0:	79bb      	ldrb	r3, [r7, #6]
 80013c2:	2b32      	cmp	r3, #50	; 0x32
 80013c4:	d102      	bne.n	80013cc <rgb_value+0x58>
 80013c6:	2314      	movs	r3, #20
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	e028      	b.n	800141e <rgb_value+0xaa>
	else if(j == '3') b = 30;
 80013cc:	79bb      	ldrb	r3, [r7, #6]
 80013ce:	2b33      	cmp	r3, #51	; 0x33
 80013d0:	d102      	bne.n	80013d8 <rgb_value+0x64>
 80013d2:	231e      	movs	r3, #30
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	e022      	b.n	800141e <rgb_value+0xaa>
	else if(j == '4') b = 40;
 80013d8:	79bb      	ldrb	r3, [r7, #6]
 80013da:	2b34      	cmp	r3, #52	; 0x34
 80013dc:	d102      	bne.n	80013e4 <rgb_value+0x70>
 80013de:	2328      	movs	r3, #40	; 0x28
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	e01c      	b.n	800141e <rgb_value+0xaa>
	else if(j == '5') b = 50;
 80013e4:	79bb      	ldrb	r3, [r7, #6]
 80013e6:	2b35      	cmp	r3, #53	; 0x35
 80013e8:	d102      	bne.n	80013f0 <rgb_value+0x7c>
 80013ea:	2332      	movs	r3, #50	; 0x32
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	e016      	b.n	800141e <rgb_value+0xaa>
	else if(j == '6') b = 60;
 80013f0:	79bb      	ldrb	r3, [r7, #6]
 80013f2:	2b36      	cmp	r3, #54	; 0x36
 80013f4:	d102      	bne.n	80013fc <rgb_value+0x88>
 80013f6:	233c      	movs	r3, #60	; 0x3c
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	e010      	b.n	800141e <rgb_value+0xaa>
	else if(j == '7') b = 70;
 80013fc:	79bb      	ldrb	r3, [r7, #6]
 80013fe:	2b37      	cmp	r3, #55	; 0x37
 8001400:	d102      	bne.n	8001408 <rgb_value+0x94>
 8001402:	2346      	movs	r3, #70	; 0x46
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	e00a      	b.n	800141e <rgb_value+0xaa>
	else if(j == '8') b = 80;
 8001408:	79bb      	ldrb	r3, [r7, #6]
 800140a:	2b38      	cmp	r3, #56	; 0x38
 800140c:	d102      	bne.n	8001414 <rgb_value+0xa0>
 800140e:	2350      	movs	r3, #80	; 0x50
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	e004      	b.n	800141e <rgb_value+0xaa>
	else if(j == '9') b = 90;
 8001414:	79bb      	ldrb	r3, [r7, #6]
 8001416:	2b39      	cmp	r3, #57	; 0x39
 8001418:	d101      	bne.n	800141e <rgb_value+0xaa>
 800141a:	235a      	movs	r3, #90	; 0x5a
 800141c:	613b      	str	r3, [r7, #16]

	if(k == '0') c = 0;
 800141e:	797b      	ldrb	r3, [r7, #5]
 8001420:	2b30      	cmp	r3, #48	; 0x30
 8001422:	d102      	bne.n	800142a <rgb_value+0xb6>
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	e034      	b.n	8001494 <rgb_value+0x120>
	else if(k == '1') c = 1;
 800142a:	797b      	ldrb	r3, [r7, #5]
 800142c:	2b31      	cmp	r3, #49	; 0x31
 800142e:	d102      	bne.n	8001436 <rgb_value+0xc2>
 8001430:	2301      	movs	r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	e02e      	b.n	8001494 <rgb_value+0x120>
	else if(k == '2') c = 2;
 8001436:	797b      	ldrb	r3, [r7, #5]
 8001438:	2b32      	cmp	r3, #50	; 0x32
 800143a:	d102      	bne.n	8001442 <rgb_value+0xce>
 800143c:	2302      	movs	r3, #2
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	e028      	b.n	8001494 <rgb_value+0x120>
	else if(k == '3') c = 3;
 8001442:	797b      	ldrb	r3, [r7, #5]
 8001444:	2b33      	cmp	r3, #51	; 0x33
 8001446:	d102      	bne.n	800144e <rgb_value+0xda>
 8001448:	2303      	movs	r3, #3
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	e022      	b.n	8001494 <rgb_value+0x120>
	else if(k == '4') c = 4;
 800144e:	797b      	ldrb	r3, [r7, #5]
 8001450:	2b34      	cmp	r3, #52	; 0x34
 8001452:	d102      	bne.n	800145a <rgb_value+0xe6>
 8001454:	2304      	movs	r3, #4
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	e01c      	b.n	8001494 <rgb_value+0x120>
	else if(k == '5') c = 5;
 800145a:	797b      	ldrb	r3, [r7, #5]
 800145c:	2b35      	cmp	r3, #53	; 0x35
 800145e:	d102      	bne.n	8001466 <rgb_value+0xf2>
 8001460:	2305      	movs	r3, #5
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	e016      	b.n	8001494 <rgb_value+0x120>
	else if(k == '6') c = 6;
 8001466:	797b      	ldrb	r3, [r7, #5]
 8001468:	2b36      	cmp	r3, #54	; 0x36
 800146a:	d102      	bne.n	8001472 <rgb_value+0xfe>
 800146c:	2306      	movs	r3, #6
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	e010      	b.n	8001494 <rgb_value+0x120>
	else if(k == '7') c = 7;
 8001472:	797b      	ldrb	r3, [r7, #5]
 8001474:	2b37      	cmp	r3, #55	; 0x37
 8001476:	d102      	bne.n	800147e <rgb_value+0x10a>
 8001478:	2307      	movs	r3, #7
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	e00a      	b.n	8001494 <rgb_value+0x120>
	else if(k == '8') c = 8;
 800147e:	797b      	ldrb	r3, [r7, #5]
 8001480:	2b38      	cmp	r3, #56	; 0x38
 8001482:	d102      	bne.n	800148a <rgb_value+0x116>
 8001484:	2308      	movs	r3, #8
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	e004      	b.n	8001494 <rgb_value+0x120>
	else if(k == '9') c = 9;
 800148a:	797b      	ldrb	r3, [r7, #5]
 800148c:	2b39      	cmp	r3, #57	; 0x39
 800148e:	d101      	bne.n	8001494 <rgb_value+0x120>
 8001490:	2309      	movs	r3, #9
 8001492:	60fb      	str	r3, [r7, #12]

	return a+b+c;
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	441a      	add	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4413      	add	r3, r2
}
 800149e:	4618      	mov	r0, r3
 80014a0:	371c      	adds	r7, #28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin==Timbre_Pin)
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d102      	bne.n	80014c2 <HAL_GPIO_EXTI_Callback+0x16>
	{
		timbre = 1;
 80014bc:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x48>)
 80014be:	2201      	movs	r2, #1
 80014c0:	601a      	str	r2, [r3, #0]
	}
    if (GPIO_Pin==STOP_Pin)
 80014c2:	88fb      	ldrh	r3, [r7, #6]
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d102      	bne.n	80014ce <HAL_GPIO_EXTI_Callback+0x22>
    {
    	stop = 1;
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin==S_Int_Pin)
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d102      	bne.n	80014da <HAL_GPIO_EXTI_Callback+0x2e>
    {
        interior = 1;
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_GPIO_EXTI_Callback+0x50>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin==S_Ext_Pin)
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d102      	bne.n	80014e6 <HAL_GPIO_EXTI_Callback+0x3a>
    {
        exterior = 1;
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <HAL_GPIO_EXTI_Callback+0x54>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	601a      	str	r2, [r3, #0]
    }
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	200008ac 	.word	0x200008ac
 80014f8:	200008b0 	.word	0x200008b0
 80014fc:	200008b4 	.word	0x200008b4
 8001500:	200008b8 	.word	0x200008b8

08001504 <debouncer>:

int debouncer(volatile int* button_int, GPIO_TypeDef* GPIO_port, uint16_t GPIO_number) // Control de los rebotes
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	4613      	mov	r3, r2
 8001510:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count=0;
	static int counter=0;

	if (*button_int==1)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d13b      	bne.n	8001592 <debouncer+0x8e>
	{
		if (button_count==0)
 800151a:	4b20      	ldr	r3, [pc, #128]	; (800159c <debouncer+0x98>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10b      	bne.n	800153a <debouncer+0x36>
		{
			counter=HAL_GetTick();
 8001522:	f000 fec1 	bl	80022a8 <HAL_GetTick>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <debouncer+0x9c>)
 800152c:	601a      	str	r2, [r3, #0]
			button_count++;
 800152e:	4b1b      	ldr	r3, [pc, #108]	; (800159c <debouncer+0x98>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <debouncer+0x98>)
 8001538:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick()-counter>=20)
 800153a:	f000 feb5 	bl	80022a8 <HAL_GetTick>
 800153e:	4603      	mov	r3, r0
 8001540:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <debouncer+0x9c>)
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	1a9b      	subs	r3, r3, r2
 8001546:	2b13      	cmp	r3, #19
 8001548:	d923      	bls.n	8001592 <debouncer+0x8e>
		{
			counter=HAL_GetTick();
 800154a:	f000 fead 	bl	80022a8 <HAL_GetTick>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <debouncer+0x9c>)
 8001554:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number)!=1)
 8001556:	88fb      	ldrh	r3, [r7, #6]
 8001558:	4619      	mov	r1, r3
 800155a:	68b8      	ldr	r0, [r7, #8]
 800155c:	f001 fa14 	bl	8002988 <HAL_GPIO_ReadPin>
 8001560:	4603      	mov	r3, r0
 8001562:	2b01      	cmp	r3, #1
 8001564:	d003      	beq.n	800156e <debouncer+0x6a>
			{
				button_count=1;
 8001566:	4b0d      	ldr	r3, [pc, #52]	; (800159c <debouncer+0x98>)
 8001568:	2201      	movs	r2, #1
 800156a:	701a      	strb	r2, [r3, #0]
 800156c:	e005      	b.n	800157a <debouncer+0x76>
			}
			else
			{
				button_count++;
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <debouncer+0x98>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	3301      	adds	r3, #1
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <debouncer+0x98>)
 8001578:	701a      	strb	r2, [r3, #0]
			}
			if (button_count==4 ) // Periodo antirebotes
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <debouncer+0x98>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b04      	cmp	r3, #4
 8001580:	d107      	bne.n	8001592 <debouncer+0x8e>
			{
				button_count=0;
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <debouncer+0x98>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
				*button_int=0;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
				return 1;
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <debouncer+0x90>
			}
		}
	}
	return 0;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200008bc 	.word	0x200008bc
 80015a0:	200008c0 	.word	0x200008c0

080015a4 <play_Timbre>:

void play_Timbre(void){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0

	uint8_t tone;

	tone = 20;
 80015aa:	2314      	movs	r3, #20
 80015ac:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	005a      	lsls	r2, r3, #1
 80015b2:	4b16      	ldr	r3, [pc, #88]	; (800160c <play_Timbre+0x68>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	461a      	mov	r2, r3
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <play_Timbre+0x68>)
 80015c0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <play_Timbre+0x68>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	79fa      	ldrb	r2, [r7, #7]
 80015c8:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(300);
 80015ca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80015ce:	f000 fe77 	bl	80022c0 <HAL_Delay>

	tone = 40;
 80015d2:	2328      	movs	r3, #40	; 0x28
 80015d4:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	005a      	lsls	r2, r3, #1
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <play_Timbre+0x68>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	62da      	str	r2, [r3, #44]	; 0x2c
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <play_Timbre+0x68>)
 80015e8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <play_Timbre+0x68>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	79fa      	ldrb	r2, [r7, #7]
 80015f0:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 80015f2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80015f6:	f000 fe63 	bl	80022c0 <HAL_Delay>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80015fa:	4b04      	ldr	r3, [pc, #16]	; (800160c <play_Timbre+0x68>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2200      	movs	r2, #0
 8001600:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200009d4 	.word	0x200009d4

08001610 <play_Alarma>:

void play_Alarma(){
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0

	uint8_t tone;

	for(tone = 40; tone >= 10; tone = tone-10){
 8001616:	2328      	movs	r3, #40	; 0x28
 8001618:	71fb      	strb	r3, [r7, #7]
 800161a:	e014      	b.n	8001646 <play_Alarma+0x36>
	//for(int i=40; i>9; i-10){

	//tone = 40;
		__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	005a      	lsls	r2, r3, #1
 8001620:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <play_Alarma+0x48>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	62da      	str	r2, [r3, #44]	; 0x2c
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	461a      	mov	r2, r3
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <play_Alarma+0x48>)
 800162e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <play_Alarma+0x48>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	79fa      	ldrb	r2, [r7, #7]
 8001636:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(300);
 8001638:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800163c:	f000 fe40 	bl	80022c0 <HAL_Delay>
	for(tone = 40; tone >= 10; tone = tone-10){
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	3b0a      	subs	r3, #10
 8001644:	71fb      	strb	r3, [r7, #7]
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	2b09      	cmp	r3, #9
 800164a:	d8e7      	bhi.n	800161c <play_Alarma+0xc>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
	HAL_Delay(300);*/


	}
}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200009d4 	.word	0x200009d4

0800165c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001660:	f000 fdbc 	bl	80021dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001664:	f000 f86a 	bl	800173c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001668:	f000 faa2 	bl	8001bb0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800166c:	f000 fa4c 	bl	8001b08 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001670:	f000 fa74 	bl	8001b5c <MX_USART6_UART_Init>
  MX_TIM5_Init();
 8001674:	f000 f9fa 	bl	8001a6c <MX_TIM5_Init>
  MX_TIM1_Init();
 8001678:	f000 f8ca 	bl	8001810 <MX_TIM1_Init>
  MX_TIM4_Init();
 800167c:	f000 f980 	bl	8001980 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001680:	2100      	movs	r1, #0
 8001682:	4824      	ldr	r0, [pc, #144]	; (8001714 <main+0xb8>)
 8001684:	f001 fee6 	bl	8003454 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001688:	2104      	movs	r1, #4
 800168a:	4822      	ldr	r0, [pc, #136]	; (8001714 <main+0xb8>)
 800168c:	f001 fee2 	bl	8003454 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001690:	2108      	movs	r1, #8
 8001692:	4820      	ldr	r0, [pc, #128]	; (8001714 <main+0xb8>)
 8001694:	f001 fede 	bl	8003454 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001698:	2100      	movs	r1, #0
 800169a:	481f      	ldr	r0, [pc, #124]	; (8001718 <main+0xbc>)
 800169c:	f001 feda 	bl	8003454 <HAL_TIM_PWM_Start>
  //__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
  ESP_Init("iPhone Carmela","pistacho");
 80016a0:	491e      	ldr	r1, [pc, #120]	; (800171c <main+0xc0>)
 80016a2:	481f      	ldr	r0, [pc, #124]	; (8001720 <main+0xc4>)
 80016a4:	f7fe ff78 	bl	8000598 <ESP_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//serverStart();
		ESP_messageHandler();
 80016a8:	f7ff f8a2 	bl	80007f0 <ESP_messageHandler>

		// TIMBRE
		if (debouncer(&timbre, Timbre_GPIO_Port, Timbre_Pin)){
 80016ac:	2201      	movs	r2, #1
 80016ae:	491d      	ldr	r1, [pc, #116]	; (8001724 <main+0xc8>)
 80016b0:	481d      	ldr	r0, [pc, #116]	; (8001728 <main+0xcc>)
 80016b2:	f7ff ff27 	bl	8001504 <debouncer>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <main+0x64>
			play_Timbre();
 80016bc:	f7ff ff72 	bl	80015a4 <play_Timbre>
		}
		// STOP
		if (debouncer(&stop, STOP_GPIO_Port, STOP_Pin)){
 80016c0:	2204      	movs	r2, #4
 80016c2:	4918      	ldr	r1, [pc, #96]	; (8001724 <main+0xc8>)
 80016c4:	4819      	ldr	r0, [pc, #100]	; (800172c <main+0xd0>)
 80016c6:	f7ff ff1d 	bl	8001504 <debouncer>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <main+0x7c>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <main+0xbc>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2200      	movs	r2, #0
 80016d6:	635a      	str	r2, [r3, #52]	; 0x34
		}
		// ALARMA
		if (debouncer(&interior, S_Int_GPIO_Port, S_Int_Pin)){
 80016d8:	2208      	movs	r2, #8
 80016da:	4912      	ldr	r1, [pc, #72]	; (8001724 <main+0xc8>)
 80016dc:	4814      	ldr	r0, [pc, #80]	; (8001730 <main+0xd4>)
 80016de:	f7ff ff11 	bl	8001504 <debouncer>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <main+0x98>
			if(vSeg[0] == '1') play_Alarma();
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <main+0xd8>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b31      	cmp	r3, #49	; 0x31
 80016ee:	d101      	bne.n	80016f4 <main+0x98>
 80016f0:	f7ff ff8e 	bl	8001610 <play_Alarma>
		}
		if (debouncer(&exterior, S_Ext_GPIO_Port, S_Ext_Pin)){
 80016f4:	2202      	movs	r2, #2
 80016f6:	490b      	ldr	r1, [pc, #44]	; (8001724 <main+0xc8>)
 80016f8:	480f      	ldr	r0, [pc, #60]	; (8001738 <main+0xdc>)
 80016fa:	f7ff ff03 	bl	8001504 <debouncer>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0d1      	beq.n	80016a8 <main+0x4c>
			if(vSeg[1] == '1') play_Alarma();
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <main+0xd8>)
 8001706:	785b      	ldrb	r3, [r3, #1]
 8001708:	2b31      	cmp	r3, #49	; 0x31
 800170a:	d1cd      	bne.n	80016a8 <main+0x4c>
 800170c:	f7ff ff80 	bl	8001610 <play_Alarma>
		ESP_messageHandler();
 8001710:	e7ca      	b.n	80016a8 <main+0x4c>
 8001712:	bf00      	nop
 8001714:	20000a64 	.word	0x20000a64
 8001718:	200009d4 	.word	0x200009d4
 800171c:	08005fc8 	.word	0x08005fc8
 8001720:	08005fd4 	.word	0x08005fd4
 8001724:	40021000 	.word	0x40021000
 8001728:	200008ac 	.word	0x200008ac
 800172c:	200008b0 	.word	0x200008b0
 8001730:	200008b4 	.word	0x200008b4
 8001734:	200009c0 	.word	0x200009c0
 8001738:	200008b8 	.word	0x200008b8

0800173c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b094      	sub	sp, #80	; 0x50
 8001740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001742:	f107 0320 	add.w	r3, r7, #32
 8001746:	2230      	movs	r2, #48	; 0x30
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f003 fce6 	bl	800511c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	4b28      	ldr	r3, [pc, #160]	; (8001808 <SystemClock_Config+0xcc>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	4a27      	ldr	r2, [pc, #156]	; (8001808 <SystemClock_Config+0xcc>)
 800176a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176e:	6413      	str	r3, [r2, #64]	; 0x40
 8001770:	4b25      	ldr	r3, [pc, #148]	; (8001808 <SystemClock_Config+0xcc>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800177c:	2300      	movs	r3, #0
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	4b22      	ldr	r3, [pc, #136]	; (800180c <SystemClock_Config+0xd0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a21      	ldr	r2, [pc, #132]	; (800180c <SystemClock_Config+0xd0>)
 8001786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b1f      	ldr	r3, [pc, #124]	; (800180c <SystemClock_Config+0xd0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001798:	2302      	movs	r3, #2
 800179a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800179c:	2301      	movs	r3, #1
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017a0:	2310      	movs	r3, #16
 80017a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a4:	2302      	movs	r3, #2
 80017a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017a8:	2300      	movs	r3, #0
 80017aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017ac:	2308      	movs	r3, #8
 80017ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80017b0:	2332      	movs	r3, #50	; 0x32
 80017b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017b4:	2304      	movs	r3, #4
 80017b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017b8:	2307      	movs	r3, #7
 80017ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017bc:	f107 0320 	add.w	r3, r7, #32
 80017c0:	4618      	mov	r0, r3
 80017c2:	f001 f92b 	bl	8002a1c <HAL_RCC_OscConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017cc:	f000 fac8 	bl	8001d60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d0:	230f      	movs	r3, #15
 80017d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d4:	2302      	movs	r3, #2
 80017d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80017dc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f001 fb8c 	bl	8002f0c <HAL_RCC_ClockConfig>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017fa:	f000 fab1 	bl	8001d60 <Error_Handler>
  }
}
 80017fe:	bf00      	nop
 8001800:	3750      	adds	r7, #80	; 0x50
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	40007000 	.word	0x40007000

08001810 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b096      	sub	sp, #88	; 0x58
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001816:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001824:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800182e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]
 800183e:	615a      	str	r2, [r3, #20]
 8001840:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	2220      	movs	r2, #32
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f003 fc67 	bl	800511c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800184e:	4b4a      	ldr	r3, [pc, #296]	; (8001978 <MX_TIM1_Init+0x168>)
 8001850:	4a4a      	ldr	r2, [pc, #296]	; (800197c <MX_TIM1_Init+0x16c>)
 8001852:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8001854:	4b48      	ldr	r3, [pc, #288]	; (8001978 <MX_TIM1_Init+0x168>)
 8001856:	225f      	movs	r2, #95	; 0x5f
 8001858:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185a:	4b47      	ldr	r3, [pc, #284]	; (8001978 <MX_TIM1_Init+0x168>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 8001860:	4b45      	ldr	r3, [pc, #276]	; (8001978 <MX_TIM1_Init+0x168>)
 8001862:	22fe      	movs	r2, #254	; 0xfe
 8001864:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001866:	4b44      	ldr	r3, [pc, #272]	; (8001978 <MX_TIM1_Init+0x168>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800186c:	4b42      	ldr	r3, [pc, #264]	; (8001978 <MX_TIM1_Init+0x168>)
 800186e:	2200      	movs	r2, #0
 8001870:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001872:	4b41      	ldr	r3, [pc, #260]	; (8001978 <MX_TIM1_Init+0x168>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001878:	483f      	ldr	r0, [pc, #252]	; (8001978 <MX_TIM1_Init+0x168>)
 800187a:	f001 fd43 	bl	8003304 <HAL_TIM_Base_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001884:	f000 fa6c 	bl	8001d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800188e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001892:	4619      	mov	r1, r3
 8001894:	4838      	ldr	r0, [pc, #224]	; (8001978 <MX_TIM1_Init+0x168>)
 8001896:	f001 ff67 	bl	8003768 <HAL_TIM_ConfigClockSource>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80018a0:	f000 fa5e 	bl	8001d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018a4:	4834      	ldr	r0, [pc, #208]	; (8001978 <MX_TIM1_Init+0x168>)
 80018a6:	f001 fd7c 	bl	80033a2 <HAL_TIM_PWM_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80018b0:	f000 fa56 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b4:	2300      	movs	r3, #0
 80018b6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018c0:	4619      	mov	r1, r3
 80018c2:	482d      	ldr	r0, [pc, #180]	; (8001978 <MX_TIM1_Init+0x168>)
 80018c4:	f002 fb28 	bl	8003f18 <HAL_TIMEx_MasterConfigSynchronization>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80018ce:	f000 fa47 	bl	8001d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018d2:	2360      	movs	r3, #96	; 0x60
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018da:	2300      	movs	r3, #0
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018de:	2300      	movs	r3, #0
 80018e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018e6:	2300      	movs	r3, #0
 80018e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f2:	2200      	movs	r2, #0
 80018f4:	4619      	mov	r1, r3
 80018f6:	4820      	ldr	r0, [pc, #128]	; (8001978 <MX_TIM1_Init+0x168>)
 80018f8:	f001 fe74 	bl	80035e4 <HAL_TIM_PWM_ConfigChannel>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001902:	f000 fa2d 	bl	8001d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190a:	2204      	movs	r2, #4
 800190c:	4619      	mov	r1, r3
 800190e:	481a      	ldr	r0, [pc, #104]	; (8001978 <MX_TIM1_Init+0x168>)
 8001910:	f001 fe68 	bl	80035e4 <HAL_TIM_PWM_ConfigChannel>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800191a:	f000 fa21 	bl	8001d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800191e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001922:	2208      	movs	r2, #8
 8001924:	4619      	mov	r1, r3
 8001926:	4814      	ldr	r0, [pc, #80]	; (8001978 <MX_TIM1_Init+0x168>)
 8001928:	f001 fe5c 	bl	80035e4 <HAL_TIM_PWM_ConfigChannel>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001932:	f000 fa15 	bl	8001d60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800194a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800194e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	4619      	mov	r1, r3
 8001958:	4807      	ldr	r0, [pc, #28]	; (8001978 <MX_TIM1_Init+0x168>)
 800195a:	f002 fb59 	bl	8004010 <HAL_TIMEx_ConfigBreakDeadTime>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001964:	f000 f9fc 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001968:	4803      	ldr	r0, [pc, #12]	; (8001978 <MX_TIM1_Init+0x168>)
 800196a:	f000 fa75 	bl	8001e58 <HAL_TIM_MspPostInit>

}
 800196e:	bf00      	nop
 8001970:	3758      	adds	r7, #88	; 0x58
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000a64 	.word	0x20000a64
 800197c:	40010000 	.word	0x40010000

08001980 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08e      	sub	sp, #56	; 0x38
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001994:	f107 0320 	add.w	r3, r7, #32
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
 80019ac:	615a      	str	r2, [r3, #20]
 80019ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019b0:	4b2c      	ldr	r3, [pc, #176]	; (8001a64 <MX_TIM4_Init+0xe4>)
 80019b2:	4a2d      	ldr	r2, [pc, #180]	; (8001a68 <MX_TIM4_Init+0xe8>)
 80019b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 80019b6:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <MX_TIM4_Init+0xe4>)
 80019b8:	225f      	movs	r2, #95	; 0x5f
 80019ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019bc:	4b29      	ldr	r3, [pc, #164]	; (8001a64 <MX_TIM4_Init+0xe4>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20;
 80019c2:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <MX_TIM4_Init+0xe4>)
 80019c4:	2214      	movs	r2, #20
 80019c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c8:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <MX_TIM4_Init+0xe4>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ce:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <MX_TIM4_Init+0xe4>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019d4:	4823      	ldr	r0, [pc, #140]	; (8001a64 <MX_TIM4_Init+0xe4>)
 80019d6:	f001 fc95 	bl	8003304 <HAL_TIM_Base_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80019e0:	f000 f9be 	bl	8001d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80019ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ee:	4619      	mov	r1, r3
 80019f0:	481c      	ldr	r0, [pc, #112]	; (8001a64 <MX_TIM4_Init+0xe4>)
 80019f2:	f001 feb9 	bl	8003768 <HAL_TIM_ConfigClockSource>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80019fc:	f000 f9b0 	bl	8001d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a00:	4818      	ldr	r0, [pc, #96]	; (8001a64 <MX_TIM4_Init+0xe4>)
 8001a02:	f001 fcce 	bl	80033a2 <HAL_TIM_PWM_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001a0c:	f000 f9a8 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a18:	f107 0320 	add.w	r3, r7, #32
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4811      	ldr	r0, [pc, #68]	; (8001a64 <MX_TIM4_Init+0xe4>)
 8001a20:	f002 fa7a 	bl	8003f18 <HAL_TIMEx_MasterConfigSynchronization>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001a2a:	f000 f999 	bl	8001d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a2e:	2360      	movs	r3, #96	; 0x60
 8001a30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	2200      	movs	r2, #0
 8001a42:	4619      	mov	r1, r3
 8001a44:	4807      	ldr	r0, [pc, #28]	; (8001a64 <MX_TIM4_Init+0xe4>)
 8001a46:	f001 fdcd 	bl	80035e4 <HAL_TIM_PWM_ConfigChannel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001a50:	f000 f986 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a54:	4803      	ldr	r0, [pc, #12]	; (8001a64 <MX_TIM4_Init+0xe4>)
 8001a56:	f000 f9ff 	bl	8001e58 <HAL_TIM_MspPostInit>

}
 8001a5a:	bf00      	nop
 8001a5c:	3738      	adds	r7, #56	; 0x38
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200009d4 	.word	0x200009d4
 8001a68:	40000800 	.word	0x40000800

08001a6c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a72:	f107 0308 	add.w	r3, r7, #8
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a80:	463b      	mov	r3, r7
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a88:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <MX_TIM5_Init+0x94>)
 8001a8a:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <MX_TIM5_Init+0x98>)
 8001a8c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <MX_TIM5_Init+0x94>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a94:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <MX_TIM5_Init+0x94>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001a9a:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <MX_TIM5_Init+0x94>)
 8001a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa2:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <MX_TIM5_Init+0x94>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa8:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <MX_TIM5_Init+0x94>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001aae:	4814      	ldr	r0, [pc, #80]	; (8001b00 <MX_TIM5_Init+0x94>)
 8001ab0:	f001 fc28 	bl	8003304 <HAL_TIM_Base_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001aba:	f000 f951 	bl	8001d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ac4:	f107 0308 	add.w	r3, r7, #8
 8001ac8:	4619      	mov	r1, r3
 8001aca:	480d      	ldr	r0, [pc, #52]	; (8001b00 <MX_TIM5_Init+0x94>)
 8001acc:	f001 fe4c 	bl	8003768 <HAL_TIM_ConfigClockSource>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001ad6:	f000 f943 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4806      	ldr	r0, [pc, #24]	; (8001b00 <MX_TIM5_Init+0x94>)
 8001ae8:	f002 fa16 	bl	8003f18 <HAL_TIMEx_MasterConfigSynchronization>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001af2:	f000 f935 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000a1c 	.word	0x20000a1c
 8001b04:	40000c00 	.word	0x40000c00

08001b08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <MX_USART2_UART_Init+0x50>)
 8001b10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b2e:	220c      	movs	r2, #12
 8001b30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b40:	f002 fab8 	bl	80040b4 <HAL_UART_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b4a:	f000 f909 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000af0 	.word	0x20000af0
 8001b58:	40004400 	.word	0x40004400

08001b5c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <MX_USART6_UART_Init+0x4c>)
 8001b62:	4a12      	ldr	r2, [pc, #72]	; (8001bac <MX_USART6_UART_Init+0x50>)
 8001b64:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <MX_USART6_UART_Init+0x4c>)
 8001b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b6c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <MX_USART6_UART_Init+0x4c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <MX_USART6_UART_Init+0x4c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <MX_USART6_UART_Init+0x4c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <MX_USART6_UART_Init+0x4c>)
 8001b82:	220c      	movs	r2, #12
 8001b84:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <MX_USART6_UART_Init+0x4c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <MX_USART6_UART_Init+0x4c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <MX_USART6_UART_Init+0x4c>)
 8001b94:	f002 fa8e 	bl	80040b4 <HAL_UART_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001b9e:	f000 f8df 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000aac 	.word	0x20000aac
 8001bac:	40011400 	.word	0x40011400

08001bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	4b60      	ldr	r3, [pc, #384]	; (8001d4c <MX_GPIO_Init+0x19c>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a5f      	ldr	r2, [pc, #380]	; (8001d4c <MX_GPIO_Init+0x19c>)
 8001bd0:	f043 0310 	orr.w	r3, r3, #16
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b5d      	ldr	r3, [pc, #372]	; (8001d4c <MX_GPIO_Init+0x19c>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0310 	and.w	r3, r3, #16
 8001bde:	61bb      	str	r3, [r7, #24]
 8001be0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	4b59      	ldr	r3, [pc, #356]	; (8001d4c <MX_GPIO_Init+0x19c>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a58      	ldr	r2, [pc, #352]	; (8001d4c <MX_GPIO_Init+0x19c>)
 8001bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b56      	ldr	r3, [pc, #344]	; (8001d4c <MX_GPIO_Init+0x19c>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	4b52      	ldr	r3, [pc, #328]	; (8001d4c <MX_GPIO_Init+0x19c>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a51      	ldr	r2, [pc, #324]	; (8001d4c <MX_GPIO_Init+0x19c>)
 8001c08:	f043 0304 	orr.w	r3, r3, #4
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b4f      	ldr	r3, [pc, #316]	; (8001d4c <MX_GPIO_Init+0x19c>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	4b4b      	ldr	r3, [pc, #300]	; (8001d4c <MX_GPIO_Init+0x19c>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a4a      	ldr	r2, [pc, #296]	; (8001d4c <MX_GPIO_Init+0x19c>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b48      	ldr	r3, [pc, #288]	; (8001d4c <MX_GPIO_Init+0x19c>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	4b44      	ldr	r3, [pc, #272]	; (8001d4c <MX_GPIO_Init+0x19c>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a43      	ldr	r2, [pc, #268]	; (8001d4c <MX_GPIO_Init+0x19c>)
 8001c40:	f043 0308 	orr.w	r3, r3, #8
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <MX_GPIO_Init+0x19c>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <MX_GPIO_Init+0x19c>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a3c      	ldr	r2, [pc, #240]	; (8001d4c <MX_GPIO_Init+0x19c>)
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <MX_GPIO_Init+0x19c>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WiFi_OK_Pin|L_Porche_Pin|L_Tendedero_Pin|L_Garaje_Pin, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f641 4101 	movw	r1, #7169	; 0x1c01
 8001c74:	4836      	ldr	r0, [pc, #216]	; (8001d50 <MX_GPIO_Init+0x1a0>)
 8001c76:	f000 fe9f 	bl	80029b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Z_Activo_Pin|L_Jardin_Pin|Oficina_Pin|L_Derecha_Pin
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f248 01ff 	movw	r1, #33023	; 0x80ff
 8001c80:	4834      	ldr	r0, [pc, #208]	; (8001d54 <MX_GPIO_Init+0x1a4>)
 8001c82:	f000 fe99 	bl	80029b8 <HAL_GPIO_WritePin>
                          |L_Izquierda_Pin|L_Domitorio_Pin|L_Espejo_Pin|L_Bano_Pin
                          |L_Fregadero_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L_Cocina_Pin|L_Recibidor_Pin|L_Ambiente_Pin|L_Comedor_Pin
 8001c86:	2200      	movs	r2, #0
 8001c88:	21f8      	movs	r1, #248	; 0xf8
 8001c8a:	4833      	ldr	r0, [pc, #204]	; (8001d58 <MX_GPIO_Init+0x1a8>)
 8001c8c:	f000 fe94 	bl	80029b8 <HAL_GPIO_WritePin>
                          |L_Sala_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : STOP_Pin S_Int_Pin Timbre_Pin S_Ext_Pin */
  GPIO_InitStruct.Pin = STOP_Pin|S_Int_Pin|Timbre_Pin|S_Ext_Pin;
 8001c90:	230f      	movs	r3, #15
 8001c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c94:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	482d      	ldr	r0, [pc, #180]	; (8001d5c <MX_GPIO_Init+0x1ac>)
 8001ca6:	f000 fcd3 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pins : WiFi_OK_Pin L_Porche_Pin L_Tendedero_Pin L_Garaje_Pin */
  GPIO_InitStruct.Pin = WiFi_OK_Pin|L_Porche_Pin|L_Tendedero_Pin|L_Garaje_Pin;
 8001caa:	f641 4301 	movw	r3, #7169	; 0x1c01
 8001cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cbc:	f107 031c 	add.w	r3, r7, #28
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4823      	ldr	r0, [pc, #140]	; (8001d50 <MX_GPIO_Init+0x1a0>)
 8001cc4:	f000 fcc4 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pins : Z_Activo_Pin L_Jardin_Pin Oficina_Pin L_Derecha_Pin
                           L_Izquierda_Pin L_Domitorio_Pin L_Espejo_Pin L_Bano_Pin
                           L_Fregadero_Pin */
  GPIO_InitStruct.Pin = Z_Activo_Pin|L_Jardin_Pin|Oficina_Pin|L_Derecha_Pin
 8001cc8:	f248 03ff 	movw	r3, #33023	; 0x80ff
 8001ccc:	61fb      	str	r3, [r7, #28]
                          |L_Izquierda_Pin|L_Domitorio_Pin|L_Espejo_Pin|L_Bano_Pin
                          |L_Fregadero_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cda:	f107 031c 	add.w	r3, r7, #28
 8001cde:	4619      	mov	r1, r3
 8001ce0:	481c      	ldr	r0, [pc, #112]	; (8001d54 <MX_GPIO_Init+0x1a4>)
 8001ce2:	f000 fcb5 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_Cocina_Pin L_Recibidor_Pin L_Ambiente_Pin L_Comedor_Pin
                           L_Sala_Pin */
  GPIO_InitStruct.Pin = L_Cocina_Pin|L_Recibidor_Pin|L_Ambiente_Pin|L_Comedor_Pin
 8001ce6:	23f8      	movs	r3, #248	; 0xf8
 8001ce8:	61fb      	str	r3, [r7, #28]
                          |L_Sala_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf6:	f107 031c 	add.w	r3, r7, #28
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4816      	ldr	r0, [pc, #88]	; (8001d58 <MX_GPIO_Init+0x1a8>)
 8001cfe:	f000 fca7 	bl	8002650 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 1);
 8001d02:	2201      	movs	r2, #1
 8001d04:	2101      	movs	r1, #1
 8001d06:	2006      	movs	r0, #6
 8001d08:	f000 fbd9 	bl	80024be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d0c:	2006      	movs	r0, #6
 8001d0e:	f000 fbf2 	bl	80024f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 1);
 8001d12:	2201      	movs	r2, #1
 8001d14:	2101      	movs	r1, #1
 8001d16:	2007      	movs	r0, #7
 8001d18:	f000 fbd1 	bl	80024be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d1c:	2007      	movs	r0, #7
 8001d1e:	f000 fbea 	bl	80024f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	2008      	movs	r0, #8
 8001d28:	f000 fbc9 	bl	80024be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001d2c:	2008      	movs	r0, #8
 8001d2e:	f000 fbe2 	bl	80024f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 1);
 8001d32:	2201      	movs	r2, #1
 8001d34:	2101      	movs	r1, #1
 8001d36:	2009      	movs	r0, #9
 8001d38:	f000 fbc1 	bl	80024be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001d3c:	2009      	movs	r0, #9
 8001d3e:	f000 fbda 	bl	80024f6 <HAL_NVIC_EnableIRQ>

}
 8001d42:	bf00      	nop
 8001d44:	3730      	adds	r7, #48	; 0x30
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020c00 	.word	0x40020c00
 8001d58:	40020400 	.word	0x40020400
 8001d5c:	40021000 	.word	0x40021000

08001d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d64:	b672      	cpsid	i
}
 8001d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <Error_Handler+0x8>
	...

08001d6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	4a0f      	ldr	r2, [pc, #60]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d80:	6453      	str	r3, [r2, #68]	; 0x44
 8001d82:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a08      	ldr	r2, [pc, #32]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_MspInit+0x4c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001daa:	2007      	movs	r0, #7
 8001dac:	f000 fb7c 	bl	80024a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40023800 	.word	0x40023800

08001dbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a1f      	ldr	r2, [pc, #124]	; (8001e48 <HAL_TIM_Base_MspInit+0x8c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d10e      	bne.n	8001dec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <HAL_TIM_Base_MspInit+0x90>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	4a1d      	ldr	r2, [pc, #116]	; (8001e4c <HAL_TIM_Base_MspInit+0x90>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dde:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <HAL_TIM_Base_MspInit+0x90>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001dea:	e026      	b.n	8001e3a <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a17      	ldr	r2, [pc, #92]	; (8001e50 <HAL_TIM_Base_MspInit+0x94>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d10e      	bne.n	8001e14 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <HAL_TIM_Base_MspInit+0x90>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a13      	ldr	r2, [pc, #76]	; (8001e4c <HAL_TIM_Base_MspInit+0x90>)
 8001e00:	f043 0304 	orr.w	r3, r3, #4
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_TIM_Base_MspInit+0x90>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
}
 8001e12:	e012      	b.n	8001e3a <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0e      	ldr	r2, [pc, #56]	; (8001e54 <HAL_TIM_Base_MspInit+0x98>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d10d      	bne.n	8001e3a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <HAL_TIM_Base_MspInit+0x90>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <HAL_TIM_Base_MspInit+0x90>)
 8001e28:	f043 0308 	orr.w	r3, r3, #8
 8001e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <HAL_TIM_Base_MspInit+0x90>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
}
 8001e3a:	bf00      	nop
 8001e3c:	371c      	adds	r7, #28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40010000 	.word	0x40010000
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40000800 	.word	0x40000800
 8001e54:	40000c00 	.word	0x40000c00

08001e58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08a      	sub	sp, #40	; 0x28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a25      	ldr	r2, [pc, #148]	; (8001f0c <HAL_TIM_MspPostInit+0xb4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d11f      	bne.n	8001eba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	4b24      	ldr	r3, [pc, #144]	; (8001f10 <HAL_TIM_MspPostInit+0xb8>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a23      	ldr	r2, [pc, #140]	; (8001f10 <HAL_TIM_MspPostInit+0xb8>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <HAL_TIM_MspPostInit+0xb8>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001e96:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4818      	ldr	r0, [pc, #96]	; (8001f14 <HAL_TIM_MspPostInit+0xbc>)
 8001eb4:	f000 fbcc 	bl	8002650 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001eb8:	e023      	b.n	8001f02 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM4)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a16      	ldr	r2, [pc, #88]	; (8001f18 <HAL_TIM_MspPostInit+0xc0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d11e      	bne.n	8001f02 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <HAL_TIM_MspPostInit+0xb8>)
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	4a10      	ldr	r2, [pc, #64]	; (8001f10 <HAL_TIM_MspPostInit+0xb8>)
 8001ece:	f043 0308 	orr.w	r3, r3, #8
 8001ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <HAL_TIM_MspPostInit+0xb8>)
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ef6:	f107 0314 	add.w	r3, r7, #20
 8001efa:	4619      	mov	r1, r3
 8001efc:	4807      	ldr	r0, [pc, #28]	; (8001f1c <HAL_TIM_MspPostInit+0xc4>)
 8001efe:	f000 fba7 	bl	8002650 <HAL_GPIO_Init>
}
 8001f02:	bf00      	nop
 8001f04:	3728      	adds	r7, #40	; 0x28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40010000 	.word	0x40010000
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020000 	.word	0x40020000
 8001f18:	40000800 	.word	0x40000800
 8001f1c:	40020c00 	.word	0x40020c00

08001f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08c      	sub	sp, #48	; 0x30
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 031c 	add.w	r3, r7, #28
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a3a      	ldr	r2, [pc, #232]	; (8002028 <HAL_UART_MspInit+0x108>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d134      	bne.n	8001fac <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]
 8001f46:	4b39      	ldr	r3, [pc, #228]	; (800202c <HAL_UART_MspInit+0x10c>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	4a38      	ldr	r2, [pc, #224]	; (800202c <HAL_UART_MspInit+0x10c>)
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f50:	6413      	str	r3, [r2, #64]	; 0x40
 8001f52:	4b36      	ldr	r3, [pc, #216]	; (800202c <HAL_UART_MspInit+0x10c>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	4b32      	ldr	r3, [pc, #200]	; (800202c <HAL_UART_MspInit+0x10c>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a31      	ldr	r2, [pc, #196]	; (800202c <HAL_UART_MspInit+0x10c>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b2f      	ldr	r3, [pc, #188]	; (800202c <HAL_UART_MspInit+0x10c>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f7a:	230c      	movs	r3, #12
 8001f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f86:	2303      	movs	r3, #3
 8001f88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f8a:	2307      	movs	r3, #7
 8001f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8e:	f107 031c 	add.w	r3, r7, #28
 8001f92:	4619      	mov	r1, r3
 8001f94:	4826      	ldr	r0, [pc, #152]	; (8002030 <HAL_UART_MspInit+0x110>)
 8001f96:	f000 fb5b 	bl	8002650 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2026      	movs	r0, #38	; 0x26
 8001fa0:	f000 fa8d 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fa4:	2026      	movs	r0, #38	; 0x26
 8001fa6:	f000 faa6 	bl	80024f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001faa:	e038      	b.n	800201e <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a20      	ldr	r2, [pc, #128]	; (8002034 <HAL_UART_MspInit+0x114>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d133      	bne.n	800201e <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	4b1c      	ldr	r3, [pc, #112]	; (800202c <HAL_UART_MspInit+0x10c>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	4a1b      	ldr	r2, [pc, #108]	; (800202c <HAL_UART_MspInit+0x10c>)
 8001fc0:	f043 0320 	orr.w	r3, r3, #32
 8001fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc6:	4b19      	ldr	r3, [pc, #100]	; (800202c <HAL_UART_MspInit+0x10c>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	4b15      	ldr	r3, [pc, #84]	; (800202c <HAL_UART_MspInit+0x10c>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a14      	ldr	r2, [pc, #80]	; (800202c <HAL_UART_MspInit+0x10c>)
 8001fdc:	f043 0304 	orr.w	r3, r3, #4
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_UART_MspInit+0x10c>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fee:	23c0      	movs	r3, #192	; 0xc0
 8001ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ffe:	2308      	movs	r3, #8
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002002:	f107 031c 	add.w	r3, r7, #28
 8002006:	4619      	mov	r1, r3
 8002008:	480b      	ldr	r0, [pc, #44]	; (8002038 <HAL_UART_MspInit+0x118>)
 800200a:	f000 fb21 	bl	8002650 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800200e:	2200      	movs	r2, #0
 8002010:	2100      	movs	r1, #0
 8002012:	2047      	movs	r0, #71	; 0x47
 8002014:	f000 fa53 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002018:	2047      	movs	r0, #71	; 0x47
 800201a:	f000 fa6c 	bl	80024f6 <HAL_NVIC_EnableIRQ>
}
 800201e:	bf00      	nop
 8002020:	3730      	adds	r7, #48	; 0x30
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40004400 	.word	0x40004400
 800202c:	40023800 	.word	0x40023800
 8002030:	40020000 	.word	0x40020000
 8002034:	40011400 	.word	0x40011400
 8002038:	40020800 	.word	0x40020800

0800203c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <NMI_Handler+0x4>

08002042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <HardFault_Handler+0x4>

08002048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <MemManage_Handler+0x4>

0800204e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002052:	e7fe      	b.n	8002052 <BusFault_Handler+0x4>

08002054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <UsageFault_Handler+0x4>

0800205a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002088:	f000 f8fa 	bl	8002280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}

08002090 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002094:	2001      	movs	r0, #1
 8002096:	f000 fca9 	bl	80029ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}

0800209e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80020a2:	2002      	movs	r0, #2
 80020a4:	f000 fca2 	bl	80029ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}

080020ac <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80020b0:	2004      	movs	r0, #4
 80020b2:	f000 fc9b 	bl	80029ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}

080020ba <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80020be:	2008      	movs	r0, #8
 80020c0:	f000 fc94 	bl	80029ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UART_isr(&huart2);
 80020cc:	4803      	ldr	r0, [pc, #12]	; (80020dc <USART2_IRQHandler+0x14>)
 80020ce:	f7ff f8a7 	bl	8001220 <UART_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020d2:	4802      	ldr	r0, [pc, #8]	; (80020dc <USART2_IRQHandler+0x14>)
 80020d4:	f002 f970 	bl	80043b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000af0 	.word	0x20000af0

080020e0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	UART_isr(&huart6);
 80020e4:	4803      	ldr	r0, [pc, #12]	; (80020f4 <USART6_IRQHandler+0x14>)
 80020e6:	f7ff f89b 	bl	8001220 <UART_isr>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80020ea:	4802      	ldr	r0, [pc, #8]	; (80020f4 <USART6_IRQHandler+0x14>)
 80020ec:	f002 f964 	bl	80043b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000aac 	.word	0x20000aac

080020f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002100:	4a14      	ldr	r2, [pc, #80]	; (8002154 <_sbrk+0x5c>)
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <_sbrk+0x60>)
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800210c:	4b13      	ldr	r3, [pc, #76]	; (800215c <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <_sbrk+0x64>)
 8002116:	4a12      	ldr	r2, [pc, #72]	; (8002160 <_sbrk+0x68>)
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	429a      	cmp	r2, r3
 8002126:	d207      	bcs.n	8002138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002128:	f002 ffce 	bl	80050c8 <__errno>
 800212c:	4603      	mov	r3, r0
 800212e:	220c      	movs	r2, #12
 8002130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
 8002136:	e009      	b.n	800214c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	4a05      	ldr	r2, [pc, #20]	; (800215c <_sbrk+0x64>)
 8002148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214a:	68fb      	ldr	r3, [r7, #12]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20020000 	.word	0x20020000
 8002158:	00000400 	.word	0x00000400
 800215c:	200008c4 	.word	0x200008c4
 8002160:	20000b48 	.word	0x20000b48

08002164 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <SystemInit+0x20>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216e:	4a05      	ldr	r2, [pc, #20]	; (8002184 <SystemInit+0x20>)
 8002170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002174:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800218c:	480d      	ldr	r0, [pc, #52]	; (80021c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800218e:	490e      	ldr	r1, [pc, #56]	; (80021c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002190:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002194:	e002      	b.n	800219c <LoopCopyDataInit>

08002196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800219a:	3304      	adds	r3, #4

0800219c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800219c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a0:	d3f9      	bcc.n	8002196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021a2:	4a0b      	ldr	r2, [pc, #44]	; (80021d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021a4:	4c0b      	ldr	r4, [pc, #44]	; (80021d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a8:	e001      	b.n	80021ae <LoopFillZerobss>

080021aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021ac:	3204      	adds	r2, #4

080021ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b0:	d3fb      	bcc.n	80021aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021b2:	f7ff ffd7 	bl	8002164 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021b6:	f002 ff8d 	bl	80050d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ba:	f7ff fa4f 	bl	800165c <main>
  bx  lr    
 80021be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80021cc:	08006040 	.word	0x08006040
  ldr r2, =_sbss
 80021d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80021d4:	20000b48 	.word	0x20000b48

080021d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021d8:	e7fe      	b.n	80021d8 <ADC_IRQHandler>
	...

080021dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021e0:	4b0e      	ldr	r3, [pc, #56]	; (800221c <HAL_Init+0x40>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0d      	ldr	r2, [pc, #52]	; (800221c <HAL_Init+0x40>)
 80021e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_Init+0x40>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a0a      	ldr	r2, [pc, #40]	; (800221c <HAL_Init+0x40>)
 80021f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <HAL_Init+0x40>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a07      	ldr	r2, [pc, #28]	; (800221c <HAL_Init+0x40>)
 80021fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002202:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002204:	2003      	movs	r0, #3
 8002206:	f000 f94f 	bl	80024a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800220a:	2000      	movs	r0, #0
 800220c:	f000 f808 	bl	8002220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002210:	f7ff fdac 	bl	8001d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40023c00 	.word	0x40023c00

08002220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002228:	4b12      	ldr	r3, [pc, #72]	; (8002274 <HAL_InitTick+0x54>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4b12      	ldr	r3, [pc, #72]	; (8002278 <HAL_InitTick+0x58>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	4619      	mov	r1, r3
 8002232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002236:	fbb3 f3f1 	udiv	r3, r3, r1
 800223a:	fbb2 f3f3 	udiv	r3, r2, r3
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f967 	bl	8002512 <HAL_SYSTICK_Config>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e00e      	b.n	800226c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b0f      	cmp	r3, #15
 8002252:	d80a      	bhi.n	800226a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002254:	2200      	movs	r2, #0
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	f04f 30ff 	mov.w	r0, #4294967295
 800225c:	f000 f92f 	bl	80024be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002260:	4a06      	ldr	r2, [pc, #24]	; (800227c <HAL_InitTick+0x5c>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	e000      	b.n	800226c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
}
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20000000 	.word	0x20000000
 8002278:	20000008 	.word	0x20000008
 800227c:	20000004 	.word	0x20000004

08002280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_IncTick+0x20>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	461a      	mov	r2, r3
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <HAL_IncTick+0x24>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4413      	add	r3, r2
 8002290:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <HAL_IncTick+0x24>)
 8002292:	6013      	str	r3, [r2, #0]
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20000008 	.word	0x20000008
 80022a4:	20000b34 	.word	0x20000b34

080022a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return uwTick;
 80022ac:	4b03      	ldr	r3, [pc, #12]	; (80022bc <HAL_GetTick+0x14>)
 80022ae:	681b      	ldr	r3, [r3, #0]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20000b34 	.word	0x20000b34

080022c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022c8:	f7ff ffee 	bl	80022a8 <HAL_GetTick>
 80022cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d8:	d005      	beq.n	80022e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022da:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <HAL_Delay+0x44>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4413      	add	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022e6:	bf00      	nop
 80022e8:	f7ff ffde 	bl	80022a8 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d8f7      	bhi.n	80022e8 <HAL_Delay+0x28>
  {
  }
}
 80022f8:	bf00      	nop
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000008 	.word	0x20000008

08002308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <__NVIC_SetPriorityGrouping+0x44>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002324:	4013      	ands	r3, r2
 8002326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800233a:	4a04      	ldr	r2, [pc, #16]	; (800234c <__NVIC_SetPriorityGrouping+0x44>)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	60d3      	str	r3, [r2, #12]
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002354:	4b04      	ldr	r3, [pc, #16]	; (8002368 <__NVIC_GetPriorityGrouping+0x18>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	0a1b      	lsrs	r3, r3, #8
 800235a:	f003 0307 	and.w	r3, r3, #7
}
 800235e:	4618      	mov	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	2b00      	cmp	r3, #0
 800237c:	db0b      	blt.n	8002396 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	f003 021f 	and.w	r2, r3, #31
 8002384:	4907      	ldr	r1, [pc, #28]	; (80023a4 <__NVIC_EnableIRQ+0x38>)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	2001      	movs	r0, #1
 800238e:	fa00 f202 	lsl.w	r2, r0, r2
 8002392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	e000e100 	.word	0xe000e100

080023a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	db0a      	blt.n	80023d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	490c      	ldr	r1, [pc, #48]	; (80023f4 <__NVIC_SetPriority+0x4c>)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	0112      	lsls	r2, r2, #4
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	440b      	add	r3, r1
 80023cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d0:	e00a      	b.n	80023e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4908      	ldr	r1, [pc, #32]	; (80023f8 <__NVIC_SetPriority+0x50>)
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	3b04      	subs	r3, #4
 80023e0:	0112      	lsls	r2, r2, #4
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	440b      	add	r3, r1
 80023e6:	761a      	strb	r2, [r3, #24]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000e100 	.word	0xe000e100
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f1c3 0307 	rsb	r3, r3, #7
 8002416:	2b04      	cmp	r3, #4
 8002418:	bf28      	it	cs
 800241a:	2304      	movcs	r3, #4
 800241c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3304      	adds	r3, #4
 8002422:	2b06      	cmp	r3, #6
 8002424:	d902      	bls.n	800242c <NVIC_EncodePriority+0x30>
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3b03      	subs	r3, #3
 800242a:	e000      	b.n	800242e <NVIC_EncodePriority+0x32>
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002430:	f04f 32ff 	mov.w	r2, #4294967295
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43da      	mvns	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	401a      	ands	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002444:	f04f 31ff 	mov.w	r1, #4294967295
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	fa01 f303 	lsl.w	r3, r1, r3
 800244e:	43d9      	mvns	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	4313      	orrs	r3, r2
         );
}
 8002456:	4618      	mov	r0, r3
 8002458:	3724      	adds	r7, #36	; 0x24
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3b01      	subs	r3, #1
 8002470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002474:	d301      	bcc.n	800247a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002476:	2301      	movs	r3, #1
 8002478:	e00f      	b.n	800249a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800247a:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <SysTick_Config+0x40>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002482:	210f      	movs	r1, #15
 8002484:	f04f 30ff 	mov.w	r0, #4294967295
 8002488:	f7ff ff8e 	bl	80023a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <SysTick_Config+0x40>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002492:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <SysTick_Config+0x40>)
 8002494:	2207      	movs	r2, #7
 8002496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	e000e010 	.word	0xe000e010

080024a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ff29 	bl	8002308 <__NVIC_SetPriorityGrouping>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	4603      	mov	r3, r0
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d0:	f7ff ff3e 	bl	8002350 <__NVIC_GetPriorityGrouping>
 80024d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	6978      	ldr	r0, [r7, #20]
 80024dc:	f7ff ff8e 	bl	80023fc <NVIC_EncodePriority>
 80024e0:	4602      	mov	r2, r0
 80024e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff5d 	bl	80023a8 <__NVIC_SetPriority>
}
 80024ee:	bf00      	nop
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff31 	bl	800236c <__NVIC_EnableIRQ>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ffa2 	bl	8002464 <SysTick_Config>
 8002520:	4603      	mov	r3, r0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002536:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002538:	f7ff feb6 	bl	80022a8 <HAL_GetTick>
 800253c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d008      	beq.n	800255c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2280      	movs	r2, #128	; 0x80
 800254e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e052      	b.n	8002602 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0216 	bic.w	r2, r2, #22
 800256a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695a      	ldr	r2, [r3, #20]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800257a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	2b00      	cmp	r3, #0
 8002582:	d103      	bne.n	800258c <HAL_DMA_Abort+0x62>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002588:	2b00      	cmp	r3, #0
 800258a:	d007      	beq.n	800259c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0208 	bic.w	r2, r2, #8
 800259a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ac:	e013      	b.n	80025d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ae:	f7ff fe7b 	bl	80022a8 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b05      	cmp	r3, #5
 80025ba:	d90c      	bls.n	80025d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2220      	movs	r2, #32
 80025c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2203      	movs	r2, #3
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e015      	b.n	8002602 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1e4      	bne.n	80025ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e8:	223f      	movs	r2, #63	; 0x3f
 80025ea:	409a      	lsls	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d004      	beq.n	8002628 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2280      	movs	r2, #128	; 0x80
 8002622:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e00c      	b.n	8002642 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2205      	movs	r2, #5
 800262c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0201 	bic.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002662:	2300      	movs	r3, #0
 8002664:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	e16b      	b.n	8002944 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800266c:	2201      	movs	r2, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	429a      	cmp	r2, r3
 8002686:	f040 815a 	bne.w	800293e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b01      	cmp	r3, #1
 8002694:	d005      	beq.n	80026a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d130      	bne.n	8002704 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	2203      	movs	r2, #3
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026d8:	2201      	movs	r2, #1
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	f003 0201 	and.w	r2, r3, #1
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	2b03      	cmp	r3, #3
 800270e:	d017      	beq.n	8002740 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	2203      	movs	r2, #3
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d123      	bne.n	8002794 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	08da      	lsrs	r2, r3, #3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3208      	adds	r2, #8
 8002754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	220f      	movs	r2, #15
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	08da      	lsrs	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3208      	adds	r2, #8
 800278e:	69b9      	ldr	r1, [r7, #24]
 8002790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	2203      	movs	r2, #3
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 0203 	and.w	r2, r3, #3
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 80b4 	beq.w	800293e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	4b60      	ldr	r3, [pc, #384]	; (800295c <HAL_GPIO_Init+0x30c>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	4a5f      	ldr	r2, [pc, #380]	; (800295c <HAL_GPIO_Init+0x30c>)
 80027e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e4:	6453      	str	r3, [r2, #68]	; 0x44
 80027e6:	4b5d      	ldr	r3, [pc, #372]	; (800295c <HAL_GPIO_Init+0x30c>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027f2:	4a5b      	ldr	r2, [pc, #364]	; (8002960 <HAL_GPIO_Init+0x310>)
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	089b      	lsrs	r3, r3, #2
 80027f8:	3302      	adds	r3, #2
 80027fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	220f      	movs	r2, #15
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a52      	ldr	r2, [pc, #328]	; (8002964 <HAL_GPIO_Init+0x314>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d02b      	beq.n	8002876 <HAL_GPIO_Init+0x226>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a51      	ldr	r2, [pc, #324]	; (8002968 <HAL_GPIO_Init+0x318>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d025      	beq.n	8002872 <HAL_GPIO_Init+0x222>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a50      	ldr	r2, [pc, #320]	; (800296c <HAL_GPIO_Init+0x31c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d01f      	beq.n	800286e <HAL_GPIO_Init+0x21e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a4f      	ldr	r2, [pc, #316]	; (8002970 <HAL_GPIO_Init+0x320>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d019      	beq.n	800286a <HAL_GPIO_Init+0x21a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a4e      	ldr	r2, [pc, #312]	; (8002974 <HAL_GPIO_Init+0x324>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d013      	beq.n	8002866 <HAL_GPIO_Init+0x216>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a4d      	ldr	r2, [pc, #308]	; (8002978 <HAL_GPIO_Init+0x328>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00d      	beq.n	8002862 <HAL_GPIO_Init+0x212>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a4c      	ldr	r2, [pc, #304]	; (800297c <HAL_GPIO_Init+0x32c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d007      	beq.n	800285e <HAL_GPIO_Init+0x20e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4b      	ldr	r2, [pc, #300]	; (8002980 <HAL_GPIO_Init+0x330>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d101      	bne.n	800285a <HAL_GPIO_Init+0x20a>
 8002856:	2307      	movs	r3, #7
 8002858:	e00e      	b.n	8002878 <HAL_GPIO_Init+0x228>
 800285a:	2308      	movs	r3, #8
 800285c:	e00c      	b.n	8002878 <HAL_GPIO_Init+0x228>
 800285e:	2306      	movs	r3, #6
 8002860:	e00a      	b.n	8002878 <HAL_GPIO_Init+0x228>
 8002862:	2305      	movs	r3, #5
 8002864:	e008      	b.n	8002878 <HAL_GPIO_Init+0x228>
 8002866:	2304      	movs	r3, #4
 8002868:	e006      	b.n	8002878 <HAL_GPIO_Init+0x228>
 800286a:	2303      	movs	r3, #3
 800286c:	e004      	b.n	8002878 <HAL_GPIO_Init+0x228>
 800286e:	2302      	movs	r3, #2
 8002870:	e002      	b.n	8002878 <HAL_GPIO_Init+0x228>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <HAL_GPIO_Init+0x228>
 8002876:	2300      	movs	r3, #0
 8002878:	69fa      	ldr	r2, [r7, #28]
 800287a:	f002 0203 	and.w	r2, r2, #3
 800287e:	0092      	lsls	r2, r2, #2
 8002880:	4093      	lsls	r3, r2
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002888:	4935      	ldr	r1, [pc, #212]	; (8002960 <HAL_GPIO_Init+0x310>)
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	089b      	lsrs	r3, r3, #2
 800288e:	3302      	adds	r3, #2
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002896:	4b3b      	ldr	r3, [pc, #236]	; (8002984 <HAL_GPIO_Init+0x334>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	43db      	mvns	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028ba:	4a32      	ldr	r2, [pc, #200]	; (8002984 <HAL_GPIO_Init+0x334>)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028c0:	4b30      	ldr	r3, [pc, #192]	; (8002984 <HAL_GPIO_Init+0x334>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028e4:	4a27      	ldr	r2, [pc, #156]	; (8002984 <HAL_GPIO_Init+0x334>)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ea:	4b26      	ldr	r3, [pc, #152]	; (8002984 <HAL_GPIO_Init+0x334>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800290e:	4a1d      	ldr	r2, [pc, #116]	; (8002984 <HAL_GPIO_Init+0x334>)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002914:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <HAL_GPIO_Init+0x334>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002938:	4a12      	ldr	r2, [pc, #72]	; (8002984 <HAL_GPIO_Init+0x334>)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3301      	adds	r3, #1
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	2b0f      	cmp	r3, #15
 8002948:	f67f ae90 	bls.w	800266c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	3724      	adds	r7, #36	; 0x24
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40023800 	.word	0x40023800
 8002960:	40013800 	.word	0x40013800
 8002964:	40020000 	.word	0x40020000
 8002968:	40020400 	.word	0x40020400
 800296c:	40020800 	.word	0x40020800
 8002970:	40020c00 	.word	0x40020c00
 8002974:	40021000 	.word	0x40021000
 8002978:	40021400 	.word	0x40021400
 800297c:	40021800 	.word	0x40021800
 8002980:	40021c00 	.word	0x40021c00
 8002984:	40013c00 	.word	0x40013c00

08002988 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	887b      	ldrh	r3, [r7, #2]
 800299a:	4013      	ands	r3, r2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029a0:	2301      	movs	r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]
 80029a4:	e001      	b.n	80029aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029a6:	2300      	movs	r3, #0
 80029a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	807b      	strh	r3, [r7, #2]
 80029c4:	4613      	mov	r3, r2
 80029c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029c8:	787b      	ldrb	r3, [r7, #1]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ce:	887a      	ldrh	r2, [r7, #2]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029d4:	e003      	b.n	80029de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029d6:	887b      	ldrh	r3, [r7, #2]
 80029d8:	041a      	lsls	r2, r3, #16
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	619a      	str	r2, [r3, #24]
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029f6:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d006      	beq.n	8002a10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a02:	4a05      	ldr	r2, [pc, #20]	; (8002a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a08:	88fb      	ldrh	r3, [r7, #6]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe fd4e 	bl	80014ac <HAL_GPIO_EXTI_Callback>
  }
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40013c00 	.word	0x40013c00

08002a1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e264      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d075      	beq.n	8002b26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a3a:	4ba3      	ldr	r3, [pc, #652]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d00c      	beq.n	8002a60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a46:	4ba0      	ldr	r3, [pc, #640]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d112      	bne.n	8002a78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a52:	4b9d      	ldr	r3, [pc, #628]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a5e:	d10b      	bne.n	8002a78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a60:	4b99      	ldr	r3, [pc, #612]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d05b      	beq.n	8002b24 <HAL_RCC_OscConfig+0x108>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d157      	bne.n	8002b24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e23f      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a80:	d106      	bne.n	8002a90 <HAL_RCC_OscConfig+0x74>
 8002a82:	4b91      	ldr	r3, [pc, #580]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a90      	ldr	r2, [pc, #576]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	e01d      	b.n	8002acc <HAL_RCC_OscConfig+0xb0>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x98>
 8002a9a:	4b8b      	ldr	r3, [pc, #556]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a8a      	ldr	r2, [pc, #552]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	4b88      	ldr	r3, [pc, #544]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a87      	ldr	r2, [pc, #540]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	e00b      	b.n	8002acc <HAL_RCC_OscConfig+0xb0>
 8002ab4:	4b84      	ldr	r3, [pc, #528]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a83      	ldr	r2, [pc, #524]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	4b81      	ldr	r3, [pc, #516]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a80      	ldr	r2, [pc, #512]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d013      	beq.n	8002afc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad4:	f7ff fbe8 	bl	80022a8 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002adc:	f7ff fbe4 	bl	80022a8 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	; 0x64
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e204      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	4b76      	ldr	r3, [pc, #472]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0xc0>
 8002afa:	e014      	b.n	8002b26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afc:	f7ff fbd4 	bl	80022a8 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b04:	f7ff fbd0 	bl	80022a8 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	; 0x64
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e1f0      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b16:	4b6c      	ldr	r3, [pc, #432]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0xe8>
 8002b22:	e000      	b.n	8002b26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d063      	beq.n	8002bfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b32:	4b65      	ldr	r3, [pc, #404]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00b      	beq.n	8002b56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b3e:	4b62      	ldr	r3, [pc, #392]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d11c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4a:	4b5f      	ldr	r3, [pc, #380]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d116      	bne.n	8002b84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b56:	4b5c      	ldr	r3, [pc, #368]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <HAL_RCC_OscConfig+0x152>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d001      	beq.n	8002b6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e1c4      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6e:	4b56      	ldr	r3, [pc, #344]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4952      	ldr	r1, [pc, #328]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b82:	e03a      	b.n	8002bfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d020      	beq.n	8002bce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b8c:	4b4f      	ldr	r3, [pc, #316]	; (8002ccc <HAL_RCC_OscConfig+0x2b0>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b92:	f7ff fb89 	bl	80022a8 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b9a:	f7ff fb85 	bl	80022a8 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e1a5      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bac:	4b46      	ldr	r3, [pc, #280]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb8:	4b43      	ldr	r3, [pc, #268]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4940      	ldr	r1, [pc, #256]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	600b      	str	r3, [r1, #0]
 8002bcc:	e015      	b.n	8002bfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bce:	4b3f      	ldr	r3, [pc, #252]	; (8002ccc <HAL_RCC_OscConfig+0x2b0>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7ff fb68 	bl	80022a8 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bdc:	f7ff fb64 	bl	80022a8 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e184      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bee:	4b36      	ldr	r3, [pc, #216]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d030      	beq.n	8002c68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d016      	beq.n	8002c3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c0e:	4b30      	ldr	r3, [pc, #192]	; (8002cd0 <HAL_RCC_OscConfig+0x2b4>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c14:	f7ff fb48 	bl	80022a8 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c1c:	f7ff fb44 	bl	80022a8 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e164      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2e:	4b26      	ldr	r3, [pc, #152]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0x200>
 8002c3a:	e015      	b.n	8002c68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c3c:	4b24      	ldr	r3, [pc, #144]	; (8002cd0 <HAL_RCC_OscConfig+0x2b4>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c42:	f7ff fb31 	bl	80022a8 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c4a:	f7ff fb2d 	bl	80022a8 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e14d      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c5c:	4b1a      	ldr	r3, [pc, #104]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1f0      	bne.n	8002c4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80a0 	beq.w	8002db6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c76:	2300      	movs	r3, #0
 8002c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c7a:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10f      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c94:	6413      	str	r3, [r2, #64]	; 0x40
 8002c96:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca6:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_OscConfig+0x2b8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d121      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <HAL_RCC_OscConfig+0x2b8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a07      	ldr	r2, [pc, #28]	; (8002cd4 <HAL_RCC_OscConfig+0x2b8>)
 8002cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cbe:	f7ff faf3 	bl	80022a8 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc4:	e011      	b.n	8002cea <HAL_RCC_OscConfig+0x2ce>
 8002cc6:	bf00      	nop
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	42470000 	.word	0x42470000
 8002cd0:	42470e80 	.word	0x42470e80
 8002cd4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd8:	f7ff fae6 	bl	80022a8 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e106      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cea:	4b85      	ldr	r3, [pc, #532]	; (8002f00 <HAL_RCC_OscConfig+0x4e4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d106      	bne.n	8002d0c <HAL_RCC_OscConfig+0x2f0>
 8002cfe:	4b81      	ldr	r3, [pc, #516]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d02:	4a80      	ldr	r2, [pc, #512]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0a:	e01c      	b.n	8002d46 <HAL_RCC_OscConfig+0x32a>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b05      	cmp	r3, #5
 8002d12:	d10c      	bne.n	8002d2e <HAL_RCC_OscConfig+0x312>
 8002d14:	4b7b      	ldr	r3, [pc, #492]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d18:	4a7a      	ldr	r2, [pc, #488]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002d1a:	f043 0304 	orr.w	r3, r3, #4
 8002d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d20:	4b78      	ldr	r3, [pc, #480]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	4a77      	ldr	r2, [pc, #476]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2c:	e00b      	b.n	8002d46 <HAL_RCC_OscConfig+0x32a>
 8002d2e:	4b75      	ldr	r3, [pc, #468]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	4a74      	ldr	r2, [pc, #464]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3a:	4b72      	ldr	r3, [pc, #456]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3e:	4a71      	ldr	r2, [pc, #452]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002d40:	f023 0304 	bic.w	r3, r3, #4
 8002d44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d015      	beq.n	8002d7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7ff faab 	bl	80022a8 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7ff faa7 	bl	80022a8 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e0c5      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6c:	4b65      	ldr	r3, [pc, #404]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0ee      	beq.n	8002d56 <HAL_RCC_OscConfig+0x33a>
 8002d78:	e014      	b.n	8002da4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7a:	f7ff fa95 	bl	80022a8 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d82:	f7ff fa91 	bl	80022a8 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e0af      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d98:	4b5a      	ldr	r3, [pc, #360]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ee      	bne.n	8002d82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d105      	bne.n	8002db6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002daa:	4b56      	ldr	r3, [pc, #344]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	4a55      	ldr	r2, [pc, #340]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 809b 	beq.w	8002ef6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dc0:	4b50      	ldr	r3, [pc, #320]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 030c 	and.w	r3, r3, #12
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d05c      	beq.n	8002e86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d141      	bne.n	8002e58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd4:	4b4c      	ldr	r3, [pc, #304]	; (8002f08 <HAL_RCC_OscConfig+0x4ec>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dda:	f7ff fa65 	bl	80022a8 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de2:	f7ff fa61 	bl	80022a8 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e081      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df4:	4b43      	ldr	r3, [pc, #268]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f0      	bne.n	8002de2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69da      	ldr	r2, [r3, #28]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	019b      	lsls	r3, r3, #6
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e16:	085b      	lsrs	r3, r3, #1
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	041b      	lsls	r3, r3, #16
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	061b      	lsls	r3, r3, #24
 8002e24:	4937      	ldr	r1, [pc, #220]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e2a:	4b37      	ldr	r3, [pc, #220]	; (8002f08 <HAL_RCC_OscConfig+0x4ec>)
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7ff fa3a 	bl	80022a8 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e38:	f7ff fa36 	bl	80022a8 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e056      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e4a:	4b2e      	ldr	r3, [pc, #184]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x41c>
 8002e56:	e04e      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e58:	4b2b      	ldr	r3, [pc, #172]	; (8002f08 <HAL_RCC_OscConfig+0x4ec>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7ff fa23 	bl	80022a8 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e66:	f7ff fa1f 	bl	80022a8 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e03f      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e78:	4b22      	ldr	r3, [pc, #136]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1f0      	bne.n	8002e66 <HAL_RCC_OscConfig+0x44a>
 8002e84:	e037      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e032      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e92:	4b1c      	ldr	r3, [pc, #112]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d028      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d121      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d11a      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ec8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d111      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	085b      	lsrs	r3, r3, #1
 8002eda:	3b01      	subs	r3, #1
 8002edc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d001      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40007000 	.word	0x40007000
 8002f04:	40023800 	.word	0x40023800
 8002f08:	42470060 	.word	0x42470060

08002f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0cc      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f20:	4b68      	ldr	r3, [pc, #416]	; (80030c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d90c      	bls.n	8002f48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2e:	4b65      	ldr	r3, [pc, #404]	; (80030c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f36:	4b63      	ldr	r3, [pc, #396]	; (80030c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d001      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0b8      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d020      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f60:	4b59      	ldr	r3, [pc, #356]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	4a58      	ldr	r2, [pc, #352]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f78:	4b53      	ldr	r3, [pc, #332]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4a52      	ldr	r2, [pc, #328]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f84:	4b50      	ldr	r3, [pc, #320]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	494d      	ldr	r1, [pc, #308]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d044      	beq.n	800302c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d107      	bne.n	8002fba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002faa:	4b47      	ldr	r3, [pc, #284]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d119      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e07f      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d003      	beq.n	8002fca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d107      	bne.n	8002fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fca:	4b3f      	ldr	r3, [pc, #252]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e06f      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fda:	4b3b      	ldr	r3, [pc, #236]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e067      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fea:	4b37      	ldr	r3, [pc, #220]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f023 0203 	bic.w	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4934      	ldr	r1, [pc, #208]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ffc:	f7ff f954 	bl	80022a8 <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	e00a      	b.n	800301a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003004:	f7ff f950 	bl	80022a8 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e04f      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	4b2b      	ldr	r3, [pc, #172]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 020c 	and.w	r2, r3, #12
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	429a      	cmp	r2, r3
 800302a:	d1eb      	bne.n	8003004 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800302c:	4b25      	ldr	r3, [pc, #148]	; (80030c4 <HAL_RCC_ClockConfig+0x1b8>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d20c      	bcs.n	8003054 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303a:	4b22      	ldr	r3, [pc, #136]	; (80030c4 <HAL_RCC_ClockConfig+0x1b8>)
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003042:	4b20      	ldr	r3, [pc, #128]	; (80030c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d001      	beq.n	8003054 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e032      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003060:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	4916      	ldr	r1, [pc, #88]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	4313      	orrs	r3, r2
 8003070:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d009      	beq.n	8003092 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800307e:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	490e      	ldr	r1, [pc, #56]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	4313      	orrs	r3, r2
 8003090:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003092:	f000 f821 	bl	80030d8 <HAL_RCC_GetSysClockFreq>
 8003096:	4602      	mov	r2, r0
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	490a      	ldr	r1, [pc, #40]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 80030a4:	5ccb      	ldrb	r3, [r1, r3]
 80030a6:	fa22 f303 	lsr.w	r3, r2, r3
 80030aa:	4a09      	ldr	r2, [pc, #36]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 80030ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030ae:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff f8b4 	bl	8002220 <HAL_InitTick>

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40023c00 	.word	0x40023c00
 80030c8:	40023800 	.word	0x40023800
 80030cc:	08005fe4 	.word	0x08005fe4
 80030d0:	20000000 	.word	0x20000000
 80030d4:	20000004 	.word	0x20000004

080030d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	607b      	str	r3, [r7, #4]
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	2300      	movs	r3, #0
 80030ea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030f0:	4b67      	ldr	r3, [pc, #412]	; (8003290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 030c 	and.w	r3, r3, #12
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d00d      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0x40>
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	f200 80bd 	bhi.w	800327c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x34>
 8003106:	2b04      	cmp	r3, #4
 8003108:	d003      	beq.n	8003112 <HAL_RCC_GetSysClockFreq+0x3a>
 800310a:	e0b7      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800310c:	4b61      	ldr	r3, [pc, #388]	; (8003294 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800310e:	60bb      	str	r3, [r7, #8]
       break;
 8003110:	e0b7      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003112:	4b61      	ldr	r3, [pc, #388]	; (8003298 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003114:	60bb      	str	r3, [r7, #8]
      break;
 8003116:	e0b4      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003118:	4b5d      	ldr	r3, [pc, #372]	; (8003290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003120:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003122:	4b5b      	ldr	r3, [pc, #364]	; (8003290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d04d      	beq.n	80031ca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800312e:	4b58      	ldr	r3, [pc, #352]	; (8003290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	099b      	lsrs	r3, r3, #6
 8003134:	461a      	mov	r2, r3
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800313e:	f04f 0100 	mov.w	r1, #0
 8003142:	ea02 0800 	and.w	r8, r2, r0
 8003146:	ea03 0901 	and.w	r9, r3, r1
 800314a:	4640      	mov	r0, r8
 800314c:	4649      	mov	r1, r9
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	014b      	lsls	r3, r1, #5
 8003158:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800315c:	0142      	lsls	r2, r0, #5
 800315e:	4610      	mov	r0, r2
 8003160:	4619      	mov	r1, r3
 8003162:	ebb0 0008 	subs.w	r0, r0, r8
 8003166:	eb61 0109 	sbc.w	r1, r1, r9
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	018b      	lsls	r3, r1, #6
 8003174:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003178:	0182      	lsls	r2, r0, #6
 800317a:	1a12      	subs	r2, r2, r0
 800317c:	eb63 0301 	sbc.w	r3, r3, r1
 8003180:	f04f 0000 	mov.w	r0, #0
 8003184:	f04f 0100 	mov.w	r1, #0
 8003188:	00d9      	lsls	r1, r3, #3
 800318a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800318e:	00d0      	lsls	r0, r2, #3
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	eb12 0208 	adds.w	r2, r2, r8
 8003198:	eb43 0309 	adc.w	r3, r3, r9
 800319c:	f04f 0000 	mov.w	r0, #0
 80031a0:	f04f 0100 	mov.w	r1, #0
 80031a4:	0259      	lsls	r1, r3, #9
 80031a6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80031aa:	0250      	lsls	r0, r2, #9
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4610      	mov	r0, r2
 80031b2:	4619      	mov	r1, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	461a      	mov	r2, r3
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	f7fd f860 	bl	8000280 <__aeabi_uldivmod>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4613      	mov	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	e04a      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ca:	4b31      	ldr	r3, [pc, #196]	; (8003290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	099b      	lsrs	r3, r3, #6
 80031d0:	461a      	mov	r2, r3
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031da:	f04f 0100 	mov.w	r1, #0
 80031de:	ea02 0400 	and.w	r4, r2, r0
 80031e2:	ea03 0501 	and.w	r5, r3, r1
 80031e6:	4620      	mov	r0, r4
 80031e8:	4629      	mov	r1, r5
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	014b      	lsls	r3, r1, #5
 80031f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031f8:	0142      	lsls	r2, r0, #5
 80031fa:	4610      	mov	r0, r2
 80031fc:	4619      	mov	r1, r3
 80031fe:	1b00      	subs	r0, r0, r4
 8003200:	eb61 0105 	sbc.w	r1, r1, r5
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	018b      	lsls	r3, r1, #6
 800320e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003212:	0182      	lsls	r2, r0, #6
 8003214:	1a12      	subs	r2, r2, r0
 8003216:	eb63 0301 	sbc.w	r3, r3, r1
 800321a:	f04f 0000 	mov.w	r0, #0
 800321e:	f04f 0100 	mov.w	r1, #0
 8003222:	00d9      	lsls	r1, r3, #3
 8003224:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003228:	00d0      	lsls	r0, r2, #3
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	1912      	adds	r2, r2, r4
 8003230:	eb45 0303 	adc.w	r3, r5, r3
 8003234:	f04f 0000 	mov.w	r0, #0
 8003238:	f04f 0100 	mov.w	r1, #0
 800323c:	0299      	lsls	r1, r3, #10
 800323e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003242:	0290      	lsls	r0, r2, #10
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4610      	mov	r0, r2
 800324a:	4619      	mov	r1, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	461a      	mov	r2, r3
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	f7fd f814 	bl	8000280 <__aeabi_uldivmod>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4613      	mov	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003260:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	0c1b      	lsrs	r3, r3, #16
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	3301      	adds	r3, #1
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	fbb2 f3f3 	udiv	r3, r2, r3
 8003278:	60bb      	str	r3, [r7, #8]
      break;
 800327a:	e002      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800327e:	60bb      	str	r3, [r7, #8]
      break;
 8003280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003282:	68bb      	ldr	r3, [r7, #8]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800
 8003294:	00f42400 	.word	0x00f42400
 8003298:	007a1200 	.word	0x007a1200

0800329c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a0:	4b03      	ldr	r3, [pc, #12]	; (80032b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032a2:	681b      	ldr	r3, [r3, #0]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	20000000 	.word	0x20000000

080032b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032b8:	f7ff fff0 	bl	800329c <HAL_RCC_GetHCLKFreq>
 80032bc:	4602      	mov	r2, r0
 80032be:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	0a9b      	lsrs	r3, r3, #10
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	4903      	ldr	r1, [pc, #12]	; (80032d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ca:	5ccb      	ldrb	r3, [r1, r3]
 80032cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40023800 	.word	0x40023800
 80032d8:	08005ff4 	.word	0x08005ff4

080032dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032e0:	f7ff ffdc 	bl	800329c <HAL_RCC_GetHCLKFreq>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b05      	ldr	r3, [pc, #20]	; (80032fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	0b5b      	lsrs	r3, r3, #13
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	4903      	ldr	r1, [pc, #12]	; (8003300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032f2:	5ccb      	ldrb	r3, [r1, r3]
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40023800 	.word	0x40023800
 8003300:	08005ff4 	.word	0x08005ff4

08003304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e041      	b.n	800339a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fe fd46 	bl	8001dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3304      	adds	r3, #4
 8003340:	4619      	mov	r1, r3
 8003342:	4610      	mov	r0, r2
 8003344:	f000 fad8 	bl	80038f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e041      	b.n	8003438 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d106      	bne.n	80033ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f839 	bl	8003440 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2202      	movs	r2, #2
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3304      	adds	r3, #4
 80033de:	4619      	mov	r1, r3
 80033e0:	4610      	mov	r0, r2
 80033e2:	f000 fa89 	bl	80038f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d109      	bne.n	8003478 <HAL_TIM_PWM_Start+0x24>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b01      	cmp	r3, #1
 800346e:	bf14      	ite	ne
 8003470:	2301      	movne	r3, #1
 8003472:	2300      	moveq	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	e022      	b.n	80034be <HAL_TIM_PWM_Start+0x6a>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	2b04      	cmp	r3, #4
 800347c:	d109      	bne.n	8003492 <HAL_TIM_PWM_Start+0x3e>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b01      	cmp	r3, #1
 8003488:	bf14      	ite	ne
 800348a:	2301      	movne	r3, #1
 800348c:	2300      	moveq	r3, #0
 800348e:	b2db      	uxtb	r3, r3
 8003490:	e015      	b.n	80034be <HAL_TIM_PWM_Start+0x6a>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b08      	cmp	r3, #8
 8003496:	d109      	bne.n	80034ac <HAL_TIM_PWM_Start+0x58>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	bf14      	ite	ne
 80034a4:	2301      	movne	r3, #1
 80034a6:	2300      	moveq	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e008      	b.n	80034be <HAL_TIM_PWM_Start+0x6a>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	bf14      	ite	ne
 80034b8:	2301      	movne	r3, #1
 80034ba:	2300      	moveq	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e07c      	b.n	80035c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d104      	bne.n	80034d6 <HAL_TIM_PWM_Start+0x82>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034d4:	e013      	b.n	80034fe <HAL_TIM_PWM_Start+0xaa>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d104      	bne.n	80034e6 <HAL_TIM_PWM_Start+0x92>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034e4:	e00b      	b.n	80034fe <HAL_TIM_PWM_Start+0xaa>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d104      	bne.n	80034f6 <HAL_TIM_PWM_Start+0xa2>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034f4:	e003      	b.n	80034fe <HAL_TIM_PWM_Start+0xaa>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2202      	movs	r2, #2
 80034fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2201      	movs	r2, #1
 8003504:	6839      	ldr	r1, [r7, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fce0 	bl	8003ecc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a2d      	ldr	r2, [pc, #180]	; (80035c8 <HAL_TIM_PWM_Start+0x174>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d004      	beq.n	8003520 <HAL_TIM_PWM_Start+0xcc>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a2c      	ldr	r2, [pc, #176]	; (80035cc <HAL_TIM_PWM_Start+0x178>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d101      	bne.n	8003524 <HAL_TIM_PWM_Start+0xd0>
 8003520:	2301      	movs	r3, #1
 8003522:	e000      	b.n	8003526 <HAL_TIM_PWM_Start+0xd2>
 8003524:	2300      	movs	r3, #0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d007      	beq.n	800353a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003538:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a22      	ldr	r2, [pc, #136]	; (80035c8 <HAL_TIM_PWM_Start+0x174>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d022      	beq.n	800358a <HAL_TIM_PWM_Start+0x136>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354c:	d01d      	beq.n	800358a <HAL_TIM_PWM_Start+0x136>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1f      	ldr	r2, [pc, #124]	; (80035d0 <HAL_TIM_PWM_Start+0x17c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d018      	beq.n	800358a <HAL_TIM_PWM_Start+0x136>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1d      	ldr	r2, [pc, #116]	; (80035d4 <HAL_TIM_PWM_Start+0x180>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d013      	beq.n	800358a <HAL_TIM_PWM_Start+0x136>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1c      	ldr	r2, [pc, #112]	; (80035d8 <HAL_TIM_PWM_Start+0x184>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00e      	beq.n	800358a <HAL_TIM_PWM_Start+0x136>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a16      	ldr	r2, [pc, #88]	; (80035cc <HAL_TIM_PWM_Start+0x178>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d009      	beq.n	800358a <HAL_TIM_PWM_Start+0x136>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a18      	ldr	r2, [pc, #96]	; (80035dc <HAL_TIM_PWM_Start+0x188>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d004      	beq.n	800358a <HAL_TIM_PWM_Start+0x136>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a16      	ldr	r2, [pc, #88]	; (80035e0 <HAL_TIM_PWM_Start+0x18c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d111      	bne.n	80035ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2b06      	cmp	r3, #6
 800359a:	d010      	beq.n	80035be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ac:	e007      	b.n	80035be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f042 0201 	orr.w	r2, r2, #1
 80035bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40010000 	.word	0x40010000
 80035cc:	40010400 	.word	0x40010400
 80035d0:	40000400 	.word	0x40000400
 80035d4:	40000800 	.word	0x40000800
 80035d8:	40000c00 	.word	0x40000c00
 80035dc:	40014000 	.word	0x40014000
 80035e0:	40001800 	.word	0x40001800

080035e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035fe:	2302      	movs	r3, #2
 8003600:	e0ae      	b.n	8003760 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b0c      	cmp	r3, #12
 800360e:	f200 809f 	bhi.w	8003750 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003612:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003618:	0800364d 	.word	0x0800364d
 800361c:	08003751 	.word	0x08003751
 8003620:	08003751 	.word	0x08003751
 8003624:	08003751 	.word	0x08003751
 8003628:	0800368d 	.word	0x0800368d
 800362c:	08003751 	.word	0x08003751
 8003630:	08003751 	.word	0x08003751
 8003634:	08003751 	.word	0x08003751
 8003638:	080036cf 	.word	0x080036cf
 800363c:	08003751 	.word	0x08003751
 8003640:	08003751 	.word	0x08003751
 8003644:	08003751 	.word	0x08003751
 8003648:	0800370f 	.word	0x0800370f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	4618      	mov	r0, r3
 8003654:	f000 f9f0 	bl	8003a38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0208 	orr.w	r2, r2, #8
 8003666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699a      	ldr	r2, [r3, #24]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0204 	bic.w	r2, r2, #4
 8003676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6999      	ldr	r1, [r3, #24]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	619a      	str	r2, [r3, #24]
      break;
 800368a:	e064      	b.n	8003756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fa40 	bl	8003b18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699a      	ldr	r2, [r3, #24]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6999      	ldr	r1, [r3, #24]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	021a      	lsls	r2, r3, #8
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	619a      	str	r2, [r3, #24]
      break;
 80036cc:	e043      	b.n	8003756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fa95 	bl	8003c04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0208 	orr.w	r2, r2, #8
 80036e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69da      	ldr	r2, [r3, #28]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0204 	bic.w	r2, r2, #4
 80036f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69d9      	ldr	r1, [r3, #28]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	61da      	str	r2, [r3, #28]
      break;
 800370c:	e023      	b.n	8003756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	4618      	mov	r0, r3
 8003716:	f000 fae9 	bl	8003cec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69da      	ldr	r2, [r3, #28]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69da      	ldr	r2, [r3, #28]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69d9      	ldr	r1, [r3, #28]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	021a      	lsls	r2, r3, #8
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	61da      	str	r2, [r3, #28]
      break;
 800374e:	e002      	b.n	8003756 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	75fb      	strb	r3, [r7, #23]
      break;
 8003754:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800375e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_TIM_ConfigClockSource+0x1c>
 8003780:	2302      	movs	r3, #2
 8003782:	e0b4      	b.n	80038ee <HAL_TIM_ConfigClockSource+0x186>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037bc:	d03e      	beq.n	800383c <HAL_TIM_ConfigClockSource+0xd4>
 80037be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c2:	f200 8087 	bhi.w	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 80037c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ca:	f000 8086 	beq.w	80038da <HAL_TIM_ConfigClockSource+0x172>
 80037ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d2:	d87f      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 80037d4:	2b70      	cmp	r3, #112	; 0x70
 80037d6:	d01a      	beq.n	800380e <HAL_TIM_ConfigClockSource+0xa6>
 80037d8:	2b70      	cmp	r3, #112	; 0x70
 80037da:	d87b      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 80037dc:	2b60      	cmp	r3, #96	; 0x60
 80037de:	d050      	beq.n	8003882 <HAL_TIM_ConfigClockSource+0x11a>
 80037e0:	2b60      	cmp	r3, #96	; 0x60
 80037e2:	d877      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 80037e4:	2b50      	cmp	r3, #80	; 0x50
 80037e6:	d03c      	beq.n	8003862 <HAL_TIM_ConfigClockSource+0xfa>
 80037e8:	2b50      	cmp	r3, #80	; 0x50
 80037ea:	d873      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 80037ec:	2b40      	cmp	r3, #64	; 0x40
 80037ee:	d058      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0x13a>
 80037f0:	2b40      	cmp	r3, #64	; 0x40
 80037f2:	d86f      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 80037f4:	2b30      	cmp	r3, #48	; 0x30
 80037f6:	d064      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x15a>
 80037f8:	2b30      	cmp	r3, #48	; 0x30
 80037fa:	d86b      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	d060      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003800:	2b20      	cmp	r3, #32
 8003802:	d867      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003804:	2b00      	cmp	r3, #0
 8003806:	d05c      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003808:	2b10      	cmp	r3, #16
 800380a:	d05a      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x15a>
 800380c:	e062      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	6899      	ldr	r1, [r3, #8]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f000 fb35 	bl	8003e8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003830:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	609a      	str	r2, [r3, #8]
      break;
 800383a:	e04f      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	6899      	ldr	r1, [r3, #8]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f000 fb1e 	bl	8003e8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800385e:	609a      	str	r2, [r3, #8]
      break;
 8003860:	e03c      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6818      	ldr	r0, [r3, #0]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	6859      	ldr	r1, [r3, #4]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	461a      	mov	r2, r3
 8003870:	f000 fa92 	bl	8003d98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2150      	movs	r1, #80	; 0x50
 800387a:	4618      	mov	r0, r3
 800387c:	f000 faeb 	bl	8003e56 <TIM_ITRx_SetConfig>
      break;
 8003880:	e02c      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	6859      	ldr	r1, [r3, #4]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	461a      	mov	r2, r3
 8003890:	f000 fab1 	bl	8003df6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2160      	movs	r1, #96	; 0x60
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fadb 	bl	8003e56 <TIM_ITRx_SetConfig>
      break;
 80038a0:	e01c      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6859      	ldr	r1, [r3, #4]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	461a      	mov	r2, r3
 80038b0:	f000 fa72 	bl	8003d98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2140      	movs	r1, #64	; 0x40
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 facb 	bl	8003e56 <TIM_ITRx_SetConfig>
      break;
 80038c0:	e00c      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4619      	mov	r1, r3
 80038cc:	4610      	mov	r0, r2
 80038ce:	f000 fac2 	bl	8003e56 <TIM_ITRx_SetConfig>
      break;
 80038d2:	e003      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
      break;
 80038d8:	e000      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a40      	ldr	r2, [pc, #256]	; (8003a0c <TIM_Base_SetConfig+0x114>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d013      	beq.n	8003938 <TIM_Base_SetConfig+0x40>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003916:	d00f      	beq.n	8003938 <TIM_Base_SetConfig+0x40>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a3d      	ldr	r2, [pc, #244]	; (8003a10 <TIM_Base_SetConfig+0x118>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00b      	beq.n	8003938 <TIM_Base_SetConfig+0x40>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a3c      	ldr	r2, [pc, #240]	; (8003a14 <TIM_Base_SetConfig+0x11c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d007      	beq.n	8003938 <TIM_Base_SetConfig+0x40>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a3b      	ldr	r2, [pc, #236]	; (8003a18 <TIM_Base_SetConfig+0x120>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d003      	beq.n	8003938 <TIM_Base_SetConfig+0x40>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a3a      	ldr	r2, [pc, #232]	; (8003a1c <TIM_Base_SetConfig+0x124>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d108      	bne.n	800394a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a2f      	ldr	r2, [pc, #188]	; (8003a0c <TIM_Base_SetConfig+0x114>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d02b      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003958:	d027      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a2c      	ldr	r2, [pc, #176]	; (8003a10 <TIM_Base_SetConfig+0x118>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d023      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a2b      	ldr	r2, [pc, #172]	; (8003a14 <TIM_Base_SetConfig+0x11c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d01f      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a2a      	ldr	r2, [pc, #168]	; (8003a18 <TIM_Base_SetConfig+0x120>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d01b      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a29      	ldr	r2, [pc, #164]	; (8003a1c <TIM_Base_SetConfig+0x124>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d017      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a28      	ldr	r2, [pc, #160]	; (8003a20 <TIM_Base_SetConfig+0x128>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d013      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a27      	ldr	r2, [pc, #156]	; (8003a24 <TIM_Base_SetConfig+0x12c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00f      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a26      	ldr	r2, [pc, #152]	; (8003a28 <TIM_Base_SetConfig+0x130>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d00b      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a25      	ldr	r2, [pc, #148]	; (8003a2c <TIM_Base_SetConfig+0x134>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d007      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a24      	ldr	r2, [pc, #144]	; (8003a30 <TIM_Base_SetConfig+0x138>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d003      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a23      	ldr	r2, [pc, #140]	; (8003a34 <TIM_Base_SetConfig+0x13c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d108      	bne.n	80039bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a0a      	ldr	r2, [pc, #40]	; (8003a0c <TIM_Base_SetConfig+0x114>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d003      	beq.n	80039f0 <TIM_Base_SetConfig+0xf8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a0c      	ldr	r2, [pc, #48]	; (8003a1c <TIM_Base_SetConfig+0x124>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d103      	bne.n	80039f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	691a      	ldr	r2, [r3, #16]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	615a      	str	r2, [r3, #20]
}
 80039fe:	bf00      	nop
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	40010000 	.word	0x40010000
 8003a10:	40000400 	.word	0x40000400
 8003a14:	40000800 	.word	0x40000800
 8003a18:	40000c00 	.word	0x40000c00
 8003a1c:	40010400 	.word	0x40010400
 8003a20:	40014000 	.word	0x40014000
 8003a24:	40014400 	.word	0x40014400
 8003a28:	40014800 	.word	0x40014800
 8003a2c:	40001800 	.word	0x40001800
 8003a30:	40001c00 	.word	0x40001c00
 8003a34:	40002000 	.word	0x40002000

08003a38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	f023 0201 	bic.w	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0303 	bic.w	r3, r3, #3
 8003a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f023 0302 	bic.w	r3, r3, #2
 8003a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a20      	ldr	r2, [pc, #128]	; (8003b10 <TIM_OC1_SetConfig+0xd8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d003      	beq.n	8003a9c <TIM_OC1_SetConfig+0x64>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a1f      	ldr	r2, [pc, #124]	; (8003b14 <TIM_OC1_SetConfig+0xdc>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d10c      	bne.n	8003ab6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f023 0308 	bic.w	r3, r3, #8
 8003aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f023 0304 	bic.w	r3, r3, #4
 8003ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a15      	ldr	r2, [pc, #84]	; (8003b10 <TIM_OC1_SetConfig+0xd8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d003      	beq.n	8003ac6 <TIM_OC1_SetConfig+0x8e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a14      	ldr	r2, [pc, #80]	; (8003b14 <TIM_OC1_SetConfig+0xdc>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d111      	bne.n	8003aea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	621a      	str	r2, [r3, #32]
}
 8003b04:	bf00      	nop
 8003b06:	371c      	adds	r7, #28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	40010000 	.word	0x40010000
 8003b14:	40010400 	.word	0x40010400

08003b18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	f023 0210 	bic.w	r2, r3, #16
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f023 0320 	bic.w	r3, r3, #32
 8003b62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a22      	ldr	r2, [pc, #136]	; (8003bfc <TIM_OC2_SetConfig+0xe4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d003      	beq.n	8003b80 <TIM_OC2_SetConfig+0x68>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a21      	ldr	r2, [pc, #132]	; (8003c00 <TIM_OC2_SetConfig+0xe8>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d10d      	bne.n	8003b9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a17      	ldr	r2, [pc, #92]	; (8003bfc <TIM_OC2_SetConfig+0xe4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d003      	beq.n	8003bac <TIM_OC2_SetConfig+0x94>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a16      	ldr	r2, [pc, #88]	; (8003c00 <TIM_OC2_SetConfig+0xe8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d113      	bne.n	8003bd4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	621a      	str	r2, [r3, #32]
}
 8003bee:	bf00      	nop
 8003bf0:	371c      	adds	r7, #28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	40010000 	.word	0x40010000
 8003c00:	40010400 	.word	0x40010400

08003c04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0303 	bic.w	r3, r3, #3
 8003c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	021b      	lsls	r3, r3, #8
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a21      	ldr	r2, [pc, #132]	; (8003ce4 <TIM_OC3_SetConfig+0xe0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d003      	beq.n	8003c6a <TIM_OC3_SetConfig+0x66>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a20      	ldr	r2, [pc, #128]	; (8003ce8 <TIM_OC3_SetConfig+0xe4>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d10d      	bne.n	8003c86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a16      	ldr	r2, [pc, #88]	; (8003ce4 <TIM_OC3_SetConfig+0xe0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d003      	beq.n	8003c96 <TIM_OC3_SetConfig+0x92>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a15      	ldr	r2, [pc, #84]	; (8003ce8 <TIM_OC3_SetConfig+0xe4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d113      	bne.n	8003cbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	621a      	str	r2, [r3, #32]
}
 8003cd8:	bf00      	nop
 8003cda:	371c      	adds	r7, #28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	40010000 	.word	0x40010000
 8003ce8:	40010400 	.word	0x40010400

08003cec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	021b      	lsls	r3, r3, #8
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	031b      	lsls	r3, r3, #12
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a12      	ldr	r2, [pc, #72]	; (8003d90 <TIM_OC4_SetConfig+0xa4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d003      	beq.n	8003d54 <TIM_OC4_SetConfig+0x68>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a11      	ldr	r2, [pc, #68]	; (8003d94 <TIM_OC4_SetConfig+0xa8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d109      	bne.n	8003d68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	019b      	lsls	r3, r3, #6
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	621a      	str	r2, [r3, #32]
}
 8003d82:	bf00      	nop
 8003d84:	371c      	adds	r7, #28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40010000 	.word	0x40010000
 8003d94:	40010400 	.word	0x40010400

08003d98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	f023 0201 	bic.w	r2, r3, #1
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f023 030a 	bic.w	r3, r3, #10
 8003dd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	621a      	str	r2, [r3, #32]
}
 8003dea:	bf00      	nop
 8003dec:	371c      	adds	r7, #28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b087      	sub	sp, #28
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	f023 0210 	bic.w	r2, r3, #16
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	031b      	lsls	r3, r3, #12
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	621a      	str	r2, [r3, #32]
}
 8003e4a:	bf00      	nop
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b085      	sub	sp, #20
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f043 0307 	orr.w	r3, r3, #7
 8003e78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	609a      	str	r2, [r3, #8]
}
 8003e80:	bf00      	nop
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ea6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	021a      	lsls	r2, r3, #8
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	609a      	str	r2, [r3, #8]
}
 8003ec0:	bf00      	nop
 8003ec2:	371c      	adds	r7, #28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	2201      	movs	r2, #1
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a1a      	ldr	r2, [r3, #32]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	43db      	mvns	r3, r3
 8003eee:	401a      	ands	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a1a      	ldr	r2, [r3, #32]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f003 031f 	and.w	r3, r3, #31
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	fa01 f303 	lsl.w	r3, r1, r3
 8003f04:	431a      	orrs	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	621a      	str	r2, [r3, #32]
}
 8003f0a:	bf00      	nop
 8003f0c:	371c      	adds	r7, #28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e05a      	b.n	8003fe6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a21      	ldr	r2, [pc, #132]	; (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d022      	beq.n	8003fba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7c:	d01d      	beq.n	8003fba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a1d      	ldr	r2, [pc, #116]	; (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d018      	beq.n	8003fba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a1b      	ldr	r2, [pc, #108]	; (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d013      	beq.n	8003fba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a1a      	ldr	r2, [pc, #104]	; (8004000 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00e      	beq.n	8003fba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a18      	ldr	r2, [pc, #96]	; (8004004 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d009      	beq.n	8003fba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a17      	ldr	r2, [pc, #92]	; (8004008 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d004      	beq.n	8003fba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a15      	ldr	r2, [pc, #84]	; (800400c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d10c      	bne.n	8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40010000 	.word	0x40010000
 8003ff8:	40000400 	.word	0x40000400
 8003ffc:	40000800 	.word	0x40000800
 8004000:	40000c00 	.word	0x40000c00
 8004004:	40010400 	.word	0x40010400
 8004008:	40014000 	.word	0x40014000
 800400c:	40001800 	.word	0x40001800

08004010 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004028:	2302      	movs	r3, #2
 800402a:	e03d      	b.n	80040a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	4313      	orrs	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4313      	orrs	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e03f      	b.n	8004146 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d106      	bne.n	80040e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fd ff20 	bl	8001f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2224      	movs	r2, #36	; 0x24
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68da      	ldr	r2, [r3, #12]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 fe1d 	bl	8004d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800410c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	695a      	ldr	r2, [r3, #20]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800411c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800412c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b08a      	sub	sp, #40	; 0x28
 8004152:	af02      	add	r7, sp, #8
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	603b      	str	r3, [r7, #0]
 800415a:	4613      	mov	r3, r2
 800415c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b20      	cmp	r3, #32
 800416c:	d17c      	bne.n	8004268 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <HAL_UART_Transmit+0x2c>
 8004174:	88fb      	ldrh	r3, [r7, #6]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e075      	b.n	800426a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_UART_Transmit+0x3e>
 8004188:	2302      	movs	r3, #2
 800418a:	e06e      	b.n	800426a <HAL_UART_Transmit+0x11c>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2221      	movs	r2, #33	; 0x21
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041a2:	f7fe f881 	bl	80022a8 <HAL_GetTick>
 80041a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	88fa      	ldrh	r2, [r7, #6]
 80041ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	88fa      	ldrh	r2, [r7, #6]
 80041b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041bc:	d108      	bne.n	80041d0 <HAL_UART_Transmit+0x82>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d104      	bne.n	80041d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	e003      	b.n	80041d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80041e0:	e02a      	b.n	8004238 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2200      	movs	r2, #0
 80041ea:	2180      	movs	r1, #128	; 0x80
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 fb9b 	bl	8004928 <UART_WaitOnFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e036      	b.n	800426a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10b      	bne.n	800421a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004210:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	3302      	adds	r3, #2
 8004216:	61bb      	str	r3, [r7, #24]
 8004218:	e007      	b.n	800422a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	781a      	ldrb	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	3301      	adds	r3, #1
 8004228:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1cf      	bne.n	80041e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2200      	movs	r2, #0
 800424a:	2140      	movs	r1, #64	; 0x40
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 fb6b 	bl	8004928 <UART_WaitOnFlagUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e006      	b.n	800426a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	e000      	b.n	800426a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004268:	2302      	movs	r3, #2
  }
}
 800426a:	4618      	mov	r0, r3
 800426c:	3720      	adds	r7, #32
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b08a      	sub	sp, #40	; 0x28
 8004276:	af02      	add	r7, sp, #8
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	603b      	str	r3, [r7, #0]
 800427e:	4613      	mov	r3, r2
 8004280:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b20      	cmp	r3, #32
 8004290:	f040 808c 	bne.w	80043ac <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <HAL_UART_Receive+0x2e>
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e084      	b.n	80043ae <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <HAL_UART_Receive+0x40>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e07d      	b.n	80043ae <HAL_UART_Receive+0x13c>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2222      	movs	r2, #34	; 0x22
 80042c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042ce:	f7fd ffeb 	bl	80022a8 <HAL_GetTick>
 80042d2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	88fa      	ldrh	r2, [r7, #6]
 80042d8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	88fa      	ldrh	r2, [r7, #6]
 80042de:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e8:	d108      	bne.n	80042fc <HAL_UART_Receive+0x8a>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d104      	bne.n	80042fc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	61bb      	str	r3, [r7, #24]
 80042fa:	e003      	b.n	8004304 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004300:	2300      	movs	r3, #0
 8004302:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800430c:	e043      	b.n	8004396 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2200      	movs	r2, #0
 8004316:	2120      	movs	r1, #32
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 fb05 	bl	8004928 <UART_WaitOnFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e042      	b.n	80043ae <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10c      	bne.n	8004348 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	b29b      	uxth	r3, r3
 8004336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800433a:	b29a      	uxth	r2, r3
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	3302      	adds	r3, #2
 8004344:	61bb      	str	r3, [r7, #24]
 8004346:	e01f      	b.n	8004388 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004350:	d007      	beq.n	8004362 <HAL_UART_Receive+0xf0>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10a      	bne.n	8004370 <HAL_UART_Receive+0xfe>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	b2da      	uxtb	r2, r3
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	701a      	strb	r2, [r3, #0]
 800436e:	e008      	b.n	8004382 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800437c:	b2da      	uxtb	r2, r3
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	3301      	adds	r3, #1
 8004386:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800439a:	b29b      	uxth	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1b6      	bne.n	800430e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	e000      	b.n	80043ae <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80043ac:	2302      	movs	r3, #2
  }
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3720      	adds	r7, #32
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b0ba      	sub	sp, #232	; 0xe8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80043de:	2300      	movs	r3, #0
 80043e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80043f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10f      	bne.n	800441e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b00      	cmp	r3, #0
 8004408:	d009      	beq.n	800441e <HAL_UART_IRQHandler+0x66>
 800440a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800440e:	f003 0320 	and.w	r3, r3, #32
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fbd3 	bl	8004bc2 <UART_Receive_IT>
      return;
 800441c:	e256      	b.n	80048cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800441e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 80de 	beq.w	80045e4 <HAL_UART_IRQHandler+0x22c>
 8004428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d106      	bne.n	8004442 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004438:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 80d1 	beq.w	80045e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00b      	beq.n	8004466 <HAL_UART_IRQHandler+0xae>
 800444e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	f043 0201 	orr.w	r2, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00b      	beq.n	800448a <HAL_UART_IRQHandler+0xd2>
 8004472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d005      	beq.n	800448a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	f043 0202 	orr.w	r2, r3, #2
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800448a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00b      	beq.n	80044ae <HAL_UART_IRQHandler+0xf6>
 8004496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	f043 0204 	orr.w	r2, r3, #4
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d011      	beq.n	80044de <HAL_UART_IRQHandler+0x126>
 80044ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d105      	bne.n	80044d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80044c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d005      	beq.n	80044de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f043 0208 	orr.w	r2, r3, #8
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 81ed 	beq.w	80048c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <HAL_UART_IRQHandler+0x14e>
 80044f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fb5e 	bl	8004bc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004510:	2b40      	cmp	r3, #64	; 0x40
 8004512:	bf0c      	ite	eq
 8004514:	2301      	moveq	r3, #1
 8004516:	2300      	movne	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d103      	bne.n	8004532 <HAL_UART_IRQHandler+0x17a>
 800452a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800452e:	2b00      	cmp	r3, #0
 8004530:	d04f      	beq.n	80045d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fa66 	bl	8004a04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004542:	2b40      	cmp	r3, #64	; 0x40
 8004544:	d141      	bne.n	80045ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3314      	adds	r3, #20
 800454c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004554:	e853 3f00 	ldrex	r3, [r3]
 8004558:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800455c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3314      	adds	r3, #20
 800456e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004572:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004576:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800457e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004582:	e841 2300 	strex	r3, r2, [r1]
 8004586:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800458a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1d9      	bne.n	8004546 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004596:	2b00      	cmp	r3, #0
 8004598:	d013      	beq.n	80045c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	4a7d      	ldr	r2, [pc, #500]	; (8004794 <HAL_UART_IRQHandler+0x3dc>)
 80045a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fe f82f 	bl	800260a <HAL_DMA_Abort_IT>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d016      	beq.n	80045e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045bc:	4610      	mov	r0, r2
 80045be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c0:	e00e      	b.n	80045e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f99a 	bl	80048fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c8:	e00a      	b.n	80045e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f996 	bl	80048fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d0:	e006      	b.n	80045e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f992 	bl	80048fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80045de:	e170      	b.n	80048c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e0:	bf00      	nop
    return;
 80045e2:	e16e      	b.n	80048c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	f040 814a 	bne.w	8004882 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80045ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f2:	f003 0310 	and.w	r3, r3, #16
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 8143 	beq.w	8004882 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80045fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 813c 	beq.w	8004882 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800460a:	2300      	movs	r3, #0
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462a:	2b40      	cmp	r3, #64	; 0x40
 800462c:	f040 80b4 	bne.w	8004798 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800463c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8140 	beq.w	80048c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800464a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800464e:	429a      	cmp	r2, r3
 8004650:	f080 8139 	bcs.w	80048c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800465a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004666:	f000 8088 	beq.w	800477a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	330c      	adds	r3, #12
 8004670:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004678:	e853 3f00 	ldrex	r3, [r3]
 800467c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004680:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004688:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	330c      	adds	r3, #12
 8004692:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004696:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800469a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80046a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80046ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1d9      	bne.n	800466a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3314      	adds	r3, #20
 80046bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c0:	e853 3f00 	ldrex	r3, [r3]
 80046c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80046c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046c8:	f023 0301 	bic.w	r3, r3, #1
 80046cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3314      	adds	r3, #20
 80046d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80046ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e1      	bne.n	80046b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3314      	adds	r3, #20
 80046f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004708:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3314      	adds	r3, #20
 8004712:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004716:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004718:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800471c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800471e:	e841 2300 	strex	r3, r2, [r1]
 8004722:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1e3      	bne.n	80046f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	330c      	adds	r3, #12
 800473e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004742:	e853 3f00 	ldrex	r3, [r3]
 8004746:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800474a:	f023 0310 	bic.w	r3, r3, #16
 800474e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	330c      	adds	r3, #12
 8004758:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800475c:	65ba      	str	r2, [r7, #88]	; 0x58
 800475e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004760:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004762:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004764:	e841 2300 	strex	r3, r2, [r1]
 8004768:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800476a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e3      	bne.n	8004738 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004774:	4618      	mov	r0, r3
 8004776:	f7fd fed8 	bl	800252a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004782:	b29b      	uxth	r3, r3
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	b29b      	uxth	r3, r3
 8004788:	4619      	mov	r1, r3
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f8c0 	bl	8004910 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004790:	e099      	b.n	80048c6 <HAL_UART_IRQHandler+0x50e>
 8004792:	bf00      	nop
 8004794:	08004acb 	.word	0x08004acb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 808b 	beq.w	80048ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80047b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 8086 	beq.w	80048ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	330c      	adds	r3, #12
 80047c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	330c      	adds	r3, #12
 80047de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80047e2:	647a      	str	r2, [r7, #68]	; 0x44
 80047e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047ea:	e841 2300 	strex	r3, r2, [r1]
 80047ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1e3      	bne.n	80047be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3314      	adds	r3, #20
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	e853 3f00 	ldrex	r3, [r3]
 8004804:	623b      	str	r3, [r7, #32]
   return(result);
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	f023 0301 	bic.w	r3, r3, #1
 800480c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3314      	adds	r3, #20
 8004816:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800481a:	633a      	str	r2, [r7, #48]	; 0x30
 800481c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004822:	e841 2300 	strex	r3, r2, [r1]
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1e3      	bne.n	80047f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	330c      	adds	r3, #12
 8004842:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	e853 3f00 	ldrex	r3, [r3]
 800484a:	60fb      	str	r3, [r7, #12]
   return(result);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0310 	bic.w	r3, r3, #16
 8004852:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	330c      	adds	r3, #12
 800485c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004860:	61fa      	str	r2, [r7, #28]
 8004862:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004864:	69b9      	ldr	r1, [r7, #24]
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	e841 2300 	strex	r3, r2, [r1]
 800486c:	617b      	str	r3, [r7, #20]
   return(result);
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1e3      	bne.n	800483c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004874:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004878:	4619      	mov	r1, r3
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f848 	bl	8004910 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004880:	e023      	b.n	80048ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488a:	2b00      	cmp	r3, #0
 800488c:	d009      	beq.n	80048a2 <HAL_UART_IRQHandler+0x4ea>
 800488e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f929 	bl	8004af2 <UART_Transmit_IT>
    return;
 80048a0:	e014      	b.n	80048cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00e      	beq.n	80048cc <HAL_UART_IRQHandler+0x514>
 80048ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d008      	beq.n	80048cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f969 	bl	8004b92 <UART_EndTransmit_IT>
    return;
 80048c0:	e004      	b.n	80048cc <HAL_UART_IRQHandler+0x514>
    return;
 80048c2:	bf00      	nop
 80048c4:	e002      	b.n	80048cc <HAL_UART_IRQHandler+0x514>
      return;
 80048c6:	bf00      	nop
 80048c8:	e000      	b.n	80048cc <HAL_UART_IRQHandler+0x514>
      return;
 80048ca:	bf00      	nop
  }
}
 80048cc:	37e8      	adds	r7, #232	; 0xe8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop

080048d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b090      	sub	sp, #64	; 0x40
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	4613      	mov	r3, r2
 8004936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004938:	e050      	b.n	80049dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004940:	d04c      	beq.n	80049dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004944:	2b00      	cmp	r3, #0
 8004946:	d007      	beq.n	8004958 <UART_WaitOnFlagUntilTimeout+0x30>
 8004948:	f7fd fcae 	bl	80022a8 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004954:	429a      	cmp	r2, r3
 8004956:	d241      	bcs.n	80049dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	330c      	adds	r3, #12
 800495e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	e853 3f00 	ldrex	r3, [r3]
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800496e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	330c      	adds	r3, #12
 8004976:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004978:	637a      	str	r2, [r7, #52]	; 0x34
 800497a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800497e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004980:	e841 2300 	strex	r3, r2, [r1]
 8004984:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1e5      	bne.n	8004958 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3314      	adds	r3, #20
 8004992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	e853 3f00 	ldrex	r3, [r3]
 800499a:	613b      	str	r3, [r7, #16]
   return(result);
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3314      	adds	r3, #20
 80049aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049ac:	623a      	str	r2, [r7, #32]
 80049ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	69f9      	ldr	r1, [r7, #28]
 80049b2:	6a3a      	ldr	r2, [r7, #32]
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e5      	bne.n	800498c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e00f      	b.n	80049fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	4013      	ands	r3, r2
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	bf0c      	ite	eq
 80049ec:	2301      	moveq	r3, #1
 80049ee:	2300      	movne	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	79fb      	ldrb	r3, [r7, #7]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d09f      	beq.n	800493a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3740      	adds	r7, #64	; 0x40
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b095      	sub	sp, #84	; 0x54
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	330c      	adds	r3, #12
 8004a12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a16:	e853 3f00 	ldrex	r3, [r3]
 8004a1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	330c      	adds	r3, #12
 8004a2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a2c:	643a      	str	r2, [r7, #64]	; 0x40
 8004a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a34:	e841 2300 	strex	r3, r2, [r1]
 8004a38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1e5      	bne.n	8004a0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3314      	adds	r3, #20
 8004a46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	e853 3f00 	ldrex	r3, [r3]
 8004a4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f023 0301 	bic.w	r3, r3, #1
 8004a56:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3314      	adds	r3, #20
 8004a5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a68:	e841 2300 	strex	r3, r2, [r1]
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1e5      	bne.n	8004a40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d119      	bne.n	8004ab0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	330c      	adds	r3, #12
 8004a82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	e853 3f00 	ldrex	r3, [r3]
 8004a8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f023 0310 	bic.w	r3, r3, #16
 8004a92:	647b      	str	r3, [r7, #68]	; 0x44
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	330c      	adds	r3, #12
 8004a9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a9c:	61ba      	str	r2, [r7, #24]
 8004a9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa0:	6979      	ldr	r1, [r7, #20]
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	e841 2300 	strex	r3, r2, [r1]
 8004aa8:	613b      	str	r3, [r7, #16]
   return(result);
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1e5      	bne.n	8004a7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004abe:	bf00      	nop
 8004ac0:	3754      	adds	r7, #84	; 0x54
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f7ff ff09 	bl	80048fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aea:	bf00      	nop
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b085      	sub	sp, #20
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b21      	cmp	r3, #33	; 0x21
 8004b04:	d13e      	bne.n	8004b84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0e:	d114      	bne.n	8004b3a <UART_Transmit_IT+0x48>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d110      	bne.n	8004b3a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	881b      	ldrh	r3, [r3, #0]
 8004b22:	461a      	mov	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	1c9a      	adds	r2, r3, #2
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	621a      	str	r2, [r3, #32]
 8004b38:	e008      	b.n	8004b4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	1c59      	adds	r1, r3, #1
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6211      	str	r1, [r2, #32]
 8004b44:	781a      	ldrb	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	4619      	mov	r1, r3
 8004b5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10f      	bne.n	8004b80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	e000      	b.n	8004b86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b84:	2302      	movs	r3, #2
  }
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b082      	sub	sp, #8
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68da      	ldr	r2, [r3, #12]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ba8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7ff fe8e 	bl	80048d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b08c      	sub	sp, #48	; 0x30
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b22      	cmp	r3, #34	; 0x22
 8004bd4:	f040 80ab 	bne.w	8004d2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be0:	d117      	bne.n	8004c12 <UART_Receive_IT+0x50>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d113      	bne.n	8004c12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0a:	1c9a      	adds	r2, r3, #2
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	629a      	str	r2, [r3, #40]	; 0x28
 8004c10:	e026      	b.n	8004c60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c24:	d007      	beq.n	8004c36 <UART_Receive_IT+0x74>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <UART_Receive_IT+0x82>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d106      	bne.n	8004c44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c40:	701a      	strb	r2, [r3, #0]
 8004c42:	e008      	b.n	8004c56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	3b01      	subs	r3, #1
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d15a      	bne.n	8004d2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0220 	bic.w	r2, r2, #32
 8004c82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695a      	ldr	r2, [r3, #20]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0201 	bic.w	r2, r2, #1
 8004ca2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d135      	bne.n	8004d20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	330c      	adds	r3, #12
 8004cc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	e853 3f00 	ldrex	r3, [r3]
 8004cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f023 0310 	bic.w	r3, r3, #16
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	330c      	adds	r3, #12
 8004cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cda:	623a      	str	r2, [r7, #32]
 8004cdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cde:	69f9      	ldr	r1, [r7, #28]
 8004ce0:	6a3a      	ldr	r2, [r7, #32]
 8004ce2:	e841 2300 	strex	r3, r2, [r1]
 8004ce6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1e5      	bne.n	8004cba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0310 	and.w	r3, r3, #16
 8004cf8:	2b10      	cmp	r3, #16
 8004cfa:	d10a      	bne.n	8004d12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d16:	4619      	mov	r1, r3
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff fdf9 	bl	8004910 <HAL_UARTEx_RxEventCallback>
 8004d1e:	e002      	b.n	8004d26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7ff fde1 	bl	80048e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	e002      	b.n	8004d30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e000      	b.n	8004d30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004d2e:	2302      	movs	r3, #2
  }
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3730      	adds	r7, #48	; 0x30
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3c:	b09f      	sub	sp, #124	; 0x7c
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d4e:	68d9      	ldr	r1, [r3, #12]
 8004d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	ea40 0301 	orr.w	r3, r0, r1
 8004d58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	431a      	orrs	r2, r3
 8004d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d7c:	f021 010c 	bic.w	r1, r1, #12
 8004d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d86:	430b      	orrs	r3, r1
 8004d88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d96:	6999      	ldr	r1, [r3, #24]
 8004d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	ea40 0301 	orr.w	r3, r0, r1
 8004da0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	4bc5      	ldr	r3, [pc, #788]	; (80050bc <UART_SetConfig+0x384>)
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d004      	beq.n	8004db6 <UART_SetConfig+0x7e>
 8004dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	4bc3      	ldr	r3, [pc, #780]	; (80050c0 <UART_SetConfig+0x388>)
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d103      	bne.n	8004dbe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004db6:	f7fe fa91 	bl	80032dc <HAL_RCC_GetPCLK2Freq>
 8004dba:	6778      	str	r0, [r7, #116]	; 0x74
 8004dbc:	e002      	b.n	8004dc4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dbe:	f7fe fa79 	bl	80032b4 <HAL_RCC_GetPCLK1Freq>
 8004dc2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dcc:	f040 80b6 	bne.w	8004f3c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dd2:	461c      	mov	r4, r3
 8004dd4:	f04f 0500 	mov.w	r5, #0
 8004dd8:	4622      	mov	r2, r4
 8004dda:	462b      	mov	r3, r5
 8004ddc:	1891      	adds	r1, r2, r2
 8004dde:	6439      	str	r1, [r7, #64]	; 0x40
 8004de0:	415b      	adcs	r3, r3
 8004de2:	647b      	str	r3, [r7, #68]	; 0x44
 8004de4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004de8:	1912      	adds	r2, r2, r4
 8004dea:	eb45 0303 	adc.w	r3, r5, r3
 8004dee:	f04f 0000 	mov.w	r0, #0
 8004df2:	f04f 0100 	mov.w	r1, #0
 8004df6:	00d9      	lsls	r1, r3, #3
 8004df8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dfc:	00d0      	lsls	r0, r2, #3
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	1911      	adds	r1, r2, r4
 8004e04:	6639      	str	r1, [r7, #96]	; 0x60
 8004e06:	416b      	adcs	r3, r5
 8004e08:	667b      	str	r3, [r7, #100]	; 0x64
 8004e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	1891      	adds	r1, r2, r2
 8004e16:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e18:	415b      	adcs	r3, r3
 8004e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e20:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004e24:	f7fb fa2c 	bl	8000280 <__aeabi_uldivmod>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4ba5      	ldr	r3, [pc, #660]	; (80050c4 <UART_SetConfig+0x38c>)
 8004e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e32:	095b      	lsrs	r3, r3, #5
 8004e34:	011e      	lsls	r6, r3, #4
 8004e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e38:	461c      	mov	r4, r3
 8004e3a:	f04f 0500 	mov.w	r5, #0
 8004e3e:	4622      	mov	r2, r4
 8004e40:	462b      	mov	r3, r5
 8004e42:	1891      	adds	r1, r2, r2
 8004e44:	6339      	str	r1, [r7, #48]	; 0x30
 8004e46:	415b      	adcs	r3, r3
 8004e48:	637b      	str	r3, [r7, #52]	; 0x34
 8004e4a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004e4e:	1912      	adds	r2, r2, r4
 8004e50:	eb45 0303 	adc.w	r3, r5, r3
 8004e54:	f04f 0000 	mov.w	r0, #0
 8004e58:	f04f 0100 	mov.w	r1, #0
 8004e5c:	00d9      	lsls	r1, r3, #3
 8004e5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e62:	00d0      	lsls	r0, r2, #3
 8004e64:	4602      	mov	r2, r0
 8004e66:	460b      	mov	r3, r1
 8004e68:	1911      	adds	r1, r2, r4
 8004e6a:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e6c:	416b      	adcs	r3, r5
 8004e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	461a      	mov	r2, r3
 8004e76:	f04f 0300 	mov.w	r3, #0
 8004e7a:	1891      	adds	r1, r2, r2
 8004e7c:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e7e:	415b      	adcs	r3, r3
 8004e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e86:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004e8a:	f7fb f9f9 	bl	8000280 <__aeabi_uldivmod>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4b8c      	ldr	r3, [pc, #560]	; (80050c4 <UART_SetConfig+0x38c>)
 8004e94:	fba3 1302 	umull	r1, r3, r3, r2
 8004e98:	095b      	lsrs	r3, r3, #5
 8004e9a:	2164      	movs	r1, #100	; 0x64
 8004e9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	3332      	adds	r3, #50	; 0x32
 8004ea6:	4a87      	ldr	r2, [pc, #540]	; (80050c4 <UART_SetConfig+0x38c>)
 8004ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eac:	095b      	lsrs	r3, r3, #5
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004eb4:	441e      	add	r6, r3
 8004eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f04f 0100 	mov.w	r1, #0
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	1894      	adds	r4, r2, r2
 8004ec4:	623c      	str	r4, [r7, #32]
 8004ec6:	415b      	adcs	r3, r3
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ece:	1812      	adds	r2, r2, r0
 8004ed0:	eb41 0303 	adc.w	r3, r1, r3
 8004ed4:	f04f 0400 	mov.w	r4, #0
 8004ed8:	f04f 0500 	mov.w	r5, #0
 8004edc:	00dd      	lsls	r5, r3, #3
 8004ede:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ee2:	00d4      	lsls	r4, r2, #3
 8004ee4:	4622      	mov	r2, r4
 8004ee6:	462b      	mov	r3, r5
 8004ee8:	1814      	adds	r4, r2, r0
 8004eea:	653c      	str	r4, [r7, #80]	; 0x50
 8004eec:	414b      	adcs	r3, r1
 8004eee:	657b      	str	r3, [r7, #84]	; 0x54
 8004ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	f04f 0300 	mov.w	r3, #0
 8004efa:	1891      	adds	r1, r2, r2
 8004efc:	61b9      	str	r1, [r7, #24]
 8004efe:	415b      	adcs	r3, r3
 8004f00:	61fb      	str	r3, [r7, #28]
 8004f02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f06:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004f0a:	f7fb f9b9 	bl	8000280 <__aeabi_uldivmod>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4b6c      	ldr	r3, [pc, #432]	; (80050c4 <UART_SetConfig+0x38c>)
 8004f14:	fba3 1302 	umull	r1, r3, r3, r2
 8004f18:	095b      	lsrs	r3, r3, #5
 8004f1a:	2164      	movs	r1, #100	; 0x64
 8004f1c:	fb01 f303 	mul.w	r3, r1, r3
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	3332      	adds	r3, #50	; 0x32
 8004f26:	4a67      	ldr	r2, [pc, #412]	; (80050c4 <UART_SetConfig+0x38c>)
 8004f28:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2c:	095b      	lsrs	r3, r3, #5
 8004f2e:	f003 0207 	and.w	r2, r3, #7
 8004f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4432      	add	r2, r6
 8004f38:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f3a:	e0b9      	b.n	80050b0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f3e:	461c      	mov	r4, r3
 8004f40:	f04f 0500 	mov.w	r5, #0
 8004f44:	4622      	mov	r2, r4
 8004f46:	462b      	mov	r3, r5
 8004f48:	1891      	adds	r1, r2, r2
 8004f4a:	6139      	str	r1, [r7, #16]
 8004f4c:	415b      	adcs	r3, r3
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f54:	1912      	adds	r2, r2, r4
 8004f56:	eb45 0303 	adc.w	r3, r5, r3
 8004f5a:	f04f 0000 	mov.w	r0, #0
 8004f5e:	f04f 0100 	mov.w	r1, #0
 8004f62:	00d9      	lsls	r1, r3, #3
 8004f64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f68:	00d0      	lsls	r0, r2, #3
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	eb12 0804 	adds.w	r8, r2, r4
 8004f72:	eb43 0905 	adc.w	r9, r3, r5
 8004f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f04f 0100 	mov.w	r1, #0
 8004f80:	f04f 0200 	mov.w	r2, #0
 8004f84:	f04f 0300 	mov.w	r3, #0
 8004f88:	008b      	lsls	r3, r1, #2
 8004f8a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f8e:	0082      	lsls	r2, r0, #2
 8004f90:	4640      	mov	r0, r8
 8004f92:	4649      	mov	r1, r9
 8004f94:	f7fb f974 	bl	8000280 <__aeabi_uldivmod>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4b49      	ldr	r3, [pc, #292]	; (80050c4 <UART_SetConfig+0x38c>)
 8004f9e:	fba3 2302 	umull	r2, r3, r3, r2
 8004fa2:	095b      	lsrs	r3, r3, #5
 8004fa4:	011e      	lsls	r6, r3, #4
 8004fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f04f 0100 	mov.w	r1, #0
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	1894      	adds	r4, r2, r2
 8004fb4:	60bc      	str	r4, [r7, #8]
 8004fb6:	415b      	adcs	r3, r3
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fbe:	1812      	adds	r2, r2, r0
 8004fc0:	eb41 0303 	adc.w	r3, r1, r3
 8004fc4:	f04f 0400 	mov.w	r4, #0
 8004fc8:	f04f 0500 	mov.w	r5, #0
 8004fcc:	00dd      	lsls	r5, r3, #3
 8004fce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004fd2:	00d4      	lsls	r4, r2, #3
 8004fd4:	4622      	mov	r2, r4
 8004fd6:	462b      	mov	r3, r5
 8004fd8:	1814      	adds	r4, r2, r0
 8004fda:	64bc      	str	r4, [r7, #72]	; 0x48
 8004fdc:	414b      	adcs	r3, r1
 8004fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f04f 0100 	mov.w	r1, #0
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	008b      	lsls	r3, r1, #2
 8004ff4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ff8:	0082      	lsls	r2, r0, #2
 8004ffa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004ffe:	f7fb f93f 	bl	8000280 <__aeabi_uldivmod>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	4b2f      	ldr	r3, [pc, #188]	; (80050c4 <UART_SetConfig+0x38c>)
 8005008:	fba3 1302 	umull	r1, r3, r3, r2
 800500c:	095b      	lsrs	r3, r3, #5
 800500e:	2164      	movs	r1, #100	; 0x64
 8005010:	fb01 f303 	mul.w	r3, r1, r3
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	3332      	adds	r3, #50	; 0x32
 800501a:	4a2a      	ldr	r2, [pc, #168]	; (80050c4 <UART_SetConfig+0x38c>)
 800501c:	fba2 2303 	umull	r2, r3, r2, r3
 8005020:	095b      	lsrs	r3, r3, #5
 8005022:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005026:	441e      	add	r6, r3
 8005028:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800502a:	4618      	mov	r0, r3
 800502c:	f04f 0100 	mov.w	r1, #0
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	1894      	adds	r4, r2, r2
 8005036:	603c      	str	r4, [r7, #0]
 8005038:	415b      	adcs	r3, r3
 800503a:	607b      	str	r3, [r7, #4]
 800503c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005040:	1812      	adds	r2, r2, r0
 8005042:	eb41 0303 	adc.w	r3, r1, r3
 8005046:	f04f 0400 	mov.w	r4, #0
 800504a:	f04f 0500 	mov.w	r5, #0
 800504e:	00dd      	lsls	r5, r3, #3
 8005050:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005054:	00d4      	lsls	r4, r2, #3
 8005056:	4622      	mov	r2, r4
 8005058:	462b      	mov	r3, r5
 800505a:	eb12 0a00 	adds.w	sl, r2, r0
 800505e:	eb43 0b01 	adc.w	fp, r3, r1
 8005062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	4618      	mov	r0, r3
 8005068:	f04f 0100 	mov.w	r1, #0
 800506c:	f04f 0200 	mov.w	r2, #0
 8005070:	f04f 0300 	mov.w	r3, #0
 8005074:	008b      	lsls	r3, r1, #2
 8005076:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800507a:	0082      	lsls	r2, r0, #2
 800507c:	4650      	mov	r0, sl
 800507e:	4659      	mov	r1, fp
 8005080:	f7fb f8fe 	bl	8000280 <__aeabi_uldivmod>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4b0e      	ldr	r3, [pc, #56]	; (80050c4 <UART_SetConfig+0x38c>)
 800508a:	fba3 1302 	umull	r1, r3, r3, r2
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	2164      	movs	r1, #100	; 0x64
 8005092:	fb01 f303 	mul.w	r3, r1, r3
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	011b      	lsls	r3, r3, #4
 800509a:	3332      	adds	r3, #50	; 0x32
 800509c:	4a09      	ldr	r2, [pc, #36]	; (80050c4 <UART_SetConfig+0x38c>)
 800509e:	fba2 2303 	umull	r2, r3, r2, r3
 80050a2:	095b      	lsrs	r3, r3, #5
 80050a4:	f003 020f 	and.w	r2, r3, #15
 80050a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4432      	add	r2, r6
 80050ae:	609a      	str	r2, [r3, #8]
}
 80050b0:	bf00      	nop
 80050b2:	377c      	adds	r7, #124	; 0x7c
 80050b4:	46bd      	mov	sp, r7
 80050b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ba:	bf00      	nop
 80050bc:	40011000 	.word	0x40011000
 80050c0:	40011400 	.word	0x40011400
 80050c4:	51eb851f 	.word	0x51eb851f

080050c8 <__errno>:
 80050c8:	4b01      	ldr	r3, [pc, #4]	; (80050d0 <__errno+0x8>)
 80050ca:	6818      	ldr	r0, [r3, #0]
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	2000000c 	.word	0x2000000c

080050d4 <__libc_init_array>:
 80050d4:	b570      	push	{r4, r5, r6, lr}
 80050d6:	4d0d      	ldr	r5, [pc, #52]	; (800510c <__libc_init_array+0x38>)
 80050d8:	4c0d      	ldr	r4, [pc, #52]	; (8005110 <__libc_init_array+0x3c>)
 80050da:	1b64      	subs	r4, r4, r5
 80050dc:	10a4      	asrs	r4, r4, #2
 80050de:	2600      	movs	r6, #0
 80050e0:	42a6      	cmp	r6, r4
 80050e2:	d109      	bne.n	80050f8 <__libc_init_array+0x24>
 80050e4:	4d0b      	ldr	r5, [pc, #44]	; (8005114 <__libc_init_array+0x40>)
 80050e6:	4c0c      	ldr	r4, [pc, #48]	; (8005118 <__libc_init_array+0x44>)
 80050e8:	f000 fc4e 	bl	8005988 <_init>
 80050ec:	1b64      	subs	r4, r4, r5
 80050ee:	10a4      	asrs	r4, r4, #2
 80050f0:	2600      	movs	r6, #0
 80050f2:	42a6      	cmp	r6, r4
 80050f4:	d105      	bne.n	8005102 <__libc_init_array+0x2e>
 80050f6:	bd70      	pop	{r4, r5, r6, pc}
 80050f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050fc:	4798      	blx	r3
 80050fe:	3601      	adds	r6, #1
 8005100:	e7ee      	b.n	80050e0 <__libc_init_array+0xc>
 8005102:	f855 3b04 	ldr.w	r3, [r5], #4
 8005106:	4798      	blx	r3
 8005108:	3601      	adds	r6, #1
 800510a:	e7f2      	b.n	80050f2 <__libc_init_array+0x1e>
 800510c:	08006038 	.word	0x08006038
 8005110:	08006038 	.word	0x08006038
 8005114:	08006038 	.word	0x08006038
 8005118:	0800603c 	.word	0x0800603c

0800511c <memset>:
 800511c:	4402      	add	r2, r0
 800511e:	4603      	mov	r3, r0
 8005120:	4293      	cmp	r3, r2
 8005122:	d100      	bne.n	8005126 <memset+0xa>
 8005124:	4770      	bx	lr
 8005126:	f803 1b01 	strb.w	r1, [r3], #1
 800512a:	e7f9      	b.n	8005120 <memset+0x4>

0800512c <siprintf>:
 800512c:	b40e      	push	{r1, r2, r3}
 800512e:	b500      	push	{lr}
 8005130:	b09c      	sub	sp, #112	; 0x70
 8005132:	ab1d      	add	r3, sp, #116	; 0x74
 8005134:	9002      	str	r0, [sp, #8]
 8005136:	9006      	str	r0, [sp, #24]
 8005138:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800513c:	4809      	ldr	r0, [pc, #36]	; (8005164 <siprintf+0x38>)
 800513e:	9107      	str	r1, [sp, #28]
 8005140:	9104      	str	r1, [sp, #16]
 8005142:	4909      	ldr	r1, [pc, #36]	; (8005168 <siprintf+0x3c>)
 8005144:	f853 2b04 	ldr.w	r2, [r3], #4
 8005148:	9105      	str	r1, [sp, #20]
 800514a:	6800      	ldr	r0, [r0, #0]
 800514c:	9301      	str	r3, [sp, #4]
 800514e:	a902      	add	r1, sp, #8
 8005150:	f000 f868 	bl	8005224 <_svfiprintf_r>
 8005154:	9b02      	ldr	r3, [sp, #8]
 8005156:	2200      	movs	r2, #0
 8005158:	701a      	strb	r2, [r3, #0]
 800515a:	b01c      	add	sp, #112	; 0x70
 800515c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005160:	b003      	add	sp, #12
 8005162:	4770      	bx	lr
 8005164:	2000000c 	.word	0x2000000c
 8005168:	ffff0208 	.word	0xffff0208

0800516c <__ssputs_r>:
 800516c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005170:	688e      	ldr	r6, [r1, #8]
 8005172:	429e      	cmp	r6, r3
 8005174:	4682      	mov	sl, r0
 8005176:	460c      	mov	r4, r1
 8005178:	4690      	mov	r8, r2
 800517a:	461f      	mov	r7, r3
 800517c:	d838      	bhi.n	80051f0 <__ssputs_r+0x84>
 800517e:	898a      	ldrh	r2, [r1, #12]
 8005180:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005184:	d032      	beq.n	80051ec <__ssputs_r+0x80>
 8005186:	6825      	ldr	r5, [r4, #0]
 8005188:	6909      	ldr	r1, [r1, #16]
 800518a:	eba5 0901 	sub.w	r9, r5, r1
 800518e:	6965      	ldr	r5, [r4, #20]
 8005190:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005194:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005198:	3301      	adds	r3, #1
 800519a:	444b      	add	r3, r9
 800519c:	106d      	asrs	r5, r5, #1
 800519e:	429d      	cmp	r5, r3
 80051a0:	bf38      	it	cc
 80051a2:	461d      	movcc	r5, r3
 80051a4:	0553      	lsls	r3, r2, #21
 80051a6:	d531      	bpl.n	800520c <__ssputs_r+0xa0>
 80051a8:	4629      	mov	r1, r5
 80051aa:	f000 fb47 	bl	800583c <_malloc_r>
 80051ae:	4606      	mov	r6, r0
 80051b0:	b950      	cbnz	r0, 80051c8 <__ssputs_r+0x5c>
 80051b2:	230c      	movs	r3, #12
 80051b4:	f8ca 3000 	str.w	r3, [sl]
 80051b8:	89a3      	ldrh	r3, [r4, #12]
 80051ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051be:	81a3      	strh	r3, [r4, #12]
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295
 80051c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c8:	6921      	ldr	r1, [r4, #16]
 80051ca:	464a      	mov	r2, r9
 80051cc:	f000 fabe 	bl	800574c <memcpy>
 80051d0:	89a3      	ldrh	r3, [r4, #12]
 80051d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051da:	81a3      	strh	r3, [r4, #12]
 80051dc:	6126      	str	r6, [r4, #16]
 80051de:	6165      	str	r5, [r4, #20]
 80051e0:	444e      	add	r6, r9
 80051e2:	eba5 0509 	sub.w	r5, r5, r9
 80051e6:	6026      	str	r6, [r4, #0]
 80051e8:	60a5      	str	r5, [r4, #8]
 80051ea:	463e      	mov	r6, r7
 80051ec:	42be      	cmp	r6, r7
 80051ee:	d900      	bls.n	80051f2 <__ssputs_r+0x86>
 80051f0:	463e      	mov	r6, r7
 80051f2:	4632      	mov	r2, r6
 80051f4:	6820      	ldr	r0, [r4, #0]
 80051f6:	4641      	mov	r1, r8
 80051f8:	f000 fab6 	bl	8005768 <memmove>
 80051fc:	68a3      	ldr	r3, [r4, #8]
 80051fe:	6822      	ldr	r2, [r4, #0]
 8005200:	1b9b      	subs	r3, r3, r6
 8005202:	4432      	add	r2, r6
 8005204:	60a3      	str	r3, [r4, #8]
 8005206:	6022      	str	r2, [r4, #0]
 8005208:	2000      	movs	r0, #0
 800520a:	e7db      	b.n	80051c4 <__ssputs_r+0x58>
 800520c:	462a      	mov	r2, r5
 800520e:	f000 fb6f 	bl	80058f0 <_realloc_r>
 8005212:	4606      	mov	r6, r0
 8005214:	2800      	cmp	r0, #0
 8005216:	d1e1      	bne.n	80051dc <__ssputs_r+0x70>
 8005218:	6921      	ldr	r1, [r4, #16]
 800521a:	4650      	mov	r0, sl
 800521c:	f000 fabe 	bl	800579c <_free_r>
 8005220:	e7c7      	b.n	80051b2 <__ssputs_r+0x46>
	...

08005224 <_svfiprintf_r>:
 8005224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005228:	4698      	mov	r8, r3
 800522a:	898b      	ldrh	r3, [r1, #12]
 800522c:	061b      	lsls	r3, r3, #24
 800522e:	b09d      	sub	sp, #116	; 0x74
 8005230:	4607      	mov	r7, r0
 8005232:	460d      	mov	r5, r1
 8005234:	4614      	mov	r4, r2
 8005236:	d50e      	bpl.n	8005256 <_svfiprintf_r+0x32>
 8005238:	690b      	ldr	r3, [r1, #16]
 800523a:	b963      	cbnz	r3, 8005256 <_svfiprintf_r+0x32>
 800523c:	2140      	movs	r1, #64	; 0x40
 800523e:	f000 fafd 	bl	800583c <_malloc_r>
 8005242:	6028      	str	r0, [r5, #0]
 8005244:	6128      	str	r0, [r5, #16]
 8005246:	b920      	cbnz	r0, 8005252 <_svfiprintf_r+0x2e>
 8005248:	230c      	movs	r3, #12
 800524a:	603b      	str	r3, [r7, #0]
 800524c:	f04f 30ff 	mov.w	r0, #4294967295
 8005250:	e0d1      	b.n	80053f6 <_svfiprintf_r+0x1d2>
 8005252:	2340      	movs	r3, #64	; 0x40
 8005254:	616b      	str	r3, [r5, #20]
 8005256:	2300      	movs	r3, #0
 8005258:	9309      	str	r3, [sp, #36]	; 0x24
 800525a:	2320      	movs	r3, #32
 800525c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005260:	f8cd 800c 	str.w	r8, [sp, #12]
 8005264:	2330      	movs	r3, #48	; 0x30
 8005266:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005410 <_svfiprintf_r+0x1ec>
 800526a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800526e:	f04f 0901 	mov.w	r9, #1
 8005272:	4623      	mov	r3, r4
 8005274:	469a      	mov	sl, r3
 8005276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800527a:	b10a      	cbz	r2, 8005280 <_svfiprintf_r+0x5c>
 800527c:	2a25      	cmp	r2, #37	; 0x25
 800527e:	d1f9      	bne.n	8005274 <_svfiprintf_r+0x50>
 8005280:	ebba 0b04 	subs.w	fp, sl, r4
 8005284:	d00b      	beq.n	800529e <_svfiprintf_r+0x7a>
 8005286:	465b      	mov	r3, fp
 8005288:	4622      	mov	r2, r4
 800528a:	4629      	mov	r1, r5
 800528c:	4638      	mov	r0, r7
 800528e:	f7ff ff6d 	bl	800516c <__ssputs_r>
 8005292:	3001      	adds	r0, #1
 8005294:	f000 80aa 	beq.w	80053ec <_svfiprintf_r+0x1c8>
 8005298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800529a:	445a      	add	r2, fp
 800529c:	9209      	str	r2, [sp, #36]	; 0x24
 800529e:	f89a 3000 	ldrb.w	r3, [sl]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 80a2 	beq.w	80053ec <_svfiprintf_r+0x1c8>
 80052a8:	2300      	movs	r3, #0
 80052aa:	f04f 32ff 	mov.w	r2, #4294967295
 80052ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052b2:	f10a 0a01 	add.w	sl, sl, #1
 80052b6:	9304      	str	r3, [sp, #16]
 80052b8:	9307      	str	r3, [sp, #28]
 80052ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052be:	931a      	str	r3, [sp, #104]	; 0x68
 80052c0:	4654      	mov	r4, sl
 80052c2:	2205      	movs	r2, #5
 80052c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c8:	4851      	ldr	r0, [pc, #324]	; (8005410 <_svfiprintf_r+0x1ec>)
 80052ca:	f7fa ff89 	bl	80001e0 <memchr>
 80052ce:	9a04      	ldr	r2, [sp, #16]
 80052d0:	b9d8      	cbnz	r0, 800530a <_svfiprintf_r+0xe6>
 80052d2:	06d0      	lsls	r0, r2, #27
 80052d4:	bf44      	itt	mi
 80052d6:	2320      	movmi	r3, #32
 80052d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052dc:	0711      	lsls	r1, r2, #28
 80052de:	bf44      	itt	mi
 80052e0:	232b      	movmi	r3, #43	; 0x2b
 80052e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052e6:	f89a 3000 	ldrb.w	r3, [sl]
 80052ea:	2b2a      	cmp	r3, #42	; 0x2a
 80052ec:	d015      	beq.n	800531a <_svfiprintf_r+0xf6>
 80052ee:	9a07      	ldr	r2, [sp, #28]
 80052f0:	4654      	mov	r4, sl
 80052f2:	2000      	movs	r0, #0
 80052f4:	f04f 0c0a 	mov.w	ip, #10
 80052f8:	4621      	mov	r1, r4
 80052fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052fe:	3b30      	subs	r3, #48	; 0x30
 8005300:	2b09      	cmp	r3, #9
 8005302:	d94e      	bls.n	80053a2 <_svfiprintf_r+0x17e>
 8005304:	b1b0      	cbz	r0, 8005334 <_svfiprintf_r+0x110>
 8005306:	9207      	str	r2, [sp, #28]
 8005308:	e014      	b.n	8005334 <_svfiprintf_r+0x110>
 800530a:	eba0 0308 	sub.w	r3, r0, r8
 800530e:	fa09 f303 	lsl.w	r3, r9, r3
 8005312:	4313      	orrs	r3, r2
 8005314:	9304      	str	r3, [sp, #16]
 8005316:	46a2      	mov	sl, r4
 8005318:	e7d2      	b.n	80052c0 <_svfiprintf_r+0x9c>
 800531a:	9b03      	ldr	r3, [sp, #12]
 800531c:	1d19      	adds	r1, r3, #4
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	9103      	str	r1, [sp, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	bfbb      	ittet	lt
 8005326:	425b      	neglt	r3, r3
 8005328:	f042 0202 	orrlt.w	r2, r2, #2
 800532c:	9307      	strge	r3, [sp, #28]
 800532e:	9307      	strlt	r3, [sp, #28]
 8005330:	bfb8      	it	lt
 8005332:	9204      	strlt	r2, [sp, #16]
 8005334:	7823      	ldrb	r3, [r4, #0]
 8005336:	2b2e      	cmp	r3, #46	; 0x2e
 8005338:	d10c      	bne.n	8005354 <_svfiprintf_r+0x130>
 800533a:	7863      	ldrb	r3, [r4, #1]
 800533c:	2b2a      	cmp	r3, #42	; 0x2a
 800533e:	d135      	bne.n	80053ac <_svfiprintf_r+0x188>
 8005340:	9b03      	ldr	r3, [sp, #12]
 8005342:	1d1a      	adds	r2, r3, #4
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	9203      	str	r2, [sp, #12]
 8005348:	2b00      	cmp	r3, #0
 800534a:	bfb8      	it	lt
 800534c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005350:	3402      	adds	r4, #2
 8005352:	9305      	str	r3, [sp, #20]
 8005354:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005420 <_svfiprintf_r+0x1fc>
 8005358:	7821      	ldrb	r1, [r4, #0]
 800535a:	2203      	movs	r2, #3
 800535c:	4650      	mov	r0, sl
 800535e:	f7fa ff3f 	bl	80001e0 <memchr>
 8005362:	b140      	cbz	r0, 8005376 <_svfiprintf_r+0x152>
 8005364:	2340      	movs	r3, #64	; 0x40
 8005366:	eba0 000a 	sub.w	r0, r0, sl
 800536a:	fa03 f000 	lsl.w	r0, r3, r0
 800536e:	9b04      	ldr	r3, [sp, #16]
 8005370:	4303      	orrs	r3, r0
 8005372:	3401      	adds	r4, #1
 8005374:	9304      	str	r3, [sp, #16]
 8005376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800537a:	4826      	ldr	r0, [pc, #152]	; (8005414 <_svfiprintf_r+0x1f0>)
 800537c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005380:	2206      	movs	r2, #6
 8005382:	f7fa ff2d 	bl	80001e0 <memchr>
 8005386:	2800      	cmp	r0, #0
 8005388:	d038      	beq.n	80053fc <_svfiprintf_r+0x1d8>
 800538a:	4b23      	ldr	r3, [pc, #140]	; (8005418 <_svfiprintf_r+0x1f4>)
 800538c:	bb1b      	cbnz	r3, 80053d6 <_svfiprintf_r+0x1b2>
 800538e:	9b03      	ldr	r3, [sp, #12]
 8005390:	3307      	adds	r3, #7
 8005392:	f023 0307 	bic.w	r3, r3, #7
 8005396:	3308      	adds	r3, #8
 8005398:	9303      	str	r3, [sp, #12]
 800539a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800539c:	4433      	add	r3, r6
 800539e:	9309      	str	r3, [sp, #36]	; 0x24
 80053a0:	e767      	b.n	8005272 <_svfiprintf_r+0x4e>
 80053a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80053a6:	460c      	mov	r4, r1
 80053a8:	2001      	movs	r0, #1
 80053aa:	e7a5      	b.n	80052f8 <_svfiprintf_r+0xd4>
 80053ac:	2300      	movs	r3, #0
 80053ae:	3401      	adds	r4, #1
 80053b0:	9305      	str	r3, [sp, #20]
 80053b2:	4619      	mov	r1, r3
 80053b4:	f04f 0c0a 	mov.w	ip, #10
 80053b8:	4620      	mov	r0, r4
 80053ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053be:	3a30      	subs	r2, #48	; 0x30
 80053c0:	2a09      	cmp	r2, #9
 80053c2:	d903      	bls.n	80053cc <_svfiprintf_r+0x1a8>
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0c5      	beq.n	8005354 <_svfiprintf_r+0x130>
 80053c8:	9105      	str	r1, [sp, #20]
 80053ca:	e7c3      	b.n	8005354 <_svfiprintf_r+0x130>
 80053cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80053d0:	4604      	mov	r4, r0
 80053d2:	2301      	movs	r3, #1
 80053d4:	e7f0      	b.n	80053b8 <_svfiprintf_r+0x194>
 80053d6:	ab03      	add	r3, sp, #12
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	462a      	mov	r2, r5
 80053dc:	4b0f      	ldr	r3, [pc, #60]	; (800541c <_svfiprintf_r+0x1f8>)
 80053de:	a904      	add	r1, sp, #16
 80053e0:	4638      	mov	r0, r7
 80053e2:	f3af 8000 	nop.w
 80053e6:	1c42      	adds	r2, r0, #1
 80053e8:	4606      	mov	r6, r0
 80053ea:	d1d6      	bne.n	800539a <_svfiprintf_r+0x176>
 80053ec:	89ab      	ldrh	r3, [r5, #12]
 80053ee:	065b      	lsls	r3, r3, #25
 80053f0:	f53f af2c 	bmi.w	800524c <_svfiprintf_r+0x28>
 80053f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053f6:	b01d      	add	sp, #116	; 0x74
 80053f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053fc:	ab03      	add	r3, sp, #12
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	462a      	mov	r2, r5
 8005402:	4b06      	ldr	r3, [pc, #24]	; (800541c <_svfiprintf_r+0x1f8>)
 8005404:	a904      	add	r1, sp, #16
 8005406:	4638      	mov	r0, r7
 8005408:	f000 f87a 	bl	8005500 <_printf_i>
 800540c:	e7eb      	b.n	80053e6 <_svfiprintf_r+0x1c2>
 800540e:	bf00      	nop
 8005410:	08005ffc 	.word	0x08005ffc
 8005414:	08006006 	.word	0x08006006
 8005418:	00000000 	.word	0x00000000
 800541c:	0800516d 	.word	0x0800516d
 8005420:	08006002 	.word	0x08006002

08005424 <_printf_common>:
 8005424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005428:	4616      	mov	r6, r2
 800542a:	4699      	mov	r9, r3
 800542c:	688a      	ldr	r2, [r1, #8]
 800542e:	690b      	ldr	r3, [r1, #16]
 8005430:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005434:	4293      	cmp	r3, r2
 8005436:	bfb8      	it	lt
 8005438:	4613      	movlt	r3, r2
 800543a:	6033      	str	r3, [r6, #0]
 800543c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005440:	4607      	mov	r7, r0
 8005442:	460c      	mov	r4, r1
 8005444:	b10a      	cbz	r2, 800544a <_printf_common+0x26>
 8005446:	3301      	adds	r3, #1
 8005448:	6033      	str	r3, [r6, #0]
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	0699      	lsls	r1, r3, #26
 800544e:	bf42      	ittt	mi
 8005450:	6833      	ldrmi	r3, [r6, #0]
 8005452:	3302      	addmi	r3, #2
 8005454:	6033      	strmi	r3, [r6, #0]
 8005456:	6825      	ldr	r5, [r4, #0]
 8005458:	f015 0506 	ands.w	r5, r5, #6
 800545c:	d106      	bne.n	800546c <_printf_common+0x48>
 800545e:	f104 0a19 	add.w	sl, r4, #25
 8005462:	68e3      	ldr	r3, [r4, #12]
 8005464:	6832      	ldr	r2, [r6, #0]
 8005466:	1a9b      	subs	r3, r3, r2
 8005468:	42ab      	cmp	r3, r5
 800546a:	dc26      	bgt.n	80054ba <_printf_common+0x96>
 800546c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005470:	1e13      	subs	r3, r2, #0
 8005472:	6822      	ldr	r2, [r4, #0]
 8005474:	bf18      	it	ne
 8005476:	2301      	movne	r3, #1
 8005478:	0692      	lsls	r2, r2, #26
 800547a:	d42b      	bmi.n	80054d4 <_printf_common+0xb0>
 800547c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005480:	4649      	mov	r1, r9
 8005482:	4638      	mov	r0, r7
 8005484:	47c0      	blx	r8
 8005486:	3001      	adds	r0, #1
 8005488:	d01e      	beq.n	80054c8 <_printf_common+0xa4>
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	68e5      	ldr	r5, [r4, #12]
 800548e:	6832      	ldr	r2, [r6, #0]
 8005490:	f003 0306 	and.w	r3, r3, #6
 8005494:	2b04      	cmp	r3, #4
 8005496:	bf08      	it	eq
 8005498:	1aad      	subeq	r5, r5, r2
 800549a:	68a3      	ldr	r3, [r4, #8]
 800549c:	6922      	ldr	r2, [r4, #16]
 800549e:	bf0c      	ite	eq
 80054a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054a4:	2500      	movne	r5, #0
 80054a6:	4293      	cmp	r3, r2
 80054a8:	bfc4      	itt	gt
 80054aa:	1a9b      	subgt	r3, r3, r2
 80054ac:	18ed      	addgt	r5, r5, r3
 80054ae:	2600      	movs	r6, #0
 80054b0:	341a      	adds	r4, #26
 80054b2:	42b5      	cmp	r5, r6
 80054b4:	d11a      	bne.n	80054ec <_printf_common+0xc8>
 80054b6:	2000      	movs	r0, #0
 80054b8:	e008      	b.n	80054cc <_printf_common+0xa8>
 80054ba:	2301      	movs	r3, #1
 80054bc:	4652      	mov	r2, sl
 80054be:	4649      	mov	r1, r9
 80054c0:	4638      	mov	r0, r7
 80054c2:	47c0      	blx	r8
 80054c4:	3001      	adds	r0, #1
 80054c6:	d103      	bne.n	80054d0 <_printf_common+0xac>
 80054c8:	f04f 30ff 	mov.w	r0, #4294967295
 80054cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d0:	3501      	adds	r5, #1
 80054d2:	e7c6      	b.n	8005462 <_printf_common+0x3e>
 80054d4:	18e1      	adds	r1, r4, r3
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	2030      	movs	r0, #48	; 0x30
 80054da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054de:	4422      	add	r2, r4
 80054e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054e8:	3302      	adds	r3, #2
 80054ea:	e7c7      	b.n	800547c <_printf_common+0x58>
 80054ec:	2301      	movs	r3, #1
 80054ee:	4622      	mov	r2, r4
 80054f0:	4649      	mov	r1, r9
 80054f2:	4638      	mov	r0, r7
 80054f4:	47c0      	blx	r8
 80054f6:	3001      	adds	r0, #1
 80054f8:	d0e6      	beq.n	80054c8 <_printf_common+0xa4>
 80054fa:	3601      	adds	r6, #1
 80054fc:	e7d9      	b.n	80054b2 <_printf_common+0x8e>
	...

08005500 <_printf_i>:
 8005500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005504:	460c      	mov	r4, r1
 8005506:	4691      	mov	r9, r2
 8005508:	7e27      	ldrb	r7, [r4, #24]
 800550a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800550c:	2f78      	cmp	r7, #120	; 0x78
 800550e:	4680      	mov	r8, r0
 8005510:	469a      	mov	sl, r3
 8005512:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005516:	d807      	bhi.n	8005528 <_printf_i+0x28>
 8005518:	2f62      	cmp	r7, #98	; 0x62
 800551a:	d80a      	bhi.n	8005532 <_printf_i+0x32>
 800551c:	2f00      	cmp	r7, #0
 800551e:	f000 80d8 	beq.w	80056d2 <_printf_i+0x1d2>
 8005522:	2f58      	cmp	r7, #88	; 0x58
 8005524:	f000 80a3 	beq.w	800566e <_printf_i+0x16e>
 8005528:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800552c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005530:	e03a      	b.n	80055a8 <_printf_i+0xa8>
 8005532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005536:	2b15      	cmp	r3, #21
 8005538:	d8f6      	bhi.n	8005528 <_printf_i+0x28>
 800553a:	a001      	add	r0, pc, #4	; (adr r0, 8005540 <_printf_i+0x40>)
 800553c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005540:	08005599 	.word	0x08005599
 8005544:	080055ad 	.word	0x080055ad
 8005548:	08005529 	.word	0x08005529
 800554c:	08005529 	.word	0x08005529
 8005550:	08005529 	.word	0x08005529
 8005554:	08005529 	.word	0x08005529
 8005558:	080055ad 	.word	0x080055ad
 800555c:	08005529 	.word	0x08005529
 8005560:	08005529 	.word	0x08005529
 8005564:	08005529 	.word	0x08005529
 8005568:	08005529 	.word	0x08005529
 800556c:	080056b9 	.word	0x080056b9
 8005570:	080055dd 	.word	0x080055dd
 8005574:	0800569b 	.word	0x0800569b
 8005578:	08005529 	.word	0x08005529
 800557c:	08005529 	.word	0x08005529
 8005580:	080056db 	.word	0x080056db
 8005584:	08005529 	.word	0x08005529
 8005588:	080055dd 	.word	0x080055dd
 800558c:	08005529 	.word	0x08005529
 8005590:	08005529 	.word	0x08005529
 8005594:	080056a3 	.word	0x080056a3
 8005598:	680b      	ldr	r3, [r1, #0]
 800559a:	1d1a      	adds	r2, r3, #4
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	600a      	str	r2, [r1, #0]
 80055a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80055a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055a8:	2301      	movs	r3, #1
 80055aa:	e0a3      	b.n	80056f4 <_printf_i+0x1f4>
 80055ac:	6825      	ldr	r5, [r4, #0]
 80055ae:	6808      	ldr	r0, [r1, #0]
 80055b0:	062e      	lsls	r6, r5, #24
 80055b2:	f100 0304 	add.w	r3, r0, #4
 80055b6:	d50a      	bpl.n	80055ce <_printf_i+0xce>
 80055b8:	6805      	ldr	r5, [r0, #0]
 80055ba:	600b      	str	r3, [r1, #0]
 80055bc:	2d00      	cmp	r5, #0
 80055be:	da03      	bge.n	80055c8 <_printf_i+0xc8>
 80055c0:	232d      	movs	r3, #45	; 0x2d
 80055c2:	426d      	negs	r5, r5
 80055c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055c8:	485e      	ldr	r0, [pc, #376]	; (8005744 <_printf_i+0x244>)
 80055ca:	230a      	movs	r3, #10
 80055cc:	e019      	b.n	8005602 <_printf_i+0x102>
 80055ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80055d2:	6805      	ldr	r5, [r0, #0]
 80055d4:	600b      	str	r3, [r1, #0]
 80055d6:	bf18      	it	ne
 80055d8:	b22d      	sxthne	r5, r5
 80055da:	e7ef      	b.n	80055bc <_printf_i+0xbc>
 80055dc:	680b      	ldr	r3, [r1, #0]
 80055de:	6825      	ldr	r5, [r4, #0]
 80055e0:	1d18      	adds	r0, r3, #4
 80055e2:	6008      	str	r0, [r1, #0]
 80055e4:	0628      	lsls	r0, r5, #24
 80055e6:	d501      	bpl.n	80055ec <_printf_i+0xec>
 80055e8:	681d      	ldr	r5, [r3, #0]
 80055ea:	e002      	b.n	80055f2 <_printf_i+0xf2>
 80055ec:	0669      	lsls	r1, r5, #25
 80055ee:	d5fb      	bpl.n	80055e8 <_printf_i+0xe8>
 80055f0:	881d      	ldrh	r5, [r3, #0]
 80055f2:	4854      	ldr	r0, [pc, #336]	; (8005744 <_printf_i+0x244>)
 80055f4:	2f6f      	cmp	r7, #111	; 0x6f
 80055f6:	bf0c      	ite	eq
 80055f8:	2308      	moveq	r3, #8
 80055fa:	230a      	movne	r3, #10
 80055fc:	2100      	movs	r1, #0
 80055fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005602:	6866      	ldr	r6, [r4, #4]
 8005604:	60a6      	str	r6, [r4, #8]
 8005606:	2e00      	cmp	r6, #0
 8005608:	bfa2      	ittt	ge
 800560a:	6821      	ldrge	r1, [r4, #0]
 800560c:	f021 0104 	bicge.w	r1, r1, #4
 8005610:	6021      	strge	r1, [r4, #0]
 8005612:	b90d      	cbnz	r5, 8005618 <_printf_i+0x118>
 8005614:	2e00      	cmp	r6, #0
 8005616:	d04d      	beq.n	80056b4 <_printf_i+0x1b4>
 8005618:	4616      	mov	r6, r2
 800561a:	fbb5 f1f3 	udiv	r1, r5, r3
 800561e:	fb03 5711 	mls	r7, r3, r1, r5
 8005622:	5dc7      	ldrb	r7, [r0, r7]
 8005624:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005628:	462f      	mov	r7, r5
 800562a:	42bb      	cmp	r3, r7
 800562c:	460d      	mov	r5, r1
 800562e:	d9f4      	bls.n	800561a <_printf_i+0x11a>
 8005630:	2b08      	cmp	r3, #8
 8005632:	d10b      	bne.n	800564c <_printf_i+0x14c>
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	07df      	lsls	r7, r3, #31
 8005638:	d508      	bpl.n	800564c <_printf_i+0x14c>
 800563a:	6923      	ldr	r3, [r4, #16]
 800563c:	6861      	ldr	r1, [r4, #4]
 800563e:	4299      	cmp	r1, r3
 8005640:	bfde      	ittt	le
 8005642:	2330      	movle	r3, #48	; 0x30
 8005644:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005648:	f106 36ff 	addle.w	r6, r6, #4294967295
 800564c:	1b92      	subs	r2, r2, r6
 800564e:	6122      	str	r2, [r4, #16]
 8005650:	f8cd a000 	str.w	sl, [sp]
 8005654:	464b      	mov	r3, r9
 8005656:	aa03      	add	r2, sp, #12
 8005658:	4621      	mov	r1, r4
 800565a:	4640      	mov	r0, r8
 800565c:	f7ff fee2 	bl	8005424 <_printf_common>
 8005660:	3001      	adds	r0, #1
 8005662:	d14c      	bne.n	80056fe <_printf_i+0x1fe>
 8005664:	f04f 30ff 	mov.w	r0, #4294967295
 8005668:	b004      	add	sp, #16
 800566a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800566e:	4835      	ldr	r0, [pc, #212]	; (8005744 <_printf_i+0x244>)
 8005670:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	680e      	ldr	r6, [r1, #0]
 8005678:	061f      	lsls	r7, r3, #24
 800567a:	f856 5b04 	ldr.w	r5, [r6], #4
 800567e:	600e      	str	r6, [r1, #0]
 8005680:	d514      	bpl.n	80056ac <_printf_i+0x1ac>
 8005682:	07d9      	lsls	r1, r3, #31
 8005684:	bf44      	itt	mi
 8005686:	f043 0320 	orrmi.w	r3, r3, #32
 800568a:	6023      	strmi	r3, [r4, #0]
 800568c:	b91d      	cbnz	r5, 8005696 <_printf_i+0x196>
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	f023 0320 	bic.w	r3, r3, #32
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	2310      	movs	r3, #16
 8005698:	e7b0      	b.n	80055fc <_printf_i+0xfc>
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	f043 0320 	orr.w	r3, r3, #32
 80056a0:	6023      	str	r3, [r4, #0]
 80056a2:	2378      	movs	r3, #120	; 0x78
 80056a4:	4828      	ldr	r0, [pc, #160]	; (8005748 <_printf_i+0x248>)
 80056a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056aa:	e7e3      	b.n	8005674 <_printf_i+0x174>
 80056ac:	065e      	lsls	r6, r3, #25
 80056ae:	bf48      	it	mi
 80056b0:	b2ad      	uxthmi	r5, r5
 80056b2:	e7e6      	b.n	8005682 <_printf_i+0x182>
 80056b4:	4616      	mov	r6, r2
 80056b6:	e7bb      	b.n	8005630 <_printf_i+0x130>
 80056b8:	680b      	ldr	r3, [r1, #0]
 80056ba:	6826      	ldr	r6, [r4, #0]
 80056bc:	6960      	ldr	r0, [r4, #20]
 80056be:	1d1d      	adds	r5, r3, #4
 80056c0:	600d      	str	r5, [r1, #0]
 80056c2:	0635      	lsls	r5, r6, #24
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	d501      	bpl.n	80056cc <_printf_i+0x1cc>
 80056c8:	6018      	str	r0, [r3, #0]
 80056ca:	e002      	b.n	80056d2 <_printf_i+0x1d2>
 80056cc:	0671      	lsls	r1, r6, #25
 80056ce:	d5fb      	bpl.n	80056c8 <_printf_i+0x1c8>
 80056d0:	8018      	strh	r0, [r3, #0]
 80056d2:	2300      	movs	r3, #0
 80056d4:	6123      	str	r3, [r4, #16]
 80056d6:	4616      	mov	r6, r2
 80056d8:	e7ba      	b.n	8005650 <_printf_i+0x150>
 80056da:	680b      	ldr	r3, [r1, #0]
 80056dc:	1d1a      	adds	r2, r3, #4
 80056de:	600a      	str	r2, [r1, #0]
 80056e0:	681e      	ldr	r6, [r3, #0]
 80056e2:	6862      	ldr	r2, [r4, #4]
 80056e4:	2100      	movs	r1, #0
 80056e6:	4630      	mov	r0, r6
 80056e8:	f7fa fd7a 	bl	80001e0 <memchr>
 80056ec:	b108      	cbz	r0, 80056f2 <_printf_i+0x1f2>
 80056ee:	1b80      	subs	r0, r0, r6
 80056f0:	6060      	str	r0, [r4, #4]
 80056f2:	6863      	ldr	r3, [r4, #4]
 80056f4:	6123      	str	r3, [r4, #16]
 80056f6:	2300      	movs	r3, #0
 80056f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056fc:	e7a8      	b.n	8005650 <_printf_i+0x150>
 80056fe:	6923      	ldr	r3, [r4, #16]
 8005700:	4632      	mov	r2, r6
 8005702:	4649      	mov	r1, r9
 8005704:	4640      	mov	r0, r8
 8005706:	47d0      	blx	sl
 8005708:	3001      	adds	r0, #1
 800570a:	d0ab      	beq.n	8005664 <_printf_i+0x164>
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	079b      	lsls	r3, r3, #30
 8005710:	d413      	bmi.n	800573a <_printf_i+0x23a>
 8005712:	68e0      	ldr	r0, [r4, #12]
 8005714:	9b03      	ldr	r3, [sp, #12]
 8005716:	4298      	cmp	r0, r3
 8005718:	bfb8      	it	lt
 800571a:	4618      	movlt	r0, r3
 800571c:	e7a4      	b.n	8005668 <_printf_i+0x168>
 800571e:	2301      	movs	r3, #1
 8005720:	4632      	mov	r2, r6
 8005722:	4649      	mov	r1, r9
 8005724:	4640      	mov	r0, r8
 8005726:	47d0      	blx	sl
 8005728:	3001      	adds	r0, #1
 800572a:	d09b      	beq.n	8005664 <_printf_i+0x164>
 800572c:	3501      	adds	r5, #1
 800572e:	68e3      	ldr	r3, [r4, #12]
 8005730:	9903      	ldr	r1, [sp, #12]
 8005732:	1a5b      	subs	r3, r3, r1
 8005734:	42ab      	cmp	r3, r5
 8005736:	dcf2      	bgt.n	800571e <_printf_i+0x21e>
 8005738:	e7eb      	b.n	8005712 <_printf_i+0x212>
 800573a:	2500      	movs	r5, #0
 800573c:	f104 0619 	add.w	r6, r4, #25
 8005740:	e7f5      	b.n	800572e <_printf_i+0x22e>
 8005742:	bf00      	nop
 8005744:	0800600d 	.word	0x0800600d
 8005748:	0800601e 	.word	0x0800601e

0800574c <memcpy>:
 800574c:	440a      	add	r2, r1
 800574e:	4291      	cmp	r1, r2
 8005750:	f100 33ff 	add.w	r3, r0, #4294967295
 8005754:	d100      	bne.n	8005758 <memcpy+0xc>
 8005756:	4770      	bx	lr
 8005758:	b510      	push	{r4, lr}
 800575a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800575e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005762:	4291      	cmp	r1, r2
 8005764:	d1f9      	bne.n	800575a <memcpy+0xe>
 8005766:	bd10      	pop	{r4, pc}

08005768 <memmove>:
 8005768:	4288      	cmp	r0, r1
 800576a:	b510      	push	{r4, lr}
 800576c:	eb01 0402 	add.w	r4, r1, r2
 8005770:	d902      	bls.n	8005778 <memmove+0x10>
 8005772:	4284      	cmp	r4, r0
 8005774:	4623      	mov	r3, r4
 8005776:	d807      	bhi.n	8005788 <memmove+0x20>
 8005778:	1e43      	subs	r3, r0, #1
 800577a:	42a1      	cmp	r1, r4
 800577c:	d008      	beq.n	8005790 <memmove+0x28>
 800577e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005782:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005786:	e7f8      	b.n	800577a <memmove+0x12>
 8005788:	4402      	add	r2, r0
 800578a:	4601      	mov	r1, r0
 800578c:	428a      	cmp	r2, r1
 800578e:	d100      	bne.n	8005792 <memmove+0x2a>
 8005790:	bd10      	pop	{r4, pc}
 8005792:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005796:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800579a:	e7f7      	b.n	800578c <memmove+0x24>

0800579c <_free_r>:
 800579c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800579e:	2900      	cmp	r1, #0
 80057a0:	d048      	beq.n	8005834 <_free_r+0x98>
 80057a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057a6:	9001      	str	r0, [sp, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f1a1 0404 	sub.w	r4, r1, #4
 80057ae:	bfb8      	it	lt
 80057b0:	18e4      	addlt	r4, r4, r3
 80057b2:	f000 f8d3 	bl	800595c <__malloc_lock>
 80057b6:	4a20      	ldr	r2, [pc, #128]	; (8005838 <_free_r+0x9c>)
 80057b8:	9801      	ldr	r0, [sp, #4]
 80057ba:	6813      	ldr	r3, [r2, #0]
 80057bc:	4615      	mov	r5, r2
 80057be:	b933      	cbnz	r3, 80057ce <_free_r+0x32>
 80057c0:	6063      	str	r3, [r4, #4]
 80057c2:	6014      	str	r4, [r2, #0]
 80057c4:	b003      	add	sp, #12
 80057c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057ca:	f000 b8cd 	b.w	8005968 <__malloc_unlock>
 80057ce:	42a3      	cmp	r3, r4
 80057d0:	d90b      	bls.n	80057ea <_free_r+0x4e>
 80057d2:	6821      	ldr	r1, [r4, #0]
 80057d4:	1862      	adds	r2, r4, r1
 80057d6:	4293      	cmp	r3, r2
 80057d8:	bf04      	itt	eq
 80057da:	681a      	ldreq	r2, [r3, #0]
 80057dc:	685b      	ldreq	r3, [r3, #4]
 80057de:	6063      	str	r3, [r4, #4]
 80057e0:	bf04      	itt	eq
 80057e2:	1852      	addeq	r2, r2, r1
 80057e4:	6022      	streq	r2, [r4, #0]
 80057e6:	602c      	str	r4, [r5, #0]
 80057e8:	e7ec      	b.n	80057c4 <_free_r+0x28>
 80057ea:	461a      	mov	r2, r3
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	b10b      	cbz	r3, 80057f4 <_free_r+0x58>
 80057f0:	42a3      	cmp	r3, r4
 80057f2:	d9fa      	bls.n	80057ea <_free_r+0x4e>
 80057f4:	6811      	ldr	r1, [r2, #0]
 80057f6:	1855      	adds	r5, r2, r1
 80057f8:	42a5      	cmp	r5, r4
 80057fa:	d10b      	bne.n	8005814 <_free_r+0x78>
 80057fc:	6824      	ldr	r4, [r4, #0]
 80057fe:	4421      	add	r1, r4
 8005800:	1854      	adds	r4, r2, r1
 8005802:	42a3      	cmp	r3, r4
 8005804:	6011      	str	r1, [r2, #0]
 8005806:	d1dd      	bne.n	80057c4 <_free_r+0x28>
 8005808:	681c      	ldr	r4, [r3, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	6053      	str	r3, [r2, #4]
 800580e:	4421      	add	r1, r4
 8005810:	6011      	str	r1, [r2, #0]
 8005812:	e7d7      	b.n	80057c4 <_free_r+0x28>
 8005814:	d902      	bls.n	800581c <_free_r+0x80>
 8005816:	230c      	movs	r3, #12
 8005818:	6003      	str	r3, [r0, #0]
 800581a:	e7d3      	b.n	80057c4 <_free_r+0x28>
 800581c:	6825      	ldr	r5, [r4, #0]
 800581e:	1961      	adds	r1, r4, r5
 8005820:	428b      	cmp	r3, r1
 8005822:	bf04      	itt	eq
 8005824:	6819      	ldreq	r1, [r3, #0]
 8005826:	685b      	ldreq	r3, [r3, #4]
 8005828:	6063      	str	r3, [r4, #4]
 800582a:	bf04      	itt	eq
 800582c:	1949      	addeq	r1, r1, r5
 800582e:	6021      	streq	r1, [r4, #0]
 8005830:	6054      	str	r4, [r2, #4]
 8005832:	e7c7      	b.n	80057c4 <_free_r+0x28>
 8005834:	b003      	add	sp, #12
 8005836:	bd30      	pop	{r4, r5, pc}
 8005838:	200008c8 	.word	0x200008c8

0800583c <_malloc_r>:
 800583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583e:	1ccd      	adds	r5, r1, #3
 8005840:	f025 0503 	bic.w	r5, r5, #3
 8005844:	3508      	adds	r5, #8
 8005846:	2d0c      	cmp	r5, #12
 8005848:	bf38      	it	cc
 800584a:	250c      	movcc	r5, #12
 800584c:	2d00      	cmp	r5, #0
 800584e:	4606      	mov	r6, r0
 8005850:	db01      	blt.n	8005856 <_malloc_r+0x1a>
 8005852:	42a9      	cmp	r1, r5
 8005854:	d903      	bls.n	800585e <_malloc_r+0x22>
 8005856:	230c      	movs	r3, #12
 8005858:	6033      	str	r3, [r6, #0]
 800585a:	2000      	movs	r0, #0
 800585c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800585e:	f000 f87d 	bl	800595c <__malloc_lock>
 8005862:	4921      	ldr	r1, [pc, #132]	; (80058e8 <_malloc_r+0xac>)
 8005864:	680a      	ldr	r2, [r1, #0]
 8005866:	4614      	mov	r4, r2
 8005868:	b99c      	cbnz	r4, 8005892 <_malloc_r+0x56>
 800586a:	4f20      	ldr	r7, [pc, #128]	; (80058ec <_malloc_r+0xb0>)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	b923      	cbnz	r3, 800587a <_malloc_r+0x3e>
 8005870:	4621      	mov	r1, r4
 8005872:	4630      	mov	r0, r6
 8005874:	f000 f862 	bl	800593c <_sbrk_r>
 8005878:	6038      	str	r0, [r7, #0]
 800587a:	4629      	mov	r1, r5
 800587c:	4630      	mov	r0, r6
 800587e:	f000 f85d 	bl	800593c <_sbrk_r>
 8005882:	1c43      	adds	r3, r0, #1
 8005884:	d123      	bne.n	80058ce <_malloc_r+0x92>
 8005886:	230c      	movs	r3, #12
 8005888:	6033      	str	r3, [r6, #0]
 800588a:	4630      	mov	r0, r6
 800588c:	f000 f86c 	bl	8005968 <__malloc_unlock>
 8005890:	e7e3      	b.n	800585a <_malloc_r+0x1e>
 8005892:	6823      	ldr	r3, [r4, #0]
 8005894:	1b5b      	subs	r3, r3, r5
 8005896:	d417      	bmi.n	80058c8 <_malloc_r+0x8c>
 8005898:	2b0b      	cmp	r3, #11
 800589a:	d903      	bls.n	80058a4 <_malloc_r+0x68>
 800589c:	6023      	str	r3, [r4, #0]
 800589e:	441c      	add	r4, r3
 80058a0:	6025      	str	r5, [r4, #0]
 80058a2:	e004      	b.n	80058ae <_malloc_r+0x72>
 80058a4:	6863      	ldr	r3, [r4, #4]
 80058a6:	42a2      	cmp	r2, r4
 80058a8:	bf0c      	ite	eq
 80058aa:	600b      	streq	r3, [r1, #0]
 80058ac:	6053      	strne	r3, [r2, #4]
 80058ae:	4630      	mov	r0, r6
 80058b0:	f000 f85a 	bl	8005968 <__malloc_unlock>
 80058b4:	f104 000b 	add.w	r0, r4, #11
 80058b8:	1d23      	adds	r3, r4, #4
 80058ba:	f020 0007 	bic.w	r0, r0, #7
 80058be:	1ac2      	subs	r2, r0, r3
 80058c0:	d0cc      	beq.n	800585c <_malloc_r+0x20>
 80058c2:	1a1b      	subs	r3, r3, r0
 80058c4:	50a3      	str	r3, [r4, r2]
 80058c6:	e7c9      	b.n	800585c <_malloc_r+0x20>
 80058c8:	4622      	mov	r2, r4
 80058ca:	6864      	ldr	r4, [r4, #4]
 80058cc:	e7cc      	b.n	8005868 <_malloc_r+0x2c>
 80058ce:	1cc4      	adds	r4, r0, #3
 80058d0:	f024 0403 	bic.w	r4, r4, #3
 80058d4:	42a0      	cmp	r0, r4
 80058d6:	d0e3      	beq.n	80058a0 <_malloc_r+0x64>
 80058d8:	1a21      	subs	r1, r4, r0
 80058da:	4630      	mov	r0, r6
 80058dc:	f000 f82e 	bl	800593c <_sbrk_r>
 80058e0:	3001      	adds	r0, #1
 80058e2:	d1dd      	bne.n	80058a0 <_malloc_r+0x64>
 80058e4:	e7cf      	b.n	8005886 <_malloc_r+0x4a>
 80058e6:	bf00      	nop
 80058e8:	200008c8 	.word	0x200008c8
 80058ec:	200008cc 	.word	0x200008cc

080058f0 <_realloc_r>:
 80058f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f2:	4607      	mov	r7, r0
 80058f4:	4614      	mov	r4, r2
 80058f6:	460e      	mov	r6, r1
 80058f8:	b921      	cbnz	r1, 8005904 <_realloc_r+0x14>
 80058fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80058fe:	4611      	mov	r1, r2
 8005900:	f7ff bf9c 	b.w	800583c <_malloc_r>
 8005904:	b922      	cbnz	r2, 8005910 <_realloc_r+0x20>
 8005906:	f7ff ff49 	bl	800579c <_free_r>
 800590a:	4625      	mov	r5, r4
 800590c:	4628      	mov	r0, r5
 800590e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005910:	f000 f830 	bl	8005974 <_malloc_usable_size_r>
 8005914:	42a0      	cmp	r0, r4
 8005916:	d20f      	bcs.n	8005938 <_realloc_r+0x48>
 8005918:	4621      	mov	r1, r4
 800591a:	4638      	mov	r0, r7
 800591c:	f7ff ff8e 	bl	800583c <_malloc_r>
 8005920:	4605      	mov	r5, r0
 8005922:	2800      	cmp	r0, #0
 8005924:	d0f2      	beq.n	800590c <_realloc_r+0x1c>
 8005926:	4631      	mov	r1, r6
 8005928:	4622      	mov	r2, r4
 800592a:	f7ff ff0f 	bl	800574c <memcpy>
 800592e:	4631      	mov	r1, r6
 8005930:	4638      	mov	r0, r7
 8005932:	f7ff ff33 	bl	800579c <_free_r>
 8005936:	e7e9      	b.n	800590c <_realloc_r+0x1c>
 8005938:	4635      	mov	r5, r6
 800593a:	e7e7      	b.n	800590c <_realloc_r+0x1c>

0800593c <_sbrk_r>:
 800593c:	b538      	push	{r3, r4, r5, lr}
 800593e:	4d06      	ldr	r5, [pc, #24]	; (8005958 <_sbrk_r+0x1c>)
 8005940:	2300      	movs	r3, #0
 8005942:	4604      	mov	r4, r0
 8005944:	4608      	mov	r0, r1
 8005946:	602b      	str	r3, [r5, #0]
 8005948:	f7fc fbd6 	bl	80020f8 <_sbrk>
 800594c:	1c43      	adds	r3, r0, #1
 800594e:	d102      	bne.n	8005956 <_sbrk_r+0x1a>
 8005950:	682b      	ldr	r3, [r5, #0]
 8005952:	b103      	cbz	r3, 8005956 <_sbrk_r+0x1a>
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	bd38      	pop	{r3, r4, r5, pc}
 8005958:	20000b38 	.word	0x20000b38

0800595c <__malloc_lock>:
 800595c:	4801      	ldr	r0, [pc, #4]	; (8005964 <__malloc_lock+0x8>)
 800595e:	f000 b811 	b.w	8005984 <__retarget_lock_acquire_recursive>
 8005962:	bf00      	nop
 8005964:	20000b40 	.word	0x20000b40

08005968 <__malloc_unlock>:
 8005968:	4801      	ldr	r0, [pc, #4]	; (8005970 <__malloc_unlock+0x8>)
 800596a:	f000 b80c 	b.w	8005986 <__retarget_lock_release_recursive>
 800596e:	bf00      	nop
 8005970:	20000b40 	.word	0x20000b40

08005974 <_malloc_usable_size_r>:
 8005974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005978:	1f18      	subs	r0, r3, #4
 800597a:	2b00      	cmp	r3, #0
 800597c:	bfbc      	itt	lt
 800597e:	580b      	ldrlt	r3, [r1, r0]
 8005980:	18c0      	addlt	r0, r0, r3
 8005982:	4770      	bx	lr

08005984 <__retarget_lock_acquire_recursive>:
 8005984:	4770      	bx	lr

08005986 <__retarget_lock_release_recursive>:
 8005986:	4770      	bx	lr

08005988 <_init>:
 8005988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598a:	bf00      	nop
 800598c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598e:	bc08      	pop	{r3}
 8005990:	469e      	mov	lr, r3
 8005992:	4770      	bx	lr

08005994 <_fini>:
 8005994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005996:	bf00      	nop
 8005998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800599a:	bc08      	pop	{r3}
 800599c:	469e      	mov	lr, r3
 800599e:	4770      	bx	lr
