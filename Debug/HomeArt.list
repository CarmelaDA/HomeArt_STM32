
HomeArt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b8  08008fe4  08008fe4  00018fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800989c  0800989c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800989c  0800989c  0001989c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098a4  080098a4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098a4  080098a4  000198a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098a8  080098a8  000198a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080098ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000e04  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000e74  20000e74  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000193be  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003662  00000000  00000000  0003945e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  0003cac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ee8  00000000  00000000  0003dad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c7e  00000000  00000000  0003e9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016e9d  00000000  00000000  00063636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8f2e  00000000  00000000  0007a4d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00153401  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045ec  00000000  00000000  00153454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008fcc 	.word	0x08008fcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008fcc 	.word	0x08008fcc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468c      	mov	ip, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8083 	bne.w	8000c02 <__udivmoddi4+0x116>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d947      	bls.n	8000b92 <__udivmoddi4+0xa6>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b142      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	f1c2 0020 	rsb	r0, r2, #32
 8000b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b10:	4091      	lsls	r1, r2
 8000b12:	4097      	lsls	r7, r2
 8000b14:	ea40 0c01 	orr.w	ip, r0, r1
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbbc f6f8 	udiv	r6, ip, r8
 8000b24:	fa1f fe87 	uxth.w	lr, r7
 8000b28:	fb08 c116 	mls	r1, r8, r6, ip
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb06 f10e 	mul.w	r1, r6, lr
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b3e:	f080 8119 	bcs.w	8000d74 <__udivmoddi4+0x288>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8116 	bls.w	8000d74 <__udivmoddi4+0x288>
 8000b48:	3e02      	subs	r6, #2
 8000b4a:	443b      	add	r3, r7
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3310 	mls	r3, r8, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8105 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f240 8102 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b74:	3802      	subs	r0, #2
 8000b76:	443c      	add	r4, r7
 8000b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	2600      	movs	r6, #0
 8000b82:	b11d      	cbz	r5, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	b902      	cbnz	r2, 8000b96 <__udivmoddi4+0xaa>
 8000b94:	deff      	udf	#255	; 0xff
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d150      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000b9e:	1bcb      	subs	r3, r1, r7
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	2601      	movs	r6, #1
 8000baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0xe2>
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	f200 80e9 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1ac9      	subs	r1, r1, r3
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x10c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x10a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80d9 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e7bf      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <__udivmoddi4+0x282>
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c12:	4630      	mov	r0, r6
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f683 	clz	r6, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x1cc>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b8 	bhi.w	8000d9c <__udivmoddi4+0x2b0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0a8      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f603 	lsr.w	r6, r0, r3
 8000c48:	4097      	lsls	r7, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c52:	40d9      	lsrs	r1, r3
 8000c54:	4330      	orrs	r0, r6
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb06 f108 	mul.w	r1, r6, r8
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x19c>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c7a:	f080 808d 	bcs.w	8000d98 <__udivmoddi4+0x2ac>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 808a 	bls.w	8000d98 <__udivmoddi4+0x2ac>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b281      	uxth	r1, r0
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb00 f308 	mul.w	r3, r0, r8
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca6:	d273      	bcs.n	8000d90 <__udivmoddi4+0x2a4>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d971      	bls.n	8000d90 <__udivmoddi4+0x2a4>
 8000cac:	3802      	subs	r0, #2
 8000cae:	4439      	add	r1, r7
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cb6:	e778      	b.n	8000baa <__udivmoddi4+0xbe>
 8000cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cca:	fa01 f306 	lsl.w	r3, r1, r6
 8000cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fa1f f884 	uxth.w	r8, r4
 8000ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cea:	fb09 fa08 	mul.w	sl, r9, r8
 8000cee:	458a      	cmp	sl, r1
 8000cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x220>
 8000cfa:	1861      	adds	r1, r4, r1
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d00:	d248      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d02:	458a      	cmp	sl, r1
 8000d04:	d946      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4421      	add	r1, r4
 8000d0c:	eba1 010a 	sub.w	r1, r1, sl
 8000d10:	b2bf      	uxth	r7, r7
 8000d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45b8      	cmp	r8, r7
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x24a>
 8000d26:	19e7      	adds	r7, r4, r7
 8000d28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2c:	d22e      	bcs.n	8000d8c <__udivmoddi4+0x2a0>
 8000d2e:	45b8      	cmp	r8, r7
 8000d30:	d92c      	bls.n	8000d8c <__udivmoddi4+0x2a0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4427      	add	r7, r4
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba7 0708 	sub.w	r7, r7, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454f      	cmp	r7, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	4649      	mov	r1, r9
 8000d48:	d31a      	bcc.n	8000d80 <__udivmoddi4+0x294>
 8000d4a:	d017      	beq.n	8000d7c <__udivmoddi4+0x290>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x27a>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb67 0701 	sbc.w	r7, r7, r1
 8000d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d5a:	40f2      	lsrs	r2, r6
 8000d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d60:	40f7      	lsrs	r7, r6
 8000d62:	e9c5 2700 	strd	r2, r7, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e70b      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fd      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d7c:	4543      	cmp	r3, r8
 8000d7e:	d2e5      	bcs.n	8000d4c <__udivmoddi4+0x260>
 8000d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d84:	eb69 0104 	sbc.w	r1, r9, r4
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7df      	b.n	8000d4c <__udivmoddi4+0x260>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e7d2      	b.n	8000d36 <__udivmoddi4+0x24a>
 8000d90:	4660      	mov	r0, ip
 8000d92:	e78d      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d94:	4681      	mov	r9, r0
 8000d96:	e7b9      	b.n	8000d0c <__udivmoddi4+0x220>
 8000d98:	4666      	mov	r6, ip
 8000d9a:	e775      	b.n	8000c88 <__udivmoddi4+0x19c>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	e74a      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	4439      	add	r1, r7
 8000da6:	e713      	b.n	8000bd0 <__udivmoddi4+0xe4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	e724      	b.n	8000bf8 <__udivmoddi4+0x10c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <DHT22_Set_Pin_Output>:

uint8_t RH_byte1, RH_byte2, Temp_byte1, Temp_byte2;
uint16_t SUM, RH, TEMP;
uint16_t DHT22_presence = 0;

void DHT22_Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	807b      	strh	r3, [r7, #2]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000dd0:	887b      	ldrh	r3, [r7, #2]
 8000dd2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	4619      	mov	r1, r3
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f004 feec 	bl	8005bc0 <HAL_GPIO_Init>
}
 8000de8:	bf00      	nop
 8000dea:	3720      	adds	r7, #32
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <DHT22_Set_Pin_Input>:

void DHT22_Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	807b      	strh	r3, [r7, #2]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000e0c:	887b      	ldrh	r3, [r7, #2]
 8000e0e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e10:	2300      	movs	r3, #0
 8000e12:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP; // cambiar a PULLUP si no funciona así
 8000e14:	2301      	movs	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f004 fece 	bl	8005bc0 <HAL_GPIO_Init>
}
 8000e24:	bf00      	nop
 8000e26:	3720      	adds	r7, #32
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <DHT22_Start>:

void DHT22_Start(void){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0

	DHT22_Set_Pin_Output(DHT22_PORT, DHT22_PIN); // set the pin as output
 8000e30:	2180      	movs	r1, #128	; 0x80
 8000e32:	4811      	ldr	r0, [pc, #68]	; (8000e78 <DHT22_Start+0x4c>)
 8000e34:	f7ff ffbe 	bl	8000db4 <DHT22_Set_Pin_Output>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin low
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2180      	movs	r1, #128	; 0x80
 8000e3c:	480e      	ldr	r0, [pc, #56]	; (8000e78 <DHT22_Start+0x4c>)
 8000e3e:	f005 f873 	bl	8005f28 <HAL_GPIO_WritePin>
	HAL_Delay(1200);   // wait for > 1ms
 8000e42:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000e46:	f004 f927 	bl	8005098 <HAL_Delay>
	HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2180      	movs	r1, #128	; 0x80
 8000e4e:	480a      	ldr	r0, [pc, #40]	; (8000e78 <DHT22_Start+0x4c>)
 8000e50:	f005 f86a 	bl	8005f28 <HAL_GPIO_WritePin>
	delay(18000);
 8000e54:	f244 6050 	movw	r0, #18000	; 0x4650
 8000e58:	f002 f992 	bl	8003180 <delay>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2180      	movs	r1, #128	; 0x80
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <DHT22_Start+0x4c>)
 8000e62:	f005 f861 	bl	8005f28 <HAL_GPIO_WritePin>
	delay (30);   // wait for 30us
 8000e66:	201e      	movs	r0, #30
 8000e68:	f002 f98a 	bl	8003180 <delay>

	DHT22_Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8000e6c:	2180      	movs	r1, #128	; 0x80
 8000e6e:	4802      	ldr	r0, [pc, #8]	; (8000e78 <DHT22_Start+0x4c>)
 8000e70:	f7ff ffbe 	bl	8000df0 <DHT22_Set_Pin_Input>
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40021000 	.word	0x40021000

08000e7c <DHT22_Check_Response>:

uint8_t DHT22_Check_Response(void){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0

	DHT22_Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	4815      	ldr	r0, [pc, #84]	; (8000edc <DHT22_Check_Response+0x60>)
 8000e86:	f7ff ffb3 	bl	8000df0 <DHT22_Set_Pin_Input>
	uint8_t Response = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	71fb      	strb	r3, [r7, #7]
	delay (40);  // wait for 40us
 8000e8e:	2028      	movs	r0, #40	; 0x28
 8000e90:	f002 f976 	bl	8003180 <delay>
	if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) // if the pin is low
 8000e94:	2180      	movs	r1, #128	; 0x80
 8000e96:	4811      	ldr	r0, [pc, #68]	; (8000edc <DHT22_Check_Response+0x60>)
 8000e98:	f005 f82e 	bl	8005ef8 <HAL_GPIO_ReadPin>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10e      	bne.n	8000ec0 <DHT22_Check_Response+0x44>
	{
		delay (80);   // wait for 80us
 8000ea2:	2050      	movs	r0, #80	; 0x50
 8000ea4:	f002 f96c 	bl	8003180 <delay>

		if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;  // if the pin is high, response is ok
 8000ea8:	2180      	movs	r1, #128	; 0x80
 8000eaa:	480c      	ldr	r0, [pc, #48]	; (8000edc <DHT22_Check_Response+0x60>)
 8000eac:	f005 f824 	bl	8005ef8 <HAL_GPIO_ReadPin>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <DHT22_Check_Response+0x40>
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	71fb      	strb	r3, [r7, #7]
 8000eba:	e001      	b.n	8000ec0 <DHT22_Check_Response+0x44>
		else Response = -1;
 8000ebc:	23ff      	movs	r3, #255	; 0xff
 8000ebe:	71fb      	strb	r3, [r7, #7]
	}

	while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go low
 8000ec0:	bf00      	nop
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <DHT22_Check_Response+0x60>)
 8000ec6:	f005 f817 	bl	8005ef8 <HAL_GPIO_ReadPin>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1f8      	bne.n	8000ec2 <DHT22_Check_Response+0x46>
	return Response;
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000

08000ee0 <DHT22_Read>:

uint8_t DHT22_Read(void){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0

	uint8_t i,j;
	for (j=0;j<8;j++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	71bb      	strb	r3, [r7, #6]
 8000eea:	e037      	b.n	8000f5c <DHT22_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go high
 8000eec:	bf00      	nop
 8000eee:	2180      	movs	r1, #128	; 0x80
 8000ef0:	481e      	ldr	r0, [pc, #120]	; (8000f6c <DHT22_Read+0x8c>)
 8000ef2:	f005 f801 	bl	8005ef8 <HAL_GPIO_ReadPin>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d0f8      	beq.n	8000eee <DHT22_Read+0xe>
		delay (40);   // wait for 40 us
 8000efc:	2028      	movs	r0, #40	; 0x28
 8000efe:	f002 f93f 	bl	8003180 <delay>

		if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8000f02:	2180      	movs	r1, #128	; 0x80
 8000f04:	4819      	ldr	r0, [pc, #100]	; (8000f6c <DHT22_Read+0x8c>)
 8000f06:	f004 fff7 	bl	8005ef8 <HAL_GPIO_ReadPin>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d10e      	bne.n	8000f2e <DHT22_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	2201      	movs	r2, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	b25a      	sxtb	r2, r3
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	4013      	ands	r3, r2
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	71fb      	strb	r3, [r7, #7]
 8000f2c:	e00b      	b.n	8000f46 <DHT22_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
 8000f30:	f1c3 0307 	rsb	r3, r3, #7
 8000f34:	2201      	movs	r2, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	b25a      	sxtb	r2, r3
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));  // wait for the pin to go low
 8000f46:	bf00      	nop
 8000f48:	2180      	movs	r1, #128	; 0x80
 8000f4a:	4808      	ldr	r0, [pc, #32]	; (8000f6c <DHT22_Read+0x8c>)
 8000f4c:	f004 ffd4 	bl	8005ef8 <HAL_GPIO_ReadPin>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f8      	bne.n	8000f48 <DHT22_Read+0x68>
	for (j=0;j<8;j++)
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	71bb      	strb	r3, [r7, #6]
 8000f5c:	79bb      	ldrb	r3, [r7, #6]
 8000f5e:	2b07      	cmp	r3, #7
 8000f60:	d9c4      	bls.n	8000eec <DHT22_Read+0xc>
	}

	return i;
 8000f62:	79fb      	ldrb	r3, [r7, #7]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40021000 	.word	0x40021000

08000f70 <DHT22_getData>:

void DHT22_getData(DHT22_DataTypedef *DHT_Data){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

	  DHT22_Start();
 8000f78:	f7ff ff58 	bl	8000e2c <DHT22_Start>
	  DHT22_presence = DHT22_Check_Response();
 8000f7c:	f7ff ff7e 	bl	8000e7c <DHT22_Check_Response>
 8000f80:	4603      	mov	r3, r0
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	4b30      	ldr	r3, [pc, #192]	; (8001048 <DHT22_getData+0xd8>)
 8000f86:	801a      	strh	r2, [r3, #0]

	  RH_byte1 = DHT22_Read();
 8000f88:	f7ff ffaa 	bl	8000ee0 <DHT22_Read>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b2e      	ldr	r3, [pc, #184]	; (800104c <DHT22_getData+0xdc>)
 8000f92:	701a      	strb	r2, [r3, #0]
	  RH_byte2 = DHT22_Read();
 8000f94:	f7ff ffa4 	bl	8000ee0 <DHT22_Read>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <DHT22_getData+0xe0>)
 8000f9e:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT22_Read();
 8000fa0:	f7ff ff9e 	bl	8000ee0 <DHT22_Read>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b2a      	ldr	r3, [pc, #168]	; (8001054 <DHT22_getData+0xe4>)
 8000faa:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT22_Read();
 8000fac:	f7ff ff98 	bl	8000ee0 <DHT22_Read>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b28      	ldr	r3, [pc, #160]	; (8001058 <DHT22_getData+0xe8>)
 8000fb6:	701a      	strb	r2, [r3, #0]

	  SUM = DHT22_Read();
 8000fb8:	f7ff ff92 	bl	8000ee0 <DHT22_Read>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	4b26      	ldr	r3, [pc, #152]	; (800105c <DHT22_getData+0xec>)
 8000fc2:	801a      	strh	r2, [r3, #0]

	  RH = ((RH_byte1<<8)|RH_byte2);
 8000fc4:	4b21      	ldr	r3, [pc, #132]	; (800104c <DHT22_getData+0xdc>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	4b20      	ldr	r3, [pc, #128]	; (8001050 <DHT22_getData+0xe0>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	4b21      	ldr	r3, [pc, #132]	; (8001060 <DHT22_getData+0xf0>)
 8000fda:	801a      	strh	r2, [r3, #0]
	  TEMP = ((Temp_byte1<<8)|Temp_byte2);
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <DHT22_getData+0xe4>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	021b      	lsls	r3, r3, #8
 8000fe2:	b21a      	sxth	r2, r3
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <DHT22_getData+0xe8>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <DHT22_getData+0xf4>)
 8000ff2:	801a      	strh	r2, [r3, #0]

	  DHT_Data->Temperature = (float) (TEMP/10.0);
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <DHT22_getData+0xf4>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fa93 	bl	8000524 <__aeabi_i2d>
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <DHT22_getData+0xf8>)
 8001004:	f7ff fc22 	bl	800084c <__aeabi_ddiv>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f7ff fd04 	bl	8000a1c <__aeabi_d2f>
 8001014:	4602      	mov	r2, r0
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	601a      	str	r2, [r3, #0]
	  DHT_Data->Humidity = (float) (RH/10.0);
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <DHT22_getData+0xf0>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fa80 	bl	8000524 <__aeabi_i2d>
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <DHT22_getData+0xf8>)
 800102a:	f7ff fc0f 	bl	800084c <__aeabi_ddiv>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f7ff fcf1 	bl	8000a1c <__aeabi_d2f>
 800103a:	4602      	mov	r2, r0
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	605a      	str	r2, [r3, #4]
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2000008c 	.word	0x2000008c
 800104c:	20000909 	.word	0x20000909
 8001050:	2000090d 	.word	0x2000090d
 8001054:	20000908 	.word	0x20000908
 8001058:	2000090c 	.word	0x2000090c
 800105c:	2000090a 	.word	0x2000090a
 8001060:	20000904 	.word	0x20000904
 8001064:	20000906 	.word	0x20000906
 8001068:	40240000 	.word	0x40240000

0800106c <ESP_clearBuffer>:
char *Terminate = "</body></html>";


/*****************************************************************************************************************************************/

void ESP_clearBuffer(void){
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0

	memset(buffer_app, 0, 60);
 8001070:	223c      	movs	r2, #60	; 0x3c
 8001072:	2100      	movs	r1, #0
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <ESP_clearBuffer+0x18>)
 8001076:	f007 fb73 	bl	8008760 <memset>
	buffer_index = 0;
 800107a:	4b03      	ldr	r3, [pc, #12]	; (8001088 <ESP_clearBuffer+0x1c>)
 800107c:	2200      	movs	r2, #0
 800107e:	801a      	strh	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000938 	.word	0x20000938
 8001088:	20000a5a 	.word	0x20000a5a

0800108c <ESP_Init>:


void ESP_Init(char *SSID, char *PASSWD){
 800108c:	b580      	push	{r7, lr}
 800108e:	b09a      	sub	sp, #104	; 0x68
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]

	ESP_clearBuffer();
 8001096:	f7ff ffe9 	bl	800106c <ESP_clearBuffer>
	char data[80];

	ringInit();
 800109a:	f001 fc45 	bl	8002928 <ringInit>

	HAL_Delay(1000);
 800109e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010a2:	f003 fff9 	bl	8005098 <HAL_Delay>

	/********** AT **********/

	UART_send("AT\r\n", WiFi_UART);
 80010a6:	4974      	ldr	r1, [pc, #464]	; (8001278 <ESP_Init+0x1ec>)
 80010a8:	4874      	ldr	r0, [pc, #464]	; (800127c <ESP_Init+0x1f0>)
 80010aa:	f001 fdfb 	bl	8002ca4 <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 80010ae:	bf00      	nop
 80010b0:	4971      	ldr	r1, [pc, #452]	; (8001278 <ESP_Init+0x1ec>)
 80010b2:	4873      	ldr	r0, [pc, #460]	; (8001280 <ESP_Init+0x1f4>)
 80010b4:	f001 fe8c 	bl	8002dd0 <UART_waitFor>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f8      	beq.n	80010b0 <ESP_Init+0x24>
	UART_send("AT  ---->  OK\n", PC_UART);
 80010be:	4971      	ldr	r1, [pc, #452]	; (8001284 <ESP_Init+0x1f8>)
 80010c0:	4871      	ldr	r0, [pc, #452]	; (8001288 <ESP_Init+0x1fc>)
 80010c2:	f001 fdef 	bl	8002ca4 <UART_send>


	HAL_Delay(2000);
 80010c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010ca:	f003 ffe5 	bl	8005098 <HAL_Delay>


	/********** AT+RST **********/
	UART_send("AT+RST\r\n", WiFi_UART);
 80010ce:	496a      	ldr	r1, [pc, #424]	; (8001278 <ESP_Init+0x1ec>)
 80010d0:	486e      	ldr	r0, [pc, #440]	; (800128c <ESP_Init+0x200>)
 80010d2:	f001 fde7 	bl	8002ca4 <UART_send>
	UART_send("\nReseteando ", PC_UART);
 80010d6:	496b      	ldr	r1, [pc, #428]	; (8001284 <ESP_Init+0x1f8>)
 80010d8:	486d      	ldr	r0, [pc, #436]	; (8001290 <ESP_Init+0x204>)
 80010da:	f001 fde3 	bl	8002ca4 <UART_send>

	for (int i=0; i<3; i++)
 80010de:	2300      	movs	r3, #0
 80010e0:	667b      	str	r3, [r7, #100]	; 0x64
 80010e2:	e00a      	b.n	80010fa <ESP_Init+0x6e>
	{
		UART_send(" . ", PC_UART);
 80010e4:	4967      	ldr	r1, [pc, #412]	; (8001284 <ESP_Init+0x1f8>)
 80010e6:	486b      	ldr	r0, [pc, #428]	; (8001294 <ESP_Init+0x208>)
 80010e8:	f001 fddc 	bl	8002ca4 <UART_send>
		HAL_Delay(1500);
 80010ec:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80010f0:	f003 ffd2 	bl	8005098 <HAL_Delay>
	for (int i=0; i<3; i++)
 80010f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010f6:	3301      	adds	r3, #1
 80010f8:	667b      	str	r3, [r7, #100]	; 0x64
 80010fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	ddf1      	ble.n	80010e4 <ESP_Init+0x58>
	}


	/********** AT **********/
	UART_send("AT\r\n", WiFi_UART);
 8001100:	495d      	ldr	r1, [pc, #372]	; (8001278 <ESP_Init+0x1ec>)
 8001102:	485e      	ldr	r0, [pc, #376]	; (800127c <ESP_Init+0x1f0>)
 8001104:	f001 fdce 	bl	8002ca4 <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 8001108:	bf00      	nop
 800110a:	495b      	ldr	r1, [pc, #364]	; (8001278 <ESP_Init+0x1ec>)
 800110c:	485c      	ldr	r0, [pc, #368]	; (8001280 <ESP_Init+0x1f4>)
 800110e:	f001 fe5f 	bl	8002dd0 <UART_waitFor>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0f8      	beq.n	800110a <ESP_Init+0x7e>
	UART_send("\n\nAT  ---->  OK\n\n", PC_UART);
 8001118:	495a      	ldr	r1, [pc, #360]	; (8001284 <ESP_Init+0x1f8>)
 800111a:	485f      	ldr	r0, [pc, #380]	; (8001298 <ESP_Init+0x20c>)
 800111c:	f001 fdc2 	bl	8002ca4 <UART_send>


	HAL_Delay(2000);
 8001120:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001124:	f003 ffb8 	bl	8005098 <HAL_Delay>


	/********** AT+CWMODE=3 **********/
	UART_send("AT+CWMODE=3\r\n", WiFi_UART);
 8001128:	4953      	ldr	r1, [pc, #332]	; (8001278 <ESP_Init+0x1ec>)
 800112a:	485c      	ldr	r0, [pc, #368]	; (800129c <ESP_Init+0x210>)
 800112c:	f001 fdba 	bl	8002ca4 <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 8001130:	bf00      	nop
 8001132:	4951      	ldr	r1, [pc, #324]	; (8001278 <ESP_Init+0x1ec>)
 8001134:	4852      	ldr	r0, [pc, #328]	; (8001280 <ESP_Init+0x1f4>)
 8001136:	f001 fe4b 	bl	8002dd0 <UART_waitFor>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0f8      	beq.n	8001132 <ESP_Init+0xa6>
	UART_send("CW MODE  ---->  3\n\n", PC_UART);
 8001140:	4950      	ldr	r1, [pc, #320]	; (8001284 <ESP_Init+0x1f8>)
 8001142:	4857      	ldr	r0, [pc, #348]	; (80012a0 <ESP_Init+0x214>)
 8001144:	f001 fdae 	bl	8002ca4 <UART_send>


	/********** AT+CWJAP="SSID","PASSWD" **********/
	UART_send("Conectando con la RED proporcionada ", PC_UART);
 8001148:	494e      	ldr	r1, [pc, #312]	; (8001284 <ESP_Init+0x1f8>)
 800114a:	4856      	ldr	r0, [pc, #344]	; (80012a4 <ESP_Init+0x218>)
 800114c:	f001 fdaa 	bl	8002ca4 <UART_send>

	for (int i=0; i<3; i++)
 8001150:	2300      	movs	r3, #0
 8001152:	663b      	str	r3, [r7, #96]	; 0x60
 8001154:	e00a      	b.n	800116c <ESP_Init+0xe0>
	{
		UART_send(" . ", PC_UART);
 8001156:	494b      	ldr	r1, [pc, #300]	; (8001284 <ESP_Init+0x1f8>)
 8001158:	484e      	ldr	r0, [pc, #312]	; (8001294 <ESP_Init+0x208>)
 800115a:	f001 fda3 	bl	8002ca4 <UART_send>
		HAL_Delay(1500);
 800115e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001162:	f003 ff99 	bl	8005098 <HAL_Delay>
	for (int i=0; i<3; i++)
 8001166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001168:	3301      	adds	r3, #1
 800116a:	663b      	str	r3, [r7, #96]	; 0x60
 800116c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800116e:	2b02      	cmp	r3, #2
 8001170:	ddf1      	ble.n	8001156 <ESP_Init+0xca>
	}

	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8001172:	f107 000c 	add.w	r0, r7, #12
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	494b      	ldr	r1, [pc, #300]	; (80012a8 <ESP_Init+0x21c>)
 800117c:	f007 faf8 	bl	8008770 <siprintf>
	UART_send(data, WiFi_UART);
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	493c      	ldr	r1, [pc, #240]	; (8001278 <ESP_Init+0x1ec>)
 8001186:	4618      	mov	r0, r3
 8001188:	f001 fd8c 	bl	8002ca4 <UART_send>
	while (!(UART_waitFor("WIFI GOT IP\r\n\r\nOK\r\n", WiFi_UART)));
 800118c:	bf00      	nop
 800118e:	493a      	ldr	r1, [pc, #232]	; (8001278 <ESP_Init+0x1ec>)
 8001190:	4846      	ldr	r0, [pc, #280]	; (80012ac <ESP_Init+0x220>)
 8001192:	f001 fe1d 	bl	8002dd0 <UART_waitFor>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f8      	beq.n	800118e <ESP_Init+0x102>
	sprintf (data, "\n\nConectado a  \"%s\"\n\n", SSID);
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	4943      	ldr	r1, [pc, #268]	; (80012b0 <ESP_Init+0x224>)
 80011a4:	4618      	mov	r0, r3
 80011a6:	f007 fae3 	bl	8008770 <siprintf>
	UART_send(data,PC_UART);
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	4935      	ldr	r1, [pc, #212]	; (8001284 <ESP_Init+0x1f8>)
 80011b0:	4618      	mov	r0, r3
 80011b2:	f001 fd77 	bl	8002ca4 <UART_send>
	//UART_send("AT+CIPSTA?\r\n", WiFi_UART);
	//sprintf (data, "AT+CIPSTA?\r\n");


	/********** AT+CIFSR **********/
	UART_send("AT+CIFSR\r\n", WiFi_UART);
 80011b6:	4930      	ldr	r1, [pc, #192]	; (8001278 <ESP_Init+0x1ec>)
 80011b8:	483e      	ldr	r0, [pc, #248]	; (80012b4 <ESP_Init+0x228>)
 80011ba:	f001 fd73 	bl	8002ca4 <UART_send>
	while (!(UART_waitFor("CIFSR:STAIP,\"", WiFi_UART)));
 80011be:	bf00      	nop
 80011c0:	492d      	ldr	r1, [pc, #180]	; (8001278 <ESP_Init+0x1ec>)
 80011c2:	483d      	ldr	r0, [pc, #244]	; (80012b8 <ESP_Init+0x22c>)
 80011c4:	f001 fe04 	bl	8002dd0 <UART_waitFor>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f8      	beq.n	80011c0 <ESP_Init+0x134>
	while (!(UART_copyUpto("\"",buffer, WiFi_UART)));
 80011ce:	bf00      	nop
 80011d0:	4a29      	ldr	r2, [pc, #164]	; (8001278 <ESP_Init+0x1ec>)
 80011d2:	493a      	ldr	r1, [pc, #232]	; (80012bc <ESP_Init+0x230>)
 80011d4:	483a      	ldr	r0, [pc, #232]	; (80012c0 <ESP_Init+0x234>)
 80011d6:	f001 fd7d 	bl	8002cd4 <UART_copyUpto>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f7      	beq.n	80011d0 <ESP_Init+0x144>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 80011e0:	bf00      	nop
 80011e2:	4925      	ldr	r1, [pc, #148]	; (8001278 <ESP_Init+0x1ec>)
 80011e4:	4826      	ldr	r0, [pc, #152]	; (8001280 <ESP_Init+0x1f4>)
 80011e6:	f001 fdf3 	bl	8002dd0 <UART_waitFor>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f8      	beq.n	80011e2 <ESP_Init+0x156>
	int len = strlen (buffer);
 80011f0:	4832      	ldr	r0, [pc, #200]	; (80012bc <ESP_Init+0x230>)
 80011f2:	f7fe ffed 	bl	80001d0 <strlen>
 80011f6:	4603      	mov	r3, r0
 80011f8:	65fb      	str	r3, [r7, #92]	; 0x5c
	buffer[len-1] = '\0';
 80011fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011fc:	3b01      	subs	r3, #1
 80011fe:	4a2f      	ldr	r2, [pc, #188]	; (80012bc <ESP_Init+0x230>)
 8001200:	2100      	movs	r1, #0
 8001202:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP :  %s\n\n", buffer);
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	4a2c      	ldr	r2, [pc, #176]	; (80012bc <ESP_Init+0x230>)
 800120a:	492e      	ldr	r1, [pc, #184]	; (80012c4 <ESP_Init+0x238>)
 800120c:	4618      	mov	r0, r3
 800120e:	f007 faaf 	bl	8008770 <siprintf>
	UART_send(data, PC_UART);
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	491b      	ldr	r1, [pc, #108]	; (8001284 <ESP_Init+0x1f8>)
 8001218:	4618      	mov	r0, r3
 800121a:	f001 fd43 	bl	8002ca4 <UART_send>


	/********** AT+CIPMUX=1 **********/
	UART_send("AT+CIPMUX=1\r\n", WiFi_UART);
 800121e:	4916      	ldr	r1, [pc, #88]	; (8001278 <ESP_Init+0x1ec>)
 8001220:	4829      	ldr	r0, [pc, #164]	; (80012c8 <ESP_Init+0x23c>)
 8001222:	f001 fd3f 	bl	8002ca4 <UART_send>
	while (!(UART_waitFor("AT+CIPMUX=1\r\r\n\r\nOK\r\n", WiFi_UART)));
 8001226:	bf00      	nop
 8001228:	4913      	ldr	r1, [pc, #76]	; (8001278 <ESP_Init+0x1ec>)
 800122a:	4828      	ldr	r0, [pc, #160]	; (80012cc <ESP_Init+0x240>)
 800122c:	f001 fdd0 	bl	8002dd0 <UART_waitFor>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f8      	beq.n	8001228 <ESP_Init+0x19c>
	UART_send("CIPMUX  ---->  OK\n\n", PC_UART);
 8001236:	4913      	ldr	r1, [pc, #76]	; (8001284 <ESP_Init+0x1f8>)
 8001238:	4825      	ldr	r0, [pc, #148]	; (80012d0 <ESP_Init+0x244>)
 800123a:	f001 fd33 	bl	8002ca4 <UART_send>
	//while (!(UART_waitFor("OK\r\n", WiFi_UART)));
	//UART_send("CIPSTART  ---->  OK\n\n", PC_UART);


	/********** AT+CIPSERVER=1,80 **********/
	UART_send("AT+CIPSERVER=1,80\r\n", WiFi_UART);
 800123e:	490e      	ldr	r1, [pc, #56]	; (8001278 <ESP_Init+0x1ec>)
 8001240:	4824      	ldr	r0, [pc, #144]	; (80012d4 <ESP_Init+0x248>)
 8001242:	f001 fd2f 	bl	8002ca4 <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 8001246:	bf00      	nop
 8001248:	490b      	ldr	r1, [pc, #44]	; (8001278 <ESP_Init+0x1ec>)
 800124a:	480d      	ldr	r0, [pc, #52]	; (8001280 <ESP_Init+0x1f4>)
 800124c:	f001 fdc0 	bl	8002dd0 <UART_waitFor>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0f8      	beq.n	8001248 <ESP_Init+0x1bc>
	UART_send("CIPSERVER  ---->  OK\n\n", PC_UART);
 8001256:	490b      	ldr	r1, [pc, #44]	; (8001284 <ESP_Init+0x1f8>)
 8001258:	481f      	ldr	r0, [pc, #124]	; (80012d8 <ESP_Init+0x24c>)
 800125a:	f001 fd23 	bl	8002ca4 <UART_send>


	/********** FIN **********/
	UART_send("Conectado a la IP\n\n", PC_UART);
 800125e:	4909      	ldr	r1, [pc, #36]	; (8001284 <ESP_Init+0x1f8>)
 8001260:	481e      	ldr	r0, [pc, #120]	; (80012dc <ESP_Init+0x250>)
 8001262:	f001 fd1f 	bl	8002ca4 <UART_send>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1); // CONNECTED
 8001266:	2201      	movs	r2, #1
 8001268:	2101      	movs	r1, #1
 800126a:	481d      	ldr	r0, [pc, #116]	; (80012e0 <ESP_Init+0x254>)
 800126c:	f004 fe5c 	bl	8005f28 <HAL_GPIO_WritePin>
}
 8001270:	bf00      	nop
 8001272:	3768      	adds	r7, #104	; 0x68
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000e1c 	.word	0x20000e1c
 800127c:	080093f8 	.word	0x080093f8
 8001280:	08009400 	.word	0x08009400
 8001284:	20000d90 	.word	0x20000d90
 8001288:	08009408 	.word	0x08009408
 800128c:	08009418 	.word	0x08009418
 8001290:	08009424 	.word	0x08009424
 8001294:	08009434 	.word	0x08009434
 8001298:	08009438 	.word	0x08009438
 800129c:	0800944c 	.word	0x0800944c
 80012a0:	0800945c 	.word	0x0800945c
 80012a4:	08009470 	.word	0x08009470
 80012a8:	08009498 	.word	0x08009498
 80012ac:	080094b0 	.word	0x080094b0
 80012b0:	080094c4 	.word	0x080094c4
 80012b4:	080094dc 	.word	0x080094dc
 80012b8:	080094e8 	.word	0x080094e8
 80012bc:	20000990 	.word	0x20000990
 80012c0:	080094f8 	.word	0x080094f8
 80012c4:	080094fc 	.word	0x080094fc
 80012c8:	08009508 	.word	0x08009508
 80012cc:	08009518 	.word	0x08009518
 80012d0:	08009530 	.word	0x08009530
 80012d4:	08009544 	.word	0x08009544
 80012d8:	08009558 	.word	0x08009558
 80012dc:	08009570 	.word	0x08009570
 80012e0:	40020800 	.word	0x40020800

080012e4 <ESP_messageHandler>:
	}
	return -1;
}


void ESP_messageHandler(void){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0

	//__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);

	memset(textrc, 0, 100);
 80012e8:	2264      	movs	r2, #100	; 0x64
 80012ea:	2100      	movs	r1, #0
 80012ec:	48a7      	ldr	r0, [pc, #668]	; (800158c <ESP_messageHandler+0x2a8>)
 80012ee:	f007 fa37 	bl	8008760 <memset>

	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) != 0){
 80012f2:	2101      	movs	r1, #1
 80012f4:	48a6      	ldr	r0, [pc, #664]	; (8001590 <ESP_messageHandler+0x2ac>)
 80012f6:	f004 fdff 	bl	8005ef8 <HAL_GPIO_ReadPin>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d01f      	beq.n	8001340 <ESP_messageHandler+0x5c>

		HAL_UART_Receive(&huart2, (uint8_t *)textrc, 100, 100); //(uint8_t *)
 8001300:	2364      	movs	r3, #100	; 0x64
 8001302:	2264      	movs	r2, #100	; 0x64
 8001304:	49a1      	ldr	r1, [pc, #644]	; (800158c <ESP_messageHandler+0x2a8>)
 8001306:	48a3      	ldr	r0, [pc, #652]	; (8001594 <ESP_messageHandler+0x2b0>)
 8001308:	f006 fad5 	bl	80078b6 <HAL_UART_Receive>

		HAL_UART_Transmit(&huart6, (uint8_t *)textrc, 100, HAL_MAX_DELAY);
 800130c:	f04f 33ff 	mov.w	r3, #4294967295
 8001310:	2264      	movs	r2, #100	; 0x64
 8001312:	499e      	ldr	r1, [pc, #632]	; (800158c <ESP_messageHandler+0x2a8>)
 8001314:	48a0      	ldr	r0, [pc, #640]	; (8001598 <ESP_messageHandler+0x2b4>)
 8001316:	f006 fa3c 	bl	8007792 <HAL_UART_Transmit>
		UART_send("\n", PC_UART);
 800131a:	499f      	ldr	r1, [pc, #636]	; (8001598 <ESP_messageHandler+0x2b4>)
 800131c:	489f      	ldr	r0, [pc, #636]	; (800159c <ESP_messageHandler+0x2b8>)
 800131e:	f001 fcc1 	bl	8002ca4 <UART_send>

		fragment[0] = textrc[25]; // Asignación de Fragmento
 8001322:	4b9a      	ldr	r3, [pc, #616]	; (800158c <ESP_messageHandler+0x2a8>)
 8001324:	7e5a      	ldrb	r2, [r3, #25]
 8001326:	4b9e      	ldr	r3, [pc, #632]	; (80015a0 <ESP_messageHandler+0x2bc>)
 8001328:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart6, (uint8_t *)fragment, 1, HAL_MAX_DELAY);
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	2201      	movs	r2, #1
 8001330:	499b      	ldr	r1, [pc, #620]	; (80015a0 <ESP_messageHandler+0x2bc>)
 8001332:	4899      	ldr	r0, [pc, #612]	; (8001598 <ESP_messageHandler+0x2b4>)
 8001334:	f006 fa2d 	bl	8007792 <HAL_UART_Transmit>
		UART_send("\n", PC_UART);
 8001338:	4997      	ldr	r1, [pc, #604]	; (8001598 <ESP_messageHandler+0x2b4>)
 800133a:	4898      	ldr	r0, [pc, #608]	; (800159c <ESP_messageHandler+0x2b8>)
 800133c:	f001 fcb2 	bl	8002ca4 <UART_send>
	}


	// SENSORES DHT22
	readDHT = 0;
 8001340:	4b98      	ldr	r3, [pc, #608]	; (80015a4 <ESP_messageHandler+0x2c0>)
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]

	if(textrc[27] == '['){
 8001346:	4b91      	ldr	r3, [pc, #580]	; (800158c <ESP_messageHandler+0x2a8>)
 8001348:	7edb      	ldrb	r3, [r3, #27]
 800134a:	2b5b      	cmp	r3, #91	; 0x5b
 800134c:	d104      	bne.n	8001358 <ESP_messageHandler+0x74>
		ESP_dataHandler();
 800134e:	f000 ff71 	bl	8002234 <ESP_dataHandler>
		readDHT = 1;
 8001352:	4b94      	ldr	r3, [pc, #592]	; (80015a4 <ESP_messageHandler+0x2c0>)
 8001354:	2201      	movs	r2, #1
 8001356:	601a      	str	r2, [r3, #0]
	}

	// SEGURIDAD
	if (fragment[0] == 's'){
 8001358:	4b91      	ldr	r3, [pc, #580]	; (80015a0 <ESP_messageHandler+0x2bc>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b73      	cmp	r3, #115	; 0x73
 800135e:	d10b      	bne.n	8001378 <ESP_messageHandler+0x94>
		UART_send("SEGURIDAD \n", PC_UART);
 8001360:	498d      	ldr	r1, [pc, #564]	; (8001598 <ESP_messageHandler+0x2b4>)
 8001362:	4891      	ldr	r0, [pc, #580]	; (80015a8 <ESP_messageHandler+0x2c4>)
 8001364:	f001 fc9e 	bl	8002ca4 <UART_send>
		vSeg[0] = textrc[28]; // Alarma Interior
 8001368:	4b88      	ldr	r3, [pc, #544]	; (800158c <ESP_messageHandler+0x2a8>)
 800136a:	7f1a      	ldrb	r2, [r3, #28]
 800136c:	4b8f      	ldr	r3, [pc, #572]	; (80015ac <ESP_messageHandler+0x2c8>)
 800136e:	701a      	strb	r2, [r3, #0]
		vSeg[1] = textrc[31]; // Alarma Exterior
 8001370:	4b86      	ldr	r3, [pc, #536]	; (800158c <ESP_messageHandler+0x2a8>)
 8001372:	7fda      	ldrb	r2, [r3, #31]
 8001374:	4b8d      	ldr	r3, [pc, #564]	; (80015ac <ESP_messageHandler+0x2c8>)
 8001376:	705a      	strb	r2, [r3, #1]
	}

	// ILUMINACIÓN
	if (fragment[0] == 'i'){
 8001378:	4b89      	ldr	r3, [pc, #548]	; (80015a0 <ESP_messageHandler+0x2bc>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b69      	cmp	r3, #105	; 0x69
 800137e:	f040 82cc 	bne.w	800191a <ESP_messageHandler+0x636>
		UART_send("ILUMINACION \n", PC_UART);
 8001382:	4985      	ldr	r1, [pc, #532]	; (8001598 <ESP_messageHandler+0x2b4>)
 8001384:	488a      	ldr	r0, [pc, #552]	; (80015b0 <ESP_messageHandler+0x2cc>)
 8001386:	f001 fc8d 	bl	8002ca4 <UART_send>
		vIlum[0] = textrc[28]; 	// Luz Sala
 800138a:	4b80      	ldr	r3, [pc, #512]	; (800158c <ESP_messageHandler+0x2a8>)
 800138c:	7f1a      	ldrb	r2, [r3, #28]
 800138e:	4b89      	ldr	r3, [pc, #548]	; (80015b4 <ESP_messageHandler+0x2d0>)
 8001390:	701a      	strb	r2, [r3, #0]
		vIlum[1] = textrc[31]; 	// Luz Comedor
 8001392:	4b7e      	ldr	r3, [pc, #504]	; (800158c <ESP_messageHandler+0x2a8>)
 8001394:	7fda      	ldrb	r2, [r3, #31]
 8001396:	4b87      	ldr	r3, [pc, #540]	; (80015b4 <ESP_messageHandler+0x2d0>)
 8001398:	705a      	strb	r2, [r3, #1]
		vIlum[2] = textrc[34]; 	// Luz Ambiente
 800139a:	4b7c      	ldr	r3, [pc, #496]	; (800158c <ESP_messageHandler+0x2a8>)
 800139c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80013a0:	4b84      	ldr	r3, [pc, #528]	; (80015b4 <ESP_messageHandler+0x2d0>)
 80013a2:	709a      	strb	r2, [r3, #2]
		vIlum[3] = textrc[37]; 	// Luz Recibidor
 80013a4:	4b79      	ldr	r3, [pc, #484]	; (800158c <ESP_messageHandler+0x2a8>)
 80013a6:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80013aa:	4b82      	ldr	r3, [pc, #520]	; (80015b4 <ESP_messageHandler+0x2d0>)
 80013ac:	70da      	strb	r2, [r3, #3]
		vIlum[4] = textrc[40]; 	// Luz Cocina
 80013ae:	4b77      	ldr	r3, [pc, #476]	; (800158c <ESP_messageHandler+0x2a8>)
 80013b0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80013b4:	4b7f      	ldr	r3, [pc, #508]	; (80015b4 <ESP_messageHandler+0x2d0>)
 80013b6:	711a      	strb	r2, [r3, #4]
		vIlum[5] = textrc[43]; 	// Luz Fregadero
 80013b8:	4b74      	ldr	r3, [pc, #464]	; (800158c <ESP_messageHandler+0x2a8>)
 80013ba:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80013be:	4b7d      	ldr	r3, [pc, #500]	; (80015b4 <ESP_messageHandler+0x2d0>)
 80013c0:	715a      	strb	r2, [r3, #5]
		vIlum[6] = textrc[46]; 	// Luz Baño
 80013c2:	4b72      	ldr	r3, [pc, #456]	; (800158c <ESP_messageHandler+0x2a8>)
 80013c4:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80013c8:	4b7a      	ldr	r3, [pc, #488]	; (80015b4 <ESP_messageHandler+0x2d0>)
 80013ca:	719a      	strb	r2, [r3, #6]
		vIlum[7] = textrc[49]; 	// Luz Espejo
 80013cc:	4b6f      	ldr	r3, [pc, #444]	; (800158c <ESP_messageHandler+0x2a8>)
 80013ce:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80013d2:	4b78      	ldr	r3, [pc, #480]	; (80015b4 <ESP_messageHandler+0x2d0>)
 80013d4:	71da      	strb	r2, [r3, #7]
		vIlum[8] = textrc[52]; 	// Luz Dormitorio
 80013d6:	4b6d      	ldr	r3, [pc, #436]	; (800158c <ESP_messageHandler+0x2a8>)
 80013d8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80013dc:	4b75      	ldr	r3, [pc, #468]	; (80015b4 <ESP_messageHandler+0x2d0>)
 80013de:	721a      	strb	r2, [r3, #8]
		vIlum[9] = textrc[55]; 	// Luz Mesita Izq
 80013e0:	4b6a      	ldr	r3, [pc, #424]	; (800158c <ESP_messageHandler+0x2a8>)
 80013e2:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80013e6:	4b73      	ldr	r3, [pc, #460]	; (80015b4 <ESP_messageHandler+0x2d0>)
 80013e8:	725a      	strb	r2, [r3, #9]
		vIlum[10] = textrc[58]; // Luz Mesita Dch
 80013ea:	4b68      	ldr	r3, [pc, #416]	; (800158c <ESP_messageHandler+0x2a8>)
 80013ec:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80013f0:	4b70      	ldr	r3, [pc, #448]	; (80015b4 <ESP_messageHandler+0x2d0>)
 80013f2:	729a      	strb	r2, [r3, #10]
		vIlum[11] = textrc[61]; // Luz Oficina
 80013f4:	4b65      	ldr	r3, [pc, #404]	; (800158c <ESP_messageHandler+0x2a8>)
 80013f6:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80013fa:	4b6e      	ldr	r3, [pc, #440]	; (80015b4 <ESP_messageHandler+0x2d0>)
 80013fc:	72da      	strb	r2, [r3, #11]
		vIlum[12] = textrc[64]; // Luz Gaming
 80013fe:	4b63      	ldr	r3, [pc, #396]	; (800158c <ESP_messageHandler+0x2a8>)
 8001400:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8001404:	4b6b      	ldr	r3, [pc, #428]	; (80015b4 <ESP_messageHandler+0x2d0>)
 8001406:	731a      	strb	r2, [r3, #12]
		vIlum[13] = textrc[67]; // Luz Rx100
 8001408:	4b60      	ldr	r3, [pc, #384]	; (800158c <ESP_messageHandler+0x2a8>)
 800140a:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800140e:	4b69      	ldr	r3, [pc, #420]	; (80015b4 <ESP_messageHandler+0x2d0>)
 8001410:	735a      	strb	r2, [r3, #13]
		vIlum[14] = textrc[68]; // Luz Rx10
 8001412:	4b5e      	ldr	r3, [pc, #376]	; (800158c <ESP_messageHandler+0x2a8>)
 8001414:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8001418:	4b66      	ldr	r3, [pc, #408]	; (80015b4 <ESP_messageHandler+0x2d0>)
 800141a:	739a      	strb	r2, [r3, #14]
		vIlum[15] = textrc[69]; // Luz Rx1
 800141c:	4b5b      	ldr	r3, [pc, #364]	; (800158c <ESP_messageHandler+0x2a8>)
 800141e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8001422:	4b64      	ldr	r3, [pc, #400]	; (80015b4 <ESP_messageHandler+0x2d0>)
 8001424:	73da      	strb	r2, [r3, #15]
		vIlum[16] = textrc[72]; // Luz Gx100
 8001426:	4b59      	ldr	r3, [pc, #356]	; (800158c <ESP_messageHandler+0x2a8>)
 8001428:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800142c:	4b61      	ldr	r3, [pc, #388]	; (80015b4 <ESP_messageHandler+0x2d0>)
 800142e:	741a      	strb	r2, [r3, #16]
		vIlum[17] = textrc[73]; // Luz Gx10
 8001430:	4b56      	ldr	r3, [pc, #344]	; (800158c <ESP_messageHandler+0x2a8>)
 8001432:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8001436:	4b5f      	ldr	r3, [pc, #380]	; (80015b4 <ESP_messageHandler+0x2d0>)
 8001438:	745a      	strb	r2, [r3, #17]
		vIlum[18] = textrc[74]; // Luz Gx1
 800143a:	4b54      	ldr	r3, [pc, #336]	; (800158c <ESP_messageHandler+0x2a8>)
 800143c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8001440:	4b5c      	ldr	r3, [pc, #368]	; (80015b4 <ESP_messageHandler+0x2d0>)
 8001442:	749a      	strb	r2, [r3, #18]
		vIlum[19] = textrc[77]; // Luz Bx100
 8001444:	4b51      	ldr	r3, [pc, #324]	; (800158c <ESP_messageHandler+0x2a8>)
 8001446:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 800144a:	4b5a      	ldr	r3, [pc, #360]	; (80015b4 <ESP_messageHandler+0x2d0>)
 800144c:	74da      	strb	r2, [r3, #19]
		vIlum[20] = textrc[78]; // Luz Bx10
 800144e:	4b4f      	ldr	r3, [pc, #316]	; (800158c <ESP_messageHandler+0x2a8>)
 8001450:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8001454:	4b57      	ldr	r3, [pc, #348]	; (80015b4 <ESP_messageHandler+0x2d0>)
 8001456:	751a      	strb	r2, [r3, #20]
		vIlum[21] = textrc[79]; // Luz Bx1
 8001458:	4b4c      	ldr	r3, [pc, #304]	; (800158c <ESP_messageHandler+0x2a8>)
 800145a:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 800145e:	4b55      	ldr	r3, [pc, #340]	; (80015b4 <ESP_messageHandler+0x2d0>)
 8001460:	755a      	strb	r2, [r3, #21]
		vIlum[22] = textrc[82]; // Luz Garaje
 8001462:	4b4a      	ldr	r3, [pc, #296]	; (800158c <ESP_messageHandler+0x2a8>)
 8001464:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8001468:	4b52      	ldr	r3, [pc, #328]	; (80015b4 <ESP_messageHandler+0x2d0>)
 800146a:	759a      	strb	r2, [r3, #22]
		vIlum[23] = textrc[85]; // Luz Jardín
 800146c:	4b47      	ldr	r3, [pc, #284]	; (800158c <ESP_messageHandler+0x2a8>)
 800146e:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8001472:	4b50      	ldr	r3, [pc, #320]	; (80015b4 <ESP_messageHandler+0x2d0>)
 8001474:	75da      	strb	r2, [r3, #23]
		vIlum[24] = textrc[88]; // Luz Porche
 8001476:	4b45      	ldr	r3, [pc, #276]	; (800158c <ESP_messageHandler+0x2a8>)
 8001478:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800147c:	4b4d      	ldr	r3, [pc, #308]	; (80015b4 <ESP_messageHandler+0x2d0>)
 800147e:	761a      	strb	r2, [r3, #24]
		vIlum[25] = textrc[91]; // Luz Tendedero
 8001480:	4b42      	ldr	r3, [pc, #264]	; (800158c <ESP_messageHandler+0x2a8>)
 8001482:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 8001486:	4b4b      	ldr	r3, [pc, #300]	; (80015b4 <ESP_messageHandler+0x2d0>)
 8001488:	765a      	strb	r2, [r3, #25]
		vIlum[26] = textrc[94]; // Automático
 800148a:	4b40      	ldr	r3, [pc, #256]	; (800158c <ESP_messageHandler+0x2a8>)
 800148c:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 8001490:	4b48      	ldr	r3, [pc, #288]	; (80015b4 <ESP_messageHandler+0x2d0>)
 8001492:	769a      	strb	r2, [r3, #26]


		if(vIlum[0] == '0' || vSal[1] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, RESET); // Luz Sala
 8001494:	4b47      	ldr	r3, [pc, #284]	; (80015b4 <ESP_messageHandler+0x2d0>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b30      	cmp	r3, #48	; 0x30
 800149a:	d003      	beq.n	80014a4 <ESP_messageHandler+0x1c0>
 800149c:	4b46      	ldr	r3, [pc, #280]	; (80015b8 <ESP_messageHandler+0x2d4>)
 800149e:	785b      	ldrb	r3, [r3, #1]
 80014a0:	2b30      	cmp	r3, #48	; 0x30
 80014a2:	d105      	bne.n	80014b0 <ESP_messageHandler+0x1cc>
 80014a4:	2200      	movs	r2, #0
 80014a6:	2108      	movs	r1, #8
 80014a8:	4844      	ldr	r0, [pc, #272]	; (80015bc <ESP_messageHandler+0x2d8>)
 80014aa:	f004 fd3d 	bl	8005f28 <HAL_GPIO_WritePin>
 80014ae:	e00c      	b.n	80014ca <ESP_messageHandler+0x1e6>
		else if(vIlum[0] == '1' || vSal[1] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, SET);
 80014b0:	4b40      	ldr	r3, [pc, #256]	; (80015b4 <ESP_messageHandler+0x2d0>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b31      	cmp	r3, #49	; 0x31
 80014b6:	d003      	beq.n	80014c0 <ESP_messageHandler+0x1dc>
 80014b8:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <ESP_messageHandler+0x2d4>)
 80014ba:	785b      	ldrb	r3, [r3, #1]
 80014bc:	2b31      	cmp	r3, #49	; 0x31
 80014be:	d104      	bne.n	80014ca <ESP_messageHandler+0x1e6>
 80014c0:	2201      	movs	r2, #1
 80014c2:	2108      	movs	r1, #8
 80014c4:	483d      	ldr	r0, [pc, #244]	; (80015bc <ESP_messageHandler+0x2d8>)
 80014c6:	f004 fd2f 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[1] == '0' || vSal[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET); // Luz Comedor
 80014ca:	4b3a      	ldr	r3, [pc, #232]	; (80015b4 <ESP_messageHandler+0x2d0>)
 80014cc:	785b      	ldrb	r3, [r3, #1]
 80014ce:	2b30      	cmp	r3, #48	; 0x30
 80014d0:	d003      	beq.n	80014da <ESP_messageHandler+0x1f6>
 80014d2:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <ESP_messageHandler+0x2d4>)
 80014d4:	789b      	ldrb	r3, [r3, #2]
 80014d6:	2b30      	cmp	r3, #48	; 0x30
 80014d8:	d105      	bne.n	80014e6 <ESP_messageHandler+0x202>
 80014da:	2200      	movs	r2, #0
 80014dc:	2102      	movs	r1, #2
 80014de:	4837      	ldr	r0, [pc, #220]	; (80015bc <ESP_messageHandler+0x2d8>)
 80014e0:	f004 fd22 	bl	8005f28 <HAL_GPIO_WritePin>
 80014e4:	e00c      	b.n	8001500 <ESP_messageHandler+0x21c>
		else if(vIlum[1] == '1'|| vSal[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, SET);
 80014e6:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <ESP_messageHandler+0x2d0>)
 80014e8:	785b      	ldrb	r3, [r3, #1]
 80014ea:	2b31      	cmp	r3, #49	; 0x31
 80014ec:	d003      	beq.n	80014f6 <ESP_messageHandler+0x212>
 80014ee:	4b32      	ldr	r3, [pc, #200]	; (80015b8 <ESP_messageHandler+0x2d4>)
 80014f0:	789b      	ldrb	r3, [r3, #2]
 80014f2:	2b31      	cmp	r3, #49	; 0x31
 80014f4:	d104      	bne.n	8001500 <ESP_messageHandler+0x21c>
 80014f6:	2201      	movs	r2, #1
 80014f8:	2102      	movs	r1, #2
 80014fa:	4830      	ldr	r0, [pc, #192]	; (80015bc <ESP_messageHandler+0x2d8>)
 80014fc:	f004 fd14 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[2] == '0' || vSal[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, RESET); // Luz Ambiente
 8001500:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <ESP_messageHandler+0x2d0>)
 8001502:	789b      	ldrb	r3, [r3, #2]
 8001504:	2b30      	cmp	r3, #48	; 0x30
 8001506:	d003      	beq.n	8001510 <ESP_messageHandler+0x22c>
 8001508:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <ESP_messageHandler+0x2d4>)
 800150a:	78db      	ldrb	r3, [r3, #3]
 800150c:	2b30      	cmp	r3, #48	; 0x30
 800150e:	d105      	bne.n	800151c <ESP_messageHandler+0x238>
 8001510:	2200      	movs	r2, #0
 8001512:	2120      	movs	r1, #32
 8001514:	4829      	ldr	r0, [pc, #164]	; (80015bc <ESP_messageHandler+0x2d8>)
 8001516:	f004 fd07 	bl	8005f28 <HAL_GPIO_WritePin>
 800151a:	e00c      	b.n	8001536 <ESP_messageHandler+0x252>
		else if(vIlum[2] == '1' || vSal[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, SET);
 800151c:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <ESP_messageHandler+0x2d0>)
 800151e:	789b      	ldrb	r3, [r3, #2]
 8001520:	2b31      	cmp	r3, #49	; 0x31
 8001522:	d003      	beq.n	800152c <ESP_messageHandler+0x248>
 8001524:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <ESP_messageHandler+0x2d4>)
 8001526:	78db      	ldrb	r3, [r3, #3]
 8001528:	2b31      	cmp	r3, #49	; 0x31
 800152a:	d104      	bne.n	8001536 <ESP_messageHandler+0x252>
 800152c:	2201      	movs	r2, #1
 800152e:	2120      	movs	r1, #32
 8001530:	4822      	ldr	r0, [pc, #136]	; (80015bc <ESP_messageHandler+0x2d8>)
 8001532:	f004 fcf9 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[3] == '0' || vSal[4] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET); // Luz Recibidor
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <ESP_messageHandler+0x2d0>)
 8001538:	78db      	ldrb	r3, [r3, #3]
 800153a:	2b30      	cmp	r3, #48	; 0x30
 800153c:	d003      	beq.n	8001546 <ESP_messageHandler+0x262>
 800153e:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <ESP_messageHandler+0x2d4>)
 8001540:	791b      	ldrb	r3, [r3, #4]
 8001542:	2b30      	cmp	r3, #48	; 0x30
 8001544:	d105      	bne.n	8001552 <ESP_messageHandler+0x26e>
 8001546:	2200      	movs	r2, #0
 8001548:	2101      	movs	r1, #1
 800154a:	481c      	ldr	r0, [pc, #112]	; (80015bc <ESP_messageHandler+0x2d8>)
 800154c:	f004 fcec 	bl	8005f28 <HAL_GPIO_WritePin>
 8001550:	e00c      	b.n	800156c <ESP_messageHandler+0x288>
		else if(vIlum[3] == '1' || vSal[4] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <ESP_messageHandler+0x2d0>)
 8001554:	78db      	ldrb	r3, [r3, #3]
 8001556:	2b31      	cmp	r3, #49	; 0x31
 8001558:	d003      	beq.n	8001562 <ESP_messageHandler+0x27e>
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <ESP_messageHandler+0x2d4>)
 800155c:	791b      	ldrb	r3, [r3, #4]
 800155e:	2b31      	cmp	r3, #49	; 0x31
 8001560:	d104      	bne.n	800156c <ESP_messageHandler+0x288>
 8001562:	2201      	movs	r2, #1
 8001564:	2101      	movs	r1, #1
 8001566:	4815      	ldr	r0, [pc, #84]	; (80015bc <ESP_messageHandler+0x2d8>)
 8001568:	f004 fcde 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[4] == '0' || vCoc[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET); // Luz Cocina
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <ESP_messageHandler+0x2d0>)
 800156e:	791b      	ldrb	r3, [r3, #4]
 8001570:	2b30      	cmp	r3, #48	; 0x30
 8001572:	d003      	beq.n	800157c <ESP_messageHandler+0x298>
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <ESP_messageHandler+0x2dc>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b30      	cmp	r3, #48	; 0x30
 800157a:	d125      	bne.n	80015c8 <ESP_messageHandler+0x2e4>
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001582:	4810      	ldr	r0, [pc, #64]	; (80015c4 <ESP_messageHandler+0x2e0>)
 8001584:	f004 fcd0 	bl	8005f28 <HAL_GPIO_WritePin>
 8001588:	e02c      	b.n	80015e4 <ESP_messageHandler+0x300>
 800158a:	bf00      	nop
 800158c:	200009e0 	.word	0x200009e0
 8001590:	40021000 	.word	0x40021000
 8001594:	20000e1c 	.word	0x20000e1c
 8001598:	20000d90 	.word	0x20000d90
 800159c:	080095ec 	.word	0x080095ec
 80015a0:	200009c4 	.word	0x200009c4
 80015a4:	200009c0 	.word	0x200009c0
 80015a8:	080095f0 	.word	0x080095f0
 80015ac:	20000a58 	.word	0x20000a58
 80015b0:	080095fc 	.word	0x080095fc
 80015b4:	200009a4 	.word	0x200009a4
 80015b8:	20000a50 	.word	0x20000a50
 80015bc:	40020c00 	.word	0x40020c00
 80015c0:	20000910 	.word	0x20000910
 80015c4:	40020800 	.word	0x40020800
		else if(vIlum[4] == '1' || vCoc[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 80015c8:	4b95      	ldr	r3, [pc, #596]	; (8001820 <ESP_messageHandler+0x53c>)
 80015ca:	791b      	ldrb	r3, [r3, #4]
 80015cc:	2b31      	cmp	r3, #49	; 0x31
 80015ce:	d003      	beq.n	80015d8 <ESP_messageHandler+0x2f4>
 80015d0:	4b94      	ldr	r3, [pc, #592]	; (8001824 <ESP_messageHandler+0x540>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b31      	cmp	r3, #49	; 0x31
 80015d6:	d105      	bne.n	80015e4 <ESP_messageHandler+0x300>
 80015d8:	2201      	movs	r2, #1
 80015da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015de:	4892      	ldr	r0, [pc, #584]	; (8001828 <ESP_messageHandler+0x544>)
 80015e0:	f004 fca2 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[5] == '0' || vCoc[1] == '0') HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET); // Luz Fregadero
 80015e4:	4b8e      	ldr	r3, [pc, #568]	; (8001820 <ESP_messageHandler+0x53c>)
 80015e6:	795b      	ldrb	r3, [r3, #5]
 80015e8:	2b30      	cmp	r3, #48	; 0x30
 80015ea:	d003      	beq.n	80015f4 <ESP_messageHandler+0x310>
 80015ec:	4b8d      	ldr	r3, [pc, #564]	; (8001824 <ESP_messageHandler+0x540>)
 80015ee:	785b      	ldrb	r3, [r3, #1]
 80015f0:	2b30      	cmp	r3, #48	; 0x30
 80015f2:	d106      	bne.n	8001602 <ESP_messageHandler+0x31e>
 80015f4:	2200      	movs	r2, #0
 80015f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015fa:	488c      	ldr	r0, [pc, #560]	; (800182c <ESP_messageHandler+0x548>)
 80015fc:	f004 fc94 	bl	8005f28 <HAL_GPIO_WritePin>
 8001600:	e00d      	b.n	800161e <ESP_messageHandler+0x33a>
		else if(vIlum[5] == '1' || vCoc[1] == '1')HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 8001602:	4b87      	ldr	r3, [pc, #540]	; (8001820 <ESP_messageHandler+0x53c>)
 8001604:	795b      	ldrb	r3, [r3, #5]
 8001606:	2b31      	cmp	r3, #49	; 0x31
 8001608:	d003      	beq.n	8001612 <ESP_messageHandler+0x32e>
 800160a:	4b86      	ldr	r3, [pc, #536]	; (8001824 <ESP_messageHandler+0x540>)
 800160c:	785b      	ldrb	r3, [r3, #1]
 800160e:	2b31      	cmp	r3, #49	; 0x31
 8001610:	d105      	bne.n	800161e <ESP_messageHandler+0x33a>
 8001612:	2201      	movs	r2, #1
 8001614:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001618:	4884      	ldr	r0, [pc, #528]	; (800182c <ESP_messageHandler+0x548>)
 800161a:	f004 fc85 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[6] == '0' || vBan[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, RESET); // Luz Baño
 800161e:	4b80      	ldr	r3, [pc, #512]	; (8001820 <ESP_messageHandler+0x53c>)
 8001620:	799b      	ldrb	r3, [r3, #6]
 8001622:	2b30      	cmp	r3, #48	; 0x30
 8001624:	d003      	beq.n	800162e <ESP_messageHandler+0x34a>
 8001626:	4b82      	ldr	r3, [pc, #520]	; (8001830 <ESP_messageHandler+0x54c>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b30      	cmp	r3, #48	; 0x30
 800162c:	d105      	bne.n	800163a <ESP_messageHandler+0x356>
 800162e:	2200      	movs	r2, #0
 8001630:	2140      	movs	r1, #64	; 0x40
 8001632:	4880      	ldr	r0, [pc, #512]	; (8001834 <ESP_messageHandler+0x550>)
 8001634:	f004 fc78 	bl	8005f28 <HAL_GPIO_WritePin>
 8001638:	e00c      	b.n	8001654 <ESP_messageHandler+0x370>
		else if(vIlum[6] == '1' || vBan[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, SET);
 800163a:	4b79      	ldr	r3, [pc, #484]	; (8001820 <ESP_messageHandler+0x53c>)
 800163c:	799b      	ldrb	r3, [r3, #6]
 800163e:	2b31      	cmp	r3, #49	; 0x31
 8001640:	d003      	beq.n	800164a <ESP_messageHandler+0x366>
 8001642:	4b7b      	ldr	r3, [pc, #492]	; (8001830 <ESP_messageHandler+0x54c>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b31      	cmp	r3, #49	; 0x31
 8001648:	d104      	bne.n	8001654 <ESP_messageHandler+0x370>
 800164a:	2201      	movs	r2, #1
 800164c:	2140      	movs	r1, #64	; 0x40
 800164e:	4879      	ldr	r0, [pc, #484]	; (8001834 <ESP_messageHandler+0x550>)
 8001650:	f004 fc6a 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[7] == '0' || vBan[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET); // Luz Espejo
 8001654:	4b72      	ldr	r3, [pc, #456]	; (8001820 <ESP_messageHandler+0x53c>)
 8001656:	79db      	ldrb	r3, [r3, #7]
 8001658:	2b30      	cmp	r3, #48	; 0x30
 800165a:	d003      	beq.n	8001664 <ESP_messageHandler+0x380>
 800165c:	4b74      	ldr	r3, [pc, #464]	; (8001830 <ESP_messageHandler+0x54c>)
 800165e:	785b      	ldrb	r3, [r3, #1]
 8001660:	2b30      	cmp	r3, #48	; 0x30
 8001662:	d105      	bne.n	8001670 <ESP_messageHandler+0x38c>
 8001664:	2200      	movs	r2, #0
 8001666:	2108      	movs	r1, #8
 8001668:	4873      	ldr	r0, [pc, #460]	; (8001838 <ESP_messageHandler+0x554>)
 800166a:	f004 fc5d 	bl	8005f28 <HAL_GPIO_WritePin>
 800166e:	e00c      	b.n	800168a <ESP_messageHandler+0x3a6>
		else if(vIlum[7] == '1' || vBan[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8001670:	4b6b      	ldr	r3, [pc, #428]	; (8001820 <ESP_messageHandler+0x53c>)
 8001672:	79db      	ldrb	r3, [r3, #7]
 8001674:	2b31      	cmp	r3, #49	; 0x31
 8001676:	d003      	beq.n	8001680 <ESP_messageHandler+0x39c>
 8001678:	4b6d      	ldr	r3, [pc, #436]	; (8001830 <ESP_messageHandler+0x54c>)
 800167a:	785b      	ldrb	r3, [r3, #1]
 800167c:	2b31      	cmp	r3, #49	; 0x31
 800167e:	d104      	bne.n	800168a <ESP_messageHandler+0x3a6>
 8001680:	2201      	movs	r2, #1
 8001682:	2108      	movs	r1, #8
 8001684:	486c      	ldr	r0, [pc, #432]	; (8001838 <ESP_messageHandler+0x554>)
 8001686:	f004 fc4f 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[8] == '0' || vDor[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, RESET); // Luz Dormitorio
 800168a:	4b65      	ldr	r3, [pc, #404]	; (8001820 <ESP_messageHandler+0x53c>)
 800168c:	7a1b      	ldrb	r3, [r3, #8]
 800168e:	2b30      	cmp	r3, #48	; 0x30
 8001690:	d003      	beq.n	800169a <ESP_messageHandler+0x3b6>
 8001692:	4b6a      	ldr	r3, [pc, #424]	; (800183c <ESP_messageHandler+0x558>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b30      	cmp	r3, #48	; 0x30
 8001698:	d105      	bne.n	80016a6 <ESP_messageHandler+0x3c2>
 800169a:	2200      	movs	r2, #0
 800169c:	2180      	movs	r1, #128	; 0x80
 800169e:	4865      	ldr	r0, [pc, #404]	; (8001834 <ESP_messageHandler+0x550>)
 80016a0:	f004 fc42 	bl	8005f28 <HAL_GPIO_WritePin>
 80016a4:	e00c      	b.n	80016c0 <ESP_messageHandler+0x3dc>
		else if(vIlum[8] == '1' || vDor[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET);
 80016a6:	4b5e      	ldr	r3, [pc, #376]	; (8001820 <ESP_messageHandler+0x53c>)
 80016a8:	7a1b      	ldrb	r3, [r3, #8]
 80016aa:	2b31      	cmp	r3, #49	; 0x31
 80016ac:	d003      	beq.n	80016b6 <ESP_messageHandler+0x3d2>
 80016ae:	4b63      	ldr	r3, [pc, #396]	; (800183c <ESP_messageHandler+0x558>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b31      	cmp	r3, #49	; 0x31
 80016b4:	d104      	bne.n	80016c0 <ESP_messageHandler+0x3dc>
 80016b6:	2201      	movs	r2, #1
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	485e      	ldr	r0, [pc, #376]	; (8001834 <ESP_messageHandler+0x550>)
 80016bc:	f004 fc34 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[9] == '0' || vDor[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET); // Luz Mesita Izq
 80016c0:	4b57      	ldr	r3, [pc, #348]	; (8001820 <ESP_messageHandler+0x53c>)
 80016c2:	7a5b      	ldrb	r3, [r3, #9]
 80016c4:	2b30      	cmp	r3, #48	; 0x30
 80016c6:	d003      	beq.n	80016d0 <ESP_messageHandler+0x3ec>
 80016c8:	4b5c      	ldr	r3, [pc, #368]	; (800183c <ESP_messageHandler+0x558>)
 80016ca:	785b      	ldrb	r3, [r3, #1]
 80016cc:	2b30      	cmp	r3, #48	; 0x30
 80016ce:	d105      	bne.n	80016dc <ESP_messageHandler+0x3f8>
 80016d0:	2200      	movs	r2, #0
 80016d2:	2110      	movs	r1, #16
 80016d4:	4858      	ldr	r0, [pc, #352]	; (8001838 <ESP_messageHandler+0x554>)
 80016d6:	f004 fc27 	bl	8005f28 <HAL_GPIO_WritePin>
 80016da:	e00c      	b.n	80016f6 <ESP_messageHandler+0x412>
		else if(vIlum[9] == '1' || vDor[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80016dc:	4b50      	ldr	r3, [pc, #320]	; (8001820 <ESP_messageHandler+0x53c>)
 80016de:	7a5b      	ldrb	r3, [r3, #9]
 80016e0:	2b31      	cmp	r3, #49	; 0x31
 80016e2:	d003      	beq.n	80016ec <ESP_messageHandler+0x408>
 80016e4:	4b55      	ldr	r3, [pc, #340]	; (800183c <ESP_messageHandler+0x558>)
 80016e6:	785b      	ldrb	r3, [r3, #1]
 80016e8:	2b31      	cmp	r3, #49	; 0x31
 80016ea:	d104      	bne.n	80016f6 <ESP_messageHandler+0x412>
 80016ec:	2201      	movs	r2, #1
 80016ee:	2110      	movs	r1, #16
 80016f0:	4851      	ldr	r0, [pc, #324]	; (8001838 <ESP_messageHandler+0x554>)
 80016f2:	f004 fc19 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[10] == '0' || vDor[2] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET); // Luz Mesita Dch
 80016f6:	4b4a      	ldr	r3, [pc, #296]	; (8001820 <ESP_messageHandler+0x53c>)
 80016f8:	7a9b      	ldrb	r3, [r3, #10]
 80016fa:	2b30      	cmp	r3, #48	; 0x30
 80016fc:	d003      	beq.n	8001706 <ESP_messageHandler+0x422>
 80016fe:	4b4f      	ldr	r3, [pc, #316]	; (800183c <ESP_messageHandler+0x558>)
 8001700:	789b      	ldrb	r3, [r3, #2]
 8001702:	2b30      	cmp	r3, #48	; 0x30
 8001704:	d105      	bne.n	8001712 <ESP_messageHandler+0x42e>
 8001706:	2200      	movs	r2, #0
 8001708:	2140      	movs	r1, #64	; 0x40
 800170a:	484b      	ldr	r0, [pc, #300]	; (8001838 <ESP_messageHandler+0x554>)
 800170c:	f004 fc0c 	bl	8005f28 <HAL_GPIO_WritePin>
 8001710:	e00c      	b.n	800172c <ESP_messageHandler+0x448>
		else if(vIlum[10] == '1' || vDor[2] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8001712:	4b43      	ldr	r3, [pc, #268]	; (8001820 <ESP_messageHandler+0x53c>)
 8001714:	7a9b      	ldrb	r3, [r3, #10]
 8001716:	2b31      	cmp	r3, #49	; 0x31
 8001718:	d003      	beq.n	8001722 <ESP_messageHandler+0x43e>
 800171a:	4b48      	ldr	r3, [pc, #288]	; (800183c <ESP_messageHandler+0x558>)
 800171c:	789b      	ldrb	r3, [r3, #2]
 800171e:	2b31      	cmp	r3, #49	; 0x31
 8001720:	d104      	bne.n	800172c <ESP_messageHandler+0x448>
 8001722:	2201      	movs	r2, #1
 8001724:	2140      	movs	r1, #64	; 0x40
 8001726:	4844      	ldr	r0, [pc, #272]	; (8001838 <ESP_messageHandler+0x554>)
 8001728:	f004 fbfe 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[11] == '0' || vOfi[0] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET); // Luz Oficina
 800172c:	4b3c      	ldr	r3, [pc, #240]	; (8001820 <ESP_messageHandler+0x53c>)
 800172e:	7adb      	ldrb	r3, [r3, #11]
 8001730:	2b30      	cmp	r3, #48	; 0x30
 8001732:	d003      	beq.n	800173c <ESP_messageHandler+0x458>
 8001734:	4b42      	ldr	r3, [pc, #264]	; (8001840 <ESP_messageHandler+0x55c>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b30      	cmp	r3, #48	; 0x30
 800173a:	d105      	bne.n	8001748 <ESP_messageHandler+0x464>
 800173c:	2200      	movs	r2, #0
 800173e:	2120      	movs	r1, #32
 8001740:	483d      	ldr	r0, [pc, #244]	; (8001838 <ESP_messageHandler+0x554>)
 8001742:	f004 fbf1 	bl	8005f28 <HAL_GPIO_WritePin>
 8001746:	e00c      	b.n	8001762 <ESP_messageHandler+0x47e>
		else if(vIlum[11] == '1' || vOfi[0] == '1') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001748:	4b35      	ldr	r3, [pc, #212]	; (8001820 <ESP_messageHandler+0x53c>)
 800174a:	7adb      	ldrb	r3, [r3, #11]
 800174c:	2b31      	cmp	r3, #49	; 0x31
 800174e:	d003      	beq.n	8001758 <ESP_messageHandler+0x474>
 8001750:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <ESP_messageHandler+0x55c>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b31      	cmp	r3, #49	; 0x31
 8001756:	d104      	bne.n	8001762 <ESP_messageHandler+0x47e>
 8001758:	2201      	movs	r2, #1
 800175a:	2120      	movs	r1, #32
 800175c:	4836      	ldr	r0, [pc, #216]	; (8001838 <ESP_messageHandler+0x554>)
 800175e:	f004 fbe3 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[12] == '0' || vOfi[1] == '0'){ // Luz Gaming
 8001762:	4b2f      	ldr	r3, [pc, #188]	; (8001820 <ESP_messageHandler+0x53c>)
 8001764:	7b1b      	ldrb	r3, [r3, #12]
 8001766:	2b30      	cmp	r3, #48	; 0x30
 8001768:	d003      	beq.n	8001772 <ESP_messageHandler+0x48e>
 800176a:	4b35      	ldr	r3, [pc, #212]	; (8001840 <ESP_messageHandler+0x55c>)
 800176c:	785b      	ldrb	r3, [r3, #1]
 800176e:	2b30      	cmp	r3, #48	; 0x30
 8001770:	d10c      	bne.n	800178c <ESP_messageHandler+0x4a8>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001772:	4b34      	ldr	r3, [pc, #208]	; (8001844 <ESP_messageHandler+0x560>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2200      	movs	r2, #0
 8001778:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800177a:	4b32      	ldr	r3, [pc, #200]	; (8001844 <ESP_messageHandler+0x560>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2200      	movs	r2, #0
 8001780:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001782:	4b30      	ldr	r3, [pc, #192]	; (8001844 <ESP_messageHandler+0x560>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2200      	movs	r2, #0
 8001788:	63da      	str	r2, [r3, #60]	; 0x3c
 800178a:	e03a      	b.n	8001802 <ESP_messageHandler+0x51e>
		}
		else if(vIlum[12] == '1' || vOfi[1] == '1'){
 800178c:	4b24      	ldr	r3, [pc, #144]	; (8001820 <ESP_messageHandler+0x53c>)
 800178e:	7b1b      	ldrb	r3, [r3, #12]
 8001790:	2b31      	cmp	r3, #49	; 0x31
 8001792:	d003      	beq.n	800179c <ESP_messageHandler+0x4b8>
 8001794:	4b2a      	ldr	r3, [pc, #168]	; (8001840 <ESP_messageHandler+0x55c>)
 8001796:	785b      	ldrb	r3, [r3, #1]
 8001798:	2b31      	cmp	r3, #49	; 0x31
 800179a:	d132      	bne.n	8001802 <ESP_messageHandler+0x51e>

			//uint8_t r, g, b;

			r = rgb_value (vIlum[13],vIlum[14],vIlum[15]);
 800179c:	4b20      	ldr	r3, [pc, #128]	; (8001820 <ESP_messageHandler+0x53c>)
 800179e:	7b5b      	ldrb	r3, [r3, #13]
 80017a0:	4a1f      	ldr	r2, [pc, #124]	; (8001820 <ESP_messageHandler+0x53c>)
 80017a2:	7b91      	ldrb	r1, [r2, #14]
 80017a4:	4a1e      	ldr	r2, [pc, #120]	; (8001820 <ESP_messageHandler+0x53c>)
 80017a6:	7bd2      	ldrb	r2, [r2, #15]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 fe49 	bl	8002440 <rgb_value>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4a25      	ldr	r2, [pc, #148]	; (8001848 <ESP_messageHandler+0x564>)
 80017b2:	6013      	str	r3, [r2, #0]
			g = rgb_value (vIlum[16],vIlum[17],vIlum[18]);
 80017b4:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <ESP_messageHandler+0x53c>)
 80017b6:	7c1b      	ldrb	r3, [r3, #16]
 80017b8:	4a19      	ldr	r2, [pc, #100]	; (8001820 <ESP_messageHandler+0x53c>)
 80017ba:	7c51      	ldrb	r1, [r2, #17]
 80017bc:	4a18      	ldr	r2, [pc, #96]	; (8001820 <ESP_messageHandler+0x53c>)
 80017be:	7c92      	ldrb	r2, [r2, #18]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 fe3d 	bl	8002440 <rgb_value>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4a20      	ldr	r2, [pc, #128]	; (800184c <ESP_messageHandler+0x568>)
 80017ca:	6013      	str	r3, [r2, #0]
			b = rgb_value (vIlum[19],vIlum[20],vIlum[21]);
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <ESP_messageHandler+0x53c>)
 80017ce:	7cdb      	ldrb	r3, [r3, #19]
 80017d0:	4a13      	ldr	r2, [pc, #76]	; (8001820 <ESP_messageHandler+0x53c>)
 80017d2:	7d11      	ldrb	r1, [r2, #20]
 80017d4:	4a12      	ldr	r2, [pc, #72]	; (8001820 <ESP_messageHandler+0x53c>)
 80017d6:	7d52      	ldrb	r2, [r2, #21]
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 fe31 	bl	8002440 <rgb_value>
 80017de:	4603      	mov	r3, r0
 80017e0:	4a1b      	ldr	r2, [pc, #108]	; (8001850 <ESP_messageHandler+0x56c>)
 80017e2:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, g); // PA8
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <ESP_messageHandler+0x568>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b16      	ldr	r3, [pc, #88]	; (8001844 <ESP_messageHandler+0x560>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, r); // PA9
 80017ee:	4b16      	ldr	r3, [pc, #88]	; (8001848 <ESP_messageHandler+0x564>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <ESP_messageHandler+0x560>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b); // PA10
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <ESP_messageHandler+0x56c>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <ESP_messageHandler+0x560>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		if(vIlum[22] == '0' || vGar[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET); // Luz Garaje
 8001802:	4b07      	ldr	r3, [pc, #28]	; (8001820 <ESP_messageHandler+0x53c>)
 8001804:	7d9b      	ldrb	r3, [r3, #22]
 8001806:	2b30      	cmp	r3, #48	; 0x30
 8001808:	d003      	beq.n	8001812 <ESP_messageHandler+0x52e>
 800180a:	4b12      	ldr	r3, [pc, #72]	; (8001854 <ESP_messageHandler+0x570>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b30      	cmp	r3, #48	; 0x30
 8001810:	d122      	bne.n	8001858 <ESP_messageHandler+0x574>
 8001812:	2200      	movs	r2, #0
 8001814:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001818:	4803      	ldr	r0, [pc, #12]	; (8001828 <ESP_messageHandler+0x544>)
 800181a:	f004 fb85 	bl	8005f28 <HAL_GPIO_WritePin>
 800181e:	e029      	b.n	8001874 <ESP_messageHandler+0x590>
 8001820:	200009a4 	.word	0x200009a4
 8001824:	20000910 	.word	0x20000910
 8001828:	40020800 	.word	0x40020800
 800182c:	40020000 	.word	0x40020000
 8001830:	2000098c 	.word	0x2000098c
 8001834:	40020c00 	.word	0x40020c00
 8001838:	40020400 	.word	0x40020400
 800183c:	20000914 	.word	0x20000914
 8001840:	20000980 	.word	0x20000980
 8001844:	20000cf8 	.word	0x20000cf8
 8001848:	2000092c 	.word	0x2000092c
 800184c:	20000920 	.word	0x20000920
 8001850:	20000918 	.word	0x20000918
 8001854:	20000974 	.word	0x20000974
		else if(vIlum[22] == '1' || vGar[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 8001858:	4b9f      	ldr	r3, [pc, #636]	; (8001ad8 <ESP_messageHandler+0x7f4>)
 800185a:	7d9b      	ldrb	r3, [r3, #22]
 800185c:	2b31      	cmp	r3, #49	; 0x31
 800185e:	d003      	beq.n	8001868 <ESP_messageHandler+0x584>
 8001860:	4b9e      	ldr	r3, [pc, #632]	; (8001adc <ESP_messageHandler+0x7f8>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b31      	cmp	r3, #49	; 0x31
 8001866:	d105      	bne.n	8001874 <ESP_messageHandler+0x590>
 8001868:	2201      	movs	r2, #1
 800186a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800186e:	489c      	ldr	r0, [pc, #624]	; (8001ae0 <ESP_messageHandler+0x7fc>)
 8001870:	f004 fb5a 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[23] == '0' || vExt[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET); // Luz Jardín
 8001874:	4b98      	ldr	r3, [pc, #608]	; (8001ad8 <ESP_messageHandler+0x7f4>)
 8001876:	7ddb      	ldrb	r3, [r3, #23]
 8001878:	2b30      	cmp	r3, #48	; 0x30
 800187a:	d003      	beq.n	8001884 <ESP_messageHandler+0x5a0>
 800187c:	4b99      	ldr	r3, [pc, #612]	; (8001ae4 <ESP_messageHandler+0x800>)
 800187e:	78db      	ldrb	r3, [r3, #3]
 8001880:	2b30      	cmp	r3, #48	; 0x30
 8001882:	d105      	bne.n	8001890 <ESP_messageHandler+0x5ac>
 8001884:	2200      	movs	r2, #0
 8001886:	2104      	movs	r1, #4
 8001888:	4897      	ldr	r0, [pc, #604]	; (8001ae8 <ESP_messageHandler+0x804>)
 800188a:	f004 fb4d 	bl	8005f28 <HAL_GPIO_WritePin>
 800188e:	e00c      	b.n	80018aa <ESP_messageHandler+0x5c6>
		else if(vIlum[23] == '1' || vExt[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8001890:	4b91      	ldr	r3, [pc, #580]	; (8001ad8 <ESP_messageHandler+0x7f4>)
 8001892:	7ddb      	ldrb	r3, [r3, #23]
 8001894:	2b31      	cmp	r3, #49	; 0x31
 8001896:	d003      	beq.n	80018a0 <ESP_messageHandler+0x5bc>
 8001898:	4b92      	ldr	r3, [pc, #584]	; (8001ae4 <ESP_messageHandler+0x800>)
 800189a:	78db      	ldrb	r3, [r3, #3]
 800189c:	2b31      	cmp	r3, #49	; 0x31
 800189e:	d104      	bne.n	80018aa <ESP_messageHandler+0x5c6>
 80018a0:	2201      	movs	r2, #1
 80018a2:	2104      	movs	r1, #4
 80018a4:	4890      	ldr	r0, [pc, #576]	; (8001ae8 <ESP_messageHandler+0x804>)
 80018a6:	f004 fb3f 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[24] == '0' || vExt[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET); // Luz Porche
 80018aa:	4b8b      	ldr	r3, [pc, #556]	; (8001ad8 <ESP_messageHandler+0x7f4>)
 80018ac:	7e1b      	ldrb	r3, [r3, #24]
 80018ae:	2b30      	cmp	r3, #48	; 0x30
 80018b0:	d003      	beq.n	80018ba <ESP_messageHandler+0x5d6>
 80018b2:	4b8c      	ldr	r3, [pc, #560]	; (8001ae4 <ESP_messageHandler+0x800>)
 80018b4:	789b      	ldrb	r3, [r3, #2]
 80018b6:	2b30      	cmp	r3, #48	; 0x30
 80018b8:	d105      	bne.n	80018c6 <ESP_messageHandler+0x5e2>
 80018ba:	2200      	movs	r2, #0
 80018bc:	2110      	movs	r1, #16
 80018be:	488a      	ldr	r0, [pc, #552]	; (8001ae8 <ESP_messageHandler+0x804>)
 80018c0:	f004 fb32 	bl	8005f28 <HAL_GPIO_WritePin>
 80018c4:	e00c      	b.n	80018e0 <ESP_messageHandler+0x5fc>
		else if(vIlum[24] == '1' || vExt[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 80018c6:	4b84      	ldr	r3, [pc, #528]	; (8001ad8 <ESP_messageHandler+0x7f4>)
 80018c8:	7e1b      	ldrb	r3, [r3, #24]
 80018ca:	2b31      	cmp	r3, #49	; 0x31
 80018cc:	d003      	beq.n	80018d6 <ESP_messageHandler+0x5f2>
 80018ce:	4b85      	ldr	r3, [pc, #532]	; (8001ae4 <ESP_messageHandler+0x800>)
 80018d0:	789b      	ldrb	r3, [r3, #2]
 80018d2:	2b31      	cmp	r3, #49	; 0x31
 80018d4:	d104      	bne.n	80018e0 <ESP_messageHandler+0x5fc>
 80018d6:	2201      	movs	r2, #1
 80018d8:	2110      	movs	r1, #16
 80018da:	4883      	ldr	r0, [pc, #524]	; (8001ae8 <ESP_messageHandler+0x804>)
 80018dc:	f004 fb24 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[25] == '0' || vExt[1] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET); // Luz Tendedero
 80018e0:	4b7d      	ldr	r3, [pc, #500]	; (8001ad8 <ESP_messageHandler+0x7f4>)
 80018e2:	7e5b      	ldrb	r3, [r3, #25]
 80018e4:	2b30      	cmp	r3, #48	; 0x30
 80018e6:	d003      	beq.n	80018f0 <ESP_messageHandler+0x60c>
 80018e8:	4b7e      	ldr	r3, [pc, #504]	; (8001ae4 <ESP_messageHandler+0x800>)
 80018ea:	785b      	ldrb	r3, [r3, #1]
 80018ec:	2b30      	cmp	r3, #48	; 0x30
 80018ee:	d106      	bne.n	80018fe <ESP_messageHandler+0x61a>
 80018f0:	2200      	movs	r2, #0
 80018f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018f6:	487a      	ldr	r0, [pc, #488]	; (8001ae0 <ESP_messageHandler+0x7fc>)
 80018f8:	f004 fb16 	bl	8005f28 <HAL_GPIO_WritePin>
 80018fc:	e00d      	b.n	800191a <ESP_messageHandler+0x636>
		else if(vIlum[25] == '1' || vExt[1] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 80018fe:	4b76      	ldr	r3, [pc, #472]	; (8001ad8 <ESP_messageHandler+0x7f4>)
 8001900:	7e5b      	ldrb	r3, [r3, #25]
 8001902:	2b31      	cmp	r3, #49	; 0x31
 8001904:	d003      	beq.n	800190e <ESP_messageHandler+0x62a>
 8001906:	4b77      	ldr	r3, [pc, #476]	; (8001ae4 <ESP_messageHandler+0x800>)
 8001908:	785b      	ldrb	r3, [r3, #1]
 800190a:	2b31      	cmp	r3, #49	; 0x31
 800190c:	d105      	bne.n	800191a <ESP_messageHandler+0x636>
 800190e:	2201      	movs	r2, #1
 8001910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001914:	4872      	ldr	r0, [pc, #456]	; (8001ae0 <ESP_messageHandler+0x7fc>)
 8001916:	f004 fb07 	bl	8005f28 <HAL_GPIO_WritePin>
	}

	// PUERTAS Y VENTANAS
	if (fragment[0] == 'p'){
 800191a:	4b74      	ldr	r3, [pc, #464]	; (8001aec <ESP_messageHandler+0x808>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b70      	cmp	r3, #112	; 0x70
 8001920:	d107      	bne.n	8001932 <ESP_messageHandler+0x64e>
		UART_send("PUERTAS Y VENTANAS (PUERTA PARCELA)\n", PC_UART);
 8001922:	4973      	ldr	r1, [pc, #460]	; (8001af0 <ESP_messageHandler+0x80c>)
 8001924:	4873      	ldr	r0, [pc, #460]	; (8001af4 <ESP_messageHandler+0x810>)
 8001926:	f001 f9bd 	bl	8002ca4 <UART_send>
		vVent[0] = textrc[28]; // P. Parcela
 800192a:	4b73      	ldr	r3, [pc, #460]	; (8001af8 <ESP_messageHandler+0x814>)
 800192c:	7f1a      	ldrb	r2, [r3, #28]
 800192e:	4b73      	ldr	r3, [pc, #460]	; (8001afc <ESP_messageHandler+0x818>)
 8001930:	701a      	strb	r2, [r3, #0]
	}
	if (fragment[0] == 'g'){
 8001932:	4b6e      	ldr	r3, [pc, #440]	; (8001aec <ESP_messageHandler+0x808>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b67      	cmp	r3, #103	; 0x67
 8001938:	d107      	bne.n	800194a <ESP_messageHandler+0x666>
		UART_send("PUERTAS Y VENTANAS (PUERTA GARAJE)\n", PC_UART);
 800193a:	496d      	ldr	r1, [pc, #436]	; (8001af0 <ESP_messageHandler+0x80c>)
 800193c:	4870      	ldr	r0, [pc, #448]	; (8001b00 <ESP_messageHandler+0x81c>)
 800193e:	f001 f9b1 	bl	8002ca4 <UART_send>
		vVent[1] = textrc[31]; // P. Garaje
 8001942:	4b6d      	ldr	r3, [pc, #436]	; (8001af8 <ESP_messageHandler+0x814>)
 8001944:	7fda      	ldrb	r2, [r3, #31]
 8001946:	4b6d      	ldr	r3, [pc, #436]	; (8001afc <ESP_messageHandler+0x818>)
 8001948:	705a      	strb	r2, [r3, #1]
	}
	if (fragment[0] == 'l'){
 800194a:	4b68      	ldr	r3, [pc, #416]	; (8001aec <ESP_messageHandler+0x808>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b6c      	cmp	r3, #108	; 0x6c
 8001950:	d108      	bne.n	8001964 <ESP_messageHandler+0x680>
		UART_send("PUERTAS Y VENTANAS (VENTANA SALÓN)\n", PC_UART);
 8001952:	4967      	ldr	r1, [pc, #412]	; (8001af0 <ESP_messageHandler+0x80c>)
 8001954:	486b      	ldr	r0, [pc, #428]	; (8001b04 <ESP_messageHandler+0x820>)
 8001956:	f001 f9a5 	bl	8002ca4 <UART_send>
		vVent[2] = textrc[34]; // V. Salón
 800195a:	4b67      	ldr	r3, [pc, #412]	; (8001af8 <ESP_messageHandler+0x814>)
 800195c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001960:	4b66      	ldr	r3, [pc, #408]	; (8001afc <ESP_messageHandler+0x818>)
 8001962:	709a      	strb	r2, [r3, #2]
	}
	if (fragment[0] == 'd'){
 8001964:	4b61      	ldr	r3, [pc, #388]	; (8001aec <ESP_messageHandler+0x808>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b64      	cmp	r3, #100	; 0x64
 800196a:	d108      	bne.n	800197e <ESP_messageHandler+0x69a>
		UART_send("PUERTAS Y VENTANAS (VENTANA DORMITORIO)\n", PC_UART);
 800196c:	4960      	ldr	r1, [pc, #384]	; (8001af0 <ESP_messageHandler+0x80c>)
 800196e:	4866      	ldr	r0, [pc, #408]	; (8001b08 <ESP_messageHandler+0x824>)
 8001970:	f001 f998 	bl	8002ca4 <UART_send>
		vVent[3] = textrc[37]; // V. Dormitorio
 8001974:	4b60      	ldr	r3, [pc, #384]	; (8001af8 <ESP_messageHandler+0x814>)
 8001976:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800197a:	4b60      	ldr	r3, [pc, #384]	; (8001afc <ESP_messageHandler+0x818>)
 800197c:	70da      	strb	r2, [r3, #3]
	}
	if (fragment[0] == 'o'){
 800197e:	4b5b      	ldr	r3, [pc, #364]	; (8001aec <ESP_messageHandler+0x808>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b6f      	cmp	r3, #111	; 0x6f
 8001984:	d108      	bne.n	8001998 <ESP_messageHandler+0x6b4>
		UART_send("PUERTAS Y VENTANAS (VENTANA OFICINA)\n", PC_UART);
 8001986:	495a      	ldr	r1, [pc, #360]	; (8001af0 <ESP_messageHandler+0x80c>)
 8001988:	4860      	ldr	r0, [pc, #384]	; (8001b0c <ESP_messageHandler+0x828>)
 800198a:	f001 f98b 	bl	8002ca4 <UART_send>
		vVent[4] = textrc[40]; // V. Oficina
 800198e:	4b5a      	ldr	r3, [pc, #360]	; (8001af8 <ESP_messageHandler+0x814>)
 8001990:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001994:	4b59      	ldr	r3, [pc, #356]	; (8001afc <ESP_messageHandler+0x818>)
 8001996:	711a      	strb	r2, [r3, #4]
	}

	// TIEMPO
	if (fragment[0] == 't'){
 8001998:	4b54      	ldr	r3, [pc, #336]	; (8001aec <ESP_messageHandler+0x808>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b74      	cmp	r3, #116	; 0x74
 800199e:	d133      	bne.n	8001a08 <ESP_messageHandler+0x724>
		UART_send("TIEMPO\n", PC_UART);
 80019a0:	4953      	ldr	r1, [pc, #332]	; (8001af0 <ESP_messageHandler+0x80c>)
 80019a2:	485b      	ldr	r0, [pc, #364]	; (8001b10 <ESP_messageHandler+0x82c>)
 80019a4:	f001 f97e 	bl	8002ca4 <UART_send>
		vTemp[0] = textrc[28]; 	// Vent. Salón
 80019a8:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <ESP_messageHandler+0x814>)
 80019aa:	7f1a      	ldrb	r2, [r3, #28]
 80019ac:	4b59      	ldr	r3, [pc, #356]	; (8001b14 <ESP_messageHandler+0x830>)
 80019ae:	701a      	strb	r2, [r3, #0]
		vTemp[1] = textrc[31]; 	// Vent. Dormitorio
 80019b0:	4b51      	ldr	r3, [pc, #324]	; (8001af8 <ESP_messageHandler+0x814>)
 80019b2:	7fda      	ldrb	r2, [r3, #31]
 80019b4:	4b57      	ldr	r3, [pc, #348]	; (8001b14 <ESP_messageHandler+0x830>)
 80019b6:	705a      	strb	r2, [r3, #1]
		vTemp[2] = textrc[34]; 	// Vent. Oficina
 80019b8:	4b4f      	ldr	r3, [pc, #316]	; (8001af8 <ESP_messageHandler+0x814>)
 80019ba:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80019be:	4b55      	ldr	r3, [pc, #340]	; (8001b14 <ESP_messageHandler+0x830>)
 80019c0:	709a      	strb	r2, [r3, #2]
		vTemp[3] = textrc[37]; 	// Calefacción
 80019c2:	4b4d      	ldr	r3, [pc, #308]	; (8001af8 <ESP_messageHandler+0x814>)
 80019c4:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80019c8:	4b52      	ldr	r3, [pc, #328]	; (8001b14 <ESP_messageHandler+0x830>)
 80019ca:	70da      	strb	r2, [r3, #3]
		vTemp[4] = textrc[40]; 	// Automático
 80019cc:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <ESP_messageHandler+0x814>)
 80019ce:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80019d2:	4b50      	ldr	r3, [pc, #320]	; (8001b14 <ESP_messageHandler+0x830>)
 80019d4:	711a      	strb	r2, [r3, #4]

		if(vTemp[4] == '0'){
 80019d6:	4b4f      	ldr	r3, [pc, #316]	; (8001b14 <ESP_messageHandler+0x830>)
 80019d8:	791b      	ldrb	r3, [r3, #4]
 80019da:	2b30      	cmp	r3, #48	; 0x30
 80019dc:	d114      	bne.n	8001a08 <ESP_messageHandler+0x724>
			if(vTemp[3] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET); // Calefacción
 80019de:	4b4d      	ldr	r3, [pc, #308]	; (8001b14 <ESP_messageHandler+0x830>)
 80019e0:	78db      	ldrb	r3, [r3, #3]
 80019e2:	2b30      	cmp	r3, #48	; 0x30
 80019e4:	d106      	bne.n	80019f4 <ESP_messageHandler+0x710>
 80019e6:	2200      	movs	r2, #0
 80019e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019ec:	484a      	ldr	r0, [pc, #296]	; (8001b18 <ESP_messageHandler+0x834>)
 80019ee:	f004 fa9b 	bl	8005f28 <HAL_GPIO_WritePin>
 80019f2:	e009      	b.n	8001a08 <ESP_messageHandler+0x724>
			else if(vTemp[3] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 80019f4:	4b47      	ldr	r3, [pc, #284]	; (8001b14 <ESP_messageHandler+0x830>)
 80019f6:	78db      	ldrb	r3, [r3, #3]
 80019f8:	2b31      	cmp	r3, #49	; 0x31
 80019fa:	d105      	bne.n	8001a08 <ESP_messageHandler+0x724>
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a02:	4845      	ldr	r0, [pc, #276]	; (8001b18 <ESP_messageHandler+0x834>)
 8001a04:	f004 fa90 	bl	8005f28 <HAL_GPIO_WritePin>
		}
    }

	// EXTERIOR
	if (fragment[0] == 'e'){
 8001a08:	4b38      	ldr	r3, [pc, #224]	; (8001aec <ESP_messageHandler+0x808>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b65      	cmp	r3, #101	; 0x65
 8001a0e:	f040 8094 	bne.w	8001b3a <ESP_messageHandler+0x856>
		UART_send("LUCES (EXTERIOR)\n", PC_UART);
 8001a12:	4937      	ldr	r1, [pc, #220]	; (8001af0 <ESP_messageHandler+0x80c>)
 8001a14:	4841      	ldr	r0, [pc, #260]	; (8001b1c <ESP_messageHandler+0x838>)
 8001a16:	f001 f945 	bl	8002ca4 <UART_send>
		//vExt[0] = textrc[28]; 	// Toldo Tendedero
		vExt[1] = textrc[31]; 	// Luz Tendedero
 8001a1a:	4b37      	ldr	r3, [pc, #220]	; (8001af8 <ESP_messageHandler+0x814>)
 8001a1c:	7fda      	ldrb	r2, [r3, #31]
 8001a1e:	4b31      	ldr	r3, [pc, #196]	; (8001ae4 <ESP_messageHandler+0x800>)
 8001a20:	705a      	strb	r2, [r3, #1]
		vExt[2] = textrc[34]; 	// Luz Porche
 8001a22:	4b35      	ldr	r3, [pc, #212]	; (8001af8 <ESP_messageHandler+0x814>)
 8001a24:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001a28:	4b2e      	ldr	r3, [pc, #184]	; (8001ae4 <ESP_messageHandler+0x800>)
 8001a2a:	709a      	strb	r2, [r3, #2]
		vExt[3] = textrc[37]; 	// Luz Jardín
 8001a2c:	4b32      	ldr	r3, [pc, #200]	; (8001af8 <ESP_messageHandler+0x814>)
 8001a2e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001a32:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <ESP_messageHandler+0x800>)
 8001a34:	70da      	strb	r2, [r3, #3]
		//vExt[4] = textrc[40]; 	// Puerta Parcela
		vExt[5] = textrc[43]; // Automático
 8001a36:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <ESP_messageHandler+0x814>)
 8001a38:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8001a3c:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <ESP_messageHandler+0x800>)
 8001a3e:	715a      	strb	r2, [r3, #5]
		vExt[6] = textrc[46]; // Ropa tendida
 8001a40:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <ESP_messageHandler+0x814>)
 8001a42:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8001a46:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <ESP_messageHandler+0x800>)
 8001a48:	719a      	strb	r2, [r3, #6]

		if(vIlum[25] == '0' || vExt[1] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET); // Luz Tendedero
 8001a4a:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <ESP_messageHandler+0x7f4>)
 8001a4c:	7e5b      	ldrb	r3, [r3, #25]
 8001a4e:	2b30      	cmp	r3, #48	; 0x30
 8001a50:	d003      	beq.n	8001a5a <ESP_messageHandler+0x776>
 8001a52:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <ESP_messageHandler+0x800>)
 8001a54:	785b      	ldrb	r3, [r3, #1]
 8001a56:	2b30      	cmp	r3, #48	; 0x30
 8001a58:	d106      	bne.n	8001a68 <ESP_messageHandler+0x784>
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a60:	481f      	ldr	r0, [pc, #124]	; (8001ae0 <ESP_messageHandler+0x7fc>)
 8001a62:	f004 fa61 	bl	8005f28 <HAL_GPIO_WritePin>
 8001a66:	e00d      	b.n	8001a84 <ESP_messageHandler+0x7a0>
		else if(vIlum[25] == '1' || vExt[1] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8001a68:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <ESP_messageHandler+0x7f4>)
 8001a6a:	7e5b      	ldrb	r3, [r3, #25]
 8001a6c:	2b31      	cmp	r3, #49	; 0x31
 8001a6e:	d003      	beq.n	8001a78 <ESP_messageHandler+0x794>
 8001a70:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <ESP_messageHandler+0x800>)
 8001a72:	785b      	ldrb	r3, [r3, #1]
 8001a74:	2b31      	cmp	r3, #49	; 0x31
 8001a76:	d105      	bne.n	8001a84 <ESP_messageHandler+0x7a0>
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a7e:	4818      	ldr	r0, [pc, #96]	; (8001ae0 <ESP_messageHandler+0x7fc>)
 8001a80:	f004 fa52 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[24] == '0' || vExt[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET); // Luz Porche
 8001a84:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <ESP_messageHandler+0x7f4>)
 8001a86:	7e1b      	ldrb	r3, [r3, #24]
 8001a88:	2b30      	cmp	r3, #48	; 0x30
 8001a8a:	d003      	beq.n	8001a94 <ESP_messageHandler+0x7b0>
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <ESP_messageHandler+0x800>)
 8001a8e:	789b      	ldrb	r3, [r3, #2]
 8001a90:	2b30      	cmp	r3, #48	; 0x30
 8001a92:	d105      	bne.n	8001aa0 <ESP_messageHandler+0x7bc>
 8001a94:	2200      	movs	r2, #0
 8001a96:	2110      	movs	r1, #16
 8001a98:	4813      	ldr	r0, [pc, #76]	; (8001ae8 <ESP_messageHandler+0x804>)
 8001a9a:	f004 fa45 	bl	8005f28 <HAL_GPIO_WritePin>
 8001a9e:	e00c      	b.n	8001aba <ESP_messageHandler+0x7d6>
		else if(vIlum[24] == '1' || vExt[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 8001aa0:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <ESP_messageHandler+0x7f4>)
 8001aa2:	7e1b      	ldrb	r3, [r3, #24]
 8001aa4:	2b31      	cmp	r3, #49	; 0x31
 8001aa6:	d003      	beq.n	8001ab0 <ESP_messageHandler+0x7cc>
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <ESP_messageHandler+0x800>)
 8001aaa:	789b      	ldrb	r3, [r3, #2]
 8001aac:	2b31      	cmp	r3, #49	; 0x31
 8001aae:	d104      	bne.n	8001aba <ESP_messageHandler+0x7d6>
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	2110      	movs	r1, #16
 8001ab4:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <ESP_messageHandler+0x804>)
 8001ab6:	f004 fa37 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[23] == '0' || vExt[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET); // Luz Jardín
 8001aba:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <ESP_messageHandler+0x7f4>)
 8001abc:	7ddb      	ldrb	r3, [r3, #23]
 8001abe:	2b30      	cmp	r3, #48	; 0x30
 8001ac0:	d003      	beq.n	8001aca <ESP_messageHandler+0x7e6>
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <ESP_messageHandler+0x800>)
 8001ac4:	78db      	ldrb	r3, [r3, #3]
 8001ac6:	2b30      	cmp	r3, #48	; 0x30
 8001ac8:	d12a      	bne.n	8001b20 <ESP_messageHandler+0x83c>
 8001aca:	2200      	movs	r2, #0
 8001acc:	2104      	movs	r1, #4
 8001ace:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <ESP_messageHandler+0x804>)
 8001ad0:	f004 fa2a 	bl	8005f28 <HAL_GPIO_WritePin>
 8001ad4:	e031      	b.n	8001b3a <ESP_messageHandler+0x856>
 8001ad6:	bf00      	nop
 8001ad8:	200009a4 	.word	0x200009a4
 8001adc:	20000974 	.word	0x20000974
 8001ae0:	40020800 	.word	0x40020800
 8001ae4:	20000930 	.word	0x20000930
 8001ae8:	40020c00 	.word	0x40020c00
 8001aec:	200009c4 	.word	0x200009c4
 8001af0:	20000d90 	.word	0x20000d90
 8001af4:	0800960c 	.word	0x0800960c
 8001af8:	200009e0 	.word	0x200009e0
 8001afc:	20000924 	.word	0x20000924
 8001b00:	08009634 	.word	0x08009634
 8001b04:	08009658 	.word	0x08009658
 8001b08:	08009680 	.word	0x08009680
 8001b0c:	080096ac 	.word	0x080096ac
 8001b10:	080096d4 	.word	0x080096d4
 8001b14:	20000978 	.word	0x20000978
 8001b18:	40020400 	.word	0x40020400
 8001b1c:	080096dc 	.word	0x080096dc
		else if(vIlum[23] == '1' || vExt[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8001b20:	4b9c      	ldr	r3, [pc, #624]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001b22:	7ddb      	ldrb	r3, [r3, #23]
 8001b24:	2b31      	cmp	r3, #49	; 0x31
 8001b26:	d003      	beq.n	8001b30 <ESP_messageHandler+0x84c>
 8001b28:	4b9b      	ldr	r3, [pc, #620]	; (8001d98 <ESP_messageHandler+0xab4>)
 8001b2a:	78db      	ldrb	r3, [r3, #3]
 8001b2c:	2b31      	cmp	r3, #49	; 0x31
 8001b2e:	d104      	bne.n	8001b3a <ESP_messageHandler+0x856>
 8001b30:	2201      	movs	r2, #1
 8001b32:	2104      	movs	r1, #4
 8001b34:	4899      	ldr	r0, [pc, #612]	; (8001d9c <ESP_messageHandler+0xab8>)
 8001b36:	f004 f9f7 	bl	8005f28 <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'P'){
 8001b3a:	4b99      	ldr	r3, [pc, #612]	; (8001da0 <ESP_messageHandler+0xabc>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b50      	cmp	r3, #80	; 0x50
 8001b40:	d108      	bne.n	8001b54 <ESP_messageHandler+0x870>
		UART_send("PARCELA (EXTERIOR)\n", PC_UART);
 8001b42:	4998      	ldr	r1, [pc, #608]	; (8001da4 <ESP_messageHandler+0xac0>)
 8001b44:	4898      	ldr	r0, [pc, #608]	; (8001da8 <ESP_messageHandler+0xac4>)
 8001b46:	f001 f8ad 	bl	8002ca4 <UART_send>
		//vExt[0] = textrc[28]; 	// Toldo Tendedero
		//vExt[1] = textrc[31]; 	// Luz Tendedero
		//vExt[2] = textrc[34]; 	// Luz Porche
		//vExt[3] = textrc[37]; 	// Luz Jardín
		vExt[4] = textrc[40]; 	// Puerta Parcela
 8001b4a:	4b98      	ldr	r3, [pc, #608]	; (8001dac <ESP_messageHandler+0xac8>)
 8001b4c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001b50:	4b91      	ldr	r3, [pc, #580]	; (8001d98 <ESP_messageHandler+0xab4>)
 8001b52:	711a      	strb	r2, [r3, #4]
	}

	if (fragment[0] == 'R'){
 8001b54:	4b92      	ldr	r3, [pc, #584]	; (8001da0 <ESP_messageHandler+0xabc>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b52      	cmp	r3, #82	; 0x52
 8001b5a:	d107      	bne.n	8001b6c <ESP_messageHandler+0x888>
		UART_send("TENDEDERO (EXTERIOR)\n", PC_UART);
 8001b5c:	4991      	ldr	r1, [pc, #580]	; (8001da4 <ESP_messageHandler+0xac0>)
 8001b5e:	4894      	ldr	r0, [pc, #592]	; (8001db0 <ESP_messageHandler+0xacc>)
 8001b60:	f001 f8a0 	bl	8002ca4 <UART_send>
		vExt[0] = textrc[28]; 	// Toldo Tendedero
 8001b64:	4b91      	ldr	r3, [pc, #580]	; (8001dac <ESP_messageHandler+0xac8>)
 8001b66:	7f1a      	ldrb	r2, [r3, #28]
 8001b68:	4b8b      	ldr	r3, [pc, #556]	; (8001d98 <ESP_messageHandler+0xab4>)
 8001b6a:	701a      	strb	r2, [r3, #0]
		//vExt[3] = textrc[37]; 	// Luz Jardín
		//vExt[4] = textrc[40]; 	// Puerta Parcela
	}

	// SALÓN
	if (fragment[0] == 'n'){
 8001b6c:	4b8c      	ldr	r3, [pc, #560]	; (8001da0 <ESP_messageHandler+0xabc>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b6e      	cmp	r3, #110	; 0x6e
 8001b72:	f040 809a 	bne.w	8001caa <ESP_messageHandler+0x9c6>
		UART_send("SALON \n", PC_UART);
 8001b76:	498b      	ldr	r1, [pc, #556]	; (8001da4 <ESP_messageHandler+0xac0>)
 8001b78:	488e      	ldr	r0, [pc, #568]	; (8001db4 <ESP_messageHandler+0xad0>)
 8001b7a:	f001 f893 	bl	8002ca4 <UART_send>
		vSal[0] = textrc[28]; 	// Televisión
 8001b7e:	4b8b      	ldr	r3, [pc, #556]	; (8001dac <ESP_messageHandler+0xac8>)
 8001b80:	7f1a      	ldrb	r2, [r3, #28]
 8001b82:	4b8d      	ldr	r3, [pc, #564]	; (8001db8 <ESP_messageHandler+0xad4>)
 8001b84:	701a      	strb	r2, [r3, #0]
		vSal[1] = textrc[31]; 	// Luz Sala
 8001b86:	4b89      	ldr	r3, [pc, #548]	; (8001dac <ESP_messageHandler+0xac8>)
 8001b88:	7fda      	ldrb	r2, [r3, #31]
 8001b8a:	4b8b      	ldr	r3, [pc, #556]	; (8001db8 <ESP_messageHandler+0xad4>)
 8001b8c:	705a      	strb	r2, [r3, #1]
		vSal[2] = textrc[34]; 	// Luz Comedor
 8001b8e:	4b87      	ldr	r3, [pc, #540]	; (8001dac <ESP_messageHandler+0xac8>)
 8001b90:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001b94:	4b88      	ldr	r3, [pc, #544]	; (8001db8 <ESP_messageHandler+0xad4>)
 8001b96:	709a      	strb	r2, [r3, #2]
		vSal[3] = textrc[37]; 	// Luz Ambiente
 8001b98:	4b84      	ldr	r3, [pc, #528]	; (8001dac <ESP_messageHandler+0xac8>)
 8001b9a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001b9e:	4b86      	ldr	r3, [pc, #536]	; (8001db8 <ESP_messageHandler+0xad4>)
 8001ba0:	70da      	strb	r2, [r3, #3]
		vSal[4] = textrc[40]; 	// Luz Recibidor
 8001ba2:	4b82      	ldr	r3, [pc, #520]	; (8001dac <ESP_messageHandler+0xac8>)
 8001ba4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001ba8:	4b83      	ldr	r3, [pc, #524]	; (8001db8 <ESP_messageHandler+0xad4>)
 8001baa:	711a      	strb	r2, [r3, #4]
		//vSal[5] = textrc[43]; 	// V. Salón

		if(vSal[0] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET); // Televisión
 8001bac:	4b82      	ldr	r3, [pc, #520]	; (8001db8 <ESP_messageHandler+0xad4>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b30      	cmp	r3, #48	; 0x30
 8001bb2:	d105      	bne.n	8001bc0 <ESP_messageHandler+0x8dc>
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2180      	movs	r1, #128	; 0x80
 8001bb8:	4880      	ldr	r0, [pc, #512]	; (8001dbc <ESP_messageHandler+0xad8>)
 8001bba:	f004 f9b5 	bl	8005f28 <HAL_GPIO_WritePin>
 8001bbe:	e008      	b.n	8001bd2 <ESP_messageHandler+0x8ee>
		else if(vSal[0] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 8001bc0:	4b7d      	ldr	r3, [pc, #500]	; (8001db8 <ESP_messageHandler+0xad4>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b31      	cmp	r3, #49	; 0x31
 8001bc6:	d104      	bne.n	8001bd2 <ESP_messageHandler+0x8ee>
 8001bc8:	2201      	movs	r2, #1
 8001bca:	2180      	movs	r1, #128	; 0x80
 8001bcc:	487b      	ldr	r0, [pc, #492]	; (8001dbc <ESP_messageHandler+0xad8>)
 8001bce:	f004 f9ab 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[0] == '0' || vSal[1] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, RESET); // Luz Sala
 8001bd2:	4b70      	ldr	r3, [pc, #448]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b30      	cmp	r3, #48	; 0x30
 8001bd8:	d003      	beq.n	8001be2 <ESP_messageHandler+0x8fe>
 8001bda:	4b77      	ldr	r3, [pc, #476]	; (8001db8 <ESP_messageHandler+0xad4>)
 8001bdc:	785b      	ldrb	r3, [r3, #1]
 8001bde:	2b30      	cmp	r3, #48	; 0x30
 8001be0:	d105      	bne.n	8001bee <ESP_messageHandler+0x90a>
 8001be2:	2200      	movs	r2, #0
 8001be4:	2108      	movs	r1, #8
 8001be6:	486d      	ldr	r0, [pc, #436]	; (8001d9c <ESP_messageHandler+0xab8>)
 8001be8:	f004 f99e 	bl	8005f28 <HAL_GPIO_WritePin>
 8001bec:	e00c      	b.n	8001c08 <ESP_messageHandler+0x924>
		else if(vIlum[0] == '1' || vSal[1] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, SET);
 8001bee:	4b69      	ldr	r3, [pc, #420]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b31      	cmp	r3, #49	; 0x31
 8001bf4:	d003      	beq.n	8001bfe <ESP_messageHandler+0x91a>
 8001bf6:	4b70      	ldr	r3, [pc, #448]	; (8001db8 <ESP_messageHandler+0xad4>)
 8001bf8:	785b      	ldrb	r3, [r3, #1]
 8001bfa:	2b31      	cmp	r3, #49	; 0x31
 8001bfc:	d104      	bne.n	8001c08 <ESP_messageHandler+0x924>
 8001bfe:	2201      	movs	r2, #1
 8001c00:	2108      	movs	r1, #8
 8001c02:	4866      	ldr	r0, [pc, #408]	; (8001d9c <ESP_messageHandler+0xab8>)
 8001c04:	f004 f990 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[1] == '0' || vSal[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET); // Luz Comedor
 8001c08:	4b62      	ldr	r3, [pc, #392]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001c0a:	785b      	ldrb	r3, [r3, #1]
 8001c0c:	2b30      	cmp	r3, #48	; 0x30
 8001c0e:	d003      	beq.n	8001c18 <ESP_messageHandler+0x934>
 8001c10:	4b69      	ldr	r3, [pc, #420]	; (8001db8 <ESP_messageHandler+0xad4>)
 8001c12:	789b      	ldrb	r3, [r3, #2]
 8001c14:	2b30      	cmp	r3, #48	; 0x30
 8001c16:	d105      	bne.n	8001c24 <ESP_messageHandler+0x940>
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2102      	movs	r1, #2
 8001c1c:	485f      	ldr	r0, [pc, #380]	; (8001d9c <ESP_messageHandler+0xab8>)
 8001c1e:	f004 f983 	bl	8005f28 <HAL_GPIO_WritePin>
 8001c22:	e00c      	b.n	8001c3e <ESP_messageHandler+0x95a>
		else if(vIlum[1] == '1' || vSal[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, SET);
 8001c24:	4b5b      	ldr	r3, [pc, #364]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001c26:	785b      	ldrb	r3, [r3, #1]
 8001c28:	2b31      	cmp	r3, #49	; 0x31
 8001c2a:	d003      	beq.n	8001c34 <ESP_messageHandler+0x950>
 8001c2c:	4b62      	ldr	r3, [pc, #392]	; (8001db8 <ESP_messageHandler+0xad4>)
 8001c2e:	789b      	ldrb	r3, [r3, #2]
 8001c30:	2b31      	cmp	r3, #49	; 0x31
 8001c32:	d104      	bne.n	8001c3e <ESP_messageHandler+0x95a>
 8001c34:	2201      	movs	r2, #1
 8001c36:	2102      	movs	r1, #2
 8001c38:	4858      	ldr	r0, [pc, #352]	; (8001d9c <ESP_messageHandler+0xab8>)
 8001c3a:	f004 f975 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[2] == '0' || vSal[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, RESET); // Luz Ambiente
 8001c3e:	4b55      	ldr	r3, [pc, #340]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001c40:	789b      	ldrb	r3, [r3, #2]
 8001c42:	2b30      	cmp	r3, #48	; 0x30
 8001c44:	d003      	beq.n	8001c4e <ESP_messageHandler+0x96a>
 8001c46:	4b5c      	ldr	r3, [pc, #368]	; (8001db8 <ESP_messageHandler+0xad4>)
 8001c48:	78db      	ldrb	r3, [r3, #3]
 8001c4a:	2b30      	cmp	r3, #48	; 0x30
 8001c4c:	d105      	bne.n	8001c5a <ESP_messageHandler+0x976>
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2120      	movs	r1, #32
 8001c52:	4852      	ldr	r0, [pc, #328]	; (8001d9c <ESP_messageHandler+0xab8>)
 8001c54:	f004 f968 	bl	8005f28 <HAL_GPIO_WritePin>
 8001c58:	e00c      	b.n	8001c74 <ESP_messageHandler+0x990>
		else if(vIlum[2] == '1' || vSal[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, SET);
 8001c5a:	4b4e      	ldr	r3, [pc, #312]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001c5c:	789b      	ldrb	r3, [r3, #2]
 8001c5e:	2b31      	cmp	r3, #49	; 0x31
 8001c60:	d003      	beq.n	8001c6a <ESP_messageHandler+0x986>
 8001c62:	4b55      	ldr	r3, [pc, #340]	; (8001db8 <ESP_messageHandler+0xad4>)
 8001c64:	78db      	ldrb	r3, [r3, #3]
 8001c66:	2b31      	cmp	r3, #49	; 0x31
 8001c68:	d104      	bne.n	8001c74 <ESP_messageHandler+0x990>
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	2120      	movs	r1, #32
 8001c6e:	484b      	ldr	r0, [pc, #300]	; (8001d9c <ESP_messageHandler+0xab8>)
 8001c70:	f004 f95a 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[3] == '0' || vSal[4] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET); // Luz Recibidor
 8001c74:	4b47      	ldr	r3, [pc, #284]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001c76:	78db      	ldrb	r3, [r3, #3]
 8001c78:	2b30      	cmp	r3, #48	; 0x30
 8001c7a:	d003      	beq.n	8001c84 <ESP_messageHandler+0x9a0>
 8001c7c:	4b4e      	ldr	r3, [pc, #312]	; (8001db8 <ESP_messageHandler+0xad4>)
 8001c7e:	791b      	ldrb	r3, [r3, #4]
 8001c80:	2b30      	cmp	r3, #48	; 0x30
 8001c82:	d105      	bne.n	8001c90 <ESP_messageHandler+0x9ac>
 8001c84:	2200      	movs	r2, #0
 8001c86:	2101      	movs	r1, #1
 8001c88:	4844      	ldr	r0, [pc, #272]	; (8001d9c <ESP_messageHandler+0xab8>)
 8001c8a:	f004 f94d 	bl	8005f28 <HAL_GPIO_WritePin>
 8001c8e:	e00c      	b.n	8001caa <ESP_messageHandler+0x9c6>
		else if(vIlum[3] == '1' || vSal[4] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 8001c90:	4b40      	ldr	r3, [pc, #256]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001c92:	78db      	ldrb	r3, [r3, #3]
 8001c94:	2b31      	cmp	r3, #49	; 0x31
 8001c96:	d003      	beq.n	8001ca0 <ESP_messageHandler+0x9bc>
 8001c98:	4b47      	ldr	r3, [pc, #284]	; (8001db8 <ESP_messageHandler+0xad4>)
 8001c9a:	791b      	ldrb	r3, [r3, #4]
 8001c9c:	2b31      	cmp	r3, #49	; 0x31
 8001c9e:	d104      	bne.n	8001caa <ESP_messageHandler+0x9c6>
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	483d      	ldr	r0, [pc, #244]	; (8001d9c <ESP_messageHandler+0xab8>)
 8001ca6:	f004 f93f 	bl	8005f28 <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'N'){
 8001caa:	4b3d      	ldr	r3, [pc, #244]	; (8001da0 <ESP_messageHandler+0xabc>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b4e      	cmp	r3, #78	; 0x4e
 8001cb0:	d108      	bne.n	8001cc4 <ESP_messageHandler+0x9e0>
			UART_send("V. SALON (SALON) \n", PC_UART);
 8001cb2:	493c      	ldr	r1, [pc, #240]	; (8001da4 <ESP_messageHandler+0xac0>)
 8001cb4:	4842      	ldr	r0, [pc, #264]	; (8001dc0 <ESP_messageHandler+0xadc>)
 8001cb6:	f000 fff5 	bl	8002ca4 <UART_send>
			//vSal[0] = textrc[28]; 	// Televisión
			//vSal[1] = textrc[31]; 	// Luz Sala
			//vSal[2] = textrc[34]; 	// Luz Comedor
			//vSal[3] = textrc[37]; 	// Luz Ambiente
			//vSal[4] = textrc[40]; 	// Luz Recibidor
			vSal[5] = textrc[43]; 	// V. Salón
 8001cba:	4b3c      	ldr	r3, [pc, #240]	; (8001dac <ESP_messageHandler+0xac8>)
 8001cbc:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8001cc0:	4b3d      	ldr	r3, [pc, #244]	; (8001db8 <ESP_messageHandler+0xad4>)
 8001cc2:	715a      	strb	r2, [r3, #5]
	}

	// COCINA
	if (fragment[0] == 'c'){
 8001cc4:	4b36      	ldr	r3, [pc, #216]	; (8001da0 <ESP_messageHandler+0xabc>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b63      	cmp	r3, #99	; 0x63
 8001cca:	d145      	bne.n	8001d58 <ESP_messageHandler+0xa74>
		UART_send("COCINA \n", PC_UART);
 8001ccc:	4935      	ldr	r1, [pc, #212]	; (8001da4 <ESP_messageHandler+0xac0>)
 8001cce:	483d      	ldr	r0, [pc, #244]	; (8001dc4 <ESP_messageHandler+0xae0>)
 8001cd0:	f000 ffe8 	bl	8002ca4 <UART_send>
		vCoc[0] = textrc[28]; 	// Luz Cocina
 8001cd4:	4b35      	ldr	r3, [pc, #212]	; (8001dac <ESP_messageHandler+0xac8>)
 8001cd6:	7f1a      	ldrb	r2, [r3, #28]
 8001cd8:	4b3b      	ldr	r3, [pc, #236]	; (8001dc8 <ESP_messageHandler+0xae4>)
 8001cda:	701a      	strb	r2, [r3, #0]
		vCoc[1] = textrc[31]; 	// Luz Fregadero
 8001cdc:	4b33      	ldr	r3, [pc, #204]	; (8001dac <ESP_messageHandler+0xac8>)
 8001cde:	7fda      	ldrb	r2, [r3, #31]
 8001ce0:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <ESP_messageHandler+0xae4>)
 8001ce2:	705a      	strb	r2, [r3, #1]

		if(vIlum[4] == '0' || vCoc[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET); // Luz Cocina
 8001ce4:	4b2b      	ldr	r3, [pc, #172]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001ce6:	791b      	ldrb	r3, [r3, #4]
 8001ce8:	2b30      	cmp	r3, #48	; 0x30
 8001cea:	d003      	beq.n	8001cf4 <ESP_messageHandler+0xa10>
 8001cec:	4b36      	ldr	r3, [pc, #216]	; (8001dc8 <ESP_messageHandler+0xae4>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b30      	cmp	r3, #48	; 0x30
 8001cf2:	d106      	bne.n	8001d02 <ESP_messageHandler+0xa1e>
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cfa:	4834      	ldr	r0, [pc, #208]	; (8001dcc <ESP_messageHandler+0xae8>)
 8001cfc:	f004 f914 	bl	8005f28 <HAL_GPIO_WritePin>
 8001d00:	e00d      	b.n	8001d1e <ESP_messageHandler+0xa3a>
		else if(vIlum[4] == '1' || vCoc[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 8001d02:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001d04:	791b      	ldrb	r3, [r3, #4]
 8001d06:	2b31      	cmp	r3, #49	; 0x31
 8001d08:	d003      	beq.n	8001d12 <ESP_messageHandler+0xa2e>
 8001d0a:	4b2f      	ldr	r3, [pc, #188]	; (8001dc8 <ESP_messageHandler+0xae4>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b31      	cmp	r3, #49	; 0x31
 8001d10:	d105      	bne.n	8001d1e <ESP_messageHandler+0xa3a>
 8001d12:	2201      	movs	r2, #1
 8001d14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d18:	482c      	ldr	r0, [pc, #176]	; (8001dcc <ESP_messageHandler+0xae8>)
 8001d1a:	f004 f905 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[5] == '0' || vCoc[1] == '0') HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET); // Luz Fregadero
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001d20:	795b      	ldrb	r3, [r3, #5]
 8001d22:	2b30      	cmp	r3, #48	; 0x30
 8001d24:	d003      	beq.n	8001d2e <ESP_messageHandler+0xa4a>
 8001d26:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <ESP_messageHandler+0xae4>)
 8001d28:	785b      	ldrb	r3, [r3, #1]
 8001d2a:	2b30      	cmp	r3, #48	; 0x30
 8001d2c:	d106      	bne.n	8001d3c <ESP_messageHandler+0xa58>
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d34:	4826      	ldr	r0, [pc, #152]	; (8001dd0 <ESP_messageHandler+0xaec>)
 8001d36:	f004 f8f7 	bl	8005f28 <HAL_GPIO_WritePin>
 8001d3a:	e00d      	b.n	8001d58 <ESP_messageHandler+0xa74>
		else if(vIlum[5] == '1' || vCoc[1] == '1')HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 8001d3c:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001d3e:	795b      	ldrb	r3, [r3, #5]
 8001d40:	2b31      	cmp	r3, #49	; 0x31
 8001d42:	d003      	beq.n	8001d4c <ESP_messageHandler+0xa68>
 8001d44:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <ESP_messageHandler+0xae4>)
 8001d46:	785b      	ldrb	r3, [r3, #1]
 8001d48:	2b31      	cmp	r3, #49	; 0x31
 8001d4a:	d105      	bne.n	8001d58 <ESP_messageHandler+0xa74>
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d52:	481f      	ldr	r0, [pc, #124]	; (8001dd0 <ESP_messageHandler+0xaec>)
 8001d54:	f004 f8e8 	bl	8005f28 <HAL_GPIO_WritePin>
	}

	// BAÑO
	if (fragment[0] == 'b'){
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <ESP_messageHandler+0xabc>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b62      	cmp	r3, #98	; 0x62
 8001d5e:	d165      	bne.n	8001e2c <ESP_messageHandler+0xb48>
		UART_send("BAÑO \n", PC_UART);
 8001d60:	4910      	ldr	r1, [pc, #64]	; (8001da4 <ESP_messageHandler+0xac0>)
 8001d62:	481c      	ldr	r0, [pc, #112]	; (8001dd4 <ESP_messageHandler+0xaf0>)
 8001d64:	f000 ff9e 	bl	8002ca4 <UART_send>
		vBan[0] = textrc[28]; 	// Luz Baño
 8001d68:	4b10      	ldr	r3, [pc, #64]	; (8001dac <ESP_messageHandler+0xac8>)
 8001d6a:	7f1a      	ldrb	r2, [r3, #28]
 8001d6c:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <ESP_messageHandler+0xaf4>)
 8001d6e:	701a      	strb	r2, [r3, #0]
		vBan[1] = textrc[31]; 	// Luz Espejo
 8001d70:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <ESP_messageHandler+0xac8>)
 8001d72:	7fda      	ldrb	r2, [r3, #31]
 8001d74:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <ESP_messageHandler+0xaf4>)
 8001d76:	705a      	strb	r2, [r3, #1]

		if(vIlum[6] == '0' || vBan[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, RESET); // Luz Baño
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001d7a:	799b      	ldrb	r3, [r3, #6]
 8001d7c:	2b30      	cmp	r3, #48	; 0x30
 8001d7e:	d003      	beq.n	8001d88 <ESP_messageHandler+0xaa4>
 8001d80:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <ESP_messageHandler+0xaf4>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b30      	cmp	r3, #48	; 0x30
 8001d86:	d129      	bne.n	8001ddc <ESP_messageHandler+0xaf8>
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2140      	movs	r1, #64	; 0x40
 8001d8c:	4803      	ldr	r0, [pc, #12]	; (8001d9c <ESP_messageHandler+0xab8>)
 8001d8e:	f004 f8cb 	bl	8005f28 <HAL_GPIO_WritePin>
 8001d92:	e030      	b.n	8001df6 <ESP_messageHandler+0xb12>
 8001d94:	200009a4 	.word	0x200009a4
 8001d98:	20000930 	.word	0x20000930
 8001d9c:	40020c00 	.word	0x40020c00
 8001da0:	200009c4 	.word	0x200009c4
 8001da4:	20000d90 	.word	0x20000d90
 8001da8:	080096f0 	.word	0x080096f0
 8001dac:	200009e0 	.word	0x200009e0
 8001db0:	08009704 	.word	0x08009704
 8001db4:	0800971c 	.word	0x0800971c
 8001db8:	20000a50 	.word	0x20000a50
 8001dbc:	40020400 	.word	0x40020400
 8001dc0:	08009724 	.word	0x08009724
 8001dc4:	08009738 	.word	0x08009738
 8001dc8:	20000910 	.word	0x20000910
 8001dcc:	40020800 	.word	0x40020800
 8001dd0:	40020000 	.word	0x40020000
 8001dd4:	08009744 	.word	0x08009744
 8001dd8:	2000098c 	.word	0x2000098c
		else if(vIlum[6] == '1' || vBan[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, SET);
 8001ddc:	4b84      	ldr	r3, [pc, #528]	; (8001ff0 <ESP_messageHandler+0xd0c>)
 8001dde:	799b      	ldrb	r3, [r3, #6]
 8001de0:	2b31      	cmp	r3, #49	; 0x31
 8001de2:	d003      	beq.n	8001dec <ESP_messageHandler+0xb08>
 8001de4:	4b83      	ldr	r3, [pc, #524]	; (8001ff4 <ESP_messageHandler+0xd10>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b31      	cmp	r3, #49	; 0x31
 8001dea:	d104      	bne.n	8001df6 <ESP_messageHandler+0xb12>
 8001dec:	2201      	movs	r2, #1
 8001dee:	2140      	movs	r1, #64	; 0x40
 8001df0:	4881      	ldr	r0, [pc, #516]	; (8001ff8 <ESP_messageHandler+0xd14>)
 8001df2:	f004 f899 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[7] == '0' || vBan[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET); // Luz Espejo
 8001df6:	4b7e      	ldr	r3, [pc, #504]	; (8001ff0 <ESP_messageHandler+0xd0c>)
 8001df8:	79db      	ldrb	r3, [r3, #7]
 8001dfa:	2b30      	cmp	r3, #48	; 0x30
 8001dfc:	d003      	beq.n	8001e06 <ESP_messageHandler+0xb22>
 8001dfe:	4b7d      	ldr	r3, [pc, #500]	; (8001ff4 <ESP_messageHandler+0xd10>)
 8001e00:	785b      	ldrb	r3, [r3, #1]
 8001e02:	2b30      	cmp	r3, #48	; 0x30
 8001e04:	d105      	bne.n	8001e12 <ESP_messageHandler+0xb2e>
 8001e06:	2200      	movs	r2, #0
 8001e08:	2108      	movs	r1, #8
 8001e0a:	487c      	ldr	r0, [pc, #496]	; (8001ffc <ESP_messageHandler+0xd18>)
 8001e0c:	f004 f88c 	bl	8005f28 <HAL_GPIO_WritePin>
 8001e10:	e00c      	b.n	8001e2c <ESP_messageHandler+0xb48>
		else if(vIlum[7] == '1' || vBan[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8001e12:	4b77      	ldr	r3, [pc, #476]	; (8001ff0 <ESP_messageHandler+0xd0c>)
 8001e14:	79db      	ldrb	r3, [r3, #7]
 8001e16:	2b31      	cmp	r3, #49	; 0x31
 8001e18:	d003      	beq.n	8001e22 <ESP_messageHandler+0xb3e>
 8001e1a:	4b76      	ldr	r3, [pc, #472]	; (8001ff4 <ESP_messageHandler+0xd10>)
 8001e1c:	785b      	ldrb	r3, [r3, #1]
 8001e1e:	2b31      	cmp	r3, #49	; 0x31
 8001e20:	d104      	bne.n	8001e2c <ESP_messageHandler+0xb48>
 8001e22:	2201      	movs	r2, #1
 8001e24:	2108      	movs	r1, #8
 8001e26:	4875      	ldr	r0, [pc, #468]	; (8001ffc <ESP_messageHandler+0xd18>)
 8001e28:	f004 f87e 	bl	8005f28 <HAL_GPIO_WritePin>
	}

	// DORMITORIO
	if (fragment[0] == 'r'){
 8001e2c:	4b74      	ldr	r3, [pc, #464]	; (8002000 <ESP_messageHandler+0xd1c>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b72      	cmp	r3, #114	; 0x72
 8001e32:	d161      	bne.n	8001ef8 <ESP_messageHandler+0xc14>
		UART_send("LUCES (DORMITORIO) \n", PC_UART);
 8001e34:	4973      	ldr	r1, [pc, #460]	; (8002004 <ESP_messageHandler+0xd20>)
 8001e36:	4874      	ldr	r0, [pc, #464]	; (8002008 <ESP_messageHandler+0xd24>)
 8001e38:	f000 ff34 	bl	8002ca4 <UART_send>
		vDor[0] = textrc[28]; 	// Luz Dormitorio
 8001e3c:	4b73      	ldr	r3, [pc, #460]	; (800200c <ESP_messageHandler+0xd28>)
 8001e3e:	7f1a      	ldrb	r2, [r3, #28]
 8001e40:	4b73      	ldr	r3, [pc, #460]	; (8002010 <ESP_messageHandler+0xd2c>)
 8001e42:	701a      	strb	r2, [r3, #0]
		vDor[1] = textrc[31]; 	// Luz Mesita Izq
 8001e44:	4b71      	ldr	r3, [pc, #452]	; (800200c <ESP_messageHandler+0xd28>)
 8001e46:	7fda      	ldrb	r2, [r3, #31]
 8001e48:	4b71      	ldr	r3, [pc, #452]	; (8002010 <ESP_messageHandler+0xd2c>)
 8001e4a:	705a      	strb	r2, [r3, #1]
		vDor[2] = textrc[34]; 	// Luz Mesita Dch
 8001e4c:	4b6f      	ldr	r3, [pc, #444]	; (800200c <ESP_messageHandler+0xd28>)
 8001e4e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001e52:	4b6f      	ldr	r3, [pc, #444]	; (8002010 <ESP_messageHandler+0xd2c>)
 8001e54:	709a      	strb	r2, [r3, #2]
		//vDor[3] = textrc[37]; 	// V. Dormitorio

		if(vIlum[8] == '0' || vDor[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, RESET); // Luz Dormitorio
 8001e56:	4b66      	ldr	r3, [pc, #408]	; (8001ff0 <ESP_messageHandler+0xd0c>)
 8001e58:	7a1b      	ldrb	r3, [r3, #8]
 8001e5a:	2b30      	cmp	r3, #48	; 0x30
 8001e5c:	d003      	beq.n	8001e66 <ESP_messageHandler+0xb82>
 8001e5e:	4b6c      	ldr	r3, [pc, #432]	; (8002010 <ESP_messageHandler+0xd2c>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b30      	cmp	r3, #48	; 0x30
 8001e64:	d105      	bne.n	8001e72 <ESP_messageHandler+0xb8e>
 8001e66:	2200      	movs	r2, #0
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	4863      	ldr	r0, [pc, #396]	; (8001ff8 <ESP_messageHandler+0xd14>)
 8001e6c:	f004 f85c 	bl	8005f28 <HAL_GPIO_WritePin>
 8001e70:	e00c      	b.n	8001e8c <ESP_messageHandler+0xba8>
		else if(vIlum[8] == '1' || vDor[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET);
 8001e72:	4b5f      	ldr	r3, [pc, #380]	; (8001ff0 <ESP_messageHandler+0xd0c>)
 8001e74:	7a1b      	ldrb	r3, [r3, #8]
 8001e76:	2b31      	cmp	r3, #49	; 0x31
 8001e78:	d003      	beq.n	8001e82 <ESP_messageHandler+0xb9e>
 8001e7a:	4b65      	ldr	r3, [pc, #404]	; (8002010 <ESP_messageHandler+0xd2c>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b31      	cmp	r3, #49	; 0x31
 8001e80:	d104      	bne.n	8001e8c <ESP_messageHandler+0xba8>
 8001e82:	2201      	movs	r2, #1
 8001e84:	2180      	movs	r1, #128	; 0x80
 8001e86:	485c      	ldr	r0, [pc, #368]	; (8001ff8 <ESP_messageHandler+0xd14>)
 8001e88:	f004 f84e 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[9] == '0' || vDor[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET); // Luz Mesita Izq
 8001e8c:	4b58      	ldr	r3, [pc, #352]	; (8001ff0 <ESP_messageHandler+0xd0c>)
 8001e8e:	7a5b      	ldrb	r3, [r3, #9]
 8001e90:	2b30      	cmp	r3, #48	; 0x30
 8001e92:	d003      	beq.n	8001e9c <ESP_messageHandler+0xbb8>
 8001e94:	4b5e      	ldr	r3, [pc, #376]	; (8002010 <ESP_messageHandler+0xd2c>)
 8001e96:	785b      	ldrb	r3, [r3, #1]
 8001e98:	2b30      	cmp	r3, #48	; 0x30
 8001e9a:	d105      	bne.n	8001ea8 <ESP_messageHandler+0xbc4>
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2110      	movs	r1, #16
 8001ea0:	4856      	ldr	r0, [pc, #344]	; (8001ffc <ESP_messageHandler+0xd18>)
 8001ea2:	f004 f841 	bl	8005f28 <HAL_GPIO_WritePin>
 8001ea6:	e00c      	b.n	8001ec2 <ESP_messageHandler+0xbde>
		else if(vIlum[9] == '1' || vDor[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001ea8:	4b51      	ldr	r3, [pc, #324]	; (8001ff0 <ESP_messageHandler+0xd0c>)
 8001eaa:	7a5b      	ldrb	r3, [r3, #9]
 8001eac:	2b31      	cmp	r3, #49	; 0x31
 8001eae:	d003      	beq.n	8001eb8 <ESP_messageHandler+0xbd4>
 8001eb0:	4b57      	ldr	r3, [pc, #348]	; (8002010 <ESP_messageHandler+0xd2c>)
 8001eb2:	785b      	ldrb	r3, [r3, #1]
 8001eb4:	2b31      	cmp	r3, #49	; 0x31
 8001eb6:	d104      	bne.n	8001ec2 <ESP_messageHandler+0xbde>
 8001eb8:	2201      	movs	r2, #1
 8001eba:	2110      	movs	r1, #16
 8001ebc:	484f      	ldr	r0, [pc, #316]	; (8001ffc <ESP_messageHandler+0xd18>)
 8001ebe:	f004 f833 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[10] == '0' || vDor[2] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET); // Luz Mesita Dch
 8001ec2:	4b4b      	ldr	r3, [pc, #300]	; (8001ff0 <ESP_messageHandler+0xd0c>)
 8001ec4:	7a9b      	ldrb	r3, [r3, #10]
 8001ec6:	2b30      	cmp	r3, #48	; 0x30
 8001ec8:	d003      	beq.n	8001ed2 <ESP_messageHandler+0xbee>
 8001eca:	4b51      	ldr	r3, [pc, #324]	; (8002010 <ESP_messageHandler+0xd2c>)
 8001ecc:	789b      	ldrb	r3, [r3, #2]
 8001ece:	2b30      	cmp	r3, #48	; 0x30
 8001ed0:	d105      	bne.n	8001ede <ESP_messageHandler+0xbfa>
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2140      	movs	r1, #64	; 0x40
 8001ed6:	4849      	ldr	r0, [pc, #292]	; (8001ffc <ESP_messageHandler+0xd18>)
 8001ed8:	f004 f826 	bl	8005f28 <HAL_GPIO_WritePin>
 8001edc:	e00c      	b.n	8001ef8 <ESP_messageHandler+0xc14>
		else if(vIlum[10] == '1' || vDor[2] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8001ede:	4b44      	ldr	r3, [pc, #272]	; (8001ff0 <ESP_messageHandler+0xd0c>)
 8001ee0:	7a9b      	ldrb	r3, [r3, #10]
 8001ee2:	2b31      	cmp	r3, #49	; 0x31
 8001ee4:	d003      	beq.n	8001eee <ESP_messageHandler+0xc0a>
 8001ee6:	4b4a      	ldr	r3, [pc, #296]	; (8002010 <ESP_messageHandler+0xd2c>)
 8001ee8:	789b      	ldrb	r3, [r3, #2]
 8001eea:	2b31      	cmp	r3, #49	; 0x31
 8001eec:	d104      	bne.n	8001ef8 <ESP_messageHandler+0xc14>
 8001eee:	2201      	movs	r2, #1
 8001ef0:	2140      	movs	r1, #64	; 0x40
 8001ef2:	4842      	ldr	r0, [pc, #264]	; (8001ffc <ESP_messageHandler+0xd18>)
 8001ef4:	f004 f818 	bl	8005f28 <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'D'){
 8001ef8:	4b41      	ldr	r3, [pc, #260]	; (8002000 <ESP_messageHandler+0xd1c>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b44      	cmp	r3, #68	; 0x44
 8001efe:	d108      	bne.n	8001f12 <ESP_messageHandler+0xc2e>
		UART_send("V. DORMITORIO (DORMITORIO) \n", PC_UART);
 8001f00:	4940      	ldr	r1, [pc, #256]	; (8002004 <ESP_messageHandler+0xd20>)
 8001f02:	4844      	ldr	r0, [pc, #272]	; (8002014 <ESP_messageHandler+0xd30>)
 8001f04:	f000 fece 	bl	8002ca4 <UART_send>
		//vDor[0] = textrc[28]; 	// Luz Dormitorio
		//vDor[1] = textrc[31]; 	// Luz Mesita Izq
		//vDor[2] = textrc[34]; 	// Luz Mesita Dch
		vDor[3] = textrc[37]; 	// V. Dormitorio
 8001f08:	4b40      	ldr	r3, [pc, #256]	; (800200c <ESP_messageHandler+0xd28>)
 8001f0a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001f0e:	4b40      	ldr	r3, [pc, #256]	; (8002010 <ESP_messageHandler+0xd2c>)
 8001f10:	70da      	strb	r2, [r3, #3]
	}

	// OFICINA
	if (fragment[0] == 'f'){
 8001f12:	4b3b      	ldr	r3, [pc, #236]	; (8002000 <ESP_messageHandler+0xd1c>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b66      	cmp	r3, #102	; 0x66
 8001f18:	f040 80bf 	bne.w	800209a <ESP_messageHandler+0xdb6>
		UART_send("LUCES (OFICINA) \n", PC_UART);
 8001f1c:	4939      	ldr	r1, [pc, #228]	; (8002004 <ESP_messageHandler+0xd20>)
 8001f1e:	483e      	ldr	r0, [pc, #248]	; (8002018 <ESP_messageHandler+0xd34>)
 8001f20:	f000 fec0 	bl	8002ca4 <UART_send>
		vOfi[0] = textrc[28]; // Luz Oficina
 8001f24:	4b39      	ldr	r3, [pc, #228]	; (800200c <ESP_messageHandler+0xd28>)
 8001f26:	7f1a      	ldrb	r2, [r3, #28]
 8001f28:	4b3c      	ldr	r3, [pc, #240]	; (800201c <ESP_messageHandler+0xd38>)
 8001f2a:	701a      	strb	r2, [r3, #0]
		vOfi[1] = textrc[31]; // Luz Gaming
 8001f2c:	4b37      	ldr	r3, [pc, #220]	; (800200c <ESP_messageHandler+0xd28>)
 8001f2e:	7fda      	ldrb	r2, [r3, #31]
 8001f30:	4b3a      	ldr	r3, [pc, #232]	; (800201c <ESP_messageHandler+0xd38>)
 8001f32:	705a      	strb	r2, [r3, #1]
		vOfi[2] = textrc[34]; // Luz Rx100
 8001f34:	4b35      	ldr	r3, [pc, #212]	; (800200c <ESP_messageHandler+0xd28>)
 8001f36:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001f3a:	4b38      	ldr	r3, [pc, #224]	; (800201c <ESP_messageHandler+0xd38>)
 8001f3c:	709a      	strb	r2, [r3, #2]
		vOfi[3] = textrc[35]; // Luz Rx10
 8001f3e:	4b33      	ldr	r3, [pc, #204]	; (800200c <ESP_messageHandler+0xd28>)
 8001f40:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8001f44:	4b35      	ldr	r3, [pc, #212]	; (800201c <ESP_messageHandler+0xd38>)
 8001f46:	70da      	strb	r2, [r3, #3]
		vOfi[4] = textrc[36]; // Luz Rx1
 8001f48:	4b30      	ldr	r3, [pc, #192]	; (800200c <ESP_messageHandler+0xd28>)
 8001f4a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8001f4e:	4b33      	ldr	r3, [pc, #204]	; (800201c <ESP_messageHandler+0xd38>)
 8001f50:	711a      	strb	r2, [r3, #4]
		vOfi[5] = textrc[39]; // Luz Gx100
 8001f52:	4b2e      	ldr	r3, [pc, #184]	; (800200c <ESP_messageHandler+0xd28>)
 8001f54:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8001f58:	4b30      	ldr	r3, [pc, #192]	; (800201c <ESP_messageHandler+0xd38>)
 8001f5a:	715a      	strb	r2, [r3, #5]
		vOfi[6] = textrc[40]; // Luz Gx10
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	; (800200c <ESP_messageHandler+0xd28>)
 8001f5e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001f62:	4b2e      	ldr	r3, [pc, #184]	; (800201c <ESP_messageHandler+0xd38>)
 8001f64:	719a      	strb	r2, [r3, #6]
		vOfi[7] = textrc[41]; // Luz Gx1
 8001f66:	4b29      	ldr	r3, [pc, #164]	; (800200c <ESP_messageHandler+0xd28>)
 8001f68:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001f6c:	4b2b      	ldr	r3, [pc, #172]	; (800201c <ESP_messageHandler+0xd38>)
 8001f6e:	71da      	strb	r2, [r3, #7]
		vOfi[8] = textrc[44]; // Luz Bx100
 8001f70:	4b26      	ldr	r3, [pc, #152]	; (800200c <ESP_messageHandler+0xd28>)
 8001f72:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001f76:	4b29      	ldr	r3, [pc, #164]	; (800201c <ESP_messageHandler+0xd38>)
 8001f78:	721a      	strb	r2, [r3, #8]
		vOfi[9] = textrc[45]; // Luz Bx10
 8001f7a:	4b24      	ldr	r3, [pc, #144]	; (800200c <ESP_messageHandler+0xd28>)
 8001f7c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8001f80:	4b26      	ldr	r3, [pc, #152]	; (800201c <ESP_messageHandler+0xd38>)
 8001f82:	725a      	strb	r2, [r3, #9]
		vOfi[10] = textrc[46]; // Luz Bx1
 8001f84:	4b21      	ldr	r3, [pc, #132]	; (800200c <ESP_messageHandler+0xd28>)
 8001f86:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8001f8a:	4b24      	ldr	r3, [pc, #144]	; (800201c <ESP_messageHandler+0xd38>)
 8001f8c:	729a      	strb	r2, [r3, #10]
		//vOfi[11] = textrc[49]; // V. Oficina

		if(vIlum[11] == '0' || vOfi[0] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET); // Luz Oficina
 8001f8e:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <ESP_messageHandler+0xd0c>)
 8001f90:	7adb      	ldrb	r3, [r3, #11]
 8001f92:	2b30      	cmp	r3, #48	; 0x30
 8001f94:	d003      	beq.n	8001f9e <ESP_messageHandler+0xcba>
 8001f96:	4b21      	ldr	r3, [pc, #132]	; (800201c <ESP_messageHandler+0xd38>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b30      	cmp	r3, #48	; 0x30
 8001f9c:	d105      	bne.n	8001faa <ESP_messageHandler+0xcc6>
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2120      	movs	r1, #32
 8001fa2:	4816      	ldr	r0, [pc, #88]	; (8001ffc <ESP_messageHandler+0xd18>)
 8001fa4:	f003 ffc0 	bl	8005f28 <HAL_GPIO_WritePin>
 8001fa8:	e00c      	b.n	8001fc4 <ESP_messageHandler+0xce0>
		else if(vIlum[11] == '1' || vOfi[0] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001faa:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <ESP_messageHandler+0xd0c>)
 8001fac:	7adb      	ldrb	r3, [r3, #11]
 8001fae:	2b31      	cmp	r3, #49	; 0x31
 8001fb0:	d003      	beq.n	8001fba <ESP_messageHandler+0xcd6>
 8001fb2:	4b1a      	ldr	r3, [pc, #104]	; (800201c <ESP_messageHandler+0xd38>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b31      	cmp	r3, #49	; 0x31
 8001fb8:	d104      	bne.n	8001fc4 <ESP_messageHandler+0xce0>
 8001fba:	2201      	movs	r2, #1
 8001fbc:	2120      	movs	r1, #32
 8001fbe:	480f      	ldr	r0, [pc, #60]	; (8001ffc <ESP_messageHandler+0xd18>)
 8001fc0:	f003 ffb2 	bl	8005f28 <HAL_GPIO_WritePin>

		if(vIlum[12] == '0' || vOfi[1] == '0'){
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <ESP_messageHandler+0xd0c>)
 8001fc6:	7b1b      	ldrb	r3, [r3, #12]
 8001fc8:	2b30      	cmp	r3, #48	; 0x30
 8001fca:	d003      	beq.n	8001fd4 <ESP_messageHandler+0xcf0>
 8001fcc:	4b13      	ldr	r3, [pc, #76]	; (800201c <ESP_messageHandler+0xd38>)
 8001fce:	785b      	ldrb	r3, [r3, #1]
 8001fd0:	2b30      	cmp	r3, #48	; 0x30
 8001fd2:	d127      	bne.n	8002024 <ESP_messageHandler+0xd40>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001fd4:	4b12      	ldr	r3, [pc, #72]	; (8002020 <ESP_messageHandler+0xd3c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001fdc:	4b10      	ldr	r3, [pc, #64]	; (8002020 <ESP_messageHandler+0xd3c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001fe4:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <ESP_messageHandler+0xd3c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fec:	e055      	b.n	800209a <ESP_messageHandler+0xdb6>
 8001fee:	bf00      	nop
 8001ff0:	200009a4 	.word	0x200009a4
 8001ff4:	2000098c 	.word	0x2000098c
 8001ff8:	40020c00 	.word	0x40020c00
 8001ffc:	40020400 	.word	0x40020400
 8002000:	200009c4 	.word	0x200009c4
 8002004:	20000d90 	.word	0x20000d90
 8002008:	0800974c 	.word	0x0800974c
 800200c:	200009e0 	.word	0x200009e0
 8002010:	20000914 	.word	0x20000914
 8002014:	08009764 	.word	0x08009764
 8002018:	08009784 	.word	0x08009784
 800201c:	20000980 	.word	0x20000980
 8002020:	20000cf8 	.word	0x20000cf8
		}
		else if(vIlum[12] == '1' || vOfi[1] == '1'){ // Luz Gaming
 8002024:	4b71      	ldr	r3, [pc, #452]	; (80021ec <ESP_messageHandler+0xf08>)
 8002026:	7b1b      	ldrb	r3, [r3, #12]
 8002028:	2b31      	cmp	r3, #49	; 0x31
 800202a:	d003      	beq.n	8002034 <ESP_messageHandler+0xd50>
 800202c:	4b70      	ldr	r3, [pc, #448]	; (80021f0 <ESP_messageHandler+0xf0c>)
 800202e:	785b      	ldrb	r3, [r3, #1]
 8002030:	2b31      	cmp	r3, #49	; 0x31
 8002032:	d132      	bne.n	800209a <ESP_messageHandler+0xdb6>

			//uint8_t r, g, b;

			r = rgb_value(vOfi[2],vOfi[3],vOfi[4]);
 8002034:	4b6e      	ldr	r3, [pc, #440]	; (80021f0 <ESP_messageHandler+0xf0c>)
 8002036:	789b      	ldrb	r3, [r3, #2]
 8002038:	4a6d      	ldr	r2, [pc, #436]	; (80021f0 <ESP_messageHandler+0xf0c>)
 800203a:	78d1      	ldrb	r1, [r2, #3]
 800203c:	4a6c      	ldr	r2, [pc, #432]	; (80021f0 <ESP_messageHandler+0xf0c>)
 800203e:	7912      	ldrb	r2, [r2, #4]
 8002040:	4618      	mov	r0, r3
 8002042:	f000 f9fd 	bl	8002440 <rgb_value>
 8002046:	4603      	mov	r3, r0
 8002048:	4a6a      	ldr	r2, [pc, #424]	; (80021f4 <ESP_messageHandler+0xf10>)
 800204a:	6013      	str	r3, [r2, #0]
			g = rgb_value(vOfi[5],vOfi[6],vOfi[7]);
 800204c:	4b68      	ldr	r3, [pc, #416]	; (80021f0 <ESP_messageHandler+0xf0c>)
 800204e:	795b      	ldrb	r3, [r3, #5]
 8002050:	4a67      	ldr	r2, [pc, #412]	; (80021f0 <ESP_messageHandler+0xf0c>)
 8002052:	7991      	ldrb	r1, [r2, #6]
 8002054:	4a66      	ldr	r2, [pc, #408]	; (80021f0 <ESP_messageHandler+0xf0c>)
 8002056:	79d2      	ldrb	r2, [r2, #7]
 8002058:	4618      	mov	r0, r3
 800205a:	f000 f9f1 	bl	8002440 <rgb_value>
 800205e:	4603      	mov	r3, r0
 8002060:	4a65      	ldr	r2, [pc, #404]	; (80021f8 <ESP_messageHandler+0xf14>)
 8002062:	6013      	str	r3, [r2, #0]
			b = rgb_value(vOfi[8],vOfi[9],vOfi[10]);
 8002064:	4b62      	ldr	r3, [pc, #392]	; (80021f0 <ESP_messageHandler+0xf0c>)
 8002066:	7a1b      	ldrb	r3, [r3, #8]
 8002068:	4a61      	ldr	r2, [pc, #388]	; (80021f0 <ESP_messageHandler+0xf0c>)
 800206a:	7a51      	ldrb	r1, [r2, #9]
 800206c:	4a60      	ldr	r2, [pc, #384]	; (80021f0 <ESP_messageHandler+0xf0c>)
 800206e:	7a92      	ldrb	r2, [r2, #10]
 8002070:	4618      	mov	r0, r3
 8002072:	f000 f9e5 	bl	8002440 <rgb_value>
 8002076:	4603      	mov	r3, r0
 8002078:	4a60      	ldr	r2, [pc, #384]	; (80021fc <ESP_messageHandler+0xf18>)
 800207a:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, g); // PA8
 800207c:	4b5e      	ldr	r3, [pc, #376]	; (80021f8 <ESP_messageHandler+0xf14>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b5f      	ldr	r3, [pc, #380]	; (8002200 <ESP_messageHandler+0xf1c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, r); // PA9
 8002086:	4b5b      	ldr	r3, [pc, #364]	; (80021f4 <ESP_messageHandler+0xf10>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	4b5d      	ldr	r3, [pc, #372]	; (8002200 <ESP_messageHandler+0xf1c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b); // PA10
 8002090:	4b5a      	ldr	r3, [pc, #360]	; (80021fc <ESP_messageHandler+0xf18>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b5a      	ldr	r3, [pc, #360]	; (8002200 <ESP_messageHandler+0xf1c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}

	if (fragment[0] == 'F'){
 800209a:	4b5a      	ldr	r3, [pc, #360]	; (8002204 <ESP_messageHandler+0xf20>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b46      	cmp	r3, #70	; 0x46
 80020a0:	d108      	bne.n	80020b4 <ESP_messageHandler+0xdd0>
		UART_send("V. OFICINA (OFICINA) \n", PC_UART);
 80020a2:	4959      	ldr	r1, [pc, #356]	; (8002208 <ESP_messageHandler+0xf24>)
 80020a4:	4859      	ldr	r0, [pc, #356]	; (800220c <ESP_messageHandler+0xf28>)
 80020a6:	f000 fdfd 	bl	8002ca4 <UART_send>
		//vOfi[6] = textrc[40]; // Luz Gx10
		//vOfi[7] = textrc[41]; // Luz Gx1
		//vOfi[8] = textrc[44]; // Luz Bx100
		//vOfi[9] = textrc[45]; // Luz Bx10
		//vOfi[10] = textrc[46]; // Luz Bx1
		vOfi[11] = textrc[49]; // V. Oficina
 80020aa:	4b59      	ldr	r3, [pc, #356]	; (8002210 <ESP_messageHandler+0xf2c>)
 80020ac:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80020b0:	4b4f      	ldr	r3, [pc, #316]	; (80021f0 <ESP_messageHandler+0xf0c>)
 80020b2:	72da      	strb	r2, [r3, #11]
	}

	// GARAJE
	if (fragment[0] == 'j'){
 80020b4:	4b53      	ldr	r3, [pc, #332]	; (8002204 <ESP_messageHandler+0xf20>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b6a      	cmp	r3, #106	; 0x6a
 80020ba:	d124      	bne.n	8002106 <ESP_messageHandler+0xe22>
		UART_send("LUZ GARAJE (GARAJE) \n", PC_UART);
 80020bc:	4952      	ldr	r1, [pc, #328]	; (8002208 <ESP_messageHandler+0xf24>)
 80020be:	4855      	ldr	r0, [pc, #340]	; (8002214 <ESP_messageHandler+0xf30>)
 80020c0:	f000 fdf0 	bl	8002ca4 <UART_send>
		vGar[0] = textrc[28]; // Luz Garaje
 80020c4:	4b52      	ldr	r3, [pc, #328]	; (8002210 <ESP_messageHandler+0xf2c>)
 80020c6:	7f1a      	ldrb	r2, [r3, #28]
 80020c8:	4b53      	ldr	r3, [pc, #332]	; (8002218 <ESP_messageHandler+0xf34>)
 80020ca:	701a      	strb	r2, [r3, #0]
		//vGar[1] = textrc[31]; // P. Garaje

		if(vIlum[22] == '0' || vGar[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET); // Luz Garaje
 80020cc:	4b47      	ldr	r3, [pc, #284]	; (80021ec <ESP_messageHandler+0xf08>)
 80020ce:	7d9b      	ldrb	r3, [r3, #22]
 80020d0:	2b30      	cmp	r3, #48	; 0x30
 80020d2:	d003      	beq.n	80020dc <ESP_messageHandler+0xdf8>
 80020d4:	4b50      	ldr	r3, [pc, #320]	; (8002218 <ESP_messageHandler+0xf34>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b30      	cmp	r3, #48	; 0x30
 80020da:	d106      	bne.n	80020ea <ESP_messageHandler+0xe06>
 80020dc:	2200      	movs	r2, #0
 80020de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020e2:	484e      	ldr	r0, [pc, #312]	; (800221c <ESP_messageHandler+0xf38>)
 80020e4:	f003 ff20 	bl	8005f28 <HAL_GPIO_WritePin>
 80020e8:	e00d      	b.n	8002106 <ESP_messageHandler+0xe22>
		else if(vIlum[22] == '1' || vGar[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 80020ea:	4b40      	ldr	r3, [pc, #256]	; (80021ec <ESP_messageHandler+0xf08>)
 80020ec:	7d9b      	ldrb	r3, [r3, #22]
 80020ee:	2b31      	cmp	r3, #49	; 0x31
 80020f0:	d003      	beq.n	80020fa <ESP_messageHandler+0xe16>
 80020f2:	4b49      	ldr	r3, [pc, #292]	; (8002218 <ESP_messageHandler+0xf34>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b31      	cmp	r3, #49	; 0x31
 80020f8:	d105      	bne.n	8002106 <ESP_messageHandler+0xe22>
 80020fa:	2201      	movs	r2, #1
 80020fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002100:	4846      	ldr	r0, [pc, #280]	; (800221c <ESP_messageHandler+0xf38>)
 8002102:	f003 ff11 	bl	8005f28 <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'J'){
 8002106:	4b3f      	ldr	r3, [pc, #252]	; (8002204 <ESP_messageHandler+0xf20>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b4a      	cmp	r3, #74	; 0x4a
 800210c:	d107      	bne.n	800211e <ESP_messageHandler+0xe3a>
		UART_send("P. GARAJE (GARAJE) \n", PC_UART);
 800210e:	493e      	ldr	r1, [pc, #248]	; (8002208 <ESP_messageHandler+0xf24>)
 8002110:	4843      	ldr	r0, [pc, #268]	; (8002220 <ESP_messageHandler+0xf3c>)
 8002112:	f000 fdc7 	bl	8002ca4 <UART_send>
		//vGar[0] = textrc[28]; // Luz Garaje
		vGar[1] = textrc[31]; // P. Garaje
 8002116:	4b3e      	ldr	r3, [pc, #248]	; (8002210 <ESP_messageHandler+0xf2c>)
 8002118:	7fda      	ldrb	r2, [r3, #31]
 800211a:	4b3f      	ldr	r3, [pc, #252]	; (8002218 <ESP_messageHandler+0xf34>)
 800211c:	705a      	strb	r2, [r3, #1]
	}

	// HUERTO
	if (fragment[0] == 'h'){
 800211e:	4b39      	ldr	r3, [pc, #228]	; (8002204 <ESP_messageHandler+0xf20>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b68      	cmp	r3, #104	; 0x68
 8002124:	d10b      	bne.n	800213e <ESP_messageHandler+0xe5a>
		UART_send("RIEGO HUERTO \n", PC_UART);
 8002126:	4938      	ldr	r1, [pc, #224]	; (8002208 <ESP_messageHandler+0xf24>)
 8002128:	483e      	ldr	r0, [pc, #248]	; (8002224 <ESP_messageHandler+0xf40>)
 800212a:	f000 fdbb 	bl	8002ca4 <UART_send>
		vHuer[0] = textrc[28]; // Riego
 800212e:	4b38      	ldr	r3, [pc, #224]	; (8002210 <ESP_messageHandler+0xf2c>)
 8002130:	7f1a      	ldrb	r2, [r3, #28]
 8002132:	4b3d      	ldr	r3, [pc, #244]	; (8002228 <ESP_messageHandler+0xf44>)
 8002134:	701a      	strb	r2, [r3, #0]
		vHuer[1] = textrc[31]; // Automático
 8002136:	4b36      	ldr	r3, [pc, #216]	; (8002210 <ESP_messageHandler+0xf2c>)
 8002138:	7fda      	ldrb	r2, [r3, #31]
 800213a:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <ESP_messageHandler+0xf44>)
 800213c:	705a      	strb	r2, [r3, #1]
			else if(vHuer[0] == '1') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
		}*/
	}

	// AJUSTES
	if (fragment[0] == 'a'){
 800213e:	4b31      	ldr	r3, [pc, #196]	; (8002204 <ESP_messageHandler+0xf20>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b61      	cmp	r3, #97	; 0x61
 8002144:	d150      	bne.n	80021e8 <ESP_messageHandler+0xf04>
		UART_send("AJUSTES \n", PC_UART);
 8002146:	4930      	ldr	r1, [pc, #192]	; (8002208 <ESP_messageHandler+0xf24>)
 8002148:	4838      	ldr	r0, [pc, #224]	; (800222c <ESP_messageHandler+0xf48>)
 800214a:	f000 fdab 	bl	8002ca4 <UART_send>
		vAj[0] = textrc[28]; 	// Vent. Enc. x 10
 800214e:	4b30      	ldr	r3, [pc, #192]	; (8002210 <ESP_messageHandler+0xf2c>)
 8002150:	7f1a      	ldrb	r2, [r3, #28]
 8002152:	4b37      	ldr	r3, [pc, #220]	; (8002230 <ESP_messageHandler+0xf4c>)
 8002154:	701a      	strb	r2, [r3, #0]
		vAj[1] = textrc[29]; 	// Vent. Enc. x 1
 8002156:	4b2e      	ldr	r3, [pc, #184]	; (8002210 <ESP_messageHandler+0xf2c>)
 8002158:	7f5a      	ldrb	r2, [r3, #29]
 800215a:	4b35      	ldr	r3, [pc, #212]	; (8002230 <ESP_messageHandler+0xf4c>)
 800215c:	705a      	strb	r2, [r3, #1]
		vAj[2] = textrc[31]; 	// Vent. Enc. x 0.1
 800215e:	4b2c      	ldr	r3, [pc, #176]	; (8002210 <ESP_messageHandler+0xf2c>)
 8002160:	7fda      	ldrb	r2, [r3, #31]
 8002162:	4b33      	ldr	r3, [pc, #204]	; (8002230 <ESP_messageHandler+0xf4c>)
 8002164:	709a      	strb	r2, [r3, #2]
		vAj[3] = textrc[34]; 	// Vent. Apa. x 10
 8002166:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <ESP_messageHandler+0xf2c>)
 8002168:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800216c:	4b30      	ldr	r3, [pc, #192]	; (8002230 <ESP_messageHandler+0xf4c>)
 800216e:	70da      	strb	r2, [r3, #3]
		vAj[4] = textrc[35]; 	// Vent. Apa. x 1
 8002170:	4b27      	ldr	r3, [pc, #156]	; (8002210 <ESP_messageHandler+0xf2c>)
 8002172:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8002176:	4b2e      	ldr	r3, [pc, #184]	; (8002230 <ESP_messageHandler+0xf4c>)
 8002178:	711a      	strb	r2, [r3, #4]
		vAj[5] = textrc[37]; 	// Vent. Apa. x 0.1
 800217a:	4b25      	ldr	r3, [pc, #148]	; (8002210 <ESP_messageHandler+0xf2c>)
 800217c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8002180:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <ESP_messageHandler+0xf4c>)
 8002182:	715a      	strb	r2, [r3, #5]
		vAj[6] = textrc[40]; 	// Calef. Enc. x 10
 8002184:	4b22      	ldr	r3, [pc, #136]	; (8002210 <ESP_messageHandler+0xf2c>)
 8002186:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800218a:	4b29      	ldr	r3, [pc, #164]	; (8002230 <ESP_messageHandler+0xf4c>)
 800218c:	719a      	strb	r2, [r3, #6]
		vAj[7] = textrc[41]; 	// Calef. Enc. x 1
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <ESP_messageHandler+0xf2c>)
 8002190:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8002194:	4b26      	ldr	r3, [pc, #152]	; (8002230 <ESP_messageHandler+0xf4c>)
 8002196:	71da      	strb	r2, [r3, #7]
		vAj[8] = textrc[43]; 	// Calef. Enc. x 0.1
 8002198:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <ESP_messageHandler+0xf2c>)
 800219a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800219e:	4b24      	ldr	r3, [pc, #144]	; (8002230 <ESP_messageHandler+0xf4c>)
 80021a0:	721a      	strb	r2, [r3, #8]
		vAj[9] = textrc[46]; 	// Calef. Apa. x 10
 80021a2:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <ESP_messageHandler+0xf2c>)
 80021a4:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80021a8:	4b21      	ldr	r3, [pc, #132]	; (8002230 <ESP_messageHandler+0xf4c>)
 80021aa:	725a      	strb	r2, [r3, #9]
		vAj[10] = textrc[47]; 	// Calef. Apa. x 1
 80021ac:	4b18      	ldr	r3, [pc, #96]	; (8002210 <ESP_messageHandler+0xf2c>)
 80021ae:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80021b2:	4b1f      	ldr	r3, [pc, #124]	; (8002230 <ESP_messageHandler+0xf4c>)
 80021b4:	729a      	strb	r2, [r3, #10]
		vAj[11] = textrc[49]; 	// Calef. Apa. x 0.1
 80021b6:	4b16      	ldr	r3, [pc, #88]	; (8002210 <ESP_messageHandler+0xf2c>)
 80021b8:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80021bc:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <ESP_messageHandler+0xf4c>)
 80021be:	72da      	strb	r2, [r3, #11]
		vAj[12] = textrc[52]; 	// RH Mínimo x 10
 80021c0:	4b13      	ldr	r3, [pc, #76]	; (8002210 <ESP_messageHandler+0xf2c>)
 80021c2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <ESP_messageHandler+0xf4c>)
 80021c8:	731a      	strb	r2, [r3, #12]
		vAj[13] = textrc[53]; 	// RH Mínimo x 1
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <ESP_messageHandler+0xf2c>)
 80021cc:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80021d0:	4b17      	ldr	r3, [pc, #92]	; (8002230 <ESP_messageHandler+0xf4c>)
 80021d2:	735a      	strb	r2, [r3, #13]
		vAj[14] = textrc[56]; 	// RH Máximo x 10
 80021d4:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <ESP_messageHandler+0xf2c>)
 80021d6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <ESP_messageHandler+0xf4c>)
 80021dc:	739a      	strb	r2, [r3, #14]
		vAj[15] = textrc[57]; 	// RH Máximo x 1
 80021de:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <ESP_messageHandler+0xf2c>)
 80021e0:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80021e4:	4b12      	ldr	r3, [pc, #72]	; (8002230 <ESP_messageHandler+0xf4c>)
 80021e6:	73da      	strb	r2, [r3, #15]
	}

	//__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
}
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	200009a4 	.word	0x200009a4
 80021f0:	20000980 	.word	0x20000980
 80021f4:	2000092c 	.word	0x2000092c
 80021f8:	20000920 	.word	0x20000920
 80021fc:	20000918 	.word	0x20000918
 8002200:	20000cf8 	.word	0x20000cf8
 8002204:	200009c4 	.word	0x200009c4
 8002208:	20000d90 	.word	0x20000d90
 800220c:	08009798 	.word	0x08009798
 8002210:	200009e0 	.word	0x200009e0
 8002214:	080097b0 	.word	0x080097b0
 8002218:	20000974 	.word	0x20000974
 800221c:	40020800 	.word	0x40020800
 8002220:	080097c8 	.word	0x080097c8
 8002224:	080097e0 	.word	0x080097e0
 8002228:	200009cc 	.word	0x200009cc
 800222c:	080097f0 	.word	0x080097f0
 8002230:	200009d0 	.word	0x200009d0

08002234 <ESP_dataHandler>:

void ESP_dataHandler(void){
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0

	memset(dataSTM, 0, 0);

	dataSTM[0] = 'X';
 8002238:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <ESP_dataHandler+0x40>)
 800223a:	2258      	movs	r2, #88	; 0x58
 800223c:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) != 0){
 800223e:	2101      	movs	r1, #1
 8002240:	480d      	ldr	r0, [pc, #52]	; (8002278 <ESP_dataHandler+0x44>)
 8002242:	f003 fe59 	bl	8005ef8 <HAL_GPIO_ReadPin>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d011      	beq.n	8002270 <ESP_dataHandler+0x3c>

		HAL_UART_Transmit(&huart2, (uint8_t *)dataSTM, 1, HAL_MAX_DELAY); //(uint8_t *)
 800224c:	f04f 33ff 	mov.w	r3, #4294967295
 8002250:	2201      	movs	r2, #1
 8002252:	4908      	ldr	r1, [pc, #32]	; (8002274 <ESP_dataHandler+0x40>)
 8002254:	4809      	ldr	r0, [pc, #36]	; (800227c <ESP_dataHandler+0x48>)
 8002256:	f005 fa9c 	bl	8007792 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart6, (uint8_t *)dataSTM, 1, HAL_MAX_DELAY);
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
 800225e:	2201      	movs	r2, #1
 8002260:	4904      	ldr	r1, [pc, #16]	; (8002274 <ESP_dataHandler+0x40>)
 8002262:	4807      	ldr	r0, [pc, #28]	; (8002280 <ESP_dataHandler+0x4c>)
 8002264:	f005 fa95 	bl	8007792 <HAL_UART_Transmit>
		UART_send("\n", PC_UART);
 8002268:	4905      	ldr	r1, [pc, #20]	; (8002280 <ESP_dataHandler+0x4c>)
 800226a:	4806      	ldr	r0, [pc, #24]	; (8002284 <ESP_dataHandler+0x50>)
 800226c:	f000 fd1a 	bl	8002ca4 <UART_send>
		/*fragment[0] = textrc[25]; // Asignación de Fragmento
		HAL_UART_Transmit(&huart6, (uint8_t *)fragment, 1, HAL_MAX_DELAY);
		UART_send("\n", PC_UART);*/
	}

}
 8002270:	bf00      	nop
 8002272:	bd80      	pop	{r7, pc}
 8002274:	2000091c 	.word	0x2000091c
 8002278:	40021000 	.word	0x40021000
 800227c:	20000e1c 	.word	0x20000e1c
 8002280:	20000d90 	.word	0x20000d90
 8002284:	080095ec 	.word	0x080095ec

08002288 <ldr>:


#include <LDR.h>
#include "ESP8266_HAL.h"

void ldr(uint16_t valor){
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	80fb      	strh	r3, [r7, #6]


	if (vIlum[26] == '1'){
 8002292:	4b28      	ldr	r3, [pc, #160]	; (8002334 <ldr+0xac>)
 8002294:	7e9b      	ldrb	r3, [r3, #26]
 8002296:	2b31      	cmp	r3, #49	; 0x31
 8002298:	d147      	bne.n	800232a <ldr+0xa2>

		if(valor<90) {
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	2b59      	cmp	r3, #89	; 0x59
 800229e:	d822      	bhi.n	80022e6 <ldr+0x5e>
			vIlum[23] = 'x';	// Jardín
 80022a0:	4b24      	ldr	r3, [pc, #144]	; (8002334 <ldr+0xac>)
 80022a2:	2278      	movs	r2, #120	; 0x78
 80022a4:	75da      	strb	r2, [r3, #23]
			vExt[3] = 'x';
 80022a6:	4b24      	ldr	r3, [pc, #144]	; (8002338 <ldr+0xb0>)
 80022a8:	2278      	movs	r2, #120	; 0x78
 80022aa:	70da      	strb	r2, [r3, #3]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 80022ac:	2201      	movs	r2, #1
 80022ae:	2104      	movs	r1, #4
 80022b0:	4822      	ldr	r0, [pc, #136]	; (800233c <ldr+0xb4>)
 80022b2:	f003 fe39 	bl	8005f28 <HAL_GPIO_WritePin>
			vIlum[24] = 'x';	// Porche
 80022b6:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <ldr+0xac>)
 80022b8:	2278      	movs	r2, #120	; 0x78
 80022ba:	761a      	strb	r2, [r3, #24]
			vExt[2] = 'x';
 80022bc:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <ldr+0xb0>)
 80022be:	2278      	movs	r2, #120	; 0x78
 80022c0:	709a      	strb	r2, [r3, #2]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 80022c2:	2201      	movs	r2, #1
 80022c4:	2110      	movs	r1, #16
 80022c6:	481d      	ldr	r0, [pc, #116]	; (800233c <ldr+0xb4>)
 80022c8:	f003 fe2e 	bl	8005f28 <HAL_GPIO_WritePin>
			vIlum[25] = 'x';	// Tendedero
 80022cc:	4b19      	ldr	r3, [pc, #100]	; (8002334 <ldr+0xac>)
 80022ce:	2278      	movs	r2, #120	; 0x78
 80022d0:	765a      	strb	r2, [r3, #25]
			vExt[1] = 'x';
 80022d2:	4b19      	ldr	r3, [pc, #100]	; (8002338 <ldr+0xb0>)
 80022d4:	2278      	movs	r2, #120	; 0x78
 80022d6:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 80022d8:	2201      	movs	r2, #1
 80022da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022de:	4818      	ldr	r0, [pc, #96]	; (8002340 <ldr+0xb8>)
 80022e0:	f003 fe22 	bl	8005f28 <HAL_GPIO_WritePin>
			vIlum[25] = 'x';	// Tendedero
			vExt[1] = 'x';
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
		}
	}
}
 80022e4:	e021      	b.n	800232a <ldr+0xa2>
			vIlum[23] = 'x';	// Jardín
 80022e6:	4b13      	ldr	r3, [pc, #76]	; (8002334 <ldr+0xac>)
 80022e8:	2278      	movs	r2, #120	; 0x78
 80022ea:	75da      	strb	r2, [r3, #23]
			vExt[3] = 'x';
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <ldr+0xb0>)
 80022ee:	2278      	movs	r2, #120	; 0x78
 80022f0:	70da      	strb	r2, [r3, #3]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2104      	movs	r1, #4
 80022f6:	4811      	ldr	r0, [pc, #68]	; (800233c <ldr+0xb4>)
 80022f8:	f003 fe16 	bl	8005f28 <HAL_GPIO_WritePin>
			vIlum[24] = 'x';	// Porche
 80022fc:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <ldr+0xac>)
 80022fe:	2278      	movs	r2, #120	; 0x78
 8002300:	761a      	strb	r2, [r3, #24]
			vExt[2] = 'x';
 8002302:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <ldr+0xb0>)
 8002304:	2278      	movs	r2, #120	; 0x78
 8002306:	709a      	strb	r2, [r3, #2]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
 8002308:	2200      	movs	r2, #0
 800230a:	2110      	movs	r1, #16
 800230c:	480b      	ldr	r0, [pc, #44]	; (800233c <ldr+0xb4>)
 800230e:	f003 fe0b 	bl	8005f28 <HAL_GPIO_WritePin>
			vIlum[25] = 'x';	// Tendedero
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <ldr+0xac>)
 8002314:	2278      	movs	r2, #120	; 0x78
 8002316:	765a      	strb	r2, [r3, #25]
			vExt[1] = 'x';
 8002318:	4b07      	ldr	r3, [pc, #28]	; (8002338 <ldr+0xb0>)
 800231a:	2278      	movs	r2, #120	; 0x78
 800231c:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 800231e:	2200      	movs	r2, #0
 8002320:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002324:	4806      	ldr	r0, [pc, #24]	; (8002340 <ldr+0xb8>)
 8002326:	f003 fdff 	bl	8005f28 <HAL_GPIO_WritePin>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200009a4 	.word	0x200009a4
 8002338:	20000930 	.word	0x20000930
 800233c:	40020c00 	.word	0x40020c00
 8002340:	40020800 	.word	0x40020800

08002344 <readLector>:
#include "ESP8266_HAL.h"

extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart6;

int readLector(){
 8002344:	b580      	push	{r7, lr}
 8002346:	b08a      	sub	sp, #40	; 0x28
 8002348:	af00      	add	r7, sp, #0

	  char vehicle[16] = "";
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	f107 030c 	add.w	r3, r7, #12
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	609a      	str	r2, [r3, #8]

	  char coche[3] = "247";
 800235a:	4a36      	ldr	r2, [pc, #216]	; (8002434 <readLector+0xf0>)
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	4611      	mov	r1, r2
 8002362:	8019      	strh	r1, [r3, #0]
 8002364:	3302      	adds	r3, #2
 8002366:	0c12      	lsrs	r2, r2, #16
 8002368:	701a      	strb	r2, [r3, #0]
	  char moto[3] = "355";
 800236a:	4a33      	ldr	r2, [pc, #204]	; (8002438 <readLector+0xf4>)
 800236c:	463b      	mov	r3, r7
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	4611      	mov	r1, r2
 8002372:	8019      	strh	r1, [r3, #0]
 8002374:	3302      	adds	r3, #2
 8002376:	0c12      	lsrs	r2, r2, #16
 8002378:	701a      	strb	r2, [r3, #0]

	  int familia = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	; 0x24

	  for(int i=0; i<16; i++) vehicle[i] = '_';
 800237e:	2300      	movs	r3, #0
 8002380:	623b      	str	r3, [r7, #32]
 8002382:	e008      	b.n	8002396 <readLector+0x52>
 8002384:	f107 0208 	add.w	r2, r7, #8
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	4413      	add	r3, r2
 800238c:	225f      	movs	r2, #95	; 0x5f
 800238e:	701a      	strb	r2, [r3, #0]
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	3301      	adds	r3, #1
 8002394:	623b      	str	r3, [r7, #32]
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	2b0f      	cmp	r3, #15
 800239a:	ddf3      	ble.n	8002384 <readLector+0x40>

	  HAL_UART_Receive(&huart3, (uint8_t *) vehicle, 16, 100);
 800239c:	f107 0108 	add.w	r1, r7, #8
 80023a0:	2364      	movs	r3, #100	; 0x64
 80023a2:	2210      	movs	r2, #16
 80023a4:	4825      	ldr	r0, [pc, #148]	; (800243c <readLector+0xf8>)
 80023a6:	f005 fa86 	bl	80078b6 <HAL_UART_Receive>

	  if (vehicle[15] == '_') return 2;
 80023aa:	7dfb      	ldrb	r3, [r7, #23]
 80023ac:	2b5f      	cmp	r3, #95	; 0x5f
 80023ae:	d101      	bne.n	80023b4 <readLector+0x70>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e03b      	b.n	800242c <readLector+0xe8>

	  else {
		  for(int i = 0; i<3; i++){
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	e015      	b.n	80023e6 <readLector+0xa2>
			  familia = 1;
 80023ba:	2301      	movs	r3, #1
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
			  if(vehicle[i+13] != coche[i]){
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	330d      	adds	r3, #13
 80023c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023c6:	4413      	add	r3, r2
 80023c8:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 80023cc:	1d39      	adds	r1, r7, #4
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	440b      	add	r3, r1
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d003      	beq.n	80023e0 <readLector+0x9c>
				  familia = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
				  i = 2;
 80023dc:	2302      	movs	r3, #2
 80023de:	61fb      	str	r3, [r7, #28]
		  for(int i = 0; i<3; i++){
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	3301      	adds	r3, #1
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	dde6      	ble.n	80023ba <readLector+0x76>
			  }
		  }

		  if(!familia){
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d11b      	bne.n	800242a <readLector+0xe6>
			  for(int i = 0; i<3; i++){
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	e015      	b.n	8002424 <readLector+0xe0>
				  familia = 1;
 80023f8:	2301      	movs	r3, #1
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
				  if(vehicle[13+i] != moto[i]){
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	330d      	adds	r3, #13
 8002400:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002404:	4413      	add	r3, r2
 8002406:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 800240a:	4639      	mov	r1, r7
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	440b      	add	r3, r1
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d003      	beq.n	800241e <readLector+0xda>
					  familia = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
					  i = 2;
 800241a:	2302      	movs	r3, #2
 800241c:	61bb      	str	r3, [r7, #24]
			  for(int i = 0; i<3; i++){
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	3301      	adds	r3, #1
 8002422:	61bb      	str	r3, [r7, #24]
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2b02      	cmp	r3, #2
 8002428:	dde6      	ble.n	80023f8 <readLector+0xb4>
				  }
			  }
		  }
	  }

	  return familia;
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800242c:	4618      	mov	r0, r3
 800242e:	3728      	adds	r7, #40	; 0x28
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	080097fc 	.word	0x080097fc
 8002438:	08009800 	.word	0x08009800
 800243c:	20000afc 	.word	0x20000afc

08002440 <rgb_value>:
 */


#include <RGB.h>

int rgb_value(char i, char j, char k){
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
 800244a:	460b      	mov	r3, r1
 800244c:	71bb      	strb	r3, [r7, #6]
 800244e:	4613      	mov	r3, r2
 8002450:	717b      	strb	r3, [r7, #5]

	int a, b, c;

	if(i == '0') a = 0;
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	2b30      	cmp	r3, #48	; 0x30
 8002456:	d102      	bne.n	800245e <rgb_value+0x1e>
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	e00a      	b.n	8002474 <rgb_value+0x34>
	else if(i == '1') a = 100;
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	2b31      	cmp	r3, #49	; 0x31
 8002462:	d102      	bne.n	800246a <rgb_value+0x2a>
 8002464:	2364      	movs	r3, #100	; 0x64
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	e004      	b.n	8002474 <rgb_value+0x34>
	else if(i == '2') a = 200;
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	2b32      	cmp	r3, #50	; 0x32
 800246e:	d101      	bne.n	8002474 <rgb_value+0x34>
 8002470:	23c8      	movs	r3, #200	; 0xc8
 8002472:	617b      	str	r3, [r7, #20]

	if(j == '0') b = 0;
 8002474:	79bb      	ldrb	r3, [r7, #6]
 8002476:	2b30      	cmp	r3, #48	; 0x30
 8002478:	d102      	bne.n	8002480 <rgb_value+0x40>
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	e034      	b.n	80024ea <rgb_value+0xaa>
	else if(j == '1') b = 10;
 8002480:	79bb      	ldrb	r3, [r7, #6]
 8002482:	2b31      	cmp	r3, #49	; 0x31
 8002484:	d102      	bne.n	800248c <rgb_value+0x4c>
 8002486:	230a      	movs	r3, #10
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	e02e      	b.n	80024ea <rgb_value+0xaa>
	else if(j == '2') b = 20;
 800248c:	79bb      	ldrb	r3, [r7, #6]
 800248e:	2b32      	cmp	r3, #50	; 0x32
 8002490:	d102      	bne.n	8002498 <rgb_value+0x58>
 8002492:	2314      	movs	r3, #20
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	e028      	b.n	80024ea <rgb_value+0xaa>
	else if(j == '3') b = 30;
 8002498:	79bb      	ldrb	r3, [r7, #6]
 800249a:	2b33      	cmp	r3, #51	; 0x33
 800249c:	d102      	bne.n	80024a4 <rgb_value+0x64>
 800249e:	231e      	movs	r3, #30
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	e022      	b.n	80024ea <rgb_value+0xaa>
	else if(j == '4') b = 40;
 80024a4:	79bb      	ldrb	r3, [r7, #6]
 80024a6:	2b34      	cmp	r3, #52	; 0x34
 80024a8:	d102      	bne.n	80024b0 <rgb_value+0x70>
 80024aa:	2328      	movs	r3, #40	; 0x28
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	e01c      	b.n	80024ea <rgb_value+0xaa>
	else if(j == '5') b = 50;
 80024b0:	79bb      	ldrb	r3, [r7, #6]
 80024b2:	2b35      	cmp	r3, #53	; 0x35
 80024b4:	d102      	bne.n	80024bc <rgb_value+0x7c>
 80024b6:	2332      	movs	r3, #50	; 0x32
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	e016      	b.n	80024ea <rgb_value+0xaa>
	else if(j == '6') b = 60;
 80024bc:	79bb      	ldrb	r3, [r7, #6]
 80024be:	2b36      	cmp	r3, #54	; 0x36
 80024c0:	d102      	bne.n	80024c8 <rgb_value+0x88>
 80024c2:	233c      	movs	r3, #60	; 0x3c
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	e010      	b.n	80024ea <rgb_value+0xaa>
	else if(j == '7') b = 70;
 80024c8:	79bb      	ldrb	r3, [r7, #6]
 80024ca:	2b37      	cmp	r3, #55	; 0x37
 80024cc:	d102      	bne.n	80024d4 <rgb_value+0x94>
 80024ce:	2346      	movs	r3, #70	; 0x46
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	e00a      	b.n	80024ea <rgb_value+0xaa>
	else if(j == '8') b = 80;
 80024d4:	79bb      	ldrb	r3, [r7, #6]
 80024d6:	2b38      	cmp	r3, #56	; 0x38
 80024d8:	d102      	bne.n	80024e0 <rgb_value+0xa0>
 80024da:	2350      	movs	r3, #80	; 0x50
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	e004      	b.n	80024ea <rgb_value+0xaa>
	else if(j == '9') b = 90;
 80024e0:	79bb      	ldrb	r3, [r7, #6]
 80024e2:	2b39      	cmp	r3, #57	; 0x39
 80024e4:	d101      	bne.n	80024ea <rgb_value+0xaa>
 80024e6:	235a      	movs	r3, #90	; 0x5a
 80024e8:	613b      	str	r3, [r7, #16]

	if(k == '0') c = 0;
 80024ea:	797b      	ldrb	r3, [r7, #5]
 80024ec:	2b30      	cmp	r3, #48	; 0x30
 80024ee:	d102      	bne.n	80024f6 <rgb_value+0xb6>
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	e034      	b.n	8002560 <rgb_value+0x120>
	else if(k == '1') c = 1;
 80024f6:	797b      	ldrb	r3, [r7, #5]
 80024f8:	2b31      	cmp	r3, #49	; 0x31
 80024fa:	d102      	bne.n	8002502 <rgb_value+0xc2>
 80024fc:	2301      	movs	r3, #1
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	e02e      	b.n	8002560 <rgb_value+0x120>
	else if(k == '2') c = 2;
 8002502:	797b      	ldrb	r3, [r7, #5]
 8002504:	2b32      	cmp	r3, #50	; 0x32
 8002506:	d102      	bne.n	800250e <rgb_value+0xce>
 8002508:	2302      	movs	r3, #2
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	e028      	b.n	8002560 <rgb_value+0x120>
	else if(k == '3') c = 3;
 800250e:	797b      	ldrb	r3, [r7, #5]
 8002510:	2b33      	cmp	r3, #51	; 0x33
 8002512:	d102      	bne.n	800251a <rgb_value+0xda>
 8002514:	2303      	movs	r3, #3
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	e022      	b.n	8002560 <rgb_value+0x120>
	else if(k == '4') c = 4;
 800251a:	797b      	ldrb	r3, [r7, #5]
 800251c:	2b34      	cmp	r3, #52	; 0x34
 800251e:	d102      	bne.n	8002526 <rgb_value+0xe6>
 8002520:	2304      	movs	r3, #4
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	e01c      	b.n	8002560 <rgb_value+0x120>
	else if(k == '5') c = 5;
 8002526:	797b      	ldrb	r3, [r7, #5]
 8002528:	2b35      	cmp	r3, #53	; 0x35
 800252a:	d102      	bne.n	8002532 <rgb_value+0xf2>
 800252c:	2305      	movs	r3, #5
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	e016      	b.n	8002560 <rgb_value+0x120>
	else if(k == '6') c = 6;
 8002532:	797b      	ldrb	r3, [r7, #5]
 8002534:	2b36      	cmp	r3, #54	; 0x36
 8002536:	d102      	bne.n	800253e <rgb_value+0xfe>
 8002538:	2306      	movs	r3, #6
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	e010      	b.n	8002560 <rgb_value+0x120>
	else if(k == '7') c = 7;
 800253e:	797b      	ldrb	r3, [r7, #5]
 8002540:	2b37      	cmp	r3, #55	; 0x37
 8002542:	d102      	bne.n	800254a <rgb_value+0x10a>
 8002544:	2307      	movs	r3, #7
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	e00a      	b.n	8002560 <rgb_value+0x120>
	else if(k == '8') c = 8;
 800254a:	797b      	ldrb	r3, [r7, #5]
 800254c:	2b38      	cmp	r3, #56	; 0x38
 800254e:	d102      	bne.n	8002556 <rgb_value+0x116>
 8002550:	2308      	movs	r3, #8
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	e004      	b.n	8002560 <rgb_value+0x120>
	else if(k == '9') c = 9;
 8002556:	797b      	ldrb	r3, [r7, #5]
 8002558:	2b39      	cmp	r3, #57	; 0x39
 800255a:	d101      	bne.n	8002560 <rgb_value+0x120>
 800255c:	2309      	movs	r3, #9
 800255e:	60fb      	str	r3, [r7, #12]

	return a+b+c;
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	441a      	add	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4413      	add	r3, r2
}
 800256a:	4618      	mov	r0, r3
 800256c:	371c      	adds	r7, #28
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <rh_value>:
 */


#include <RH.h>

int rh_value(char i, char j){
 8002576:	b480      	push	{r7}
 8002578:	b085      	sub	sp, #20
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	460a      	mov	r2, r1
 8002580:	71fb      	strb	r3, [r7, #7]
 8002582:	4613      	mov	r3, r2
 8002584:	71bb      	strb	r3, [r7, #6]

	int a, b;

	if(i == '0') a = 0;
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	2b30      	cmp	r3, #48	; 0x30
 800258a:	d102      	bne.n	8002592 <rh_value+0x1c>
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	e034      	b.n	80025fc <rh_value+0x86>
	else if(i == '1') a = 10;
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	2b31      	cmp	r3, #49	; 0x31
 8002596:	d102      	bne.n	800259e <rh_value+0x28>
 8002598:	230a      	movs	r3, #10
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	e02e      	b.n	80025fc <rh_value+0x86>
	else if(i == '2') a = 20;
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	2b32      	cmp	r3, #50	; 0x32
 80025a2:	d102      	bne.n	80025aa <rh_value+0x34>
 80025a4:	2314      	movs	r3, #20
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	e028      	b.n	80025fc <rh_value+0x86>
	else if(i == '3') a = 30;
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	2b33      	cmp	r3, #51	; 0x33
 80025ae:	d102      	bne.n	80025b6 <rh_value+0x40>
 80025b0:	231e      	movs	r3, #30
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	e022      	b.n	80025fc <rh_value+0x86>
	else if(i == '4') a = 40;
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	2b34      	cmp	r3, #52	; 0x34
 80025ba:	d102      	bne.n	80025c2 <rh_value+0x4c>
 80025bc:	2328      	movs	r3, #40	; 0x28
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	e01c      	b.n	80025fc <rh_value+0x86>
	else if(i == '5') a = 50;
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	2b35      	cmp	r3, #53	; 0x35
 80025c6:	d102      	bne.n	80025ce <rh_value+0x58>
 80025c8:	2332      	movs	r3, #50	; 0x32
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	e016      	b.n	80025fc <rh_value+0x86>
	else if(i == '6') a = 60;
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	2b36      	cmp	r3, #54	; 0x36
 80025d2:	d102      	bne.n	80025da <rh_value+0x64>
 80025d4:	233c      	movs	r3, #60	; 0x3c
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	e010      	b.n	80025fc <rh_value+0x86>
	else if(i == '7') a = 70;
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	2b37      	cmp	r3, #55	; 0x37
 80025de:	d102      	bne.n	80025e6 <rh_value+0x70>
 80025e0:	2346      	movs	r3, #70	; 0x46
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	e00a      	b.n	80025fc <rh_value+0x86>
	else if(i == '8') a = 80;
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	2b38      	cmp	r3, #56	; 0x38
 80025ea:	d102      	bne.n	80025f2 <rh_value+0x7c>
 80025ec:	2350      	movs	r3, #80	; 0x50
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	e004      	b.n	80025fc <rh_value+0x86>
	else if(i == '9') a = 90;
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	2b39      	cmp	r3, #57	; 0x39
 80025f6:	d101      	bne.n	80025fc <rh_value+0x86>
 80025f8:	235a      	movs	r3, #90	; 0x5a
 80025fa:	60fb      	str	r3, [r7, #12]


	if(j == '0') b = 0;
 80025fc:	79bb      	ldrb	r3, [r7, #6]
 80025fe:	2b30      	cmp	r3, #48	; 0x30
 8002600:	d102      	bne.n	8002608 <rh_value+0x92>
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	e034      	b.n	8002672 <rh_value+0xfc>
	else if(j == '1') b = 1;
 8002608:	79bb      	ldrb	r3, [r7, #6]
 800260a:	2b31      	cmp	r3, #49	; 0x31
 800260c:	d102      	bne.n	8002614 <rh_value+0x9e>
 800260e:	2301      	movs	r3, #1
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	e02e      	b.n	8002672 <rh_value+0xfc>
	else if(j == '2') b = 2;
 8002614:	79bb      	ldrb	r3, [r7, #6]
 8002616:	2b32      	cmp	r3, #50	; 0x32
 8002618:	d102      	bne.n	8002620 <rh_value+0xaa>
 800261a:	2302      	movs	r3, #2
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	e028      	b.n	8002672 <rh_value+0xfc>
	else if(j == '3') b = 3;
 8002620:	79bb      	ldrb	r3, [r7, #6]
 8002622:	2b33      	cmp	r3, #51	; 0x33
 8002624:	d102      	bne.n	800262c <rh_value+0xb6>
 8002626:	2303      	movs	r3, #3
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	e022      	b.n	8002672 <rh_value+0xfc>
	else if(j == '4') b = 4;
 800262c:	79bb      	ldrb	r3, [r7, #6]
 800262e:	2b34      	cmp	r3, #52	; 0x34
 8002630:	d102      	bne.n	8002638 <rh_value+0xc2>
 8002632:	2304      	movs	r3, #4
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	e01c      	b.n	8002672 <rh_value+0xfc>
	else if(j == '5') b = 5;
 8002638:	79bb      	ldrb	r3, [r7, #6]
 800263a:	2b35      	cmp	r3, #53	; 0x35
 800263c:	d102      	bne.n	8002644 <rh_value+0xce>
 800263e:	2305      	movs	r3, #5
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	e016      	b.n	8002672 <rh_value+0xfc>
	else if(j == '6') b = 6;
 8002644:	79bb      	ldrb	r3, [r7, #6]
 8002646:	2b36      	cmp	r3, #54	; 0x36
 8002648:	d102      	bne.n	8002650 <rh_value+0xda>
 800264a:	2306      	movs	r3, #6
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	e010      	b.n	8002672 <rh_value+0xfc>
	else if(j == '7') b = 7;
 8002650:	79bb      	ldrb	r3, [r7, #6]
 8002652:	2b37      	cmp	r3, #55	; 0x37
 8002654:	d102      	bne.n	800265c <rh_value+0xe6>
 8002656:	2307      	movs	r3, #7
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	e00a      	b.n	8002672 <rh_value+0xfc>
	else if(j == '8') b = 8;
 800265c:	79bb      	ldrb	r3, [r7, #6]
 800265e:	2b38      	cmp	r3, #56	; 0x38
 8002660:	d102      	bne.n	8002668 <rh_value+0xf2>
 8002662:	2308      	movs	r3, #8
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	e004      	b.n	8002672 <rh_value+0xfc>
	else if(j == '9') b = 9;
 8002668:	79bb      	ldrb	r3, [r7, #6]
 800266a:	2b39      	cmp	r3, #57	; 0x39
 800266c:	d101      	bne.n	8002672 <rh_value+0xfc>
 800266e:	2309      	movs	r3, #9
 8002670:	60bb      	str	r3, [r7, #8]

	return a+b;
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	4413      	add	r3, r2
}
 8002678:	4618      	mov	r0, r3
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <actParcelaRFID>:
#include "ESP8266_HAL.h"

extern TIM_HandleTypeDef htim2;
extern UART_HandleTypeDef huart6;

void actParcelaRFID(){
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0

	char aqui[5]= "aqui\n";
 800268a:	4a23      	ldr	r2, [pc, #140]	; (8002718 <actParcelaRFID+0x94>)
 800268c:	463b      	mov	r3, r7
 800268e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002692:	6018      	str	r0, [r3, #0]
 8002694:	3304      	adds	r3, #4
 8002696:	7019      	strb	r1, [r3, #0]
	HAL_UART_Transmit(&huart6, (uint8_t *) aqui, 5, HAL_MAX_DELAY);
 8002698:	4639      	mov	r1, r7
 800269a:	f04f 33ff 	mov.w	r3, #4294967295
 800269e:	2205      	movs	r2, #5
 80026a0:	481e      	ldr	r0, [pc, #120]	; (800271c <actParcelaRFID+0x98>)
 80026a2:	f005 f876 	bl	8007792 <HAL_UART_Transmit>

	while(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == 1) __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 91); // Abrir S_Parcela
 80026a6:	e003      	b.n	80026b0 <actParcelaRFID+0x2c>
 80026a8:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <actParcelaRFID+0x9c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	225b      	movs	r2, #91	; 0x5b
 80026ae:	635a      	str	r2, [r3, #52]	; 0x34
 80026b0:	2140      	movs	r1, #64	; 0x40
 80026b2:	481c      	ldr	r0, [pc, #112]	; (8002724 <actParcelaRFID+0xa0>)
 80026b4:	f003 fc20 	bl	8005ef8 <HAL_GPIO_ReadPin>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d0f4      	beq.n	80026a8 <actParcelaRFID+0x24>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89); // Rebote
 80026be:	4b18      	ldr	r3, [pc, #96]	; (8002720 <actParcelaRFID+0x9c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2259      	movs	r2, #89	; 0x59
 80026c4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 80026c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026ca:	f002 fce5 	bl	8005098 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 90); // Parar S_Parcela
 80026ce:	4b14      	ldr	r3, [pc, #80]	; (8002720 <actParcelaRFID+0x9c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	225a      	movs	r2, #90	; 0x5a
 80026d4:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_Delay(5000);
 80026d6:	f241 3088 	movw	r0, #5000	; 0x1388
 80026da:	f002 fcdd 	bl	8005098 <HAL_Delay>

	while(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == 1) __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89); // Cerrar S_Parcela
 80026de:	e003      	b.n	80026e8 <actParcelaRFID+0x64>
 80026e0:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <actParcelaRFID+0x9c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2259      	movs	r2, #89	; 0x59
 80026e6:	635a      	str	r2, [r3, #52]	; 0x34
 80026e8:	2140      	movs	r1, #64	; 0x40
 80026ea:	480e      	ldr	r0, [pc, #56]	; (8002724 <actParcelaRFID+0xa0>)
 80026ec:	f003 fc04 	bl	8005ef8 <HAL_GPIO_ReadPin>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d0f4      	beq.n	80026e0 <actParcelaRFID+0x5c>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 91); // Rebote
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <actParcelaRFID+0x9c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	225b      	movs	r2, #91	; 0x5b
 80026fc:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 80026fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002702:	f002 fcc9 	bl	8005098 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 90); // Parar S_Parcela
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <actParcelaRFID+0x9c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	225a      	movs	r2, #90	; 0x5a
 800270c:	635a      	str	r2, [r3, #52]	; 0x34

}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	08009804 	.word	0x08009804
 800271c:	20000d90 	.word	0x20000d90
 8002720:	20000dd4 	.word	0x20000dd4
 8002724:	40021000 	.word	0x40021000

08002728 <temp_value>:
 */


#include <Temperatura.h>

float temp_value(char i, char j, char k){
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
 8002732:	460b      	mov	r3, r1
 8002734:	71bb      	strb	r3, [r7, #6]
 8002736:	4613      	mov	r3, r2
 8002738:	717b      	strb	r3, [r7, #5]

	float a, b, c;

	if(i == '0') a = 0;
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	2b30      	cmp	r3, #48	; 0x30
 800273e:	d103      	bne.n	8002748 <temp_value+0x20>
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	e034      	b.n	80027b2 <temp_value+0x8a>
	else if(i == '1') a = 10;
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	2b31      	cmp	r3, #49	; 0x31
 800274c:	d102      	bne.n	8002754 <temp_value+0x2c>
 800274e:	4b60      	ldr	r3, [pc, #384]	; (80028d0 <temp_value+0x1a8>)
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	e02e      	b.n	80027b2 <temp_value+0x8a>
	else if(i == '2') a = 20;
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	2b32      	cmp	r3, #50	; 0x32
 8002758:	d102      	bne.n	8002760 <temp_value+0x38>
 800275a:	4b5e      	ldr	r3, [pc, #376]	; (80028d4 <temp_value+0x1ac>)
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	e028      	b.n	80027b2 <temp_value+0x8a>
	else if(i == '3') a = 30;
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	2b33      	cmp	r3, #51	; 0x33
 8002764:	d102      	bne.n	800276c <temp_value+0x44>
 8002766:	4b5c      	ldr	r3, [pc, #368]	; (80028d8 <temp_value+0x1b0>)
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	e022      	b.n	80027b2 <temp_value+0x8a>
	else if(i == '4') a = 40;
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	2b34      	cmp	r3, #52	; 0x34
 8002770:	d102      	bne.n	8002778 <temp_value+0x50>
 8002772:	4b5a      	ldr	r3, [pc, #360]	; (80028dc <temp_value+0x1b4>)
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	e01c      	b.n	80027b2 <temp_value+0x8a>
	else if(i == '5') a = 50;
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	2b35      	cmp	r3, #53	; 0x35
 800277c:	d102      	bne.n	8002784 <temp_value+0x5c>
 800277e:	4b58      	ldr	r3, [pc, #352]	; (80028e0 <temp_value+0x1b8>)
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	e016      	b.n	80027b2 <temp_value+0x8a>
	else if(i == '6') a = 60;
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	2b36      	cmp	r3, #54	; 0x36
 8002788:	d102      	bne.n	8002790 <temp_value+0x68>
 800278a:	4b56      	ldr	r3, [pc, #344]	; (80028e4 <temp_value+0x1bc>)
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	e010      	b.n	80027b2 <temp_value+0x8a>
	else if(i == '7') a = 70;
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	2b37      	cmp	r3, #55	; 0x37
 8002794:	d102      	bne.n	800279c <temp_value+0x74>
 8002796:	4b54      	ldr	r3, [pc, #336]	; (80028e8 <temp_value+0x1c0>)
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	e00a      	b.n	80027b2 <temp_value+0x8a>
	else if(i == '8') a = 80;
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	2b38      	cmp	r3, #56	; 0x38
 80027a0:	d102      	bne.n	80027a8 <temp_value+0x80>
 80027a2:	4b52      	ldr	r3, [pc, #328]	; (80028ec <temp_value+0x1c4>)
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	e004      	b.n	80027b2 <temp_value+0x8a>
	else if(i == '9') a = 90;
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	2b39      	cmp	r3, #57	; 0x39
 80027ac:	d101      	bne.n	80027b2 <temp_value+0x8a>
 80027ae:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <temp_value+0x1c8>)
 80027b0:	617b      	str	r3, [r7, #20]


	if(j == '0') b = 0;
 80027b2:	79bb      	ldrb	r3, [r7, #6]
 80027b4:	2b30      	cmp	r3, #48	; 0x30
 80027b6:	d103      	bne.n	80027c0 <temp_value+0x98>
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	e038      	b.n	8002832 <temp_value+0x10a>
	else if(j == '1') b = 1;
 80027c0:	79bb      	ldrb	r3, [r7, #6]
 80027c2:	2b31      	cmp	r3, #49	; 0x31
 80027c4:	d103      	bne.n	80027ce <temp_value+0xa6>
 80027c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	e031      	b.n	8002832 <temp_value+0x10a>
	else if(j == '2') b = 2;
 80027ce:	79bb      	ldrb	r3, [r7, #6]
 80027d0:	2b32      	cmp	r3, #50	; 0x32
 80027d2:	d103      	bne.n	80027dc <temp_value+0xb4>
 80027d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	e02a      	b.n	8002832 <temp_value+0x10a>
	else if(j == '3') b = 3;
 80027dc:	79bb      	ldrb	r3, [r7, #6]
 80027de:	2b33      	cmp	r3, #51	; 0x33
 80027e0:	d102      	bne.n	80027e8 <temp_value+0xc0>
 80027e2:	4b44      	ldr	r3, [pc, #272]	; (80028f4 <temp_value+0x1cc>)
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	e024      	b.n	8002832 <temp_value+0x10a>
	else if(j == '4') b = 4;
 80027e8:	79bb      	ldrb	r3, [r7, #6]
 80027ea:	2b34      	cmp	r3, #52	; 0x34
 80027ec:	d103      	bne.n	80027f6 <temp_value+0xce>
 80027ee:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	e01d      	b.n	8002832 <temp_value+0x10a>
	else if(j == '5') b = 5;
 80027f6:	79bb      	ldrb	r3, [r7, #6]
 80027f8:	2b35      	cmp	r3, #53	; 0x35
 80027fa:	d102      	bne.n	8002802 <temp_value+0xda>
 80027fc:	4b3e      	ldr	r3, [pc, #248]	; (80028f8 <temp_value+0x1d0>)
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	e017      	b.n	8002832 <temp_value+0x10a>
	else if(j == '6') b = 6;
 8002802:	79bb      	ldrb	r3, [r7, #6]
 8002804:	2b36      	cmp	r3, #54	; 0x36
 8002806:	d102      	bne.n	800280e <temp_value+0xe6>
 8002808:	4b3c      	ldr	r3, [pc, #240]	; (80028fc <temp_value+0x1d4>)
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	e011      	b.n	8002832 <temp_value+0x10a>
	else if(j == '7') b = 7;
 800280e:	79bb      	ldrb	r3, [r7, #6]
 8002810:	2b37      	cmp	r3, #55	; 0x37
 8002812:	d102      	bne.n	800281a <temp_value+0xf2>
 8002814:	4b3a      	ldr	r3, [pc, #232]	; (8002900 <temp_value+0x1d8>)
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	e00b      	b.n	8002832 <temp_value+0x10a>
	else if(j == '8') b = 8;
 800281a:	79bb      	ldrb	r3, [r7, #6]
 800281c:	2b38      	cmp	r3, #56	; 0x38
 800281e:	d103      	bne.n	8002828 <temp_value+0x100>
 8002820:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	e004      	b.n	8002832 <temp_value+0x10a>
	else if(j == '9') b = 9;
 8002828:	79bb      	ldrb	r3, [r7, #6]
 800282a:	2b39      	cmp	r3, #57	; 0x39
 800282c:	d101      	bne.n	8002832 <temp_value+0x10a>
 800282e:	4b35      	ldr	r3, [pc, #212]	; (8002904 <temp_value+0x1dc>)
 8002830:	613b      	str	r3, [r7, #16]

	if(k == '0') c = 0;
 8002832:	797b      	ldrb	r3, [r7, #5]
 8002834:	2b30      	cmp	r3, #48	; 0x30
 8002836:	d103      	bne.n	8002840 <temp_value+0x118>
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	e035      	b.n	80028ac <temp_value+0x184>
	else if(k == '1') c = 0.1;
 8002840:	797b      	ldrb	r3, [r7, #5]
 8002842:	2b31      	cmp	r3, #49	; 0x31
 8002844:	d102      	bne.n	800284c <temp_value+0x124>
 8002846:	4b30      	ldr	r3, [pc, #192]	; (8002908 <temp_value+0x1e0>)
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	e02f      	b.n	80028ac <temp_value+0x184>
	else if(k == '2') c = 0.2;
 800284c:	797b      	ldrb	r3, [r7, #5]
 800284e:	2b32      	cmp	r3, #50	; 0x32
 8002850:	d102      	bne.n	8002858 <temp_value+0x130>
 8002852:	4b2e      	ldr	r3, [pc, #184]	; (800290c <temp_value+0x1e4>)
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	e029      	b.n	80028ac <temp_value+0x184>
	else if(k == '3') c = 0.3;
 8002858:	797b      	ldrb	r3, [r7, #5]
 800285a:	2b33      	cmp	r3, #51	; 0x33
 800285c:	d102      	bne.n	8002864 <temp_value+0x13c>
 800285e:	4b2c      	ldr	r3, [pc, #176]	; (8002910 <temp_value+0x1e8>)
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	e023      	b.n	80028ac <temp_value+0x184>
	else if(k == '4') c = 0.4;
 8002864:	797b      	ldrb	r3, [r7, #5]
 8002866:	2b34      	cmp	r3, #52	; 0x34
 8002868:	d102      	bne.n	8002870 <temp_value+0x148>
 800286a:	4b2a      	ldr	r3, [pc, #168]	; (8002914 <temp_value+0x1ec>)
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	e01d      	b.n	80028ac <temp_value+0x184>
	else if(k == '5') c = 0.5;
 8002870:	797b      	ldrb	r3, [r7, #5]
 8002872:	2b35      	cmp	r3, #53	; 0x35
 8002874:	d103      	bne.n	800287e <temp_value+0x156>
 8002876:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	e016      	b.n	80028ac <temp_value+0x184>
	else if(k == '6') c = 0.6;
 800287e:	797b      	ldrb	r3, [r7, #5]
 8002880:	2b36      	cmp	r3, #54	; 0x36
 8002882:	d102      	bne.n	800288a <temp_value+0x162>
 8002884:	4b24      	ldr	r3, [pc, #144]	; (8002918 <temp_value+0x1f0>)
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	e010      	b.n	80028ac <temp_value+0x184>
	else if(k == '7') c = 0.7;
 800288a:	797b      	ldrb	r3, [r7, #5]
 800288c:	2b37      	cmp	r3, #55	; 0x37
 800288e:	d102      	bne.n	8002896 <temp_value+0x16e>
 8002890:	4b22      	ldr	r3, [pc, #136]	; (800291c <temp_value+0x1f4>)
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	e00a      	b.n	80028ac <temp_value+0x184>
	else if(k == '8') c = 0.8;
 8002896:	797b      	ldrb	r3, [r7, #5]
 8002898:	2b38      	cmp	r3, #56	; 0x38
 800289a:	d102      	bne.n	80028a2 <temp_value+0x17a>
 800289c:	4b20      	ldr	r3, [pc, #128]	; (8002920 <temp_value+0x1f8>)
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	e004      	b.n	80028ac <temp_value+0x184>
	else if(k == '9') c = 0.9;
 80028a2:	797b      	ldrb	r3, [r7, #5]
 80028a4:	2b39      	cmp	r3, #57	; 0x39
 80028a6:	d101      	bne.n	80028ac <temp_value+0x184>
 80028a8:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <temp_value+0x1fc>)
 80028aa:	60fb      	str	r3, [r7, #12]

	return a+b+c;
 80028ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80028b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80028b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80028bc:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80028c0:	eeb0 0a67 	vmov.f32	s0, s15
 80028c4:	371c      	adds	r7, #28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	41200000 	.word	0x41200000
 80028d4:	41a00000 	.word	0x41a00000
 80028d8:	41f00000 	.word	0x41f00000
 80028dc:	42200000 	.word	0x42200000
 80028e0:	42480000 	.word	0x42480000
 80028e4:	42700000 	.word	0x42700000
 80028e8:	428c0000 	.word	0x428c0000
 80028ec:	42a00000 	.word	0x42a00000
 80028f0:	42b40000 	.word	0x42b40000
 80028f4:	40400000 	.word	0x40400000
 80028f8:	40a00000 	.word	0x40a00000
 80028fc:	40c00000 	.word	0x40c00000
 8002900:	40e00000 	.word	0x40e00000
 8002904:	41100000 	.word	0x41100000
 8002908:	3dcccccd 	.word	0x3dcccccd
 800290c:	3e4ccccd 	.word	0x3e4ccccd
 8002910:	3e99999a 	.word	0x3e99999a
 8002914:	3ecccccd 	.word	0x3ecccccd
 8002918:	3f19999a 	.word	0x3f19999a
 800291c:	3f333333 	.word	0x3f333333
 8002920:	3f4ccccd 	.word	0x3f4ccccd
 8002924:	3f666666 	.word	0x3f666666

08002928 <ringInit>:

void storeChar(unsigned char c, Ring_Buffer *buffer);


void ringInit(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
	_rx_buffer1 = &rx_buffer1;
 800292c:	4b18      	ldr	r3, [pc, #96]	; (8002990 <ringInit+0x68>)
 800292e:	4a19      	ldr	r2, [pc, #100]	; (8002994 <ringInit+0x6c>)
 8002930:	601a      	str	r2, [r3, #0]
    _tx_buffer1 = &tx_buffer1;
 8002932:	4b19      	ldr	r3, [pc, #100]	; (8002998 <ringInit+0x70>)
 8002934:	4a19      	ldr	r2, [pc, #100]	; (800299c <ringInit+0x74>)
 8002936:	601a      	str	r2, [r3, #0]
    _rx_buffer2 = &rx_buffer2;
 8002938:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <ringInit+0x78>)
 800293a:	4a1a      	ldr	r2, [pc, #104]	; (80029a4 <ringInit+0x7c>)
 800293c:	601a      	str	r2, [r3, #0]
    _tx_buffer2 = &tx_buffer2;
 800293e:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <ringInit+0x80>)
 8002940:	4a1a      	ldr	r2, [pc, #104]	; (80029ac <ringInit+0x84>)
 8002942:	601a      	str	r2, [r3, #0]

    /* Habilita la INTERRUPCIÓN por ERROR del UART (frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_ERR);
 8002944:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <ringInit+0x88>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <ringInit+0x88>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_ERR);
 8002954:	4b17      	ldr	r3, [pc, #92]	; (80029b4 <ringInit+0x8c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695a      	ldr	r2, [r3, #20]
 800295a:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <ringInit+0x8c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	615a      	str	r2, [r3, #20]

    /* Habilita la INTERRUPCIÓN por REGISTRO DE DATA VACÍO */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_RXNE);
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <ringInit+0x88>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <ringInit+0x88>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0220 	orr.w	r2, r2, #32
 8002972:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_RXNE);
 8002974:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <ringInit+0x8c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <ringInit+0x8c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0220 	orr.w	r2, r2, #32
 8002982:	60da      	str	r2, [r3, #12]
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	20000a60 	.word	0x20000a60
 8002994:	20000090 	.word	0x20000090
 8002998:	20000a64 	.word	0x20000a64
 800299c:	20000298 	.word	0x20000298
 80029a0:	20000a68 	.word	0x20000a68
 80029a4:	200004a0 	.word	0x200004a0
 80029a8:	20000a5c 	.word	0x20000a5c
 80029ac:	200006a8 	.word	0x200006a8
 80029b0:	20000e1c 	.word	0x20000e1c
 80029b4:	20000d90 	.word	0x20000d90

080029b8 <storeChar>:


void storeChar(unsigned char c, Ring_Buffer *buffer)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	6039      	str	r1, [r7, #0]
 80029c2:	71fb      	strb	r3, [r7, #7]
    int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029ca:	3301      	adds	r3, #1
 80029cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d0:	60fb      	str	r3, [r7, #12]

    // Si queremos almacenar lo recibido justo antes de TAIL, significando que HEAD avanzará hasta la posición de TAIL,
    // se provocará un desbordamiento (overflow) del BUFFER, y, por lo tanto, no se escribirá el caracter o ni avanzaremos HEAD.
    if(i != buffer->tail)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d009      	beq.n	80029f2 <storeChar+0x3a>
    {
    	buffer->buffer[buffer->head] = c;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	79f9      	ldrb	r1, [r7, #7]
 80029e8:	54d1      	strb	r1, [r2, r3]
        buffer->head = i;
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }
}
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <UART_peek>:
	}
}


int UART_peek(UART_HandleTypeDef *uart)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a1c      	ldr	r2, [pc, #112]	; (8002a7c <UART_peek+0x7c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d114      	bne.n	8002a3a <UART_peek+0x3a>
	{
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 8002a10:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <UART_peek+0x80>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <UART_peek+0x80>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d102      	bne.n	8002a2a <UART_peek+0x2a>
 8002a24:	f04f 33ff 	mov.w	r3, #4294967295
 8002a28:	e022      	b.n	8002a70 <UART_peek+0x70>

		else return _rx_buffer1->buffer[_rx_buffer1->tail];
 8002a2a:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <UART_peek+0x80>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <UART_peek+0x80>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a36:	5cd3      	ldrb	r3, [r2, r3]
 8002a38:	e01a      	b.n	8002a70 <UART_peek+0x70>
	}

	else if (uart == PC_UART)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a11      	ldr	r2, [pc, #68]	; (8002a84 <UART_peek+0x84>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d114      	bne.n	8002a6c <UART_peek+0x6c>
	{
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 8002a42:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <UART_peek+0x88>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002a4a:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <UART_peek+0x88>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d102      	bne.n	8002a5c <UART_peek+0x5c>
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5a:	e009      	b.n	8002a70 <UART_peek+0x70>

		else return _rx_buffer2->buffer[_rx_buffer2->tail];
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <UART_peek+0x88>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <UART_peek+0x88>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a68:	5cd3      	ldrb	r3, [r2, r3]
 8002a6a:	e001      	b.n	8002a70 <UART_peek+0x70>
	}

	return -1;
 8002a6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	20000e1c 	.word	0x20000e1c
 8002a80:	20000a60 	.word	0x20000a60
 8002a84:	20000d90 	.word	0x20000d90
 8002a88:	20000a68 	.word	0x20000a68

08002a8c <UART_read>:


int UART_read(UART_HandleTypeDef *uart)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a29      	ldr	r2, [pc, #164]	; (8002b3c <UART_read+0xb0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d121      	bne.n	8002ae0 <UART_read+0x54>
	{
		// Si HEAD no está delante de TAIL, no tenemos ningún CARACTER
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 8002a9c:	4b28      	ldr	r3, [pc, #160]	; (8002b40 <UART_read+0xb4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002aa4:	4b26      	ldr	r3, [pc, #152]	; (8002b40 <UART_read+0xb4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d102      	bne.n	8002ab6 <UART_read+0x2a>
 8002ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab4:	e03c      	b.n	8002b30 <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8002ab6:	4b22      	ldr	r3, [pc, #136]	; (8002b40 <UART_read+0xb4>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <UART_read+0xb4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002ac2:	5cd3      	ldrb	r3, [r2, r3]
 8002ac4:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8002ac6:	4b1e      	ldr	r3, [pc, #120]	; (8002b40 <UART_read+0xb4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <UART_read+0xb4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ad8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8002adc:	7bbb      	ldrb	r3, [r7, #14]
 8002ade:	e027      	b.n	8002b30 <UART_read+0xa4>
		}
	}

	else if (uart == PC_UART)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a18      	ldr	r2, [pc, #96]	; (8002b44 <UART_read+0xb8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d121      	bne.n	8002b2c <UART_read+0xa0>
	{
		// Si HEAD no está delante de TAIL, no tenemos ningún CARACTER
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 8002ae8:	4b17      	ldr	r3, [pc, #92]	; (8002b48 <UART_read+0xbc>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002af0:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <UART_read+0xbc>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d102      	bne.n	8002b02 <UART_read+0x76>
 8002afc:	f04f 33ff 	mov.w	r3, #4294967295
 8002b00:	e016      	b.n	8002b30 <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8002b02:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <UART_read+0xbc>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <UART_read+0xbc>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b0e:	5cd3      	ldrb	r3, [r2, r3]
 8002b10:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8002b12:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <UART_read+0xbc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <UART_read+0xbc>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	e001      	b.n	8002b30 <UART_read+0xa4>
		}
	}

	else return -1;
 8002b2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	20000e1c 	.word	0x20000e1c
 8002b40:	20000a60 	.word	0x20000a60
 8002b44:	20000d90 	.word	0x20000d90
 8002b48:	20000a68 	.word	0x20000a68

08002b4c <UART_write>:


void UART_write(int c, UART_HandleTypeDef *uart)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	db54      	blt.n	8002c06 <UART_write+0xba>
	{
		if (uart == WiFi_UART)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	4a2d      	ldr	r2, [pc, #180]	; (8002c14 <UART_write+0xc8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d126      	bne.n	8002bb2 <UART_write+0x66>
		{
			int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8002b64:	4b2c      	ldr	r3, [pc, #176]	; (8002c18 <UART_write+0xcc>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b72:	60bb      	str	r3, [r7, #8]

			// Si el BUFFER de salida está lleno, sólo se puede esperar a la INTERRUPCIÓN que lo vacia */
		    while (i == _tx_buffer1->tail);
 8002b74:	bf00      	nop
 8002b76:	4b28      	ldr	r3, [pc, #160]	; (8002c18 <UART_write+0xcc>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d0f8      	beq.n	8002b76 <UART_write+0x2a>

		   _tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8002b84:	4b24      	ldr	r3, [pc, #144]	; (8002c18 <UART_write+0xcc>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <UART_write+0xcc>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	b2c9      	uxtb	r1, r1
 8002b94:	54d1      	strb	r1, [r2, r3]
		   _tx_buffer1->head = i;
 8002b96:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <UART_write+0xcc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		   // Habilitar la INTERRUPCIÓN de TRANSMISIÓN del UART
		   __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_TXE);
 8002ba0:	4b1c      	ldr	r3, [pc, #112]	; (8002c14 <UART_write+0xc8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <UART_write+0xc8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bae:	60da      	str	r2, [r3, #12]

			// Habilitar la INTERRUPCIÓN de TRANSMISIÓN del UART
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
		}
	}
}
 8002bb0:	e029      	b.n	8002c06 <UART_write+0xba>
		else if (uart == PC_UART)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	4a19      	ldr	r2, [pc, #100]	; (8002c1c <UART_write+0xd0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d125      	bne.n	8002c06 <UART_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8002bba:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <UART_write+0xd4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc8:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 8002bca:	bf00      	nop
 8002bcc:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <UART_write+0xd4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d0f8      	beq.n	8002bcc <UART_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8002bda:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <UART_write+0xd4>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <UART_write+0xd4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	b2c9      	uxtb	r1, r1
 8002bea:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8002bec:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <UART_write+0xd4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
 8002bf6:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <UART_write+0xd0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <UART_write+0xd0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c04:	60da      	str	r2, [r3, #12]
}
 8002c06:	bf00      	nop
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20000e1c 	.word	0x20000e1c
 8002c18:	20000a64 	.word	0x20000a64
 8002c1c:	20000d90 	.word	0x20000d90
 8002c20:	20000a5c 	.word	0x20000a5c

08002c24 <UART_available>:


int UART_available(UART_HandleTypeDef *uart)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a19      	ldr	r2, [pc, #100]	; (8002c94 <UART_available+0x70>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d111      	bne.n	8002c58 <UART_available+0x34>
 8002c34:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <UART_available+0x74>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	4b16      	ldr	r3, [pc, #88]	; (8002c98 <UART_available+0x74>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c56:	e017      	b.n	8002c88 <UART_available+0x64>

	else if (uart == PC_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a10      	ldr	r2, [pc, #64]	; (8002c9c <UART_available+0x78>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d111      	bne.n	8002c84 <UART_available+0x60>
 8002c60:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <UART_available+0x7c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <UART_available+0x7c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c82:	e001      	b.n	8002c88 <UART_available+0x64>

	return -1;
 8002c84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	20000e1c 	.word	0x20000e1c
 8002c98:	20000a60 	.word	0x20000a60
 8002c9c:	20000d90 	.word	0x20000d90
 8002ca0:	20000a68 	.word	0x20000a68

08002ca4 <UART_send>:
	return 1;
}


void UART_send (const char *s, UART_HandleTypeDef *uart)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
	while(*s!='\0') UART_write(*s++, uart);
 8002cae:	e007      	b.n	8002cc0 <UART_send+0x1c>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	6839      	ldr	r1, [r7, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff ff46 	bl	8002b4c <UART_write>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f3      	bne.n	8002cb0 <UART_send+0xc>
}
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <UART_copyUpto>:
  while(*s) UART_write(*s++, uart);
}


int UART_copyUpto(char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f7fd fa73 	bl	80001d0 <strlen>
 8002cea:	4603      	mov	r3, r0
 8002cec:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61bb      	str	r3, [r7, #24]

again:
	while (!UART_available(uart));
 8002cf2:	bf00      	nop
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff ff95 	bl	8002c24 <UART_available>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f9      	beq.n	8002cf4 <UART_copyUpto+0x20>

	while (UART_peek(uart) != string[so_far])
 8002d00:	e01f      	b.n	8002d42 <UART_copyUpto+0x6e>
	{
		buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8002d02:	4b32      	ldr	r3, [pc, #200]	; (8002dcc <UART_copyUpto+0xf8>)
 8002d04:	6819      	ldr	r1, [r3, #0]
 8002d06:	4b31      	ldr	r3, [pc, #196]	; (8002dcc <UART_copyUpto+0xf8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	68b8      	ldr	r0, [r7, #8]
 8002d12:	4403      	add	r3, r0
 8002d14:	5c8a      	ldrb	r2, [r1, r2]
 8002d16:	701a      	strb	r2, [r3, #0]
		_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8002d18:	4b2c      	ldr	r3, [pc, #176]	; (8002dcc <UART_copyUpto+0xf8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	4b2a      	ldr	r3, [pc, #168]	; (8002dcc <UART_copyUpto+0xf8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		indx++;
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	3301      	adds	r3, #1
 8002d32:	61bb      	str	r3, [r7, #24]
		while (!UART_available(uart));
 8002d34:	bf00      	nop
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff ff74 	bl	8002c24 <UART_available>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f9      	beq.n	8002d36 <UART_copyUpto+0x62>
	while (UART_peek(uart) != string[so_far])
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff fe5c 	bl	8002a00 <UART_peek>
 8002d48:	4601      	mov	r1, r0
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4413      	add	r3, r2
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	4299      	cmp	r1, r3
 8002d54:	d1d5      	bne.n	8002d02 <UART_copyUpto+0x2e>

	}

	while (UART_peek(uart) == string [so_far])
 8002d56:	e01b      	b.n	8002d90 <UART_copyUpto+0xbc>
	{
		so_far++;
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = UART_read(uart);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff fe94 	bl	8002a8c <UART_read>
 8002d64:	4601      	mov	r1, r0
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	61ba      	str	r2, [r7, #24]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	4413      	add	r3, r2
 8002d72:	b2ca      	uxtb	r2, r1
 8002d74:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8002d76:	69fa      	ldr	r2, [r7, #28]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d101      	bne.n	8002d82 <UART_copyUpto+0xae>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e01f      	b.n	8002dc2 <UART_copyUpto+0xee>
		while (!UART_available(uart));
 8002d82:	bf00      	nop
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff ff4d 	bl	8002c24 <UART_available>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f9      	beq.n	8002d84 <UART_copyUpto+0xb0>
	while (UART_peek(uart) == string [so_far])
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff fe35 	bl	8002a00 <UART_peek>
 8002d96:	4601      	mov	r1, r0
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	4299      	cmp	r1, r3
 8002da2:	d0d9      	beq.n	8002d58 <UART_copyUpto+0x84>
	}

	if (so_far != len)
 8002da4:	69fa      	ldr	r2, [r7, #28]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d002      	beq.n	8002db2 <UART_copyUpto+0xde>
	{
		so_far = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	61fb      	str	r3, [r7, #28]
		goto again;
 8002db0:	e79f      	b.n	8002cf2 <UART_copyUpto+0x1e>
	}

	if (so_far == len) return 1;
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d101      	bne.n	8002dbe <UART_copyUpto+0xea>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e001      	b.n	8002dc2 <UART_copyUpto+0xee>

	else return -1;
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3720      	adds	r7, #32
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000a60 	.word	0x20000a60

08002dd0 <UART_waitFor>:


int UART_waitFor(char *string,UART_HandleTypeDef *uart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7fd f9f6 	bl	80001d0 <strlen>
 8002de4:	4603      	mov	r3, r0
 8002de6:	60bb      	str	r3, [r7, #8]

again_device:
	while (!UART_available(uart));
 8002de8:	bf00      	nop
 8002dea:	6838      	ldr	r0, [r7, #0]
 8002dec:	f7ff ff1a 	bl	8002c24 <UART_available>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f9      	beq.n	8002dea <UART_waitFor+0x1a>

	if (UART_peek(uart) != string[so_far])
 8002df6:	6838      	ldr	r0, [r7, #0]
 8002df8:	f7ff fe02 	bl	8002a00 <UART_peek>
 8002dfc:	4601      	mov	r1, r0
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	4413      	add	r3, r2
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	4299      	cmp	r1, r3
 8002e08:	d01e      	beq.n	8002e48 <UART_waitFor+0x78>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <UART_waitFor+0xb4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <UART_waitFor+0xb4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 8002e20:	e7e2      	b.n	8002de8 <UART_waitFor+0x18>

	}

	while (UART_peek(uart) == string [so_far])
	{
		so_far++;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	3301      	adds	r3, #1
 8002e26:	60fb      	str	r3, [r7, #12]
		UART_read(uart);
 8002e28:	6838      	ldr	r0, [r7, #0]
 8002e2a:	f7ff fe2f 	bl	8002a8c <UART_read>
		if (so_far == len) return 1;
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d101      	bne.n	8002e3a <UART_waitFor+0x6a>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e01f      	b.n	8002e7a <UART_waitFor+0xaa>
		while (!UART_available(uart));
 8002e3a:	bf00      	nop
 8002e3c:	6838      	ldr	r0, [r7, #0]
 8002e3e:	f7ff fef1 	bl	8002c24 <UART_available>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f9      	beq.n	8002e3c <UART_waitFor+0x6c>
	while (UART_peek(uart) == string [so_far])
 8002e48:	6838      	ldr	r0, [r7, #0]
 8002e4a:	f7ff fdd9 	bl	8002a00 <UART_peek>
 8002e4e:	4601      	mov	r1, r0
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	4299      	cmp	r1, r3
 8002e5a:	d0e2      	beq.n	8002e22 <UART_waitFor+0x52>
	}

	if (so_far != len)
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d002      	beq.n	8002e6a <UART_waitFor+0x9a>
	{
		so_far = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60fb      	str	r3, [r7, #12]
		goto again_device;
 8002e68:	e7be      	b.n	8002de8 <UART_waitFor+0x18>
	}

	if (so_far == len) return 1;
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d101      	bne.n	8002e76 <UART_waitFor+0xa6>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e001      	b.n	8002e7a <UART_waitFor+0xaa>

	else return -1;
 8002e76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000a60 	.word	0x20000a60

08002e88 <UART_isr>:


void UART_isr(UART_HandleTypeDef *huart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
	uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	613b      	str	r3, [r7, #16]

	/* Si DR (DATA REGISTER) no está vacío y RX INT está habilitado */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f003 0320 	and.w	r3, r3, #32
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d023      	beq.n	8002ef2 <UART_isr+0x6a>
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f003 0320 	and.w	r3, r3, #32
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d01e      	beq.n	8002ef2 <UART_isr+0x6a>
    	    	                USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	************************************************************************************************************/

		huart->Instance->SR;                   // Leer SR (STATUS REGISTER)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR; // Leer DR (DATA REGISTER)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	73fb      	strb	r3, [r7, #15]

        if (huart == WiFi_UART)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a3f      	ldr	r2, [pc, #252]	; (8002fc4 <UART_isr+0x13c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d107      	bne.n	8002eda <UART_isr+0x52>
        {
        	storeChar(c, _rx_buffer1); // Almacena DATA en el BUFFER
 8002eca:	4b3f      	ldr	r3, [pc, #252]	; (8002fc8 <UART_isr+0x140>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fd70 	bl	80029b8 <storeChar>
        else if (huart == PC_UART)
        {
        	storeChar(c, _rx_buffer2); // Almacena DATA en el BUFFER
        }

        return;
 8002ed8:	e06d      	b.n	8002fb6 <UART_isr+0x12e>
        else if (huart == PC_UART)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a3b      	ldr	r2, [pc, #236]	; (8002fcc <UART_isr+0x144>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d169      	bne.n	8002fb6 <UART_isr+0x12e>
        	storeChar(c, _rx_buffer2); // Almacena DATA en el BUFFER
 8002ee2:	4b3b      	ldr	r3, [pc, #236]	; (8002fd0 <UART_isr+0x148>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff fd64 	bl	80029b8 <storeChar>
        return;
 8002ef0:	e061      	b.n	8002fb6 <UART_isr+0x12e>
    }

    /* Si la INTERRUPCIÓN se produce por el TRANSMIT DATA REGISTER EMPTY */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d05f      	beq.n	8002fbc <UART_isr+0x134>
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d05a      	beq.n	8002fbc <UART_isr+0x134>
    {
    	if (huart == WiFi_UART)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a2e      	ldr	r2, [pc, #184]	; (8002fc4 <UART_isr+0x13c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d127      	bne.n	8002f5e <UART_isr+0xd6>
    	{
    		if(tx_buffer1.head == tx_buffer1.tail)
 8002f0e:	4b31      	ldr	r3, [pc, #196]	; (8002fd4 <UART_isr+0x14c>)
 8002f10:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002f14:	4b2f      	ldr	r3, [pc, #188]	; (8002fd4 <UART_isr+0x14c>)
 8002f16:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d108      	bne.n	8002f30 <UART_isr+0xa8>
    	    {
    			// BUFFER vacío, inhabilitamos la INTERRUPCIÓN
    	        __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f2c:	60da      	str	r2, [r3, #12]
        	     huart->Instance->DR = c;

        	}
        }

    	return;
 8002f2e:	e044      	b.n	8002fba <UART_isr+0x132>
    			unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8002f30:	4b28      	ldr	r3, [pc, #160]	; (8002fd4 <UART_isr+0x14c>)
 8002f32:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002f36:	4a27      	ldr	r2, [pc, #156]	; (8002fd4 <UART_isr+0x14c>)
 8002f38:	5cd3      	ldrb	r3, [r2, r3]
 8002f3a:	737b      	strb	r3, [r7, #13]
    			tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8002f3c:	4b25      	ldr	r3, [pc, #148]	; (8002fd4 <UART_isr+0x14c>)
 8002f3e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002f42:	3301      	adds	r3, #1
 8002f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f48:	4a22      	ldr	r2, [pc, #136]	; (8002fd4 <UART_isr+0x14c>)
 8002f4a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    			huart->Instance->SR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
    			huart->Instance->DR = c;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	7b7a      	ldrb	r2, [r7, #13]
 8002f5a:	605a      	str	r2, [r3, #4]
    	return;
 8002f5c:	e02d      	b.n	8002fba <UART_isr+0x132>
    	else if (huart == PC_UART)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a1a      	ldr	r2, [pc, #104]	; (8002fcc <UART_isr+0x144>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d129      	bne.n	8002fba <UART_isr+0x132>
    		if(tx_buffer2.head == tx_buffer2.tail)
 8002f66:	4b1c      	ldr	r3, [pc, #112]	; (8002fd8 <UART_isr+0x150>)
 8002f68:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002f6c:	4b1a      	ldr	r3, [pc, #104]	; (8002fd8 <UART_isr+0x150>)
 8002f6e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d108      	bne.n	8002f88 <UART_isr+0x100>
        	    __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68da      	ldr	r2, [r3, #12]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f84:	60da      	str	r2, [r3, #12]
    	return;
 8002f86:	e018      	b.n	8002fba <UART_isr+0x132>
        	    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8002f88:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <UART_isr+0x150>)
 8002f8a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002f8e:	4a12      	ldr	r2, [pc, #72]	; (8002fd8 <UART_isr+0x150>)
 8002f90:	5cd3      	ldrb	r3, [r2, r3]
 8002f92:	73bb      	strb	r3, [r7, #14]
        	    tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8002f94:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <UART_isr+0x150>)
 8002f96:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa0:	4a0d      	ldr	r2, [pc, #52]	; (8002fd8 <UART_isr+0x150>)
 8002fa2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	     huart->Instance->SR;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
        	     huart->Instance->DR = c;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	7bba      	ldrb	r2, [r7, #14]
 8002fb2:	605a      	str	r2, [r3, #4]
    	return;
 8002fb4:	e001      	b.n	8002fba <UART_isr+0x132>
        return;
 8002fb6:	bf00      	nop
 8002fb8:	e000      	b.n	8002fbc <UART_isr+0x134>
    	return;
 8002fba:	bf00      	nop
    }
}
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000e1c 	.word	0x20000e1c
 8002fc8:	20000a60 	.word	0x20000a60
 8002fcc:	20000d90 	.word	0x20000d90
 8002fd0:	20000a68 	.word	0x20000a68
 8002fd4:	20000298 	.word	0x20000298
 8002fd8:	200006a8 	.word	0x200006a8

08002fdc <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	80fb      	strh	r3, [r7, #6]

    if (GPIO_Pin==S_Int_Pin)
 8002fe6:	88fb      	ldrh	r3, [r7, #6]
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d102      	bne.n	8002ff2 <HAL_GPIO_EXTI_Callback+0x16>
    {
        interior = 1;
 8002fec:	4b07      	ldr	r3, [pc, #28]	; (800300c <HAL_GPIO_EXTI_Callback+0x30>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin==S_Ext_Pin)
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d102      	bne.n	8002ffe <HAL_GPIO_EXTI_Callback+0x22>
    {
        exterior = 1;
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_GPIO_EXTI_Callback+0x34>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
    }
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	200008b0 	.word	0x200008b0
 8003010:	200008b4 	.word	0x200008b4

08003014 <debouncer>:

int debouncer(volatile int* button_int, GPIO_TypeDef* GPIO_port, uint16_t GPIO_number) // Control de los rebotes
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	4613      	mov	r3, r2
 8003020:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count=0;
	static int counter=0;

	if (*button_int==1)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d13b      	bne.n	80030a2 <debouncer+0x8e>
	{
		if (button_count==0)
 800302a:	4b20      	ldr	r3, [pc, #128]	; (80030ac <debouncer+0x98>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10b      	bne.n	800304a <debouncer+0x36>
		{
			counter=HAL_GetTick();
 8003032:	f002 f825 	bl	8005080 <HAL_GetTick>
 8003036:	4603      	mov	r3, r0
 8003038:	461a      	mov	r2, r3
 800303a:	4b1d      	ldr	r3, [pc, #116]	; (80030b0 <debouncer+0x9c>)
 800303c:	601a      	str	r2, [r3, #0]
			button_count++;
 800303e:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <debouncer+0x98>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	3301      	adds	r3, #1
 8003044:	b2da      	uxtb	r2, r3
 8003046:	4b19      	ldr	r3, [pc, #100]	; (80030ac <debouncer+0x98>)
 8003048:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick()-counter>=20)
 800304a:	f002 f819 	bl	8005080 <HAL_GetTick>
 800304e:	4603      	mov	r3, r0
 8003050:	4a17      	ldr	r2, [pc, #92]	; (80030b0 <debouncer+0x9c>)
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	2b13      	cmp	r3, #19
 8003058:	d923      	bls.n	80030a2 <debouncer+0x8e>
		{
			counter=HAL_GetTick();
 800305a:	f002 f811 	bl	8005080 <HAL_GetTick>
 800305e:	4603      	mov	r3, r0
 8003060:	461a      	mov	r2, r3
 8003062:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <debouncer+0x9c>)
 8003064:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number)!=1)
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	4619      	mov	r1, r3
 800306a:	68b8      	ldr	r0, [r7, #8]
 800306c:	f002 ff44 	bl	8005ef8 <HAL_GPIO_ReadPin>
 8003070:	4603      	mov	r3, r0
 8003072:	2b01      	cmp	r3, #1
 8003074:	d003      	beq.n	800307e <debouncer+0x6a>
			{
				button_count=1;
 8003076:	4b0d      	ldr	r3, [pc, #52]	; (80030ac <debouncer+0x98>)
 8003078:	2201      	movs	r2, #1
 800307a:	701a      	strb	r2, [r3, #0]
 800307c:	e005      	b.n	800308a <debouncer+0x76>
			}
			else
			{
				button_count++;
 800307e:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <debouncer+0x98>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	3301      	adds	r3, #1
 8003084:	b2da      	uxtb	r2, r3
 8003086:	4b09      	ldr	r3, [pc, #36]	; (80030ac <debouncer+0x98>)
 8003088:	701a      	strb	r2, [r3, #0]
			}
			if (button_count==4 ) // Periodo antirebotes
 800308a:	4b08      	ldr	r3, [pc, #32]	; (80030ac <debouncer+0x98>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b04      	cmp	r3, #4
 8003090:	d107      	bne.n	80030a2 <debouncer+0x8e>
			{
				button_count=0;
 8003092:	4b06      	ldr	r3, [pc, #24]	; (80030ac <debouncer+0x98>)
 8003094:	2200      	movs	r2, #0
 8003096:	701a      	strb	r2, [r3, #0]
				*button_int=0;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
				return 1;
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <debouncer+0x90>
			}
		}
	}
	return 0;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	200008f0 	.word	0x200008f0
 80030b0:	200008f4 	.word	0x200008f4

080030b4 <playTimbre>:

void playTimbre(){
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0

	uint8_t tone;

	tone = 25;
 80030ba:	2319      	movs	r3, #25
 80030bc:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	005a      	lsls	r2, r3, #1
 80030c2:	4b16      	ldr	r3, [pc, #88]	; (800311c <playTimbre+0x68>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80030c8:	79fb      	ldrb	r3, [r7, #7]
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	461a      	mov	r2, r3
 80030ce:	4b13      	ldr	r3, [pc, #76]	; (800311c <playTimbre+0x68>)
 80030d0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 80030d2:	4b12      	ldr	r3, [pc, #72]	; (800311c <playTimbre+0x68>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	79fa      	ldrb	r2, [r7, #7]
 80030d8:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(300);
 80030da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80030de:	f001 ffdb 	bl	8005098 <HAL_Delay>

	tone = 40;
 80030e2:	2328      	movs	r3, #40	; 0x28
 80030e4:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	005a      	lsls	r2, r3, #1
 80030ea:	4b0c      	ldr	r3, [pc, #48]	; (800311c <playTimbre+0x68>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	461a      	mov	r2, r3
 80030f6:	4b09      	ldr	r3, [pc, #36]	; (800311c <playTimbre+0x68>)
 80030f8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 80030fa:	4b08      	ldr	r3, [pc, #32]	; (800311c <playTimbre+0x68>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	79fa      	ldrb	r2, [r7, #7]
 8003100:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 8003102:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003106:	f001 ffc7 	bl	8005098 <HAL_Delay>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 800310a:	4b04      	ldr	r3, [pc, #16]	; (800311c <playTimbre+0x68>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2200      	movs	r2, #0
 8003110:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000ab4 	.word	0x20000ab4

08003120 <playAlarma>:


void playAlarma(){
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0

	uint8_t tone;

	for(tone = 40; tone >= 10; tone = tone-10){
 8003126:	2328      	movs	r3, #40	; 0x28
 8003128:	71fb      	strb	r3, [r7, #7]
 800312a:	e014      	b.n	8003156 <playAlarma+0x36>
		__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 800312c:	79fb      	ldrb	r3, [r7, #7]
 800312e:	005a      	lsls	r2, r3, #1
 8003130:	4b12      	ldr	r3, [pc, #72]	; (800317c <playAlarma+0x5c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	62da      	str	r2, [r3, #44]	; 0x2c
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	461a      	mov	r2, r3
 800313c:	4b0f      	ldr	r3, [pc, #60]	; (800317c <playAlarma+0x5c>)
 800313e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 8003140:	4b0e      	ldr	r3, [pc, #56]	; (800317c <playAlarma+0x5c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	79fa      	ldrb	r2, [r7, #7]
 8003146:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(300);
 8003148:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800314c:	f001 ffa4 	bl	8005098 <HAL_Delay>
	for(tone = 40; tone >= 10; tone = tone-10){
 8003150:	79fb      	ldrb	r3, [r7, #7]
 8003152:	3b0a      	subs	r3, #10
 8003154:	71fb      	strb	r3, [r7, #7]
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	2b09      	cmp	r3, #9
 800315a:	d8e7      	bhi.n	800312c <playAlarma+0xc>
	}

	__HAL_TIM_SET_AUTORELOAD(&htim4, 80);
 800315c:	4b07      	ldr	r3, [pc, #28]	; (800317c <playAlarma+0x5c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2250      	movs	r2, #80	; 0x50
 8003162:	62da      	str	r2, [r3, #44]	; 0x2c
 8003164:	4b05      	ldr	r3, [pc, #20]	; (800317c <playAlarma+0x5c>)
 8003166:	2250      	movs	r2, #80	; 0x50
 8003168:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 40);
 800316a:	4b04      	ldr	r3, [pc, #16]	; (800317c <playAlarma+0x5c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2228      	movs	r2, #40	; 0x28
 8003170:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20000ab4 	.word	0x20000ab4

08003180 <delay>:
	}
}


/*----------- Delay en Microsegundos -----------*/
void delay(uint16_t time){
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim6,0);
 800318a:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <delay+0x30>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2200      	movs	r2, #0
 8003190:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim6))<time);
 8003192:	bf00      	nop
 8003194:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <delay+0x30>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	429a      	cmp	r2, r3
 800319e:	d3f9      	bcc.n	8003194 <delay+0x14>
}
 80031a0:	bf00      	nop
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000cb0 	.word	0x20000cb0

080031b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031b4:	b5b0      	push	{r4, r5, r7, lr}
 80031b6:	b08c      	sub	sp, #48	; 0x30
 80031b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031ba:	f001 fefb 	bl	8004fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031be:	f000 fc01 	bl	80039c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031c2:	f001 f95d 	bl	8004480 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80031c6:	f001 f8dd 	bl	8004384 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80031ca:	f001 f92f 	bl	800442c <MX_USART6_UART_Init>
  MX_TIM5_Init();
 80031ce:	f000 ffa1 	bl	8004114 <MX_TIM5_Init>
  MX_TIM1_Init();
 80031d2:	f000 fd57 	bl	8003c84 <MX_TIM1_Init>
  MX_TIM4_Init();
 80031d6:	f000 ff27 	bl	8004028 <MX_TIM4_Init>
  MX_TIM2_Init();
 80031da:	f000 fe0b 	bl	8003df4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80031de:	f000 fe95 	bl	8003f0c <MX_TIM3_Init>
  MX_TIM8_Init();
 80031e2:	f001 f81b 	bl	800421c <MX_TIM8_Init>
  MX_TIM9_Init();
 80031e6:	f001 f869 	bl	80042bc <MX_TIM9_Init>
  MX_TIM6_Init();
 80031ea:	f000 ffe1 	bl	80041b0 <MX_TIM6_Init>
  MX_ADC1_Init();
 80031ee:	f000 fc53 	bl	8003a98 <MX_ADC1_Init>
  MX_ADC2_Init();
 80031f2:	f000 fca3 	bl	8003b3c <MX_ADC2_Init>
  MX_ADC3_Init();
 80031f6:	f000 fcf3 	bl	8003be0 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 80031fa:	f001 f8ed 	bl	80043d8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // LED RGB Gaming
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80031fe:	2100      	movs	r1, #0
 8003200:	482e      	ldr	r0, [pc, #184]	; (80032bc <main+0x108>)
 8003202:	f003 fc49 	bl	8006a98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003206:	2104      	movs	r1, #4
 8003208:	482c      	ldr	r0, [pc, #176]	; (80032bc <main+0x108>)
 800320a:	f003 fc45 	bl	8006a98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800320e:	2108      	movs	r1, #8
 8003210:	482a      	ldr	r0, [pc, #168]	; (80032bc <main+0x108>)
 8003212:	f003 fc41 	bl	8006a98 <HAL_TIM_PWM_Start>
  // Servo Parcela
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003216:	2100      	movs	r1, #0
 8003218:	4829      	ldr	r0, [pc, #164]	; (80032c0 <main+0x10c>)
 800321a:	f003 fc3d 	bl	8006a98 <HAL_TIM_PWM_Start>
  // Servo Garaje
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800321e:	2104      	movs	r1, #4
 8003220:	4827      	ldr	r0, [pc, #156]	; (80032c0 <main+0x10c>)
 8003222:	f003 fc39 	bl	8006a98 <HAL_TIM_PWM_Start>
  // Servo Tendedero
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8003226:	2108      	movs	r1, #8
 8003228:	4825      	ldr	r0, [pc, #148]	; (80032c0 <main+0x10c>)
 800322a:	f003 fc35 	bl	8006a98 <HAL_TIM_PWM_Start>
  // Servo Salón
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800322e:	210c      	movs	r1, #12
 8003230:	4824      	ldr	r0, [pc, #144]	; (80032c4 <main+0x110>)
 8003232:	f003 fc31 	bl	8006a98 <HAL_TIM_PWM_Start>
  // Servo Dormitorio
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003236:	2104      	movs	r1, #4
 8003238:	4822      	ldr	r0, [pc, #136]	; (80032c4 <main+0x110>)
 800323a:	f003 fc2d 	bl	8006a98 <HAL_TIM_PWM_Start>
  // Servo Oficina
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800323e:	2108      	movs	r1, #8
 8003240:	4820      	ldr	r0, [pc, #128]	; (80032c4 <main+0x110>)
 8003242:	f003 fc29 	bl	8006a98 <HAL_TIM_PWM_Start>
  // DC Salón
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8003246:	2100      	movs	r1, #0
 8003248:	481f      	ldr	r0, [pc, #124]	; (80032c8 <main+0x114>)
 800324a:	f003 fc25 	bl	8006a98 <HAL_TIM_PWM_Start>
  // Zumbador
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800324e:	2100      	movs	r1, #0
 8003250:	481e      	ldr	r0, [pc, #120]	; (80032cc <main+0x118>)
 8003252:	f003 fc21 	bl	8006a98 <HAL_TIM_PWM_Start>

  /*----------- Útil para Sensor DHT11/22 -----------*/
  HAL_TIM_Base_Start(&htim6);
 8003256:	481e      	ldr	r0, [pc, #120]	; (80032d0 <main+0x11c>)
 8003258:	f003 fb5c 	bl	8006914 <HAL_TIM_Base_Start>

  /*----------- Inicialización LDR & HW390 & Lluvia -----------*/
  HAL_ADC_Start(&hadc1); // LDR
 800325c:	481d      	ldr	r0, [pc, #116]	; (80032d4 <main+0x120>)
 800325e:	f001 ff83 	bl	8005168 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2); // HW-390
 8003262:	481d      	ldr	r0, [pc, #116]	; (80032d8 <main+0x124>)
 8003264:	f001 ff80 	bl	8005168 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3); // Lluvia
 8003268:	481c      	ldr	r0, [pc, #112]	; (80032dc <main+0x128>)
 800326a:	f001 ff7d 	bl	8005168 <HAL_ADC_Start>

  //__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
  ESP_Init("iPhone Carmela","pistacho");
 800326e:	491c      	ldr	r1, [pc, #112]	; (80032e0 <main+0x12c>)
 8003270:	481c      	ldr	r0, [pc, #112]	; (80032e4 <main+0x130>)
 8003272:	f7fd ff0b 	bl	800108c <ESP_Init>
  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	ESP_messageHandler();
 8003276:	f7fe f835 	bl	80012e4 <ESP_messageHandler>

		// TIMBRE VEHÍCULO
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) == 0){
 800327a:	2101      	movs	r1, #1
 800327c:	481a      	ldr	r0, [pc, #104]	; (80032e8 <main+0x134>)
 800327e:	f002 fe3b 	bl	8005ef8 <HAL_GPIO_ReadPin>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d148      	bne.n	800331a <main+0x166>

			int known = readLector();
 8003288:	f7ff f85c 	bl	8002344 <readLector>
 800328c:	62f8      	str	r0, [r7, #44]	; 0x2c
			if(known == 1){
 800328e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003290:	2b01      	cmp	r3, #1
 8003292:	d12f      	bne.n	80032f4 <main+0x140>
				char conocido[18]= "ABRIENDO PUERTA \n\n";
 8003294:	4b15      	ldr	r3, [pc, #84]	; (80032ec <main+0x138>)
 8003296:	f107 0418 	add.w	r4, r7, #24
 800329a:	461d      	mov	r5, r3
 800329c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800329e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032a0:	682b      	ldr	r3, [r5, #0]
 80032a2:	8023      	strh	r3, [r4, #0]
				HAL_UART_Transmit(&huart6, (uint8_t *) conocido, 18, HAL_MAX_DELAY);
 80032a4:	f107 0118 	add.w	r1, r7, #24
 80032a8:	f04f 33ff 	mov.w	r3, #4294967295
 80032ac:	2212      	movs	r2, #18
 80032ae:	4810      	ldr	r0, [pc, #64]	; (80032f0 <main+0x13c>)
 80032b0:	f004 fa6f 	bl	8007792 <HAL_UART_Transmit>

				actParcelaRFID();
 80032b4:	f7ff f9e6 	bl	8002684 <actParcelaRFID>
 80032b8:	e02f      	b.n	800331a <main+0x166>
 80032ba:	bf00      	nop
 80032bc:	20000cf8 	.word	0x20000cf8
 80032c0:	20000dd4 	.word	0x20000dd4
 80032c4:	20000bd0 	.word	0x20000bd0
 80032c8:	20000d40 	.word	0x20000d40
 80032cc:	20000ab4 	.word	0x20000ab4
 80032d0:	20000cb0 	.word	0x20000cb0
 80032d4:	20000c18 	.word	0x20000c18
 80032d8:	20000b40 	.word	0x20000b40
 80032dc:	20000c60 	.word	0x20000c60
 80032e0:	0800980c 	.word	0x0800980c
 80032e4:	08009818 	.word	0x08009818
 80032e8:	40021000 	.word	0x40021000
 80032ec:	08009828 	.word	0x08009828
 80032f0:	20000d90 	.word	0x20000d90
			}
			else if(known == 0){
 80032f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10f      	bne.n	800331a <main+0x166>
				char desconocido[18] = "LLAMANDO TIMBRE \n\n";
 80032fa:	4ba4      	ldr	r3, [pc, #656]	; (800358c <main+0x3d8>)
 80032fc:	1d3c      	adds	r4, r7, #4
 80032fe:	461d      	mov	r5, r3
 8003300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003304:	682b      	ldr	r3, [r5, #0]
 8003306:	8023      	strh	r3, [r4, #0]
				HAL_UART_Transmit(&huart6, (uint8_t *) desconocido, 18, HAL_MAX_DELAY);
 8003308:	1d39      	adds	r1, r7, #4
 800330a:	f04f 33ff 	mov.w	r3, #4294967295
 800330e:	2212      	movs	r2, #18
 8003310:	489f      	ldr	r0, [pc, #636]	; (8003590 <main+0x3dc>)
 8003312:	f004 fa3e 	bl	8007792 <HAL_UART_Transmit>

				playTimbre();
 8003316:	f7ff fecd 	bl	80030b4 <playTimbre>
			}
		}

		// TIMBRE PEATÓN
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){
 800331a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800331e:	489d      	ldr	r0, [pc, #628]	; (8003594 <main+0x3e0>)
 8003320:	f002 fdea 	bl	8005ef8 <HAL_GPIO_ReadPin>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <main+0x17a>
				playTimbre();
 800332a:	f7ff fec3 	bl	80030b4 <playTimbre>
		}

		// STOP ALARMA
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == 0){
 800332e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003332:	4898      	ldr	r0, [pc, #608]	; (8003594 <main+0x3e0>)
 8003334:	f002 fde0 	bl	8005ef8 <HAL_GPIO_ReadPin>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d103      	bne.n	8003346 <main+0x192>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 800333e:	4b96      	ldr	r3, [pc, #600]	; (8003598 <main+0x3e4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2200      	movs	r2, #0
 8003344:	635a      	str	r2, [r3, #52]	; 0x34
		}

		// ALARMA
		if (debouncer(&interior, S_Int_GPIO_Port, S_Int_Pin)){
 8003346:	2208      	movs	r2, #8
 8003348:	4994      	ldr	r1, [pc, #592]	; (800359c <main+0x3e8>)
 800334a:	4895      	ldr	r0, [pc, #596]	; (80035a0 <main+0x3ec>)
 800334c:	f7ff fe62 	bl	8003014 <debouncer>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d005      	beq.n	8003362 <main+0x1ae>
			if(vSeg[0] == '1') playAlarma();
 8003356:	4b93      	ldr	r3, [pc, #588]	; (80035a4 <main+0x3f0>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b31      	cmp	r3, #49	; 0x31
 800335c:	d101      	bne.n	8003362 <main+0x1ae>
 800335e:	f7ff fedf 	bl	8003120 <playAlarma>
		}
		if (debouncer(&exterior, S_Ext_GPIO_Port, S_Ext_Pin)){
 8003362:	2202      	movs	r2, #2
 8003364:	498d      	ldr	r1, [pc, #564]	; (800359c <main+0x3e8>)
 8003366:	4890      	ldr	r0, [pc, #576]	; (80035a8 <main+0x3f4>)
 8003368:	f7ff fe54 	bl	8003014 <debouncer>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d005      	beq.n	800337e <main+0x1ca>
			if(vSeg[1] == '1') playAlarma();
 8003372:	4b8c      	ldr	r3, [pc, #560]	; (80035a4 <main+0x3f0>)
 8003374:	785b      	ldrb	r3, [r3, #1]
 8003376:	2b31      	cmp	r3, #49	; 0x31
 8003378:	d101      	bne.n	800337e <main+0x1ca>
 800337a:	f7ff fed1 	bl	8003120 <playAlarma>
		}

		// PUERTA PARCELA (90)
		if(vVent[0]=='1' || vExt[4]=='1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 91);
 800337e:	4b8b      	ldr	r3, [pc, #556]	; (80035ac <main+0x3f8>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b31      	cmp	r3, #49	; 0x31
 8003384:	d003      	beq.n	800338e <main+0x1da>
 8003386:	4b8a      	ldr	r3, [pc, #552]	; (80035b0 <main+0x3fc>)
 8003388:	791b      	ldrb	r3, [r3, #4]
 800338a:	2b31      	cmp	r3, #49	; 0x31
 800338c:	d103      	bne.n	8003396 <main+0x1e2>
 800338e:	4b89      	ldr	r3, [pc, #548]	; (80035b4 <main+0x400>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	225b      	movs	r2, #91	; 0x5b
 8003394:	635a      	str	r2, [r3, #52]	; 0x34
		if(vVent[0]=='0' || vExt[4]=='0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89);
 8003396:	4b85      	ldr	r3, [pc, #532]	; (80035ac <main+0x3f8>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	2b30      	cmp	r3, #48	; 0x30
 800339c:	d003      	beq.n	80033a6 <main+0x1f2>
 800339e:	4b84      	ldr	r3, [pc, #528]	; (80035b0 <main+0x3fc>)
 80033a0:	791b      	ldrb	r3, [r3, #4]
 80033a2:	2b30      	cmp	r3, #48	; 0x30
 80033a4:	d103      	bne.n	80033ae <main+0x1fa>
 80033a6:	4b83      	ldr	r3, [pc, #524]	; (80035b4 <main+0x400>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2259      	movs	r2, #89	; 0x59
 80033ac:	635a      	str	r2, [r3, #52]	; 0x34

		// PUERTA GARAJE (90)
		if(vVent[1]=='1' || vGar[1] == '1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 92); // más rápido a 30
 80033ae:	4b7f      	ldr	r3, [pc, #508]	; (80035ac <main+0x3f8>)
 80033b0:	785b      	ldrb	r3, [r3, #1]
 80033b2:	2b31      	cmp	r3, #49	; 0x31
 80033b4:	d003      	beq.n	80033be <main+0x20a>
 80033b6:	4b80      	ldr	r3, [pc, #512]	; (80035b8 <main+0x404>)
 80033b8:	785b      	ldrb	r3, [r3, #1]
 80033ba:	2b31      	cmp	r3, #49	; 0x31
 80033bc:	d103      	bne.n	80033c6 <main+0x212>
 80033be:	4b7d      	ldr	r3, [pc, #500]	; (80035b4 <main+0x400>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	225c      	movs	r2, #92	; 0x5c
 80033c4:	639a      	str	r2, [r3, #56]	; 0x38
		if(vVent[1]=='0' || vGar[1] == '0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 89);
 80033c6:	4b79      	ldr	r3, [pc, #484]	; (80035ac <main+0x3f8>)
 80033c8:	785b      	ldrb	r3, [r3, #1]
 80033ca:	2b30      	cmp	r3, #48	; 0x30
 80033cc:	d003      	beq.n	80033d6 <main+0x222>
 80033ce:	4b7a      	ldr	r3, [pc, #488]	; (80035b8 <main+0x404>)
 80033d0:	785b      	ldrb	r3, [r3, #1]
 80033d2:	2b30      	cmp	r3, #48	; 0x30
 80033d4:	d103      	bne.n	80033de <main+0x22a>
 80033d6:	4b77      	ldr	r3, [pc, #476]	; (80035b4 <main+0x400>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2259      	movs	r2, #89	; 0x59
 80033dc:	639a      	str	r2, [r3, #56]	; 0x38

		// TOLDO TENDEDERO (90)
		if(vExt[0]=='1'){
 80033de:	4b74      	ldr	r3, [pc, #464]	; (80035b0 <main+0x3fc>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b31      	cmp	r3, #49	; 0x31
 80033e4:	d10e      	bne.n	8003404 <main+0x250>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 91);
 80033e6:	4b73      	ldr	r3, [pc, #460]	; (80035b4 <main+0x400>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	225b      	movs	r2, #91	; 0x5b
 80033ec:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 80033ee:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80033f2:	f001 fe51 	bl	8005098 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90);
 80033f6:	4b6f      	ldr	r3, [pc, #444]	; (80035b4 <main+0x400>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	225a      	movs	r2, #90	; 0x5a
 80033fc:	63da      	str	r2, [r3, #60]	; 0x3c
			toldo = 1;
 80033fe:	4b6f      	ldr	r3, [pc, #444]	; (80035bc <main+0x408>)
 8003400:	2201      	movs	r2, #1
 8003402:	601a      	str	r2, [r3, #0]
		}
		if(vExt[0]=='0'){
 8003404:	4b6a      	ldr	r3, [pc, #424]	; (80035b0 <main+0x3fc>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b30      	cmp	r3, #48	; 0x30
 800340a:	d10e      	bne.n	800342a <main+0x276>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 88);
 800340c:	4b69      	ldr	r3, [pc, #420]	; (80035b4 <main+0x400>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2258      	movs	r2, #88	; 0x58
 8003412:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8003414:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003418:	f001 fe3e 	bl	8005098 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90);
 800341c:	4b65      	ldr	r3, [pc, #404]	; (80035b4 <main+0x400>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	225a      	movs	r2, #90	; 0x5a
 8003422:	63da      	str	r2, [r3, #60]	; 0x3c
			toldo = 0;
 8003424:	4b65      	ldr	r3, [pc, #404]	; (80035bc <main+0x408>)
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
		}
		vExt[0]='x';
 800342a:	4b61      	ldr	r3, [pc, #388]	; (80035b0 <main+0x3fc>)
 800342c:	2278      	movs	r2, #120	; 0x78
 800342e:	701a      	strb	r2, [r3, #0]

		// VENTANA SALÓN (90)
		if(vVent[2]=='1' || vSal[5]=='1') {
 8003430:	4b5e      	ldr	r3, [pc, #376]	; (80035ac <main+0x3f8>)
 8003432:	789b      	ldrb	r3, [r3, #2]
 8003434:	2b31      	cmp	r3, #49	; 0x31
 8003436:	d003      	beq.n	8003440 <main+0x28c>
 8003438:	4b61      	ldr	r3, [pc, #388]	; (80035c0 <main+0x40c>)
 800343a:	795b      	ldrb	r3, [r3, #5]
 800343c:	2b31      	cmp	r3, #49	; 0x31
 800343e:	d10b      	bne.n	8003458 <main+0x2a4>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 91);
 8003440:	4b60      	ldr	r3, [pc, #384]	; (80035c4 <main+0x410>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	225b      	movs	r2, #91	; 0x5b
 8003446:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(3000);
 8003448:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800344c:	f001 fe24 	bl	8005098 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 90);
 8003450:	4b5c      	ldr	r3, [pc, #368]	; (80035c4 <main+0x410>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	225a      	movs	r2, #90	; 0x5a
 8003456:	641a      	str	r2, [r3, #64]	; 0x40
		}
		if(vVent[2]=='0'|| vSal[5]=='0') {
 8003458:	4b54      	ldr	r3, [pc, #336]	; (80035ac <main+0x3f8>)
 800345a:	789b      	ldrb	r3, [r3, #2]
 800345c:	2b30      	cmp	r3, #48	; 0x30
 800345e:	d003      	beq.n	8003468 <main+0x2b4>
 8003460:	4b57      	ldr	r3, [pc, #348]	; (80035c0 <main+0x40c>)
 8003462:	795b      	ldrb	r3, [r3, #5]
 8003464:	2b30      	cmp	r3, #48	; 0x30
 8003466:	d10b      	bne.n	8003480 <main+0x2cc>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 89);
 8003468:	4b56      	ldr	r3, [pc, #344]	; (80035c4 <main+0x410>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2259      	movs	r2, #89	; 0x59
 800346e:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(3000);
 8003470:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003474:	f001 fe10 	bl	8005098 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 90);
 8003478:	4b52      	ldr	r3, [pc, #328]	; (80035c4 <main+0x410>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	225a      	movs	r2, #90	; 0x5a
 800347e:	641a      	str	r2, [r3, #64]	; 0x40
		}
		vVent[2]='x';
 8003480:	4b4a      	ldr	r3, [pc, #296]	; (80035ac <main+0x3f8>)
 8003482:	2278      	movs	r2, #120	; 0x78
 8003484:	709a      	strb	r2, [r3, #2]
		vSal[5]='x';
 8003486:	4b4e      	ldr	r3, [pc, #312]	; (80035c0 <main+0x40c>)
 8003488:	2278      	movs	r2, #120	; 0x78
 800348a:	715a      	strb	r2, [r3, #5]

		// VENTANA DORMITORIO (90)
		if(vVent[3]=='1' || vDor[3]=='1') {
 800348c:	4b47      	ldr	r3, [pc, #284]	; (80035ac <main+0x3f8>)
 800348e:	78db      	ldrb	r3, [r3, #3]
 8003490:	2b31      	cmp	r3, #49	; 0x31
 8003492:	d003      	beq.n	800349c <main+0x2e8>
 8003494:	4b4c      	ldr	r3, [pc, #304]	; (80035c8 <main+0x414>)
 8003496:	78db      	ldrb	r3, [r3, #3]
 8003498:	2b31      	cmp	r3, #49	; 0x31
 800349a:	d10b      	bne.n	80034b4 <main+0x300>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 92);
 800349c:	4b49      	ldr	r3, [pc, #292]	; (80035c4 <main+0x410>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	225c      	movs	r2, #92	; 0x5c
 80034a2:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(3000);
 80034a4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80034a8:	f001 fdf6 	bl	8005098 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 90);
 80034ac:	4b45      	ldr	r3, [pc, #276]	; (80035c4 <main+0x410>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	225a      	movs	r2, #90	; 0x5a
 80034b2:	639a      	str	r2, [r3, #56]	; 0x38
		}
		if(vVent[3]=='0' || vDor[3]=='0') {
 80034b4:	4b3d      	ldr	r3, [pc, #244]	; (80035ac <main+0x3f8>)
 80034b6:	78db      	ldrb	r3, [r3, #3]
 80034b8:	2b30      	cmp	r3, #48	; 0x30
 80034ba:	d003      	beq.n	80034c4 <main+0x310>
 80034bc:	4b42      	ldr	r3, [pc, #264]	; (80035c8 <main+0x414>)
 80034be:	78db      	ldrb	r3, [r3, #3]
 80034c0:	2b30      	cmp	r3, #48	; 0x30
 80034c2:	d10b      	bne.n	80034dc <main+0x328>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 89);
 80034c4:	4b3f      	ldr	r3, [pc, #252]	; (80035c4 <main+0x410>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2259      	movs	r2, #89	; 0x59
 80034ca:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(3000);
 80034cc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80034d0:	f001 fde2 	bl	8005098 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 90);
 80034d4:	4b3b      	ldr	r3, [pc, #236]	; (80035c4 <main+0x410>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	225a      	movs	r2, #90	; 0x5a
 80034da:	639a      	str	r2, [r3, #56]	; 0x38
		}
		vVent[3]='x';
 80034dc:	4b33      	ldr	r3, [pc, #204]	; (80035ac <main+0x3f8>)
 80034de:	2278      	movs	r2, #120	; 0x78
 80034e0:	70da      	strb	r2, [r3, #3]
		vDor[3]='x';
 80034e2:	4b39      	ldr	r3, [pc, #228]	; (80035c8 <main+0x414>)
 80034e4:	2278      	movs	r2, #120	; 0x78
 80034e6:	70da      	strb	r2, [r3, #3]

		// VENTANA OFICINA (90)
		if(vVent[4]=='1' || vOfi[11]=='1') {
 80034e8:	4b30      	ldr	r3, [pc, #192]	; (80035ac <main+0x3f8>)
 80034ea:	791b      	ldrb	r3, [r3, #4]
 80034ec:	2b31      	cmp	r3, #49	; 0x31
 80034ee:	d003      	beq.n	80034f8 <main+0x344>
 80034f0:	4b36      	ldr	r3, [pc, #216]	; (80035cc <main+0x418>)
 80034f2:	7adb      	ldrb	r3, [r3, #11]
 80034f4:	2b31      	cmp	r3, #49	; 0x31
 80034f6:	d10b      	bne.n	8003510 <main+0x35c>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 91);
 80034f8:	4b32      	ldr	r3, [pc, #200]	; (80035c4 <main+0x410>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	225b      	movs	r2, #91	; 0x5b
 80034fe:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8003500:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003504:	f001 fdc8 	bl	8005098 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 90);
 8003508:	4b2e      	ldr	r3, [pc, #184]	; (80035c4 <main+0x410>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	225a      	movs	r2, #90	; 0x5a
 800350e:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		if(vVent[4]=='0' || vOfi[11]=='0') {
 8003510:	4b26      	ldr	r3, [pc, #152]	; (80035ac <main+0x3f8>)
 8003512:	791b      	ldrb	r3, [r3, #4]
 8003514:	2b30      	cmp	r3, #48	; 0x30
 8003516:	d003      	beq.n	8003520 <main+0x36c>
 8003518:	4b2c      	ldr	r3, [pc, #176]	; (80035cc <main+0x418>)
 800351a:	7adb      	ldrb	r3, [r3, #11]
 800351c:	2b30      	cmp	r3, #48	; 0x30
 800351e:	d10b      	bne.n	8003538 <main+0x384>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 88);
 8003520:	4b28      	ldr	r3, [pc, #160]	; (80035c4 <main+0x410>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2258      	movs	r2, #88	; 0x58
 8003526:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8003528:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800352c:	f001 fdb4 	bl	8005098 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 90);
 8003530:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <main+0x410>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	225a      	movs	r2, #90	; 0x5a
 8003536:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		vVent[4]='x';
 8003538:	4b1c      	ldr	r3, [pc, #112]	; (80035ac <main+0x3f8>)
 800353a:	2278      	movs	r2, #120	; 0x78
 800353c:	711a      	strb	r2, [r3, #4]
		vOfi[11]='x';
 800353e:	4b23      	ldr	r3, [pc, #140]	; (80035cc <main+0x418>)
 8003540:	2278      	movs	r2, #120	; 0x78
 8003542:	72da      	strb	r2, [r3, #11]

		// FINAL DE CARRERA PARCELA
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == 0){
 8003544:	2140      	movs	r1, #64	; 0x40
 8003546:	4815      	ldr	r0, [pc, #84]	; (800359c <main+0x3e8>)
 8003548:	f002 fcd6 	bl	8005ef8 <HAL_GPIO_ReadPin>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d14d      	bne.n	80035ee <main+0x43a>

			if (vVent[0]=='1' || vExt[4]=='1'){
 8003552:	4b16      	ldr	r3, [pc, #88]	; (80035ac <main+0x3f8>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b31      	cmp	r3, #49	; 0x31
 8003558:	d003      	beq.n	8003562 <main+0x3ae>
 800355a:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <main+0x3fc>)
 800355c:	791b      	ldrb	r3, [r3, #4]
 800355e:	2b31      	cmp	r3, #49	; 0x31
 8003560:	d107      	bne.n	8003572 <main+0x3be>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89); // S_Parcela
 8003562:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <main+0x400>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2259      	movs	r2, #89	; 0x59
 8003568:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(1000);
 800356a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800356e:	f001 fd93 	bl	8005098 <HAL_Delay>
			}
			if (vVent[0]=='0' || vExt[4]=='0'){
 8003572:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <main+0x3f8>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b30      	cmp	r3, #48	; 0x30
 8003578:	d003      	beq.n	8003582 <main+0x3ce>
 800357a:	4b0d      	ldr	r3, [pc, #52]	; (80035b0 <main+0x3fc>)
 800357c:	791b      	ldrb	r3, [r3, #4]
 800357e:	2b30      	cmp	r3, #48	; 0x30
 8003580:	d12b      	bne.n	80035da <main+0x426>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 91); // S_Parcela
 8003582:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <main+0x400>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	225b      	movs	r2, #91	; 0x5b
 8003588:	e022      	b.n	80035d0 <main+0x41c>
 800358a:	bf00      	nop
 800358c:	0800983c 	.word	0x0800983c
 8003590:	20000d90 	.word	0x20000d90
 8003594:	40020800 	.word	0x40020800
 8003598:	20000ab4 	.word	0x20000ab4
 800359c:	40021000 	.word	0x40021000
 80035a0:	200008b0 	.word	0x200008b0
 80035a4:	20000a58 	.word	0x20000a58
 80035a8:	200008b4 	.word	0x200008b4
 80035ac:	20000924 	.word	0x20000924
 80035b0:	20000930 	.word	0x20000930
 80035b4:	20000dd4 	.word	0x20000dd4
 80035b8:	20000974 	.word	0x20000974
 80035bc:	200008d0 	.word	0x200008d0
 80035c0:	20000a50 	.word	0x20000a50
 80035c4:	20000bd0 	.word	0x20000bd0
 80035c8:	20000914 	.word	0x20000914
 80035cc:	20000980 	.word	0x20000980
 80035d0:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(1000);
 80035d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035d6:	f001 fd5f 	bl	8005098 <HAL_Delay>
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 90); // S_Parcela
 80035da:	4b81      	ldr	r3, [pc, #516]	; (80037e0 <main+0x62c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	225a      	movs	r2, #90	; 0x5a
 80035e0:	635a      	str	r2, [r3, #52]	; 0x34
			vVent[0]='x'; // S_Parcela
 80035e2:	4b80      	ldr	r3, [pc, #512]	; (80037e4 <main+0x630>)
 80035e4:	2278      	movs	r2, #120	; 0x78
 80035e6:	701a      	strb	r2, [r3, #0]
			vExt[4]='x'; // S_Parcela
 80035e8:	4b7f      	ldr	r3, [pc, #508]	; (80037e8 <main+0x634>)
 80035ea:	2278      	movs	r2, #120	; 0x78
 80035ec:	711a      	strb	r2, [r3, #4]
		}

		// FINAL DE CARRERA GARAJE
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == 0){
 80035ee:	2110      	movs	r1, #16
 80035f0:	487e      	ldr	r0, [pc, #504]	; (80037ec <main+0x638>)
 80035f2:	f002 fc81 	bl	8005ef8 <HAL_GPIO_ReadPin>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d129      	bne.n	8003650 <main+0x49c>

			if (vVent[1]=='1' || vGar[1]=='1'){
 80035fc:	4b79      	ldr	r3, [pc, #484]	; (80037e4 <main+0x630>)
 80035fe:	785b      	ldrb	r3, [r3, #1]
 8003600:	2b31      	cmp	r3, #49	; 0x31
 8003602:	d003      	beq.n	800360c <main+0x458>
 8003604:	4b7a      	ldr	r3, [pc, #488]	; (80037f0 <main+0x63c>)
 8003606:	785b      	ldrb	r3, [r3, #1]
 8003608:	2b31      	cmp	r3, #49	; 0x31
 800360a:	d107      	bne.n	800361c <main+0x468>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 89); // S_Garaje
 800360c:	4b74      	ldr	r3, [pc, #464]	; (80037e0 <main+0x62c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2259      	movs	r2, #89	; 0x59
 8003612:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(1000);
 8003614:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003618:	f001 fd3e 	bl	8005098 <HAL_Delay>
			}
			if (vVent[1]=='0' || vGar[1]=='0'){
 800361c:	4b71      	ldr	r3, [pc, #452]	; (80037e4 <main+0x630>)
 800361e:	785b      	ldrb	r3, [r3, #1]
 8003620:	2b30      	cmp	r3, #48	; 0x30
 8003622:	d003      	beq.n	800362c <main+0x478>
 8003624:	4b72      	ldr	r3, [pc, #456]	; (80037f0 <main+0x63c>)
 8003626:	785b      	ldrb	r3, [r3, #1]
 8003628:	2b30      	cmp	r3, #48	; 0x30
 800362a:	d107      	bne.n	800363c <main+0x488>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 92); // S_Garaje
 800362c:	4b6c      	ldr	r3, [pc, #432]	; (80037e0 <main+0x62c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	225c      	movs	r2, #92	; 0x5c
 8003632:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(1000);
 8003634:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003638:	f001 fd2e 	bl	8005098 <HAL_Delay>
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 90); // S_Garaje
 800363c:	4b68      	ldr	r3, [pc, #416]	; (80037e0 <main+0x62c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	225a      	movs	r2, #90	; 0x5a
 8003642:	639a      	str	r2, [r3, #56]	; 0x38
			vVent[1]='x'; // S_Garaje
 8003644:	4b67      	ldr	r3, [pc, #412]	; (80037e4 <main+0x630>)
 8003646:	2278      	movs	r2, #120	; 0x78
 8003648:	705a      	strb	r2, [r3, #1]
			vGar[1]='x'; // S_Garaje
 800364a:	4b69      	ldr	r3, [pc, #420]	; (80037f0 <main+0x63c>)
 800364c:	2278      	movs	r2, #120	; 0x78
 800364e:	705a      	strb	r2, [r3, #1]
		}

		// VENTILADOR SALÓN
		if(vTemp[0]=='1') {
 8003650:	4b68      	ldr	r3, [pc, #416]	; (80037f4 <main+0x640>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b31      	cmp	r3, #49	; 0x31
 8003656:	d10e      	bne.n	8003676 <main+0x4c2>
			__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 1000);
 8003658:	4b67      	ldr	r3, [pc, #412]	; (80037f8 <main+0x644>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003660:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
 8003662:	2201      	movs	r2, #1
 8003664:	2110      	movs	r1, #16
 8003666:	4865      	ldr	r0, [pc, #404]	; (80037fc <main+0x648>)
 8003668:	f002 fc5e 	bl	8005f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,GPIO_PIN_RESET);
 800366c:	2200      	movs	r2, #0
 800366e:	2120      	movs	r1, #32
 8003670:	4862      	ldr	r0, [pc, #392]	; (80037fc <main+0x648>)
 8003672:	f002 fc59 	bl	8005f28 <HAL_GPIO_WritePin>
		}
		if(vTemp[0]=='0') {
 8003676:	4b5f      	ldr	r3, [pc, #380]	; (80037f4 <main+0x640>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b30      	cmp	r3, #48	; 0x30
 800367c:	d10d      	bne.n	800369a <main+0x4e6>
			__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 800367e:	4b5e      	ldr	r3, [pc, #376]	; (80037f8 <main+0x644>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2200      	movs	r2, #0
 8003684:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_RESET);
 8003686:	2200      	movs	r2, #0
 8003688:	2110      	movs	r1, #16
 800368a:	485c      	ldr	r0, [pc, #368]	; (80037fc <main+0x648>)
 800368c:	f002 fc4c 	bl	8005f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,GPIO_PIN_RESET);
 8003690:	2200      	movs	r2, #0
 8003692:	2120      	movs	r1, #32
 8003694:	4859      	ldr	r0, [pc, #356]	; (80037fc <main+0x648>)
 8003696:	f002 fc47 	bl	8005f28 <HAL_GPIO_WritePin>
		}

		// VALORES DE CONFIGURACIÓN
		v_enc = temp_value(vAj[0], vAj[1], vAj[2]);
 800369a:	4b59      	ldr	r3, [pc, #356]	; (8003800 <main+0x64c>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	4a58      	ldr	r2, [pc, #352]	; (8003800 <main+0x64c>)
 80036a0:	7851      	ldrb	r1, [r2, #1]
 80036a2:	4a57      	ldr	r2, [pc, #348]	; (8003800 <main+0x64c>)
 80036a4:	7892      	ldrb	r2, [r2, #2]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff f83e 	bl	8002728 <temp_value>
 80036ac:	eef0 7a40 	vmov.f32	s15, s0
 80036b0:	4b54      	ldr	r3, [pc, #336]	; (8003804 <main+0x650>)
 80036b2:	edc3 7a00 	vstr	s15, [r3]
		v_apa = temp_value(vAj[3], vAj[4], vAj[5]);
 80036b6:	4b52      	ldr	r3, [pc, #328]	; (8003800 <main+0x64c>)
 80036b8:	78db      	ldrb	r3, [r3, #3]
 80036ba:	4a51      	ldr	r2, [pc, #324]	; (8003800 <main+0x64c>)
 80036bc:	7911      	ldrb	r1, [r2, #4]
 80036be:	4a50      	ldr	r2, [pc, #320]	; (8003800 <main+0x64c>)
 80036c0:	7952      	ldrb	r2, [r2, #5]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff f830 	bl	8002728 <temp_value>
 80036c8:	eef0 7a40 	vmov.f32	s15, s0
 80036cc:	4b4e      	ldr	r3, [pc, #312]	; (8003808 <main+0x654>)
 80036ce:	edc3 7a00 	vstr	s15, [r3]
		c_enc = temp_value(vAj[6], vAj[7], vAj[8]);
 80036d2:	4b4b      	ldr	r3, [pc, #300]	; (8003800 <main+0x64c>)
 80036d4:	799b      	ldrb	r3, [r3, #6]
 80036d6:	4a4a      	ldr	r2, [pc, #296]	; (8003800 <main+0x64c>)
 80036d8:	79d1      	ldrb	r1, [r2, #7]
 80036da:	4a49      	ldr	r2, [pc, #292]	; (8003800 <main+0x64c>)
 80036dc:	7a12      	ldrb	r2, [r2, #8]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff f822 	bl	8002728 <temp_value>
 80036e4:	eef0 7a40 	vmov.f32	s15, s0
 80036e8:	4b48      	ldr	r3, [pc, #288]	; (800380c <main+0x658>)
 80036ea:	edc3 7a00 	vstr	s15, [r3]
		c_apa = temp_value(vAj[9], vAj[10], vAj[11]);
 80036ee:	4b44      	ldr	r3, [pc, #272]	; (8003800 <main+0x64c>)
 80036f0:	7a5b      	ldrb	r3, [r3, #9]
 80036f2:	4a43      	ldr	r2, [pc, #268]	; (8003800 <main+0x64c>)
 80036f4:	7a91      	ldrb	r1, [r2, #10]
 80036f6:	4a42      	ldr	r2, [pc, #264]	; (8003800 <main+0x64c>)
 80036f8:	7ad2      	ldrb	r2, [r2, #11]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff f814 	bl	8002728 <temp_value>
 8003700:	eef0 7a40 	vmov.f32	s15, s0
 8003704:	4b42      	ldr	r3, [pc, #264]	; (8003810 <main+0x65c>)
 8003706:	edc3 7a00 	vstr	s15, [r3]

		rh_min = rh_value(vAj[12], vAj[13]);
 800370a:	4b3d      	ldr	r3, [pc, #244]	; (8003800 <main+0x64c>)
 800370c:	7b1b      	ldrb	r3, [r3, #12]
 800370e:	4a3c      	ldr	r2, [pc, #240]	; (8003800 <main+0x64c>)
 8003710:	7b52      	ldrb	r2, [r2, #13]
 8003712:	4611      	mov	r1, r2
 8003714:	4618      	mov	r0, r3
 8003716:	f7fe ff2e 	bl	8002576 <rh_value>
 800371a:	4603      	mov	r3, r0
 800371c:	4a3d      	ldr	r2, [pc, #244]	; (8003814 <main+0x660>)
 800371e:	6013      	str	r3, [r2, #0]
		rh_max = rh_value(vAj[14], vAj[15]);
 8003720:	4b37      	ldr	r3, [pc, #220]	; (8003800 <main+0x64c>)
 8003722:	7b9b      	ldrb	r3, [r3, #14]
 8003724:	4a36      	ldr	r2, [pc, #216]	; (8003800 <main+0x64c>)
 8003726:	7bd2      	ldrb	r2, [r2, #15]
 8003728:	4611      	mov	r1, r2
 800372a:	4618      	mov	r0, r3
 800372c:	f7fe ff23 	bl	8002576 <rh_value>
 8003730:	4603      	mov	r3, r0
 8003732:	4a39      	ldr	r2, [pc, #228]	; (8003818 <main+0x664>)
 8003734:	6013      	str	r3, [r2, #0]


		/*----------- Lectura Sensores -----------*/

		// LDR
		if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8003736:	f04f 31ff 	mov.w	r1, #4294967295
 800373a:	4838      	ldr	r0, [pc, #224]	; (800381c <main+0x668>)
 800373c:	f001 fde6 	bl	800530c <HAL_ADC_PollForConversion>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <main+0x5a0>
			LDR_valor = HAL_ADC_GetValue(&hadc1);
 8003746:	4835      	ldr	r0, [pc, #212]	; (800381c <main+0x668>)
 8003748:	f001 fe6b 	bl	8005422 <HAL_ADC_GetValue>
 800374c:	4603      	mov	r3, r0
 800374e:	b29a      	uxth	r2, r3
 8003750:	4b33      	ldr	r3, [pc, #204]	; (8003820 <main+0x66c>)
 8003752:	801a      	strh	r2, [r3, #0]

		ldr(LDR_valor);
 8003754:	4b32      	ldr	r3, [pc, #200]	; (8003820 <main+0x66c>)
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7fe fd95 	bl	8002288 <ldr>

		// Lluvia
		if(HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY) == HAL_OK)
 800375e:	f04f 31ff 	mov.w	r1, #4294967295
 8003762:	4830      	ldr	r0, [pc, #192]	; (8003824 <main+0x670>)
 8003764:	f001 fdd2 	bl	800530c <HAL_ADC_PollForConversion>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d106      	bne.n	800377c <main+0x5c8>
			Lluvia_lectura = HAL_ADC_GetValue(&hadc3);
 800376e:	482d      	ldr	r0, [pc, #180]	; (8003824 <main+0x670>)
 8003770:	f001 fe57 	bl	8005422 <HAL_ADC_GetValue>
 8003774:	4603      	mov	r3, r0
 8003776:	b29a      	uxth	r2, r3
 8003778:	4b2b      	ldr	r3, [pc, #172]	; (8003828 <main+0x674>)
 800377a:	801a      	strh	r2, [r3, #0]

		Lluvia_real = 100 - ((100*Lluvia_lectura)/255);
 800377c:	4b2a      	ldr	r3, [pc, #168]	; (8003828 <main+0x674>)
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	461a      	mov	r2, r3
 8003782:	2364      	movs	r3, #100	; 0x64
 8003784:	fb03 f302 	mul.w	r3, r3, r2
 8003788:	4a28      	ldr	r2, [pc, #160]	; (800382c <main+0x678>)
 800378a:	fb82 1203 	smull	r1, r2, r2, r3
 800378e:	441a      	add	r2, r3
 8003790:	11d2      	asrs	r2, r2, #7
 8003792:	17db      	asrs	r3, r3, #31
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	b29b      	uxth	r3, r3
 8003798:	3364      	adds	r3, #100	; 0x64
 800379a:	b29a      	uxth	r2, r3
 800379c:	4b24      	ldr	r3, [pc, #144]	; (8003830 <main+0x67c>)
 800379e:	801a      	strh	r2, [r3, #0]

		if(vExt[5] == '1'){
 80037a0:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <main+0x634>)
 80037a2:	795b      	ldrb	r3, [r3, #5]
 80037a4:	2b31      	cmp	r3, #49	; 0x31
 80037a6:	d165      	bne.n	8003874 <main+0x6c0>
			// Si hay ropa tendida y llueve (con tendedero cerrado)
			if (Lluvia_real>5 && vExt[6] == '1' && toldo == 0){
 80037a8:	4b21      	ldr	r3, [pc, #132]	; (8003830 <main+0x67c>)
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	2b05      	cmp	r3, #5
 80037ae:	d943      	bls.n	8003838 <main+0x684>
 80037b0:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <main+0x634>)
 80037b2:	799b      	ldrb	r3, [r3, #6]
 80037b4:	2b31      	cmp	r3, #49	; 0x31
 80037b6:	d13f      	bne.n	8003838 <main+0x684>
 80037b8:	4b1e      	ldr	r3, [pc, #120]	; (8003834 <main+0x680>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d13b      	bne.n	8003838 <main+0x684>

				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 91); // Abrir tendedero
 80037c0:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <main+0x62c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	225b      	movs	r2, #91	; 0x5b
 80037c6:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_Delay(3000);
 80037c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80037cc:	f001 fc64 	bl	8005098 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90);
 80037d0:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <main+0x62c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	225a      	movs	r2, #90	; 0x5a
 80037d6:	63da      	str	r2, [r3, #60]	; 0x3c
				toldo = 1;
 80037d8:	4b16      	ldr	r3, [pc, #88]	; (8003834 <main+0x680>)
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	e046      	b.n	800386e <main+0x6ba>
 80037e0:	20000dd4 	.word	0x20000dd4
 80037e4:	20000924 	.word	0x20000924
 80037e8:	20000930 	.word	0x20000930
 80037ec:	40021000 	.word	0x40021000
 80037f0:	20000974 	.word	0x20000974
 80037f4:	20000978 	.word	0x20000978
 80037f8:	20000d40 	.word	0x20000d40
 80037fc:	40020800 	.word	0x40020800
 8003800:	200009d0 	.word	0x200009d0
 8003804:	200008b8 	.word	0x200008b8
 8003808:	200008bc 	.word	0x200008bc
 800380c:	200008c0 	.word	0x200008c0
 8003810:	200008c4 	.word	0x200008c4
 8003814:	200008c8 	.word	0x200008c8
 8003818:	200008cc 	.word	0x200008cc
 800381c:	20000c18 	.word	0x20000c18
 8003820:	200008d4 	.word	0x200008d4
 8003824:	20000c60 	.word	0x20000c60
 8003828:	200008da 	.word	0x200008da
 800382c:	80808081 	.word	0x80808081
 8003830:	200008dc 	.word	0x200008dc
 8003834:	200008d0 	.word	0x200008d0

			// Si hay ropa tendida y llueve (con tendedero abierto)
			// Si no hay ropa tendida y llueve (con tendedero cerrado)

			// Si no hay ropa tendida y llueve (con tendedero abierto)
			else if (Lluvia_real>5 && vExt[6] == '0' && toldo == 1){
 8003838:	4b4f      	ldr	r3, [pc, #316]	; (8003978 <main+0x7c4>)
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	2b05      	cmp	r3, #5
 800383e:	d916      	bls.n	800386e <main+0x6ba>
 8003840:	4b4e      	ldr	r3, [pc, #312]	; (800397c <main+0x7c8>)
 8003842:	799b      	ldrb	r3, [r3, #6]
 8003844:	2b30      	cmp	r3, #48	; 0x30
 8003846:	d112      	bne.n	800386e <main+0x6ba>
 8003848:	4b4d      	ldr	r3, [pc, #308]	; (8003980 <main+0x7cc>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d10e      	bne.n	800386e <main+0x6ba>

				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 88); // Cerrar tendedero
 8003850:	4b4c      	ldr	r3, [pc, #304]	; (8003984 <main+0x7d0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2258      	movs	r2, #88	; 0x58
 8003856:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_Delay(3000);
 8003858:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800385c:	f001 fc1c 	bl	8005098 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90);
 8003860:	4b48      	ldr	r3, [pc, #288]	; (8003984 <main+0x7d0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	225a      	movs	r2, #90	; 0x5a
 8003866:	63da      	str	r2, [r3, #60]	; 0x3c
				toldo = 0;
 8003868:	4b45      	ldr	r3, [pc, #276]	; (8003980 <main+0x7cc>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
			}

			// Si hay ropa tendida y no llueve (da igual el tendedero)
			// Si hay no hay ropa tendida y no llueve (da igual el tendedero)

			vExt[0]='x';
 800386e:	4b43      	ldr	r3, [pc, #268]	; (800397c <main+0x7c8>)
 8003870:	2278      	movs	r2, #120	; 0x78
 8003872:	701a      	strb	r2, [r3, #0]
		}

		// HW-390
		if(HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK)
 8003874:	f04f 31ff 	mov.w	r1, #4294967295
 8003878:	4843      	ldr	r0, [pc, #268]	; (8003988 <main+0x7d4>)
 800387a:	f001 fd47 	bl	800530c <HAL_ADC_PollForConversion>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d106      	bne.n	8003892 <main+0x6de>
			Higro_lectura = HAL_ADC_GetValue(&hadc2);
 8003884:	4840      	ldr	r0, [pc, #256]	; (8003988 <main+0x7d4>)
 8003886:	f001 fdcc 	bl	8005422 <HAL_ADC_GetValue>
 800388a:	4603      	mov	r3, r0
 800388c:	b29a      	uxth	r2, r3
 800388e:	4b3f      	ldr	r3, [pc, #252]	; (800398c <main+0x7d8>)
 8003890:	801a      	strh	r2, [r3, #0]

		Higro_real = 100 - ((100*Higro_lectura)/255);
 8003892:	4b3e      	ldr	r3, [pc, #248]	; (800398c <main+0x7d8>)
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	2364      	movs	r3, #100	; 0x64
 800389a:	fb03 f302 	mul.w	r3, r3, r2
 800389e:	4a3c      	ldr	r2, [pc, #240]	; (8003990 <main+0x7dc>)
 80038a0:	fb82 1203 	smull	r1, r2, r2, r3
 80038a4:	441a      	add	r2, r3
 80038a6:	11d2      	asrs	r2, r2, #7
 80038a8:	17db      	asrs	r3, r3, #31
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3364      	adds	r3, #100	; 0x64
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	4b38      	ldr	r3, [pc, #224]	; (8003994 <main+0x7e0>)
 80038b4:	801a      	strh	r2, [r3, #0]
			}
			else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET); // Riego
		}*/

		//DHT22
		if(readDHT == 1){
 80038b6:	4b38      	ldr	r3, [pc, #224]	; (8003998 <main+0x7e4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d122      	bne.n	8003904 <main+0x750>

			// Exterior
			DHT22_getData(&DHT22_ext);
 80038be:	4837      	ldr	r0, [pc, #220]	; (800399c <main+0x7e8>)
 80038c0:	f7fd fb56 	bl	8000f70 <DHT22_getData>
		  	TempAireExt = DHT22_ext.Temperature;
 80038c4:	4b35      	ldr	r3, [pc, #212]	; (800399c <main+0x7e8>)
 80038c6:	edd3 7a00 	vldr	s15, [r3]
 80038ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038ce:	ee17 2a90 	vmov	r2, s15
 80038d2:	4b33      	ldr	r3, [pc, #204]	; (80039a0 <main+0x7ec>)
 80038d4:	601a      	str	r2, [r3, #0]
		  	HumeAireExt = DHT22_ext.Humidity;
 80038d6:	4b31      	ldr	r3, [pc, #196]	; (800399c <main+0x7e8>)
 80038d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80038dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038e0:	ee17 2a90 	vmov	r2, s15
 80038e4:	4b2f      	ldr	r3, [pc, #188]	; (80039a4 <main+0x7f0>)
 80038e6:	601a      	str	r2, [r3, #0]

		  	// Interior
		  	DHT22_getData(&DHT22_int);
 80038e8:	482f      	ldr	r0, [pc, #188]	; (80039a8 <main+0x7f4>)
 80038ea:	f7fd fb41 	bl	8000f70 <DHT22_getData>
		  	TempAireInt = DHT22_int.Temperature;
 80038ee:	4b2e      	ldr	r3, [pc, #184]	; (80039a8 <main+0x7f4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a2e      	ldr	r2, [pc, #184]	; (80039ac <main+0x7f8>)
 80038f4:	6013      	str	r3, [r2, #0]
		  	HumeAireInt = DHT22_int.Humidity;
 80038f6:	4b2c      	ldr	r3, [pc, #176]	; (80039a8 <main+0x7f4>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	4a2d      	ldr	r2, [pc, #180]	; (80039b0 <main+0x7fc>)
 80038fc:	6013      	str	r3, [r2, #0]

		  	readDHT = 0;
 80038fe:	4b26      	ldr	r3, [pc, #152]	; (8003998 <main+0x7e4>)
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
		}

		if(vTemp[4] == '1'){
 8003904:	4b2b      	ldr	r3, [pc, #172]	; (80039b4 <main+0x800>)
 8003906:	791b      	ldrb	r3, [r3, #4]
 8003908:	2b31      	cmp	r3, #49	; 0x31
 800390a:	f47f acb4 	bne.w	8003276 <main+0xc2>
				HAL_GPIO_WritePin(GPIOX, GPIO_PIN_XX, SET); // Ventilador Salón
			}
			else HAL_GPIO_WritePin(GPIOX, GPIO_PIN_X, RESET); // Ventilador Salón*/

			// Si la calefacción está apagada y no llega al mínimo o está encendida y no llega al máximo
			if (((!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) && (TempAireInt<c_enc)) || ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)) && (TempAireInt<c_apa))){
 800390e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003912:	4829      	ldr	r0, [pc, #164]	; (80039b8 <main+0x804>)
 8003914:	f002 faf0 	bl	8005ef8 <HAL_GPIO_ReadPin>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10a      	bne.n	8003934 <main+0x780>
 800391e:	4b23      	ldr	r3, [pc, #140]	; (80039ac <main+0x7f8>)
 8003920:	ed93 7a00 	vldr	s14, [r3]
 8003924:	4b25      	ldr	r3, [pc, #148]	; (80039bc <main+0x808>)
 8003926:	edd3 7a00 	vldr	s15, [r3]
 800392a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800392e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003932:	d412      	bmi.n	800395a <main+0x7a6>
 8003934:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003938:	481f      	ldr	r0, [pc, #124]	; (80039b8 <main+0x804>)
 800393a:	f002 fadd 	bl	8005ef8 <HAL_GPIO_ReadPin>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d011      	beq.n	8003968 <main+0x7b4>
 8003944:	4b19      	ldr	r3, [pc, #100]	; (80039ac <main+0x7f8>)
 8003946:	ed93 7a00 	vldr	s14, [r3]
 800394a:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <main+0x80c>)
 800394c:	edd3 7a00 	vldr	s15, [r3]
 8003950:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003958:	d506      	bpl.n	8003968 <main+0x7b4>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET); // Calefacción
 800395a:	2201      	movs	r2, #1
 800395c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003960:	4815      	ldr	r0, [pc, #84]	; (80039b8 <main+0x804>)
 8003962:	f002 fae1 	bl	8005f28 <HAL_GPIO_WritePin>
 8003966:	e005      	b.n	8003974 <main+0x7c0>
			}
			else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET); // Calefacción
 8003968:	2200      	movs	r2, #0
 800396a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800396e:	4812      	ldr	r0, [pc, #72]	; (80039b8 <main+0x804>)
 8003970:	f002 fada 	bl	8005f28 <HAL_GPIO_WritePin>
	  	ESP_messageHandler();
 8003974:	e47f      	b.n	8003276 <main+0xc2>
 8003976:	bf00      	nop
 8003978:	200008dc 	.word	0x200008dc
 800397c:	20000930 	.word	0x20000930
 8003980:	200008d0 	.word	0x200008d0
 8003984:	20000dd4 	.word	0x20000dd4
 8003988:	20000b40 	.word	0x20000b40
 800398c:	200008d6 	.word	0x200008d6
 8003990:	80808081 	.word	0x80808081
 8003994:	200008d8 	.word	0x200008d8
 8003998:	200009c0 	.word	0x200009c0
 800399c:	20000ca8 	.word	0x20000ca8
 80039a0:	200008e0 	.word	0x200008e0
 80039a4:	200008e4 	.word	0x200008e4
 80039a8:	20000d88 	.word	0x20000d88
 80039ac:	200008e8 	.word	0x200008e8
 80039b0:	200008ec 	.word	0x200008ec
 80039b4:	20000978 	.word	0x20000978
 80039b8:	40020400 	.word	0x40020400
 80039bc:	200008c0 	.word	0x200008c0
 80039c0:	200008c4 	.word	0x200008c4

080039c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b094      	sub	sp, #80	; 0x50
 80039c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039ca:	f107 0320 	add.w	r3, r7, #32
 80039ce:	2230      	movs	r2, #48	; 0x30
 80039d0:	2100      	movs	r1, #0
 80039d2:	4618      	mov	r0, r3
 80039d4:	f004 fec4 	bl	8008760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039d8:	f107 030c 	add.w	r3, r7, #12
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	605a      	str	r2, [r3, #4]
 80039e2:	609a      	str	r2, [r3, #8]
 80039e4:	60da      	str	r2, [r3, #12]
 80039e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80039e8:	2300      	movs	r3, #0
 80039ea:	60bb      	str	r3, [r7, #8]
 80039ec:	4b28      	ldr	r3, [pc, #160]	; (8003a90 <SystemClock_Config+0xcc>)
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	4a27      	ldr	r2, [pc, #156]	; (8003a90 <SystemClock_Config+0xcc>)
 80039f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f6:	6413      	str	r3, [r2, #64]	; 0x40
 80039f8:	4b25      	ldr	r3, [pc, #148]	; (8003a90 <SystemClock_Config+0xcc>)
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a04:	2300      	movs	r3, #0
 8003a06:	607b      	str	r3, [r7, #4]
 8003a08:	4b22      	ldr	r3, [pc, #136]	; (8003a94 <SystemClock_Config+0xd0>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a21      	ldr	r2, [pc, #132]	; (8003a94 <SystemClock_Config+0xd0>)
 8003a0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	4b1f      	ldr	r3, [pc, #124]	; (8003a94 <SystemClock_Config+0xd0>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a1c:	607b      	str	r3, [r7, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a20:	2301      	movs	r3, #1
 8003a22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003a34:	2304      	movs	r3, #4
 8003a36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8003a38:	2332      	movs	r3, #50	; 0x32
 8003a3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003a40:	2307      	movs	r3, #7
 8003a42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a44:	f107 0320 	add.w	r3, r7, #32
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f002 fa9f 	bl	8005f8c <HAL_RCC_OscConfig>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003a54:	f000 fe48 	bl	80046e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a58:	230f      	movs	r3, #15
 8003a5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003a70:	f107 030c 	add.w	r3, r7, #12
 8003a74:	2101      	movs	r1, #1
 8003a76:	4618      	mov	r0, r3
 8003a78:	f002 fd00 	bl	800647c <HAL_RCC_ClockConfig>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003a82:	f000 fe31 	bl	80046e8 <Error_Handler>
  }
}
 8003a86:	bf00      	nop
 8003a88:	3750      	adds	r7, #80	; 0x50
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40023800 	.word	0x40023800
 8003a94:	40007000 	.word	0x40007000

08003a98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003a9e:	463b      	mov	r3, r7
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	605a      	str	r2, [r3, #4]
 8003aa6:	609a      	str	r2, [r3, #8]
 8003aa8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003aaa:	4b21      	ldr	r3, [pc, #132]	; (8003b30 <MX_ADC1_Init+0x98>)
 8003aac:	4a21      	ldr	r2, [pc, #132]	; (8003b34 <MX_ADC1_Init+0x9c>)
 8003aae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003ab0:	4b1f      	ldr	r3, [pc, #124]	; (8003b30 <MX_ADC1_Init+0x98>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8003ab6:	4b1e      	ldr	r3, [pc, #120]	; (8003b30 <MX_ADC1_Init+0x98>)
 8003ab8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003abc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003abe:	4b1c      	ldr	r3, [pc, #112]	; (8003b30 <MX_ADC1_Init+0x98>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003ac4:	4b1a      	ldr	r3, [pc, #104]	; (8003b30 <MX_ADC1_Init+0x98>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003aca:	4b19      	ldr	r3, [pc, #100]	; (8003b30 <MX_ADC1_Init+0x98>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ad2:	4b17      	ldr	r3, [pc, #92]	; (8003b30 <MX_ADC1_Init+0x98>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ad8:	4b15      	ldr	r3, [pc, #84]	; (8003b30 <MX_ADC1_Init+0x98>)
 8003ada:	4a17      	ldr	r2, [pc, #92]	; (8003b38 <MX_ADC1_Init+0xa0>)
 8003adc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ade:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <MX_ADC1_Init+0x98>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003ae4:	4b12      	ldr	r3, [pc, #72]	; (8003b30 <MX_ADC1_Init+0x98>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003aea:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <MX_ADC1_Init+0x98>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003af2:	4b0f      	ldr	r3, [pc, #60]	; (8003b30 <MX_ADC1_Init+0x98>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003af8:	480d      	ldr	r0, [pc, #52]	; (8003b30 <MX_ADC1_Init+0x98>)
 8003afa:	f001 faf1 	bl	80050e0 <HAL_ADC_Init>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003b04:	f000 fdf0 	bl	80046e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003b08:	2304      	movs	r3, #4
 8003b0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003b10:	2307      	movs	r3, #7
 8003b12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b14:	463b      	mov	r3, r7
 8003b16:	4619      	mov	r1, r3
 8003b18:	4805      	ldr	r0, [pc, #20]	; (8003b30 <MX_ADC1_Init+0x98>)
 8003b1a:	f001 fc8f 	bl	800543c <HAL_ADC_ConfigChannel>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003b24:	f000 fde0 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003b28:	bf00      	nop
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20000c18 	.word	0x20000c18
 8003b34:	40012000 	.word	0x40012000
 8003b38:	0f000001 	.word	0x0f000001

08003b3c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003b42:	463b      	mov	r3, r7
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	605a      	str	r2, [r3, #4]
 8003b4a:	609a      	str	r2, [r3, #8]
 8003b4c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003b4e:	4b21      	ldr	r3, [pc, #132]	; (8003bd4 <MX_ADC2_Init+0x98>)
 8003b50:	4a21      	ldr	r2, [pc, #132]	; (8003bd8 <MX_ADC2_Init+0x9c>)
 8003b52:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003b54:	4b1f      	ldr	r3, [pc, #124]	; (8003bd4 <MX_ADC2_Init+0x98>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8003b5a:	4b1e      	ldr	r3, [pc, #120]	; (8003bd4 <MX_ADC2_Init+0x98>)
 8003b5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b60:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8003b62:	4b1c      	ldr	r3, [pc, #112]	; (8003bd4 <MX_ADC2_Init+0x98>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003b68:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <MX_ADC2_Init+0x98>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003b6e:	4b19      	ldr	r3, [pc, #100]	; (8003bd4 <MX_ADC2_Init+0x98>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003b76:	4b17      	ldr	r3, [pc, #92]	; (8003bd4 <MX_ADC2_Init+0x98>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b7c:	4b15      	ldr	r3, [pc, #84]	; (8003bd4 <MX_ADC2_Init+0x98>)
 8003b7e:	4a17      	ldr	r2, [pc, #92]	; (8003bdc <MX_ADC2_Init+0xa0>)
 8003b80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b82:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <MX_ADC2_Init+0x98>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8003b88:	4b12      	ldr	r3, [pc, #72]	; (8003bd4 <MX_ADC2_Init+0x98>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003b8e:	4b11      	ldr	r3, [pc, #68]	; (8003bd4 <MX_ADC2_Init+0x98>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003b96:	4b0f      	ldr	r3, [pc, #60]	; (8003bd4 <MX_ADC2_Init+0x98>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003b9c:	480d      	ldr	r0, [pc, #52]	; (8003bd4 <MX_ADC2_Init+0x98>)
 8003b9e:	f001 fa9f 	bl	80050e0 <HAL_ADC_Init>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003ba8:	f000 fd9e 	bl	80046e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003bac:	2308      	movs	r3, #8
 8003bae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003bb4:	2307      	movs	r3, #7
 8003bb6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003bb8:	463b      	mov	r3, r7
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4805      	ldr	r0, [pc, #20]	; (8003bd4 <MX_ADC2_Init+0x98>)
 8003bbe:	f001 fc3d 	bl	800543c <HAL_ADC_ConfigChannel>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003bc8:	f000 fd8e 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003bcc:	bf00      	nop
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20000b40 	.word	0x20000b40
 8003bd8:	40012100 	.word	0x40012100
 8003bdc:	0f000001 	.word	0x0f000001

08003be0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003be6:	463b      	mov	r3, r7
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	605a      	str	r2, [r3, #4]
 8003bee:	609a      	str	r2, [r3, #8]
 8003bf0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8003bf2:	4b21      	ldr	r3, [pc, #132]	; (8003c78 <MX_ADC3_Init+0x98>)
 8003bf4:	4a21      	ldr	r2, [pc, #132]	; (8003c7c <MX_ADC3_Init+0x9c>)
 8003bf6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003bf8:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <MX_ADC3_Init+0x98>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 8003bfe:	4b1e      	ldr	r3, [pc, #120]	; (8003c78 <MX_ADC3_Init+0x98>)
 8003c00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c04:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8003c06:	4b1c      	ldr	r3, [pc, #112]	; (8003c78 <MX_ADC3_Init+0x98>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8003c0c:	4b1a      	ldr	r3, [pc, #104]	; (8003c78 <MX_ADC3_Init+0x98>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003c12:	4b19      	ldr	r3, [pc, #100]	; (8003c78 <MX_ADC3_Init+0x98>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c1a:	4b17      	ldr	r3, [pc, #92]	; (8003c78 <MX_ADC3_Init+0x98>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c20:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <MX_ADC3_Init+0x98>)
 8003c22:	4a17      	ldr	r2, [pc, #92]	; (8003c80 <MX_ADC3_Init+0xa0>)
 8003c24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c26:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <MX_ADC3_Init+0x98>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8003c2c:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <MX_ADC3_Init+0x98>)
 8003c2e:	2201      	movs	r2, #1
 8003c30:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8003c32:	4b11      	ldr	r3, [pc, #68]	; (8003c78 <MX_ADC3_Init+0x98>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003c3a:	4b0f      	ldr	r3, [pc, #60]	; (8003c78 <MX_ADC3_Init+0x98>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003c40:	480d      	ldr	r0, [pc, #52]	; (8003c78 <MX_ADC3_Init+0x98>)
 8003c42:	f001 fa4d 	bl	80050e0 <HAL_ADC_Init>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8003c4c:	f000 fd4c 	bl	80046e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003c50:	230b      	movs	r3, #11
 8003c52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003c54:	2301      	movs	r3, #1
 8003c56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003c58:	2307      	movs	r3, #7
 8003c5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003c5c:	463b      	mov	r3, r7
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4805      	ldr	r0, [pc, #20]	; (8003c78 <MX_ADC3_Init+0x98>)
 8003c62:	f001 fbeb 	bl	800543c <HAL_ADC_ConfigChannel>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8003c6c:	f000 fd3c 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8003c70:	bf00      	nop
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20000c60 	.word	0x20000c60
 8003c7c:	40012200 	.word	0x40012200
 8003c80:	0f000001 	.word	0x0f000001

08003c84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b096      	sub	sp, #88	; 0x58
 8003c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	605a      	str	r2, [r3, #4]
 8003c94:	609a      	str	r2, [r3, #8]
 8003c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	605a      	str	r2, [r3, #4]
 8003cac:	609a      	str	r2, [r3, #8]
 8003cae:	60da      	str	r2, [r3, #12]
 8003cb0:	611a      	str	r2, [r3, #16]
 8003cb2:	615a      	str	r2, [r3, #20]
 8003cb4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003cb6:	1d3b      	adds	r3, r7, #4
 8003cb8:	2220      	movs	r2, #32
 8003cba:	2100      	movs	r1, #0
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f004 fd4f 	bl	8008760 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003cc2:	4b4a      	ldr	r3, [pc, #296]	; (8003dec <MX_TIM1_Init+0x168>)
 8003cc4:	4a4a      	ldr	r2, [pc, #296]	; (8003df0 <MX_TIM1_Init+0x16c>)
 8003cc6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8003cc8:	4b48      	ldr	r3, [pc, #288]	; (8003dec <MX_TIM1_Init+0x168>)
 8003cca:	225f      	movs	r2, #95	; 0x5f
 8003ccc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cce:	4b47      	ldr	r3, [pc, #284]	; (8003dec <MX_TIM1_Init+0x168>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 8003cd4:	4b45      	ldr	r3, [pc, #276]	; (8003dec <MX_TIM1_Init+0x168>)
 8003cd6:	22fe      	movs	r2, #254	; 0xfe
 8003cd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cda:	4b44      	ldr	r3, [pc, #272]	; (8003dec <MX_TIM1_Init+0x168>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ce0:	4b42      	ldr	r3, [pc, #264]	; (8003dec <MX_TIM1_Init+0x168>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ce6:	4b41      	ldr	r3, [pc, #260]	; (8003dec <MX_TIM1_Init+0x168>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003cec:	483f      	ldr	r0, [pc, #252]	; (8003dec <MX_TIM1_Init+0x168>)
 8003cee:	f002 fdc1 	bl	8006874 <HAL_TIM_Base_Init>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003cf8:	f000 fcf6 	bl	80046e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d00:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003d02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d06:	4619      	mov	r1, r3
 8003d08:	4838      	ldr	r0, [pc, #224]	; (8003dec <MX_TIM1_Init+0x168>)
 8003d0a:	f003 f84f 	bl	8006dac <HAL_TIM_ConfigClockSource>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003d14:	f000 fce8 	bl	80046e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003d18:	4834      	ldr	r0, [pc, #208]	; (8003dec <MX_TIM1_Init+0x168>)
 8003d1a:	f002 fe63 	bl	80069e4 <HAL_TIM_PWM_Init>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003d24:	f000 fce0 	bl	80046e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003d30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d34:	4619      	mov	r1, r3
 8003d36:	482d      	ldr	r0, [pc, #180]	; (8003dec <MX_TIM1_Init+0x168>)
 8003d38:	f003 fc10 	bl	800755c <HAL_TIMEx_MasterConfigSynchronization>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8003d42:	f000 fcd1 	bl	80046e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d46:	2360      	movs	r3, #96	; 0x60
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d52:	2300      	movs	r3, #0
 8003d54:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d56:	2300      	movs	r3, #0
 8003d58:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d66:	2200      	movs	r2, #0
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4820      	ldr	r0, [pc, #128]	; (8003dec <MX_TIM1_Init+0x168>)
 8003d6c:	f002 ff5c 	bl	8006c28 <HAL_TIM_PWM_ConfigChannel>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003d76:	f000 fcb7 	bl	80046e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d7e:	2204      	movs	r2, #4
 8003d80:	4619      	mov	r1, r3
 8003d82:	481a      	ldr	r0, [pc, #104]	; (8003dec <MX_TIM1_Init+0x168>)
 8003d84:	f002 ff50 	bl	8006c28 <HAL_TIM_PWM_ConfigChannel>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8003d8e:	f000 fcab 	bl	80046e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d96:	2208      	movs	r2, #8
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4814      	ldr	r0, [pc, #80]	; (8003dec <MX_TIM1_Init+0x168>)
 8003d9c:	f002 ff44 	bl	8006c28 <HAL_TIM_PWM_ConfigChannel>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8003da6:	f000 fc9f 	bl	80046e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003daa:	2300      	movs	r3, #0
 8003dac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003dae:	2300      	movs	r3, #0
 8003db0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003dbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dc2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003dc8:	1d3b      	adds	r3, r7, #4
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4807      	ldr	r0, [pc, #28]	; (8003dec <MX_TIM1_Init+0x168>)
 8003dce:	f003 fc41 	bl	8007654 <HAL_TIMEx_ConfigBreakDeadTime>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8003dd8:	f000 fc86 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003ddc:	4803      	ldr	r0, [pc, #12]	; (8003dec <MX_TIM1_Init+0x168>)
 8003dde:	f000 fe13 	bl	8004a08 <HAL_TIM_MspPostInit>

}
 8003de2:	bf00      	nop
 8003de4:	3758      	adds	r7, #88	; 0x58
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20000cf8 	.word	0x20000cf8
 8003df0:	40010000 	.word	0x40010000

08003df4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08e      	sub	sp, #56	; 0x38
 8003df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	605a      	str	r2, [r3, #4]
 8003e04:	609a      	str	r2, [r3, #8]
 8003e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e08:	f107 0320 	add.w	r3, r7, #32
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e12:	1d3b      	adds	r3, r7, #4
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	605a      	str	r2, [r3, #4]
 8003e1a:	609a      	str	r2, [r3, #8]
 8003e1c:	60da      	str	r2, [r3, #12]
 8003e1e:	611a      	str	r2, [r3, #16]
 8003e20:	615a      	str	r2, [r3, #20]
 8003e22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e24:	4b38      	ldr	r3, [pc, #224]	; (8003f08 <MX_TIM2_Init+0x114>)
 8003e26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 500-1;
 8003e2c:	4b36      	ldr	r3, [pc, #216]	; (8003f08 <MX_TIM2_Init+0x114>)
 8003e2e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003e32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e34:	4b34      	ldr	r3, [pc, #208]	; (8003f08 <MX_TIM2_Init+0x114>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8003e3a:	4b33      	ldr	r3, [pc, #204]	; (8003f08 <MX_TIM2_Init+0x114>)
 8003e3c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003e40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e42:	4b31      	ldr	r3, [pc, #196]	; (8003f08 <MX_TIM2_Init+0x114>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e48:	4b2f      	ldr	r3, [pc, #188]	; (8003f08 <MX_TIM2_Init+0x114>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003e4e:	482e      	ldr	r0, [pc, #184]	; (8003f08 <MX_TIM2_Init+0x114>)
 8003e50:	f002 fd10 	bl	8006874 <HAL_TIM_Base_Init>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003e5a:	f000 fc45 	bl	80046e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003e64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4827      	ldr	r0, [pc, #156]	; (8003f08 <MX_TIM2_Init+0x114>)
 8003e6c:	f002 ff9e 	bl	8006dac <HAL_TIM_ConfigClockSource>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003e76:	f000 fc37 	bl	80046e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003e7a:	4823      	ldr	r0, [pc, #140]	; (8003f08 <MX_TIM2_Init+0x114>)
 8003e7c:	f002 fdb2 	bl	80069e4 <HAL_TIM_PWM_Init>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003e86:	f000 fc2f 	bl	80046e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e92:	f107 0320 	add.w	r3, r7, #32
 8003e96:	4619      	mov	r1, r3
 8003e98:	481b      	ldr	r0, [pc, #108]	; (8003f08 <MX_TIM2_Init+0x114>)
 8003e9a:	f003 fb5f 	bl	800755c <HAL_TIMEx_MasterConfigSynchronization>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003ea4:	f000 fc20 	bl	80046e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ea8:	2360      	movs	r3, #96	; 0x60
 8003eaa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003eb8:	1d3b      	adds	r3, r7, #4
 8003eba:	2200      	movs	r2, #0
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4812      	ldr	r0, [pc, #72]	; (8003f08 <MX_TIM2_Init+0x114>)
 8003ec0:	f002 feb2 	bl	8006c28 <HAL_TIM_PWM_ConfigChannel>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003eca:	f000 fc0d 	bl	80046e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ece:	1d3b      	adds	r3, r7, #4
 8003ed0:	2204      	movs	r2, #4
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	480c      	ldr	r0, [pc, #48]	; (8003f08 <MX_TIM2_Init+0x114>)
 8003ed6:	f002 fea7 	bl	8006c28 <HAL_TIM_PWM_ConfigChannel>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8003ee0:	f000 fc02 	bl	80046e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ee4:	1d3b      	adds	r3, r7, #4
 8003ee6:	2208      	movs	r2, #8
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4807      	ldr	r0, [pc, #28]	; (8003f08 <MX_TIM2_Init+0x114>)
 8003eec:	f002 fe9c 	bl	8006c28 <HAL_TIM_PWM_ConfigChannel>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8003ef6:	f000 fbf7 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003efa:	4803      	ldr	r0, [pc, #12]	; (8003f08 <MX_TIM2_Init+0x114>)
 8003efc:	f000 fd84 	bl	8004a08 <HAL_TIM_MspPostInit>

}
 8003f00:	bf00      	nop
 8003f02:	3738      	adds	r7, #56	; 0x38
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	20000dd4 	.word	0x20000dd4

08003f0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08e      	sub	sp, #56	; 0x38
 8003f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	605a      	str	r2, [r3, #4]
 8003f1c:	609a      	str	r2, [r3, #8]
 8003f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f20:	f107 0320 	add.w	r3, r7, #32
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f2a:	1d3b      	adds	r3, r7, #4
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	605a      	str	r2, [r3, #4]
 8003f32:	609a      	str	r2, [r3, #8]
 8003f34:	60da      	str	r2, [r3, #12]
 8003f36:	611a      	str	r2, [r3, #16]
 8003f38:	615a      	str	r2, [r3, #20]
 8003f3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f3c:	4b38      	ldr	r3, [pc, #224]	; (8004020 <MX_TIM3_Init+0x114>)
 8003f3e:	4a39      	ldr	r2, [pc, #228]	; (8004024 <MX_TIM3_Init+0x118>)
 8003f40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 8003f42:	4b37      	ldr	r3, [pc, #220]	; (8004020 <MX_TIM3_Init+0x114>)
 8003f44:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003f48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f4a:	4b35      	ldr	r3, [pc, #212]	; (8004020 <MX_TIM3_Init+0x114>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8003f50:	4b33      	ldr	r3, [pc, #204]	; (8004020 <MX_TIM3_Init+0x114>)
 8003f52:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003f56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f58:	4b31      	ldr	r3, [pc, #196]	; (8004020 <MX_TIM3_Init+0x114>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f5e:	4b30      	ldr	r3, [pc, #192]	; (8004020 <MX_TIM3_Init+0x114>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003f64:	482e      	ldr	r0, [pc, #184]	; (8004020 <MX_TIM3_Init+0x114>)
 8003f66:	f002 fc85 	bl	8006874 <HAL_TIM_Base_Init>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003f70:	f000 fbba 	bl	80046e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f78:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003f7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4827      	ldr	r0, [pc, #156]	; (8004020 <MX_TIM3_Init+0x114>)
 8003f82:	f002 ff13 	bl	8006dac <HAL_TIM_ConfigClockSource>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003f8c:	f000 fbac 	bl	80046e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003f90:	4823      	ldr	r0, [pc, #140]	; (8004020 <MX_TIM3_Init+0x114>)
 8003f92:	f002 fd27 	bl	80069e4 <HAL_TIM_PWM_Init>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003f9c:	f000 fba4 	bl	80046e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003fa8:	f107 0320 	add.w	r3, r7, #32
 8003fac:	4619      	mov	r1, r3
 8003fae:	481c      	ldr	r0, [pc, #112]	; (8004020 <MX_TIM3_Init+0x114>)
 8003fb0:	f003 fad4 	bl	800755c <HAL_TIMEx_MasterConfigSynchronization>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003fba:	f000 fb95 	bl	80046e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fbe:	2360      	movs	r3, #96	; 0x60
 8003fc0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003fce:	1d3b      	adds	r3, r7, #4
 8003fd0:	2204      	movs	r2, #4
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4812      	ldr	r0, [pc, #72]	; (8004020 <MX_TIM3_Init+0x114>)
 8003fd6:	f002 fe27 	bl	8006c28 <HAL_TIM_PWM_ConfigChannel>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003fe0:	f000 fb82 	bl	80046e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003fe4:	1d3b      	adds	r3, r7, #4
 8003fe6:	2208      	movs	r2, #8
 8003fe8:	4619      	mov	r1, r3
 8003fea:	480d      	ldr	r0, [pc, #52]	; (8004020 <MX_TIM3_Init+0x114>)
 8003fec:	f002 fe1c 	bl	8006c28 <HAL_TIM_PWM_ConfigChannel>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003ff6:	f000 fb77 	bl	80046e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003ffa:	1d3b      	adds	r3, r7, #4
 8003ffc:	220c      	movs	r2, #12
 8003ffe:	4619      	mov	r1, r3
 8004000:	4807      	ldr	r0, [pc, #28]	; (8004020 <MX_TIM3_Init+0x114>)
 8004002:	f002 fe11 	bl	8006c28 <HAL_TIM_PWM_ConfigChannel>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 800400c:	f000 fb6c 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004010:	4803      	ldr	r0, [pc, #12]	; (8004020 <MX_TIM3_Init+0x114>)
 8004012:	f000 fcf9 	bl	8004a08 <HAL_TIM_MspPostInit>

}
 8004016:	bf00      	nop
 8004018:	3738      	adds	r7, #56	; 0x38
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	20000bd0 	.word	0x20000bd0
 8004024:	40000400 	.word	0x40000400

08004028 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08e      	sub	sp, #56	; 0x38
 800402c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800402e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	605a      	str	r2, [r3, #4]
 8004038:	609a      	str	r2, [r3, #8]
 800403a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800403c:	f107 0320 	add.w	r3, r7, #32
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004046:	1d3b      	adds	r3, r7, #4
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	605a      	str	r2, [r3, #4]
 800404e:	609a      	str	r2, [r3, #8]
 8004050:	60da      	str	r2, [r3, #12]
 8004052:	611a      	str	r2, [r3, #16]
 8004054:	615a      	str	r2, [r3, #20]
 8004056:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004058:	4b2c      	ldr	r3, [pc, #176]	; (800410c <MX_TIM4_Init+0xe4>)
 800405a:	4a2d      	ldr	r2, [pc, #180]	; (8004110 <MX_TIM4_Init+0xe8>)
 800405c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 800405e:	4b2b      	ldr	r3, [pc, #172]	; (800410c <MX_TIM4_Init+0xe4>)
 8004060:	225f      	movs	r2, #95	; 0x5f
 8004062:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004064:	4b29      	ldr	r3, [pc, #164]	; (800410c <MX_TIM4_Init+0xe4>)
 8004066:	2200      	movs	r2, #0
 8004068:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20;
 800406a:	4b28      	ldr	r3, [pc, #160]	; (800410c <MX_TIM4_Init+0xe4>)
 800406c:	2214      	movs	r2, #20
 800406e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004070:	4b26      	ldr	r3, [pc, #152]	; (800410c <MX_TIM4_Init+0xe4>)
 8004072:	2200      	movs	r2, #0
 8004074:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004076:	4b25      	ldr	r3, [pc, #148]	; (800410c <MX_TIM4_Init+0xe4>)
 8004078:	2200      	movs	r2, #0
 800407a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800407c:	4823      	ldr	r0, [pc, #140]	; (800410c <MX_TIM4_Init+0xe4>)
 800407e:	f002 fbf9 	bl	8006874 <HAL_TIM_Base_Init>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8004088:	f000 fb2e 	bl	80046e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800408c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004090:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004092:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004096:	4619      	mov	r1, r3
 8004098:	481c      	ldr	r0, [pc, #112]	; (800410c <MX_TIM4_Init+0xe4>)
 800409a:	f002 fe87 	bl	8006dac <HAL_TIM_ConfigClockSource>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80040a4:	f000 fb20 	bl	80046e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80040a8:	4818      	ldr	r0, [pc, #96]	; (800410c <MX_TIM4_Init+0xe4>)
 80040aa:	f002 fc9b 	bl	80069e4 <HAL_TIM_PWM_Init>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80040b4:	f000 fb18 	bl	80046e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040b8:	2300      	movs	r3, #0
 80040ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040bc:	2300      	movs	r3, #0
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80040c0:	f107 0320 	add.w	r3, r7, #32
 80040c4:	4619      	mov	r1, r3
 80040c6:	4811      	ldr	r0, [pc, #68]	; (800410c <MX_TIM4_Init+0xe4>)
 80040c8:	f003 fa48 	bl	800755c <HAL_TIMEx_MasterConfigSynchronization>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80040d2:	f000 fb09 	bl	80046e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040d6:	2360      	movs	r3, #96	; 0x60
 80040d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80040da:	2300      	movs	r3, #0
 80040dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040e6:	1d3b      	adds	r3, r7, #4
 80040e8:	2200      	movs	r2, #0
 80040ea:	4619      	mov	r1, r3
 80040ec:	4807      	ldr	r0, [pc, #28]	; (800410c <MX_TIM4_Init+0xe4>)
 80040ee:	f002 fd9b 	bl	8006c28 <HAL_TIM_PWM_ConfigChannel>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80040f8:	f000 faf6 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80040fc:	4803      	ldr	r0, [pc, #12]	; (800410c <MX_TIM4_Init+0xe4>)
 80040fe:	f000 fc83 	bl	8004a08 <HAL_TIM_MspPostInit>

}
 8004102:	bf00      	nop
 8004104:	3738      	adds	r7, #56	; 0x38
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000ab4 	.word	0x20000ab4
 8004110:	40000800 	.word	0x40000800

08004114 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800411a:	f107 0308 	add.w	r3, r7, #8
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	605a      	str	r2, [r3, #4]
 8004124:	609a      	str	r2, [r3, #8]
 8004126:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004128:	463b      	mov	r3, r7
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004130:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <MX_TIM5_Init+0x94>)
 8004132:	4a1e      	ldr	r2, [pc, #120]	; (80041ac <MX_TIM5_Init+0x98>)
 8004134:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 96-1;
 8004136:	4b1c      	ldr	r3, [pc, #112]	; (80041a8 <MX_TIM5_Init+0x94>)
 8004138:	225f      	movs	r2, #95	; 0x5f
 800413a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800413c:	4b1a      	ldr	r3, [pc, #104]	; (80041a8 <MX_TIM5_Init+0x94>)
 800413e:	2200      	movs	r2, #0
 8004140:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 8004142:	4b19      	ldr	r3, [pc, #100]	; (80041a8 <MX_TIM5_Init+0x94>)
 8004144:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8004148:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800414a:	4b17      	ldr	r3, [pc, #92]	; (80041a8 <MX_TIM5_Init+0x94>)
 800414c:	2200      	movs	r2, #0
 800414e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004150:	4b15      	ldr	r3, [pc, #84]	; (80041a8 <MX_TIM5_Init+0x94>)
 8004152:	2200      	movs	r2, #0
 8004154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004156:	4814      	ldr	r0, [pc, #80]	; (80041a8 <MX_TIM5_Init+0x94>)
 8004158:	f002 fb8c 	bl	8006874 <HAL_TIM_Base_Init>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8004162:	f000 fac1 	bl	80046e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800416a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800416c:	f107 0308 	add.w	r3, r7, #8
 8004170:	4619      	mov	r1, r3
 8004172:	480d      	ldr	r0, [pc, #52]	; (80041a8 <MX_TIM5_Init+0x94>)
 8004174:	f002 fe1a 	bl	8006dac <HAL_TIM_ConfigClockSource>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800417e:	f000 fab3 	bl	80046e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004182:	2300      	movs	r3, #0
 8004184:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004186:	2300      	movs	r3, #0
 8004188:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800418a:	463b      	mov	r3, r7
 800418c:	4619      	mov	r1, r3
 800418e:	4806      	ldr	r0, [pc, #24]	; (80041a8 <MX_TIM5_Init+0x94>)
 8004190:	f003 f9e4 	bl	800755c <HAL_TIMEx_MasterConfigSynchronization>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800419a:	f000 faa5 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800419e:	bf00      	nop
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20000b88 	.word	0x20000b88
 80041ac:	40000c00 	.word	0x40000c00

080041b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041b6:	463b      	mov	r3, r7
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80041be:	4b15      	ldr	r3, [pc, #84]	; (8004214 <MX_TIM6_Init+0x64>)
 80041c0:	4a15      	ldr	r2, [pc, #84]	; (8004218 <MX_TIM6_Init+0x68>)
 80041c2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 80041c4:	4b13      	ldr	r3, [pc, #76]	; (8004214 <MX_TIM6_Init+0x64>)
 80041c6:	2231      	movs	r2, #49	; 0x31
 80041c8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ca:	4b12      	ldr	r3, [pc, #72]	; (8004214 <MX_TIM6_Init+0x64>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 80041d0:	4b10      	ldr	r3, [pc, #64]	; (8004214 <MX_TIM6_Init+0x64>)
 80041d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80041d6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041d8:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <MX_TIM6_Init+0x64>)
 80041da:	2200      	movs	r2, #0
 80041dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80041de:	480d      	ldr	r0, [pc, #52]	; (8004214 <MX_TIM6_Init+0x64>)
 80041e0:	f002 fb48 	bl	8006874 <HAL_TIM_Base_Init>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80041ea:	f000 fa7d 	bl	80046e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041ee:	2300      	movs	r3, #0
 80041f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80041f6:	463b      	mov	r3, r7
 80041f8:	4619      	mov	r1, r3
 80041fa:	4806      	ldr	r0, [pc, #24]	; (8004214 <MX_TIM6_Init+0x64>)
 80041fc:	f003 f9ae 	bl	800755c <HAL_TIMEx_MasterConfigSynchronization>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004206:	f000 fa6f 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800420a:	bf00      	nop
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20000cb0 	.word	0x20000cb0
 8004218:	40001000 	.word	0x40001000

0800421c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004222:	f107 0308 	add.w	r3, r7, #8
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	605a      	str	r2, [r3, #4]
 800422c:	609a      	str	r2, [r3, #8]
 800422e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004230:	463b      	mov	r3, r7
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004238:	4b1e      	ldr	r3, [pc, #120]	; (80042b4 <MX_TIM8_Init+0x98>)
 800423a:	4a1f      	ldr	r2, [pc, #124]	; (80042b8 <MX_TIM8_Init+0x9c>)
 800423c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800423e:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <MX_TIM8_Init+0x98>)
 8004240:	2200      	movs	r2, #0
 8004242:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004244:	4b1b      	ldr	r3, [pc, #108]	; (80042b4 <MX_TIM8_Init+0x98>)
 8004246:	2200      	movs	r2, #0
 8004248:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800424a:	4b1a      	ldr	r3, [pc, #104]	; (80042b4 <MX_TIM8_Init+0x98>)
 800424c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004250:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004252:	4b18      	ldr	r3, [pc, #96]	; (80042b4 <MX_TIM8_Init+0x98>)
 8004254:	2200      	movs	r2, #0
 8004256:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004258:	4b16      	ldr	r3, [pc, #88]	; (80042b4 <MX_TIM8_Init+0x98>)
 800425a:	2200      	movs	r2, #0
 800425c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800425e:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <MX_TIM8_Init+0x98>)
 8004260:	2200      	movs	r2, #0
 8004262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004264:	4813      	ldr	r0, [pc, #76]	; (80042b4 <MX_TIM8_Init+0x98>)
 8004266:	f002 fb05 	bl	8006874 <HAL_TIM_Base_Init>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8004270:	f000 fa3a 	bl	80046e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004278:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800427a:	f107 0308 	add.w	r3, r7, #8
 800427e:	4619      	mov	r1, r3
 8004280:	480c      	ldr	r0, [pc, #48]	; (80042b4 <MX_TIM8_Init+0x98>)
 8004282:	f002 fd93 	bl	8006dac <HAL_TIM_ConfigClockSource>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 800428c:	f000 fa2c 	bl	80046e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004290:	2300      	movs	r3, #0
 8004292:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004294:	2300      	movs	r3, #0
 8004296:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004298:	463b      	mov	r3, r7
 800429a:	4619      	mov	r1, r3
 800429c:	4805      	ldr	r0, [pc, #20]	; (80042b4 <MX_TIM8_Init+0x98>)
 800429e:	f003 f95d 	bl	800755c <HAL_TIMEx_MasterConfigSynchronization>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80042a8:	f000 fa1e 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80042ac:	bf00      	nop
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20000a6c 	.word	0x20000a6c
 80042b8:	40010400 	.word	0x40010400

080042bc <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08c      	sub	sp, #48	; 0x30
 80042c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042c2:	f107 0320 	add.w	r3, r7, #32
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	605a      	str	r2, [r3, #4]
 80042cc:	609a      	str	r2, [r3, #8]
 80042ce:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042d0:	1d3b      	adds	r3, r7, #4
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	605a      	str	r2, [r3, #4]
 80042d8:	609a      	str	r2, [r3, #8]
 80042da:	60da      	str	r2, [r3, #12]
 80042dc:	611a      	str	r2, [r3, #16]
 80042de:	615a      	str	r2, [r3, #20]
 80042e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80042e2:	4b26      	ldr	r3, [pc, #152]	; (800437c <MX_TIM9_Init+0xc0>)
 80042e4:	4a26      	ldr	r2, [pc, #152]	; (8004380 <MX_TIM9_Init+0xc4>)
 80042e6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 500-1;
 80042e8:	4b24      	ldr	r3, [pc, #144]	; (800437c <MX_TIM9_Init+0xc0>)
 80042ea:	f240 12f3 	movw	r2, #499	; 0x1f3
 80042ee:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042f0:	4b22      	ldr	r3, [pc, #136]	; (800437c <MX_TIM9_Init+0xc0>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2000-1;
 80042f6:	4b21      	ldr	r3, [pc, #132]	; (800437c <MX_TIM9_Init+0xc0>)
 80042f8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80042fc:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042fe:	4b1f      	ldr	r3, [pc, #124]	; (800437c <MX_TIM9_Init+0xc0>)
 8004300:	2200      	movs	r2, #0
 8004302:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004304:	4b1d      	ldr	r3, [pc, #116]	; (800437c <MX_TIM9_Init+0xc0>)
 8004306:	2200      	movs	r2, #0
 8004308:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800430a:	481c      	ldr	r0, [pc, #112]	; (800437c <MX_TIM9_Init+0xc0>)
 800430c:	f002 fab2 	bl	8006874 <HAL_TIM_Base_Init>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 8004316:	f000 f9e7 	bl	80046e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800431a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800431e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8004320:	f107 0320 	add.w	r3, r7, #32
 8004324:	4619      	mov	r1, r3
 8004326:	4815      	ldr	r0, [pc, #84]	; (800437c <MX_TIM9_Init+0xc0>)
 8004328:	f002 fd40 	bl	8006dac <HAL_TIM_ConfigClockSource>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 8004332:	f000 f9d9 	bl	80046e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8004336:	4811      	ldr	r0, [pc, #68]	; (800437c <MX_TIM9_Init+0xc0>)
 8004338:	f002 fb54 	bl	80069e4 <HAL_TIM_PWM_Init>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8004342:	f000 f9d1 	bl	80046e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004346:	2360      	movs	r3, #96	; 0x60
 8004348:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004356:	1d3b      	adds	r3, r7, #4
 8004358:	2200      	movs	r2, #0
 800435a:	4619      	mov	r1, r3
 800435c:	4807      	ldr	r0, [pc, #28]	; (800437c <MX_TIM9_Init+0xc0>)
 800435e:	f002 fc63 	bl	8006c28 <HAL_TIM_PWM_ConfigChannel>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8004368:	f000 f9be 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800436c:	4803      	ldr	r0, [pc, #12]	; (800437c <MX_TIM9_Init+0xc0>)
 800436e:	f000 fb4b 	bl	8004a08 <HAL_TIM_MspPostInit>

}
 8004372:	bf00      	nop
 8004374:	3730      	adds	r7, #48	; 0x30
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20000d40 	.word	0x20000d40
 8004380:	40014000 	.word	0x40014000

08004384 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004388:	4b11      	ldr	r3, [pc, #68]	; (80043d0 <MX_USART2_UART_Init+0x4c>)
 800438a:	4a12      	ldr	r2, [pc, #72]	; (80043d4 <MX_USART2_UART_Init+0x50>)
 800438c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800438e:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <MX_USART2_UART_Init+0x4c>)
 8004390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004394:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004396:	4b0e      	ldr	r3, [pc, #56]	; (80043d0 <MX_USART2_UART_Init+0x4c>)
 8004398:	2200      	movs	r2, #0
 800439a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800439c:	4b0c      	ldr	r3, [pc, #48]	; (80043d0 <MX_USART2_UART_Init+0x4c>)
 800439e:	2200      	movs	r2, #0
 80043a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80043a2:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <MX_USART2_UART_Init+0x4c>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80043a8:	4b09      	ldr	r3, [pc, #36]	; (80043d0 <MX_USART2_UART_Init+0x4c>)
 80043aa:	220c      	movs	r2, #12
 80043ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043ae:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <MX_USART2_UART_Init+0x4c>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80043b4:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <MX_USART2_UART_Init+0x4c>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80043ba:	4805      	ldr	r0, [pc, #20]	; (80043d0 <MX_USART2_UART_Init+0x4c>)
 80043bc:	f003 f99c 	bl	80076f8 <HAL_UART_Init>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80043c6:	f000 f98f 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80043ca:	bf00      	nop
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20000e1c 	.word	0x20000e1c
 80043d4:	40004400 	.word	0x40004400

080043d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80043dc:	4b11      	ldr	r3, [pc, #68]	; (8004424 <MX_USART3_UART_Init+0x4c>)
 80043de:	4a12      	ldr	r2, [pc, #72]	; (8004428 <MX_USART3_UART_Init+0x50>)
 80043e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80043e2:	4b10      	ldr	r3, [pc, #64]	; (8004424 <MX_USART3_UART_Init+0x4c>)
 80043e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80043e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80043ea:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <MX_USART3_UART_Init+0x4c>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80043f0:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <MX_USART3_UART_Init+0x4c>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80043f6:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <MX_USART3_UART_Init+0x4c>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80043fc:	4b09      	ldr	r3, [pc, #36]	; (8004424 <MX_USART3_UART_Init+0x4c>)
 80043fe:	220c      	movs	r2, #12
 8004400:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004402:	4b08      	ldr	r3, [pc, #32]	; (8004424 <MX_USART3_UART_Init+0x4c>)
 8004404:	2200      	movs	r2, #0
 8004406:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004408:	4b06      	ldr	r3, [pc, #24]	; (8004424 <MX_USART3_UART_Init+0x4c>)
 800440a:	2200      	movs	r2, #0
 800440c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800440e:	4805      	ldr	r0, [pc, #20]	; (8004424 <MX_USART3_UART_Init+0x4c>)
 8004410:	f003 f972 	bl	80076f8 <HAL_UART_Init>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800441a:	f000 f965 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800441e:	bf00      	nop
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000afc 	.word	0x20000afc
 8004428:	40004800 	.word	0x40004800

0800442c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004430:	4b11      	ldr	r3, [pc, #68]	; (8004478 <MX_USART6_UART_Init+0x4c>)
 8004432:	4a12      	ldr	r2, [pc, #72]	; (800447c <MX_USART6_UART_Init+0x50>)
 8004434:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8004436:	4b10      	ldr	r3, [pc, #64]	; (8004478 <MX_USART6_UART_Init+0x4c>)
 8004438:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800443c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800443e:	4b0e      	ldr	r3, [pc, #56]	; (8004478 <MX_USART6_UART_Init+0x4c>)
 8004440:	2200      	movs	r2, #0
 8004442:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004444:	4b0c      	ldr	r3, [pc, #48]	; (8004478 <MX_USART6_UART_Init+0x4c>)
 8004446:	2200      	movs	r2, #0
 8004448:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800444a:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <MX_USART6_UART_Init+0x4c>)
 800444c:	2200      	movs	r2, #0
 800444e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004450:	4b09      	ldr	r3, [pc, #36]	; (8004478 <MX_USART6_UART_Init+0x4c>)
 8004452:	220c      	movs	r2, #12
 8004454:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004456:	4b08      	ldr	r3, [pc, #32]	; (8004478 <MX_USART6_UART_Init+0x4c>)
 8004458:	2200      	movs	r2, #0
 800445a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800445c:	4b06      	ldr	r3, [pc, #24]	; (8004478 <MX_USART6_UART_Init+0x4c>)
 800445e:	2200      	movs	r2, #0
 8004460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004462:	4805      	ldr	r0, [pc, #20]	; (8004478 <MX_USART6_UART_Init+0x4c>)
 8004464:	f003 f948 	bl	80076f8 <HAL_UART_Init>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800446e:	f000 f93b 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004472:	bf00      	nop
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20000d90 	.word	0x20000d90
 800447c:	40011400 	.word	0x40011400

08004480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b08c      	sub	sp, #48	; 0x30
 8004484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004486:	f107 031c 	add.w	r3, r7, #28
 800448a:	2200      	movs	r2, #0
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	605a      	str	r2, [r3, #4]
 8004490:	609a      	str	r2, [r3, #8]
 8004492:	60da      	str	r2, [r3, #12]
 8004494:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004496:	2300      	movs	r3, #0
 8004498:	61bb      	str	r3, [r7, #24]
 800449a:	4b8d      	ldr	r3, [pc, #564]	; (80046d0 <MX_GPIO_Init+0x250>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	4a8c      	ldr	r2, [pc, #560]	; (80046d0 <MX_GPIO_Init+0x250>)
 80044a0:	f043 0310 	orr.w	r3, r3, #16
 80044a4:	6313      	str	r3, [r2, #48]	; 0x30
 80044a6:	4b8a      	ldr	r3, [pc, #552]	; (80046d0 <MX_GPIO_Init+0x250>)
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	f003 0310 	and.w	r3, r3, #16
 80044ae:	61bb      	str	r3, [r7, #24]
 80044b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	4b86      	ldr	r3, [pc, #536]	; (80046d0 <MX_GPIO_Init+0x250>)
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	4a85      	ldr	r2, [pc, #532]	; (80046d0 <MX_GPIO_Init+0x250>)
 80044bc:	f043 0304 	orr.w	r3, r3, #4
 80044c0:	6313      	str	r3, [r2, #48]	; 0x30
 80044c2:	4b83      	ldr	r3, [pc, #524]	; (80046d0 <MX_GPIO_Init+0x250>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80044ce:	2300      	movs	r3, #0
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	4b7f      	ldr	r3, [pc, #508]	; (80046d0 <MX_GPIO_Init+0x250>)
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	4a7e      	ldr	r2, [pc, #504]	; (80046d0 <MX_GPIO_Init+0x250>)
 80044d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044dc:	6313      	str	r3, [r2, #48]	; 0x30
 80044de:	4b7c      	ldr	r3, [pc, #496]	; (80046d0 <MX_GPIO_Init+0x250>)
 80044e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ea:	2300      	movs	r3, #0
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	4b78      	ldr	r3, [pc, #480]	; (80046d0 <MX_GPIO_Init+0x250>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	4a77      	ldr	r2, [pc, #476]	; (80046d0 <MX_GPIO_Init+0x250>)
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	6313      	str	r3, [r2, #48]	; 0x30
 80044fa:	4b75      	ldr	r3, [pc, #468]	; (80046d0 <MX_GPIO_Init+0x250>)
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004506:	2300      	movs	r3, #0
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	4b71      	ldr	r3, [pc, #452]	; (80046d0 <MX_GPIO_Init+0x250>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	4a70      	ldr	r2, [pc, #448]	; (80046d0 <MX_GPIO_Init+0x250>)
 8004510:	f043 0302 	orr.w	r3, r3, #2
 8004514:	6313      	str	r3, [r2, #48]	; 0x30
 8004516:	4b6e      	ldr	r3, [pc, #440]	; (80046d0 <MX_GPIO_Init+0x250>)
 8004518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004522:	2300      	movs	r3, #0
 8004524:	607b      	str	r3, [r7, #4]
 8004526:	4b6a      	ldr	r3, [pc, #424]	; (80046d0 <MX_GPIO_Init+0x250>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	4a69      	ldr	r2, [pc, #420]	; (80046d0 <MX_GPIO_Init+0x250>)
 800452c:	f043 0308 	orr.w	r3, r3, #8
 8004530:	6313      	str	r3, [r2, #48]	; 0x30
 8004532:	4b67      	ldr	r3, [pc, #412]	; (80046d0 <MX_GPIO_Init+0x250>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	607b      	str	r3, [r7, #4]
 800453c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WiFi_OK_Pin|DC_Salon_1_Pin|DC_Salon_2_Pin|L_Cocina_Pin
 800453e:	2200      	movs	r2, #0
 8004540:	f641 4131 	movw	r1, #7217	; 0x1c31
 8004544:	4863      	ldr	r0, [pc, #396]	; (80046d4 <MX_GPIO_Init+0x254>)
 8004546:	f001 fcef 	bl	8005f28 <HAL_GPIO_WritePin>
                          |L_Garaje_Pin|L_Tendedero_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DHT22_Pin|DHT11_Pin, GPIO_PIN_RESET);
 800454a:	2200      	movs	r2, #0
 800454c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8004550:	4861      	ldr	r0, [pc, #388]	; (80046d8 <MX_GPIO_Init+0x258>)
 8004552:	f001 fce9 	bl	8005f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Riego_Pin|Peltier_Pin|L_Espejo_Pin|L_Izquierda_Pin
 8004556:	2200      	movs	r2, #0
 8004558:	f24a 01f8 	movw	r1, #41208	; 0xa0f8
 800455c:	485f      	ldr	r0, [pc, #380]	; (80046dc <MX_GPIO_Init+0x25c>)
 800455e:	f001 fce3 	bl	8005f28 <HAL_GPIO_WritePin>
                          |L_Oficina_Pin|L_Derecha_Pin|L_TV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L_Fregadero_GPIO_Port, L_Fregadero_Pin, GPIO_PIN_RESET);
 8004562:	2200      	movs	r2, #0
 8004564:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004568:	485d      	ldr	r0, [pc, #372]	; (80046e0 <MX_GPIO_Init+0x260>)
 800456a:	f001 fcdd 	bl	8005f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, L_Recibidor_Pin|L_Comedor_Pin|L_Jardin_Pin|L_Sala_Pin
 800456e:	2200      	movs	r2, #0
 8004570:	21ff      	movs	r1, #255	; 0xff
 8004572:	485c      	ldr	r0, [pc, #368]	; (80046e4 <MX_GPIO_Init+0x264>)
 8004574:	f001 fcd8 	bl	8005f28 <HAL_GPIO_WritePin>
                          |L_Porche_Pin|L_Ambiente_Pin|L_Bano_Pin|L_Dormitorio_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : B_Stop_Pin Fin_Garaje_Pin */
  GPIO_InitStruct.Pin = B_Stop_Pin|Fin_Garaje_Pin;
 8004578:	2344      	movs	r3, #68	; 0x44
 800457a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800457c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004582:	2300      	movs	r3, #0
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004586:	f107 031c 	add.w	r3, r7, #28
 800458a:	4619      	mov	r1, r3
 800458c:	4852      	ldr	r0, [pc, #328]	; (80046d8 <MX_GPIO_Init+0x258>)
 800458e:	f001 fb17 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : S_Int_Pin Fin_Parcela_Pin S_Ext_Pin */
  GPIO_InitStruct.Pin = S_Int_Pin|Fin_Parcela_Pin|S_Ext_Pin;
 8004592:	231a      	movs	r3, #26
 8004594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004596:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800459a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800459c:	2301      	movs	r3, #1
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045a0:	f107 031c 	add.w	r3, r7, #28
 80045a4:	4619      	mov	r1, r3
 80045a6:	484c      	ldr	r0, [pc, #304]	; (80046d8 <MX_GPIO_Init+0x258>)
 80045a8:	f001 fb0a 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_Tim_Pers_Pin */
  GPIO_InitStruct.Pin = B_Tim_Pers_Pin;
 80045ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80045b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80045b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b8:	2300      	movs	r3, #0
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B_Tim_Pers_GPIO_Port, &GPIO_InitStruct);
 80045bc:	f107 031c 	add.w	r3, r7, #28
 80045c0:	4619      	mov	r1, r3
 80045c2:	4844      	ldr	r0, [pc, #272]	; (80046d4 <MX_GPIO_Init+0x254>)
 80045c4:	f001 fafc 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : WiFi_OK_Pin DC_Salon_1_Pin DC_Salon_2_Pin L_Cocina_Pin
                           L_Garaje_Pin L_Tendedero_Pin */
  GPIO_InitStruct.Pin = WiFi_OK_Pin|DC_Salon_1_Pin|DC_Salon_2_Pin|L_Cocina_Pin
 80045c8:	f641 4331 	movw	r3, #7217	; 0x1c31
 80045cc:	61fb      	str	r3, [r7, #28]
                          |L_Garaje_Pin|L_Tendedero_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045ce:	2301      	movs	r3, #1
 80045d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d6:	2300      	movs	r3, #0
 80045d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045da:	f107 031c 	add.w	r3, r7, #28
 80045de:	4619      	mov	r1, r3
 80045e0:	483c      	ldr	r0, [pc, #240]	; (80046d4 <MX_GPIO_Init+0x254>)
 80045e2:	f001 faed 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT22_Pin DHT11_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin|DHT11_Pin;
 80045e6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80045ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045ec:	2301      	movs	r3, #1
 80045ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f0:	2300      	movs	r3, #0
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045f4:	2300      	movs	r3, #0
 80045f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045f8:	f107 031c 	add.w	r3, r7, #28
 80045fc:	4619      	mov	r1, r3
 80045fe:	4836      	ldr	r0, [pc, #216]	; (80046d8 <MX_GPIO_Init+0x258>)
 8004600:	f001 fade 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Riego_Pin Peltier_Pin L_Espejo_Pin L_Izquierda_Pin
                           L_Oficina_Pin L_Derecha_Pin L_TV_Pin */
  GPIO_InitStruct.Pin = Riego_Pin|Peltier_Pin|L_Espejo_Pin|L_Izquierda_Pin
 8004604:	f24a 03f8 	movw	r3, #41208	; 0xa0f8
 8004608:	61fb      	str	r3, [r7, #28]
                          |L_Oficina_Pin|L_Derecha_Pin|L_TV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800460a:	2301      	movs	r3, #1
 800460c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460e:	2300      	movs	r3, #0
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004612:	2300      	movs	r3, #0
 8004614:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004616:	f107 031c 	add.w	r3, r7, #28
 800461a:	4619      	mov	r1, r3
 800461c:	482f      	ldr	r0, [pc, #188]	; (80046dc <MX_GPIO_Init+0x25c>)
 800461e:	f001 facf 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_Fregadero_Pin */
  GPIO_InitStruct.Pin = L_Fregadero_Pin;
 8004622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004628:	2301      	movs	r3, #1
 800462a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462c:	2300      	movs	r3, #0
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004630:	2300      	movs	r3, #0
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(L_Fregadero_GPIO_Port, &GPIO_InitStruct);
 8004634:	f107 031c 	add.w	r3, r7, #28
 8004638:	4619      	mov	r1, r3
 800463a:	4829      	ldr	r0, [pc, #164]	; (80046e0 <MX_GPIO_Init+0x260>)
 800463c:	f001 fac0 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_Recibidor_Pin L_Comedor_Pin L_Jardin_Pin L_Sala_Pin
                           L_Porche_Pin L_Ambiente_Pin L_Bano_Pin L_Dormitorio_Pin */
  GPIO_InitStruct.Pin = L_Recibidor_Pin|L_Comedor_Pin|L_Jardin_Pin|L_Sala_Pin
 8004640:	23ff      	movs	r3, #255	; 0xff
 8004642:	61fb      	str	r3, [r7, #28]
                          |L_Porche_Pin|L_Ambiente_Pin|L_Bano_Pin|L_Dormitorio_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004644:	2301      	movs	r3, #1
 8004646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004648:	2300      	movs	r3, #0
 800464a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800464c:	2300      	movs	r3, #0
 800464e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004650:	f107 031c 	add.w	r3, r7, #28
 8004654:	4619      	mov	r1, r3
 8004656:	4823      	ldr	r0, [pc, #140]	; (80046e4 <MX_GPIO_Init+0x264>)
 8004658:	f001 fab2 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_Tim_Veh_Pin */
  GPIO_InitStruct.Pin = B_Tim_Veh_Pin;
 800465c:	2301      	movs	r3, #1
 800465e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004660:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004664:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004666:	2302      	movs	r3, #2
 8004668:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B_Tim_Veh_GPIO_Port, &GPIO_InitStruct);
 800466a:	f107 031c 	add.w	r3, r7, #28
 800466e:	4619      	mov	r1, r3
 8004670:	4819      	ldr	r0, [pc, #100]	; (80046d8 <MX_GPIO_Init+0x258>)
 8004672:	f001 faa5 	bl	8005bc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004676:	2200      	movs	r2, #0
 8004678:	2100      	movs	r1, #0
 800467a:	2006      	movs	r0, #6
 800467c:	f001 f9d7 	bl	8005a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004680:	2006      	movs	r0, #6
 8004682:	f001 f9f0 	bl	8005a66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8004686:	2200      	movs	r2, #0
 8004688:	2100      	movs	r1, #0
 800468a:	2007      	movs	r0, #7
 800468c:	f001 f9cf 	bl	8005a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004690:	2007      	movs	r0, #7
 8004692:	f001 f9e8 	bl	8005a66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8004696:	2200      	movs	r2, #0
 8004698:	2100      	movs	r1, #0
 800469a:	2009      	movs	r0, #9
 800469c:	f001 f9c7 	bl	8005a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80046a0:	2009      	movs	r0, #9
 80046a2:	f001 f9e0 	bl	8005a66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80046a6:	2200      	movs	r2, #0
 80046a8:	2100      	movs	r1, #0
 80046aa:	200a      	movs	r0, #10
 80046ac:	f001 f9bf 	bl	8005a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80046b0:	200a      	movs	r0, #10
 80046b2:	f001 f9d8 	bl	8005a66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80046b6:	2200      	movs	r2, #0
 80046b8:	2100      	movs	r1, #0
 80046ba:	2017      	movs	r0, #23
 80046bc:	f001 f9b7 	bl	8005a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80046c0:	2017      	movs	r0, #23
 80046c2:	f001 f9d0 	bl	8005a66 <HAL_NVIC_EnableIRQ>

}
 80046c6:	bf00      	nop
 80046c8:	3730      	adds	r7, #48	; 0x30
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40023800 	.word	0x40023800
 80046d4:	40020800 	.word	0x40020800
 80046d8:	40021000 	.word	0x40021000
 80046dc:	40020400 	.word	0x40020400
 80046e0:	40020000 	.word	0x40020000
 80046e4:	40020c00 	.word	0x40020c00

080046e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046ec:	b672      	cpsid	i
}
 80046ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80046f0:	e7fe      	b.n	80046f0 <Error_Handler+0x8>
	...

080046f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046fa:	2300      	movs	r3, #0
 80046fc:	607b      	str	r3, [r7, #4]
 80046fe:	4b10      	ldr	r3, [pc, #64]	; (8004740 <HAL_MspInit+0x4c>)
 8004700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004702:	4a0f      	ldr	r2, [pc, #60]	; (8004740 <HAL_MspInit+0x4c>)
 8004704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004708:	6453      	str	r3, [r2, #68]	; 0x44
 800470a:	4b0d      	ldr	r3, [pc, #52]	; (8004740 <HAL_MspInit+0x4c>)
 800470c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004712:	607b      	str	r3, [r7, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004716:	2300      	movs	r3, #0
 8004718:	603b      	str	r3, [r7, #0]
 800471a:	4b09      	ldr	r3, [pc, #36]	; (8004740 <HAL_MspInit+0x4c>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	4a08      	ldr	r2, [pc, #32]	; (8004740 <HAL_MspInit+0x4c>)
 8004720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004724:	6413      	str	r3, [r2, #64]	; 0x40
 8004726:	4b06      	ldr	r3, [pc, #24]	; (8004740 <HAL_MspInit+0x4c>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472e:	603b      	str	r3, [r7, #0]
 8004730:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004732:	2007      	movs	r0, #7
 8004734:	f001 f970 	bl	8005a18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004738:	bf00      	nop
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	40023800 	.word	0x40023800

08004744 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08e      	sub	sp, #56	; 0x38
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800474c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	605a      	str	r2, [r3, #4]
 8004756:	609a      	str	r2, [r3, #8]
 8004758:	60da      	str	r2, [r3, #12]
 800475a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a45      	ldr	r2, [pc, #276]	; (8004878 <HAL_ADC_MspInit+0x134>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d128      	bne.n	80047b8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004766:	2300      	movs	r3, #0
 8004768:	623b      	str	r3, [r7, #32]
 800476a:	4b44      	ldr	r3, [pc, #272]	; (800487c <HAL_ADC_MspInit+0x138>)
 800476c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476e:	4a43      	ldr	r2, [pc, #268]	; (800487c <HAL_ADC_MspInit+0x138>)
 8004770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004774:	6453      	str	r3, [r2, #68]	; 0x44
 8004776:	4b41      	ldr	r3, [pc, #260]	; (800487c <HAL_ADC_MspInit+0x138>)
 8004778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477e:	623b      	str	r3, [r7, #32]
 8004780:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004782:	2300      	movs	r3, #0
 8004784:	61fb      	str	r3, [r7, #28]
 8004786:	4b3d      	ldr	r3, [pc, #244]	; (800487c <HAL_ADC_MspInit+0x138>)
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	4a3c      	ldr	r2, [pc, #240]	; (800487c <HAL_ADC_MspInit+0x138>)
 800478c:	f043 0301 	orr.w	r3, r3, #1
 8004790:	6313      	str	r3, [r2, #48]	; 0x30
 8004792:	4b3a      	ldr	r3, [pc, #232]	; (800487c <HAL_ADC_MspInit+0x138>)
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	61fb      	str	r3, [r7, #28]
 800479c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = LDR_Pin;
 800479e:	2310      	movs	r3, #16
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047a2:	2303      	movs	r3, #3
 80047a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 80047aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047ae:	4619      	mov	r1, r3
 80047b0:	4833      	ldr	r0, [pc, #204]	; (8004880 <HAL_ADC_MspInit+0x13c>)
 80047b2:	f001 fa05 	bl	8005bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80047b6:	e05a      	b.n	800486e <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a31      	ldr	r2, [pc, #196]	; (8004884 <HAL_ADC_MspInit+0x140>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d128      	bne.n	8004814 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80047c2:	2300      	movs	r3, #0
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	4b2d      	ldr	r3, [pc, #180]	; (800487c <HAL_ADC_MspInit+0x138>)
 80047c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ca:	4a2c      	ldr	r2, [pc, #176]	; (800487c <HAL_ADC_MspInit+0x138>)
 80047cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047d0:	6453      	str	r3, [r2, #68]	; 0x44
 80047d2:	4b2a      	ldr	r3, [pc, #168]	; (800487c <HAL_ADC_MspInit+0x138>)
 80047d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047da:	61bb      	str	r3, [r7, #24]
 80047dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]
 80047e2:	4b26      	ldr	r3, [pc, #152]	; (800487c <HAL_ADC_MspInit+0x138>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	4a25      	ldr	r2, [pc, #148]	; (800487c <HAL_ADC_MspInit+0x138>)
 80047e8:	f043 0302 	orr.w	r3, r3, #2
 80047ec:	6313      	str	r3, [r2, #48]	; 0x30
 80047ee:	4b23      	ldr	r3, [pc, #140]	; (800487c <HAL_ADC_MspInit+0x138>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = HW_390_Pin;
 80047fa:	2301      	movs	r3, #1
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047fe:	2303      	movs	r3, #3
 8004800:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004802:	2300      	movs	r3, #0
 8004804:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HW_390_GPIO_Port, &GPIO_InitStruct);
 8004806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800480a:	4619      	mov	r1, r3
 800480c:	481e      	ldr	r0, [pc, #120]	; (8004888 <HAL_ADC_MspInit+0x144>)
 800480e:	f001 f9d7 	bl	8005bc0 <HAL_GPIO_Init>
}
 8004812:	e02c      	b.n	800486e <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a1c      	ldr	r2, [pc, #112]	; (800488c <HAL_ADC_MspInit+0x148>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d127      	bne.n	800486e <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800481e:	2300      	movs	r3, #0
 8004820:	613b      	str	r3, [r7, #16]
 8004822:	4b16      	ldr	r3, [pc, #88]	; (800487c <HAL_ADC_MspInit+0x138>)
 8004824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004826:	4a15      	ldr	r2, [pc, #84]	; (800487c <HAL_ADC_MspInit+0x138>)
 8004828:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800482c:	6453      	str	r3, [r2, #68]	; 0x44
 800482e:	4b13      	ldr	r3, [pc, #76]	; (800487c <HAL_ADC_MspInit+0x138>)
 8004830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004836:	613b      	str	r3, [r7, #16]
 8004838:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800483a:	2300      	movs	r3, #0
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	4b0f      	ldr	r3, [pc, #60]	; (800487c <HAL_ADC_MspInit+0x138>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	4a0e      	ldr	r2, [pc, #56]	; (800487c <HAL_ADC_MspInit+0x138>)
 8004844:	f043 0304 	orr.w	r3, r3, #4
 8004848:	6313      	str	r3, [r2, #48]	; 0x30
 800484a:	4b0c      	ldr	r3, [pc, #48]	; (800487c <HAL_ADC_MspInit+0x138>)
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Lluvia_Pin;
 8004856:	2302      	movs	r3, #2
 8004858:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800485a:	2303      	movs	r3, #3
 800485c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485e:	2300      	movs	r3, #0
 8004860:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Lluvia_GPIO_Port, &GPIO_InitStruct);
 8004862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004866:	4619      	mov	r1, r3
 8004868:	4809      	ldr	r0, [pc, #36]	; (8004890 <HAL_ADC_MspInit+0x14c>)
 800486a:	f001 f9a9 	bl	8005bc0 <HAL_GPIO_Init>
}
 800486e:	bf00      	nop
 8004870:	3738      	adds	r7, #56	; 0x38
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40012000 	.word	0x40012000
 800487c:	40023800 	.word	0x40023800
 8004880:	40020000 	.word	0x40020000
 8004884:	40012100 	.word	0x40012100
 8004888:	40020400 	.word	0x40020400
 800488c:	40012200 	.word	0x40012200
 8004890:	40020800 	.word	0x40020800

08004894 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004894:	b480      	push	{r7}
 8004896:	b08b      	sub	sp, #44	; 0x2c
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a51      	ldr	r2, [pc, #324]	; (80049e8 <HAL_TIM_Base_MspInit+0x154>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d10e      	bne.n	80048c4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80048a6:	2300      	movs	r3, #0
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
 80048aa:	4b50      	ldr	r3, [pc, #320]	; (80049ec <HAL_TIM_Base_MspInit+0x158>)
 80048ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ae:	4a4f      	ldr	r2, [pc, #316]	; (80049ec <HAL_TIM_Base_MspInit+0x158>)
 80048b0:	f043 0301 	orr.w	r3, r3, #1
 80048b4:	6453      	str	r3, [r2, #68]	; 0x44
 80048b6:	4b4d      	ldr	r3, [pc, #308]	; (80049ec <HAL_TIM_Base_MspInit+0x158>)
 80048b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80048c2:	e08a      	b.n	80049da <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048cc:	d10e      	bne.n	80048ec <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048ce:	2300      	movs	r3, #0
 80048d0:	623b      	str	r3, [r7, #32]
 80048d2:	4b46      	ldr	r3, [pc, #280]	; (80049ec <HAL_TIM_Base_MspInit+0x158>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	4a45      	ldr	r2, [pc, #276]	; (80049ec <HAL_TIM_Base_MspInit+0x158>)
 80048d8:	f043 0301 	orr.w	r3, r3, #1
 80048dc:	6413      	str	r3, [r2, #64]	; 0x40
 80048de:	4b43      	ldr	r3, [pc, #268]	; (80049ec <HAL_TIM_Base_MspInit+0x158>)
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	623b      	str	r3, [r7, #32]
 80048e8:	6a3b      	ldr	r3, [r7, #32]
}
 80048ea:	e076      	b.n	80049da <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM3)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a3f      	ldr	r2, [pc, #252]	; (80049f0 <HAL_TIM_Base_MspInit+0x15c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d10e      	bne.n	8004914 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80048f6:	2300      	movs	r3, #0
 80048f8:	61fb      	str	r3, [r7, #28]
 80048fa:	4b3c      	ldr	r3, [pc, #240]	; (80049ec <HAL_TIM_Base_MspInit+0x158>)
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	4a3b      	ldr	r2, [pc, #236]	; (80049ec <HAL_TIM_Base_MspInit+0x158>)
 8004900:	f043 0302 	orr.w	r3, r3, #2
 8004904:	6413      	str	r3, [r2, #64]	; 0x40
 8004906:	4b39      	ldr	r3, [pc, #228]	; (80049ec <HAL_TIM_Base_MspInit+0x158>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	61fb      	str	r3, [r7, #28]
 8004910:	69fb      	ldr	r3, [r7, #28]
}
 8004912:	e062      	b.n	80049da <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM4)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a36      	ldr	r2, [pc, #216]	; (80049f4 <HAL_TIM_Base_MspInit+0x160>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d10e      	bne.n	800493c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800491e:	2300      	movs	r3, #0
 8004920:	61bb      	str	r3, [r7, #24]
 8004922:	4b32      	ldr	r3, [pc, #200]	; (80049ec <HAL_TIM_Base_MspInit+0x158>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	4a31      	ldr	r2, [pc, #196]	; (80049ec <HAL_TIM_Base_MspInit+0x158>)
 8004928:	f043 0304 	orr.w	r3, r3, #4
 800492c:	6413      	str	r3, [r2, #64]	; 0x40
 800492e:	4b2f      	ldr	r3, [pc, #188]	; (80049ec <HAL_TIM_Base_MspInit+0x158>)
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	61bb      	str	r3, [r7, #24]
 8004938:	69bb      	ldr	r3, [r7, #24]
}
 800493a:	e04e      	b.n	80049da <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM5)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a2d      	ldr	r2, [pc, #180]	; (80049f8 <HAL_TIM_Base_MspInit+0x164>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d10e      	bne.n	8004964 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004946:	2300      	movs	r3, #0
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	4b28      	ldr	r3, [pc, #160]	; (80049ec <HAL_TIM_Base_MspInit+0x158>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	4a27      	ldr	r2, [pc, #156]	; (80049ec <HAL_TIM_Base_MspInit+0x158>)
 8004950:	f043 0308 	orr.w	r3, r3, #8
 8004954:	6413      	str	r3, [r2, #64]	; 0x40
 8004956:	4b25      	ldr	r3, [pc, #148]	; (80049ec <HAL_TIM_Base_MspInit+0x158>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	697b      	ldr	r3, [r7, #20]
}
 8004962:	e03a      	b.n	80049da <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM6)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a24      	ldr	r2, [pc, #144]	; (80049fc <HAL_TIM_Base_MspInit+0x168>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d10e      	bne.n	800498c <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800496e:	2300      	movs	r3, #0
 8004970:	613b      	str	r3, [r7, #16]
 8004972:	4b1e      	ldr	r3, [pc, #120]	; (80049ec <HAL_TIM_Base_MspInit+0x158>)
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	4a1d      	ldr	r2, [pc, #116]	; (80049ec <HAL_TIM_Base_MspInit+0x158>)
 8004978:	f043 0310 	orr.w	r3, r3, #16
 800497c:	6413      	str	r3, [r2, #64]	; 0x40
 800497e:	4b1b      	ldr	r3, [pc, #108]	; (80049ec <HAL_TIM_Base_MspInit+0x158>)
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	f003 0310 	and.w	r3, r3, #16
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	693b      	ldr	r3, [r7, #16]
}
 800498a:	e026      	b.n	80049da <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM8)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1b      	ldr	r2, [pc, #108]	; (8004a00 <HAL_TIM_Base_MspInit+0x16c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d10e      	bne.n	80049b4 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	4b14      	ldr	r3, [pc, #80]	; (80049ec <HAL_TIM_Base_MspInit+0x158>)
 800499c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499e:	4a13      	ldr	r2, [pc, #76]	; (80049ec <HAL_TIM_Base_MspInit+0x158>)
 80049a0:	f043 0302 	orr.w	r3, r3, #2
 80049a4:	6453      	str	r3, [r2, #68]	; 0x44
 80049a6:	4b11      	ldr	r3, [pc, #68]	; (80049ec <HAL_TIM_Base_MspInit+0x158>)
 80049a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]
}
 80049b2:	e012      	b.n	80049da <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM9)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a12      	ldr	r2, [pc, #72]	; (8004a04 <HAL_TIM_Base_MspInit+0x170>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d10d      	bne.n	80049da <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80049be:	2300      	movs	r3, #0
 80049c0:	60bb      	str	r3, [r7, #8]
 80049c2:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <HAL_TIM_Base_MspInit+0x158>)
 80049c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c6:	4a09      	ldr	r2, [pc, #36]	; (80049ec <HAL_TIM_Base_MspInit+0x158>)
 80049c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049cc:	6453      	str	r3, [r2, #68]	; 0x44
 80049ce:	4b07      	ldr	r3, [pc, #28]	; (80049ec <HAL_TIM_Base_MspInit+0x158>)
 80049d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d6:	60bb      	str	r3, [r7, #8]
 80049d8:	68bb      	ldr	r3, [r7, #8]
}
 80049da:	bf00      	nop
 80049dc:	372c      	adds	r7, #44	; 0x2c
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40010000 	.word	0x40010000
 80049ec:	40023800 	.word	0x40023800
 80049f0:	40000400 	.word	0x40000400
 80049f4:	40000800 	.word	0x40000800
 80049f8:	40000c00 	.word	0x40000c00
 80049fc:	40001000 	.word	0x40001000
 8004a00:	40010400 	.word	0x40010400
 8004a04:	40014000 	.word	0x40014000

08004a08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08e      	sub	sp, #56	; 0x38
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	605a      	str	r2, [r3, #4]
 8004a1a:	609a      	str	r2, [r3, #8]
 8004a1c:	60da      	str	r2, [r3, #12]
 8004a1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a7a      	ldr	r2, [pc, #488]	; (8004c10 <HAL_TIM_MspPostInit+0x208>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d11f      	bne.n	8004a6a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	623b      	str	r3, [r7, #32]
 8004a2e:	4b79      	ldr	r3, [pc, #484]	; (8004c14 <HAL_TIM_MspPostInit+0x20c>)
 8004a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a32:	4a78      	ldr	r2, [pc, #480]	; (8004c14 <HAL_TIM_MspPostInit+0x20c>)
 8004a34:	f043 0301 	orr.w	r3, r3, #1
 8004a38:	6313      	str	r3, [r2, #48]	; 0x30
 8004a3a:	4b76      	ldr	r3, [pc, #472]	; (8004c14 <HAL_TIM_MspPostInit+0x20c>)
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	623b      	str	r3, [r7, #32]
 8004a44:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = L_GamingG_Pin|L_GamingR_Pin|L_GamingB_Pin;
 8004a46:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004a4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a54:	2300      	movs	r3, #0
 8004a56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a60:	4619      	mov	r1, r3
 8004a62:	486d      	ldr	r0, [pc, #436]	; (8004c18 <HAL_TIM_MspPostInit+0x210>)
 8004a64:	f001 f8ac 	bl	8005bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8004a68:	e0cd      	b.n	8004c06 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM2)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a72:	d13d      	bne.n	8004af0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a74:	2300      	movs	r3, #0
 8004a76:	61fb      	str	r3, [r7, #28]
 8004a78:	4b66      	ldr	r3, [pc, #408]	; (8004c14 <HAL_TIM_MspPostInit+0x20c>)
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7c:	4a65      	ldr	r2, [pc, #404]	; (8004c14 <HAL_TIM_MspPostInit+0x20c>)
 8004a7e:	f043 0301 	orr.w	r3, r3, #1
 8004a82:	6313      	str	r3, [r2, #48]	; 0x30
 8004a84:	4b63      	ldr	r3, [pc, #396]	; (8004c14 <HAL_TIM_MspPostInit+0x20c>)
 8004a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	61fb      	str	r3, [r7, #28]
 8004a8e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a90:	2300      	movs	r3, #0
 8004a92:	61bb      	str	r3, [r7, #24]
 8004a94:	4b5f      	ldr	r3, [pc, #380]	; (8004c14 <HAL_TIM_MspPostInit+0x20c>)
 8004a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a98:	4a5e      	ldr	r2, [pc, #376]	; (8004c14 <HAL_TIM_MspPostInit+0x20c>)
 8004a9a:	f043 0302 	orr.w	r3, r3, #2
 8004a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8004aa0:	4b5c      	ldr	r3, [pc, #368]	; (8004c14 <HAL_TIM_MspPostInit+0x20c>)
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	61bb      	str	r3, [r7, #24]
 8004aaa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = S_Parcela_Pin|S_Garaje_Pin;
 8004aac:	2303      	movs	r3, #3
 8004aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004abc:	2301      	movs	r3, #1
 8004abe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4854      	ldr	r0, [pc, #336]	; (8004c18 <HAL_TIM_MspPostInit+0x210>)
 8004ac8:	f001 f87a 	bl	8005bc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S_Tendedero_Pin;
 8004acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ad0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ada:	2300      	movs	r3, #0
 8004adc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(S_Tendedero_GPIO_Port, &GPIO_InitStruct);
 8004ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	484c      	ldr	r0, [pc, #304]	; (8004c1c <HAL_TIM_MspPostInit+0x214>)
 8004aea:	f001 f869 	bl	8005bc0 <HAL_GPIO_Init>
}
 8004aee:	e08a      	b.n	8004c06 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM3)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a4a      	ldr	r2, [pc, #296]	; (8004c20 <HAL_TIM_MspPostInit+0x218>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d13d      	bne.n	8004b76 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	4b45      	ldr	r3, [pc, #276]	; (8004c14 <HAL_TIM_MspPostInit+0x20c>)
 8004b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b02:	4a44      	ldr	r2, [pc, #272]	; (8004c14 <HAL_TIM_MspPostInit+0x20c>)
 8004b04:	f043 0301 	orr.w	r3, r3, #1
 8004b08:	6313      	str	r3, [r2, #48]	; 0x30
 8004b0a:	4b42      	ldr	r3, [pc, #264]	; (8004c14 <HAL_TIM_MspPostInit+0x20c>)
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b16:	2300      	movs	r3, #0
 8004b18:	613b      	str	r3, [r7, #16]
 8004b1a:	4b3e      	ldr	r3, [pc, #248]	; (8004c14 <HAL_TIM_MspPostInit+0x20c>)
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	4a3d      	ldr	r2, [pc, #244]	; (8004c14 <HAL_TIM_MspPostInit+0x20c>)
 8004b20:	f043 0304 	orr.w	r3, r3, #4
 8004b24:	6313      	str	r3, [r2, #48]	; 0x30
 8004b26:	4b3b      	ldr	r3, [pc, #236]	; (8004c14 <HAL_TIM_MspPostInit+0x20c>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	f003 0304 	and.w	r3, r3, #4
 8004b2e:	613b      	str	r3, [r7, #16]
 8004b30:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = S_Dormitorio_Pin;
 8004b32:	2380      	movs	r3, #128	; 0x80
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b36:	2302      	movs	r3, #2
 8004b38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004b42:	2302      	movs	r3, #2
 8004b44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(S_Dormitorio_GPIO_Port, &GPIO_InitStruct);
 8004b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	4832      	ldr	r0, [pc, #200]	; (8004c18 <HAL_TIM_MspPostInit+0x210>)
 8004b4e:	f001 f837 	bl	8005bc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S_Oficina_Pin|S_Salon_Pin;
 8004b52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b58:	2302      	movs	r3, #2
 8004b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b60:	2300      	movs	r3, #0
 8004b62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004b64:	2302      	movs	r3, #2
 8004b66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	482d      	ldr	r0, [pc, #180]	; (8004c24 <HAL_TIM_MspPostInit+0x21c>)
 8004b70:	f001 f826 	bl	8005bc0 <HAL_GPIO_Init>
}
 8004b74:	e047      	b.n	8004c06 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM4)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a2b      	ldr	r2, [pc, #172]	; (8004c28 <HAL_TIM_MspPostInit+0x220>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d11f      	bne.n	8004bc0 <HAL_TIM_MspPostInit+0x1b8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	4b23      	ldr	r3, [pc, #140]	; (8004c14 <HAL_TIM_MspPostInit+0x20c>)
 8004b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b88:	4a22      	ldr	r2, [pc, #136]	; (8004c14 <HAL_TIM_MspPostInit+0x20c>)
 8004b8a:	f043 0308 	orr.w	r3, r3, #8
 8004b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8004b90:	4b20      	ldr	r3, [pc, #128]	; (8004c14 <HAL_TIM_MspPostInit+0x20c>)
 8004b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b94:	f003 0308 	and.w	r3, r3, #8
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004baa:	2300      	movs	r3, #0
 8004bac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004bae:	2302      	movs	r3, #2
 8004bb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	481c      	ldr	r0, [pc, #112]	; (8004c2c <HAL_TIM_MspPostInit+0x224>)
 8004bba:	f001 f801 	bl	8005bc0 <HAL_GPIO_Init>
}
 8004bbe:	e022      	b.n	8004c06 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM9)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a1a      	ldr	r2, [pc, #104]	; (8004c30 <HAL_TIM_MspPostInit+0x228>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d11d      	bne.n	8004c06 <HAL_TIM_MspPostInit+0x1fe>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60bb      	str	r3, [r7, #8]
 8004bce:	4b11      	ldr	r3, [pc, #68]	; (8004c14 <HAL_TIM_MspPostInit+0x20c>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	4a10      	ldr	r2, [pc, #64]	; (8004c14 <HAL_TIM_MspPostInit+0x20c>)
 8004bd4:	f043 0310 	orr.w	r3, r3, #16
 8004bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bda:	4b0e      	ldr	r3, [pc, #56]	; (8004c14 <HAL_TIM_MspPostInit+0x20c>)
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	f003 0310 	and.w	r3, r3, #16
 8004be2:	60bb      	str	r3, [r7, #8]
 8004be4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004be6:	2320      	movs	r3, #32
 8004be8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bea:	2302      	movs	r3, #2
 8004bec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bfe:	4619      	mov	r1, r3
 8004c00:	480c      	ldr	r0, [pc, #48]	; (8004c34 <HAL_TIM_MspPostInit+0x22c>)
 8004c02:	f000 ffdd 	bl	8005bc0 <HAL_GPIO_Init>
}
 8004c06:	bf00      	nop
 8004c08:	3738      	adds	r7, #56	; 0x38
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	40010000 	.word	0x40010000
 8004c14:	40023800 	.word	0x40023800
 8004c18:	40020000 	.word	0x40020000
 8004c1c:	40020400 	.word	0x40020400
 8004c20:	40000400 	.word	0x40000400
 8004c24:	40020800 	.word	0x40020800
 8004c28:	40000800 	.word	0x40000800
 8004c2c:	40020c00 	.word	0x40020c00
 8004c30:	40014000 	.word	0x40014000
 8004c34:	40021000 	.word	0x40021000

08004c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08e      	sub	sp, #56	; 0x38
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	605a      	str	r2, [r3, #4]
 8004c4a:	609a      	str	r2, [r3, #8]
 8004c4c:	60da      	str	r2, [r3, #12]
 8004c4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a63      	ldr	r2, [pc, #396]	; (8004de4 <HAL_UART_MspInit+0x1ac>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d134      	bne.n	8004cc4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	623b      	str	r3, [r7, #32]
 8004c5e:	4b62      	ldr	r3, [pc, #392]	; (8004de8 <HAL_UART_MspInit+0x1b0>)
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	4a61      	ldr	r2, [pc, #388]	; (8004de8 <HAL_UART_MspInit+0x1b0>)
 8004c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c68:	6413      	str	r3, [r2, #64]	; 0x40
 8004c6a:	4b5f      	ldr	r3, [pc, #380]	; (8004de8 <HAL_UART_MspInit+0x1b0>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c72:	623b      	str	r3, [r7, #32]
 8004c74:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c76:	2300      	movs	r3, #0
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	4b5b      	ldr	r3, [pc, #364]	; (8004de8 <HAL_UART_MspInit+0x1b0>)
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	4a5a      	ldr	r2, [pc, #360]	; (8004de8 <HAL_UART_MspInit+0x1b0>)
 8004c80:	f043 0301 	orr.w	r3, r3, #1
 8004c84:	6313      	str	r3, [r2, #48]	; 0x30
 8004c86:	4b58      	ldr	r3, [pc, #352]	; (8004de8 <HAL_UART_MspInit+0x1b0>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	61fb      	str	r3, [r7, #28]
 8004c90:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004c92:	230c      	movs	r3, #12
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c96:	2302      	movs	r3, #2
 8004c98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004ca2:	2307      	movs	r3, #7
 8004ca4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004caa:	4619      	mov	r1, r3
 8004cac:	484f      	ldr	r0, [pc, #316]	; (8004dec <HAL_UART_MspInit+0x1b4>)
 8004cae:	f000 ff87 	bl	8005bc0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	2026      	movs	r0, #38	; 0x26
 8004cb8:	f000 feb9 	bl	8005a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004cbc:	2026      	movs	r0, #38	; 0x26
 8004cbe:	f000 fed2 	bl	8005a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004cc2:	e08a      	b.n	8004dda <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART3)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a49      	ldr	r2, [pc, #292]	; (8004df0 <HAL_UART_MspInit+0x1b8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d14c      	bne.n	8004d68 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61bb      	str	r3, [r7, #24]
 8004cd2:	4b45      	ldr	r3, [pc, #276]	; (8004de8 <HAL_UART_MspInit+0x1b0>)
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	4a44      	ldr	r2, [pc, #272]	; (8004de8 <HAL_UART_MspInit+0x1b0>)
 8004cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8004cde:	4b42      	ldr	r3, [pc, #264]	; (8004de8 <HAL_UART_MspInit+0x1b0>)
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ce6:	61bb      	str	r3, [r7, #24]
 8004ce8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
 8004cee:	4b3e      	ldr	r3, [pc, #248]	; (8004de8 <HAL_UART_MspInit+0x1b0>)
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf2:	4a3d      	ldr	r2, [pc, #244]	; (8004de8 <HAL_UART_MspInit+0x1b0>)
 8004cf4:	f043 0302 	orr.w	r3, r3, #2
 8004cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cfa:	4b3b      	ldr	r3, [pc, #236]	; (8004de8 <HAL_UART_MspInit+0x1b0>)
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d06:	2300      	movs	r3, #0
 8004d08:	613b      	str	r3, [r7, #16]
 8004d0a:	4b37      	ldr	r3, [pc, #220]	; (8004de8 <HAL_UART_MspInit+0x1b0>)
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	4a36      	ldr	r2, [pc, #216]	; (8004de8 <HAL_UART_MspInit+0x1b0>)
 8004d10:	f043 0308 	orr.w	r3, r3, #8
 8004d14:	6313      	str	r3, [r2, #48]	; 0x30
 8004d16:	4b34      	ldr	r3, [pc, #208]	; (8004de8 <HAL_UART_MspInit+0x1b0>)
 8004d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	613b      	str	r3, [r7, #16]
 8004d20:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004d22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d28:	2302      	movs	r3, #2
 8004d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d30:	2303      	movs	r3, #3
 8004d32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004d34:	2307      	movs	r3, #7
 8004d36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	482d      	ldr	r0, [pc, #180]	; (8004df4 <HAL_UART_MspInit+0x1bc>)
 8004d40:	f000 ff3e 	bl	8005bc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004d44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d52:	2303      	movs	r3, #3
 8004d54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004d56:	2307      	movs	r3, #7
 8004d58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4825      	ldr	r0, [pc, #148]	; (8004df8 <HAL_UART_MspInit+0x1c0>)
 8004d62:	f000 ff2d 	bl	8005bc0 <HAL_GPIO_Init>
}
 8004d66:	e038      	b.n	8004dda <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART6)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a23      	ldr	r2, [pc, #140]	; (8004dfc <HAL_UART_MspInit+0x1c4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d133      	bne.n	8004dda <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004d72:	2300      	movs	r3, #0
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	4b1c      	ldr	r3, [pc, #112]	; (8004de8 <HAL_UART_MspInit+0x1b0>)
 8004d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7a:	4a1b      	ldr	r2, [pc, #108]	; (8004de8 <HAL_UART_MspInit+0x1b0>)
 8004d7c:	f043 0320 	orr.w	r3, r3, #32
 8004d80:	6453      	str	r3, [r2, #68]	; 0x44
 8004d82:	4b19      	ldr	r3, [pc, #100]	; (8004de8 <HAL_UART_MspInit+0x1b0>)
 8004d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d86:	f003 0320 	and.w	r3, r3, #32
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <HAL_UART_MspInit+0x1b0>)
 8004d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d96:	4a14      	ldr	r2, [pc, #80]	; (8004de8 <HAL_UART_MspInit+0x1b0>)
 8004d98:	f043 0304 	orr.w	r3, r3, #4
 8004d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d9e:	4b12      	ldr	r3, [pc, #72]	; (8004de8 <HAL_UART_MspInit+0x1b0>)
 8004da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da2:	f003 0304 	and.w	r3, r3, #4
 8004da6:	60bb      	str	r3, [r7, #8]
 8004da8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004daa:	23c0      	movs	r3, #192	; 0xc0
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dae:	2302      	movs	r3, #2
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db2:	2300      	movs	r3, #0
 8004db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004db6:	2303      	movs	r3, #3
 8004db8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004dba:	2308      	movs	r3, #8
 8004dbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	480e      	ldr	r0, [pc, #56]	; (8004e00 <HAL_UART_MspInit+0x1c8>)
 8004dc6:	f000 fefb 	bl	8005bc0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004dca:	2200      	movs	r2, #0
 8004dcc:	2100      	movs	r1, #0
 8004dce:	2047      	movs	r0, #71	; 0x47
 8004dd0:	f000 fe2d 	bl	8005a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004dd4:	2047      	movs	r0, #71	; 0x47
 8004dd6:	f000 fe46 	bl	8005a66 <HAL_NVIC_EnableIRQ>
}
 8004dda:	bf00      	nop
 8004ddc:	3738      	adds	r7, #56	; 0x38
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40004400 	.word	0x40004400
 8004de8:	40023800 	.word	0x40023800
 8004dec:	40020000 	.word	0x40020000
 8004df0:	40004800 	.word	0x40004800
 8004df4:	40020400 	.word	0x40020400
 8004df8:	40020c00 	.word	0x40020c00
 8004dfc:	40011400 	.word	0x40011400
 8004e00:	40020800 	.word	0x40020800

08004e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e08:	e7fe      	b.n	8004e08 <NMI_Handler+0x4>

08004e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e0e:	e7fe      	b.n	8004e0e <HardFault_Handler+0x4>

08004e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e14:	e7fe      	b.n	8004e14 <MemManage_Handler+0x4>

08004e16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e16:	b480      	push	{r7}
 8004e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e1a:	e7fe      	b.n	8004e1a <BusFault_Handler+0x4>

08004e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e20:	e7fe      	b.n	8004e20 <UsageFault_Handler+0x4>

08004e22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e22:	b480      	push	{r7}
 8004e24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e26:	bf00      	nop
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e34:	bf00      	nop
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e42:	bf00      	nop
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e50:	f000 f902 	bl	8005058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e54:	bf00      	nop
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004e5c:	2001      	movs	r0, #1
 8004e5e:	f001 f87d 	bl	8005f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004e62:	bf00      	nop
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004e6a:	2002      	movs	r0, #2
 8004e6c:	f001 f876 	bl	8005f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004e70:	bf00      	nop
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004e78:	2008      	movs	r0, #8
 8004e7a:	f001 f86f 	bl	8005f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004e7e:	bf00      	nop
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004e86:	2010      	movs	r0, #16
 8004e88:	f001 f868 	bl	8005f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004e8c:	bf00      	nop
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004e94:	2040      	movs	r0, #64	; 0x40
 8004e96:	f001 f861 	bl	8005f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004e9a:	bf00      	nop
 8004e9c:	bd80      	pop	{r7, pc}
	...

08004ea0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UART_isr(&huart2);
 8004ea4:	4803      	ldr	r0, [pc, #12]	; (8004eb4 <USART2_IRQHandler+0x14>)
 8004ea6:	f7fd ffef 	bl	8002e88 <UART_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004eaa:	4802      	ldr	r0, [pc, #8]	; (8004eb4 <USART2_IRQHandler+0x14>)
 8004eac:	f002 fda6 	bl	80079fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004eb0:	bf00      	nop
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	20000e1c 	.word	0x20000e1c

08004eb8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	UART_isr(&huart6);
 8004ebc:	4803      	ldr	r0, [pc, #12]	; (8004ecc <USART6_IRQHandler+0x14>)
 8004ebe:	f7fd ffe3 	bl	8002e88 <UART_isr>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004ec2:	4802      	ldr	r0, [pc, #8]	; (8004ecc <USART6_IRQHandler+0x14>)
 8004ec4:	f002 fd9a 	bl	80079fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004ec8:	bf00      	nop
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20000d90 	.word	0x20000d90

08004ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ed8:	4a14      	ldr	r2, [pc, #80]	; (8004f2c <_sbrk+0x5c>)
 8004eda:	4b15      	ldr	r3, [pc, #84]	; (8004f30 <_sbrk+0x60>)
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ee4:	4b13      	ldr	r3, [pc, #76]	; (8004f34 <_sbrk+0x64>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d102      	bne.n	8004ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004eec:	4b11      	ldr	r3, [pc, #68]	; (8004f34 <_sbrk+0x64>)
 8004eee:	4a12      	ldr	r2, [pc, #72]	; (8004f38 <_sbrk+0x68>)
 8004ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ef2:	4b10      	ldr	r3, [pc, #64]	; (8004f34 <_sbrk+0x64>)
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4413      	add	r3, r2
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d207      	bcs.n	8004f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f00:	f003 fc04 	bl	800870c <__errno>
 8004f04:	4603      	mov	r3, r0
 8004f06:	220c      	movs	r2, #12
 8004f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f0e:	e009      	b.n	8004f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f10:	4b08      	ldr	r3, [pc, #32]	; (8004f34 <_sbrk+0x64>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f16:	4b07      	ldr	r3, [pc, #28]	; (8004f34 <_sbrk+0x64>)
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	4a05      	ldr	r2, [pc, #20]	; (8004f34 <_sbrk+0x64>)
 8004f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f22:	68fb      	ldr	r3, [r7, #12]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	20020000 	.word	0x20020000
 8004f30:	00000400 	.word	0x00000400
 8004f34:	200008f8 	.word	0x200008f8
 8004f38:	20000e78 	.word	0x20000e78

08004f3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f40:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <SystemInit+0x20>)
 8004f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f46:	4a05      	ldr	r2, [pc, #20]	; (8004f5c <SystemInit+0x20>)
 8004f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f50:	bf00      	nop
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	e000ed00 	.word	0xe000ed00

08004f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004f64:	480d      	ldr	r0, [pc, #52]	; (8004f9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004f66:	490e      	ldr	r1, [pc, #56]	; (8004fa0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004f68:	4a0e      	ldr	r2, [pc, #56]	; (8004fa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f6c:	e002      	b.n	8004f74 <LoopCopyDataInit>

08004f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f72:	3304      	adds	r3, #4

08004f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f78:	d3f9      	bcc.n	8004f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f7a:	4a0b      	ldr	r2, [pc, #44]	; (8004fa8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004f7c:	4c0b      	ldr	r4, [pc, #44]	; (8004fac <LoopFillZerobss+0x26>)
  movs r3, #0
 8004f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f80:	e001      	b.n	8004f86 <LoopFillZerobss>

08004f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f84:	3204      	adds	r2, #4

08004f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f88:	d3fb      	bcc.n	8004f82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004f8a:	f7ff ffd7 	bl	8004f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f8e:	f003 fbc3 	bl	8008718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f92:	f7fe f90f 	bl	80031b4 <main>
  bx  lr    
 8004f96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004f98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004fa0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8004fa4:	080098ac 	.word	0x080098ac
  ldr r2, =_sbss
 8004fa8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004fac:	20000e74 	.word	0x20000e74

08004fb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004fb0:	e7fe      	b.n	8004fb0 <ADC_IRQHandler>
	...

08004fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004fb8:	4b0e      	ldr	r3, [pc, #56]	; (8004ff4 <HAL_Init+0x40>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a0d      	ldr	r2, [pc, #52]	; (8004ff4 <HAL_Init+0x40>)
 8004fbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004fc4:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <HAL_Init+0x40>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a0a      	ldr	r2, [pc, #40]	; (8004ff4 <HAL_Init+0x40>)
 8004fca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fd0:	4b08      	ldr	r3, [pc, #32]	; (8004ff4 <HAL_Init+0x40>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a07      	ldr	r2, [pc, #28]	; (8004ff4 <HAL_Init+0x40>)
 8004fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fdc:	2003      	movs	r0, #3
 8004fde:	f000 fd1b 	bl	8005a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	f000 f808 	bl	8004ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004fe8:	f7ff fb84 	bl	80046f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40023c00 	.word	0x40023c00

08004ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005000:	4b12      	ldr	r3, [pc, #72]	; (800504c <HAL_InitTick+0x54>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	4b12      	ldr	r3, [pc, #72]	; (8005050 <HAL_InitTick+0x58>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	4619      	mov	r1, r3
 800500a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800500e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005012:	fbb2 f3f3 	udiv	r3, r2, r3
 8005016:	4618      	mov	r0, r3
 8005018:	f000 fd33 	bl	8005a82 <HAL_SYSTICK_Config>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e00e      	b.n	8005044 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b0f      	cmp	r3, #15
 800502a:	d80a      	bhi.n	8005042 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800502c:	2200      	movs	r2, #0
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	f04f 30ff 	mov.w	r0, #4294967295
 8005034:	f000 fcfb 	bl	8005a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005038:	4a06      	ldr	r2, [pc, #24]	; (8005054 <HAL_InitTick+0x5c>)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	e000      	b.n	8005044 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
}
 8005044:	4618      	mov	r0, r3
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	20000000 	.word	0x20000000
 8005050:	20000008 	.word	0x20000008
 8005054:	20000004 	.word	0x20000004

08005058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800505c:	4b06      	ldr	r3, [pc, #24]	; (8005078 <HAL_IncTick+0x20>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	4b06      	ldr	r3, [pc, #24]	; (800507c <HAL_IncTick+0x24>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4413      	add	r3, r2
 8005068:	4a04      	ldr	r2, [pc, #16]	; (800507c <HAL_IncTick+0x24>)
 800506a:	6013      	str	r3, [r2, #0]
}
 800506c:	bf00      	nop
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	20000008 	.word	0x20000008
 800507c:	20000e60 	.word	0x20000e60

08005080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
  return uwTick;
 8005084:	4b03      	ldr	r3, [pc, #12]	; (8005094 <HAL_GetTick+0x14>)
 8005086:	681b      	ldr	r3, [r3, #0]
}
 8005088:	4618      	mov	r0, r3
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	20000e60 	.word	0x20000e60

08005098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050a0:	f7ff ffee 	bl	8005080 <HAL_GetTick>
 80050a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b0:	d005      	beq.n	80050be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050b2:	4b0a      	ldr	r3, [pc, #40]	; (80050dc <HAL_Delay+0x44>)
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	461a      	mov	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80050be:	bf00      	nop
 80050c0:	f7ff ffde 	bl	8005080 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d8f7      	bhi.n	80050c0 <HAL_Delay+0x28>
  {
  }
}
 80050d0:	bf00      	nop
 80050d2:	bf00      	nop
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	20000008 	.word	0x20000008

080050e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050e8:	2300      	movs	r3, #0
 80050ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e033      	b.n	800515e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d109      	bne.n	8005112 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff fb20 	bl	8004744 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	f003 0310 	and.w	r3, r3, #16
 800511a:	2b00      	cmp	r3, #0
 800511c:	d118      	bne.n	8005150 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005126:	f023 0302 	bic.w	r3, r3, #2
 800512a:	f043 0202 	orr.w	r2, r3, #2
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 faa4 	bl	8005680 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	f023 0303 	bic.w	r3, r3, #3
 8005146:	f043 0201 	orr.w	r2, r3, #1
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	641a      	str	r2, [r3, #64]	; 0x40
 800514e:	e001      	b.n	8005154 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800515c:	7bfb      	ldrb	r3, [r7, #15]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800517a:	2b01      	cmp	r3, #1
 800517c:	d101      	bne.n	8005182 <HAL_ADC_Start+0x1a>
 800517e:	2302      	movs	r3, #2
 8005180:	e0b2      	b.n	80052e8 <HAL_ADC_Start+0x180>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b01      	cmp	r3, #1
 8005196:	d018      	beq.n	80051ca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80051a8:	4b52      	ldr	r3, [pc, #328]	; (80052f4 <HAL_ADC_Start+0x18c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a52      	ldr	r2, [pc, #328]	; (80052f8 <HAL_ADC_Start+0x190>)
 80051ae:	fba2 2303 	umull	r2, r3, r2, r3
 80051b2:	0c9a      	lsrs	r2, r3, #18
 80051b4:	4613      	mov	r3, r2
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	4413      	add	r3, r2
 80051ba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80051bc:	e002      	b.n	80051c4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f9      	bne.n	80051be <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d17a      	bne.n	80052ce <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80051e0:	f023 0301 	bic.w	r3, r3, #1
 80051e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d007      	beq.n	800520a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005202:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005216:	d106      	bne.n	8005226 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521c:	f023 0206 	bic.w	r2, r3, #6
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	645a      	str	r2, [r3, #68]	; 0x44
 8005224:	e002      	b.n	800522c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005234:	4b31      	ldr	r3, [pc, #196]	; (80052fc <HAL_ADC_Start+0x194>)
 8005236:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005240:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f003 031f 	and.w	r3, r3, #31
 800524a:	2b00      	cmp	r3, #0
 800524c:	d12a      	bne.n	80052a4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a2b      	ldr	r2, [pc, #172]	; (8005300 <HAL_ADC_Start+0x198>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d015      	beq.n	8005284 <HAL_ADC_Start+0x11c>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a29      	ldr	r2, [pc, #164]	; (8005304 <HAL_ADC_Start+0x19c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d105      	bne.n	800526e <HAL_ADC_Start+0x106>
 8005262:	4b26      	ldr	r3, [pc, #152]	; (80052fc <HAL_ADC_Start+0x194>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f003 031f 	and.w	r3, r3, #31
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a25      	ldr	r2, [pc, #148]	; (8005308 <HAL_ADC_Start+0x1a0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d136      	bne.n	80052e6 <HAL_ADC_Start+0x17e>
 8005278:	4b20      	ldr	r3, [pc, #128]	; (80052fc <HAL_ADC_Start+0x194>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f003 0310 	and.w	r3, r3, #16
 8005280:	2b00      	cmp	r3, #0
 8005282:	d130      	bne.n	80052e6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d129      	bne.n	80052e6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80052a0:	609a      	str	r2, [r3, #8]
 80052a2:	e020      	b.n	80052e6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a15      	ldr	r2, [pc, #84]	; (8005300 <HAL_ADC_Start+0x198>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d11b      	bne.n	80052e6 <HAL_ADC_Start+0x17e>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d114      	bne.n	80052e6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689a      	ldr	r2, [r3, #8]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80052ca:	609a      	str	r2, [r3, #8]
 80052cc:	e00b      	b.n	80052e6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	f043 0210 	orr.w	r2, r3, #16
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052de:	f043 0201 	orr.w	r2, r3, #1
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	20000000 	.word	0x20000000
 80052f8:	431bde83 	.word	0x431bde83
 80052fc:	40012300 	.word	0x40012300
 8005300:	40012000 	.word	0x40012000
 8005304:	40012100 	.word	0x40012100
 8005308:	40012200 	.word	0x40012200

0800530c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005316:	2300      	movs	r3, #0
 8005318:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005328:	d113      	bne.n	8005352 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005338:	d10b      	bne.n	8005352 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	f043 0220 	orr.w	r2, r3, #32
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e063      	b.n	800541a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005352:	f7ff fe95 	bl	8005080 <HAL_GetTick>
 8005356:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005358:	e021      	b.n	800539e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005360:	d01d      	beq.n	800539e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d007      	beq.n	8005378 <HAL_ADC_PollForConversion+0x6c>
 8005368:	f7ff fe8a 	bl	8005080 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d212      	bcs.n	800539e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b02      	cmp	r3, #2
 8005384:	d00b      	beq.n	800539e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	f043 0204 	orr.w	r2, r3, #4
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e03d      	b.n	800541a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d1d6      	bne.n	800535a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0212 	mvn.w	r2, #18
 80053b4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d123      	bne.n	8005418 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d11f      	bne.n	8005418 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d006      	beq.n	80053f4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d111      	bne.n	8005418 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d105      	bne.n	8005418 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005410:	f043 0201 	orr.w	r2, r3, #1
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005422:	b480      	push	{r7}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005430:	4618      	mov	r0, r3
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <HAL_ADC_ConfigChannel+0x1c>
 8005454:	2302      	movs	r3, #2
 8005456:	e105      	b.n	8005664 <HAL_ADC_ConfigChannel+0x228>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b09      	cmp	r3, #9
 8005466:	d925      	bls.n	80054b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68d9      	ldr	r1, [r3, #12]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	b29b      	uxth	r3, r3
 8005474:	461a      	mov	r2, r3
 8005476:	4613      	mov	r3, r2
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	4413      	add	r3, r2
 800547c:	3b1e      	subs	r3, #30
 800547e:	2207      	movs	r2, #7
 8005480:	fa02 f303 	lsl.w	r3, r2, r3
 8005484:	43da      	mvns	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	400a      	ands	r2, r1
 800548c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68d9      	ldr	r1, [r3, #12]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	b29b      	uxth	r3, r3
 800549e:	4618      	mov	r0, r3
 80054a0:	4603      	mov	r3, r0
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	4403      	add	r3, r0
 80054a6:	3b1e      	subs	r3, #30
 80054a8:	409a      	lsls	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	60da      	str	r2, [r3, #12]
 80054b2:	e022      	b.n	80054fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6919      	ldr	r1, [r3, #16]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	461a      	mov	r2, r3
 80054c2:	4613      	mov	r3, r2
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	4413      	add	r3, r2
 80054c8:	2207      	movs	r2, #7
 80054ca:	fa02 f303 	lsl.w	r3, r2, r3
 80054ce:	43da      	mvns	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	400a      	ands	r2, r1
 80054d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6919      	ldr	r1, [r3, #16]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	4618      	mov	r0, r3
 80054ea:	4603      	mov	r3, r0
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	4403      	add	r3, r0
 80054f0:	409a      	lsls	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2b06      	cmp	r3, #6
 8005500:	d824      	bhi.n	800554c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	4613      	mov	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	3b05      	subs	r3, #5
 8005514:	221f      	movs	r2, #31
 8005516:	fa02 f303 	lsl.w	r3, r2, r3
 800551a:	43da      	mvns	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	400a      	ands	r2, r1
 8005522:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	b29b      	uxth	r3, r3
 8005530:	4618      	mov	r0, r3
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	4613      	mov	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	3b05      	subs	r3, #5
 800553e:	fa00 f203 	lsl.w	r2, r0, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	635a      	str	r2, [r3, #52]	; 0x34
 800554a:	e04c      	b.n	80055e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2b0c      	cmp	r3, #12
 8005552:	d824      	bhi.n	800559e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	4613      	mov	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	3b23      	subs	r3, #35	; 0x23
 8005566:	221f      	movs	r2, #31
 8005568:	fa02 f303 	lsl.w	r3, r2, r3
 800556c:	43da      	mvns	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	400a      	ands	r2, r1
 8005574:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	b29b      	uxth	r3, r3
 8005582:	4618      	mov	r0, r3
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	4613      	mov	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	3b23      	subs	r3, #35	; 0x23
 8005590:	fa00 f203 	lsl.w	r2, r0, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	631a      	str	r2, [r3, #48]	; 0x30
 800559c:	e023      	b.n	80055e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	4613      	mov	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	3b41      	subs	r3, #65	; 0x41
 80055b0:	221f      	movs	r2, #31
 80055b2:	fa02 f303 	lsl.w	r3, r2, r3
 80055b6:	43da      	mvns	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	400a      	ands	r2, r1
 80055be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	4618      	mov	r0, r3
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	4613      	mov	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	3b41      	subs	r3, #65	; 0x41
 80055da:	fa00 f203 	lsl.w	r2, r0, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055e6:	4b22      	ldr	r3, [pc, #136]	; (8005670 <HAL_ADC_ConfigChannel+0x234>)
 80055e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a21      	ldr	r2, [pc, #132]	; (8005674 <HAL_ADC_ConfigChannel+0x238>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d109      	bne.n	8005608 <HAL_ADC_ConfigChannel+0x1cc>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b12      	cmp	r3, #18
 80055fa:	d105      	bne.n	8005608 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a19      	ldr	r2, [pc, #100]	; (8005674 <HAL_ADC_ConfigChannel+0x238>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d123      	bne.n	800565a <HAL_ADC_ConfigChannel+0x21e>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b10      	cmp	r3, #16
 8005618:	d003      	beq.n	8005622 <HAL_ADC_ConfigChannel+0x1e6>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b11      	cmp	r3, #17
 8005620:	d11b      	bne.n	800565a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b10      	cmp	r3, #16
 8005634:	d111      	bne.n	800565a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005636:	4b10      	ldr	r3, [pc, #64]	; (8005678 <HAL_ADC_ConfigChannel+0x23c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a10      	ldr	r2, [pc, #64]	; (800567c <HAL_ADC_ConfigChannel+0x240>)
 800563c:	fba2 2303 	umull	r2, r3, r2, r3
 8005640:	0c9a      	lsrs	r2, r3, #18
 8005642:	4613      	mov	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800564c:	e002      	b.n	8005654 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	3b01      	subs	r3, #1
 8005652:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f9      	bne.n	800564e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	40012300 	.word	0x40012300
 8005674:	40012000 	.word	0x40012000
 8005678:	20000000 	.word	0x20000000
 800567c:	431bde83 	.word	0x431bde83

08005680 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005688:	4b79      	ldr	r3, [pc, #484]	; (8005870 <ADC_Init+0x1f0>)
 800568a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	431a      	orrs	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6859      	ldr	r1, [r3, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	021a      	lsls	r2, r3, #8
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80056d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6859      	ldr	r1, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689a      	ldr	r2, [r3, #8]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6899      	ldr	r1, [r3, #8]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005712:	4a58      	ldr	r2, [pc, #352]	; (8005874 <ADC_Init+0x1f4>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d022      	beq.n	800575e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005726:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6899      	ldr	r1, [r3, #8]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005748:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6899      	ldr	r1, [r3, #8]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	609a      	str	r2, [r3, #8]
 800575c:	e00f      	b.n	800577e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800576c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800577c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0202 	bic.w	r2, r2, #2
 800578c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6899      	ldr	r1, [r3, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	7e1b      	ldrb	r3, [r3, #24]
 8005798:	005a      	lsls	r2, r3, #1
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d01b      	beq.n	80057e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80057ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6859      	ldr	r1, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	3b01      	subs	r3, #1
 80057d8:	035a      	lsls	r2, r3, #13
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]
 80057e2:	e007      	b.n	80057f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005802:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	3b01      	subs	r3, #1
 8005810:	051a      	lsls	r2, r3, #20
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005828:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6899      	ldr	r1, [r3, #8]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005836:	025a      	lsls	r2, r3, #9
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689a      	ldr	r2, [r3, #8]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800584e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6899      	ldr	r1, [r3, #8]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	029a      	lsls	r2, r3, #10
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	609a      	str	r2, [r3, #8]
}
 8005864:	bf00      	nop
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	40012300 	.word	0x40012300
 8005874:	0f000001 	.word	0x0f000001

08005878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f003 0307 	and.w	r3, r3, #7
 8005886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005888:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <__NVIC_SetPriorityGrouping+0x44>)
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005894:	4013      	ands	r3, r2
 8005896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80058a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058aa:	4a04      	ldr	r2, [pc, #16]	; (80058bc <__NVIC_SetPriorityGrouping+0x44>)
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	60d3      	str	r3, [r2, #12]
}
 80058b0:	bf00      	nop
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	e000ed00 	.word	0xe000ed00

080058c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058c0:	b480      	push	{r7}
 80058c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058c4:	4b04      	ldr	r3, [pc, #16]	; (80058d8 <__NVIC_GetPriorityGrouping+0x18>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	0a1b      	lsrs	r3, r3, #8
 80058ca:	f003 0307 	and.w	r3, r3, #7
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	e000ed00 	.word	0xe000ed00

080058dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	4603      	mov	r3, r0
 80058e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	db0b      	blt.n	8005906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058ee:	79fb      	ldrb	r3, [r7, #7]
 80058f0:	f003 021f 	and.w	r2, r3, #31
 80058f4:	4907      	ldr	r1, [pc, #28]	; (8005914 <__NVIC_EnableIRQ+0x38>)
 80058f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058fa:	095b      	lsrs	r3, r3, #5
 80058fc:	2001      	movs	r0, #1
 80058fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	e000e100 	.word	0xe000e100

08005918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	4603      	mov	r3, r0
 8005920:	6039      	str	r1, [r7, #0]
 8005922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005928:	2b00      	cmp	r3, #0
 800592a:	db0a      	blt.n	8005942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	b2da      	uxtb	r2, r3
 8005930:	490c      	ldr	r1, [pc, #48]	; (8005964 <__NVIC_SetPriority+0x4c>)
 8005932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005936:	0112      	lsls	r2, r2, #4
 8005938:	b2d2      	uxtb	r2, r2
 800593a:	440b      	add	r3, r1
 800593c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005940:	e00a      	b.n	8005958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	b2da      	uxtb	r2, r3
 8005946:	4908      	ldr	r1, [pc, #32]	; (8005968 <__NVIC_SetPriority+0x50>)
 8005948:	79fb      	ldrb	r3, [r7, #7]
 800594a:	f003 030f 	and.w	r3, r3, #15
 800594e:	3b04      	subs	r3, #4
 8005950:	0112      	lsls	r2, r2, #4
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	440b      	add	r3, r1
 8005956:	761a      	strb	r2, [r3, #24]
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	e000e100 	.word	0xe000e100
 8005968:	e000ed00 	.word	0xe000ed00

0800596c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800596c:	b480      	push	{r7}
 800596e:	b089      	sub	sp, #36	; 0x24
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f003 0307 	and.w	r3, r3, #7
 800597e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	f1c3 0307 	rsb	r3, r3, #7
 8005986:	2b04      	cmp	r3, #4
 8005988:	bf28      	it	cs
 800598a:	2304      	movcs	r3, #4
 800598c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	3304      	adds	r3, #4
 8005992:	2b06      	cmp	r3, #6
 8005994:	d902      	bls.n	800599c <NVIC_EncodePriority+0x30>
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	3b03      	subs	r3, #3
 800599a:	e000      	b.n	800599e <NVIC_EncodePriority+0x32>
 800599c:	2300      	movs	r3, #0
 800599e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059a0:	f04f 32ff 	mov.w	r2, #4294967295
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	fa02 f303 	lsl.w	r3, r2, r3
 80059aa:	43da      	mvns	r2, r3
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	401a      	ands	r2, r3
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059b4:	f04f 31ff 	mov.w	r1, #4294967295
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	fa01 f303 	lsl.w	r3, r1, r3
 80059be:	43d9      	mvns	r1, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059c4:	4313      	orrs	r3, r2
         );
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3724      	adds	r7, #36	; 0x24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
	...

080059d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3b01      	subs	r3, #1
 80059e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059e4:	d301      	bcc.n	80059ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059e6:	2301      	movs	r3, #1
 80059e8:	e00f      	b.n	8005a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059ea:	4a0a      	ldr	r2, [pc, #40]	; (8005a14 <SysTick_Config+0x40>)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059f2:	210f      	movs	r1, #15
 80059f4:	f04f 30ff 	mov.w	r0, #4294967295
 80059f8:	f7ff ff8e 	bl	8005918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059fc:	4b05      	ldr	r3, [pc, #20]	; (8005a14 <SysTick_Config+0x40>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a02:	4b04      	ldr	r3, [pc, #16]	; (8005a14 <SysTick_Config+0x40>)
 8005a04:	2207      	movs	r2, #7
 8005a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	e000e010 	.word	0xe000e010

08005a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7ff ff29 	bl	8005878 <__NVIC_SetPriorityGrouping>
}
 8005a26:	bf00      	nop
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b086      	sub	sp, #24
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	4603      	mov	r3, r0
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	607a      	str	r2, [r7, #4]
 8005a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a40:	f7ff ff3e 	bl	80058c0 <__NVIC_GetPriorityGrouping>
 8005a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	68b9      	ldr	r1, [r7, #8]
 8005a4a:	6978      	ldr	r0, [r7, #20]
 8005a4c:	f7ff ff8e 	bl	800596c <NVIC_EncodePriority>
 8005a50:	4602      	mov	r2, r0
 8005a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a56:	4611      	mov	r1, r2
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7ff ff5d 	bl	8005918 <__NVIC_SetPriority>
}
 8005a5e:	bf00      	nop
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b082      	sub	sp, #8
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff ff31 	bl	80058dc <__NVIC_EnableIRQ>
}
 8005a7a:	bf00      	nop
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b082      	sub	sp, #8
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7ff ffa2 	bl	80059d4 <SysTick_Config>
 8005a90:	4603      	mov	r3, r0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005aa8:	f7ff faea 	bl	8005080 <HAL_GetTick>
 8005aac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d008      	beq.n	8005acc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2280      	movs	r2, #128	; 0x80
 8005abe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e052      	b.n	8005b72 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 0216 	bic.w	r2, r2, #22
 8005ada:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695a      	ldr	r2, [r3, #20]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005aea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d103      	bne.n	8005afc <HAL_DMA_Abort+0x62>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d007      	beq.n	8005b0c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0208 	bic.w	r2, r2, #8
 8005b0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 0201 	bic.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b1c:	e013      	b.n	8005b46 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b1e:	f7ff faaf 	bl	8005080 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	2b05      	cmp	r3, #5
 8005b2a:	d90c      	bls.n	8005b46 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2203      	movs	r2, #3
 8005b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e015      	b.n	8005b72 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1e4      	bne.n	8005b1e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b58:	223f      	movs	r2, #63	; 0x3f
 8005b5a:	409a      	lsls	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d004      	beq.n	8005b98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2280      	movs	r2, #128	; 0x80
 8005b92:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e00c      	b.n	8005bb2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2205      	movs	r2, #5
 8005b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0201 	bic.w	r2, r2, #1
 8005bae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b089      	sub	sp, #36	; 0x24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	61fb      	str	r3, [r7, #28]
 8005bda:	e16b      	b.n	8005eb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005bdc:	2201      	movs	r2, #1
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	fa02 f303 	lsl.w	r3, r2, r3
 8005be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4013      	ands	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	f040 815a 	bne.w	8005eae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d005      	beq.n	8005c12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d130      	bne.n	8005c74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	2203      	movs	r2, #3
 8005c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c22:	43db      	mvns	r3, r3
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	4013      	ands	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	fa02 f303 	lsl.w	r3, r2, r3
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c48:	2201      	movs	r2, #1
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c50:	43db      	mvns	r3, r3
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	4013      	ands	r3, r2
 8005c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	091b      	lsrs	r3, r3, #4
 8005c5e:	f003 0201 	and.w	r2, r3, #1
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	fa02 f303 	lsl.w	r3, r2, r3
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f003 0303 	and.w	r3, r3, #3
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d017      	beq.n	8005cb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	2203      	movs	r2, #3
 8005c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c90:	43db      	mvns	r3, r3
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	4013      	ands	r3, r2
 8005c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f003 0303 	and.w	r3, r3, #3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d123      	bne.n	8005d04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	08da      	lsrs	r2, r3, #3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3208      	adds	r2, #8
 8005cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	220f      	movs	r2, #15
 8005cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd8:	43db      	mvns	r3, r3
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	08da      	lsrs	r2, r3, #3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3208      	adds	r2, #8
 8005cfe:	69b9      	ldr	r1, [r7, #24]
 8005d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	2203      	movs	r2, #3
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	43db      	mvns	r3, r3
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f003 0203 	and.w	r2, r3, #3
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 80b4 	beq.w	8005eae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	4b60      	ldr	r3, [pc, #384]	; (8005ecc <HAL_GPIO_Init+0x30c>)
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4e:	4a5f      	ldr	r2, [pc, #380]	; (8005ecc <HAL_GPIO_Init+0x30c>)
 8005d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d54:	6453      	str	r3, [r2, #68]	; 0x44
 8005d56:	4b5d      	ldr	r3, [pc, #372]	; (8005ecc <HAL_GPIO_Init+0x30c>)
 8005d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d62:	4a5b      	ldr	r2, [pc, #364]	; (8005ed0 <HAL_GPIO_Init+0x310>)
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	089b      	lsrs	r3, r3, #2
 8005d68:	3302      	adds	r3, #2
 8005d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	f003 0303 	and.w	r3, r3, #3
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	220f      	movs	r2, #15
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	43db      	mvns	r3, r3
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	4013      	ands	r3, r2
 8005d84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a52      	ldr	r2, [pc, #328]	; (8005ed4 <HAL_GPIO_Init+0x314>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d02b      	beq.n	8005de6 <HAL_GPIO_Init+0x226>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a51      	ldr	r2, [pc, #324]	; (8005ed8 <HAL_GPIO_Init+0x318>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d025      	beq.n	8005de2 <HAL_GPIO_Init+0x222>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a50      	ldr	r2, [pc, #320]	; (8005edc <HAL_GPIO_Init+0x31c>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d01f      	beq.n	8005dde <HAL_GPIO_Init+0x21e>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a4f      	ldr	r2, [pc, #316]	; (8005ee0 <HAL_GPIO_Init+0x320>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d019      	beq.n	8005dda <HAL_GPIO_Init+0x21a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a4e      	ldr	r2, [pc, #312]	; (8005ee4 <HAL_GPIO_Init+0x324>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d013      	beq.n	8005dd6 <HAL_GPIO_Init+0x216>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a4d      	ldr	r2, [pc, #308]	; (8005ee8 <HAL_GPIO_Init+0x328>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d00d      	beq.n	8005dd2 <HAL_GPIO_Init+0x212>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a4c      	ldr	r2, [pc, #304]	; (8005eec <HAL_GPIO_Init+0x32c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d007      	beq.n	8005dce <HAL_GPIO_Init+0x20e>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a4b      	ldr	r2, [pc, #300]	; (8005ef0 <HAL_GPIO_Init+0x330>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d101      	bne.n	8005dca <HAL_GPIO_Init+0x20a>
 8005dc6:	2307      	movs	r3, #7
 8005dc8:	e00e      	b.n	8005de8 <HAL_GPIO_Init+0x228>
 8005dca:	2308      	movs	r3, #8
 8005dcc:	e00c      	b.n	8005de8 <HAL_GPIO_Init+0x228>
 8005dce:	2306      	movs	r3, #6
 8005dd0:	e00a      	b.n	8005de8 <HAL_GPIO_Init+0x228>
 8005dd2:	2305      	movs	r3, #5
 8005dd4:	e008      	b.n	8005de8 <HAL_GPIO_Init+0x228>
 8005dd6:	2304      	movs	r3, #4
 8005dd8:	e006      	b.n	8005de8 <HAL_GPIO_Init+0x228>
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e004      	b.n	8005de8 <HAL_GPIO_Init+0x228>
 8005dde:	2302      	movs	r3, #2
 8005de0:	e002      	b.n	8005de8 <HAL_GPIO_Init+0x228>
 8005de2:	2301      	movs	r3, #1
 8005de4:	e000      	b.n	8005de8 <HAL_GPIO_Init+0x228>
 8005de6:	2300      	movs	r3, #0
 8005de8:	69fa      	ldr	r2, [r7, #28]
 8005dea:	f002 0203 	and.w	r2, r2, #3
 8005dee:	0092      	lsls	r2, r2, #2
 8005df0:	4093      	lsls	r3, r2
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005df8:	4935      	ldr	r1, [pc, #212]	; (8005ed0 <HAL_GPIO_Init+0x310>)
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	089b      	lsrs	r3, r3, #2
 8005dfe:	3302      	adds	r3, #2
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e06:	4b3b      	ldr	r3, [pc, #236]	; (8005ef4 <HAL_GPIO_Init+0x334>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	43db      	mvns	r3, r3
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	4013      	ands	r3, r2
 8005e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e2a:	4a32      	ldr	r2, [pc, #200]	; (8005ef4 <HAL_GPIO_Init+0x334>)
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005e30:	4b30      	ldr	r3, [pc, #192]	; (8005ef4 <HAL_GPIO_Init+0x334>)
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	43db      	mvns	r3, r3
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e54:	4a27      	ldr	r2, [pc, #156]	; (8005ef4 <HAL_GPIO_Init+0x334>)
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e5a:	4b26      	ldr	r3, [pc, #152]	; (8005ef4 <HAL_GPIO_Init+0x334>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	43db      	mvns	r3, r3
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	4013      	ands	r3, r2
 8005e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005e76:	69ba      	ldr	r2, [r7, #24]
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e7e:	4a1d      	ldr	r2, [pc, #116]	; (8005ef4 <HAL_GPIO_Init+0x334>)
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e84:	4b1b      	ldr	r3, [pc, #108]	; (8005ef4 <HAL_GPIO_Init+0x334>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	43db      	mvns	r3, r3
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	4013      	ands	r3, r2
 8005e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d003      	beq.n	8005ea8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ea8:	4a12      	ldr	r2, [pc, #72]	; (8005ef4 <HAL_GPIO_Init+0x334>)
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	61fb      	str	r3, [r7, #28]
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	2b0f      	cmp	r3, #15
 8005eb8:	f67f ae90 	bls.w	8005bdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ebc:	bf00      	nop
 8005ebe:	bf00      	nop
 8005ec0:	3724      	adds	r7, #36	; 0x24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40023800 	.word	0x40023800
 8005ed0:	40013800 	.word	0x40013800
 8005ed4:	40020000 	.word	0x40020000
 8005ed8:	40020400 	.word	0x40020400
 8005edc:	40020800 	.word	0x40020800
 8005ee0:	40020c00 	.word	0x40020c00
 8005ee4:	40021000 	.word	0x40021000
 8005ee8:	40021400 	.word	0x40021400
 8005eec:	40021800 	.word	0x40021800
 8005ef0:	40021c00 	.word	0x40021c00
 8005ef4:	40013c00 	.word	0x40013c00

08005ef8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	460b      	mov	r3, r1
 8005f02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691a      	ldr	r2, [r3, #16]
 8005f08:	887b      	ldrh	r3, [r7, #2]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f10:	2301      	movs	r3, #1
 8005f12:	73fb      	strb	r3, [r7, #15]
 8005f14:	e001      	b.n	8005f1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f16:	2300      	movs	r3, #0
 8005f18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	460b      	mov	r3, r1
 8005f32:	807b      	strh	r3, [r7, #2]
 8005f34:	4613      	mov	r3, r2
 8005f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f38:	787b      	ldrb	r3, [r7, #1]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f3e:	887a      	ldrh	r2, [r7, #2]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f44:	e003      	b.n	8005f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f46:	887b      	ldrh	r3, [r7, #2]
 8005f48:	041a      	lsls	r2, r3, #16
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	619a      	str	r2, [r3, #24]
}
 8005f4e:	bf00      	nop
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
	...

08005f5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	4603      	mov	r3, r0
 8005f64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005f66:	4b08      	ldr	r3, [pc, #32]	; (8005f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f68:	695a      	ldr	r2, [r3, #20]
 8005f6a:	88fb      	ldrh	r3, [r7, #6]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d006      	beq.n	8005f80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f72:	4a05      	ldr	r2, [pc, #20]	; (8005f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f74:	88fb      	ldrh	r3, [r7, #6]
 8005f76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f78:	88fb      	ldrh	r3, [r7, #6]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fd f82e 	bl	8002fdc <HAL_GPIO_EXTI_Callback>
  }
}
 8005f80:	bf00      	nop
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	40013c00 	.word	0x40013c00

08005f8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e264      	b.n	8006468 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d075      	beq.n	8006096 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005faa:	4ba3      	ldr	r3, [pc, #652]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 030c 	and.w	r3, r3, #12
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d00c      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fb6:	4ba0      	ldr	r3, [pc, #640]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fbe:	2b08      	cmp	r3, #8
 8005fc0:	d112      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fc2:	4b9d      	ldr	r3, [pc, #628]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fce:	d10b      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fd0:	4b99      	ldr	r3, [pc, #612]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d05b      	beq.n	8006094 <HAL_RCC_OscConfig+0x108>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d157      	bne.n	8006094 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e23f      	b.n	8006468 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ff0:	d106      	bne.n	8006000 <HAL_RCC_OscConfig+0x74>
 8005ff2:	4b91      	ldr	r3, [pc, #580]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a90      	ldr	r2, [pc, #576]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 8005ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	e01d      	b.n	800603c <HAL_RCC_OscConfig+0xb0>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006008:	d10c      	bne.n	8006024 <HAL_RCC_OscConfig+0x98>
 800600a:	4b8b      	ldr	r3, [pc, #556]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a8a      	ldr	r2, [pc, #552]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 8006010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006014:	6013      	str	r3, [r2, #0]
 8006016:	4b88      	ldr	r3, [pc, #544]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a87      	ldr	r2, [pc, #540]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 800601c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	e00b      	b.n	800603c <HAL_RCC_OscConfig+0xb0>
 8006024:	4b84      	ldr	r3, [pc, #528]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a83      	ldr	r2, [pc, #524]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 800602a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	4b81      	ldr	r3, [pc, #516]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a80      	ldr	r2, [pc, #512]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 8006036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800603a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d013      	beq.n	800606c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006044:	f7ff f81c 	bl	8005080 <HAL_GetTick>
 8006048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800604a:	e008      	b.n	800605e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800604c:	f7ff f818 	bl	8005080 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b64      	cmp	r3, #100	; 0x64
 8006058:	d901      	bls.n	800605e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e204      	b.n	8006468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800605e:	4b76      	ldr	r3, [pc, #472]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0f0      	beq.n	800604c <HAL_RCC_OscConfig+0xc0>
 800606a:	e014      	b.n	8006096 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800606c:	f7ff f808 	bl	8005080 <HAL_GetTick>
 8006070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006074:	f7ff f804 	bl	8005080 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b64      	cmp	r3, #100	; 0x64
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e1f0      	b.n	8006468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006086:	4b6c      	ldr	r3, [pc, #432]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1f0      	bne.n	8006074 <HAL_RCC_OscConfig+0xe8>
 8006092:	e000      	b.n	8006096 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d063      	beq.n	800616a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060a2:	4b65      	ldr	r3, [pc, #404]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f003 030c 	and.w	r3, r3, #12
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00b      	beq.n	80060c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060ae:	4b62      	ldr	r3, [pc, #392]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060b6:	2b08      	cmp	r3, #8
 80060b8:	d11c      	bne.n	80060f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060ba:	4b5f      	ldr	r3, [pc, #380]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d116      	bne.n	80060f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060c6:	4b5c      	ldr	r3, [pc, #368]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d005      	beq.n	80060de <HAL_RCC_OscConfig+0x152>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d001      	beq.n	80060de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e1c4      	b.n	8006468 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060de:	4b56      	ldr	r3, [pc, #344]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	4952      	ldr	r1, [pc, #328]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060f2:	e03a      	b.n	800616a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d020      	beq.n	800613e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060fc:	4b4f      	ldr	r3, [pc, #316]	; (800623c <HAL_RCC_OscConfig+0x2b0>)
 80060fe:	2201      	movs	r2, #1
 8006100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006102:	f7fe ffbd 	bl	8005080 <HAL_GetTick>
 8006106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006108:	e008      	b.n	800611c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800610a:	f7fe ffb9 	bl	8005080 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	2b02      	cmp	r3, #2
 8006116:	d901      	bls.n	800611c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e1a5      	b.n	8006468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800611c:	4b46      	ldr	r3, [pc, #280]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b00      	cmp	r3, #0
 8006126:	d0f0      	beq.n	800610a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006128:	4b43      	ldr	r3, [pc, #268]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	4940      	ldr	r1, [pc, #256]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 8006138:	4313      	orrs	r3, r2
 800613a:	600b      	str	r3, [r1, #0]
 800613c:	e015      	b.n	800616a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800613e:	4b3f      	ldr	r3, [pc, #252]	; (800623c <HAL_RCC_OscConfig+0x2b0>)
 8006140:	2200      	movs	r2, #0
 8006142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006144:	f7fe ff9c 	bl	8005080 <HAL_GetTick>
 8006148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800614a:	e008      	b.n	800615e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800614c:	f7fe ff98 	bl	8005080 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e184      	b.n	8006468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800615e:	4b36      	ldr	r3, [pc, #216]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1f0      	bne.n	800614c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0308 	and.w	r3, r3, #8
 8006172:	2b00      	cmp	r3, #0
 8006174:	d030      	beq.n	80061d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d016      	beq.n	80061ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800617e:	4b30      	ldr	r3, [pc, #192]	; (8006240 <HAL_RCC_OscConfig+0x2b4>)
 8006180:	2201      	movs	r2, #1
 8006182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006184:	f7fe ff7c 	bl	8005080 <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800618a:	e008      	b.n	800619e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800618c:	f7fe ff78 	bl	8005080 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b02      	cmp	r3, #2
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e164      	b.n	8006468 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800619e:	4b26      	ldr	r3, [pc, #152]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 80061a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d0f0      	beq.n	800618c <HAL_RCC_OscConfig+0x200>
 80061aa:	e015      	b.n	80061d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061ac:	4b24      	ldr	r3, [pc, #144]	; (8006240 <HAL_RCC_OscConfig+0x2b4>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061b2:	f7fe ff65 	bl	8005080 <HAL_GetTick>
 80061b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061b8:	e008      	b.n	80061cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061ba:	f7fe ff61 	bl	8005080 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d901      	bls.n	80061cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e14d      	b.n	8006468 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061cc:	4b1a      	ldr	r3, [pc, #104]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 80061ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1f0      	bne.n	80061ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0304 	and.w	r3, r3, #4
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 80a0 	beq.w	8006326 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061e6:	2300      	movs	r3, #0
 80061e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061ea:	4b13      	ldr	r3, [pc, #76]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 80061ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10f      	bne.n	8006216 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061f6:	2300      	movs	r3, #0
 80061f8:	60bb      	str	r3, [r7, #8]
 80061fa:	4b0f      	ldr	r3, [pc, #60]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	4a0e      	ldr	r2, [pc, #56]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 8006200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006204:	6413      	str	r3, [r2, #64]	; 0x40
 8006206:	4b0c      	ldr	r3, [pc, #48]	; (8006238 <HAL_RCC_OscConfig+0x2ac>)
 8006208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800620e:	60bb      	str	r3, [r7, #8]
 8006210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006212:	2301      	movs	r3, #1
 8006214:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006216:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <HAL_RCC_OscConfig+0x2b8>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621e:	2b00      	cmp	r3, #0
 8006220:	d121      	bne.n	8006266 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006222:	4b08      	ldr	r3, [pc, #32]	; (8006244 <HAL_RCC_OscConfig+0x2b8>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a07      	ldr	r2, [pc, #28]	; (8006244 <HAL_RCC_OscConfig+0x2b8>)
 8006228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800622c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800622e:	f7fe ff27 	bl	8005080 <HAL_GetTick>
 8006232:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006234:	e011      	b.n	800625a <HAL_RCC_OscConfig+0x2ce>
 8006236:	bf00      	nop
 8006238:	40023800 	.word	0x40023800
 800623c:	42470000 	.word	0x42470000
 8006240:	42470e80 	.word	0x42470e80
 8006244:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006248:	f7fe ff1a 	bl	8005080 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b02      	cmp	r3, #2
 8006254:	d901      	bls.n	800625a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e106      	b.n	8006468 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800625a:	4b85      	ldr	r3, [pc, #532]	; (8006470 <HAL_RCC_OscConfig+0x4e4>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0f0      	beq.n	8006248 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d106      	bne.n	800627c <HAL_RCC_OscConfig+0x2f0>
 800626e:	4b81      	ldr	r3, [pc, #516]	; (8006474 <HAL_RCC_OscConfig+0x4e8>)
 8006270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006272:	4a80      	ldr	r2, [pc, #512]	; (8006474 <HAL_RCC_OscConfig+0x4e8>)
 8006274:	f043 0301 	orr.w	r3, r3, #1
 8006278:	6713      	str	r3, [r2, #112]	; 0x70
 800627a:	e01c      	b.n	80062b6 <HAL_RCC_OscConfig+0x32a>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	2b05      	cmp	r3, #5
 8006282:	d10c      	bne.n	800629e <HAL_RCC_OscConfig+0x312>
 8006284:	4b7b      	ldr	r3, [pc, #492]	; (8006474 <HAL_RCC_OscConfig+0x4e8>)
 8006286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006288:	4a7a      	ldr	r2, [pc, #488]	; (8006474 <HAL_RCC_OscConfig+0x4e8>)
 800628a:	f043 0304 	orr.w	r3, r3, #4
 800628e:	6713      	str	r3, [r2, #112]	; 0x70
 8006290:	4b78      	ldr	r3, [pc, #480]	; (8006474 <HAL_RCC_OscConfig+0x4e8>)
 8006292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006294:	4a77      	ldr	r2, [pc, #476]	; (8006474 <HAL_RCC_OscConfig+0x4e8>)
 8006296:	f043 0301 	orr.w	r3, r3, #1
 800629a:	6713      	str	r3, [r2, #112]	; 0x70
 800629c:	e00b      	b.n	80062b6 <HAL_RCC_OscConfig+0x32a>
 800629e:	4b75      	ldr	r3, [pc, #468]	; (8006474 <HAL_RCC_OscConfig+0x4e8>)
 80062a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a2:	4a74      	ldr	r2, [pc, #464]	; (8006474 <HAL_RCC_OscConfig+0x4e8>)
 80062a4:	f023 0301 	bic.w	r3, r3, #1
 80062a8:	6713      	str	r3, [r2, #112]	; 0x70
 80062aa:	4b72      	ldr	r3, [pc, #456]	; (8006474 <HAL_RCC_OscConfig+0x4e8>)
 80062ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ae:	4a71      	ldr	r2, [pc, #452]	; (8006474 <HAL_RCC_OscConfig+0x4e8>)
 80062b0:	f023 0304 	bic.w	r3, r3, #4
 80062b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d015      	beq.n	80062ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062be:	f7fe fedf 	bl	8005080 <HAL_GetTick>
 80062c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062c4:	e00a      	b.n	80062dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062c6:	f7fe fedb 	bl	8005080 <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d901      	bls.n	80062dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e0c5      	b.n	8006468 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062dc:	4b65      	ldr	r3, [pc, #404]	; (8006474 <HAL_RCC_OscConfig+0x4e8>)
 80062de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d0ee      	beq.n	80062c6 <HAL_RCC_OscConfig+0x33a>
 80062e8:	e014      	b.n	8006314 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062ea:	f7fe fec9 	bl	8005080 <HAL_GetTick>
 80062ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062f0:	e00a      	b.n	8006308 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062f2:	f7fe fec5 	bl	8005080 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006300:	4293      	cmp	r3, r2
 8006302:	d901      	bls.n	8006308 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e0af      	b.n	8006468 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006308:	4b5a      	ldr	r3, [pc, #360]	; (8006474 <HAL_RCC_OscConfig+0x4e8>)
 800630a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1ee      	bne.n	80062f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006314:	7dfb      	ldrb	r3, [r7, #23]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d105      	bne.n	8006326 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800631a:	4b56      	ldr	r3, [pc, #344]	; (8006474 <HAL_RCC_OscConfig+0x4e8>)
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	4a55      	ldr	r2, [pc, #340]	; (8006474 <HAL_RCC_OscConfig+0x4e8>)
 8006320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006324:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 809b 	beq.w	8006466 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006330:	4b50      	ldr	r3, [pc, #320]	; (8006474 <HAL_RCC_OscConfig+0x4e8>)
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f003 030c 	and.w	r3, r3, #12
 8006338:	2b08      	cmp	r3, #8
 800633a:	d05c      	beq.n	80063f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	2b02      	cmp	r3, #2
 8006342:	d141      	bne.n	80063c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006344:	4b4c      	ldr	r3, [pc, #304]	; (8006478 <HAL_RCC_OscConfig+0x4ec>)
 8006346:	2200      	movs	r2, #0
 8006348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800634a:	f7fe fe99 	bl	8005080 <HAL_GetTick>
 800634e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006350:	e008      	b.n	8006364 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006352:	f7fe fe95 	bl	8005080 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d901      	bls.n	8006364 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e081      	b.n	8006468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006364:	4b43      	ldr	r3, [pc, #268]	; (8006474 <HAL_RCC_OscConfig+0x4e8>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1f0      	bne.n	8006352 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	69da      	ldr	r2, [r3, #28]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	431a      	orrs	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	019b      	lsls	r3, r3, #6
 8006380:	431a      	orrs	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006386:	085b      	lsrs	r3, r3, #1
 8006388:	3b01      	subs	r3, #1
 800638a:	041b      	lsls	r3, r3, #16
 800638c:	431a      	orrs	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006392:	061b      	lsls	r3, r3, #24
 8006394:	4937      	ldr	r1, [pc, #220]	; (8006474 <HAL_RCC_OscConfig+0x4e8>)
 8006396:	4313      	orrs	r3, r2
 8006398:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800639a:	4b37      	ldr	r3, [pc, #220]	; (8006478 <HAL_RCC_OscConfig+0x4ec>)
 800639c:	2201      	movs	r2, #1
 800639e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063a0:	f7fe fe6e 	bl	8005080 <HAL_GetTick>
 80063a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063a6:	e008      	b.n	80063ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063a8:	f7fe fe6a 	bl	8005080 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e056      	b.n	8006468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ba:	4b2e      	ldr	r3, [pc, #184]	; (8006474 <HAL_RCC_OscConfig+0x4e8>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d0f0      	beq.n	80063a8 <HAL_RCC_OscConfig+0x41c>
 80063c6:	e04e      	b.n	8006466 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063c8:	4b2b      	ldr	r3, [pc, #172]	; (8006478 <HAL_RCC_OscConfig+0x4ec>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ce:	f7fe fe57 	bl	8005080 <HAL_GetTick>
 80063d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063d4:	e008      	b.n	80063e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063d6:	f7fe fe53 	bl	8005080 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d901      	bls.n	80063e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e03f      	b.n	8006468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063e8:	4b22      	ldr	r3, [pc, #136]	; (8006474 <HAL_RCC_OscConfig+0x4e8>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1f0      	bne.n	80063d6 <HAL_RCC_OscConfig+0x44a>
 80063f4:	e037      	b.n	8006466 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e032      	b.n	8006468 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006402:	4b1c      	ldr	r3, [pc, #112]	; (8006474 <HAL_RCC_OscConfig+0x4e8>)
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d028      	beq.n	8006462 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800641a:	429a      	cmp	r2, r3
 800641c:	d121      	bne.n	8006462 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006428:	429a      	cmp	r2, r3
 800642a:	d11a      	bne.n	8006462 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006432:	4013      	ands	r3, r2
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006438:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800643a:	4293      	cmp	r3, r2
 800643c:	d111      	bne.n	8006462 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006448:	085b      	lsrs	r3, r3, #1
 800644a:	3b01      	subs	r3, #1
 800644c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800644e:	429a      	cmp	r2, r3
 8006450:	d107      	bne.n	8006462 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800645e:	429a      	cmp	r2, r3
 8006460:	d001      	beq.n	8006466 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e000      	b.n	8006468 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	40007000 	.word	0x40007000
 8006474:	40023800 	.word	0x40023800
 8006478:	42470060 	.word	0x42470060

0800647c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e0cc      	b.n	800662a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006490:	4b68      	ldr	r3, [pc, #416]	; (8006634 <HAL_RCC_ClockConfig+0x1b8>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0307 	and.w	r3, r3, #7
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	429a      	cmp	r2, r3
 800649c:	d90c      	bls.n	80064b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800649e:	4b65      	ldr	r3, [pc, #404]	; (8006634 <HAL_RCC_ClockConfig+0x1b8>)
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064a6:	4b63      	ldr	r3, [pc, #396]	; (8006634 <HAL_RCC_ClockConfig+0x1b8>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0307 	and.w	r3, r3, #7
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d001      	beq.n	80064b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e0b8      	b.n	800662a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0302 	and.w	r3, r3, #2
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d020      	beq.n	8006506 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d005      	beq.n	80064dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064d0:	4b59      	ldr	r3, [pc, #356]	; (8006638 <HAL_RCC_ClockConfig+0x1bc>)
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	4a58      	ldr	r2, [pc, #352]	; (8006638 <HAL_RCC_ClockConfig+0x1bc>)
 80064d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0308 	and.w	r3, r3, #8
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d005      	beq.n	80064f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064e8:	4b53      	ldr	r3, [pc, #332]	; (8006638 <HAL_RCC_ClockConfig+0x1bc>)
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	4a52      	ldr	r2, [pc, #328]	; (8006638 <HAL_RCC_ClockConfig+0x1bc>)
 80064ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064f4:	4b50      	ldr	r3, [pc, #320]	; (8006638 <HAL_RCC_ClockConfig+0x1bc>)
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	494d      	ldr	r1, [pc, #308]	; (8006638 <HAL_RCC_ClockConfig+0x1bc>)
 8006502:	4313      	orrs	r3, r2
 8006504:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b00      	cmp	r3, #0
 8006510:	d044      	beq.n	800659c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d107      	bne.n	800652a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800651a:	4b47      	ldr	r3, [pc, #284]	; (8006638 <HAL_RCC_ClockConfig+0x1bc>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d119      	bne.n	800655a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e07f      	b.n	800662a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	2b02      	cmp	r3, #2
 8006530:	d003      	beq.n	800653a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006536:	2b03      	cmp	r3, #3
 8006538:	d107      	bne.n	800654a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800653a:	4b3f      	ldr	r3, [pc, #252]	; (8006638 <HAL_RCC_ClockConfig+0x1bc>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d109      	bne.n	800655a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e06f      	b.n	800662a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800654a:	4b3b      	ldr	r3, [pc, #236]	; (8006638 <HAL_RCC_ClockConfig+0x1bc>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e067      	b.n	800662a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800655a:	4b37      	ldr	r3, [pc, #220]	; (8006638 <HAL_RCC_ClockConfig+0x1bc>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f023 0203 	bic.w	r2, r3, #3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	4934      	ldr	r1, [pc, #208]	; (8006638 <HAL_RCC_ClockConfig+0x1bc>)
 8006568:	4313      	orrs	r3, r2
 800656a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800656c:	f7fe fd88 	bl	8005080 <HAL_GetTick>
 8006570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006572:	e00a      	b.n	800658a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006574:	f7fe fd84 	bl	8005080 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006582:	4293      	cmp	r3, r2
 8006584:	d901      	bls.n	800658a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e04f      	b.n	800662a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800658a:	4b2b      	ldr	r3, [pc, #172]	; (8006638 <HAL_RCC_ClockConfig+0x1bc>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f003 020c 	and.w	r2, r3, #12
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	429a      	cmp	r2, r3
 800659a:	d1eb      	bne.n	8006574 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800659c:	4b25      	ldr	r3, [pc, #148]	; (8006634 <HAL_RCC_ClockConfig+0x1b8>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0307 	and.w	r3, r3, #7
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d20c      	bcs.n	80065c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065aa:	4b22      	ldr	r3, [pc, #136]	; (8006634 <HAL_RCC_ClockConfig+0x1b8>)
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	b2d2      	uxtb	r2, r2
 80065b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065b2:	4b20      	ldr	r3, [pc, #128]	; (8006634 <HAL_RCC_ClockConfig+0x1b8>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0307 	and.w	r3, r3, #7
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d001      	beq.n	80065c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e032      	b.n	800662a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0304 	and.w	r3, r3, #4
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d008      	beq.n	80065e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065d0:	4b19      	ldr	r3, [pc, #100]	; (8006638 <HAL_RCC_ClockConfig+0x1bc>)
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	4916      	ldr	r1, [pc, #88]	; (8006638 <HAL_RCC_ClockConfig+0x1bc>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0308 	and.w	r3, r3, #8
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d009      	beq.n	8006602 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065ee:	4b12      	ldr	r3, [pc, #72]	; (8006638 <HAL_RCC_ClockConfig+0x1bc>)
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	00db      	lsls	r3, r3, #3
 80065fc:	490e      	ldr	r1, [pc, #56]	; (8006638 <HAL_RCC_ClockConfig+0x1bc>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006602:	f000 f821 	bl	8006648 <HAL_RCC_GetSysClockFreq>
 8006606:	4602      	mov	r2, r0
 8006608:	4b0b      	ldr	r3, [pc, #44]	; (8006638 <HAL_RCC_ClockConfig+0x1bc>)
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	091b      	lsrs	r3, r3, #4
 800660e:	f003 030f 	and.w	r3, r3, #15
 8006612:	490a      	ldr	r1, [pc, #40]	; (800663c <HAL_RCC_ClockConfig+0x1c0>)
 8006614:	5ccb      	ldrb	r3, [r1, r3]
 8006616:	fa22 f303 	lsr.w	r3, r2, r3
 800661a:	4a09      	ldr	r2, [pc, #36]	; (8006640 <HAL_RCC_ClockConfig+0x1c4>)
 800661c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800661e:	4b09      	ldr	r3, [pc, #36]	; (8006644 <HAL_RCC_ClockConfig+0x1c8>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4618      	mov	r0, r3
 8006624:	f7fe fce8 	bl	8004ff8 <HAL_InitTick>

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	40023c00 	.word	0x40023c00
 8006638:	40023800 	.word	0x40023800
 800663c:	08009850 	.word	0x08009850
 8006640:	20000000 	.word	0x20000000
 8006644:	20000004 	.word	0x20000004

08006648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006648:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800664c:	b084      	sub	sp, #16
 800664e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006650:	2300      	movs	r3, #0
 8006652:	607b      	str	r3, [r7, #4]
 8006654:	2300      	movs	r3, #0
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	2300      	movs	r3, #0
 800665a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006660:	4b67      	ldr	r3, [pc, #412]	; (8006800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f003 030c 	and.w	r3, r3, #12
 8006668:	2b08      	cmp	r3, #8
 800666a:	d00d      	beq.n	8006688 <HAL_RCC_GetSysClockFreq+0x40>
 800666c:	2b08      	cmp	r3, #8
 800666e:	f200 80bd 	bhi.w	80067ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <HAL_RCC_GetSysClockFreq+0x34>
 8006676:	2b04      	cmp	r3, #4
 8006678:	d003      	beq.n	8006682 <HAL_RCC_GetSysClockFreq+0x3a>
 800667a:	e0b7      	b.n	80067ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800667c:	4b61      	ldr	r3, [pc, #388]	; (8006804 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800667e:	60bb      	str	r3, [r7, #8]
       break;
 8006680:	e0b7      	b.n	80067f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006682:	4b61      	ldr	r3, [pc, #388]	; (8006808 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006684:	60bb      	str	r3, [r7, #8]
      break;
 8006686:	e0b4      	b.n	80067f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006688:	4b5d      	ldr	r3, [pc, #372]	; (8006800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006690:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006692:	4b5b      	ldr	r3, [pc, #364]	; (8006800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d04d      	beq.n	800673a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800669e:	4b58      	ldr	r3, [pc, #352]	; (8006800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	099b      	lsrs	r3, r3, #6
 80066a4:	461a      	mov	r2, r3
 80066a6:	f04f 0300 	mov.w	r3, #0
 80066aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80066ae:	f04f 0100 	mov.w	r1, #0
 80066b2:	ea02 0800 	and.w	r8, r2, r0
 80066b6:	ea03 0901 	and.w	r9, r3, r1
 80066ba:	4640      	mov	r0, r8
 80066bc:	4649      	mov	r1, r9
 80066be:	f04f 0200 	mov.w	r2, #0
 80066c2:	f04f 0300 	mov.w	r3, #0
 80066c6:	014b      	lsls	r3, r1, #5
 80066c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80066cc:	0142      	lsls	r2, r0, #5
 80066ce:	4610      	mov	r0, r2
 80066d0:	4619      	mov	r1, r3
 80066d2:	ebb0 0008 	subs.w	r0, r0, r8
 80066d6:	eb61 0109 	sbc.w	r1, r1, r9
 80066da:	f04f 0200 	mov.w	r2, #0
 80066de:	f04f 0300 	mov.w	r3, #0
 80066e2:	018b      	lsls	r3, r1, #6
 80066e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80066e8:	0182      	lsls	r2, r0, #6
 80066ea:	1a12      	subs	r2, r2, r0
 80066ec:	eb63 0301 	sbc.w	r3, r3, r1
 80066f0:	f04f 0000 	mov.w	r0, #0
 80066f4:	f04f 0100 	mov.w	r1, #0
 80066f8:	00d9      	lsls	r1, r3, #3
 80066fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066fe:	00d0      	lsls	r0, r2, #3
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	eb12 0208 	adds.w	r2, r2, r8
 8006708:	eb43 0309 	adc.w	r3, r3, r9
 800670c:	f04f 0000 	mov.w	r0, #0
 8006710:	f04f 0100 	mov.w	r1, #0
 8006714:	0259      	lsls	r1, r3, #9
 8006716:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800671a:	0250      	lsls	r0, r2, #9
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	4610      	mov	r0, r2
 8006722:	4619      	mov	r1, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	461a      	mov	r2, r3
 8006728:	f04f 0300 	mov.w	r3, #0
 800672c:	f7fa f9c6 	bl	8000abc <__aeabi_uldivmod>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4613      	mov	r3, r2
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	e04a      	b.n	80067d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800673a:	4b31      	ldr	r3, [pc, #196]	; (8006800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	099b      	lsrs	r3, r3, #6
 8006740:	461a      	mov	r2, r3
 8006742:	f04f 0300 	mov.w	r3, #0
 8006746:	f240 10ff 	movw	r0, #511	; 0x1ff
 800674a:	f04f 0100 	mov.w	r1, #0
 800674e:	ea02 0400 	and.w	r4, r2, r0
 8006752:	ea03 0501 	and.w	r5, r3, r1
 8006756:	4620      	mov	r0, r4
 8006758:	4629      	mov	r1, r5
 800675a:	f04f 0200 	mov.w	r2, #0
 800675e:	f04f 0300 	mov.w	r3, #0
 8006762:	014b      	lsls	r3, r1, #5
 8006764:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006768:	0142      	lsls	r2, r0, #5
 800676a:	4610      	mov	r0, r2
 800676c:	4619      	mov	r1, r3
 800676e:	1b00      	subs	r0, r0, r4
 8006770:	eb61 0105 	sbc.w	r1, r1, r5
 8006774:	f04f 0200 	mov.w	r2, #0
 8006778:	f04f 0300 	mov.w	r3, #0
 800677c:	018b      	lsls	r3, r1, #6
 800677e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006782:	0182      	lsls	r2, r0, #6
 8006784:	1a12      	subs	r2, r2, r0
 8006786:	eb63 0301 	sbc.w	r3, r3, r1
 800678a:	f04f 0000 	mov.w	r0, #0
 800678e:	f04f 0100 	mov.w	r1, #0
 8006792:	00d9      	lsls	r1, r3, #3
 8006794:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006798:	00d0      	lsls	r0, r2, #3
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	1912      	adds	r2, r2, r4
 80067a0:	eb45 0303 	adc.w	r3, r5, r3
 80067a4:	f04f 0000 	mov.w	r0, #0
 80067a8:	f04f 0100 	mov.w	r1, #0
 80067ac:	0299      	lsls	r1, r3, #10
 80067ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80067b2:	0290      	lsls	r0, r2, #10
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4610      	mov	r0, r2
 80067ba:	4619      	mov	r1, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	461a      	mov	r2, r3
 80067c0:	f04f 0300 	mov.w	r3, #0
 80067c4:	f7fa f97a 	bl	8000abc <__aeabi_uldivmod>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	4613      	mov	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067d0:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	0c1b      	lsrs	r3, r3, #16
 80067d6:	f003 0303 	and.w	r3, r3, #3
 80067da:	3301      	adds	r3, #1
 80067dc:	005b      	lsls	r3, r3, #1
 80067de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e8:	60bb      	str	r3, [r7, #8]
      break;
 80067ea:	e002      	b.n	80067f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067ec:	4b05      	ldr	r3, [pc, #20]	; (8006804 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80067ee:	60bb      	str	r3, [r7, #8]
      break;
 80067f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067f2:	68bb      	ldr	r3, [r7, #8]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80067fe:	bf00      	nop
 8006800:	40023800 	.word	0x40023800
 8006804:	00f42400 	.word	0x00f42400
 8006808:	007a1200 	.word	0x007a1200

0800680c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800680c:	b480      	push	{r7}
 800680e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006810:	4b03      	ldr	r3, [pc, #12]	; (8006820 <HAL_RCC_GetHCLKFreq+0x14>)
 8006812:	681b      	ldr	r3, [r3, #0]
}
 8006814:	4618      	mov	r0, r3
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	20000000 	.word	0x20000000

08006824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006828:	f7ff fff0 	bl	800680c <HAL_RCC_GetHCLKFreq>
 800682c:	4602      	mov	r2, r0
 800682e:	4b05      	ldr	r3, [pc, #20]	; (8006844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	0a9b      	lsrs	r3, r3, #10
 8006834:	f003 0307 	and.w	r3, r3, #7
 8006838:	4903      	ldr	r1, [pc, #12]	; (8006848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800683a:	5ccb      	ldrb	r3, [r1, r3]
 800683c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006840:	4618      	mov	r0, r3
 8006842:	bd80      	pop	{r7, pc}
 8006844:	40023800 	.word	0x40023800
 8006848:	08009860 	.word	0x08009860

0800684c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006850:	f7ff ffdc 	bl	800680c <HAL_RCC_GetHCLKFreq>
 8006854:	4602      	mov	r2, r0
 8006856:	4b05      	ldr	r3, [pc, #20]	; (800686c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	0b5b      	lsrs	r3, r3, #13
 800685c:	f003 0307 	and.w	r3, r3, #7
 8006860:	4903      	ldr	r1, [pc, #12]	; (8006870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006862:	5ccb      	ldrb	r3, [r1, r3]
 8006864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006868:	4618      	mov	r0, r3
 800686a:	bd80      	pop	{r7, pc}
 800686c:	40023800 	.word	0x40023800
 8006870:	08009860 	.word	0x08009860

08006874 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e041      	b.n	800690a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d106      	bne.n	80068a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7fd fffa 	bl	8004894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2202      	movs	r2, #2
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	3304      	adds	r3, #4
 80068b0:	4619      	mov	r1, r3
 80068b2:	4610      	mov	r0, r2
 80068b4:	f000 fb42 	bl	8006f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b01      	cmp	r3, #1
 8006926:	d001      	beq.n	800692c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e046      	b.n	80069ba <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a23      	ldr	r2, [pc, #140]	; (80069c8 <HAL_TIM_Base_Start+0xb4>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d022      	beq.n	8006984 <HAL_TIM_Base_Start+0x70>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006946:	d01d      	beq.n	8006984 <HAL_TIM_Base_Start+0x70>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1f      	ldr	r2, [pc, #124]	; (80069cc <HAL_TIM_Base_Start+0xb8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d018      	beq.n	8006984 <HAL_TIM_Base_Start+0x70>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a1e      	ldr	r2, [pc, #120]	; (80069d0 <HAL_TIM_Base_Start+0xbc>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d013      	beq.n	8006984 <HAL_TIM_Base_Start+0x70>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a1c      	ldr	r2, [pc, #112]	; (80069d4 <HAL_TIM_Base_Start+0xc0>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00e      	beq.n	8006984 <HAL_TIM_Base_Start+0x70>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a1b      	ldr	r2, [pc, #108]	; (80069d8 <HAL_TIM_Base_Start+0xc4>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d009      	beq.n	8006984 <HAL_TIM_Base_Start+0x70>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a19      	ldr	r2, [pc, #100]	; (80069dc <HAL_TIM_Base_Start+0xc8>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d004      	beq.n	8006984 <HAL_TIM_Base_Start+0x70>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a18      	ldr	r2, [pc, #96]	; (80069e0 <HAL_TIM_Base_Start+0xcc>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d111      	bne.n	80069a8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b06      	cmp	r3, #6
 8006994:	d010      	beq.n	80069b8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f042 0201 	orr.w	r2, r2, #1
 80069a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a6:	e007      	b.n	80069b8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 0201 	orr.w	r2, r2, #1
 80069b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	40010000 	.word	0x40010000
 80069cc:	40000400 	.word	0x40000400
 80069d0:	40000800 	.word	0x40000800
 80069d4:	40000c00 	.word	0x40000c00
 80069d8:	40010400 	.word	0x40010400
 80069dc:	40014000 	.word	0x40014000
 80069e0:	40001800 	.word	0x40001800

080069e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e041      	b.n	8006a7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d106      	bne.n	8006a10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f839 	bl	8006a82 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	3304      	adds	r3, #4
 8006a20:	4619      	mov	r1, r3
 8006a22:	4610      	mov	r0, r2
 8006a24:	f000 fa8a 	bl	8006f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b083      	sub	sp, #12
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a8a:	bf00      	nop
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
	...

08006a98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d109      	bne.n	8006abc <HAL_TIM_PWM_Start+0x24>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	bf14      	ite	ne
 8006ab4:	2301      	movne	r3, #1
 8006ab6:	2300      	moveq	r3, #0
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	e022      	b.n	8006b02 <HAL_TIM_PWM_Start+0x6a>
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	2b04      	cmp	r3, #4
 8006ac0:	d109      	bne.n	8006ad6 <HAL_TIM_PWM_Start+0x3e>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	bf14      	ite	ne
 8006ace:	2301      	movne	r3, #1
 8006ad0:	2300      	moveq	r3, #0
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	e015      	b.n	8006b02 <HAL_TIM_PWM_Start+0x6a>
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2b08      	cmp	r3, #8
 8006ada:	d109      	bne.n	8006af0 <HAL_TIM_PWM_Start+0x58>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	bf14      	ite	ne
 8006ae8:	2301      	movne	r3, #1
 8006aea:	2300      	moveq	r3, #0
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	e008      	b.n	8006b02 <HAL_TIM_PWM_Start+0x6a>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	bf14      	ite	ne
 8006afc:	2301      	movne	r3, #1
 8006afe:	2300      	moveq	r3, #0
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e07c      	b.n	8006c04 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d104      	bne.n	8006b1a <HAL_TIM_PWM_Start+0x82>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b18:	e013      	b.n	8006b42 <HAL_TIM_PWM_Start+0xaa>
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b04      	cmp	r3, #4
 8006b1e:	d104      	bne.n	8006b2a <HAL_TIM_PWM_Start+0x92>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2202      	movs	r2, #2
 8006b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b28:	e00b      	b.n	8006b42 <HAL_TIM_PWM_Start+0xaa>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d104      	bne.n	8006b3a <HAL_TIM_PWM_Start+0xa2>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2202      	movs	r2, #2
 8006b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b38:	e003      	b.n	8006b42 <HAL_TIM_PWM_Start+0xaa>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2201      	movs	r2, #1
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fce0 	bl	8007510 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a2d      	ldr	r2, [pc, #180]	; (8006c0c <HAL_TIM_PWM_Start+0x174>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d004      	beq.n	8006b64 <HAL_TIM_PWM_Start+0xcc>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a2c      	ldr	r2, [pc, #176]	; (8006c10 <HAL_TIM_PWM_Start+0x178>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d101      	bne.n	8006b68 <HAL_TIM_PWM_Start+0xd0>
 8006b64:	2301      	movs	r3, #1
 8006b66:	e000      	b.n	8006b6a <HAL_TIM_PWM_Start+0xd2>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d007      	beq.n	8006b7e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a22      	ldr	r2, [pc, #136]	; (8006c0c <HAL_TIM_PWM_Start+0x174>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d022      	beq.n	8006bce <HAL_TIM_PWM_Start+0x136>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b90:	d01d      	beq.n	8006bce <HAL_TIM_PWM_Start+0x136>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a1f      	ldr	r2, [pc, #124]	; (8006c14 <HAL_TIM_PWM_Start+0x17c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d018      	beq.n	8006bce <HAL_TIM_PWM_Start+0x136>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a1d      	ldr	r2, [pc, #116]	; (8006c18 <HAL_TIM_PWM_Start+0x180>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d013      	beq.n	8006bce <HAL_TIM_PWM_Start+0x136>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a1c      	ldr	r2, [pc, #112]	; (8006c1c <HAL_TIM_PWM_Start+0x184>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d00e      	beq.n	8006bce <HAL_TIM_PWM_Start+0x136>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a16      	ldr	r2, [pc, #88]	; (8006c10 <HAL_TIM_PWM_Start+0x178>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d009      	beq.n	8006bce <HAL_TIM_PWM_Start+0x136>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a18      	ldr	r2, [pc, #96]	; (8006c20 <HAL_TIM_PWM_Start+0x188>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d004      	beq.n	8006bce <HAL_TIM_PWM_Start+0x136>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a16      	ldr	r2, [pc, #88]	; (8006c24 <HAL_TIM_PWM_Start+0x18c>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d111      	bne.n	8006bf2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f003 0307 	and.w	r3, r3, #7
 8006bd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2b06      	cmp	r3, #6
 8006bde:	d010      	beq.n	8006c02 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0201 	orr.w	r2, r2, #1
 8006bee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bf0:	e007      	b.n	8006c02 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f042 0201 	orr.w	r2, r2, #1
 8006c00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	40010000 	.word	0x40010000
 8006c10:	40010400 	.word	0x40010400
 8006c14:	40000400 	.word	0x40000400
 8006c18:	40000800 	.word	0x40000800
 8006c1c:	40000c00 	.word	0x40000c00
 8006c20:	40014000 	.word	0x40014000
 8006c24:	40001800 	.word	0x40001800

08006c28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c34:	2300      	movs	r3, #0
 8006c36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d101      	bne.n	8006c46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c42:	2302      	movs	r3, #2
 8006c44:	e0ae      	b.n	8006da4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b0c      	cmp	r3, #12
 8006c52:	f200 809f 	bhi.w	8006d94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c56:	a201      	add	r2, pc, #4	; (adr r2, 8006c5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5c:	08006c91 	.word	0x08006c91
 8006c60:	08006d95 	.word	0x08006d95
 8006c64:	08006d95 	.word	0x08006d95
 8006c68:	08006d95 	.word	0x08006d95
 8006c6c:	08006cd1 	.word	0x08006cd1
 8006c70:	08006d95 	.word	0x08006d95
 8006c74:	08006d95 	.word	0x08006d95
 8006c78:	08006d95 	.word	0x08006d95
 8006c7c:	08006d13 	.word	0x08006d13
 8006c80:	08006d95 	.word	0x08006d95
 8006c84:	08006d95 	.word	0x08006d95
 8006c88:	08006d95 	.word	0x08006d95
 8006c8c:	08006d53 	.word	0x08006d53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68b9      	ldr	r1, [r7, #8]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 f9f0 	bl	800707c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	699a      	ldr	r2, [r3, #24]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0208 	orr.w	r2, r2, #8
 8006caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	699a      	ldr	r2, [r3, #24]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f022 0204 	bic.w	r2, r2, #4
 8006cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6999      	ldr	r1, [r3, #24]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	691a      	ldr	r2, [r3, #16]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	619a      	str	r2, [r3, #24]
      break;
 8006cce:	e064      	b.n	8006d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68b9      	ldr	r1, [r7, #8]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 fa40 	bl	800715c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	699a      	ldr	r2, [r3, #24]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	699a      	ldr	r2, [r3, #24]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6999      	ldr	r1, [r3, #24]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	021a      	lsls	r2, r3, #8
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	619a      	str	r2, [r3, #24]
      break;
 8006d10:	e043      	b.n	8006d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68b9      	ldr	r1, [r7, #8]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 fa95 	bl	8007248 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	69da      	ldr	r2, [r3, #28]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f042 0208 	orr.w	r2, r2, #8
 8006d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	69da      	ldr	r2, [r3, #28]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0204 	bic.w	r2, r2, #4
 8006d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	69d9      	ldr	r1, [r3, #28]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	691a      	ldr	r2, [r3, #16]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	61da      	str	r2, [r3, #28]
      break;
 8006d50:	e023      	b.n	8006d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68b9      	ldr	r1, [r7, #8]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 fae9 	bl	8007330 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	69da      	ldr	r2, [r3, #28]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	69da      	ldr	r2, [r3, #28]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	69d9      	ldr	r1, [r3, #28]
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	021a      	lsls	r2, r3, #8
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	61da      	str	r2, [r3, #28]
      break;
 8006d92:	e002      	b.n	8006d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	75fb      	strb	r3, [r7, #23]
      break;
 8006d98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3718      	adds	r7, #24
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d101      	bne.n	8006dc8 <HAL_TIM_ConfigClockSource+0x1c>
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	e0b4      	b.n	8006f32 <HAL_TIM_ConfigClockSource+0x186>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006de6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e00:	d03e      	beq.n	8006e80 <HAL_TIM_ConfigClockSource+0xd4>
 8006e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e06:	f200 8087 	bhi.w	8006f18 <HAL_TIM_ConfigClockSource+0x16c>
 8006e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e0e:	f000 8086 	beq.w	8006f1e <HAL_TIM_ConfigClockSource+0x172>
 8006e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e16:	d87f      	bhi.n	8006f18 <HAL_TIM_ConfigClockSource+0x16c>
 8006e18:	2b70      	cmp	r3, #112	; 0x70
 8006e1a:	d01a      	beq.n	8006e52 <HAL_TIM_ConfigClockSource+0xa6>
 8006e1c:	2b70      	cmp	r3, #112	; 0x70
 8006e1e:	d87b      	bhi.n	8006f18 <HAL_TIM_ConfigClockSource+0x16c>
 8006e20:	2b60      	cmp	r3, #96	; 0x60
 8006e22:	d050      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x11a>
 8006e24:	2b60      	cmp	r3, #96	; 0x60
 8006e26:	d877      	bhi.n	8006f18 <HAL_TIM_ConfigClockSource+0x16c>
 8006e28:	2b50      	cmp	r3, #80	; 0x50
 8006e2a:	d03c      	beq.n	8006ea6 <HAL_TIM_ConfigClockSource+0xfa>
 8006e2c:	2b50      	cmp	r3, #80	; 0x50
 8006e2e:	d873      	bhi.n	8006f18 <HAL_TIM_ConfigClockSource+0x16c>
 8006e30:	2b40      	cmp	r3, #64	; 0x40
 8006e32:	d058      	beq.n	8006ee6 <HAL_TIM_ConfigClockSource+0x13a>
 8006e34:	2b40      	cmp	r3, #64	; 0x40
 8006e36:	d86f      	bhi.n	8006f18 <HAL_TIM_ConfigClockSource+0x16c>
 8006e38:	2b30      	cmp	r3, #48	; 0x30
 8006e3a:	d064      	beq.n	8006f06 <HAL_TIM_ConfigClockSource+0x15a>
 8006e3c:	2b30      	cmp	r3, #48	; 0x30
 8006e3e:	d86b      	bhi.n	8006f18 <HAL_TIM_ConfigClockSource+0x16c>
 8006e40:	2b20      	cmp	r3, #32
 8006e42:	d060      	beq.n	8006f06 <HAL_TIM_ConfigClockSource+0x15a>
 8006e44:	2b20      	cmp	r3, #32
 8006e46:	d867      	bhi.n	8006f18 <HAL_TIM_ConfigClockSource+0x16c>
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d05c      	beq.n	8006f06 <HAL_TIM_ConfigClockSource+0x15a>
 8006e4c:	2b10      	cmp	r3, #16
 8006e4e:	d05a      	beq.n	8006f06 <HAL_TIM_ConfigClockSource+0x15a>
 8006e50:	e062      	b.n	8006f18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6818      	ldr	r0, [r3, #0]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	6899      	ldr	r1, [r3, #8]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	f000 fb35 	bl	80074d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	609a      	str	r2, [r3, #8]
      break;
 8006e7e:	e04f      	b.n	8006f20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6818      	ldr	r0, [r3, #0]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	6899      	ldr	r1, [r3, #8]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f000 fb1e 	bl	80074d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ea2:	609a      	str	r2, [r3, #8]
      break;
 8006ea4:	e03c      	b.n	8006f20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6818      	ldr	r0, [r3, #0]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	6859      	ldr	r1, [r3, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f000 fa92 	bl	80073dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2150      	movs	r1, #80	; 0x50
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 faeb 	bl	800749a <TIM_ITRx_SetConfig>
      break;
 8006ec4:	e02c      	b.n	8006f20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6818      	ldr	r0, [r3, #0]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	6859      	ldr	r1, [r3, #4]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f000 fab1 	bl	800743a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2160      	movs	r1, #96	; 0x60
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 fadb 	bl	800749a <TIM_ITRx_SetConfig>
      break;
 8006ee4:	e01c      	b.n	8006f20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6818      	ldr	r0, [r3, #0]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	6859      	ldr	r1, [r3, #4]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	f000 fa72 	bl	80073dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2140      	movs	r1, #64	; 0x40
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 facb 	bl	800749a <TIM_ITRx_SetConfig>
      break;
 8006f04:	e00c      	b.n	8006f20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	4610      	mov	r0, r2
 8006f12:	f000 fac2 	bl	800749a <TIM_ITRx_SetConfig>
      break;
 8006f16:	e003      	b.n	8006f20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f1c:	e000      	b.n	8006f20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
	...

08006f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a40      	ldr	r2, [pc, #256]	; (8007050 <TIM_Base_SetConfig+0x114>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d013      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f5a:	d00f      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a3d      	ldr	r2, [pc, #244]	; (8007054 <TIM_Base_SetConfig+0x118>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d00b      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a3c      	ldr	r2, [pc, #240]	; (8007058 <TIM_Base_SetConfig+0x11c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d007      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a3b      	ldr	r2, [pc, #236]	; (800705c <TIM_Base_SetConfig+0x120>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d003      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a3a      	ldr	r2, [pc, #232]	; (8007060 <TIM_Base_SetConfig+0x124>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d108      	bne.n	8006f8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a2f      	ldr	r2, [pc, #188]	; (8007050 <TIM_Base_SetConfig+0x114>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d02b      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f9c:	d027      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a2c      	ldr	r2, [pc, #176]	; (8007054 <TIM_Base_SetConfig+0x118>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d023      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a2b      	ldr	r2, [pc, #172]	; (8007058 <TIM_Base_SetConfig+0x11c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d01f      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a2a      	ldr	r2, [pc, #168]	; (800705c <TIM_Base_SetConfig+0x120>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d01b      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a29      	ldr	r2, [pc, #164]	; (8007060 <TIM_Base_SetConfig+0x124>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d017      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a28      	ldr	r2, [pc, #160]	; (8007064 <TIM_Base_SetConfig+0x128>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d013      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a27      	ldr	r2, [pc, #156]	; (8007068 <TIM_Base_SetConfig+0x12c>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d00f      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a26      	ldr	r2, [pc, #152]	; (800706c <TIM_Base_SetConfig+0x130>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d00b      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a25      	ldr	r2, [pc, #148]	; (8007070 <TIM_Base_SetConfig+0x134>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d007      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a24      	ldr	r2, [pc, #144]	; (8007074 <TIM_Base_SetConfig+0x138>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d003      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a23      	ldr	r2, [pc, #140]	; (8007078 <TIM_Base_SetConfig+0x13c>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d108      	bne.n	8007000 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	4313      	orrs	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a0a      	ldr	r2, [pc, #40]	; (8007050 <TIM_Base_SetConfig+0x114>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d003      	beq.n	8007034 <TIM_Base_SetConfig+0xf8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a0c      	ldr	r2, [pc, #48]	; (8007060 <TIM_Base_SetConfig+0x124>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d103      	bne.n	800703c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	691a      	ldr	r2, [r3, #16]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	615a      	str	r2, [r3, #20]
}
 8007042:	bf00      	nop
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	40010000 	.word	0x40010000
 8007054:	40000400 	.word	0x40000400
 8007058:	40000800 	.word	0x40000800
 800705c:	40000c00 	.word	0x40000c00
 8007060:	40010400 	.word	0x40010400
 8007064:	40014000 	.word	0x40014000
 8007068:	40014400 	.word	0x40014400
 800706c:	40014800 	.word	0x40014800
 8007070:	40001800 	.word	0x40001800
 8007074:	40001c00 	.word	0x40001c00
 8007078:	40002000 	.word	0x40002000

0800707c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	f023 0201 	bic.w	r2, r3, #1
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f023 0303 	bic.w	r3, r3, #3
 80070b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f023 0302 	bic.w	r3, r3, #2
 80070c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a20      	ldr	r2, [pc, #128]	; (8007154 <TIM_OC1_SetConfig+0xd8>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d003      	beq.n	80070e0 <TIM_OC1_SetConfig+0x64>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a1f      	ldr	r2, [pc, #124]	; (8007158 <TIM_OC1_SetConfig+0xdc>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d10c      	bne.n	80070fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f023 0308 	bic.w	r3, r3, #8
 80070e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f023 0304 	bic.w	r3, r3, #4
 80070f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a15      	ldr	r2, [pc, #84]	; (8007154 <TIM_OC1_SetConfig+0xd8>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d003      	beq.n	800710a <TIM_OC1_SetConfig+0x8e>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a14      	ldr	r2, [pc, #80]	; (8007158 <TIM_OC1_SetConfig+0xdc>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d111      	bne.n	800712e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	4313      	orrs	r3, r2
 8007122:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	4313      	orrs	r3, r2
 800712c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	621a      	str	r2, [r3, #32]
}
 8007148:	bf00      	nop
 800714a:	371c      	adds	r7, #28
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	40010000 	.word	0x40010000
 8007158:	40010400 	.word	0x40010400

0800715c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800715c:	b480      	push	{r7}
 800715e:	b087      	sub	sp, #28
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	f023 0210 	bic.w	r2, r3, #16
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800718a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	021b      	lsls	r3, r3, #8
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	4313      	orrs	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	f023 0320 	bic.w	r3, r3, #32
 80071a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	011b      	lsls	r3, r3, #4
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a22      	ldr	r2, [pc, #136]	; (8007240 <TIM_OC2_SetConfig+0xe4>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d003      	beq.n	80071c4 <TIM_OC2_SetConfig+0x68>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a21      	ldr	r2, [pc, #132]	; (8007244 <TIM_OC2_SetConfig+0xe8>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d10d      	bne.n	80071e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	011b      	lsls	r3, r3, #4
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a17      	ldr	r2, [pc, #92]	; (8007240 <TIM_OC2_SetConfig+0xe4>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d003      	beq.n	80071f0 <TIM_OC2_SetConfig+0x94>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a16      	ldr	r2, [pc, #88]	; (8007244 <TIM_OC2_SetConfig+0xe8>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d113      	bne.n	8007218 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	4313      	orrs	r3, r2
 800720a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	4313      	orrs	r3, r2
 8007216:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	621a      	str	r2, [r3, #32]
}
 8007232:	bf00      	nop
 8007234:	371c      	adds	r7, #28
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	40010000 	.word	0x40010000
 8007244:	40010400 	.word	0x40010400

08007248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	69db      	ldr	r3, [r3, #28]
 800726e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f023 0303 	bic.w	r3, r3, #3
 800727e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	4313      	orrs	r3, r2
 8007288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	021b      	lsls	r3, r3, #8
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	4313      	orrs	r3, r2
 800729c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a21      	ldr	r2, [pc, #132]	; (8007328 <TIM_OC3_SetConfig+0xe0>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d003      	beq.n	80072ae <TIM_OC3_SetConfig+0x66>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a20      	ldr	r2, [pc, #128]	; (800732c <TIM_OC3_SetConfig+0xe4>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d10d      	bne.n	80072ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	021b      	lsls	r3, r3, #8
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	4313      	orrs	r3, r2
 80072c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a16      	ldr	r2, [pc, #88]	; (8007328 <TIM_OC3_SetConfig+0xe0>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d003      	beq.n	80072da <TIM_OC3_SetConfig+0x92>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a15      	ldr	r2, [pc, #84]	; (800732c <TIM_OC3_SetConfig+0xe4>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d113      	bne.n	8007302 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	011b      	lsls	r3, r3, #4
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	011b      	lsls	r3, r3, #4
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	4313      	orrs	r3, r2
 8007300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	621a      	str	r2, [r3, #32]
}
 800731c:	bf00      	nop
 800731e:	371c      	adds	r7, #28
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	40010000 	.word	0x40010000
 800732c:	40010400 	.word	0x40010400

08007330 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800735e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	021b      	lsls	r3, r3, #8
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	4313      	orrs	r3, r2
 8007372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800737a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	031b      	lsls	r3, r3, #12
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	4313      	orrs	r3, r2
 8007386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a12      	ldr	r2, [pc, #72]	; (80073d4 <TIM_OC4_SetConfig+0xa4>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d003      	beq.n	8007398 <TIM_OC4_SetConfig+0x68>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a11      	ldr	r2, [pc, #68]	; (80073d8 <TIM_OC4_SetConfig+0xa8>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d109      	bne.n	80073ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800739e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	019b      	lsls	r3, r3, #6
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	621a      	str	r2, [r3, #32]
}
 80073c6:	bf00      	nop
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	40010000 	.word	0x40010000
 80073d8:	40010400 	.word	0x40010400

080073dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	f023 0201 	bic.w	r2, r3, #1
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	699b      	ldr	r3, [r3, #24]
 80073fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007406:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	011b      	lsls	r3, r3, #4
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	4313      	orrs	r3, r2
 8007410:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f023 030a 	bic.w	r3, r3, #10
 8007418:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	4313      	orrs	r3, r2
 8007420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	621a      	str	r2, [r3, #32]
}
 800742e:	bf00      	nop
 8007430:	371c      	adds	r7, #28
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800743a:	b480      	push	{r7}
 800743c:	b087      	sub	sp, #28
 800743e:	af00      	add	r7, sp, #0
 8007440:	60f8      	str	r0, [r7, #12]
 8007442:	60b9      	str	r1, [r7, #8]
 8007444:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	f023 0210 	bic.w	r2, r3, #16
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6a1b      	ldr	r3, [r3, #32]
 800745c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007464:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	031b      	lsls	r3, r3, #12
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	4313      	orrs	r3, r2
 800746e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007476:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	011b      	lsls	r3, r3, #4
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	4313      	orrs	r3, r2
 8007480:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	621a      	str	r2, [r3, #32]
}
 800748e:	bf00      	nop
 8007490:	371c      	adds	r7, #28
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800749a:	b480      	push	{r7}
 800749c:	b085      	sub	sp, #20
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	f043 0307 	orr.w	r3, r3, #7
 80074bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	609a      	str	r2, [r3, #8]
}
 80074c4:	bf00      	nop
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b087      	sub	sp, #28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
 80074dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	021a      	lsls	r2, r3, #8
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	431a      	orrs	r2, r3
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	609a      	str	r2, [r3, #8]
}
 8007504:	bf00      	nop
 8007506:	371c      	adds	r7, #28
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007510:	b480      	push	{r7}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f003 031f 	and.w	r3, r3, #31
 8007522:	2201      	movs	r2, #1
 8007524:	fa02 f303 	lsl.w	r3, r2, r3
 8007528:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6a1a      	ldr	r2, [r3, #32]
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	43db      	mvns	r3, r3
 8007532:	401a      	ands	r2, r3
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6a1a      	ldr	r2, [r3, #32]
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f003 031f 	and.w	r3, r3, #31
 8007542:	6879      	ldr	r1, [r7, #4]
 8007544:	fa01 f303 	lsl.w	r3, r1, r3
 8007548:	431a      	orrs	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	621a      	str	r2, [r3, #32]
}
 800754e:	bf00      	nop
 8007550:	371c      	adds	r7, #28
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
	...

0800755c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800756c:	2b01      	cmp	r3, #1
 800756e:	d101      	bne.n	8007574 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007570:	2302      	movs	r3, #2
 8007572:	e05a      	b.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2202      	movs	r2, #2
 8007580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800759a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a21      	ldr	r2, [pc, #132]	; (8007638 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d022      	beq.n	80075fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075c0:	d01d      	beq.n	80075fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a1d      	ldr	r2, [pc, #116]	; (800763c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d018      	beq.n	80075fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a1b      	ldr	r2, [pc, #108]	; (8007640 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d013      	beq.n	80075fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a1a      	ldr	r2, [pc, #104]	; (8007644 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d00e      	beq.n	80075fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a18      	ldr	r2, [pc, #96]	; (8007648 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d009      	beq.n	80075fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a17      	ldr	r2, [pc, #92]	; (800764c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d004      	beq.n	80075fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a15      	ldr	r2, [pc, #84]	; (8007650 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d10c      	bne.n	8007618 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007604:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	4313      	orrs	r3, r2
 800760e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3714      	adds	r7, #20
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	40010000 	.word	0x40010000
 800763c:	40000400 	.word	0x40000400
 8007640:	40000800 	.word	0x40000800
 8007644:	40000c00 	.word	0x40000c00
 8007648:	40010400 	.word	0x40010400
 800764c:	40014000 	.word	0x40014000
 8007650:	40001800 	.word	0x40001800

08007654 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800765e:	2300      	movs	r3, #0
 8007660:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007668:	2b01      	cmp	r3, #1
 800766a:	d101      	bne.n	8007670 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800766c:	2302      	movs	r3, #2
 800766e:	e03d      	b.n	80076ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	4313      	orrs	r3, r2
 8007684:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	4313      	orrs	r3, r2
 8007692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	4313      	orrs	r3, r2
 80076a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	69db      	ldr	r3, [r3, #28]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3714      	adds	r7, #20
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d101      	bne.n	800770a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e03f      	b.n	800778a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d106      	bne.n	8007724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7fd fa8a 	bl	8004c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2224      	movs	r2, #36	; 0x24
 8007728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68da      	ldr	r2, [r3, #12]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800773a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fe1d 	bl	800837c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	691a      	ldr	r2, [r3, #16]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	695a      	ldr	r2, [r3, #20]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68da      	ldr	r2, [r3, #12]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2220      	movs	r2, #32
 800777c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2220      	movs	r2, #32
 8007784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b08a      	sub	sp, #40	; 0x28
 8007796:	af02      	add	r7, sp, #8
 8007798:	60f8      	str	r0, [r7, #12]
 800779a:	60b9      	str	r1, [r7, #8]
 800779c:	603b      	str	r3, [r7, #0]
 800779e:	4613      	mov	r3, r2
 80077a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80077a2:	2300      	movs	r3, #0
 80077a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b20      	cmp	r3, #32
 80077b0:	d17c      	bne.n	80078ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d002      	beq.n	80077be <HAL_UART_Transmit+0x2c>
 80077b8:	88fb      	ldrh	r3, [r7, #6]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e075      	b.n	80078ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d101      	bne.n	80077d0 <HAL_UART_Transmit+0x3e>
 80077cc:	2302      	movs	r3, #2
 80077ce:	e06e      	b.n	80078ae <HAL_UART_Transmit+0x11c>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2221      	movs	r2, #33	; 0x21
 80077e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077e6:	f7fd fc4b 	bl	8005080 <HAL_GetTick>
 80077ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	88fa      	ldrh	r2, [r7, #6]
 80077f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	88fa      	ldrh	r2, [r7, #6]
 80077f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007800:	d108      	bne.n	8007814 <HAL_UART_Transmit+0x82>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d104      	bne.n	8007814 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800780a:	2300      	movs	r3, #0
 800780c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	61bb      	str	r3, [r7, #24]
 8007812:	e003      	b.n	800781c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007818:	2300      	movs	r3, #0
 800781a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007824:	e02a      	b.n	800787c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2200      	movs	r2, #0
 800782e:	2180      	movs	r1, #128	; 0x80
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f000 fb9b 	bl	8007f6c <UART_WaitOnFlagUntilTimeout>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	e036      	b.n	80078ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10b      	bne.n	800785e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	461a      	mov	r2, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007854:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	3302      	adds	r3, #2
 800785a:	61bb      	str	r3, [r7, #24]
 800785c:	e007      	b.n	800786e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	781a      	ldrb	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	3301      	adds	r3, #1
 800786c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007872:	b29b      	uxth	r3, r3
 8007874:	3b01      	subs	r3, #1
 8007876:	b29a      	uxth	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007880:	b29b      	uxth	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1cf      	bne.n	8007826 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	2200      	movs	r2, #0
 800788e:	2140      	movs	r1, #64	; 0x40
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 fb6b 	bl	8007f6c <UART_WaitOnFlagUntilTimeout>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	e006      	b.n	80078ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2220      	movs	r2, #32
 80078a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	e000      	b.n	80078ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80078ac:	2302      	movs	r3, #2
  }
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3720      	adds	r7, #32
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b08a      	sub	sp, #40	; 0x28
 80078ba:	af02      	add	r7, sp, #8
 80078bc:	60f8      	str	r0, [r7, #12]
 80078be:	60b9      	str	r1, [r7, #8]
 80078c0:	603b      	str	r3, [r7, #0]
 80078c2:	4613      	mov	r3, r2
 80078c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b20      	cmp	r3, #32
 80078d4:	f040 808c 	bne.w	80079f0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d002      	beq.n	80078e4 <HAL_UART_Receive+0x2e>
 80078de:	88fb      	ldrh	r3, [r7, #6]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e084      	b.n	80079f2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d101      	bne.n	80078f6 <HAL_UART_Receive+0x40>
 80078f2:	2302      	movs	r3, #2
 80078f4:	e07d      	b.n	80079f2 <HAL_UART_Receive+0x13c>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2222      	movs	r2, #34	; 0x22
 8007908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007912:	f7fd fbb5 	bl	8005080 <HAL_GetTick>
 8007916:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	88fa      	ldrh	r2, [r7, #6]
 800791c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	88fa      	ldrh	r2, [r7, #6]
 8007922:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800792c:	d108      	bne.n	8007940 <HAL_UART_Receive+0x8a>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d104      	bne.n	8007940 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007936:	2300      	movs	r3, #0
 8007938:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	61bb      	str	r3, [r7, #24]
 800793e:	e003      	b.n	8007948 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007944:	2300      	movs	r3, #0
 8007946:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007950:	e043      	b.n	80079da <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2200      	movs	r2, #0
 800795a:	2120      	movs	r1, #32
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f000 fb05 	bl	8007f6c <UART_WaitOnFlagUntilTimeout>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d001      	beq.n	800796c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e042      	b.n	80079f2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10c      	bne.n	800798c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	b29b      	uxth	r3, r3
 800797a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800797e:	b29a      	uxth	r2, r3
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	3302      	adds	r3, #2
 8007988:	61bb      	str	r3, [r7, #24]
 800798a:	e01f      	b.n	80079cc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007994:	d007      	beq.n	80079a6 <HAL_UART_Receive+0xf0>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10a      	bne.n	80079b4 <HAL_UART_Receive+0xfe>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d106      	bne.n	80079b4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	b2da      	uxtb	r2, r3
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	701a      	strb	r2, [r3, #0]
 80079b2:	e008      	b.n	80079c6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	3301      	adds	r3, #1
 80079ca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	3b01      	subs	r3, #1
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079de:	b29b      	uxth	r3, r3
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1b6      	bne.n	8007952 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2220      	movs	r2, #32
 80079e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	e000      	b.n	80079f2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80079f0:	2302      	movs	r3, #2
  }
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3720      	adds	r7, #32
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
	...

080079fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b0ba      	sub	sp, #232	; 0xe8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007a22:	2300      	movs	r3, #0
 8007a24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a32:	f003 030f 	and.w	r3, r3, #15
 8007a36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007a3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10f      	bne.n	8007a62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a46:	f003 0320 	and.w	r3, r3, #32
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d009      	beq.n	8007a62 <HAL_UART_IRQHandler+0x66>
 8007a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a52:	f003 0320 	and.w	r3, r3, #32
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fbd3 	bl	8008206 <UART_Receive_IT>
      return;
 8007a60:	e256      	b.n	8007f10 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 80de 	beq.w	8007c28 <HAL_UART_IRQHandler+0x22c>
 8007a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a70:	f003 0301 	and.w	r3, r3, #1
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d106      	bne.n	8007a86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a7c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 80d1 	beq.w	8007c28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00b      	beq.n	8007aaa <HAL_UART_IRQHandler+0xae>
 8007a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d005      	beq.n	8007aaa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa2:	f043 0201 	orr.w	r2, r3, #1
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aae:	f003 0304 	and.w	r3, r3, #4
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00b      	beq.n	8007ace <HAL_UART_IRQHandler+0xd2>
 8007ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d005      	beq.n	8007ace <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac6:	f043 0202 	orr.w	r2, r3, #2
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad2:	f003 0302 	and.w	r3, r3, #2
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00b      	beq.n	8007af2 <HAL_UART_IRQHandler+0xf6>
 8007ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d005      	beq.n	8007af2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aea:	f043 0204 	orr.w	r2, r3, #4
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007af6:	f003 0308 	and.w	r3, r3, #8
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d011      	beq.n	8007b22 <HAL_UART_IRQHandler+0x126>
 8007afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b02:	f003 0320 	and.w	r3, r3, #32
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d105      	bne.n	8007b16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d005      	beq.n	8007b22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1a:	f043 0208 	orr.w	r2, r3, #8
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 81ed 	beq.w	8007f06 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b30:	f003 0320 	and.w	r3, r3, #32
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d008      	beq.n	8007b4a <HAL_UART_IRQHandler+0x14e>
 8007b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b3c:	f003 0320 	and.w	r3, r3, #32
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d002      	beq.n	8007b4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fb5e 	bl	8008206 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b54:	2b40      	cmp	r3, #64	; 0x40
 8007b56:	bf0c      	ite	eq
 8007b58:	2301      	moveq	r3, #1
 8007b5a:	2300      	movne	r3, #0
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b66:	f003 0308 	and.w	r3, r3, #8
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d103      	bne.n	8007b76 <HAL_UART_IRQHandler+0x17a>
 8007b6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d04f      	beq.n	8007c16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fa66 	bl	8008048 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	695b      	ldr	r3, [r3, #20]
 8007b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b86:	2b40      	cmp	r3, #64	; 0x40
 8007b88:	d141      	bne.n	8007c0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	3314      	adds	r3, #20
 8007b90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b98:	e853 3f00 	ldrex	r3, [r3]
 8007b9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ba8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	3314      	adds	r3, #20
 8007bb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007bb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007bba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007bc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bc6:	e841 2300 	strex	r3, r2, [r1]
 8007bca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007bce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1d9      	bne.n	8007b8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d013      	beq.n	8007c06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be2:	4a7d      	ldr	r2, [pc, #500]	; (8007dd8 <HAL_UART_IRQHandler+0x3dc>)
 8007be4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fd ffc5 	bl	8005b7a <HAL_DMA_Abort_IT>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d016      	beq.n	8007c24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c00:	4610      	mov	r0, r2
 8007c02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c04:	e00e      	b.n	8007c24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f99a 	bl	8007f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c0c:	e00a      	b.n	8007c24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f996 	bl	8007f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c14:	e006      	b.n	8007c24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f992 	bl	8007f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007c22:	e170      	b.n	8007f06 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c24:	bf00      	nop
    return;
 8007c26:	e16e      	b.n	8007f06 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	f040 814a 	bne.w	8007ec6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c36:	f003 0310 	and.w	r3, r3, #16
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f000 8143 	beq.w	8007ec6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c44:	f003 0310 	and.w	r3, r3, #16
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 813c 	beq.w	8007ec6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c4e:	2300      	movs	r3, #0
 8007c50:	60bb      	str	r3, [r7, #8]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	60bb      	str	r3, [r7, #8]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	60bb      	str	r3, [r7, #8]
 8007c62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6e:	2b40      	cmp	r3, #64	; 0x40
 8007c70:	f040 80b4 	bne.w	8007ddc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f000 8140 	beq.w	8007f0a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c92:	429a      	cmp	r2, r3
 8007c94:	f080 8139 	bcs.w	8007f0a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c9e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca4:	69db      	ldr	r3, [r3, #28]
 8007ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007caa:	f000 8088 	beq.w	8007dbe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	330c      	adds	r3, #12
 8007cb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cbc:	e853 3f00 	ldrex	r3, [r3]
 8007cc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ccc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	330c      	adds	r3, #12
 8007cd6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007cda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007cde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007ce6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cea:	e841 2300 	strex	r3, r2, [r1]
 8007cee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007cf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1d9      	bne.n	8007cae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3314      	adds	r3, #20
 8007d00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d04:	e853 3f00 	ldrex	r3, [r3]
 8007d08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d0c:	f023 0301 	bic.w	r3, r3, #1
 8007d10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	3314      	adds	r3, #20
 8007d1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e1      	bne.n	8007cfa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3314      	adds	r3, #20
 8007d3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d40:	e853 3f00 	ldrex	r3, [r3]
 8007d44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	3314      	adds	r3, #20
 8007d56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d62:	e841 2300 	strex	r3, r2, [r1]
 8007d66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1e3      	bne.n	8007d36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2220      	movs	r2, #32
 8007d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	330c      	adds	r3, #12
 8007d82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d86:	e853 3f00 	ldrex	r3, [r3]
 8007d8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d8e:	f023 0310 	bic.w	r3, r3, #16
 8007d92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	330c      	adds	r3, #12
 8007d9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007da0:	65ba      	str	r2, [r7, #88]	; 0x58
 8007da2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007da6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007da8:	e841 2300 	strex	r3, r2, [r1]
 8007dac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1e3      	bne.n	8007d7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7fd fe6e 	bl	8005a9a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	4619      	mov	r1, r3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f8c0 	bl	8007f54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007dd4:	e099      	b.n	8007f0a <HAL_UART_IRQHandler+0x50e>
 8007dd6:	bf00      	nop
 8007dd8:	0800810f 	.word	0x0800810f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 808b 	beq.w	8007f0e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007df8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 8086 	beq.w	8007f0e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	330c      	adds	r3, #12
 8007e08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0c:	e853 3f00 	ldrex	r3, [r3]
 8007e10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	330c      	adds	r3, #12
 8007e22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007e26:	647a      	str	r2, [r7, #68]	; 0x44
 8007e28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e2e:	e841 2300 	strex	r3, r2, [r1]
 8007e32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1e3      	bne.n	8007e02 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3314      	adds	r3, #20
 8007e40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e44:	e853 3f00 	ldrex	r3, [r3]
 8007e48:	623b      	str	r3, [r7, #32]
   return(result);
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	f023 0301 	bic.w	r3, r3, #1
 8007e50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3314      	adds	r3, #20
 8007e5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e5e:	633a      	str	r2, [r7, #48]	; 0x30
 8007e60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e66:	e841 2300 	strex	r3, r2, [r1]
 8007e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1e3      	bne.n	8007e3a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2220      	movs	r2, #32
 8007e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	330c      	adds	r3, #12
 8007e86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	e853 3f00 	ldrex	r3, [r3]
 8007e8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f023 0310 	bic.w	r3, r3, #16
 8007e96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	330c      	adds	r3, #12
 8007ea0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ea4:	61fa      	str	r2, [r7, #28]
 8007ea6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea8:	69b9      	ldr	r1, [r7, #24]
 8007eaa:	69fa      	ldr	r2, [r7, #28]
 8007eac:	e841 2300 	strex	r3, r2, [r1]
 8007eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e3      	bne.n	8007e80 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007eb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f848 	bl	8007f54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ec4:	e023      	b.n	8007f0e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d009      	beq.n	8007ee6 <HAL_UART_IRQHandler+0x4ea>
 8007ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d003      	beq.n	8007ee6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f929 	bl	8008136 <UART_Transmit_IT>
    return;
 8007ee4:	e014      	b.n	8007f10 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00e      	beq.n	8007f10 <HAL_UART_IRQHandler+0x514>
 8007ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d008      	beq.n	8007f10 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f969 	bl	80081d6 <UART_EndTransmit_IT>
    return;
 8007f04:	e004      	b.n	8007f10 <HAL_UART_IRQHandler+0x514>
    return;
 8007f06:	bf00      	nop
 8007f08:	e002      	b.n	8007f10 <HAL_UART_IRQHandler+0x514>
      return;
 8007f0a:	bf00      	nop
 8007f0c:	e000      	b.n	8007f10 <HAL_UART_IRQHandler+0x514>
      return;
 8007f0e:	bf00      	nop
  }
}
 8007f10:	37e8      	adds	r7, #232	; 0xe8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop

08007f18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b090      	sub	sp, #64	; 0x40
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	603b      	str	r3, [r7, #0]
 8007f78:	4613      	mov	r3, r2
 8007f7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f7c:	e050      	b.n	8008020 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f84:	d04c      	beq.n	8008020 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d007      	beq.n	8007f9c <UART_WaitOnFlagUntilTimeout+0x30>
 8007f8c:	f7fd f878 	bl	8005080 <HAL_GetTick>
 8007f90:	4602      	mov	r2, r0
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d241      	bcs.n	8008020 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	330c      	adds	r3, #12
 8007fa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa6:	e853 3f00 	ldrex	r3, [r3]
 8007faa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	330c      	adds	r3, #12
 8007fba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007fbc:	637a      	str	r2, [r7, #52]	; 0x34
 8007fbe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fc4:	e841 2300 	strex	r3, r2, [r1]
 8007fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1e5      	bne.n	8007f9c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	3314      	adds	r3, #20
 8007fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	e853 3f00 	ldrex	r3, [r3]
 8007fde:	613b      	str	r3, [r7, #16]
   return(result);
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	f023 0301 	bic.w	r3, r3, #1
 8007fe6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	3314      	adds	r3, #20
 8007fee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ff0:	623a      	str	r2, [r7, #32]
 8007ff2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff4:	69f9      	ldr	r1, [r7, #28]
 8007ff6:	6a3a      	ldr	r2, [r7, #32]
 8007ff8:	e841 2300 	strex	r3, r2, [r1]
 8007ffc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1e5      	bne.n	8007fd0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2220      	movs	r2, #32
 8008008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2220      	movs	r2, #32
 8008010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800801c:	2303      	movs	r3, #3
 800801e:	e00f      	b.n	8008040 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	4013      	ands	r3, r2
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	429a      	cmp	r2, r3
 800802e:	bf0c      	ite	eq
 8008030:	2301      	moveq	r3, #1
 8008032:	2300      	movne	r3, #0
 8008034:	b2db      	uxtb	r3, r3
 8008036:	461a      	mov	r2, r3
 8008038:	79fb      	ldrb	r3, [r7, #7]
 800803a:	429a      	cmp	r2, r3
 800803c:	d09f      	beq.n	8007f7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3740      	adds	r7, #64	; 0x40
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008048:	b480      	push	{r7}
 800804a:	b095      	sub	sp, #84	; 0x54
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	330c      	adds	r3, #12
 8008056:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800805a:	e853 3f00 	ldrex	r3, [r3]
 800805e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008062:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	330c      	adds	r3, #12
 800806e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008070:	643a      	str	r2, [r7, #64]	; 0x40
 8008072:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008074:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008076:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008078:	e841 2300 	strex	r3, r2, [r1]
 800807c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800807e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e5      	bne.n	8008050 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3314      	adds	r3, #20
 800808a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808c:	6a3b      	ldr	r3, [r7, #32]
 800808e:	e853 3f00 	ldrex	r3, [r3]
 8008092:	61fb      	str	r3, [r7, #28]
   return(result);
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	f023 0301 	bic.w	r3, r3, #1
 800809a:	64bb      	str	r3, [r7, #72]	; 0x48
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	3314      	adds	r3, #20
 80080a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080ac:	e841 2300 	strex	r3, r2, [r1]
 80080b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1e5      	bne.n	8008084 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d119      	bne.n	80080f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	330c      	adds	r3, #12
 80080c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	e853 3f00 	ldrex	r3, [r3]
 80080ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f023 0310 	bic.w	r3, r3, #16
 80080d6:	647b      	str	r3, [r7, #68]	; 0x44
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	330c      	adds	r3, #12
 80080de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080e0:	61ba      	str	r2, [r7, #24]
 80080e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e4:	6979      	ldr	r1, [r7, #20]
 80080e6:	69ba      	ldr	r2, [r7, #24]
 80080e8:	e841 2300 	strex	r3, r2, [r1]
 80080ec:	613b      	str	r3, [r7, #16]
   return(result);
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1e5      	bne.n	80080c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008102:	bf00      	nop
 8008104:	3754      	adds	r7, #84	; 0x54
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b084      	sub	sp, #16
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f7ff ff09 	bl	8007f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800812e:	bf00      	nop
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008136:	b480      	push	{r7}
 8008138:	b085      	sub	sp, #20
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b21      	cmp	r3, #33	; 0x21
 8008148:	d13e      	bne.n	80081c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008152:	d114      	bne.n	800817e <UART_Transmit_IT+0x48>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d110      	bne.n	800817e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a1b      	ldr	r3, [r3, #32]
 8008160:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	881b      	ldrh	r3, [r3, #0]
 8008166:	461a      	mov	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008170:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a1b      	ldr	r3, [r3, #32]
 8008176:	1c9a      	adds	r2, r3, #2
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	621a      	str	r2, [r3, #32]
 800817c:	e008      	b.n	8008190 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	1c59      	adds	r1, r3, #1
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	6211      	str	r1, [r2, #32]
 8008188:	781a      	ldrb	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008194:	b29b      	uxth	r3, r3
 8008196:	3b01      	subs	r3, #1
 8008198:	b29b      	uxth	r3, r3
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	4619      	mov	r1, r3
 800819e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10f      	bne.n	80081c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68da      	ldr	r2, [r3, #12]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68da      	ldr	r2, [r3, #12]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	e000      	b.n	80081ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80081c8:	2302      	movs	r3, #2
  }
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3714      	adds	r7, #20
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b082      	sub	sp, #8
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68da      	ldr	r2, [r3, #12]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2220      	movs	r2, #32
 80081f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7ff fe8e 	bl	8007f18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b08c      	sub	sp, #48	; 0x30
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b22      	cmp	r3, #34	; 0x22
 8008218:	f040 80ab 	bne.w	8008372 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008224:	d117      	bne.n	8008256 <UART_Receive_IT+0x50>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d113      	bne.n	8008256 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800822e:	2300      	movs	r3, #0
 8008230:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008236:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	b29b      	uxth	r3, r3
 8008240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008244:	b29a      	uxth	r2, r3
 8008246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008248:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800824e:	1c9a      	adds	r2, r3, #2
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	629a      	str	r2, [r3, #40]	; 0x28
 8008254:	e026      	b.n	80082a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800825a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800825c:	2300      	movs	r3, #0
 800825e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008268:	d007      	beq.n	800827a <UART_Receive_IT+0x74>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10a      	bne.n	8008288 <UART_Receive_IT+0x82>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d106      	bne.n	8008288 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	b2da      	uxtb	r2, r3
 8008282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008284:	701a      	strb	r2, [r3, #0]
 8008286:	e008      	b.n	800829a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	b2db      	uxtb	r3, r3
 8008290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008294:	b2da      	uxtb	r2, r3
 8008296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008298:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829e:	1c5a      	adds	r2, r3, #1
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	3b01      	subs	r3, #1
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	4619      	mov	r1, r3
 80082b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d15a      	bne.n	800836e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68da      	ldr	r2, [r3, #12]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f022 0220 	bic.w	r2, r2, #32
 80082c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68da      	ldr	r2, [r3, #12]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	695a      	ldr	r2, [r3, #20]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f022 0201 	bic.w	r2, r2, #1
 80082e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2220      	movs	r2, #32
 80082ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d135      	bne.n	8008364 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	330c      	adds	r3, #12
 8008304:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	e853 3f00 	ldrex	r3, [r3]
 800830c:	613b      	str	r3, [r7, #16]
   return(result);
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	f023 0310 	bic.w	r3, r3, #16
 8008314:	627b      	str	r3, [r7, #36]	; 0x24
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	330c      	adds	r3, #12
 800831c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800831e:	623a      	str	r2, [r7, #32]
 8008320:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008322:	69f9      	ldr	r1, [r7, #28]
 8008324:	6a3a      	ldr	r2, [r7, #32]
 8008326:	e841 2300 	strex	r3, r2, [r1]
 800832a:	61bb      	str	r3, [r7, #24]
   return(result);
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1e5      	bne.n	80082fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0310 	and.w	r3, r3, #16
 800833c:	2b10      	cmp	r3, #16
 800833e:	d10a      	bne.n	8008356 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008340:	2300      	movs	r3, #0
 8008342:	60fb      	str	r3, [r7, #12]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	60fb      	str	r3, [r7, #12]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	60fb      	str	r3, [r7, #12]
 8008354:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f7ff fdf9 	bl	8007f54 <HAL_UARTEx_RxEventCallback>
 8008362:	e002      	b.n	800836a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7ff fde1 	bl	8007f2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	e002      	b.n	8008374 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	e000      	b.n	8008374 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008372:	2302      	movs	r3, #2
  }
}
 8008374:	4618      	mov	r0, r3
 8008376:	3730      	adds	r7, #48	; 0x30
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800837c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008380:	b09f      	sub	sp, #124	; 0x7c
 8008382:	af00      	add	r7, sp, #0
 8008384:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008392:	68d9      	ldr	r1, [r3, #12]
 8008394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	ea40 0301 	orr.w	r3, r0, r1
 800839c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800839e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083a0:	689a      	ldr	r2, [r3, #8]
 80083a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	431a      	orrs	r2, r3
 80083a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083aa:	695b      	ldr	r3, [r3, #20]
 80083ac:	431a      	orrs	r2, r3
 80083ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80083b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80083c0:	f021 010c 	bic.w	r1, r1, #12
 80083c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083ca:	430b      	orrs	r3, r1
 80083cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80083ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	695b      	ldr	r3, [r3, #20]
 80083d4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80083d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083da:	6999      	ldr	r1, [r3, #24]
 80083dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	ea40 0301 	orr.w	r3, r0, r1
 80083e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80083e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	4bc5      	ldr	r3, [pc, #788]	; (8008700 <UART_SetConfig+0x384>)
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d004      	beq.n	80083fa <UART_SetConfig+0x7e>
 80083f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	4bc3      	ldr	r3, [pc, #780]	; (8008704 <UART_SetConfig+0x388>)
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d103      	bne.n	8008402 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80083fa:	f7fe fa27 	bl	800684c <HAL_RCC_GetPCLK2Freq>
 80083fe:	6778      	str	r0, [r7, #116]	; 0x74
 8008400:	e002      	b.n	8008408 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008402:	f7fe fa0f 	bl	8006824 <HAL_RCC_GetPCLK1Freq>
 8008406:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800840a:	69db      	ldr	r3, [r3, #28]
 800840c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008410:	f040 80b6 	bne.w	8008580 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008416:	461c      	mov	r4, r3
 8008418:	f04f 0500 	mov.w	r5, #0
 800841c:	4622      	mov	r2, r4
 800841e:	462b      	mov	r3, r5
 8008420:	1891      	adds	r1, r2, r2
 8008422:	6439      	str	r1, [r7, #64]	; 0x40
 8008424:	415b      	adcs	r3, r3
 8008426:	647b      	str	r3, [r7, #68]	; 0x44
 8008428:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800842c:	1912      	adds	r2, r2, r4
 800842e:	eb45 0303 	adc.w	r3, r5, r3
 8008432:	f04f 0000 	mov.w	r0, #0
 8008436:	f04f 0100 	mov.w	r1, #0
 800843a:	00d9      	lsls	r1, r3, #3
 800843c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008440:	00d0      	lsls	r0, r2, #3
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	1911      	adds	r1, r2, r4
 8008448:	6639      	str	r1, [r7, #96]	; 0x60
 800844a:	416b      	adcs	r3, r5
 800844c:	667b      	str	r3, [r7, #100]	; 0x64
 800844e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	461a      	mov	r2, r3
 8008454:	f04f 0300 	mov.w	r3, #0
 8008458:	1891      	adds	r1, r2, r2
 800845a:	63b9      	str	r1, [r7, #56]	; 0x38
 800845c:	415b      	adcs	r3, r3
 800845e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008460:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008464:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008468:	f7f8 fb28 	bl	8000abc <__aeabi_uldivmod>
 800846c:	4602      	mov	r2, r0
 800846e:	460b      	mov	r3, r1
 8008470:	4ba5      	ldr	r3, [pc, #660]	; (8008708 <UART_SetConfig+0x38c>)
 8008472:	fba3 2302 	umull	r2, r3, r3, r2
 8008476:	095b      	lsrs	r3, r3, #5
 8008478:	011e      	lsls	r6, r3, #4
 800847a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800847c:	461c      	mov	r4, r3
 800847e:	f04f 0500 	mov.w	r5, #0
 8008482:	4622      	mov	r2, r4
 8008484:	462b      	mov	r3, r5
 8008486:	1891      	adds	r1, r2, r2
 8008488:	6339      	str	r1, [r7, #48]	; 0x30
 800848a:	415b      	adcs	r3, r3
 800848c:	637b      	str	r3, [r7, #52]	; 0x34
 800848e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008492:	1912      	adds	r2, r2, r4
 8008494:	eb45 0303 	adc.w	r3, r5, r3
 8008498:	f04f 0000 	mov.w	r0, #0
 800849c:	f04f 0100 	mov.w	r1, #0
 80084a0:	00d9      	lsls	r1, r3, #3
 80084a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80084a6:	00d0      	lsls	r0, r2, #3
 80084a8:	4602      	mov	r2, r0
 80084aa:	460b      	mov	r3, r1
 80084ac:	1911      	adds	r1, r2, r4
 80084ae:	65b9      	str	r1, [r7, #88]	; 0x58
 80084b0:	416b      	adcs	r3, r5
 80084b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	461a      	mov	r2, r3
 80084ba:	f04f 0300 	mov.w	r3, #0
 80084be:	1891      	adds	r1, r2, r2
 80084c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80084c2:	415b      	adcs	r3, r3
 80084c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80084ce:	f7f8 faf5 	bl	8000abc <__aeabi_uldivmod>
 80084d2:	4602      	mov	r2, r0
 80084d4:	460b      	mov	r3, r1
 80084d6:	4b8c      	ldr	r3, [pc, #560]	; (8008708 <UART_SetConfig+0x38c>)
 80084d8:	fba3 1302 	umull	r1, r3, r3, r2
 80084dc:	095b      	lsrs	r3, r3, #5
 80084de:	2164      	movs	r1, #100	; 0x64
 80084e0:	fb01 f303 	mul.w	r3, r1, r3
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	00db      	lsls	r3, r3, #3
 80084e8:	3332      	adds	r3, #50	; 0x32
 80084ea:	4a87      	ldr	r2, [pc, #540]	; (8008708 <UART_SetConfig+0x38c>)
 80084ec:	fba2 2303 	umull	r2, r3, r2, r3
 80084f0:	095b      	lsrs	r3, r3, #5
 80084f2:	005b      	lsls	r3, r3, #1
 80084f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80084f8:	441e      	add	r6, r3
 80084fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084fc:	4618      	mov	r0, r3
 80084fe:	f04f 0100 	mov.w	r1, #0
 8008502:	4602      	mov	r2, r0
 8008504:	460b      	mov	r3, r1
 8008506:	1894      	adds	r4, r2, r2
 8008508:	623c      	str	r4, [r7, #32]
 800850a:	415b      	adcs	r3, r3
 800850c:	627b      	str	r3, [r7, #36]	; 0x24
 800850e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008512:	1812      	adds	r2, r2, r0
 8008514:	eb41 0303 	adc.w	r3, r1, r3
 8008518:	f04f 0400 	mov.w	r4, #0
 800851c:	f04f 0500 	mov.w	r5, #0
 8008520:	00dd      	lsls	r5, r3, #3
 8008522:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008526:	00d4      	lsls	r4, r2, #3
 8008528:	4622      	mov	r2, r4
 800852a:	462b      	mov	r3, r5
 800852c:	1814      	adds	r4, r2, r0
 800852e:	653c      	str	r4, [r7, #80]	; 0x50
 8008530:	414b      	adcs	r3, r1
 8008532:	657b      	str	r3, [r7, #84]	; 0x54
 8008534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	461a      	mov	r2, r3
 800853a:	f04f 0300 	mov.w	r3, #0
 800853e:	1891      	adds	r1, r2, r2
 8008540:	61b9      	str	r1, [r7, #24]
 8008542:	415b      	adcs	r3, r3
 8008544:	61fb      	str	r3, [r7, #28]
 8008546:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800854a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800854e:	f7f8 fab5 	bl	8000abc <__aeabi_uldivmod>
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	4b6c      	ldr	r3, [pc, #432]	; (8008708 <UART_SetConfig+0x38c>)
 8008558:	fba3 1302 	umull	r1, r3, r3, r2
 800855c:	095b      	lsrs	r3, r3, #5
 800855e:	2164      	movs	r1, #100	; 0x64
 8008560:	fb01 f303 	mul.w	r3, r1, r3
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	00db      	lsls	r3, r3, #3
 8008568:	3332      	adds	r3, #50	; 0x32
 800856a:	4a67      	ldr	r2, [pc, #412]	; (8008708 <UART_SetConfig+0x38c>)
 800856c:	fba2 2303 	umull	r2, r3, r2, r3
 8008570:	095b      	lsrs	r3, r3, #5
 8008572:	f003 0207 	and.w	r2, r3, #7
 8008576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4432      	add	r2, r6
 800857c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800857e:	e0b9      	b.n	80086f4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008582:	461c      	mov	r4, r3
 8008584:	f04f 0500 	mov.w	r5, #0
 8008588:	4622      	mov	r2, r4
 800858a:	462b      	mov	r3, r5
 800858c:	1891      	adds	r1, r2, r2
 800858e:	6139      	str	r1, [r7, #16]
 8008590:	415b      	adcs	r3, r3
 8008592:	617b      	str	r3, [r7, #20]
 8008594:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008598:	1912      	adds	r2, r2, r4
 800859a:	eb45 0303 	adc.w	r3, r5, r3
 800859e:	f04f 0000 	mov.w	r0, #0
 80085a2:	f04f 0100 	mov.w	r1, #0
 80085a6:	00d9      	lsls	r1, r3, #3
 80085a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80085ac:	00d0      	lsls	r0, r2, #3
 80085ae:	4602      	mov	r2, r0
 80085b0:	460b      	mov	r3, r1
 80085b2:	eb12 0804 	adds.w	r8, r2, r4
 80085b6:	eb43 0905 	adc.w	r9, r3, r5
 80085ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	4618      	mov	r0, r3
 80085c0:	f04f 0100 	mov.w	r1, #0
 80085c4:	f04f 0200 	mov.w	r2, #0
 80085c8:	f04f 0300 	mov.w	r3, #0
 80085cc:	008b      	lsls	r3, r1, #2
 80085ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80085d2:	0082      	lsls	r2, r0, #2
 80085d4:	4640      	mov	r0, r8
 80085d6:	4649      	mov	r1, r9
 80085d8:	f7f8 fa70 	bl	8000abc <__aeabi_uldivmod>
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	4b49      	ldr	r3, [pc, #292]	; (8008708 <UART_SetConfig+0x38c>)
 80085e2:	fba3 2302 	umull	r2, r3, r3, r2
 80085e6:	095b      	lsrs	r3, r3, #5
 80085e8:	011e      	lsls	r6, r3, #4
 80085ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085ec:	4618      	mov	r0, r3
 80085ee:	f04f 0100 	mov.w	r1, #0
 80085f2:	4602      	mov	r2, r0
 80085f4:	460b      	mov	r3, r1
 80085f6:	1894      	adds	r4, r2, r2
 80085f8:	60bc      	str	r4, [r7, #8]
 80085fa:	415b      	adcs	r3, r3
 80085fc:	60fb      	str	r3, [r7, #12]
 80085fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008602:	1812      	adds	r2, r2, r0
 8008604:	eb41 0303 	adc.w	r3, r1, r3
 8008608:	f04f 0400 	mov.w	r4, #0
 800860c:	f04f 0500 	mov.w	r5, #0
 8008610:	00dd      	lsls	r5, r3, #3
 8008612:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008616:	00d4      	lsls	r4, r2, #3
 8008618:	4622      	mov	r2, r4
 800861a:	462b      	mov	r3, r5
 800861c:	1814      	adds	r4, r2, r0
 800861e:	64bc      	str	r4, [r7, #72]	; 0x48
 8008620:	414b      	adcs	r3, r1
 8008622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	4618      	mov	r0, r3
 800862a:	f04f 0100 	mov.w	r1, #0
 800862e:	f04f 0200 	mov.w	r2, #0
 8008632:	f04f 0300 	mov.w	r3, #0
 8008636:	008b      	lsls	r3, r1, #2
 8008638:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800863c:	0082      	lsls	r2, r0, #2
 800863e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008642:	f7f8 fa3b 	bl	8000abc <__aeabi_uldivmod>
 8008646:	4602      	mov	r2, r0
 8008648:	460b      	mov	r3, r1
 800864a:	4b2f      	ldr	r3, [pc, #188]	; (8008708 <UART_SetConfig+0x38c>)
 800864c:	fba3 1302 	umull	r1, r3, r3, r2
 8008650:	095b      	lsrs	r3, r3, #5
 8008652:	2164      	movs	r1, #100	; 0x64
 8008654:	fb01 f303 	mul.w	r3, r1, r3
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	011b      	lsls	r3, r3, #4
 800865c:	3332      	adds	r3, #50	; 0x32
 800865e:	4a2a      	ldr	r2, [pc, #168]	; (8008708 <UART_SetConfig+0x38c>)
 8008660:	fba2 2303 	umull	r2, r3, r2, r3
 8008664:	095b      	lsrs	r3, r3, #5
 8008666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800866a:	441e      	add	r6, r3
 800866c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800866e:	4618      	mov	r0, r3
 8008670:	f04f 0100 	mov.w	r1, #0
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	1894      	adds	r4, r2, r2
 800867a:	603c      	str	r4, [r7, #0]
 800867c:	415b      	adcs	r3, r3
 800867e:	607b      	str	r3, [r7, #4]
 8008680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008684:	1812      	adds	r2, r2, r0
 8008686:	eb41 0303 	adc.w	r3, r1, r3
 800868a:	f04f 0400 	mov.w	r4, #0
 800868e:	f04f 0500 	mov.w	r5, #0
 8008692:	00dd      	lsls	r5, r3, #3
 8008694:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008698:	00d4      	lsls	r4, r2, #3
 800869a:	4622      	mov	r2, r4
 800869c:	462b      	mov	r3, r5
 800869e:	eb12 0a00 	adds.w	sl, r2, r0
 80086a2:	eb43 0b01 	adc.w	fp, r3, r1
 80086a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f04f 0100 	mov.w	r1, #0
 80086b0:	f04f 0200 	mov.w	r2, #0
 80086b4:	f04f 0300 	mov.w	r3, #0
 80086b8:	008b      	lsls	r3, r1, #2
 80086ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80086be:	0082      	lsls	r2, r0, #2
 80086c0:	4650      	mov	r0, sl
 80086c2:	4659      	mov	r1, fp
 80086c4:	f7f8 f9fa 	bl	8000abc <__aeabi_uldivmod>
 80086c8:	4602      	mov	r2, r0
 80086ca:	460b      	mov	r3, r1
 80086cc:	4b0e      	ldr	r3, [pc, #56]	; (8008708 <UART_SetConfig+0x38c>)
 80086ce:	fba3 1302 	umull	r1, r3, r3, r2
 80086d2:	095b      	lsrs	r3, r3, #5
 80086d4:	2164      	movs	r1, #100	; 0x64
 80086d6:	fb01 f303 	mul.w	r3, r1, r3
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	011b      	lsls	r3, r3, #4
 80086de:	3332      	adds	r3, #50	; 0x32
 80086e0:	4a09      	ldr	r2, [pc, #36]	; (8008708 <UART_SetConfig+0x38c>)
 80086e2:	fba2 2303 	umull	r2, r3, r2, r3
 80086e6:	095b      	lsrs	r3, r3, #5
 80086e8:	f003 020f 	and.w	r2, r3, #15
 80086ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4432      	add	r2, r6
 80086f2:	609a      	str	r2, [r3, #8]
}
 80086f4:	bf00      	nop
 80086f6:	377c      	adds	r7, #124	; 0x7c
 80086f8:	46bd      	mov	sp, r7
 80086fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086fe:	bf00      	nop
 8008700:	40011000 	.word	0x40011000
 8008704:	40011400 	.word	0x40011400
 8008708:	51eb851f 	.word	0x51eb851f

0800870c <__errno>:
 800870c:	4b01      	ldr	r3, [pc, #4]	; (8008714 <__errno+0x8>)
 800870e:	6818      	ldr	r0, [r3, #0]
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	2000000c 	.word	0x2000000c

08008718 <__libc_init_array>:
 8008718:	b570      	push	{r4, r5, r6, lr}
 800871a:	4d0d      	ldr	r5, [pc, #52]	; (8008750 <__libc_init_array+0x38>)
 800871c:	4c0d      	ldr	r4, [pc, #52]	; (8008754 <__libc_init_array+0x3c>)
 800871e:	1b64      	subs	r4, r4, r5
 8008720:	10a4      	asrs	r4, r4, #2
 8008722:	2600      	movs	r6, #0
 8008724:	42a6      	cmp	r6, r4
 8008726:	d109      	bne.n	800873c <__libc_init_array+0x24>
 8008728:	4d0b      	ldr	r5, [pc, #44]	; (8008758 <__libc_init_array+0x40>)
 800872a:	4c0c      	ldr	r4, [pc, #48]	; (800875c <__libc_init_array+0x44>)
 800872c:	f000 fc4e 	bl	8008fcc <_init>
 8008730:	1b64      	subs	r4, r4, r5
 8008732:	10a4      	asrs	r4, r4, #2
 8008734:	2600      	movs	r6, #0
 8008736:	42a6      	cmp	r6, r4
 8008738:	d105      	bne.n	8008746 <__libc_init_array+0x2e>
 800873a:	bd70      	pop	{r4, r5, r6, pc}
 800873c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008740:	4798      	blx	r3
 8008742:	3601      	adds	r6, #1
 8008744:	e7ee      	b.n	8008724 <__libc_init_array+0xc>
 8008746:	f855 3b04 	ldr.w	r3, [r5], #4
 800874a:	4798      	blx	r3
 800874c:	3601      	adds	r6, #1
 800874e:	e7f2      	b.n	8008736 <__libc_init_array+0x1e>
 8008750:	080098a4 	.word	0x080098a4
 8008754:	080098a4 	.word	0x080098a4
 8008758:	080098a4 	.word	0x080098a4
 800875c:	080098a8 	.word	0x080098a8

08008760 <memset>:
 8008760:	4402      	add	r2, r0
 8008762:	4603      	mov	r3, r0
 8008764:	4293      	cmp	r3, r2
 8008766:	d100      	bne.n	800876a <memset+0xa>
 8008768:	4770      	bx	lr
 800876a:	f803 1b01 	strb.w	r1, [r3], #1
 800876e:	e7f9      	b.n	8008764 <memset+0x4>

08008770 <siprintf>:
 8008770:	b40e      	push	{r1, r2, r3}
 8008772:	b500      	push	{lr}
 8008774:	b09c      	sub	sp, #112	; 0x70
 8008776:	ab1d      	add	r3, sp, #116	; 0x74
 8008778:	9002      	str	r0, [sp, #8]
 800877a:	9006      	str	r0, [sp, #24]
 800877c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008780:	4809      	ldr	r0, [pc, #36]	; (80087a8 <siprintf+0x38>)
 8008782:	9107      	str	r1, [sp, #28]
 8008784:	9104      	str	r1, [sp, #16]
 8008786:	4909      	ldr	r1, [pc, #36]	; (80087ac <siprintf+0x3c>)
 8008788:	f853 2b04 	ldr.w	r2, [r3], #4
 800878c:	9105      	str	r1, [sp, #20]
 800878e:	6800      	ldr	r0, [r0, #0]
 8008790:	9301      	str	r3, [sp, #4]
 8008792:	a902      	add	r1, sp, #8
 8008794:	f000 f868 	bl	8008868 <_svfiprintf_r>
 8008798:	9b02      	ldr	r3, [sp, #8]
 800879a:	2200      	movs	r2, #0
 800879c:	701a      	strb	r2, [r3, #0]
 800879e:	b01c      	add	sp, #112	; 0x70
 80087a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80087a4:	b003      	add	sp, #12
 80087a6:	4770      	bx	lr
 80087a8:	2000000c 	.word	0x2000000c
 80087ac:	ffff0208 	.word	0xffff0208

080087b0 <__ssputs_r>:
 80087b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087b4:	688e      	ldr	r6, [r1, #8]
 80087b6:	429e      	cmp	r6, r3
 80087b8:	4682      	mov	sl, r0
 80087ba:	460c      	mov	r4, r1
 80087bc:	4690      	mov	r8, r2
 80087be:	461f      	mov	r7, r3
 80087c0:	d838      	bhi.n	8008834 <__ssputs_r+0x84>
 80087c2:	898a      	ldrh	r2, [r1, #12]
 80087c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087c8:	d032      	beq.n	8008830 <__ssputs_r+0x80>
 80087ca:	6825      	ldr	r5, [r4, #0]
 80087cc:	6909      	ldr	r1, [r1, #16]
 80087ce:	eba5 0901 	sub.w	r9, r5, r1
 80087d2:	6965      	ldr	r5, [r4, #20]
 80087d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087dc:	3301      	adds	r3, #1
 80087de:	444b      	add	r3, r9
 80087e0:	106d      	asrs	r5, r5, #1
 80087e2:	429d      	cmp	r5, r3
 80087e4:	bf38      	it	cc
 80087e6:	461d      	movcc	r5, r3
 80087e8:	0553      	lsls	r3, r2, #21
 80087ea:	d531      	bpl.n	8008850 <__ssputs_r+0xa0>
 80087ec:	4629      	mov	r1, r5
 80087ee:	f000 fb47 	bl	8008e80 <_malloc_r>
 80087f2:	4606      	mov	r6, r0
 80087f4:	b950      	cbnz	r0, 800880c <__ssputs_r+0x5c>
 80087f6:	230c      	movs	r3, #12
 80087f8:	f8ca 3000 	str.w	r3, [sl]
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008802:	81a3      	strh	r3, [r4, #12]
 8008804:	f04f 30ff 	mov.w	r0, #4294967295
 8008808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800880c:	6921      	ldr	r1, [r4, #16]
 800880e:	464a      	mov	r2, r9
 8008810:	f000 fabe 	bl	8008d90 <memcpy>
 8008814:	89a3      	ldrh	r3, [r4, #12]
 8008816:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800881a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800881e:	81a3      	strh	r3, [r4, #12]
 8008820:	6126      	str	r6, [r4, #16]
 8008822:	6165      	str	r5, [r4, #20]
 8008824:	444e      	add	r6, r9
 8008826:	eba5 0509 	sub.w	r5, r5, r9
 800882a:	6026      	str	r6, [r4, #0]
 800882c:	60a5      	str	r5, [r4, #8]
 800882e:	463e      	mov	r6, r7
 8008830:	42be      	cmp	r6, r7
 8008832:	d900      	bls.n	8008836 <__ssputs_r+0x86>
 8008834:	463e      	mov	r6, r7
 8008836:	4632      	mov	r2, r6
 8008838:	6820      	ldr	r0, [r4, #0]
 800883a:	4641      	mov	r1, r8
 800883c:	f000 fab6 	bl	8008dac <memmove>
 8008840:	68a3      	ldr	r3, [r4, #8]
 8008842:	6822      	ldr	r2, [r4, #0]
 8008844:	1b9b      	subs	r3, r3, r6
 8008846:	4432      	add	r2, r6
 8008848:	60a3      	str	r3, [r4, #8]
 800884a:	6022      	str	r2, [r4, #0]
 800884c:	2000      	movs	r0, #0
 800884e:	e7db      	b.n	8008808 <__ssputs_r+0x58>
 8008850:	462a      	mov	r2, r5
 8008852:	f000 fb6f 	bl	8008f34 <_realloc_r>
 8008856:	4606      	mov	r6, r0
 8008858:	2800      	cmp	r0, #0
 800885a:	d1e1      	bne.n	8008820 <__ssputs_r+0x70>
 800885c:	6921      	ldr	r1, [r4, #16]
 800885e:	4650      	mov	r0, sl
 8008860:	f000 fabe 	bl	8008de0 <_free_r>
 8008864:	e7c7      	b.n	80087f6 <__ssputs_r+0x46>
	...

08008868 <_svfiprintf_r>:
 8008868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800886c:	4698      	mov	r8, r3
 800886e:	898b      	ldrh	r3, [r1, #12]
 8008870:	061b      	lsls	r3, r3, #24
 8008872:	b09d      	sub	sp, #116	; 0x74
 8008874:	4607      	mov	r7, r0
 8008876:	460d      	mov	r5, r1
 8008878:	4614      	mov	r4, r2
 800887a:	d50e      	bpl.n	800889a <_svfiprintf_r+0x32>
 800887c:	690b      	ldr	r3, [r1, #16]
 800887e:	b963      	cbnz	r3, 800889a <_svfiprintf_r+0x32>
 8008880:	2140      	movs	r1, #64	; 0x40
 8008882:	f000 fafd 	bl	8008e80 <_malloc_r>
 8008886:	6028      	str	r0, [r5, #0]
 8008888:	6128      	str	r0, [r5, #16]
 800888a:	b920      	cbnz	r0, 8008896 <_svfiprintf_r+0x2e>
 800888c:	230c      	movs	r3, #12
 800888e:	603b      	str	r3, [r7, #0]
 8008890:	f04f 30ff 	mov.w	r0, #4294967295
 8008894:	e0d1      	b.n	8008a3a <_svfiprintf_r+0x1d2>
 8008896:	2340      	movs	r3, #64	; 0x40
 8008898:	616b      	str	r3, [r5, #20]
 800889a:	2300      	movs	r3, #0
 800889c:	9309      	str	r3, [sp, #36]	; 0x24
 800889e:	2320      	movs	r3, #32
 80088a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80088a8:	2330      	movs	r3, #48	; 0x30
 80088aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008a54 <_svfiprintf_r+0x1ec>
 80088ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088b2:	f04f 0901 	mov.w	r9, #1
 80088b6:	4623      	mov	r3, r4
 80088b8:	469a      	mov	sl, r3
 80088ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088be:	b10a      	cbz	r2, 80088c4 <_svfiprintf_r+0x5c>
 80088c0:	2a25      	cmp	r2, #37	; 0x25
 80088c2:	d1f9      	bne.n	80088b8 <_svfiprintf_r+0x50>
 80088c4:	ebba 0b04 	subs.w	fp, sl, r4
 80088c8:	d00b      	beq.n	80088e2 <_svfiprintf_r+0x7a>
 80088ca:	465b      	mov	r3, fp
 80088cc:	4622      	mov	r2, r4
 80088ce:	4629      	mov	r1, r5
 80088d0:	4638      	mov	r0, r7
 80088d2:	f7ff ff6d 	bl	80087b0 <__ssputs_r>
 80088d6:	3001      	adds	r0, #1
 80088d8:	f000 80aa 	beq.w	8008a30 <_svfiprintf_r+0x1c8>
 80088dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088de:	445a      	add	r2, fp
 80088e0:	9209      	str	r2, [sp, #36]	; 0x24
 80088e2:	f89a 3000 	ldrb.w	r3, [sl]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f000 80a2 	beq.w	8008a30 <_svfiprintf_r+0x1c8>
 80088ec:	2300      	movs	r3, #0
 80088ee:	f04f 32ff 	mov.w	r2, #4294967295
 80088f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088f6:	f10a 0a01 	add.w	sl, sl, #1
 80088fa:	9304      	str	r3, [sp, #16]
 80088fc:	9307      	str	r3, [sp, #28]
 80088fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008902:	931a      	str	r3, [sp, #104]	; 0x68
 8008904:	4654      	mov	r4, sl
 8008906:	2205      	movs	r2, #5
 8008908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800890c:	4851      	ldr	r0, [pc, #324]	; (8008a54 <_svfiprintf_r+0x1ec>)
 800890e:	f7f7 fc67 	bl	80001e0 <memchr>
 8008912:	9a04      	ldr	r2, [sp, #16]
 8008914:	b9d8      	cbnz	r0, 800894e <_svfiprintf_r+0xe6>
 8008916:	06d0      	lsls	r0, r2, #27
 8008918:	bf44      	itt	mi
 800891a:	2320      	movmi	r3, #32
 800891c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008920:	0711      	lsls	r1, r2, #28
 8008922:	bf44      	itt	mi
 8008924:	232b      	movmi	r3, #43	; 0x2b
 8008926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800892a:	f89a 3000 	ldrb.w	r3, [sl]
 800892e:	2b2a      	cmp	r3, #42	; 0x2a
 8008930:	d015      	beq.n	800895e <_svfiprintf_r+0xf6>
 8008932:	9a07      	ldr	r2, [sp, #28]
 8008934:	4654      	mov	r4, sl
 8008936:	2000      	movs	r0, #0
 8008938:	f04f 0c0a 	mov.w	ip, #10
 800893c:	4621      	mov	r1, r4
 800893e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008942:	3b30      	subs	r3, #48	; 0x30
 8008944:	2b09      	cmp	r3, #9
 8008946:	d94e      	bls.n	80089e6 <_svfiprintf_r+0x17e>
 8008948:	b1b0      	cbz	r0, 8008978 <_svfiprintf_r+0x110>
 800894a:	9207      	str	r2, [sp, #28]
 800894c:	e014      	b.n	8008978 <_svfiprintf_r+0x110>
 800894e:	eba0 0308 	sub.w	r3, r0, r8
 8008952:	fa09 f303 	lsl.w	r3, r9, r3
 8008956:	4313      	orrs	r3, r2
 8008958:	9304      	str	r3, [sp, #16]
 800895a:	46a2      	mov	sl, r4
 800895c:	e7d2      	b.n	8008904 <_svfiprintf_r+0x9c>
 800895e:	9b03      	ldr	r3, [sp, #12]
 8008960:	1d19      	adds	r1, r3, #4
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	9103      	str	r1, [sp, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	bfbb      	ittet	lt
 800896a:	425b      	neglt	r3, r3
 800896c:	f042 0202 	orrlt.w	r2, r2, #2
 8008970:	9307      	strge	r3, [sp, #28]
 8008972:	9307      	strlt	r3, [sp, #28]
 8008974:	bfb8      	it	lt
 8008976:	9204      	strlt	r2, [sp, #16]
 8008978:	7823      	ldrb	r3, [r4, #0]
 800897a:	2b2e      	cmp	r3, #46	; 0x2e
 800897c:	d10c      	bne.n	8008998 <_svfiprintf_r+0x130>
 800897e:	7863      	ldrb	r3, [r4, #1]
 8008980:	2b2a      	cmp	r3, #42	; 0x2a
 8008982:	d135      	bne.n	80089f0 <_svfiprintf_r+0x188>
 8008984:	9b03      	ldr	r3, [sp, #12]
 8008986:	1d1a      	adds	r2, r3, #4
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	9203      	str	r2, [sp, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	bfb8      	it	lt
 8008990:	f04f 33ff 	movlt.w	r3, #4294967295
 8008994:	3402      	adds	r4, #2
 8008996:	9305      	str	r3, [sp, #20]
 8008998:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008a64 <_svfiprintf_r+0x1fc>
 800899c:	7821      	ldrb	r1, [r4, #0]
 800899e:	2203      	movs	r2, #3
 80089a0:	4650      	mov	r0, sl
 80089a2:	f7f7 fc1d 	bl	80001e0 <memchr>
 80089a6:	b140      	cbz	r0, 80089ba <_svfiprintf_r+0x152>
 80089a8:	2340      	movs	r3, #64	; 0x40
 80089aa:	eba0 000a 	sub.w	r0, r0, sl
 80089ae:	fa03 f000 	lsl.w	r0, r3, r0
 80089b2:	9b04      	ldr	r3, [sp, #16]
 80089b4:	4303      	orrs	r3, r0
 80089b6:	3401      	adds	r4, #1
 80089b8:	9304      	str	r3, [sp, #16]
 80089ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089be:	4826      	ldr	r0, [pc, #152]	; (8008a58 <_svfiprintf_r+0x1f0>)
 80089c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089c4:	2206      	movs	r2, #6
 80089c6:	f7f7 fc0b 	bl	80001e0 <memchr>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	d038      	beq.n	8008a40 <_svfiprintf_r+0x1d8>
 80089ce:	4b23      	ldr	r3, [pc, #140]	; (8008a5c <_svfiprintf_r+0x1f4>)
 80089d0:	bb1b      	cbnz	r3, 8008a1a <_svfiprintf_r+0x1b2>
 80089d2:	9b03      	ldr	r3, [sp, #12]
 80089d4:	3307      	adds	r3, #7
 80089d6:	f023 0307 	bic.w	r3, r3, #7
 80089da:	3308      	adds	r3, #8
 80089dc:	9303      	str	r3, [sp, #12]
 80089de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089e0:	4433      	add	r3, r6
 80089e2:	9309      	str	r3, [sp, #36]	; 0x24
 80089e4:	e767      	b.n	80088b6 <_svfiprintf_r+0x4e>
 80089e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80089ea:	460c      	mov	r4, r1
 80089ec:	2001      	movs	r0, #1
 80089ee:	e7a5      	b.n	800893c <_svfiprintf_r+0xd4>
 80089f0:	2300      	movs	r3, #0
 80089f2:	3401      	adds	r4, #1
 80089f4:	9305      	str	r3, [sp, #20]
 80089f6:	4619      	mov	r1, r3
 80089f8:	f04f 0c0a 	mov.w	ip, #10
 80089fc:	4620      	mov	r0, r4
 80089fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a02:	3a30      	subs	r2, #48	; 0x30
 8008a04:	2a09      	cmp	r2, #9
 8008a06:	d903      	bls.n	8008a10 <_svfiprintf_r+0x1a8>
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d0c5      	beq.n	8008998 <_svfiprintf_r+0x130>
 8008a0c:	9105      	str	r1, [sp, #20]
 8008a0e:	e7c3      	b.n	8008998 <_svfiprintf_r+0x130>
 8008a10:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a14:	4604      	mov	r4, r0
 8008a16:	2301      	movs	r3, #1
 8008a18:	e7f0      	b.n	80089fc <_svfiprintf_r+0x194>
 8008a1a:	ab03      	add	r3, sp, #12
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	462a      	mov	r2, r5
 8008a20:	4b0f      	ldr	r3, [pc, #60]	; (8008a60 <_svfiprintf_r+0x1f8>)
 8008a22:	a904      	add	r1, sp, #16
 8008a24:	4638      	mov	r0, r7
 8008a26:	f3af 8000 	nop.w
 8008a2a:	1c42      	adds	r2, r0, #1
 8008a2c:	4606      	mov	r6, r0
 8008a2e:	d1d6      	bne.n	80089de <_svfiprintf_r+0x176>
 8008a30:	89ab      	ldrh	r3, [r5, #12]
 8008a32:	065b      	lsls	r3, r3, #25
 8008a34:	f53f af2c 	bmi.w	8008890 <_svfiprintf_r+0x28>
 8008a38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a3a:	b01d      	add	sp, #116	; 0x74
 8008a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a40:	ab03      	add	r3, sp, #12
 8008a42:	9300      	str	r3, [sp, #0]
 8008a44:	462a      	mov	r2, r5
 8008a46:	4b06      	ldr	r3, [pc, #24]	; (8008a60 <_svfiprintf_r+0x1f8>)
 8008a48:	a904      	add	r1, sp, #16
 8008a4a:	4638      	mov	r0, r7
 8008a4c:	f000 f87a 	bl	8008b44 <_printf_i>
 8008a50:	e7eb      	b.n	8008a2a <_svfiprintf_r+0x1c2>
 8008a52:	bf00      	nop
 8008a54:	08009868 	.word	0x08009868
 8008a58:	08009872 	.word	0x08009872
 8008a5c:	00000000 	.word	0x00000000
 8008a60:	080087b1 	.word	0x080087b1
 8008a64:	0800986e 	.word	0x0800986e

08008a68 <_printf_common>:
 8008a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a6c:	4616      	mov	r6, r2
 8008a6e:	4699      	mov	r9, r3
 8008a70:	688a      	ldr	r2, [r1, #8]
 8008a72:	690b      	ldr	r3, [r1, #16]
 8008a74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	bfb8      	it	lt
 8008a7c:	4613      	movlt	r3, r2
 8008a7e:	6033      	str	r3, [r6, #0]
 8008a80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a84:	4607      	mov	r7, r0
 8008a86:	460c      	mov	r4, r1
 8008a88:	b10a      	cbz	r2, 8008a8e <_printf_common+0x26>
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	6033      	str	r3, [r6, #0]
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	0699      	lsls	r1, r3, #26
 8008a92:	bf42      	ittt	mi
 8008a94:	6833      	ldrmi	r3, [r6, #0]
 8008a96:	3302      	addmi	r3, #2
 8008a98:	6033      	strmi	r3, [r6, #0]
 8008a9a:	6825      	ldr	r5, [r4, #0]
 8008a9c:	f015 0506 	ands.w	r5, r5, #6
 8008aa0:	d106      	bne.n	8008ab0 <_printf_common+0x48>
 8008aa2:	f104 0a19 	add.w	sl, r4, #25
 8008aa6:	68e3      	ldr	r3, [r4, #12]
 8008aa8:	6832      	ldr	r2, [r6, #0]
 8008aaa:	1a9b      	subs	r3, r3, r2
 8008aac:	42ab      	cmp	r3, r5
 8008aae:	dc26      	bgt.n	8008afe <_printf_common+0x96>
 8008ab0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ab4:	1e13      	subs	r3, r2, #0
 8008ab6:	6822      	ldr	r2, [r4, #0]
 8008ab8:	bf18      	it	ne
 8008aba:	2301      	movne	r3, #1
 8008abc:	0692      	lsls	r2, r2, #26
 8008abe:	d42b      	bmi.n	8008b18 <_printf_common+0xb0>
 8008ac0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ac4:	4649      	mov	r1, r9
 8008ac6:	4638      	mov	r0, r7
 8008ac8:	47c0      	blx	r8
 8008aca:	3001      	adds	r0, #1
 8008acc:	d01e      	beq.n	8008b0c <_printf_common+0xa4>
 8008ace:	6823      	ldr	r3, [r4, #0]
 8008ad0:	68e5      	ldr	r5, [r4, #12]
 8008ad2:	6832      	ldr	r2, [r6, #0]
 8008ad4:	f003 0306 	and.w	r3, r3, #6
 8008ad8:	2b04      	cmp	r3, #4
 8008ada:	bf08      	it	eq
 8008adc:	1aad      	subeq	r5, r5, r2
 8008ade:	68a3      	ldr	r3, [r4, #8]
 8008ae0:	6922      	ldr	r2, [r4, #16]
 8008ae2:	bf0c      	ite	eq
 8008ae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ae8:	2500      	movne	r5, #0
 8008aea:	4293      	cmp	r3, r2
 8008aec:	bfc4      	itt	gt
 8008aee:	1a9b      	subgt	r3, r3, r2
 8008af0:	18ed      	addgt	r5, r5, r3
 8008af2:	2600      	movs	r6, #0
 8008af4:	341a      	adds	r4, #26
 8008af6:	42b5      	cmp	r5, r6
 8008af8:	d11a      	bne.n	8008b30 <_printf_common+0xc8>
 8008afa:	2000      	movs	r0, #0
 8008afc:	e008      	b.n	8008b10 <_printf_common+0xa8>
 8008afe:	2301      	movs	r3, #1
 8008b00:	4652      	mov	r2, sl
 8008b02:	4649      	mov	r1, r9
 8008b04:	4638      	mov	r0, r7
 8008b06:	47c0      	blx	r8
 8008b08:	3001      	adds	r0, #1
 8008b0a:	d103      	bne.n	8008b14 <_printf_common+0xac>
 8008b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b14:	3501      	adds	r5, #1
 8008b16:	e7c6      	b.n	8008aa6 <_printf_common+0x3e>
 8008b18:	18e1      	adds	r1, r4, r3
 8008b1a:	1c5a      	adds	r2, r3, #1
 8008b1c:	2030      	movs	r0, #48	; 0x30
 8008b1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b22:	4422      	add	r2, r4
 8008b24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b2c:	3302      	adds	r3, #2
 8008b2e:	e7c7      	b.n	8008ac0 <_printf_common+0x58>
 8008b30:	2301      	movs	r3, #1
 8008b32:	4622      	mov	r2, r4
 8008b34:	4649      	mov	r1, r9
 8008b36:	4638      	mov	r0, r7
 8008b38:	47c0      	blx	r8
 8008b3a:	3001      	adds	r0, #1
 8008b3c:	d0e6      	beq.n	8008b0c <_printf_common+0xa4>
 8008b3e:	3601      	adds	r6, #1
 8008b40:	e7d9      	b.n	8008af6 <_printf_common+0x8e>
	...

08008b44 <_printf_i>:
 8008b44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b48:	460c      	mov	r4, r1
 8008b4a:	4691      	mov	r9, r2
 8008b4c:	7e27      	ldrb	r7, [r4, #24]
 8008b4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008b50:	2f78      	cmp	r7, #120	; 0x78
 8008b52:	4680      	mov	r8, r0
 8008b54:	469a      	mov	sl, r3
 8008b56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b5a:	d807      	bhi.n	8008b6c <_printf_i+0x28>
 8008b5c:	2f62      	cmp	r7, #98	; 0x62
 8008b5e:	d80a      	bhi.n	8008b76 <_printf_i+0x32>
 8008b60:	2f00      	cmp	r7, #0
 8008b62:	f000 80d8 	beq.w	8008d16 <_printf_i+0x1d2>
 8008b66:	2f58      	cmp	r7, #88	; 0x58
 8008b68:	f000 80a3 	beq.w	8008cb2 <_printf_i+0x16e>
 8008b6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008b70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b74:	e03a      	b.n	8008bec <_printf_i+0xa8>
 8008b76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b7a:	2b15      	cmp	r3, #21
 8008b7c:	d8f6      	bhi.n	8008b6c <_printf_i+0x28>
 8008b7e:	a001      	add	r0, pc, #4	; (adr r0, 8008b84 <_printf_i+0x40>)
 8008b80:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008b84:	08008bdd 	.word	0x08008bdd
 8008b88:	08008bf1 	.word	0x08008bf1
 8008b8c:	08008b6d 	.word	0x08008b6d
 8008b90:	08008b6d 	.word	0x08008b6d
 8008b94:	08008b6d 	.word	0x08008b6d
 8008b98:	08008b6d 	.word	0x08008b6d
 8008b9c:	08008bf1 	.word	0x08008bf1
 8008ba0:	08008b6d 	.word	0x08008b6d
 8008ba4:	08008b6d 	.word	0x08008b6d
 8008ba8:	08008b6d 	.word	0x08008b6d
 8008bac:	08008b6d 	.word	0x08008b6d
 8008bb0:	08008cfd 	.word	0x08008cfd
 8008bb4:	08008c21 	.word	0x08008c21
 8008bb8:	08008cdf 	.word	0x08008cdf
 8008bbc:	08008b6d 	.word	0x08008b6d
 8008bc0:	08008b6d 	.word	0x08008b6d
 8008bc4:	08008d1f 	.word	0x08008d1f
 8008bc8:	08008b6d 	.word	0x08008b6d
 8008bcc:	08008c21 	.word	0x08008c21
 8008bd0:	08008b6d 	.word	0x08008b6d
 8008bd4:	08008b6d 	.word	0x08008b6d
 8008bd8:	08008ce7 	.word	0x08008ce7
 8008bdc:	680b      	ldr	r3, [r1, #0]
 8008bde:	1d1a      	adds	r2, r3, #4
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	600a      	str	r2, [r1, #0]
 8008be4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008be8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bec:	2301      	movs	r3, #1
 8008bee:	e0a3      	b.n	8008d38 <_printf_i+0x1f4>
 8008bf0:	6825      	ldr	r5, [r4, #0]
 8008bf2:	6808      	ldr	r0, [r1, #0]
 8008bf4:	062e      	lsls	r6, r5, #24
 8008bf6:	f100 0304 	add.w	r3, r0, #4
 8008bfa:	d50a      	bpl.n	8008c12 <_printf_i+0xce>
 8008bfc:	6805      	ldr	r5, [r0, #0]
 8008bfe:	600b      	str	r3, [r1, #0]
 8008c00:	2d00      	cmp	r5, #0
 8008c02:	da03      	bge.n	8008c0c <_printf_i+0xc8>
 8008c04:	232d      	movs	r3, #45	; 0x2d
 8008c06:	426d      	negs	r5, r5
 8008c08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c0c:	485e      	ldr	r0, [pc, #376]	; (8008d88 <_printf_i+0x244>)
 8008c0e:	230a      	movs	r3, #10
 8008c10:	e019      	b.n	8008c46 <_printf_i+0x102>
 8008c12:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008c16:	6805      	ldr	r5, [r0, #0]
 8008c18:	600b      	str	r3, [r1, #0]
 8008c1a:	bf18      	it	ne
 8008c1c:	b22d      	sxthne	r5, r5
 8008c1e:	e7ef      	b.n	8008c00 <_printf_i+0xbc>
 8008c20:	680b      	ldr	r3, [r1, #0]
 8008c22:	6825      	ldr	r5, [r4, #0]
 8008c24:	1d18      	adds	r0, r3, #4
 8008c26:	6008      	str	r0, [r1, #0]
 8008c28:	0628      	lsls	r0, r5, #24
 8008c2a:	d501      	bpl.n	8008c30 <_printf_i+0xec>
 8008c2c:	681d      	ldr	r5, [r3, #0]
 8008c2e:	e002      	b.n	8008c36 <_printf_i+0xf2>
 8008c30:	0669      	lsls	r1, r5, #25
 8008c32:	d5fb      	bpl.n	8008c2c <_printf_i+0xe8>
 8008c34:	881d      	ldrh	r5, [r3, #0]
 8008c36:	4854      	ldr	r0, [pc, #336]	; (8008d88 <_printf_i+0x244>)
 8008c38:	2f6f      	cmp	r7, #111	; 0x6f
 8008c3a:	bf0c      	ite	eq
 8008c3c:	2308      	moveq	r3, #8
 8008c3e:	230a      	movne	r3, #10
 8008c40:	2100      	movs	r1, #0
 8008c42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c46:	6866      	ldr	r6, [r4, #4]
 8008c48:	60a6      	str	r6, [r4, #8]
 8008c4a:	2e00      	cmp	r6, #0
 8008c4c:	bfa2      	ittt	ge
 8008c4e:	6821      	ldrge	r1, [r4, #0]
 8008c50:	f021 0104 	bicge.w	r1, r1, #4
 8008c54:	6021      	strge	r1, [r4, #0]
 8008c56:	b90d      	cbnz	r5, 8008c5c <_printf_i+0x118>
 8008c58:	2e00      	cmp	r6, #0
 8008c5a:	d04d      	beq.n	8008cf8 <_printf_i+0x1b4>
 8008c5c:	4616      	mov	r6, r2
 8008c5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c62:	fb03 5711 	mls	r7, r3, r1, r5
 8008c66:	5dc7      	ldrb	r7, [r0, r7]
 8008c68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c6c:	462f      	mov	r7, r5
 8008c6e:	42bb      	cmp	r3, r7
 8008c70:	460d      	mov	r5, r1
 8008c72:	d9f4      	bls.n	8008c5e <_printf_i+0x11a>
 8008c74:	2b08      	cmp	r3, #8
 8008c76:	d10b      	bne.n	8008c90 <_printf_i+0x14c>
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	07df      	lsls	r7, r3, #31
 8008c7c:	d508      	bpl.n	8008c90 <_printf_i+0x14c>
 8008c7e:	6923      	ldr	r3, [r4, #16]
 8008c80:	6861      	ldr	r1, [r4, #4]
 8008c82:	4299      	cmp	r1, r3
 8008c84:	bfde      	ittt	le
 8008c86:	2330      	movle	r3, #48	; 0x30
 8008c88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c90:	1b92      	subs	r2, r2, r6
 8008c92:	6122      	str	r2, [r4, #16]
 8008c94:	f8cd a000 	str.w	sl, [sp]
 8008c98:	464b      	mov	r3, r9
 8008c9a:	aa03      	add	r2, sp, #12
 8008c9c:	4621      	mov	r1, r4
 8008c9e:	4640      	mov	r0, r8
 8008ca0:	f7ff fee2 	bl	8008a68 <_printf_common>
 8008ca4:	3001      	adds	r0, #1
 8008ca6:	d14c      	bne.n	8008d42 <_printf_i+0x1fe>
 8008ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cac:	b004      	add	sp, #16
 8008cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cb2:	4835      	ldr	r0, [pc, #212]	; (8008d88 <_printf_i+0x244>)
 8008cb4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008cb8:	6823      	ldr	r3, [r4, #0]
 8008cba:	680e      	ldr	r6, [r1, #0]
 8008cbc:	061f      	lsls	r7, r3, #24
 8008cbe:	f856 5b04 	ldr.w	r5, [r6], #4
 8008cc2:	600e      	str	r6, [r1, #0]
 8008cc4:	d514      	bpl.n	8008cf0 <_printf_i+0x1ac>
 8008cc6:	07d9      	lsls	r1, r3, #31
 8008cc8:	bf44      	itt	mi
 8008cca:	f043 0320 	orrmi.w	r3, r3, #32
 8008cce:	6023      	strmi	r3, [r4, #0]
 8008cd0:	b91d      	cbnz	r5, 8008cda <_printf_i+0x196>
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	f023 0320 	bic.w	r3, r3, #32
 8008cd8:	6023      	str	r3, [r4, #0]
 8008cda:	2310      	movs	r3, #16
 8008cdc:	e7b0      	b.n	8008c40 <_printf_i+0xfc>
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	f043 0320 	orr.w	r3, r3, #32
 8008ce4:	6023      	str	r3, [r4, #0]
 8008ce6:	2378      	movs	r3, #120	; 0x78
 8008ce8:	4828      	ldr	r0, [pc, #160]	; (8008d8c <_printf_i+0x248>)
 8008cea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cee:	e7e3      	b.n	8008cb8 <_printf_i+0x174>
 8008cf0:	065e      	lsls	r6, r3, #25
 8008cf2:	bf48      	it	mi
 8008cf4:	b2ad      	uxthmi	r5, r5
 8008cf6:	e7e6      	b.n	8008cc6 <_printf_i+0x182>
 8008cf8:	4616      	mov	r6, r2
 8008cfa:	e7bb      	b.n	8008c74 <_printf_i+0x130>
 8008cfc:	680b      	ldr	r3, [r1, #0]
 8008cfe:	6826      	ldr	r6, [r4, #0]
 8008d00:	6960      	ldr	r0, [r4, #20]
 8008d02:	1d1d      	adds	r5, r3, #4
 8008d04:	600d      	str	r5, [r1, #0]
 8008d06:	0635      	lsls	r5, r6, #24
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	d501      	bpl.n	8008d10 <_printf_i+0x1cc>
 8008d0c:	6018      	str	r0, [r3, #0]
 8008d0e:	e002      	b.n	8008d16 <_printf_i+0x1d2>
 8008d10:	0671      	lsls	r1, r6, #25
 8008d12:	d5fb      	bpl.n	8008d0c <_printf_i+0x1c8>
 8008d14:	8018      	strh	r0, [r3, #0]
 8008d16:	2300      	movs	r3, #0
 8008d18:	6123      	str	r3, [r4, #16]
 8008d1a:	4616      	mov	r6, r2
 8008d1c:	e7ba      	b.n	8008c94 <_printf_i+0x150>
 8008d1e:	680b      	ldr	r3, [r1, #0]
 8008d20:	1d1a      	adds	r2, r3, #4
 8008d22:	600a      	str	r2, [r1, #0]
 8008d24:	681e      	ldr	r6, [r3, #0]
 8008d26:	6862      	ldr	r2, [r4, #4]
 8008d28:	2100      	movs	r1, #0
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	f7f7 fa58 	bl	80001e0 <memchr>
 8008d30:	b108      	cbz	r0, 8008d36 <_printf_i+0x1f2>
 8008d32:	1b80      	subs	r0, r0, r6
 8008d34:	6060      	str	r0, [r4, #4]
 8008d36:	6863      	ldr	r3, [r4, #4]
 8008d38:	6123      	str	r3, [r4, #16]
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d40:	e7a8      	b.n	8008c94 <_printf_i+0x150>
 8008d42:	6923      	ldr	r3, [r4, #16]
 8008d44:	4632      	mov	r2, r6
 8008d46:	4649      	mov	r1, r9
 8008d48:	4640      	mov	r0, r8
 8008d4a:	47d0      	blx	sl
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	d0ab      	beq.n	8008ca8 <_printf_i+0x164>
 8008d50:	6823      	ldr	r3, [r4, #0]
 8008d52:	079b      	lsls	r3, r3, #30
 8008d54:	d413      	bmi.n	8008d7e <_printf_i+0x23a>
 8008d56:	68e0      	ldr	r0, [r4, #12]
 8008d58:	9b03      	ldr	r3, [sp, #12]
 8008d5a:	4298      	cmp	r0, r3
 8008d5c:	bfb8      	it	lt
 8008d5e:	4618      	movlt	r0, r3
 8008d60:	e7a4      	b.n	8008cac <_printf_i+0x168>
 8008d62:	2301      	movs	r3, #1
 8008d64:	4632      	mov	r2, r6
 8008d66:	4649      	mov	r1, r9
 8008d68:	4640      	mov	r0, r8
 8008d6a:	47d0      	blx	sl
 8008d6c:	3001      	adds	r0, #1
 8008d6e:	d09b      	beq.n	8008ca8 <_printf_i+0x164>
 8008d70:	3501      	adds	r5, #1
 8008d72:	68e3      	ldr	r3, [r4, #12]
 8008d74:	9903      	ldr	r1, [sp, #12]
 8008d76:	1a5b      	subs	r3, r3, r1
 8008d78:	42ab      	cmp	r3, r5
 8008d7a:	dcf2      	bgt.n	8008d62 <_printf_i+0x21e>
 8008d7c:	e7eb      	b.n	8008d56 <_printf_i+0x212>
 8008d7e:	2500      	movs	r5, #0
 8008d80:	f104 0619 	add.w	r6, r4, #25
 8008d84:	e7f5      	b.n	8008d72 <_printf_i+0x22e>
 8008d86:	bf00      	nop
 8008d88:	08009879 	.word	0x08009879
 8008d8c:	0800988a 	.word	0x0800988a

08008d90 <memcpy>:
 8008d90:	440a      	add	r2, r1
 8008d92:	4291      	cmp	r1, r2
 8008d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d98:	d100      	bne.n	8008d9c <memcpy+0xc>
 8008d9a:	4770      	bx	lr
 8008d9c:	b510      	push	{r4, lr}
 8008d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008da2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008da6:	4291      	cmp	r1, r2
 8008da8:	d1f9      	bne.n	8008d9e <memcpy+0xe>
 8008daa:	bd10      	pop	{r4, pc}

08008dac <memmove>:
 8008dac:	4288      	cmp	r0, r1
 8008dae:	b510      	push	{r4, lr}
 8008db0:	eb01 0402 	add.w	r4, r1, r2
 8008db4:	d902      	bls.n	8008dbc <memmove+0x10>
 8008db6:	4284      	cmp	r4, r0
 8008db8:	4623      	mov	r3, r4
 8008dba:	d807      	bhi.n	8008dcc <memmove+0x20>
 8008dbc:	1e43      	subs	r3, r0, #1
 8008dbe:	42a1      	cmp	r1, r4
 8008dc0:	d008      	beq.n	8008dd4 <memmove+0x28>
 8008dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dca:	e7f8      	b.n	8008dbe <memmove+0x12>
 8008dcc:	4402      	add	r2, r0
 8008dce:	4601      	mov	r1, r0
 8008dd0:	428a      	cmp	r2, r1
 8008dd2:	d100      	bne.n	8008dd6 <memmove+0x2a>
 8008dd4:	bd10      	pop	{r4, pc}
 8008dd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008dde:	e7f7      	b.n	8008dd0 <memmove+0x24>

08008de0 <_free_r>:
 8008de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008de2:	2900      	cmp	r1, #0
 8008de4:	d048      	beq.n	8008e78 <_free_r+0x98>
 8008de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dea:	9001      	str	r0, [sp, #4]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f1a1 0404 	sub.w	r4, r1, #4
 8008df2:	bfb8      	it	lt
 8008df4:	18e4      	addlt	r4, r4, r3
 8008df6:	f000 f8d3 	bl	8008fa0 <__malloc_lock>
 8008dfa:	4a20      	ldr	r2, [pc, #128]	; (8008e7c <_free_r+0x9c>)
 8008dfc:	9801      	ldr	r0, [sp, #4]
 8008dfe:	6813      	ldr	r3, [r2, #0]
 8008e00:	4615      	mov	r5, r2
 8008e02:	b933      	cbnz	r3, 8008e12 <_free_r+0x32>
 8008e04:	6063      	str	r3, [r4, #4]
 8008e06:	6014      	str	r4, [r2, #0]
 8008e08:	b003      	add	sp, #12
 8008e0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e0e:	f000 b8cd 	b.w	8008fac <__malloc_unlock>
 8008e12:	42a3      	cmp	r3, r4
 8008e14:	d90b      	bls.n	8008e2e <_free_r+0x4e>
 8008e16:	6821      	ldr	r1, [r4, #0]
 8008e18:	1862      	adds	r2, r4, r1
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	bf04      	itt	eq
 8008e1e:	681a      	ldreq	r2, [r3, #0]
 8008e20:	685b      	ldreq	r3, [r3, #4]
 8008e22:	6063      	str	r3, [r4, #4]
 8008e24:	bf04      	itt	eq
 8008e26:	1852      	addeq	r2, r2, r1
 8008e28:	6022      	streq	r2, [r4, #0]
 8008e2a:	602c      	str	r4, [r5, #0]
 8008e2c:	e7ec      	b.n	8008e08 <_free_r+0x28>
 8008e2e:	461a      	mov	r2, r3
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	b10b      	cbz	r3, 8008e38 <_free_r+0x58>
 8008e34:	42a3      	cmp	r3, r4
 8008e36:	d9fa      	bls.n	8008e2e <_free_r+0x4e>
 8008e38:	6811      	ldr	r1, [r2, #0]
 8008e3a:	1855      	adds	r5, r2, r1
 8008e3c:	42a5      	cmp	r5, r4
 8008e3e:	d10b      	bne.n	8008e58 <_free_r+0x78>
 8008e40:	6824      	ldr	r4, [r4, #0]
 8008e42:	4421      	add	r1, r4
 8008e44:	1854      	adds	r4, r2, r1
 8008e46:	42a3      	cmp	r3, r4
 8008e48:	6011      	str	r1, [r2, #0]
 8008e4a:	d1dd      	bne.n	8008e08 <_free_r+0x28>
 8008e4c:	681c      	ldr	r4, [r3, #0]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	6053      	str	r3, [r2, #4]
 8008e52:	4421      	add	r1, r4
 8008e54:	6011      	str	r1, [r2, #0]
 8008e56:	e7d7      	b.n	8008e08 <_free_r+0x28>
 8008e58:	d902      	bls.n	8008e60 <_free_r+0x80>
 8008e5a:	230c      	movs	r3, #12
 8008e5c:	6003      	str	r3, [r0, #0]
 8008e5e:	e7d3      	b.n	8008e08 <_free_r+0x28>
 8008e60:	6825      	ldr	r5, [r4, #0]
 8008e62:	1961      	adds	r1, r4, r5
 8008e64:	428b      	cmp	r3, r1
 8008e66:	bf04      	itt	eq
 8008e68:	6819      	ldreq	r1, [r3, #0]
 8008e6a:	685b      	ldreq	r3, [r3, #4]
 8008e6c:	6063      	str	r3, [r4, #4]
 8008e6e:	bf04      	itt	eq
 8008e70:	1949      	addeq	r1, r1, r5
 8008e72:	6021      	streq	r1, [r4, #0]
 8008e74:	6054      	str	r4, [r2, #4]
 8008e76:	e7c7      	b.n	8008e08 <_free_r+0x28>
 8008e78:	b003      	add	sp, #12
 8008e7a:	bd30      	pop	{r4, r5, pc}
 8008e7c:	200008fc 	.word	0x200008fc

08008e80 <_malloc_r>:
 8008e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e82:	1ccd      	adds	r5, r1, #3
 8008e84:	f025 0503 	bic.w	r5, r5, #3
 8008e88:	3508      	adds	r5, #8
 8008e8a:	2d0c      	cmp	r5, #12
 8008e8c:	bf38      	it	cc
 8008e8e:	250c      	movcc	r5, #12
 8008e90:	2d00      	cmp	r5, #0
 8008e92:	4606      	mov	r6, r0
 8008e94:	db01      	blt.n	8008e9a <_malloc_r+0x1a>
 8008e96:	42a9      	cmp	r1, r5
 8008e98:	d903      	bls.n	8008ea2 <_malloc_r+0x22>
 8008e9a:	230c      	movs	r3, #12
 8008e9c:	6033      	str	r3, [r6, #0]
 8008e9e:	2000      	movs	r0, #0
 8008ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ea2:	f000 f87d 	bl	8008fa0 <__malloc_lock>
 8008ea6:	4921      	ldr	r1, [pc, #132]	; (8008f2c <_malloc_r+0xac>)
 8008ea8:	680a      	ldr	r2, [r1, #0]
 8008eaa:	4614      	mov	r4, r2
 8008eac:	b99c      	cbnz	r4, 8008ed6 <_malloc_r+0x56>
 8008eae:	4f20      	ldr	r7, [pc, #128]	; (8008f30 <_malloc_r+0xb0>)
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	b923      	cbnz	r3, 8008ebe <_malloc_r+0x3e>
 8008eb4:	4621      	mov	r1, r4
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	f000 f862 	bl	8008f80 <_sbrk_r>
 8008ebc:	6038      	str	r0, [r7, #0]
 8008ebe:	4629      	mov	r1, r5
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	f000 f85d 	bl	8008f80 <_sbrk_r>
 8008ec6:	1c43      	adds	r3, r0, #1
 8008ec8:	d123      	bne.n	8008f12 <_malloc_r+0x92>
 8008eca:	230c      	movs	r3, #12
 8008ecc:	6033      	str	r3, [r6, #0]
 8008ece:	4630      	mov	r0, r6
 8008ed0:	f000 f86c 	bl	8008fac <__malloc_unlock>
 8008ed4:	e7e3      	b.n	8008e9e <_malloc_r+0x1e>
 8008ed6:	6823      	ldr	r3, [r4, #0]
 8008ed8:	1b5b      	subs	r3, r3, r5
 8008eda:	d417      	bmi.n	8008f0c <_malloc_r+0x8c>
 8008edc:	2b0b      	cmp	r3, #11
 8008ede:	d903      	bls.n	8008ee8 <_malloc_r+0x68>
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	441c      	add	r4, r3
 8008ee4:	6025      	str	r5, [r4, #0]
 8008ee6:	e004      	b.n	8008ef2 <_malloc_r+0x72>
 8008ee8:	6863      	ldr	r3, [r4, #4]
 8008eea:	42a2      	cmp	r2, r4
 8008eec:	bf0c      	ite	eq
 8008eee:	600b      	streq	r3, [r1, #0]
 8008ef0:	6053      	strne	r3, [r2, #4]
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	f000 f85a 	bl	8008fac <__malloc_unlock>
 8008ef8:	f104 000b 	add.w	r0, r4, #11
 8008efc:	1d23      	adds	r3, r4, #4
 8008efe:	f020 0007 	bic.w	r0, r0, #7
 8008f02:	1ac2      	subs	r2, r0, r3
 8008f04:	d0cc      	beq.n	8008ea0 <_malloc_r+0x20>
 8008f06:	1a1b      	subs	r3, r3, r0
 8008f08:	50a3      	str	r3, [r4, r2]
 8008f0a:	e7c9      	b.n	8008ea0 <_malloc_r+0x20>
 8008f0c:	4622      	mov	r2, r4
 8008f0e:	6864      	ldr	r4, [r4, #4]
 8008f10:	e7cc      	b.n	8008eac <_malloc_r+0x2c>
 8008f12:	1cc4      	adds	r4, r0, #3
 8008f14:	f024 0403 	bic.w	r4, r4, #3
 8008f18:	42a0      	cmp	r0, r4
 8008f1a:	d0e3      	beq.n	8008ee4 <_malloc_r+0x64>
 8008f1c:	1a21      	subs	r1, r4, r0
 8008f1e:	4630      	mov	r0, r6
 8008f20:	f000 f82e 	bl	8008f80 <_sbrk_r>
 8008f24:	3001      	adds	r0, #1
 8008f26:	d1dd      	bne.n	8008ee4 <_malloc_r+0x64>
 8008f28:	e7cf      	b.n	8008eca <_malloc_r+0x4a>
 8008f2a:	bf00      	nop
 8008f2c:	200008fc 	.word	0x200008fc
 8008f30:	20000900 	.word	0x20000900

08008f34 <_realloc_r>:
 8008f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f36:	4607      	mov	r7, r0
 8008f38:	4614      	mov	r4, r2
 8008f3a:	460e      	mov	r6, r1
 8008f3c:	b921      	cbnz	r1, 8008f48 <_realloc_r+0x14>
 8008f3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008f42:	4611      	mov	r1, r2
 8008f44:	f7ff bf9c 	b.w	8008e80 <_malloc_r>
 8008f48:	b922      	cbnz	r2, 8008f54 <_realloc_r+0x20>
 8008f4a:	f7ff ff49 	bl	8008de0 <_free_r>
 8008f4e:	4625      	mov	r5, r4
 8008f50:	4628      	mov	r0, r5
 8008f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f54:	f000 f830 	bl	8008fb8 <_malloc_usable_size_r>
 8008f58:	42a0      	cmp	r0, r4
 8008f5a:	d20f      	bcs.n	8008f7c <_realloc_r+0x48>
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	4638      	mov	r0, r7
 8008f60:	f7ff ff8e 	bl	8008e80 <_malloc_r>
 8008f64:	4605      	mov	r5, r0
 8008f66:	2800      	cmp	r0, #0
 8008f68:	d0f2      	beq.n	8008f50 <_realloc_r+0x1c>
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	4622      	mov	r2, r4
 8008f6e:	f7ff ff0f 	bl	8008d90 <memcpy>
 8008f72:	4631      	mov	r1, r6
 8008f74:	4638      	mov	r0, r7
 8008f76:	f7ff ff33 	bl	8008de0 <_free_r>
 8008f7a:	e7e9      	b.n	8008f50 <_realloc_r+0x1c>
 8008f7c:	4635      	mov	r5, r6
 8008f7e:	e7e7      	b.n	8008f50 <_realloc_r+0x1c>

08008f80 <_sbrk_r>:
 8008f80:	b538      	push	{r3, r4, r5, lr}
 8008f82:	4d06      	ldr	r5, [pc, #24]	; (8008f9c <_sbrk_r+0x1c>)
 8008f84:	2300      	movs	r3, #0
 8008f86:	4604      	mov	r4, r0
 8008f88:	4608      	mov	r0, r1
 8008f8a:	602b      	str	r3, [r5, #0]
 8008f8c:	f7fb ffa0 	bl	8004ed0 <_sbrk>
 8008f90:	1c43      	adds	r3, r0, #1
 8008f92:	d102      	bne.n	8008f9a <_sbrk_r+0x1a>
 8008f94:	682b      	ldr	r3, [r5, #0]
 8008f96:	b103      	cbz	r3, 8008f9a <_sbrk_r+0x1a>
 8008f98:	6023      	str	r3, [r4, #0]
 8008f9a:	bd38      	pop	{r3, r4, r5, pc}
 8008f9c:	20000e64 	.word	0x20000e64

08008fa0 <__malloc_lock>:
 8008fa0:	4801      	ldr	r0, [pc, #4]	; (8008fa8 <__malloc_lock+0x8>)
 8008fa2:	f000 b811 	b.w	8008fc8 <__retarget_lock_acquire_recursive>
 8008fa6:	bf00      	nop
 8008fa8:	20000e6c 	.word	0x20000e6c

08008fac <__malloc_unlock>:
 8008fac:	4801      	ldr	r0, [pc, #4]	; (8008fb4 <__malloc_unlock+0x8>)
 8008fae:	f000 b80c 	b.w	8008fca <__retarget_lock_release_recursive>
 8008fb2:	bf00      	nop
 8008fb4:	20000e6c 	.word	0x20000e6c

08008fb8 <_malloc_usable_size_r>:
 8008fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fbc:	1f18      	subs	r0, r3, #4
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	bfbc      	itt	lt
 8008fc2:	580b      	ldrlt	r3, [r1, r0]
 8008fc4:	18c0      	addlt	r0, r0, r3
 8008fc6:	4770      	bx	lr

08008fc8 <__retarget_lock_acquire_recursive>:
 8008fc8:	4770      	bx	lr

08008fca <__retarget_lock_release_recursive>:
 8008fca:	4770      	bx	lr

08008fcc <_init>:
 8008fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fce:	bf00      	nop
 8008fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fd2:	bc08      	pop	{r3}
 8008fd4:	469e      	mov	lr, r3
 8008fd6:	4770      	bx	lr

08008fd8 <_fini>:
 8008fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fda:	bf00      	nop
 8008fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fde:	bc08      	pop	{r3}
 8008fe0:	469e      	mov	lr, r3
 8008fe2:	4770      	bx	lr
