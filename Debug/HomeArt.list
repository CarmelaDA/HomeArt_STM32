
HomeArt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000880  08008bc0  08008bc0  00018bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009440  08009440  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009440  08009440  00019440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009448  08009448  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009448  08009448  00019448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800944c  0800944c  0001944c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000df8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000e68  20000e68  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016d47  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003211  00000000  00000000  00036de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc8  00000000  00000000  00039ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ec0  00000000  00000000  0003afc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024664  00000000  00000000  0003be80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b78  00000000  00000000  000604e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8e93  00000000  00000000  0007605c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014eeef  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004560  00000000  00000000  0014ef44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ba8 	.word	0x08008ba8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008ba8 	.word	0x08008ba8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468c      	mov	ip, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8083 	bne.w	8000c02 <__udivmoddi4+0x116>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d947      	bls.n	8000b92 <__udivmoddi4+0xa6>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b142      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	f1c2 0020 	rsb	r0, r2, #32
 8000b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b10:	4091      	lsls	r1, r2
 8000b12:	4097      	lsls	r7, r2
 8000b14:	ea40 0c01 	orr.w	ip, r0, r1
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbbc f6f8 	udiv	r6, ip, r8
 8000b24:	fa1f fe87 	uxth.w	lr, r7
 8000b28:	fb08 c116 	mls	r1, r8, r6, ip
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb06 f10e 	mul.w	r1, r6, lr
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b3e:	f080 8119 	bcs.w	8000d74 <__udivmoddi4+0x288>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8116 	bls.w	8000d74 <__udivmoddi4+0x288>
 8000b48:	3e02      	subs	r6, #2
 8000b4a:	443b      	add	r3, r7
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3310 	mls	r3, r8, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8105 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f240 8102 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b74:	3802      	subs	r0, #2
 8000b76:	443c      	add	r4, r7
 8000b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	2600      	movs	r6, #0
 8000b82:	b11d      	cbz	r5, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	b902      	cbnz	r2, 8000b96 <__udivmoddi4+0xaa>
 8000b94:	deff      	udf	#255	; 0xff
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d150      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000b9e:	1bcb      	subs	r3, r1, r7
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	2601      	movs	r6, #1
 8000baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0xe2>
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	f200 80e9 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1ac9      	subs	r1, r1, r3
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x10c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x10a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80d9 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e7bf      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <__udivmoddi4+0x282>
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c12:	4630      	mov	r0, r6
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f683 	clz	r6, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x1cc>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b8 	bhi.w	8000d9c <__udivmoddi4+0x2b0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0a8      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f603 	lsr.w	r6, r0, r3
 8000c48:	4097      	lsls	r7, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c52:	40d9      	lsrs	r1, r3
 8000c54:	4330      	orrs	r0, r6
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb06 f108 	mul.w	r1, r6, r8
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x19c>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c7a:	f080 808d 	bcs.w	8000d98 <__udivmoddi4+0x2ac>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 808a 	bls.w	8000d98 <__udivmoddi4+0x2ac>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b281      	uxth	r1, r0
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb00 f308 	mul.w	r3, r0, r8
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca6:	d273      	bcs.n	8000d90 <__udivmoddi4+0x2a4>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d971      	bls.n	8000d90 <__udivmoddi4+0x2a4>
 8000cac:	3802      	subs	r0, #2
 8000cae:	4439      	add	r1, r7
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cb6:	e778      	b.n	8000baa <__udivmoddi4+0xbe>
 8000cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cca:	fa01 f306 	lsl.w	r3, r1, r6
 8000cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fa1f f884 	uxth.w	r8, r4
 8000ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cea:	fb09 fa08 	mul.w	sl, r9, r8
 8000cee:	458a      	cmp	sl, r1
 8000cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x220>
 8000cfa:	1861      	adds	r1, r4, r1
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d00:	d248      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d02:	458a      	cmp	sl, r1
 8000d04:	d946      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4421      	add	r1, r4
 8000d0c:	eba1 010a 	sub.w	r1, r1, sl
 8000d10:	b2bf      	uxth	r7, r7
 8000d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45b8      	cmp	r8, r7
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x24a>
 8000d26:	19e7      	adds	r7, r4, r7
 8000d28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2c:	d22e      	bcs.n	8000d8c <__udivmoddi4+0x2a0>
 8000d2e:	45b8      	cmp	r8, r7
 8000d30:	d92c      	bls.n	8000d8c <__udivmoddi4+0x2a0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4427      	add	r7, r4
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba7 0708 	sub.w	r7, r7, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454f      	cmp	r7, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	4649      	mov	r1, r9
 8000d48:	d31a      	bcc.n	8000d80 <__udivmoddi4+0x294>
 8000d4a:	d017      	beq.n	8000d7c <__udivmoddi4+0x290>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x27a>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb67 0701 	sbc.w	r7, r7, r1
 8000d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d5a:	40f2      	lsrs	r2, r6
 8000d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d60:	40f7      	lsrs	r7, r6
 8000d62:	e9c5 2700 	strd	r2, r7, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e70b      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fd      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d7c:	4543      	cmp	r3, r8
 8000d7e:	d2e5      	bcs.n	8000d4c <__udivmoddi4+0x260>
 8000d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d84:	eb69 0104 	sbc.w	r1, r9, r4
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7df      	b.n	8000d4c <__udivmoddi4+0x260>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e7d2      	b.n	8000d36 <__udivmoddi4+0x24a>
 8000d90:	4660      	mov	r0, ip
 8000d92:	e78d      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d94:	4681      	mov	r9, r0
 8000d96:	e7b9      	b.n	8000d0c <__udivmoddi4+0x220>
 8000d98:	4666      	mov	r6, ip
 8000d9a:	e775      	b.n	8000c88 <__udivmoddi4+0x19c>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	e74a      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	4439      	add	r1, r7
 8000da6:	e713      	b.n	8000bd0 <__udivmoddi4+0xe4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	e724      	b.n	8000bf8 <__udivmoddi4+0x10c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <DHT22_Set_Pin_Output>:

uint8_t RH_byte1, RH_byte2, Temp_byte1, Temp_byte2;
uint16_t SUM, RH, TEMP;
uint16_t DHT22_presence = 0;

void DHT22_Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	807b      	strh	r3, [r7, #2]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000dd0:	887b      	ldrh	r3, [r7, #2]
 8000dd2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	4619      	mov	r1, r3
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f004 fcda 	bl	800579c <HAL_GPIO_Init>
}
 8000de8:	bf00      	nop
 8000dea:	3720      	adds	r7, #32
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <DHT22_Set_Pin_Input>:

void DHT22_Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	807b      	strh	r3, [r7, #2]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000e0c:	887b      	ldrh	r3, [r7, #2]
 8000e0e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e10:	2300      	movs	r3, #0
 8000e12:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP; // cambiar a PULLUP si no funciona así
 8000e14:	2301      	movs	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f004 fcbc 	bl	800579c <HAL_GPIO_Init>
}
 8000e24:	bf00      	nop
 8000e26:	3720      	adds	r7, #32
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <DHT22_Start>:

void DHT22_Start(void){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0

	DHT22_Set_Pin_Output(DHT22_PORT, DHT22_PIN); // set the pin as output
 8000e30:	2180      	movs	r1, #128	; 0x80
 8000e32:	4811      	ldr	r0, [pc, #68]	; (8000e78 <DHT22_Start+0x4c>)
 8000e34:	f7ff ffbe 	bl	8000db4 <DHT22_Set_Pin_Output>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin low
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2180      	movs	r1, #128	; 0x80
 8000e3c:	480e      	ldr	r0, [pc, #56]	; (8000e78 <DHT22_Start+0x4c>)
 8000e3e:	f004 fe61 	bl	8005b04 <HAL_GPIO_WritePin>
	HAL_Delay(1200);   // wait for > 1ms
 8000e42:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000e46:	f003 ff15 	bl	8004c74 <HAL_Delay>
	HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2180      	movs	r1, #128	; 0x80
 8000e4e:	480a      	ldr	r0, [pc, #40]	; (8000e78 <DHT22_Start+0x4c>)
 8000e50:	f004 fe58 	bl	8005b04 <HAL_GPIO_WritePin>
	delay(18000);
 8000e54:	f244 6050 	movw	r0, #18000	; 0x4650
 8000e58:	f002 f89c 	bl	8002f94 <delay>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2180      	movs	r1, #128	; 0x80
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <DHT22_Start+0x4c>)
 8000e62:	f004 fe4f 	bl	8005b04 <HAL_GPIO_WritePin>
	delay (30);   // wait for 30us
 8000e66:	201e      	movs	r0, #30
 8000e68:	f002 f894 	bl	8002f94 <delay>

	DHT22_Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8000e6c:	2180      	movs	r1, #128	; 0x80
 8000e6e:	4802      	ldr	r0, [pc, #8]	; (8000e78 <DHT22_Start+0x4c>)
 8000e70:	f7ff ffbe 	bl	8000df0 <DHT22_Set_Pin_Input>
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40021000 	.word	0x40021000

08000e7c <DHT22_Check_Response>:

uint8_t DHT22_Check_Response(void){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0

	DHT22_Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	4815      	ldr	r0, [pc, #84]	; (8000edc <DHT22_Check_Response+0x60>)
 8000e86:	f7ff ffb3 	bl	8000df0 <DHT22_Set_Pin_Input>
	uint8_t Response = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	71fb      	strb	r3, [r7, #7]
	delay (40);  // wait for 40us
 8000e8e:	2028      	movs	r0, #40	; 0x28
 8000e90:	f002 f880 	bl	8002f94 <delay>
	if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) // if the pin is low
 8000e94:	2180      	movs	r1, #128	; 0x80
 8000e96:	4811      	ldr	r0, [pc, #68]	; (8000edc <DHT22_Check_Response+0x60>)
 8000e98:	f004 fe1c 	bl	8005ad4 <HAL_GPIO_ReadPin>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10e      	bne.n	8000ec0 <DHT22_Check_Response+0x44>
	{
		delay (80);   // wait for 80us
 8000ea2:	2050      	movs	r0, #80	; 0x50
 8000ea4:	f002 f876 	bl	8002f94 <delay>

		if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;  // if the pin is high, response is ok
 8000ea8:	2180      	movs	r1, #128	; 0x80
 8000eaa:	480c      	ldr	r0, [pc, #48]	; (8000edc <DHT22_Check_Response+0x60>)
 8000eac:	f004 fe12 	bl	8005ad4 <HAL_GPIO_ReadPin>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <DHT22_Check_Response+0x40>
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	71fb      	strb	r3, [r7, #7]
 8000eba:	e001      	b.n	8000ec0 <DHT22_Check_Response+0x44>
		else Response = -1;
 8000ebc:	23ff      	movs	r3, #255	; 0xff
 8000ebe:	71fb      	strb	r3, [r7, #7]
	}

	while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go low
 8000ec0:	bf00      	nop
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <DHT22_Check_Response+0x60>)
 8000ec6:	f004 fe05 	bl	8005ad4 <HAL_GPIO_ReadPin>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1f8      	bne.n	8000ec2 <DHT22_Check_Response+0x46>
	return Response;
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000

08000ee0 <DHT22_Read>:

uint8_t DHT22_Read(void){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0

	uint8_t i,j;
	for (j=0;j<8;j++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	71bb      	strb	r3, [r7, #6]
 8000eea:	e037      	b.n	8000f5c <DHT22_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go high
 8000eec:	bf00      	nop
 8000eee:	2180      	movs	r1, #128	; 0x80
 8000ef0:	481e      	ldr	r0, [pc, #120]	; (8000f6c <DHT22_Read+0x8c>)
 8000ef2:	f004 fdef 	bl	8005ad4 <HAL_GPIO_ReadPin>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d0f8      	beq.n	8000eee <DHT22_Read+0xe>
		delay (40);   // wait for 40 us
 8000efc:	2028      	movs	r0, #40	; 0x28
 8000efe:	f002 f849 	bl	8002f94 <delay>

		if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8000f02:	2180      	movs	r1, #128	; 0x80
 8000f04:	4819      	ldr	r0, [pc, #100]	; (8000f6c <DHT22_Read+0x8c>)
 8000f06:	f004 fde5 	bl	8005ad4 <HAL_GPIO_ReadPin>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d10e      	bne.n	8000f2e <DHT22_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	2201      	movs	r2, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	b25a      	sxtb	r2, r3
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	4013      	ands	r3, r2
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	71fb      	strb	r3, [r7, #7]
 8000f2c:	e00b      	b.n	8000f46 <DHT22_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
 8000f30:	f1c3 0307 	rsb	r3, r3, #7
 8000f34:	2201      	movs	r2, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	b25a      	sxtb	r2, r3
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));  // wait for the pin to go low
 8000f46:	bf00      	nop
 8000f48:	2180      	movs	r1, #128	; 0x80
 8000f4a:	4808      	ldr	r0, [pc, #32]	; (8000f6c <DHT22_Read+0x8c>)
 8000f4c:	f004 fdc2 	bl	8005ad4 <HAL_GPIO_ReadPin>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f8      	bne.n	8000f48 <DHT22_Read+0x68>
	for (j=0;j<8;j++)
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	71bb      	strb	r3, [r7, #6]
 8000f5c:	79bb      	ldrb	r3, [r7, #6]
 8000f5e:	2b07      	cmp	r3, #7
 8000f60:	d9c4      	bls.n	8000eec <DHT22_Read+0xc>
	}

	return i;
 8000f62:	79fb      	ldrb	r3, [r7, #7]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40021000 	.word	0x40021000

08000f70 <DHT22_getData>:

void DHT22_getData(DHT22_DataTypedef *DHT_Data){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

	  DHT22_Start();
 8000f78:	f7ff ff58 	bl	8000e2c <DHT22_Start>
	  DHT22_presence = DHT22_Check_Response();
 8000f7c:	f7ff ff7e 	bl	8000e7c <DHT22_Check_Response>
 8000f80:	4603      	mov	r3, r0
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	4b30      	ldr	r3, [pc, #192]	; (8001048 <DHT22_getData+0xd8>)
 8000f86:	801a      	strh	r2, [r3, #0]

	  RH_byte1 = DHT22_Read();
 8000f88:	f7ff ffaa 	bl	8000ee0 <DHT22_Read>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b2e      	ldr	r3, [pc, #184]	; (800104c <DHT22_getData+0xdc>)
 8000f92:	701a      	strb	r2, [r3, #0]
	  RH_byte2 = DHT22_Read();
 8000f94:	f7ff ffa4 	bl	8000ee0 <DHT22_Read>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <DHT22_getData+0xe0>)
 8000f9e:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT22_Read();
 8000fa0:	f7ff ff9e 	bl	8000ee0 <DHT22_Read>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b2a      	ldr	r3, [pc, #168]	; (8001054 <DHT22_getData+0xe4>)
 8000faa:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT22_Read();
 8000fac:	f7ff ff98 	bl	8000ee0 <DHT22_Read>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b28      	ldr	r3, [pc, #160]	; (8001058 <DHT22_getData+0xe8>)
 8000fb6:	701a      	strb	r2, [r3, #0]

	  SUM = DHT22_Read();
 8000fb8:	f7ff ff92 	bl	8000ee0 <DHT22_Read>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	4b26      	ldr	r3, [pc, #152]	; (800105c <DHT22_getData+0xec>)
 8000fc2:	801a      	strh	r2, [r3, #0]

	  RH = ((RH_byte1<<8)|RH_byte2);
 8000fc4:	4b21      	ldr	r3, [pc, #132]	; (800104c <DHT22_getData+0xdc>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	4b20      	ldr	r3, [pc, #128]	; (8001050 <DHT22_getData+0xe0>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	4b21      	ldr	r3, [pc, #132]	; (8001060 <DHT22_getData+0xf0>)
 8000fda:	801a      	strh	r2, [r3, #0]
	  TEMP = ((Temp_byte1<<8)|Temp_byte2);
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <DHT22_getData+0xe4>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	021b      	lsls	r3, r3, #8
 8000fe2:	b21a      	sxth	r2, r3
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <DHT22_getData+0xe8>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <DHT22_getData+0xf4>)
 8000ff2:	801a      	strh	r2, [r3, #0]

	  DHT_Data->Temperature = (float) (TEMP/10.0);
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <DHT22_getData+0xf4>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fa93 	bl	8000524 <__aeabi_i2d>
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <DHT22_getData+0xf8>)
 8001004:	f7ff fc22 	bl	800084c <__aeabi_ddiv>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f7ff fd04 	bl	8000a1c <__aeabi_d2f>
 8001014:	4602      	mov	r2, r0
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	601a      	str	r2, [r3, #0]
	  DHT_Data->Humidity = (float) (RH/10.0);
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <DHT22_getData+0xf0>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fa80 	bl	8000524 <__aeabi_i2d>
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <DHT22_getData+0xf8>)
 800102a:	f7ff fc0f 	bl	800084c <__aeabi_ddiv>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f7ff fcf1 	bl	8000a1c <__aeabi_d2f>
 800103a:	4602      	mov	r2, r0
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	605a      	str	r2, [r3, #4]
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2000008c 	.word	0x2000008c
 800104c:	20000905 	.word	0x20000905
 8001050:	20000909 	.word	0x20000909
 8001054:	20000904 	.word	0x20000904
 8001058:	20000908 	.word	0x20000908
 800105c:	20000906 	.word	0x20000906
 8001060:	20000900 	.word	0x20000900
 8001064:	20000902 	.word	0x20000902
 8001068:	40240000 	.word	0x40240000

0800106c <ESP_clearBuffer>:
char *Terminate = "</body></html>";


/*****************************************************************************************************************************************/

void ESP_clearBuffer(void){
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0

	memset(buffer_app, 0, 60);
 8001070:	223c      	movs	r2, #60	; 0x3c
 8001072:	2100      	movs	r1, #0
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <ESP_clearBuffer+0x18>)
 8001076:	f007 f961 	bl	800833c <memset>
	buffer_index = 0;
 800107a:	4b03      	ldr	r3, [pc, #12]	; (8001088 <ESP_clearBuffer+0x1c>)
 800107c:	2200      	movs	r2, #0
 800107e:	801a      	strh	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000930 	.word	0x20000930
 8001088:	20000a4e 	.word	0x20000a4e

0800108c <ESP_Init>:


void ESP_Init(char *SSID, char *PASSWD){
 800108c:	b580      	push	{r7, lr}
 800108e:	b09a      	sub	sp, #104	; 0x68
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]

	ESP_clearBuffer();
 8001096:	f7ff ffe9 	bl	800106c <ESP_clearBuffer>
	char data[80];

	ringInit();
 800109a:	f001 fb49 	bl	8002730 <ringInit>

	HAL_Delay(1000);
 800109e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010a2:	f003 fde7 	bl	8004c74 <HAL_Delay>

	/********** AT **********/

	UART_send("AT\r\n", WiFi_UART);
 80010a6:	4974      	ldr	r1, [pc, #464]	; (8001278 <ESP_Init+0x1ec>)
 80010a8:	4874      	ldr	r0, [pc, #464]	; (800127c <ESP_Init+0x1f0>)
 80010aa:	f001 fcff 	bl	8002aac <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 80010ae:	bf00      	nop
 80010b0:	4971      	ldr	r1, [pc, #452]	; (8001278 <ESP_Init+0x1ec>)
 80010b2:	4873      	ldr	r0, [pc, #460]	; (8001280 <ESP_Init+0x1f4>)
 80010b4:	f001 fd90 	bl	8002bd8 <UART_waitFor>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f8      	beq.n	80010b0 <ESP_Init+0x24>
	UART_send("AT  ---->  OK\n", PC_UART);
 80010be:	4971      	ldr	r1, [pc, #452]	; (8001284 <ESP_Init+0x1f8>)
 80010c0:	4871      	ldr	r0, [pc, #452]	; (8001288 <ESP_Init+0x1fc>)
 80010c2:	f001 fcf3 	bl	8002aac <UART_send>


	HAL_Delay(2000);
 80010c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010ca:	f003 fdd3 	bl	8004c74 <HAL_Delay>


	/********** AT+RST **********/
	UART_send("AT+RST\r\n", WiFi_UART);
 80010ce:	496a      	ldr	r1, [pc, #424]	; (8001278 <ESP_Init+0x1ec>)
 80010d0:	486e      	ldr	r0, [pc, #440]	; (800128c <ESP_Init+0x200>)
 80010d2:	f001 fceb 	bl	8002aac <UART_send>
	UART_send("\nReseteando ", PC_UART);
 80010d6:	496b      	ldr	r1, [pc, #428]	; (8001284 <ESP_Init+0x1f8>)
 80010d8:	486d      	ldr	r0, [pc, #436]	; (8001290 <ESP_Init+0x204>)
 80010da:	f001 fce7 	bl	8002aac <UART_send>

	for (int i=0; i<3; i++)
 80010de:	2300      	movs	r3, #0
 80010e0:	667b      	str	r3, [r7, #100]	; 0x64
 80010e2:	e00a      	b.n	80010fa <ESP_Init+0x6e>
	{
		UART_send(" . ", PC_UART);
 80010e4:	4967      	ldr	r1, [pc, #412]	; (8001284 <ESP_Init+0x1f8>)
 80010e6:	486b      	ldr	r0, [pc, #428]	; (8001294 <ESP_Init+0x208>)
 80010e8:	f001 fce0 	bl	8002aac <UART_send>
		HAL_Delay(1500);
 80010ec:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80010f0:	f003 fdc0 	bl	8004c74 <HAL_Delay>
	for (int i=0; i<3; i++)
 80010f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010f6:	3301      	adds	r3, #1
 80010f8:	667b      	str	r3, [r7, #100]	; 0x64
 80010fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	ddf1      	ble.n	80010e4 <ESP_Init+0x58>
	}


	/********** AT **********/
	UART_send("AT\r\n", WiFi_UART);
 8001100:	495d      	ldr	r1, [pc, #372]	; (8001278 <ESP_Init+0x1ec>)
 8001102:	485e      	ldr	r0, [pc, #376]	; (800127c <ESP_Init+0x1f0>)
 8001104:	f001 fcd2 	bl	8002aac <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 8001108:	bf00      	nop
 800110a:	495b      	ldr	r1, [pc, #364]	; (8001278 <ESP_Init+0x1ec>)
 800110c:	485c      	ldr	r0, [pc, #368]	; (8001280 <ESP_Init+0x1f4>)
 800110e:	f001 fd63 	bl	8002bd8 <UART_waitFor>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0f8      	beq.n	800110a <ESP_Init+0x7e>
	UART_send("\n\nAT  ---->  OK\n\n", PC_UART);
 8001118:	495a      	ldr	r1, [pc, #360]	; (8001284 <ESP_Init+0x1f8>)
 800111a:	485f      	ldr	r0, [pc, #380]	; (8001298 <ESP_Init+0x20c>)
 800111c:	f001 fcc6 	bl	8002aac <UART_send>


	HAL_Delay(2000);
 8001120:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001124:	f003 fda6 	bl	8004c74 <HAL_Delay>


	/********** AT+CWMODE=3 **********/
	UART_send("AT+CWMODE=3\r\n", WiFi_UART);
 8001128:	4953      	ldr	r1, [pc, #332]	; (8001278 <ESP_Init+0x1ec>)
 800112a:	485c      	ldr	r0, [pc, #368]	; (800129c <ESP_Init+0x210>)
 800112c:	f001 fcbe 	bl	8002aac <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 8001130:	bf00      	nop
 8001132:	4951      	ldr	r1, [pc, #324]	; (8001278 <ESP_Init+0x1ec>)
 8001134:	4852      	ldr	r0, [pc, #328]	; (8001280 <ESP_Init+0x1f4>)
 8001136:	f001 fd4f 	bl	8002bd8 <UART_waitFor>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0f8      	beq.n	8001132 <ESP_Init+0xa6>
	UART_send("CW MODE  ---->  3\n\n", PC_UART);
 8001140:	4950      	ldr	r1, [pc, #320]	; (8001284 <ESP_Init+0x1f8>)
 8001142:	4857      	ldr	r0, [pc, #348]	; (80012a0 <ESP_Init+0x214>)
 8001144:	f001 fcb2 	bl	8002aac <UART_send>


	/********** AT+CWJAP="SSID","PASSWD" **********/
	UART_send("Conectando con la RED proporcionada ", PC_UART);
 8001148:	494e      	ldr	r1, [pc, #312]	; (8001284 <ESP_Init+0x1f8>)
 800114a:	4856      	ldr	r0, [pc, #344]	; (80012a4 <ESP_Init+0x218>)
 800114c:	f001 fcae 	bl	8002aac <UART_send>

	for (int i=0; i<3; i++)
 8001150:	2300      	movs	r3, #0
 8001152:	663b      	str	r3, [r7, #96]	; 0x60
 8001154:	e00a      	b.n	800116c <ESP_Init+0xe0>
	{
		UART_send(" . ", PC_UART);
 8001156:	494b      	ldr	r1, [pc, #300]	; (8001284 <ESP_Init+0x1f8>)
 8001158:	484e      	ldr	r0, [pc, #312]	; (8001294 <ESP_Init+0x208>)
 800115a:	f001 fca7 	bl	8002aac <UART_send>
		HAL_Delay(1500);
 800115e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001162:	f003 fd87 	bl	8004c74 <HAL_Delay>
	for (int i=0; i<3; i++)
 8001166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001168:	3301      	adds	r3, #1
 800116a:	663b      	str	r3, [r7, #96]	; 0x60
 800116c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800116e:	2b02      	cmp	r3, #2
 8001170:	ddf1      	ble.n	8001156 <ESP_Init+0xca>
	}

	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8001172:	f107 000c 	add.w	r0, r7, #12
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	494b      	ldr	r1, [pc, #300]	; (80012a8 <ESP_Init+0x21c>)
 800117c:	f007 f8e6 	bl	800834c <siprintf>
	UART_send(data, WiFi_UART);
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	493c      	ldr	r1, [pc, #240]	; (8001278 <ESP_Init+0x1ec>)
 8001186:	4618      	mov	r0, r3
 8001188:	f001 fc90 	bl	8002aac <UART_send>
	while (!(UART_waitFor("WIFI GOT IP\r\n\r\nOK\r\n", WiFi_UART)));
 800118c:	bf00      	nop
 800118e:	493a      	ldr	r1, [pc, #232]	; (8001278 <ESP_Init+0x1ec>)
 8001190:	4846      	ldr	r0, [pc, #280]	; (80012ac <ESP_Init+0x220>)
 8001192:	f001 fd21 	bl	8002bd8 <UART_waitFor>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f8      	beq.n	800118e <ESP_Init+0x102>
	sprintf (data, "\n\nConectado a  \"%s\"\n\n", SSID);
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	4943      	ldr	r1, [pc, #268]	; (80012b0 <ESP_Init+0x224>)
 80011a4:	4618      	mov	r0, r3
 80011a6:	f007 f8d1 	bl	800834c <siprintf>
	UART_send(data,PC_UART);
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	4935      	ldr	r1, [pc, #212]	; (8001284 <ESP_Init+0x1f8>)
 80011b0:	4618      	mov	r0, r3
 80011b2:	f001 fc7b 	bl	8002aac <UART_send>
	//UART_send("AT+CIPSTA?\r\n", WiFi_UART);
	//sprintf (data, "AT+CIPSTA?\r\n");


	/********** AT+CIFSR **********/
	UART_send("AT+CIFSR\r\n", WiFi_UART);
 80011b6:	4930      	ldr	r1, [pc, #192]	; (8001278 <ESP_Init+0x1ec>)
 80011b8:	483e      	ldr	r0, [pc, #248]	; (80012b4 <ESP_Init+0x228>)
 80011ba:	f001 fc77 	bl	8002aac <UART_send>
	while (!(UART_waitFor("CIFSR:STAIP,\"", WiFi_UART)));
 80011be:	bf00      	nop
 80011c0:	492d      	ldr	r1, [pc, #180]	; (8001278 <ESP_Init+0x1ec>)
 80011c2:	483d      	ldr	r0, [pc, #244]	; (80012b8 <ESP_Init+0x22c>)
 80011c4:	f001 fd08 	bl	8002bd8 <UART_waitFor>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f8      	beq.n	80011c0 <ESP_Init+0x134>
	while (!(UART_copyUpto("\"",buffer, WiFi_UART)));
 80011ce:	bf00      	nop
 80011d0:	4a29      	ldr	r2, [pc, #164]	; (8001278 <ESP_Init+0x1ec>)
 80011d2:	493a      	ldr	r1, [pc, #232]	; (80012bc <ESP_Init+0x230>)
 80011d4:	483a      	ldr	r0, [pc, #232]	; (80012c0 <ESP_Init+0x234>)
 80011d6:	f001 fc81 	bl	8002adc <UART_copyUpto>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f7      	beq.n	80011d0 <ESP_Init+0x144>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 80011e0:	bf00      	nop
 80011e2:	4925      	ldr	r1, [pc, #148]	; (8001278 <ESP_Init+0x1ec>)
 80011e4:	4826      	ldr	r0, [pc, #152]	; (8001280 <ESP_Init+0x1f4>)
 80011e6:	f001 fcf7 	bl	8002bd8 <UART_waitFor>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f8      	beq.n	80011e2 <ESP_Init+0x156>
	int len = strlen (buffer);
 80011f0:	4832      	ldr	r0, [pc, #200]	; (80012bc <ESP_Init+0x230>)
 80011f2:	f7fe ffed 	bl	80001d0 <strlen>
 80011f6:	4603      	mov	r3, r0
 80011f8:	65fb      	str	r3, [r7, #92]	; 0x5c
	buffer[len-1] = '\0';
 80011fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011fc:	3b01      	subs	r3, #1
 80011fe:	4a2f      	ldr	r2, [pc, #188]	; (80012bc <ESP_Init+0x230>)
 8001200:	2100      	movs	r1, #0
 8001202:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP :  %s\n\n", buffer);
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	4a2c      	ldr	r2, [pc, #176]	; (80012bc <ESP_Init+0x230>)
 800120a:	492e      	ldr	r1, [pc, #184]	; (80012c4 <ESP_Init+0x238>)
 800120c:	4618      	mov	r0, r3
 800120e:	f007 f89d 	bl	800834c <siprintf>
	UART_send(data, PC_UART);
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	491b      	ldr	r1, [pc, #108]	; (8001284 <ESP_Init+0x1f8>)
 8001218:	4618      	mov	r0, r3
 800121a:	f001 fc47 	bl	8002aac <UART_send>


	/********** AT+CIPMUX=1 **********/
	UART_send("AT+CIPMUX=1\r\n", WiFi_UART);
 800121e:	4916      	ldr	r1, [pc, #88]	; (8001278 <ESP_Init+0x1ec>)
 8001220:	4829      	ldr	r0, [pc, #164]	; (80012c8 <ESP_Init+0x23c>)
 8001222:	f001 fc43 	bl	8002aac <UART_send>
	while (!(UART_waitFor("AT+CIPMUX=1\r\r\n\r\nOK\r\n", WiFi_UART)));
 8001226:	bf00      	nop
 8001228:	4913      	ldr	r1, [pc, #76]	; (8001278 <ESP_Init+0x1ec>)
 800122a:	4828      	ldr	r0, [pc, #160]	; (80012cc <ESP_Init+0x240>)
 800122c:	f001 fcd4 	bl	8002bd8 <UART_waitFor>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f8      	beq.n	8001228 <ESP_Init+0x19c>
	UART_send("CIPMUX  ---->  OK\n\n", PC_UART);
 8001236:	4913      	ldr	r1, [pc, #76]	; (8001284 <ESP_Init+0x1f8>)
 8001238:	4825      	ldr	r0, [pc, #148]	; (80012d0 <ESP_Init+0x244>)
 800123a:	f001 fc37 	bl	8002aac <UART_send>
	//while (!(UART_waitFor("OK\r\n", WiFi_UART)));
	//UART_send("CIPSTART  ---->  OK\n\n", PC_UART);


	/********** AT+CIPSERVER=1,80 **********/
	UART_send("AT+CIPSERVER=1,80\r\n", WiFi_UART);
 800123e:	490e      	ldr	r1, [pc, #56]	; (8001278 <ESP_Init+0x1ec>)
 8001240:	4824      	ldr	r0, [pc, #144]	; (80012d4 <ESP_Init+0x248>)
 8001242:	f001 fc33 	bl	8002aac <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 8001246:	bf00      	nop
 8001248:	490b      	ldr	r1, [pc, #44]	; (8001278 <ESP_Init+0x1ec>)
 800124a:	480d      	ldr	r0, [pc, #52]	; (8001280 <ESP_Init+0x1f4>)
 800124c:	f001 fcc4 	bl	8002bd8 <UART_waitFor>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0f8      	beq.n	8001248 <ESP_Init+0x1bc>
	UART_send("CIPSERVER  ---->  OK\n\n", PC_UART);
 8001256:	490b      	ldr	r1, [pc, #44]	; (8001284 <ESP_Init+0x1f8>)
 8001258:	481f      	ldr	r0, [pc, #124]	; (80012d8 <ESP_Init+0x24c>)
 800125a:	f001 fc27 	bl	8002aac <UART_send>


	/********** FIN **********/
	UART_send("Conectado a la IP\n\n", PC_UART);
 800125e:	4909      	ldr	r1, [pc, #36]	; (8001284 <ESP_Init+0x1f8>)
 8001260:	481e      	ldr	r0, [pc, #120]	; (80012dc <ESP_Init+0x250>)
 8001262:	f001 fc23 	bl	8002aac <UART_send>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1); // CONNECTED
 8001266:	2201      	movs	r2, #1
 8001268:	2101      	movs	r1, #1
 800126a:	481d      	ldr	r0, [pc, #116]	; (80012e0 <ESP_Init+0x254>)
 800126c:	f004 fc4a 	bl	8005b04 <HAL_GPIO_WritePin>
}
 8001270:	bf00      	nop
 8001272:	3768      	adds	r7, #104	; 0x68
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000e08 	.word	0x20000e08
 800127c:	08008fd4 	.word	0x08008fd4
 8001280:	08008fdc 	.word	0x08008fdc
 8001284:	20000d7c 	.word	0x20000d7c
 8001288:	08008fe4 	.word	0x08008fe4
 800128c:	08008ff4 	.word	0x08008ff4
 8001290:	08009000 	.word	0x08009000
 8001294:	08009010 	.word	0x08009010
 8001298:	08009014 	.word	0x08009014
 800129c:	08009028 	.word	0x08009028
 80012a0:	08009038 	.word	0x08009038
 80012a4:	0800904c 	.word	0x0800904c
 80012a8:	08009074 	.word	0x08009074
 80012ac:	0800908c 	.word	0x0800908c
 80012b0:	080090a0 	.word	0x080090a0
 80012b4:	080090b8 	.word	0x080090b8
 80012b8:	080090c4 	.word	0x080090c4
 80012bc:	20000984 	.word	0x20000984
 80012c0:	080090d4 	.word	0x080090d4
 80012c4:	080090d8 	.word	0x080090d8
 80012c8:	080090e4 	.word	0x080090e4
 80012cc:	080090f4 	.word	0x080090f4
 80012d0:	0800910c 	.word	0x0800910c
 80012d4:	08009120 	.word	0x08009120
 80012d8:	08009134 	.word	0x08009134
 80012dc:	0800914c 	.word	0x0800914c
 80012e0:	40020800 	.word	0x40020800

080012e4 <ESP_messageHandler>:
	}
	return -1;
}


void ESP_messageHandler(void){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0

	//__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);

	memset(textrc, 0, 100);
 80012e8:	2264      	movs	r2, #100	; 0x64
 80012ea:	2100      	movs	r1, #0
 80012ec:	48a2      	ldr	r0, [pc, #648]	; (8001578 <ESP_messageHandler+0x294>)
 80012ee:	f007 f825 	bl	800833c <memset>

	HAL_UART_Receive(&huart2, (uint8_t *)textrc, 100, 100); //(uint8_t *)
 80012f2:	2364      	movs	r3, #100	; 0x64
 80012f4:	2264      	movs	r2, #100	; 0x64
 80012f6:	49a0      	ldr	r1, [pc, #640]	; (8001578 <ESP_messageHandler+0x294>)
 80012f8:	48a0      	ldr	r0, [pc, #640]	; (800157c <ESP_messageHandler+0x298>)
 80012fa:	f006 f8ca 	bl	8007492 <HAL_UART_Receive>

	HAL_UART_Transmit(&huart6, (uint8_t *)textrc, 100, HAL_MAX_DELAY);
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	2264      	movs	r2, #100	; 0x64
 8001304:	499c      	ldr	r1, [pc, #624]	; (8001578 <ESP_messageHandler+0x294>)
 8001306:	489e      	ldr	r0, [pc, #632]	; (8001580 <ESP_messageHandler+0x29c>)
 8001308:	f006 f831 	bl	800736e <HAL_UART_Transmit>
	UART_send("\n", PC_UART);
 800130c:	499c      	ldr	r1, [pc, #624]	; (8001580 <ESP_messageHandler+0x29c>)
 800130e:	489d      	ldr	r0, [pc, #628]	; (8001584 <ESP_messageHandler+0x2a0>)
 8001310:	f001 fbcc 	bl	8002aac <UART_send>

	fragment[0] = textrc[25]; // Asignación de Fragmento
 8001314:	4b98      	ldr	r3, [pc, #608]	; (8001578 <ESP_messageHandler+0x294>)
 8001316:	7e5a      	ldrb	r2, [r3, #25]
 8001318:	4b9b      	ldr	r3, [pc, #620]	; (8001588 <ESP_messageHandler+0x2a4>)
 800131a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart6, (uint8_t *)fragment, 1, HAL_MAX_DELAY);
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
 8001320:	2201      	movs	r2, #1
 8001322:	4999      	ldr	r1, [pc, #612]	; (8001588 <ESP_messageHandler+0x2a4>)
 8001324:	4896      	ldr	r0, [pc, #600]	; (8001580 <ESP_messageHandler+0x29c>)
 8001326:	f006 f822 	bl	800736e <HAL_UART_Transmit>
	UART_send("\n", PC_UART);
 800132a:	4995      	ldr	r1, [pc, #596]	; (8001580 <ESP_messageHandler+0x29c>)
 800132c:	4895      	ldr	r0, [pc, #596]	; (8001584 <ESP_messageHandler+0x2a0>)
 800132e:	f001 fbbd 	bl	8002aac <UART_send>


	// SENSORES DHT22
	actSensor = 0;
 8001332:	4b96      	ldr	r3, [pc, #600]	; (800158c <ESP_messageHandler+0x2a8>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]

	if(textrc[27] == '[') actSensor = 1;
 8001338:	4b8f      	ldr	r3, [pc, #572]	; (8001578 <ESP_messageHandler+0x294>)
 800133a:	7edb      	ldrb	r3, [r3, #27]
 800133c:	2b5b      	cmp	r3, #91	; 0x5b
 800133e:	d102      	bne.n	8001346 <ESP_messageHandler+0x62>
 8001340:	4b92      	ldr	r3, [pc, #584]	; (800158c <ESP_messageHandler+0x2a8>)
 8001342:	2201      	movs	r2, #1
 8001344:	601a      	str	r2, [r3, #0]

	// SEGURIDAD
	if (fragment[0] == 's'){
 8001346:	4b90      	ldr	r3, [pc, #576]	; (8001588 <ESP_messageHandler+0x2a4>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b73      	cmp	r3, #115	; 0x73
 800134c:	d10b      	bne.n	8001366 <ESP_messageHandler+0x82>
		UART_send("SEGURIDAD \n", PC_UART);
 800134e:	498c      	ldr	r1, [pc, #560]	; (8001580 <ESP_messageHandler+0x29c>)
 8001350:	488f      	ldr	r0, [pc, #572]	; (8001590 <ESP_messageHandler+0x2ac>)
 8001352:	f001 fbab 	bl	8002aac <UART_send>
		vSeg[0] = textrc[28]; // Alarma Interior
 8001356:	4b88      	ldr	r3, [pc, #544]	; (8001578 <ESP_messageHandler+0x294>)
 8001358:	7f1a      	ldrb	r2, [r3, #28]
 800135a:	4b8e      	ldr	r3, [pc, #568]	; (8001594 <ESP_messageHandler+0x2b0>)
 800135c:	701a      	strb	r2, [r3, #0]
		vSeg[1] = textrc[31]; // Alarma Exterior
 800135e:	4b86      	ldr	r3, [pc, #536]	; (8001578 <ESP_messageHandler+0x294>)
 8001360:	7fda      	ldrb	r2, [r3, #31]
 8001362:	4b8c      	ldr	r3, [pc, #560]	; (8001594 <ESP_messageHandler+0x2b0>)
 8001364:	705a      	strb	r2, [r3, #1]
	}

	// ILUMINACIÓN
	if (fragment[0] == 'i'){
 8001366:	4b88      	ldr	r3, [pc, #544]	; (8001588 <ESP_messageHandler+0x2a4>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b69      	cmp	r3, #105	; 0x69
 800136c:	f040 82c9 	bne.w	8001902 <ESP_messageHandler+0x61e>
		UART_send("ILUMINACION \n", PC_UART);
 8001370:	4983      	ldr	r1, [pc, #524]	; (8001580 <ESP_messageHandler+0x29c>)
 8001372:	4889      	ldr	r0, [pc, #548]	; (8001598 <ESP_messageHandler+0x2b4>)
 8001374:	f001 fb9a 	bl	8002aac <UART_send>
		vIlum[0] = textrc[28]; 	// Luz Sala
 8001378:	4b7f      	ldr	r3, [pc, #508]	; (8001578 <ESP_messageHandler+0x294>)
 800137a:	7f1a      	ldrb	r2, [r3, #28]
 800137c:	4b87      	ldr	r3, [pc, #540]	; (800159c <ESP_messageHandler+0x2b8>)
 800137e:	701a      	strb	r2, [r3, #0]
		vIlum[1] = textrc[31]; 	// Luz Comedor
 8001380:	4b7d      	ldr	r3, [pc, #500]	; (8001578 <ESP_messageHandler+0x294>)
 8001382:	7fda      	ldrb	r2, [r3, #31]
 8001384:	4b85      	ldr	r3, [pc, #532]	; (800159c <ESP_messageHandler+0x2b8>)
 8001386:	705a      	strb	r2, [r3, #1]
		vIlum[2] = textrc[34]; 	// Luz Ambiente
 8001388:	4b7b      	ldr	r3, [pc, #492]	; (8001578 <ESP_messageHandler+0x294>)
 800138a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800138e:	4b83      	ldr	r3, [pc, #524]	; (800159c <ESP_messageHandler+0x2b8>)
 8001390:	709a      	strb	r2, [r3, #2]
		vIlum[3] = textrc[37]; 	// Luz Recibidor
 8001392:	4b79      	ldr	r3, [pc, #484]	; (8001578 <ESP_messageHandler+0x294>)
 8001394:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001398:	4b80      	ldr	r3, [pc, #512]	; (800159c <ESP_messageHandler+0x2b8>)
 800139a:	70da      	strb	r2, [r3, #3]
		vIlum[4] = textrc[40]; 	// Luz Cocina
 800139c:	4b76      	ldr	r3, [pc, #472]	; (8001578 <ESP_messageHandler+0x294>)
 800139e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80013a2:	4b7e      	ldr	r3, [pc, #504]	; (800159c <ESP_messageHandler+0x2b8>)
 80013a4:	711a      	strb	r2, [r3, #4]
		vIlum[5] = textrc[43]; 	// Luz Fregadero
 80013a6:	4b74      	ldr	r3, [pc, #464]	; (8001578 <ESP_messageHandler+0x294>)
 80013a8:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80013ac:	4b7b      	ldr	r3, [pc, #492]	; (800159c <ESP_messageHandler+0x2b8>)
 80013ae:	715a      	strb	r2, [r3, #5]
		vIlum[6] = textrc[46]; 	// Luz Baño
 80013b0:	4b71      	ldr	r3, [pc, #452]	; (8001578 <ESP_messageHandler+0x294>)
 80013b2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80013b6:	4b79      	ldr	r3, [pc, #484]	; (800159c <ESP_messageHandler+0x2b8>)
 80013b8:	719a      	strb	r2, [r3, #6]
		vIlum[7] = textrc[49]; 	// Luz Espejo
 80013ba:	4b6f      	ldr	r3, [pc, #444]	; (8001578 <ESP_messageHandler+0x294>)
 80013bc:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80013c0:	4b76      	ldr	r3, [pc, #472]	; (800159c <ESP_messageHandler+0x2b8>)
 80013c2:	71da      	strb	r2, [r3, #7]
		vIlum[8] = textrc[52]; 	// Luz Dormitorio
 80013c4:	4b6c      	ldr	r3, [pc, #432]	; (8001578 <ESP_messageHandler+0x294>)
 80013c6:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80013ca:	4b74      	ldr	r3, [pc, #464]	; (800159c <ESP_messageHandler+0x2b8>)
 80013cc:	721a      	strb	r2, [r3, #8]
		vIlum[9] = textrc[55]; 	// Luz Mesita Izq
 80013ce:	4b6a      	ldr	r3, [pc, #424]	; (8001578 <ESP_messageHandler+0x294>)
 80013d0:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80013d4:	4b71      	ldr	r3, [pc, #452]	; (800159c <ESP_messageHandler+0x2b8>)
 80013d6:	725a      	strb	r2, [r3, #9]
		vIlum[10] = textrc[58]; // Luz Mesita Dch
 80013d8:	4b67      	ldr	r3, [pc, #412]	; (8001578 <ESP_messageHandler+0x294>)
 80013da:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80013de:	4b6f      	ldr	r3, [pc, #444]	; (800159c <ESP_messageHandler+0x2b8>)
 80013e0:	729a      	strb	r2, [r3, #10]
		vIlum[11] = textrc[61]; // Luz Oficina
 80013e2:	4b65      	ldr	r3, [pc, #404]	; (8001578 <ESP_messageHandler+0x294>)
 80013e4:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80013e8:	4b6c      	ldr	r3, [pc, #432]	; (800159c <ESP_messageHandler+0x2b8>)
 80013ea:	72da      	strb	r2, [r3, #11]
		vIlum[12] = textrc[64]; // Luz Gaming
 80013ec:	4b62      	ldr	r3, [pc, #392]	; (8001578 <ESP_messageHandler+0x294>)
 80013ee:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80013f2:	4b6a      	ldr	r3, [pc, #424]	; (800159c <ESP_messageHandler+0x2b8>)
 80013f4:	731a      	strb	r2, [r3, #12]
		vIlum[13] = textrc[67]; // Luz Rx100
 80013f6:	4b60      	ldr	r3, [pc, #384]	; (8001578 <ESP_messageHandler+0x294>)
 80013f8:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80013fc:	4b67      	ldr	r3, [pc, #412]	; (800159c <ESP_messageHandler+0x2b8>)
 80013fe:	735a      	strb	r2, [r3, #13]
		vIlum[14] = textrc[68]; // Luz Rx10
 8001400:	4b5d      	ldr	r3, [pc, #372]	; (8001578 <ESP_messageHandler+0x294>)
 8001402:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8001406:	4b65      	ldr	r3, [pc, #404]	; (800159c <ESP_messageHandler+0x2b8>)
 8001408:	739a      	strb	r2, [r3, #14]
		vIlum[15] = textrc[69]; // Luz Rx1
 800140a:	4b5b      	ldr	r3, [pc, #364]	; (8001578 <ESP_messageHandler+0x294>)
 800140c:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8001410:	4b62      	ldr	r3, [pc, #392]	; (800159c <ESP_messageHandler+0x2b8>)
 8001412:	73da      	strb	r2, [r3, #15]
		vIlum[16] = textrc[72]; // Luz Gx100
 8001414:	4b58      	ldr	r3, [pc, #352]	; (8001578 <ESP_messageHandler+0x294>)
 8001416:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800141a:	4b60      	ldr	r3, [pc, #384]	; (800159c <ESP_messageHandler+0x2b8>)
 800141c:	741a      	strb	r2, [r3, #16]
		vIlum[17] = textrc[73]; // Luz Gx10
 800141e:	4b56      	ldr	r3, [pc, #344]	; (8001578 <ESP_messageHandler+0x294>)
 8001420:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8001424:	4b5d      	ldr	r3, [pc, #372]	; (800159c <ESP_messageHandler+0x2b8>)
 8001426:	745a      	strb	r2, [r3, #17]
		vIlum[18] = textrc[74]; // Luz Gx1
 8001428:	4b53      	ldr	r3, [pc, #332]	; (8001578 <ESP_messageHandler+0x294>)
 800142a:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 800142e:	4b5b      	ldr	r3, [pc, #364]	; (800159c <ESP_messageHandler+0x2b8>)
 8001430:	749a      	strb	r2, [r3, #18]
		vIlum[19] = textrc[77]; // Luz Bx100
 8001432:	4b51      	ldr	r3, [pc, #324]	; (8001578 <ESP_messageHandler+0x294>)
 8001434:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8001438:	4b58      	ldr	r3, [pc, #352]	; (800159c <ESP_messageHandler+0x2b8>)
 800143a:	74da      	strb	r2, [r3, #19]
		vIlum[20] = textrc[78]; // Luz Bx10
 800143c:	4b4e      	ldr	r3, [pc, #312]	; (8001578 <ESP_messageHandler+0x294>)
 800143e:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8001442:	4b56      	ldr	r3, [pc, #344]	; (800159c <ESP_messageHandler+0x2b8>)
 8001444:	751a      	strb	r2, [r3, #20]
		vIlum[21] = textrc[79]; // Luz Bx1
 8001446:	4b4c      	ldr	r3, [pc, #304]	; (8001578 <ESP_messageHandler+0x294>)
 8001448:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 800144c:	4b53      	ldr	r3, [pc, #332]	; (800159c <ESP_messageHandler+0x2b8>)
 800144e:	755a      	strb	r2, [r3, #21]
		vIlum[22] = textrc[82]; // Luz Garaje
 8001450:	4b49      	ldr	r3, [pc, #292]	; (8001578 <ESP_messageHandler+0x294>)
 8001452:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8001456:	4b51      	ldr	r3, [pc, #324]	; (800159c <ESP_messageHandler+0x2b8>)
 8001458:	759a      	strb	r2, [r3, #22]
		vIlum[23] = textrc[85]; // Luz Jardín
 800145a:	4b47      	ldr	r3, [pc, #284]	; (8001578 <ESP_messageHandler+0x294>)
 800145c:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8001460:	4b4e      	ldr	r3, [pc, #312]	; (800159c <ESP_messageHandler+0x2b8>)
 8001462:	75da      	strb	r2, [r3, #23]
		vIlum[24] = textrc[88]; // Luz Porche
 8001464:	4b44      	ldr	r3, [pc, #272]	; (8001578 <ESP_messageHandler+0x294>)
 8001466:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800146a:	4b4c      	ldr	r3, [pc, #304]	; (800159c <ESP_messageHandler+0x2b8>)
 800146c:	761a      	strb	r2, [r3, #24]
		vIlum[25] = textrc[91]; // Luz Tendedero
 800146e:	4b42      	ldr	r3, [pc, #264]	; (8001578 <ESP_messageHandler+0x294>)
 8001470:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 8001474:	4b49      	ldr	r3, [pc, #292]	; (800159c <ESP_messageHandler+0x2b8>)
 8001476:	765a      	strb	r2, [r3, #25]
		vIlum[26] = textrc[94]; // Automático
 8001478:	4b3f      	ldr	r3, [pc, #252]	; (8001578 <ESP_messageHandler+0x294>)
 800147a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 800147e:	4b47      	ldr	r3, [pc, #284]	; (800159c <ESP_messageHandler+0x2b8>)
 8001480:	769a      	strb	r2, [r3, #26]


		if(vIlum[0] == '0' || vSal[1] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, RESET); // Luz Sala
 8001482:	4b46      	ldr	r3, [pc, #280]	; (800159c <ESP_messageHandler+0x2b8>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b30      	cmp	r3, #48	; 0x30
 8001488:	d003      	beq.n	8001492 <ESP_messageHandler+0x1ae>
 800148a:	4b45      	ldr	r3, [pc, #276]	; (80015a0 <ESP_messageHandler+0x2bc>)
 800148c:	785b      	ldrb	r3, [r3, #1]
 800148e:	2b30      	cmp	r3, #48	; 0x30
 8001490:	d105      	bne.n	800149e <ESP_messageHandler+0x1ba>
 8001492:	2200      	movs	r2, #0
 8001494:	2108      	movs	r1, #8
 8001496:	4843      	ldr	r0, [pc, #268]	; (80015a4 <ESP_messageHandler+0x2c0>)
 8001498:	f004 fb34 	bl	8005b04 <HAL_GPIO_WritePin>
 800149c:	e00c      	b.n	80014b8 <ESP_messageHandler+0x1d4>
		else if(vIlum[0] == '1' || vSal[1] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, SET);
 800149e:	4b3f      	ldr	r3, [pc, #252]	; (800159c <ESP_messageHandler+0x2b8>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b31      	cmp	r3, #49	; 0x31
 80014a4:	d003      	beq.n	80014ae <ESP_messageHandler+0x1ca>
 80014a6:	4b3e      	ldr	r3, [pc, #248]	; (80015a0 <ESP_messageHandler+0x2bc>)
 80014a8:	785b      	ldrb	r3, [r3, #1]
 80014aa:	2b31      	cmp	r3, #49	; 0x31
 80014ac:	d104      	bne.n	80014b8 <ESP_messageHandler+0x1d4>
 80014ae:	2201      	movs	r2, #1
 80014b0:	2108      	movs	r1, #8
 80014b2:	483c      	ldr	r0, [pc, #240]	; (80015a4 <ESP_messageHandler+0x2c0>)
 80014b4:	f004 fb26 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[1] == '0' || vSal[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET); // Luz Comedor
 80014b8:	4b38      	ldr	r3, [pc, #224]	; (800159c <ESP_messageHandler+0x2b8>)
 80014ba:	785b      	ldrb	r3, [r3, #1]
 80014bc:	2b30      	cmp	r3, #48	; 0x30
 80014be:	d003      	beq.n	80014c8 <ESP_messageHandler+0x1e4>
 80014c0:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <ESP_messageHandler+0x2bc>)
 80014c2:	789b      	ldrb	r3, [r3, #2]
 80014c4:	2b30      	cmp	r3, #48	; 0x30
 80014c6:	d105      	bne.n	80014d4 <ESP_messageHandler+0x1f0>
 80014c8:	2200      	movs	r2, #0
 80014ca:	2102      	movs	r1, #2
 80014cc:	4835      	ldr	r0, [pc, #212]	; (80015a4 <ESP_messageHandler+0x2c0>)
 80014ce:	f004 fb19 	bl	8005b04 <HAL_GPIO_WritePin>
 80014d2:	e00c      	b.n	80014ee <ESP_messageHandler+0x20a>
		else if(vIlum[1] == '1'|| vSal[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, SET);
 80014d4:	4b31      	ldr	r3, [pc, #196]	; (800159c <ESP_messageHandler+0x2b8>)
 80014d6:	785b      	ldrb	r3, [r3, #1]
 80014d8:	2b31      	cmp	r3, #49	; 0x31
 80014da:	d003      	beq.n	80014e4 <ESP_messageHandler+0x200>
 80014dc:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <ESP_messageHandler+0x2bc>)
 80014de:	789b      	ldrb	r3, [r3, #2]
 80014e0:	2b31      	cmp	r3, #49	; 0x31
 80014e2:	d104      	bne.n	80014ee <ESP_messageHandler+0x20a>
 80014e4:	2201      	movs	r2, #1
 80014e6:	2102      	movs	r1, #2
 80014e8:	482e      	ldr	r0, [pc, #184]	; (80015a4 <ESP_messageHandler+0x2c0>)
 80014ea:	f004 fb0b 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[2] == '0' || vSal[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, RESET); // Luz Ambiente
 80014ee:	4b2b      	ldr	r3, [pc, #172]	; (800159c <ESP_messageHandler+0x2b8>)
 80014f0:	789b      	ldrb	r3, [r3, #2]
 80014f2:	2b30      	cmp	r3, #48	; 0x30
 80014f4:	d003      	beq.n	80014fe <ESP_messageHandler+0x21a>
 80014f6:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <ESP_messageHandler+0x2bc>)
 80014f8:	78db      	ldrb	r3, [r3, #3]
 80014fa:	2b30      	cmp	r3, #48	; 0x30
 80014fc:	d105      	bne.n	800150a <ESP_messageHandler+0x226>
 80014fe:	2200      	movs	r2, #0
 8001500:	2120      	movs	r1, #32
 8001502:	4828      	ldr	r0, [pc, #160]	; (80015a4 <ESP_messageHandler+0x2c0>)
 8001504:	f004 fafe 	bl	8005b04 <HAL_GPIO_WritePin>
 8001508:	e00c      	b.n	8001524 <ESP_messageHandler+0x240>
		else if(vIlum[2] == '1' || vSal[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, SET);
 800150a:	4b24      	ldr	r3, [pc, #144]	; (800159c <ESP_messageHandler+0x2b8>)
 800150c:	789b      	ldrb	r3, [r3, #2]
 800150e:	2b31      	cmp	r3, #49	; 0x31
 8001510:	d003      	beq.n	800151a <ESP_messageHandler+0x236>
 8001512:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <ESP_messageHandler+0x2bc>)
 8001514:	78db      	ldrb	r3, [r3, #3]
 8001516:	2b31      	cmp	r3, #49	; 0x31
 8001518:	d104      	bne.n	8001524 <ESP_messageHandler+0x240>
 800151a:	2201      	movs	r2, #1
 800151c:	2120      	movs	r1, #32
 800151e:	4821      	ldr	r0, [pc, #132]	; (80015a4 <ESP_messageHandler+0x2c0>)
 8001520:	f004 faf0 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[3] == '0' || vSal[4] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET); // Luz Recibidor
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <ESP_messageHandler+0x2b8>)
 8001526:	78db      	ldrb	r3, [r3, #3]
 8001528:	2b30      	cmp	r3, #48	; 0x30
 800152a:	d003      	beq.n	8001534 <ESP_messageHandler+0x250>
 800152c:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <ESP_messageHandler+0x2bc>)
 800152e:	791b      	ldrb	r3, [r3, #4]
 8001530:	2b30      	cmp	r3, #48	; 0x30
 8001532:	d105      	bne.n	8001540 <ESP_messageHandler+0x25c>
 8001534:	2200      	movs	r2, #0
 8001536:	2101      	movs	r1, #1
 8001538:	481a      	ldr	r0, [pc, #104]	; (80015a4 <ESP_messageHandler+0x2c0>)
 800153a:	f004 fae3 	bl	8005b04 <HAL_GPIO_WritePin>
 800153e:	e00c      	b.n	800155a <ESP_messageHandler+0x276>
		else if(vIlum[3] == '1' || vSal[4] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 8001540:	4b16      	ldr	r3, [pc, #88]	; (800159c <ESP_messageHandler+0x2b8>)
 8001542:	78db      	ldrb	r3, [r3, #3]
 8001544:	2b31      	cmp	r3, #49	; 0x31
 8001546:	d003      	beq.n	8001550 <ESP_messageHandler+0x26c>
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <ESP_messageHandler+0x2bc>)
 800154a:	791b      	ldrb	r3, [r3, #4]
 800154c:	2b31      	cmp	r3, #49	; 0x31
 800154e:	d104      	bne.n	800155a <ESP_messageHandler+0x276>
 8001550:	2201      	movs	r2, #1
 8001552:	2101      	movs	r1, #1
 8001554:	4813      	ldr	r0, [pc, #76]	; (80015a4 <ESP_messageHandler+0x2c0>)
 8001556:	f004 fad5 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[4] == '0' || vCoc[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET); // Luz Cocina
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <ESP_messageHandler+0x2b8>)
 800155c:	791b      	ldrb	r3, [r3, #4]
 800155e:	2b30      	cmp	r3, #48	; 0x30
 8001560:	d003      	beq.n	800156a <ESP_messageHandler+0x286>
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <ESP_messageHandler+0x2c4>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b30      	cmp	r3, #48	; 0x30
 8001568:	d122      	bne.n	80015b0 <ESP_messageHandler+0x2cc>
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001570:	480e      	ldr	r0, [pc, #56]	; (80015ac <ESP_messageHandler+0x2c8>)
 8001572:	f004 fac7 	bl	8005b04 <HAL_GPIO_WritePin>
 8001576:	e029      	b.n	80015cc <ESP_messageHandler+0x2e8>
 8001578:	200009d0 	.word	0x200009d0
 800157c:	20000e08 	.word	0x20000e08
 8001580:	20000d7c 	.word	0x20000d7c
 8001584:	080091c8 	.word	0x080091c8
 8001588:	200009b4 	.word	0x200009b4
 800158c:	20000a48 	.word	0x20000a48
 8001590:	080091cc 	.word	0x080091cc
 8001594:	20000a4c 	.word	0x20000a4c
 8001598:	080091d8 	.word	0x080091d8
 800159c:	20000998 	.word	0x20000998
 80015a0:	20000a40 	.word	0x20000a40
 80015a4:	40020c00 	.word	0x40020c00
 80015a8:	2000090c 	.word	0x2000090c
 80015ac:	40020800 	.word	0x40020800
		else if(vIlum[4] == '1' || vCoc[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 80015b0:	4b95      	ldr	r3, [pc, #596]	; (8001808 <ESP_messageHandler+0x524>)
 80015b2:	791b      	ldrb	r3, [r3, #4]
 80015b4:	2b31      	cmp	r3, #49	; 0x31
 80015b6:	d003      	beq.n	80015c0 <ESP_messageHandler+0x2dc>
 80015b8:	4b94      	ldr	r3, [pc, #592]	; (800180c <ESP_messageHandler+0x528>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b31      	cmp	r3, #49	; 0x31
 80015be:	d105      	bne.n	80015cc <ESP_messageHandler+0x2e8>
 80015c0:	2201      	movs	r2, #1
 80015c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015c6:	4892      	ldr	r0, [pc, #584]	; (8001810 <ESP_messageHandler+0x52c>)
 80015c8:	f004 fa9c 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[5] == '0' || vCoc[1] == '0') HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET); // Luz Fregadero
 80015cc:	4b8e      	ldr	r3, [pc, #568]	; (8001808 <ESP_messageHandler+0x524>)
 80015ce:	795b      	ldrb	r3, [r3, #5]
 80015d0:	2b30      	cmp	r3, #48	; 0x30
 80015d2:	d003      	beq.n	80015dc <ESP_messageHandler+0x2f8>
 80015d4:	4b8d      	ldr	r3, [pc, #564]	; (800180c <ESP_messageHandler+0x528>)
 80015d6:	785b      	ldrb	r3, [r3, #1]
 80015d8:	2b30      	cmp	r3, #48	; 0x30
 80015da:	d106      	bne.n	80015ea <ESP_messageHandler+0x306>
 80015dc:	2200      	movs	r2, #0
 80015de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015e2:	488c      	ldr	r0, [pc, #560]	; (8001814 <ESP_messageHandler+0x530>)
 80015e4:	f004 fa8e 	bl	8005b04 <HAL_GPIO_WritePin>
 80015e8:	e00d      	b.n	8001606 <ESP_messageHandler+0x322>
		else if(vIlum[5] == '1' || vCoc[1] == '1')HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 80015ea:	4b87      	ldr	r3, [pc, #540]	; (8001808 <ESP_messageHandler+0x524>)
 80015ec:	795b      	ldrb	r3, [r3, #5]
 80015ee:	2b31      	cmp	r3, #49	; 0x31
 80015f0:	d003      	beq.n	80015fa <ESP_messageHandler+0x316>
 80015f2:	4b86      	ldr	r3, [pc, #536]	; (800180c <ESP_messageHandler+0x528>)
 80015f4:	785b      	ldrb	r3, [r3, #1]
 80015f6:	2b31      	cmp	r3, #49	; 0x31
 80015f8:	d105      	bne.n	8001606 <ESP_messageHandler+0x322>
 80015fa:	2201      	movs	r2, #1
 80015fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001600:	4884      	ldr	r0, [pc, #528]	; (8001814 <ESP_messageHandler+0x530>)
 8001602:	f004 fa7f 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[6] == '0' || vBan[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, RESET); // Luz Baño
 8001606:	4b80      	ldr	r3, [pc, #512]	; (8001808 <ESP_messageHandler+0x524>)
 8001608:	799b      	ldrb	r3, [r3, #6]
 800160a:	2b30      	cmp	r3, #48	; 0x30
 800160c:	d003      	beq.n	8001616 <ESP_messageHandler+0x332>
 800160e:	4b82      	ldr	r3, [pc, #520]	; (8001818 <ESP_messageHandler+0x534>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b30      	cmp	r3, #48	; 0x30
 8001614:	d105      	bne.n	8001622 <ESP_messageHandler+0x33e>
 8001616:	2200      	movs	r2, #0
 8001618:	2140      	movs	r1, #64	; 0x40
 800161a:	4880      	ldr	r0, [pc, #512]	; (800181c <ESP_messageHandler+0x538>)
 800161c:	f004 fa72 	bl	8005b04 <HAL_GPIO_WritePin>
 8001620:	e00c      	b.n	800163c <ESP_messageHandler+0x358>
		else if(vIlum[6] == '1' || vBan[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, SET);
 8001622:	4b79      	ldr	r3, [pc, #484]	; (8001808 <ESP_messageHandler+0x524>)
 8001624:	799b      	ldrb	r3, [r3, #6]
 8001626:	2b31      	cmp	r3, #49	; 0x31
 8001628:	d003      	beq.n	8001632 <ESP_messageHandler+0x34e>
 800162a:	4b7b      	ldr	r3, [pc, #492]	; (8001818 <ESP_messageHandler+0x534>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b31      	cmp	r3, #49	; 0x31
 8001630:	d104      	bne.n	800163c <ESP_messageHandler+0x358>
 8001632:	2201      	movs	r2, #1
 8001634:	2140      	movs	r1, #64	; 0x40
 8001636:	4879      	ldr	r0, [pc, #484]	; (800181c <ESP_messageHandler+0x538>)
 8001638:	f004 fa64 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[7] == '0' || vBan[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET); // Luz Espejo
 800163c:	4b72      	ldr	r3, [pc, #456]	; (8001808 <ESP_messageHandler+0x524>)
 800163e:	79db      	ldrb	r3, [r3, #7]
 8001640:	2b30      	cmp	r3, #48	; 0x30
 8001642:	d003      	beq.n	800164c <ESP_messageHandler+0x368>
 8001644:	4b74      	ldr	r3, [pc, #464]	; (8001818 <ESP_messageHandler+0x534>)
 8001646:	785b      	ldrb	r3, [r3, #1]
 8001648:	2b30      	cmp	r3, #48	; 0x30
 800164a:	d105      	bne.n	8001658 <ESP_messageHandler+0x374>
 800164c:	2200      	movs	r2, #0
 800164e:	2108      	movs	r1, #8
 8001650:	4873      	ldr	r0, [pc, #460]	; (8001820 <ESP_messageHandler+0x53c>)
 8001652:	f004 fa57 	bl	8005b04 <HAL_GPIO_WritePin>
 8001656:	e00c      	b.n	8001672 <ESP_messageHandler+0x38e>
		else if(vIlum[7] == '1' || vBan[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8001658:	4b6b      	ldr	r3, [pc, #428]	; (8001808 <ESP_messageHandler+0x524>)
 800165a:	79db      	ldrb	r3, [r3, #7]
 800165c:	2b31      	cmp	r3, #49	; 0x31
 800165e:	d003      	beq.n	8001668 <ESP_messageHandler+0x384>
 8001660:	4b6d      	ldr	r3, [pc, #436]	; (8001818 <ESP_messageHandler+0x534>)
 8001662:	785b      	ldrb	r3, [r3, #1]
 8001664:	2b31      	cmp	r3, #49	; 0x31
 8001666:	d104      	bne.n	8001672 <ESP_messageHandler+0x38e>
 8001668:	2201      	movs	r2, #1
 800166a:	2108      	movs	r1, #8
 800166c:	486c      	ldr	r0, [pc, #432]	; (8001820 <ESP_messageHandler+0x53c>)
 800166e:	f004 fa49 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[8] == '0' || vDor[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, RESET); // Luz Dormitorio
 8001672:	4b65      	ldr	r3, [pc, #404]	; (8001808 <ESP_messageHandler+0x524>)
 8001674:	7a1b      	ldrb	r3, [r3, #8]
 8001676:	2b30      	cmp	r3, #48	; 0x30
 8001678:	d003      	beq.n	8001682 <ESP_messageHandler+0x39e>
 800167a:	4b6a      	ldr	r3, [pc, #424]	; (8001824 <ESP_messageHandler+0x540>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b30      	cmp	r3, #48	; 0x30
 8001680:	d105      	bne.n	800168e <ESP_messageHandler+0x3aa>
 8001682:	2200      	movs	r2, #0
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	4865      	ldr	r0, [pc, #404]	; (800181c <ESP_messageHandler+0x538>)
 8001688:	f004 fa3c 	bl	8005b04 <HAL_GPIO_WritePin>
 800168c:	e00c      	b.n	80016a8 <ESP_messageHandler+0x3c4>
		else if(vIlum[8] == '1' || vDor[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET);
 800168e:	4b5e      	ldr	r3, [pc, #376]	; (8001808 <ESP_messageHandler+0x524>)
 8001690:	7a1b      	ldrb	r3, [r3, #8]
 8001692:	2b31      	cmp	r3, #49	; 0x31
 8001694:	d003      	beq.n	800169e <ESP_messageHandler+0x3ba>
 8001696:	4b63      	ldr	r3, [pc, #396]	; (8001824 <ESP_messageHandler+0x540>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b31      	cmp	r3, #49	; 0x31
 800169c:	d104      	bne.n	80016a8 <ESP_messageHandler+0x3c4>
 800169e:	2201      	movs	r2, #1
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	485e      	ldr	r0, [pc, #376]	; (800181c <ESP_messageHandler+0x538>)
 80016a4:	f004 fa2e 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[9] == '0' || vDor[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET); // Luz Mesita Izq
 80016a8:	4b57      	ldr	r3, [pc, #348]	; (8001808 <ESP_messageHandler+0x524>)
 80016aa:	7a5b      	ldrb	r3, [r3, #9]
 80016ac:	2b30      	cmp	r3, #48	; 0x30
 80016ae:	d003      	beq.n	80016b8 <ESP_messageHandler+0x3d4>
 80016b0:	4b5c      	ldr	r3, [pc, #368]	; (8001824 <ESP_messageHandler+0x540>)
 80016b2:	785b      	ldrb	r3, [r3, #1]
 80016b4:	2b30      	cmp	r3, #48	; 0x30
 80016b6:	d105      	bne.n	80016c4 <ESP_messageHandler+0x3e0>
 80016b8:	2200      	movs	r2, #0
 80016ba:	2110      	movs	r1, #16
 80016bc:	4858      	ldr	r0, [pc, #352]	; (8001820 <ESP_messageHandler+0x53c>)
 80016be:	f004 fa21 	bl	8005b04 <HAL_GPIO_WritePin>
 80016c2:	e00c      	b.n	80016de <ESP_messageHandler+0x3fa>
		else if(vIlum[9] == '1' || vDor[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80016c4:	4b50      	ldr	r3, [pc, #320]	; (8001808 <ESP_messageHandler+0x524>)
 80016c6:	7a5b      	ldrb	r3, [r3, #9]
 80016c8:	2b31      	cmp	r3, #49	; 0x31
 80016ca:	d003      	beq.n	80016d4 <ESP_messageHandler+0x3f0>
 80016cc:	4b55      	ldr	r3, [pc, #340]	; (8001824 <ESP_messageHandler+0x540>)
 80016ce:	785b      	ldrb	r3, [r3, #1]
 80016d0:	2b31      	cmp	r3, #49	; 0x31
 80016d2:	d104      	bne.n	80016de <ESP_messageHandler+0x3fa>
 80016d4:	2201      	movs	r2, #1
 80016d6:	2110      	movs	r1, #16
 80016d8:	4851      	ldr	r0, [pc, #324]	; (8001820 <ESP_messageHandler+0x53c>)
 80016da:	f004 fa13 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[10] == '0' || vDor[2] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET); // Luz Mesita Dch
 80016de:	4b4a      	ldr	r3, [pc, #296]	; (8001808 <ESP_messageHandler+0x524>)
 80016e0:	7a9b      	ldrb	r3, [r3, #10]
 80016e2:	2b30      	cmp	r3, #48	; 0x30
 80016e4:	d003      	beq.n	80016ee <ESP_messageHandler+0x40a>
 80016e6:	4b4f      	ldr	r3, [pc, #316]	; (8001824 <ESP_messageHandler+0x540>)
 80016e8:	789b      	ldrb	r3, [r3, #2]
 80016ea:	2b30      	cmp	r3, #48	; 0x30
 80016ec:	d105      	bne.n	80016fa <ESP_messageHandler+0x416>
 80016ee:	2200      	movs	r2, #0
 80016f0:	2140      	movs	r1, #64	; 0x40
 80016f2:	484b      	ldr	r0, [pc, #300]	; (8001820 <ESP_messageHandler+0x53c>)
 80016f4:	f004 fa06 	bl	8005b04 <HAL_GPIO_WritePin>
 80016f8:	e00c      	b.n	8001714 <ESP_messageHandler+0x430>
		else if(vIlum[10] == '1' || vDor[2] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 80016fa:	4b43      	ldr	r3, [pc, #268]	; (8001808 <ESP_messageHandler+0x524>)
 80016fc:	7a9b      	ldrb	r3, [r3, #10]
 80016fe:	2b31      	cmp	r3, #49	; 0x31
 8001700:	d003      	beq.n	800170a <ESP_messageHandler+0x426>
 8001702:	4b48      	ldr	r3, [pc, #288]	; (8001824 <ESP_messageHandler+0x540>)
 8001704:	789b      	ldrb	r3, [r3, #2]
 8001706:	2b31      	cmp	r3, #49	; 0x31
 8001708:	d104      	bne.n	8001714 <ESP_messageHandler+0x430>
 800170a:	2201      	movs	r2, #1
 800170c:	2140      	movs	r1, #64	; 0x40
 800170e:	4844      	ldr	r0, [pc, #272]	; (8001820 <ESP_messageHandler+0x53c>)
 8001710:	f004 f9f8 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[11] == '0' || vOfi[0] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET); // Luz Oficina
 8001714:	4b3c      	ldr	r3, [pc, #240]	; (8001808 <ESP_messageHandler+0x524>)
 8001716:	7adb      	ldrb	r3, [r3, #11]
 8001718:	2b30      	cmp	r3, #48	; 0x30
 800171a:	d003      	beq.n	8001724 <ESP_messageHandler+0x440>
 800171c:	4b42      	ldr	r3, [pc, #264]	; (8001828 <ESP_messageHandler+0x544>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b30      	cmp	r3, #48	; 0x30
 8001722:	d105      	bne.n	8001730 <ESP_messageHandler+0x44c>
 8001724:	2200      	movs	r2, #0
 8001726:	2120      	movs	r1, #32
 8001728:	483d      	ldr	r0, [pc, #244]	; (8001820 <ESP_messageHandler+0x53c>)
 800172a:	f004 f9eb 	bl	8005b04 <HAL_GPIO_WritePin>
 800172e:	e00c      	b.n	800174a <ESP_messageHandler+0x466>
		else if(vIlum[11] == '1' || vOfi[0] == '1') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001730:	4b35      	ldr	r3, [pc, #212]	; (8001808 <ESP_messageHandler+0x524>)
 8001732:	7adb      	ldrb	r3, [r3, #11]
 8001734:	2b31      	cmp	r3, #49	; 0x31
 8001736:	d003      	beq.n	8001740 <ESP_messageHandler+0x45c>
 8001738:	4b3b      	ldr	r3, [pc, #236]	; (8001828 <ESP_messageHandler+0x544>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b31      	cmp	r3, #49	; 0x31
 800173e:	d104      	bne.n	800174a <ESP_messageHandler+0x466>
 8001740:	2201      	movs	r2, #1
 8001742:	2120      	movs	r1, #32
 8001744:	4836      	ldr	r0, [pc, #216]	; (8001820 <ESP_messageHandler+0x53c>)
 8001746:	f004 f9dd 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[12] == '0' || vOfi[1] == '0'){ // Luz Gaming
 800174a:	4b2f      	ldr	r3, [pc, #188]	; (8001808 <ESP_messageHandler+0x524>)
 800174c:	7b1b      	ldrb	r3, [r3, #12]
 800174e:	2b30      	cmp	r3, #48	; 0x30
 8001750:	d003      	beq.n	800175a <ESP_messageHandler+0x476>
 8001752:	4b35      	ldr	r3, [pc, #212]	; (8001828 <ESP_messageHandler+0x544>)
 8001754:	785b      	ldrb	r3, [r3, #1]
 8001756:	2b30      	cmp	r3, #48	; 0x30
 8001758:	d10c      	bne.n	8001774 <ESP_messageHandler+0x490>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800175a:	4b34      	ldr	r3, [pc, #208]	; (800182c <ESP_messageHandler+0x548>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2200      	movs	r2, #0
 8001760:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001762:	4b32      	ldr	r3, [pc, #200]	; (800182c <ESP_messageHandler+0x548>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2200      	movs	r2, #0
 8001768:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800176a:	4b30      	ldr	r3, [pc, #192]	; (800182c <ESP_messageHandler+0x548>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2200      	movs	r2, #0
 8001770:	63da      	str	r2, [r3, #60]	; 0x3c
 8001772:	e03a      	b.n	80017ea <ESP_messageHandler+0x506>
		}
		else if(vIlum[12] == '1' || vOfi[1] == '1'){
 8001774:	4b24      	ldr	r3, [pc, #144]	; (8001808 <ESP_messageHandler+0x524>)
 8001776:	7b1b      	ldrb	r3, [r3, #12]
 8001778:	2b31      	cmp	r3, #49	; 0x31
 800177a:	d003      	beq.n	8001784 <ESP_messageHandler+0x4a0>
 800177c:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <ESP_messageHandler+0x544>)
 800177e:	785b      	ldrb	r3, [r3, #1]
 8001780:	2b31      	cmp	r3, #49	; 0x31
 8001782:	d132      	bne.n	80017ea <ESP_messageHandler+0x506>

			//uint8_t r, g, b;

			r = rgb_value (vIlum[13],vIlum[14],vIlum[15]);
 8001784:	4b20      	ldr	r3, [pc, #128]	; (8001808 <ESP_messageHandler+0x524>)
 8001786:	7b5b      	ldrb	r3, [r3, #13]
 8001788:	4a1f      	ldr	r2, [pc, #124]	; (8001808 <ESP_messageHandler+0x524>)
 800178a:	7b91      	ldrb	r1, [r2, #14]
 800178c:	4a1e      	ldr	r2, [pc, #120]	; (8001808 <ESP_messageHandler+0x524>)
 800178e:	7bd2      	ldrb	r2, [r2, #15]
 8001790:	4618      	mov	r0, r3
 8001792:	f000 fdab 	bl	80022ec <rgb_value>
 8001796:	4603      	mov	r3, r0
 8001798:	4a25      	ldr	r2, [pc, #148]	; (8001830 <ESP_messageHandler+0x54c>)
 800179a:	6013      	str	r3, [r2, #0]
			g = rgb_value (vIlum[16],vIlum[17],vIlum[18]);
 800179c:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <ESP_messageHandler+0x524>)
 800179e:	7c1b      	ldrb	r3, [r3, #16]
 80017a0:	4a19      	ldr	r2, [pc, #100]	; (8001808 <ESP_messageHandler+0x524>)
 80017a2:	7c51      	ldrb	r1, [r2, #17]
 80017a4:	4a18      	ldr	r2, [pc, #96]	; (8001808 <ESP_messageHandler+0x524>)
 80017a6:	7c92      	ldrb	r2, [r2, #18]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 fd9f 	bl	80022ec <rgb_value>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4a20      	ldr	r2, [pc, #128]	; (8001834 <ESP_messageHandler+0x550>)
 80017b2:	6013      	str	r3, [r2, #0]
			b = rgb_value (vIlum[19],vIlum[20],vIlum[21]);
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <ESP_messageHandler+0x524>)
 80017b6:	7cdb      	ldrb	r3, [r3, #19]
 80017b8:	4a13      	ldr	r2, [pc, #76]	; (8001808 <ESP_messageHandler+0x524>)
 80017ba:	7d11      	ldrb	r1, [r2, #20]
 80017bc:	4a12      	ldr	r2, [pc, #72]	; (8001808 <ESP_messageHandler+0x524>)
 80017be:	7d52      	ldrb	r2, [r2, #21]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 fd93 	bl	80022ec <rgb_value>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4a1b      	ldr	r2, [pc, #108]	; (8001838 <ESP_messageHandler+0x554>)
 80017ca:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, g); // PA8
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <ESP_messageHandler+0x550>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b16      	ldr	r3, [pc, #88]	; (800182c <ESP_messageHandler+0x548>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, r); // PA9
 80017d6:	4b16      	ldr	r3, [pc, #88]	; (8001830 <ESP_messageHandler+0x54c>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4b14      	ldr	r3, [pc, #80]	; (800182c <ESP_messageHandler+0x548>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b); // PA10
 80017e0:	4b15      	ldr	r3, [pc, #84]	; (8001838 <ESP_messageHandler+0x554>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <ESP_messageHandler+0x548>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		if(vIlum[22] == '0' || vGar[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET); // Luz Garaje
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <ESP_messageHandler+0x524>)
 80017ec:	7d9b      	ldrb	r3, [r3, #22]
 80017ee:	2b30      	cmp	r3, #48	; 0x30
 80017f0:	d003      	beq.n	80017fa <ESP_messageHandler+0x516>
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <ESP_messageHandler+0x558>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b30      	cmp	r3, #48	; 0x30
 80017f8:	d122      	bne.n	8001840 <ESP_messageHandler+0x55c>
 80017fa:	2200      	movs	r2, #0
 80017fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001800:	4803      	ldr	r0, [pc, #12]	; (8001810 <ESP_messageHandler+0x52c>)
 8001802:	f004 f97f 	bl	8005b04 <HAL_GPIO_WritePin>
 8001806:	e029      	b.n	800185c <ESP_messageHandler+0x578>
 8001808:	20000998 	.word	0x20000998
 800180c:	2000090c 	.word	0x2000090c
 8001810:	40020800 	.word	0x40020800
 8001814:	40020000 	.word	0x40020000
 8001818:	20000980 	.word	0x20000980
 800181c:	40020c00 	.word	0x40020c00
 8001820:	40020400 	.word	0x40020400
 8001824:	20000910 	.word	0x20000910
 8001828:	20000974 	.word	0x20000974
 800182c:	20000cec 	.word	0x20000cec
 8001830:	20000924 	.word	0x20000924
 8001834:	20000918 	.word	0x20000918
 8001838:	20000914 	.word	0x20000914
 800183c:	2000096c 	.word	0x2000096c
		else if(vIlum[22] == '1' || vGar[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 8001840:	4b98      	ldr	r3, [pc, #608]	; (8001aa4 <ESP_messageHandler+0x7c0>)
 8001842:	7d9b      	ldrb	r3, [r3, #22]
 8001844:	2b31      	cmp	r3, #49	; 0x31
 8001846:	d003      	beq.n	8001850 <ESP_messageHandler+0x56c>
 8001848:	4b97      	ldr	r3, [pc, #604]	; (8001aa8 <ESP_messageHandler+0x7c4>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b31      	cmp	r3, #49	; 0x31
 800184e:	d105      	bne.n	800185c <ESP_messageHandler+0x578>
 8001850:	2201      	movs	r2, #1
 8001852:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001856:	4895      	ldr	r0, [pc, #596]	; (8001aac <ESP_messageHandler+0x7c8>)
 8001858:	f004 f954 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[23] == '0' || vExt[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET); // Luz Jardín
 800185c:	4b91      	ldr	r3, [pc, #580]	; (8001aa4 <ESP_messageHandler+0x7c0>)
 800185e:	7ddb      	ldrb	r3, [r3, #23]
 8001860:	2b30      	cmp	r3, #48	; 0x30
 8001862:	d003      	beq.n	800186c <ESP_messageHandler+0x588>
 8001864:	4b92      	ldr	r3, [pc, #584]	; (8001ab0 <ESP_messageHandler+0x7cc>)
 8001866:	78db      	ldrb	r3, [r3, #3]
 8001868:	2b30      	cmp	r3, #48	; 0x30
 800186a:	d105      	bne.n	8001878 <ESP_messageHandler+0x594>
 800186c:	2200      	movs	r2, #0
 800186e:	2104      	movs	r1, #4
 8001870:	4890      	ldr	r0, [pc, #576]	; (8001ab4 <ESP_messageHandler+0x7d0>)
 8001872:	f004 f947 	bl	8005b04 <HAL_GPIO_WritePin>
 8001876:	e00c      	b.n	8001892 <ESP_messageHandler+0x5ae>
		else if(vIlum[23] == '1' || vExt[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8001878:	4b8a      	ldr	r3, [pc, #552]	; (8001aa4 <ESP_messageHandler+0x7c0>)
 800187a:	7ddb      	ldrb	r3, [r3, #23]
 800187c:	2b31      	cmp	r3, #49	; 0x31
 800187e:	d003      	beq.n	8001888 <ESP_messageHandler+0x5a4>
 8001880:	4b8b      	ldr	r3, [pc, #556]	; (8001ab0 <ESP_messageHandler+0x7cc>)
 8001882:	78db      	ldrb	r3, [r3, #3]
 8001884:	2b31      	cmp	r3, #49	; 0x31
 8001886:	d104      	bne.n	8001892 <ESP_messageHandler+0x5ae>
 8001888:	2201      	movs	r2, #1
 800188a:	2104      	movs	r1, #4
 800188c:	4889      	ldr	r0, [pc, #548]	; (8001ab4 <ESP_messageHandler+0x7d0>)
 800188e:	f004 f939 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[24] == '0' || vExt[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET); // Luz Porche
 8001892:	4b84      	ldr	r3, [pc, #528]	; (8001aa4 <ESP_messageHandler+0x7c0>)
 8001894:	7e1b      	ldrb	r3, [r3, #24]
 8001896:	2b30      	cmp	r3, #48	; 0x30
 8001898:	d003      	beq.n	80018a2 <ESP_messageHandler+0x5be>
 800189a:	4b85      	ldr	r3, [pc, #532]	; (8001ab0 <ESP_messageHandler+0x7cc>)
 800189c:	789b      	ldrb	r3, [r3, #2]
 800189e:	2b30      	cmp	r3, #48	; 0x30
 80018a0:	d105      	bne.n	80018ae <ESP_messageHandler+0x5ca>
 80018a2:	2200      	movs	r2, #0
 80018a4:	2110      	movs	r1, #16
 80018a6:	4883      	ldr	r0, [pc, #524]	; (8001ab4 <ESP_messageHandler+0x7d0>)
 80018a8:	f004 f92c 	bl	8005b04 <HAL_GPIO_WritePin>
 80018ac:	e00c      	b.n	80018c8 <ESP_messageHandler+0x5e4>
		else if(vIlum[24] == '1' || vExt[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 80018ae:	4b7d      	ldr	r3, [pc, #500]	; (8001aa4 <ESP_messageHandler+0x7c0>)
 80018b0:	7e1b      	ldrb	r3, [r3, #24]
 80018b2:	2b31      	cmp	r3, #49	; 0x31
 80018b4:	d003      	beq.n	80018be <ESP_messageHandler+0x5da>
 80018b6:	4b7e      	ldr	r3, [pc, #504]	; (8001ab0 <ESP_messageHandler+0x7cc>)
 80018b8:	789b      	ldrb	r3, [r3, #2]
 80018ba:	2b31      	cmp	r3, #49	; 0x31
 80018bc:	d104      	bne.n	80018c8 <ESP_messageHandler+0x5e4>
 80018be:	2201      	movs	r2, #1
 80018c0:	2110      	movs	r1, #16
 80018c2:	487c      	ldr	r0, [pc, #496]	; (8001ab4 <ESP_messageHandler+0x7d0>)
 80018c4:	f004 f91e 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[25] == '0' || vExt[1] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET); // Luz Tendedero
 80018c8:	4b76      	ldr	r3, [pc, #472]	; (8001aa4 <ESP_messageHandler+0x7c0>)
 80018ca:	7e5b      	ldrb	r3, [r3, #25]
 80018cc:	2b30      	cmp	r3, #48	; 0x30
 80018ce:	d003      	beq.n	80018d8 <ESP_messageHandler+0x5f4>
 80018d0:	4b77      	ldr	r3, [pc, #476]	; (8001ab0 <ESP_messageHandler+0x7cc>)
 80018d2:	785b      	ldrb	r3, [r3, #1]
 80018d4:	2b30      	cmp	r3, #48	; 0x30
 80018d6:	d106      	bne.n	80018e6 <ESP_messageHandler+0x602>
 80018d8:	2200      	movs	r2, #0
 80018da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018de:	4873      	ldr	r0, [pc, #460]	; (8001aac <ESP_messageHandler+0x7c8>)
 80018e0:	f004 f910 	bl	8005b04 <HAL_GPIO_WritePin>
 80018e4:	e00d      	b.n	8001902 <ESP_messageHandler+0x61e>
		else if(vIlum[25] == '1' || vExt[1] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 80018e6:	4b6f      	ldr	r3, [pc, #444]	; (8001aa4 <ESP_messageHandler+0x7c0>)
 80018e8:	7e5b      	ldrb	r3, [r3, #25]
 80018ea:	2b31      	cmp	r3, #49	; 0x31
 80018ec:	d003      	beq.n	80018f6 <ESP_messageHandler+0x612>
 80018ee:	4b70      	ldr	r3, [pc, #448]	; (8001ab0 <ESP_messageHandler+0x7cc>)
 80018f0:	785b      	ldrb	r3, [r3, #1]
 80018f2:	2b31      	cmp	r3, #49	; 0x31
 80018f4:	d105      	bne.n	8001902 <ESP_messageHandler+0x61e>
 80018f6:	2201      	movs	r2, #1
 80018f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018fc:	486b      	ldr	r0, [pc, #428]	; (8001aac <ESP_messageHandler+0x7c8>)
 80018fe:	f004 f901 	bl	8005b04 <HAL_GPIO_WritePin>
	}

	// PUERTAS Y VENTANAS
	if (fragment[0] == 'p'){
 8001902:	4b6d      	ldr	r3, [pc, #436]	; (8001ab8 <ESP_messageHandler+0x7d4>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b70      	cmp	r3, #112	; 0x70
 8001908:	d107      	bne.n	800191a <ESP_messageHandler+0x636>
		UART_send("PUERTAS Y VENTANAS (PUERTA PARCELA)\n", PC_UART);
 800190a:	496c      	ldr	r1, [pc, #432]	; (8001abc <ESP_messageHandler+0x7d8>)
 800190c:	486c      	ldr	r0, [pc, #432]	; (8001ac0 <ESP_messageHandler+0x7dc>)
 800190e:	f001 f8cd 	bl	8002aac <UART_send>
		vVent[0] = textrc[28]; // P. Parcela
 8001912:	4b6c      	ldr	r3, [pc, #432]	; (8001ac4 <ESP_messageHandler+0x7e0>)
 8001914:	7f1a      	ldrb	r2, [r3, #28]
 8001916:	4b6c      	ldr	r3, [pc, #432]	; (8001ac8 <ESP_messageHandler+0x7e4>)
 8001918:	701a      	strb	r2, [r3, #0]
	}
	if (fragment[0] == 'g'){
 800191a:	4b67      	ldr	r3, [pc, #412]	; (8001ab8 <ESP_messageHandler+0x7d4>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b67      	cmp	r3, #103	; 0x67
 8001920:	d107      	bne.n	8001932 <ESP_messageHandler+0x64e>
		UART_send("PUERTAS Y VENTANAS (PUERTA GARAJE)\n", PC_UART);
 8001922:	4966      	ldr	r1, [pc, #408]	; (8001abc <ESP_messageHandler+0x7d8>)
 8001924:	4869      	ldr	r0, [pc, #420]	; (8001acc <ESP_messageHandler+0x7e8>)
 8001926:	f001 f8c1 	bl	8002aac <UART_send>
		vVent[1] = textrc[31]; // P. Garaje
 800192a:	4b66      	ldr	r3, [pc, #408]	; (8001ac4 <ESP_messageHandler+0x7e0>)
 800192c:	7fda      	ldrb	r2, [r3, #31]
 800192e:	4b66      	ldr	r3, [pc, #408]	; (8001ac8 <ESP_messageHandler+0x7e4>)
 8001930:	705a      	strb	r2, [r3, #1]
	}
	if (fragment[0] == 'l'){
 8001932:	4b61      	ldr	r3, [pc, #388]	; (8001ab8 <ESP_messageHandler+0x7d4>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b6c      	cmp	r3, #108	; 0x6c
 8001938:	d108      	bne.n	800194c <ESP_messageHandler+0x668>
		UART_send("PUERTAS Y VENTANAS (VENTANA SALÓN)\n", PC_UART);
 800193a:	4960      	ldr	r1, [pc, #384]	; (8001abc <ESP_messageHandler+0x7d8>)
 800193c:	4864      	ldr	r0, [pc, #400]	; (8001ad0 <ESP_messageHandler+0x7ec>)
 800193e:	f001 f8b5 	bl	8002aac <UART_send>
		vVent[2] = textrc[34]; // V. Salón
 8001942:	4b60      	ldr	r3, [pc, #384]	; (8001ac4 <ESP_messageHandler+0x7e0>)
 8001944:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001948:	4b5f      	ldr	r3, [pc, #380]	; (8001ac8 <ESP_messageHandler+0x7e4>)
 800194a:	709a      	strb	r2, [r3, #2]
	}
	if (fragment[0] == 'd'){
 800194c:	4b5a      	ldr	r3, [pc, #360]	; (8001ab8 <ESP_messageHandler+0x7d4>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b64      	cmp	r3, #100	; 0x64
 8001952:	d108      	bne.n	8001966 <ESP_messageHandler+0x682>
		UART_send("PUERTAS Y VENTANAS (VENTANA DORMITORIO)\n", PC_UART);
 8001954:	4959      	ldr	r1, [pc, #356]	; (8001abc <ESP_messageHandler+0x7d8>)
 8001956:	485f      	ldr	r0, [pc, #380]	; (8001ad4 <ESP_messageHandler+0x7f0>)
 8001958:	f001 f8a8 	bl	8002aac <UART_send>
		vVent[3] = textrc[37]; // V. Dormitorio
 800195c:	4b59      	ldr	r3, [pc, #356]	; (8001ac4 <ESP_messageHandler+0x7e0>)
 800195e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001962:	4b59      	ldr	r3, [pc, #356]	; (8001ac8 <ESP_messageHandler+0x7e4>)
 8001964:	70da      	strb	r2, [r3, #3]
	}
	if (fragment[0] == 'o'){
 8001966:	4b54      	ldr	r3, [pc, #336]	; (8001ab8 <ESP_messageHandler+0x7d4>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b6f      	cmp	r3, #111	; 0x6f
 800196c:	d108      	bne.n	8001980 <ESP_messageHandler+0x69c>
		UART_send("PUERTAS Y VENTANAS (VENTANA OFICINA)\n", PC_UART);
 800196e:	4953      	ldr	r1, [pc, #332]	; (8001abc <ESP_messageHandler+0x7d8>)
 8001970:	4859      	ldr	r0, [pc, #356]	; (8001ad8 <ESP_messageHandler+0x7f4>)
 8001972:	f001 f89b 	bl	8002aac <UART_send>
		vVent[4] = textrc[40]; // V. Oficina
 8001976:	4b53      	ldr	r3, [pc, #332]	; (8001ac4 <ESP_messageHandler+0x7e0>)
 8001978:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800197c:	4b52      	ldr	r3, [pc, #328]	; (8001ac8 <ESP_messageHandler+0x7e4>)
 800197e:	711a      	strb	r2, [r3, #4]
	}

	// TIEMPO
	if (fragment[0] == 't'){
 8001980:	4b4d      	ldr	r3, [pc, #308]	; (8001ab8 <ESP_messageHandler+0x7d4>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b74      	cmp	r3, #116	; 0x74
 8001986:	d12a      	bne.n	80019de <ESP_messageHandler+0x6fa>
		UART_send("TIEMPO\n", PC_UART);
 8001988:	494c      	ldr	r1, [pc, #304]	; (8001abc <ESP_messageHandler+0x7d8>)
 800198a:	4854      	ldr	r0, [pc, #336]	; (8001adc <ESP_messageHandler+0x7f8>)
 800198c:	f001 f88e 	bl	8002aac <UART_send>
		vTemp[0] = textrc[28]; 	// Vent. Salón
 8001990:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <ESP_messageHandler+0x7e0>)
 8001992:	7f1a      	ldrb	r2, [r3, #28]
 8001994:	4b52      	ldr	r3, [pc, #328]	; (8001ae0 <ESP_messageHandler+0x7fc>)
 8001996:	701a      	strb	r2, [r3, #0]
		vTemp[1] = textrc[31]; 	// Vent. Dormitorio
 8001998:	4b4a      	ldr	r3, [pc, #296]	; (8001ac4 <ESP_messageHandler+0x7e0>)
 800199a:	7fda      	ldrb	r2, [r3, #31]
 800199c:	4b50      	ldr	r3, [pc, #320]	; (8001ae0 <ESP_messageHandler+0x7fc>)
 800199e:	705a      	strb	r2, [r3, #1]
		vTemp[2] = textrc[34]; 	// Vent. Oficina
 80019a0:	4b48      	ldr	r3, [pc, #288]	; (8001ac4 <ESP_messageHandler+0x7e0>)
 80019a2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80019a6:	4b4e      	ldr	r3, [pc, #312]	; (8001ae0 <ESP_messageHandler+0x7fc>)
 80019a8:	709a      	strb	r2, [r3, #2]
		vTemp[4] = textrc[37]; 	// Calefacción
 80019aa:	4b46      	ldr	r3, [pc, #280]	; (8001ac4 <ESP_messageHandler+0x7e0>)
 80019ac:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80019b0:	4b4b      	ldr	r3, [pc, #300]	; (8001ae0 <ESP_messageHandler+0x7fc>)
 80019b2:	711a      	strb	r2, [r3, #4]

		if(vTemp[4] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET); // Calefacción
 80019b4:	4b4a      	ldr	r3, [pc, #296]	; (8001ae0 <ESP_messageHandler+0x7fc>)
 80019b6:	791b      	ldrb	r3, [r3, #4]
 80019b8:	2b30      	cmp	r3, #48	; 0x30
 80019ba:	d106      	bne.n	80019ca <ESP_messageHandler+0x6e6>
 80019bc:	2200      	movs	r2, #0
 80019be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019c2:	4848      	ldr	r0, [pc, #288]	; (8001ae4 <ESP_messageHandler+0x800>)
 80019c4:	f004 f89e 	bl	8005b04 <HAL_GPIO_WritePin>
 80019c8:	e009      	b.n	80019de <ESP_messageHandler+0x6fa>
		else if(vTemp[4] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 80019ca:	4b45      	ldr	r3, [pc, #276]	; (8001ae0 <ESP_messageHandler+0x7fc>)
 80019cc:	791b      	ldrb	r3, [r3, #4]
 80019ce:	2b31      	cmp	r3, #49	; 0x31
 80019d0:	d105      	bne.n	80019de <ESP_messageHandler+0x6fa>
 80019d2:	2201      	movs	r2, #1
 80019d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d8:	4842      	ldr	r0, [pc, #264]	; (8001ae4 <ESP_messageHandler+0x800>)
 80019da:	f004 f893 	bl	8005b04 <HAL_GPIO_WritePin>
    }

	// EXTERIOR
	if (fragment[0] == 'e'){
 80019de:	4b36      	ldr	r3, [pc, #216]	; (8001ab8 <ESP_messageHandler+0x7d4>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b65      	cmp	r3, #101	; 0x65
 80019e4:	f040 808f 	bne.w	8001b06 <ESP_messageHandler+0x822>
		UART_send("LUCES (EXTERIOR)\n", PC_UART);
 80019e8:	4934      	ldr	r1, [pc, #208]	; (8001abc <ESP_messageHandler+0x7d8>)
 80019ea:	483f      	ldr	r0, [pc, #252]	; (8001ae8 <ESP_messageHandler+0x804>)
 80019ec:	f001 f85e 	bl	8002aac <UART_send>
		//vExt[0] = textrc[28]; 	// Toldo Tendedero
		vExt[1] = textrc[31]; 	// Luz Tendedero
 80019f0:	4b34      	ldr	r3, [pc, #208]	; (8001ac4 <ESP_messageHandler+0x7e0>)
 80019f2:	7fda      	ldrb	r2, [r3, #31]
 80019f4:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <ESP_messageHandler+0x7cc>)
 80019f6:	705a      	strb	r2, [r3, #1]
		vExt[2] = textrc[34]; 	// Luz Porche
 80019f8:	4b32      	ldr	r3, [pc, #200]	; (8001ac4 <ESP_messageHandler+0x7e0>)
 80019fa:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80019fe:	4b2c      	ldr	r3, [pc, #176]	; (8001ab0 <ESP_messageHandler+0x7cc>)
 8001a00:	709a      	strb	r2, [r3, #2]
		vExt[3] = textrc[37]; 	// Luz Jardín
 8001a02:	4b30      	ldr	r3, [pc, #192]	; (8001ac4 <ESP_messageHandler+0x7e0>)
 8001a04:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001a08:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <ESP_messageHandler+0x7cc>)
 8001a0a:	70da      	strb	r2, [r3, #3]
		//vExt[4] = textrc[40]; 	// Puerta Parcela
		vExt[5] = textrc[43]; // Automático
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <ESP_messageHandler+0x7e0>)
 8001a0e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8001a12:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <ESP_messageHandler+0x7cc>)
 8001a14:	715a      	strb	r2, [r3, #5]

		if(vIlum[25] == '0' || vExt[1] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET); // Luz Tendedero
 8001a16:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <ESP_messageHandler+0x7c0>)
 8001a18:	7e5b      	ldrb	r3, [r3, #25]
 8001a1a:	2b30      	cmp	r3, #48	; 0x30
 8001a1c:	d003      	beq.n	8001a26 <ESP_messageHandler+0x742>
 8001a1e:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <ESP_messageHandler+0x7cc>)
 8001a20:	785b      	ldrb	r3, [r3, #1]
 8001a22:	2b30      	cmp	r3, #48	; 0x30
 8001a24:	d106      	bne.n	8001a34 <ESP_messageHandler+0x750>
 8001a26:	2200      	movs	r2, #0
 8001a28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a2c:	481f      	ldr	r0, [pc, #124]	; (8001aac <ESP_messageHandler+0x7c8>)
 8001a2e:	f004 f869 	bl	8005b04 <HAL_GPIO_WritePin>
 8001a32:	e00d      	b.n	8001a50 <ESP_messageHandler+0x76c>
		else if(vIlum[25] == '1' || vExt[1] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <ESP_messageHandler+0x7c0>)
 8001a36:	7e5b      	ldrb	r3, [r3, #25]
 8001a38:	2b31      	cmp	r3, #49	; 0x31
 8001a3a:	d003      	beq.n	8001a44 <ESP_messageHandler+0x760>
 8001a3c:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <ESP_messageHandler+0x7cc>)
 8001a3e:	785b      	ldrb	r3, [r3, #1]
 8001a40:	2b31      	cmp	r3, #49	; 0x31
 8001a42:	d105      	bne.n	8001a50 <ESP_messageHandler+0x76c>
 8001a44:	2201      	movs	r2, #1
 8001a46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a4a:	4818      	ldr	r0, [pc, #96]	; (8001aac <ESP_messageHandler+0x7c8>)
 8001a4c:	f004 f85a 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[24] == '0' || vExt[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET); // Luz Porche
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <ESP_messageHandler+0x7c0>)
 8001a52:	7e1b      	ldrb	r3, [r3, #24]
 8001a54:	2b30      	cmp	r3, #48	; 0x30
 8001a56:	d003      	beq.n	8001a60 <ESP_messageHandler+0x77c>
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <ESP_messageHandler+0x7cc>)
 8001a5a:	789b      	ldrb	r3, [r3, #2]
 8001a5c:	2b30      	cmp	r3, #48	; 0x30
 8001a5e:	d105      	bne.n	8001a6c <ESP_messageHandler+0x788>
 8001a60:	2200      	movs	r2, #0
 8001a62:	2110      	movs	r1, #16
 8001a64:	4813      	ldr	r0, [pc, #76]	; (8001ab4 <ESP_messageHandler+0x7d0>)
 8001a66:	f004 f84d 	bl	8005b04 <HAL_GPIO_WritePin>
 8001a6a:	e00c      	b.n	8001a86 <ESP_messageHandler+0x7a2>
		else if(vIlum[24] == '1' || vExt[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <ESP_messageHandler+0x7c0>)
 8001a6e:	7e1b      	ldrb	r3, [r3, #24]
 8001a70:	2b31      	cmp	r3, #49	; 0x31
 8001a72:	d003      	beq.n	8001a7c <ESP_messageHandler+0x798>
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <ESP_messageHandler+0x7cc>)
 8001a76:	789b      	ldrb	r3, [r3, #2]
 8001a78:	2b31      	cmp	r3, #49	; 0x31
 8001a7a:	d104      	bne.n	8001a86 <ESP_messageHandler+0x7a2>
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	2110      	movs	r1, #16
 8001a80:	480c      	ldr	r0, [pc, #48]	; (8001ab4 <ESP_messageHandler+0x7d0>)
 8001a82:	f004 f83f 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[23] == '0' || vExt[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET); // Luz Jardín
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <ESP_messageHandler+0x7c0>)
 8001a88:	7ddb      	ldrb	r3, [r3, #23]
 8001a8a:	2b30      	cmp	r3, #48	; 0x30
 8001a8c:	d003      	beq.n	8001a96 <ESP_messageHandler+0x7b2>
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <ESP_messageHandler+0x7cc>)
 8001a90:	78db      	ldrb	r3, [r3, #3]
 8001a92:	2b30      	cmp	r3, #48	; 0x30
 8001a94:	d12a      	bne.n	8001aec <ESP_messageHandler+0x808>
 8001a96:	2200      	movs	r2, #0
 8001a98:	2104      	movs	r1, #4
 8001a9a:	4806      	ldr	r0, [pc, #24]	; (8001ab4 <ESP_messageHandler+0x7d0>)
 8001a9c:	f004 f832 	bl	8005b04 <HAL_GPIO_WritePin>
 8001aa0:	e031      	b.n	8001b06 <ESP_messageHandler+0x822>
 8001aa2:	bf00      	nop
 8001aa4:	20000998 	.word	0x20000998
 8001aa8:	2000096c 	.word	0x2000096c
 8001aac:	40020800 	.word	0x40020800
 8001ab0:	20000928 	.word	0x20000928
 8001ab4:	40020c00 	.word	0x40020c00
 8001ab8:	200009b4 	.word	0x200009b4
 8001abc:	20000d7c 	.word	0x20000d7c
 8001ac0:	080091e8 	.word	0x080091e8
 8001ac4:	200009d0 	.word	0x200009d0
 8001ac8:	2000091c 	.word	0x2000091c
 8001acc:	08009210 	.word	0x08009210
 8001ad0:	08009234 	.word	0x08009234
 8001ad4:	0800925c 	.word	0x0800925c
 8001ad8:	08009288 	.word	0x08009288
 8001adc:	080092b0 	.word	0x080092b0
 8001ae0:	20000970 	.word	0x20000970
 8001ae4:	40020400 	.word	0x40020400
 8001ae8:	080092b8 	.word	0x080092b8
		else if(vIlum[23] == '1' || vExt[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8001aec:	4b9c      	ldr	r3, [pc, #624]	; (8001d60 <ESP_messageHandler+0xa7c>)
 8001aee:	7ddb      	ldrb	r3, [r3, #23]
 8001af0:	2b31      	cmp	r3, #49	; 0x31
 8001af2:	d003      	beq.n	8001afc <ESP_messageHandler+0x818>
 8001af4:	4b9b      	ldr	r3, [pc, #620]	; (8001d64 <ESP_messageHandler+0xa80>)
 8001af6:	78db      	ldrb	r3, [r3, #3]
 8001af8:	2b31      	cmp	r3, #49	; 0x31
 8001afa:	d104      	bne.n	8001b06 <ESP_messageHandler+0x822>
 8001afc:	2201      	movs	r2, #1
 8001afe:	2104      	movs	r1, #4
 8001b00:	4899      	ldr	r0, [pc, #612]	; (8001d68 <ESP_messageHandler+0xa84>)
 8001b02:	f003 ffff 	bl	8005b04 <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'P'){
 8001b06:	4b99      	ldr	r3, [pc, #612]	; (8001d6c <ESP_messageHandler+0xa88>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b50      	cmp	r3, #80	; 0x50
 8001b0c:	d108      	bne.n	8001b20 <ESP_messageHandler+0x83c>
		UART_send("PARCELA (EXTERIOR)\n", PC_UART);
 8001b0e:	4998      	ldr	r1, [pc, #608]	; (8001d70 <ESP_messageHandler+0xa8c>)
 8001b10:	4898      	ldr	r0, [pc, #608]	; (8001d74 <ESP_messageHandler+0xa90>)
 8001b12:	f000 ffcb 	bl	8002aac <UART_send>
		//vExt[0] = textrc[28]; 	// Toldo Tendedero
		//vExt[1] = textrc[31]; 	// Luz Tendedero
		//vExt[2] = textrc[34]; 	// Luz Porche
		//vExt[3] = textrc[37]; 	// Luz Jardín
		vExt[4] = textrc[40]; 	// Puerta Parcela
 8001b16:	4b98      	ldr	r3, [pc, #608]	; (8001d78 <ESP_messageHandler+0xa94>)
 8001b18:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001b1c:	4b91      	ldr	r3, [pc, #580]	; (8001d64 <ESP_messageHandler+0xa80>)
 8001b1e:	711a      	strb	r2, [r3, #4]
	}

	if (fragment[0] == 'R'){
 8001b20:	4b92      	ldr	r3, [pc, #584]	; (8001d6c <ESP_messageHandler+0xa88>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b52      	cmp	r3, #82	; 0x52
 8001b26:	d107      	bne.n	8001b38 <ESP_messageHandler+0x854>
		UART_send("TENDEDERO (EXTERIOR)\n", PC_UART);
 8001b28:	4991      	ldr	r1, [pc, #580]	; (8001d70 <ESP_messageHandler+0xa8c>)
 8001b2a:	4894      	ldr	r0, [pc, #592]	; (8001d7c <ESP_messageHandler+0xa98>)
 8001b2c:	f000 ffbe 	bl	8002aac <UART_send>
		vExt[0] = textrc[28]; 	// Toldo Tendedero
 8001b30:	4b91      	ldr	r3, [pc, #580]	; (8001d78 <ESP_messageHandler+0xa94>)
 8001b32:	7f1a      	ldrb	r2, [r3, #28]
 8001b34:	4b8b      	ldr	r3, [pc, #556]	; (8001d64 <ESP_messageHandler+0xa80>)
 8001b36:	701a      	strb	r2, [r3, #0]
		//vExt[3] = textrc[37]; 	// Luz Jardín
		//vExt[4] = textrc[40]; 	// Puerta Parcela
	}

	// SALÓN
	if (fragment[0] == 'n'){
 8001b38:	4b8c      	ldr	r3, [pc, #560]	; (8001d6c <ESP_messageHandler+0xa88>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b6e      	cmp	r3, #110	; 0x6e
 8001b3e:	f040 809a 	bne.w	8001c76 <ESP_messageHandler+0x992>
		UART_send("SALON \n", PC_UART);
 8001b42:	498b      	ldr	r1, [pc, #556]	; (8001d70 <ESP_messageHandler+0xa8c>)
 8001b44:	488e      	ldr	r0, [pc, #568]	; (8001d80 <ESP_messageHandler+0xa9c>)
 8001b46:	f000 ffb1 	bl	8002aac <UART_send>
		vSal[0] = textrc[28]; 	// Televisión
 8001b4a:	4b8b      	ldr	r3, [pc, #556]	; (8001d78 <ESP_messageHandler+0xa94>)
 8001b4c:	7f1a      	ldrb	r2, [r3, #28]
 8001b4e:	4b8d      	ldr	r3, [pc, #564]	; (8001d84 <ESP_messageHandler+0xaa0>)
 8001b50:	701a      	strb	r2, [r3, #0]
		vSal[1] = textrc[31]; 	// Luz Sala
 8001b52:	4b89      	ldr	r3, [pc, #548]	; (8001d78 <ESP_messageHandler+0xa94>)
 8001b54:	7fda      	ldrb	r2, [r3, #31]
 8001b56:	4b8b      	ldr	r3, [pc, #556]	; (8001d84 <ESP_messageHandler+0xaa0>)
 8001b58:	705a      	strb	r2, [r3, #1]
		vSal[2] = textrc[34]; 	// Luz Comedor
 8001b5a:	4b87      	ldr	r3, [pc, #540]	; (8001d78 <ESP_messageHandler+0xa94>)
 8001b5c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001b60:	4b88      	ldr	r3, [pc, #544]	; (8001d84 <ESP_messageHandler+0xaa0>)
 8001b62:	709a      	strb	r2, [r3, #2]
		vSal[3] = textrc[37]; 	// Luz Ambiente
 8001b64:	4b84      	ldr	r3, [pc, #528]	; (8001d78 <ESP_messageHandler+0xa94>)
 8001b66:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001b6a:	4b86      	ldr	r3, [pc, #536]	; (8001d84 <ESP_messageHandler+0xaa0>)
 8001b6c:	70da      	strb	r2, [r3, #3]
		vSal[4] = textrc[40]; 	// Luz Recibidor
 8001b6e:	4b82      	ldr	r3, [pc, #520]	; (8001d78 <ESP_messageHandler+0xa94>)
 8001b70:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001b74:	4b83      	ldr	r3, [pc, #524]	; (8001d84 <ESP_messageHandler+0xaa0>)
 8001b76:	711a      	strb	r2, [r3, #4]
		//vSal[5] = textrc[43]; 	// V. Salón

		if(vSal[0] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET); // Televisión
 8001b78:	4b82      	ldr	r3, [pc, #520]	; (8001d84 <ESP_messageHandler+0xaa0>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b30      	cmp	r3, #48	; 0x30
 8001b7e:	d105      	bne.n	8001b8c <ESP_messageHandler+0x8a8>
 8001b80:	2200      	movs	r2, #0
 8001b82:	2180      	movs	r1, #128	; 0x80
 8001b84:	4880      	ldr	r0, [pc, #512]	; (8001d88 <ESP_messageHandler+0xaa4>)
 8001b86:	f003 ffbd 	bl	8005b04 <HAL_GPIO_WritePin>
 8001b8a:	e008      	b.n	8001b9e <ESP_messageHandler+0x8ba>
		else if(vSal[0] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 8001b8c:	4b7d      	ldr	r3, [pc, #500]	; (8001d84 <ESP_messageHandler+0xaa0>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b31      	cmp	r3, #49	; 0x31
 8001b92:	d104      	bne.n	8001b9e <ESP_messageHandler+0x8ba>
 8001b94:	2201      	movs	r2, #1
 8001b96:	2180      	movs	r1, #128	; 0x80
 8001b98:	487b      	ldr	r0, [pc, #492]	; (8001d88 <ESP_messageHandler+0xaa4>)
 8001b9a:	f003 ffb3 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[0] == '0' || vSal[1] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, RESET); // Luz Sala
 8001b9e:	4b70      	ldr	r3, [pc, #448]	; (8001d60 <ESP_messageHandler+0xa7c>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b30      	cmp	r3, #48	; 0x30
 8001ba4:	d003      	beq.n	8001bae <ESP_messageHandler+0x8ca>
 8001ba6:	4b77      	ldr	r3, [pc, #476]	; (8001d84 <ESP_messageHandler+0xaa0>)
 8001ba8:	785b      	ldrb	r3, [r3, #1]
 8001baa:	2b30      	cmp	r3, #48	; 0x30
 8001bac:	d105      	bne.n	8001bba <ESP_messageHandler+0x8d6>
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2108      	movs	r1, #8
 8001bb2:	486d      	ldr	r0, [pc, #436]	; (8001d68 <ESP_messageHandler+0xa84>)
 8001bb4:	f003 ffa6 	bl	8005b04 <HAL_GPIO_WritePin>
 8001bb8:	e00c      	b.n	8001bd4 <ESP_messageHandler+0x8f0>
		else if(vIlum[0] == '1' || vSal[1] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, SET);
 8001bba:	4b69      	ldr	r3, [pc, #420]	; (8001d60 <ESP_messageHandler+0xa7c>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b31      	cmp	r3, #49	; 0x31
 8001bc0:	d003      	beq.n	8001bca <ESP_messageHandler+0x8e6>
 8001bc2:	4b70      	ldr	r3, [pc, #448]	; (8001d84 <ESP_messageHandler+0xaa0>)
 8001bc4:	785b      	ldrb	r3, [r3, #1]
 8001bc6:	2b31      	cmp	r3, #49	; 0x31
 8001bc8:	d104      	bne.n	8001bd4 <ESP_messageHandler+0x8f0>
 8001bca:	2201      	movs	r2, #1
 8001bcc:	2108      	movs	r1, #8
 8001bce:	4866      	ldr	r0, [pc, #408]	; (8001d68 <ESP_messageHandler+0xa84>)
 8001bd0:	f003 ff98 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[1] == '0' || vSal[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET); // Luz Comedor
 8001bd4:	4b62      	ldr	r3, [pc, #392]	; (8001d60 <ESP_messageHandler+0xa7c>)
 8001bd6:	785b      	ldrb	r3, [r3, #1]
 8001bd8:	2b30      	cmp	r3, #48	; 0x30
 8001bda:	d003      	beq.n	8001be4 <ESP_messageHandler+0x900>
 8001bdc:	4b69      	ldr	r3, [pc, #420]	; (8001d84 <ESP_messageHandler+0xaa0>)
 8001bde:	789b      	ldrb	r3, [r3, #2]
 8001be0:	2b30      	cmp	r3, #48	; 0x30
 8001be2:	d105      	bne.n	8001bf0 <ESP_messageHandler+0x90c>
 8001be4:	2200      	movs	r2, #0
 8001be6:	2102      	movs	r1, #2
 8001be8:	485f      	ldr	r0, [pc, #380]	; (8001d68 <ESP_messageHandler+0xa84>)
 8001bea:	f003 ff8b 	bl	8005b04 <HAL_GPIO_WritePin>
 8001bee:	e00c      	b.n	8001c0a <ESP_messageHandler+0x926>
		else if(vIlum[1] == '1' || vSal[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, SET);
 8001bf0:	4b5b      	ldr	r3, [pc, #364]	; (8001d60 <ESP_messageHandler+0xa7c>)
 8001bf2:	785b      	ldrb	r3, [r3, #1]
 8001bf4:	2b31      	cmp	r3, #49	; 0x31
 8001bf6:	d003      	beq.n	8001c00 <ESP_messageHandler+0x91c>
 8001bf8:	4b62      	ldr	r3, [pc, #392]	; (8001d84 <ESP_messageHandler+0xaa0>)
 8001bfa:	789b      	ldrb	r3, [r3, #2]
 8001bfc:	2b31      	cmp	r3, #49	; 0x31
 8001bfe:	d104      	bne.n	8001c0a <ESP_messageHandler+0x926>
 8001c00:	2201      	movs	r2, #1
 8001c02:	2102      	movs	r1, #2
 8001c04:	4858      	ldr	r0, [pc, #352]	; (8001d68 <ESP_messageHandler+0xa84>)
 8001c06:	f003 ff7d 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[2] == '0' || vSal[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, RESET); // Luz Ambiente
 8001c0a:	4b55      	ldr	r3, [pc, #340]	; (8001d60 <ESP_messageHandler+0xa7c>)
 8001c0c:	789b      	ldrb	r3, [r3, #2]
 8001c0e:	2b30      	cmp	r3, #48	; 0x30
 8001c10:	d003      	beq.n	8001c1a <ESP_messageHandler+0x936>
 8001c12:	4b5c      	ldr	r3, [pc, #368]	; (8001d84 <ESP_messageHandler+0xaa0>)
 8001c14:	78db      	ldrb	r3, [r3, #3]
 8001c16:	2b30      	cmp	r3, #48	; 0x30
 8001c18:	d105      	bne.n	8001c26 <ESP_messageHandler+0x942>
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2120      	movs	r1, #32
 8001c1e:	4852      	ldr	r0, [pc, #328]	; (8001d68 <ESP_messageHandler+0xa84>)
 8001c20:	f003 ff70 	bl	8005b04 <HAL_GPIO_WritePin>
 8001c24:	e00c      	b.n	8001c40 <ESP_messageHandler+0x95c>
		else if(vIlum[2] == '1' || vSal[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, SET);
 8001c26:	4b4e      	ldr	r3, [pc, #312]	; (8001d60 <ESP_messageHandler+0xa7c>)
 8001c28:	789b      	ldrb	r3, [r3, #2]
 8001c2a:	2b31      	cmp	r3, #49	; 0x31
 8001c2c:	d003      	beq.n	8001c36 <ESP_messageHandler+0x952>
 8001c2e:	4b55      	ldr	r3, [pc, #340]	; (8001d84 <ESP_messageHandler+0xaa0>)
 8001c30:	78db      	ldrb	r3, [r3, #3]
 8001c32:	2b31      	cmp	r3, #49	; 0x31
 8001c34:	d104      	bne.n	8001c40 <ESP_messageHandler+0x95c>
 8001c36:	2201      	movs	r2, #1
 8001c38:	2120      	movs	r1, #32
 8001c3a:	484b      	ldr	r0, [pc, #300]	; (8001d68 <ESP_messageHandler+0xa84>)
 8001c3c:	f003 ff62 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[3] == '0' || vSal[4] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET); // Luz Recibidor
 8001c40:	4b47      	ldr	r3, [pc, #284]	; (8001d60 <ESP_messageHandler+0xa7c>)
 8001c42:	78db      	ldrb	r3, [r3, #3]
 8001c44:	2b30      	cmp	r3, #48	; 0x30
 8001c46:	d003      	beq.n	8001c50 <ESP_messageHandler+0x96c>
 8001c48:	4b4e      	ldr	r3, [pc, #312]	; (8001d84 <ESP_messageHandler+0xaa0>)
 8001c4a:	791b      	ldrb	r3, [r3, #4]
 8001c4c:	2b30      	cmp	r3, #48	; 0x30
 8001c4e:	d105      	bne.n	8001c5c <ESP_messageHandler+0x978>
 8001c50:	2200      	movs	r2, #0
 8001c52:	2101      	movs	r1, #1
 8001c54:	4844      	ldr	r0, [pc, #272]	; (8001d68 <ESP_messageHandler+0xa84>)
 8001c56:	f003 ff55 	bl	8005b04 <HAL_GPIO_WritePin>
 8001c5a:	e00c      	b.n	8001c76 <ESP_messageHandler+0x992>
		else if(vIlum[3] == '1' || vSal[4] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 8001c5c:	4b40      	ldr	r3, [pc, #256]	; (8001d60 <ESP_messageHandler+0xa7c>)
 8001c5e:	78db      	ldrb	r3, [r3, #3]
 8001c60:	2b31      	cmp	r3, #49	; 0x31
 8001c62:	d003      	beq.n	8001c6c <ESP_messageHandler+0x988>
 8001c64:	4b47      	ldr	r3, [pc, #284]	; (8001d84 <ESP_messageHandler+0xaa0>)
 8001c66:	791b      	ldrb	r3, [r3, #4]
 8001c68:	2b31      	cmp	r3, #49	; 0x31
 8001c6a:	d104      	bne.n	8001c76 <ESP_messageHandler+0x992>
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	2101      	movs	r1, #1
 8001c70:	483d      	ldr	r0, [pc, #244]	; (8001d68 <ESP_messageHandler+0xa84>)
 8001c72:	f003 ff47 	bl	8005b04 <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'N'){
 8001c76:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <ESP_messageHandler+0xa88>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b4e      	cmp	r3, #78	; 0x4e
 8001c7c:	d108      	bne.n	8001c90 <ESP_messageHandler+0x9ac>
			UART_send("V. SALON (SALON) \n", PC_UART);
 8001c7e:	493c      	ldr	r1, [pc, #240]	; (8001d70 <ESP_messageHandler+0xa8c>)
 8001c80:	4842      	ldr	r0, [pc, #264]	; (8001d8c <ESP_messageHandler+0xaa8>)
 8001c82:	f000 ff13 	bl	8002aac <UART_send>
			//vSal[0] = textrc[28]; 	// Televisión
			//vSal[1] = textrc[31]; 	// Luz Sala
			//vSal[2] = textrc[34]; 	// Luz Comedor
			//vSal[3] = textrc[37]; 	// Luz Ambiente
			//vSal[4] = textrc[40]; 	// Luz Recibidor
			vSal[5] = textrc[43]; 	// V. Salón
 8001c86:	4b3c      	ldr	r3, [pc, #240]	; (8001d78 <ESP_messageHandler+0xa94>)
 8001c88:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8001c8c:	4b3d      	ldr	r3, [pc, #244]	; (8001d84 <ESP_messageHandler+0xaa0>)
 8001c8e:	715a      	strb	r2, [r3, #5]
	}

	// COCINA
	if (fragment[0] == 'c'){
 8001c90:	4b36      	ldr	r3, [pc, #216]	; (8001d6c <ESP_messageHandler+0xa88>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b63      	cmp	r3, #99	; 0x63
 8001c96:	d145      	bne.n	8001d24 <ESP_messageHandler+0xa40>
		UART_send("COCINA \n", PC_UART);
 8001c98:	4935      	ldr	r1, [pc, #212]	; (8001d70 <ESP_messageHandler+0xa8c>)
 8001c9a:	483d      	ldr	r0, [pc, #244]	; (8001d90 <ESP_messageHandler+0xaac>)
 8001c9c:	f000 ff06 	bl	8002aac <UART_send>
		vCoc[0] = textrc[28]; 	// Luz Cocina
 8001ca0:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <ESP_messageHandler+0xa94>)
 8001ca2:	7f1a      	ldrb	r2, [r3, #28]
 8001ca4:	4b3b      	ldr	r3, [pc, #236]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001ca6:	701a      	strb	r2, [r3, #0]
		vCoc[1] = textrc[31]; 	// Luz Fregadero
 8001ca8:	4b33      	ldr	r3, [pc, #204]	; (8001d78 <ESP_messageHandler+0xa94>)
 8001caa:	7fda      	ldrb	r2, [r3, #31]
 8001cac:	4b39      	ldr	r3, [pc, #228]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001cae:	705a      	strb	r2, [r3, #1]

		if(vIlum[4] == '0' || vCoc[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET); // Luz Cocina
 8001cb0:	4b2b      	ldr	r3, [pc, #172]	; (8001d60 <ESP_messageHandler+0xa7c>)
 8001cb2:	791b      	ldrb	r3, [r3, #4]
 8001cb4:	2b30      	cmp	r3, #48	; 0x30
 8001cb6:	d003      	beq.n	8001cc0 <ESP_messageHandler+0x9dc>
 8001cb8:	4b36      	ldr	r3, [pc, #216]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b30      	cmp	r3, #48	; 0x30
 8001cbe:	d106      	bne.n	8001cce <ESP_messageHandler+0x9ea>
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cc6:	4834      	ldr	r0, [pc, #208]	; (8001d98 <ESP_messageHandler+0xab4>)
 8001cc8:	f003 ff1c 	bl	8005b04 <HAL_GPIO_WritePin>
 8001ccc:	e00d      	b.n	8001cea <ESP_messageHandler+0xa06>
		else if(vIlum[4] == '1' || vCoc[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 8001cce:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <ESP_messageHandler+0xa7c>)
 8001cd0:	791b      	ldrb	r3, [r3, #4]
 8001cd2:	2b31      	cmp	r3, #49	; 0x31
 8001cd4:	d003      	beq.n	8001cde <ESP_messageHandler+0x9fa>
 8001cd6:	4b2f      	ldr	r3, [pc, #188]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b31      	cmp	r3, #49	; 0x31
 8001cdc:	d105      	bne.n	8001cea <ESP_messageHandler+0xa06>
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ce4:	482c      	ldr	r0, [pc, #176]	; (8001d98 <ESP_messageHandler+0xab4>)
 8001ce6:	f003 ff0d 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[5] == '0' || vCoc[1] == '0') HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET); // Luz Fregadero
 8001cea:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <ESP_messageHandler+0xa7c>)
 8001cec:	795b      	ldrb	r3, [r3, #5]
 8001cee:	2b30      	cmp	r3, #48	; 0x30
 8001cf0:	d003      	beq.n	8001cfa <ESP_messageHandler+0xa16>
 8001cf2:	4b28      	ldr	r3, [pc, #160]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001cf4:	785b      	ldrb	r3, [r3, #1]
 8001cf6:	2b30      	cmp	r3, #48	; 0x30
 8001cf8:	d106      	bne.n	8001d08 <ESP_messageHandler+0xa24>
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d00:	4826      	ldr	r0, [pc, #152]	; (8001d9c <ESP_messageHandler+0xab8>)
 8001d02:	f003 feff 	bl	8005b04 <HAL_GPIO_WritePin>
 8001d06:	e00d      	b.n	8001d24 <ESP_messageHandler+0xa40>
		else if(vIlum[5] == '1' || vCoc[1] == '1')HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 8001d08:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <ESP_messageHandler+0xa7c>)
 8001d0a:	795b      	ldrb	r3, [r3, #5]
 8001d0c:	2b31      	cmp	r3, #49	; 0x31
 8001d0e:	d003      	beq.n	8001d18 <ESP_messageHandler+0xa34>
 8001d10:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001d12:	785b      	ldrb	r3, [r3, #1]
 8001d14:	2b31      	cmp	r3, #49	; 0x31
 8001d16:	d105      	bne.n	8001d24 <ESP_messageHandler+0xa40>
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d1e:	481f      	ldr	r0, [pc, #124]	; (8001d9c <ESP_messageHandler+0xab8>)
 8001d20:	f003 fef0 	bl	8005b04 <HAL_GPIO_WritePin>
	}

	// BAÑO
	if (fragment[0] == 'b'){
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <ESP_messageHandler+0xa88>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b62      	cmp	r3, #98	; 0x62
 8001d2a:	d165      	bne.n	8001df8 <ESP_messageHandler+0xb14>
		UART_send("BAÑO \n", PC_UART);
 8001d2c:	4910      	ldr	r1, [pc, #64]	; (8001d70 <ESP_messageHandler+0xa8c>)
 8001d2e:	481c      	ldr	r0, [pc, #112]	; (8001da0 <ESP_messageHandler+0xabc>)
 8001d30:	f000 febc 	bl	8002aac <UART_send>
		vBan[0] = textrc[28]; 	// Luz Baño
 8001d34:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <ESP_messageHandler+0xa94>)
 8001d36:	7f1a      	ldrb	r2, [r3, #28]
 8001d38:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <ESP_messageHandler+0xac0>)
 8001d3a:	701a      	strb	r2, [r3, #0]
		vBan[1] = textrc[31]; 	// Luz Espejo
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <ESP_messageHandler+0xa94>)
 8001d3e:	7fda      	ldrb	r2, [r3, #31]
 8001d40:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <ESP_messageHandler+0xac0>)
 8001d42:	705a      	strb	r2, [r3, #1]

		if(vIlum[6] == '0' || vBan[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, RESET); // Luz Baño
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <ESP_messageHandler+0xa7c>)
 8001d46:	799b      	ldrb	r3, [r3, #6]
 8001d48:	2b30      	cmp	r3, #48	; 0x30
 8001d4a:	d003      	beq.n	8001d54 <ESP_messageHandler+0xa70>
 8001d4c:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <ESP_messageHandler+0xac0>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b30      	cmp	r3, #48	; 0x30
 8001d52:	d129      	bne.n	8001da8 <ESP_messageHandler+0xac4>
 8001d54:	2200      	movs	r2, #0
 8001d56:	2140      	movs	r1, #64	; 0x40
 8001d58:	4803      	ldr	r0, [pc, #12]	; (8001d68 <ESP_messageHandler+0xa84>)
 8001d5a:	f003 fed3 	bl	8005b04 <HAL_GPIO_WritePin>
 8001d5e:	e030      	b.n	8001dc2 <ESP_messageHandler+0xade>
 8001d60:	20000998 	.word	0x20000998
 8001d64:	20000928 	.word	0x20000928
 8001d68:	40020c00 	.word	0x40020c00
 8001d6c:	200009b4 	.word	0x200009b4
 8001d70:	20000d7c 	.word	0x20000d7c
 8001d74:	080092cc 	.word	0x080092cc
 8001d78:	200009d0 	.word	0x200009d0
 8001d7c:	080092e0 	.word	0x080092e0
 8001d80:	080092f8 	.word	0x080092f8
 8001d84:	20000a40 	.word	0x20000a40
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	08009300 	.word	0x08009300
 8001d90:	08009314 	.word	0x08009314
 8001d94:	2000090c 	.word	0x2000090c
 8001d98:	40020800 	.word	0x40020800
 8001d9c:	40020000 	.word	0x40020000
 8001da0:	08009320 	.word	0x08009320
 8001da4:	20000980 	.word	0x20000980
		else if(vIlum[6] == '1' || vBan[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, SET);
 8001da8:	4b84      	ldr	r3, [pc, #528]	; (8001fbc <ESP_messageHandler+0xcd8>)
 8001daa:	799b      	ldrb	r3, [r3, #6]
 8001dac:	2b31      	cmp	r3, #49	; 0x31
 8001dae:	d003      	beq.n	8001db8 <ESP_messageHandler+0xad4>
 8001db0:	4b83      	ldr	r3, [pc, #524]	; (8001fc0 <ESP_messageHandler+0xcdc>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b31      	cmp	r3, #49	; 0x31
 8001db6:	d104      	bne.n	8001dc2 <ESP_messageHandler+0xade>
 8001db8:	2201      	movs	r2, #1
 8001dba:	2140      	movs	r1, #64	; 0x40
 8001dbc:	4881      	ldr	r0, [pc, #516]	; (8001fc4 <ESP_messageHandler+0xce0>)
 8001dbe:	f003 fea1 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[7] == '0' || vBan[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET); // Luz Espejo
 8001dc2:	4b7e      	ldr	r3, [pc, #504]	; (8001fbc <ESP_messageHandler+0xcd8>)
 8001dc4:	79db      	ldrb	r3, [r3, #7]
 8001dc6:	2b30      	cmp	r3, #48	; 0x30
 8001dc8:	d003      	beq.n	8001dd2 <ESP_messageHandler+0xaee>
 8001dca:	4b7d      	ldr	r3, [pc, #500]	; (8001fc0 <ESP_messageHandler+0xcdc>)
 8001dcc:	785b      	ldrb	r3, [r3, #1]
 8001dce:	2b30      	cmp	r3, #48	; 0x30
 8001dd0:	d105      	bne.n	8001dde <ESP_messageHandler+0xafa>
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2108      	movs	r1, #8
 8001dd6:	487c      	ldr	r0, [pc, #496]	; (8001fc8 <ESP_messageHandler+0xce4>)
 8001dd8:	f003 fe94 	bl	8005b04 <HAL_GPIO_WritePin>
 8001ddc:	e00c      	b.n	8001df8 <ESP_messageHandler+0xb14>
		else if(vIlum[7] == '1' || vBan[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8001dde:	4b77      	ldr	r3, [pc, #476]	; (8001fbc <ESP_messageHandler+0xcd8>)
 8001de0:	79db      	ldrb	r3, [r3, #7]
 8001de2:	2b31      	cmp	r3, #49	; 0x31
 8001de4:	d003      	beq.n	8001dee <ESP_messageHandler+0xb0a>
 8001de6:	4b76      	ldr	r3, [pc, #472]	; (8001fc0 <ESP_messageHandler+0xcdc>)
 8001de8:	785b      	ldrb	r3, [r3, #1]
 8001dea:	2b31      	cmp	r3, #49	; 0x31
 8001dec:	d104      	bne.n	8001df8 <ESP_messageHandler+0xb14>
 8001dee:	2201      	movs	r2, #1
 8001df0:	2108      	movs	r1, #8
 8001df2:	4875      	ldr	r0, [pc, #468]	; (8001fc8 <ESP_messageHandler+0xce4>)
 8001df4:	f003 fe86 	bl	8005b04 <HAL_GPIO_WritePin>
	}

	// DORMITORIO
	if (fragment[0] == 'r'){
 8001df8:	4b74      	ldr	r3, [pc, #464]	; (8001fcc <ESP_messageHandler+0xce8>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b72      	cmp	r3, #114	; 0x72
 8001dfe:	d161      	bne.n	8001ec4 <ESP_messageHandler+0xbe0>
		UART_send("LUCES (DORMITORIO) \n", PC_UART);
 8001e00:	4973      	ldr	r1, [pc, #460]	; (8001fd0 <ESP_messageHandler+0xcec>)
 8001e02:	4874      	ldr	r0, [pc, #464]	; (8001fd4 <ESP_messageHandler+0xcf0>)
 8001e04:	f000 fe52 	bl	8002aac <UART_send>
		vDor[0] = textrc[28]; 	// Luz Dormitorio
 8001e08:	4b73      	ldr	r3, [pc, #460]	; (8001fd8 <ESP_messageHandler+0xcf4>)
 8001e0a:	7f1a      	ldrb	r2, [r3, #28]
 8001e0c:	4b73      	ldr	r3, [pc, #460]	; (8001fdc <ESP_messageHandler+0xcf8>)
 8001e0e:	701a      	strb	r2, [r3, #0]
		vDor[1] = textrc[31]; 	// Luz Mesita Izq
 8001e10:	4b71      	ldr	r3, [pc, #452]	; (8001fd8 <ESP_messageHandler+0xcf4>)
 8001e12:	7fda      	ldrb	r2, [r3, #31]
 8001e14:	4b71      	ldr	r3, [pc, #452]	; (8001fdc <ESP_messageHandler+0xcf8>)
 8001e16:	705a      	strb	r2, [r3, #1]
		vDor[2] = textrc[34]; 	// Luz Mesita Dch
 8001e18:	4b6f      	ldr	r3, [pc, #444]	; (8001fd8 <ESP_messageHandler+0xcf4>)
 8001e1a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001e1e:	4b6f      	ldr	r3, [pc, #444]	; (8001fdc <ESP_messageHandler+0xcf8>)
 8001e20:	709a      	strb	r2, [r3, #2]
		//vDor[3] = textrc[37]; 	// V. Dormitorio

		if(vIlum[8] == '0' || vDor[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, RESET); // Luz Dormitorio
 8001e22:	4b66      	ldr	r3, [pc, #408]	; (8001fbc <ESP_messageHandler+0xcd8>)
 8001e24:	7a1b      	ldrb	r3, [r3, #8]
 8001e26:	2b30      	cmp	r3, #48	; 0x30
 8001e28:	d003      	beq.n	8001e32 <ESP_messageHandler+0xb4e>
 8001e2a:	4b6c      	ldr	r3, [pc, #432]	; (8001fdc <ESP_messageHandler+0xcf8>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b30      	cmp	r3, #48	; 0x30
 8001e30:	d105      	bne.n	8001e3e <ESP_messageHandler+0xb5a>
 8001e32:	2200      	movs	r2, #0
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	4863      	ldr	r0, [pc, #396]	; (8001fc4 <ESP_messageHandler+0xce0>)
 8001e38:	f003 fe64 	bl	8005b04 <HAL_GPIO_WritePin>
 8001e3c:	e00c      	b.n	8001e58 <ESP_messageHandler+0xb74>
		else if(vIlum[8] == '1' || vDor[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET);
 8001e3e:	4b5f      	ldr	r3, [pc, #380]	; (8001fbc <ESP_messageHandler+0xcd8>)
 8001e40:	7a1b      	ldrb	r3, [r3, #8]
 8001e42:	2b31      	cmp	r3, #49	; 0x31
 8001e44:	d003      	beq.n	8001e4e <ESP_messageHandler+0xb6a>
 8001e46:	4b65      	ldr	r3, [pc, #404]	; (8001fdc <ESP_messageHandler+0xcf8>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b31      	cmp	r3, #49	; 0x31
 8001e4c:	d104      	bne.n	8001e58 <ESP_messageHandler+0xb74>
 8001e4e:	2201      	movs	r2, #1
 8001e50:	2180      	movs	r1, #128	; 0x80
 8001e52:	485c      	ldr	r0, [pc, #368]	; (8001fc4 <ESP_messageHandler+0xce0>)
 8001e54:	f003 fe56 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[9] == '0' || vDor[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET); // Luz Mesita Izq
 8001e58:	4b58      	ldr	r3, [pc, #352]	; (8001fbc <ESP_messageHandler+0xcd8>)
 8001e5a:	7a5b      	ldrb	r3, [r3, #9]
 8001e5c:	2b30      	cmp	r3, #48	; 0x30
 8001e5e:	d003      	beq.n	8001e68 <ESP_messageHandler+0xb84>
 8001e60:	4b5e      	ldr	r3, [pc, #376]	; (8001fdc <ESP_messageHandler+0xcf8>)
 8001e62:	785b      	ldrb	r3, [r3, #1]
 8001e64:	2b30      	cmp	r3, #48	; 0x30
 8001e66:	d105      	bne.n	8001e74 <ESP_messageHandler+0xb90>
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2110      	movs	r1, #16
 8001e6c:	4856      	ldr	r0, [pc, #344]	; (8001fc8 <ESP_messageHandler+0xce4>)
 8001e6e:	f003 fe49 	bl	8005b04 <HAL_GPIO_WritePin>
 8001e72:	e00c      	b.n	8001e8e <ESP_messageHandler+0xbaa>
		else if(vIlum[9] == '1' || vDor[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001e74:	4b51      	ldr	r3, [pc, #324]	; (8001fbc <ESP_messageHandler+0xcd8>)
 8001e76:	7a5b      	ldrb	r3, [r3, #9]
 8001e78:	2b31      	cmp	r3, #49	; 0x31
 8001e7a:	d003      	beq.n	8001e84 <ESP_messageHandler+0xba0>
 8001e7c:	4b57      	ldr	r3, [pc, #348]	; (8001fdc <ESP_messageHandler+0xcf8>)
 8001e7e:	785b      	ldrb	r3, [r3, #1]
 8001e80:	2b31      	cmp	r3, #49	; 0x31
 8001e82:	d104      	bne.n	8001e8e <ESP_messageHandler+0xbaa>
 8001e84:	2201      	movs	r2, #1
 8001e86:	2110      	movs	r1, #16
 8001e88:	484f      	ldr	r0, [pc, #316]	; (8001fc8 <ESP_messageHandler+0xce4>)
 8001e8a:	f003 fe3b 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[10] == '0' || vDor[2] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET); // Luz Mesita Dch
 8001e8e:	4b4b      	ldr	r3, [pc, #300]	; (8001fbc <ESP_messageHandler+0xcd8>)
 8001e90:	7a9b      	ldrb	r3, [r3, #10]
 8001e92:	2b30      	cmp	r3, #48	; 0x30
 8001e94:	d003      	beq.n	8001e9e <ESP_messageHandler+0xbba>
 8001e96:	4b51      	ldr	r3, [pc, #324]	; (8001fdc <ESP_messageHandler+0xcf8>)
 8001e98:	789b      	ldrb	r3, [r3, #2]
 8001e9a:	2b30      	cmp	r3, #48	; 0x30
 8001e9c:	d105      	bne.n	8001eaa <ESP_messageHandler+0xbc6>
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2140      	movs	r1, #64	; 0x40
 8001ea2:	4849      	ldr	r0, [pc, #292]	; (8001fc8 <ESP_messageHandler+0xce4>)
 8001ea4:	f003 fe2e 	bl	8005b04 <HAL_GPIO_WritePin>
 8001ea8:	e00c      	b.n	8001ec4 <ESP_messageHandler+0xbe0>
		else if(vIlum[10] == '1' || vDor[2] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8001eaa:	4b44      	ldr	r3, [pc, #272]	; (8001fbc <ESP_messageHandler+0xcd8>)
 8001eac:	7a9b      	ldrb	r3, [r3, #10]
 8001eae:	2b31      	cmp	r3, #49	; 0x31
 8001eb0:	d003      	beq.n	8001eba <ESP_messageHandler+0xbd6>
 8001eb2:	4b4a      	ldr	r3, [pc, #296]	; (8001fdc <ESP_messageHandler+0xcf8>)
 8001eb4:	789b      	ldrb	r3, [r3, #2]
 8001eb6:	2b31      	cmp	r3, #49	; 0x31
 8001eb8:	d104      	bne.n	8001ec4 <ESP_messageHandler+0xbe0>
 8001eba:	2201      	movs	r2, #1
 8001ebc:	2140      	movs	r1, #64	; 0x40
 8001ebe:	4842      	ldr	r0, [pc, #264]	; (8001fc8 <ESP_messageHandler+0xce4>)
 8001ec0:	f003 fe20 	bl	8005b04 <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'D'){
 8001ec4:	4b41      	ldr	r3, [pc, #260]	; (8001fcc <ESP_messageHandler+0xce8>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b44      	cmp	r3, #68	; 0x44
 8001eca:	d108      	bne.n	8001ede <ESP_messageHandler+0xbfa>
		UART_send("V. DORMITORIO (DORMITORIO) \n", PC_UART);
 8001ecc:	4940      	ldr	r1, [pc, #256]	; (8001fd0 <ESP_messageHandler+0xcec>)
 8001ece:	4844      	ldr	r0, [pc, #272]	; (8001fe0 <ESP_messageHandler+0xcfc>)
 8001ed0:	f000 fdec 	bl	8002aac <UART_send>
		//vDor[0] = textrc[28]; 	// Luz Dormitorio
		//vDor[1] = textrc[31]; 	// Luz Mesita Izq
		//vDor[2] = textrc[34]; 	// Luz Mesita Dch
		vDor[3] = textrc[37]; 	// V. Dormitorio
 8001ed4:	4b40      	ldr	r3, [pc, #256]	; (8001fd8 <ESP_messageHandler+0xcf4>)
 8001ed6:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001eda:	4b40      	ldr	r3, [pc, #256]	; (8001fdc <ESP_messageHandler+0xcf8>)
 8001edc:	70da      	strb	r2, [r3, #3]
	}

	// OFICINA
	if (fragment[0] == 'f'){
 8001ede:	4b3b      	ldr	r3, [pc, #236]	; (8001fcc <ESP_messageHandler+0xce8>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b66      	cmp	r3, #102	; 0x66
 8001ee4:	f040 80bf 	bne.w	8002066 <ESP_messageHandler+0xd82>
		UART_send("LUCES (OFICINA) \n", PC_UART);
 8001ee8:	4939      	ldr	r1, [pc, #228]	; (8001fd0 <ESP_messageHandler+0xcec>)
 8001eea:	483e      	ldr	r0, [pc, #248]	; (8001fe4 <ESP_messageHandler+0xd00>)
 8001eec:	f000 fdde 	bl	8002aac <UART_send>
		vOfi[0] = textrc[28]; // Luz Oficina
 8001ef0:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <ESP_messageHandler+0xcf4>)
 8001ef2:	7f1a      	ldrb	r2, [r3, #28]
 8001ef4:	4b3c      	ldr	r3, [pc, #240]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001ef6:	701a      	strb	r2, [r3, #0]
		vOfi[1] = textrc[31]; // Luz Gaming
 8001ef8:	4b37      	ldr	r3, [pc, #220]	; (8001fd8 <ESP_messageHandler+0xcf4>)
 8001efa:	7fda      	ldrb	r2, [r3, #31]
 8001efc:	4b3a      	ldr	r3, [pc, #232]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001efe:	705a      	strb	r2, [r3, #1]
		vOfi[2] = textrc[34]; // Luz Rx100
 8001f00:	4b35      	ldr	r3, [pc, #212]	; (8001fd8 <ESP_messageHandler+0xcf4>)
 8001f02:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001f06:	4b38      	ldr	r3, [pc, #224]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001f08:	709a      	strb	r2, [r3, #2]
		vOfi[3] = textrc[35]; // Luz Rx10
 8001f0a:	4b33      	ldr	r3, [pc, #204]	; (8001fd8 <ESP_messageHandler+0xcf4>)
 8001f0c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8001f10:	4b35      	ldr	r3, [pc, #212]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001f12:	70da      	strb	r2, [r3, #3]
		vOfi[4] = textrc[36]; // Luz Rx1
 8001f14:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <ESP_messageHandler+0xcf4>)
 8001f16:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8001f1a:	4b33      	ldr	r3, [pc, #204]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001f1c:	711a      	strb	r2, [r3, #4]
		vOfi[5] = textrc[39]; // Luz Gx100
 8001f1e:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <ESP_messageHandler+0xcf4>)
 8001f20:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8001f24:	4b30      	ldr	r3, [pc, #192]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001f26:	715a      	strb	r2, [r3, #5]
		vOfi[6] = textrc[40]; // Luz Gx10
 8001f28:	4b2b      	ldr	r3, [pc, #172]	; (8001fd8 <ESP_messageHandler+0xcf4>)
 8001f2a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001f2e:	4b2e      	ldr	r3, [pc, #184]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001f30:	719a      	strb	r2, [r3, #6]
		vOfi[7] = textrc[41]; // Luz Gx1
 8001f32:	4b29      	ldr	r3, [pc, #164]	; (8001fd8 <ESP_messageHandler+0xcf4>)
 8001f34:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001f38:	4b2b      	ldr	r3, [pc, #172]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001f3a:	71da      	strb	r2, [r3, #7]
		vOfi[8] = textrc[44]; // Luz Bx100
 8001f3c:	4b26      	ldr	r3, [pc, #152]	; (8001fd8 <ESP_messageHandler+0xcf4>)
 8001f3e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001f42:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001f44:	721a      	strb	r2, [r3, #8]
		vOfi[9] = textrc[45]; // Luz Bx10
 8001f46:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <ESP_messageHandler+0xcf4>)
 8001f48:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8001f4c:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001f4e:	725a      	strb	r2, [r3, #9]
		vOfi[10] = textrc[46]; // Luz Bx1
 8001f50:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <ESP_messageHandler+0xcf4>)
 8001f52:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8001f56:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001f58:	729a      	strb	r2, [r3, #10]
		//vOfi[11] = textrc[49]; // V. Oficina

		if(vIlum[11] == '0' || vOfi[0] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET); // Luz Oficina
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <ESP_messageHandler+0xcd8>)
 8001f5c:	7adb      	ldrb	r3, [r3, #11]
 8001f5e:	2b30      	cmp	r3, #48	; 0x30
 8001f60:	d003      	beq.n	8001f6a <ESP_messageHandler+0xc86>
 8001f62:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b30      	cmp	r3, #48	; 0x30
 8001f68:	d105      	bne.n	8001f76 <ESP_messageHandler+0xc92>
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2120      	movs	r1, #32
 8001f6e:	4816      	ldr	r0, [pc, #88]	; (8001fc8 <ESP_messageHandler+0xce4>)
 8001f70:	f003 fdc8 	bl	8005b04 <HAL_GPIO_WritePin>
 8001f74:	e00c      	b.n	8001f90 <ESP_messageHandler+0xcac>
		else if(vIlum[11] == '1' || vOfi[0] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <ESP_messageHandler+0xcd8>)
 8001f78:	7adb      	ldrb	r3, [r3, #11]
 8001f7a:	2b31      	cmp	r3, #49	; 0x31
 8001f7c:	d003      	beq.n	8001f86 <ESP_messageHandler+0xca2>
 8001f7e:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b31      	cmp	r3, #49	; 0x31
 8001f84:	d104      	bne.n	8001f90 <ESP_messageHandler+0xcac>
 8001f86:	2201      	movs	r2, #1
 8001f88:	2120      	movs	r1, #32
 8001f8a:	480f      	ldr	r0, [pc, #60]	; (8001fc8 <ESP_messageHandler+0xce4>)
 8001f8c:	f003 fdba 	bl	8005b04 <HAL_GPIO_WritePin>

		if(vIlum[12] == '0' || vOfi[1] == '0'){
 8001f90:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <ESP_messageHandler+0xcd8>)
 8001f92:	7b1b      	ldrb	r3, [r3, #12]
 8001f94:	2b30      	cmp	r3, #48	; 0x30
 8001f96:	d003      	beq.n	8001fa0 <ESP_messageHandler+0xcbc>
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001f9a:	785b      	ldrb	r3, [r3, #1]
 8001f9c:	2b30      	cmp	r3, #48	; 0x30
 8001f9e:	d127      	bne.n	8001ff0 <ESP_messageHandler+0xd0c>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <ESP_messageHandler+0xd08>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001fa8:	4b10      	ldr	r3, [pc, #64]	; (8001fec <ESP_messageHandler+0xd08>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2200      	movs	r2, #0
 8001fae:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <ESP_messageHandler+0xd08>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fb8:	e055      	b.n	8002066 <ESP_messageHandler+0xd82>
 8001fba:	bf00      	nop
 8001fbc:	20000998 	.word	0x20000998
 8001fc0:	20000980 	.word	0x20000980
 8001fc4:	40020c00 	.word	0x40020c00
 8001fc8:	40020400 	.word	0x40020400
 8001fcc:	200009b4 	.word	0x200009b4
 8001fd0:	20000d7c 	.word	0x20000d7c
 8001fd4:	08009328 	.word	0x08009328
 8001fd8:	200009d0 	.word	0x200009d0
 8001fdc:	20000910 	.word	0x20000910
 8001fe0:	08009340 	.word	0x08009340
 8001fe4:	08009360 	.word	0x08009360
 8001fe8:	20000974 	.word	0x20000974
 8001fec:	20000cec 	.word	0x20000cec
		}
		else if(vIlum[12] == '1' || vOfi[1] == '1'){ // Luz Gaming
 8001ff0:	4b7a      	ldr	r3, [pc, #488]	; (80021dc <ESP_messageHandler+0xef8>)
 8001ff2:	7b1b      	ldrb	r3, [r3, #12]
 8001ff4:	2b31      	cmp	r3, #49	; 0x31
 8001ff6:	d003      	beq.n	8002000 <ESP_messageHandler+0xd1c>
 8001ff8:	4b79      	ldr	r3, [pc, #484]	; (80021e0 <ESP_messageHandler+0xefc>)
 8001ffa:	785b      	ldrb	r3, [r3, #1]
 8001ffc:	2b31      	cmp	r3, #49	; 0x31
 8001ffe:	d132      	bne.n	8002066 <ESP_messageHandler+0xd82>

			//uint8_t r, g, b;

			r = rgb_value(vOfi[2],vOfi[3],vOfi[4]);
 8002000:	4b77      	ldr	r3, [pc, #476]	; (80021e0 <ESP_messageHandler+0xefc>)
 8002002:	789b      	ldrb	r3, [r3, #2]
 8002004:	4a76      	ldr	r2, [pc, #472]	; (80021e0 <ESP_messageHandler+0xefc>)
 8002006:	78d1      	ldrb	r1, [r2, #3]
 8002008:	4a75      	ldr	r2, [pc, #468]	; (80021e0 <ESP_messageHandler+0xefc>)
 800200a:	7912      	ldrb	r2, [r2, #4]
 800200c:	4618      	mov	r0, r3
 800200e:	f000 f96d 	bl	80022ec <rgb_value>
 8002012:	4603      	mov	r3, r0
 8002014:	4a73      	ldr	r2, [pc, #460]	; (80021e4 <ESP_messageHandler+0xf00>)
 8002016:	6013      	str	r3, [r2, #0]
			g = rgb_value(vOfi[5],vOfi[6],vOfi[7]);
 8002018:	4b71      	ldr	r3, [pc, #452]	; (80021e0 <ESP_messageHandler+0xefc>)
 800201a:	795b      	ldrb	r3, [r3, #5]
 800201c:	4a70      	ldr	r2, [pc, #448]	; (80021e0 <ESP_messageHandler+0xefc>)
 800201e:	7991      	ldrb	r1, [r2, #6]
 8002020:	4a6f      	ldr	r2, [pc, #444]	; (80021e0 <ESP_messageHandler+0xefc>)
 8002022:	79d2      	ldrb	r2, [r2, #7]
 8002024:	4618      	mov	r0, r3
 8002026:	f000 f961 	bl	80022ec <rgb_value>
 800202a:	4603      	mov	r3, r0
 800202c:	4a6e      	ldr	r2, [pc, #440]	; (80021e8 <ESP_messageHandler+0xf04>)
 800202e:	6013      	str	r3, [r2, #0]
			b = rgb_value(vOfi[8],vOfi[9],vOfi[10]);
 8002030:	4b6b      	ldr	r3, [pc, #428]	; (80021e0 <ESP_messageHandler+0xefc>)
 8002032:	7a1b      	ldrb	r3, [r3, #8]
 8002034:	4a6a      	ldr	r2, [pc, #424]	; (80021e0 <ESP_messageHandler+0xefc>)
 8002036:	7a51      	ldrb	r1, [r2, #9]
 8002038:	4a69      	ldr	r2, [pc, #420]	; (80021e0 <ESP_messageHandler+0xefc>)
 800203a:	7a92      	ldrb	r2, [r2, #10]
 800203c:	4618      	mov	r0, r3
 800203e:	f000 f955 	bl	80022ec <rgb_value>
 8002042:	4603      	mov	r3, r0
 8002044:	4a69      	ldr	r2, [pc, #420]	; (80021ec <ESP_messageHandler+0xf08>)
 8002046:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, g); // PA8
 8002048:	4b67      	ldr	r3, [pc, #412]	; (80021e8 <ESP_messageHandler+0xf04>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b68      	ldr	r3, [pc, #416]	; (80021f0 <ESP_messageHandler+0xf0c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, r); // PA9
 8002052:	4b64      	ldr	r3, [pc, #400]	; (80021e4 <ESP_messageHandler+0xf00>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	4b66      	ldr	r3, [pc, #408]	; (80021f0 <ESP_messageHandler+0xf0c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b); // PA10
 800205c:	4b63      	ldr	r3, [pc, #396]	; (80021ec <ESP_messageHandler+0xf08>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b63      	ldr	r3, [pc, #396]	; (80021f0 <ESP_messageHandler+0xf0c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}

	if (fragment[0] == 'F'){
 8002066:	4b63      	ldr	r3, [pc, #396]	; (80021f4 <ESP_messageHandler+0xf10>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b46      	cmp	r3, #70	; 0x46
 800206c:	d108      	bne.n	8002080 <ESP_messageHandler+0xd9c>
		UART_send("V. OFICINA (OFICINA) \n", PC_UART);
 800206e:	4962      	ldr	r1, [pc, #392]	; (80021f8 <ESP_messageHandler+0xf14>)
 8002070:	4862      	ldr	r0, [pc, #392]	; (80021fc <ESP_messageHandler+0xf18>)
 8002072:	f000 fd1b 	bl	8002aac <UART_send>
		//vOfi[6] = textrc[40]; // Luz Gx10
		//vOfi[7] = textrc[41]; // Luz Gx1
		//vOfi[8] = textrc[44]; // Luz Bx100
		//vOfi[9] = textrc[45]; // Luz Bx10
		//vOfi[10] = textrc[46]; // Luz Bx1
		vOfi[11] = textrc[49]; // V. Oficina
 8002076:	4b62      	ldr	r3, [pc, #392]	; (8002200 <ESP_messageHandler+0xf1c>)
 8002078:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800207c:	4b58      	ldr	r3, [pc, #352]	; (80021e0 <ESP_messageHandler+0xefc>)
 800207e:	72da      	strb	r2, [r3, #11]
	}

	// GARAJE
	if (fragment[0] == 'j'){
 8002080:	4b5c      	ldr	r3, [pc, #368]	; (80021f4 <ESP_messageHandler+0xf10>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b6a      	cmp	r3, #106	; 0x6a
 8002086:	d124      	bne.n	80020d2 <ESP_messageHandler+0xdee>
		UART_send("LUZ GARAJE (GARAJE) \n", PC_UART);
 8002088:	495b      	ldr	r1, [pc, #364]	; (80021f8 <ESP_messageHandler+0xf14>)
 800208a:	485e      	ldr	r0, [pc, #376]	; (8002204 <ESP_messageHandler+0xf20>)
 800208c:	f000 fd0e 	bl	8002aac <UART_send>
		vGar[0] = textrc[28]; // Luz Garaje
 8002090:	4b5b      	ldr	r3, [pc, #364]	; (8002200 <ESP_messageHandler+0xf1c>)
 8002092:	7f1a      	ldrb	r2, [r3, #28]
 8002094:	4b5c      	ldr	r3, [pc, #368]	; (8002208 <ESP_messageHandler+0xf24>)
 8002096:	701a      	strb	r2, [r3, #0]
		//vGar[1] = textrc[31]; // P. Garaje

		if(vIlum[22] == '0' || vGar[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET); // Luz Garaje
 8002098:	4b50      	ldr	r3, [pc, #320]	; (80021dc <ESP_messageHandler+0xef8>)
 800209a:	7d9b      	ldrb	r3, [r3, #22]
 800209c:	2b30      	cmp	r3, #48	; 0x30
 800209e:	d003      	beq.n	80020a8 <ESP_messageHandler+0xdc4>
 80020a0:	4b59      	ldr	r3, [pc, #356]	; (8002208 <ESP_messageHandler+0xf24>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b30      	cmp	r3, #48	; 0x30
 80020a6:	d106      	bne.n	80020b6 <ESP_messageHandler+0xdd2>
 80020a8:	2200      	movs	r2, #0
 80020aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020ae:	4857      	ldr	r0, [pc, #348]	; (800220c <ESP_messageHandler+0xf28>)
 80020b0:	f003 fd28 	bl	8005b04 <HAL_GPIO_WritePin>
 80020b4:	e00d      	b.n	80020d2 <ESP_messageHandler+0xdee>
		else if(vIlum[22] == '1' || vGar[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 80020b6:	4b49      	ldr	r3, [pc, #292]	; (80021dc <ESP_messageHandler+0xef8>)
 80020b8:	7d9b      	ldrb	r3, [r3, #22]
 80020ba:	2b31      	cmp	r3, #49	; 0x31
 80020bc:	d003      	beq.n	80020c6 <ESP_messageHandler+0xde2>
 80020be:	4b52      	ldr	r3, [pc, #328]	; (8002208 <ESP_messageHandler+0xf24>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b31      	cmp	r3, #49	; 0x31
 80020c4:	d105      	bne.n	80020d2 <ESP_messageHandler+0xdee>
 80020c6:	2201      	movs	r2, #1
 80020c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020cc:	484f      	ldr	r0, [pc, #316]	; (800220c <ESP_messageHandler+0xf28>)
 80020ce:	f003 fd19 	bl	8005b04 <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'J'){
 80020d2:	4b48      	ldr	r3, [pc, #288]	; (80021f4 <ESP_messageHandler+0xf10>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b4a      	cmp	r3, #74	; 0x4a
 80020d8:	d107      	bne.n	80020ea <ESP_messageHandler+0xe06>
		UART_send("P. GARAJE (GARAJE) \n", PC_UART);
 80020da:	4947      	ldr	r1, [pc, #284]	; (80021f8 <ESP_messageHandler+0xf14>)
 80020dc:	484c      	ldr	r0, [pc, #304]	; (8002210 <ESP_messageHandler+0xf2c>)
 80020de:	f000 fce5 	bl	8002aac <UART_send>
		//vGar[0] = textrc[28]; // Luz Garaje
		vGar[1] = textrc[31]; // P. Garaje
 80020e2:	4b47      	ldr	r3, [pc, #284]	; (8002200 <ESP_messageHandler+0xf1c>)
 80020e4:	7fda      	ldrb	r2, [r3, #31]
 80020e6:	4b48      	ldr	r3, [pc, #288]	; (8002208 <ESP_messageHandler+0xf24>)
 80020e8:	705a      	strb	r2, [r3, #1]
	}

	// HUERTO
	if (fragment[0] == 'h'){
 80020ea:	4b42      	ldr	r3, [pc, #264]	; (80021f4 <ESP_messageHandler+0xf10>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b68      	cmp	r3, #104	; 0x68
 80020f0:	d11c      	bne.n	800212c <ESP_messageHandler+0xe48>
		UART_send("RIEGO HUERTO \n", PC_UART);
 80020f2:	4941      	ldr	r1, [pc, #260]	; (80021f8 <ESP_messageHandler+0xf14>)
 80020f4:	4847      	ldr	r0, [pc, #284]	; (8002214 <ESP_messageHandler+0xf30>)
 80020f6:	f000 fcd9 	bl	8002aac <UART_send>
		vHuer[0] = textrc[28]; // Riego
 80020fa:	4b41      	ldr	r3, [pc, #260]	; (8002200 <ESP_messageHandler+0xf1c>)
 80020fc:	7f1a      	ldrb	r2, [r3, #28]
 80020fe:	4b46      	ldr	r3, [pc, #280]	; (8002218 <ESP_messageHandler+0xf34>)
 8002100:	701a      	strb	r2, [r3, #0]

		if(vHuer[0] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET); // Riego
 8002102:	4b45      	ldr	r3, [pc, #276]	; (8002218 <ESP_messageHandler+0xf34>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b30      	cmp	r3, #48	; 0x30
 8002108:	d106      	bne.n	8002118 <ESP_messageHandler+0xe34>
 800210a:	2200      	movs	r2, #0
 800210c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002110:	4842      	ldr	r0, [pc, #264]	; (800221c <ESP_messageHandler+0xf38>)
 8002112:	f003 fcf7 	bl	8005b04 <HAL_GPIO_WritePin>
 8002116:	e009      	b.n	800212c <ESP_messageHandler+0xe48>
		else if(vHuer[0] == '1') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 8002118:	4b3f      	ldr	r3, [pc, #252]	; (8002218 <ESP_messageHandler+0xf34>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b31      	cmp	r3, #49	; 0x31
 800211e:	d105      	bne.n	800212c <ESP_messageHandler+0xe48>
 8002120:	2201      	movs	r2, #1
 8002122:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002126:	483d      	ldr	r0, [pc, #244]	; (800221c <ESP_messageHandler+0xf38>)
 8002128:	f003 fcec 	bl	8005b04 <HAL_GPIO_WritePin>
	}

	// AJUSTES
	if (fragment[0] == 'a'){
 800212c:	4b31      	ldr	r3, [pc, #196]	; (80021f4 <ESP_messageHandler+0xf10>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b61      	cmp	r3, #97	; 0x61
 8002132:	d150      	bne.n	80021d6 <ESP_messageHandler+0xef2>
		UART_send("AJUSTES \n", PC_UART);
 8002134:	4930      	ldr	r1, [pc, #192]	; (80021f8 <ESP_messageHandler+0xf14>)
 8002136:	483a      	ldr	r0, [pc, #232]	; (8002220 <ESP_messageHandler+0xf3c>)
 8002138:	f000 fcb8 	bl	8002aac <UART_send>
		vAj[0] = textrc[28]; 	// Vent. Enc. x 10
 800213c:	4b30      	ldr	r3, [pc, #192]	; (8002200 <ESP_messageHandler+0xf1c>)
 800213e:	7f1a      	ldrb	r2, [r3, #28]
 8002140:	4b38      	ldr	r3, [pc, #224]	; (8002224 <ESP_messageHandler+0xf40>)
 8002142:	701a      	strb	r2, [r3, #0]
		vAj[1] = textrc[29]; 	// Vent. Enc. x 1
 8002144:	4b2e      	ldr	r3, [pc, #184]	; (8002200 <ESP_messageHandler+0xf1c>)
 8002146:	7f5a      	ldrb	r2, [r3, #29]
 8002148:	4b36      	ldr	r3, [pc, #216]	; (8002224 <ESP_messageHandler+0xf40>)
 800214a:	705a      	strb	r2, [r3, #1]
		vAj[2] = textrc[31]; 	// Vent. Enc. x 0.1
 800214c:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <ESP_messageHandler+0xf1c>)
 800214e:	7fda      	ldrb	r2, [r3, #31]
 8002150:	4b34      	ldr	r3, [pc, #208]	; (8002224 <ESP_messageHandler+0xf40>)
 8002152:	709a      	strb	r2, [r3, #2]
		vAj[3] = textrc[34]; 	// Vent. Apa. x 10
 8002154:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <ESP_messageHandler+0xf1c>)
 8002156:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800215a:	4b32      	ldr	r3, [pc, #200]	; (8002224 <ESP_messageHandler+0xf40>)
 800215c:	70da      	strb	r2, [r3, #3]
		vAj[4] = textrc[35]; 	// Vent. Apa. x 1
 800215e:	4b28      	ldr	r3, [pc, #160]	; (8002200 <ESP_messageHandler+0xf1c>)
 8002160:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8002164:	4b2f      	ldr	r3, [pc, #188]	; (8002224 <ESP_messageHandler+0xf40>)
 8002166:	711a      	strb	r2, [r3, #4]
		vAj[5] = textrc[37]; 	// Vent. Apa. x 0.1
 8002168:	4b25      	ldr	r3, [pc, #148]	; (8002200 <ESP_messageHandler+0xf1c>)
 800216a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800216e:	4b2d      	ldr	r3, [pc, #180]	; (8002224 <ESP_messageHandler+0xf40>)
 8002170:	715a      	strb	r2, [r3, #5]
		vAj[6] = textrc[40]; 	// Calef. Enc. x 10
 8002172:	4b23      	ldr	r3, [pc, #140]	; (8002200 <ESP_messageHandler+0xf1c>)
 8002174:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8002178:	4b2a      	ldr	r3, [pc, #168]	; (8002224 <ESP_messageHandler+0xf40>)
 800217a:	719a      	strb	r2, [r3, #6]
		vAj[7] = textrc[41]; 	// Calef. Enc. x 1
 800217c:	4b20      	ldr	r3, [pc, #128]	; (8002200 <ESP_messageHandler+0xf1c>)
 800217e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8002182:	4b28      	ldr	r3, [pc, #160]	; (8002224 <ESP_messageHandler+0xf40>)
 8002184:	71da      	strb	r2, [r3, #7]
		vAj[8] = textrc[43]; 	// Calef. Enc. x 0.1
 8002186:	4b1e      	ldr	r3, [pc, #120]	; (8002200 <ESP_messageHandler+0xf1c>)
 8002188:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800218c:	4b25      	ldr	r3, [pc, #148]	; (8002224 <ESP_messageHandler+0xf40>)
 800218e:	721a      	strb	r2, [r3, #8]
		vAj[9] = textrc[46]; 	// Calef. Apa. x 10
 8002190:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <ESP_messageHandler+0xf1c>)
 8002192:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8002196:	4b23      	ldr	r3, [pc, #140]	; (8002224 <ESP_messageHandler+0xf40>)
 8002198:	725a      	strb	r2, [r3, #9]
		vAj[10] = textrc[47]; 	// Calef. Apa. x 1
 800219a:	4b19      	ldr	r3, [pc, #100]	; (8002200 <ESP_messageHandler+0xf1c>)
 800219c:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80021a0:	4b20      	ldr	r3, [pc, #128]	; (8002224 <ESP_messageHandler+0xf40>)
 80021a2:	729a      	strb	r2, [r3, #10]
		vAj[11] = textrc[49]; 	// Calef. Apa. x 0.1
 80021a4:	4b16      	ldr	r3, [pc, #88]	; (8002200 <ESP_messageHandler+0xf1c>)
 80021a6:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <ESP_messageHandler+0xf40>)
 80021ac:	72da      	strb	r2, [r3, #11]
		vAj[12] = textrc[52]; 	// RH Mínimo x 10
 80021ae:	4b14      	ldr	r3, [pc, #80]	; (8002200 <ESP_messageHandler+0xf1c>)
 80021b0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80021b4:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <ESP_messageHandler+0xf40>)
 80021b6:	731a      	strb	r2, [r3, #12]
		vAj[13] = textrc[53]; 	// RH Mínimo x 1
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <ESP_messageHandler+0xf1c>)
 80021ba:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80021be:	4b19      	ldr	r3, [pc, #100]	; (8002224 <ESP_messageHandler+0xf40>)
 80021c0:	735a      	strb	r2, [r3, #13]
		vAj[14] = textrc[56]; 	// RH Máximo x 10
 80021c2:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <ESP_messageHandler+0xf1c>)
 80021c4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80021c8:	4b16      	ldr	r3, [pc, #88]	; (8002224 <ESP_messageHandler+0xf40>)
 80021ca:	739a      	strb	r2, [r3, #14]
		vAj[15] = textrc[57]; 	// RH Máximo x 1
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <ESP_messageHandler+0xf1c>)
 80021ce:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <ESP_messageHandler+0xf40>)
 80021d4:	73da      	strb	r2, [r3, #15]
	}

	//__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000998 	.word	0x20000998
 80021e0:	20000974 	.word	0x20000974
 80021e4:	20000924 	.word	0x20000924
 80021e8:	20000918 	.word	0x20000918
 80021ec:	20000914 	.word	0x20000914
 80021f0:	20000cec 	.word	0x20000cec
 80021f4:	200009b4 	.word	0x200009b4
 80021f8:	20000d7c 	.word	0x20000d7c
 80021fc:	08009374 	.word	0x08009374
 8002200:	200009d0 	.word	0x200009d0
 8002204:	0800938c 	.word	0x0800938c
 8002208:	2000096c 	.word	0x2000096c
 800220c:	40020800 	.word	0x40020800
 8002210:	080093a4 	.word	0x080093a4
 8002214:	080093bc 	.word	0x080093bc
 8002218:	200009bc 	.word	0x200009bc
 800221c:	40020400 	.word	0x40020400
 8002220:	080093cc 	.word	0x080093cc
 8002224:	200009c0 	.word	0x200009c0

08002228 <ldr>:


#include <LDR.h>
#include "ESP8266_HAL.h"

void ldr(uint16_t valor){
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	80fb      	strh	r3, [r7, #6]


	if (vIlum[26] == '1' || vExt[5] == '1'){
 8002232:	4b2a      	ldr	r3, [pc, #168]	; (80022dc <ldr+0xb4>)
 8002234:	7e9b      	ldrb	r3, [r3, #26]
 8002236:	2b31      	cmp	r3, #49	; 0x31
 8002238:	d003      	beq.n	8002242 <ldr+0x1a>
 800223a:	4b29      	ldr	r3, [pc, #164]	; (80022e0 <ldr+0xb8>)
 800223c:	795b      	ldrb	r3, [r3, #5]
 800223e:	2b31      	cmp	r3, #49	; 0x31
 8002240:	d147      	bne.n	80022d2 <ldr+0xaa>

		if(valor<90) {
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	2b59      	cmp	r3, #89	; 0x59
 8002246:	d822      	bhi.n	800228e <ldr+0x66>
			vIlum[23] = 'x';	// Jardín
 8002248:	4b24      	ldr	r3, [pc, #144]	; (80022dc <ldr+0xb4>)
 800224a:	2278      	movs	r2, #120	; 0x78
 800224c:	75da      	strb	r2, [r3, #23]
			vExt[3] = 'x';
 800224e:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <ldr+0xb8>)
 8002250:	2278      	movs	r2, #120	; 0x78
 8002252:	70da      	strb	r2, [r3, #3]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8002254:	2201      	movs	r2, #1
 8002256:	2104      	movs	r1, #4
 8002258:	4822      	ldr	r0, [pc, #136]	; (80022e4 <ldr+0xbc>)
 800225a:	f003 fc53 	bl	8005b04 <HAL_GPIO_WritePin>
			vIlum[24] = 'x';	// Porche
 800225e:	4b1f      	ldr	r3, [pc, #124]	; (80022dc <ldr+0xb4>)
 8002260:	2278      	movs	r2, #120	; 0x78
 8002262:	761a      	strb	r2, [r3, #24]
			vExt[2] = 'x';
 8002264:	4b1e      	ldr	r3, [pc, #120]	; (80022e0 <ldr+0xb8>)
 8002266:	2278      	movs	r2, #120	; 0x78
 8002268:	709a      	strb	r2, [r3, #2]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 800226a:	2201      	movs	r2, #1
 800226c:	2110      	movs	r1, #16
 800226e:	481d      	ldr	r0, [pc, #116]	; (80022e4 <ldr+0xbc>)
 8002270:	f003 fc48 	bl	8005b04 <HAL_GPIO_WritePin>
			vIlum[25] = 'x';	// Tendedero
 8002274:	4b19      	ldr	r3, [pc, #100]	; (80022dc <ldr+0xb4>)
 8002276:	2278      	movs	r2, #120	; 0x78
 8002278:	765a      	strb	r2, [r3, #25]
			vExt[1] = 'x';
 800227a:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <ldr+0xb8>)
 800227c:	2278      	movs	r2, #120	; 0x78
 800227e:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8002280:	2201      	movs	r2, #1
 8002282:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002286:	4818      	ldr	r0, [pc, #96]	; (80022e8 <ldr+0xc0>)
 8002288:	f003 fc3c 	bl	8005b04 <HAL_GPIO_WritePin>
			vIlum[25] = 'x';	// Tendedero
			vExt[1] = 'x';
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
		}
	}
}
 800228c:	e021      	b.n	80022d2 <ldr+0xaa>
			vIlum[23] = 'x';	// Jardín
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <ldr+0xb4>)
 8002290:	2278      	movs	r2, #120	; 0x78
 8002292:	75da      	strb	r2, [r3, #23]
			vExt[3] = 'x';
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <ldr+0xb8>)
 8002296:	2278      	movs	r2, #120	; 0x78
 8002298:	70da      	strb	r2, [r3, #3]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	2104      	movs	r1, #4
 800229e:	4811      	ldr	r0, [pc, #68]	; (80022e4 <ldr+0xbc>)
 80022a0:	f003 fc30 	bl	8005b04 <HAL_GPIO_WritePin>
			vIlum[24] = 'x';	// Porche
 80022a4:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <ldr+0xb4>)
 80022a6:	2278      	movs	r2, #120	; 0x78
 80022a8:	761a      	strb	r2, [r3, #24]
			vExt[2] = 'x';
 80022aa:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <ldr+0xb8>)
 80022ac:	2278      	movs	r2, #120	; 0x78
 80022ae:	709a      	strb	r2, [r3, #2]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
 80022b0:	2200      	movs	r2, #0
 80022b2:	2110      	movs	r1, #16
 80022b4:	480b      	ldr	r0, [pc, #44]	; (80022e4 <ldr+0xbc>)
 80022b6:	f003 fc25 	bl	8005b04 <HAL_GPIO_WritePin>
			vIlum[25] = 'x';	// Tendedero
 80022ba:	4b08      	ldr	r3, [pc, #32]	; (80022dc <ldr+0xb4>)
 80022bc:	2278      	movs	r2, #120	; 0x78
 80022be:	765a      	strb	r2, [r3, #25]
			vExt[1] = 'x';
 80022c0:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <ldr+0xb8>)
 80022c2:	2278      	movs	r2, #120	; 0x78
 80022c4:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 80022c6:	2200      	movs	r2, #0
 80022c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022cc:	4806      	ldr	r0, [pc, #24]	; (80022e8 <ldr+0xc0>)
 80022ce:	f003 fc19 	bl	8005b04 <HAL_GPIO_WritePin>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000998 	.word	0x20000998
 80022e0:	20000928 	.word	0x20000928
 80022e4:	40020c00 	.word	0x40020c00
 80022e8:	40020800 	.word	0x40020800

080022ec <rgb_value>:
 */


#include <RGB.h>

int rgb_value(char i, char j, char k){
 80022ec:	b480      	push	{r7}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
 80022f6:	460b      	mov	r3, r1
 80022f8:	71bb      	strb	r3, [r7, #6]
 80022fa:	4613      	mov	r3, r2
 80022fc:	717b      	strb	r3, [r7, #5]

	int a, b, c;

	if(i == '0') a = 0;
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	2b30      	cmp	r3, #48	; 0x30
 8002302:	d102      	bne.n	800230a <rgb_value+0x1e>
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	e00a      	b.n	8002320 <rgb_value+0x34>
	else if(i == '1') a = 100;
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	2b31      	cmp	r3, #49	; 0x31
 800230e:	d102      	bne.n	8002316 <rgb_value+0x2a>
 8002310:	2364      	movs	r3, #100	; 0x64
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	e004      	b.n	8002320 <rgb_value+0x34>
	else if(i == '2') a = 200;
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	2b32      	cmp	r3, #50	; 0x32
 800231a:	d101      	bne.n	8002320 <rgb_value+0x34>
 800231c:	23c8      	movs	r3, #200	; 0xc8
 800231e:	617b      	str	r3, [r7, #20]

	if(j == '0') b = 0;
 8002320:	79bb      	ldrb	r3, [r7, #6]
 8002322:	2b30      	cmp	r3, #48	; 0x30
 8002324:	d102      	bne.n	800232c <rgb_value+0x40>
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	e034      	b.n	8002396 <rgb_value+0xaa>
	else if(j == '1') b = 10;
 800232c:	79bb      	ldrb	r3, [r7, #6]
 800232e:	2b31      	cmp	r3, #49	; 0x31
 8002330:	d102      	bne.n	8002338 <rgb_value+0x4c>
 8002332:	230a      	movs	r3, #10
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	e02e      	b.n	8002396 <rgb_value+0xaa>
	else if(j == '2') b = 20;
 8002338:	79bb      	ldrb	r3, [r7, #6]
 800233a:	2b32      	cmp	r3, #50	; 0x32
 800233c:	d102      	bne.n	8002344 <rgb_value+0x58>
 800233e:	2314      	movs	r3, #20
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	e028      	b.n	8002396 <rgb_value+0xaa>
	else if(j == '3') b = 30;
 8002344:	79bb      	ldrb	r3, [r7, #6]
 8002346:	2b33      	cmp	r3, #51	; 0x33
 8002348:	d102      	bne.n	8002350 <rgb_value+0x64>
 800234a:	231e      	movs	r3, #30
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	e022      	b.n	8002396 <rgb_value+0xaa>
	else if(j == '4') b = 40;
 8002350:	79bb      	ldrb	r3, [r7, #6]
 8002352:	2b34      	cmp	r3, #52	; 0x34
 8002354:	d102      	bne.n	800235c <rgb_value+0x70>
 8002356:	2328      	movs	r3, #40	; 0x28
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	e01c      	b.n	8002396 <rgb_value+0xaa>
	else if(j == '5') b = 50;
 800235c:	79bb      	ldrb	r3, [r7, #6]
 800235e:	2b35      	cmp	r3, #53	; 0x35
 8002360:	d102      	bne.n	8002368 <rgb_value+0x7c>
 8002362:	2332      	movs	r3, #50	; 0x32
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	e016      	b.n	8002396 <rgb_value+0xaa>
	else if(j == '6') b = 60;
 8002368:	79bb      	ldrb	r3, [r7, #6]
 800236a:	2b36      	cmp	r3, #54	; 0x36
 800236c:	d102      	bne.n	8002374 <rgb_value+0x88>
 800236e:	233c      	movs	r3, #60	; 0x3c
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	e010      	b.n	8002396 <rgb_value+0xaa>
	else if(j == '7') b = 70;
 8002374:	79bb      	ldrb	r3, [r7, #6]
 8002376:	2b37      	cmp	r3, #55	; 0x37
 8002378:	d102      	bne.n	8002380 <rgb_value+0x94>
 800237a:	2346      	movs	r3, #70	; 0x46
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	e00a      	b.n	8002396 <rgb_value+0xaa>
	else if(j == '8') b = 80;
 8002380:	79bb      	ldrb	r3, [r7, #6]
 8002382:	2b38      	cmp	r3, #56	; 0x38
 8002384:	d102      	bne.n	800238c <rgb_value+0xa0>
 8002386:	2350      	movs	r3, #80	; 0x50
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	e004      	b.n	8002396 <rgb_value+0xaa>
	else if(j == '9') b = 90;
 800238c:	79bb      	ldrb	r3, [r7, #6]
 800238e:	2b39      	cmp	r3, #57	; 0x39
 8002390:	d101      	bne.n	8002396 <rgb_value+0xaa>
 8002392:	235a      	movs	r3, #90	; 0x5a
 8002394:	613b      	str	r3, [r7, #16]

	if(k == '0') c = 0;
 8002396:	797b      	ldrb	r3, [r7, #5]
 8002398:	2b30      	cmp	r3, #48	; 0x30
 800239a:	d102      	bne.n	80023a2 <rgb_value+0xb6>
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	e034      	b.n	800240c <rgb_value+0x120>
	else if(k == '1') c = 1;
 80023a2:	797b      	ldrb	r3, [r7, #5]
 80023a4:	2b31      	cmp	r3, #49	; 0x31
 80023a6:	d102      	bne.n	80023ae <rgb_value+0xc2>
 80023a8:	2301      	movs	r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	e02e      	b.n	800240c <rgb_value+0x120>
	else if(k == '2') c = 2;
 80023ae:	797b      	ldrb	r3, [r7, #5]
 80023b0:	2b32      	cmp	r3, #50	; 0x32
 80023b2:	d102      	bne.n	80023ba <rgb_value+0xce>
 80023b4:	2302      	movs	r3, #2
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	e028      	b.n	800240c <rgb_value+0x120>
	else if(k == '3') c = 3;
 80023ba:	797b      	ldrb	r3, [r7, #5]
 80023bc:	2b33      	cmp	r3, #51	; 0x33
 80023be:	d102      	bne.n	80023c6 <rgb_value+0xda>
 80023c0:	2303      	movs	r3, #3
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	e022      	b.n	800240c <rgb_value+0x120>
	else if(k == '4') c = 4;
 80023c6:	797b      	ldrb	r3, [r7, #5]
 80023c8:	2b34      	cmp	r3, #52	; 0x34
 80023ca:	d102      	bne.n	80023d2 <rgb_value+0xe6>
 80023cc:	2304      	movs	r3, #4
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	e01c      	b.n	800240c <rgb_value+0x120>
	else if(k == '5') c = 5;
 80023d2:	797b      	ldrb	r3, [r7, #5]
 80023d4:	2b35      	cmp	r3, #53	; 0x35
 80023d6:	d102      	bne.n	80023de <rgb_value+0xf2>
 80023d8:	2305      	movs	r3, #5
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	e016      	b.n	800240c <rgb_value+0x120>
	else if(k == '6') c = 6;
 80023de:	797b      	ldrb	r3, [r7, #5]
 80023e0:	2b36      	cmp	r3, #54	; 0x36
 80023e2:	d102      	bne.n	80023ea <rgb_value+0xfe>
 80023e4:	2306      	movs	r3, #6
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	e010      	b.n	800240c <rgb_value+0x120>
	else if(k == '7') c = 7;
 80023ea:	797b      	ldrb	r3, [r7, #5]
 80023ec:	2b37      	cmp	r3, #55	; 0x37
 80023ee:	d102      	bne.n	80023f6 <rgb_value+0x10a>
 80023f0:	2307      	movs	r3, #7
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	e00a      	b.n	800240c <rgb_value+0x120>
	else if(k == '8') c = 8;
 80023f6:	797b      	ldrb	r3, [r7, #5]
 80023f8:	2b38      	cmp	r3, #56	; 0x38
 80023fa:	d102      	bne.n	8002402 <rgb_value+0x116>
 80023fc:	2308      	movs	r3, #8
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	e004      	b.n	800240c <rgb_value+0x120>
	else if(k == '9') c = 9;
 8002402:	797b      	ldrb	r3, [r7, #5]
 8002404:	2b39      	cmp	r3, #57	; 0x39
 8002406:	d101      	bne.n	800240c <rgb_value+0x120>
 8002408:	2309      	movs	r3, #9
 800240a:	60fb      	str	r3, [r7, #12]

	return a+b+c;
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	441a      	add	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4413      	add	r3, r2
}
 8002416:	4618      	mov	r0, r3
 8002418:	371c      	adds	r7, #28
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <rh_value>:
 */


#include <RH.h>

int rh_value(char i, char j){
 8002422:	b480      	push	{r7}
 8002424:	b085      	sub	sp, #20
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	460a      	mov	r2, r1
 800242c:	71fb      	strb	r3, [r7, #7]
 800242e:	4613      	mov	r3, r2
 8002430:	71bb      	strb	r3, [r7, #6]

	int a, b;

	if(i == '0') a = 0;
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	2b30      	cmp	r3, #48	; 0x30
 8002436:	d102      	bne.n	800243e <rh_value+0x1c>
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	e034      	b.n	80024a8 <rh_value+0x86>
	else if(i == '1') a = 10;
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	2b31      	cmp	r3, #49	; 0x31
 8002442:	d102      	bne.n	800244a <rh_value+0x28>
 8002444:	230a      	movs	r3, #10
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	e02e      	b.n	80024a8 <rh_value+0x86>
	else if(i == '2') a = 20;
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	2b32      	cmp	r3, #50	; 0x32
 800244e:	d102      	bne.n	8002456 <rh_value+0x34>
 8002450:	2314      	movs	r3, #20
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	e028      	b.n	80024a8 <rh_value+0x86>
	else if(i == '3') a = 30;
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	2b33      	cmp	r3, #51	; 0x33
 800245a:	d102      	bne.n	8002462 <rh_value+0x40>
 800245c:	231e      	movs	r3, #30
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	e022      	b.n	80024a8 <rh_value+0x86>
	else if(i == '4') a = 40;
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	2b34      	cmp	r3, #52	; 0x34
 8002466:	d102      	bne.n	800246e <rh_value+0x4c>
 8002468:	2328      	movs	r3, #40	; 0x28
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	e01c      	b.n	80024a8 <rh_value+0x86>
	else if(i == '5') a = 50;
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	2b35      	cmp	r3, #53	; 0x35
 8002472:	d102      	bne.n	800247a <rh_value+0x58>
 8002474:	2332      	movs	r3, #50	; 0x32
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	e016      	b.n	80024a8 <rh_value+0x86>
	else if(i == '6') a = 60;
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	2b36      	cmp	r3, #54	; 0x36
 800247e:	d102      	bne.n	8002486 <rh_value+0x64>
 8002480:	233c      	movs	r3, #60	; 0x3c
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	e010      	b.n	80024a8 <rh_value+0x86>
	else if(i == '7') a = 70;
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	2b37      	cmp	r3, #55	; 0x37
 800248a:	d102      	bne.n	8002492 <rh_value+0x70>
 800248c:	2346      	movs	r3, #70	; 0x46
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	e00a      	b.n	80024a8 <rh_value+0x86>
	else if(i == '8') a = 80;
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	2b38      	cmp	r3, #56	; 0x38
 8002496:	d102      	bne.n	800249e <rh_value+0x7c>
 8002498:	2350      	movs	r3, #80	; 0x50
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	e004      	b.n	80024a8 <rh_value+0x86>
	else if(i == '9') a = 90;
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	2b39      	cmp	r3, #57	; 0x39
 80024a2:	d101      	bne.n	80024a8 <rh_value+0x86>
 80024a4:	235a      	movs	r3, #90	; 0x5a
 80024a6:	60fb      	str	r3, [r7, #12]


	if(j == '0') b = 0;
 80024a8:	79bb      	ldrb	r3, [r7, #6]
 80024aa:	2b30      	cmp	r3, #48	; 0x30
 80024ac:	d102      	bne.n	80024b4 <rh_value+0x92>
 80024ae:	2300      	movs	r3, #0
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	e034      	b.n	800251e <rh_value+0xfc>
	else if(j == '1') b = 1;
 80024b4:	79bb      	ldrb	r3, [r7, #6]
 80024b6:	2b31      	cmp	r3, #49	; 0x31
 80024b8:	d102      	bne.n	80024c0 <rh_value+0x9e>
 80024ba:	2301      	movs	r3, #1
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	e02e      	b.n	800251e <rh_value+0xfc>
	else if(j == '2') b = 2;
 80024c0:	79bb      	ldrb	r3, [r7, #6]
 80024c2:	2b32      	cmp	r3, #50	; 0x32
 80024c4:	d102      	bne.n	80024cc <rh_value+0xaa>
 80024c6:	2302      	movs	r3, #2
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	e028      	b.n	800251e <rh_value+0xfc>
	else if(j == '3') b = 3;
 80024cc:	79bb      	ldrb	r3, [r7, #6]
 80024ce:	2b33      	cmp	r3, #51	; 0x33
 80024d0:	d102      	bne.n	80024d8 <rh_value+0xb6>
 80024d2:	2303      	movs	r3, #3
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	e022      	b.n	800251e <rh_value+0xfc>
	else if(j == '4') b = 4;
 80024d8:	79bb      	ldrb	r3, [r7, #6]
 80024da:	2b34      	cmp	r3, #52	; 0x34
 80024dc:	d102      	bne.n	80024e4 <rh_value+0xc2>
 80024de:	2304      	movs	r3, #4
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	e01c      	b.n	800251e <rh_value+0xfc>
	else if(j == '5') b = 5;
 80024e4:	79bb      	ldrb	r3, [r7, #6]
 80024e6:	2b35      	cmp	r3, #53	; 0x35
 80024e8:	d102      	bne.n	80024f0 <rh_value+0xce>
 80024ea:	2305      	movs	r3, #5
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	e016      	b.n	800251e <rh_value+0xfc>
	else if(j == '6') b = 6;
 80024f0:	79bb      	ldrb	r3, [r7, #6]
 80024f2:	2b36      	cmp	r3, #54	; 0x36
 80024f4:	d102      	bne.n	80024fc <rh_value+0xda>
 80024f6:	2306      	movs	r3, #6
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	e010      	b.n	800251e <rh_value+0xfc>
	else if(j == '7') b = 7;
 80024fc:	79bb      	ldrb	r3, [r7, #6]
 80024fe:	2b37      	cmp	r3, #55	; 0x37
 8002500:	d102      	bne.n	8002508 <rh_value+0xe6>
 8002502:	2307      	movs	r3, #7
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	e00a      	b.n	800251e <rh_value+0xfc>
	else if(j == '8') b = 8;
 8002508:	79bb      	ldrb	r3, [r7, #6]
 800250a:	2b38      	cmp	r3, #56	; 0x38
 800250c:	d102      	bne.n	8002514 <rh_value+0xf2>
 800250e:	2308      	movs	r3, #8
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	e004      	b.n	800251e <rh_value+0xfc>
	else if(j == '9') b = 9;
 8002514:	79bb      	ldrb	r3, [r7, #6]
 8002516:	2b39      	cmp	r3, #57	; 0x39
 8002518:	d101      	bne.n	800251e <rh_value+0xfc>
 800251a:	2309      	movs	r3, #9
 800251c:	60bb      	str	r3, [r7, #8]

	return a+b;
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	4413      	add	r3, r2
}
 8002524:	4618      	mov	r0, r3
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <temp_value>:
 */


#include <Temperatura.h>

float temp_value(char i, char j, char k){
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	71fb      	strb	r3, [r7, #7]
 800253a:	460b      	mov	r3, r1
 800253c:	71bb      	strb	r3, [r7, #6]
 800253e:	4613      	mov	r3, r2
 8002540:	717b      	strb	r3, [r7, #5]

	float a, b, c;

	if(i == '0') a = 0;
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	2b30      	cmp	r3, #48	; 0x30
 8002546:	d103      	bne.n	8002550 <temp_value+0x20>
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	e034      	b.n	80025ba <temp_value+0x8a>
	else if(i == '1') a = 10;
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	2b31      	cmp	r3, #49	; 0x31
 8002554:	d102      	bne.n	800255c <temp_value+0x2c>
 8002556:	4b60      	ldr	r3, [pc, #384]	; (80026d8 <temp_value+0x1a8>)
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	e02e      	b.n	80025ba <temp_value+0x8a>
	else if(i == '2') a = 20;
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	2b32      	cmp	r3, #50	; 0x32
 8002560:	d102      	bne.n	8002568 <temp_value+0x38>
 8002562:	4b5e      	ldr	r3, [pc, #376]	; (80026dc <temp_value+0x1ac>)
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	e028      	b.n	80025ba <temp_value+0x8a>
	else if(i == '3') a = 30;
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	2b33      	cmp	r3, #51	; 0x33
 800256c:	d102      	bne.n	8002574 <temp_value+0x44>
 800256e:	4b5c      	ldr	r3, [pc, #368]	; (80026e0 <temp_value+0x1b0>)
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	e022      	b.n	80025ba <temp_value+0x8a>
	else if(i == '4') a = 40;
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	2b34      	cmp	r3, #52	; 0x34
 8002578:	d102      	bne.n	8002580 <temp_value+0x50>
 800257a:	4b5a      	ldr	r3, [pc, #360]	; (80026e4 <temp_value+0x1b4>)
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	e01c      	b.n	80025ba <temp_value+0x8a>
	else if(i == '5') a = 50;
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	2b35      	cmp	r3, #53	; 0x35
 8002584:	d102      	bne.n	800258c <temp_value+0x5c>
 8002586:	4b58      	ldr	r3, [pc, #352]	; (80026e8 <temp_value+0x1b8>)
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	e016      	b.n	80025ba <temp_value+0x8a>
	else if(i == '6') a = 60;
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	2b36      	cmp	r3, #54	; 0x36
 8002590:	d102      	bne.n	8002598 <temp_value+0x68>
 8002592:	4b56      	ldr	r3, [pc, #344]	; (80026ec <temp_value+0x1bc>)
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	e010      	b.n	80025ba <temp_value+0x8a>
	else if(i == '7') a = 70;
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	2b37      	cmp	r3, #55	; 0x37
 800259c:	d102      	bne.n	80025a4 <temp_value+0x74>
 800259e:	4b54      	ldr	r3, [pc, #336]	; (80026f0 <temp_value+0x1c0>)
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	e00a      	b.n	80025ba <temp_value+0x8a>
	else if(i == '8') a = 80;
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	2b38      	cmp	r3, #56	; 0x38
 80025a8:	d102      	bne.n	80025b0 <temp_value+0x80>
 80025aa:	4b52      	ldr	r3, [pc, #328]	; (80026f4 <temp_value+0x1c4>)
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	e004      	b.n	80025ba <temp_value+0x8a>
	else if(i == '9') a = 90;
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	2b39      	cmp	r3, #57	; 0x39
 80025b4:	d101      	bne.n	80025ba <temp_value+0x8a>
 80025b6:	4b50      	ldr	r3, [pc, #320]	; (80026f8 <temp_value+0x1c8>)
 80025b8:	617b      	str	r3, [r7, #20]


	if(j == '0') b = 0;
 80025ba:	79bb      	ldrb	r3, [r7, #6]
 80025bc:	2b30      	cmp	r3, #48	; 0x30
 80025be:	d103      	bne.n	80025c8 <temp_value+0x98>
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	e038      	b.n	800263a <temp_value+0x10a>
	else if(j == '1') b = 1;
 80025c8:	79bb      	ldrb	r3, [r7, #6]
 80025ca:	2b31      	cmp	r3, #49	; 0x31
 80025cc:	d103      	bne.n	80025d6 <temp_value+0xa6>
 80025ce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	e031      	b.n	800263a <temp_value+0x10a>
	else if(j == '2') b = 2;
 80025d6:	79bb      	ldrb	r3, [r7, #6]
 80025d8:	2b32      	cmp	r3, #50	; 0x32
 80025da:	d103      	bne.n	80025e4 <temp_value+0xb4>
 80025dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	e02a      	b.n	800263a <temp_value+0x10a>
	else if(j == '3') b = 3;
 80025e4:	79bb      	ldrb	r3, [r7, #6]
 80025e6:	2b33      	cmp	r3, #51	; 0x33
 80025e8:	d102      	bne.n	80025f0 <temp_value+0xc0>
 80025ea:	4b44      	ldr	r3, [pc, #272]	; (80026fc <temp_value+0x1cc>)
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	e024      	b.n	800263a <temp_value+0x10a>
	else if(j == '4') b = 4;
 80025f0:	79bb      	ldrb	r3, [r7, #6]
 80025f2:	2b34      	cmp	r3, #52	; 0x34
 80025f4:	d103      	bne.n	80025fe <temp_value+0xce>
 80025f6:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	e01d      	b.n	800263a <temp_value+0x10a>
	else if(j == '5') b = 5;
 80025fe:	79bb      	ldrb	r3, [r7, #6]
 8002600:	2b35      	cmp	r3, #53	; 0x35
 8002602:	d102      	bne.n	800260a <temp_value+0xda>
 8002604:	4b3e      	ldr	r3, [pc, #248]	; (8002700 <temp_value+0x1d0>)
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	e017      	b.n	800263a <temp_value+0x10a>
	else if(j == '6') b = 6;
 800260a:	79bb      	ldrb	r3, [r7, #6]
 800260c:	2b36      	cmp	r3, #54	; 0x36
 800260e:	d102      	bne.n	8002616 <temp_value+0xe6>
 8002610:	4b3c      	ldr	r3, [pc, #240]	; (8002704 <temp_value+0x1d4>)
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	e011      	b.n	800263a <temp_value+0x10a>
	else if(j == '7') b = 7;
 8002616:	79bb      	ldrb	r3, [r7, #6]
 8002618:	2b37      	cmp	r3, #55	; 0x37
 800261a:	d102      	bne.n	8002622 <temp_value+0xf2>
 800261c:	4b3a      	ldr	r3, [pc, #232]	; (8002708 <temp_value+0x1d8>)
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	e00b      	b.n	800263a <temp_value+0x10a>
	else if(j == '8') b = 8;
 8002622:	79bb      	ldrb	r3, [r7, #6]
 8002624:	2b38      	cmp	r3, #56	; 0x38
 8002626:	d103      	bne.n	8002630 <temp_value+0x100>
 8002628:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	e004      	b.n	800263a <temp_value+0x10a>
	else if(j == '9') b = 9;
 8002630:	79bb      	ldrb	r3, [r7, #6]
 8002632:	2b39      	cmp	r3, #57	; 0x39
 8002634:	d101      	bne.n	800263a <temp_value+0x10a>
 8002636:	4b35      	ldr	r3, [pc, #212]	; (800270c <temp_value+0x1dc>)
 8002638:	613b      	str	r3, [r7, #16]

	if(k == '0') c = 0;
 800263a:	797b      	ldrb	r3, [r7, #5]
 800263c:	2b30      	cmp	r3, #48	; 0x30
 800263e:	d103      	bne.n	8002648 <temp_value+0x118>
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	e035      	b.n	80026b4 <temp_value+0x184>
	else if(k == '1') c = 0.1;
 8002648:	797b      	ldrb	r3, [r7, #5]
 800264a:	2b31      	cmp	r3, #49	; 0x31
 800264c:	d102      	bne.n	8002654 <temp_value+0x124>
 800264e:	4b30      	ldr	r3, [pc, #192]	; (8002710 <temp_value+0x1e0>)
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	e02f      	b.n	80026b4 <temp_value+0x184>
	else if(k == '2') c = 0.2;
 8002654:	797b      	ldrb	r3, [r7, #5]
 8002656:	2b32      	cmp	r3, #50	; 0x32
 8002658:	d102      	bne.n	8002660 <temp_value+0x130>
 800265a:	4b2e      	ldr	r3, [pc, #184]	; (8002714 <temp_value+0x1e4>)
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	e029      	b.n	80026b4 <temp_value+0x184>
	else if(k == '3') c = 0.3;
 8002660:	797b      	ldrb	r3, [r7, #5]
 8002662:	2b33      	cmp	r3, #51	; 0x33
 8002664:	d102      	bne.n	800266c <temp_value+0x13c>
 8002666:	4b2c      	ldr	r3, [pc, #176]	; (8002718 <temp_value+0x1e8>)
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	e023      	b.n	80026b4 <temp_value+0x184>
	else if(k == '4') c = 0.4;
 800266c:	797b      	ldrb	r3, [r7, #5]
 800266e:	2b34      	cmp	r3, #52	; 0x34
 8002670:	d102      	bne.n	8002678 <temp_value+0x148>
 8002672:	4b2a      	ldr	r3, [pc, #168]	; (800271c <temp_value+0x1ec>)
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	e01d      	b.n	80026b4 <temp_value+0x184>
	else if(k == '5') c = 0.5;
 8002678:	797b      	ldrb	r3, [r7, #5]
 800267a:	2b35      	cmp	r3, #53	; 0x35
 800267c:	d103      	bne.n	8002686 <temp_value+0x156>
 800267e:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	e016      	b.n	80026b4 <temp_value+0x184>
	else if(k == '6') c = 0.6;
 8002686:	797b      	ldrb	r3, [r7, #5]
 8002688:	2b36      	cmp	r3, #54	; 0x36
 800268a:	d102      	bne.n	8002692 <temp_value+0x162>
 800268c:	4b24      	ldr	r3, [pc, #144]	; (8002720 <temp_value+0x1f0>)
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	e010      	b.n	80026b4 <temp_value+0x184>
	else if(k == '7') c = 0.7;
 8002692:	797b      	ldrb	r3, [r7, #5]
 8002694:	2b37      	cmp	r3, #55	; 0x37
 8002696:	d102      	bne.n	800269e <temp_value+0x16e>
 8002698:	4b22      	ldr	r3, [pc, #136]	; (8002724 <temp_value+0x1f4>)
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	e00a      	b.n	80026b4 <temp_value+0x184>
	else if(k == '8') c = 0.8;
 800269e:	797b      	ldrb	r3, [r7, #5]
 80026a0:	2b38      	cmp	r3, #56	; 0x38
 80026a2:	d102      	bne.n	80026aa <temp_value+0x17a>
 80026a4:	4b20      	ldr	r3, [pc, #128]	; (8002728 <temp_value+0x1f8>)
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	e004      	b.n	80026b4 <temp_value+0x184>
	else if(k == '9') c = 0.9;
 80026aa:	797b      	ldrb	r3, [r7, #5]
 80026ac:	2b39      	cmp	r3, #57	; 0x39
 80026ae:	d101      	bne.n	80026b4 <temp_value+0x184>
 80026b0:	4b1e      	ldr	r3, [pc, #120]	; (800272c <temp_value+0x1fc>)
 80026b2:	60fb      	str	r3, [r7, #12]

	return a+b+c;
 80026b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80026b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80026bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80026c4:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80026c8:	eeb0 0a67 	vmov.f32	s0, s15
 80026cc:	371c      	adds	r7, #28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	41200000 	.word	0x41200000
 80026dc:	41a00000 	.word	0x41a00000
 80026e0:	41f00000 	.word	0x41f00000
 80026e4:	42200000 	.word	0x42200000
 80026e8:	42480000 	.word	0x42480000
 80026ec:	42700000 	.word	0x42700000
 80026f0:	428c0000 	.word	0x428c0000
 80026f4:	42a00000 	.word	0x42a00000
 80026f8:	42b40000 	.word	0x42b40000
 80026fc:	40400000 	.word	0x40400000
 8002700:	40a00000 	.word	0x40a00000
 8002704:	40c00000 	.word	0x40c00000
 8002708:	40e00000 	.word	0x40e00000
 800270c:	41100000 	.word	0x41100000
 8002710:	3dcccccd 	.word	0x3dcccccd
 8002714:	3e4ccccd 	.word	0x3e4ccccd
 8002718:	3e99999a 	.word	0x3e99999a
 800271c:	3ecccccd 	.word	0x3ecccccd
 8002720:	3f19999a 	.word	0x3f19999a
 8002724:	3f333333 	.word	0x3f333333
 8002728:	3f4ccccd 	.word	0x3f4ccccd
 800272c:	3f666666 	.word	0x3f666666

08002730 <ringInit>:

void storeChar(unsigned char c, Ring_Buffer *buffer);


void ringInit(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
	_rx_buffer1 = &rx_buffer1;
 8002734:	4b18      	ldr	r3, [pc, #96]	; (8002798 <ringInit+0x68>)
 8002736:	4a19      	ldr	r2, [pc, #100]	; (800279c <ringInit+0x6c>)
 8002738:	601a      	str	r2, [r3, #0]
    _tx_buffer1 = &tx_buffer1;
 800273a:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <ringInit+0x70>)
 800273c:	4a19      	ldr	r2, [pc, #100]	; (80027a4 <ringInit+0x74>)
 800273e:	601a      	str	r2, [r3, #0]
    _rx_buffer2 = &rx_buffer2;
 8002740:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <ringInit+0x78>)
 8002742:	4a1a      	ldr	r2, [pc, #104]	; (80027ac <ringInit+0x7c>)
 8002744:	601a      	str	r2, [r3, #0]
    _tx_buffer2 = &tx_buffer2;
 8002746:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <ringInit+0x80>)
 8002748:	4a1a      	ldr	r2, [pc, #104]	; (80027b4 <ringInit+0x84>)
 800274a:	601a      	str	r2, [r3, #0]

    /* Habilita la INTERRUPCIÓN por ERROR del UART (frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_ERR);
 800274c:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <ringInit+0x88>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <ringInit+0x88>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_ERR);
 800275c:	4b17      	ldr	r3, [pc, #92]	; (80027bc <ringInit+0x8c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695a      	ldr	r2, [r3, #20]
 8002762:	4b16      	ldr	r3, [pc, #88]	; (80027bc <ringInit+0x8c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	615a      	str	r2, [r3, #20]

    /* Habilita la INTERRUPCIÓN por REGISTRO DE DATA VACÍO */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_RXNE);
 800276c:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <ringInit+0x88>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <ringInit+0x88>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0220 	orr.w	r2, r2, #32
 800277a:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_RXNE);
 800277c:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <ringInit+0x8c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <ringInit+0x8c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0220 	orr.w	r2, r2, #32
 800278a:	60da      	str	r2, [r3, #12]
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	20000a54 	.word	0x20000a54
 800279c:	20000090 	.word	0x20000090
 80027a0:	20000a58 	.word	0x20000a58
 80027a4:	20000298 	.word	0x20000298
 80027a8:	20000a5c 	.word	0x20000a5c
 80027ac:	200004a0 	.word	0x200004a0
 80027b0:	20000a50 	.word	0x20000a50
 80027b4:	200006a8 	.word	0x200006a8
 80027b8:	20000e08 	.word	0x20000e08
 80027bc:	20000d7c 	.word	0x20000d7c

080027c0 <storeChar>:


void storeChar(unsigned char c, Ring_Buffer *buffer)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	6039      	str	r1, [r7, #0]
 80027ca:	71fb      	strb	r3, [r7, #7]
    int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027d2:	3301      	adds	r3, #1
 80027d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d8:	60fb      	str	r3, [r7, #12]

    // Si queremos almacenar lo recibido justo antes de TAIL, significando que HEAD avanzará hasta la posición de TAIL,
    // se provocará un desbordamiento (overflow) del BUFFER, y, por lo tanto, no se escribirá el caracter o ni avanzaremos HEAD.
    if(i != buffer->tail)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d009      	beq.n	80027fa <storeChar+0x3a>
    {
    	buffer->buffer[buffer->head] = c;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	79f9      	ldrb	r1, [r7, #7]
 80027f0:	54d1      	strb	r1, [r2, r3]
        buffer->head = i;
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }
}
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <UART_peek>:
	}
}


int UART_peek(UART_HandleTypeDef *uart)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a1c      	ldr	r2, [pc, #112]	; (8002884 <UART_peek+0x7c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d114      	bne.n	8002842 <UART_peek+0x3a>
	{
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <UART_peek+0x80>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002820:	4b19      	ldr	r3, [pc, #100]	; (8002888 <UART_peek+0x80>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002828:	429a      	cmp	r2, r3
 800282a:	d102      	bne.n	8002832 <UART_peek+0x2a>
 800282c:	f04f 33ff 	mov.w	r3, #4294967295
 8002830:	e022      	b.n	8002878 <UART_peek+0x70>

		else return _rx_buffer1->buffer[_rx_buffer1->tail];
 8002832:	4b15      	ldr	r3, [pc, #84]	; (8002888 <UART_peek+0x80>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	4b14      	ldr	r3, [pc, #80]	; (8002888 <UART_peek+0x80>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800283e:	5cd3      	ldrb	r3, [r2, r3]
 8002840:	e01a      	b.n	8002878 <UART_peek+0x70>
	}

	else if (uart == PC_UART)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a11      	ldr	r2, [pc, #68]	; (800288c <UART_peek+0x84>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d114      	bne.n	8002874 <UART_peek+0x6c>
	{
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 800284a:	4b11      	ldr	r3, [pc, #68]	; (8002890 <UART_peek+0x88>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002852:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <UART_peek+0x88>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800285a:	429a      	cmp	r2, r3
 800285c:	d102      	bne.n	8002864 <UART_peek+0x5c>
 800285e:	f04f 33ff 	mov.w	r3, #4294967295
 8002862:	e009      	b.n	8002878 <UART_peek+0x70>

		else return _rx_buffer2->buffer[_rx_buffer2->tail];
 8002864:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <UART_peek+0x88>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	4b09      	ldr	r3, [pc, #36]	; (8002890 <UART_peek+0x88>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002870:	5cd3      	ldrb	r3, [r2, r3]
 8002872:	e001      	b.n	8002878 <UART_peek+0x70>
	}

	return -1;
 8002874:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	20000e08 	.word	0x20000e08
 8002888:	20000a54 	.word	0x20000a54
 800288c:	20000d7c 	.word	0x20000d7c
 8002890:	20000a5c 	.word	0x20000a5c

08002894 <UART_read>:


int UART_read(UART_HandleTypeDef *uart)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a29      	ldr	r2, [pc, #164]	; (8002944 <UART_read+0xb0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d121      	bne.n	80028e8 <UART_read+0x54>
	{
		// Si HEAD no está delante de TAIL, no tenemos ningún CARACTER
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 80028a4:	4b28      	ldr	r3, [pc, #160]	; (8002948 <UART_read+0xb4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80028ac:	4b26      	ldr	r3, [pc, #152]	; (8002948 <UART_read+0xb4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d102      	bne.n	80028be <UART_read+0x2a>
 80028b8:	f04f 33ff 	mov.w	r3, #4294967295
 80028bc:	e03c      	b.n	8002938 <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 80028be:	4b22      	ldr	r3, [pc, #136]	; (8002948 <UART_read+0xb4>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	4b21      	ldr	r3, [pc, #132]	; (8002948 <UART_read+0xb4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028ca:	5cd3      	ldrb	r3, [r2, r3]
 80028cc:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 80028ce:	4b1e      	ldr	r3, [pc, #120]	; (8002948 <UART_read+0xb4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <UART_read+0xb4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 80028e4:	7bbb      	ldrb	r3, [r7, #14]
 80028e6:	e027      	b.n	8002938 <UART_read+0xa4>
		}
	}

	else if (uart == PC_UART)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a18      	ldr	r2, [pc, #96]	; (800294c <UART_read+0xb8>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d121      	bne.n	8002934 <UART_read+0xa0>
	{
		// Si HEAD no está delante de TAIL, no tenemos ningún CARACTER
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 80028f0:	4b17      	ldr	r3, [pc, #92]	; (8002950 <UART_read+0xbc>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80028f8:	4b15      	ldr	r3, [pc, #84]	; (8002950 <UART_read+0xbc>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002900:	429a      	cmp	r2, r3
 8002902:	d102      	bne.n	800290a <UART_read+0x76>
 8002904:	f04f 33ff 	mov.w	r3, #4294967295
 8002908:	e016      	b.n	8002938 <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 800290a:	4b11      	ldr	r3, [pc, #68]	; (8002950 <UART_read+0xbc>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <UART_read+0xbc>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002916:	5cd3      	ldrb	r3, [r2, r3]
 8002918:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 800291a:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <UART_read+0xbc>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <UART_read+0xbc>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800292c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	e001      	b.n	8002938 <UART_read+0xa4>
		}
	}

	else return -1;
 8002934:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002938:	4618      	mov	r0, r3
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	20000e08 	.word	0x20000e08
 8002948:	20000a54 	.word	0x20000a54
 800294c:	20000d7c 	.word	0x20000d7c
 8002950:	20000a5c 	.word	0x20000a5c

08002954 <UART_write>:


void UART_write(int c, UART_HandleTypeDef *uart)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
	if (c>=0)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	db54      	blt.n	8002a0e <UART_write+0xba>
	{
		if (uart == WiFi_UART)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	4a2d      	ldr	r2, [pc, #180]	; (8002a1c <UART_write+0xc8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d126      	bne.n	80029ba <UART_write+0x66>
		{
			int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 800296c:	4b2c      	ldr	r3, [pc, #176]	; (8002a20 <UART_write+0xcc>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002974:	3301      	adds	r3, #1
 8002976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800297a:	60bb      	str	r3, [r7, #8]

			// Si el BUFFER de salida está lleno, sólo se puede esperar a la INTERRUPCIÓN que lo vacia */
		    while (i == _tx_buffer1->tail);
 800297c:	bf00      	nop
 800297e:	4b28      	ldr	r3, [pc, #160]	; (8002a20 <UART_write+0xcc>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	429a      	cmp	r2, r3
 800298a:	d0f8      	beq.n	800297e <UART_write+0x2a>

		   _tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 800298c:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <UART_write+0xcc>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b23      	ldr	r3, [pc, #140]	; (8002a20 <UART_write+0xcc>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	b2c9      	uxtb	r1, r1
 800299c:	54d1      	strb	r1, [r2, r3]
		   _tx_buffer1->head = i;
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <UART_write+0xcc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		   // Habilitar la INTERRUPCIÓN de TRANSMISIÓN del UART
		   __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_TXE);
 80029a8:	4b1c      	ldr	r3, [pc, #112]	; (8002a1c <UART_write+0xc8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <UART_write+0xc8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029b6:	60da      	str	r2, [r3, #12]

			// Habilitar la INTERRUPCIÓN de TRANSMISIÓN del UART
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
		}
	}
}
 80029b8:	e029      	b.n	8002a0e <UART_write+0xba>
		else if (uart == PC_UART)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	4a19      	ldr	r2, [pc, #100]	; (8002a24 <UART_write+0xd0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d125      	bne.n	8002a0e <UART_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 80029c2:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <UART_write+0xd4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029ca:	3301      	adds	r3, #1
 80029cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d0:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 80029d2:	bf00      	nop
 80029d4:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <UART_write+0xd4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d0f8      	beq.n	80029d4 <UART_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 80029e2:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <UART_write+0xd4>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <UART_write+0xd4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	b2c9      	uxtb	r1, r1
 80029f2:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 80029f4:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <UART_write+0xd4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
 80029fe:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <UART_write+0xd0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <UART_write+0xd0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a0c:	60da      	str	r2, [r3, #12]
}
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	20000e08 	.word	0x20000e08
 8002a20:	20000a58 	.word	0x20000a58
 8002a24:	20000d7c 	.word	0x20000d7c
 8002a28:	20000a50 	.word	0x20000a50

08002a2c <UART_available>:


int UART_available(UART_HandleTypeDef *uart)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a19      	ldr	r2, [pc, #100]	; (8002a9c <UART_available+0x70>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d111      	bne.n	8002a60 <UART_available+0x34>
 8002a3c:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <UART_available+0x74>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <UART_available+0x74>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a5e:	e017      	b.n	8002a90 <UART_available+0x64>

	else if (uart == PC_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a10      	ldr	r2, [pc, #64]	; (8002aa4 <UART_available+0x78>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d111      	bne.n	8002a8c <UART_available+0x60>
 8002a68:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <UART_available+0x7c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <UART_available+0x7c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a8a:	e001      	b.n	8002a90 <UART_available+0x64>

	return -1;
 8002a8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	20000e08 	.word	0x20000e08
 8002aa0:	20000a54 	.word	0x20000a54
 8002aa4:	20000d7c 	.word	0x20000d7c
 8002aa8:	20000a5c 	.word	0x20000a5c

08002aac <UART_send>:
	return 1;
}


void UART_send (const char *s, UART_HandleTypeDef *uart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
	while(*s!='\0') UART_write(*s++, uart);
 8002ab6:	e007      	b.n	8002ac8 <UART_send+0x1c>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	6839      	ldr	r1, [r7, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff ff46 	bl	8002954 <UART_write>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f3      	bne.n	8002ab8 <UART_send+0xc>
}
 8002ad0:	bf00      	nop
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <UART_copyUpto>:
  while(*s) UART_write(*s++, uart);
}


int UART_copyUpto(char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f7fd fb6f 	bl	80001d0 <strlen>
 8002af2:	4603      	mov	r3, r0
 8002af4:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61bb      	str	r3, [r7, #24]

again:
	while (!UART_available(uart));
 8002afa:	bf00      	nop
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7ff ff95 	bl	8002a2c <UART_available>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f9      	beq.n	8002afc <UART_copyUpto+0x20>

	while (UART_peek(uart) != string[so_far])
 8002b08:	e01f      	b.n	8002b4a <UART_copyUpto+0x6e>
	{
		buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8002b0a:	4b32      	ldr	r3, [pc, #200]	; (8002bd4 <UART_copyUpto+0xf8>)
 8002b0c:	6819      	ldr	r1, [r3, #0]
 8002b0e:	4b31      	ldr	r3, [pc, #196]	; (8002bd4 <UART_copyUpto+0xf8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	68b8      	ldr	r0, [r7, #8]
 8002b1a:	4403      	add	r3, r0
 8002b1c:	5c8a      	ldrb	r2, [r1, r2]
 8002b1e:	701a      	strb	r2, [r3, #0]
		_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8002b20:	4b2c      	ldr	r3, [pc, #176]	; (8002bd4 <UART_copyUpto+0xf8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	4b2a      	ldr	r3, [pc, #168]	; (8002bd4 <UART_copyUpto+0xf8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b32:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		indx++;
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	61bb      	str	r3, [r7, #24]
		while (!UART_available(uart));
 8002b3c:	bf00      	nop
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff ff74 	bl	8002a2c <UART_available>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f9      	beq.n	8002b3e <UART_copyUpto+0x62>
	while (UART_peek(uart) != string[so_far])
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff fe5c 	bl	8002808 <UART_peek>
 8002b50:	4601      	mov	r1, r0
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	4299      	cmp	r1, r3
 8002b5c:	d1d5      	bne.n	8002b0a <UART_copyUpto+0x2e>

	}

	while (UART_peek(uart) == string [so_far])
 8002b5e:	e01b      	b.n	8002b98 <UART_copyUpto+0xbc>
	{
		so_far++;
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	3301      	adds	r3, #1
 8002b64:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = UART_read(uart);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff fe94 	bl	8002894 <UART_read>
 8002b6c:	4601      	mov	r1, r0
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	61ba      	str	r2, [r7, #24]
 8002b74:	461a      	mov	r2, r3
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	4413      	add	r3, r2
 8002b7a:	b2ca      	uxtb	r2, r1
 8002b7c:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8002b7e:	69fa      	ldr	r2, [r7, #28]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d101      	bne.n	8002b8a <UART_copyUpto+0xae>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e01f      	b.n	8002bca <UART_copyUpto+0xee>
		while (!UART_available(uart));
 8002b8a:	bf00      	nop
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff ff4d 	bl	8002a2c <UART_available>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f9      	beq.n	8002b8c <UART_copyUpto+0xb0>
	while (UART_peek(uart) == string [so_far])
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff fe35 	bl	8002808 <UART_peek>
 8002b9e:	4601      	mov	r1, r0
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	4299      	cmp	r1, r3
 8002baa:	d0d9      	beq.n	8002b60 <UART_copyUpto+0x84>
	}

	if (so_far != len)
 8002bac:	69fa      	ldr	r2, [r7, #28]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d002      	beq.n	8002bba <UART_copyUpto+0xde>
	{
		so_far = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61fb      	str	r3, [r7, #28]
		goto again;
 8002bb8:	e79f      	b.n	8002afa <UART_copyUpto+0x1e>
	}

	if (so_far == len) return 1;
 8002bba:	69fa      	ldr	r2, [r7, #28]
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d101      	bne.n	8002bc6 <UART_copyUpto+0xea>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e001      	b.n	8002bca <UART_copyUpto+0xee>

	else return -1;
 8002bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3720      	adds	r7, #32
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000a54 	.word	0x20000a54

08002bd8 <UART_waitFor>:


int UART_waitFor(char *string,UART_HandleTypeDef *uart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fd faf2 	bl	80001d0 <strlen>
 8002bec:	4603      	mov	r3, r0
 8002bee:	60bb      	str	r3, [r7, #8]

again_device:
	while (!UART_available(uart));
 8002bf0:	bf00      	nop
 8002bf2:	6838      	ldr	r0, [r7, #0]
 8002bf4:	f7ff ff1a 	bl	8002a2c <UART_available>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f9      	beq.n	8002bf2 <UART_waitFor+0x1a>

	if (UART_peek(uart) != string[so_far])
 8002bfe:	6838      	ldr	r0, [r7, #0]
 8002c00:	f7ff fe02 	bl	8002808 <UART_peek>
 8002c04:	4601      	mov	r1, r0
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	4299      	cmp	r1, r3
 8002c10:	d01e      	beq.n	8002c50 <UART_waitFor+0x78>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 8002c12:	4b1e      	ldr	r3, [pc, #120]	; (8002c8c <UART_waitFor+0xb4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <UART_waitFor+0xb4>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 8002c28:	e7e2      	b.n	8002bf0 <UART_waitFor+0x18>

	}

	while (UART_peek(uart) == string [so_far])
	{
		so_far++;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
		UART_read(uart);
 8002c30:	6838      	ldr	r0, [r7, #0]
 8002c32:	f7ff fe2f 	bl	8002894 <UART_read>
		if (so_far == len) return 1;
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d101      	bne.n	8002c42 <UART_waitFor+0x6a>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e01f      	b.n	8002c82 <UART_waitFor+0xaa>
		while (!UART_available(uart));
 8002c42:	bf00      	nop
 8002c44:	6838      	ldr	r0, [r7, #0]
 8002c46:	f7ff fef1 	bl	8002a2c <UART_available>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0f9      	beq.n	8002c44 <UART_waitFor+0x6c>
	while (UART_peek(uart) == string [so_far])
 8002c50:	6838      	ldr	r0, [r7, #0]
 8002c52:	f7ff fdd9 	bl	8002808 <UART_peek>
 8002c56:	4601      	mov	r1, r0
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	4299      	cmp	r1, r3
 8002c62:	d0e2      	beq.n	8002c2a <UART_waitFor+0x52>
	}

	if (so_far != len)
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d002      	beq.n	8002c72 <UART_waitFor+0x9a>
	{
		so_far = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
		goto again_device;
 8002c70:	e7be      	b.n	8002bf0 <UART_waitFor+0x18>
	}

	if (so_far == len) return 1;
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d101      	bne.n	8002c7e <UART_waitFor+0xa6>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e001      	b.n	8002c82 <UART_waitFor+0xaa>

	else return -1;
 8002c7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000a54 	.word	0x20000a54

08002c90 <UART_isr>:


void UART_isr(UART_HandleTypeDef *huart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
	uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	613b      	str	r3, [r7, #16]

	/* Si DR (DATA REGISTER) no está vacío y RX INT está habilitado */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d023      	beq.n	8002cfa <UART_isr+0x6a>
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01e      	beq.n	8002cfa <UART_isr+0x6a>
    	    	                USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	************************************************************************************************************/

		huart->Instance->SR;                   // Leer SR (STATUS REGISTER)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR; // Leer DR (DATA REGISTER)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	73fb      	strb	r3, [r7, #15]

        if (huart == WiFi_UART)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a3f      	ldr	r2, [pc, #252]	; (8002dcc <UART_isr+0x13c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d107      	bne.n	8002ce2 <UART_isr+0x52>
        {
        	storeChar(c, _rx_buffer1); // Almacena DATA en el BUFFER
 8002cd2:	4b3f      	ldr	r3, [pc, #252]	; (8002dd0 <UART_isr+0x140>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fd70 	bl	80027c0 <storeChar>
        else if (huart == PC_UART)
        {
        	storeChar(c, _rx_buffer2); // Almacena DATA en el BUFFER
        }

        return;
 8002ce0:	e06d      	b.n	8002dbe <UART_isr+0x12e>
        else if (huart == PC_UART)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a3b      	ldr	r2, [pc, #236]	; (8002dd4 <UART_isr+0x144>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d169      	bne.n	8002dbe <UART_isr+0x12e>
        	storeChar(c, _rx_buffer2); // Almacena DATA en el BUFFER
 8002cea:	4b3b      	ldr	r3, [pc, #236]	; (8002dd8 <UART_isr+0x148>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fd64 	bl	80027c0 <storeChar>
        return;
 8002cf8:	e061      	b.n	8002dbe <UART_isr+0x12e>
    }

    /* Si la INTERRUPCIÓN se produce por el TRANSMIT DATA REGISTER EMPTY */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d05f      	beq.n	8002dc4 <UART_isr+0x134>
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d05a      	beq.n	8002dc4 <UART_isr+0x134>
    {
    	if (huart == WiFi_UART)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a2e      	ldr	r2, [pc, #184]	; (8002dcc <UART_isr+0x13c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d127      	bne.n	8002d66 <UART_isr+0xd6>
    	{
    		if(tx_buffer1.head == tx_buffer1.tail)
 8002d16:	4b31      	ldr	r3, [pc, #196]	; (8002ddc <UART_isr+0x14c>)
 8002d18:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002d1c:	4b2f      	ldr	r3, [pc, #188]	; (8002ddc <UART_isr+0x14c>)
 8002d1e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d108      	bne.n	8002d38 <UART_isr+0xa8>
    	    {
    			// BUFFER vacío, inhabilitamos la INTERRUPCIÓN
    	        __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d34:	60da      	str	r2, [r3, #12]
        	     huart->Instance->DR = c;

        	}
        }

    	return;
 8002d36:	e044      	b.n	8002dc2 <UART_isr+0x132>
    			unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8002d38:	4b28      	ldr	r3, [pc, #160]	; (8002ddc <UART_isr+0x14c>)
 8002d3a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002d3e:	4a27      	ldr	r2, [pc, #156]	; (8002ddc <UART_isr+0x14c>)
 8002d40:	5cd3      	ldrb	r3, [r2, r3]
 8002d42:	737b      	strb	r3, [r7, #13]
    			tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8002d44:	4b25      	ldr	r3, [pc, #148]	; (8002ddc <UART_isr+0x14c>)
 8002d46:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d50:	4a22      	ldr	r2, [pc, #136]	; (8002ddc <UART_isr+0x14c>)
 8002d52:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    			huart->Instance->SR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
    			huart->Instance->DR = c;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	7b7a      	ldrb	r2, [r7, #13]
 8002d62:	605a      	str	r2, [r3, #4]
    	return;
 8002d64:	e02d      	b.n	8002dc2 <UART_isr+0x132>
    	else if (huart == PC_UART)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a1a      	ldr	r2, [pc, #104]	; (8002dd4 <UART_isr+0x144>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d129      	bne.n	8002dc2 <UART_isr+0x132>
    		if(tx_buffer2.head == tx_buffer2.tail)
 8002d6e:	4b1c      	ldr	r3, [pc, #112]	; (8002de0 <UART_isr+0x150>)
 8002d70:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002d74:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <UART_isr+0x150>)
 8002d76:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d108      	bne.n	8002d90 <UART_isr+0x100>
        	    __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d8c:	60da      	str	r2, [r3, #12]
    	return;
 8002d8e:	e018      	b.n	8002dc2 <UART_isr+0x132>
        	    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8002d90:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <UART_isr+0x150>)
 8002d92:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002d96:	4a12      	ldr	r2, [pc, #72]	; (8002de0 <UART_isr+0x150>)
 8002d98:	5cd3      	ldrb	r3, [r2, r3]
 8002d9a:	73bb      	strb	r3, [r7, #14]
        	    tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8002d9c:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <UART_isr+0x150>)
 8002d9e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002da2:	3301      	adds	r3, #1
 8002da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da8:	4a0d      	ldr	r2, [pc, #52]	; (8002de0 <UART_isr+0x150>)
 8002daa:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	     huart->Instance->SR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
        	     huart->Instance->DR = c;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	7bba      	ldrb	r2, [r7, #14]
 8002dba:	605a      	str	r2, [r3, #4]
    	return;
 8002dbc:	e001      	b.n	8002dc2 <UART_isr+0x132>
        return;
 8002dbe:	bf00      	nop
 8002dc0:	e000      	b.n	8002dc4 <UART_isr+0x134>
    	return;
 8002dc2:	bf00      	nop
    }
}
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000e08 	.word	0x20000e08
 8002dd0:	20000a54 	.word	0x20000a54
 8002dd4:	20000d7c 	.word	0x20000d7c
 8002dd8:	20000a5c 	.word	0x20000a5c
 8002ddc:	20000298 	.word	0x20000298
 8002de0:	200006a8 	.word	0x200006a8

08002de4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin==B_Timbre_Pin)
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d102      	bne.n	8002dfa <HAL_GPIO_EXTI_Callback+0x16>
	{
		timbre = 1;
 8002df4:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <HAL_GPIO_EXTI_Callback+0x48>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	601a      	str	r2, [r3, #0]
	}
    if (GPIO_Pin==B_Stop_Pin)
 8002dfa:	88fb      	ldrh	r3, [r7, #6]
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d102      	bne.n	8002e06 <HAL_GPIO_EXTI_Callback+0x22>
    {
    	stop = 1;
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin==S_Int_Pin)
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d102      	bne.n	8002e12 <HAL_GPIO_EXTI_Callback+0x2e>
    {
        interior = 1;
 8002e0c:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <HAL_GPIO_EXTI_Callback+0x50>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin==S_Ext_Pin)
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d102      	bne.n	8002e1e <HAL_GPIO_EXTI_Callback+0x3a>
    {
        exterior = 1;
 8002e18:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <HAL_GPIO_EXTI_Callback+0x54>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
    }
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	200008b0 	.word	0x200008b0
 8002e30:	200008b4 	.word	0x200008b4
 8002e34:	200008b8 	.word	0x200008b8
 8002e38:	200008bc 	.word	0x200008bc

08002e3c <debouncer>:

int debouncer(volatile int* button_int, GPIO_TypeDef* GPIO_port, uint16_t GPIO_number) // Control de los rebotes
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	4613      	mov	r3, r2
 8002e48:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count=0;
	static int counter=0;

	if (*button_int==1)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d13b      	bne.n	8002eca <debouncer+0x8e>
	{
		if (button_count==0)
 8002e52:	4b20      	ldr	r3, [pc, #128]	; (8002ed4 <debouncer+0x98>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10b      	bne.n	8002e72 <debouncer+0x36>
		{
			counter=HAL_GetTick();
 8002e5a:	f001 feff 	bl	8004c5c <HAL_GetTick>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	461a      	mov	r2, r3
 8002e62:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <debouncer+0x9c>)
 8002e64:	601a      	str	r2, [r3, #0]
			button_count++;
 8002e66:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <debouncer+0x98>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <debouncer+0x98>)
 8002e70:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick()-counter>=20)
 8002e72:	f001 fef3 	bl	8004c5c <HAL_GetTick>
 8002e76:	4603      	mov	r3, r0
 8002e78:	4a17      	ldr	r2, [pc, #92]	; (8002ed8 <debouncer+0x9c>)
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	1a9b      	subs	r3, r3, r2
 8002e7e:	2b13      	cmp	r3, #19
 8002e80:	d923      	bls.n	8002eca <debouncer+0x8e>
		{
			counter=HAL_GetTick();
 8002e82:	f001 feeb 	bl	8004c5c <HAL_GetTick>
 8002e86:	4603      	mov	r3, r0
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4b13      	ldr	r3, [pc, #76]	; (8002ed8 <debouncer+0x9c>)
 8002e8c:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number)!=1)
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	4619      	mov	r1, r3
 8002e92:	68b8      	ldr	r0, [r7, #8]
 8002e94:	f002 fe1e 	bl	8005ad4 <HAL_GPIO_ReadPin>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d003      	beq.n	8002ea6 <debouncer+0x6a>
			{
				button_count=1;
 8002e9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <debouncer+0x98>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]
 8002ea4:	e005      	b.n	8002eb2 <debouncer+0x76>
			}
			else
			{
				button_count++;
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <debouncer+0x98>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <debouncer+0x98>)
 8002eb0:	701a      	strb	r2, [r3, #0]
			}
			if (button_count==4 ) // Periodo antirebotes
 8002eb2:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <debouncer+0x98>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d107      	bne.n	8002eca <debouncer+0x8e>
			{
				button_count=0;
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <debouncer+0x98>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	701a      	strb	r2, [r3, #0]
				*button_int=0;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
				return 1;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <debouncer+0x90>
			}
		}
	}
	return 0;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	200008ec 	.word	0x200008ec
 8002ed8:	200008f0 	.word	0x200008f0

08002edc <play_Timbre>:


void play_Timbre(void){
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0

	uint8_t tone;

	tone = 25;
 8002ee2:	2319      	movs	r3, #25
 8002ee4:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	005a      	lsls	r2, r3, #1
 8002eea:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <play_Timbre+0x68>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <play_Timbre+0x68>)
 8002ef8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 8002efa:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <play_Timbre+0x68>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	79fa      	ldrb	r2, [r7, #7]
 8002f00:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(300);
 8002f02:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002f06:	f001 feb5 	bl	8004c74 <HAL_Delay>

	tone = 40;
 8002f0a:	2328      	movs	r3, #40	; 0x28
 8002f0c:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	005a      	lsls	r2, r3, #1
 8002f12:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <play_Timbre+0x68>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <play_Timbre+0x68>)
 8002f20:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 8002f22:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <play_Timbre+0x68>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	79fa      	ldrb	r2, [r7, #7]
 8002f28:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 8002f2a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002f2e:	f001 fea1 	bl	8004c74 <HAL_Delay>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8002f32:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <play_Timbre+0x68>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2200      	movs	r2, #0
 8002f38:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000aa8 	.word	0x20000aa8

08002f48 <play_Alarma>:


void play_Alarma(){
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0

	uint8_t tone;

	for(tone = 40; tone >= 10; tone = tone-10){
 8002f4e:	2328      	movs	r3, #40	; 0x28
 8002f50:	71fb      	strb	r3, [r7, #7]
 8002f52:	e014      	b.n	8002f7e <play_Alarma+0x36>
		__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	005a      	lsls	r2, r3, #1
 8002f58:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <play_Alarma+0x48>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	461a      	mov	r2, r3
 8002f64:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <play_Alarma+0x48>)
 8002f66:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 8002f68:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <play_Alarma+0x48>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	79fa      	ldrb	r2, [r7, #7]
 8002f6e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(300);
 8002f70:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002f74:	f001 fe7e 	bl	8004c74 <HAL_Delay>
	for(tone = 40; tone >= 10; tone = tone-10){
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	3b0a      	subs	r3, #10
 8002f7c:	71fb      	strb	r3, [r7, #7]
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	2b09      	cmp	r3, #9
 8002f82:	d8e7      	bhi.n	8002f54 <play_Alarma+0xc>
	}
}
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000aa8 	.word	0x20000aa8

08002f94 <delay>:
	}
}


/*----------- Delay en Microsegundos -----------*/
void delay(uint16_t time){
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim6,0);
 8002f9e:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <delay+0x30>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim6))<time);
 8002fa6:	bf00      	nop
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <delay+0x30>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fae:	88fb      	ldrh	r3, [r7, #6]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d3f9      	bcc.n	8002fa8 <delay+0x14>
}
 8002fb4:	bf00      	nop
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	20000ca4 	.word	0x20000ca4

08002fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fcc:	f001 fde0 	bl	8004b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fd0:	f000 faf4 	bl	80035bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fd4:	f001 f850 	bl	8004078 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002fd8:	f000 ffd0 	bl	8003f7c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8002fdc:	f001 f822 	bl	8004024 <MX_USART6_UART_Init>
  MX_TIM5_Init();
 8002fe0:	f000 fe94 	bl	8003d0c <MX_TIM5_Init>
  MX_TIM1_Init();
 8002fe4:	f000 fc4a 	bl	800387c <MX_TIM1_Init>
  MX_TIM4_Init();
 8002fe8:	f000 fe1a 	bl	8003c20 <MX_TIM4_Init>
  MX_TIM2_Init();
 8002fec:	f000 fcfe 	bl	80039ec <MX_TIM2_Init>
  MX_TIM3_Init();
 8002ff0:	f000 fd88 	bl	8003b04 <MX_TIM3_Init>
  MX_TIM8_Init();
 8002ff4:	f000 ff0e 	bl	8003e14 <MX_TIM8_Init>
  MX_TIM9_Init();
 8002ff8:	f000 ff5c 	bl	8003eb4 <MX_TIM9_Init>
  MX_TIM6_Init();
 8002ffc:	f000 fed4 	bl	8003da8 <MX_TIM6_Init>
  MX_ADC1_Init();
 8003000:	f000 fb46 	bl	8003690 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003004:	f000 fb96 	bl	8003734 <MX_ADC2_Init>
  MX_ADC3_Init();
 8003008:	f000 fbe6 	bl	80037d8 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 800300c:	f000 ffe0 	bl	8003fd0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // LED RGB Gaming
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003010:	2100      	movs	r1, #0
 8003012:	48a8      	ldr	r0, [pc, #672]	; (80032b4 <main+0x2ec>)
 8003014:	f003 fb2e 	bl	8006674 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003018:	2104      	movs	r1, #4
 800301a:	48a6      	ldr	r0, [pc, #664]	; (80032b4 <main+0x2ec>)
 800301c:	f003 fb2a 	bl	8006674 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003020:	2108      	movs	r1, #8
 8003022:	48a4      	ldr	r0, [pc, #656]	; (80032b4 <main+0x2ec>)
 8003024:	f003 fb26 	bl	8006674 <HAL_TIM_PWM_Start>
  // Servo Parcela
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003028:	2100      	movs	r1, #0
 800302a:	48a3      	ldr	r0, [pc, #652]	; (80032b8 <main+0x2f0>)
 800302c:	f003 fb22 	bl	8006674 <HAL_TIM_PWM_Start>
  // Servo Garaje
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8003030:	2104      	movs	r1, #4
 8003032:	48a1      	ldr	r0, [pc, #644]	; (80032b8 <main+0x2f0>)
 8003034:	f003 fb1e 	bl	8006674 <HAL_TIM_PWM_Start>
  // Servo Tendedero
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8003038:	2108      	movs	r1, #8
 800303a:	489f      	ldr	r0, [pc, #636]	; (80032b8 <main+0x2f0>)
 800303c:	f003 fb1a 	bl	8006674 <HAL_TIM_PWM_Start>
  // Servo Salón
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003040:	210c      	movs	r1, #12
 8003042:	489e      	ldr	r0, [pc, #632]	; (80032bc <main+0x2f4>)
 8003044:	f003 fb16 	bl	8006674 <HAL_TIM_PWM_Start>
  // Servo Dormitorio
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003048:	2104      	movs	r1, #4
 800304a:	489c      	ldr	r0, [pc, #624]	; (80032bc <main+0x2f4>)
 800304c:	f003 fb12 	bl	8006674 <HAL_TIM_PWM_Start>
  // Servo Oficina
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003050:	2108      	movs	r1, #8
 8003052:	489a      	ldr	r0, [pc, #616]	; (80032bc <main+0x2f4>)
 8003054:	f003 fb0e 	bl	8006674 <HAL_TIM_PWM_Start>
  // DC Salón
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8003058:	2100      	movs	r1, #0
 800305a:	4899      	ldr	r0, [pc, #612]	; (80032c0 <main+0x2f8>)
 800305c:	f003 fb0a 	bl	8006674 <HAL_TIM_PWM_Start>
  // Zumbador
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003060:	2100      	movs	r1, #0
 8003062:	4898      	ldr	r0, [pc, #608]	; (80032c4 <main+0x2fc>)
 8003064:	f003 fb06 	bl	8006674 <HAL_TIM_PWM_Start>

  /*----------- Útil para Sensor DHT11/22 -----------*/
  HAL_TIM_Base_Start(&htim6);
 8003068:	4897      	ldr	r0, [pc, #604]	; (80032c8 <main+0x300>)
 800306a:	f003 fa41 	bl	80064f0 <HAL_TIM_Base_Start>

  /*----------- Inicialización LDR & HW390 & Lluvia -----------*/
  HAL_ADC_Start(&hadc1); // LDR
 800306e:	4897      	ldr	r0, [pc, #604]	; (80032cc <main+0x304>)
 8003070:	f001 fe68 	bl	8004d44 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2); // HW-390
 8003074:	4896      	ldr	r0, [pc, #600]	; (80032d0 <main+0x308>)
 8003076:	f001 fe65 	bl	8004d44 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3); // Lluvia
 800307a:	4896      	ldr	r0, [pc, #600]	; (80032d4 <main+0x30c>)
 800307c:	f001 fe62 	bl	8004d44 <HAL_ADC_Start>

  //__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
  ESP_Init("iPhone Carmela","pistacho");
 8003080:	4995      	ldr	r1, [pc, #596]	; (80032d8 <main+0x310>)
 8003082:	4896      	ldr	r0, [pc, #600]	; (80032dc <main+0x314>)
 8003084:	f7fe f802 	bl	800108c <ESP_Init>
  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	ESP_messageHandler();
 8003088:	f7fe f92c 	bl	80012e4 <ESP_messageHandler>

		// TIMBRE
		if (debouncer(&timbre, B_Timbre_GPIO_Port, B_Timbre_Pin)){
 800308c:	2201      	movs	r2, #1
 800308e:	4994      	ldr	r1, [pc, #592]	; (80032e0 <main+0x318>)
 8003090:	4894      	ldr	r0, [pc, #592]	; (80032e4 <main+0x31c>)
 8003092:	f7ff fed3 	bl	8002e3c <debouncer>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <main+0xd8>
			play_Timbre();
 800309c:	f7ff ff1e 	bl	8002edc <play_Timbre>

		// STOP ALARMA
		// Conexión Wi-Fi

		// ALARMA
		if (debouncer(&interior, S_Int_GPIO_Port, S_Int_Pin)){
 80030a0:	2208      	movs	r2, #8
 80030a2:	498f      	ldr	r1, [pc, #572]	; (80032e0 <main+0x318>)
 80030a4:	4890      	ldr	r0, [pc, #576]	; (80032e8 <main+0x320>)
 80030a6:	f7ff fec9 	bl	8002e3c <debouncer>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <main+0xf4>
			if(vSeg[0] == '1') play_Alarma();
 80030b0:	4b8e      	ldr	r3, [pc, #568]	; (80032ec <main+0x324>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b31      	cmp	r3, #49	; 0x31
 80030b6:	d101      	bne.n	80030bc <main+0xf4>
 80030b8:	f7ff ff46 	bl	8002f48 <play_Alarma>
		}
		if (debouncer(&exterior, S_Ext_GPIO_Port, S_Ext_Pin)){
 80030bc:	2202      	movs	r2, #2
 80030be:	4988      	ldr	r1, [pc, #544]	; (80032e0 <main+0x318>)
 80030c0:	488b      	ldr	r0, [pc, #556]	; (80032f0 <main+0x328>)
 80030c2:	f7ff febb 	bl	8002e3c <debouncer>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <main+0x110>
			if(vSeg[1] == '1') play_Alarma();
 80030cc:	4b87      	ldr	r3, [pc, #540]	; (80032ec <main+0x324>)
 80030ce:	785b      	ldrb	r3, [r3, #1]
 80030d0:	2b31      	cmp	r3, #49	; 0x31
 80030d2:	d101      	bne.n	80030d8 <main+0x110>
 80030d4:	f7ff ff38 	bl	8002f48 <play_Alarma>
		}

		// PUERTA PARCELA (90)
		if(vVent[0]=='1' || vExt[4]=='1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 92);
 80030d8:	4b86      	ldr	r3, [pc, #536]	; (80032f4 <main+0x32c>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b31      	cmp	r3, #49	; 0x31
 80030de:	d003      	beq.n	80030e8 <main+0x120>
 80030e0:	4b85      	ldr	r3, [pc, #532]	; (80032f8 <main+0x330>)
 80030e2:	791b      	ldrb	r3, [r3, #4]
 80030e4:	2b31      	cmp	r3, #49	; 0x31
 80030e6:	d103      	bne.n	80030f0 <main+0x128>
 80030e8:	4b73      	ldr	r3, [pc, #460]	; (80032b8 <main+0x2f0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	225c      	movs	r2, #92	; 0x5c
 80030ee:	635a      	str	r2, [r3, #52]	; 0x34
		if(vVent[0]=='0' || vExt[4]=='0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89);
 80030f0:	4b80      	ldr	r3, [pc, #512]	; (80032f4 <main+0x32c>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b30      	cmp	r3, #48	; 0x30
 80030f6:	d003      	beq.n	8003100 <main+0x138>
 80030f8:	4b7f      	ldr	r3, [pc, #508]	; (80032f8 <main+0x330>)
 80030fa:	791b      	ldrb	r3, [r3, #4]
 80030fc:	2b30      	cmp	r3, #48	; 0x30
 80030fe:	d103      	bne.n	8003108 <main+0x140>
 8003100:	4b6d      	ldr	r3, [pc, #436]	; (80032b8 <main+0x2f0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2259      	movs	r2, #89	; 0x59
 8003106:	635a      	str	r2, [r3, #52]	; 0x34

		// PUERTA GARAJE (90)
		if(vVent[1]=='1' || vGar[1] == '1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 91); // más rápido a 30
 8003108:	4b7a      	ldr	r3, [pc, #488]	; (80032f4 <main+0x32c>)
 800310a:	785b      	ldrb	r3, [r3, #1]
 800310c:	2b31      	cmp	r3, #49	; 0x31
 800310e:	d003      	beq.n	8003118 <main+0x150>
 8003110:	4b7a      	ldr	r3, [pc, #488]	; (80032fc <main+0x334>)
 8003112:	785b      	ldrb	r3, [r3, #1]
 8003114:	2b31      	cmp	r3, #49	; 0x31
 8003116:	d103      	bne.n	8003120 <main+0x158>
 8003118:	4b67      	ldr	r3, [pc, #412]	; (80032b8 <main+0x2f0>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	225b      	movs	r2, #91	; 0x5b
 800311e:	639a      	str	r2, [r3, #56]	; 0x38
		if(vVent[1]=='0' || vGar[1] == '0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 89);
 8003120:	4b74      	ldr	r3, [pc, #464]	; (80032f4 <main+0x32c>)
 8003122:	785b      	ldrb	r3, [r3, #1]
 8003124:	2b30      	cmp	r3, #48	; 0x30
 8003126:	d003      	beq.n	8003130 <main+0x168>
 8003128:	4b74      	ldr	r3, [pc, #464]	; (80032fc <main+0x334>)
 800312a:	785b      	ldrb	r3, [r3, #1]
 800312c:	2b30      	cmp	r3, #48	; 0x30
 800312e:	d103      	bne.n	8003138 <main+0x170>
 8003130:	4b61      	ldr	r3, [pc, #388]	; (80032b8 <main+0x2f0>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2259      	movs	r2, #89	; 0x59
 8003136:	639a      	str	r2, [r3, #56]	; 0x38

		// TOLDO TENDEDERO (90)
		if(vExt[0]=='1'){
 8003138:	4b6f      	ldr	r3, [pc, #444]	; (80032f8 <main+0x330>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b31      	cmp	r3, #49	; 0x31
 800313e:	d10b      	bne.n	8003158 <main+0x190>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 91);
 8003140:	4b5d      	ldr	r3, [pc, #372]	; (80032b8 <main+0x2f0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	225b      	movs	r2, #91	; 0x5b
 8003146:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8003148:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800314c:	f001 fd92 	bl	8004c74 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90);
 8003150:	4b59      	ldr	r3, [pc, #356]	; (80032b8 <main+0x2f0>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	225a      	movs	r2, #90	; 0x5a
 8003156:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		if(vExt[0]=='0'){
 8003158:	4b67      	ldr	r3, [pc, #412]	; (80032f8 <main+0x330>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b30      	cmp	r3, #48	; 0x30
 800315e:	d10b      	bne.n	8003178 <main+0x1b0>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 88);
 8003160:	4b55      	ldr	r3, [pc, #340]	; (80032b8 <main+0x2f0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2258      	movs	r2, #88	; 0x58
 8003166:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8003168:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800316c:	f001 fd82 	bl	8004c74 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90);
 8003170:	4b51      	ldr	r3, [pc, #324]	; (80032b8 <main+0x2f0>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	225a      	movs	r2, #90	; 0x5a
 8003176:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		vExt[0]='x';
 8003178:	4b5f      	ldr	r3, [pc, #380]	; (80032f8 <main+0x330>)
 800317a:	2278      	movs	r2, #120	; 0x78
 800317c:	701a      	strb	r2, [r3, #0]

		// VENTANA SALÓN (90)
		if(vVent[2]=='1' || vSal[5]=='1') {
 800317e:	4b5d      	ldr	r3, [pc, #372]	; (80032f4 <main+0x32c>)
 8003180:	789b      	ldrb	r3, [r3, #2]
 8003182:	2b31      	cmp	r3, #49	; 0x31
 8003184:	d003      	beq.n	800318e <main+0x1c6>
 8003186:	4b5e      	ldr	r3, [pc, #376]	; (8003300 <main+0x338>)
 8003188:	795b      	ldrb	r3, [r3, #5]
 800318a:	2b31      	cmp	r3, #49	; 0x31
 800318c:	d10b      	bne.n	80031a6 <main+0x1de>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 91);
 800318e:	4b4b      	ldr	r3, [pc, #300]	; (80032bc <main+0x2f4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	225b      	movs	r2, #91	; 0x5b
 8003194:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(3000);
 8003196:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800319a:	f001 fd6b 	bl	8004c74 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 90);
 800319e:	4b47      	ldr	r3, [pc, #284]	; (80032bc <main+0x2f4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	225a      	movs	r2, #90	; 0x5a
 80031a4:	641a      	str	r2, [r3, #64]	; 0x40
		}
		if(vVent[2]=='0'|| vSal[5]=='0') {
 80031a6:	4b53      	ldr	r3, [pc, #332]	; (80032f4 <main+0x32c>)
 80031a8:	789b      	ldrb	r3, [r3, #2]
 80031aa:	2b30      	cmp	r3, #48	; 0x30
 80031ac:	d003      	beq.n	80031b6 <main+0x1ee>
 80031ae:	4b54      	ldr	r3, [pc, #336]	; (8003300 <main+0x338>)
 80031b0:	795b      	ldrb	r3, [r3, #5]
 80031b2:	2b30      	cmp	r3, #48	; 0x30
 80031b4:	d10b      	bne.n	80031ce <main+0x206>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 89);
 80031b6:	4b41      	ldr	r3, [pc, #260]	; (80032bc <main+0x2f4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2259      	movs	r2, #89	; 0x59
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(3000);
 80031be:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80031c2:	f001 fd57 	bl	8004c74 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 90);
 80031c6:	4b3d      	ldr	r3, [pc, #244]	; (80032bc <main+0x2f4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	225a      	movs	r2, #90	; 0x5a
 80031cc:	641a      	str	r2, [r3, #64]	; 0x40
		}
		vVent[2]='x';
 80031ce:	4b49      	ldr	r3, [pc, #292]	; (80032f4 <main+0x32c>)
 80031d0:	2278      	movs	r2, #120	; 0x78
 80031d2:	709a      	strb	r2, [r3, #2]
		vSal[5]='x';
 80031d4:	4b4a      	ldr	r3, [pc, #296]	; (8003300 <main+0x338>)
 80031d6:	2278      	movs	r2, #120	; 0x78
 80031d8:	715a      	strb	r2, [r3, #5]

		// VENTANA DORMITORIO (90)
		if(vVent[3]=='1' || vDor[3]=='1') {
 80031da:	4b46      	ldr	r3, [pc, #280]	; (80032f4 <main+0x32c>)
 80031dc:	78db      	ldrb	r3, [r3, #3]
 80031de:	2b31      	cmp	r3, #49	; 0x31
 80031e0:	d003      	beq.n	80031ea <main+0x222>
 80031e2:	4b48      	ldr	r3, [pc, #288]	; (8003304 <main+0x33c>)
 80031e4:	78db      	ldrb	r3, [r3, #3]
 80031e6:	2b31      	cmp	r3, #49	; 0x31
 80031e8:	d10b      	bne.n	8003202 <main+0x23a>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 92);
 80031ea:	4b34      	ldr	r3, [pc, #208]	; (80032bc <main+0x2f4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	225c      	movs	r2, #92	; 0x5c
 80031f0:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(3000);
 80031f2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80031f6:	f001 fd3d 	bl	8004c74 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 90);
 80031fa:	4b30      	ldr	r3, [pc, #192]	; (80032bc <main+0x2f4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	225a      	movs	r2, #90	; 0x5a
 8003200:	639a      	str	r2, [r3, #56]	; 0x38
		}
		if(vVent[3]=='0' || vDor[3]=='0') {
 8003202:	4b3c      	ldr	r3, [pc, #240]	; (80032f4 <main+0x32c>)
 8003204:	78db      	ldrb	r3, [r3, #3]
 8003206:	2b30      	cmp	r3, #48	; 0x30
 8003208:	d003      	beq.n	8003212 <main+0x24a>
 800320a:	4b3e      	ldr	r3, [pc, #248]	; (8003304 <main+0x33c>)
 800320c:	78db      	ldrb	r3, [r3, #3]
 800320e:	2b30      	cmp	r3, #48	; 0x30
 8003210:	d10b      	bne.n	800322a <main+0x262>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 89);
 8003212:	4b2a      	ldr	r3, [pc, #168]	; (80032bc <main+0x2f4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2259      	movs	r2, #89	; 0x59
 8003218:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(3000);
 800321a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800321e:	f001 fd29 	bl	8004c74 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 90);
 8003222:	4b26      	ldr	r3, [pc, #152]	; (80032bc <main+0x2f4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	225a      	movs	r2, #90	; 0x5a
 8003228:	639a      	str	r2, [r3, #56]	; 0x38
		}
		vVent[3]='x';
 800322a:	4b32      	ldr	r3, [pc, #200]	; (80032f4 <main+0x32c>)
 800322c:	2278      	movs	r2, #120	; 0x78
 800322e:	70da      	strb	r2, [r3, #3]
		vDor[3]='x';
 8003230:	4b34      	ldr	r3, [pc, #208]	; (8003304 <main+0x33c>)
 8003232:	2278      	movs	r2, #120	; 0x78
 8003234:	70da      	strb	r2, [r3, #3]

		// VENTANA OFICINA (90)
		if(vVent[4]=='1' || vOfi[11]=='1') {
 8003236:	4b2f      	ldr	r3, [pc, #188]	; (80032f4 <main+0x32c>)
 8003238:	791b      	ldrb	r3, [r3, #4]
 800323a:	2b31      	cmp	r3, #49	; 0x31
 800323c:	d003      	beq.n	8003246 <main+0x27e>
 800323e:	4b32      	ldr	r3, [pc, #200]	; (8003308 <main+0x340>)
 8003240:	7adb      	ldrb	r3, [r3, #11]
 8003242:	2b31      	cmp	r3, #49	; 0x31
 8003244:	d10b      	bne.n	800325e <main+0x296>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 91);
 8003246:	4b1d      	ldr	r3, [pc, #116]	; (80032bc <main+0x2f4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	225b      	movs	r2, #91	; 0x5b
 800324c:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 800324e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003252:	f001 fd0f 	bl	8004c74 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 90);
 8003256:	4b19      	ldr	r3, [pc, #100]	; (80032bc <main+0x2f4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	225a      	movs	r2, #90	; 0x5a
 800325c:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		if(vVent[4]=='0' || vOfi[11]=='0') {
 800325e:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <main+0x32c>)
 8003260:	791b      	ldrb	r3, [r3, #4]
 8003262:	2b30      	cmp	r3, #48	; 0x30
 8003264:	d003      	beq.n	800326e <main+0x2a6>
 8003266:	4b28      	ldr	r3, [pc, #160]	; (8003308 <main+0x340>)
 8003268:	7adb      	ldrb	r3, [r3, #11]
 800326a:	2b30      	cmp	r3, #48	; 0x30
 800326c:	d10b      	bne.n	8003286 <main+0x2be>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 88);
 800326e:	4b13      	ldr	r3, [pc, #76]	; (80032bc <main+0x2f4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2258      	movs	r2, #88	; 0x58
 8003274:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8003276:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800327a:	f001 fcfb 	bl	8004c74 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 90);
 800327e:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <main+0x2f4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	225a      	movs	r2, #90	; 0x5a
 8003284:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		vVent[4]='x';
 8003286:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <main+0x32c>)
 8003288:	2278      	movs	r2, #120	; 0x78
 800328a:	711a      	strb	r2, [r3, #4]
		vOfi[11]='x';
 800328c:	4b1e      	ldr	r3, [pc, #120]	; (8003308 <main+0x340>)
 800328e:	2278      	movs	r2, #120	; 0x78
 8003290:	72da      	strb	r2, [r3, #11]

		// FINAL DE CARRERA PARCELA
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == 0){ // cambiar a PE6
 8003292:	2110      	movs	r1, #16
 8003294:	4812      	ldr	r0, [pc, #72]	; (80032e0 <main+0x318>)
 8003296:	f002 fc1d 	bl	8005ad4 <HAL_GPIO_ReadPin>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d157      	bne.n	8003350 <main+0x388>

			if (vVent[0]=='1' || vExt[4]=='1'){
 80032a0:	4b14      	ldr	r3, [pc, #80]	; (80032f4 <main+0x32c>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b31      	cmp	r3, #49	; 0x31
 80032a6:	d031      	beq.n	800330c <main+0x344>
 80032a8:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <main+0x330>)
 80032aa:	791b      	ldrb	r3, [r3, #4]
 80032ac:	2b31      	cmp	r3, #49	; 0x31
 80032ae:	d135      	bne.n	800331c <main+0x354>
 80032b0:	e02c      	b.n	800330c <main+0x344>
 80032b2:	bf00      	nop
 80032b4:	20000cec 	.word	0x20000cec
 80032b8:	20000dc0 	.word	0x20000dc0
 80032bc:	20000bcc 	.word	0x20000bcc
 80032c0:	20000d34 	.word	0x20000d34
 80032c4:	20000aa8 	.word	0x20000aa8
 80032c8:	20000ca4 	.word	0x20000ca4
 80032cc:	20000c14 	.word	0x20000c14
 80032d0:	20000b34 	.word	0x20000b34
 80032d4:	20000c5c 	.word	0x20000c5c
 80032d8:	080093d8 	.word	0x080093d8
 80032dc:	080093e4 	.word	0x080093e4
 80032e0:	40021000 	.word	0x40021000
 80032e4:	200008b0 	.word	0x200008b0
 80032e8:	200008b8 	.word	0x200008b8
 80032ec:	20000a4c 	.word	0x20000a4c
 80032f0:	200008bc 	.word	0x200008bc
 80032f4:	2000091c 	.word	0x2000091c
 80032f8:	20000928 	.word	0x20000928
 80032fc:	2000096c 	.word	0x2000096c
 8003300:	20000a40 	.word	0x20000a40
 8003304:	20000910 	.word	0x20000910
 8003308:	20000974 	.word	0x20000974
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89); // S_Parcela
 800330c:	4b90      	ldr	r3, [pc, #576]	; (8003550 <main+0x588>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2259      	movs	r2, #89	; 0x59
 8003312:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(1000);
 8003314:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003318:	f001 fcac 	bl	8004c74 <HAL_Delay>
			}
			if (vVent[0]=='0' || vExt[4]=='0'){
 800331c:	4b8d      	ldr	r3, [pc, #564]	; (8003554 <main+0x58c>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b30      	cmp	r3, #48	; 0x30
 8003322:	d003      	beq.n	800332c <main+0x364>
 8003324:	4b8c      	ldr	r3, [pc, #560]	; (8003558 <main+0x590>)
 8003326:	791b      	ldrb	r3, [r3, #4]
 8003328:	2b30      	cmp	r3, #48	; 0x30
 800332a:	d107      	bne.n	800333c <main+0x374>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 92); // S_Parcela
 800332c:	4b88      	ldr	r3, [pc, #544]	; (8003550 <main+0x588>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	225c      	movs	r2, #92	; 0x5c
 8003332:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(1000);
 8003334:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003338:	f001 fc9c 	bl	8004c74 <HAL_Delay>
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 90); // S_Parcela
 800333c:	4b84      	ldr	r3, [pc, #528]	; (8003550 <main+0x588>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	225a      	movs	r2, #90	; 0x5a
 8003342:	635a      	str	r2, [r3, #52]	; 0x34
			vVent[0]='x'; // S_Parcela
 8003344:	4b83      	ldr	r3, [pc, #524]	; (8003554 <main+0x58c>)
 8003346:	2278      	movs	r2, #120	; 0x78
 8003348:	701a      	strb	r2, [r3, #0]
			vExt[4]='x'; // S_Parcela
 800334a:	4b83      	ldr	r3, [pc, #524]	; (8003558 <main+0x590>)
 800334c:	2278      	movs	r2, #120	; 0x78
 800334e:	711a      	strb	r2, [r3, #4]
		}

		// FINAL DE CARRERA GARAJE
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == 0){
 8003350:	2110      	movs	r1, #16
 8003352:	4882      	ldr	r0, [pc, #520]	; (800355c <main+0x594>)
 8003354:	f002 fbbe 	bl	8005ad4 <HAL_GPIO_ReadPin>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d11e      	bne.n	800339c <main+0x3d4>

			if (vVent[1]=='1'){
 800335e:	4b7d      	ldr	r3, [pc, #500]	; (8003554 <main+0x58c>)
 8003360:	785b      	ldrb	r3, [r3, #1]
 8003362:	2b31      	cmp	r3, #49	; 0x31
 8003364:	d107      	bne.n	8003376 <main+0x3ae>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 89); // S_Garaje
 8003366:	4b7a      	ldr	r3, [pc, #488]	; (8003550 <main+0x588>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2259      	movs	r2, #89	; 0x59
 800336c:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(1000);
 800336e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003372:	f001 fc7f 	bl	8004c74 <HAL_Delay>
			}
			if (vVent[1]=='0'){
 8003376:	4b77      	ldr	r3, [pc, #476]	; (8003554 <main+0x58c>)
 8003378:	785b      	ldrb	r3, [r3, #1]
 800337a:	2b30      	cmp	r3, #48	; 0x30
 800337c:	d107      	bne.n	800338e <main+0x3c6>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 91); // S_Garaje
 800337e:	4b74      	ldr	r3, [pc, #464]	; (8003550 <main+0x588>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	225b      	movs	r2, #91	; 0x5b
 8003384:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(1000);
 8003386:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800338a:	f001 fc73 	bl	8004c74 <HAL_Delay>
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 90); // S_Garaje
 800338e:	4b70      	ldr	r3, [pc, #448]	; (8003550 <main+0x588>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	225a      	movs	r2, #90	; 0x5a
 8003394:	639a      	str	r2, [r3, #56]	; 0x38
			vVent[1]='x'; // S_Garaje
 8003396:	4b6f      	ldr	r3, [pc, #444]	; (8003554 <main+0x58c>)
 8003398:	2278      	movs	r2, #120	; 0x78
 800339a:	705a      	strb	r2, [r3, #1]
		}

		// VENTILADOR SALÓN
		if(vTemp[0]=='1') {
 800339c:	4b70      	ldr	r3, [pc, #448]	; (8003560 <main+0x598>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b31      	cmp	r3, #49	; 0x31
 80033a2:	d10e      	bne.n	80033c2 <main+0x3fa>
			__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 1000);
 80033a4:	4b6f      	ldr	r3, [pc, #444]	; (8003564 <main+0x59c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033ac:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
 80033ae:	2201      	movs	r2, #1
 80033b0:	2110      	movs	r1, #16
 80033b2:	486d      	ldr	r0, [pc, #436]	; (8003568 <main+0x5a0>)
 80033b4:	f002 fba6 	bl	8005b04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,GPIO_PIN_RESET);
 80033b8:	2200      	movs	r2, #0
 80033ba:	2120      	movs	r1, #32
 80033bc:	486a      	ldr	r0, [pc, #424]	; (8003568 <main+0x5a0>)
 80033be:	f002 fba1 	bl	8005b04 <HAL_GPIO_WritePin>
		}
		if(vTemp[0]=='0') {
 80033c2:	4b67      	ldr	r3, [pc, #412]	; (8003560 <main+0x598>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b30      	cmp	r3, #48	; 0x30
 80033c8:	d10d      	bne.n	80033e6 <main+0x41e>
			__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 80033ca:	4b66      	ldr	r3, [pc, #408]	; (8003564 <main+0x59c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2200      	movs	r2, #0
 80033d0:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_RESET);
 80033d2:	2200      	movs	r2, #0
 80033d4:	2110      	movs	r1, #16
 80033d6:	4864      	ldr	r0, [pc, #400]	; (8003568 <main+0x5a0>)
 80033d8:	f002 fb94 	bl	8005b04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,GPIO_PIN_RESET);
 80033dc:	2200      	movs	r2, #0
 80033de:	2120      	movs	r1, #32
 80033e0:	4861      	ldr	r0, [pc, #388]	; (8003568 <main+0x5a0>)
 80033e2:	f002 fb8f 	bl	8005b04 <HAL_GPIO_WritePin>
		}

		// VALORES DE CONFIGURACIÓN

		v_enc = temp_value(vAj[0], vAj[1], vAj[2]);
 80033e6:	4b61      	ldr	r3, [pc, #388]	; (800356c <main+0x5a4>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	4a60      	ldr	r2, [pc, #384]	; (800356c <main+0x5a4>)
 80033ec:	7851      	ldrb	r1, [r2, #1]
 80033ee:	4a5f      	ldr	r2, [pc, #380]	; (800356c <main+0x5a4>)
 80033f0:	7892      	ldrb	r2, [r2, #2]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff f89c 	bl	8002530 <temp_value>
 80033f8:	eef0 7a40 	vmov.f32	s15, s0
 80033fc:	4b5c      	ldr	r3, [pc, #368]	; (8003570 <main+0x5a8>)
 80033fe:	edc3 7a00 	vstr	s15, [r3]
		v_apa = temp_value(vAj[3], vAj[4], vAj[5]);
 8003402:	4b5a      	ldr	r3, [pc, #360]	; (800356c <main+0x5a4>)
 8003404:	78db      	ldrb	r3, [r3, #3]
 8003406:	4a59      	ldr	r2, [pc, #356]	; (800356c <main+0x5a4>)
 8003408:	7911      	ldrb	r1, [r2, #4]
 800340a:	4a58      	ldr	r2, [pc, #352]	; (800356c <main+0x5a4>)
 800340c:	7952      	ldrb	r2, [r2, #5]
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff f88e 	bl	8002530 <temp_value>
 8003414:	eef0 7a40 	vmov.f32	s15, s0
 8003418:	4b56      	ldr	r3, [pc, #344]	; (8003574 <main+0x5ac>)
 800341a:	edc3 7a00 	vstr	s15, [r3]
		c_enc = temp_value(vAj[6], vAj[7], vAj[8]);
 800341e:	4b53      	ldr	r3, [pc, #332]	; (800356c <main+0x5a4>)
 8003420:	799b      	ldrb	r3, [r3, #6]
 8003422:	4a52      	ldr	r2, [pc, #328]	; (800356c <main+0x5a4>)
 8003424:	79d1      	ldrb	r1, [r2, #7]
 8003426:	4a51      	ldr	r2, [pc, #324]	; (800356c <main+0x5a4>)
 8003428:	7a12      	ldrb	r2, [r2, #8]
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff f880 	bl	8002530 <temp_value>
 8003430:	eef0 7a40 	vmov.f32	s15, s0
 8003434:	4b50      	ldr	r3, [pc, #320]	; (8003578 <main+0x5b0>)
 8003436:	edc3 7a00 	vstr	s15, [r3]
		c_apa = temp_value(vAj[9], vAj[10], vAj[11]);
 800343a:	4b4c      	ldr	r3, [pc, #304]	; (800356c <main+0x5a4>)
 800343c:	7a5b      	ldrb	r3, [r3, #9]
 800343e:	4a4b      	ldr	r2, [pc, #300]	; (800356c <main+0x5a4>)
 8003440:	7a91      	ldrb	r1, [r2, #10]
 8003442:	4a4a      	ldr	r2, [pc, #296]	; (800356c <main+0x5a4>)
 8003444:	7ad2      	ldrb	r2, [r2, #11]
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff f872 	bl	8002530 <temp_value>
 800344c:	eef0 7a40 	vmov.f32	s15, s0
 8003450:	4b4a      	ldr	r3, [pc, #296]	; (800357c <main+0x5b4>)
 8003452:	edc3 7a00 	vstr	s15, [r3]

		rh_min = rh_value(vAj[12], vAj[13]);
 8003456:	4b45      	ldr	r3, [pc, #276]	; (800356c <main+0x5a4>)
 8003458:	7b1b      	ldrb	r3, [r3, #12]
 800345a:	4a44      	ldr	r2, [pc, #272]	; (800356c <main+0x5a4>)
 800345c:	7b52      	ldrb	r2, [r2, #13]
 800345e:	4611      	mov	r1, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f7fe ffde 	bl	8002422 <rh_value>
 8003466:	4603      	mov	r3, r0
 8003468:	4a45      	ldr	r2, [pc, #276]	; (8003580 <main+0x5b8>)
 800346a:	6013      	str	r3, [r2, #0]
		rh_max = rh_value(vAj[14], vAj[15]);
 800346c:	4b3f      	ldr	r3, [pc, #252]	; (800356c <main+0x5a4>)
 800346e:	7b9b      	ldrb	r3, [r3, #14]
 8003470:	4a3e      	ldr	r2, [pc, #248]	; (800356c <main+0x5a4>)
 8003472:	7bd2      	ldrb	r2, [r2, #15]
 8003474:	4611      	mov	r1, r2
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe ffd3 	bl	8002422 <rh_value>
 800347c:	4603      	mov	r3, r0
 800347e:	4a41      	ldr	r2, [pc, #260]	; (8003584 <main+0x5bc>)
 8003480:	6013      	str	r3, [r2, #0]

		/*----------- Lectura Sensores -----------*/

		// LDR
		if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8003482:	f04f 31ff 	mov.w	r1, #4294967295
 8003486:	4840      	ldr	r0, [pc, #256]	; (8003588 <main+0x5c0>)
 8003488:	f001 fd2e 	bl	8004ee8 <HAL_ADC_PollForConversion>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <main+0x4d8>
			LDR_valor = HAL_ADC_GetValue(&hadc1);
 8003492:	483d      	ldr	r0, [pc, #244]	; (8003588 <main+0x5c0>)
 8003494:	f001 fdb3 	bl	8004ffe <HAL_ADC_GetValue>
 8003498:	4603      	mov	r3, r0
 800349a:	b29a      	uxth	r2, r3
 800349c:	4b3b      	ldr	r3, [pc, #236]	; (800358c <main+0x5c4>)
 800349e:	801a      	strh	r2, [r3, #0]

		ldr(LDR_valor);
 80034a0:	4b3a      	ldr	r3, [pc, #232]	; (800358c <main+0x5c4>)
 80034a2:	881b      	ldrh	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fe febf 	bl	8002228 <ldr>

		// Lluvia
		if(HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY) == HAL_OK)
 80034aa:	f04f 31ff 	mov.w	r1, #4294967295
 80034ae:	4838      	ldr	r0, [pc, #224]	; (8003590 <main+0x5c8>)
 80034b0:	f001 fd1a 	bl	8004ee8 <HAL_ADC_PollForConversion>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d106      	bne.n	80034c8 <main+0x500>
			Lluvia_lectura = HAL_ADC_GetValue(&hadc3);
 80034ba:	4835      	ldr	r0, [pc, #212]	; (8003590 <main+0x5c8>)
 80034bc:	f001 fd9f 	bl	8004ffe <HAL_ADC_GetValue>
 80034c0:	4603      	mov	r3, r0
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	4b33      	ldr	r3, [pc, #204]	; (8003594 <main+0x5cc>)
 80034c6:	801a      	strh	r2, [r3, #0]

		Lluvia_real = 100 - ((100*Lluvia_lectura)/255);
 80034c8:	4b32      	ldr	r3, [pc, #200]	; (8003594 <main+0x5cc>)
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	2364      	movs	r3, #100	; 0x64
 80034d0:	fb03 f302 	mul.w	r3, r3, r2
 80034d4:	4a30      	ldr	r2, [pc, #192]	; (8003598 <main+0x5d0>)
 80034d6:	fb82 1203 	smull	r1, r2, r2, r3
 80034da:	441a      	add	r2, r3
 80034dc:	11d2      	asrs	r2, r2, #7
 80034de:	17db      	asrs	r3, r3, #31
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3364      	adds	r3, #100	; 0x64
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	4b2c      	ldr	r3, [pc, #176]	; (800359c <main+0x5d4>)
 80034ea:	801a      	strh	r2, [r3, #0]

		// HW-390
		if(HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK)
 80034ec:	f04f 31ff 	mov.w	r1, #4294967295
 80034f0:	482b      	ldr	r0, [pc, #172]	; (80035a0 <main+0x5d8>)
 80034f2:	f001 fcf9 	bl	8004ee8 <HAL_ADC_PollForConversion>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d106      	bne.n	800350a <main+0x542>
			Higro_lectura = HAL_ADC_GetValue(&hadc2);
 80034fc:	4828      	ldr	r0, [pc, #160]	; (80035a0 <main+0x5d8>)
 80034fe:	f001 fd7e 	bl	8004ffe <HAL_ADC_GetValue>
 8003502:	4603      	mov	r3, r0
 8003504:	b29a      	uxth	r2, r3
 8003506:	4b27      	ldr	r3, [pc, #156]	; (80035a4 <main+0x5dc>)
 8003508:	801a      	strh	r2, [r3, #0]

		Higro_real = 100 - ((100*Higro_lectura)/255);
 800350a:	4b26      	ldr	r3, [pc, #152]	; (80035a4 <main+0x5dc>)
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	2364      	movs	r3, #100	; 0x64
 8003512:	fb03 f302 	mul.w	r3, r3, r2
 8003516:	4a20      	ldr	r2, [pc, #128]	; (8003598 <main+0x5d0>)
 8003518:	fb82 1203 	smull	r1, r2, r2, r3
 800351c:	441a      	add	r2, r3
 800351e:	11d2      	asrs	r2, r2, #7
 8003520:	17db      	asrs	r3, r3, #31
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	b29b      	uxth	r3, r3
 8003526:	3364      	adds	r3, #100	; 0x64
 8003528:	b29a      	uxth	r2, r3
 800352a:	4b1f      	ldr	r3, [pc, #124]	; (80035a8 <main+0x5e0>)
 800352c:	801a      	strh	r2, [r3, #0]

		//DHT22
		if(actSensor == 1){
 800352e:	4b1f      	ldr	r3, [pc, #124]	; (80035ac <main+0x5e4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b01      	cmp	r3, #1
 8003534:	f47f ada8 	bne.w	8003088 <main+0xc0>
			/*DHT11_getData(&DHT11);
		  	TempAireExt = DHT11.Temperature;
		  	HumeAireExt = DHT11.Humidity;*/

		  	// DHT22 Interior
		  	DHT22_getData(&DHT22);
 8003538:	481d      	ldr	r0, [pc, #116]	; (80035b0 <main+0x5e8>)
 800353a:	f7fd fd19 	bl	8000f70 <DHT22_getData>
		  	TempAireInt = DHT22.Temperature;
 800353e:	4b1c      	ldr	r3, [pc, #112]	; (80035b0 <main+0x5e8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a1c      	ldr	r2, [pc, #112]	; (80035b4 <main+0x5ec>)
 8003544:	6013      	str	r3, [r2, #0]
		  	HumeAireInt = DHT22.Humidity;
 8003546:	4b1a      	ldr	r3, [pc, #104]	; (80035b0 <main+0x5e8>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	4a1b      	ldr	r2, [pc, #108]	; (80035b8 <main+0x5f0>)
 800354c:	6013      	str	r3, [r2, #0]
	  	ESP_messageHandler();
 800354e:	e59b      	b.n	8003088 <main+0xc0>
 8003550:	20000dc0 	.word	0x20000dc0
 8003554:	2000091c 	.word	0x2000091c
 8003558:	20000928 	.word	0x20000928
 800355c:	40021000 	.word	0x40021000
 8003560:	20000970 	.word	0x20000970
 8003564:	20000d34 	.word	0x20000d34
 8003568:	40020800 	.word	0x40020800
 800356c:	200009c0 	.word	0x200009c0
 8003570:	200008c0 	.word	0x200008c0
 8003574:	200008c4 	.word	0x200008c4
 8003578:	200008c8 	.word	0x200008c8
 800357c:	200008cc 	.word	0x200008cc
 8003580:	200008d0 	.word	0x200008d0
 8003584:	200008d4 	.word	0x200008d4
 8003588:	20000c14 	.word	0x20000c14
 800358c:	200008d8 	.word	0x200008d8
 8003590:	20000c5c 	.word	0x20000c5c
 8003594:	200008de 	.word	0x200008de
 8003598:	80808081 	.word	0x80808081
 800359c:	200008e0 	.word	0x200008e0
 80035a0:	20000b34 	.word	0x20000b34
 80035a4:	200008da 	.word	0x200008da
 80035a8:	200008dc 	.word	0x200008dc
 80035ac:	20000a48 	.word	0x20000a48
 80035b0:	20000e4c 	.word	0x20000e4c
 80035b4:	200008e4 	.word	0x200008e4
 80035b8:	200008e8 	.word	0x200008e8

080035bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b094      	sub	sp, #80	; 0x50
 80035c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035c2:	f107 0320 	add.w	r3, r7, #32
 80035c6:	2230      	movs	r2, #48	; 0x30
 80035c8:	2100      	movs	r1, #0
 80035ca:	4618      	mov	r0, r3
 80035cc:	f004 feb6 	bl	800833c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035d0:	f107 030c 	add.w	r3, r7, #12
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	605a      	str	r2, [r3, #4]
 80035da:	609a      	str	r2, [r3, #8]
 80035dc:	60da      	str	r2, [r3, #12]
 80035de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80035e0:	2300      	movs	r3, #0
 80035e2:	60bb      	str	r3, [r7, #8]
 80035e4:	4b28      	ldr	r3, [pc, #160]	; (8003688 <SystemClock_Config+0xcc>)
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	4a27      	ldr	r2, [pc, #156]	; (8003688 <SystemClock_Config+0xcc>)
 80035ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ee:	6413      	str	r3, [r2, #64]	; 0x40
 80035f0:	4b25      	ldr	r3, [pc, #148]	; (8003688 <SystemClock_Config+0xcc>)
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035fc:	2300      	movs	r3, #0
 80035fe:	607b      	str	r3, [r7, #4]
 8003600:	4b22      	ldr	r3, [pc, #136]	; (800368c <SystemClock_Config+0xd0>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a21      	ldr	r2, [pc, #132]	; (800368c <SystemClock_Config+0xd0>)
 8003606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	4b1f      	ldr	r3, [pc, #124]	; (800368c <SystemClock_Config+0xd0>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003614:	607b      	str	r3, [r7, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003618:	2301      	movs	r3, #1
 800361a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800361c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003622:	2302      	movs	r3, #2
 8003624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800362a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800362c:	2304      	movs	r3, #4
 800362e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8003630:	2332      	movs	r3, #50	; 0x32
 8003632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003634:	2302      	movs	r3, #2
 8003636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003638:	2307      	movs	r3, #7
 800363a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800363c:	f107 0320 	add.w	r3, r7, #32
 8003640:	4618      	mov	r0, r3
 8003642:	f002 fa91 	bl	8005b68 <HAL_RCC_OscConfig>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800364c:	f000 fe3a 	bl	80042c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003650:	230f      	movs	r3, #15
 8003652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003654:	2302      	movs	r3, #2
 8003656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800365c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003666:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003668:	f107 030c 	add.w	r3, r7, #12
 800366c:	2101      	movs	r1, #1
 800366e:	4618      	mov	r0, r3
 8003670:	f002 fcf2 	bl	8006058 <HAL_RCC_ClockConfig>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800367a:	f000 fe23 	bl	80042c4 <Error_Handler>
  }
}
 800367e:	bf00      	nop
 8003680:	3750      	adds	r7, #80	; 0x50
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40023800 	.word	0x40023800
 800368c:	40007000 	.word	0x40007000

08003690 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003696:	463b      	mov	r3, r7
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80036a2:	4b21      	ldr	r3, [pc, #132]	; (8003728 <MX_ADC1_Init+0x98>)
 80036a4:	4a21      	ldr	r2, [pc, #132]	; (800372c <MX_ADC1_Init+0x9c>)
 80036a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80036a8:	4b1f      	ldr	r3, [pc, #124]	; (8003728 <MX_ADC1_Init+0x98>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80036ae:	4b1e      	ldr	r3, [pc, #120]	; (8003728 <MX_ADC1_Init+0x98>)
 80036b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80036b6:	4b1c      	ldr	r3, [pc, #112]	; (8003728 <MX_ADC1_Init+0x98>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80036bc:	4b1a      	ldr	r3, [pc, #104]	; (8003728 <MX_ADC1_Init+0x98>)
 80036be:	2201      	movs	r2, #1
 80036c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80036c2:	4b19      	ldr	r3, [pc, #100]	; (8003728 <MX_ADC1_Init+0x98>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036ca:	4b17      	ldr	r3, [pc, #92]	; (8003728 <MX_ADC1_Init+0x98>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036d0:	4b15      	ldr	r3, [pc, #84]	; (8003728 <MX_ADC1_Init+0x98>)
 80036d2:	4a17      	ldr	r2, [pc, #92]	; (8003730 <MX_ADC1_Init+0xa0>)
 80036d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036d6:	4b14      	ldr	r3, [pc, #80]	; (8003728 <MX_ADC1_Init+0x98>)
 80036d8:	2200      	movs	r2, #0
 80036da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80036dc:	4b12      	ldr	r3, [pc, #72]	; (8003728 <MX_ADC1_Init+0x98>)
 80036de:	2201      	movs	r2, #1
 80036e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80036e2:	4b11      	ldr	r3, [pc, #68]	; (8003728 <MX_ADC1_Init+0x98>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80036ea:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <MX_ADC1_Init+0x98>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80036f0:	480d      	ldr	r0, [pc, #52]	; (8003728 <MX_ADC1_Init+0x98>)
 80036f2:	f001 fae3 	bl	8004cbc <HAL_ADC_Init>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80036fc:	f000 fde2 	bl	80042c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003700:	2304      	movs	r3, #4
 8003702:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003704:	2301      	movs	r3, #1
 8003706:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003708:	2307      	movs	r3, #7
 800370a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800370c:	463b      	mov	r3, r7
 800370e:	4619      	mov	r1, r3
 8003710:	4805      	ldr	r0, [pc, #20]	; (8003728 <MX_ADC1_Init+0x98>)
 8003712:	f001 fc81 	bl	8005018 <HAL_ADC_ConfigChannel>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800371c:	f000 fdd2 	bl	80042c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003720:	bf00      	nop
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	20000c14 	.word	0x20000c14
 800372c:	40012000 	.word	0x40012000
 8003730:	0f000001 	.word	0x0f000001

08003734 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800373a:	463b      	mov	r3, r7
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003746:	4b21      	ldr	r3, [pc, #132]	; (80037cc <MX_ADC2_Init+0x98>)
 8003748:	4a21      	ldr	r2, [pc, #132]	; (80037d0 <MX_ADC2_Init+0x9c>)
 800374a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800374c:	4b1f      	ldr	r3, [pc, #124]	; (80037cc <MX_ADC2_Init+0x98>)
 800374e:	2200      	movs	r2, #0
 8003750:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8003752:	4b1e      	ldr	r3, [pc, #120]	; (80037cc <MX_ADC2_Init+0x98>)
 8003754:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003758:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800375a:	4b1c      	ldr	r3, [pc, #112]	; (80037cc <MX_ADC2_Init+0x98>)
 800375c:	2200      	movs	r2, #0
 800375e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003760:	4b1a      	ldr	r3, [pc, #104]	; (80037cc <MX_ADC2_Init+0x98>)
 8003762:	2201      	movs	r2, #1
 8003764:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003766:	4b19      	ldr	r3, [pc, #100]	; (80037cc <MX_ADC2_Init+0x98>)
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800376e:	4b17      	ldr	r3, [pc, #92]	; (80037cc <MX_ADC2_Init+0x98>)
 8003770:	2200      	movs	r2, #0
 8003772:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003774:	4b15      	ldr	r3, [pc, #84]	; (80037cc <MX_ADC2_Init+0x98>)
 8003776:	4a17      	ldr	r2, [pc, #92]	; (80037d4 <MX_ADC2_Init+0xa0>)
 8003778:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800377a:	4b14      	ldr	r3, [pc, #80]	; (80037cc <MX_ADC2_Init+0x98>)
 800377c:	2200      	movs	r2, #0
 800377e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8003780:	4b12      	ldr	r3, [pc, #72]	; (80037cc <MX_ADC2_Init+0x98>)
 8003782:	2201      	movs	r2, #1
 8003784:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003786:	4b11      	ldr	r3, [pc, #68]	; (80037cc <MX_ADC2_Init+0x98>)
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800378e:	4b0f      	ldr	r3, [pc, #60]	; (80037cc <MX_ADC2_Init+0x98>)
 8003790:	2200      	movs	r2, #0
 8003792:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003794:	480d      	ldr	r0, [pc, #52]	; (80037cc <MX_ADC2_Init+0x98>)
 8003796:	f001 fa91 	bl	8004cbc <HAL_ADC_Init>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80037a0:	f000 fd90 	bl	80042c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80037a4:	2308      	movs	r3, #8
 80037a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80037a8:	2301      	movs	r3, #1
 80037aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80037ac:	2307      	movs	r3, #7
 80037ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80037b0:	463b      	mov	r3, r7
 80037b2:	4619      	mov	r1, r3
 80037b4:	4805      	ldr	r0, [pc, #20]	; (80037cc <MX_ADC2_Init+0x98>)
 80037b6:	f001 fc2f 	bl	8005018 <HAL_ADC_ConfigChannel>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80037c0:	f000 fd80 	bl	80042c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80037c4:	bf00      	nop
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000b34 	.word	0x20000b34
 80037d0:	40012100 	.word	0x40012100
 80037d4:	0f000001 	.word	0x0f000001

080037d8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80037de:	463b      	mov	r3, r7
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	605a      	str	r2, [r3, #4]
 80037e6:	609a      	str	r2, [r3, #8]
 80037e8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80037ea:	4b21      	ldr	r3, [pc, #132]	; (8003870 <MX_ADC3_Init+0x98>)
 80037ec:	4a21      	ldr	r2, [pc, #132]	; (8003874 <MX_ADC3_Init+0x9c>)
 80037ee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80037f0:	4b1f      	ldr	r3, [pc, #124]	; (8003870 <MX_ADC3_Init+0x98>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 80037f6:	4b1e      	ldr	r3, [pc, #120]	; (8003870 <MX_ADC3_Init+0x98>)
 80037f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037fc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80037fe:	4b1c      	ldr	r3, [pc, #112]	; (8003870 <MX_ADC3_Init+0x98>)
 8003800:	2200      	movs	r2, #0
 8003802:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8003804:	4b1a      	ldr	r3, [pc, #104]	; (8003870 <MX_ADC3_Init+0x98>)
 8003806:	2201      	movs	r2, #1
 8003808:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800380a:	4b19      	ldr	r3, [pc, #100]	; (8003870 <MX_ADC3_Init+0x98>)
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003812:	4b17      	ldr	r3, [pc, #92]	; (8003870 <MX_ADC3_Init+0x98>)
 8003814:	2200      	movs	r2, #0
 8003816:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003818:	4b15      	ldr	r3, [pc, #84]	; (8003870 <MX_ADC3_Init+0x98>)
 800381a:	4a17      	ldr	r2, [pc, #92]	; (8003878 <MX_ADC3_Init+0xa0>)
 800381c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800381e:	4b14      	ldr	r3, [pc, #80]	; (8003870 <MX_ADC3_Init+0x98>)
 8003820:	2200      	movs	r2, #0
 8003822:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8003824:	4b12      	ldr	r3, [pc, #72]	; (8003870 <MX_ADC3_Init+0x98>)
 8003826:	2201      	movs	r2, #1
 8003828:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800382a:	4b11      	ldr	r3, [pc, #68]	; (8003870 <MX_ADC3_Init+0x98>)
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003832:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <MX_ADC3_Init+0x98>)
 8003834:	2200      	movs	r2, #0
 8003836:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003838:	480d      	ldr	r0, [pc, #52]	; (8003870 <MX_ADC3_Init+0x98>)
 800383a:	f001 fa3f 	bl	8004cbc <HAL_ADC_Init>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8003844:	f000 fd3e 	bl	80042c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003848:	230b      	movs	r3, #11
 800384a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800384c:	2301      	movs	r3, #1
 800384e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003850:	2307      	movs	r3, #7
 8003852:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003854:	463b      	mov	r3, r7
 8003856:	4619      	mov	r1, r3
 8003858:	4805      	ldr	r0, [pc, #20]	; (8003870 <MX_ADC3_Init+0x98>)
 800385a:	f001 fbdd 	bl	8005018 <HAL_ADC_ConfigChannel>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8003864:	f000 fd2e 	bl	80042c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8003868:	bf00      	nop
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20000c5c 	.word	0x20000c5c
 8003874:	40012200 	.word	0x40012200
 8003878:	0f000001 	.word	0x0f000001

0800387c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b096      	sub	sp, #88	; 0x58
 8003880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003882:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	605a      	str	r2, [r3, #4]
 800388c:	609a      	str	r2, [r3, #8]
 800388e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003890:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800389a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	605a      	str	r2, [r3, #4]
 80038a4:	609a      	str	r2, [r3, #8]
 80038a6:	60da      	str	r2, [r3, #12]
 80038a8:	611a      	str	r2, [r3, #16]
 80038aa:	615a      	str	r2, [r3, #20]
 80038ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80038ae:	1d3b      	adds	r3, r7, #4
 80038b0:	2220      	movs	r2, #32
 80038b2:	2100      	movs	r1, #0
 80038b4:	4618      	mov	r0, r3
 80038b6:	f004 fd41 	bl	800833c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80038ba:	4b4a      	ldr	r3, [pc, #296]	; (80039e4 <MX_TIM1_Init+0x168>)
 80038bc:	4a4a      	ldr	r2, [pc, #296]	; (80039e8 <MX_TIM1_Init+0x16c>)
 80038be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 80038c0:	4b48      	ldr	r3, [pc, #288]	; (80039e4 <MX_TIM1_Init+0x168>)
 80038c2:	225f      	movs	r2, #95	; 0x5f
 80038c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038c6:	4b47      	ldr	r3, [pc, #284]	; (80039e4 <MX_TIM1_Init+0x168>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 80038cc:	4b45      	ldr	r3, [pc, #276]	; (80039e4 <MX_TIM1_Init+0x168>)
 80038ce:	22fe      	movs	r2, #254	; 0xfe
 80038d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038d2:	4b44      	ldr	r3, [pc, #272]	; (80039e4 <MX_TIM1_Init+0x168>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80038d8:	4b42      	ldr	r3, [pc, #264]	; (80039e4 <MX_TIM1_Init+0x168>)
 80038da:	2200      	movs	r2, #0
 80038dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038de:	4b41      	ldr	r3, [pc, #260]	; (80039e4 <MX_TIM1_Init+0x168>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80038e4:	483f      	ldr	r0, [pc, #252]	; (80039e4 <MX_TIM1_Init+0x168>)
 80038e6:	f002 fdb3 	bl	8006450 <HAL_TIM_Base_Init>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80038f0:	f000 fce8 	bl	80042c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80038fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038fe:	4619      	mov	r1, r3
 8003900:	4838      	ldr	r0, [pc, #224]	; (80039e4 <MX_TIM1_Init+0x168>)
 8003902:	f003 f841 	bl	8006988 <HAL_TIM_ConfigClockSource>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800390c:	f000 fcda 	bl	80042c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003910:	4834      	ldr	r0, [pc, #208]	; (80039e4 <MX_TIM1_Init+0x168>)
 8003912:	f002 fe55 	bl	80065c0 <HAL_TIM_PWM_Init>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800391c:	f000 fcd2 	bl	80042c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003920:	2300      	movs	r3, #0
 8003922:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003924:	2300      	movs	r3, #0
 8003926:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003928:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800392c:	4619      	mov	r1, r3
 800392e:	482d      	ldr	r0, [pc, #180]	; (80039e4 <MX_TIM1_Init+0x168>)
 8003930:	f003 fc02 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800393a:	f000 fcc3 	bl	80042c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800393e:	2360      	movs	r3, #96	; 0x60
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003942:	2300      	movs	r3, #0
 8003944:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003946:	2300      	movs	r3, #0
 8003948:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800394a:	2300      	movs	r3, #0
 800394c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800394e:	2300      	movs	r3, #0
 8003950:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003952:	2300      	movs	r3, #0
 8003954:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003956:	2300      	movs	r3, #0
 8003958:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800395a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800395e:	2200      	movs	r2, #0
 8003960:	4619      	mov	r1, r3
 8003962:	4820      	ldr	r0, [pc, #128]	; (80039e4 <MX_TIM1_Init+0x168>)
 8003964:	f002 ff4e 	bl	8006804 <HAL_TIM_PWM_ConfigChannel>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800396e:	f000 fca9 	bl	80042c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003976:	2204      	movs	r2, #4
 8003978:	4619      	mov	r1, r3
 800397a:	481a      	ldr	r0, [pc, #104]	; (80039e4 <MX_TIM1_Init+0x168>)
 800397c:	f002 ff42 	bl	8006804 <HAL_TIM_PWM_ConfigChannel>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8003986:	f000 fc9d 	bl	80042c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800398a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800398e:	2208      	movs	r2, #8
 8003990:	4619      	mov	r1, r3
 8003992:	4814      	ldr	r0, [pc, #80]	; (80039e4 <MX_TIM1_Init+0x168>)
 8003994:	f002 ff36 	bl	8006804 <HAL_TIM_PWM_ConfigChannel>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800399e:	f000 fc91 	bl	80042c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80039a2:	2300      	movs	r3, #0
 80039a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80039ae:	2300      	movs	r3, #0
 80039b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80039b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80039bc:	2300      	movs	r3, #0
 80039be:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80039c0:	1d3b      	adds	r3, r7, #4
 80039c2:	4619      	mov	r1, r3
 80039c4:	4807      	ldr	r0, [pc, #28]	; (80039e4 <MX_TIM1_Init+0x168>)
 80039c6:	f003 fc33 	bl	8007230 <HAL_TIMEx_ConfigBreakDeadTime>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80039d0:	f000 fc78 	bl	80042c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80039d4:	4803      	ldr	r0, [pc, #12]	; (80039e4 <MX_TIM1_Init+0x168>)
 80039d6:	f000 fe05 	bl	80045e4 <HAL_TIM_MspPostInit>

}
 80039da:	bf00      	nop
 80039dc:	3758      	adds	r7, #88	; 0x58
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20000cec 	.word	0x20000cec
 80039e8:	40010000 	.word	0x40010000

080039ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08e      	sub	sp, #56	; 0x38
 80039f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	605a      	str	r2, [r3, #4]
 80039fc:	609a      	str	r2, [r3, #8]
 80039fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a00:	f107 0320 	add.w	r3, r7, #32
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a0a:	1d3b      	adds	r3, r7, #4
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	605a      	str	r2, [r3, #4]
 8003a12:	609a      	str	r2, [r3, #8]
 8003a14:	60da      	str	r2, [r3, #12]
 8003a16:	611a      	str	r2, [r3, #16]
 8003a18:	615a      	str	r2, [r3, #20]
 8003a1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a1c:	4b38      	ldr	r3, [pc, #224]	; (8003b00 <MX_TIM2_Init+0x114>)
 8003a1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 500-1;
 8003a24:	4b36      	ldr	r3, [pc, #216]	; (8003b00 <MX_TIM2_Init+0x114>)
 8003a26:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003a2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a2c:	4b34      	ldr	r3, [pc, #208]	; (8003b00 <MX_TIM2_Init+0x114>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8003a32:	4b33      	ldr	r3, [pc, #204]	; (8003b00 <MX_TIM2_Init+0x114>)
 8003a34:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003a38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a3a:	4b31      	ldr	r3, [pc, #196]	; (8003b00 <MX_TIM2_Init+0x114>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a40:	4b2f      	ldr	r3, [pc, #188]	; (8003b00 <MX_TIM2_Init+0x114>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a46:	482e      	ldr	r0, [pc, #184]	; (8003b00 <MX_TIM2_Init+0x114>)
 8003a48:	f002 fd02 	bl	8006450 <HAL_TIM_Base_Init>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003a52:	f000 fc37 	bl	80042c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a60:	4619      	mov	r1, r3
 8003a62:	4827      	ldr	r0, [pc, #156]	; (8003b00 <MX_TIM2_Init+0x114>)
 8003a64:	f002 ff90 	bl	8006988 <HAL_TIM_ConfigClockSource>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003a6e:	f000 fc29 	bl	80042c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003a72:	4823      	ldr	r0, [pc, #140]	; (8003b00 <MX_TIM2_Init+0x114>)
 8003a74:	f002 fda4 	bl	80065c0 <HAL_TIM_PWM_Init>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003a7e:	f000 fc21 	bl	80042c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a82:	2300      	movs	r3, #0
 8003a84:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a86:	2300      	movs	r3, #0
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a8a:	f107 0320 	add.w	r3, r7, #32
 8003a8e:	4619      	mov	r1, r3
 8003a90:	481b      	ldr	r0, [pc, #108]	; (8003b00 <MX_TIM2_Init+0x114>)
 8003a92:	f003 fb51 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003a9c:	f000 fc12 	bl	80042c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003aa0:	2360      	movs	r3, #96	; 0x60
 8003aa2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ab0:	1d3b      	adds	r3, r7, #4
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4812      	ldr	r0, [pc, #72]	; (8003b00 <MX_TIM2_Init+0x114>)
 8003ab8:	f002 fea4 	bl	8006804 <HAL_TIM_PWM_ConfigChannel>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003ac2:	f000 fbff 	bl	80042c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ac6:	1d3b      	adds	r3, r7, #4
 8003ac8:	2204      	movs	r2, #4
 8003aca:	4619      	mov	r1, r3
 8003acc:	480c      	ldr	r0, [pc, #48]	; (8003b00 <MX_TIM2_Init+0x114>)
 8003ace:	f002 fe99 	bl	8006804 <HAL_TIM_PWM_ConfigChannel>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8003ad8:	f000 fbf4 	bl	80042c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003adc:	1d3b      	adds	r3, r7, #4
 8003ade:	2208      	movs	r2, #8
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4807      	ldr	r0, [pc, #28]	; (8003b00 <MX_TIM2_Init+0x114>)
 8003ae4:	f002 fe8e 	bl	8006804 <HAL_TIM_PWM_ConfigChannel>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8003aee:	f000 fbe9 	bl	80042c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003af2:	4803      	ldr	r0, [pc, #12]	; (8003b00 <MX_TIM2_Init+0x114>)
 8003af4:	f000 fd76 	bl	80045e4 <HAL_TIM_MspPostInit>

}
 8003af8:	bf00      	nop
 8003afa:	3738      	adds	r7, #56	; 0x38
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	20000dc0 	.word	0x20000dc0

08003b04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08e      	sub	sp, #56	; 0x38
 8003b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	605a      	str	r2, [r3, #4]
 8003b14:	609a      	str	r2, [r3, #8]
 8003b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b18:	f107 0320 	add.w	r3, r7, #32
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b22:	1d3b      	adds	r3, r7, #4
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	60da      	str	r2, [r3, #12]
 8003b2e:	611a      	str	r2, [r3, #16]
 8003b30:	615a      	str	r2, [r3, #20]
 8003b32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003b34:	4b38      	ldr	r3, [pc, #224]	; (8003c18 <MX_TIM3_Init+0x114>)
 8003b36:	4a39      	ldr	r2, [pc, #228]	; (8003c1c <MX_TIM3_Init+0x118>)
 8003b38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 8003b3a:	4b37      	ldr	r3, [pc, #220]	; (8003c18 <MX_TIM3_Init+0x114>)
 8003b3c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003b40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b42:	4b35      	ldr	r3, [pc, #212]	; (8003c18 <MX_TIM3_Init+0x114>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8003b48:	4b33      	ldr	r3, [pc, #204]	; (8003c18 <MX_TIM3_Init+0x114>)
 8003b4a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003b4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b50:	4b31      	ldr	r3, [pc, #196]	; (8003c18 <MX_TIM3_Init+0x114>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b56:	4b30      	ldr	r3, [pc, #192]	; (8003c18 <MX_TIM3_Init+0x114>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003b5c:	482e      	ldr	r0, [pc, #184]	; (8003c18 <MX_TIM3_Init+0x114>)
 8003b5e:	f002 fc77 	bl	8006450 <HAL_TIM_Base_Init>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003b68:	f000 fbac 	bl	80042c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b70:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003b72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b76:	4619      	mov	r1, r3
 8003b78:	4827      	ldr	r0, [pc, #156]	; (8003c18 <MX_TIM3_Init+0x114>)
 8003b7a:	f002 ff05 	bl	8006988 <HAL_TIM_ConfigClockSource>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003b84:	f000 fb9e 	bl	80042c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003b88:	4823      	ldr	r0, [pc, #140]	; (8003c18 <MX_TIM3_Init+0x114>)
 8003b8a:	f002 fd19 	bl	80065c0 <HAL_TIM_PWM_Init>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003b94:	f000 fb96 	bl	80042c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ba0:	f107 0320 	add.w	r3, r7, #32
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	481c      	ldr	r0, [pc, #112]	; (8003c18 <MX_TIM3_Init+0x114>)
 8003ba8:	f003 fac6 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003bb2:	f000 fb87 	bl	80042c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bb6:	2360      	movs	r3, #96	; 0x60
 8003bb8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003bc6:	1d3b      	adds	r3, r7, #4
 8003bc8:	2204      	movs	r2, #4
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4812      	ldr	r0, [pc, #72]	; (8003c18 <MX_TIM3_Init+0x114>)
 8003bce:	f002 fe19 	bl	8006804 <HAL_TIM_PWM_ConfigChannel>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003bd8:	f000 fb74 	bl	80042c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003bdc:	1d3b      	adds	r3, r7, #4
 8003bde:	2208      	movs	r2, #8
 8003be0:	4619      	mov	r1, r3
 8003be2:	480d      	ldr	r0, [pc, #52]	; (8003c18 <MX_TIM3_Init+0x114>)
 8003be4:	f002 fe0e 	bl	8006804 <HAL_TIM_PWM_ConfigChannel>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003bee:	f000 fb69 	bl	80042c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003bf2:	1d3b      	adds	r3, r7, #4
 8003bf4:	220c      	movs	r2, #12
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	4807      	ldr	r0, [pc, #28]	; (8003c18 <MX_TIM3_Init+0x114>)
 8003bfa:	f002 fe03 	bl	8006804 <HAL_TIM_PWM_ConfigChannel>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8003c04:	f000 fb5e 	bl	80042c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003c08:	4803      	ldr	r0, [pc, #12]	; (8003c18 <MX_TIM3_Init+0x114>)
 8003c0a:	f000 fceb 	bl	80045e4 <HAL_TIM_MspPostInit>

}
 8003c0e:	bf00      	nop
 8003c10:	3738      	adds	r7, #56	; 0x38
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000bcc 	.word	0x20000bcc
 8003c1c:	40000400 	.word	0x40000400

08003c20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08e      	sub	sp, #56	; 0x38
 8003c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	605a      	str	r2, [r3, #4]
 8003c30:	609a      	str	r2, [r3, #8]
 8003c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c34:	f107 0320 	add.w	r3, r7, #32
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	605a      	str	r2, [r3, #4]
 8003c46:	609a      	str	r2, [r3, #8]
 8003c48:	60da      	str	r2, [r3, #12]
 8003c4a:	611a      	str	r2, [r3, #16]
 8003c4c:	615a      	str	r2, [r3, #20]
 8003c4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003c50:	4b2c      	ldr	r3, [pc, #176]	; (8003d04 <MX_TIM4_Init+0xe4>)
 8003c52:	4a2d      	ldr	r2, [pc, #180]	; (8003d08 <MX_TIM4_Init+0xe8>)
 8003c54:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 8003c56:	4b2b      	ldr	r3, [pc, #172]	; (8003d04 <MX_TIM4_Init+0xe4>)
 8003c58:	225f      	movs	r2, #95	; 0x5f
 8003c5a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c5c:	4b29      	ldr	r3, [pc, #164]	; (8003d04 <MX_TIM4_Init+0xe4>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20;
 8003c62:	4b28      	ldr	r3, [pc, #160]	; (8003d04 <MX_TIM4_Init+0xe4>)
 8003c64:	2214      	movs	r2, #20
 8003c66:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c68:	4b26      	ldr	r3, [pc, #152]	; (8003d04 <MX_TIM4_Init+0xe4>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c6e:	4b25      	ldr	r3, [pc, #148]	; (8003d04 <MX_TIM4_Init+0xe4>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003c74:	4823      	ldr	r0, [pc, #140]	; (8003d04 <MX_TIM4_Init+0xe4>)
 8003c76:	f002 fbeb 	bl	8006450 <HAL_TIM_Base_Init>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8003c80:	f000 fb20 	bl	80042c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c88:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003c8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c8e:	4619      	mov	r1, r3
 8003c90:	481c      	ldr	r0, [pc, #112]	; (8003d04 <MX_TIM4_Init+0xe4>)
 8003c92:	f002 fe79 	bl	8006988 <HAL_TIM_ConfigClockSource>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8003c9c:	f000 fb12 	bl	80042c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003ca0:	4818      	ldr	r0, [pc, #96]	; (8003d04 <MX_TIM4_Init+0xe4>)
 8003ca2:	f002 fc8d 	bl	80065c0 <HAL_TIM_PWM_Init>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8003cac:	f000 fb0a 	bl	80042c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003cb8:	f107 0320 	add.w	r3, r7, #32
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4811      	ldr	r0, [pc, #68]	; (8003d04 <MX_TIM4_Init+0xe4>)
 8003cc0:	f003 fa3a 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8003cca:	f000 fafb 	bl	80042c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cce:	2360      	movs	r3, #96	; 0x60
 8003cd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cde:	1d3b      	adds	r3, r7, #4
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4807      	ldr	r0, [pc, #28]	; (8003d04 <MX_TIM4_Init+0xe4>)
 8003ce6:	f002 fd8d 	bl	8006804 <HAL_TIM_PWM_ConfigChannel>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8003cf0:	f000 fae8 	bl	80042c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003cf4:	4803      	ldr	r0, [pc, #12]	; (8003d04 <MX_TIM4_Init+0xe4>)
 8003cf6:	f000 fc75 	bl	80045e4 <HAL_TIM_MspPostInit>

}
 8003cfa:	bf00      	nop
 8003cfc:	3738      	adds	r7, #56	; 0x38
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20000aa8 	.word	0x20000aa8
 8003d08:	40000800 	.word	0x40000800

08003d0c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d12:	f107 0308 	add.w	r3, r7, #8
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	605a      	str	r2, [r3, #4]
 8003d1c:	609a      	str	r2, [r3, #8]
 8003d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d20:	463b      	mov	r3, r7
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003d28:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <MX_TIM5_Init+0x94>)
 8003d2a:	4a1e      	ldr	r2, [pc, #120]	; (8003da4 <MX_TIM5_Init+0x98>)
 8003d2c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 96-1;
 8003d2e:	4b1c      	ldr	r3, [pc, #112]	; (8003da0 <MX_TIM5_Init+0x94>)
 8003d30:	225f      	movs	r2, #95	; 0x5f
 8003d32:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d34:	4b1a      	ldr	r3, [pc, #104]	; (8003da0 <MX_TIM5_Init+0x94>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 8003d3a:	4b19      	ldr	r3, [pc, #100]	; (8003da0 <MX_TIM5_Init+0x94>)
 8003d3c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003d40:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d42:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <MX_TIM5_Init+0x94>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d48:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <MX_TIM5_Init+0x94>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003d4e:	4814      	ldr	r0, [pc, #80]	; (8003da0 <MX_TIM5_Init+0x94>)
 8003d50:	f002 fb7e 	bl	8006450 <HAL_TIM_Base_Init>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8003d5a:	f000 fab3 	bl	80042c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003d64:	f107 0308 	add.w	r3, r7, #8
 8003d68:	4619      	mov	r1, r3
 8003d6a:	480d      	ldr	r0, [pc, #52]	; (8003da0 <MX_TIM5_Init+0x94>)
 8003d6c:	f002 fe0c 	bl	8006988 <HAL_TIM_ConfigClockSource>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003d76:	f000 faa5 	bl	80042c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003d82:	463b      	mov	r3, r7
 8003d84:	4619      	mov	r1, r3
 8003d86:	4806      	ldr	r0, [pc, #24]	; (8003da0 <MX_TIM5_Init+0x94>)
 8003d88:	f003 f9d6 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003d92:	f000 fa97 	bl	80042c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003d96:	bf00      	nop
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20000b84 	.word	0x20000b84
 8003da4:	40000c00 	.word	0x40000c00

08003da8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dae:	463b      	mov	r3, r7
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003db6:	4b15      	ldr	r3, [pc, #84]	; (8003e0c <MX_TIM6_Init+0x64>)
 8003db8:	4a15      	ldr	r2, [pc, #84]	; (8003e10 <MX_TIM6_Init+0x68>)
 8003dba:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8003dbc:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <MX_TIM6_Init+0x64>)
 8003dbe:	2231      	movs	r2, #49	; 0x31
 8003dc0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dc2:	4b12      	ldr	r3, [pc, #72]	; (8003e0c <MX_TIM6_Init+0x64>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8003dc8:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <MX_TIM6_Init+0x64>)
 8003dca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003dce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dd0:	4b0e      	ldr	r3, [pc, #56]	; (8003e0c <MX_TIM6_Init+0x64>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003dd6:	480d      	ldr	r0, [pc, #52]	; (8003e0c <MX_TIM6_Init+0x64>)
 8003dd8:	f002 fb3a 	bl	8006450 <HAL_TIM_Base_Init>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003de2:	f000 fa6f 	bl	80042c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003de6:	2300      	movs	r3, #0
 8003de8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dea:	2300      	movs	r3, #0
 8003dec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003dee:	463b      	mov	r3, r7
 8003df0:	4619      	mov	r1, r3
 8003df2:	4806      	ldr	r0, [pc, #24]	; (8003e0c <MX_TIM6_Init+0x64>)
 8003df4:	f003 f9a0 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003dfe:	f000 fa61 	bl	80042c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000ca4 	.word	0x20000ca4
 8003e10:	40001000 	.word	0x40001000

08003e14 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e1a:	f107 0308 	add.w	r3, r7, #8
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	605a      	str	r2, [r3, #4]
 8003e24:	609a      	str	r2, [r3, #8]
 8003e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e28:	463b      	mov	r3, r7
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003e30:	4b1e      	ldr	r3, [pc, #120]	; (8003eac <MX_TIM8_Init+0x98>)
 8003e32:	4a1f      	ldr	r2, [pc, #124]	; (8003eb0 <MX_TIM8_Init+0x9c>)
 8003e34:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003e36:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <MX_TIM8_Init+0x98>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e3c:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <MX_TIM8_Init+0x98>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003e42:	4b1a      	ldr	r3, [pc, #104]	; (8003eac <MX_TIM8_Init+0x98>)
 8003e44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e48:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e4a:	4b18      	ldr	r3, [pc, #96]	; (8003eac <MX_TIM8_Init+0x98>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003e50:	4b16      	ldr	r3, [pc, #88]	; (8003eac <MX_TIM8_Init+0x98>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e56:	4b15      	ldr	r3, [pc, #84]	; (8003eac <MX_TIM8_Init+0x98>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003e5c:	4813      	ldr	r0, [pc, #76]	; (8003eac <MX_TIM8_Init+0x98>)
 8003e5e:	f002 faf7 	bl	8006450 <HAL_TIM_Base_Init>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8003e68:	f000 fa2c 	bl	80042c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003e72:	f107 0308 	add.w	r3, r7, #8
 8003e76:	4619      	mov	r1, r3
 8003e78:	480c      	ldr	r0, [pc, #48]	; (8003eac <MX_TIM8_Init+0x98>)
 8003e7a:	f002 fd85 	bl	8006988 <HAL_TIM_ConfigClockSource>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8003e84:	f000 fa1e 	bl	80042c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003e90:	463b      	mov	r3, r7
 8003e92:	4619      	mov	r1, r3
 8003e94:	4805      	ldr	r0, [pc, #20]	; (8003eac <MX_TIM8_Init+0x98>)
 8003e96:	f003 f94f 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8003ea0:	f000 fa10 	bl	80042c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003ea4:	bf00      	nop
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	20000a60 	.word	0x20000a60
 8003eb0:	40010400 	.word	0x40010400

08003eb4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08c      	sub	sp, #48	; 0x30
 8003eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003eba:	f107 0320 	add.w	r3, r7, #32
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	605a      	str	r2, [r3, #4]
 8003ec4:	609a      	str	r2, [r3, #8]
 8003ec6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ec8:	1d3b      	adds	r3, r7, #4
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	605a      	str	r2, [r3, #4]
 8003ed0:	609a      	str	r2, [r3, #8]
 8003ed2:	60da      	str	r2, [r3, #12]
 8003ed4:	611a      	str	r2, [r3, #16]
 8003ed6:	615a      	str	r2, [r3, #20]
 8003ed8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003eda:	4b26      	ldr	r3, [pc, #152]	; (8003f74 <MX_TIM9_Init+0xc0>)
 8003edc:	4a26      	ldr	r2, [pc, #152]	; (8003f78 <MX_TIM9_Init+0xc4>)
 8003ede:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 500-1;
 8003ee0:	4b24      	ldr	r3, [pc, #144]	; (8003f74 <MX_TIM9_Init+0xc0>)
 8003ee2:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003ee6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ee8:	4b22      	ldr	r3, [pc, #136]	; (8003f74 <MX_TIM9_Init+0xc0>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2000-1;
 8003eee:	4b21      	ldr	r3, [pc, #132]	; (8003f74 <MX_TIM9_Init+0xc0>)
 8003ef0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003ef4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ef6:	4b1f      	ldr	r3, [pc, #124]	; (8003f74 <MX_TIM9_Init+0xc0>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003efc:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <MX_TIM9_Init+0xc0>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003f02:	481c      	ldr	r0, [pc, #112]	; (8003f74 <MX_TIM9_Init+0xc0>)
 8003f04:	f002 faa4 	bl	8006450 <HAL_TIM_Base_Init>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 8003f0e:	f000 f9d9 	bl	80042c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f16:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003f18:	f107 0320 	add.w	r3, r7, #32
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4815      	ldr	r0, [pc, #84]	; (8003f74 <MX_TIM9_Init+0xc0>)
 8003f20:	f002 fd32 	bl	8006988 <HAL_TIM_ConfigClockSource>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 8003f2a:	f000 f9cb 	bl	80042c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8003f2e:	4811      	ldr	r0, [pc, #68]	; (8003f74 <MX_TIM9_Init+0xc0>)
 8003f30:	f002 fb46 	bl	80065c0 <HAL_TIM_PWM_Init>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8003f3a:	f000 f9c3 	bl	80042c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f3e:	2360      	movs	r3, #96	; 0x60
 8003f40:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003f42:	2300      	movs	r3, #0
 8003f44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f4e:	1d3b      	adds	r3, r7, #4
 8003f50:	2200      	movs	r2, #0
 8003f52:	4619      	mov	r1, r3
 8003f54:	4807      	ldr	r0, [pc, #28]	; (8003f74 <MX_TIM9_Init+0xc0>)
 8003f56:	f002 fc55 	bl	8006804 <HAL_TIM_PWM_ConfigChannel>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8003f60:	f000 f9b0 	bl	80042c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003f64:	4803      	ldr	r0, [pc, #12]	; (8003f74 <MX_TIM9_Init+0xc0>)
 8003f66:	f000 fb3d 	bl	80045e4 <HAL_TIM_MspPostInit>

}
 8003f6a:	bf00      	nop
 8003f6c:	3730      	adds	r7, #48	; 0x30
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000d34 	.word	0x20000d34
 8003f78:	40014000 	.word	0x40014000

08003f7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003f80:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <MX_USART2_UART_Init+0x4c>)
 8003f82:	4a12      	ldr	r2, [pc, #72]	; (8003fcc <MX_USART2_UART_Init+0x50>)
 8003f84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f86:	4b10      	ldr	r3, [pc, #64]	; (8003fc8 <MX_USART2_UART_Init+0x4c>)
 8003f88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f8e:	4b0e      	ldr	r3, [pc, #56]	; (8003fc8 <MX_USART2_UART_Init+0x4c>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f94:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <MX_USART2_UART_Init+0x4c>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f9a:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <MX_USART2_UART_Init+0x4c>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003fa0:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <MX_USART2_UART_Init+0x4c>)
 8003fa2:	220c      	movs	r2, #12
 8003fa4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fa6:	4b08      	ldr	r3, [pc, #32]	; (8003fc8 <MX_USART2_UART_Init+0x4c>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fac:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <MX_USART2_UART_Init+0x4c>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003fb2:	4805      	ldr	r0, [pc, #20]	; (8003fc8 <MX_USART2_UART_Init+0x4c>)
 8003fb4:	f003 f98e 	bl	80072d4 <HAL_UART_Init>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003fbe:	f000 f981 	bl	80042c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003fc2:	bf00      	nop
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000e08 	.word	0x20000e08
 8003fcc:	40004400 	.word	0x40004400

08003fd0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003fd4:	4b11      	ldr	r3, [pc, #68]	; (800401c <MX_USART3_UART_Init+0x4c>)
 8003fd6:	4a12      	ldr	r2, [pc, #72]	; (8004020 <MX_USART3_UART_Init+0x50>)
 8003fd8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003fda:	4b10      	ldr	r3, [pc, #64]	; (800401c <MX_USART3_UART_Init+0x4c>)
 8003fdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003fe0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003fe2:	4b0e      	ldr	r3, [pc, #56]	; (800401c <MX_USART3_UART_Init+0x4c>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	; (800401c <MX_USART3_UART_Init+0x4c>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003fee:	4b0b      	ldr	r3, [pc, #44]	; (800401c <MX_USART3_UART_Init+0x4c>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003ff4:	4b09      	ldr	r3, [pc, #36]	; (800401c <MX_USART3_UART_Init+0x4c>)
 8003ff6:	220c      	movs	r2, #12
 8003ff8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ffa:	4b08      	ldr	r3, [pc, #32]	; (800401c <MX_USART3_UART_Init+0x4c>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004000:	4b06      	ldr	r3, [pc, #24]	; (800401c <MX_USART3_UART_Init+0x4c>)
 8004002:	2200      	movs	r2, #0
 8004004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004006:	4805      	ldr	r0, [pc, #20]	; (800401c <MX_USART3_UART_Init+0x4c>)
 8004008:	f003 f964 	bl	80072d4 <HAL_UART_Init>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004012:	f000 f957 	bl	80042c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004016:	bf00      	nop
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000af0 	.word	0x20000af0
 8004020:	40004800 	.word	0x40004800

08004024 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004028:	4b11      	ldr	r3, [pc, #68]	; (8004070 <MX_USART6_UART_Init+0x4c>)
 800402a:	4a12      	ldr	r2, [pc, #72]	; (8004074 <MX_USART6_UART_Init+0x50>)
 800402c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800402e:	4b10      	ldr	r3, [pc, #64]	; (8004070 <MX_USART6_UART_Init+0x4c>)
 8004030:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004034:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004036:	4b0e      	ldr	r3, [pc, #56]	; (8004070 <MX_USART6_UART_Init+0x4c>)
 8004038:	2200      	movs	r2, #0
 800403a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800403c:	4b0c      	ldr	r3, [pc, #48]	; (8004070 <MX_USART6_UART_Init+0x4c>)
 800403e:	2200      	movs	r2, #0
 8004040:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004042:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <MX_USART6_UART_Init+0x4c>)
 8004044:	2200      	movs	r2, #0
 8004046:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004048:	4b09      	ldr	r3, [pc, #36]	; (8004070 <MX_USART6_UART_Init+0x4c>)
 800404a:	220c      	movs	r2, #12
 800404c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800404e:	4b08      	ldr	r3, [pc, #32]	; (8004070 <MX_USART6_UART_Init+0x4c>)
 8004050:	2200      	movs	r2, #0
 8004052:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004054:	4b06      	ldr	r3, [pc, #24]	; (8004070 <MX_USART6_UART_Init+0x4c>)
 8004056:	2200      	movs	r2, #0
 8004058:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800405a:	4805      	ldr	r0, [pc, #20]	; (8004070 <MX_USART6_UART_Init+0x4c>)
 800405c:	f003 f93a 	bl	80072d4 <HAL_UART_Init>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004066:	f000 f92d 	bl	80042c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800406a:	bf00      	nop
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	20000d7c 	.word	0x20000d7c
 8004074:	40011400 	.word	0x40011400

08004078 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b08c      	sub	sp, #48	; 0x30
 800407c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800407e:	f107 031c 	add.w	r3, r7, #28
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	605a      	str	r2, [r3, #4]
 8004088:	609a      	str	r2, [r3, #8]
 800408a:	60da      	str	r2, [r3, #12]
 800408c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800408e:	2300      	movs	r3, #0
 8004090:	61bb      	str	r3, [r7, #24]
 8004092:	4b86      	ldr	r3, [pc, #536]	; (80042ac <MX_GPIO_Init+0x234>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	4a85      	ldr	r2, [pc, #532]	; (80042ac <MX_GPIO_Init+0x234>)
 8004098:	f043 0310 	orr.w	r3, r3, #16
 800409c:	6313      	str	r3, [r2, #48]	; 0x30
 800409e:	4b83      	ldr	r3, [pc, #524]	; (80042ac <MX_GPIO_Init+0x234>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	f003 0310 	and.w	r3, r3, #16
 80040a6:	61bb      	str	r3, [r7, #24]
 80040a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	4b7f      	ldr	r3, [pc, #508]	; (80042ac <MX_GPIO_Init+0x234>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	4a7e      	ldr	r2, [pc, #504]	; (80042ac <MX_GPIO_Init+0x234>)
 80040b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b8:	6313      	str	r3, [r2, #48]	; 0x30
 80040ba:	4b7c      	ldr	r3, [pc, #496]	; (80042ac <MX_GPIO_Init+0x234>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	4b78      	ldr	r3, [pc, #480]	; (80042ac <MX_GPIO_Init+0x234>)
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	4a77      	ldr	r2, [pc, #476]	; (80042ac <MX_GPIO_Init+0x234>)
 80040d0:	f043 0304 	orr.w	r3, r3, #4
 80040d4:	6313      	str	r3, [r2, #48]	; 0x30
 80040d6:	4b75      	ldr	r3, [pc, #468]	; (80042ac <MX_GPIO_Init+0x234>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	4b71      	ldr	r3, [pc, #452]	; (80042ac <MX_GPIO_Init+0x234>)
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	4a70      	ldr	r2, [pc, #448]	; (80042ac <MX_GPIO_Init+0x234>)
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	6313      	str	r3, [r2, #48]	; 0x30
 80040f2:	4b6e      	ldr	r3, [pc, #440]	; (80042ac <MX_GPIO_Init+0x234>)
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040fe:	2300      	movs	r3, #0
 8004100:	60bb      	str	r3, [r7, #8]
 8004102:	4b6a      	ldr	r3, [pc, #424]	; (80042ac <MX_GPIO_Init+0x234>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	4a69      	ldr	r2, [pc, #420]	; (80042ac <MX_GPIO_Init+0x234>)
 8004108:	f043 0302 	orr.w	r3, r3, #2
 800410c:	6313      	str	r3, [r2, #48]	; 0x30
 800410e:	4b67      	ldr	r3, [pc, #412]	; (80042ac <MX_GPIO_Init+0x234>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	60bb      	str	r3, [r7, #8]
 8004118:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800411a:	2300      	movs	r3, #0
 800411c:	607b      	str	r3, [r7, #4]
 800411e:	4b63      	ldr	r3, [pc, #396]	; (80042ac <MX_GPIO_Init+0x234>)
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	4a62      	ldr	r2, [pc, #392]	; (80042ac <MX_GPIO_Init+0x234>)
 8004124:	f043 0308 	orr.w	r3, r3, #8
 8004128:	6313      	str	r3, [r2, #48]	; 0x30
 800412a:	4b60      	ldr	r3, [pc, #384]	; (80042ac <MX_GPIO_Init+0x234>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	607b      	str	r3, [r7, #4]
 8004134:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WiFi_OK_Pin|DC_Salon_1_Pin|DC_Salon_2_Pin|L_Cocina_Pin
 8004136:	2200      	movs	r2, #0
 8004138:	f641 4131 	movw	r1, #7217	; 0x1c31
 800413c:	485c      	ldr	r0, [pc, #368]	; (80042b0 <MX_GPIO_Init+0x238>)
 800413e:	f001 fce1 	bl	8005b04 <HAL_GPIO_WritePin>
                          |L_Garaje_Pin|L_Tendedero_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DHT22_Pin|DHT11_Pin, GPIO_PIN_RESET);
 8004142:	2200      	movs	r2, #0
 8004144:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8004148:	485a      	ldr	r0, [pc, #360]	; (80042b4 <MX_GPIO_Init+0x23c>)
 800414a:	f001 fcdb 	bl	8005b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Riego_Pin|Peltier_Pin|L_Espejo_Pin|L_Izquierda_Pin
 800414e:	2200      	movs	r2, #0
 8004150:	f24a 01f8 	movw	r1, #41208	; 0xa0f8
 8004154:	4858      	ldr	r0, [pc, #352]	; (80042b8 <MX_GPIO_Init+0x240>)
 8004156:	f001 fcd5 	bl	8005b04 <HAL_GPIO_WritePin>
                          |L_Oficina_Pin|L_Derecha_Pin|L_TV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L_Fregadero_GPIO_Port, L_Fregadero_Pin, GPIO_PIN_RESET);
 800415a:	2200      	movs	r2, #0
 800415c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004160:	4856      	ldr	r0, [pc, #344]	; (80042bc <MX_GPIO_Init+0x244>)
 8004162:	f001 fccf 	bl	8005b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, L_Recibidor_Pin|L_Comedor_Pin|L_Jardin_Pin|L_Sala_Pin
 8004166:	2200      	movs	r2, #0
 8004168:	21ff      	movs	r1, #255	; 0xff
 800416a:	4855      	ldr	r0, [pc, #340]	; (80042c0 <MX_GPIO_Init+0x248>)
 800416c:	f001 fcca 	bl	8005b04 <HAL_GPIO_WritePin>
                          |L_Porche_Pin|L_Ambiente_Pin|L_Bano_Pin|L_Dormitorio_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : B_Stop_Pin Fin_Garaje_Pin */
  GPIO_InitStruct.Pin = B_Stop_Pin|Fin_Garaje_Pin;
 8004170:	2344      	movs	r3, #68	; 0x44
 8004172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004174:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004178:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417a:	2300      	movs	r3, #0
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800417e:	f107 031c 	add.w	r3, r7, #28
 8004182:	4619      	mov	r1, r3
 8004184:	484b      	ldr	r0, [pc, #300]	; (80042b4 <MX_GPIO_Init+0x23c>)
 8004186:	f001 fb09 	bl	800579c <HAL_GPIO_Init>

  /*Configure GPIO pins : S_Int_Pin Fin_Parcela_Pin S_Ext_Pin */
  GPIO_InitStruct.Pin = S_Int_Pin|Fin_Parcela_Pin|S_Ext_Pin;
 800418a:	231a      	movs	r3, #26
 800418c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800418e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004194:	2301      	movs	r3, #1
 8004196:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004198:	f107 031c 	add.w	r3, r7, #28
 800419c:	4619      	mov	r1, r3
 800419e:	4845      	ldr	r0, [pc, #276]	; (80042b4 <MX_GPIO_Init+0x23c>)
 80041a0:	f001 fafc 	bl	800579c <HAL_GPIO_Init>

  /*Configure GPIO pins : WiFi_OK_Pin DC_Salon_1_Pin DC_Salon_2_Pin L_Cocina_Pin
                           L_Garaje_Pin L_Tendedero_Pin */
  GPIO_InitStruct.Pin = WiFi_OK_Pin|DC_Salon_1_Pin|DC_Salon_2_Pin|L_Cocina_Pin
 80041a4:	f641 4331 	movw	r3, #7217	; 0x1c31
 80041a8:	61fb      	str	r3, [r7, #28]
                          |L_Garaje_Pin|L_Tendedero_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041aa:	2301      	movs	r3, #1
 80041ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b2:	2300      	movs	r3, #0
 80041b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041b6:	f107 031c 	add.w	r3, r7, #28
 80041ba:	4619      	mov	r1, r3
 80041bc:	483c      	ldr	r0, [pc, #240]	; (80042b0 <MX_GPIO_Init+0x238>)
 80041be:	f001 faed 	bl	800579c <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT22_Pin DHT11_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin|DHT11_Pin;
 80041c2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80041c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041c8:	2301      	movs	r3, #1
 80041ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041d0:	2300      	movs	r3, #0
 80041d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041d4:	f107 031c 	add.w	r3, r7, #28
 80041d8:	4619      	mov	r1, r3
 80041da:	4836      	ldr	r0, [pc, #216]	; (80042b4 <MX_GPIO_Init+0x23c>)
 80041dc:	f001 fade 	bl	800579c <HAL_GPIO_Init>

  /*Configure GPIO pins : Riego_Pin Peltier_Pin L_Espejo_Pin L_Izquierda_Pin
                           L_Oficina_Pin L_Derecha_Pin L_TV_Pin */
  GPIO_InitStruct.Pin = Riego_Pin|Peltier_Pin|L_Espejo_Pin|L_Izquierda_Pin
 80041e0:	f24a 03f8 	movw	r3, #41208	; 0xa0f8
 80041e4:	61fb      	str	r3, [r7, #28]
                          |L_Oficina_Pin|L_Derecha_Pin|L_TV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041e6:	2301      	movs	r3, #1
 80041e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ee:	2300      	movs	r3, #0
 80041f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041f2:	f107 031c 	add.w	r3, r7, #28
 80041f6:	4619      	mov	r1, r3
 80041f8:	482f      	ldr	r0, [pc, #188]	; (80042b8 <MX_GPIO_Init+0x240>)
 80041fa:	f001 facf 	bl	800579c <HAL_GPIO_Init>

  /*Configure GPIO pin : L_Fregadero_Pin */
  GPIO_InitStruct.Pin = L_Fregadero_Pin;
 80041fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004202:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004204:	2301      	movs	r3, #1
 8004206:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004208:	2300      	movs	r3, #0
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800420c:	2300      	movs	r3, #0
 800420e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(L_Fregadero_GPIO_Port, &GPIO_InitStruct);
 8004210:	f107 031c 	add.w	r3, r7, #28
 8004214:	4619      	mov	r1, r3
 8004216:	4829      	ldr	r0, [pc, #164]	; (80042bc <MX_GPIO_Init+0x244>)
 8004218:	f001 fac0 	bl	800579c <HAL_GPIO_Init>

  /*Configure GPIO pins : L_Recibidor_Pin L_Comedor_Pin L_Jardin_Pin L_Sala_Pin
                           L_Porche_Pin L_Ambiente_Pin L_Bano_Pin L_Dormitorio_Pin */
  GPIO_InitStruct.Pin = L_Recibidor_Pin|L_Comedor_Pin|L_Jardin_Pin|L_Sala_Pin
 800421c:	23ff      	movs	r3, #255	; 0xff
 800421e:	61fb      	str	r3, [r7, #28]
                          |L_Porche_Pin|L_Ambiente_Pin|L_Bano_Pin|L_Dormitorio_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004220:	2301      	movs	r3, #1
 8004222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004224:	2300      	movs	r3, #0
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004228:	2300      	movs	r3, #0
 800422a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800422c:	f107 031c 	add.w	r3, r7, #28
 8004230:	4619      	mov	r1, r3
 8004232:	4823      	ldr	r0, [pc, #140]	; (80042c0 <MX_GPIO_Init+0x248>)
 8004234:	f001 fab2 	bl	800579c <HAL_GPIO_Init>

  /*Configure GPIO pin : B_Timbre_Pin */
  GPIO_InitStruct.Pin = B_Timbre_Pin;
 8004238:	2301      	movs	r3, #1
 800423a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800423c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004240:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004242:	2302      	movs	r3, #2
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B_Timbre_GPIO_Port, &GPIO_InitStruct);
 8004246:	f107 031c 	add.w	r3, r7, #28
 800424a:	4619      	mov	r1, r3
 800424c:	4819      	ldr	r0, [pc, #100]	; (80042b4 <MX_GPIO_Init+0x23c>)
 800424e:	f001 faa5 	bl	800579c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004252:	2200      	movs	r2, #0
 8004254:	2100      	movs	r1, #0
 8004256:	2006      	movs	r0, #6
 8004258:	f001 f9d7 	bl	800560a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800425c:	2006      	movs	r0, #6
 800425e:	f001 f9f0 	bl	8005642 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8004262:	2200      	movs	r2, #0
 8004264:	2100      	movs	r1, #0
 8004266:	2007      	movs	r0, #7
 8004268:	f001 f9cf 	bl	800560a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800426c:	2007      	movs	r0, #7
 800426e:	f001 f9e8 	bl	8005642 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8004272:	2200      	movs	r2, #0
 8004274:	2100      	movs	r1, #0
 8004276:	2009      	movs	r0, #9
 8004278:	f001 f9c7 	bl	800560a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800427c:	2009      	movs	r0, #9
 800427e:	f001 f9e0 	bl	8005642 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004282:	2200      	movs	r2, #0
 8004284:	2100      	movs	r1, #0
 8004286:	200a      	movs	r0, #10
 8004288:	f001 f9bf 	bl	800560a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800428c:	200a      	movs	r0, #10
 800428e:	f001 f9d8 	bl	8005642 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004292:	2200      	movs	r2, #0
 8004294:	2100      	movs	r1, #0
 8004296:	2017      	movs	r0, #23
 8004298:	f001 f9b7 	bl	800560a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800429c:	2017      	movs	r0, #23
 800429e:	f001 f9d0 	bl	8005642 <HAL_NVIC_EnableIRQ>

}
 80042a2:	bf00      	nop
 80042a4:	3730      	adds	r7, #48	; 0x30
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40023800 	.word	0x40023800
 80042b0:	40020800 	.word	0x40020800
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40020400 	.word	0x40020400
 80042bc:	40020000 	.word	0x40020000
 80042c0:	40020c00 	.word	0x40020c00

080042c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042c8:	b672      	cpsid	i
}
 80042ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80042cc:	e7fe      	b.n	80042cc <Error_Handler+0x8>
	...

080042d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042d6:	2300      	movs	r3, #0
 80042d8:	607b      	str	r3, [r7, #4]
 80042da:	4b10      	ldr	r3, [pc, #64]	; (800431c <HAL_MspInit+0x4c>)
 80042dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042de:	4a0f      	ldr	r2, [pc, #60]	; (800431c <HAL_MspInit+0x4c>)
 80042e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042e4:	6453      	str	r3, [r2, #68]	; 0x44
 80042e6:	4b0d      	ldr	r3, [pc, #52]	; (800431c <HAL_MspInit+0x4c>)
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ee:	607b      	str	r3, [r7, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042f2:	2300      	movs	r3, #0
 80042f4:	603b      	str	r3, [r7, #0]
 80042f6:	4b09      	ldr	r3, [pc, #36]	; (800431c <HAL_MspInit+0x4c>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	4a08      	ldr	r2, [pc, #32]	; (800431c <HAL_MspInit+0x4c>)
 80042fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004300:	6413      	str	r3, [r2, #64]	; 0x40
 8004302:	4b06      	ldr	r3, [pc, #24]	; (800431c <HAL_MspInit+0x4c>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800430e:	2007      	movs	r0, #7
 8004310:	f001 f970 	bl	80055f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004314:	bf00      	nop
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40023800 	.word	0x40023800

08004320 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08e      	sub	sp, #56	; 0x38
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	605a      	str	r2, [r3, #4]
 8004332:	609a      	str	r2, [r3, #8]
 8004334:	60da      	str	r2, [r3, #12]
 8004336:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a45      	ldr	r2, [pc, #276]	; (8004454 <HAL_ADC_MspInit+0x134>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d128      	bne.n	8004394 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004342:	2300      	movs	r3, #0
 8004344:	623b      	str	r3, [r7, #32]
 8004346:	4b44      	ldr	r3, [pc, #272]	; (8004458 <HAL_ADC_MspInit+0x138>)
 8004348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434a:	4a43      	ldr	r2, [pc, #268]	; (8004458 <HAL_ADC_MspInit+0x138>)
 800434c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004350:	6453      	str	r3, [r2, #68]	; 0x44
 8004352:	4b41      	ldr	r3, [pc, #260]	; (8004458 <HAL_ADC_MspInit+0x138>)
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435a:	623b      	str	r3, [r7, #32]
 800435c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
 8004362:	4b3d      	ldr	r3, [pc, #244]	; (8004458 <HAL_ADC_MspInit+0x138>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	4a3c      	ldr	r2, [pc, #240]	; (8004458 <HAL_ADC_MspInit+0x138>)
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	6313      	str	r3, [r2, #48]	; 0x30
 800436e:	4b3a      	ldr	r3, [pc, #232]	; (8004458 <HAL_ADC_MspInit+0x138>)
 8004370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	61fb      	str	r3, [r7, #28]
 8004378:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = LDR_Pin;
 800437a:	2310      	movs	r3, #16
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800437e:	2303      	movs	r3, #3
 8004380:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004382:	2300      	movs	r3, #0
 8004384:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 8004386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800438a:	4619      	mov	r1, r3
 800438c:	4833      	ldr	r0, [pc, #204]	; (800445c <HAL_ADC_MspInit+0x13c>)
 800438e:	f001 fa05 	bl	800579c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004392:	e05a      	b.n	800444a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a31      	ldr	r2, [pc, #196]	; (8004460 <HAL_ADC_MspInit+0x140>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d128      	bne.n	80043f0 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800439e:	2300      	movs	r3, #0
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	4b2d      	ldr	r3, [pc, #180]	; (8004458 <HAL_ADC_MspInit+0x138>)
 80043a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a6:	4a2c      	ldr	r2, [pc, #176]	; (8004458 <HAL_ADC_MspInit+0x138>)
 80043a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043ac:	6453      	str	r3, [r2, #68]	; 0x44
 80043ae:	4b2a      	ldr	r3, [pc, #168]	; (8004458 <HAL_ADC_MspInit+0x138>)
 80043b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043b6:	61bb      	str	r3, [r7, #24]
 80043b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ba:	2300      	movs	r3, #0
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	4b26      	ldr	r3, [pc, #152]	; (8004458 <HAL_ADC_MspInit+0x138>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	4a25      	ldr	r2, [pc, #148]	; (8004458 <HAL_ADC_MspInit+0x138>)
 80043c4:	f043 0302 	orr.w	r3, r3, #2
 80043c8:	6313      	str	r3, [r2, #48]	; 0x30
 80043ca:	4b23      	ldr	r3, [pc, #140]	; (8004458 <HAL_ADC_MspInit+0x138>)
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = HW_390_Pin;
 80043d6:	2301      	movs	r3, #1
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043da:	2303      	movs	r3, #3
 80043dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HW_390_GPIO_Port, &GPIO_InitStruct);
 80043e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043e6:	4619      	mov	r1, r3
 80043e8:	481e      	ldr	r0, [pc, #120]	; (8004464 <HAL_ADC_MspInit+0x144>)
 80043ea:	f001 f9d7 	bl	800579c <HAL_GPIO_Init>
}
 80043ee:	e02c      	b.n	800444a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a1c      	ldr	r2, [pc, #112]	; (8004468 <HAL_ADC_MspInit+0x148>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d127      	bne.n	800444a <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	4b16      	ldr	r3, [pc, #88]	; (8004458 <HAL_ADC_MspInit+0x138>)
 8004400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004402:	4a15      	ldr	r2, [pc, #84]	; (8004458 <HAL_ADC_MspInit+0x138>)
 8004404:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004408:	6453      	str	r3, [r2, #68]	; 0x44
 800440a:	4b13      	ldr	r3, [pc, #76]	; (8004458 <HAL_ADC_MspInit+0x138>)
 800440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <HAL_ADC_MspInit+0x138>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	4a0e      	ldr	r2, [pc, #56]	; (8004458 <HAL_ADC_MspInit+0x138>)
 8004420:	f043 0304 	orr.w	r3, r3, #4
 8004424:	6313      	str	r3, [r2, #48]	; 0x30
 8004426:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <HAL_ADC_MspInit+0x138>)
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Lluvia_Pin;
 8004432:	2302      	movs	r3, #2
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004436:	2303      	movs	r3, #3
 8004438:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443a:	2300      	movs	r3, #0
 800443c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Lluvia_GPIO_Port, &GPIO_InitStruct);
 800443e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004442:	4619      	mov	r1, r3
 8004444:	4809      	ldr	r0, [pc, #36]	; (800446c <HAL_ADC_MspInit+0x14c>)
 8004446:	f001 f9a9 	bl	800579c <HAL_GPIO_Init>
}
 800444a:	bf00      	nop
 800444c:	3738      	adds	r7, #56	; 0x38
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40012000 	.word	0x40012000
 8004458:	40023800 	.word	0x40023800
 800445c:	40020000 	.word	0x40020000
 8004460:	40012100 	.word	0x40012100
 8004464:	40020400 	.word	0x40020400
 8004468:	40012200 	.word	0x40012200
 800446c:	40020800 	.word	0x40020800

08004470 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004470:	b480      	push	{r7}
 8004472:	b08b      	sub	sp, #44	; 0x2c
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a51      	ldr	r2, [pc, #324]	; (80045c4 <HAL_TIM_Base_MspInit+0x154>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d10e      	bne.n	80044a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
 8004486:	4b50      	ldr	r3, [pc, #320]	; (80045c8 <HAL_TIM_Base_MspInit+0x158>)
 8004488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448a:	4a4f      	ldr	r2, [pc, #316]	; (80045c8 <HAL_TIM_Base_MspInit+0x158>)
 800448c:	f043 0301 	orr.w	r3, r3, #1
 8004490:	6453      	str	r3, [r2, #68]	; 0x44
 8004492:	4b4d      	ldr	r3, [pc, #308]	; (80045c8 <HAL_TIM_Base_MspInit+0x158>)
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800449e:	e08a      	b.n	80045b6 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM2)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a8:	d10e      	bne.n	80044c8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044aa:	2300      	movs	r3, #0
 80044ac:	623b      	str	r3, [r7, #32]
 80044ae:	4b46      	ldr	r3, [pc, #280]	; (80045c8 <HAL_TIM_Base_MspInit+0x158>)
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	4a45      	ldr	r2, [pc, #276]	; (80045c8 <HAL_TIM_Base_MspInit+0x158>)
 80044b4:	f043 0301 	orr.w	r3, r3, #1
 80044b8:	6413      	str	r3, [r2, #64]	; 0x40
 80044ba:	4b43      	ldr	r3, [pc, #268]	; (80045c8 <HAL_TIM_Base_MspInit+0x158>)
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	623b      	str	r3, [r7, #32]
 80044c4:	6a3b      	ldr	r3, [r7, #32]
}
 80044c6:	e076      	b.n	80045b6 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM3)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a3f      	ldr	r2, [pc, #252]	; (80045cc <HAL_TIM_Base_MspInit+0x15c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d10e      	bne.n	80044f0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80044d2:	2300      	movs	r3, #0
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	4b3c      	ldr	r3, [pc, #240]	; (80045c8 <HAL_TIM_Base_MspInit+0x158>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	4a3b      	ldr	r2, [pc, #236]	; (80045c8 <HAL_TIM_Base_MspInit+0x158>)
 80044dc:	f043 0302 	orr.w	r3, r3, #2
 80044e0:	6413      	str	r3, [r2, #64]	; 0x40
 80044e2:	4b39      	ldr	r3, [pc, #228]	; (80045c8 <HAL_TIM_Base_MspInit+0x158>)
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	61fb      	str	r3, [r7, #28]
 80044ec:	69fb      	ldr	r3, [r7, #28]
}
 80044ee:	e062      	b.n	80045b6 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM4)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a36      	ldr	r2, [pc, #216]	; (80045d0 <HAL_TIM_Base_MspInit+0x160>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d10e      	bne.n	8004518 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	61bb      	str	r3, [r7, #24]
 80044fe:	4b32      	ldr	r3, [pc, #200]	; (80045c8 <HAL_TIM_Base_MspInit+0x158>)
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	4a31      	ldr	r2, [pc, #196]	; (80045c8 <HAL_TIM_Base_MspInit+0x158>)
 8004504:	f043 0304 	orr.w	r3, r3, #4
 8004508:	6413      	str	r3, [r2, #64]	; 0x40
 800450a:	4b2f      	ldr	r3, [pc, #188]	; (80045c8 <HAL_TIM_Base_MspInit+0x158>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	61bb      	str	r3, [r7, #24]
 8004514:	69bb      	ldr	r3, [r7, #24]
}
 8004516:	e04e      	b.n	80045b6 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM5)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a2d      	ldr	r2, [pc, #180]	; (80045d4 <HAL_TIM_Base_MspInit+0x164>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d10e      	bne.n	8004540 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004522:	2300      	movs	r3, #0
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	4b28      	ldr	r3, [pc, #160]	; (80045c8 <HAL_TIM_Base_MspInit+0x158>)
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	4a27      	ldr	r2, [pc, #156]	; (80045c8 <HAL_TIM_Base_MspInit+0x158>)
 800452c:	f043 0308 	orr.w	r3, r3, #8
 8004530:	6413      	str	r3, [r2, #64]	; 0x40
 8004532:	4b25      	ldr	r3, [pc, #148]	; (80045c8 <HAL_TIM_Base_MspInit+0x158>)
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	697b      	ldr	r3, [r7, #20]
}
 800453e:	e03a      	b.n	80045b6 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM6)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a24      	ldr	r2, [pc, #144]	; (80045d8 <HAL_TIM_Base_MspInit+0x168>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d10e      	bne.n	8004568 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800454a:	2300      	movs	r3, #0
 800454c:	613b      	str	r3, [r7, #16]
 800454e:	4b1e      	ldr	r3, [pc, #120]	; (80045c8 <HAL_TIM_Base_MspInit+0x158>)
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	4a1d      	ldr	r2, [pc, #116]	; (80045c8 <HAL_TIM_Base_MspInit+0x158>)
 8004554:	f043 0310 	orr.w	r3, r3, #16
 8004558:	6413      	str	r3, [r2, #64]	; 0x40
 800455a:	4b1b      	ldr	r3, [pc, #108]	; (80045c8 <HAL_TIM_Base_MspInit+0x158>)
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	f003 0310 	and.w	r3, r3, #16
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	693b      	ldr	r3, [r7, #16]
}
 8004566:	e026      	b.n	80045b6 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM8)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a1b      	ldr	r2, [pc, #108]	; (80045dc <HAL_TIM_Base_MspInit+0x16c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d10e      	bne.n	8004590 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004572:	2300      	movs	r3, #0
 8004574:	60fb      	str	r3, [r7, #12]
 8004576:	4b14      	ldr	r3, [pc, #80]	; (80045c8 <HAL_TIM_Base_MspInit+0x158>)
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	4a13      	ldr	r2, [pc, #76]	; (80045c8 <HAL_TIM_Base_MspInit+0x158>)
 800457c:	f043 0302 	orr.w	r3, r3, #2
 8004580:	6453      	str	r3, [r2, #68]	; 0x44
 8004582:	4b11      	ldr	r3, [pc, #68]	; (80045c8 <HAL_TIM_Base_MspInit+0x158>)
 8004584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	68fb      	ldr	r3, [r7, #12]
}
 800458e:	e012      	b.n	80045b6 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM9)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a12      	ldr	r2, [pc, #72]	; (80045e0 <HAL_TIM_Base_MspInit+0x170>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d10d      	bne.n	80045b6 <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800459a:	2300      	movs	r3, #0
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	4b0a      	ldr	r3, [pc, #40]	; (80045c8 <HAL_TIM_Base_MspInit+0x158>)
 80045a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a2:	4a09      	ldr	r2, [pc, #36]	; (80045c8 <HAL_TIM_Base_MspInit+0x158>)
 80045a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a8:	6453      	str	r3, [r2, #68]	; 0x44
 80045aa:	4b07      	ldr	r3, [pc, #28]	; (80045c8 <HAL_TIM_Base_MspInit+0x158>)
 80045ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b2:	60bb      	str	r3, [r7, #8]
 80045b4:	68bb      	ldr	r3, [r7, #8]
}
 80045b6:	bf00      	nop
 80045b8:	372c      	adds	r7, #44	; 0x2c
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40010000 	.word	0x40010000
 80045c8:	40023800 	.word	0x40023800
 80045cc:	40000400 	.word	0x40000400
 80045d0:	40000800 	.word	0x40000800
 80045d4:	40000c00 	.word	0x40000c00
 80045d8:	40001000 	.word	0x40001000
 80045dc:	40010400 	.word	0x40010400
 80045e0:	40014000 	.word	0x40014000

080045e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08e      	sub	sp, #56	; 0x38
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	605a      	str	r2, [r3, #4]
 80045f6:	609a      	str	r2, [r3, #8]
 80045f8:	60da      	str	r2, [r3, #12]
 80045fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a7a      	ldr	r2, [pc, #488]	; (80047ec <HAL_TIM_MspPostInit+0x208>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d11f      	bne.n	8004646 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	623b      	str	r3, [r7, #32]
 800460a:	4b79      	ldr	r3, [pc, #484]	; (80047f0 <HAL_TIM_MspPostInit+0x20c>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	4a78      	ldr	r2, [pc, #480]	; (80047f0 <HAL_TIM_MspPostInit+0x20c>)
 8004610:	f043 0301 	orr.w	r3, r3, #1
 8004614:	6313      	str	r3, [r2, #48]	; 0x30
 8004616:	4b76      	ldr	r3, [pc, #472]	; (80047f0 <HAL_TIM_MspPostInit+0x20c>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	623b      	str	r3, [r7, #32]
 8004620:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = L_GamingG_Pin|L_GamingR_Pin|L_GamingB_Pin;
 8004622:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004626:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004628:	2302      	movs	r3, #2
 800462a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462c:	2300      	movs	r3, #0
 800462e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004630:	2300      	movs	r3, #0
 8004632:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004634:	2301      	movs	r3, #1
 8004636:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800463c:	4619      	mov	r1, r3
 800463e:	486d      	ldr	r0, [pc, #436]	; (80047f4 <HAL_TIM_MspPostInit+0x210>)
 8004640:	f001 f8ac 	bl	800579c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8004644:	e0cd      	b.n	80047e2 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM2)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464e:	d13d      	bne.n	80046cc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004650:	2300      	movs	r3, #0
 8004652:	61fb      	str	r3, [r7, #28]
 8004654:	4b66      	ldr	r3, [pc, #408]	; (80047f0 <HAL_TIM_MspPostInit+0x20c>)
 8004656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004658:	4a65      	ldr	r2, [pc, #404]	; (80047f0 <HAL_TIM_MspPostInit+0x20c>)
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	6313      	str	r3, [r2, #48]	; 0x30
 8004660:	4b63      	ldr	r3, [pc, #396]	; (80047f0 <HAL_TIM_MspPostInit+0x20c>)
 8004662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	61fb      	str	r3, [r7, #28]
 800466a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800466c:	2300      	movs	r3, #0
 800466e:	61bb      	str	r3, [r7, #24]
 8004670:	4b5f      	ldr	r3, [pc, #380]	; (80047f0 <HAL_TIM_MspPostInit+0x20c>)
 8004672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004674:	4a5e      	ldr	r2, [pc, #376]	; (80047f0 <HAL_TIM_MspPostInit+0x20c>)
 8004676:	f043 0302 	orr.w	r3, r3, #2
 800467a:	6313      	str	r3, [r2, #48]	; 0x30
 800467c:	4b5c      	ldr	r3, [pc, #368]	; (80047f0 <HAL_TIM_MspPostInit+0x20c>)
 800467e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	61bb      	str	r3, [r7, #24]
 8004686:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = S_Parcela_Pin|S_Garaje_Pin;
 8004688:	2303      	movs	r3, #3
 800468a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800468c:	2302      	movs	r3, #2
 800468e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004690:	2300      	movs	r3, #0
 8004692:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004694:	2300      	movs	r3, #0
 8004696:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004698:	2301      	movs	r3, #1
 800469a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800469c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046a0:	4619      	mov	r1, r3
 80046a2:	4854      	ldr	r0, [pc, #336]	; (80047f4 <HAL_TIM_MspPostInit+0x210>)
 80046a4:	f001 f87a 	bl	800579c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S_Tendedero_Pin;
 80046a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ae:	2302      	movs	r3, #2
 80046b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b2:	2300      	movs	r3, #0
 80046b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b6:	2300      	movs	r3, #0
 80046b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80046ba:	2301      	movs	r3, #1
 80046bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(S_Tendedero_GPIO_Port, &GPIO_InitStruct);
 80046be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046c2:	4619      	mov	r1, r3
 80046c4:	484c      	ldr	r0, [pc, #304]	; (80047f8 <HAL_TIM_MspPostInit+0x214>)
 80046c6:	f001 f869 	bl	800579c <HAL_GPIO_Init>
}
 80046ca:	e08a      	b.n	80047e2 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM3)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a4a      	ldr	r2, [pc, #296]	; (80047fc <HAL_TIM_MspPostInit+0x218>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d13d      	bne.n	8004752 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046d6:	2300      	movs	r3, #0
 80046d8:	617b      	str	r3, [r7, #20]
 80046da:	4b45      	ldr	r3, [pc, #276]	; (80047f0 <HAL_TIM_MspPostInit+0x20c>)
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	4a44      	ldr	r2, [pc, #272]	; (80047f0 <HAL_TIM_MspPostInit+0x20c>)
 80046e0:	f043 0301 	orr.w	r3, r3, #1
 80046e4:	6313      	str	r3, [r2, #48]	; 0x30
 80046e6:	4b42      	ldr	r3, [pc, #264]	; (80047f0 <HAL_TIM_MspPostInit+0x20c>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046f2:	2300      	movs	r3, #0
 80046f4:	613b      	str	r3, [r7, #16]
 80046f6:	4b3e      	ldr	r3, [pc, #248]	; (80047f0 <HAL_TIM_MspPostInit+0x20c>)
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	4a3d      	ldr	r2, [pc, #244]	; (80047f0 <HAL_TIM_MspPostInit+0x20c>)
 80046fc:	f043 0304 	orr.w	r3, r3, #4
 8004700:	6313      	str	r3, [r2, #48]	; 0x30
 8004702:	4b3b      	ldr	r3, [pc, #236]	; (80047f0 <HAL_TIM_MspPostInit+0x20c>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = S_Dormitorio_Pin;
 800470e:	2380      	movs	r3, #128	; 0x80
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004712:	2302      	movs	r3, #2
 8004714:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004716:	2300      	movs	r3, #0
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800471a:	2300      	movs	r3, #0
 800471c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800471e:	2302      	movs	r3, #2
 8004720:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(S_Dormitorio_GPIO_Port, &GPIO_InitStruct);
 8004722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004726:	4619      	mov	r1, r3
 8004728:	4832      	ldr	r0, [pc, #200]	; (80047f4 <HAL_TIM_MspPostInit+0x210>)
 800472a:	f001 f837 	bl	800579c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S_Oficina_Pin|S_Salon_Pin;
 800472e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004734:	2302      	movs	r3, #2
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004738:	2300      	movs	r3, #0
 800473a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800473c:	2300      	movs	r3, #0
 800473e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004740:	2302      	movs	r3, #2
 8004742:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004748:	4619      	mov	r1, r3
 800474a:	482d      	ldr	r0, [pc, #180]	; (8004800 <HAL_TIM_MspPostInit+0x21c>)
 800474c:	f001 f826 	bl	800579c <HAL_GPIO_Init>
}
 8004750:	e047      	b.n	80047e2 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM4)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a2b      	ldr	r2, [pc, #172]	; (8004804 <HAL_TIM_MspPostInit+0x220>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d11f      	bne.n	800479c <HAL_TIM_MspPostInit+0x1b8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	4b23      	ldr	r3, [pc, #140]	; (80047f0 <HAL_TIM_MspPostInit+0x20c>)
 8004762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004764:	4a22      	ldr	r2, [pc, #136]	; (80047f0 <HAL_TIM_MspPostInit+0x20c>)
 8004766:	f043 0308 	orr.w	r3, r3, #8
 800476a:	6313      	str	r3, [r2, #48]	; 0x30
 800476c:	4b20      	ldr	r3, [pc, #128]	; (80047f0 <HAL_TIM_MspPostInit+0x20c>)
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	f003 0308 	and.w	r3, r3, #8
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Z_Timbre_Pin;
 8004778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477e:	2302      	movs	r3, #2
 8004780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004782:	2300      	movs	r3, #0
 8004784:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004786:	2300      	movs	r3, #0
 8004788:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800478a:	2302      	movs	r3, #2
 800478c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Z_Timbre_GPIO_Port, &GPIO_InitStruct);
 800478e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004792:	4619      	mov	r1, r3
 8004794:	481c      	ldr	r0, [pc, #112]	; (8004808 <HAL_TIM_MspPostInit+0x224>)
 8004796:	f001 f801 	bl	800579c <HAL_GPIO_Init>
}
 800479a:	e022      	b.n	80047e2 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM9)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a1a      	ldr	r2, [pc, #104]	; (800480c <HAL_TIM_MspPostInit+0x228>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d11d      	bne.n	80047e2 <HAL_TIM_MspPostInit+0x1fe>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	4b11      	ldr	r3, [pc, #68]	; (80047f0 <HAL_TIM_MspPostInit+0x20c>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	4a10      	ldr	r2, [pc, #64]	; (80047f0 <HAL_TIM_MspPostInit+0x20c>)
 80047b0:	f043 0310 	orr.w	r3, r3, #16
 80047b4:	6313      	str	r3, [r2, #48]	; 0x30
 80047b6:	4b0e      	ldr	r3, [pc, #56]	; (80047f0 <HAL_TIM_MspPostInit+0x20c>)
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	f003 0310 	and.w	r3, r3, #16
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80047c2:	2320      	movs	r3, #32
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c6:	2302      	movs	r3, #2
 80047c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ce:	2300      	movs	r3, #0
 80047d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80047d2:	2303      	movs	r3, #3
 80047d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047da:	4619      	mov	r1, r3
 80047dc:	480c      	ldr	r0, [pc, #48]	; (8004810 <HAL_TIM_MspPostInit+0x22c>)
 80047de:	f000 ffdd 	bl	800579c <HAL_GPIO_Init>
}
 80047e2:	bf00      	nop
 80047e4:	3738      	adds	r7, #56	; 0x38
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40010000 	.word	0x40010000
 80047f0:	40023800 	.word	0x40023800
 80047f4:	40020000 	.word	0x40020000
 80047f8:	40020400 	.word	0x40020400
 80047fc:	40000400 	.word	0x40000400
 8004800:	40020800 	.word	0x40020800
 8004804:	40000800 	.word	0x40000800
 8004808:	40020c00 	.word	0x40020c00
 800480c:	40014000 	.word	0x40014000
 8004810:	40021000 	.word	0x40021000

08004814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b08e      	sub	sp, #56	; 0x38
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800481c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	605a      	str	r2, [r3, #4]
 8004826:	609a      	str	r2, [r3, #8]
 8004828:	60da      	str	r2, [r3, #12]
 800482a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a63      	ldr	r2, [pc, #396]	; (80049c0 <HAL_UART_MspInit+0x1ac>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d134      	bne.n	80048a0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004836:	2300      	movs	r3, #0
 8004838:	623b      	str	r3, [r7, #32]
 800483a:	4b62      	ldr	r3, [pc, #392]	; (80049c4 <HAL_UART_MspInit+0x1b0>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	4a61      	ldr	r2, [pc, #388]	; (80049c4 <HAL_UART_MspInit+0x1b0>)
 8004840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004844:	6413      	str	r3, [r2, #64]	; 0x40
 8004846:	4b5f      	ldr	r3, [pc, #380]	; (80049c4 <HAL_UART_MspInit+0x1b0>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484e:	623b      	str	r3, [r7, #32]
 8004850:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004852:	2300      	movs	r3, #0
 8004854:	61fb      	str	r3, [r7, #28]
 8004856:	4b5b      	ldr	r3, [pc, #364]	; (80049c4 <HAL_UART_MspInit+0x1b0>)
 8004858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485a:	4a5a      	ldr	r2, [pc, #360]	; (80049c4 <HAL_UART_MspInit+0x1b0>)
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	6313      	str	r3, [r2, #48]	; 0x30
 8004862:	4b58      	ldr	r3, [pc, #352]	; (80049c4 <HAL_UART_MspInit+0x1b0>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	61fb      	str	r3, [r7, #28]
 800486c:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800486e:	230c      	movs	r3, #12
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004872:	2302      	movs	r3, #2
 8004874:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004876:	2300      	movs	r3, #0
 8004878:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800487a:	2303      	movs	r3, #3
 800487c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800487e:	2307      	movs	r3, #7
 8004880:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004886:	4619      	mov	r1, r3
 8004888:	484f      	ldr	r0, [pc, #316]	; (80049c8 <HAL_UART_MspInit+0x1b4>)
 800488a:	f000 ff87 	bl	800579c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800488e:	2200      	movs	r2, #0
 8004890:	2100      	movs	r1, #0
 8004892:	2026      	movs	r0, #38	; 0x26
 8004894:	f000 feb9 	bl	800560a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004898:	2026      	movs	r0, #38	; 0x26
 800489a:	f000 fed2 	bl	8005642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800489e:	e08a      	b.n	80049b6 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART3)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a49      	ldr	r2, [pc, #292]	; (80049cc <HAL_UART_MspInit+0x1b8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d14c      	bne.n	8004944 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART3_CLK_ENABLE();
 80048aa:	2300      	movs	r3, #0
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	4b45      	ldr	r3, [pc, #276]	; (80049c4 <HAL_UART_MspInit+0x1b0>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	4a44      	ldr	r2, [pc, #272]	; (80049c4 <HAL_UART_MspInit+0x1b0>)
 80048b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048b8:	6413      	str	r3, [r2, #64]	; 0x40
 80048ba:	4b42      	ldr	r3, [pc, #264]	; (80049c4 <HAL_UART_MspInit+0x1b0>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048c2:	61bb      	str	r3, [r7, #24]
 80048c4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048c6:	2300      	movs	r3, #0
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	4b3e      	ldr	r3, [pc, #248]	; (80049c4 <HAL_UART_MspInit+0x1b0>)
 80048cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ce:	4a3d      	ldr	r2, [pc, #244]	; (80049c4 <HAL_UART_MspInit+0x1b0>)
 80048d0:	f043 0302 	orr.w	r3, r3, #2
 80048d4:	6313      	str	r3, [r2, #48]	; 0x30
 80048d6:	4b3b      	ldr	r3, [pc, #236]	; (80049c4 <HAL_UART_MspInit+0x1b0>)
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	617b      	str	r3, [r7, #20]
 80048e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048e2:	2300      	movs	r3, #0
 80048e4:	613b      	str	r3, [r7, #16]
 80048e6:	4b37      	ldr	r3, [pc, #220]	; (80049c4 <HAL_UART_MspInit+0x1b0>)
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	4a36      	ldr	r2, [pc, #216]	; (80049c4 <HAL_UART_MspInit+0x1b0>)
 80048ec:	f043 0308 	orr.w	r3, r3, #8
 80048f0:	6313      	str	r3, [r2, #48]	; 0x30
 80048f2:	4b34      	ldr	r3, [pc, #208]	; (80049c4 <HAL_UART_MspInit+0x1b0>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80048fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004902:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004904:	2302      	movs	r3, #2
 8004906:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004908:	2300      	movs	r3, #0
 800490a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800490c:	2303      	movs	r3, #3
 800490e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004910:	2307      	movs	r3, #7
 8004912:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004918:	4619      	mov	r1, r3
 800491a:	482d      	ldr	r0, [pc, #180]	; (80049d0 <HAL_UART_MspInit+0x1bc>)
 800491c:	f000 ff3e 	bl	800579c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004926:	2302      	movs	r3, #2
 8004928:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492a:	2300      	movs	r3, #0
 800492c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800492e:	2303      	movs	r3, #3
 8004930:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004932:	2307      	movs	r3, #7
 8004934:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800493a:	4619      	mov	r1, r3
 800493c:	4825      	ldr	r0, [pc, #148]	; (80049d4 <HAL_UART_MspInit+0x1c0>)
 800493e:	f000 ff2d 	bl	800579c <HAL_GPIO_Init>
}
 8004942:	e038      	b.n	80049b6 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART6)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a23      	ldr	r2, [pc, #140]	; (80049d8 <HAL_UART_MspInit+0x1c4>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d133      	bne.n	80049b6 <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	4b1c      	ldr	r3, [pc, #112]	; (80049c4 <HAL_UART_MspInit+0x1b0>)
 8004954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004956:	4a1b      	ldr	r2, [pc, #108]	; (80049c4 <HAL_UART_MspInit+0x1b0>)
 8004958:	f043 0320 	orr.w	r3, r3, #32
 800495c:	6453      	str	r3, [r2, #68]	; 0x44
 800495e:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <HAL_UART_MspInit+0x1b0>)
 8004960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800496a:	2300      	movs	r3, #0
 800496c:	60bb      	str	r3, [r7, #8]
 800496e:	4b15      	ldr	r3, [pc, #84]	; (80049c4 <HAL_UART_MspInit+0x1b0>)
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	4a14      	ldr	r2, [pc, #80]	; (80049c4 <HAL_UART_MspInit+0x1b0>)
 8004974:	f043 0304 	orr.w	r3, r3, #4
 8004978:	6313      	str	r3, [r2, #48]	; 0x30
 800497a:	4b12      	ldr	r3, [pc, #72]	; (80049c4 <HAL_UART_MspInit+0x1b0>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004986:	23c0      	movs	r3, #192	; 0xc0
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800498a:	2302      	movs	r3, #2
 800498c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800498e:	2300      	movs	r3, #0
 8004990:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004992:	2303      	movs	r3, #3
 8004994:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004996:	2308      	movs	r3, #8
 8004998:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800499a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800499e:	4619      	mov	r1, r3
 80049a0:	480e      	ldr	r0, [pc, #56]	; (80049dc <HAL_UART_MspInit+0x1c8>)
 80049a2:	f000 fefb 	bl	800579c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80049a6:	2200      	movs	r2, #0
 80049a8:	2100      	movs	r1, #0
 80049aa:	2047      	movs	r0, #71	; 0x47
 80049ac:	f000 fe2d 	bl	800560a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80049b0:	2047      	movs	r0, #71	; 0x47
 80049b2:	f000 fe46 	bl	8005642 <HAL_NVIC_EnableIRQ>
}
 80049b6:	bf00      	nop
 80049b8:	3738      	adds	r7, #56	; 0x38
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40004400 	.word	0x40004400
 80049c4:	40023800 	.word	0x40023800
 80049c8:	40020000 	.word	0x40020000
 80049cc:	40004800 	.word	0x40004800
 80049d0:	40020400 	.word	0x40020400
 80049d4:	40020c00 	.word	0x40020c00
 80049d8:	40011400 	.word	0x40011400
 80049dc:	40020800 	.word	0x40020800

080049e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049e4:	e7fe      	b.n	80049e4 <NMI_Handler+0x4>

080049e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049e6:	b480      	push	{r7}
 80049e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049ea:	e7fe      	b.n	80049ea <HardFault_Handler+0x4>

080049ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049f0:	e7fe      	b.n	80049f0 <MemManage_Handler+0x4>

080049f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049f2:	b480      	push	{r7}
 80049f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049f6:	e7fe      	b.n	80049f6 <BusFault_Handler+0x4>

080049f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049fc:	e7fe      	b.n	80049fc <UsageFault_Handler+0x4>

080049fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049fe:	b480      	push	{r7}
 8004a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a02:	bf00      	nop
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a10:	bf00      	nop
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a1e:	bf00      	nop
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a2c:	f000 f902 	bl	8004c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a30:	bf00      	nop
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004a38:	2001      	movs	r0, #1
 8004a3a:	f001 f87d 	bl	8005b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004a3e:	bf00      	nop
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004a46:	2002      	movs	r0, #2
 8004a48:	f001 f876 	bl	8005b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004a4c:	bf00      	nop
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004a54:	2008      	movs	r0, #8
 8004a56:	f001 f86f 	bl	8005b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004a5a:	bf00      	nop
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004a62:	2010      	movs	r0, #16
 8004a64:	f001 f868 	bl	8005b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004a68:	bf00      	nop
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004a70:	2040      	movs	r0, #64	; 0x40
 8004a72:	f001 f861 	bl	8005b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004a76:	bf00      	nop
 8004a78:	bd80      	pop	{r7, pc}
	...

08004a7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UART_isr(&huart2);
 8004a80:	4803      	ldr	r0, [pc, #12]	; (8004a90 <USART2_IRQHandler+0x14>)
 8004a82:	f7fe f905 	bl	8002c90 <UART_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004a86:	4802      	ldr	r0, [pc, #8]	; (8004a90 <USART2_IRQHandler+0x14>)
 8004a88:	f002 fda6 	bl	80075d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004a8c:	bf00      	nop
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20000e08 	.word	0x20000e08

08004a94 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	UART_isr(&huart6);
 8004a98:	4803      	ldr	r0, [pc, #12]	; (8004aa8 <USART6_IRQHandler+0x14>)
 8004a9a:	f7fe f8f9 	bl	8002c90 <UART_isr>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004a9e:	4802      	ldr	r0, [pc, #8]	; (8004aa8 <USART6_IRQHandler+0x14>)
 8004aa0:	f002 fd9a 	bl	80075d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004aa4:	bf00      	nop
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20000d7c 	.word	0x20000d7c

08004aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ab4:	4a14      	ldr	r2, [pc, #80]	; (8004b08 <_sbrk+0x5c>)
 8004ab6:	4b15      	ldr	r3, [pc, #84]	; (8004b0c <_sbrk+0x60>)
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ac0:	4b13      	ldr	r3, [pc, #76]	; (8004b10 <_sbrk+0x64>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d102      	bne.n	8004ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ac8:	4b11      	ldr	r3, [pc, #68]	; (8004b10 <_sbrk+0x64>)
 8004aca:	4a12      	ldr	r2, [pc, #72]	; (8004b14 <_sbrk+0x68>)
 8004acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ace:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <_sbrk+0x64>)
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d207      	bcs.n	8004aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004adc:	f003 fc04 	bl	80082e8 <__errno>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	220c      	movs	r2, #12
 8004ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aea:	e009      	b.n	8004b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004aec:	4b08      	ldr	r3, [pc, #32]	; (8004b10 <_sbrk+0x64>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004af2:	4b07      	ldr	r3, [pc, #28]	; (8004b10 <_sbrk+0x64>)
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4413      	add	r3, r2
 8004afa:	4a05      	ldr	r2, [pc, #20]	; (8004b10 <_sbrk+0x64>)
 8004afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004afe:	68fb      	ldr	r3, [r7, #12]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	20020000 	.word	0x20020000
 8004b0c:	00000400 	.word	0x00000400
 8004b10:	200008f4 	.word	0x200008f4
 8004b14:	20000e68 	.word	0x20000e68

08004b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b1c:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <SystemInit+0x20>)
 8004b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b22:	4a05      	ldr	r2, [pc, #20]	; (8004b38 <SystemInit+0x20>)
 8004b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b2c:	bf00      	nop
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	e000ed00 	.word	0xe000ed00

08004b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004b40:	480d      	ldr	r0, [pc, #52]	; (8004b78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004b42:	490e      	ldr	r1, [pc, #56]	; (8004b7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004b44:	4a0e      	ldr	r2, [pc, #56]	; (8004b80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b48:	e002      	b.n	8004b50 <LoopCopyDataInit>

08004b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b4e:	3304      	adds	r3, #4

08004b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b54:	d3f9      	bcc.n	8004b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b56:	4a0b      	ldr	r2, [pc, #44]	; (8004b84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004b58:	4c0b      	ldr	r4, [pc, #44]	; (8004b88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b5c:	e001      	b.n	8004b62 <LoopFillZerobss>

08004b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b60:	3204      	adds	r2, #4

08004b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b64:	d3fb      	bcc.n	8004b5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004b66:	f7ff ffd7 	bl	8004b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b6a:	f003 fbc3 	bl	80082f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b6e:	f7fe fa2b 	bl	8002fc8 <main>
  bx  lr    
 8004b72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004b74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b7c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8004b80:	08009450 	.word	0x08009450
  ldr r2, =_sbss
 8004b84:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004b88:	20000e68 	.word	0x20000e68

08004b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b8c:	e7fe      	b.n	8004b8c <ADC_IRQHandler>
	...

08004b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b94:	4b0e      	ldr	r3, [pc, #56]	; (8004bd0 <HAL_Init+0x40>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a0d      	ldr	r2, [pc, #52]	; (8004bd0 <HAL_Init+0x40>)
 8004b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <HAL_Init+0x40>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a0a      	ldr	r2, [pc, #40]	; (8004bd0 <HAL_Init+0x40>)
 8004ba6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004baa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004bac:	4b08      	ldr	r3, [pc, #32]	; (8004bd0 <HAL_Init+0x40>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a07      	ldr	r2, [pc, #28]	; (8004bd0 <HAL_Init+0x40>)
 8004bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bb8:	2003      	movs	r0, #3
 8004bba:	f000 fd1b 	bl	80055f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	f000 f808 	bl	8004bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004bc4:	f7ff fb84 	bl	80042d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40023c00 	.word	0x40023c00

08004bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004bdc:	4b12      	ldr	r3, [pc, #72]	; (8004c28 <HAL_InitTick+0x54>)
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	4b12      	ldr	r3, [pc, #72]	; (8004c2c <HAL_InitTick+0x58>)
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	4619      	mov	r1, r3
 8004be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fd33 	bl	800565e <HAL_SYSTICK_Config>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e00e      	b.n	8004c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b0f      	cmp	r3, #15
 8004c06:	d80a      	bhi.n	8004c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c08:	2200      	movs	r2, #0
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c10:	f000 fcfb 	bl	800560a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c14:	4a06      	ldr	r2, [pc, #24]	; (8004c30 <HAL_InitTick+0x5c>)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e000      	b.n	8004c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	20000000 	.word	0x20000000
 8004c2c:	20000008 	.word	0x20000008
 8004c30:	20000004 	.word	0x20000004

08004c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c38:	4b06      	ldr	r3, [pc, #24]	; (8004c54 <HAL_IncTick+0x20>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <HAL_IncTick+0x24>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4413      	add	r3, r2
 8004c44:	4a04      	ldr	r2, [pc, #16]	; (8004c58 <HAL_IncTick+0x24>)
 8004c46:	6013      	str	r3, [r2, #0]
}
 8004c48:	bf00      	nop
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	20000008 	.word	0x20000008
 8004c58:	20000e54 	.word	0x20000e54

08004c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8004c60:	4b03      	ldr	r3, [pc, #12]	; (8004c70 <HAL_GetTick+0x14>)
 8004c62:	681b      	ldr	r3, [r3, #0]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	20000e54 	.word	0x20000e54

08004c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c7c:	f7ff ffee 	bl	8004c5c <HAL_GetTick>
 8004c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d005      	beq.n	8004c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c8e:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <HAL_Delay+0x44>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4413      	add	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c9a:	bf00      	nop
 8004c9c:	f7ff ffde 	bl	8004c5c <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d8f7      	bhi.n	8004c9c <HAL_Delay+0x28>
  {
  }
}
 8004cac:	bf00      	nop
 8004cae:	bf00      	nop
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20000008 	.word	0x20000008

08004cbc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e033      	b.n	8004d3a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d109      	bne.n	8004cee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff fb20 	bl	8004320 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	f003 0310 	and.w	r3, r3, #16
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d118      	bne.n	8004d2c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004d02:	f023 0302 	bic.w	r3, r3, #2
 8004d06:	f043 0202 	orr.w	r2, r3, #2
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 faa4 	bl	800525c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	f023 0303 	bic.w	r3, r3, #3
 8004d22:	f043 0201 	orr.w	r2, r3, #1
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	641a      	str	r2, [r3, #64]	; 0x40
 8004d2a:	e001      	b.n	8004d30 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
	...

08004d44 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d101      	bne.n	8004d5e <HAL_ADC_Start+0x1a>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e0b2      	b.n	8004ec4 <HAL_ADC_Start+0x180>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d018      	beq.n	8004da6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0201 	orr.w	r2, r2, #1
 8004d82:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d84:	4b52      	ldr	r3, [pc, #328]	; (8004ed0 <HAL_ADC_Start+0x18c>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a52      	ldr	r2, [pc, #328]	; (8004ed4 <HAL_ADC_Start+0x190>)
 8004d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8e:	0c9a      	lsrs	r2, r3, #18
 8004d90:	4613      	mov	r3, r2
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	4413      	add	r3, r2
 8004d96:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004d98:	e002      	b.n	8004da0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1f9      	bne.n	8004d9a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d17a      	bne.n	8004eaa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004dbc:	f023 0301 	bic.w	r3, r3, #1
 8004dc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d007      	beq.n	8004de6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004dde:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df2:	d106      	bne.n	8004e02 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df8:	f023 0206 	bic.w	r2, r3, #6
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	645a      	str	r2, [r3, #68]	; 0x44
 8004e00:	e002      	b.n	8004e08 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e10:	4b31      	ldr	r3, [pc, #196]	; (8004ed8 <HAL_ADC_Start+0x194>)
 8004e12:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004e1c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f003 031f 	and.w	r3, r3, #31
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d12a      	bne.n	8004e80 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a2b      	ldr	r2, [pc, #172]	; (8004edc <HAL_ADC_Start+0x198>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d015      	beq.n	8004e60 <HAL_ADC_Start+0x11c>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a29      	ldr	r2, [pc, #164]	; (8004ee0 <HAL_ADC_Start+0x19c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d105      	bne.n	8004e4a <HAL_ADC_Start+0x106>
 8004e3e:	4b26      	ldr	r3, [pc, #152]	; (8004ed8 <HAL_ADC_Start+0x194>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f003 031f 	and.w	r3, r3, #31
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a25      	ldr	r2, [pc, #148]	; (8004ee4 <HAL_ADC_Start+0x1a0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d136      	bne.n	8004ec2 <HAL_ADC_Start+0x17e>
 8004e54:	4b20      	ldr	r3, [pc, #128]	; (8004ed8 <HAL_ADC_Start+0x194>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f003 0310 	and.w	r3, r3, #16
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d130      	bne.n	8004ec2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d129      	bne.n	8004ec2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e7c:	609a      	str	r2, [r3, #8]
 8004e7e:	e020      	b.n	8004ec2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a15      	ldr	r2, [pc, #84]	; (8004edc <HAL_ADC_Start+0x198>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d11b      	bne.n	8004ec2 <HAL_ADC_Start+0x17e>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d114      	bne.n	8004ec2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689a      	ldr	r2, [r3, #8]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ea6:	609a      	str	r2, [r3, #8]
 8004ea8:	e00b      	b.n	8004ec2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	f043 0210 	orr.w	r2, r3, #16
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eba:	f043 0201 	orr.w	r2, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	20000000 	.word	0x20000000
 8004ed4:	431bde83 	.word	0x431bde83
 8004ed8:	40012300 	.word	0x40012300
 8004edc:	40012000 	.word	0x40012000
 8004ee0:	40012100 	.word	0x40012100
 8004ee4:	40012200 	.word	0x40012200

08004ee8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f04:	d113      	bne.n	8004f2e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f14:	d10b      	bne.n	8004f2e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	f043 0220 	orr.w	r2, r3, #32
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e063      	b.n	8004ff6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004f2e:	f7ff fe95 	bl	8004c5c <HAL_GetTick>
 8004f32:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004f34:	e021      	b.n	8004f7a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3c:	d01d      	beq.n	8004f7a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d007      	beq.n	8004f54 <HAL_ADC_PollForConversion+0x6c>
 8004f44:	f7ff fe8a 	bl	8004c5c <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d212      	bcs.n	8004f7a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d00b      	beq.n	8004f7a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	f043 0204 	orr.w	r2, r3, #4
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e03d      	b.n	8004ff6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d1d6      	bne.n	8004f36 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f06f 0212 	mvn.w	r2, #18
 8004f90:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d123      	bne.n	8004ff4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d11f      	bne.n	8004ff4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d006      	beq.n	8004fd0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d111      	bne.n	8004ff4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d105      	bne.n	8004ff4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	f043 0201 	orr.w	r2, r3, #1
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004ffe:	b480      	push	{r7}
 8005000:	b083      	sub	sp, #12
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800500c:	4618      	mov	r0, r3
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800502c:	2b01      	cmp	r3, #1
 800502e:	d101      	bne.n	8005034 <HAL_ADC_ConfigChannel+0x1c>
 8005030:	2302      	movs	r3, #2
 8005032:	e105      	b.n	8005240 <HAL_ADC_ConfigChannel+0x228>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b09      	cmp	r3, #9
 8005042:	d925      	bls.n	8005090 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68d9      	ldr	r1, [r3, #12]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	b29b      	uxth	r3, r3
 8005050:	461a      	mov	r2, r3
 8005052:	4613      	mov	r3, r2
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	4413      	add	r3, r2
 8005058:	3b1e      	subs	r3, #30
 800505a:	2207      	movs	r2, #7
 800505c:	fa02 f303 	lsl.w	r3, r2, r3
 8005060:	43da      	mvns	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	400a      	ands	r2, r1
 8005068:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68d9      	ldr	r1, [r3, #12]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	b29b      	uxth	r3, r3
 800507a:	4618      	mov	r0, r3
 800507c:	4603      	mov	r3, r0
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	4403      	add	r3, r0
 8005082:	3b1e      	subs	r3, #30
 8005084:	409a      	lsls	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	60da      	str	r2, [r3, #12]
 800508e:	e022      	b.n	80050d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6919      	ldr	r1, [r3, #16]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	b29b      	uxth	r3, r3
 800509c:	461a      	mov	r2, r3
 800509e:	4613      	mov	r3, r2
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	4413      	add	r3, r2
 80050a4:	2207      	movs	r2, #7
 80050a6:	fa02 f303 	lsl.w	r3, r2, r3
 80050aa:	43da      	mvns	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	400a      	ands	r2, r1
 80050b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6919      	ldr	r1, [r3, #16]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	4618      	mov	r0, r3
 80050c6:	4603      	mov	r3, r0
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	4403      	add	r3, r0
 80050cc:	409a      	lsls	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b06      	cmp	r3, #6
 80050dc:	d824      	bhi.n	8005128 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	4613      	mov	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	3b05      	subs	r3, #5
 80050f0:	221f      	movs	r2, #31
 80050f2:	fa02 f303 	lsl.w	r3, r2, r3
 80050f6:	43da      	mvns	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	400a      	ands	r2, r1
 80050fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	b29b      	uxth	r3, r3
 800510c:	4618      	mov	r0, r3
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	4613      	mov	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	3b05      	subs	r3, #5
 800511a:	fa00 f203 	lsl.w	r2, r0, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	635a      	str	r2, [r3, #52]	; 0x34
 8005126:	e04c      	b.n	80051c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b0c      	cmp	r3, #12
 800512e:	d824      	bhi.n	800517a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	4613      	mov	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	3b23      	subs	r3, #35	; 0x23
 8005142:	221f      	movs	r2, #31
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	43da      	mvns	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	400a      	ands	r2, r1
 8005150:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	b29b      	uxth	r3, r3
 800515e:	4618      	mov	r0, r3
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	4613      	mov	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	3b23      	subs	r3, #35	; 0x23
 800516c:	fa00 f203 	lsl.w	r2, r0, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	631a      	str	r2, [r3, #48]	; 0x30
 8005178:	e023      	b.n	80051c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	3b41      	subs	r3, #65	; 0x41
 800518c:	221f      	movs	r2, #31
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	43da      	mvns	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	400a      	ands	r2, r1
 800519a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	4618      	mov	r0, r3
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	4613      	mov	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	3b41      	subs	r3, #65	; 0x41
 80051b6:	fa00 f203 	lsl.w	r2, r0, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051c2:	4b22      	ldr	r3, [pc, #136]	; (800524c <HAL_ADC_ConfigChannel+0x234>)
 80051c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a21      	ldr	r2, [pc, #132]	; (8005250 <HAL_ADC_ConfigChannel+0x238>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d109      	bne.n	80051e4 <HAL_ADC_ConfigChannel+0x1cc>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b12      	cmp	r3, #18
 80051d6:	d105      	bne.n	80051e4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a19      	ldr	r2, [pc, #100]	; (8005250 <HAL_ADC_ConfigChannel+0x238>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d123      	bne.n	8005236 <HAL_ADC_ConfigChannel+0x21e>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b10      	cmp	r3, #16
 80051f4:	d003      	beq.n	80051fe <HAL_ADC_ConfigChannel+0x1e6>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b11      	cmp	r3, #17
 80051fc:	d11b      	bne.n	8005236 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b10      	cmp	r3, #16
 8005210:	d111      	bne.n	8005236 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005212:	4b10      	ldr	r3, [pc, #64]	; (8005254 <HAL_ADC_ConfigChannel+0x23c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a10      	ldr	r2, [pc, #64]	; (8005258 <HAL_ADC_ConfigChannel+0x240>)
 8005218:	fba2 2303 	umull	r2, r3, r2, r3
 800521c:	0c9a      	lsrs	r2, r3, #18
 800521e:	4613      	mov	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005228:	e002      	b.n	8005230 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	3b01      	subs	r3, #1
 800522e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1f9      	bne.n	800522a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	40012300 	.word	0x40012300
 8005250:	40012000 	.word	0x40012000
 8005254:	20000000 	.word	0x20000000
 8005258:	431bde83 	.word	0x431bde83

0800525c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005264:	4b79      	ldr	r3, [pc, #484]	; (800544c <ADC_Init+0x1f0>)
 8005266:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	431a      	orrs	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005290:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6859      	ldr	r1, [r3, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	021a      	lsls	r2, r3, #8
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80052b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6859      	ldr	r1, [r3, #4]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6899      	ldr	r1, [r3, #8]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68da      	ldr	r2, [r3, #12]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ee:	4a58      	ldr	r2, [pc, #352]	; (8005450 <ADC_Init+0x1f4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d022      	beq.n	800533a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005302:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6899      	ldr	r1, [r3, #8]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005324:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6899      	ldr	r1, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	430a      	orrs	r2, r1
 8005336:	609a      	str	r2, [r3, #8]
 8005338:	e00f      	b.n	800535a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005348:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005358:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0202 	bic.w	r2, r2, #2
 8005368:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6899      	ldr	r1, [r3, #8]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	7e1b      	ldrb	r3, [r3, #24]
 8005374:	005a      	lsls	r2, r3, #1
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d01b      	beq.n	80053c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005396:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80053a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6859      	ldr	r1, [r3, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	3b01      	subs	r3, #1
 80053b4:	035a      	lsls	r2, r3, #13
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	605a      	str	r2, [r3, #4]
 80053be:	e007      	b.n	80053d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80053de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	051a      	lsls	r2, r3, #20
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005404:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6899      	ldr	r1, [r3, #8]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005412:	025a      	lsls	r2, r3, #9
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800542a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6899      	ldr	r1, [r3, #8]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	029a      	lsls	r2, r3, #10
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	609a      	str	r2, [r3, #8]
}
 8005440:	bf00      	nop
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	40012300 	.word	0x40012300
 8005450:	0f000001 	.word	0x0f000001

08005454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f003 0307 	and.w	r3, r3, #7
 8005462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005464:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <__NVIC_SetPriorityGrouping+0x44>)
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005470:	4013      	ands	r3, r2
 8005472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800547c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005486:	4a04      	ldr	r2, [pc, #16]	; (8005498 <__NVIC_SetPriorityGrouping+0x44>)
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	60d3      	str	r3, [r2, #12]
}
 800548c:	bf00      	nop
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	e000ed00 	.word	0xe000ed00

0800549c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054a0:	4b04      	ldr	r3, [pc, #16]	; (80054b4 <__NVIC_GetPriorityGrouping+0x18>)
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	0a1b      	lsrs	r3, r3, #8
 80054a6:	f003 0307 	and.w	r3, r3, #7
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	e000ed00 	.word	0xe000ed00

080054b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	4603      	mov	r3, r0
 80054c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	db0b      	blt.n	80054e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054ca:	79fb      	ldrb	r3, [r7, #7]
 80054cc:	f003 021f 	and.w	r2, r3, #31
 80054d0:	4907      	ldr	r1, [pc, #28]	; (80054f0 <__NVIC_EnableIRQ+0x38>)
 80054d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054d6:	095b      	lsrs	r3, r3, #5
 80054d8:	2001      	movs	r0, #1
 80054da:	fa00 f202 	lsl.w	r2, r0, r2
 80054de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	e000e100 	.word	0xe000e100

080054f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	4603      	mov	r3, r0
 80054fc:	6039      	str	r1, [r7, #0]
 80054fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005504:	2b00      	cmp	r3, #0
 8005506:	db0a      	blt.n	800551e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	b2da      	uxtb	r2, r3
 800550c:	490c      	ldr	r1, [pc, #48]	; (8005540 <__NVIC_SetPriority+0x4c>)
 800550e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005512:	0112      	lsls	r2, r2, #4
 8005514:	b2d2      	uxtb	r2, r2
 8005516:	440b      	add	r3, r1
 8005518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800551c:	e00a      	b.n	8005534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	b2da      	uxtb	r2, r3
 8005522:	4908      	ldr	r1, [pc, #32]	; (8005544 <__NVIC_SetPriority+0x50>)
 8005524:	79fb      	ldrb	r3, [r7, #7]
 8005526:	f003 030f 	and.w	r3, r3, #15
 800552a:	3b04      	subs	r3, #4
 800552c:	0112      	lsls	r2, r2, #4
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	440b      	add	r3, r1
 8005532:	761a      	strb	r2, [r3, #24]
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	e000e100 	.word	0xe000e100
 8005544:	e000ed00 	.word	0xe000ed00

08005548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005548:	b480      	push	{r7}
 800554a:	b089      	sub	sp, #36	; 0x24
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	f1c3 0307 	rsb	r3, r3, #7
 8005562:	2b04      	cmp	r3, #4
 8005564:	bf28      	it	cs
 8005566:	2304      	movcs	r3, #4
 8005568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	3304      	adds	r3, #4
 800556e:	2b06      	cmp	r3, #6
 8005570:	d902      	bls.n	8005578 <NVIC_EncodePriority+0x30>
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	3b03      	subs	r3, #3
 8005576:	e000      	b.n	800557a <NVIC_EncodePriority+0x32>
 8005578:	2300      	movs	r3, #0
 800557a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800557c:	f04f 32ff 	mov.w	r2, #4294967295
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	fa02 f303 	lsl.w	r3, r2, r3
 8005586:	43da      	mvns	r2, r3
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	401a      	ands	r2, r3
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005590:	f04f 31ff 	mov.w	r1, #4294967295
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	fa01 f303 	lsl.w	r3, r1, r3
 800559a:	43d9      	mvns	r1, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055a0:	4313      	orrs	r3, r2
         );
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3724      	adds	r7, #36	; 0x24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
	...

080055b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3b01      	subs	r3, #1
 80055bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055c0:	d301      	bcc.n	80055c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055c2:	2301      	movs	r3, #1
 80055c4:	e00f      	b.n	80055e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055c6:	4a0a      	ldr	r2, [pc, #40]	; (80055f0 <SysTick_Config+0x40>)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3b01      	subs	r3, #1
 80055cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055ce:	210f      	movs	r1, #15
 80055d0:	f04f 30ff 	mov.w	r0, #4294967295
 80055d4:	f7ff ff8e 	bl	80054f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055d8:	4b05      	ldr	r3, [pc, #20]	; (80055f0 <SysTick_Config+0x40>)
 80055da:	2200      	movs	r2, #0
 80055dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055de:	4b04      	ldr	r3, [pc, #16]	; (80055f0 <SysTick_Config+0x40>)
 80055e0:	2207      	movs	r2, #7
 80055e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	e000e010 	.word	0xe000e010

080055f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7ff ff29 	bl	8005454 <__NVIC_SetPriorityGrouping>
}
 8005602:	bf00      	nop
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800560a:	b580      	push	{r7, lr}
 800560c:	b086      	sub	sp, #24
 800560e:	af00      	add	r7, sp, #0
 8005610:	4603      	mov	r3, r0
 8005612:	60b9      	str	r1, [r7, #8]
 8005614:	607a      	str	r2, [r7, #4]
 8005616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005618:	2300      	movs	r3, #0
 800561a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800561c:	f7ff ff3e 	bl	800549c <__NVIC_GetPriorityGrouping>
 8005620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	68b9      	ldr	r1, [r7, #8]
 8005626:	6978      	ldr	r0, [r7, #20]
 8005628:	f7ff ff8e 	bl	8005548 <NVIC_EncodePriority>
 800562c:	4602      	mov	r2, r0
 800562e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005632:	4611      	mov	r1, r2
 8005634:	4618      	mov	r0, r3
 8005636:	f7ff ff5d 	bl	80054f4 <__NVIC_SetPriority>
}
 800563a:	bf00      	nop
 800563c:	3718      	adds	r7, #24
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b082      	sub	sp, #8
 8005646:	af00      	add	r7, sp, #0
 8005648:	4603      	mov	r3, r0
 800564a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800564c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005650:	4618      	mov	r0, r3
 8005652:	f7ff ff31 	bl	80054b8 <__NVIC_EnableIRQ>
}
 8005656:	bf00      	nop
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b082      	sub	sp, #8
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7ff ffa2 	bl	80055b0 <SysTick_Config>
 800566c:	4603      	mov	r3, r0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b084      	sub	sp, #16
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005682:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005684:	f7ff faea 	bl	8004c5c <HAL_GetTick>
 8005688:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d008      	beq.n	80056a8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2280      	movs	r2, #128	; 0x80
 800569a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e052      	b.n	800574e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0216 	bic.w	r2, r2, #22
 80056b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695a      	ldr	r2, [r3, #20]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056c6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d103      	bne.n	80056d8 <HAL_DMA_Abort+0x62>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d007      	beq.n	80056e8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 0208 	bic.w	r2, r2, #8
 80056e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0201 	bic.w	r2, r2, #1
 80056f6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056f8:	e013      	b.n	8005722 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056fa:	f7ff faaf 	bl	8004c5c <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b05      	cmp	r3, #5
 8005706:	d90c      	bls.n	8005722 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2220      	movs	r2, #32
 800570c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2203      	movs	r2, #3
 8005712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e015      	b.n	800574e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e4      	bne.n	80056fa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005734:	223f      	movs	r2, #63	; 0x3f
 8005736:	409a      	lsls	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d004      	beq.n	8005774 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2280      	movs	r2, #128	; 0x80
 800576e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e00c      	b.n	800578e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2205      	movs	r2, #5
 8005778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0201 	bic.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
	...

0800579c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800579c:	b480      	push	{r7}
 800579e:	b089      	sub	sp, #36	; 0x24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057b2:	2300      	movs	r3, #0
 80057b4:	61fb      	str	r3, [r7, #28]
 80057b6:	e16b      	b.n	8005a90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057b8:	2201      	movs	r2, #1
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4013      	ands	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	f040 815a 	bne.w	8005a8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d005      	beq.n	80057ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d130      	bne.n	8005850 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	2203      	movs	r2, #3
 80057fa:	fa02 f303 	lsl.w	r3, r2, r3
 80057fe:	43db      	mvns	r3, r3
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	4013      	ands	r3, r2
 8005804:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	fa02 f303 	lsl.w	r3, r2, r3
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	4313      	orrs	r3, r2
 8005816:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005824:	2201      	movs	r2, #1
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	43db      	mvns	r3, r3
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	4013      	ands	r3, r2
 8005832:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	091b      	lsrs	r3, r3, #4
 800583a:	f003 0201 	and.w	r2, r3, #1
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	4313      	orrs	r3, r2
 8005848:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f003 0303 	and.w	r3, r3, #3
 8005858:	2b03      	cmp	r3, #3
 800585a:	d017      	beq.n	800588c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	2203      	movs	r2, #3
 8005868:	fa02 f303 	lsl.w	r3, r2, r3
 800586c:	43db      	mvns	r3, r3
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	4013      	ands	r3, r2
 8005872:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	fa02 f303 	lsl.w	r3, r2, r3
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	4313      	orrs	r3, r2
 8005884:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f003 0303 	and.w	r3, r3, #3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d123      	bne.n	80058e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	08da      	lsrs	r2, r3, #3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3208      	adds	r2, #8
 80058a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	220f      	movs	r2, #15
 80058b0:	fa02 f303 	lsl.w	r3, r2, r3
 80058b4:	43db      	mvns	r3, r3
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	4013      	ands	r3, r2
 80058ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	08da      	lsrs	r2, r3, #3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3208      	adds	r2, #8
 80058da:	69b9      	ldr	r1, [r7, #24]
 80058dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	2203      	movs	r2, #3
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	43db      	mvns	r3, r3
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	4013      	ands	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f003 0203 	and.w	r2, r3, #3
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	4313      	orrs	r3, r2
 800590c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 80b4 	beq.w	8005a8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	4b60      	ldr	r3, [pc, #384]	; (8005aa8 <HAL_GPIO_Init+0x30c>)
 8005928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592a:	4a5f      	ldr	r2, [pc, #380]	; (8005aa8 <HAL_GPIO_Init+0x30c>)
 800592c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005930:	6453      	str	r3, [r2, #68]	; 0x44
 8005932:	4b5d      	ldr	r3, [pc, #372]	; (8005aa8 <HAL_GPIO_Init+0x30c>)
 8005934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800593e:	4a5b      	ldr	r2, [pc, #364]	; (8005aac <HAL_GPIO_Init+0x310>)
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	089b      	lsrs	r3, r3, #2
 8005944:	3302      	adds	r3, #2
 8005946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800594a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	220f      	movs	r2, #15
 8005956:	fa02 f303 	lsl.w	r3, r2, r3
 800595a:	43db      	mvns	r3, r3
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	4013      	ands	r3, r2
 8005960:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a52      	ldr	r2, [pc, #328]	; (8005ab0 <HAL_GPIO_Init+0x314>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d02b      	beq.n	80059c2 <HAL_GPIO_Init+0x226>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a51      	ldr	r2, [pc, #324]	; (8005ab4 <HAL_GPIO_Init+0x318>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d025      	beq.n	80059be <HAL_GPIO_Init+0x222>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a50      	ldr	r2, [pc, #320]	; (8005ab8 <HAL_GPIO_Init+0x31c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d01f      	beq.n	80059ba <HAL_GPIO_Init+0x21e>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a4f      	ldr	r2, [pc, #316]	; (8005abc <HAL_GPIO_Init+0x320>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d019      	beq.n	80059b6 <HAL_GPIO_Init+0x21a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a4e      	ldr	r2, [pc, #312]	; (8005ac0 <HAL_GPIO_Init+0x324>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d013      	beq.n	80059b2 <HAL_GPIO_Init+0x216>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a4d      	ldr	r2, [pc, #308]	; (8005ac4 <HAL_GPIO_Init+0x328>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00d      	beq.n	80059ae <HAL_GPIO_Init+0x212>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a4c      	ldr	r2, [pc, #304]	; (8005ac8 <HAL_GPIO_Init+0x32c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d007      	beq.n	80059aa <HAL_GPIO_Init+0x20e>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a4b      	ldr	r2, [pc, #300]	; (8005acc <HAL_GPIO_Init+0x330>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d101      	bne.n	80059a6 <HAL_GPIO_Init+0x20a>
 80059a2:	2307      	movs	r3, #7
 80059a4:	e00e      	b.n	80059c4 <HAL_GPIO_Init+0x228>
 80059a6:	2308      	movs	r3, #8
 80059a8:	e00c      	b.n	80059c4 <HAL_GPIO_Init+0x228>
 80059aa:	2306      	movs	r3, #6
 80059ac:	e00a      	b.n	80059c4 <HAL_GPIO_Init+0x228>
 80059ae:	2305      	movs	r3, #5
 80059b0:	e008      	b.n	80059c4 <HAL_GPIO_Init+0x228>
 80059b2:	2304      	movs	r3, #4
 80059b4:	e006      	b.n	80059c4 <HAL_GPIO_Init+0x228>
 80059b6:	2303      	movs	r3, #3
 80059b8:	e004      	b.n	80059c4 <HAL_GPIO_Init+0x228>
 80059ba:	2302      	movs	r3, #2
 80059bc:	e002      	b.n	80059c4 <HAL_GPIO_Init+0x228>
 80059be:	2301      	movs	r3, #1
 80059c0:	e000      	b.n	80059c4 <HAL_GPIO_Init+0x228>
 80059c2:	2300      	movs	r3, #0
 80059c4:	69fa      	ldr	r2, [r7, #28]
 80059c6:	f002 0203 	and.w	r2, r2, #3
 80059ca:	0092      	lsls	r2, r2, #2
 80059cc:	4093      	lsls	r3, r2
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059d4:	4935      	ldr	r1, [pc, #212]	; (8005aac <HAL_GPIO_Init+0x310>)
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	089b      	lsrs	r3, r3, #2
 80059da:	3302      	adds	r3, #2
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059e2:	4b3b      	ldr	r3, [pc, #236]	; (8005ad0 <HAL_GPIO_Init+0x334>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	43db      	mvns	r3, r3
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	4013      	ands	r3, r2
 80059f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a06:	4a32      	ldr	r2, [pc, #200]	; (8005ad0 <HAL_GPIO_Init+0x334>)
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005a0c:	4b30      	ldr	r3, [pc, #192]	; (8005ad0 <HAL_GPIO_Init+0x334>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	43db      	mvns	r3, r3
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a30:	4a27      	ldr	r2, [pc, #156]	; (8005ad0 <HAL_GPIO_Init+0x334>)
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a36:	4b26      	ldr	r3, [pc, #152]	; (8005ad0 <HAL_GPIO_Init+0x334>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	43db      	mvns	r3, r3
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	4013      	ands	r3, r2
 8005a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a5a:	4a1d      	ldr	r2, [pc, #116]	; (8005ad0 <HAL_GPIO_Init+0x334>)
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a60:	4b1b      	ldr	r3, [pc, #108]	; (8005ad0 <HAL_GPIO_Init+0x334>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a84:	4a12      	ldr	r2, [pc, #72]	; (8005ad0 <HAL_GPIO_Init+0x334>)
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	61fb      	str	r3, [r7, #28]
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	2b0f      	cmp	r3, #15
 8005a94:	f67f ae90 	bls.w	80057b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a98:	bf00      	nop
 8005a9a:	bf00      	nop
 8005a9c:	3724      	adds	r7, #36	; 0x24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	40013800 	.word	0x40013800
 8005ab0:	40020000 	.word	0x40020000
 8005ab4:	40020400 	.word	0x40020400
 8005ab8:	40020800 	.word	0x40020800
 8005abc:	40020c00 	.word	0x40020c00
 8005ac0:	40021000 	.word	0x40021000
 8005ac4:	40021400 	.word	0x40021400
 8005ac8:	40021800 	.word	0x40021800
 8005acc:	40021c00 	.word	0x40021c00
 8005ad0:	40013c00 	.word	0x40013c00

08005ad4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	460b      	mov	r3, r1
 8005ade:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	887b      	ldrh	r3, [r7, #2]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005aec:	2301      	movs	r3, #1
 8005aee:	73fb      	strb	r3, [r7, #15]
 8005af0:	e001      	b.n	8005af6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005af2:	2300      	movs	r3, #0
 8005af4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	807b      	strh	r3, [r7, #2]
 8005b10:	4613      	mov	r3, r2
 8005b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b14:	787b      	ldrb	r3, [r7, #1]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b1a:	887a      	ldrh	r2, [r7, #2]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b20:	e003      	b.n	8005b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b22:	887b      	ldrh	r3, [r7, #2]
 8005b24:	041a      	lsls	r2, r3, #16
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	619a      	str	r2, [r3, #24]
}
 8005b2a:	bf00      	nop
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
	...

08005b38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	4603      	mov	r3, r0
 8005b40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005b42:	4b08      	ldr	r3, [pc, #32]	; (8005b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b44:	695a      	ldr	r2, [r3, #20]
 8005b46:	88fb      	ldrh	r3, [r7, #6]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d006      	beq.n	8005b5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b4e:	4a05      	ldr	r2, [pc, #20]	; (8005b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b50:	88fb      	ldrh	r3, [r7, #6]
 8005b52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b54:	88fb      	ldrh	r3, [r7, #6]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fd f944 	bl	8002de4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b5c:	bf00      	nop
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40013c00 	.word	0x40013c00

08005b68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e264      	b.n	8006044 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d075      	beq.n	8005c72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b86:	4ba3      	ldr	r3, [pc, #652]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f003 030c 	and.w	r3, r3, #12
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	d00c      	beq.n	8005bac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b92:	4ba0      	ldr	r3, [pc, #640]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b9a:	2b08      	cmp	r3, #8
 8005b9c:	d112      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b9e:	4b9d      	ldr	r3, [pc, #628]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005baa:	d10b      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bac:	4b99      	ldr	r3, [pc, #612]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d05b      	beq.n	8005c70 <HAL_RCC_OscConfig+0x108>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d157      	bne.n	8005c70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e23f      	b.n	8006044 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bcc:	d106      	bne.n	8005bdc <HAL_RCC_OscConfig+0x74>
 8005bce:	4b91      	ldr	r3, [pc, #580]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a90      	ldr	r2, [pc, #576]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bd8:	6013      	str	r3, [r2, #0]
 8005bda:	e01d      	b.n	8005c18 <HAL_RCC_OscConfig+0xb0>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005be4:	d10c      	bne.n	8005c00 <HAL_RCC_OscConfig+0x98>
 8005be6:	4b8b      	ldr	r3, [pc, #556]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a8a      	ldr	r2, [pc, #552]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bf0:	6013      	str	r3, [r2, #0]
 8005bf2:	4b88      	ldr	r3, [pc, #544]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a87      	ldr	r2, [pc, #540]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	e00b      	b.n	8005c18 <HAL_RCC_OscConfig+0xb0>
 8005c00:	4b84      	ldr	r3, [pc, #528]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a83      	ldr	r2, [pc, #524]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c0a:	6013      	str	r3, [r2, #0]
 8005c0c:	4b81      	ldr	r3, [pc, #516]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a80      	ldr	r2, [pc, #512]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d013      	beq.n	8005c48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c20:	f7ff f81c 	bl	8004c5c <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c28:	f7ff f818 	bl	8004c5c <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b64      	cmp	r3, #100	; 0x64
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e204      	b.n	8006044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c3a:	4b76      	ldr	r3, [pc, #472]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0f0      	beq.n	8005c28 <HAL_RCC_OscConfig+0xc0>
 8005c46:	e014      	b.n	8005c72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c48:	f7ff f808 	bl	8004c5c <HAL_GetTick>
 8005c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c4e:	e008      	b.n	8005c62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c50:	f7ff f804 	bl	8004c5c <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b64      	cmp	r3, #100	; 0x64
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e1f0      	b.n	8006044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c62:	4b6c      	ldr	r3, [pc, #432]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1f0      	bne.n	8005c50 <HAL_RCC_OscConfig+0xe8>
 8005c6e:	e000      	b.n	8005c72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d063      	beq.n	8005d46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c7e:	4b65      	ldr	r3, [pc, #404]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 030c 	and.w	r3, r3, #12
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00b      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c8a:	4b62      	ldr	r3, [pc, #392]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c92:	2b08      	cmp	r3, #8
 8005c94:	d11c      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c96:	4b5f      	ldr	r3, [pc, #380]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d116      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ca2:	4b5c      	ldr	r3, [pc, #368]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d005      	beq.n	8005cba <HAL_RCC_OscConfig+0x152>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d001      	beq.n	8005cba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e1c4      	b.n	8006044 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cba:	4b56      	ldr	r3, [pc, #344]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	4952      	ldr	r1, [pc, #328]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cce:	e03a      	b.n	8005d46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d020      	beq.n	8005d1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cd8:	4b4f      	ldr	r3, [pc, #316]	; (8005e18 <HAL_RCC_OscConfig+0x2b0>)
 8005cda:	2201      	movs	r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cde:	f7fe ffbd 	bl	8004c5c <HAL_GetTick>
 8005ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ce4:	e008      	b.n	8005cf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ce6:	f7fe ffb9 	bl	8004c5c <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e1a5      	b.n	8006044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cf8:	4b46      	ldr	r3, [pc, #280]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d0f0      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d04:	4b43      	ldr	r3, [pc, #268]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	4940      	ldr	r1, [pc, #256]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	600b      	str	r3, [r1, #0]
 8005d18:	e015      	b.n	8005d46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d1a:	4b3f      	ldr	r3, [pc, #252]	; (8005e18 <HAL_RCC_OscConfig+0x2b0>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d20:	f7fe ff9c 	bl	8004c5c <HAL_GetTick>
 8005d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d26:	e008      	b.n	8005d3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d28:	f7fe ff98 	bl	8004c5c <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e184      	b.n	8006044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d3a:	4b36      	ldr	r3, [pc, #216]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1f0      	bne.n	8005d28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d030      	beq.n	8005db4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d016      	beq.n	8005d88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d5a:	4b30      	ldr	r3, [pc, #192]	; (8005e1c <HAL_RCC_OscConfig+0x2b4>)
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d60:	f7fe ff7c 	bl	8004c5c <HAL_GetTick>
 8005d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d66:	e008      	b.n	8005d7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d68:	f7fe ff78 	bl	8004c5c <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e164      	b.n	8006044 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d7a:	4b26      	ldr	r3, [pc, #152]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d0f0      	beq.n	8005d68 <HAL_RCC_OscConfig+0x200>
 8005d86:	e015      	b.n	8005db4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d88:	4b24      	ldr	r3, [pc, #144]	; (8005e1c <HAL_RCC_OscConfig+0x2b4>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d8e:	f7fe ff65 	bl	8004c5c <HAL_GetTick>
 8005d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d94:	e008      	b.n	8005da8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d96:	f7fe ff61 	bl	8004c5c <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e14d      	b.n	8006044 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005da8:	4b1a      	ldr	r3, [pc, #104]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1f0      	bne.n	8005d96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 80a0 	beq.w	8005f02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dc6:	4b13      	ldr	r3, [pc, #76]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10f      	bne.n	8005df2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60bb      	str	r3, [r7, #8]
 8005dd6:	4b0f      	ldr	r3, [pc, #60]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	4a0e      	ldr	r2, [pc, #56]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005de0:	6413      	str	r3, [r2, #64]	; 0x40
 8005de2:	4b0c      	ldr	r3, [pc, #48]	; (8005e14 <HAL_RCC_OscConfig+0x2ac>)
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dea:	60bb      	str	r3, [r7, #8]
 8005dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dee:	2301      	movs	r3, #1
 8005df0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005df2:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <HAL_RCC_OscConfig+0x2b8>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d121      	bne.n	8005e42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dfe:	4b08      	ldr	r3, [pc, #32]	; (8005e20 <HAL_RCC_OscConfig+0x2b8>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a07      	ldr	r2, [pc, #28]	; (8005e20 <HAL_RCC_OscConfig+0x2b8>)
 8005e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e0a:	f7fe ff27 	bl	8004c5c <HAL_GetTick>
 8005e0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e10:	e011      	b.n	8005e36 <HAL_RCC_OscConfig+0x2ce>
 8005e12:	bf00      	nop
 8005e14:	40023800 	.word	0x40023800
 8005e18:	42470000 	.word	0x42470000
 8005e1c:	42470e80 	.word	0x42470e80
 8005e20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e24:	f7fe ff1a 	bl	8004c5c <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e106      	b.n	8006044 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e36:	4b85      	ldr	r3, [pc, #532]	; (800604c <HAL_RCC_OscConfig+0x4e4>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0f0      	beq.n	8005e24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d106      	bne.n	8005e58 <HAL_RCC_OscConfig+0x2f0>
 8005e4a:	4b81      	ldr	r3, [pc, #516]	; (8006050 <HAL_RCC_OscConfig+0x4e8>)
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4e:	4a80      	ldr	r2, [pc, #512]	; (8006050 <HAL_RCC_OscConfig+0x4e8>)
 8005e50:	f043 0301 	orr.w	r3, r3, #1
 8005e54:	6713      	str	r3, [r2, #112]	; 0x70
 8005e56:	e01c      	b.n	8005e92 <HAL_RCC_OscConfig+0x32a>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	2b05      	cmp	r3, #5
 8005e5e:	d10c      	bne.n	8005e7a <HAL_RCC_OscConfig+0x312>
 8005e60:	4b7b      	ldr	r3, [pc, #492]	; (8006050 <HAL_RCC_OscConfig+0x4e8>)
 8005e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e64:	4a7a      	ldr	r2, [pc, #488]	; (8006050 <HAL_RCC_OscConfig+0x4e8>)
 8005e66:	f043 0304 	orr.w	r3, r3, #4
 8005e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e6c:	4b78      	ldr	r3, [pc, #480]	; (8006050 <HAL_RCC_OscConfig+0x4e8>)
 8005e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e70:	4a77      	ldr	r2, [pc, #476]	; (8006050 <HAL_RCC_OscConfig+0x4e8>)
 8005e72:	f043 0301 	orr.w	r3, r3, #1
 8005e76:	6713      	str	r3, [r2, #112]	; 0x70
 8005e78:	e00b      	b.n	8005e92 <HAL_RCC_OscConfig+0x32a>
 8005e7a:	4b75      	ldr	r3, [pc, #468]	; (8006050 <HAL_RCC_OscConfig+0x4e8>)
 8005e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7e:	4a74      	ldr	r2, [pc, #464]	; (8006050 <HAL_RCC_OscConfig+0x4e8>)
 8005e80:	f023 0301 	bic.w	r3, r3, #1
 8005e84:	6713      	str	r3, [r2, #112]	; 0x70
 8005e86:	4b72      	ldr	r3, [pc, #456]	; (8006050 <HAL_RCC_OscConfig+0x4e8>)
 8005e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8a:	4a71      	ldr	r2, [pc, #452]	; (8006050 <HAL_RCC_OscConfig+0x4e8>)
 8005e8c:	f023 0304 	bic.w	r3, r3, #4
 8005e90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d015      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e9a:	f7fe fedf 	bl	8004c5c <HAL_GetTick>
 8005e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ea0:	e00a      	b.n	8005eb8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ea2:	f7fe fedb 	bl	8004c5c <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e0c5      	b.n	8006044 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eb8:	4b65      	ldr	r3, [pc, #404]	; (8006050 <HAL_RCC_OscConfig+0x4e8>)
 8005eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0ee      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x33a>
 8005ec4:	e014      	b.n	8005ef0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ec6:	f7fe fec9 	bl	8004c5c <HAL_GetTick>
 8005eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ecc:	e00a      	b.n	8005ee4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ece:	f7fe fec5 	bl	8004c5c <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d901      	bls.n	8005ee4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e0af      	b.n	8006044 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ee4:	4b5a      	ldr	r3, [pc, #360]	; (8006050 <HAL_RCC_OscConfig+0x4e8>)
 8005ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1ee      	bne.n	8005ece <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ef0:	7dfb      	ldrb	r3, [r7, #23]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d105      	bne.n	8005f02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ef6:	4b56      	ldr	r3, [pc, #344]	; (8006050 <HAL_RCC_OscConfig+0x4e8>)
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	4a55      	ldr	r2, [pc, #340]	; (8006050 <HAL_RCC_OscConfig+0x4e8>)
 8005efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 809b 	beq.w	8006042 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f0c:	4b50      	ldr	r3, [pc, #320]	; (8006050 <HAL_RCC_OscConfig+0x4e8>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f003 030c 	and.w	r3, r3, #12
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d05c      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d141      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f20:	4b4c      	ldr	r3, [pc, #304]	; (8006054 <HAL_RCC_OscConfig+0x4ec>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f26:	f7fe fe99 	bl	8004c5c <HAL_GetTick>
 8005f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f2c:	e008      	b.n	8005f40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f2e:	f7fe fe95 	bl	8004c5c <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e081      	b.n	8006044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f40:	4b43      	ldr	r3, [pc, #268]	; (8006050 <HAL_RCC_OscConfig+0x4e8>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1f0      	bne.n	8005f2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	69da      	ldr	r2, [r3, #28]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	431a      	orrs	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	019b      	lsls	r3, r3, #6
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f62:	085b      	lsrs	r3, r3, #1
 8005f64:	3b01      	subs	r3, #1
 8005f66:	041b      	lsls	r3, r3, #16
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6e:	061b      	lsls	r3, r3, #24
 8005f70:	4937      	ldr	r1, [pc, #220]	; (8006050 <HAL_RCC_OscConfig+0x4e8>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f76:	4b37      	ldr	r3, [pc, #220]	; (8006054 <HAL_RCC_OscConfig+0x4ec>)
 8005f78:	2201      	movs	r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f7c:	f7fe fe6e 	bl	8004c5c <HAL_GetTick>
 8005f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f82:	e008      	b.n	8005f96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f84:	f7fe fe6a 	bl	8004c5c <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e056      	b.n	8006044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f96:	4b2e      	ldr	r3, [pc, #184]	; (8006050 <HAL_RCC_OscConfig+0x4e8>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0f0      	beq.n	8005f84 <HAL_RCC_OscConfig+0x41c>
 8005fa2:	e04e      	b.n	8006042 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fa4:	4b2b      	ldr	r3, [pc, #172]	; (8006054 <HAL_RCC_OscConfig+0x4ec>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005faa:	f7fe fe57 	bl	8004c5c <HAL_GetTick>
 8005fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fb0:	e008      	b.n	8005fc4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fb2:	f7fe fe53 	bl	8004c5c <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d901      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e03f      	b.n	8006044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fc4:	4b22      	ldr	r3, [pc, #136]	; (8006050 <HAL_RCC_OscConfig+0x4e8>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1f0      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x44a>
 8005fd0:	e037      	b.n	8006042 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d101      	bne.n	8005fde <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e032      	b.n	8006044 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005fde:	4b1c      	ldr	r3, [pc, #112]	; (8006050 <HAL_RCC_OscConfig+0x4e8>)
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d028      	beq.n	800603e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d121      	bne.n	800603e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006004:	429a      	cmp	r2, r3
 8006006:	d11a      	bne.n	800603e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800600e:	4013      	ands	r3, r2
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006014:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006016:	4293      	cmp	r3, r2
 8006018:	d111      	bne.n	800603e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006024:	085b      	lsrs	r3, r3, #1
 8006026:	3b01      	subs	r3, #1
 8006028:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800602a:	429a      	cmp	r2, r3
 800602c:	d107      	bne.n	800603e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006038:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800603a:	429a      	cmp	r2, r3
 800603c:	d001      	beq.n	8006042 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e000      	b.n	8006044 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3718      	adds	r7, #24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	40007000 	.word	0x40007000
 8006050:	40023800 	.word	0x40023800
 8006054:	42470060 	.word	0x42470060

08006058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e0cc      	b.n	8006206 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800606c:	4b68      	ldr	r3, [pc, #416]	; (8006210 <HAL_RCC_ClockConfig+0x1b8>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	429a      	cmp	r2, r3
 8006078:	d90c      	bls.n	8006094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800607a:	4b65      	ldr	r3, [pc, #404]	; (8006210 <HAL_RCC_ClockConfig+0x1b8>)
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	b2d2      	uxtb	r2, r2
 8006080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006082:	4b63      	ldr	r3, [pc, #396]	; (8006210 <HAL_RCC_ClockConfig+0x1b8>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	429a      	cmp	r2, r3
 800608e:	d001      	beq.n	8006094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e0b8      	b.n	8006206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d020      	beq.n	80060e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0304 	and.w	r3, r3, #4
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d005      	beq.n	80060b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060ac:	4b59      	ldr	r3, [pc, #356]	; (8006214 <HAL_RCC_ClockConfig+0x1bc>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	4a58      	ldr	r2, [pc, #352]	; (8006214 <HAL_RCC_ClockConfig+0x1bc>)
 80060b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0308 	and.w	r3, r3, #8
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d005      	beq.n	80060d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060c4:	4b53      	ldr	r3, [pc, #332]	; (8006214 <HAL_RCC_ClockConfig+0x1bc>)
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	4a52      	ldr	r2, [pc, #328]	; (8006214 <HAL_RCC_ClockConfig+0x1bc>)
 80060ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060d0:	4b50      	ldr	r3, [pc, #320]	; (8006214 <HAL_RCC_ClockConfig+0x1bc>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	494d      	ldr	r1, [pc, #308]	; (8006214 <HAL_RCC_ClockConfig+0x1bc>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d044      	beq.n	8006178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d107      	bne.n	8006106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060f6:	4b47      	ldr	r3, [pc, #284]	; (8006214 <HAL_RCC_ClockConfig+0x1bc>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d119      	bne.n	8006136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e07f      	b.n	8006206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	2b02      	cmp	r3, #2
 800610c:	d003      	beq.n	8006116 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006112:	2b03      	cmp	r3, #3
 8006114:	d107      	bne.n	8006126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006116:	4b3f      	ldr	r3, [pc, #252]	; (8006214 <HAL_RCC_ClockConfig+0x1bc>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d109      	bne.n	8006136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e06f      	b.n	8006206 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006126:	4b3b      	ldr	r3, [pc, #236]	; (8006214 <HAL_RCC_ClockConfig+0x1bc>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e067      	b.n	8006206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006136:	4b37      	ldr	r3, [pc, #220]	; (8006214 <HAL_RCC_ClockConfig+0x1bc>)
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f023 0203 	bic.w	r2, r3, #3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	4934      	ldr	r1, [pc, #208]	; (8006214 <HAL_RCC_ClockConfig+0x1bc>)
 8006144:	4313      	orrs	r3, r2
 8006146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006148:	f7fe fd88 	bl	8004c5c <HAL_GetTick>
 800614c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800614e:	e00a      	b.n	8006166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006150:	f7fe fd84 	bl	8004c5c <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	f241 3288 	movw	r2, #5000	; 0x1388
 800615e:	4293      	cmp	r3, r2
 8006160:	d901      	bls.n	8006166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e04f      	b.n	8006206 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006166:	4b2b      	ldr	r3, [pc, #172]	; (8006214 <HAL_RCC_ClockConfig+0x1bc>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f003 020c 	and.w	r2, r3, #12
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	429a      	cmp	r2, r3
 8006176:	d1eb      	bne.n	8006150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006178:	4b25      	ldr	r3, [pc, #148]	; (8006210 <HAL_RCC_ClockConfig+0x1b8>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0307 	and.w	r3, r3, #7
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	429a      	cmp	r2, r3
 8006184:	d20c      	bcs.n	80061a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006186:	4b22      	ldr	r3, [pc, #136]	; (8006210 <HAL_RCC_ClockConfig+0x1b8>)
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800618e:	4b20      	ldr	r3, [pc, #128]	; (8006210 <HAL_RCC_ClockConfig+0x1b8>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0307 	and.w	r3, r3, #7
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	429a      	cmp	r2, r3
 800619a:	d001      	beq.n	80061a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e032      	b.n	8006206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0304 	and.w	r3, r3, #4
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d008      	beq.n	80061be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061ac:	4b19      	ldr	r3, [pc, #100]	; (8006214 <HAL_RCC_ClockConfig+0x1bc>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	4916      	ldr	r1, [pc, #88]	; (8006214 <HAL_RCC_ClockConfig+0x1bc>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0308 	and.w	r3, r3, #8
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d009      	beq.n	80061de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061ca:	4b12      	ldr	r3, [pc, #72]	; (8006214 <HAL_RCC_ClockConfig+0x1bc>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	00db      	lsls	r3, r3, #3
 80061d8:	490e      	ldr	r1, [pc, #56]	; (8006214 <HAL_RCC_ClockConfig+0x1bc>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061de:	f000 f821 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 80061e2:	4602      	mov	r2, r0
 80061e4:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <HAL_RCC_ClockConfig+0x1bc>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	091b      	lsrs	r3, r3, #4
 80061ea:	f003 030f 	and.w	r3, r3, #15
 80061ee:	490a      	ldr	r1, [pc, #40]	; (8006218 <HAL_RCC_ClockConfig+0x1c0>)
 80061f0:	5ccb      	ldrb	r3, [r1, r3]
 80061f2:	fa22 f303 	lsr.w	r3, r2, r3
 80061f6:	4a09      	ldr	r2, [pc, #36]	; (800621c <HAL_RCC_ClockConfig+0x1c4>)
 80061f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80061fa:	4b09      	ldr	r3, [pc, #36]	; (8006220 <HAL_RCC_ClockConfig+0x1c8>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fe fce8 	bl	8004bd4 <HAL_InitTick>

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	40023c00 	.word	0x40023c00
 8006214:	40023800 	.word	0x40023800
 8006218:	080093f4 	.word	0x080093f4
 800621c:	20000000 	.word	0x20000000
 8006220:	20000004 	.word	0x20000004

08006224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006224:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800622c:	2300      	movs	r3, #0
 800622e:	607b      	str	r3, [r7, #4]
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	2300      	movs	r3, #0
 8006236:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006238:	2300      	movs	r3, #0
 800623a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800623c:	4b67      	ldr	r3, [pc, #412]	; (80063dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f003 030c 	and.w	r3, r3, #12
 8006244:	2b08      	cmp	r3, #8
 8006246:	d00d      	beq.n	8006264 <HAL_RCC_GetSysClockFreq+0x40>
 8006248:	2b08      	cmp	r3, #8
 800624a:	f200 80bd 	bhi.w	80063c8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800624e:	2b00      	cmp	r3, #0
 8006250:	d002      	beq.n	8006258 <HAL_RCC_GetSysClockFreq+0x34>
 8006252:	2b04      	cmp	r3, #4
 8006254:	d003      	beq.n	800625e <HAL_RCC_GetSysClockFreq+0x3a>
 8006256:	e0b7      	b.n	80063c8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006258:	4b61      	ldr	r3, [pc, #388]	; (80063e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800625a:	60bb      	str	r3, [r7, #8]
       break;
 800625c:	e0b7      	b.n	80063ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800625e:	4b61      	ldr	r3, [pc, #388]	; (80063e4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006260:	60bb      	str	r3, [r7, #8]
      break;
 8006262:	e0b4      	b.n	80063ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006264:	4b5d      	ldr	r3, [pc, #372]	; (80063dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800626c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800626e:	4b5b      	ldr	r3, [pc, #364]	; (80063dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d04d      	beq.n	8006316 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800627a:	4b58      	ldr	r3, [pc, #352]	; (80063dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	099b      	lsrs	r3, r3, #6
 8006280:	461a      	mov	r2, r3
 8006282:	f04f 0300 	mov.w	r3, #0
 8006286:	f240 10ff 	movw	r0, #511	; 0x1ff
 800628a:	f04f 0100 	mov.w	r1, #0
 800628e:	ea02 0800 	and.w	r8, r2, r0
 8006292:	ea03 0901 	and.w	r9, r3, r1
 8006296:	4640      	mov	r0, r8
 8006298:	4649      	mov	r1, r9
 800629a:	f04f 0200 	mov.w	r2, #0
 800629e:	f04f 0300 	mov.w	r3, #0
 80062a2:	014b      	lsls	r3, r1, #5
 80062a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80062a8:	0142      	lsls	r2, r0, #5
 80062aa:	4610      	mov	r0, r2
 80062ac:	4619      	mov	r1, r3
 80062ae:	ebb0 0008 	subs.w	r0, r0, r8
 80062b2:	eb61 0109 	sbc.w	r1, r1, r9
 80062b6:	f04f 0200 	mov.w	r2, #0
 80062ba:	f04f 0300 	mov.w	r3, #0
 80062be:	018b      	lsls	r3, r1, #6
 80062c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80062c4:	0182      	lsls	r2, r0, #6
 80062c6:	1a12      	subs	r2, r2, r0
 80062c8:	eb63 0301 	sbc.w	r3, r3, r1
 80062cc:	f04f 0000 	mov.w	r0, #0
 80062d0:	f04f 0100 	mov.w	r1, #0
 80062d4:	00d9      	lsls	r1, r3, #3
 80062d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062da:	00d0      	lsls	r0, r2, #3
 80062dc:	4602      	mov	r2, r0
 80062de:	460b      	mov	r3, r1
 80062e0:	eb12 0208 	adds.w	r2, r2, r8
 80062e4:	eb43 0309 	adc.w	r3, r3, r9
 80062e8:	f04f 0000 	mov.w	r0, #0
 80062ec:	f04f 0100 	mov.w	r1, #0
 80062f0:	0259      	lsls	r1, r3, #9
 80062f2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80062f6:	0250      	lsls	r0, r2, #9
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	4610      	mov	r0, r2
 80062fe:	4619      	mov	r1, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	461a      	mov	r2, r3
 8006304:	f04f 0300 	mov.w	r3, #0
 8006308:	f7fa fbd8 	bl	8000abc <__aeabi_uldivmod>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	4613      	mov	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	e04a      	b.n	80063ac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006316:	4b31      	ldr	r3, [pc, #196]	; (80063dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	099b      	lsrs	r3, r3, #6
 800631c:	461a      	mov	r2, r3
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006326:	f04f 0100 	mov.w	r1, #0
 800632a:	ea02 0400 	and.w	r4, r2, r0
 800632e:	ea03 0501 	and.w	r5, r3, r1
 8006332:	4620      	mov	r0, r4
 8006334:	4629      	mov	r1, r5
 8006336:	f04f 0200 	mov.w	r2, #0
 800633a:	f04f 0300 	mov.w	r3, #0
 800633e:	014b      	lsls	r3, r1, #5
 8006340:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006344:	0142      	lsls	r2, r0, #5
 8006346:	4610      	mov	r0, r2
 8006348:	4619      	mov	r1, r3
 800634a:	1b00      	subs	r0, r0, r4
 800634c:	eb61 0105 	sbc.w	r1, r1, r5
 8006350:	f04f 0200 	mov.w	r2, #0
 8006354:	f04f 0300 	mov.w	r3, #0
 8006358:	018b      	lsls	r3, r1, #6
 800635a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800635e:	0182      	lsls	r2, r0, #6
 8006360:	1a12      	subs	r2, r2, r0
 8006362:	eb63 0301 	sbc.w	r3, r3, r1
 8006366:	f04f 0000 	mov.w	r0, #0
 800636a:	f04f 0100 	mov.w	r1, #0
 800636e:	00d9      	lsls	r1, r3, #3
 8006370:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006374:	00d0      	lsls	r0, r2, #3
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	1912      	adds	r2, r2, r4
 800637c:	eb45 0303 	adc.w	r3, r5, r3
 8006380:	f04f 0000 	mov.w	r0, #0
 8006384:	f04f 0100 	mov.w	r1, #0
 8006388:	0299      	lsls	r1, r3, #10
 800638a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800638e:	0290      	lsls	r0, r2, #10
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4610      	mov	r0, r2
 8006396:	4619      	mov	r1, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	461a      	mov	r2, r3
 800639c:	f04f 0300 	mov.w	r3, #0
 80063a0:	f7fa fb8c 	bl	8000abc <__aeabi_uldivmod>
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	4613      	mov	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80063ac:	4b0b      	ldr	r3, [pc, #44]	; (80063dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	0c1b      	lsrs	r3, r3, #16
 80063b2:	f003 0303 	and.w	r3, r3, #3
 80063b6:	3301      	adds	r3, #1
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c4:	60bb      	str	r3, [r7, #8]
      break;
 80063c6:	e002      	b.n	80063ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063c8:	4b05      	ldr	r3, [pc, #20]	; (80063e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80063ca:	60bb      	str	r3, [r7, #8]
      break;
 80063cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063ce:	68bb      	ldr	r3, [r7, #8]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80063da:	bf00      	nop
 80063dc:	40023800 	.word	0x40023800
 80063e0:	00f42400 	.word	0x00f42400
 80063e4:	007a1200 	.word	0x007a1200

080063e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063e8:	b480      	push	{r7}
 80063ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063ec:	4b03      	ldr	r3, [pc, #12]	; (80063fc <HAL_RCC_GetHCLKFreq+0x14>)
 80063ee:	681b      	ldr	r3, [r3, #0]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	20000000 	.word	0x20000000

08006400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006404:	f7ff fff0 	bl	80063e8 <HAL_RCC_GetHCLKFreq>
 8006408:	4602      	mov	r2, r0
 800640a:	4b05      	ldr	r3, [pc, #20]	; (8006420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	0a9b      	lsrs	r3, r3, #10
 8006410:	f003 0307 	and.w	r3, r3, #7
 8006414:	4903      	ldr	r1, [pc, #12]	; (8006424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006416:	5ccb      	ldrb	r3, [r1, r3]
 8006418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800641c:	4618      	mov	r0, r3
 800641e:	bd80      	pop	{r7, pc}
 8006420:	40023800 	.word	0x40023800
 8006424:	08009404 	.word	0x08009404

08006428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800642c:	f7ff ffdc 	bl	80063e8 <HAL_RCC_GetHCLKFreq>
 8006430:	4602      	mov	r2, r0
 8006432:	4b05      	ldr	r3, [pc, #20]	; (8006448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	0b5b      	lsrs	r3, r3, #13
 8006438:	f003 0307 	and.w	r3, r3, #7
 800643c:	4903      	ldr	r1, [pc, #12]	; (800644c <HAL_RCC_GetPCLK2Freq+0x24>)
 800643e:	5ccb      	ldrb	r3, [r1, r3]
 8006440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006444:	4618      	mov	r0, r3
 8006446:	bd80      	pop	{r7, pc}
 8006448:	40023800 	.word	0x40023800
 800644c:	08009404 	.word	0x08009404

08006450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e041      	b.n	80064e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d106      	bne.n	800647c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7fd fffa 	bl	8004470 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3304      	adds	r3, #4
 800648c:	4619      	mov	r1, r3
 800648e:	4610      	mov	r0, r2
 8006490:	f000 fb42 	bl	8006b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b01      	cmp	r3, #1
 8006502:	d001      	beq.n	8006508 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e046      	b.n	8006596 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a23      	ldr	r2, [pc, #140]	; (80065a4 <HAL_TIM_Base_Start+0xb4>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d022      	beq.n	8006560 <HAL_TIM_Base_Start+0x70>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006522:	d01d      	beq.n	8006560 <HAL_TIM_Base_Start+0x70>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a1f      	ldr	r2, [pc, #124]	; (80065a8 <HAL_TIM_Base_Start+0xb8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d018      	beq.n	8006560 <HAL_TIM_Base_Start+0x70>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a1e      	ldr	r2, [pc, #120]	; (80065ac <HAL_TIM_Base_Start+0xbc>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d013      	beq.n	8006560 <HAL_TIM_Base_Start+0x70>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a1c      	ldr	r2, [pc, #112]	; (80065b0 <HAL_TIM_Base_Start+0xc0>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d00e      	beq.n	8006560 <HAL_TIM_Base_Start+0x70>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a1b      	ldr	r2, [pc, #108]	; (80065b4 <HAL_TIM_Base_Start+0xc4>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d009      	beq.n	8006560 <HAL_TIM_Base_Start+0x70>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a19      	ldr	r2, [pc, #100]	; (80065b8 <HAL_TIM_Base_Start+0xc8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d004      	beq.n	8006560 <HAL_TIM_Base_Start+0x70>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a18      	ldr	r2, [pc, #96]	; (80065bc <HAL_TIM_Base_Start+0xcc>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d111      	bne.n	8006584 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f003 0307 	and.w	r3, r3, #7
 800656a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2b06      	cmp	r3, #6
 8006570:	d010      	beq.n	8006594 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f042 0201 	orr.w	r2, r2, #1
 8006580:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006582:	e007      	b.n	8006594 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0201 	orr.w	r2, r2, #1
 8006592:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	40010000 	.word	0x40010000
 80065a8:	40000400 	.word	0x40000400
 80065ac:	40000800 	.word	0x40000800
 80065b0:	40000c00 	.word	0x40000c00
 80065b4:	40010400 	.word	0x40010400
 80065b8:	40014000 	.word	0x40014000
 80065bc:	40001800 	.word	0x40001800

080065c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e041      	b.n	8006656 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d106      	bne.n	80065ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f839 	bl	800665e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3304      	adds	r3, #4
 80065fc:	4619      	mov	r1, r3
 80065fe:	4610      	mov	r0, r2
 8006600:	f000 fa8a 	bl	8006b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800665e:	b480      	push	{r7}
 8006660:	b083      	sub	sp, #12
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006666:	bf00      	nop
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
	...

08006674 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d109      	bne.n	8006698 <HAL_TIM_PWM_Start+0x24>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b01      	cmp	r3, #1
 800668e:	bf14      	ite	ne
 8006690:	2301      	movne	r3, #1
 8006692:	2300      	moveq	r3, #0
 8006694:	b2db      	uxtb	r3, r3
 8006696:	e022      	b.n	80066de <HAL_TIM_PWM_Start+0x6a>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2b04      	cmp	r3, #4
 800669c:	d109      	bne.n	80066b2 <HAL_TIM_PWM_Start+0x3e>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	bf14      	ite	ne
 80066aa:	2301      	movne	r3, #1
 80066ac:	2300      	moveq	r3, #0
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	e015      	b.n	80066de <HAL_TIM_PWM_Start+0x6a>
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	2b08      	cmp	r3, #8
 80066b6:	d109      	bne.n	80066cc <HAL_TIM_PWM_Start+0x58>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	bf14      	ite	ne
 80066c4:	2301      	movne	r3, #1
 80066c6:	2300      	moveq	r3, #0
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	e008      	b.n	80066de <HAL_TIM_PWM_Start+0x6a>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	bf14      	ite	ne
 80066d8:	2301      	movne	r3, #1
 80066da:	2300      	moveq	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e07c      	b.n	80067e0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d104      	bne.n	80066f6 <HAL_TIM_PWM_Start+0x82>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2202      	movs	r2, #2
 80066f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066f4:	e013      	b.n	800671e <HAL_TIM_PWM_Start+0xaa>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2b04      	cmp	r3, #4
 80066fa:	d104      	bne.n	8006706 <HAL_TIM_PWM_Start+0x92>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2202      	movs	r2, #2
 8006700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006704:	e00b      	b.n	800671e <HAL_TIM_PWM_Start+0xaa>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b08      	cmp	r3, #8
 800670a:	d104      	bne.n	8006716 <HAL_TIM_PWM_Start+0xa2>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006714:	e003      	b.n	800671e <HAL_TIM_PWM_Start+0xaa>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2202      	movs	r2, #2
 800671a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2201      	movs	r2, #1
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fce0 	bl	80070ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a2d      	ldr	r2, [pc, #180]	; (80067e8 <HAL_TIM_PWM_Start+0x174>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d004      	beq.n	8006740 <HAL_TIM_PWM_Start+0xcc>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a2c      	ldr	r2, [pc, #176]	; (80067ec <HAL_TIM_PWM_Start+0x178>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d101      	bne.n	8006744 <HAL_TIM_PWM_Start+0xd0>
 8006740:	2301      	movs	r3, #1
 8006742:	e000      	b.n	8006746 <HAL_TIM_PWM_Start+0xd2>
 8006744:	2300      	movs	r3, #0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d007      	beq.n	800675a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006758:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a22      	ldr	r2, [pc, #136]	; (80067e8 <HAL_TIM_PWM_Start+0x174>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d022      	beq.n	80067aa <HAL_TIM_PWM_Start+0x136>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800676c:	d01d      	beq.n	80067aa <HAL_TIM_PWM_Start+0x136>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a1f      	ldr	r2, [pc, #124]	; (80067f0 <HAL_TIM_PWM_Start+0x17c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d018      	beq.n	80067aa <HAL_TIM_PWM_Start+0x136>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a1d      	ldr	r2, [pc, #116]	; (80067f4 <HAL_TIM_PWM_Start+0x180>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d013      	beq.n	80067aa <HAL_TIM_PWM_Start+0x136>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a1c      	ldr	r2, [pc, #112]	; (80067f8 <HAL_TIM_PWM_Start+0x184>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d00e      	beq.n	80067aa <HAL_TIM_PWM_Start+0x136>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a16      	ldr	r2, [pc, #88]	; (80067ec <HAL_TIM_PWM_Start+0x178>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d009      	beq.n	80067aa <HAL_TIM_PWM_Start+0x136>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a18      	ldr	r2, [pc, #96]	; (80067fc <HAL_TIM_PWM_Start+0x188>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d004      	beq.n	80067aa <HAL_TIM_PWM_Start+0x136>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a16      	ldr	r2, [pc, #88]	; (8006800 <HAL_TIM_PWM_Start+0x18c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d111      	bne.n	80067ce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f003 0307 	and.w	r3, r3, #7
 80067b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2b06      	cmp	r3, #6
 80067ba:	d010      	beq.n	80067de <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f042 0201 	orr.w	r2, r2, #1
 80067ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067cc:	e007      	b.n	80067de <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f042 0201 	orr.w	r2, r2, #1
 80067dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	40010000 	.word	0x40010000
 80067ec:	40010400 	.word	0x40010400
 80067f0:	40000400 	.word	0x40000400
 80067f4:	40000800 	.word	0x40000800
 80067f8:	40000c00 	.word	0x40000c00
 80067fc:	40014000 	.word	0x40014000
 8006800:	40001800 	.word	0x40001800

08006804 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006810:	2300      	movs	r3, #0
 8006812:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800681a:	2b01      	cmp	r3, #1
 800681c:	d101      	bne.n	8006822 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800681e:	2302      	movs	r3, #2
 8006820:	e0ae      	b.n	8006980 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b0c      	cmp	r3, #12
 800682e:	f200 809f 	bhi.w	8006970 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006832:	a201      	add	r2, pc, #4	; (adr r2, 8006838 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006838:	0800686d 	.word	0x0800686d
 800683c:	08006971 	.word	0x08006971
 8006840:	08006971 	.word	0x08006971
 8006844:	08006971 	.word	0x08006971
 8006848:	080068ad 	.word	0x080068ad
 800684c:	08006971 	.word	0x08006971
 8006850:	08006971 	.word	0x08006971
 8006854:	08006971 	.word	0x08006971
 8006858:	080068ef 	.word	0x080068ef
 800685c:	08006971 	.word	0x08006971
 8006860:	08006971 	.word	0x08006971
 8006864:	08006971 	.word	0x08006971
 8006868:	0800692f 	.word	0x0800692f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68b9      	ldr	r1, [r7, #8]
 8006872:	4618      	mov	r0, r3
 8006874:	f000 f9f0 	bl	8006c58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	699a      	ldr	r2, [r3, #24]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0208 	orr.w	r2, r2, #8
 8006886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	699a      	ldr	r2, [r3, #24]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 0204 	bic.w	r2, r2, #4
 8006896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6999      	ldr	r1, [r3, #24]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	691a      	ldr	r2, [r3, #16]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	619a      	str	r2, [r3, #24]
      break;
 80068aa:	e064      	b.n	8006976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68b9      	ldr	r1, [r7, #8]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fa40 	bl	8006d38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	699a      	ldr	r2, [r3, #24]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	699a      	ldr	r2, [r3, #24]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6999      	ldr	r1, [r3, #24]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	021a      	lsls	r2, r3, #8
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	619a      	str	r2, [r3, #24]
      break;
 80068ec:	e043      	b.n	8006976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68b9      	ldr	r1, [r7, #8]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 fa95 	bl	8006e24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	69da      	ldr	r2, [r3, #28]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f042 0208 	orr.w	r2, r2, #8
 8006908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	69da      	ldr	r2, [r3, #28]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 0204 	bic.w	r2, r2, #4
 8006918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69d9      	ldr	r1, [r3, #28]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	691a      	ldr	r2, [r3, #16]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	61da      	str	r2, [r3, #28]
      break;
 800692c:	e023      	b.n	8006976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68b9      	ldr	r1, [r7, #8]
 8006934:	4618      	mov	r0, r3
 8006936:	f000 fae9 	bl	8006f0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69da      	ldr	r2, [r3, #28]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	69da      	ldr	r2, [r3, #28]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69d9      	ldr	r1, [r3, #28]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	021a      	lsls	r2, r3, #8
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	61da      	str	r2, [r3, #28]
      break;
 800696e:	e002      	b.n	8006976 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	75fb      	strb	r3, [r7, #23]
      break;
 8006974:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800697e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3718      	adds	r7, #24
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800699c:	2b01      	cmp	r3, #1
 800699e:	d101      	bne.n	80069a4 <HAL_TIM_ConfigClockSource+0x1c>
 80069a0:	2302      	movs	r3, #2
 80069a2:	e0b4      	b.n	8006b0e <HAL_TIM_ConfigClockSource+0x186>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069dc:	d03e      	beq.n	8006a5c <HAL_TIM_ConfigClockSource+0xd4>
 80069de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069e2:	f200 8087 	bhi.w	8006af4 <HAL_TIM_ConfigClockSource+0x16c>
 80069e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ea:	f000 8086 	beq.w	8006afa <HAL_TIM_ConfigClockSource+0x172>
 80069ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f2:	d87f      	bhi.n	8006af4 <HAL_TIM_ConfigClockSource+0x16c>
 80069f4:	2b70      	cmp	r3, #112	; 0x70
 80069f6:	d01a      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0xa6>
 80069f8:	2b70      	cmp	r3, #112	; 0x70
 80069fa:	d87b      	bhi.n	8006af4 <HAL_TIM_ConfigClockSource+0x16c>
 80069fc:	2b60      	cmp	r3, #96	; 0x60
 80069fe:	d050      	beq.n	8006aa2 <HAL_TIM_ConfigClockSource+0x11a>
 8006a00:	2b60      	cmp	r3, #96	; 0x60
 8006a02:	d877      	bhi.n	8006af4 <HAL_TIM_ConfigClockSource+0x16c>
 8006a04:	2b50      	cmp	r3, #80	; 0x50
 8006a06:	d03c      	beq.n	8006a82 <HAL_TIM_ConfigClockSource+0xfa>
 8006a08:	2b50      	cmp	r3, #80	; 0x50
 8006a0a:	d873      	bhi.n	8006af4 <HAL_TIM_ConfigClockSource+0x16c>
 8006a0c:	2b40      	cmp	r3, #64	; 0x40
 8006a0e:	d058      	beq.n	8006ac2 <HAL_TIM_ConfigClockSource+0x13a>
 8006a10:	2b40      	cmp	r3, #64	; 0x40
 8006a12:	d86f      	bhi.n	8006af4 <HAL_TIM_ConfigClockSource+0x16c>
 8006a14:	2b30      	cmp	r3, #48	; 0x30
 8006a16:	d064      	beq.n	8006ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8006a18:	2b30      	cmp	r3, #48	; 0x30
 8006a1a:	d86b      	bhi.n	8006af4 <HAL_TIM_ConfigClockSource+0x16c>
 8006a1c:	2b20      	cmp	r3, #32
 8006a1e:	d060      	beq.n	8006ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8006a20:	2b20      	cmp	r3, #32
 8006a22:	d867      	bhi.n	8006af4 <HAL_TIM_ConfigClockSource+0x16c>
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d05c      	beq.n	8006ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8006a28:	2b10      	cmp	r3, #16
 8006a2a:	d05a      	beq.n	8006ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8006a2c:	e062      	b.n	8006af4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6818      	ldr	r0, [r3, #0]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	6899      	ldr	r1, [r3, #8]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	685a      	ldr	r2, [r3, #4]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f000 fb35 	bl	80070ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	609a      	str	r2, [r3, #8]
      break;
 8006a5a:	e04f      	b.n	8006afc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6818      	ldr	r0, [r3, #0]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	6899      	ldr	r1, [r3, #8]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f000 fb1e 	bl	80070ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689a      	ldr	r2, [r3, #8]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a7e:	609a      	str	r2, [r3, #8]
      break;
 8006a80:	e03c      	b.n	8006afc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6818      	ldr	r0, [r3, #0]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	6859      	ldr	r1, [r3, #4]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f000 fa92 	bl	8006fb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2150      	movs	r1, #80	; 0x50
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 faeb 	bl	8007076 <TIM_ITRx_SetConfig>
      break;
 8006aa0:	e02c      	b.n	8006afc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6818      	ldr	r0, [r3, #0]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	6859      	ldr	r1, [r3, #4]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	f000 fab1 	bl	8007016 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2160      	movs	r1, #96	; 0x60
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 fadb 	bl	8007076 <TIM_ITRx_SetConfig>
      break;
 8006ac0:	e01c      	b.n	8006afc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6818      	ldr	r0, [r3, #0]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	6859      	ldr	r1, [r3, #4]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	f000 fa72 	bl	8006fb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2140      	movs	r1, #64	; 0x40
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 facb 	bl	8007076 <TIM_ITRx_SetConfig>
      break;
 8006ae0:	e00c      	b.n	8006afc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4619      	mov	r1, r3
 8006aec:	4610      	mov	r0, r2
 8006aee:	f000 fac2 	bl	8007076 <TIM_ITRx_SetConfig>
      break;
 8006af2:	e003      	b.n	8006afc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	73fb      	strb	r3, [r7, #15]
      break;
 8006af8:	e000      	b.n	8006afc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006afa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a40      	ldr	r2, [pc, #256]	; (8006c2c <TIM_Base_SetConfig+0x114>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d013      	beq.n	8006b58 <TIM_Base_SetConfig+0x40>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b36:	d00f      	beq.n	8006b58 <TIM_Base_SetConfig+0x40>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a3d      	ldr	r2, [pc, #244]	; (8006c30 <TIM_Base_SetConfig+0x118>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d00b      	beq.n	8006b58 <TIM_Base_SetConfig+0x40>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a3c      	ldr	r2, [pc, #240]	; (8006c34 <TIM_Base_SetConfig+0x11c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d007      	beq.n	8006b58 <TIM_Base_SetConfig+0x40>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a3b      	ldr	r2, [pc, #236]	; (8006c38 <TIM_Base_SetConfig+0x120>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d003      	beq.n	8006b58 <TIM_Base_SetConfig+0x40>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a3a      	ldr	r2, [pc, #232]	; (8006c3c <TIM_Base_SetConfig+0x124>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d108      	bne.n	8006b6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a2f      	ldr	r2, [pc, #188]	; (8006c2c <TIM_Base_SetConfig+0x114>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d02b      	beq.n	8006bca <TIM_Base_SetConfig+0xb2>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b78:	d027      	beq.n	8006bca <TIM_Base_SetConfig+0xb2>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a2c      	ldr	r2, [pc, #176]	; (8006c30 <TIM_Base_SetConfig+0x118>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d023      	beq.n	8006bca <TIM_Base_SetConfig+0xb2>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a2b      	ldr	r2, [pc, #172]	; (8006c34 <TIM_Base_SetConfig+0x11c>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d01f      	beq.n	8006bca <TIM_Base_SetConfig+0xb2>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a2a      	ldr	r2, [pc, #168]	; (8006c38 <TIM_Base_SetConfig+0x120>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d01b      	beq.n	8006bca <TIM_Base_SetConfig+0xb2>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a29      	ldr	r2, [pc, #164]	; (8006c3c <TIM_Base_SetConfig+0x124>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d017      	beq.n	8006bca <TIM_Base_SetConfig+0xb2>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a28      	ldr	r2, [pc, #160]	; (8006c40 <TIM_Base_SetConfig+0x128>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d013      	beq.n	8006bca <TIM_Base_SetConfig+0xb2>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a27      	ldr	r2, [pc, #156]	; (8006c44 <TIM_Base_SetConfig+0x12c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d00f      	beq.n	8006bca <TIM_Base_SetConfig+0xb2>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a26      	ldr	r2, [pc, #152]	; (8006c48 <TIM_Base_SetConfig+0x130>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d00b      	beq.n	8006bca <TIM_Base_SetConfig+0xb2>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a25      	ldr	r2, [pc, #148]	; (8006c4c <TIM_Base_SetConfig+0x134>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d007      	beq.n	8006bca <TIM_Base_SetConfig+0xb2>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a24      	ldr	r2, [pc, #144]	; (8006c50 <TIM_Base_SetConfig+0x138>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d003      	beq.n	8006bca <TIM_Base_SetConfig+0xb2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a23      	ldr	r2, [pc, #140]	; (8006c54 <TIM_Base_SetConfig+0x13c>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d108      	bne.n	8006bdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	689a      	ldr	r2, [r3, #8]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a0a      	ldr	r2, [pc, #40]	; (8006c2c <TIM_Base_SetConfig+0x114>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d003      	beq.n	8006c10 <TIM_Base_SetConfig+0xf8>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a0c      	ldr	r2, [pc, #48]	; (8006c3c <TIM_Base_SetConfig+0x124>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d103      	bne.n	8006c18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	691a      	ldr	r2, [r3, #16]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	615a      	str	r2, [r3, #20]
}
 8006c1e:	bf00      	nop
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	40010000 	.word	0x40010000
 8006c30:	40000400 	.word	0x40000400
 8006c34:	40000800 	.word	0x40000800
 8006c38:	40000c00 	.word	0x40000c00
 8006c3c:	40010400 	.word	0x40010400
 8006c40:	40014000 	.word	0x40014000
 8006c44:	40014400 	.word	0x40014400
 8006c48:	40014800 	.word	0x40014800
 8006c4c:	40001800 	.word	0x40001800
 8006c50:	40001c00 	.word	0x40001c00
 8006c54:	40002000 	.word	0x40002000

08006c58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b087      	sub	sp, #28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	f023 0201 	bic.w	r2, r3, #1
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 0303 	bic.w	r3, r3, #3
 8006c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f023 0302 	bic.w	r3, r3, #2
 8006ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a20      	ldr	r2, [pc, #128]	; (8006d30 <TIM_OC1_SetConfig+0xd8>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d003      	beq.n	8006cbc <TIM_OC1_SetConfig+0x64>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a1f      	ldr	r2, [pc, #124]	; (8006d34 <TIM_OC1_SetConfig+0xdc>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d10c      	bne.n	8006cd6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	f023 0308 	bic.w	r3, r3, #8
 8006cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f023 0304 	bic.w	r3, r3, #4
 8006cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a15      	ldr	r2, [pc, #84]	; (8006d30 <TIM_OC1_SetConfig+0xd8>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d003      	beq.n	8006ce6 <TIM_OC1_SetConfig+0x8e>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a14      	ldr	r2, [pc, #80]	; (8006d34 <TIM_OC1_SetConfig+0xdc>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d111      	bne.n	8006d0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	621a      	str	r2, [r3, #32]
}
 8006d24:	bf00      	nop
 8006d26:	371c      	adds	r7, #28
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	40010000 	.word	0x40010000
 8006d34:	40010400 	.word	0x40010400

08006d38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	f023 0210 	bic.w	r2, r3, #16
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	021b      	lsls	r3, r3, #8
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	f023 0320 	bic.w	r3, r3, #32
 8006d82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	011b      	lsls	r3, r3, #4
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a22      	ldr	r2, [pc, #136]	; (8006e1c <TIM_OC2_SetConfig+0xe4>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d003      	beq.n	8006da0 <TIM_OC2_SetConfig+0x68>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a21      	ldr	r2, [pc, #132]	; (8006e20 <TIM_OC2_SetConfig+0xe8>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d10d      	bne.n	8006dbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	011b      	lsls	r3, r3, #4
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a17      	ldr	r2, [pc, #92]	; (8006e1c <TIM_OC2_SetConfig+0xe4>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d003      	beq.n	8006dcc <TIM_OC2_SetConfig+0x94>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a16      	ldr	r2, [pc, #88]	; (8006e20 <TIM_OC2_SetConfig+0xe8>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d113      	bne.n	8006df4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	621a      	str	r2, [r3, #32]
}
 8006e0e:	bf00      	nop
 8006e10:	371c      	adds	r7, #28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	40010000 	.word	0x40010000
 8006e20:	40010400 	.word	0x40010400

08006e24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b087      	sub	sp, #28
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 0303 	bic.w	r3, r3, #3
 8006e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	021b      	lsls	r3, r3, #8
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a21      	ldr	r2, [pc, #132]	; (8006f04 <TIM_OC3_SetConfig+0xe0>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d003      	beq.n	8006e8a <TIM_OC3_SetConfig+0x66>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a20      	ldr	r2, [pc, #128]	; (8006f08 <TIM_OC3_SetConfig+0xe4>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d10d      	bne.n	8006ea6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	021b      	lsls	r3, r3, #8
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a16      	ldr	r2, [pc, #88]	; (8006f04 <TIM_OC3_SetConfig+0xe0>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d003      	beq.n	8006eb6 <TIM_OC3_SetConfig+0x92>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a15      	ldr	r2, [pc, #84]	; (8006f08 <TIM_OC3_SetConfig+0xe4>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d113      	bne.n	8006ede <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ebc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	011b      	lsls	r3, r3, #4
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	011b      	lsls	r3, r3, #4
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	621a      	str	r2, [r3, #32]
}
 8006ef8:	bf00      	nop
 8006efa:	371c      	adds	r7, #28
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	40010000 	.word	0x40010000
 8006f08:	40010400 	.word	0x40010400

08006f0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b087      	sub	sp, #28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	021b      	lsls	r3, r3, #8
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	031b      	lsls	r3, r3, #12
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a12      	ldr	r2, [pc, #72]	; (8006fb0 <TIM_OC4_SetConfig+0xa4>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d003      	beq.n	8006f74 <TIM_OC4_SetConfig+0x68>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a11      	ldr	r2, [pc, #68]	; (8006fb4 <TIM_OC4_SetConfig+0xa8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d109      	bne.n	8006f88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	019b      	lsls	r3, r3, #6
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	621a      	str	r2, [r3, #32]
}
 8006fa2:	bf00      	nop
 8006fa4:	371c      	adds	r7, #28
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	40010000 	.word	0x40010000
 8006fb4:	40010400 	.word	0x40010400

08006fb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	f023 0201 	bic.w	r2, r3, #1
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	011b      	lsls	r3, r3, #4
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f023 030a 	bic.w	r3, r3, #10
 8006ff4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	621a      	str	r2, [r3, #32]
}
 800700a:	bf00      	nop
 800700c:	371c      	adds	r7, #28
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007016:	b480      	push	{r7}
 8007018:	b087      	sub	sp, #28
 800701a:	af00      	add	r7, sp, #0
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	f023 0210 	bic.w	r2, r3, #16
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007040:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	031b      	lsls	r3, r3, #12
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	4313      	orrs	r3, r2
 800704a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007052:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	011b      	lsls	r3, r3, #4
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	4313      	orrs	r3, r2
 800705c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	621a      	str	r2, [r3, #32]
}
 800706a:	bf00      	nop
 800706c:	371c      	adds	r7, #28
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007076:	b480      	push	{r7}
 8007078:	b085      	sub	sp, #20
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800708c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4313      	orrs	r3, r2
 8007094:	f043 0307 	orr.w	r3, r3, #7
 8007098:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	609a      	str	r2, [r3, #8]
}
 80070a0:	bf00      	nop
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	021a      	lsls	r2, r3, #8
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	431a      	orrs	r2, r3
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	609a      	str	r2, [r3, #8]
}
 80070e0:	bf00      	nop
 80070e2:	371c      	adds	r7, #28
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f003 031f 	and.w	r3, r3, #31
 80070fe:	2201      	movs	r2, #1
 8007100:	fa02 f303 	lsl.w	r3, r2, r3
 8007104:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6a1a      	ldr	r2, [r3, #32]
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	43db      	mvns	r3, r3
 800710e:	401a      	ands	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6a1a      	ldr	r2, [r3, #32]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	f003 031f 	and.w	r3, r3, #31
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	fa01 f303 	lsl.w	r3, r1, r3
 8007124:	431a      	orrs	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	621a      	str	r2, [r3, #32]
}
 800712a:	bf00      	nop
 800712c:	371c      	adds	r7, #28
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
	...

08007138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800714c:	2302      	movs	r3, #2
 800714e:	e05a      	b.n	8007206 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2202      	movs	r2, #2
 800715c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	4313      	orrs	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a21      	ldr	r2, [pc, #132]	; (8007214 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d022      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800719c:	d01d      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a1d      	ldr	r2, [pc, #116]	; (8007218 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d018      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a1b      	ldr	r2, [pc, #108]	; (800721c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d013      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a1a      	ldr	r2, [pc, #104]	; (8007220 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d00e      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a18      	ldr	r2, [pc, #96]	; (8007224 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d009      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a17      	ldr	r2, [pc, #92]	; (8007228 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d004      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a15      	ldr	r2, [pc, #84]	; (800722c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d10c      	bne.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	40010000 	.word	0x40010000
 8007218:	40000400 	.word	0x40000400
 800721c:	40000800 	.word	0x40000800
 8007220:	40000c00 	.word	0x40000c00
 8007224:	40010400 	.word	0x40010400
 8007228:	40014000 	.word	0x40014000
 800722c:	40001800 	.word	0x40001800

08007230 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800723a:	2300      	movs	r3, #0
 800723c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007244:	2b01      	cmp	r3, #1
 8007246:	d101      	bne.n	800724c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007248:	2302      	movs	r3, #2
 800724a:	e03d      	b.n	80072c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	4313      	orrs	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	4313      	orrs	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	4313      	orrs	r3, r2
 800727c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4313      	orrs	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e03f      	b.n	8007366 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d106      	bne.n	8007300 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7fd fa8a 	bl	8004814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2224      	movs	r2, #36	; 0x24
 8007304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68da      	ldr	r2, [r3, #12]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007316:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fe1d 	bl	8007f58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	691a      	ldr	r2, [r3, #16]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800732c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	695a      	ldr	r2, [r3, #20]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800733c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68da      	ldr	r2, [r3, #12]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800734c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2220      	movs	r2, #32
 8007358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2220      	movs	r2, #32
 8007360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b08a      	sub	sp, #40	; 0x28
 8007372:	af02      	add	r7, sp, #8
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	603b      	str	r3, [r7, #0]
 800737a:	4613      	mov	r3, r2
 800737c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800737e:	2300      	movs	r3, #0
 8007380:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b20      	cmp	r3, #32
 800738c:	d17c      	bne.n	8007488 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <HAL_UART_Transmit+0x2c>
 8007394:	88fb      	ldrh	r3, [r7, #6]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e075      	b.n	800748a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d101      	bne.n	80073ac <HAL_UART_Transmit+0x3e>
 80073a8:	2302      	movs	r3, #2
 80073aa:	e06e      	b.n	800748a <HAL_UART_Transmit+0x11c>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2221      	movs	r2, #33	; 0x21
 80073be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073c2:	f7fd fc4b 	bl	8004c5c <HAL_GetTick>
 80073c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	88fa      	ldrh	r2, [r7, #6]
 80073cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	88fa      	ldrh	r2, [r7, #6]
 80073d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073dc:	d108      	bne.n	80073f0 <HAL_UART_Transmit+0x82>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d104      	bne.n	80073f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80073e6:	2300      	movs	r3, #0
 80073e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	61bb      	str	r3, [r7, #24]
 80073ee:	e003      	b.n	80073f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073f4:	2300      	movs	r3, #0
 80073f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007400:	e02a      	b.n	8007458 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2200      	movs	r2, #0
 800740a:	2180      	movs	r1, #128	; 0x80
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f000 fb9b 	bl	8007b48 <UART_WaitOnFlagUntilTimeout>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e036      	b.n	800748a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10b      	bne.n	800743a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007430:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	3302      	adds	r3, #2
 8007436:	61bb      	str	r3, [r7, #24]
 8007438:	e007      	b.n	800744a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	781a      	ldrb	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	3301      	adds	r3, #1
 8007448:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800744e:	b29b      	uxth	r3, r3
 8007450:	3b01      	subs	r3, #1
 8007452:	b29a      	uxth	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800745c:	b29b      	uxth	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1cf      	bne.n	8007402 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2200      	movs	r2, #0
 800746a:	2140      	movs	r1, #64	; 0x40
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 fb6b 	bl	8007b48 <UART_WaitOnFlagUntilTimeout>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	e006      	b.n	800748a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2220      	movs	r2, #32
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007484:	2300      	movs	r3, #0
 8007486:	e000      	b.n	800748a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007488:	2302      	movs	r3, #2
  }
}
 800748a:	4618      	mov	r0, r3
 800748c:	3720      	adds	r7, #32
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b08a      	sub	sp, #40	; 0x28
 8007496:	af02      	add	r7, sp, #8
 8007498:	60f8      	str	r0, [r7, #12]
 800749a:	60b9      	str	r1, [r7, #8]
 800749c:	603b      	str	r3, [r7, #0]
 800749e:	4613      	mov	r3, r2
 80074a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b20      	cmp	r3, #32
 80074b0:	f040 808c 	bne.w	80075cc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d002      	beq.n	80074c0 <HAL_UART_Receive+0x2e>
 80074ba:	88fb      	ldrh	r3, [r7, #6]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e084      	b.n	80075ce <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d101      	bne.n	80074d2 <HAL_UART_Receive+0x40>
 80074ce:	2302      	movs	r3, #2
 80074d0:	e07d      	b.n	80075ce <HAL_UART_Receive+0x13c>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2222      	movs	r2, #34	; 0x22
 80074e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074ee:	f7fd fbb5 	bl	8004c5c <HAL_GetTick>
 80074f2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	88fa      	ldrh	r2, [r7, #6]
 80074f8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	88fa      	ldrh	r2, [r7, #6]
 80074fe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007508:	d108      	bne.n	800751c <HAL_UART_Receive+0x8a>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d104      	bne.n	800751c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007512:	2300      	movs	r3, #0
 8007514:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	61bb      	str	r3, [r7, #24]
 800751a:	e003      	b.n	8007524 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007520:	2300      	movs	r3, #0
 8007522:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800752c:	e043      	b.n	80075b6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2200      	movs	r2, #0
 8007536:	2120      	movs	r1, #32
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f000 fb05 	bl	8007b48 <UART_WaitOnFlagUntilTimeout>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007544:	2303      	movs	r3, #3
 8007546:	e042      	b.n	80075ce <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10c      	bne.n	8007568 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	b29b      	uxth	r3, r3
 8007556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755a:	b29a      	uxth	r2, r3
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	3302      	adds	r3, #2
 8007564:	61bb      	str	r3, [r7, #24]
 8007566:	e01f      	b.n	80075a8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007570:	d007      	beq.n	8007582 <HAL_UART_Receive+0xf0>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10a      	bne.n	8007590 <HAL_UART_Receive+0xfe>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d106      	bne.n	8007590 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	b2da      	uxtb	r2, r3
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	701a      	strb	r2, [r3, #0]
 800758e:	e008      	b.n	80075a2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	b2db      	uxtb	r3, r3
 8007598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800759c:	b2da      	uxtb	r2, r3
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	3301      	adds	r3, #1
 80075a6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	3b01      	subs	r3, #1
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1b6      	bne.n	800752e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80075c8:	2300      	movs	r3, #0
 80075ca:	e000      	b.n	80075ce <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80075cc:	2302      	movs	r3, #2
  }
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3720      	adds	r7, #32
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
	...

080075d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b0ba      	sub	sp, #232	; 0xe8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80075fe:	2300      	movs	r3, #0
 8007600:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007604:	2300      	movs	r3, #0
 8007606:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800760a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800760e:	f003 030f 	and.w	r3, r3, #15
 8007612:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007616:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10f      	bne.n	800763e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800761e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007622:	f003 0320 	and.w	r3, r3, #32
 8007626:	2b00      	cmp	r3, #0
 8007628:	d009      	beq.n	800763e <HAL_UART_IRQHandler+0x66>
 800762a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b00      	cmp	r3, #0
 8007634:	d003      	beq.n	800763e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fbd3 	bl	8007de2 <UART_Receive_IT>
      return;
 800763c:	e256      	b.n	8007aec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800763e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007642:	2b00      	cmp	r3, #0
 8007644:	f000 80de 	beq.w	8007804 <HAL_UART_IRQHandler+0x22c>
 8007648:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b00      	cmp	r3, #0
 8007652:	d106      	bne.n	8007662 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007658:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 80d1 	beq.w	8007804 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00b      	beq.n	8007686 <HAL_UART_IRQHandler+0xae>
 800766e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007676:	2b00      	cmp	r3, #0
 8007678:	d005      	beq.n	8007686 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	f043 0201 	orr.w	r2, r3, #1
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800768a:	f003 0304 	and.w	r3, r3, #4
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00b      	beq.n	80076aa <HAL_UART_IRQHandler+0xd2>
 8007692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d005      	beq.n	80076aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a2:	f043 0202 	orr.w	r2, r3, #2
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00b      	beq.n	80076ce <HAL_UART_IRQHandler+0xf6>
 80076b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d005      	beq.n	80076ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c6:	f043 0204 	orr.w	r2, r3, #4
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80076ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d2:	f003 0308 	and.w	r3, r3, #8
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d011      	beq.n	80076fe <HAL_UART_IRQHandler+0x126>
 80076da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076de:	f003 0320 	and.w	r3, r3, #32
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d105      	bne.n	80076f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80076e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d005      	beq.n	80076fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f6:	f043 0208 	orr.w	r2, r3, #8
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 81ed 	beq.w	8007ae2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800770c:	f003 0320 	and.w	r3, r3, #32
 8007710:	2b00      	cmp	r3, #0
 8007712:	d008      	beq.n	8007726 <HAL_UART_IRQHandler+0x14e>
 8007714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007718:	f003 0320 	and.w	r3, r3, #32
 800771c:	2b00      	cmp	r3, #0
 800771e:	d002      	beq.n	8007726 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fb5e 	bl	8007de2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007730:	2b40      	cmp	r3, #64	; 0x40
 8007732:	bf0c      	ite	eq
 8007734:	2301      	moveq	r3, #1
 8007736:	2300      	movne	r3, #0
 8007738:	b2db      	uxtb	r3, r3
 800773a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007742:	f003 0308 	and.w	r3, r3, #8
 8007746:	2b00      	cmp	r3, #0
 8007748:	d103      	bne.n	8007752 <HAL_UART_IRQHandler+0x17a>
 800774a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800774e:	2b00      	cmp	r3, #0
 8007750:	d04f      	beq.n	80077f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fa66 	bl	8007c24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007762:	2b40      	cmp	r3, #64	; 0x40
 8007764:	d141      	bne.n	80077ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3314      	adds	r3, #20
 800776c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007774:	e853 3f00 	ldrex	r3, [r3]
 8007778:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800777c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007784:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3314      	adds	r3, #20
 800778e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007792:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007796:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800779e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077a2:	e841 2300 	strex	r3, r2, [r1]
 80077a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1d9      	bne.n	8007766 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d013      	beq.n	80077e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077be:	4a7d      	ldr	r2, [pc, #500]	; (80079b4 <HAL_UART_IRQHandler+0x3dc>)
 80077c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fd ffc5 	bl	8005756 <HAL_DMA_Abort_IT>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d016      	beq.n	8007800 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077dc:	4610      	mov	r0, r2
 80077de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e0:	e00e      	b.n	8007800 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f99a 	bl	8007b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e8:	e00a      	b.n	8007800 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f996 	bl	8007b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f0:	e006      	b.n	8007800 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f992 	bl	8007b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80077fe:	e170      	b.n	8007ae2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007800:	bf00      	nop
    return;
 8007802:	e16e      	b.n	8007ae2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007808:	2b01      	cmp	r3, #1
 800780a:	f040 814a 	bne.w	8007aa2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800780e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007812:	f003 0310 	and.w	r3, r3, #16
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 8143 	beq.w	8007aa2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800781c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007820:	f003 0310 	and.w	r3, r3, #16
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 813c 	beq.w	8007aa2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800782a:	2300      	movs	r3, #0
 800782c:	60bb      	str	r3, [r7, #8]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	60bb      	str	r3, [r7, #8]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	60bb      	str	r3, [r7, #8]
 800783e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784a:	2b40      	cmp	r3, #64	; 0x40
 800784c:	f040 80b4 	bne.w	80079b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800785c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 8140 	beq.w	8007ae6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800786a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800786e:	429a      	cmp	r2, r3
 8007870:	f080 8139 	bcs.w	8007ae6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800787a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007886:	f000 8088 	beq.w	800799a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	330c      	adds	r3, #12
 8007890:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	330c      	adds	r3, #12
 80078b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80078b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80078ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1d9      	bne.n	800788a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3314      	adds	r3, #20
 80078dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078e0:	e853 3f00 	ldrex	r3, [r3]
 80078e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078e8:	f023 0301 	bic.w	r3, r3, #1
 80078ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3314      	adds	r3, #20
 80078f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80078fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80078fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007900:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007902:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800790c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e1      	bne.n	80078d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	3314      	adds	r3, #20
 8007918:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800791c:	e853 3f00 	ldrex	r3, [r3]
 8007920:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007928:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3314      	adds	r3, #20
 8007932:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007936:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007938:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800793c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800793e:	e841 2300 	strex	r3, r2, [r1]
 8007942:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007944:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1e3      	bne.n	8007912 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2220      	movs	r2, #32
 800794e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	330c      	adds	r3, #12
 800795e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007962:	e853 3f00 	ldrex	r3, [r3]
 8007966:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800796a:	f023 0310 	bic.w	r3, r3, #16
 800796e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	330c      	adds	r3, #12
 8007978:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800797c:	65ba      	str	r2, [r7, #88]	; 0x58
 800797e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007980:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007982:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007984:	e841 2300 	strex	r3, r2, [r1]
 8007988:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800798a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1e3      	bne.n	8007958 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007994:	4618      	mov	r0, r3
 8007996:	f7fd fe6e 	bl	8005676 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f8c0 	bl	8007b30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079b0:	e099      	b.n	8007ae6 <HAL_UART_IRQHandler+0x50e>
 80079b2:	bf00      	nop
 80079b4:	08007ceb 	.word	0x08007ceb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 808b 	beq.w	8007aea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80079d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 8086 	beq.w	8007aea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	330c      	adds	r3, #12
 80079e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e8:	e853 3f00 	ldrex	r3, [r3]
 80079ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	330c      	adds	r3, #12
 80079fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007a02:	647a      	str	r2, [r7, #68]	; 0x44
 8007a04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a0a:	e841 2300 	strex	r3, r2, [r1]
 8007a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1e3      	bne.n	80079de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3314      	adds	r3, #20
 8007a1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	623b      	str	r3, [r7, #32]
   return(result);
 8007a26:	6a3b      	ldr	r3, [r7, #32]
 8007a28:	f023 0301 	bic.w	r3, r3, #1
 8007a2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	3314      	adds	r3, #20
 8007a36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a3a:	633a      	str	r2, [r7, #48]	; 0x30
 8007a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e3      	bne.n	8007a16 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2220      	movs	r2, #32
 8007a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	330c      	adds	r3, #12
 8007a62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	e853 3f00 	ldrex	r3, [r3]
 8007a6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f023 0310 	bic.w	r3, r3, #16
 8007a72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	330c      	adds	r3, #12
 8007a7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007a80:	61fa      	str	r2, [r7, #28]
 8007a82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a84:	69b9      	ldr	r1, [r7, #24]
 8007a86:	69fa      	ldr	r2, [r7, #28]
 8007a88:	e841 2300 	strex	r3, r2, [r1]
 8007a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e3      	bne.n	8007a5c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f848 	bl	8007b30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007aa0:	e023      	b.n	8007aea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d009      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x4ea>
 8007aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f929 	bl	8007d12 <UART_Transmit_IT>
    return;
 8007ac0:	e014      	b.n	8007aec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00e      	beq.n	8007aec <HAL_UART_IRQHandler+0x514>
 8007ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d008      	beq.n	8007aec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f969 	bl	8007db2 <UART_EndTransmit_IT>
    return;
 8007ae0:	e004      	b.n	8007aec <HAL_UART_IRQHandler+0x514>
    return;
 8007ae2:	bf00      	nop
 8007ae4:	e002      	b.n	8007aec <HAL_UART_IRQHandler+0x514>
      return;
 8007ae6:	bf00      	nop
 8007ae8:	e000      	b.n	8007aec <HAL_UART_IRQHandler+0x514>
      return;
 8007aea:	bf00      	nop
  }
}
 8007aec:	37e8      	adds	r7, #232	; 0xe8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop

08007af4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b090      	sub	sp, #64	; 0x40
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	603b      	str	r3, [r7, #0]
 8007b54:	4613      	mov	r3, r2
 8007b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b58:	e050      	b.n	8007bfc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b60:	d04c      	beq.n	8007bfc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d007      	beq.n	8007b78 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b68:	f7fd f878 	bl	8004c5c <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d241      	bcs.n	8007bfc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	330c      	adds	r3, #12
 8007b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	e853 3f00 	ldrex	r3, [r3]
 8007b86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	330c      	adds	r3, #12
 8007b96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b98:	637a      	str	r2, [r7, #52]	; 0x34
 8007b9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ba0:	e841 2300 	strex	r3, r2, [r1]
 8007ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1e5      	bne.n	8007b78 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	3314      	adds	r3, #20
 8007bb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	e853 3f00 	ldrex	r3, [r3]
 8007bba:	613b      	str	r3, [r7, #16]
   return(result);
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	f023 0301 	bic.w	r3, r3, #1
 8007bc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	3314      	adds	r3, #20
 8007bca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bcc:	623a      	str	r2, [r7, #32]
 8007bce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd0:	69f9      	ldr	r1, [r7, #28]
 8007bd2:	6a3a      	ldr	r2, [r7, #32]
 8007bd4:	e841 2300 	strex	r3, r2, [r1]
 8007bd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1e5      	bne.n	8007bac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2220      	movs	r2, #32
 8007be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2220      	movs	r2, #32
 8007bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e00f      	b.n	8007c1c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	4013      	ands	r3, r2
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	bf0c      	ite	eq
 8007c0c:	2301      	moveq	r3, #1
 8007c0e:	2300      	movne	r3, #0
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	461a      	mov	r2, r3
 8007c14:	79fb      	ldrb	r3, [r7, #7]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d09f      	beq.n	8007b5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3740      	adds	r7, #64	; 0x40
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b095      	sub	sp, #84	; 0x54
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	330c      	adds	r3, #12
 8007c32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c36:	e853 3f00 	ldrex	r3, [r3]
 8007c3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	330c      	adds	r3, #12
 8007c4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c4c:	643a      	str	r2, [r7, #64]	; 0x40
 8007c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c54:	e841 2300 	strex	r3, r2, [r1]
 8007c58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1e5      	bne.n	8007c2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3314      	adds	r3, #20
 8007c66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c68:	6a3b      	ldr	r3, [r7, #32]
 8007c6a:	e853 3f00 	ldrex	r3, [r3]
 8007c6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	f023 0301 	bic.w	r3, r3, #1
 8007c76:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	3314      	adds	r3, #20
 8007c7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c88:	e841 2300 	strex	r3, r2, [r1]
 8007c8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1e5      	bne.n	8007c60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d119      	bne.n	8007cd0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	330c      	adds	r3, #12
 8007ca2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	e853 3f00 	ldrex	r3, [r3]
 8007caa:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	f023 0310 	bic.w	r3, r3, #16
 8007cb2:	647b      	str	r3, [r7, #68]	; 0x44
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	330c      	adds	r3, #12
 8007cba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cbc:	61ba      	str	r2, [r7, #24]
 8007cbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc0:	6979      	ldr	r1, [r7, #20]
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	e841 2300 	strex	r3, r2, [r1]
 8007cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1e5      	bne.n	8007c9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007cde:	bf00      	nop
 8007ce0:	3754      	adds	r7, #84	; 0x54
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b084      	sub	sp, #16
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f7ff ff09 	bl	8007b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d0a:	bf00      	nop
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b085      	sub	sp, #20
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b21      	cmp	r3, #33	; 0x21
 8007d24:	d13e      	bne.n	8007da4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d2e:	d114      	bne.n	8007d5a <UART_Transmit_IT+0x48>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d110      	bne.n	8007d5a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a1b      	ldr	r3, [r3, #32]
 8007d3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	881b      	ldrh	r3, [r3, #0]
 8007d42:	461a      	mov	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	1c9a      	adds	r2, r3, #2
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	621a      	str	r2, [r3, #32]
 8007d58:	e008      	b.n	8007d6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	1c59      	adds	r1, r3, #1
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	6211      	str	r1, [r2, #32]
 8007d64:	781a      	ldrb	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	3b01      	subs	r3, #1
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	4619      	mov	r1, r3
 8007d7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10f      	bne.n	8007da0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68da      	ldr	r2, [r3, #12]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007da0:	2300      	movs	r3, #0
 8007da2:	e000      	b.n	8007da6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007da4:	2302      	movs	r3, #2
  }
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b082      	sub	sp, #8
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68da      	ldr	r2, [r3, #12]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7ff fe8e 	bl	8007af4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b08c      	sub	sp, #48	; 0x30
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b22      	cmp	r3, #34	; 0x22
 8007df4:	f040 80ab 	bne.w	8007f4e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e00:	d117      	bne.n	8007e32 <UART_Receive_IT+0x50>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d113      	bne.n	8007e32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e12:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2a:	1c9a      	adds	r2, r3, #2
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	629a      	str	r2, [r3, #40]	; 0x28
 8007e30:	e026      	b.n	8007e80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e36:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e44:	d007      	beq.n	8007e56 <UART_Receive_IT+0x74>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10a      	bne.n	8007e64 <UART_Receive_IT+0x82>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d106      	bne.n	8007e64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e60:	701a      	strb	r2, [r3, #0]
 8007e62:	e008      	b.n	8007e76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e70:	b2da      	uxtb	r2, r3
 8007e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7a:	1c5a      	adds	r2, r3, #1
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	3b01      	subs	r3, #1
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d15a      	bne.n	8007f4a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68da      	ldr	r2, [r3, #12]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f022 0220 	bic.w	r2, r2, #32
 8007ea2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68da      	ldr	r2, [r3, #12]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007eb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	695a      	ldr	r2, [r3, #20]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f022 0201 	bic.w	r2, r2, #1
 8007ec2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2220      	movs	r2, #32
 8007ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d135      	bne.n	8007f40 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	330c      	adds	r3, #12
 8007ee0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	e853 3f00 	ldrex	r3, [r3]
 8007ee8:	613b      	str	r3, [r7, #16]
   return(result);
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	f023 0310 	bic.w	r3, r3, #16
 8007ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	330c      	adds	r3, #12
 8007ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007efa:	623a      	str	r2, [r7, #32]
 8007efc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efe:	69f9      	ldr	r1, [r7, #28]
 8007f00:	6a3a      	ldr	r2, [r7, #32]
 8007f02:	e841 2300 	strex	r3, r2, [r1]
 8007f06:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1e5      	bne.n	8007eda <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 0310 	and.w	r3, r3, #16
 8007f18:	2b10      	cmp	r3, #16
 8007f1a:	d10a      	bne.n	8007f32 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	60fb      	str	r3, [r7, #12]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	60fb      	str	r3, [r7, #12]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	60fb      	str	r3, [r7, #12]
 8007f30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f36:	4619      	mov	r1, r3
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7ff fdf9 	bl	8007b30 <HAL_UARTEx_RxEventCallback>
 8007f3e:	e002      	b.n	8007f46 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7ff fde1 	bl	8007b08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007f46:	2300      	movs	r3, #0
 8007f48:	e002      	b.n	8007f50 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	e000      	b.n	8007f50 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007f4e:	2302      	movs	r3, #2
  }
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3730      	adds	r7, #48	; 0x30
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f5c:	b09f      	sub	sp, #124	; 0x7c
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f6e:	68d9      	ldr	r1, [r3, #12]
 8007f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	ea40 0301 	orr.w	r3, r0, r1
 8007f78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f7c:	689a      	ldr	r2, [r3, #8]
 8007f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	431a      	orrs	r2, r3
 8007f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f86:	695b      	ldr	r3, [r3, #20]
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f8c:	69db      	ldr	r3, [r3, #28]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007f9c:	f021 010c 	bic.w	r1, r1, #12
 8007fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fa6:	430b      	orrs	r3, r1
 8007fa8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	695b      	ldr	r3, [r3, #20]
 8007fb0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fb6:	6999      	ldr	r1, [r3, #24]
 8007fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	ea40 0301 	orr.w	r3, r0, r1
 8007fc0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	4bc5      	ldr	r3, [pc, #788]	; (80082dc <UART_SetConfig+0x384>)
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d004      	beq.n	8007fd6 <UART_SetConfig+0x7e>
 8007fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	4bc3      	ldr	r3, [pc, #780]	; (80082e0 <UART_SetConfig+0x388>)
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d103      	bne.n	8007fde <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007fd6:	f7fe fa27 	bl	8006428 <HAL_RCC_GetPCLK2Freq>
 8007fda:	6778      	str	r0, [r7, #116]	; 0x74
 8007fdc:	e002      	b.n	8007fe4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007fde:	f7fe fa0f 	bl	8006400 <HAL_RCC_GetPCLK1Freq>
 8007fe2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fe6:	69db      	ldr	r3, [r3, #28]
 8007fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fec:	f040 80b6 	bne.w	800815c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ff2:	461c      	mov	r4, r3
 8007ff4:	f04f 0500 	mov.w	r5, #0
 8007ff8:	4622      	mov	r2, r4
 8007ffa:	462b      	mov	r3, r5
 8007ffc:	1891      	adds	r1, r2, r2
 8007ffe:	6439      	str	r1, [r7, #64]	; 0x40
 8008000:	415b      	adcs	r3, r3
 8008002:	647b      	str	r3, [r7, #68]	; 0x44
 8008004:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008008:	1912      	adds	r2, r2, r4
 800800a:	eb45 0303 	adc.w	r3, r5, r3
 800800e:	f04f 0000 	mov.w	r0, #0
 8008012:	f04f 0100 	mov.w	r1, #0
 8008016:	00d9      	lsls	r1, r3, #3
 8008018:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800801c:	00d0      	lsls	r0, r2, #3
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	1911      	adds	r1, r2, r4
 8008024:	6639      	str	r1, [r7, #96]	; 0x60
 8008026:	416b      	adcs	r3, r5
 8008028:	667b      	str	r3, [r7, #100]	; 0x64
 800802a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	461a      	mov	r2, r3
 8008030:	f04f 0300 	mov.w	r3, #0
 8008034:	1891      	adds	r1, r2, r2
 8008036:	63b9      	str	r1, [r7, #56]	; 0x38
 8008038:	415b      	adcs	r3, r3
 800803a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800803c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008040:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008044:	f7f8 fd3a 	bl	8000abc <__aeabi_uldivmod>
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	4ba5      	ldr	r3, [pc, #660]	; (80082e4 <UART_SetConfig+0x38c>)
 800804e:	fba3 2302 	umull	r2, r3, r3, r2
 8008052:	095b      	lsrs	r3, r3, #5
 8008054:	011e      	lsls	r6, r3, #4
 8008056:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008058:	461c      	mov	r4, r3
 800805a:	f04f 0500 	mov.w	r5, #0
 800805e:	4622      	mov	r2, r4
 8008060:	462b      	mov	r3, r5
 8008062:	1891      	adds	r1, r2, r2
 8008064:	6339      	str	r1, [r7, #48]	; 0x30
 8008066:	415b      	adcs	r3, r3
 8008068:	637b      	str	r3, [r7, #52]	; 0x34
 800806a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800806e:	1912      	adds	r2, r2, r4
 8008070:	eb45 0303 	adc.w	r3, r5, r3
 8008074:	f04f 0000 	mov.w	r0, #0
 8008078:	f04f 0100 	mov.w	r1, #0
 800807c:	00d9      	lsls	r1, r3, #3
 800807e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008082:	00d0      	lsls	r0, r2, #3
 8008084:	4602      	mov	r2, r0
 8008086:	460b      	mov	r3, r1
 8008088:	1911      	adds	r1, r2, r4
 800808a:	65b9      	str	r1, [r7, #88]	; 0x58
 800808c:	416b      	adcs	r3, r5
 800808e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	461a      	mov	r2, r3
 8008096:	f04f 0300 	mov.w	r3, #0
 800809a:	1891      	adds	r1, r2, r2
 800809c:	62b9      	str	r1, [r7, #40]	; 0x28
 800809e:	415b      	adcs	r3, r3
 80080a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80080aa:	f7f8 fd07 	bl	8000abc <__aeabi_uldivmod>
 80080ae:	4602      	mov	r2, r0
 80080b0:	460b      	mov	r3, r1
 80080b2:	4b8c      	ldr	r3, [pc, #560]	; (80082e4 <UART_SetConfig+0x38c>)
 80080b4:	fba3 1302 	umull	r1, r3, r3, r2
 80080b8:	095b      	lsrs	r3, r3, #5
 80080ba:	2164      	movs	r1, #100	; 0x64
 80080bc:	fb01 f303 	mul.w	r3, r1, r3
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	00db      	lsls	r3, r3, #3
 80080c4:	3332      	adds	r3, #50	; 0x32
 80080c6:	4a87      	ldr	r2, [pc, #540]	; (80082e4 <UART_SetConfig+0x38c>)
 80080c8:	fba2 2303 	umull	r2, r3, r2, r3
 80080cc:	095b      	lsrs	r3, r3, #5
 80080ce:	005b      	lsls	r3, r3, #1
 80080d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80080d4:	441e      	add	r6, r3
 80080d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080d8:	4618      	mov	r0, r3
 80080da:	f04f 0100 	mov.w	r1, #0
 80080de:	4602      	mov	r2, r0
 80080e0:	460b      	mov	r3, r1
 80080e2:	1894      	adds	r4, r2, r2
 80080e4:	623c      	str	r4, [r7, #32]
 80080e6:	415b      	adcs	r3, r3
 80080e8:	627b      	str	r3, [r7, #36]	; 0x24
 80080ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80080ee:	1812      	adds	r2, r2, r0
 80080f0:	eb41 0303 	adc.w	r3, r1, r3
 80080f4:	f04f 0400 	mov.w	r4, #0
 80080f8:	f04f 0500 	mov.w	r5, #0
 80080fc:	00dd      	lsls	r5, r3, #3
 80080fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008102:	00d4      	lsls	r4, r2, #3
 8008104:	4622      	mov	r2, r4
 8008106:	462b      	mov	r3, r5
 8008108:	1814      	adds	r4, r2, r0
 800810a:	653c      	str	r4, [r7, #80]	; 0x50
 800810c:	414b      	adcs	r3, r1
 800810e:	657b      	str	r3, [r7, #84]	; 0x54
 8008110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	461a      	mov	r2, r3
 8008116:	f04f 0300 	mov.w	r3, #0
 800811a:	1891      	adds	r1, r2, r2
 800811c:	61b9      	str	r1, [r7, #24]
 800811e:	415b      	adcs	r3, r3
 8008120:	61fb      	str	r3, [r7, #28]
 8008122:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008126:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800812a:	f7f8 fcc7 	bl	8000abc <__aeabi_uldivmod>
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	4b6c      	ldr	r3, [pc, #432]	; (80082e4 <UART_SetConfig+0x38c>)
 8008134:	fba3 1302 	umull	r1, r3, r3, r2
 8008138:	095b      	lsrs	r3, r3, #5
 800813a:	2164      	movs	r1, #100	; 0x64
 800813c:	fb01 f303 	mul.w	r3, r1, r3
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	00db      	lsls	r3, r3, #3
 8008144:	3332      	adds	r3, #50	; 0x32
 8008146:	4a67      	ldr	r2, [pc, #412]	; (80082e4 <UART_SetConfig+0x38c>)
 8008148:	fba2 2303 	umull	r2, r3, r2, r3
 800814c:	095b      	lsrs	r3, r3, #5
 800814e:	f003 0207 	and.w	r2, r3, #7
 8008152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4432      	add	r2, r6
 8008158:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800815a:	e0b9      	b.n	80082d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800815c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800815e:	461c      	mov	r4, r3
 8008160:	f04f 0500 	mov.w	r5, #0
 8008164:	4622      	mov	r2, r4
 8008166:	462b      	mov	r3, r5
 8008168:	1891      	adds	r1, r2, r2
 800816a:	6139      	str	r1, [r7, #16]
 800816c:	415b      	adcs	r3, r3
 800816e:	617b      	str	r3, [r7, #20]
 8008170:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008174:	1912      	adds	r2, r2, r4
 8008176:	eb45 0303 	adc.w	r3, r5, r3
 800817a:	f04f 0000 	mov.w	r0, #0
 800817e:	f04f 0100 	mov.w	r1, #0
 8008182:	00d9      	lsls	r1, r3, #3
 8008184:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008188:	00d0      	lsls	r0, r2, #3
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	eb12 0804 	adds.w	r8, r2, r4
 8008192:	eb43 0905 	adc.w	r9, r3, r5
 8008196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	4618      	mov	r0, r3
 800819c:	f04f 0100 	mov.w	r1, #0
 80081a0:	f04f 0200 	mov.w	r2, #0
 80081a4:	f04f 0300 	mov.w	r3, #0
 80081a8:	008b      	lsls	r3, r1, #2
 80081aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80081ae:	0082      	lsls	r2, r0, #2
 80081b0:	4640      	mov	r0, r8
 80081b2:	4649      	mov	r1, r9
 80081b4:	f7f8 fc82 	bl	8000abc <__aeabi_uldivmod>
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
 80081bc:	4b49      	ldr	r3, [pc, #292]	; (80082e4 <UART_SetConfig+0x38c>)
 80081be:	fba3 2302 	umull	r2, r3, r3, r2
 80081c2:	095b      	lsrs	r3, r3, #5
 80081c4:	011e      	lsls	r6, r3, #4
 80081c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081c8:	4618      	mov	r0, r3
 80081ca:	f04f 0100 	mov.w	r1, #0
 80081ce:	4602      	mov	r2, r0
 80081d0:	460b      	mov	r3, r1
 80081d2:	1894      	adds	r4, r2, r2
 80081d4:	60bc      	str	r4, [r7, #8]
 80081d6:	415b      	adcs	r3, r3
 80081d8:	60fb      	str	r3, [r7, #12]
 80081da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081de:	1812      	adds	r2, r2, r0
 80081e0:	eb41 0303 	adc.w	r3, r1, r3
 80081e4:	f04f 0400 	mov.w	r4, #0
 80081e8:	f04f 0500 	mov.w	r5, #0
 80081ec:	00dd      	lsls	r5, r3, #3
 80081ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80081f2:	00d4      	lsls	r4, r2, #3
 80081f4:	4622      	mov	r2, r4
 80081f6:	462b      	mov	r3, r5
 80081f8:	1814      	adds	r4, r2, r0
 80081fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80081fc:	414b      	adcs	r3, r1
 80081fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	4618      	mov	r0, r3
 8008206:	f04f 0100 	mov.w	r1, #0
 800820a:	f04f 0200 	mov.w	r2, #0
 800820e:	f04f 0300 	mov.w	r3, #0
 8008212:	008b      	lsls	r3, r1, #2
 8008214:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008218:	0082      	lsls	r2, r0, #2
 800821a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800821e:	f7f8 fc4d 	bl	8000abc <__aeabi_uldivmod>
 8008222:	4602      	mov	r2, r0
 8008224:	460b      	mov	r3, r1
 8008226:	4b2f      	ldr	r3, [pc, #188]	; (80082e4 <UART_SetConfig+0x38c>)
 8008228:	fba3 1302 	umull	r1, r3, r3, r2
 800822c:	095b      	lsrs	r3, r3, #5
 800822e:	2164      	movs	r1, #100	; 0x64
 8008230:	fb01 f303 	mul.w	r3, r1, r3
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	011b      	lsls	r3, r3, #4
 8008238:	3332      	adds	r3, #50	; 0x32
 800823a:	4a2a      	ldr	r2, [pc, #168]	; (80082e4 <UART_SetConfig+0x38c>)
 800823c:	fba2 2303 	umull	r2, r3, r2, r3
 8008240:	095b      	lsrs	r3, r3, #5
 8008242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008246:	441e      	add	r6, r3
 8008248:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800824a:	4618      	mov	r0, r3
 800824c:	f04f 0100 	mov.w	r1, #0
 8008250:	4602      	mov	r2, r0
 8008252:	460b      	mov	r3, r1
 8008254:	1894      	adds	r4, r2, r2
 8008256:	603c      	str	r4, [r7, #0]
 8008258:	415b      	adcs	r3, r3
 800825a:	607b      	str	r3, [r7, #4]
 800825c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008260:	1812      	adds	r2, r2, r0
 8008262:	eb41 0303 	adc.w	r3, r1, r3
 8008266:	f04f 0400 	mov.w	r4, #0
 800826a:	f04f 0500 	mov.w	r5, #0
 800826e:	00dd      	lsls	r5, r3, #3
 8008270:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008274:	00d4      	lsls	r4, r2, #3
 8008276:	4622      	mov	r2, r4
 8008278:	462b      	mov	r3, r5
 800827a:	eb12 0a00 	adds.w	sl, r2, r0
 800827e:	eb43 0b01 	adc.w	fp, r3, r1
 8008282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	4618      	mov	r0, r3
 8008288:	f04f 0100 	mov.w	r1, #0
 800828c:	f04f 0200 	mov.w	r2, #0
 8008290:	f04f 0300 	mov.w	r3, #0
 8008294:	008b      	lsls	r3, r1, #2
 8008296:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800829a:	0082      	lsls	r2, r0, #2
 800829c:	4650      	mov	r0, sl
 800829e:	4659      	mov	r1, fp
 80082a0:	f7f8 fc0c 	bl	8000abc <__aeabi_uldivmod>
 80082a4:	4602      	mov	r2, r0
 80082a6:	460b      	mov	r3, r1
 80082a8:	4b0e      	ldr	r3, [pc, #56]	; (80082e4 <UART_SetConfig+0x38c>)
 80082aa:	fba3 1302 	umull	r1, r3, r3, r2
 80082ae:	095b      	lsrs	r3, r3, #5
 80082b0:	2164      	movs	r1, #100	; 0x64
 80082b2:	fb01 f303 	mul.w	r3, r1, r3
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	011b      	lsls	r3, r3, #4
 80082ba:	3332      	adds	r3, #50	; 0x32
 80082bc:	4a09      	ldr	r2, [pc, #36]	; (80082e4 <UART_SetConfig+0x38c>)
 80082be:	fba2 2303 	umull	r2, r3, r2, r3
 80082c2:	095b      	lsrs	r3, r3, #5
 80082c4:	f003 020f 	and.w	r2, r3, #15
 80082c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4432      	add	r2, r6
 80082ce:	609a      	str	r2, [r3, #8]
}
 80082d0:	bf00      	nop
 80082d2:	377c      	adds	r7, #124	; 0x7c
 80082d4:	46bd      	mov	sp, r7
 80082d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082da:	bf00      	nop
 80082dc:	40011000 	.word	0x40011000
 80082e0:	40011400 	.word	0x40011400
 80082e4:	51eb851f 	.word	0x51eb851f

080082e8 <__errno>:
 80082e8:	4b01      	ldr	r3, [pc, #4]	; (80082f0 <__errno+0x8>)
 80082ea:	6818      	ldr	r0, [r3, #0]
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	2000000c 	.word	0x2000000c

080082f4 <__libc_init_array>:
 80082f4:	b570      	push	{r4, r5, r6, lr}
 80082f6:	4d0d      	ldr	r5, [pc, #52]	; (800832c <__libc_init_array+0x38>)
 80082f8:	4c0d      	ldr	r4, [pc, #52]	; (8008330 <__libc_init_array+0x3c>)
 80082fa:	1b64      	subs	r4, r4, r5
 80082fc:	10a4      	asrs	r4, r4, #2
 80082fe:	2600      	movs	r6, #0
 8008300:	42a6      	cmp	r6, r4
 8008302:	d109      	bne.n	8008318 <__libc_init_array+0x24>
 8008304:	4d0b      	ldr	r5, [pc, #44]	; (8008334 <__libc_init_array+0x40>)
 8008306:	4c0c      	ldr	r4, [pc, #48]	; (8008338 <__libc_init_array+0x44>)
 8008308:	f000 fc4e 	bl	8008ba8 <_init>
 800830c:	1b64      	subs	r4, r4, r5
 800830e:	10a4      	asrs	r4, r4, #2
 8008310:	2600      	movs	r6, #0
 8008312:	42a6      	cmp	r6, r4
 8008314:	d105      	bne.n	8008322 <__libc_init_array+0x2e>
 8008316:	bd70      	pop	{r4, r5, r6, pc}
 8008318:	f855 3b04 	ldr.w	r3, [r5], #4
 800831c:	4798      	blx	r3
 800831e:	3601      	adds	r6, #1
 8008320:	e7ee      	b.n	8008300 <__libc_init_array+0xc>
 8008322:	f855 3b04 	ldr.w	r3, [r5], #4
 8008326:	4798      	blx	r3
 8008328:	3601      	adds	r6, #1
 800832a:	e7f2      	b.n	8008312 <__libc_init_array+0x1e>
 800832c:	08009448 	.word	0x08009448
 8008330:	08009448 	.word	0x08009448
 8008334:	08009448 	.word	0x08009448
 8008338:	0800944c 	.word	0x0800944c

0800833c <memset>:
 800833c:	4402      	add	r2, r0
 800833e:	4603      	mov	r3, r0
 8008340:	4293      	cmp	r3, r2
 8008342:	d100      	bne.n	8008346 <memset+0xa>
 8008344:	4770      	bx	lr
 8008346:	f803 1b01 	strb.w	r1, [r3], #1
 800834a:	e7f9      	b.n	8008340 <memset+0x4>

0800834c <siprintf>:
 800834c:	b40e      	push	{r1, r2, r3}
 800834e:	b500      	push	{lr}
 8008350:	b09c      	sub	sp, #112	; 0x70
 8008352:	ab1d      	add	r3, sp, #116	; 0x74
 8008354:	9002      	str	r0, [sp, #8]
 8008356:	9006      	str	r0, [sp, #24]
 8008358:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800835c:	4809      	ldr	r0, [pc, #36]	; (8008384 <siprintf+0x38>)
 800835e:	9107      	str	r1, [sp, #28]
 8008360:	9104      	str	r1, [sp, #16]
 8008362:	4909      	ldr	r1, [pc, #36]	; (8008388 <siprintf+0x3c>)
 8008364:	f853 2b04 	ldr.w	r2, [r3], #4
 8008368:	9105      	str	r1, [sp, #20]
 800836a:	6800      	ldr	r0, [r0, #0]
 800836c:	9301      	str	r3, [sp, #4]
 800836e:	a902      	add	r1, sp, #8
 8008370:	f000 f868 	bl	8008444 <_svfiprintf_r>
 8008374:	9b02      	ldr	r3, [sp, #8]
 8008376:	2200      	movs	r2, #0
 8008378:	701a      	strb	r2, [r3, #0]
 800837a:	b01c      	add	sp, #112	; 0x70
 800837c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008380:	b003      	add	sp, #12
 8008382:	4770      	bx	lr
 8008384:	2000000c 	.word	0x2000000c
 8008388:	ffff0208 	.word	0xffff0208

0800838c <__ssputs_r>:
 800838c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008390:	688e      	ldr	r6, [r1, #8]
 8008392:	429e      	cmp	r6, r3
 8008394:	4682      	mov	sl, r0
 8008396:	460c      	mov	r4, r1
 8008398:	4690      	mov	r8, r2
 800839a:	461f      	mov	r7, r3
 800839c:	d838      	bhi.n	8008410 <__ssputs_r+0x84>
 800839e:	898a      	ldrh	r2, [r1, #12]
 80083a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083a4:	d032      	beq.n	800840c <__ssputs_r+0x80>
 80083a6:	6825      	ldr	r5, [r4, #0]
 80083a8:	6909      	ldr	r1, [r1, #16]
 80083aa:	eba5 0901 	sub.w	r9, r5, r1
 80083ae:	6965      	ldr	r5, [r4, #20]
 80083b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083b8:	3301      	adds	r3, #1
 80083ba:	444b      	add	r3, r9
 80083bc:	106d      	asrs	r5, r5, #1
 80083be:	429d      	cmp	r5, r3
 80083c0:	bf38      	it	cc
 80083c2:	461d      	movcc	r5, r3
 80083c4:	0553      	lsls	r3, r2, #21
 80083c6:	d531      	bpl.n	800842c <__ssputs_r+0xa0>
 80083c8:	4629      	mov	r1, r5
 80083ca:	f000 fb47 	bl	8008a5c <_malloc_r>
 80083ce:	4606      	mov	r6, r0
 80083d0:	b950      	cbnz	r0, 80083e8 <__ssputs_r+0x5c>
 80083d2:	230c      	movs	r3, #12
 80083d4:	f8ca 3000 	str.w	r3, [sl]
 80083d8:	89a3      	ldrh	r3, [r4, #12]
 80083da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083de:	81a3      	strh	r3, [r4, #12]
 80083e0:	f04f 30ff 	mov.w	r0, #4294967295
 80083e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e8:	6921      	ldr	r1, [r4, #16]
 80083ea:	464a      	mov	r2, r9
 80083ec:	f000 fabe 	bl	800896c <memcpy>
 80083f0:	89a3      	ldrh	r3, [r4, #12]
 80083f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083fa:	81a3      	strh	r3, [r4, #12]
 80083fc:	6126      	str	r6, [r4, #16]
 80083fe:	6165      	str	r5, [r4, #20]
 8008400:	444e      	add	r6, r9
 8008402:	eba5 0509 	sub.w	r5, r5, r9
 8008406:	6026      	str	r6, [r4, #0]
 8008408:	60a5      	str	r5, [r4, #8]
 800840a:	463e      	mov	r6, r7
 800840c:	42be      	cmp	r6, r7
 800840e:	d900      	bls.n	8008412 <__ssputs_r+0x86>
 8008410:	463e      	mov	r6, r7
 8008412:	4632      	mov	r2, r6
 8008414:	6820      	ldr	r0, [r4, #0]
 8008416:	4641      	mov	r1, r8
 8008418:	f000 fab6 	bl	8008988 <memmove>
 800841c:	68a3      	ldr	r3, [r4, #8]
 800841e:	6822      	ldr	r2, [r4, #0]
 8008420:	1b9b      	subs	r3, r3, r6
 8008422:	4432      	add	r2, r6
 8008424:	60a3      	str	r3, [r4, #8]
 8008426:	6022      	str	r2, [r4, #0]
 8008428:	2000      	movs	r0, #0
 800842a:	e7db      	b.n	80083e4 <__ssputs_r+0x58>
 800842c:	462a      	mov	r2, r5
 800842e:	f000 fb6f 	bl	8008b10 <_realloc_r>
 8008432:	4606      	mov	r6, r0
 8008434:	2800      	cmp	r0, #0
 8008436:	d1e1      	bne.n	80083fc <__ssputs_r+0x70>
 8008438:	6921      	ldr	r1, [r4, #16]
 800843a:	4650      	mov	r0, sl
 800843c:	f000 fabe 	bl	80089bc <_free_r>
 8008440:	e7c7      	b.n	80083d2 <__ssputs_r+0x46>
	...

08008444 <_svfiprintf_r>:
 8008444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008448:	4698      	mov	r8, r3
 800844a:	898b      	ldrh	r3, [r1, #12]
 800844c:	061b      	lsls	r3, r3, #24
 800844e:	b09d      	sub	sp, #116	; 0x74
 8008450:	4607      	mov	r7, r0
 8008452:	460d      	mov	r5, r1
 8008454:	4614      	mov	r4, r2
 8008456:	d50e      	bpl.n	8008476 <_svfiprintf_r+0x32>
 8008458:	690b      	ldr	r3, [r1, #16]
 800845a:	b963      	cbnz	r3, 8008476 <_svfiprintf_r+0x32>
 800845c:	2140      	movs	r1, #64	; 0x40
 800845e:	f000 fafd 	bl	8008a5c <_malloc_r>
 8008462:	6028      	str	r0, [r5, #0]
 8008464:	6128      	str	r0, [r5, #16]
 8008466:	b920      	cbnz	r0, 8008472 <_svfiprintf_r+0x2e>
 8008468:	230c      	movs	r3, #12
 800846a:	603b      	str	r3, [r7, #0]
 800846c:	f04f 30ff 	mov.w	r0, #4294967295
 8008470:	e0d1      	b.n	8008616 <_svfiprintf_r+0x1d2>
 8008472:	2340      	movs	r3, #64	; 0x40
 8008474:	616b      	str	r3, [r5, #20]
 8008476:	2300      	movs	r3, #0
 8008478:	9309      	str	r3, [sp, #36]	; 0x24
 800847a:	2320      	movs	r3, #32
 800847c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008480:	f8cd 800c 	str.w	r8, [sp, #12]
 8008484:	2330      	movs	r3, #48	; 0x30
 8008486:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008630 <_svfiprintf_r+0x1ec>
 800848a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800848e:	f04f 0901 	mov.w	r9, #1
 8008492:	4623      	mov	r3, r4
 8008494:	469a      	mov	sl, r3
 8008496:	f813 2b01 	ldrb.w	r2, [r3], #1
 800849a:	b10a      	cbz	r2, 80084a0 <_svfiprintf_r+0x5c>
 800849c:	2a25      	cmp	r2, #37	; 0x25
 800849e:	d1f9      	bne.n	8008494 <_svfiprintf_r+0x50>
 80084a0:	ebba 0b04 	subs.w	fp, sl, r4
 80084a4:	d00b      	beq.n	80084be <_svfiprintf_r+0x7a>
 80084a6:	465b      	mov	r3, fp
 80084a8:	4622      	mov	r2, r4
 80084aa:	4629      	mov	r1, r5
 80084ac:	4638      	mov	r0, r7
 80084ae:	f7ff ff6d 	bl	800838c <__ssputs_r>
 80084b2:	3001      	adds	r0, #1
 80084b4:	f000 80aa 	beq.w	800860c <_svfiprintf_r+0x1c8>
 80084b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084ba:	445a      	add	r2, fp
 80084bc:	9209      	str	r2, [sp, #36]	; 0x24
 80084be:	f89a 3000 	ldrb.w	r3, [sl]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f000 80a2 	beq.w	800860c <_svfiprintf_r+0x1c8>
 80084c8:	2300      	movs	r3, #0
 80084ca:	f04f 32ff 	mov.w	r2, #4294967295
 80084ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084d2:	f10a 0a01 	add.w	sl, sl, #1
 80084d6:	9304      	str	r3, [sp, #16]
 80084d8:	9307      	str	r3, [sp, #28]
 80084da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084de:	931a      	str	r3, [sp, #104]	; 0x68
 80084e0:	4654      	mov	r4, sl
 80084e2:	2205      	movs	r2, #5
 80084e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e8:	4851      	ldr	r0, [pc, #324]	; (8008630 <_svfiprintf_r+0x1ec>)
 80084ea:	f7f7 fe79 	bl	80001e0 <memchr>
 80084ee:	9a04      	ldr	r2, [sp, #16]
 80084f0:	b9d8      	cbnz	r0, 800852a <_svfiprintf_r+0xe6>
 80084f2:	06d0      	lsls	r0, r2, #27
 80084f4:	bf44      	itt	mi
 80084f6:	2320      	movmi	r3, #32
 80084f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084fc:	0711      	lsls	r1, r2, #28
 80084fe:	bf44      	itt	mi
 8008500:	232b      	movmi	r3, #43	; 0x2b
 8008502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008506:	f89a 3000 	ldrb.w	r3, [sl]
 800850a:	2b2a      	cmp	r3, #42	; 0x2a
 800850c:	d015      	beq.n	800853a <_svfiprintf_r+0xf6>
 800850e:	9a07      	ldr	r2, [sp, #28]
 8008510:	4654      	mov	r4, sl
 8008512:	2000      	movs	r0, #0
 8008514:	f04f 0c0a 	mov.w	ip, #10
 8008518:	4621      	mov	r1, r4
 800851a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800851e:	3b30      	subs	r3, #48	; 0x30
 8008520:	2b09      	cmp	r3, #9
 8008522:	d94e      	bls.n	80085c2 <_svfiprintf_r+0x17e>
 8008524:	b1b0      	cbz	r0, 8008554 <_svfiprintf_r+0x110>
 8008526:	9207      	str	r2, [sp, #28]
 8008528:	e014      	b.n	8008554 <_svfiprintf_r+0x110>
 800852a:	eba0 0308 	sub.w	r3, r0, r8
 800852e:	fa09 f303 	lsl.w	r3, r9, r3
 8008532:	4313      	orrs	r3, r2
 8008534:	9304      	str	r3, [sp, #16]
 8008536:	46a2      	mov	sl, r4
 8008538:	e7d2      	b.n	80084e0 <_svfiprintf_r+0x9c>
 800853a:	9b03      	ldr	r3, [sp, #12]
 800853c:	1d19      	adds	r1, r3, #4
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	9103      	str	r1, [sp, #12]
 8008542:	2b00      	cmp	r3, #0
 8008544:	bfbb      	ittet	lt
 8008546:	425b      	neglt	r3, r3
 8008548:	f042 0202 	orrlt.w	r2, r2, #2
 800854c:	9307      	strge	r3, [sp, #28]
 800854e:	9307      	strlt	r3, [sp, #28]
 8008550:	bfb8      	it	lt
 8008552:	9204      	strlt	r2, [sp, #16]
 8008554:	7823      	ldrb	r3, [r4, #0]
 8008556:	2b2e      	cmp	r3, #46	; 0x2e
 8008558:	d10c      	bne.n	8008574 <_svfiprintf_r+0x130>
 800855a:	7863      	ldrb	r3, [r4, #1]
 800855c:	2b2a      	cmp	r3, #42	; 0x2a
 800855e:	d135      	bne.n	80085cc <_svfiprintf_r+0x188>
 8008560:	9b03      	ldr	r3, [sp, #12]
 8008562:	1d1a      	adds	r2, r3, #4
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	9203      	str	r2, [sp, #12]
 8008568:	2b00      	cmp	r3, #0
 800856a:	bfb8      	it	lt
 800856c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008570:	3402      	adds	r4, #2
 8008572:	9305      	str	r3, [sp, #20]
 8008574:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008640 <_svfiprintf_r+0x1fc>
 8008578:	7821      	ldrb	r1, [r4, #0]
 800857a:	2203      	movs	r2, #3
 800857c:	4650      	mov	r0, sl
 800857e:	f7f7 fe2f 	bl	80001e0 <memchr>
 8008582:	b140      	cbz	r0, 8008596 <_svfiprintf_r+0x152>
 8008584:	2340      	movs	r3, #64	; 0x40
 8008586:	eba0 000a 	sub.w	r0, r0, sl
 800858a:	fa03 f000 	lsl.w	r0, r3, r0
 800858e:	9b04      	ldr	r3, [sp, #16]
 8008590:	4303      	orrs	r3, r0
 8008592:	3401      	adds	r4, #1
 8008594:	9304      	str	r3, [sp, #16]
 8008596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800859a:	4826      	ldr	r0, [pc, #152]	; (8008634 <_svfiprintf_r+0x1f0>)
 800859c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085a0:	2206      	movs	r2, #6
 80085a2:	f7f7 fe1d 	bl	80001e0 <memchr>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d038      	beq.n	800861c <_svfiprintf_r+0x1d8>
 80085aa:	4b23      	ldr	r3, [pc, #140]	; (8008638 <_svfiprintf_r+0x1f4>)
 80085ac:	bb1b      	cbnz	r3, 80085f6 <_svfiprintf_r+0x1b2>
 80085ae:	9b03      	ldr	r3, [sp, #12]
 80085b0:	3307      	adds	r3, #7
 80085b2:	f023 0307 	bic.w	r3, r3, #7
 80085b6:	3308      	adds	r3, #8
 80085b8:	9303      	str	r3, [sp, #12]
 80085ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085bc:	4433      	add	r3, r6
 80085be:	9309      	str	r3, [sp, #36]	; 0x24
 80085c0:	e767      	b.n	8008492 <_svfiprintf_r+0x4e>
 80085c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80085c6:	460c      	mov	r4, r1
 80085c8:	2001      	movs	r0, #1
 80085ca:	e7a5      	b.n	8008518 <_svfiprintf_r+0xd4>
 80085cc:	2300      	movs	r3, #0
 80085ce:	3401      	adds	r4, #1
 80085d0:	9305      	str	r3, [sp, #20]
 80085d2:	4619      	mov	r1, r3
 80085d4:	f04f 0c0a 	mov.w	ip, #10
 80085d8:	4620      	mov	r0, r4
 80085da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085de:	3a30      	subs	r2, #48	; 0x30
 80085e0:	2a09      	cmp	r2, #9
 80085e2:	d903      	bls.n	80085ec <_svfiprintf_r+0x1a8>
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d0c5      	beq.n	8008574 <_svfiprintf_r+0x130>
 80085e8:	9105      	str	r1, [sp, #20]
 80085ea:	e7c3      	b.n	8008574 <_svfiprintf_r+0x130>
 80085ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80085f0:	4604      	mov	r4, r0
 80085f2:	2301      	movs	r3, #1
 80085f4:	e7f0      	b.n	80085d8 <_svfiprintf_r+0x194>
 80085f6:	ab03      	add	r3, sp, #12
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	462a      	mov	r2, r5
 80085fc:	4b0f      	ldr	r3, [pc, #60]	; (800863c <_svfiprintf_r+0x1f8>)
 80085fe:	a904      	add	r1, sp, #16
 8008600:	4638      	mov	r0, r7
 8008602:	f3af 8000 	nop.w
 8008606:	1c42      	adds	r2, r0, #1
 8008608:	4606      	mov	r6, r0
 800860a:	d1d6      	bne.n	80085ba <_svfiprintf_r+0x176>
 800860c:	89ab      	ldrh	r3, [r5, #12]
 800860e:	065b      	lsls	r3, r3, #25
 8008610:	f53f af2c 	bmi.w	800846c <_svfiprintf_r+0x28>
 8008614:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008616:	b01d      	add	sp, #116	; 0x74
 8008618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800861c:	ab03      	add	r3, sp, #12
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	462a      	mov	r2, r5
 8008622:	4b06      	ldr	r3, [pc, #24]	; (800863c <_svfiprintf_r+0x1f8>)
 8008624:	a904      	add	r1, sp, #16
 8008626:	4638      	mov	r0, r7
 8008628:	f000 f87a 	bl	8008720 <_printf_i>
 800862c:	e7eb      	b.n	8008606 <_svfiprintf_r+0x1c2>
 800862e:	bf00      	nop
 8008630:	0800940c 	.word	0x0800940c
 8008634:	08009416 	.word	0x08009416
 8008638:	00000000 	.word	0x00000000
 800863c:	0800838d 	.word	0x0800838d
 8008640:	08009412 	.word	0x08009412

08008644 <_printf_common>:
 8008644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008648:	4616      	mov	r6, r2
 800864a:	4699      	mov	r9, r3
 800864c:	688a      	ldr	r2, [r1, #8]
 800864e:	690b      	ldr	r3, [r1, #16]
 8008650:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008654:	4293      	cmp	r3, r2
 8008656:	bfb8      	it	lt
 8008658:	4613      	movlt	r3, r2
 800865a:	6033      	str	r3, [r6, #0]
 800865c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008660:	4607      	mov	r7, r0
 8008662:	460c      	mov	r4, r1
 8008664:	b10a      	cbz	r2, 800866a <_printf_common+0x26>
 8008666:	3301      	adds	r3, #1
 8008668:	6033      	str	r3, [r6, #0]
 800866a:	6823      	ldr	r3, [r4, #0]
 800866c:	0699      	lsls	r1, r3, #26
 800866e:	bf42      	ittt	mi
 8008670:	6833      	ldrmi	r3, [r6, #0]
 8008672:	3302      	addmi	r3, #2
 8008674:	6033      	strmi	r3, [r6, #0]
 8008676:	6825      	ldr	r5, [r4, #0]
 8008678:	f015 0506 	ands.w	r5, r5, #6
 800867c:	d106      	bne.n	800868c <_printf_common+0x48>
 800867e:	f104 0a19 	add.w	sl, r4, #25
 8008682:	68e3      	ldr	r3, [r4, #12]
 8008684:	6832      	ldr	r2, [r6, #0]
 8008686:	1a9b      	subs	r3, r3, r2
 8008688:	42ab      	cmp	r3, r5
 800868a:	dc26      	bgt.n	80086da <_printf_common+0x96>
 800868c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008690:	1e13      	subs	r3, r2, #0
 8008692:	6822      	ldr	r2, [r4, #0]
 8008694:	bf18      	it	ne
 8008696:	2301      	movne	r3, #1
 8008698:	0692      	lsls	r2, r2, #26
 800869a:	d42b      	bmi.n	80086f4 <_printf_common+0xb0>
 800869c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086a0:	4649      	mov	r1, r9
 80086a2:	4638      	mov	r0, r7
 80086a4:	47c0      	blx	r8
 80086a6:	3001      	adds	r0, #1
 80086a8:	d01e      	beq.n	80086e8 <_printf_common+0xa4>
 80086aa:	6823      	ldr	r3, [r4, #0]
 80086ac:	68e5      	ldr	r5, [r4, #12]
 80086ae:	6832      	ldr	r2, [r6, #0]
 80086b0:	f003 0306 	and.w	r3, r3, #6
 80086b4:	2b04      	cmp	r3, #4
 80086b6:	bf08      	it	eq
 80086b8:	1aad      	subeq	r5, r5, r2
 80086ba:	68a3      	ldr	r3, [r4, #8]
 80086bc:	6922      	ldr	r2, [r4, #16]
 80086be:	bf0c      	ite	eq
 80086c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086c4:	2500      	movne	r5, #0
 80086c6:	4293      	cmp	r3, r2
 80086c8:	bfc4      	itt	gt
 80086ca:	1a9b      	subgt	r3, r3, r2
 80086cc:	18ed      	addgt	r5, r5, r3
 80086ce:	2600      	movs	r6, #0
 80086d0:	341a      	adds	r4, #26
 80086d2:	42b5      	cmp	r5, r6
 80086d4:	d11a      	bne.n	800870c <_printf_common+0xc8>
 80086d6:	2000      	movs	r0, #0
 80086d8:	e008      	b.n	80086ec <_printf_common+0xa8>
 80086da:	2301      	movs	r3, #1
 80086dc:	4652      	mov	r2, sl
 80086de:	4649      	mov	r1, r9
 80086e0:	4638      	mov	r0, r7
 80086e2:	47c0      	blx	r8
 80086e4:	3001      	adds	r0, #1
 80086e6:	d103      	bne.n	80086f0 <_printf_common+0xac>
 80086e8:	f04f 30ff 	mov.w	r0, #4294967295
 80086ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f0:	3501      	adds	r5, #1
 80086f2:	e7c6      	b.n	8008682 <_printf_common+0x3e>
 80086f4:	18e1      	adds	r1, r4, r3
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	2030      	movs	r0, #48	; 0x30
 80086fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086fe:	4422      	add	r2, r4
 8008700:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008704:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008708:	3302      	adds	r3, #2
 800870a:	e7c7      	b.n	800869c <_printf_common+0x58>
 800870c:	2301      	movs	r3, #1
 800870e:	4622      	mov	r2, r4
 8008710:	4649      	mov	r1, r9
 8008712:	4638      	mov	r0, r7
 8008714:	47c0      	blx	r8
 8008716:	3001      	adds	r0, #1
 8008718:	d0e6      	beq.n	80086e8 <_printf_common+0xa4>
 800871a:	3601      	adds	r6, #1
 800871c:	e7d9      	b.n	80086d2 <_printf_common+0x8e>
	...

08008720 <_printf_i>:
 8008720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008724:	460c      	mov	r4, r1
 8008726:	4691      	mov	r9, r2
 8008728:	7e27      	ldrb	r7, [r4, #24]
 800872a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800872c:	2f78      	cmp	r7, #120	; 0x78
 800872e:	4680      	mov	r8, r0
 8008730:	469a      	mov	sl, r3
 8008732:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008736:	d807      	bhi.n	8008748 <_printf_i+0x28>
 8008738:	2f62      	cmp	r7, #98	; 0x62
 800873a:	d80a      	bhi.n	8008752 <_printf_i+0x32>
 800873c:	2f00      	cmp	r7, #0
 800873e:	f000 80d8 	beq.w	80088f2 <_printf_i+0x1d2>
 8008742:	2f58      	cmp	r7, #88	; 0x58
 8008744:	f000 80a3 	beq.w	800888e <_printf_i+0x16e>
 8008748:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800874c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008750:	e03a      	b.n	80087c8 <_printf_i+0xa8>
 8008752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008756:	2b15      	cmp	r3, #21
 8008758:	d8f6      	bhi.n	8008748 <_printf_i+0x28>
 800875a:	a001      	add	r0, pc, #4	; (adr r0, 8008760 <_printf_i+0x40>)
 800875c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008760:	080087b9 	.word	0x080087b9
 8008764:	080087cd 	.word	0x080087cd
 8008768:	08008749 	.word	0x08008749
 800876c:	08008749 	.word	0x08008749
 8008770:	08008749 	.word	0x08008749
 8008774:	08008749 	.word	0x08008749
 8008778:	080087cd 	.word	0x080087cd
 800877c:	08008749 	.word	0x08008749
 8008780:	08008749 	.word	0x08008749
 8008784:	08008749 	.word	0x08008749
 8008788:	08008749 	.word	0x08008749
 800878c:	080088d9 	.word	0x080088d9
 8008790:	080087fd 	.word	0x080087fd
 8008794:	080088bb 	.word	0x080088bb
 8008798:	08008749 	.word	0x08008749
 800879c:	08008749 	.word	0x08008749
 80087a0:	080088fb 	.word	0x080088fb
 80087a4:	08008749 	.word	0x08008749
 80087a8:	080087fd 	.word	0x080087fd
 80087ac:	08008749 	.word	0x08008749
 80087b0:	08008749 	.word	0x08008749
 80087b4:	080088c3 	.word	0x080088c3
 80087b8:	680b      	ldr	r3, [r1, #0]
 80087ba:	1d1a      	adds	r2, r3, #4
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	600a      	str	r2, [r1, #0]
 80087c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087c8:	2301      	movs	r3, #1
 80087ca:	e0a3      	b.n	8008914 <_printf_i+0x1f4>
 80087cc:	6825      	ldr	r5, [r4, #0]
 80087ce:	6808      	ldr	r0, [r1, #0]
 80087d0:	062e      	lsls	r6, r5, #24
 80087d2:	f100 0304 	add.w	r3, r0, #4
 80087d6:	d50a      	bpl.n	80087ee <_printf_i+0xce>
 80087d8:	6805      	ldr	r5, [r0, #0]
 80087da:	600b      	str	r3, [r1, #0]
 80087dc:	2d00      	cmp	r5, #0
 80087de:	da03      	bge.n	80087e8 <_printf_i+0xc8>
 80087e0:	232d      	movs	r3, #45	; 0x2d
 80087e2:	426d      	negs	r5, r5
 80087e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087e8:	485e      	ldr	r0, [pc, #376]	; (8008964 <_printf_i+0x244>)
 80087ea:	230a      	movs	r3, #10
 80087ec:	e019      	b.n	8008822 <_printf_i+0x102>
 80087ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80087f2:	6805      	ldr	r5, [r0, #0]
 80087f4:	600b      	str	r3, [r1, #0]
 80087f6:	bf18      	it	ne
 80087f8:	b22d      	sxthne	r5, r5
 80087fa:	e7ef      	b.n	80087dc <_printf_i+0xbc>
 80087fc:	680b      	ldr	r3, [r1, #0]
 80087fe:	6825      	ldr	r5, [r4, #0]
 8008800:	1d18      	adds	r0, r3, #4
 8008802:	6008      	str	r0, [r1, #0]
 8008804:	0628      	lsls	r0, r5, #24
 8008806:	d501      	bpl.n	800880c <_printf_i+0xec>
 8008808:	681d      	ldr	r5, [r3, #0]
 800880a:	e002      	b.n	8008812 <_printf_i+0xf2>
 800880c:	0669      	lsls	r1, r5, #25
 800880e:	d5fb      	bpl.n	8008808 <_printf_i+0xe8>
 8008810:	881d      	ldrh	r5, [r3, #0]
 8008812:	4854      	ldr	r0, [pc, #336]	; (8008964 <_printf_i+0x244>)
 8008814:	2f6f      	cmp	r7, #111	; 0x6f
 8008816:	bf0c      	ite	eq
 8008818:	2308      	moveq	r3, #8
 800881a:	230a      	movne	r3, #10
 800881c:	2100      	movs	r1, #0
 800881e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008822:	6866      	ldr	r6, [r4, #4]
 8008824:	60a6      	str	r6, [r4, #8]
 8008826:	2e00      	cmp	r6, #0
 8008828:	bfa2      	ittt	ge
 800882a:	6821      	ldrge	r1, [r4, #0]
 800882c:	f021 0104 	bicge.w	r1, r1, #4
 8008830:	6021      	strge	r1, [r4, #0]
 8008832:	b90d      	cbnz	r5, 8008838 <_printf_i+0x118>
 8008834:	2e00      	cmp	r6, #0
 8008836:	d04d      	beq.n	80088d4 <_printf_i+0x1b4>
 8008838:	4616      	mov	r6, r2
 800883a:	fbb5 f1f3 	udiv	r1, r5, r3
 800883e:	fb03 5711 	mls	r7, r3, r1, r5
 8008842:	5dc7      	ldrb	r7, [r0, r7]
 8008844:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008848:	462f      	mov	r7, r5
 800884a:	42bb      	cmp	r3, r7
 800884c:	460d      	mov	r5, r1
 800884e:	d9f4      	bls.n	800883a <_printf_i+0x11a>
 8008850:	2b08      	cmp	r3, #8
 8008852:	d10b      	bne.n	800886c <_printf_i+0x14c>
 8008854:	6823      	ldr	r3, [r4, #0]
 8008856:	07df      	lsls	r7, r3, #31
 8008858:	d508      	bpl.n	800886c <_printf_i+0x14c>
 800885a:	6923      	ldr	r3, [r4, #16]
 800885c:	6861      	ldr	r1, [r4, #4]
 800885e:	4299      	cmp	r1, r3
 8008860:	bfde      	ittt	le
 8008862:	2330      	movle	r3, #48	; 0x30
 8008864:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008868:	f106 36ff 	addle.w	r6, r6, #4294967295
 800886c:	1b92      	subs	r2, r2, r6
 800886e:	6122      	str	r2, [r4, #16]
 8008870:	f8cd a000 	str.w	sl, [sp]
 8008874:	464b      	mov	r3, r9
 8008876:	aa03      	add	r2, sp, #12
 8008878:	4621      	mov	r1, r4
 800887a:	4640      	mov	r0, r8
 800887c:	f7ff fee2 	bl	8008644 <_printf_common>
 8008880:	3001      	adds	r0, #1
 8008882:	d14c      	bne.n	800891e <_printf_i+0x1fe>
 8008884:	f04f 30ff 	mov.w	r0, #4294967295
 8008888:	b004      	add	sp, #16
 800888a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800888e:	4835      	ldr	r0, [pc, #212]	; (8008964 <_printf_i+0x244>)
 8008890:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	680e      	ldr	r6, [r1, #0]
 8008898:	061f      	lsls	r7, r3, #24
 800889a:	f856 5b04 	ldr.w	r5, [r6], #4
 800889e:	600e      	str	r6, [r1, #0]
 80088a0:	d514      	bpl.n	80088cc <_printf_i+0x1ac>
 80088a2:	07d9      	lsls	r1, r3, #31
 80088a4:	bf44      	itt	mi
 80088a6:	f043 0320 	orrmi.w	r3, r3, #32
 80088aa:	6023      	strmi	r3, [r4, #0]
 80088ac:	b91d      	cbnz	r5, 80088b6 <_printf_i+0x196>
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	f023 0320 	bic.w	r3, r3, #32
 80088b4:	6023      	str	r3, [r4, #0]
 80088b6:	2310      	movs	r3, #16
 80088b8:	e7b0      	b.n	800881c <_printf_i+0xfc>
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	f043 0320 	orr.w	r3, r3, #32
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	2378      	movs	r3, #120	; 0x78
 80088c4:	4828      	ldr	r0, [pc, #160]	; (8008968 <_printf_i+0x248>)
 80088c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088ca:	e7e3      	b.n	8008894 <_printf_i+0x174>
 80088cc:	065e      	lsls	r6, r3, #25
 80088ce:	bf48      	it	mi
 80088d0:	b2ad      	uxthmi	r5, r5
 80088d2:	e7e6      	b.n	80088a2 <_printf_i+0x182>
 80088d4:	4616      	mov	r6, r2
 80088d6:	e7bb      	b.n	8008850 <_printf_i+0x130>
 80088d8:	680b      	ldr	r3, [r1, #0]
 80088da:	6826      	ldr	r6, [r4, #0]
 80088dc:	6960      	ldr	r0, [r4, #20]
 80088de:	1d1d      	adds	r5, r3, #4
 80088e0:	600d      	str	r5, [r1, #0]
 80088e2:	0635      	lsls	r5, r6, #24
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	d501      	bpl.n	80088ec <_printf_i+0x1cc>
 80088e8:	6018      	str	r0, [r3, #0]
 80088ea:	e002      	b.n	80088f2 <_printf_i+0x1d2>
 80088ec:	0671      	lsls	r1, r6, #25
 80088ee:	d5fb      	bpl.n	80088e8 <_printf_i+0x1c8>
 80088f0:	8018      	strh	r0, [r3, #0]
 80088f2:	2300      	movs	r3, #0
 80088f4:	6123      	str	r3, [r4, #16]
 80088f6:	4616      	mov	r6, r2
 80088f8:	e7ba      	b.n	8008870 <_printf_i+0x150>
 80088fa:	680b      	ldr	r3, [r1, #0]
 80088fc:	1d1a      	adds	r2, r3, #4
 80088fe:	600a      	str	r2, [r1, #0]
 8008900:	681e      	ldr	r6, [r3, #0]
 8008902:	6862      	ldr	r2, [r4, #4]
 8008904:	2100      	movs	r1, #0
 8008906:	4630      	mov	r0, r6
 8008908:	f7f7 fc6a 	bl	80001e0 <memchr>
 800890c:	b108      	cbz	r0, 8008912 <_printf_i+0x1f2>
 800890e:	1b80      	subs	r0, r0, r6
 8008910:	6060      	str	r0, [r4, #4]
 8008912:	6863      	ldr	r3, [r4, #4]
 8008914:	6123      	str	r3, [r4, #16]
 8008916:	2300      	movs	r3, #0
 8008918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800891c:	e7a8      	b.n	8008870 <_printf_i+0x150>
 800891e:	6923      	ldr	r3, [r4, #16]
 8008920:	4632      	mov	r2, r6
 8008922:	4649      	mov	r1, r9
 8008924:	4640      	mov	r0, r8
 8008926:	47d0      	blx	sl
 8008928:	3001      	adds	r0, #1
 800892a:	d0ab      	beq.n	8008884 <_printf_i+0x164>
 800892c:	6823      	ldr	r3, [r4, #0]
 800892e:	079b      	lsls	r3, r3, #30
 8008930:	d413      	bmi.n	800895a <_printf_i+0x23a>
 8008932:	68e0      	ldr	r0, [r4, #12]
 8008934:	9b03      	ldr	r3, [sp, #12]
 8008936:	4298      	cmp	r0, r3
 8008938:	bfb8      	it	lt
 800893a:	4618      	movlt	r0, r3
 800893c:	e7a4      	b.n	8008888 <_printf_i+0x168>
 800893e:	2301      	movs	r3, #1
 8008940:	4632      	mov	r2, r6
 8008942:	4649      	mov	r1, r9
 8008944:	4640      	mov	r0, r8
 8008946:	47d0      	blx	sl
 8008948:	3001      	adds	r0, #1
 800894a:	d09b      	beq.n	8008884 <_printf_i+0x164>
 800894c:	3501      	adds	r5, #1
 800894e:	68e3      	ldr	r3, [r4, #12]
 8008950:	9903      	ldr	r1, [sp, #12]
 8008952:	1a5b      	subs	r3, r3, r1
 8008954:	42ab      	cmp	r3, r5
 8008956:	dcf2      	bgt.n	800893e <_printf_i+0x21e>
 8008958:	e7eb      	b.n	8008932 <_printf_i+0x212>
 800895a:	2500      	movs	r5, #0
 800895c:	f104 0619 	add.w	r6, r4, #25
 8008960:	e7f5      	b.n	800894e <_printf_i+0x22e>
 8008962:	bf00      	nop
 8008964:	0800941d 	.word	0x0800941d
 8008968:	0800942e 	.word	0x0800942e

0800896c <memcpy>:
 800896c:	440a      	add	r2, r1
 800896e:	4291      	cmp	r1, r2
 8008970:	f100 33ff 	add.w	r3, r0, #4294967295
 8008974:	d100      	bne.n	8008978 <memcpy+0xc>
 8008976:	4770      	bx	lr
 8008978:	b510      	push	{r4, lr}
 800897a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800897e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008982:	4291      	cmp	r1, r2
 8008984:	d1f9      	bne.n	800897a <memcpy+0xe>
 8008986:	bd10      	pop	{r4, pc}

08008988 <memmove>:
 8008988:	4288      	cmp	r0, r1
 800898a:	b510      	push	{r4, lr}
 800898c:	eb01 0402 	add.w	r4, r1, r2
 8008990:	d902      	bls.n	8008998 <memmove+0x10>
 8008992:	4284      	cmp	r4, r0
 8008994:	4623      	mov	r3, r4
 8008996:	d807      	bhi.n	80089a8 <memmove+0x20>
 8008998:	1e43      	subs	r3, r0, #1
 800899a:	42a1      	cmp	r1, r4
 800899c:	d008      	beq.n	80089b0 <memmove+0x28>
 800899e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089a6:	e7f8      	b.n	800899a <memmove+0x12>
 80089a8:	4402      	add	r2, r0
 80089aa:	4601      	mov	r1, r0
 80089ac:	428a      	cmp	r2, r1
 80089ae:	d100      	bne.n	80089b2 <memmove+0x2a>
 80089b0:	bd10      	pop	{r4, pc}
 80089b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089ba:	e7f7      	b.n	80089ac <memmove+0x24>

080089bc <_free_r>:
 80089bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089be:	2900      	cmp	r1, #0
 80089c0:	d048      	beq.n	8008a54 <_free_r+0x98>
 80089c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089c6:	9001      	str	r0, [sp, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f1a1 0404 	sub.w	r4, r1, #4
 80089ce:	bfb8      	it	lt
 80089d0:	18e4      	addlt	r4, r4, r3
 80089d2:	f000 f8d3 	bl	8008b7c <__malloc_lock>
 80089d6:	4a20      	ldr	r2, [pc, #128]	; (8008a58 <_free_r+0x9c>)
 80089d8:	9801      	ldr	r0, [sp, #4]
 80089da:	6813      	ldr	r3, [r2, #0]
 80089dc:	4615      	mov	r5, r2
 80089de:	b933      	cbnz	r3, 80089ee <_free_r+0x32>
 80089e0:	6063      	str	r3, [r4, #4]
 80089e2:	6014      	str	r4, [r2, #0]
 80089e4:	b003      	add	sp, #12
 80089e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089ea:	f000 b8cd 	b.w	8008b88 <__malloc_unlock>
 80089ee:	42a3      	cmp	r3, r4
 80089f0:	d90b      	bls.n	8008a0a <_free_r+0x4e>
 80089f2:	6821      	ldr	r1, [r4, #0]
 80089f4:	1862      	adds	r2, r4, r1
 80089f6:	4293      	cmp	r3, r2
 80089f8:	bf04      	itt	eq
 80089fa:	681a      	ldreq	r2, [r3, #0]
 80089fc:	685b      	ldreq	r3, [r3, #4]
 80089fe:	6063      	str	r3, [r4, #4]
 8008a00:	bf04      	itt	eq
 8008a02:	1852      	addeq	r2, r2, r1
 8008a04:	6022      	streq	r2, [r4, #0]
 8008a06:	602c      	str	r4, [r5, #0]
 8008a08:	e7ec      	b.n	80089e4 <_free_r+0x28>
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	b10b      	cbz	r3, 8008a14 <_free_r+0x58>
 8008a10:	42a3      	cmp	r3, r4
 8008a12:	d9fa      	bls.n	8008a0a <_free_r+0x4e>
 8008a14:	6811      	ldr	r1, [r2, #0]
 8008a16:	1855      	adds	r5, r2, r1
 8008a18:	42a5      	cmp	r5, r4
 8008a1a:	d10b      	bne.n	8008a34 <_free_r+0x78>
 8008a1c:	6824      	ldr	r4, [r4, #0]
 8008a1e:	4421      	add	r1, r4
 8008a20:	1854      	adds	r4, r2, r1
 8008a22:	42a3      	cmp	r3, r4
 8008a24:	6011      	str	r1, [r2, #0]
 8008a26:	d1dd      	bne.n	80089e4 <_free_r+0x28>
 8008a28:	681c      	ldr	r4, [r3, #0]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	6053      	str	r3, [r2, #4]
 8008a2e:	4421      	add	r1, r4
 8008a30:	6011      	str	r1, [r2, #0]
 8008a32:	e7d7      	b.n	80089e4 <_free_r+0x28>
 8008a34:	d902      	bls.n	8008a3c <_free_r+0x80>
 8008a36:	230c      	movs	r3, #12
 8008a38:	6003      	str	r3, [r0, #0]
 8008a3a:	e7d3      	b.n	80089e4 <_free_r+0x28>
 8008a3c:	6825      	ldr	r5, [r4, #0]
 8008a3e:	1961      	adds	r1, r4, r5
 8008a40:	428b      	cmp	r3, r1
 8008a42:	bf04      	itt	eq
 8008a44:	6819      	ldreq	r1, [r3, #0]
 8008a46:	685b      	ldreq	r3, [r3, #4]
 8008a48:	6063      	str	r3, [r4, #4]
 8008a4a:	bf04      	itt	eq
 8008a4c:	1949      	addeq	r1, r1, r5
 8008a4e:	6021      	streq	r1, [r4, #0]
 8008a50:	6054      	str	r4, [r2, #4]
 8008a52:	e7c7      	b.n	80089e4 <_free_r+0x28>
 8008a54:	b003      	add	sp, #12
 8008a56:	bd30      	pop	{r4, r5, pc}
 8008a58:	200008f8 	.word	0x200008f8

08008a5c <_malloc_r>:
 8008a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5e:	1ccd      	adds	r5, r1, #3
 8008a60:	f025 0503 	bic.w	r5, r5, #3
 8008a64:	3508      	adds	r5, #8
 8008a66:	2d0c      	cmp	r5, #12
 8008a68:	bf38      	it	cc
 8008a6a:	250c      	movcc	r5, #12
 8008a6c:	2d00      	cmp	r5, #0
 8008a6e:	4606      	mov	r6, r0
 8008a70:	db01      	blt.n	8008a76 <_malloc_r+0x1a>
 8008a72:	42a9      	cmp	r1, r5
 8008a74:	d903      	bls.n	8008a7e <_malloc_r+0x22>
 8008a76:	230c      	movs	r3, #12
 8008a78:	6033      	str	r3, [r6, #0]
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a7e:	f000 f87d 	bl	8008b7c <__malloc_lock>
 8008a82:	4921      	ldr	r1, [pc, #132]	; (8008b08 <_malloc_r+0xac>)
 8008a84:	680a      	ldr	r2, [r1, #0]
 8008a86:	4614      	mov	r4, r2
 8008a88:	b99c      	cbnz	r4, 8008ab2 <_malloc_r+0x56>
 8008a8a:	4f20      	ldr	r7, [pc, #128]	; (8008b0c <_malloc_r+0xb0>)
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	b923      	cbnz	r3, 8008a9a <_malloc_r+0x3e>
 8008a90:	4621      	mov	r1, r4
 8008a92:	4630      	mov	r0, r6
 8008a94:	f000 f862 	bl	8008b5c <_sbrk_r>
 8008a98:	6038      	str	r0, [r7, #0]
 8008a9a:	4629      	mov	r1, r5
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	f000 f85d 	bl	8008b5c <_sbrk_r>
 8008aa2:	1c43      	adds	r3, r0, #1
 8008aa4:	d123      	bne.n	8008aee <_malloc_r+0x92>
 8008aa6:	230c      	movs	r3, #12
 8008aa8:	6033      	str	r3, [r6, #0]
 8008aaa:	4630      	mov	r0, r6
 8008aac:	f000 f86c 	bl	8008b88 <__malloc_unlock>
 8008ab0:	e7e3      	b.n	8008a7a <_malloc_r+0x1e>
 8008ab2:	6823      	ldr	r3, [r4, #0]
 8008ab4:	1b5b      	subs	r3, r3, r5
 8008ab6:	d417      	bmi.n	8008ae8 <_malloc_r+0x8c>
 8008ab8:	2b0b      	cmp	r3, #11
 8008aba:	d903      	bls.n	8008ac4 <_malloc_r+0x68>
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	441c      	add	r4, r3
 8008ac0:	6025      	str	r5, [r4, #0]
 8008ac2:	e004      	b.n	8008ace <_malloc_r+0x72>
 8008ac4:	6863      	ldr	r3, [r4, #4]
 8008ac6:	42a2      	cmp	r2, r4
 8008ac8:	bf0c      	ite	eq
 8008aca:	600b      	streq	r3, [r1, #0]
 8008acc:	6053      	strne	r3, [r2, #4]
 8008ace:	4630      	mov	r0, r6
 8008ad0:	f000 f85a 	bl	8008b88 <__malloc_unlock>
 8008ad4:	f104 000b 	add.w	r0, r4, #11
 8008ad8:	1d23      	adds	r3, r4, #4
 8008ada:	f020 0007 	bic.w	r0, r0, #7
 8008ade:	1ac2      	subs	r2, r0, r3
 8008ae0:	d0cc      	beq.n	8008a7c <_malloc_r+0x20>
 8008ae2:	1a1b      	subs	r3, r3, r0
 8008ae4:	50a3      	str	r3, [r4, r2]
 8008ae6:	e7c9      	b.n	8008a7c <_malloc_r+0x20>
 8008ae8:	4622      	mov	r2, r4
 8008aea:	6864      	ldr	r4, [r4, #4]
 8008aec:	e7cc      	b.n	8008a88 <_malloc_r+0x2c>
 8008aee:	1cc4      	adds	r4, r0, #3
 8008af0:	f024 0403 	bic.w	r4, r4, #3
 8008af4:	42a0      	cmp	r0, r4
 8008af6:	d0e3      	beq.n	8008ac0 <_malloc_r+0x64>
 8008af8:	1a21      	subs	r1, r4, r0
 8008afa:	4630      	mov	r0, r6
 8008afc:	f000 f82e 	bl	8008b5c <_sbrk_r>
 8008b00:	3001      	adds	r0, #1
 8008b02:	d1dd      	bne.n	8008ac0 <_malloc_r+0x64>
 8008b04:	e7cf      	b.n	8008aa6 <_malloc_r+0x4a>
 8008b06:	bf00      	nop
 8008b08:	200008f8 	.word	0x200008f8
 8008b0c:	200008fc 	.word	0x200008fc

08008b10 <_realloc_r>:
 8008b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b12:	4607      	mov	r7, r0
 8008b14:	4614      	mov	r4, r2
 8008b16:	460e      	mov	r6, r1
 8008b18:	b921      	cbnz	r1, 8008b24 <_realloc_r+0x14>
 8008b1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b1e:	4611      	mov	r1, r2
 8008b20:	f7ff bf9c 	b.w	8008a5c <_malloc_r>
 8008b24:	b922      	cbnz	r2, 8008b30 <_realloc_r+0x20>
 8008b26:	f7ff ff49 	bl	80089bc <_free_r>
 8008b2a:	4625      	mov	r5, r4
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b30:	f000 f830 	bl	8008b94 <_malloc_usable_size_r>
 8008b34:	42a0      	cmp	r0, r4
 8008b36:	d20f      	bcs.n	8008b58 <_realloc_r+0x48>
 8008b38:	4621      	mov	r1, r4
 8008b3a:	4638      	mov	r0, r7
 8008b3c:	f7ff ff8e 	bl	8008a5c <_malloc_r>
 8008b40:	4605      	mov	r5, r0
 8008b42:	2800      	cmp	r0, #0
 8008b44:	d0f2      	beq.n	8008b2c <_realloc_r+0x1c>
 8008b46:	4631      	mov	r1, r6
 8008b48:	4622      	mov	r2, r4
 8008b4a:	f7ff ff0f 	bl	800896c <memcpy>
 8008b4e:	4631      	mov	r1, r6
 8008b50:	4638      	mov	r0, r7
 8008b52:	f7ff ff33 	bl	80089bc <_free_r>
 8008b56:	e7e9      	b.n	8008b2c <_realloc_r+0x1c>
 8008b58:	4635      	mov	r5, r6
 8008b5a:	e7e7      	b.n	8008b2c <_realloc_r+0x1c>

08008b5c <_sbrk_r>:
 8008b5c:	b538      	push	{r3, r4, r5, lr}
 8008b5e:	4d06      	ldr	r5, [pc, #24]	; (8008b78 <_sbrk_r+0x1c>)
 8008b60:	2300      	movs	r3, #0
 8008b62:	4604      	mov	r4, r0
 8008b64:	4608      	mov	r0, r1
 8008b66:	602b      	str	r3, [r5, #0]
 8008b68:	f7fb ffa0 	bl	8004aac <_sbrk>
 8008b6c:	1c43      	adds	r3, r0, #1
 8008b6e:	d102      	bne.n	8008b76 <_sbrk_r+0x1a>
 8008b70:	682b      	ldr	r3, [r5, #0]
 8008b72:	b103      	cbz	r3, 8008b76 <_sbrk_r+0x1a>
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	bd38      	pop	{r3, r4, r5, pc}
 8008b78:	20000e58 	.word	0x20000e58

08008b7c <__malloc_lock>:
 8008b7c:	4801      	ldr	r0, [pc, #4]	; (8008b84 <__malloc_lock+0x8>)
 8008b7e:	f000 b811 	b.w	8008ba4 <__retarget_lock_acquire_recursive>
 8008b82:	bf00      	nop
 8008b84:	20000e60 	.word	0x20000e60

08008b88 <__malloc_unlock>:
 8008b88:	4801      	ldr	r0, [pc, #4]	; (8008b90 <__malloc_unlock+0x8>)
 8008b8a:	f000 b80c 	b.w	8008ba6 <__retarget_lock_release_recursive>
 8008b8e:	bf00      	nop
 8008b90:	20000e60 	.word	0x20000e60

08008b94 <_malloc_usable_size_r>:
 8008b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b98:	1f18      	subs	r0, r3, #4
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	bfbc      	itt	lt
 8008b9e:	580b      	ldrlt	r3, [r1, r0]
 8008ba0:	18c0      	addlt	r0, r0, r3
 8008ba2:	4770      	bx	lr

08008ba4 <__retarget_lock_acquire_recursive>:
 8008ba4:	4770      	bx	lr

08008ba6 <__retarget_lock_release_recursive>:
 8008ba6:	4770      	bx	lr

08008ba8 <_init>:
 8008ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008baa:	bf00      	nop
 8008bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bae:	bc08      	pop	{r3}
 8008bb0:	469e      	mov	lr, r3
 8008bb2:	4770      	bx	lr

08008bb4 <_fini>:
 8008bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb6:	bf00      	nop
 8008bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bba:	bc08      	pop	{r3}
 8008bbc:	469e      	mov	lr, r3
 8008bbe:	4770      	bx	lr
