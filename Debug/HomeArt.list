
HomeArt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d60  0800a534  0800a534  0001a534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d294  0800d294  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800d294  0800d294  0001d294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d29c  0800d29c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d29c  0800d29c  0001d29c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2a0  0800d2a0  0001d2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800d2a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00001058  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200010c8  200010c8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ee95  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e0e  00000000  00000000  0003ef35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001398  00000000  00000000  00042d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001268  00000000  00000000  000440e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025bf2  00000000  00000000  00045348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c844  00000000  00000000  0006af3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbd6f  00000000  00000000  0008777e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001634ed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055d8  00000000  00000000  00163540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a51c 	.word	0x0800a51c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800a51c 	.word	0x0800a51c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468c      	mov	ip, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8083 	bne.w	8000c02 <__udivmoddi4+0x116>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d947      	bls.n	8000b92 <__udivmoddi4+0xa6>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b142      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	f1c2 0020 	rsb	r0, r2, #32
 8000b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b10:	4091      	lsls	r1, r2
 8000b12:	4097      	lsls	r7, r2
 8000b14:	ea40 0c01 	orr.w	ip, r0, r1
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbbc f6f8 	udiv	r6, ip, r8
 8000b24:	fa1f fe87 	uxth.w	lr, r7
 8000b28:	fb08 c116 	mls	r1, r8, r6, ip
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb06 f10e 	mul.w	r1, r6, lr
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b3e:	f080 8119 	bcs.w	8000d74 <__udivmoddi4+0x288>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8116 	bls.w	8000d74 <__udivmoddi4+0x288>
 8000b48:	3e02      	subs	r6, #2
 8000b4a:	443b      	add	r3, r7
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3310 	mls	r3, r8, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8105 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f240 8102 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b74:	3802      	subs	r0, #2
 8000b76:	443c      	add	r4, r7
 8000b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	2600      	movs	r6, #0
 8000b82:	b11d      	cbz	r5, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	b902      	cbnz	r2, 8000b96 <__udivmoddi4+0xaa>
 8000b94:	deff      	udf	#255	; 0xff
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d150      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000b9e:	1bcb      	subs	r3, r1, r7
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	2601      	movs	r6, #1
 8000baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0xe2>
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	f200 80e9 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1ac9      	subs	r1, r1, r3
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x10c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x10a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80d9 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e7bf      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <__udivmoddi4+0x282>
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c12:	4630      	mov	r0, r6
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f683 	clz	r6, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x1cc>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b8 	bhi.w	8000d9c <__udivmoddi4+0x2b0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0a8      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f603 	lsr.w	r6, r0, r3
 8000c48:	4097      	lsls	r7, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c52:	40d9      	lsrs	r1, r3
 8000c54:	4330      	orrs	r0, r6
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb06 f108 	mul.w	r1, r6, r8
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x19c>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c7a:	f080 808d 	bcs.w	8000d98 <__udivmoddi4+0x2ac>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 808a 	bls.w	8000d98 <__udivmoddi4+0x2ac>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b281      	uxth	r1, r0
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb00 f308 	mul.w	r3, r0, r8
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca6:	d273      	bcs.n	8000d90 <__udivmoddi4+0x2a4>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d971      	bls.n	8000d90 <__udivmoddi4+0x2a4>
 8000cac:	3802      	subs	r0, #2
 8000cae:	4439      	add	r1, r7
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cb6:	e778      	b.n	8000baa <__udivmoddi4+0xbe>
 8000cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cca:	fa01 f306 	lsl.w	r3, r1, r6
 8000cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fa1f f884 	uxth.w	r8, r4
 8000ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cea:	fb09 fa08 	mul.w	sl, r9, r8
 8000cee:	458a      	cmp	sl, r1
 8000cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x220>
 8000cfa:	1861      	adds	r1, r4, r1
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d00:	d248      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d02:	458a      	cmp	sl, r1
 8000d04:	d946      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4421      	add	r1, r4
 8000d0c:	eba1 010a 	sub.w	r1, r1, sl
 8000d10:	b2bf      	uxth	r7, r7
 8000d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45b8      	cmp	r8, r7
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x24a>
 8000d26:	19e7      	adds	r7, r4, r7
 8000d28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2c:	d22e      	bcs.n	8000d8c <__udivmoddi4+0x2a0>
 8000d2e:	45b8      	cmp	r8, r7
 8000d30:	d92c      	bls.n	8000d8c <__udivmoddi4+0x2a0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4427      	add	r7, r4
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba7 0708 	sub.w	r7, r7, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454f      	cmp	r7, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	4649      	mov	r1, r9
 8000d48:	d31a      	bcc.n	8000d80 <__udivmoddi4+0x294>
 8000d4a:	d017      	beq.n	8000d7c <__udivmoddi4+0x290>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x27a>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb67 0701 	sbc.w	r7, r7, r1
 8000d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d5a:	40f2      	lsrs	r2, r6
 8000d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d60:	40f7      	lsrs	r7, r6
 8000d62:	e9c5 2700 	strd	r2, r7, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e70b      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fd      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d7c:	4543      	cmp	r3, r8
 8000d7e:	d2e5      	bcs.n	8000d4c <__udivmoddi4+0x260>
 8000d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d84:	eb69 0104 	sbc.w	r1, r9, r4
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7df      	b.n	8000d4c <__udivmoddi4+0x260>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e7d2      	b.n	8000d36 <__udivmoddi4+0x24a>
 8000d90:	4660      	mov	r0, ip
 8000d92:	e78d      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d94:	4681      	mov	r9, r0
 8000d96:	e7b9      	b.n	8000d0c <__udivmoddi4+0x220>
 8000d98:	4666      	mov	r6, ip
 8000d9a:	e775      	b.n	8000c88 <__udivmoddi4+0x19c>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	e74a      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	4439      	add	r1, r7
 8000da6:	e713      	b.n	8000bd0 <__udivmoddi4+0xe4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	e724      	b.n	8000bf8 <__udivmoddi4+0x10c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <playBell>:
#include "ESP8266_HAL.h"

extern TIM_HandleTypeDef htim4;


void playBell(){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0

	uint8_t tone;

	tone = 25;
 8000dba:	2319      	movs	r3, #25
 8000dbc:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	005a      	lsls	r2, r3, #1
 8000dc2:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <playBell+0x68>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <playBell+0x68>)
 8000dd0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <playBell+0x68>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	79fa      	ldrb	r2, [r7, #7]
 8000dd8:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(300);
 8000dda:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000dde:	f004 ff5b 	bl	8005c98 <HAL_Delay>

	tone = 40;
 8000de2:	2328      	movs	r3, #40	; 0x28
 8000de4:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	005a      	lsls	r2, r3, #1
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <playBell+0x68>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	62da      	str	r2, [r3, #44]	; 0x2c
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <playBell+0x68>)
 8000df8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <playBell+0x68>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	79fa      	ldrb	r2, [r7, #7]
 8000e00:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 8000e02:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000e06:	f004 ff47 	bl	8005c98 <HAL_Delay>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <playBell+0x68>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000cb4 	.word	0x20000cb4

08000e20 <playAlarm>:


void playAlarm(){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0

	uint8_t tone;

	for(tone = 40; tone >= 10; tone = tone-10){
 8000e26:	2328      	movs	r3, #40	; 0x28
 8000e28:	71fb      	strb	r3, [r7, #7]
 8000e2a:	e014      	b.n	8000e56 <playAlarm+0x36>
		__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	005a      	lsls	r2, r3, #1
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <playAlarm+0x5c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <playAlarm+0x5c>)
 8000e3e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <playAlarm+0x5c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	79fa      	ldrb	r2, [r7, #7]
 8000e46:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(300);
 8000e48:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e4c:	f004 ff24 	bl	8005c98 <HAL_Delay>
	for(tone = 40; tone >= 10; tone = tone-10){
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	3b0a      	subs	r3, #10
 8000e54:	71fb      	strb	r3, [r7, #7]
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	2b09      	cmp	r3, #9
 8000e5a:	d8e7      	bhi.n	8000e2c <playAlarm+0xc>
	}

	__HAL_TIM_SET_AUTORELOAD(&htim4, 80);
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <playAlarm+0x5c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2250      	movs	r2, #80	; 0x50
 8000e62:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <playAlarm+0x5c>)
 8000e66:	2250      	movs	r2, #80	; 0x50
 8000e68:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 40);
 8000e6a:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <playAlarm+0x5c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2228      	movs	r2, #40	; 0x28
 8000e70:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000cb4 	.word	0x20000cb4

08000e80 <DHT22_Set_Pin_Output>:
uint8_t RH_byte1, RH_byte2, Temp_byte1, Temp_byte2;
uint16_t SUM, RH, TEMP;
uint16_t DHT22_presence = 0;


void DHT22_Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	807b      	strh	r3, [r7, #2]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000e9c:	887b      	ldrh	r3, [r7, #2]
 8000e9e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	4619      	mov	r1, r3
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f005 fc86 	bl	80067c0 <HAL_GPIO_Init>
}
 8000eb4:	bf00      	nop
 8000eb6:	3720      	adds	r7, #32
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <DHT22_Set_Pin_Input>:

void DHT22_Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	807b      	strh	r3, [r7, #2]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000ed8:	887b      	ldrh	r3, [r7, #2]
 8000eda:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000edc:	2300      	movs	r3, #0
 8000ede:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP; // change to PULLUP if it does not work
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	4619      	mov	r1, r3
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f005 fc68 	bl	80067c0 <HAL_GPIO_Init>
}
 8000ef0:	bf00      	nop
 8000ef2:	3720      	adds	r7, #32
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <DHT22_Start>:

void DHT22_Start(void){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0

	DHT22_Set_Pin_Output(DHT22_PORT, DHT22_PIN); // set the pin as output
 8000efc:	2180      	movs	r1, #128	; 0x80
 8000efe:	4811      	ldr	r0, [pc, #68]	; (8000f44 <DHT22_Start+0x4c>)
 8000f00:	f7ff ffbe 	bl	8000e80 <DHT22_Set_Pin_Output>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin low
 8000f04:	2201      	movs	r2, #1
 8000f06:	2180      	movs	r1, #128	; 0x80
 8000f08:	480e      	ldr	r0, [pc, #56]	; (8000f44 <DHT22_Start+0x4c>)
 8000f0a:	f005 fe0d 	bl	8006b28 <HAL_GPIO_WritePin>
	HAL_Delay(1200);   // wait for > 1ms
 8000f0e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000f12:	f004 fec1 	bl	8005c98 <HAL_Delay>
	HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2180      	movs	r1, #128	; 0x80
 8000f1a:	480a      	ldr	r0, [pc, #40]	; (8000f44 <DHT22_Start+0x4c>)
 8000f1c:	f005 fe04 	bl	8006b28 <HAL_GPIO_WritePin>
	delay(18000);
 8000f20:	f244 6050 	movw	r0, #18000	; 0x4650
 8000f24:	f002 fcc0 	bl	80038a8 <delay>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2180      	movs	r1, #128	; 0x80
 8000f2c:	4805      	ldr	r0, [pc, #20]	; (8000f44 <DHT22_Start+0x4c>)
 8000f2e:	f005 fdfb 	bl	8006b28 <HAL_GPIO_WritePin>
	delay (30);   // wait for 30us
 8000f32:	201e      	movs	r0, #30
 8000f34:	f002 fcb8 	bl	80038a8 <delay>

	DHT22_Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8000f38:	2180      	movs	r1, #128	; 0x80
 8000f3a:	4802      	ldr	r0, [pc, #8]	; (8000f44 <DHT22_Start+0x4c>)
 8000f3c:	f7ff ffbe 	bl	8000ebc <DHT22_Set_Pin_Input>
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40021000 	.word	0x40021000

08000f48 <DHT22_Check_Response>:

uint8_t DHT22_Check_Response(void){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0

	DHT22_Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8000f4e:	2180      	movs	r1, #128	; 0x80
 8000f50:	4815      	ldr	r0, [pc, #84]	; (8000fa8 <DHT22_Check_Response+0x60>)
 8000f52:	f7ff ffb3 	bl	8000ebc <DHT22_Set_Pin_Input>
	uint8_t Response = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	71fb      	strb	r3, [r7, #7]
	delay (40);  // wait for 40us
 8000f5a:	2028      	movs	r0, #40	; 0x28
 8000f5c:	f002 fca4 	bl	80038a8 <delay>
	if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) // if the pin is low
 8000f60:	2180      	movs	r1, #128	; 0x80
 8000f62:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <DHT22_Check_Response+0x60>)
 8000f64:	f005 fdc8 	bl	8006af8 <HAL_GPIO_ReadPin>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10e      	bne.n	8000f8c <DHT22_Check_Response+0x44>
	{
		delay (80);   // wait for 80us
 8000f6e:	2050      	movs	r0, #80	; 0x50
 8000f70:	f002 fc9a 	bl	80038a8 <delay>

		if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;  // if the pin is high, response is ok
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <DHT22_Check_Response+0x60>)
 8000f78:	f005 fdbe 	bl	8006af8 <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <DHT22_Check_Response+0x40>
 8000f82:	2301      	movs	r3, #1
 8000f84:	71fb      	strb	r3, [r7, #7]
 8000f86:	e001      	b.n	8000f8c <DHT22_Check_Response+0x44>
		else Response = -1;
 8000f88:	23ff      	movs	r3, #255	; 0xff
 8000f8a:	71fb      	strb	r3, [r7, #7]
	}

	while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go low
 8000f8c:	bf00      	nop
 8000f8e:	2180      	movs	r1, #128	; 0x80
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <DHT22_Check_Response+0x60>)
 8000f92:	f005 fdb1 	bl	8006af8 <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1f8      	bne.n	8000f8e <DHT22_Check_Response+0x46>
	return Response;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40021000 	.word	0x40021000

08000fac <DHT22_Read>:

uint8_t DHT22_Read(void){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0

	uint8_t i,j;
	for (j=0;j<8;j++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	71bb      	strb	r3, [r7, #6]
 8000fb6:	e037      	b.n	8001028 <DHT22_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go high
 8000fb8:	bf00      	nop
 8000fba:	2180      	movs	r1, #128	; 0x80
 8000fbc:	481e      	ldr	r0, [pc, #120]	; (8001038 <DHT22_Read+0x8c>)
 8000fbe:	f005 fd9b 	bl	8006af8 <HAL_GPIO_ReadPin>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0f8      	beq.n	8000fba <DHT22_Read+0xe>
		delay (40);   // wait for 40 us
 8000fc8:	2028      	movs	r0, #40	; 0x28
 8000fca:	f002 fc6d 	bl	80038a8 <delay>

		if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8000fce:	2180      	movs	r1, #128	; 0x80
 8000fd0:	4819      	ldr	r0, [pc, #100]	; (8001038 <DHT22_Read+0x8c>)
 8000fd2:	f005 fd91 	bl	8006af8 <HAL_GPIO_ReadPin>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d10e      	bne.n	8000ffa <DHT22_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000fdc:	79bb      	ldrb	r3, [r7, #6]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	b25a      	sxtb	r2, r3
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	71fb      	strb	r3, [r7, #7]
 8000ff8:	e00b      	b.n	8001012 <DHT22_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	f1c3 0307 	rsb	r3, r3, #7
 8001000:	2201      	movs	r2, #1
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	b25a      	sxtb	r2, r3
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	4313      	orrs	r3, r2
 800100e:	b25b      	sxtb	r3, r3
 8001010:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));  // wait for the pin to go low
 8001012:	bf00      	nop
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	4808      	ldr	r0, [pc, #32]	; (8001038 <DHT22_Read+0x8c>)
 8001018:	f005 fd6e 	bl	8006af8 <HAL_GPIO_ReadPin>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f8      	bne.n	8001014 <DHT22_Read+0x68>
	for (j=0;j<8;j++)
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	3301      	adds	r3, #1
 8001026:	71bb      	strb	r3, [r7, #6]
 8001028:	79bb      	ldrb	r3, [r7, #6]
 800102a:	2b07      	cmp	r3, #7
 800102c:	d9c4      	bls.n	8000fb8 <DHT22_Read+0xc>
	}

	return i;
 800102e:	79fb      	ldrb	r3, [r7, #7]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000

0800103c <DHT22_getData>:

void DHT22_getData(DHT22_DataTypedef *DHT_Data){
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

	  DHT22_Start();
 8001044:	f7ff ff58 	bl	8000ef8 <DHT22_Start>
	  DHT22_presence = DHT22_Check_Response();
 8001048:	f7ff ff7e 	bl	8000f48 <DHT22_Check_Response>
 800104c:	4603      	mov	r3, r0
 800104e:	b29a      	uxth	r2, r3
 8001050:	4b30      	ldr	r3, [pc, #192]	; (8001114 <DHT22_getData+0xd8>)
 8001052:	801a      	strh	r2, [r3, #0]

	  RH_byte1 = DHT22_Read();
 8001054:	f7ff ffaa 	bl	8000fac <DHT22_Read>
 8001058:	4603      	mov	r3, r0
 800105a:	461a      	mov	r2, r3
 800105c:	4b2e      	ldr	r3, [pc, #184]	; (8001118 <DHT22_getData+0xdc>)
 800105e:	701a      	strb	r2, [r3, #0]
	  RH_byte2 = DHT22_Read();
 8001060:	f7ff ffa4 	bl	8000fac <DHT22_Read>
 8001064:	4603      	mov	r3, r0
 8001066:	461a      	mov	r2, r3
 8001068:	4b2c      	ldr	r3, [pc, #176]	; (800111c <DHT22_getData+0xe0>)
 800106a:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT22_Read();
 800106c:	f7ff ff9e 	bl	8000fac <DHT22_Read>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	4b2a      	ldr	r3, [pc, #168]	; (8001120 <DHT22_getData+0xe4>)
 8001076:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT22_Read();
 8001078:	f7ff ff98 	bl	8000fac <DHT22_Read>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	4b28      	ldr	r3, [pc, #160]	; (8001124 <DHT22_getData+0xe8>)
 8001082:	701a      	strb	r2, [r3, #0]

	  SUM = DHT22_Read();
 8001084:	f7ff ff92 	bl	8000fac <DHT22_Read>
 8001088:	4603      	mov	r3, r0
 800108a:	b29a      	uxth	r2, r3
 800108c:	4b26      	ldr	r3, [pc, #152]	; (8001128 <DHT22_getData+0xec>)
 800108e:	801a      	strh	r2, [r3, #0]

	  RH = ((RH_byte1<<8)|RH_byte2);
 8001090:	4b21      	ldr	r3, [pc, #132]	; (8001118 <DHT22_getData+0xdc>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	b21a      	sxth	r2, r3
 8001098:	4b20      	ldr	r3, [pc, #128]	; (800111c <DHT22_getData+0xe0>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	4b21      	ldr	r3, [pc, #132]	; (800112c <DHT22_getData+0xf0>)
 80010a6:	801a      	strh	r2, [r3, #0]
	  TEMP = ((Temp_byte1<<8)|Temp_byte2);
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <DHT22_getData+0xe4>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <DHT22_getData+0xe8>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <DHT22_getData+0xf4>)
 80010be:	801a      	strh	r2, [r3, #0]

	  DHT_Data->Temperature = (float) (TEMP/10.0);
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <DHT22_getData+0xf4>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fa2d 	bl	8000524 <__aeabi_i2d>
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	4b19      	ldr	r3, [pc, #100]	; (8001134 <DHT22_getData+0xf8>)
 80010d0:	f7ff fbbc 	bl	800084c <__aeabi_ddiv>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f7ff fc9e 	bl	8000a1c <__aeabi_d2f>
 80010e0:	4602      	mov	r2, r0
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	601a      	str	r2, [r3, #0]
	  DHT_Data->Humidity = (float) (RH/10.0);
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <DHT22_getData+0xf0>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fa1a 	bl	8000524 <__aeabi_i2d>
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <DHT22_getData+0xf8>)
 80010f6:	f7ff fba9 	bl	800084c <__aeabi_ddiv>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	f7ff fc8b 	bl	8000a1c <__aeabi_d2f>
 8001106:	4602      	mov	r2, r0
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	605a      	str	r2, [r3, #4]
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000008c 	.word	0x2000008c
 8001118:	2000097d 	.word	0x2000097d
 800111c:	20000981 	.word	0x20000981
 8001120:	2000097c 	.word	0x2000097c
 8001124:	20000980 	.word	0x20000980
 8001128:	2000097e 	.word	0x2000097e
 800112c:	20000978 	.word	0x20000978
 8001130:	2000097a 	.word	0x2000097a
 8001134:	40240000 	.word	0x40240000

08001138 <ESP_clearBuffer>:
char *Terminate = "</body></html>";


/*****************************************************************************************************************************************/

void ESP_clearBuffer(void){
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0

	memset(buffer_app, 0, 60);
 800113c:	223c      	movs	r2, #60	; 0x3c
 800113e:	2100      	movs	r1, #0
 8001140:	4803      	ldr	r0, [pc, #12]	; (8001150 <ESP_clearBuffer+0x18>)
 8001142:	f008 fd73 	bl	8009c2c <memset>
	buffer_index = 0;
 8001146:	4b03      	ldr	r3, [pc, #12]	; (8001154 <ESP_clearBuffer+0x1c>)
 8001148:	2200      	movs	r2, #0
 800114a:	801a      	strh	r2, [r3, #0]
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000994 	.word	0x20000994
 8001154:	20000a5a 	.word	0x20000a5a

08001158 <ESP_Init>:


void ESP_Init(char *SSID, char *PASSWD){
 8001158:	b580      	push	{r7, lr}
 800115a:	b09a      	sub	sp, #104	; 0x68
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]

	ESP_clearBuffer();
 8001162:	f7ff ffe9 	bl	8001138 <ESP_clearBuffer>
	char data[80];

	ringInit();
 8001166:	f001 fc05 	bl	8002974 <ringInit>

	HAL_Delay(1000);
 800116a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800116e:	f004 fd93 	bl	8005c98 <HAL_Delay>

	/********** AT **********/

	UART_send("AT\r\n", WiFi_UART);
 8001172:	4974      	ldr	r1, [pc, #464]	; (8001344 <ESP_Init+0x1ec>)
 8001174:	4874      	ldr	r0, [pc, #464]	; (8001348 <ESP_Init+0x1f0>)
 8001176:	f001 fdbb 	bl	8002cf0 <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 800117a:	bf00      	nop
 800117c:	4971      	ldr	r1, [pc, #452]	; (8001344 <ESP_Init+0x1ec>)
 800117e:	4873      	ldr	r0, [pc, #460]	; (800134c <ESP_Init+0x1f4>)
 8001180:	f001 fe4c 	bl	8002e1c <UART_waitFor>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f8      	beq.n	800117c <ESP_Init+0x24>
	UART_send("\nAT  ---->  OK\n", PC_UART);
 800118a:	4971      	ldr	r1, [pc, #452]	; (8001350 <ESP_Init+0x1f8>)
 800118c:	4871      	ldr	r0, [pc, #452]	; (8001354 <ESP_Init+0x1fc>)
 800118e:	f001 fdaf 	bl	8002cf0 <UART_send>


	HAL_Delay(2000);
 8001192:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001196:	f004 fd7f 	bl	8005c98 <HAL_Delay>


	/********** AT+RST **********/
	UART_send("AT+RST\r\n", WiFi_UART);
 800119a:	496a      	ldr	r1, [pc, #424]	; (8001344 <ESP_Init+0x1ec>)
 800119c:	486e      	ldr	r0, [pc, #440]	; (8001358 <ESP_Init+0x200>)
 800119e:	f001 fda7 	bl	8002cf0 <UART_send>
	UART_send("\nResetting ", PC_UART);
 80011a2:	496b      	ldr	r1, [pc, #428]	; (8001350 <ESP_Init+0x1f8>)
 80011a4:	486d      	ldr	r0, [pc, #436]	; (800135c <ESP_Init+0x204>)
 80011a6:	f001 fda3 	bl	8002cf0 <UART_send>

	for (int i=0; i<3; i++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	667b      	str	r3, [r7, #100]	; 0x64
 80011ae:	e00a      	b.n	80011c6 <ESP_Init+0x6e>
	{
		UART_send(" . ", PC_UART);
 80011b0:	4967      	ldr	r1, [pc, #412]	; (8001350 <ESP_Init+0x1f8>)
 80011b2:	486b      	ldr	r0, [pc, #428]	; (8001360 <ESP_Init+0x208>)
 80011b4:	f001 fd9c 	bl	8002cf0 <UART_send>
		HAL_Delay(1500);
 80011b8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80011bc:	f004 fd6c 	bl	8005c98 <HAL_Delay>
	for (int i=0; i<3; i++)
 80011c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011c2:	3301      	adds	r3, #1
 80011c4:	667b      	str	r3, [r7, #100]	; 0x64
 80011c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	ddf1      	ble.n	80011b0 <ESP_Init+0x58>
	}


	/********** AT **********/
	UART_send("AT\r\n", WiFi_UART);
 80011cc:	495d      	ldr	r1, [pc, #372]	; (8001344 <ESP_Init+0x1ec>)
 80011ce:	485e      	ldr	r0, [pc, #376]	; (8001348 <ESP_Init+0x1f0>)
 80011d0:	f001 fd8e 	bl	8002cf0 <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 80011d4:	bf00      	nop
 80011d6:	495b      	ldr	r1, [pc, #364]	; (8001344 <ESP_Init+0x1ec>)
 80011d8:	485c      	ldr	r0, [pc, #368]	; (800134c <ESP_Init+0x1f4>)
 80011da:	f001 fe1f 	bl	8002e1c <UART_waitFor>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f8      	beq.n	80011d6 <ESP_Init+0x7e>
	UART_send("\n\nAT  ---->  OK\n\n", PC_UART);
 80011e4:	495a      	ldr	r1, [pc, #360]	; (8001350 <ESP_Init+0x1f8>)
 80011e6:	485f      	ldr	r0, [pc, #380]	; (8001364 <ESP_Init+0x20c>)
 80011e8:	f001 fd82 	bl	8002cf0 <UART_send>


	HAL_Delay(2000);
 80011ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011f0:	f004 fd52 	bl	8005c98 <HAL_Delay>


	/********** AT+CWMODE=3 **********/
	UART_send("AT+CWMODE=3\r\n", WiFi_UART);
 80011f4:	4953      	ldr	r1, [pc, #332]	; (8001344 <ESP_Init+0x1ec>)
 80011f6:	485c      	ldr	r0, [pc, #368]	; (8001368 <ESP_Init+0x210>)
 80011f8:	f001 fd7a 	bl	8002cf0 <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 80011fc:	bf00      	nop
 80011fe:	4951      	ldr	r1, [pc, #324]	; (8001344 <ESP_Init+0x1ec>)
 8001200:	4852      	ldr	r0, [pc, #328]	; (800134c <ESP_Init+0x1f4>)
 8001202:	f001 fe0b 	bl	8002e1c <UART_waitFor>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f8      	beq.n	80011fe <ESP_Init+0xa6>
	UART_send("CW MODE  ---->  3\n\n", PC_UART);
 800120c:	4950      	ldr	r1, [pc, #320]	; (8001350 <ESP_Init+0x1f8>)
 800120e:	4857      	ldr	r0, [pc, #348]	; (800136c <ESP_Init+0x214>)
 8001210:	f001 fd6e 	bl	8002cf0 <UART_send>


	/********** AT+CWJAP="SSID","PASSWD" **********/
	UART_send("Connecting ", PC_UART);
 8001214:	494e      	ldr	r1, [pc, #312]	; (8001350 <ESP_Init+0x1f8>)
 8001216:	4856      	ldr	r0, [pc, #344]	; (8001370 <ESP_Init+0x218>)
 8001218:	f001 fd6a 	bl	8002cf0 <UART_send>

	for (int i=0; i<3; i++)
 800121c:	2300      	movs	r3, #0
 800121e:	663b      	str	r3, [r7, #96]	; 0x60
 8001220:	e00a      	b.n	8001238 <ESP_Init+0xe0>
	{
		UART_send(" . ", PC_UART);
 8001222:	494b      	ldr	r1, [pc, #300]	; (8001350 <ESP_Init+0x1f8>)
 8001224:	484e      	ldr	r0, [pc, #312]	; (8001360 <ESP_Init+0x208>)
 8001226:	f001 fd63 	bl	8002cf0 <UART_send>
		HAL_Delay(1500);
 800122a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800122e:	f004 fd33 	bl	8005c98 <HAL_Delay>
	for (int i=0; i<3; i++)
 8001232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001234:	3301      	adds	r3, #1
 8001236:	663b      	str	r3, [r7, #96]	; 0x60
 8001238:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800123a:	2b02      	cmp	r3, #2
 800123c:	ddf1      	ble.n	8001222 <ESP_Init+0xca>
	}

	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 800123e:	f107 000c 	add.w	r0, r7, #12
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	494b      	ldr	r1, [pc, #300]	; (8001374 <ESP_Init+0x21c>)
 8001248:	f008 fcf8 	bl	8009c3c <siprintf>
	UART_send(data, WiFi_UART);
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	493c      	ldr	r1, [pc, #240]	; (8001344 <ESP_Init+0x1ec>)
 8001252:	4618      	mov	r0, r3
 8001254:	f001 fd4c 	bl	8002cf0 <UART_send>
	while (!(UART_waitFor("WIFI GOT IP\r\n\r\nOK\r\n", WiFi_UART)));
 8001258:	bf00      	nop
 800125a:	493a      	ldr	r1, [pc, #232]	; (8001344 <ESP_Init+0x1ec>)
 800125c:	4846      	ldr	r0, [pc, #280]	; (8001378 <ESP_Init+0x220>)
 800125e:	f001 fddd 	bl	8002e1c <UART_waitFor>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f8      	beq.n	800125a <ESP_Init+0x102>
	sprintf (data, "\n\nConnected to \"%s\"\n\n", SSID);
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	4943      	ldr	r1, [pc, #268]	; (800137c <ESP_Init+0x224>)
 8001270:	4618      	mov	r0, r3
 8001272:	f008 fce3 	bl	8009c3c <siprintf>
	UART_send(data,PC_UART);
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	4935      	ldr	r1, [pc, #212]	; (8001350 <ESP_Init+0x1f8>)
 800127c:	4618      	mov	r0, r3
 800127e:	f001 fd37 	bl	8002cf0 <UART_send>
	//UART_send("AT+CIPSTA?\r\n", WiFi_UART);
	//sprintf (data, "AT+CIPSTA?\r\n");


	/********** AT+CIFSR **********/
	UART_send("AT+CIFSR\r\n", WiFi_UART);
 8001282:	4930      	ldr	r1, [pc, #192]	; (8001344 <ESP_Init+0x1ec>)
 8001284:	483e      	ldr	r0, [pc, #248]	; (8001380 <ESP_Init+0x228>)
 8001286:	f001 fd33 	bl	8002cf0 <UART_send>
	while (!(UART_waitFor("CIFSR:STAIP,\"", WiFi_UART)));
 800128a:	bf00      	nop
 800128c:	492d      	ldr	r1, [pc, #180]	; (8001344 <ESP_Init+0x1ec>)
 800128e:	483d      	ldr	r0, [pc, #244]	; (8001384 <ESP_Init+0x22c>)
 8001290:	f001 fdc4 	bl	8002e1c <UART_waitFor>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f8      	beq.n	800128c <ESP_Init+0x134>
	while (!(UART_copyUpto("\"",buffer, WiFi_UART)));
 800129a:	bf00      	nop
 800129c:	4a29      	ldr	r2, [pc, #164]	; (8001344 <ESP_Init+0x1ec>)
 800129e:	493a      	ldr	r1, [pc, #232]	; (8001388 <ESP_Init+0x230>)
 80012a0:	483a      	ldr	r0, [pc, #232]	; (800138c <ESP_Init+0x234>)
 80012a2:	f001 fd3d 	bl	8002d20 <UART_copyUpto>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f7      	beq.n	800129c <ESP_Init+0x144>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 80012ac:	bf00      	nop
 80012ae:	4925      	ldr	r1, [pc, #148]	; (8001344 <ESP_Init+0x1ec>)
 80012b0:	4826      	ldr	r0, [pc, #152]	; (800134c <ESP_Init+0x1f4>)
 80012b2:	f001 fdb3 	bl	8002e1c <UART_waitFor>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f8      	beq.n	80012ae <ESP_Init+0x156>
	int len = strlen (buffer);
 80012bc:	4832      	ldr	r0, [pc, #200]	; (8001388 <ESP_Init+0x230>)
 80012be:	f7fe ff87 	bl	80001d0 <strlen>
 80012c2:	4603      	mov	r3, r0
 80012c4:	65fb      	str	r3, [r7, #92]	; 0x5c
	buffer[len-1] = '\0';
 80012c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012c8:	3b01      	subs	r3, #1
 80012ca:	4a2f      	ldr	r2, [pc, #188]	; (8001388 <ESP_Init+0x230>)
 80012cc:	2100      	movs	r1, #0
 80012ce:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP :  %s\n\n", buffer);
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	4a2c      	ldr	r2, [pc, #176]	; (8001388 <ESP_Init+0x230>)
 80012d6:	492e      	ldr	r1, [pc, #184]	; (8001390 <ESP_Init+0x238>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f008 fcaf 	bl	8009c3c <siprintf>
	UART_send(data, PC_UART);
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	491b      	ldr	r1, [pc, #108]	; (8001350 <ESP_Init+0x1f8>)
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 fd03 	bl	8002cf0 <UART_send>


	/********** AT+CIPMUX=1 **********/
	UART_send("AT+CIPMUX=1\r\n", WiFi_UART);
 80012ea:	4916      	ldr	r1, [pc, #88]	; (8001344 <ESP_Init+0x1ec>)
 80012ec:	4829      	ldr	r0, [pc, #164]	; (8001394 <ESP_Init+0x23c>)
 80012ee:	f001 fcff 	bl	8002cf0 <UART_send>
	while (!(UART_waitFor("AT+CIPMUX=1\r\r\n\r\nOK\r\n", WiFi_UART)));
 80012f2:	bf00      	nop
 80012f4:	4913      	ldr	r1, [pc, #76]	; (8001344 <ESP_Init+0x1ec>)
 80012f6:	4828      	ldr	r0, [pc, #160]	; (8001398 <ESP_Init+0x240>)
 80012f8:	f001 fd90 	bl	8002e1c <UART_waitFor>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0f8      	beq.n	80012f4 <ESP_Init+0x19c>
	UART_send("CIPMUX  ---->  OK\n\n", PC_UART);
 8001302:	4913      	ldr	r1, [pc, #76]	; (8001350 <ESP_Init+0x1f8>)
 8001304:	4825      	ldr	r0, [pc, #148]	; (800139c <ESP_Init+0x244>)
 8001306:	f001 fcf3 	bl	8002cf0 <UART_send>
	//while (!(UART_waitFor("OK\r\n", WiFi_UART)));
	//UART_send("CIPSTART  ---->  OK\n\n", PC_UART);


	/********** AT+CIPSERVER=1,80 **********/
	UART_send("AT+CIPSERVER=1,80\r\n", WiFi_UART);
 800130a:	490e      	ldr	r1, [pc, #56]	; (8001344 <ESP_Init+0x1ec>)
 800130c:	4824      	ldr	r0, [pc, #144]	; (80013a0 <ESP_Init+0x248>)
 800130e:	f001 fcef 	bl	8002cf0 <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 8001312:	bf00      	nop
 8001314:	490b      	ldr	r1, [pc, #44]	; (8001344 <ESP_Init+0x1ec>)
 8001316:	480d      	ldr	r0, [pc, #52]	; (800134c <ESP_Init+0x1f4>)
 8001318:	f001 fd80 	bl	8002e1c <UART_waitFor>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f8      	beq.n	8001314 <ESP_Init+0x1bc>
	UART_send("CIPSERVER  ---->  OK\n\n", PC_UART);
 8001322:	490b      	ldr	r1, [pc, #44]	; (8001350 <ESP_Init+0x1f8>)
 8001324:	481f      	ldr	r0, [pc, #124]	; (80013a4 <ESP_Init+0x24c>)
 8001326:	f001 fce3 	bl	8002cf0 <UART_send>


	/********** FIN **********/
	UART_send("Conected to the IP\n\n", PC_UART);
 800132a:	4909      	ldr	r1, [pc, #36]	; (8001350 <ESP_Init+0x1f8>)
 800132c:	481e      	ldr	r0, [pc, #120]	; (80013a8 <ESP_Init+0x250>)
 800132e:	f001 fcdf 	bl	8002cf0 <UART_send>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1); // CONNECTED
 8001332:	2201      	movs	r2, #1
 8001334:	2101      	movs	r1, #1
 8001336:	481d      	ldr	r0, [pc, #116]	; (80013ac <ESP_Init+0x254>)
 8001338:	f005 fbf6 	bl	8006b28 <HAL_GPIO_WritePin>
}
 800133c:	bf00      	nop
 800133e:	3768      	adds	r7, #104	; 0x68
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20001068 	.word	0x20001068
 8001348:	0800a948 	.word	0x0800a948
 800134c:	0800a950 	.word	0x0800a950
 8001350:	20000fdc 	.word	0x20000fdc
 8001354:	0800a958 	.word	0x0800a958
 8001358:	0800a968 	.word	0x0800a968
 800135c:	0800a974 	.word	0x0800a974
 8001360:	0800a980 	.word	0x0800a980
 8001364:	0800a984 	.word	0x0800a984
 8001368:	0800a998 	.word	0x0800a998
 800136c:	0800a9a8 	.word	0x0800a9a8
 8001370:	0800a9bc 	.word	0x0800a9bc
 8001374:	0800a9c8 	.word	0x0800a9c8
 8001378:	0800a9e0 	.word	0x0800a9e0
 800137c:	0800a9f4 	.word	0x0800a9f4
 8001380:	0800aa0c 	.word	0x0800aa0c
 8001384:	0800aa18 	.word	0x0800aa18
 8001388:	200009d0 	.word	0x200009d0
 800138c:	0800aa28 	.word	0x0800aa28
 8001390:	0800aa2c 	.word	0x0800aa2c
 8001394:	0800aa38 	.word	0x0800aa38
 8001398:	0800aa48 	.word	0x0800aa48
 800139c:	0800aa60 	.word	0x0800aa60
 80013a0:	0800aa74 	.word	0x0800aa74
 80013a4:	0800aa88 	.word	0x0800aa88
 80013a8:	0800aaa0 	.word	0x0800aaa0
 80013ac:	40020800 	.word	0x40020800

080013b0 <ESP_messageHandler>:
	}
	return -1;
}


void ESP_messageHandler(void){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0

	//__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);

	memset(textrc, 0, 100);
 80013b4:	2264      	movs	r2, #100	; 0x64
 80013b6:	2100      	movs	r1, #0
 80013b8:	48a6      	ldr	r0, [pc, #664]	; (8001654 <ESP_messageHandler+0x2a4>)
 80013ba:	f008 fc37 	bl	8009c2c <memset>

	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) != 0){
 80013be:	2101      	movs	r1, #1
 80013c0:	48a5      	ldr	r0, [pc, #660]	; (8001658 <ESP_messageHandler+0x2a8>)
 80013c2:	f005 fb99 	bl	8006af8 <HAL_GPIO_ReadPin>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d01f      	beq.n	800140c <ESP_messageHandler+0x5c>

		HAL_UART_Receive(&huart2, (uint8_t *)textrc, 100, 100); //(uint8_t *)
 80013cc:	2364      	movs	r3, #100	; 0x64
 80013ce:	2264      	movs	r2, #100	; 0x64
 80013d0:	49a0      	ldr	r1, [pc, #640]	; (8001654 <ESP_messageHandler+0x2a4>)
 80013d2:	48a2      	ldr	r0, [pc, #648]	; (800165c <ESP_messageHandler+0x2ac>)
 80013d4:	f007 fcbb 	bl	8008d4e <HAL_UART_Receive>

		HAL_UART_Transmit(&huart6, (uint8_t *)textrc, 100, HAL_MAX_DELAY);
 80013d8:	f04f 33ff 	mov.w	r3, #4294967295
 80013dc:	2264      	movs	r2, #100	; 0x64
 80013de:	499d      	ldr	r1, [pc, #628]	; (8001654 <ESP_messageHandler+0x2a4>)
 80013e0:	489f      	ldr	r0, [pc, #636]	; (8001660 <ESP_messageHandler+0x2b0>)
 80013e2:	f007 fc22 	bl	8008c2a <HAL_UART_Transmit>
		UART_send("\n", PC_UART);
 80013e6:	499e      	ldr	r1, [pc, #632]	; (8001660 <ESP_messageHandler+0x2b0>)
 80013e8:	489e      	ldr	r0, [pc, #632]	; (8001664 <ESP_messageHandler+0x2b4>)
 80013ea:	f001 fc81 	bl	8002cf0 <UART_send>

		fragment[0] = textrc[25]; // Fragment assignment
 80013ee:	4b99      	ldr	r3, [pc, #612]	; (8001654 <ESP_messageHandler+0x2a4>)
 80013f0:	7e5a      	ldrb	r2, [r3, #25]
 80013f2:	4b9d      	ldr	r3, [pc, #628]	; (8001668 <ESP_messageHandler+0x2b8>)
 80013f4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart6, (uint8_t *)fragment, 1, HAL_MAX_DELAY);
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	2201      	movs	r2, #1
 80013fc:	499a      	ldr	r1, [pc, #616]	; (8001668 <ESP_messageHandler+0x2b8>)
 80013fe:	4898      	ldr	r0, [pc, #608]	; (8001660 <ESP_messageHandler+0x2b0>)
 8001400:	f007 fc13 	bl	8008c2a <HAL_UART_Transmit>
		UART_send("\n", PC_UART);
 8001404:	4996      	ldr	r1, [pc, #600]	; (8001660 <ESP_messageHandler+0x2b0>)
 8001406:	4897      	ldr	r0, [pc, #604]	; (8001664 <ESP_messageHandler+0x2b4>)
 8001408:	f001 fc72 	bl	8002cf0 <UART_send>
	}


	// DHT22
	readDHT = 0;
 800140c:	4b97      	ldr	r3, [pc, #604]	; (800166c <ESP_messageHandler+0x2bc>)
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]

	if(textrc[27] == '[') readDHT = 1;
 8001412:	4b90      	ldr	r3, [pc, #576]	; (8001654 <ESP_messageHandler+0x2a4>)
 8001414:	7edb      	ldrb	r3, [r3, #27]
 8001416:	2b5b      	cmp	r3, #91	; 0x5b
 8001418:	d102      	bne.n	8001420 <ESP_messageHandler+0x70>
 800141a:	4b94      	ldr	r3, [pc, #592]	; (800166c <ESP_messageHandler+0x2bc>)
 800141c:	2201      	movs	r2, #1
 800141e:	601a      	str	r2, [r3, #0]


	// SECURITY
	if (fragment[0] == 's'){
 8001420:	4b91      	ldr	r3, [pc, #580]	; (8001668 <ESP_messageHandler+0x2b8>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b73      	cmp	r3, #115	; 0x73
 8001426:	d10b      	bne.n	8001440 <ESP_messageHandler+0x90>
		UART_send("SEGURIDAD \n", PC_UART);
 8001428:	498d      	ldr	r1, [pc, #564]	; (8001660 <ESP_messageHandler+0x2b0>)
 800142a:	4891      	ldr	r0, [pc, #580]	; (8001670 <ESP_messageHandler+0x2c0>)
 800142c:	f001 fc60 	bl	8002cf0 <UART_send>
		vSecurity[0] = textrc[28]; // Alarma Interior
 8001430:	4b88      	ldr	r3, [pc, #544]	; (8001654 <ESP_messageHandler+0x2a4>)
 8001432:	7f1a      	ldrb	r2, [r3, #28]
 8001434:	4b8f      	ldr	r3, [pc, #572]	; (8001674 <ESP_messageHandler+0x2c4>)
 8001436:	701a      	strb	r2, [r3, #0]
		vSecurity[1] = textrc[31]; // Alarma Exterior
 8001438:	4b86      	ldr	r3, [pc, #536]	; (8001654 <ESP_messageHandler+0x2a4>)
 800143a:	7fda      	ldrb	r2, [r3, #31]
 800143c:	4b8d      	ldr	r3, [pc, #564]	; (8001674 <ESP_messageHandler+0x2c4>)
 800143e:	705a      	strb	r2, [r3, #1]
	}

	// LIGHTS
	if (fragment[0] == 'i'){
 8001440:	4b89      	ldr	r3, [pc, #548]	; (8001668 <ESP_messageHandler+0x2b8>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b69      	cmp	r3, #105	; 0x69
 8001446:	f040 82cc 	bne.w	80019e2 <ESP_messageHandler+0x632>
		UART_send("ILUMINACION \n", PC_UART);
 800144a:	4985      	ldr	r1, [pc, #532]	; (8001660 <ESP_messageHandler+0x2b0>)
 800144c:	488a      	ldr	r0, [pc, #552]	; (8001678 <ESP_messageHandler+0x2c8>)
 800144e:	f001 fc4f 	bl	8002cf0 <UART_send>
		vLight[0] = textrc[28]; 	// Luz Sala
 8001452:	4b80      	ldr	r3, [pc, #512]	; (8001654 <ESP_messageHandler+0x2a4>)
 8001454:	7f1a      	ldrb	r2, [r3, #28]
 8001456:	4b89      	ldr	r3, [pc, #548]	; (800167c <ESP_messageHandler+0x2cc>)
 8001458:	701a      	strb	r2, [r3, #0]
		vLight[1] = textrc[31]; 	// Luz Comedor
 800145a:	4b7e      	ldr	r3, [pc, #504]	; (8001654 <ESP_messageHandler+0x2a4>)
 800145c:	7fda      	ldrb	r2, [r3, #31]
 800145e:	4b87      	ldr	r3, [pc, #540]	; (800167c <ESP_messageHandler+0x2cc>)
 8001460:	705a      	strb	r2, [r3, #1]
		vLight[2] = textrc[34]; 	// Luz Ambiente
 8001462:	4b7c      	ldr	r3, [pc, #496]	; (8001654 <ESP_messageHandler+0x2a4>)
 8001464:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001468:	4b84      	ldr	r3, [pc, #528]	; (800167c <ESP_messageHandler+0x2cc>)
 800146a:	709a      	strb	r2, [r3, #2]
		vLight[3] = textrc[37]; 	// Luz Recibidor
 800146c:	4b79      	ldr	r3, [pc, #484]	; (8001654 <ESP_messageHandler+0x2a4>)
 800146e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001472:	4b82      	ldr	r3, [pc, #520]	; (800167c <ESP_messageHandler+0x2cc>)
 8001474:	70da      	strb	r2, [r3, #3]
		vLight[4] = textrc[40]; 	// Luz Cocina
 8001476:	4b77      	ldr	r3, [pc, #476]	; (8001654 <ESP_messageHandler+0x2a4>)
 8001478:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800147c:	4b7f      	ldr	r3, [pc, #508]	; (800167c <ESP_messageHandler+0x2cc>)
 800147e:	711a      	strb	r2, [r3, #4]
		vLight[5] = textrc[43]; 	// Luz Fregadero
 8001480:	4b74      	ldr	r3, [pc, #464]	; (8001654 <ESP_messageHandler+0x2a4>)
 8001482:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8001486:	4b7d      	ldr	r3, [pc, #500]	; (800167c <ESP_messageHandler+0x2cc>)
 8001488:	715a      	strb	r2, [r3, #5]
		vLight[6] = textrc[46]; 	// Luz Baño
 800148a:	4b72      	ldr	r3, [pc, #456]	; (8001654 <ESP_messageHandler+0x2a4>)
 800148c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8001490:	4b7a      	ldr	r3, [pc, #488]	; (800167c <ESP_messageHandler+0x2cc>)
 8001492:	719a      	strb	r2, [r3, #6]
		vLight[7] = textrc[49]; 	// Luz Espejo
 8001494:	4b6f      	ldr	r3, [pc, #444]	; (8001654 <ESP_messageHandler+0x2a4>)
 8001496:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800149a:	4b78      	ldr	r3, [pc, #480]	; (800167c <ESP_messageHandler+0x2cc>)
 800149c:	71da      	strb	r2, [r3, #7]
		vLight[8] = textrc[52]; 	// Luz Dormitorio
 800149e:	4b6d      	ldr	r3, [pc, #436]	; (8001654 <ESP_messageHandler+0x2a4>)
 80014a0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80014a4:	4b75      	ldr	r3, [pc, #468]	; (800167c <ESP_messageHandler+0x2cc>)
 80014a6:	721a      	strb	r2, [r3, #8]
		vLight[9] = textrc[55]; 	// Luz Mesita Izq
 80014a8:	4b6a      	ldr	r3, [pc, #424]	; (8001654 <ESP_messageHandler+0x2a4>)
 80014aa:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80014ae:	4b73      	ldr	r3, [pc, #460]	; (800167c <ESP_messageHandler+0x2cc>)
 80014b0:	725a      	strb	r2, [r3, #9]
		vLight[10] = textrc[58]; 	// Luz Mesita Dch
 80014b2:	4b68      	ldr	r3, [pc, #416]	; (8001654 <ESP_messageHandler+0x2a4>)
 80014b4:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80014b8:	4b70      	ldr	r3, [pc, #448]	; (800167c <ESP_messageHandler+0x2cc>)
 80014ba:	729a      	strb	r2, [r3, #10]
		vLight[11] = textrc[61]; 	// Luz Oficina
 80014bc:	4b65      	ldr	r3, [pc, #404]	; (8001654 <ESP_messageHandler+0x2a4>)
 80014be:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80014c2:	4b6e      	ldr	r3, [pc, #440]	; (800167c <ESP_messageHandler+0x2cc>)
 80014c4:	72da      	strb	r2, [r3, #11]
		vLight[12] = textrc[64]; 	// Luz Gaming
 80014c6:	4b63      	ldr	r3, [pc, #396]	; (8001654 <ESP_messageHandler+0x2a4>)
 80014c8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80014cc:	4b6b      	ldr	r3, [pc, #428]	; (800167c <ESP_messageHandler+0x2cc>)
 80014ce:	731a      	strb	r2, [r3, #12]
		vLight[13] = textrc[67]; 	// Luz Rx100
 80014d0:	4b60      	ldr	r3, [pc, #384]	; (8001654 <ESP_messageHandler+0x2a4>)
 80014d2:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80014d6:	4b69      	ldr	r3, [pc, #420]	; (800167c <ESP_messageHandler+0x2cc>)
 80014d8:	735a      	strb	r2, [r3, #13]
		vLight[14] = textrc[68]; 	// Luz Rx10
 80014da:	4b5e      	ldr	r3, [pc, #376]	; (8001654 <ESP_messageHandler+0x2a4>)
 80014dc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80014e0:	4b66      	ldr	r3, [pc, #408]	; (800167c <ESP_messageHandler+0x2cc>)
 80014e2:	739a      	strb	r2, [r3, #14]
		vLight[15] = textrc[69]; 	// Luz Rx1
 80014e4:	4b5b      	ldr	r3, [pc, #364]	; (8001654 <ESP_messageHandler+0x2a4>)
 80014e6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80014ea:	4b64      	ldr	r3, [pc, #400]	; (800167c <ESP_messageHandler+0x2cc>)
 80014ec:	73da      	strb	r2, [r3, #15]
		vLight[16] = textrc[72]; 	// Luz Gx100
 80014ee:	4b59      	ldr	r3, [pc, #356]	; (8001654 <ESP_messageHandler+0x2a4>)
 80014f0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80014f4:	4b61      	ldr	r3, [pc, #388]	; (800167c <ESP_messageHandler+0x2cc>)
 80014f6:	741a      	strb	r2, [r3, #16]
		vLight[17] = textrc[73]; 	// Luz Gx10
 80014f8:	4b56      	ldr	r3, [pc, #344]	; (8001654 <ESP_messageHandler+0x2a4>)
 80014fa:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 80014fe:	4b5f      	ldr	r3, [pc, #380]	; (800167c <ESP_messageHandler+0x2cc>)
 8001500:	745a      	strb	r2, [r3, #17]
		vLight[18] = textrc[74]; 	// Luz Gx1
 8001502:	4b54      	ldr	r3, [pc, #336]	; (8001654 <ESP_messageHandler+0x2a4>)
 8001504:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8001508:	4b5c      	ldr	r3, [pc, #368]	; (800167c <ESP_messageHandler+0x2cc>)
 800150a:	749a      	strb	r2, [r3, #18]
		vLight[19] = textrc[77]; 	// Luz Bx100
 800150c:	4b51      	ldr	r3, [pc, #324]	; (8001654 <ESP_messageHandler+0x2a4>)
 800150e:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8001512:	4b5a      	ldr	r3, [pc, #360]	; (800167c <ESP_messageHandler+0x2cc>)
 8001514:	74da      	strb	r2, [r3, #19]
		vLight[20] = textrc[78]; 	// Luz Bx10
 8001516:	4b4f      	ldr	r3, [pc, #316]	; (8001654 <ESP_messageHandler+0x2a4>)
 8001518:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 800151c:	4b57      	ldr	r3, [pc, #348]	; (800167c <ESP_messageHandler+0x2cc>)
 800151e:	751a      	strb	r2, [r3, #20]
		vLight[21] = textrc[79]; 	// Luz Bx1
 8001520:	4b4c      	ldr	r3, [pc, #304]	; (8001654 <ESP_messageHandler+0x2a4>)
 8001522:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8001526:	4b55      	ldr	r3, [pc, #340]	; (800167c <ESP_messageHandler+0x2cc>)
 8001528:	755a      	strb	r2, [r3, #21]
		vLight[22] = textrc[82]; 	// Luz Garaje
 800152a:	4b4a      	ldr	r3, [pc, #296]	; (8001654 <ESP_messageHandler+0x2a4>)
 800152c:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8001530:	4b52      	ldr	r3, [pc, #328]	; (800167c <ESP_messageHandler+0x2cc>)
 8001532:	759a      	strb	r2, [r3, #22]
		vLight[23] = textrc[85]; 	// Luz Jardín
 8001534:	4b47      	ldr	r3, [pc, #284]	; (8001654 <ESP_messageHandler+0x2a4>)
 8001536:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800153a:	4b50      	ldr	r3, [pc, #320]	; (800167c <ESP_messageHandler+0x2cc>)
 800153c:	75da      	strb	r2, [r3, #23]
		vLight[24] = textrc[88]; 	// Luz Porche
 800153e:	4b45      	ldr	r3, [pc, #276]	; (8001654 <ESP_messageHandler+0x2a4>)
 8001540:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001544:	4b4d      	ldr	r3, [pc, #308]	; (800167c <ESP_messageHandler+0x2cc>)
 8001546:	761a      	strb	r2, [r3, #24]
		vLight[25] = textrc[91]; 	// Luz Tendedero
 8001548:	4b42      	ldr	r3, [pc, #264]	; (8001654 <ESP_messageHandler+0x2a4>)
 800154a:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 800154e:	4b4b      	ldr	r3, [pc, #300]	; (800167c <ESP_messageHandler+0x2cc>)
 8001550:	765a      	strb	r2, [r3, #25]
		vLight[26] = textrc[94]; 	// Automático
 8001552:	4b40      	ldr	r3, [pc, #256]	; (8001654 <ESP_messageHandler+0x2a4>)
 8001554:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 8001558:	4b48      	ldr	r3, [pc, #288]	; (800167c <ESP_messageHandler+0x2cc>)
 800155a:	769a      	strb	r2, [r3, #26]


		if(vLight[0] == '0' || vLiving[1] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, RESET); 			// Luz Sala
 800155c:	4b47      	ldr	r3, [pc, #284]	; (800167c <ESP_messageHandler+0x2cc>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b30      	cmp	r3, #48	; 0x30
 8001562:	d003      	beq.n	800156c <ESP_messageHandler+0x1bc>
 8001564:	4b46      	ldr	r3, [pc, #280]	; (8001680 <ESP_messageHandler+0x2d0>)
 8001566:	785b      	ldrb	r3, [r3, #1]
 8001568:	2b30      	cmp	r3, #48	; 0x30
 800156a:	d105      	bne.n	8001578 <ESP_messageHandler+0x1c8>
 800156c:	2200      	movs	r2, #0
 800156e:	2108      	movs	r1, #8
 8001570:	4844      	ldr	r0, [pc, #272]	; (8001684 <ESP_messageHandler+0x2d4>)
 8001572:	f005 fad9 	bl	8006b28 <HAL_GPIO_WritePin>
 8001576:	e00c      	b.n	8001592 <ESP_messageHandler+0x1e2>
		else if(vLight[0] == '1' || vLiving[1] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, SET);
 8001578:	4b40      	ldr	r3, [pc, #256]	; (800167c <ESP_messageHandler+0x2cc>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b31      	cmp	r3, #49	; 0x31
 800157e:	d003      	beq.n	8001588 <ESP_messageHandler+0x1d8>
 8001580:	4b3f      	ldr	r3, [pc, #252]	; (8001680 <ESP_messageHandler+0x2d0>)
 8001582:	785b      	ldrb	r3, [r3, #1]
 8001584:	2b31      	cmp	r3, #49	; 0x31
 8001586:	d104      	bne.n	8001592 <ESP_messageHandler+0x1e2>
 8001588:	2201      	movs	r2, #1
 800158a:	2108      	movs	r1, #8
 800158c:	483d      	ldr	r0, [pc, #244]	; (8001684 <ESP_messageHandler+0x2d4>)
 800158e:	f005 facb 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[1] == '0' || vLiving[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET); 			// Luz Comedor
 8001592:	4b3a      	ldr	r3, [pc, #232]	; (800167c <ESP_messageHandler+0x2cc>)
 8001594:	785b      	ldrb	r3, [r3, #1]
 8001596:	2b30      	cmp	r3, #48	; 0x30
 8001598:	d003      	beq.n	80015a2 <ESP_messageHandler+0x1f2>
 800159a:	4b39      	ldr	r3, [pc, #228]	; (8001680 <ESP_messageHandler+0x2d0>)
 800159c:	789b      	ldrb	r3, [r3, #2]
 800159e:	2b30      	cmp	r3, #48	; 0x30
 80015a0:	d105      	bne.n	80015ae <ESP_messageHandler+0x1fe>
 80015a2:	2200      	movs	r2, #0
 80015a4:	2102      	movs	r1, #2
 80015a6:	4837      	ldr	r0, [pc, #220]	; (8001684 <ESP_messageHandler+0x2d4>)
 80015a8:	f005 fabe 	bl	8006b28 <HAL_GPIO_WritePin>
 80015ac:	e00c      	b.n	80015c8 <ESP_messageHandler+0x218>
		else if(vLight[1] == '1'|| vLiving[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, SET);
 80015ae:	4b33      	ldr	r3, [pc, #204]	; (800167c <ESP_messageHandler+0x2cc>)
 80015b0:	785b      	ldrb	r3, [r3, #1]
 80015b2:	2b31      	cmp	r3, #49	; 0x31
 80015b4:	d003      	beq.n	80015be <ESP_messageHandler+0x20e>
 80015b6:	4b32      	ldr	r3, [pc, #200]	; (8001680 <ESP_messageHandler+0x2d0>)
 80015b8:	789b      	ldrb	r3, [r3, #2]
 80015ba:	2b31      	cmp	r3, #49	; 0x31
 80015bc:	d104      	bne.n	80015c8 <ESP_messageHandler+0x218>
 80015be:	2201      	movs	r2, #1
 80015c0:	2102      	movs	r1, #2
 80015c2:	4830      	ldr	r0, [pc, #192]	; (8001684 <ESP_messageHandler+0x2d4>)
 80015c4:	f005 fab0 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[2] == '0' || vLiving[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, RESET); 			// Luz Ambiente
 80015c8:	4b2c      	ldr	r3, [pc, #176]	; (800167c <ESP_messageHandler+0x2cc>)
 80015ca:	789b      	ldrb	r3, [r3, #2]
 80015cc:	2b30      	cmp	r3, #48	; 0x30
 80015ce:	d003      	beq.n	80015d8 <ESP_messageHandler+0x228>
 80015d0:	4b2b      	ldr	r3, [pc, #172]	; (8001680 <ESP_messageHandler+0x2d0>)
 80015d2:	78db      	ldrb	r3, [r3, #3]
 80015d4:	2b30      	cmp	r3, #48	; 0x30
 80015d6:	d105      	bne.n	80015e4 <ESP_messageHandler+0x234>
 80015d8:	2200      	movs	r2, #0
 80015da:	2120      	movs	r1, #32
 80015dc:	4829      	ldr	r0, [pc, #164]	; (8001684 <ESP_messageHandler+0x2d4>)
 80015de:	f005 faa3 	bl	8006b28 <HAL_GPIO_WritePin>
 80015e2:	e00c      	b.n	80015fe <ESP_messageHandler+0x24e>
		else if(vLight[2] == '1' || vLiving[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, SET);
 80015e4:	4b25      	ldr	r3, [pc, #148]	; (800167c <ESP_messageHandler+0x2cc>)
 80015e6:	789b      	ldrb	r3, [r3, #2]
 80015e8:	2b31      	cmp	r3, #49	; 0x31
 80015ea:	d003      	beq.n	80015f4 <ESP_messageHandler+0x244>
 80015ec:	4b24      	ldr	r3, [pc, #144]	; (8001680 <ESP_messageHandler+0x2d0>)
 80015ee:	78db      	ldrb	r3, [r3, #3]
 80015f0:	2b31      	cmp	r3, #49	; 0x31
 80015f2:	d104      	bne.n	80015fe <ESP_messageHandler+0x24e>
 80015f4:	2201      	movs	r2, #1
 80015f6:	2120      	movs	r1, #32
 80015f8:	4822      	ldr	r0, [pc, #136]	; (8001684 <ESP_messageHandler+0x2d4>)
 80015fa:	f005 fa95 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[3] == '0' || vLiving[4] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET); 			// Luz Recibidor
 80015fe:	4b1f      	ldr	r3, [pc, #124]	; (800167c <ESP_messageHandler+0x2cc>)
 8001600:	78db      	ldrb	r3, [r3, #3]
 8001602:	2b30      	cmp	r3, #48	; 0x30
 8001604:	d003      	beq.n	800160e <ESP_messageHandler+0x25e>
 8001606:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <ESP_messageHandler+0x2d0>)
 8001608:	791b      	ldrb	r3, [r3, #4]
 800160a:	2b30      	cmp	r3, #48	; 0x30
 800160c:	d105      	bne.n	800161a <ESP_messageHandler+0x26a>
 800160e:	2200      	movs	r2, #0
 8001610:	2101      	movs	r1, #1
 8001612:	481c      	ldr	r0, [pc, #112]	; (8001684 <ESP_messageHandler+0x2d4>)
 8001614:	f005 fa88 	bl	8006b28 <HAL_GPIO_WritePin>
 8001618:	e00c      	b.n	8001634 <ESP_messageHandler+0x284>
		else if(vLight[3] == '1' || vLiving[4] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <ESP_messageHandler+0x2cc>)
 800161c:	78db      	ldrb	r3, [r3, #3]
 800161e:	2b31      	cmp	r3, #49	; 0x31
 8001620:	d003      	beq.n	800162a <ESP_messageHandler+0x27a>
 8001622:	4b17      	ldr	r3, [pc, #92]	; (8001680 <ESP_messageHandler+0x2d0>)
 8001624:	791b      	ldrb	r3, [r3, #4]
 8001626:	2b31      	cmp	r3, #49	; 0x31
 8001628:	d104      	bne.n	8001634 <ESP_messageHandler+0x284>
 800162a:	2201      	movs	r2, #1
 800162c:	2101      	movs	r1, #1
 800162e:	4815      	ldr	r0, [pc, #84]	; (8001684 <ESP_messageHandler+0x2d4>)
 8001630:	f005 fa7a 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[4] == '0' || vKitchen[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET); 		// Luz Cocina
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <ESP_messageHandler+0x2cc>)
 8001636:	791b      	ldrb	r3, [r3, #4]
 8001638:	2b30      	cmp	r3, #48	; 0x30
 800163a:	d003      	beq.n	8001644 <ESP_messageHandler+0x294>
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <ESP_messageHandler+0x2d8>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b30      	cmp	r3, #48	; 0x30
 8001642:	d125      	bne.n	8001690 <ESP_messageHandler+0x2e0>
 8001644:	2200      	movs	r2, #0
 8001646:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800164a:	4810      	ldr	r0, [pc, #64]	; (800168c <ESP_messageHandler+0x2dc>)
 800164c:	f005 fa6c 	bl	8006b28 <HAL_GPIO_WritePin>
 8001650:	e02c      	b.n	80016ac <ESP_messageHandler+0x2fc>
 8001652:	bf00      	nop
 8001654:	200009ec 	.word	0x200009ec
 8001658:	40021000 	.word	0x40021000
 800165c:	20001068 	.word	0x20001068
 8001660:	20000fdc 	.word	0x20000fdc
 8001664:	0800ab20 	.word	0x0800ab20
 8001668:	200009e4 	.word	0x200009e4
 800166c:	2000094c 	.word	0x2000094c
 8001670:	0800ab24 	.word	0x0800ab24
 8001674:	20000970 	.word	0x20000970
 8001678:	0800ab30 	.word	0x0800ab30
 800167c:	20000924 	.word	0x20000924
 8001680:	20000914 	.word	0x20000914
 8001684:	40020c00 	.word	0x40020c00
 8001688:	20000964 	.word	0x20000964
 800168c:	40020800 	.word	0x40020800
		else if(vLight[4] == '1' || vKitchen[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 8001690:	4b95      	ldr	r3, [pc, #596]	; (80018e8 <ESP_messageHandler+0x538>)
 8001692:	791b      	ldrb	r3, [r3, #4]
 8001694:	2b31      	cmp	r3, #49	; 0x31
 8001696:	d003      	beq.n	80016a0 <ESP_messageHandler+0x2f0>
 8001698:	4b94      	ldr	r3, [pc, #592]	; (80018ec <ESP_messageHandler+0x53c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b31      	cmp	r3, #49	; 0x31
 800169e:	d105      	bne.n	80016ac <ESP_messageHandler+0x2fc>
 80016a0:	2201      	movs	r2, #1
 80016a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016a6:	4892      	ldr	r0, [pc, #584]	; (80018f0 <ESP_messageHandler+0x540>)
 80016a8:	f005 fa3e 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[5] == '0' || vKitchen[1] == '0') HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET); 		// Luz Fregadero
 80016ac:	4b8e      	ldr	r3, [pc, #568]	; (80018e8 <ESP_messageHandler+0x538>)
 80016ae:	795b      	ldrb	r3, [r3, #5]
 80016b0:	2b30      	cmp	r3, #48	; 0x30
 80016b2:	d003      	beq.n	80016bc <ESP_messageHandler+0x30c>
 80016b4:	4b8d      	ldr	r3, [pc, #564]	; (80018ec <ESP_messageHandler+0x53c>)
 80016b6:	785b      	ldrb	r3, [r3, #1]
 80016b8:	2b30      	cmp	r3, #48	; 0x30
 80016ba:	d106      	bne.n	80016ca <ESP_messageHandler+0x31a>
 80016bc:	2200      	movs	r2, #0
 80016be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016c2:	488c      	ldr	r0, [pc, #560]	; (80018f4 <ESP_messageHandler+0x544>)
 80016c4:	f005 fa30 	bl	8006b28 <HAL_GPIO_WritePin>
 80016c8:	e00d      	b.n	80016e6 <ESP_messageHandler+0x336>
		else if(vLight[5] == '1' || vKitchen[1] == '1')HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 80016ca:	4b87      	ldr	r3, [pc, #540]	; (80018e8 <ESP_messageHandler+0x538>)
 80016cc:	795b      	ldrb	r3, [r3, #5]
 80016ce:	2b31      	cmp	r3, #49	; 0x31
 80016d0:	d003      	beq.n	80016da <ESP_messageHandler+0x32a>
 80016d2:	4b86      	ldr	r3, [pc, #536]	; (80018ec <ESP_messageHandler+0x53c>)
 80016d4:	785b      	ldrb	r3, [r3, #1]
 80016d6:	2b31      	cmp	r3, #49	; 0x31
 80016d8:	d105      	bne.n	80016e6 <ESP_messageHandler+0x336>
 80016da:	2201      	movs	r2, #1
 80016dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e0:	4884      	ldr	r0, [pc, #528]	; (80018f4 <ESP_messageHandler+0x544>)
 80016e2:	f005 fa21 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[6] == '0' || vBath[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, RESET); 			// Luz Baño
 80016e6:	4b80      	ldr	r3, [pc, #512]	; (80018e8 <ESP_messageHandler+0x538>)
 80016e8:	799b      	ldrb	r3, [r3, #6]
 80016ea:	2b30      	cmp	r3, #48	; 0x30
 80016ec:	d003      	beq.n	80016f6 <ESP_messageHandler+0x346>
 80016ee:	4b82      	ldr	r3, [pc, #520]	; (80018f8 <ESP_messageHandler+0x548>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b30      	cmp	r3, #48	; 0x30
 80016f4:	d105      	bne.n	8001702 <ESP_messageHandler+0x352>
 80016f6:	2200      	movs	r2, #0
 80016f8:	2140      	movs	r1, #64	; 0x40
 80016fa:	4880      	ldr	r0, [pc, #512]	; (80018fc <ESP_messageHandler+0x54c>)
 80016fc:	f005 fa14 	bl	8006b28 <HAL_GPIO_WritePin>
 8001700:	e00c      	b.n	800171c <ESP_messageHandler+0x36c>
		else if(vLight[6] == '1' || vBath[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, SET);
 8001702:	4b79      	ldr	r3, [pc, #484]	; (80018e8 <ESP_messageHandler+0x538>)
 8001704:	799b      	ldrb	r3, [r3, #6]
 8001706:	2b31      	cmp	r3, #49	; 0x31
 8001708:	d003      	beq.n	8001712 <ESP_messageHandler+0x362>
 800170a:	4b7b      	ldr	r3, [pc, #492]	; (80018f8 <ESP_messageHandler+0x548>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b31      	cmp	r3, #49	; 0x31
 8001710:	d104      	bne.n	800171c <ESP_messageHandler+0x36c>
 8001712:	2201      	movs	r2, #1
 8001714:	2140      	movs	r1, #64	; 0x40
 8001716:	4879      	ldr	r0, [pc, #484]	; (80018fc <ESP_messageHandler+0x54c>)
 8001718:	f005 fa06 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[7] == '0' || vBath[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET); 			// Luz Espejo
 800171c:	4b72      	ldr	r3, [pc, #456]	; (80018e8 <ESP_messageHandler+0x538>)
 800171e:	79db      	ldrb	r3, [r3, #7]
 8001720:	2b30      	cmp	r3, #48	; 0x30
 8001722:	d003      	beq.n	800172c <ESP_messageHandler+0x37c>
 8001724:	4b74      	ldr	r3, [pc, #464]	; (80018f8 <ESP_messageHandler+0x548>)
 8001726:	785b      	ldrb	r3, [r3, #1]
 8001728:	2b30      	cmp	r3, #48	; 0x30
 800172a:	d105      	bne.n	8001738 <ESP_messageHandler+0x388>
 800172c:	2200      	movs	r2, #0
 800172e:	2108      	movs	r1, #8
 8001730:	4873      	ldr	r0, [pc, #460]	; (8001900 <ESP_messageHandler+0x550>)
 8001732:	f005 f9f9 	bl	8006b28 <HAL_GPIO_WritePin>
 8001736:	e00c      	b.n	8001752 <ESP_messageHandler+0x3a2>
		else if(vLight[7] == '1' || vBath[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8001738:	4b6b      	ldr	r3, [pc, #428]	; (80018e8 <ESP_messageHandler+0x538>)
 800173a:	79db      	ldrb	r3, [r3, #7]
 800173c:	2b31      	cmp	r3, #49	; 0x31
 800173e:	d003      	beq.n	8001748 <ESP_messageHandler+0x398>
 8001740:	4b6d      	ldr	r3, [pc, #436]	; (80018f8 <ESP_messageHandler+0x548>)
 8001742:	785b      	ldrb	r3, [r3, #1]
 8001744:	2b31      	cmp	r3, #49	; 0x31
 8001746:	d104      	bne.n	8001752 <ESP_messageHandler+0x3a2>
 8001748:	2201      	movs	r2, #1
 800174a:	2108      	movs	r1, #8
 800174c:	486c      	ldr	r0, [pc, #432]	; (8001900 <ESP_messageHandler+0x550>)
 800174e:	f005 f9eb 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[8] == '0' || vBedroom[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, RESET);			// Luz Dormitorio
 8001752:	4b65      	ldr	r3, [pc, #404]	; (80018e8 <ESP_messageHandler+0x538>)
 8001754:	7a1b      	ldrb	r3, [r3, #8]
 8001756:	2b30      	cmp	r3, #48	; 0x30
 8001758:	d003      	beq.n	8001762 <ESP_messageHandler+0x3b2>
 800175a:	4b6a      	ldr	r3, [pc, #424]	; (8001904 <ESP_messageHandler+0x554>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b30      	cmp	r3, #48	; 0x30
 8001760:	d105      	bne.n	800176e <ESP_messageHandler+0x3be>
 8001762:	2200      	movs	r2, #0
 8001764:	2180      	movs	r1, #128	; 0x80
 8001766:	4865      	ldr	r0, [pc, #404]	; (80018fc <ESP_messageHandler+0x54c>)
 8001768:	f005 f9de 	bl	8006b28 <HAL_GPIO_WritePin>
 800176c:	e00c      	b.n	8001788 <ESP_messageHandler+0x3d8>
		else if(vLight[8] == '1' || vBedroom[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET);
 800176e:	4b5e      	ldr	r3, [pc, #376]	; (80018e8 <ESP_messageHandler+0x538>)
 8001770:	7a1b      	ldrb	r3, [r3, #8]
 8001772:	2b31      	cmp	r3, #49	; 0x31
 8001774:	d003      	beq.n	800177e <ESP_messageHandler+0x3ce>
 8001776:	4b63      	ldr	r3, [pc, #396]	; (8001904 <ESP_messageHandler+0x554>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b31      	cmp	r3, #49	; 0x31
 800177c:	d104      	bne.n	8001788 <ESP_messageHandler+0x3d8>
 800177e:	2201      	movs	r2, #1
 8001780:	2180      	movs	r1, #128	; 0x80
 8001782:	485e      	ldr	r0, [pc, #376]	; (80018fc <ESP_messageHandler+0x54c>)
 8001784:	f005 f9d0 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[9] == '0' || vBedroom[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET); 		// Luz Mesita Izq
 8001788:	4b57      	ldr	r3, [pc, #348]	; (80018e8 <ESP_messageHandler+0x538>)
 800178a:	7a5b      	ldrb	r3, [r3, #9]
 800178c:	2b30      	cmp	r3, #48	; 0x30
 800178e:	d003      	beq.n	8001798 <ESP_messageHandler+0x3e8>
 8001790:	4b5c      	ldr	r3, [pc, #368]	; (8001904 <ESP_messageHandler+0x554>)
 8001792:	785b      	ldrb	r3, [r3, #1]
 8001794:	2b30      	cmp	r3, #48	; 0x30
 8001796:	d105      	bne.n	80017a4 <ESP_messageHandler+0x3f4>
 8001798:	2200      	movs	r2, #0
 800179a:	2110      	movs	r1, #16
 800179c:	4858      	ldr	r0, [pc, #352]	; (8001900 <ESP_messageHandler+0x550>)
 800179e:	f005 f9c3 	bl	8006b28 <HAL_GPIO_WritePin>
 80017a2:	e00c      	b.n	80017be <ESP_messageHandler+0x40e>
		else if(vLight[9] == '1' || vBedroom[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80017a4:	4b50      	ldr	r3, [pc, #320]	; (80018e8 <ESP_messageHandler+0x538>)
 80017a6:	7a5b      	ldrb	r3, [r3, #9]
 80017a8:	2b31      	cmp	r3, #49	; 0x31
 80017aa:	d003      	beq.n	80017b4 <ESP_messageHandler+0x404>
 80017ac:	4b55      	ldr	r3, [pc, #340]	; (8001904 <ESP_messageHandler+0x554>)
 80017ae:	785b      	ldrb	r3, [r3, #1]
 80017b0:	2b31      	cmp	r3, #49	; 0x31
 80017b2:	d104      	bne.n	80017be <ESP_messageHandler+0x40e>
 80017b4:	2201      	movs	r2, #1
 80017b6:	2110      	movs	r1, #16
 80017b8:	4851      	ldr	r0, [pc, #324]	; (8001900 <ESP_messageHandler+0x550>)
 80017ba:	f005 f9b5 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[10] == '0' || vBedroom[2] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET); 		// Luz Mesita Dch
 80017be:	4b4a      	ldr	r3, [pc, #296]	; (80018e8 <ESP_messageHandler+0x538>)
 80017c0:	7a9b      	ldrb	r3, [r3, #10]
 80017c2:	2b30      	cmp	r3, #48	; 0x30
 80017c4:	d003      	beq.n	80017ce <ESP_messageHandler+0x41e>
 80017c6:	4b4f      	ldr	r3, [pc, #316]	; (8001904 <ESP_messageHandler+0x554>)
 80017c8:	789b      	ldrb	r3, [r3, #2]
 80017ca:	2b30      	cmp	r3, #48	; 0x30
 80017cc:	d105      	bne.n	80017da <ESP_messageHandler+0x42a>
 80017ce:	2200      	movs	r2, #0
 80017d0:	2140      	movs	r1, #64	; 0x40
 80017d2:	484b      	ldr	r0, [pc, #300]	; (8001900 <ESP_messageHandler+0x550>)
 80017d4:	f005 f9a8 	bl	8006b28 <HAL_GPIO_WritePin>
 80017d8:	e00c      	b.n	80017f4 <ESP_messageHandler+0x444>
		else if(vLight[10] == '1' || vBedroom[2] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 80017da:	4b43      	ldr	r3, [pc, #268]	; (80018e8 <ESP_messageHandler+0x538>)
 80017dc:	7a9b      	ldrb	r3, [r3, #10]
 80017de:	2b31      	cmp	r3, #49	; 0x31
 80017e0:	d003      	beq.n	80017ea <ESP_messageHandler+0x43a>
 80017e2:	4b48      	ldr	r3, [pc, #288]	; (8001904 <ESP_messageHandler+0x554>)
 80017e4:	789b      	ldrb	r3, [r3, #2]
 80017e6:	2b31      	cmp	r3, #49	; 0x31
 80017e8:	d104      	bne.n	80017f4 <ESP_messageHandler+0x444>
 80017ea:	2201      	movs	r2, #1
 80017ec:	2140      	movs	r1, #64	; 0x40
 80017ee:	4844      	ldr	r0, [pc, #272]	; (8001900 <ESP_messageHandler+0x550>)
 80017f0:	f005 f99a 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[11] == '0' || vOffice[0] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET); 		// Luz Oficina
 80017f4:	4b3c      	ldr	r3, [pc, #240]	; (80018e8 <ESP_messageHandler+0x538>)
 80017f6:	7adb      	ldrb	r3, [r3, #11]
 80017f8:	2b30      	cmp	r3, #48	; 0x30
 80017fa:	d003      	beq.n	8001804 <ESP_messageHandler+0x454>
 80017fc:	4b42      	ldr	r3, [pc, #264]	; (8001908 <ESP_messageHandler+0x558>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b30      	cmp	r3, #48	; 0x30
 8001802:	d105      	bne.n	8001810 <ESP_messageHandler+0x460>
 8001804:	2200      	movs	r2, #0
 8001806:	2120      	movs	r1, #32
 8001808:	483d      	ldr	r0, [pc, #244]	; (8001900 <ESP_messageHandler+0x550>)
 800180a:	f005 f98d 	bl	8006b28 <HAL_GPIO_WritePin>
 800180e:	e00c      	b.n	800182a <ESP_messageHandler+0x47a>
		else if(vLight[11] == '1' || vOffice[0] == '1') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001810:	4b35      	ldr	r3, [pc, #212]	; (80018e8 <ESP_messageHandler+0x538>)
 8001812:	7adb      	ldrb	r3, [r3, #11]
 8001814:	2b31      	cmp	r3, #49	; 0x31
 8001816:	d003      	beq.n	8001820 <ESP_messageHandler+0x470>
 8001818:	4b3b      	ldr	r3, [pc, #236]	; (8001908 <ESP_messageHandler+0x558>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b31      	cmp	r3, #49	; 0x31
 800181e:	d104      	bne.n	800182a <ESP_messageHandler+0x47a>
 8001820:	2201      	movs	r2, #1
 8001822:	2120      	movs	r1, #32
 8001824:	4836      	ldr	r0, [pc, #216]	; (8001900 <ESP_messageHandler+0x550>)
 8001826:	f005 f97f 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[12] == '0' || vOffice[1] == '0'){ 													// Luz Gaming
 800182a:	4b2f      	ldr	r3, [pc, #188]	; (80018e8 <ESP_messageHandler+0x538>)
 800182c:	7b1b      	ldrb	r3, [r3, #12]
 800182e:	2b30      	cmp	r3, #48	; 0x30
 8001830:	d003      	beq.n	800183a <ESP_messageHandler+0x48a>
 8001832:	4b35      	ldr	r3, [pc, #212]	; (8001908 <ESP_messageHandler+0x558>)
 8001834:	785b      	ldrb	r3, [r3, #1]
 8001836:	2b30      	cmp	r3, #48	; 0x30
 8001838:	d10c      	bne.n	8001854 <ESP_messageHandler+0x4a4>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800183a:	4b34      	ldr	r3, [pc, #208]	; (800190c <ESP_messageHandler+0x55c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2200      	movs	r2, #0
 8001840:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001842:	4b32      	ldr	r3, [pc, #200]	; (800190c <ESP_messageHandler+0x55c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2200      	movs	r2, #0
 8001848:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800184a:	4b30      	ldr	r3, [pc, #192]	; (800190c <ESP_messageHandler+0x55c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2200      	movs	r2, #0
 8001850:	63da      	str	r2, [r3, #60]	; 0x3c
 8001852:	e03a      	b.n	80018ca <ESP_messageHandler+0x51a>
		}
		else if(vLight[12] == '1' || vOffice[1] == '1'){
 8001854:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <ESP_messageHandler+0x538>)
 8001856:	7b1b      	ldrb	r3, [r3, #12]
 8001858:	2b31      	cmp	r3, #49	; 0x31
 800185a:	d003      	beq.n	8001864 <ESP_messageHandler+0x4b4>
 800185c:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <ESP_messageHandler+0x558>)
 800185e:	785b      	ldrb	r3, [r3, #1]
 8001860:	2b31      	cmp	r3, #49	; 0x31
 8001862:	d132      	bne.n	80018ca <ESP_messageHandler+0x51a>

			//uint8_t r, g, b;

			r = rgb_value (vLight[13],vLight[14],vLight[15]);
 8001864:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <ESP_messageHandler+0x538>)
 8001866:	7b5b      	ldrb	r3, [r3, #13]
 8001868:	4a1f      	ldr	r2, [pc, #124]	; (80018e8 <ESP_messageHandler+0x538>)
 800186a:	7b91      	ldrb	r1, [r2, #14]
 800186c:	4a1e      	ldr	r2, [pc, #120]	; (80018e8 <ESP_messageHandler+0x538>)
 800186e:	7bd2      	ldrb	r2, [r2, #15]
 8001870:	4618      	mov	r0, r3
 8001872:	f000 fda1 	bl	80023b8 <rgb_value>
 8001876:	4603      	mov	r3, r0
 8001878:	4a25      	ldr	r2, [pc, #148]	; (8001910 <ESP_messageHandler+0x560>)
 800187a:	6013      	str	r3, [r2, #0]
			g = rgb_value (vLight[16],vLight[17],vLight[18]);
 800187c:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <ESP_messageHandler+0x538>)
 800187e:	7c1b      	ldrb	r3, [r3, #16]
 8001880:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <ESP_messageHandler+0x538>)
 8001882:	7c51      	ldrb	r1, [r2, #17]
 8001884:	4a18      	ldr	r2, [pc, #96]	; (80018e8 <ESP_messageHandler+0x538>)
 8001886:	7c92      	ldrb	r2, [r2, #18]
 8001888:	4618      	mov	r0, r3
 800188a:	f000 fd95 	bl	80023b8 <rgb_value>
 800188e:	4603      	mov	r3, r0
 8001890:	4a20      	ldr	r2, [pc, #128]	; (8001914 <ESP_messageHandler+0x564>)
 8001892:	6013      	str	r3, [r2, #0]
			b = rgb_value (vLight[19],vLight[20],vLight[21]);
 8001894:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <ESP_messageHandler+0x538>)
 8001896:	7cdb      	ldrb	r3, [r3, #19]
 8001898:	4a13      	ldr	r2, [pc, #76]	; (80018e8 <ESP_messageHandler+0x538>)
 800189a:	7d11      	ldrb	r1, [r2, #20]
 800189c:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <ESP_messageHandler+0x538>)
 800189e:	7d52      	ldrb	r2, [r2, #21]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 fd89 	bl	80023b8 <rgb_value>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4a1b      	ldr	r2, [pc, #108]	; (8001918 <ESP_messageHandler+0x568>)
 80018aa:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, g); // PA8
 80018ac:	4b19      	ldr	r3, [pc, #100]	; (8001914 <ESP_messageHandler+0x564>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b16      	ldr	r3, [pc, #88]	; (800190c <ESP_messageHandler+0x55c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, r); // PA9
 80018b6:	4b16      	ldr	r3, [pc, #88]	; (8001910 <ESP_messageHandler+0x560>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <ESP_messageHandler+0x55c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b); // PA10
 80018c0:	4b15      	ldr	r3, [pc, #84]	; (8001918 <ESP_messageHandler+0x568>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <ESP_messageHandler+0x55c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		if(vLight[22] == '0' || vGarage[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET); 		// Luz Garaje
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <ESP_messageHandler+0x538>)
 80018cc:	7d9b      	ldrb	r3, [r3, #22]
 80018ce:	2b30      	cmp	r3, #48	; 0x30
 80018d0:	d003      	beq.n	80018da <ESP_messageHandler+0x52a>
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <ESP_messageHandler+0x56c>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b30      	cmp	r3, #48	; 0x30
 80018d8:	d122      	bne.n	8001920 <ESP_messageHandler+0x570>
 80018da:	2200      	movs	r2, #0
 80018dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018e0:	4803      	ldr	r0, [pc, #12]	; (80018f0 <ESP_messageHandler+0x540>)
 80018e2:	f005 f921 	bl	8006b28 <HAL_GPIO_WritePin>
 80018e6:	e029      	b.n	800193c <ESP_messageHandler+0x58c>
 80018e8:	20000924 	.word	0x20000924
 80018ec:	20000964 	.word	0x20000964
 80018f0:	40020800 	.word	0x40020800
 80018f4:	40020000 	.word	0x40020000
 80018f8:	20000948 	.word	0x20000948
 80018fc:	40020c00 	.word	0x40020c00
 8001900:	40020400 	.word	0x40020400
 8001904:	20000974 	.word	0x20000974
 8001908:	20000950 	.word	0x20000950
 800190c:	20000f4c 	.word	0x20000f4c
 8001910:	20000990 	.word	0x20000990
 8001914:	2000098c 	.word	0x2000098c
 8001918:	20000984 	.word	0x20000984
 800191c:	20000968 	.word	0x20000968
		else if(vLight[22] == '1' || vGarage[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 8001920:	4b9f      	ldr	r3, [pc, #636]	; (8001ba0 <ESP_messageHandler+0x7f0>)
 8001922:	7d9b      	ldrb	r3, [r3, #22]
 8001924:	2b31      	cmp	r3, #49	; 0x31
 8001926:	d003      	beq.n	8001930 <ESP_messageHandler+0x580>
 8001928:	4b9e      	ldr	r3, [pc, #632]	; (8001ba4 <ESP_messageHandler+0x7f4>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b31      	cmp	r3, #49	; 0x31
 800192e:	d105      	bne.n	800193c <ESP_messageHandler+0x58c>
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001936:	489c      	ldr	r0, [pc, #624]	; (8001ba8 <ESP_messageHandler+0x7f8>)
 8001938:	f005 f8f6 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[23] == '0' || vOutside[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET); 		// Luz Jardín
 800193c:	4b98      	ldr	r3, [pc, #608]	; (8001ba0 <ESP_messageHandler+0x7f0>)
 800193e:	7ddb      	ldrb	r3, [r3, #23]
 8001940:	2b30      	cmp	r3, #48	; 0x30
 8001942:	d003      	beq.n	800194c <ESP_messageHandler+0x59c>
 8001944:	4b99      	ldr	r3, [pc, #612]	; (8001bac <ESP_messageHandler+0x7fc>)
 8001946:	78db      	ldrb	r3, [r3, #3]
 8001948:	2b30      	cmp	r3, #48	; 0x30
 800194a:	d105      	bne.n	8001958 <ESP_messageHandler+0x5a8>
 800194c:	2200      	movs	r2, #0
 800194e:	2104      	movs	r1, #4
 8001950:	4897      	ldr	r0, [pc, #604]	; (8001bb0 <ESP_messageHandler+0x800>)
 8001952:	f005 f8e9 	bl	8006b28 <HAL_GPIO_WritePin>
 8001956:	e00c      	b.n	8001972 <ESP_messageHandler+0x5c2>
		else if(vLight[23] == '1' || vOutside[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8001958:	4b91      	ldr	r3, [pc, #580]	; (8001ba0 <ESP_messageHandler+0x7f0>)
 800195a:	7ddb      	ldrb	r3, [r3, #23]
 800195c:	2b31      	cmp	r3, #49	; 0x31
 800195e:	d003      	beq.n	8001968 <ESP_messageHandler+0x5b8>
 8001960:	4b92      	ldr	r3, [pc, #584]	; (8001bac <ESP_messageHandler+0x7fc>)
 8001962:	78db      	ldrb	r3, [r3, #3]
 8001964:	2b31      	cmp	r3, #49	; 0x31
 8001966:	d104      	bne.n	8001972 <ESP_messageHandler+0x5c2>
 8001968:	2201      	movs	r2, #1
 800196a:	2104      	movs	r1, #4
 800196c:	4890      	ldr	r0, [pc, #576]	; (8001bb0 <ESP_messageHandler+0x800>)
 800196e:	f005 f8db 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[24] == '0' || vOutside[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET); 		// Luz Porche
 8001972:	4b8b      	ldr	r3, [pc, #556]	; (8001ba0 <ESP_messageHandler+0x7f0>)
 8001974:	7e1b      	ldrb	r3, [r3, #24]
 8001976:	2b30      	cmp	r3, #48	; 0x30
 8001978:	d003      	beq.n	8001982 <ESP_messageHandler+0x5d2>
 800197a:	4b8c      	ldr	r3, [pc, #560]	; (8001bac <ESP_messageHandler+0x7fc>)
 800197c:	789b      	ldrb	r3, [r3, #2]
 800197e:	2b30      	cmp	r3, #48	; 0x30
 8001980:	d105      	bne.n	800198e <ESP_messageHandler+0x5de>
 8001982:	2200      	movs	r2, #0
 8001984:	2110      	movs	r1, #16
 8001986:	488a      	ldr	r0, [pc, #552]	; (8001bb0 <ESP_messageHandler+0x800>)
 8001988:	f005 f8ce 	bl	8006b28 <HAL_GPIO_WritePin>
 800198c:	e00c      	b.n	80019a8 <ESP_messageHandler+0x5f8>
		else if(vLight[24] == '1' || vOutside[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 800198e:	4b84      	ldr	r3, [pc, #528]	; (8001ba0 <ESP_messageHandler+0x7f0>)
 8001990:	7e1b      	ldrb	r3, [r3, #24]
 8001992:	2b31      	cmp	r3, #49	; 0x31
 8001994:	d003      	beq.n	800199e <ESP_messageHandler+0x5ee>
 8001996:	4b85      	ldr	r3, [pc, #532]	; (8001bac <ESP_messageHandler+0x7fc>)
 8001998:	789b      	ldrb	r3, [r3, #2]
 800199a:	2b31      	cmp	r3, #49	; 0x31
 800199c:	d104      	bne.n	80019a8 <ESP_messageHandler+0x5f8>
 800199e:	2201      	movs	r2, #1
 80019a0:	2110      	movs	r1, #16
 80019a2:	4883      	ldr	r0, [pc, #524]	; (8001bb0 <ESP_messageHandler+0x800>)
 80019a4:	f005 f8c0 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[25] == '0' || vOutside[1] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET); 		// Luz Tendedero
 80019a8:	4b7d      	ldr	r3, [pc, #500]	; (8001ba0 <ESP_messageHandler+0x7f0>)
 80019aa:	7e5b      	ldrb	r3, [r3, #25]
 80019ac:	2b30      	cmp	r3, #48	; 0x30
 80019ae:	d003      	beq.n	80019b8 <ESP_messageHandler+0x608>
 80019b0:	4b7e      	ldr	r3, [pc, #504]	; (8001bac <ESP_messageHandler+0x7fc>)
 80019b2:	785b      	ldrb	r3, [r3, #1]
 80019b4:	2b30      	cmp	r3, #48	; 0x30
 80019b6:	d106      	bne.n	80019c6 <ESP_messageHandler+0x616>
 80019b8:	2200      	movs	r2, #0
 80019ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019be:	487a      	ldr	r0, [pc, #488]	; (8001ba8 <ESP_messageHandler+0x7f8>)
 80019c0:	f005 f8b2 	bl	8006b28 <HAL_GPIO_WritePin>
 80019c4:	e00d      	b.n	80019e2 <ESP_messageHandler+0x632>
		else if(vLight[25] == '1' || vOutside[1] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 80019c6:	4b76      	ldr	r3, [pc, #472]	; (8001ba0 <ESP_messageHandler+0x7f0>)
 80019c8:	7e5b      	ldrb	r3, [r3, #25]
 80019ca:	2b31      	cmp	r3, #49	; 0x31
 80019cc:	d003      	beq.n	80019d6 <ESP_messageHandler+0x626>
 80019ce:	4b77      	ldr	r3, [pc, #476]	; (8001bac <ESP_messageHandler+0x7fc>)
 80019d0:	785b      	ldrb	r3, [r3, #1]
 80019d2:	2b31      	cmp	r3, #49	; 0x31
 80019d4:	d105      	bne.n	80019e2 <ESP_messageHandler+0x632>
 80019d6:	2201      	movs	r2, #1
 80019d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019dc:	4872      	ldr	r0, [pc, #456]	; (8001ba8 <ESP_messageHandler+0x7f8>)
 80019de:	f005 f8a3 	bl	8006b28 <HAL_GPIO_WritePin>
	}

	// DOORS & WINDOWS
	if (fragment[0] == 'p'){
 80019e2:	4b74      	ldr	r3, [pc, #464]	; (8001bb4 <ESP_messageHandler+0x804>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b70      	cmp	r3, #112	; 0x70
 80019e8:	d107      	bne.n	80019fa <ESP_messageHandler+0x64a>
		UART_send("PUERTAS Y VENTANAS (PUERTA PARCELA)\n", PC_UART);
 80019ea:	4973      	ldr	r1, [pc, #460]	; (8001bb8 <ESP_messageHandler+0x808>)
 80019ec:	4873      	ldr	r0, [pc, #460]	; (8001bbc <ESP_messageHandler+0x80c>)
 80019ee:	f001 f97f 	bl	8002cf0 <UART_send>
		vWindow[0] = textrc[28]; 	// P. Parcela
 80019f2:	4b73      	ldr	r3, [pc, #460]	; (8001bc0 <ESP_messageHandler+0x810>)
 80019f4:	7f1a      	ldrb	r2, [r3, #28]
 80019f6:	4b73      	ldr	r3, [pc, #460]	; (8001bc4 <ESP_messageHandler+0x814>)
 80019f8:	701a      	strb	r2, [r3, #0]
	}
	if (fragment[0] == 'g'){
 80019fa:	4b6e      	ldr	r3, [pc, #440]	; (8001bb4 <ESP_messageHandler+0x804>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b67      	cmp	r3, #103	; 0x67
 8001a00:	d107      	bne.n	8001a12 <ESP_messageHandler+0x662>
		UART_send("PUERTAS Y VENTANAS (PUERTA GARAJE)\n", PC_UART);
 8001a02:	496d      	ldr	r1, [pc, #436]	; (8001bb8 <ESP_messageHandler+0x808>)
 8001a04:	4870      	ldr	r0, [pc, #448]	; (8001bc8 <ESP_messageHandler+0x818>)
 8001a06:	f001 f973 	bl	8002cf0 <UART_send>
		vWindow[1] = textrc[31]; 	// P. Garaje
 8001a0a:	4b6d      	ldr	r3, [pc, #436]	; (8001bc0 <ESP_messageHandler+0x810>)
 8001a0c:	7fda      	ldrb	r2, [r3, #31]
 8001a0e:	4b6d      	ldr	r3, [pc, #436]	; (8001bc4 <ESP_messageHandler+0x814>)
 8001a10:	705a      	strb	r2, [r3, #1]
	}
	if (fragment[0] == 'l'){
 8001a12:	4b68      	ldr	r3, [pc, #416]	; (8001bb4 <ESP_messageHandler+0x804>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b6c      	cmp	r3, #108	; 0x6c
 8001a18:	d108      	bne.n	8001a2c <ESP_messageHandler+0x67c>
		UART_send("PUERTAS Y VENTANAS (VENTANA SALÓN)\n", PC_UART);
 8001a1a:	4967      	ldr	r1, [pc, #412]	; (8001bb8 <ESP_messageHandler+0x808>)
 8001a1c:	486b      	ldr	r0, [pc, #428]	; (8001bcc <ESP_messageHandler+0x81c>)
 8001a1e:	f001 f967 	bl	8002cf0 <UART_send>
		vWindow[2] = textrc[34]; 	// V. Salón
 8001a22:	4b67      	ldr	r3, [pc, #412]	; (8001bc0 <ESP_messageHandler+0x810>)
 8001a24:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001a28:	4b66      	ldr	r3, [pc, #408]	; (8001bc4 <ESP_messageHandler+0x814>)
 8001a2a:	709a      	strb	r2, [r3, #2]
	}
	if (fragment[0] == 'd'){
 8001a2c:	4b61      	ldr	r3, [pc, #388]	; (8001bb4 <ESP_messageHandler+0x804>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b64      	cmp	r3, #100	; 0x64
 8001a32:	d108      	bne.n	8001a46 <ESP_messageHandler+0x696>
		UART_send("PUERTAS Y VENTANAS (VENTANA DORMITORIO)\n", PC_UART);
 8001a34:	4960      	ldr	r1, [pc, #384]	; (8001bb8 <ESP_messageHandler+0x808>)
 8001a36:	4866      	ldr	r0, [pc, #408]	; (8001bd0 <ESP_messageHandler+0x820>)
 8001a38:	f001 f95a 	bl	8002cf0 <UART_send>
		vWindow[3] = textrc[37]; 	// V. Dormitorio
 8001a3c:	4b60      	ldr	r3, [pc, #384]	; (8001bc0 <ESP_messageHandler+0x810>)
 8001a3e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001a42:	4b60      	ldr	r3, [pc, #384]	; (8001bc4 <ESP_messageHandler+0x814>)
 8001a44:	70da      	strb	r2, [r3, #3]
	}
	if (fragment[0] == 'o'){
 8001a46:	4b5b      	ldr	r3, [pc, #364]	; (8001bb4 <ESP_messageHandler+0x804>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b6f      	cmp	r3, #111	; 0x6f
 8001a4c:	d108      	bne.n	8001a60 <ESP_messageHandler+0x6b0>
		UART_send("PUERTAS Y VENTANAS (VENTANA OFICINA)\n", PC_UART);
 8001a4e:	495a      	ldr	r1, [pc, #360]	; (8001bb8 <ESP_messageHandler+0x808>)
 8001a50:	4860      	ldr	r0, [pc, #384]	; (8001bd4 <ESP_messageHandler+0x824>)
 8001a52:	f001 f94d 	bl	8002cf0 <UART_send>
		vWindow[4] = textrc[40]; 	// V. Oficina
 8001a56:	4b5a      	ldr	r3, [pc, #360]	; (8001bc0 <ESP_messageHandler+0x810>)
 8001a58:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001a5c:	4b59      	ldr	r3, [pc, #356]	; (8001bc4 <ESP_messageHandler+0x814>)
 8001a5e:	711a      	strb	r2, [r3, #4]
	}

	// WEATHER
	if (fragment[0] == 't'){
 8001a60:	4b54      	ldr	r3, [pc, #336]	; (8001bb4 <ESP_messageHandler+0x804>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b74      	cmp	r3, #116	; 0x74
 8001a66:	d133      	bne.n	8001ad0 <ESP_messageHandler+0x720>
		UART_send("TIEMPO\n", PC_UART);
 8001a68:	4953      	ldr	r1, [pc, #332]	; (8001bb8 <ESP_messageHandler+0x808>)
 8001a6a:	485b      	ldr	r0, [pc, #364]	; (8001bd8 <ESP_messageHandler+0x828>)
 8001a6c:	f001 f940 	bl	8002cf0 <UART_send>
		vWeather[0] = textrc[28]; 	// Vent. Salón
 8001a70:	4b53      	ldr	r3, [pc, #332]	; (8001bc0 <ESP_messageHandler+0x810>)
 8001a72:	7f1a      	ldrb	r2, [r3, #28]
 8001a74:	4b59      	ldr	r3, [pc, #356]	; (8001bdc <ESP_messageHandler+0x82c>)
 8001a76:	701a      	strb	r2, [r3, #0]
		vWeather[1] = textrc[31]; 	// Vent. Dormitorio
 8001a78:	4b51      	ldr	r3, [pc, #324]	; (8001bc0 <ESP_messageHandler+0x810>)
 8001a7a:	7fda      	ldrb	r2, [r3, #31]
 8001a7c:	4b57      	ldr	r3, [pc, #348]	; (8001bdc <ESP_messageHandler+0x82c>)
 8001a7e:	705a      	strb	r2, [r3, #1]
		vWeather[2] = textrc[34]; 	// Vent. Oficina
 8001a80:	4b4f      	ldr	r3, [pc, #316]	; (8001bc0 <ESP_messageHandler+0x810>)
 8001a82:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001a86:	4b55      	ldr	r3, [pc, #340]	; (8001bdc <ESP_messageHandler+0x82c>)
 8001a88:	709a      	strb	r2, [r3, #2]
		vWeather[3] = textrc[37]; 	// Calefacción
 8001a8a:	4b4d      	ldr	r3, [pc, #308]	; (8001bc0 <ESP_messageHandler+0x810>)
 8001a8c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001a90:	4b52      	ldr	r3, [pc, #328]	; (8001bdc <ESP_messageHandler+0x82c>)
 8001a92:	70da      	strb	r2, [r3, #3]
		vWeather[4] = textrc[40]; 	// Automático
 8001a94:	4b4a      	ldr	r3, [pc, #296]	; (8001bc0 <ESP_messageHandler+0x810>)
 8001a96:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001a9a:	4b50      	ldr	r3, [pc, #320]	; (8001bdc <ESP_messageHandler+0x82c>)
 8001a9c:	711a      	strb	r2, [r3, #4]

		if(vWeather[4] == '0'){
 8001a9e:	4b4f      	ldr	r3, [pc, #316]	; (8001bdc <ESP_messageHandler+0x82c>)
 8001aa0:	791b      	ldrb	r3, [r3, #4]
 8001aa2:	2b30      	cmp	r3, #48	; 0x30
 8001aa4:	d114      	bne.n	8001ad0 <ESP_messageHandler+0x720>
			if(vWeather[3] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);		// Calefacción
 8001aa6:	4b4d      	ldr	r3, [pc, #308]	; (8001bdc <ESP_messageHandler+0x82c>)
 8001aa8:	78db      	ldrb	r3, [r3, #3]
 8001aaa:	2b30      	cmp	r3, #48	; 0x30
 8001aac:	d106      	bne.n	8001abc <ESP_messageHandler+0x70c>
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ab4:	484a      	ldr	r0, [pc, #296]	; (8001be0 <ESP_messageHandler+0x830>)
 8001ab6:	f005 f837 	bl	8006b28 <HAL_GPIO_WritePin>
 8001aba:	e009      	b.n	8001ad0 <ESP_messageHandler+0x720>
			else if(vWeather[3] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 8001abc:	4b47      	ldr	r3, [pc, #284]	; (8001bdc <ESP_messageHandler+0x82c>)
 8001abe:	78db      	ldrb	r3, [r3, #3]
 8001ac0:	2b31      	cmp	r3, #49	; 0x31
 8001ac2:	d105      	bne.n	8001ad0 <ESP_messageHandler+0x720>
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aca:	4845      	ldr	r0, [pc, #276]	; (8001be0 <ESP_messageHandler+0x830>)
 8001acc:	f005 f82c 	bl	8006b28 <HAL_GPIO_WritePin>
		}
    }

	// OUTSIDE
	if (fragment[0] == 'e'){
 8001ad0:	4b38      	ldr	r3, [pc, #224]	; (8001bb4 <ESP_messageHandler+0x804>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b65      	cmp	r3, #101	; 0x65
 8001ad6:	f040 8094 	bne.w	8001c02 <ESP_messageHandler+0x852>
		UART_send("LUCES (EXTERIOR)\n", PC_UART);
 8001ada:	4937      	ldr	r1, [pc, #220]	; (8001bb8 <ESP_messageHandler+0x808>)
 8001adc:	4841      	ldr	r0, [pc, #260]	; (8001be4 <ESP_messageHandler+0x834>)
 8001ade:	f001 f907 	bl	8002cf0 <UART_send>
		//vExt[0] = textrc[28]; 	// Toldo Tendedero
		vOutside[1] = textrc[31]; 	// Luz Tendedero
 8001ae2:	4b37      	ldr	r3, [pc, #220]	; (8001bc0 <ESP_messageHandler+0x810>)
 8001ae4:	7fda      	ldrb	r2, [r3, #31]
 8001ae6:	4b31      	ldr	r3, [pc, #196]	; (8001bac <ESP_messageHandler+0x7fc>)
 8001ae8:	705a      	strb	r2, [r3, #1]
		vOutside[2] = textrc[34]; 	// Luz Porche
 8001aea:	4b35      	ldr	r3, [pc, #212]	; (8001bc0 <ESP_messageHandler+0x810>)
 8001aec:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001af0:	4b2e      	ldr	r3, [pc, #184]	; (8001bac <ESP_messageHandler+0x7fc>)
 8001af2:	709a      	strb	r2, [r3, #2]
		vOutside[3] = textrc[37]; 	// Luz Jardín
 8001af4:	4b32      	ldr	r3, [pc, #200]	; (8001bc0 <ESP_messageHandler+0x810>)
 8001af6:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001afa:	4b2c      	ldr	r3, [pc, #176]	; (8001bac <ESP_messageHandler+0x7fc>)
 8001afc:	70da      	strb	r2, [r3, #3]
		//vExt[4] = textrc[40]; 	// Puerta Parcela
		vOutside[5] = textrc[43]; 	// Automático
 8001afe:	4b30      	ldr	r3, [pc, #192]	; (8001bc0 <ESP_messageHandler+0x810>)
 8001b00:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8001b04:	4b29      	ldr	r3, [pc, #164]	; (8001bac <ESP_messageHandler+0x7fc>)
 8001b06:	715a      	strb	r2, [r3, #5]
		vOutside[6] = textrc[46]; 	// Ropa tendida
 8001b08:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <ESP_messageHandler+0x810>)
 8001b0a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8001b0e:	4b27      	ldr	r3, [pc, #156]	; (8001bac <ESP_messageHandler+0x7fc>)
 8001b10:	719a      	strb	r2, [r3, #6]

		if(vLight[25] == '0' || vOutside[1] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET); 		// Luz Tendedero
 8001b12:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <ESP_messageHandler+0x7f0>)
 8001b14:	7e5b      	ldrb	r3, [r3, #25]
 8001b16:	2b30      	cmp	r3, #48	; 0x30
 8001b18:	d003      	beq.n	8001b22 <ESP_messageHandler+0x772>
 8001b1a:	4b24      	ldr	r3, [pc, #144]	; (8001bac <ESP_messageHandler+0x7fc>)
 8001b1c:	785b      	ldrb	r3, [r3, #1]
 8001b1e:	2b30      	cmp	r3, #48	; 0x30
 8001b20:	d106      	bne.n	8001b30 <ESP_messageHandler+0x780>
 8001b22:	2200      	movs	r2, #0
 8001b24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b28:	481f      	ldr	r0, [pc, #124]	; (8001ba8 <ESP_messageHandler+0x7f8>)
 8001b2a:	f004 fffd 	bl	8006b28 <HAL_GPIO_WritePin>
 8001b2e:	e00d      	b.n	8001b4c <ESP_messageHandler+0x79c>
		else if(vLight[25] == '1' || vOutside[1] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8001b30:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <ESP_messageHandler+0x7f0>)
 8001b32:	7e5b      	ldrb	r3, [r3, #25]
 8001b34:	2b31      	cmp	r3, #49	; 0x31
 8001b36:	d003      	beq.n	8001b40 <ESP_messageHandler+0x790>
 8001b38:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <ESP_messageHandler+0x7fc>)
 8001b3a:	785b      	ldrb	r3, [r3, #1]
 8001b3c:	2b31      	cmp	r3, #49	; 0x31
 8001b3e:	d105      	bne.n	8001b4c <ESP_messageHandler+0x79c>
 8001b40:	2201      	movs	r2, #1
 8001b42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b46:	4818      	ldr	r0, [pc, #96]	; (8001ba8 <ESP_messageHandler+0x7f8>)
 8001b48:	f004 ffee 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[24] == '0' || vOutside[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET); 		// Luz Porche
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <ESP_messageHandler+0x7f0>)
 8001b4e:	7e1b      	ldrb	r3, [r3, #24]
 8001b50:	2b30      	cmp	r3, #48	; 0x30
 8001b52:	d003      	beq.n	8001b5c <ESP_messageHandler+0x7ac>
 8001b54:	4b15      	ldr	r3, [pc, #84]	; (8001bac <ESP_messageHandler+0x7fc>)
 8001b56:	789b      	ldrb	r3, [r3, #2]
 8001b58:	2b30      	cmp	r3, #48	; 0x30
 8001b5a:	d105      	bne.n	8001b68 <ESP_messageHandler+0x7b8>
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2110      	movs	r1, #16
 8001b60:	4813      	ldr	r0, [pc, #76]	; (8001bb0 <ESP_messageHandler+0x800>)
 8001b62:	f004 ffe1 	bl	8006b28 <HAL_GPIO_WritePin>
 8001b66:	e00c      	b.n	8001b82 <ESP_messageHandler+0x7d2>
		else if(vLight[24] == '1' || vOutside[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 8001b68:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <ESP_messageHandler+0x7f0>)
 8001b6a:	7e1b      	ldrb	r3, [r3, #24]
 8001b6c:	2b31      	cmp	r3, #49	; 0x31
 8001b6e:	d003      	beq.n	8001b78 <ESP_messageHandler+0x7c8>
 8001b70:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <ESP_messageHandler+0x7fc>)
 8001b72:	789b      	ldrb	r3, [r3, #2]
 8001b74:	2b31      	cmp	r3, #49	; 0x31
 8001b76:	d104      	bne.n	8001b82 <ESP_messageHandler+0x7d2>
 8001b78:	2201      	movs	r2, #1
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	480c      	ldr	r0, [pc, #48]	; (8001bb0 <ESP_messageHandler+0x800>)
 8001b7e:	f004 ffd3 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[23] == '0' || vOutside[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET); 		// Luz Jardín
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <ESP_messageHandler+0x7f0>)
 8001b84:	7ddb      	ldrb	r3, [r3, #23]
 8001b86:	2b30      	cmp	r3, #48	; 0x30
 8001b88:	d003      	beq.n	8001b92 <ESP_messageHandler+0x7e2>
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <ESP_messageHandler+0x7fc>)
 8001b8c:	78db      	ldrb	r3, [r3, #3]
 8001b8e:	2b30      	cmp	r3, #48	; 0x30
 8001b90:	d12a      	bne.n	8001be8 <ESP_messageHandler+0x838>
 8001b92:	2200      	movs	r2, #0
 8001b94:	2104      	movs	r1, #4
 8001b96:	4806      	ldr	r0, [pc, #24]	; (8001bb0 <ESP_messageHandler+0x800>)
 8001b98:	f004 ffc6 	bl	8006b28 <HAL_GPIO_WritePin>
 8001b9c:	e031      	b.n	8001c02 <ESP_messageHandler+0x852>
 8001b9e:	bf00      	nop
 8001ba0:	20000924 	.word	0x20000924
 8001ba4:	20000968 	.word	0x20000968
 8001ba8:	40020800 	.word	0x40020800
 8001bac:	2000095c 	.word	0x2000095c
 8001bb0:	40020c00 	.word	0x40020c00
 8001bb4:	200009e4 	.word	0x200009e4
 8001bb8:	20000fdc 	.word	0x20000fdc
 8001bbc:	0800ab40 	.word	0x0800ab40
 8001bc0:	200009ec 	.word	0x200009ec
 8001bc4:	2000091c 	.word	0x2000091c
 8001bc8:	0800ab68 	.word	0x0800ab68
 8001bcc:	0800ab8c 	.word	0x0800ab8c
 8001bd0:	0800abb4 	.word	0x0800abb4
 8001bd4:	0800abe0 	.word	0x0800abe0
 8001bd8:	0800ac08 	.word	0x0800ac08
 8001bdc:	20000940 	.word	0x20000940
 8001be0:	40020400 	.word	0x40020400
 8001be4:	0800ac10 	.word	0x0800ac10
		else if(vLight[23] == '1' || vOutside[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8001be8:	4b9c      	ldr	r3, [pc, #624]	; (8001e5c <ESP_messageHandler+0xaac>)
 8001bea:	7ddb      	ldrb	r3, [r3, #23]
 8001bec:	2b31      	cmp	r3, #49	; 0x31
 8001bee:	d003      	beq.n	8001bf8 <ESP_messageHandler+0x848>
 8001bf0:	4b9b      	ldr	r3, [pc, #620]	; (8001e60 <ESP_messageHandler+0xab0>)
 8001bf2:	78db      	ldrb	r3, [r3, #3]
 8001bf4:	2b31      	cmp	r3, #49	; 0x31
 8001bf6:	d104      	bne.n	8001c02 <ESP_messageHandler+0x852>
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	2104      	movs	r1, #4
 8001bfc:	4899      	ldr	r0, [pc, #612]	; (8001e64 <ESP_messageHandler+0xab4>)
 8001bfe:	f004 ff93 	bl	8006b28 <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'P'){
 8001c02:	4b99      	ldr	r3, [pc, #612]	; (8001e68 <ESP_messageHandler+0xab8>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b50      	cmp	r3, #80	; 0x50
 8001c08:	d108      	bne.n	8001c1c <ESP_messageHandler+0x86c>
		UART_send("PARCELA (EXTERIOR)\n", PC_UART);
 8001c0a:	4998      	ldr	r1, [pc, #608]	; (8001e6c <ESP_messageHandler+0xabc>)
 8001c0c:	4898      	ldr	r0, [pc, #608]	; (8001e70 <ESP_messageHandler+0xac0>)
 8001c0e:	f001 f86f 	bl	8002cf0 <UART_send>
		//vExt[0] = textrc[28]; 	// Toldo Tendedero
		//vExt[1] = textrc[31]; 	// Luz Tendedero
		//vExt[2] = textrc[34]; 	// Luz Porche
		//vExt[3] = textrc[37]; 	// Luz Jardín
		vOutside[4] = textrc[40]; 	// Puerta Parcela
 8001c12:	4b98      	ldr	r3, [pc, #608]	; (8001e74 <ESP_messageHandler+0xac4>)
 8001c14:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001c18:	4b91      	ldr	r3, [pc, #580]	; (8001e60 <ESP_messageHandler+0xab0>)
 8001c1a:	711a      	strb	r2, [r3, #4]
	}

	if (fragment[0] == 'R'){
 8001c1c:	4b92      	ldr	r3, [pc, #584]	; (8001e68 <ESP_messageHandler+0xab8>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b52      	cmp	r3, #82	; 0x52
 8001c22:	d107      	bne.n	8001c34 <ESP_messageHandler+0x884>
		UART_send("TENDEDERO (EXTERIOR)\n", PC_UART);
 8001c24:	4991      	ldr	r1, [pc, #580]	; (8001e6c <ESP_messageHandler+0xabc>)
 8001c26:	4894      	ldr	r0, [pc, #592]	; (8001e78 <ESP_messageHandler+0xac8>)
 8001c28:	f001 f862 	bl	8002cf0 <UART_send>
		vOutside[0] = textrc[28]; 	// Toldo Tendedero
 8001c2c:	4b91      	ldr	r3, [pc, #580]	; (8001e74 <ESP_messageHandler+0xac4>)
 8001c2e:	7f1a      	ldrb	r2, [r3, #28]
 8001c30:	4b8b      	ldr	r3, [pc, #556]	; (8001e60 <ESP_messageHandler+0xab0>)
 8001c32:	701a      	strb	r2, [r3, #0]
		//vExt[3] = textrc[37]; 	// Luz Jardín
		//vExt[4] = textrc[40]; 	// Puerta Parcela
	}

	// LIVING ROOM
	if (fragment[0] == 'n'){
 8001c34:	4b8c      	ldr	r3, [pc, #560]	; (8001e68 <ESP_messageHandler+0xab8>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b6e      	cmp	r3, #110	; 0x6e
 8001c3a:	f040 809a 	bne.w	8001d72 <ESP_messageHandler+0x9c2>
		UART_send("SALON \n", PC_UART);
 8001c3e:	498b      	ldr	r1, [pc, #556]	; (8001e6c <ESP_messageHandler+0xabc>)
 8001c40:	488e      	ldr	r0, [pc, #568]	; (8001e7c <ESP_messageHandler+0xacc>)
 8001c42:	f001 f855 	bl	8002cf0 <UART_send>
		vLiving[0] = textrc[28]; 	// Televisión
 8001c46:	4b8b      	ldr	r3, [pc, #556]	; (8001e74 <ESP_messageHandler+0xac4>)
 8001c48:	7f1a      	ldrb	r2, [r3, #28]
 8001c4a:	4b8d      	ldr	r3, [pc, #564]	; (8001e80 <ESP_messageHandler+0xad0>)
 8001c4c:	701a      	strb	r2, [r3, #0]
		vLiving[1] = textrc[31]; 	// Luz Sala
 8001c4e:	4b89      	ldr	r3, [pc, #548]	; (8001e74 <ESP_messageHandler+0xac4>)
 8001c50:	7fda      	ldrb	r2, [r3, #31]
 8001c52:	4b8b      	ldr	r3, [pc, #556]	; (8001e80 <ESP_messageHandler+0xad0>)
 8001c54:	705a      	strb	r2, [r3, #1]
		vLiving[2] = textrc[34]; 	// Luz Comedor
 8001c56:	4b87      	ldr	r3, [pc, #540]	; (8001e74 <ESP_messageHandler+0xac4>)
 8001c58:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001c5c:	4b88      	ldr	r3, [pc, #544]	; (8001e80 <ESP_messageHandler+0xad0>)
 8001c5e:	709a      	strb	r2, [r3, #2]
		vLiving[3] = textrc[37]; 	// Luz Ambiente
 8001c60:	4b84      	ldr	r3, [pc, #528]	; (8001e74 <ESP_messageHandler+0xac4>)
 8001c62:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001c66:	4b86      	ldr	r3, [pc, #536]	; (8001e80 <ESP_messageHandler+0xad0>)
 8001c68:	70da      	strb	r2, [r3, #3]
		vLiving[4] = textrc[40]; 	// Luz Recibidor
 8001c6a:	4b82      	ldr	r3, [pc, #520]	; (8001e74 <ESP_messageHandler+0xac4>)
 8001c6c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001c70:	4b83      	ldr	r3, [pc, #524]	; (8001e80 <ESP_messageHandler+0xad0>)
 8001c72:	711a      	strb	r2, [r3, #4]
		//vSal[5] = textrc[43]; 	// V. Salón

		if(vLiving[0] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET); 							// Televisión
 8001c74:	4b82      	ldr	r3, [pc, #520]	; (8001e80 <ESP_messageHandler+0xad0>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b30      	cmp	r3, #48	; 0x30
 8001c7a:	d105      	bne.n	8001c88 <ESP_messageHandler+0x8d8>
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2180      	movs	r1, #128	; 0x80
 8001c80:	4880      	ldr	r0, [pc, #512]	; (8001e84 <ESP_messageHandler+0xad4>)
 8001c82:	f004 ff51 	bl	8006b28 <HAL_GPIO_WritePin>
 8001c86:	e008      	b.n	8001c9a <ESP_messageHandler+0x8ea>
		else if(vLiving[0] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 8001c88:	4b7d      	ldr	r3, [pc, #500]	; (8001e80 <ESP_messageHandler+0xad0>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b31      	cmp	r3, #49	; 0x31
 8001c8e:	d104      	bne.n	8001c9a <ESP_messageHandler+0x8ea>
 8001c90:	2201      	movs	r2, #1
 8001c92:	2180      	movs	r1, #128	; 0x80
 8001c94:	487b      	ldr	r0, [pc, #492]	; (8001e84 <ESP_messageHandler+0xad4>)
 8001c96:	f004 ff47 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[0] == '0' || vLiving[1] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, RESET); 		// Luz Sala
 8001c9a:	4b70      	ldr	r3, [pc, #448]	; (8001e5c <ESP_messageHandler+0xaac>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b30      	cmp	r3, #48	; 0x30
 8001ca0:	d003      	beq.n	8001caa <ESP_messageHandler+0x8fa>
 8001ca2:	4b77      	ldr	r3, [pc, #476]	; (8001e80 <ESP_messageHandler+0xad0>)
 8001ca4:	785b      	ldrb	r3, [r3, #1]
 8001ca6:	2b30      	cmp	r3, #48	; 0x30
 8001ca8:	d105      	bne.n	8001cb6 <ESP_messageHandler+0x906>
 8001caa:	2200      	movs	r2, #0
 8001cac:	2108      	movs	r1, #8
 8001cae:	486d      	ldr	r0, [pc, #436]	; (8001e64 <ESP_messageHandler+0xab4>)
 8001cb0:	f004 ff3a 	bl	8006b28 <HAL_GPIO_WritePin>
 8001cb4:	e00c      	b.n	8001cd0 <ESP_messageHandler+0x920>
		else if(vLight[0] == '1' || vLiving[1] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, SET);
 8001cb6:	4b69      	ldr	r3, [pc, #420]	; (8001e5c <ESP_messageHandler+0xaac>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b31      	cmp	r3, #49	; 0x31
 8001cbc:	d003      	beq.n	8001cc6 <ESP_messageHandler+0x916>
 8001cbe:	4b70      	ldr	r3, [pc, #448]	; (8001e80 <ESP_messageHandler+0xad0>)
 8001cc0:	785b      	ldrb	r3, [r3, #1]
 8001cc2:	2b31      	cmp	r3, #49	; 0x31
 8001cc4:	d104      	bne.n	8001cd0 <ESP_messageHandler+0x920>
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	2108      	movs	r1, #8
 8001cca:	4866      	ldr	r0, [pc, #408]	; (8001e64 <ESP_messageHandler+0xab4>)
 8001ccc:	f004 ff2c 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[1] == '0' || vLiving[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET); 		// Luz Comedor
 8001cd0:	4b62      	ldr	r3, [pc, #392]	; (8001e5c <ESP_messageHandler+0xaac>)
 8001cd2:	785b      	ldrb	r3, [r3, #1]
 8001cd4:	2b30      	cmp	r3, #48	; 0x30
 8001cd6:	d003      	beq.n	8001ce0 <ESP_messageHandler+0x930>
 8001cd8:	4b69      	ldr	r3, [pc, #420]	; (8001e80 <ESP_messageHandler+0xad0>)
 8001cda:	789b      	ldrb	r3, [r3, #2]
 8001cdc:	2b30      	cmp	r3, #48	; 0x30
 8001cde:	d105      	bne.n	8001cec <ESP_messageHandler+0x93c>
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2102      	movs	r1, #2
 8001ce4:	485f      	ldr	r0, [pc, #380]	; (8001e64 <ESP_messageHandler+0xab4>)
 8001ce6:	f004 ff1f 	bl	8006b28 <HAL_GPIO_WritePin>
 8001cea:	e00c      	b.n	8001d06 <ESP_messageHandler+0x956>
		else if(vLight[1] == '1' || vLiving[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, SET);
 8001cec:	4b5b      	ldr	r3, [pc, #364]	; (8001e5c <ESP_messageHandler+0xaac>)
 8001cee:	785b      	ldrb	r3, [r3, #1]
 8001cf0:	2b31      	cmp	r3, #49	; 0x31
 8001cf2:	d003      	beq.n	8001cfc <ESP_messageHandler+0x94c>
 8001cf4:	4b62      	ldr	r3, [pc, #392]	; (8001e80 <ESP_messageHandler+0xad0>)
 8001cf6:	789b      	ldrb	r3, [r3, #2]
 8001cf8:	2b31      	cmp	r3, #49	; 0x31
 8001cfa:	d104      	bne.n	8001d06 <ESP_messageHandler+0x956>
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	2102      	movs	r1, #2
 8001d00:	4858      	ldr	r0, [pc, #352]	; (8001e64 <ESP_messageHandler+0xab4>)
 8001d02:	f004 ff11 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[2] == '0' || vLiving[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, RESET); 		// Luz Ambiente
 8001d06:	4b55      	ldr	r3, [pc, #340]	; (8001e5c <ESP_messageHandler+0xaac>)
 8001d08:	789b      	ldrb	r3, [r3, #2]
 8001d0a:	2b30      	cmp	r3, #48	; 0x30
 8001d0c:	d003      	beq.n	8001d16 <ESP_messageHandler+0x966>
 8001d0e:	4b5c      	ldr	r3, [pc, #368]	; (8001e80 <ESP_messageHandler+0xad0>)
 8001d10:	78db      	ldrb	r3, [r3, #3]
 8001d12:	2b30      	cmp	r3, #48	; 0x30
 8001d14:	d105      	bne.n	8001d22 <ESP_messageHandler+0x972>
 8001d16:	2200      	movs	r2, #0
 8001d18:	2120      	movs	r1, #32
 8001d1a:	4852      	ldr	r0, [pc, #328]	; (8001e64 <ESP_messageHandler+0xab4>)
 8001d1c:	f004 ff04 	bl	8006b28 <HAL_GPIO_WritePin>
 8001d20:	e00c      	b.n	8001d3c <ESP_messageHandler+0x98c>
		else if(vLight[2] == '1' || vLiving[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, SET);
 8001d22:	4b4e      	ldr	r3, [pc, #312]	; (8001e5c <ESP_messageHandler+0xaac>)
 8001d24:	789b      	ldrb	r3, [r3, #2]
 8001d26:	2b31      	cmp	r3, #49	; 0x31
 8001d28:	d003      	beq.n	8001d32 <ESP_messageHandler+0x982>
 8001d2a:	4b55      	ldr	r3, [pc, #340]	; (8001e80 <ESP_messageHandler+0xad0>)
 8001d2c:	78db      	ldrb	r3, [r3, #3]
 8001d2e:	2b31      	cmp	r3, #49	; 0x31
 8001d30:	d104      	bne.n	8001d3c <ESP_messageHandler+0x98c>
 8001d32:	2201      	movs	r2, #1
 8001d34:	2120      	movs	r1, #32
 8001d36:	484b      	ldr	r0, [pc, #300]	; (8001e64 <ESP_messageHandler+0xab4>)
 8001d38:	f004 fef6 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[3] == '0' || vLiving[4] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET); 		// Luz Recibidor
 8001d3c:	4b47      	ldr	r3, [pc, #284]	; (8001e5c <ESP_messageHandler+0xaac>)
 8001d3e:	78db      	ldrb	r3, [r3, #3]
 8001d40:	2b30      	cmp	r3, #48	; 0x30
 8001d42:	d003      	beq.n	8001d4c <ESP_messageHandler+0x99c>
 8001d44:	4b4e      	ldr	r3, [pc, #312]	; (8001e80 <ESP_messageHandler+0xad0>)
 8001d46:	791b      	ldrb	r3, [r3, #4]
 8001d48:	2b30      	cmp	r3, #48	; 0x30
 8001d4a:	d105      	bne.n	8001d58 <ESP_messageHandler+0x9a8>
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2101      	movs	r1, #1
 8001d50:	4844      	ldr	r0, [pc, #272]	; (8001e64 <ESP_messageHandler+0xab4>)
 8001d52:	f004 fee9 	bl	8006b28 <HAL_GPIO_WritePin>
 8001d56:	e00c      	b.n	8001d72 <ESP_messageHandler+0x9c2>
		else if(vLight[3] == '1' || vLiving[4] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 8001d58:	4b40      	ldr	r3, [pc, #256]	; (8001e5c <ESP_messageHandler+0xaac>)
 8001d5a:	78db      	ldrb	r3, [r3, #3]
 8001d5c:	2b31      	cmp	r3, #49	; 0x31
 8001d5e:	d003      	beq.n	8001d68 <ESP_messageHandler+0x9b8>
 8001d60:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <ESP_messageHandler+0xad0>)
 8001d62:	791b      	ldrb	r3, [r3, #4]
 8001d64:	2b31      	cmp	r3, #49	; 0x31
 8001d66:	d104      	bne.n	8001d72 <ESP_messageHandler+0x9c2>
 8001d68:	2201      	movs	r2, #1
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	483d      	ldr	r0, [pc, #244]	; (8001e64 <ESP_messageHandler+0xab4>)
 8001d6e:	f004 fedb 	bl	8006b28 <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'N'){
 8001d72:	4b3d      	ldr	r3, [pc, #244]	; (8001e68 <ESP_messageHandler+0xab8>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b4e      	cmp	r3, #78	; 0x4e
 8001d78:	d108      	bne.n	8001d8c <ESP_messageHandler+0x9dc>
			UART_send("V. SALON (SALON) \n", PC_UART);
 8001d7a:	493c      	ldr	r1, [pc, #240]	; (8001e6c <ESP_messageHandler+0xabc>)
 8001d7c:	4842      	ldr	r0, [pc, #264]	; (8001e88 <ESP_messageHandler+0xad8>)
 8001d7e:	f000 ffb7 	bl	8002cf0 <UART_send>
			//vSal[0] = textrc[28]; 	// Televisión
			//vSal[1] = textrc[31]; 	// Luz Sala
			//vSal[2] = textrc[34]; 	// Luz Comedor
			//vSal[3] = textrc[37]; 	// Luz Ambiente
			//vSal[4] = textrc[40]; 	// Luz Recibidor
			vLiving[5] = textrc[43]; 	// V. Salón
 8001d82:	4b3c      	ldr	r3, [pc, #240]	; (8001e74 <ESP_messageHandler+0xac4>)
 8001d84:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8001d88:	4b3d      	ldr	r3, [pc, #244]	; (8001e80 <ESP_messageHandler+0xad0>)
 8001d8a:	715a      	strb	r2, [r3, #5]
	}

	// KITCHEN
	if (fragment[0] == 'c'){
 8001d8c:	4b36      	ldr	r3, [pc, #216]	; (8001e68 <ESP_messageHandler+0xab8>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b63      	cmp	r3, #99	; 0x63
 8001d92:	d145      	bne.n	8001e20 <ESP_messageHandler+0xa70>
		UART_send("COCINA \n", PC_UART);
 8001d94:	4935      	ldr	r1, [pc, #212]	; (8001e6c <ESP_messageHandler+0xabc>)
 8001d96:	483d      	ldr	r0, [pc, #244]	; (8001e8c <ESP_messageHandler+0xadc>)
 8001d98:	f000 ffaa 	bl	8002cf0 <UART_send>
		vKitchen[0] = textrc[28]; 	// Luz Cocina
 8001d9c:	4b35      	ldr	r3, [pc, #212]	; (8001e74 <ESP_messageHandler+0xac4>)
 8001d9e:	7f1a      	ldrb	r2, [r3, #28]
 8001da0:	4b3b      	ldr	r3, [pc, #236]	; (8001e90 <ESP_messageHandler+0xae0>)
 8001da2:	701a      	strb	r2, [r3, #0]
		vKitchen[1] = textrc[31]; 	// Luz Fregadero
 8001da4:	4b33      	ldr	r3, [pc, #204]	; (8001e74 <ESP_messageHandler+0xac4>)
 8001da6:	7fda      	ldrb	r2, [r3, #31]
 8001da8:	4b39      	ldr	r3, [pc, #228]	; (8001e90 <ESP_messageHandler+0xae0>)
 8001daa:	705a      	strb	r2, [r3, #1]

		if(vLight[4] == '0' || vKitchen[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET); 		// Luz Cocina
 8001dac:	4b2b      	ldr	r3, [pc, #172]	; (8001e5c <ESP_messageHandler+0xaac>)
 8001dae:	791b      	ldrb	r3, [r3, #4]
 8001db0:	2b30      	cmp	r3, #48	; 0x30
 8001db2:	d003      	beq.n	8001dbc <ESP_messageHandler+0xa0c>
 8001db4:	4b36      	ldr	r3, [pc, #216]	; (8001e90 <ESP_messageHandler+0xae0>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b30      	cmp	r3, #48	; 0x30
 8001dba:	d106      	bne.n	8001dca <ESP_messageHandler+0xa1a>
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dc2:	4834      	ldr	r0, [pc, #208]	; (8001e94 <ESP_messageHandler+0xae4>)
 8001dc4:	f004 feb0 	bl	8006b28 <HAL_GPIO_WritePin>
 8001dc8:	e00d      	b.n	8001de6 <ESP_messageHandler+0xa36>
		else if(vLight[4] == '1' || vKitchen[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 8001dca:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <ESP_messageHandler+0xaac>)
 8001dcc:	791b      	ldrb	r3, [r3, #4]
 8001dce:	2b31      	cmp	r3, #49	; 0x31
 8001dd0:	d003      	beq.n	8001dda <ESP_messageHandler+0xa2a>
 8001dd2:	4b2f      	ldr	r3, [pc, #188]	; (8001e90 <ESP_messageHandler+0xae0>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b31      	cmp	r3, #49	; 0x31
 8001dd8:	d105      	bne.n	8001de6 <ESP_messageHandler+0xa36>
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001de0:	482c      	ldr	r0, [pc, #176]	; (8001e94 <ESP_messageHandler+0xae4>)
 8001de2:	f004 fea1 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[5] == '0' || vKitchen[1] == '0') HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET); 		// Luz Fregadero
 8001de6:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <ESP_messageHandler+0xaac>)
 8001de8:	795b      	ldrb	r3, [r3, #5]
 8001dea:	2b30      	cmp	r3, #48	; 0x30
 8001dec:	d003      	beq.n	8001df6 <ESP_messageHandler+0xa46>
 8001dee:	4b28      	ldr	r3, [pc, #160]	; (8001e90 <ESP_messageHandler+0xae0>)
 8001df0:	785b      	ldrb	r3, [r3, #1]
 8001df2:	2b30      	cmp	r3, #48	; 0x30
 8001df4:	d106      	bne.n	8001e04 <ESP_messageHandler+0xa54>
 8001df6:	2200      	movs	r2, #0
 8001df8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dfc:	4826      	ldr	r0, [pc, #152]	; (8001e98 <ESP_messageHandler+0xae8>)
 8001dfe:	f004 fe93 	bl	8006b28 <HAL_GPIO_WritePin>
 8001e02:	e00d      	b.n	8001e20 <ESP_messageHandler+0xa70>
		else if(vLight[5] == '1' || vKitchen[1] == '1')HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 8001e04:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <ESP_messageHandler+0xaac>)
 8001e06:	795b      	ldrb	r3, [r3, #5]
 8001e08:	2b31      	cmp	r3, #49	; 0x31
 8001e0a:	d003      	beq.n	8001e14 <ESP_messageHandler+0xa64>
 8001e0c:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <ESP_messageHandler+0xae0>)
 8001e0e:	785b      	ldrb	r3, [r3, #1]
 8001e10:	2b31      	cmp	r3, #49	; 0x31
 8001e12:	d105      	bne.n	8001e20 <ESP_messageHandler+0xa70>
 8001e14:	2201      	movs	r2, #1
 8001e16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e1a:	481f      	ldr	r0, [pc, #124]	; (8001e98 <ESP_messageHandler+0xae8>)
 8001e1c:	f004 fe84 	bl	8006b28 <HAL_GPIO_WritePin>
	}

	// BATHROOM
	if (fragment[0] == 'b'){
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <ESP_messageHandler+0xab8>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b62      	cmp	r3, #98	; 0x62
 8001e26:	d165      	bne.n	8001ef4 <ESP_messageHandler+0xb44>
		UART_send("BAÑO \n", PC_UART);
 8001e28:	4910      	ldr	r1, [pc, #64]	; (8001e6c <ESP_messageHandler+0xabc>)
 8001e2a:	481c      	ldr	r0, [pc, #112]	; (8001e9c <ESP_messageHandler+0xaec>)
 8001e2c:	f000 ff60 	bl	8002cf0 <UART_send>
		vBath[0] = textrc[28]; 	// Luz Baño
 8001e30:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <ESP_messageHandler+0xac4>)
 8001e32:	7f1a      	ldrb	r2, [r3, #28]
 8001e34:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <ESP_messageHandler+0xaf0>)
 8001e36:	701a      	strb	r2, [r3, #0]
		vBath[1] = textrc[31]; 	// Luz Espejo
 8001e38:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <ESP_messageHandler+0xac4>)
 8001e3a:	7fda      	ldrb	r2, [r3, #31]
 8001e3c:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <ESP_messageHandler+0xaf0>)
 8001e3e:	705a      	strb	r2, [r3, #1]

		if(vLight[6] == '0' || vBath[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, RESET); 		// Luz Baño
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <ESP_messageHandler+0xaac>)
 8001e42:	799b      	ldrb	r3, [r3, #6]
 8001e44:	2b30      	cmp	r3, #48	; 0x30
 8001e46:	d003      	beq.n	8001e50 <ESP_messageHandler+0xaa0>
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <ESP_messageHandler+0xaf0>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b30      	cmp	r3, #48	; 0x30
 8001e4e:	d129      	bne.n	8001ea4 <ESP_messageHandler+0xaf4>
 8001e50:	2200      	movs	r2, #0
 8001e52:	2140      	movs	r1, #64	; 0x40
 8001e54:	4803      	ldr	r0, [pc, #12]	; (8001e64 <ESP_messageHandler+0xab4>)
 8001e56:	f004 fe67 	bl	8006b28 <HAL_GPIO_WritePin>
 8001e5a:	e030      	b.n	8001ebe <ESP_messageHandler+0xb0e>
 8001e5c:	20000924 	.word	0x20000924
 8001e60:	2000095c 	.word	0x2000095c
 8001e64:	40020c00 	.word	0x40020c00
 8001e68:	200009e4 	.word	0x200009e4
 8001e6c:	20000fdc 	.word	0x20000fdc
 8001e70:	0800ac24 	.word	0x0800ac24
 8001e74:	200009ec 	.word	0x200009ec
 8001e78:	0800ac38 	.word	0x0800ac38
 8001e7c:	0800ac50 	.word	0x0800ac50
 8001e80:	20000914 	.word	0x20000914
 8001e84:	40020400 	.word	0x40020400
 8001e88:	0800ac58 	.word	0x0800ac58
 8001e8c:	0800ac6c 	.word	0x0800ac6c
 8001e90:	20000964 	.word	0x20000964
 8001e94:	40020800 	.word	0x40020800
 8001e98:	40020000 	.word	0x40020000
 8001e9c:	0800ac78 	.word	0x0800ac78
 8001ea0:	20000948 	.word	0x20000948
		else if(vLight[6] == '1' || vBath[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, SET);
 8001ea4:	4b84      	ldr	r3, [pc, #528]	; (80020b8 <ESP_messageHandler+0xd08>)
 8001ea6:	799b      	ldrb	r3, [r3, #6]
 8001ea8:	2b31      	cmp	r3, #49	; 0x31
 8001eaa:	d003      	beq.n	8001eb4 <ESP_messageHandler+0xb04>
 8001eac:	4b83      	ldr	r3, [pc, #524]	; (80020bc <ESP_messageHandler+0xd0c>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b31      	cmp	r3, #49	; 0x31
 8001eb2:	d104      	bne.n	8001ebe <ESP_messageHandler+0xb0e>
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	2140      	movs	r1, #64	; 0x40
 8001eb8:	4881      	ldr	r0, [pc, #516]	; (80020c0 <ESP_messageHandler+0xd10>)
 8001eba:	f004 fe35 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[7] == '0' || vBath[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET); 		// Luz Espejo
 8001ebe:	4b7e      	ldr	r3, [pc, #504]	; (80020b8 <ESP_messageHandler+0xd08>)
 8001ec0:	79db      	ldrb	r3, [r3, #7]
 8001ec2:	2b30      	cmp	r3, #48	; 0x30
 8001ec4:	d003      	beq.n	8001ece <ESP_messageHandler+0xb1e>
 8001ec6:	4b7d      	ldr	r3, [pc, #500]	; (80020bc <ESP_messageHandler+0xd0c>)
 8001ec8:	785b      	ldrb	r3, [r3, #1]
 8001eca:	2b30      	cmp	r3, #48	; 0x30
 8001ecc:	d105      	bne.n	8001eda <ESP_messageHandler+0xb2a>
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2108      	movs	r1, #8
 8001ed2:	487c      	ldr	r0, [pc, #496]	; (80020c4 <ESP_messageHandler+0xd14>)
 8001ed4:	f004 fe28 	bl	8006b28 <HAL_GPIO_WritePin>
 8001ed8:	e00c      	b.n	8001ef4 <ESP_messageHandler+0xb44>
		else if(vLight[7] == '1' || vBath[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8001eda:	4b77      	ldr	r3, [pc, #476]	; (80020b8 <ESP_messageHandler+0xd08>)
 8001edc:	79db      	ldrb	r3, [r3, #7]
 8001ede:	2b31      	cmp	r3, #49	; 0x31
 8001ee0:	d003      	beq.n	8001eea <ESP_messageHandler+0xb3a>
 8001ee2:	4b76      	ldr	r3, [pc, #472]	; (80020bc <ESP_messageHandler+0xd0c>)
 8001ee4:	785b      	ldrb	r3, [r3, #1]
 8001ee6:	2b31      	cmp	r3, #49	; 0x31
 8001ee8:	d104      	bne.n	8001ef4 <ESP_messageHandler+0xb44>
 8001eea:	2201      	movs	r2, #1
 8001eec:	2108      	movs	r1, #8
 8001eee:	4875      	ldr	r0, [pc, #468]	; (80020c4 <ESP_messageHandler+0xd14>)
 8001ef0:	f004 fe1a 	bl	8006b28 <HAL_GPIO_WritePin>
	}

	// BEDROOM
	if (fragment[0] == 'r'){
 8001ef4:	4b74      	ldr	r3, [pc, #464]	; (80020c8 <ESP_messageHandler+0xd18>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b72      	cmp	r3, #114	; 0x72
 8001efa:	d161      	bne.n	8001fc0 <ESP_messageHandler+0xc10>
		UART_send("LUCES (DORMITORIO) \n", PC_UART);
 8001efc:	4973      	ldr	r1, [pc, #460]	; (80020cc <ESP_messageHandler+0xd1c>)
 8001efe:	4874      	ldr	r0, [pc, #464]	; (80020d0 <ESP_messageHandler+0xd20>)
 8001f00:	f000 fef6 	bl	8002cf0 <UART_send>
		vBedroom[0] = textrc[28]; 	// Luz Dormitorio
 8001f04:	4b73      	ldr	r3, [pc, #460]	; (80020d4 <ESP_messageHandler+0xd24>)
 8001f06:	7f1a      	ldrb	r2, [r3, #28]
 8001f08:	4b73      	ldr	r3, [pc, #460]	; (80020d8 <ESP_messageHandler+0xd28>)
 8001f0a:	701a      	strb	r2, [r3, #0]
		vBedroom[1] = textrc[31]; 	// Luz Mesita Izq
 8001f0c:	4b71      	ldr	r3, [pc, #452]	; (80020d4 <ESP_messageHandler+0xd24>)
 8001f0e:	7fda      	ldrb	r2, [r3, #31]
 8001f10:	4b71      	ldr	r3, [pc, #452]	; (80020d8 <ESP_messageHandler+0xd28>)
 8001f12:	705a      	strb	r2, [r3, #1]
		vBedroom[2] = textrc[34]; 	// Luz Mesita Dch
 8001f14:	4b6f      	ldr	r3, [pc, #444]	; (80020d4 <ESP_messageHandler+0xd24>)
 8001f16:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001f1a:	4b6f      	ldr	r3, [pc, #444]	; (80020d8 <ESP_messageHandler+0xd28>)
 8001f1c:	709a      	strb	r2, [r3, #2]
		//vDor[3] = textrc[37]; 	// V. Dormitorio

		if(vLight[8] == '0' || vBedroom[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, RESET); 		// Luz Dormitorio
 8001f1e:	4b66      	ldr	r3, [pc, #408]	; (80020b8 <ESP_messageHandler+0xd08>)
 8001f20:	7a1b      	ldrb	r3, [r3, #8]
 8001f22:	2b30      	cmp	r3, #48	; 0x30
 8001f24:	d003      	beq.n	8001f2e <ESP_messageHandler+0xb7e>
 8001f26:	4b6c      	ldr	r3, [pc, #432]	; (80020d8 <ESP_messageHandler+0xd28>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b30      	cmp	r3, #48	; 0x30
 8001f2c:	d105      	bne.n	8001f3a <ESP_messageHandler+0xb8a>
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2180      	movs	r1, #128	; 0x80
 8001f32:	4863      	ldr	r0, [pc, #396]	; (80020c0 <ESP_messageHandler+0xd10>)
 8001f34:	f004 fdf8 	bl	8006b28 <HAL_GPIO_WritePin>
 8001f38:	e00c      	b.n	8001f54 <ESP_messageHandler+0xba4>
		else if(vLight[8] == '1' || vBedroom[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET);
 8001f3a:	4b5f      	ldr	r3, [pc, #380]	; (80020b8 <ESP_messageHandler+0xd08>)
 8001f3c:	7a1b      	ldrb	r3, [r3, #8]
 8001f3e:	2b31      	cmp	r3, #49	; 0x31
 8001f40:	d003      	beq.n	8001f4a <ESP_messageHandler+0xb9a>
 8001f42:	4b65      	ldr	r3, [pc, #404]	; (80020d8 <ESP_messageHandler+0xd28>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b31      	cmp	r3, #49	; 0x31
 8001f48:	d104      	bne.n	8001f54 <ESP_messageHandler+0xba4>
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	2180      	movs	r1, #128	; 0x80
 8001f4e:	485c      	ldr	r0, [pc, #368]	; (80020c0 <ESP_messageHandler+0xd10>)
 8001f50:	f004 fdea 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[9] == '0' || vBedroom[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET); 		// Luz Mesita Izq
 8001f54:	4b58      	ldr	r3, [pc, #352]	; (80020b8 <ESP_messageHandler+0xd08>)
 8001f56:	7a5b      	ldrb	r3, [r3, #9]
 8001f58:	2b30      	cmp	r3, #48	; 0x30
 8001f5a:	d003      	beq.n	8001f64 <ESP_messageHandler+0xbb4>
 8001f5c:	4b5e      	ldr	r3, [pc, #376]	; (80020d8 <ESP_messageHandler+0xd28>)
 8001f5e:	785b      	ldrb	r3, [r3, #1]
 8001f60:	2b30      	cmp	r3, #48	; 0x30
 8001f62:	d105      	bne.n	8001f70 <ESP_messageHandler+0xbc0>
 8001f64:	2200      	movs	r2, #0
 8001f66:	2110      	movs	r1, #16
 8001f68:	4856      	ldr	r0, [pc, #344]	; (80020c4 <ESP_messageHandler+0xd14>)
 8001f6a:	f004 fddd 	bl	8006b28 <HAL_GPIO_WritePin>
 8001f6e:	e00c      	b.n	8001f8a <ESP_messageHandler+0xbda>
		else if(vLight[9] == '1' || vBedroom[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001f70:	4b51      	ldr	r3, [pc, #324]	; (80020b8 <ESP_messageHandler+0xd08>)
 8001f72:	7a5b      	ldrb	r3, [r3, #9]
 8001f74:	2b31      	cmp	r3, #49	; 0x31
 8001f76:	d003      	beq.n	8001f80 <ESP_messageHandler+0xbd0>
 8001f78:	4b57      	ldr	r3, [pc, #348]	; (80020d8 <ESP_messageHandler+0xd28>)
 8001f7a:	785b      	ldrb	r3, [r3, #1]
 8001f7c:	2b31      	cmp	r3, #49	; 0x31
 8001f7e:	d104      	bne.n	8001f8a <ESP_messageHandler+0xbda>
 8001f80:	2201      	movs	r2, #1
 8001f82:	2110      	movs	r1, #16
 8001f84:	484f      	ldr	r0, [pc, #316]	; (80020c4 <ESP_messageHandler+0xd14>)
 8001f86:	f004 fdcf 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[10] == '0' || vBedroom[2] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET); 		// Luz Mesita Dch
 8001f8a:	4b4b      	ldr	r3, [pc, #300]	; (80020b8 <ESP_messageHandler+0xd08>)
 8001f8c:	7a9b      	ldrb	r3, [r3, #10]
 8001f8e:	2b30      	cmp	r3, #48	; 0x30
 8001f90:	d003      	beq.n	8001f9a <ESP_messageHandler+0xbea>
 8001f92:	4b51      	ldr	r3, [pc, #324]	; (80020d8 <ESP_messageHandler+0xd28>)
 8001f94:	789b      	ldrb	r3, [r3, #2]
 8001f96:	2b30      	cmp	r3, #48	; 0x30
 8001f98:	d105      	bne.n	8001fa6 <ESP_messageHandler+0xbf6>
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2140      	movs	r1, #64	; 0x40
 8001f9e:	4849      	ldr	r0, [pc, #292]	; (80020c4 <ESP_messageHandler+0xd14>)
 8001fa0:	f004 fdc2 	bl	8006b28 <HAL_GPIO_WritePin>
 8001fa4:	e00c      	b.n	8001fc0 <ESP_messageHandler+0xc10>
		else if(vLight[10] == '1' || vBedroom[2] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8001fa6:	4b44      	ldr	r3, [pc, #272]	; (80020b8 <ESP_messageHandler+0xd08>)
 8001fa8:	7a9b      	ldrb	r3, [r3, #10]
 8001faa:	2b31      	cmp	r3, #49	; 0x31
 8001fac:	d003      	beq.n	8001fb6 <ESP_messageHandler+0xc06>
 8001fae:	4b4a      	ldr	r3, [pc, #296]	; (80020d8 <ESP_messageHandler+0xd28>)
 8001fb0:	789b      	ldrb	r3, [r3, #2]
 8001fb2:	2b31      	cmp	r3, #49	; 0x31
 8001fb4:	d104      	bne.n	8001fc0 <ESP_messageHandler+0xc10>
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	2140      	movs	r1, #64	; 0x40
 8001fba:	4842      	ldr	r0, [pc, #264]	; (80020c4 <ESP_messageHandler+0xd14>)
 8001fbc:	f004 fdb4 	bl	8006b28 <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'D'){
 8001fc0:	4b41      	ldr	r3, [pc, #260]	; (80020c8 <ESP_messageHandler+0xd18>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b44      	cmp	r3, #68	; 0x44
 8001fc6:	d108      	bne.n	8001fda <ESP_messageHandler+0xc2a>
		UART_send("V. DORMITORIO (DORMITORIO) \n", PC_UART);
 8001fc8:	4940      	ldr	r1, [pc, #256]	; (80020cc <ESP_messageHandler+0xd1c>)
 8001fca:	4844      	ldr	r0, [pc, #272]	; (80020dc <ESP_messageHandler+0xd2c>)
 8001fcc:	f000 fe90 	bl	8002cf0 <UART_send>
		//vDor[0] = textrc[28]; 	// Luz Dormitorio
		//vDor[1] = textrc[31]; 	// Luz Mesita Izq
		//vDor[2] = textrc[34]; 	// Luz Mesita Dch
		vBedroom[3] = textrc[37]; 	// V. Dormitorio
 8001fd0:	4b40      	ldr	r3, [pc, #256]	; (80020d4 <ESP_messageHandler+0xd24>)
 8001fd2:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001fd6:	4b40      	ldr	r3, [pc, #256]	; (80020d8 <ESP_messageHandler+0xd28>)
 8001fd8:	70da      	strb	r2, [r3, #3]
	}

	// OFFICE
	if (fragment[0] == 'f'){
 8001fda:	4b3b      	ldr	r3, [pc, #236]	; (80020c8 <ESP_messageHandler+0xd18>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b66      	cmp	r3, #102	; 0x66
 8001fe0:	f040 80bf 	bne.w	8002162 <ESP_messageHandler+0xdb2>
		UART_send("LUCES (OFICINA) \n", PC_UART);
 8001fe4:	4939      	ldr	r1, [pc, #228]	; (80020cc <ESP_messageHandler+0xd1c>)
 8001fe6:	483e      	ldr	r0, [pc, #248]	; (80020e0 <ESP_messageHandler+0xd30>)
 8001fe8:	f000 fe82 	bl	8002cf0 <UART_send>
		vOffice[0] = textrc[28]; 	// Luz Oficina
 8001fec:	4b39      	ldr	r3, [pc, #228]	; (80020d4 <ESP_messageHandler+0xd24>)
 8001fee:	7f1a      	ldrb	r2, [r3, #28]
 8001ff0:	4b3c      	ldr	r3, [pc, #240]	; (80020e4 <ESP_messageHandler+0xd34>)
 8001ff2:	701a      	strb	r2, [r3, #0]
		vOffice[1] = textrc[31]; 	// Luz Gaming
 8001ff4:	4b37      	ldr	r3, [pc, #220]	; (80020d4 <ESP_messageHandler+0xd24>)
 8001ff6:	7fda      	ldrb	r2, [r3, #31]
 8001ff8:	4b3a      	ldr	r3, [pc, #232]	; (80020e4 <ESP_messageHandler+0xd34>)
 8001ffa:	705a      	strb	r2, [r3, #1]
		vOffice[2] = textrc[34]; 	// Luz Rx100
 8001ffc:	4b35      	ldr	r3, [pc, #212]	; (80020d4 <ESP_messageHandler+0xd24>)
 8001ffe:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002002:	4b38      	ldr	r3, [pc, #224]	; (80020e4 <ESP_messageHandler+0xd34>)
 8002004:	709a      	strb	r2, [r3, #2]
		vOffice[3] = textrc[35]; 	// Luz Rx10
 8002006:	4b33      	ldr	r3, [pc, #204]	; (80020d4 <ESP_messageHandler+0xd24>)
 8002008:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800200c:	4b35      	ldr	r3, [pc, #212]	; (80020e4 <ESP_messageHandler+0xd34>)
 800200e:	70da      	strb	r2, [r3, #3]
		vOffice[4] = textrc[36];	// Luz Rx1
 8002010:	4b30      	ldr	r3, [pc, #192]	; (80020d4 <ESP_messageHandler+0xd24>)
 8002012:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8002016:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <ESP_messageHandler+0xd34>)
 8002018:	711a      	strb	r2, [r3, #4]
		vOffice[5] = textrc[39]; 	// Luz Gx100
 800201a:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <ESP_messageHandler+0xd24>)
 800201c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8002020:	4b30      	ldr	r3, [pc, #192]	; (80020e4 <ESP_messageHandler+0xd34>)
 8002022:	715a      	strb	r2, [r3, #5]
		vOffice[6] = textrc[40]; 	// Luz Gx10
 8002024:	4b2b      	ldr	r3, [pc, #172]	; (80020d4 <ESP_messageHandler+0xd24>)
 8002026:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800202a:	4b2e      	ldr	r3, [pc, #184]	; (80020e4 <ESP_messageHandler+0xd34>)
 800202c:	719a      	strb	r2, [r3, #6]
		vOffice[7] = textrc[41]; 	// Luz Gx1
 800202e:	4b29      	ldr	r3, [pc, #164]	; (80020d4 <ESP_messageHandler+0xd24>)
 8002030:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8002034:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <ESP_messageHandler+0xd34>)
 8002036:	71da      	strb	r2, [r3, #7]
		vOffice[8] = textrc[44];	// Luz Bx100
 8002038:	4b26      	ldr	r3, [pc, #152]	; (80020d4 <ESP_messageHandler+0xd24>)
 800203a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800203e:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <ESP_messageHandler+0xd34>)
 8002040:	721a      	strb	r2, [r3, #8]
		vOffice[9] = textrc[45]; 	// Luz Bx10
 8002042:	4b24      	ldr	r3, [pc, #144]	; (80020d4 <ESP_messageHandler+0xd24>)
 8002044:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8002048:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <ESP_messageHandler+0xd34>)
 800204a:	725a      	strb	r2, [r3, #9]
		vOffice[10] = textrc[46];	// Luz Bx1
 800204c:	4b21      	ldr	r3, [pc, #132]	; (80020d4 <ESP_messageHandler+0xd24>)
 800204e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8002052:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <ESP_messageHandler+0xd34>)
 8002054:	729a      	strb	r2, [r3, #10]
		//vOfi[11] = textrc[49]; 	// V. Oficina

		if(vLight[11] == '0' || vOffice[0] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET); 		// Luz Oficina
 8002056:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <ESP_messageHandler+0xd08>)
 8002058:	7adb      	ldrb	r3, [r3, #11]
 800205a:	2b30      	cmp	r3, #48	; 0x30
 800205c:	d003      	beq.n	8002066 <ESP_messageHandler+0xcb6>
 800205e:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <ESP_messageHandler+0xd34>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b30      	cmp	r3, #48	; 0x30
 8002064:	d105      	bne.n	8002072 <ESP_messageHandler+0xcc2>
 8002066:	2200      	movs	r2, #0
 8002068:	2120      	movs	r1, #32
 800206a:	4816      	ldr	r0, [pc, #88]	; (80020c4 <ESP_messageHandler+0xd14>)
 800206c:	f004 fd5c 	bl	8006b28 <HAL_GPIO_WritePin>
 8002070:	e00c      	b.n	800208c <ESP_messageHandler+0xcdc>
		else if(vLight[11] == '1' || vOffice[0] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8002072:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <ESP_messageHandler+0xd08>)
 8002074:	7adb      	ldrb	r3, [r3, #11]
 8002076:	2b31      	cmp	r3, #49	; 0x31
 8002078:	d003      	beq.n	8002082 <ESP_messageHandler+0xcd2>
 800207a:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <ESP_messageHandler+0xd34>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b31      	cmp	r3, #49	; 0x31
 8002080:	d104      	bne.n	800208c <ESP_messageHandler+0xcdc>
 8002082:	2201      	movs	r2, #1
 8002084:	2120      	movs	r1, #32
 8002086:	480f      	ldr	r0, [pc, #60]	; (80020c4 <ESP_messageHandler+0xd14>)
 8002088:	f004 fd4e 	bl	8006b28 <HAL_GPIO_WritePin>

		if(vLight[12] == '0' || vOffice[1] == '0'){
 800208c:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <ESP_messageHandler+0xd08>)
 800208e:	7b1b      	ldrb	r3, [r3, #12]
 8002090:	2b30      	cmp	r3, #48	; 0x30
 8002092:	d003      	beq.n	800209c <ESP_messageHandler+0xcec>
 8002094:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <ESP_messageHandler+0xd34>)
 8002096:	785b      	ldrb	r3, [r3, #1]
 8002098:	2b30      	cmp	r3, #48	; 0x30
 800209a:	d127      	bne.n	80020ec <ESP_messageHandler+0xd3c>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <ESP_messageHandler+0xd38>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2200      	movs	r2, #0
 80020a2:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80020a4:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <ESP_messageHandler+0xd38>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2200      	movs	r2, #0
 80020aa:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80020ac:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <ESP_messageHandler+0xd38>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2200      	movs	r2, #0
 80020b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80020b4:	e055      	b.n	8002162 <ESP_messageHandler+0xdb2>
 80020b6:	bf00      	nop
 80020b8:	20000924 	.word	0x20000924
 80020bc:	20000948 	.word	0x20000948
 80020c0:	40020c00 	.word	0x40020c00
 80020c4:	40020400 	.word	0x40020400
 80020c8:	200009e4 	.word	0x200009e4
 80020cc:	20000fdc 	.word	0x20000fdc
 80020d0:	0800ac80 	.word	0x0800ac80
 80020d4:	200009ec 	.word	0x200009ec
 80020d8:	20000974 	.word	0x20000974
 80020dc:	0800ac98 	.word	0x0800ac98
 80020e0:	0800acb8 	.word	0x0800acb8
 80020e4:	20000950 	.word	0x20000950
 80020e8:	20000f4c 	.word	0x20000f4c
		}
		else if(vLight[12] == '1' || vOffice[1] == '1'){ 												// Luz Gaming
 80020ec:	4b71      	ldr	r3, [pc, #452]	; (80022b4 <ESP_messageHandler+0xf04>)
 80020ee:	7b1b      	ldrb	r3, [r3, #12]
 80020f0:	2b31      	cmp	r3, #49	; 0x31
 80020f2:	d003      	beq.n	80020fc <ESP_messageHandler+0xd4c>
 80020f4:	4b70      	ldr	r3, [pc, #448]	; (80022b8 <ESP_messageHandler+0xf08>)
 80020f6:	785b      	ldrb	r3, [r3, #1]
 80020f8:	2b31      	cmp	r3, #49	; 0x31
 80020fa:	d132      	bne.n	8002162 <ESP_messageHandler+0xdb2>

			//uint8_t r, g, b;

			r = rgb_value(vOffice[2],vOffice[3],vOffice[4]);
 80020fc:	4b6e      	ldr	r3, [pc, #440]	; (80022b8 <ESP_messageHandler+0xf08>)
 80020fe:	789b      	ldrb	r3, [r3, #2]
 8002100:	4a6d      	ldr	r2, [pc, #436]	; (80022b8 <ESP_messageHandler+0xf08>)
 8002102:	78d1      	ldrb	r1, [r2, #3]
 8002104:	4a6c      	ldr	r2, [pc, #432]	; (80022b8 <ESP_messageHandler+0xf08>)
 8002106:	7912      	ldrb	r2, [r2, #4]
 8002108:	4618      	mov	r0, r3
 800210a:	f000 f955 	bl	80023b8 <rgb_value>
 800210e:	4603      	mov	r3, r0
 8002110:	4a6a      	ldr	r2, [pc, #424]	; (80022bc <ESP_messageHandler+0xf0c>)
 8002112:	6013      	str	r3, [r2, #0]
			g = rgb_value(vOffice[5],vOffice[6],vOffice[7]);
 8002114:	4b68      	ldr	r3, [pc, #416]	; (80022b8 <ESP_messageHandler+0xf08>)
 8002116:	795b      	ldrb	r3, [r3, #5]
 8002118:	4a67      	ldr	r2, [pc, #412]	; (80022b8 <ESP_messageHandler+0xf08>)
 800211a:	7991      	ldrb	r1, [r2, #6]
 800211c:	4a66      	ldr	r2, [pc, #408]	; (80022b8 <ESP_messageHandler+0xf08>)
 800211e:	79d2      	ldrb	r2, [r2, #7]
 8002120:	4618      	mov	r0, r3
 8002122:	f000 f949 	bl	80023b8 <rgb_value>
 8002126:	4603      	mov	r3, r0
 8002128:	4a65      	ldr	r2, [pc, #404]	; (80022c0 <ESP_messageHandler+0xf10>)
 800212a:	6013      	str	r3, [r2, #0]
			b = rgb_value(vOffice[8],vOffice[9],vOffice[10]);
 800212c:	4b62      	ldr	r3, [pc, #392]	; (80022b8 <ESP_messageHandler+0xf08>)
 800212e:	7a1b      	ldrb	r3, [r3, #8]
 8002130:	4a61      	ldr	r2, [pc, #388]	; (80022b8 <ESP_messageHandler+0xf08>)
 8002132:	7a51      	ldrb	r1, [r2, #9]
 8002134:	4a60      	ldr	r2, [pc, #384]	; (80022b8 <ESP_messageHandler+0xf08>)
 8002136:	7a92      	ldrb	r2, [r2, #10]
 8002138:	4618      	mov	r0, r3
 800213a:	f000 f93d 	bl	80023b8 <rgb_value>
 800213e:	4603      	mov	r3, r0
 8002140:	4a60      	ldr	r2, [pc, #384]	; (80022c4 <ESP_messageHandler+0xf14>)
 8002142:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, g); // PA8
 8002144:	4b5e      	ldr	r3, [pc, #376]	; (80022c0 <ESP_messageHandler+0xf10>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b5f      	ldr	r3, [pc, #380]	; (80022c8 <ESP_messageHandler+0xf18>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, r); // PA9
 800214e:	4b5b      	ldr	r3, [pc, #364]	; (80022bc <ESP_messageHandler+0xf0c>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	4b5d      	ldr	r3, [pc, #372]	; (80022c8 <ESP_messageHandler+0xf18>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b); // PA10
 8002158:	4b5a      	ldr	r3, [pc, #360]	; (80022c4 <ESP_messageHandler+0xf14>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4b5a      	ldr	r3, [pc, #360]	; (80022c8 <ESP_messageHandler+0xf18>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}

	if (fragment[0] == 'F'){
 8002162:	4b5a      	ldr	r3, [pc, #360]	; (80022cc <ESP_messageHandler+0xf1c>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b46      	cmp	r3, #70	; 0x46
 8002168:	d108      	bne.n	800217c <ESP_messageHandler+0xdcc>
		UART_send("V. OFICINA (OFICINA) \n", PC_UART);
 800216a:	4959      	ldr	r1, [pc, #356]	; (80022d0 <ESP_messageHandler+0xf20>)
 800216c:	4859      	ldr	r0, [pc, #356]	; (80022d4 <ESP_messageHandler+0xf24>)
 800216e:	f000 fdbf 	bl	8002cf0 <UART_send>
		//vOfi[6] = textrc[40]; 	// Luz Gx10
		//vOfi[7] = textrc[41]; 	// Luz Gx1
		//vOfi[8] = textrc[44]; 	// Luz Bx100
		//vOfi[9] = textrc[45]; 	// Luz Bx10
		//vOfi[10] = textrc[46]; 	// Luz Bx1
		vOffice[11] = textrc[49]; 	// V. Oficina
 8002172:	4b59      	ldr	r3, [pc, #356]	; (80022d8 <ESP_messageHandler+0xf28>)
 8002174:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8002178:	4b4f      	ldr	r3, [pc, #316]	; (80022b8 <ESP_messageHandler+0xf08>)
 800217a:	72da      	strb	r2, [r3, #11]
	}

	// GARAGE
	if (fragment[0] == 'j'){
 800217c:	4b53      	ldr	r3, [pc, #332]	; (80022cc <ESP_messageHandler+0xf1c>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b6a      	cmp	r3, #106	; 0x6a
 8002182:	d124      	bne.n	80021ce <ESP_messageHandler+0xe1e>
		UART_send("LUZ GARAJE (GARAJE) \n", PC_UART);
 8002184:	4952      	ldr	r1, [pc, #328]	; (80022d0 <ESP_messageHandler+0xf20>)
 8002186:	4855      	ldr	r0, [pc, #340]	; (80022dc <ESP_messageHandler+0xf2c>)
 8002188:	f000 fdb2 	bl	8002cf0 <UART_send>
		vGarage[0] = textrc[28]; 	// Luz Garaje
 800218c:	4b52      	ldr	r3, [pc, #328]	; (80022d8 <ESP_messageHandler+0xf28>)
 800218e:	7f1a      	ldrb	r2, [r3, #28]
 8002190:	4b53      	ldr	r3, [pc, #332]	; (80022e0 <ESP_messageHandler+0xf30>)
 8002192:	701a      	strb	r2, [r3, #0]
		//vGar[1] = textrc[31]; 	// P. Garaje

		if(vLight[22] == '0' || vGarage[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET);		// Luz Garaje
 8002194:	4b47      	ldr	r3, [pc, #284]	; (80022b4 <ESP_messageHandler+0xf04>)
 8002196:	7d9b      	ldrb	r3, [r3, #22]
 8002198:	2b30      	cmp	r3, #48	; 0x30
 800219a:	d003      	beq.n	80021a4 <ESP_messageHandler+0xdf4>
 800219c:	4b50      	ldr	r3, [pc, #320]	; (80022e0 <ESP_messageHandler+0xf30>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b30      	cmp	r3, #48	; 0x30
 80021a2:	d106      	bne.n	80021b2 <ESP_messageHandler+0xe02>
 80021a4:	2200      	movs	r2, #0
 80021a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021aa:	484e      	ldr	r0, [pc, #312]	; (80022e4 <ESP_messageHandler+0xf34>)
 80021ac:	f004 fcbc 	bl	8006b28 <HAL_GPIO_WritePin>
 80021b0:	e00d      	b.n	80021ce <ESP_messageHandler+0xe1e>
		else if(vLight[22] == '1' || vGarage[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 80021b2:	4b40      	ldr	r3, [pc, #256]	; (80022b4 <ESP_messageHandler+0xf04>)
 80021b4:	7d9b      	ldrb	r3, [r3, #22]
 80021b6:	2b31      	cmp	r3, #49	; 0x31
 80021b8:	d003      	beq.n	80021c2 <ESP_messageHandler+0xe12>
 80021ba:	4b49      	ldr	r3, [pc, #292]	; (80022e0 <ESP_messageHandler+0xf30>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b31      	cmp	r3, #49	; 0x31
 80021c0:	d105      	bne.n	80021ce <ESP_messageHandler+0xe1e>
 80021c2:	2201      	movs	r2, #1
 80021c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021c8:	4846      	ldr	r0, [pc, #280]	; (80022e4 <ESP_messageHandler+0xf34>)
 80021ca:	f004 fcad 	bl	8006b28 <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'J'){
 80021ce:	4b3f      	ldr	r3, [pc, #252]	; (80022cc <ESP_messageHandler+0xf1c>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b4a      	cmp	r3, #74	; 0x4a
 80021d4:	d107      	bne.n	80021e6 <ESP_messageHandler+0xe36>
		UART_send("P. GARAJE (GARAJE) \n", PC_UART);
 80021d6:	493e      	ldr	r1, [pc, #248]	; (80022d0 <ESP_messageHandler+0xf20>)
 80021d8:	4843      	ldr	r0, [pc, #268]	; (80022e8 <ESP_messageHandler+0xf38>)
 80021da:	f000 fd89 	bl	8002cf0 <UART_send>
		//vGar[0] = textrc[28]; 	// Luz Garaje
		vGarage[1] = textrc[31]; 	// P. Garaje
 80021de:	4b3e      	ldr	r3, [pc, #248]	; (80022d8 <ESP_messageHandler+0xf28>)
 80021e0:	7fda      	ldrb	r2, [r3, #31]
 80021e2:	4b3f      	ldr	r3, [pc, #252]	; (80022e0 <ESP_messageHandler+0xf30>)
 80021e4:	705a      	strb	r2, [r3, #1]
	}

	// GARDEN
	if (fragment[0] == 'h'){
 80021e6:	4b39      	ldr	r3, [pc, #228]	; (80022cc <ESP_messageHandler+0xf1c>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b68      	cmp	r3, #104	; 0x68
 80021ec:	d10b      	bne.n	8002206 <ESP_messageHandler+0xe56>
		UART_send("RIEGO HUERTO \n", PC_UART);
 80021ee:	4938      	ldr	r1, [pc, #224]	; (80022d0 <ESP_messageHandler+0xf20>)
 80021f0:	483e      	ldr	r0, [pc, #248]	; (80022ec <ESP_messageHandler+0xf3c>)
 80021f2:	f000 fd7d 	bl	8002cf0 <UART_send>
		vGarden[0] = textrc[28]; 	// Riego
 80021f6:	4b38      	ldr	r3, [pc, #224]	; (80022d8 <ESP_messageHandler+0xf28>)
 80021f8:	7f1a      	ldrb	r2, [r3, #28]
 80021fa:	4b3d      	ldr	r3, [pc, #244]	; (80022f0 <ESP_messageHandler+0xf40>)
 80021fc:	701a      	strb	r2, [r3, #0]
		vGarden[1] = textrc[31]; 	// Automático
 80021fe:	4b36      	ldr	r3, [pc, #216]	; (80022d8 <ESP_messageHandler+0xf28>)
 8002200:	7fda      	ldrb	r2, [r3, #31]
 8002202:	4b3b      	ldr	r3, [pc, #236]	; (80022f0 <ESP_messageHandler+0xf40>)
 8002204:	705a      	strb	r2, [r3, #1]
			else if(vHuer[0] == '1') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
		}*/
	}

	// SETTINGS
	if (fragment[0] == 'a'){
 8002206:	4b31      	ldr	r3, [pc, #196]	; (80022cc <ESP_messageHandler+0xf1c>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b61      	cmp	r3, #97	; 0x61
 800220c:	d150      	bne.n	80022b0 <ESP_messageHandler+0xf00>
		UART_send("AJUSTES \n", PC_UART);
 800220e:	4930      	ldr	r1, [pc, #192]	; (80022d0 <ESP_messageHandler+0xf20>)
 8002210:	4838      	ldr	r0, [pc, #224]	; (80022f4 <ESP_messageHandler+0xf44>)
 8002212:	f000 fd6d 	bl	8002cf0 <UART_send>
		vSettings[0] = textrc[28]; 		// Vent. Enc. x 10
 8002216:	4b30      	ldr	r3, [pc, #192]	; (80022d8 <ESP_messageHandler+0xf28>)
 8002218:	7f1a      	ldrb	r2, [r3, #28]
 800221a:	4b37      	ldr	r3, [pc, #220]	; (80022f8 <ESP_messageHandler+0xf48>)
 800221c:	701a      	strb	r2, [r3, #0]
		vSettings[1] = textrc[29]; 		// Vent. Enc. x 1
 800221e:	4b2e      	ldr	r3, [pc, #184]	; (80022d8 <ESP_messageHandler+0xf28>)
 8002220:	7f5a      	ldrb	r2, [r3, #29]
 8002222:	4b35      	ldr	r3, [pc, #212]	; (80022f8 <ESP_messageHandler+0xf48>)
 8002224:	705a      	strb	r2, [r3, #1]
		vSettings[2] = textrc[31]; 		// Vent. Enc. x 0.1
 8002226:	4b2c      	ldr	r3, [pc, #176]	; (80022d8 <ESP_messageHandler+0xf28>)
 8002228:	7fda      	ldrb	r2, [r3, #31]
 800222a:	4b33      	ldr	r3, [pc, #204]	; (80022f8 <ESP_messageHandler+0xf48>)
 800222c:	709a      	strb	r2, [r3, #2]
		vSettings[3] = textrc[34]; 		// Vent. Apa. x 10
 800222e:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <ESP_messageHandler+0xf28>)
 8002230:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002234:	4b30      	ldr	r3, [pc, #192]	; (80022f8 <ESP_messageHandler+0xf48>)
 8002236:	70da      	strb	r2, [r3, #3]
		vSettings[4] = textrc[35]; 		// Vent. Apa. x 1
 8002238:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <ESP_messageHandler+0xf28>)
 800223a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800223e:	4b2e      	ldr	r3, [pc, #184]	; (80022f8 <ESP_messageHandler+0xf48>)
 8002240:	711a      	strb	r2, [r3, #4]
		vSettings[5] = textrc[37]; 		// Vent. Apa. x 0.1
 8002242:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <ESP_messageHandler+0xf28>)
 8002244:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8002248:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <ESP_messageHandler+0xf48>)
 800224a:	715a      	strb	r2, [r3, #5]
		vSettings[6] = textrc[40]; 		// Calef. Enc. x 10
 800224c:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <ESP_messageHandler+0xf28>)
 800224e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8002252:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <ESP_messageHandler+0xf48>)
 8002254:	719a      	strb	r2, [r3, #6]
		vSettings[7] = textrc[41]; 		// Calef. Enc. x 1
 8002256:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <ESP_messageHandler+0xf28>)
 8002258:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800225c:	4b26      	ldr	r3, [pc, #152]	; (80022f8 <ESP_messageHandler+0xf48>)
 800225e:	71da      	strb	r2, [r3, #7]
		vSettings[8] = textrc[43]; 		// Calef. Enc. x 0.1
 8002260:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <ESP_messageHandler+0xf28>)
 8002262:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8002266:	4b24      	ldr	r3, [pc, #144]	; (80022f8 <ESP_messageHandler+0xf48>)
 8002268:	721a      	strb	r2, [r3, #8]
		vSettings[9] = textrc[46]; 		// Calef. Apa. x 10
 800226a:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <ESP_messageHandler+0xf28>)
 800226c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8002270:	4b21      	ldr	r3, [pc, #132]	; (80022f8 <ESP_messageHandler+0xf48>)
 8002272:	725a      	strb	r2, [r3, #9]
		vSettings[10] = textrc[47]; 	// Calef. Apa. x 1
 8002274:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <ESP_messageHandler+0xf28>)
 8002276:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800227a:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <ESP_messageHandler+0xf48>)
 800227c:	729a      	strb	r2, [r3, #10]
		vSettings[11] = textrc[49]; 	// Calef. Apa. x 0.1
 800227e:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <ESP_messageHandler+0xf28>)
 8002280:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8002284:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <ESP_messageHandler+0xf48>)
 8002286:	72da      	strb	r2, [r3, #11]
		vSettings[12] = textrc[52]; 	// RH Mínimo x 10
 8002288:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <ESP_messageHandler+0xf28>)
 800228a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800228e:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <ESP_messageHandler+0xf48>)
 8002290:	731a      	strb	r2, [r3, #12]
		vSettings[13] = textrc[53]; 	// RH Mínimo x 1
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <ESP_messageHandler+0xf28>)
 8002294:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8002298:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <ESP_messageHandler+0xf48>)
 800229a:	735a      	strb	r2, [r3, #13]
		vSettings[14] = textrc[56]; 	// RH Máximo x 10
 800229c:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <ESP_messageHandler+0xf28>)
 800229e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80022a2:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <ESP_messageHandler+0xf48>)
 80022a4:	739a      	strb	r2, [r3, #14]
		vSettings[15] = textrc[57]; 	// RH Máximo x 1
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <ESP_messageHandler+0xf28>)
 80022a8:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <ESP_messageHandler+0xf48>)
 80022ae:	73da      	strb	r2, [r3, #15]
	}

	//__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
}
 80022b0:	bf00      	nop
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000924 	.word	0x20000924
 80022b8:	20000950 	.word	0x20000950
 80022bc:	20000990 	.word	0x20000990
 80022c0:	2000098c 	.word	0x2000098c
 80022c4:	20000984 	.word	0x20000984
 80022c8:	20000f4c 	.word	0x20000f4c
 80022cc:	200009e4 	.word	0x200009e4
 80022d0:	20000fdc 	.word	0x20000fdc
 80022d4:	0800accc 	.word	0x0800accc
 80022d8:	200009ec 	.word	0x200009ec
 80022dc:	0800ace4 	.word	0x0800ace4
 80022e0:	20000968 	.word	0x20000968
 80022e4:	40020800 	.word	0x40020800
 80022e8:	0800acfc 	.word	0x0800acfc
 80022ec:	0800ad14 	.word	0x0800ad14
 80022f0:	2000096c 	.word	0x2000096c
 80022f4:	0800ad24 	.word	0x0800ad24
 80022f8:	20000904 	.word	0x20000904

080022fc <ldr>:


#include "LDR.h"
#include "ESP8266_HAL.h"

void ldr(uint16_t value){
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	80fb      	strh	r3, [r7, #6]


	if (vLight[26] == '1'){
 8002306:	4b28      	ldr	r3, [pc, #160]	; (80023a8 <ldr+0xac>)
 8002308:	7e9b      	ldrb	r3, [r3, #26]
 800230a:	2b31      	cmp	r3, #49	; 0x31
 800230c:	d147      	bne.n	800239e <ldr+0xa2>

		if(value<90) {
 800230e:	88fb      	ldrh	r3, [r7, #6]
 8002310:	2b59      	cmp	r3, #89	; 0x59
 8002312:	d822      	bhi.n	800235a <ldr+0x5e>
			vLight[23] = 'x';		// Jardín
 8002314:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <ldr+0xac>)
 8002316:	2278      	movs	r2, #120	; 0x78
 8002318:	75da      	strb	r2, [r3, #23]
			vOutside[3] = 'x';
 800231a:	4b24      	ldr	r3, [pc, #144]	; (80023ac <ldr+0xb0>)
 800231c:	2278      	movs	r2, #120	; 0x78
 800231e:	70da      	strb	r2, [r3, #3]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8002320:	2201      	movs	r2, #1
 8002322:	2104      	movs	r1, #4
 8002324:	4822      	ldr	r0, [pc, #136]	; (80023b0 <ldr+0xb4>)
 8002326:	f004 fbff 	bl	8006b28 <HAL_GPIO_WritePin>
			vLight[24] = 'x';		// Porche
 800232a:	4b1f      	ldr	r3, [pc, #124]	; (80023a8 <ldr+0xac>)
 800232c:	2278      	movs	r2, #120	; 0x78
 800232e:	761a      	strb	r2, [r3, #24]
			vOutside[2] = 'x';
 8002330:	4b1e      	ldr	r3, [pc, #120]	; (80023ac <ldr+0xb0>)
 8002332:	2278      	movs	r2, #120	; 0x78
 8002334:	709a      	strb	r2, [r3, #2]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 8002336:	2201      	movs	r2, #1
 8002338:	2110      	movs	r1, #16
 800233a:	481d      	ldr	r0, [pc, #116]	; (80023b0 <ldr+0xb4>)
 800233c:	f004 fbf4 	bl	8006b28 <HAL_GPIO_WritePin>
			vLight[25] = 'x';		// Tendedero
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <ldr+0xac>)
 8002342:	2278      	movs	r2, #120	; 0x78
 8002344:	765a      	strb	r2, [r3, #25]
			vOutside[1] = 'x';
 8002346:	4b19      	ldr	r3, [pc, #100]	; (80023ac <ldr+0xb0>)
 8002348:	2278      	movs	r2, #120	; 0x78
 800234a:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 800234c:	2201      	movs	r2, #1
 800234e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002352:	4818      	ldr	r0, [pc, #96]	; (80023b4 <ldr+0xb8>)
 8002354:	f004 fbe8 	bl	8006b28 <HAL_GPIO_WritePin>
			vLight[25] = 'x';		// Tendedero
			vOutside[1] = 'x';
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
		}
	}
}
 8002358:	e021      	b.n	800239e <ldr+0xa2>
			vLight[23] = 'x';		// Jardín
 800235a:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <ldr+0xac>)
 800235c:	2278      	movs	r2, #120	; 0x78
 800235e:	75da      	strb	r2, [r3, #23]
			vOutside[3] = 'x';
 8002360:	4b12      	ldr	r3, [pc, #72]	; (80023ac <ldr+0xb0>)
 8002362:	2278      	movs	r2, #120	; 0x78
 8002364:	70da      	strb	r2, [r3, #3]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET);
 8002366:	2200      	movs	r2, #0
 8002368:	2104      	movs	r1, #4
 800236a:	4811      	ldr	r0, [pc, #68]	; (80023b0 <ldr+0xb4>)
 800236c:	f004 fbdc 	bl	8006b28 <HAL_GPIO_WritePin>
			vLight[24] = 'x';		// Porche
 8002370:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <ldr+0xac>)
 8002372:	2278      	movs	r2, #120	; 0x78
 8002374:	761a      	strb	r2, [r3, #24]
			vOutside[2] = 'x';
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <ldr+0xb0>)
 8002378:	2278      	movs	r2, #120	; 0x78
 800237a:	709a      	strb	r2, [r3, #2]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
 800237c:	2200      	movs	r2, #0
 800237e:	2110      	movs	r1, #16
 8002380:	480b      	ldr	r0, [pc, #44]	; (80023b0 <ldr+0xb4>)
 8002382:	f004 fbd1 	bl	8006b28 <HAL_GPIO_WritePin>
			vLight[25] = 'x';		// Tendedero
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <ldr+0xac>)
 8002388:	2278      	movs	r2, #120	; 0x78
 800238a:	765a      	strb	r2, [r3, #25]
			vOutside[1] = 'x';
 800238c:	4b07      	ldr	r3, [pc, #28]	; (80023ac <ldr+0xb0>)
 800238e:	2278      	movs	r2, #120	; 0x78
 8002390:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 8002392:	2200      	movs	r2, #0
 8002394:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002398:	4806      	ldr	r0, [pc, #24]	; (80023b4 <ldr+0xb8>)
 800239a:	f004 fbc5 	bl	8006b28 <HAL_GPIO_WritePin>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000924 	.word	0x20000924
 80023ac:	2000095c 	.word	0x2000095c
 80023b0:	40020c00 	.word	0x40020c00
 80023b4:	40020800 	.word	0x40020800

080023b8 <rgb_value>:


#include "LED.h"


int rgb_value(char i, char j, char k){
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
 80023c2:	460b      	mov	r3, r1
 80023c4:	71bb      	strb	r3, [r7, #6]
 80023c6:	4613      	mov	r3, r2
 80023c8:	717b      	strb	r3, [r7, #5]

	int a, b, c;

	if(i == '0') a = 0;
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	2b30      	cmp	r3, #48	; 0x30
 80023ce:	d102      	bne.n	80023d6 <rgb_value+0x1e>
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	e00a      	b.n	80023ec <rgb_value+0x34>
	else if(i == '1') a = 100;
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	2b31      	cmp	r3, #49	; 0x31
 80023da:	d102      	bne.n	80023e2 <rgb_value+0x2a>
 80023dc:	2364      	movs	r3, #100	; 0x64
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	e004      	b.n	80023ec <rgb_value+0x34>
	else if(i == '2') a = 200;
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	2b32      	cmp	r3, #50	; 0x32
 80023e6:	d101      	bne.n	80023ec <rgb_value+0x34>
 80023e8:	23c8      	movs	r3, #200	; 0xc8
 80023ea:	617b      	str	r3, [r7, #20]

	if(j == '0') b = 0;
 80023ec:	79bb      	ldrb	r3, [r7, #6]
 80023ee:	2b30      	cmp	r3, #48	; 0x30
 80023f0:	d102      	bne.n	80023f8 <rgb_value+0x40>
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	e034      	b.n	8002462 <rgb_value+0xaa>
	else if(j == '1') b = 10;
 80023f8:	79bb      	ldrb	r3, [r7, #6]
 80023fa:	2b31      	cmp	r3, #49	; 0x31
 80023fc:	d102      	bne.n	8002404 <rgb_value+0x4c>
 80023fe:	230a      	movs	r3, #10
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	e02e      	b.n	8002462 <rgb_value+0xaa>
	else if(j == '2') b = 20;
 8002404:	79bb      	ldrb	r3, [r7, #6]
 8002406:	2b32      	cmp	r3, #50	; 0x32
 8002408:	d102      	bne.n	8002410 <rgb_value+0x58>
 800240a:	2314      	movs	r3, #20
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	e028      	b.n	8002462 <rgb_value+0xaa>
	else if(j == '3') b = 30;
 8002410:	79bb      	ldrb	r3, [r7, #6]
 8002412:	2b33      	cmp	r3, #51	; 0x33
 8002414:	d102      	bne.n	800241c <rgb_value+0x64>
 8002416:	231e      	movs	r3, #30
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	e022      	b.n	8002462 <rgb_value+0xaa>
	else if(j == '4') b = 40;
 800241c:	79bb      	ldrb	r3, [r7, #6]
 800241e:	2b34      	cmp	r3, #52	; 0x34
 8002420:	d102      	bne.n	8002428 <rgb_value+0x70>
 8002422:	2328      	movs	r3, #40	; 0x28
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	e01c      	b.n	8002462 <rgb_value+0xaa>
	else if(j == '5') b = 50;
 8002428:	79bb      	ldrb	r3, [r7, #6]
 800242a:	2b35      	cmp	r3, #53	; 0x35
 800242c:	d102      	bne.n	8002434 <rgb_value+0x7c>
 800242e:	2332      	movs	r3, #50	; 0x32
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	e016      	b.n	8002462 <rgb_value+0xaa>
	else if(j == '6') b = 60;
 8002434:	79bb      	ldrb	r3, [r7, #6]
 8002436:	2b36      	cmp	r3, #54	; 0x36
 8002438:	d102      	bne.n	8002440 <rgb_value+0x88>
 800243a:	233c      	movs	r3, #60	; 0x3c
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	e010      	b.n	8002462 <rgb_value+0xaa>
	else if(j == '7') b = 70;
 8002440:	79bb      	ldrb	r3, [r7, #6]
 8002442:	2b37      	cmp	r3, #55	; 0x37
 8002444:	d102      	bne.n	800244c <rgb_value+0x94>
 8002446:	2346      	movs	r3, #70	; 0x46
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	e00a      	b.n	8002462 <rgb_value+0xaa>
	else if(j == '8') b = 80;
 800244c:	79bb      	ldrb	r3, [r7, #6]
 800244e:	2b38      	cmp	r3, #56	; 0x38
 8002450:	d102      	bne.n	8002458 <rgb_value+0xa0>
 8002452:	2350      	movs	r3, #80	; 0x50
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	e004      	b.n	8002462 <rgb_value+0xaa>
	else if(j == '9') b = 90;
 8002458:	79bb      	ldrb	r3, [r7, #6]
 800245a:	2b39      	cmp	r3, #57	; 0x39
 800245c:	d101      	bne.n	8002462 <rgb_value+0xaa>
 800245e:	235a      	movs	r3, #90	; 0x5a
 8002460:	613b      	str	r3, [r7, #16]

	if(k == '0') c = 0;
 8002462:	797b      	ldrb	r3, [r7, #5]
 8002464:	2b30      	cmp	r3, #48	; 0x30
 8002466:	d102      	bne.n	800246e <rgb_value+0xb6>
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	e034      	b.n	80024d8 <rgb_value+0x120>
	else if(k == '1') c = 1;
 800246e:	797b      	ldrb	r3, [r7, #5]
 8002470:	2b31      	cmp	r3, #49	; 0x31
 8002472:	d102      	bne.n	800247a <rgb_value+0xc2>
 8002474:	2301      	movs	r3, #1
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	e02e      	b.n	80024d8 <rgb_value+0x120>
	else if(k == '2') c = 2;
 800247a:	797b      	ldrb	r3, [r7, #5]
 800247c:	2b32      	cmp	r3, #50	; 0x32
 800247e:	d102      	bne.n	8002486 <rgb_value+0xce>
 8002480:	2302      	movs	r3, #2
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	e028      	b.n	80024d8 <rgb_value+0x120>
	else if(k == '3') c = 3;
 8002486:	797b      	ldrb	r3, [r7, #5]
 8002488:	2b33      	cmp	r3, #51	; 0x33
 800248a:	d102      	bne.n	8002492 <rgb_value+0xda>
 800248c:	2303      	movs	r3, #3
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	e022      	b.n	80024d8 <rgb_value+0x120>
	else if(k == '4') c = 4;
 8002492:	797b      	ldrb	r3, [r7, #5]
 8002494:	2b34      	cmp	r3, #52	; 0x34
 8002496:	d102      	bne.n	800249e <rgb_value+0xe6>
 8002498:	2304      	movs	r3, #4
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	e01c      	b.n	80024d8 <rgb_value+0x120>
	else if(k == '5') c = 5;
 800249e:	797b      	ldrb	r3, [r7, #5]
 80024a0:	2b35      	cmp	r3, #53	; 0x35
 80024a2:	d102      	bne.n	80024aa <rgb_value+0xf2>
 80024a4:	2305      	movs	r3, #5
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	e016      	b.n	80024d8 <rgb_value+0x120>
	else if(k == '6') c = 6;
 80024aa:	797b      	ldrb	r3, [r7, #5]
 80024ac:	2b36      	cmp	r3, #54	; 0x36
 80024ae:	d102      	bne.n	80024b6 <rgb_value+0xfe>
 80024b0:	2306      	movs	r3, #6
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	e010      	b.n	80024d8 <rgb_value+0x120>
	else if(k == '7') c = 7;
 80024b6:	797b      	ldrb	r3, [r7, #5]
 80024b8:	2b37      	cmp	r3, #55	; 0x37
 80024ba:	d102      	bne.n	80024c2 <rgb_value+0x10a>
 80024bc:	2307      	movs	r3, #7
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	e00a      	b.n	80024d8 <rgb_value+0x120>
	else if(k == '8') c = 8;
 80024c2:	797b      	ldrb	r3, [r7, #5]
 80024c4:	2b38      	cmp	r3, #56	; 0x38
 80024c6:	d102      	bne.n	80024ce <rgb_value+0x116>
 80024c8:	2308      	movs	r3, #8
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	e004      	b.n	80024d8 <rgb_value+0x120>
	else if(k == '9') c = 9;
 80024ce:	797b      	ldrb	r3, [r7, #5]
 80024d0:	2b39      	cmp	r3, #57	; 0x39
 80024d2:	d101      	bne.n	80024d8 <rgb_value+0x120>
 80024d4:	2309      	movs	r3, #9
 80024d6:	60fb      	str	r3, [r7, #12]

	return a+b+c;
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	441a      	add	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4413      	add	r3, r2
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	371c      	adds	r7, #28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <readRFID>:

extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart6;


int readRFID(){
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	; 0x28
 80024f4:	af00      	add	r7, sp, #0

	  char vehicle[16] = "";
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	f107 030c 	add.w	r3, r7, #12
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]

	  char car[3] = "247";
 8002506:	4a36      	ldr	r2, [pc, #216]	; (80025e0 <readRFID+0xf0>)
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	4611      	mov	r1, r2
 800250e:	8019      	strh	r1, [r3, #0]
 8002510:	3302      	adds	r3, #2
 8002512:	0c12      	lsrs	r2, r2, #16
 8002514:	701a      	strb	r2, [r3, #0]
	  char motorcycle[3] = "355";
 8002516:	4a33      	ldr	r2, [pc, #204]	; (80025e4 <readRFID+0xf4>)
 8002518:	463b      	mov	r3, r7
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	4611      	mov	r1, r2
 800251e:	8019      	strh	r1, [r3, #0]
 8002520:	3302      	adds	r3, #2
 8002522:	0c12      	lsrs	r2, r2, #16
 8002524:	701a      	strb	r2, [r3, #0]

	  int family = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	; 0x24

	  for(int i=0; i<16; i++) vehicle[i] = '_';
 800252a:	2300      	movs	r3, #0
 800252c:	623b      	str	r3, [r7, #32]
 800252e:	e008      	b.n	8002542 <readRFID+0x52>
 8002530:	f107 0208 	add.w	r2, r7, #8
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	4413      	add	r3, r2
 8002538:	225f      	movs	r2, #95	; 0x5f
 800253a:	701a      	strb	r2, [r3, #0]
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	3301      	adds	r3, #1
 8002540:	623b      	str	r3, [r7, #32]
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	2b0f      	cmp	r3, #15
 8002546:	ddf3      	ble.n	8002530 <readRFID+0x40>

	  HAL_UART_Receive(&huart3, (uint8_t *) vehicle, 16, 100);
 8002548:	f107 0108 	add.w	r1, r7, #8
 800254c:	2364      	movs	r3, #100	; 0x64
 800254e:	2210      	movs	r2, #16
 8002550:	4825      	ldr	r0, [pc, #148]	; (80025e8 <readRFID+0xf8>)
 8002552:	f006 fbfc 	bl	8008d4e <HAL_UART_Receive>

	  if (vehicle[15] == '_') return 2;
 8002556:	7dfb      	ldrb	r3, [r7, #23]
 8002558:	2b5f      	cmp	r3, #95	; 0x5f
 800255a:	d101      	bne.n	8002560 <readRFID+0x70>
 800255c:	2302      	movs	r3, #2
 800255e:	e03b      	b.n	80025d8 <readRFID+0xe8>

	  else {
		  for(int i = 0; i<3; i++){
 8002560:	2300      	movs	r3, #0
 8002562:	61fb      	str	r3, [r7, #28]
 8002564:	e015      	b.n	8002592 <readRFID+0xa2>
			  family = 1;
 8002566:	2301      	movs	r3, #1
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
			  if(vehicle[i+13] != car[i]){
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	330d      	adds	r3, #13
 800256e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002572:	4413      	add	r3, r2
 8002574:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 8002578:	1d39      	adds	r1, r7, #4
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	440b      	add	r3, r1
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d003      	beq.n	800258c <readRFID+0x9c>
				  family = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
				  i = 2;
 8002588:	2302      	movs	r3, #2
 800258a:	61fb      	str	r3, [r7, #28]
		  for(int i = 0; i<3; i++){
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	3301      	adds	r3, #1
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	2b02      	cmp	r3, #2
 8002596:	dde6      	ble.n	8002566 <readRFID+0x76>
			  }
		  }

		  if(!family){
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	2b00      	cmp	r3, #0
 800259c:	d11b      	bne.n	80025d6 <readRFID+0xe6>
			  for(int i = 0; i<3; i++){
 800259e:	2300      	movs	r3, #0
 80025a0:	61bb      	str	r3, [r7, #24]
 80025a2:	e015      	b.n	80025d0 <readRFID+0xe0>
				  family = 1;
 80025a4:	2301      	movs	r3, #1
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
				  if(vehicle[13+i] != motorcycle[i]){
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	330d      	adds	r3, #13
 80025ac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025b0:	4413      	add	r3, r2
 80025b2:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 80025b6:	4639      	mov	r1, r7
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	440b      	add	r3, r1
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d003      	beq.n	80025ca <readRFID+0xda>
					  family = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
					  i = 2;
 80025c6:	2302      	movs	r3, #2
 80025c8:	61bb      	str	r3, [r7, #24]
			  for(int i = 0; i<3; i++){
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	3301      	adds	r3, #1
 80025ce:	61bb      	str	r3, [r7, #24]
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	dde6      	ble.n	80025a4 <readRFID+0xb4>
				  }
			  }
		  }
	  }

	  return family;
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3728      	adds	r7, #40	; 0x28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	0800ad30 	.word	0x0800ad30
 80025e4:	0800ad34 	.word	0x0800ad34
 80025e8:	20000d04 	.word	0x20000d04

080025ec <rh_value>:


#include "RH.h"


int rh_value(char i, char j){
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	460a      	mov	r2, r1
 80025f6:	71fb      	strb	r3, [r7, #7]
 80025f8:	4613      	mov	r3, r2
 80025fa:	71bb      	strb	r3, [r7, #6]

	int a, b;

	if(i == '0') a = 0;
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	2b30      	cmp	r3, #48	; 0x30
 8002600:	d102      	bne.n	8002608 <rh_value+0x1c>
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	e034      	b.n	8002672 <rh_value+0x86>
	else if(i == '1') a = 10;
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	2b31      	cmp	r3, #49	; 0x31
 800260c:	d102      	bne.n	8002614 <rh_value+0x28>
 800260e:	230a      	movs	r3, #10
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	e02e      	b.n	8002672 <rh_value+0x86>
	else if(i == '2') a = 20;
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	2b32      	cmp	r3, #50	; 0x32
 8002618:	d102      	bne.n	8002620 <rh_value+0x34>
 800261a:	2314      	movs	r3, #20
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	e028      	b.n	8002672 <rh_value+0x86>
	else if(i == '3') a = 30;
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	2b33      	cmp	r3, #51	; 0x33
 8002624:	d102      	bne.n	800262c <rh_value+0x40>
 8002626:	231e      	movs	r3, #30
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	e022      	b.n	8002672 <rh_value+0x86>
	else if(i == '4') a = 40;
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	2b34      	cmp	r3, #52	; 0x34
 8002630:	d102      	bne.n	8002638 <rh_value+0x4c>
 8002632:	2328      	movs	r3, #40	; 0x28
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	e01c      	b.n	8002672 <rh_value+0x86>
	else if(i == '5') a = 50;
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	2b35      	cmp	r3, #53	; 0x35
 800263c:	d102      	bne.n	8002644 <rh_value+0x58>
 800263e:	2332      	movs	r3, #50	; 0x32
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	e016      	b.n	8002672 <rh_value+0x86>
	else if(i == '6') a = 60;
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	2b36      	cmp	r3, #54	; 0x36
 8002648:	d102      	bne.n	8002650 <rh_value+0x64>
 800264a:	233c      	movs	r3, #60	; 0x3c
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	e010      	b.n	8002672 <rh_value+0x86>
	else if(i == '7') a = 70;
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	2b37      	cmp	r3, #55	; 0x37
 8002654:	d102      	bne.n	800265c <rh_value+0x70>
 8002656:	2346      	movs	r3, #70	; 0x46
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	e00a      	b.n	8002672 <rh_value+0x86>
	else if(i == '8') a = 80;
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	2b38      	cmp	r3, #56	; 0x38
 8002660:	d102      	bne.n	8002668 <rh_value+0x7c>
 8002662:	2350      	movs	r3, #80	; 0x50
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	e004      	b.n	8002672 <rh_value+0x86>
	else if(i == '9') a = 90;
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	2b39      	cmp	r3, #57	; 0x39
 800266c:	d101      	bne.n	8002672 <rh_value+0x86>
 800266e:	235a      	movs	r3, #90	; 0x5a
 8002670:	60fb      	str	r3, [r7, #12]


	if(j == '0') b = 0;
 8002672:	79bb      	ldrb	r3, [r7, #6]
 8002674:	2b30      	cmp	r3, #48	; 0x30
 8002676:	d102      	bne.n	800267e <rh_value+0x92>
 8002678:	2300      	movs	r3, #0
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	e034      	b.n	80026e8 <rh_value+0xfc>
	else if(j == '1') b = 1;
 800267e:	79bb      	ldrb	r3, [r7, #6]
 8002680:	2b31      	cmp	r3, #49	; 0x31
 8002682:	d102      	bne.n	800268a <rh_value+0x9e>
 8002684:	2301      	movs	r3, #1
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	e02e      	b.n	80026e8 <rh_value+0xfc>
	else if(j == '2') b = 2;
 800268a:	79bb      	ldrb	r3, [r7, #6]
 800268c:	2b32      	cmp	r3, #50	; 0x32
 800268e:	d102      	bne.n	8002696 <rh_value+0xaa>
 8002690:	2302      	movs	r3, #2
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	e028      	b.n	80026e8 <rh_value+0xfc>
	else if(j == '3') b = 3;
 8002696:	79bb      	ldrb	r3, [r7, #6]
 8002698:	2b33      	cmp	r3, #51	; 0x33
 800269a:	d102      	bne.n	80026a2 <rh_value+0xb6>
 800269c:	2303      	movs	r3, #3
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	e022      	b.n	80026e8 <rh_value+0xfc>
	else if(j == '4') b = 4;
 80026a2:	79bb      	ldrb	r3, [r7, #6]
 80026a4:	2b34      	cmp	r3, #52	; 0x34
 80026a6:	d102      	bne.n	80026ae <rh_value+0xc2>
 80026a8:	2304      	movs	r3, #4
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	e01c      	b.n	80026e8 <rh_value+0xfc>
	else if(j == '5') b = 5;
 80026ae:	79bb      	ldrb	r3, [r7, #6]
 80026b0:	2b35      	cmp	r3, #53	; 0x35
 80026b2:	d102      	bne.n	80026ba <rh_value+0xce>
 80026b4:	2305      	movs	r3, #5
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	e016      	b.n	80026e8 <rh_value+0xfc>
	else if(j == '6') b = 6;
 80026ba:	79bb      	ldrb	r3, [r7, #6]
 80026bc:	2b36      	cmp	r3, #54	; 0x36
 80026be:	d102      	bne.n	80026c6 <rh_value+0xda>
 80026c0:	2306      	movs	r3, #6
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	e010      	b.n	80026e8 <rh_value+0xfc>
	else if(j == '7') b = 7;
 80026c6:	79bb      	ldrb	r3, [r7, #6]
 80026c8:	2b37      	cmp	r3, #55	; 0x37
 80026ca:	d102      	bne.n	80026d2 <rh_value+0xe6>
 80026cc:	2307      	movs	r3, #7
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	e00a      	b.n	80026e8 <rh_value+0xfc>
	else if(j == '8') b = 8;
 80026d2:	79bb      	ldrb	r3, [r7, #6]
 80026d4:	2b38      	cmp	r3, #56	; 0x38
 80026d6:	d102      	bne.n	80026de <rh_value+0xf2>
 80026d8:	2308      	movs	r3, #8
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	e004      	b.n	80026e8 <rh_value+0xfc>
	else if(j == '9') b = 9;
 80026de:	79bb      	ldrb	r3, [r7, #6]
 80026e0:	2b39      	cmp	r3, #57	; 0x39
 80026e2:	d101      	bne.n	80026e8 <rh_value+0xfc>
 80026e4:	2309      	movs	r3, #9
 80026e6:	60bb      	str	r3, [r7, #8]

	return a+b;
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	4413      	add	r3, r2
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
	...

080026fc <actParcelRFID>:

extern TIM_HandleTypeDef htim2;
extern UART_HandleTypeDef huart6;


void actParcelRFID(){
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0

	while(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == 1) __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 91); 	// Abrir S_Parcela
 8002700:	e003      	b.n	800270a <actParcelRFID+0xe>
 8002702:	4b1a      	ldr	r3, [pc, #104]	; (800276c <actParcelRFID+0x70>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	225b      	movs	r2, #91	; 0x5b
 8002708:	635a      	str	r2, [r3, #52]	; 0x34
 800270a:	2140      	movs	r1, #64	; 0x40
 800270c:	4818      	ldr	r0, [pc, #96]	; (8002770 <actParcelRFID+0x74>)
 800270e:	f004 f9f3 	bl	8006af8 <HAL_GPIO_ReadPin>
 8002712:	4603      	mov	r3, r0
 8002714:	2b01      	cmp	r3, #1
 8002716:	d0f4      	beq.n	8002702 <actParcelRFID+0x6>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89); 	// Rebote
 8002718:	4b14      	ldr	r3, [pc, #80]	; (800276c <actParcelRFID+0x70>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2259      	movs	r2, #89	; 0x59
 800271e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 8002720:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002724:	f003 fab8 	bl	8005c98 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 90); 	// Parar S_Parcela
 8002728:	4b10      	ldr	r3, [pc, #64]	; (800276c <actParcelRFID+0x70>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	225a      	movs	r2, #90	; 0x5a
 800272e:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_Delay(5000);
 8002730:	f241 3088 	movw	r0, #5000	; 0x1388
 8002734:	f003 fab0 	bl	8005c98 <HAL_Delay>

	while(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == 1) __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89); 	// Cerrar S_Parcela
 8002738:	e003      	b.n	8002742 <actParcelRFID+0x46>
 800273a:	4b0c      	ldr	r3, [pc, #48]	; (800276c <actParcelRFID+0x70>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2259      	movs	r2, #89	; 0x59
 8002740:	635a      	str	r2, [r3, #52]	; 0x34
 8002742:	2140      	movs	r1, #64	; 0x40
 8002744:	480a      	ldr	r0, [pc, #40]	; (8002770 <actParcelRFID+0x74>)
 8002746:	f004 f9d7 	bl	8006af8 <HAL_GPIO_ReadPin>
 800274a:	4603      	mov	r3, r0
 800274c:	2b01      	cmp	r3, #1
 800274e:	d0f4      	beq.n	800273a <actParcelRFID+0x3e>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 91); 	// Rebote
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <actParcelRFID+0x70>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	225b      	movs	r2, #91	; 0x5b
 8002756:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 8002758:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800275c:	f003 fa9c 	bl	8005c98 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 90); 	// Parar S_Parcela
 8002760:	4b02      	ldr	r3, [pc, #8]	; (800276c <actParcelRFID+0x70>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	225a      	movs	r2, #90	; 0x5a
 8002766:	635a      	str	r2, [r3, #52]	; 0x34

}
 8002768:	bf00      	nop
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20001020 	.word	0x20001020
 8002770:	40021000 	.word	0x40021000

08002774 <temp_value>:


#include "Temperature.h"


float temp_value(char i, char j, char k){
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
 800277e:	460b      	mov	r3, r1
 8002780:	71bb      	strb	r3, [r7, #6]
 8002782:	4613      	mov	r3, r2
 8002784:	717b      	strb	r3, [r7, #5]

	float a, b, c;

	if(i == '0') a = 0;
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	2b30      	cmp	r3, #48	; 0x30
 800278a:	d103      	bne.n	8002794 <temp_value+0x20>
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	e034      	b.n	80027fe <temp_value+0x8a>
	else if(i == '1') a = 10;
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	2b31      	cmp	r3, #49	; 0x31
 8002798:	d102      	bne.n	80027a0 <temp_value+0x2c>
 800279a:	4b60      	ldr	r3, [pc, #384]	; (800291c <temp_value+0x1a8>)
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	e02e      	b.n	80027fe <temp_value+0x8a>
	else if(i == '2') a = 20;
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	2b32      	cmp	r3, #50	; 0x32
 80027a4:	d102      	bne.n	80027ac <temp_value+0x38>
 80027a6:	4b5e      	ldr	r3, [pc, #376]	; (8002920 <temp_value+0x1ac>)
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	e028      	b.n	80027fe <temp_value+0x8a>
	else if(i == '3') a = 30;
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	2b33      	cmp	r3, #51	; 0x33
 80027b0:	d102      	bne.n	80027b8 <temp_value+0x44>
 80027b2:	4b5c      	ldr	r3, [pc, #368]	; (8002924 <temp_value+0x1b0>)
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	e022      	b.n	80027fe <temp_value+0x8a>
	else if(i == '4') a = 40;
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	2b34      	cmp	r3, #52	; 0x34
 80027bc:	d102      	bne.n	80027c4 <temp_value+0x50>
 80027be:	4b5a      	ldr	r3, [pc, #360]	; (8002928 <temp_value+0x1b4>)
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	e01c      	b.n	80027fe <temp_value+0x8a>
	else if(i == '5') a = 50;
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	2b35      	cmp	r3, #53	; 0x35
 80027c8:	d102      	bne.n	80027d0 <temp_value+0x5c>
 80027ca:	4b58      	ldr	r3, [pc, #352]	; (800292c <temp_value+0x1b8>)
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	e016      	b.n	80027fe <temp_value+0x8a>
	else if(i == '6') a = 60;
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	2b36      	cmp	r3, #54	; 0x36
 80027d4:	d102      	bne.n	80027dc <temp_value+0x68>
 80027d6:	4b56      	ldr	r3, [pc, #344]	; (8002930 <temp_value+0x1bc>)
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	e010      	b.n	80027fe <temp_value+0x8a>
	else if(i == '7') a = 70;
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	2b37      	cmp	r3, #55	; 0x37
 80027e0:	d102      	bne.n	80027e8 <temp_value+0x74>
 80027e2:	4b54      	ldr	r3, [pc, #336]	; (8002934 <temp_value+0x1c0>)
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	e00a      	b.n	80027fe <temp_value+0x8a>
	else if(i == '8') a = 80;
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	2b38      	cmp	r3, #56	; 0x38
 80027ec:	d102      	bne.n	80027f4 <temp_value+0x80>
 80027ee:	4b52      	ldr	r3, [pc, #328]	; (8002938 <temp_value+0x1c4>)
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	e004      	b.n	80027fe <temp_value+0x8a>
	else if(i == '9') a = 90;
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	2b39      	cmp	r3, #57	; 0x39
 80027f8:	d101      	bne.n	80027fe <temp_value+0x8a>
 80027fa:	4b50      	ldr	r3, [pc, #320]	; (800293c <temp_value+0x1c8>)
 80027fc:	617b      	str	r3, [r7, #20]


	if(j == '0') b = 0;
 80027fe:	79bb      	ldrb	r3, [r7, #6]
 8002800:	2b30      	cmp	r3, #48	; 0x30
 8002802:	d103      	bne.n	800280c <temp_value+0x98>
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	e038      	b.n	800287e <temp_value+0x10a>
	else if(j == '1') b = 1;
 800280c:	79bb      	ldrb	r3, [r7, #6]
 800280e:	2b31      	cmp	r3, #49	; 0x31
 8002810:	d103      	bne.n	800281a <temp_value+0xa6>
 8002812:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	e031      	b.n	800287e <temp_value+0x10a>
	else if(j == '2') b = 2;
 800281a:	79bb      	ldrb	r3, [r7, #6]
 800281c:	2b32      	cmp	r3, #50	; 0x32
 800281e:	d103      	bne.n	8002828 <temp_value+0xb4>
 8002820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	e02a      	b.n	800287e <temp_value+0x10a>
	else if(j == '3') b = 3;
 8002828:	79bb      	ldrb	r3, [r7, #6]
 800282a:	2b33      	cmp	r3, #51	; 0x33
 800282c:	d102      	bne.n	8002834 <temp_value+0xc0>
 800282e:	4b44      	ldr	r3, [pc, #272]	; (8002940 <temp_value+0x1cc>)
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	e024      	b.n	800287e <temp_value+0x10a>
	else if(j == '4') b = 4;
 8002834:	79bb      	ldrb	r3, [r7, #6]
 8002836:	2b34      	cmp	r3, #52	; 0x34
 8002838:	d103      	bne.n	8002842 <temp_value+0xce>
 800283a:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	e01d      	b.n	800287e <temp_value+0x10a>
	else if(j == '5') b = 5;
 8002842:	79bb      	ldrb	r3, [r7, #6]
 8002844:	2b35      	cmp	r3, #53	; 0x35
 8002846:	d102      	bne.n	800284e <temp_value+0xda>
 8002848:	4b3e      	ldr	r3, [pc, #248]	; (8002944 <temp_value+0x1d0>)
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	e017      	b.n	800287e <temp_value+0x10a>
	else if(j == '6') b = 6;
 800284e:	79bb      	ldrb	r3, [r7, #6]
 8002850:	2b36      	cmp	r3, #54	; 0x36
 8002852:	d102      	bne.n	800285a <temp_value+0xe6>
 8002854:	4b3c      	ldr	r3, [pc, #240]	; (8002948 <temp_value+0x1d4>)
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	e011      	b.n	800287e <temp_value+0x10a>
	else if(j == '7') b = 7;
 800285a:	79bb      	ldrb	r3, [r7, #6]
 800285c:	2b37      	cmp	r3, #55	; 0x37
 800285e:	d102      	bne.n	8002866 <temp_value+0xf2>
 8002860:	4b3a      	ldr	r3, [pc, #232]	; (800294c <temp_value+0x1d8>)
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	e00b      	b.n	800287e <temp_value+0x10a>
	else if(j == '8') b = 8;
 8002866:	79bb      	ldrb	r3, [r7, #6]
 8002868:	2b38      	cmp	r3, #56	; 0x38
 800286a:	d103      	bne.n	8002874 <temp_value+0x100>
 800286c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	e004      	b.n	800287e <temp_value+0x10a>
	else if(j == '9') b = 9;
 8002874:	79bb      	ldrb	r3, [r7, #6]
 8002876:	2b39      	cmp	r3, #57	; 0x39
 8002878:	d101      	bne.n	800287e <temp_value+0x10a>
 800287a:	4b35      	ldr	r3, [pc, #212]	; (8002950 <temp_value+0x1dc>)
 800287c:	613b      	str	r3, [r7, #16]

	if(k == '0') c = 0;
 800287e:	797b      	ldrb	r3, [r7, #5]
 8002880:	2b30      	cmp	r3, #48	; 0x30
 8002882:	d103      	bne.n	800288c <temp_value+0x118>
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	e035      	b.n	80028f8 <temp_value+0x184>
	else if(k == '1') c = 0.1;
 800288c:	797b      	ldrb	r3, [r7, #5]
 800288e:	2b31      	cmp	r3, #49	; 0x31
 8002890:	d102      	bne.n	8002898 <temp_value+0x124>
 8002892:	4b30      	ldr	r3, [pc, #192]	; (8002954 <temp_value+0x1e0>)
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	e02f      	b.n	80028f8 <temp_value+0x184>
	else if(k == '2') c = 0.2;
 8002898:	797b      	ldrb	r3, [r7, #5]
 800289a:	2b32      	cmp	r3, #50	; 0x32
 800289c:	d102      	bne.n	80028a4 <temp_value+0x130>
 800289e:	4b2e      	ldr	r3, [pc, #184]	; (8002958 <temp_value+0x1e4>)
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	e029      	b.n	80028f8 <temp_value+0x184>
	else if(k == '3') c = 0.3;
 80028a4:	797b      	ldrb	r3, [r7, #5]
 80028a6:	2b33      	cmp	r3, #51	; 0x33
 80028a8:	d102      	bne.n	80028b0 <temp_value+0x13c>
 80028aa:	4b2c      	ldr	r3, [pc, #176]	; (800295c <temp_value+0x1e8>)
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	e023      	b.n	80028f8 <temp_value+0x184>
	else if(k == '4') c = 0.4;
 80028b0:	797b      	ldrb	r3, [r7, #5]
 80028b2:	2b34      	cmp	r3, #52	; 0x34
 80028b4:	d102      	bne.n	80028bc <temp_value+0x148>
 80028b6:	4b2a      	ldr	r3, [pc, #168]	; (8002960 <temp_value+0x1ec>)
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	e01d      	b.n	80028f8 <temp_value+0x184>
	else if(k == '5') c = 0.5;
 80028bc:	797b      	ldrb	r3, [r7, #5]
 80028be:	2b35      	cmp	r3, #53	; 0x35
 80028c0:	d103      	bne.n	80028ca <temp_value+0x156>
 80028c2:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	e016      	b.n	80028f8 <temp_value+0x184>
	else if(k == '6') c = 0.6;
 80028ca:	797b      	ldrb	r3, [r7, #5]
 80028cc:	2b36      	cmp	r3, #54	; 0x36
 80028ce:	d102      	bne.n	80028d6 <temp_value+0x162>
 80028d0:	4b24      	ldr	r3, [pc, #144]	; (8002964 <temp_value+0x1f0>)
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	e010      	b.n	80028f8 <temp_value+0x184>
	else if(k == '7') c = 0.7;
 80028d6:	797b      	ldrb	r3, [r7, #5]
 80028d8:	2b37      	cmp	r3, #55	; 0x37
 80028da:	d102      	bne.n	80028e2 <temp_value+0x16e>
 80028dc:	4b22      	ldr	r3, [pc, #136]	; (8002968 <temp_value+0x1f4>)
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	e00a      	b.n	80028f8 <temp_value+0x184>
	else if(k == '8') c = 0.8;
 80028e2:	797b      	ldrb	r3, [r7, #5]
 80028e4:	2b38      	cmp	r3, #56	; 0x38
 80028e6:	d102      	bne.n	80028ee <temp_value+0x17a>
 80028e8:	4b20      	ldr	r3, [pc, #128]	; (800296c <temp_value+0x1f8>)
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	e004      	b.n	80028f8 <temp_value+0x184>
	else if(k == '9') c = 0.9;
 80028ee:	797b      	ldrb	r3, [r7, #5]
 80028f0:	2b39      	cmp	r3, #57	; 0x39
 80028f2:	d101      	bne.n	80028f8 <temp_value+0x184>
 80028f4:	4b1e      	ldr	r3, [pc, #120]	; (8002970 <temp_value+0x1fc>)
 80028f6:	60fb      	str	r3, [r7, #12]

	return a+b+c;
 80028f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80028fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002900:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002904:	edd7 7a03 	vldr	s15, [r7, #12]
 8002908:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800290c:	eeb0 0a67 	vmov.f32	s0, s15
 8002910:	371c      	adds	r7, #28
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	41200000 	.word	0x41200000
 8002920:	41a00000 	.word	0x41a00000
 8002924:	41f00000 	.word	0x41f00000
 8002928:	42200000 	.word	0x42200000
 800292c:	42480000 	.word	0x42480000
 8002930:	42700000 	.word	0x42700000
 8002934:	428c0000 	.word	0x428c0000
 8002938:	42a00000 	.word	0x42a00000
 800293c:	42b40000 	.word	0x42b40000
 8002940:	40400000 	.word	0x40400000
 8002944:	40a00000 	.word	0x40a00000
 8002948:	40c00000 	.word	0x40c00000
 800294c:	40e00000 	.word	0x40e00000
 8002950:	41100000 	.word	0x41100000
 8002954:	3dcccccd 	.word	0x3dcccccd
 8002958:	3e4ccccd 	.word	0x3e4ccccd
 800295c:	3e99999a 	.word	0x3e99999a
 8002960:	3ecccccd 	.word	0x3ecccccd
 8002964:	3f19999a 	.word	0x3f19999a
 8002968:	3f333333 	.word	0x3f333333
 800296c:	3f4ccccd 	.word	0x3f4ccccd
 8002970:	3f666666 	.word	0x3f666666

08002974 <ringInit>:


void storeChar(unsigned char c, Ring_Buffer *buffer);


void ringInit(void){
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0

	_rx_buffer1 = &rx_buffer1;
 8002978:	4b18      	ldr	r3, [pc, #96]	; (80029dc <ringInit+0x68>)
 800297a:	4a19      	ldr	r2, [pc, #100]	; (80029e0 <ringInit+0x6c>)
 800297c:	601a      	str	r2, [r3, #0]
    _tx_buffer1 = &tx_buffer1;
 800297e:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <ringInit+0x70>)
 8002980:	4a19      	ldr	r2, [pc, #100]	; (80029e8 <ringInit+0x74>)
 8002982:	601a      	str	r2, [r3, #0]
    _rx_buffer2 = &rx_buffer2;
 8002984:	4b19      	ldr	r3, [pc, #100]	; (80029ec <ringInit+0x78>)
 8002986:	4a1a      	ldr	r2, [pc, #104]	; (80029f0 <ringInit+0x7c>)
 8002988:	601a      	str	r2, [r3, #0]
    _tx_buffer2 = &tx_buffer2;
 800298a:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <ringInit+0x80>)
 800298c:	4a1a      	ldr	r2, [pc, #104]	; (80029f8 <ringInit+0x84>)
 800298e:	601a      	str	r2, [r3, #0]

    /* Enable the INTERRUPTION by UART ERROR (frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_ERR);
 8002990:	4b1a      	ldr	r3, [pc, #104]	; (80029fc <ringInit+0x88>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	4b19      	ldr	r3, [pc, #100]	; (80029fc <ringInit+0x88>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_ERR);
 80029a0:	4b17      	ldr	r3, [pc, #92]	; (8002a00 <ringInit+0x8c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695a      	ldr	r2, [r3, #20]
 80029a6:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <ringInit+0x8c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	615a      	str	r2, [r3, #20]

    /* Enable the INTERRUPTION by EMPTY DATA REGISTER */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_RXNE);
 80029b0:	4b12      	ldr	r3, [pc, #72]	; (80029fc <ringInit+0x88>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	4b11      	ldr	r3, [pc, #68]	; (80029fc <ringInit+0x88>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0220 	orr.w	r2, r2, #32
 80029be:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_RXNE);
 80029c0:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <ringInit+0x8c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <ringInit+0x8c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0220 	orr.w	r2, r2, #32
 80029ce:	60da      	str	r2, [r3, #12]
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20000a60 	.word	0x20000a60
 80029e0:	20000090 	.word	0x20000090
 80029e4:	20000a64 	.word	0x20000a64
 80029e8:	20000298 	.word	0x20000298
 80029ec:	20000a68 	.word	0x20000a68
 80029f0:	200004a0 	.word	0x200004a0
 80029f4:	20000a5c 	.word	0x20000a5c
 80029f8:	200006a8 	.word	0x200006a8
 80029fc:	20001068 	.word	0x20001068
 8002a00:	20000fdc 	.word	0x20000fdc

08002a04 <storeChar>:


void storeChar(unsigned char c, Ring_Buffer *buffer){
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	6039      	str	r1, [r7, #0]
 8002a0e:	71fb      	strb	r3, [r7, #7]

    int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a16:	3301      	adds	r3, #1
 8002a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a1c:	60fb      	str	r3, [r7, #12]

    // If we want to stock something before the TAIL, meaning that HEAD will reach the TAIL position, it will cause a BUFFER overflow

    if(i != buffer->tail)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d009      	beq.n	8002a3e <storeChar+0x3a>
    {
    	buffer->buffer[buffer->head] = c;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	79f9      	ldrb	r1, [r7, #7]
 8002a34:	54d1      	strb	r1, [r2, r3]
        buffer->head = i;
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <UART_peek>:
		_rx_buffer2->head = 0;
	}
}


int UART_peek(UART_HandleTypeDef *uart){
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]

	if (uart == WiFi_UART)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a1c      	ldr	r2, [pc, #112]	; (8002ac8 <UART_peek+0x7c>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d114      	bne.n	8002a86 <UART_peek+0x3a>
	{
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 8002a5c:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <UART_peek+0x80>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <UART_peek+0x80>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d102      	bne.n	8002a76 <UART_peek+0x2a>
 8002a70:	f04f 33ff 	mov.w	r3, #4294967295
 8002a74:	e022      	b.n	8002abc <UART_peek+0x70>

		else return _rx_buffer1->buffer[_rx_buffer1->tail];
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <UART_peek+0x80>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	4b14      	ldr	r3, [pc, #80]	; (8002acc <UART_peek+0x80>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a82:	5cd3      	ldrb	r3, [r2, r3]
 8002a84:	e01a      	b.n	8002abc <UART_peek+0x70>
	}

	else if (uart == PC_UART)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a11      	ldr	r2, [pc, #68]	; (8002ad0 <UART_peek+0x84>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d114      	bne.n	8002ab8 <UART_peek+0x6c>
	{
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 8002a8e:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <UART_peek+0x88>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002a96:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <UART_peek+0x88>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d102      	bne.n	8002aa8 <UART_peek+0x5c>
 8002aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa6:	e009      	b.n	8002abc <UART_peek+0x70>

		else return _rx_buffer2->buffer[_rx_buffer2->tail];
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <UART_peek+0x88>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <UART_peek+0x88>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002ab4:	5cd3      	ldrb	r3, [r2, r3]
 8002ab6:	e001      	b.n	8002abc <UART_peek+0x70>
	}

	return -1;
 8002ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	20001068 	.word	0x20001068
 8002acc:	20000a60 	.word	0x20000a60
 8002ad0:	20000fdc 	.word	0x20000fdc
 8002ad4:	20000a68 	.word	0x20000a68

08002ad8 <UART_read>:


int UART_read(UART_HandleTypeDef *uart){
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

	if (uart == WiFi_UART)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a29      	ldr	r2, [pc, #164]	; (8002b88 <UART_read+0xb0>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d121      	bne.n	8002b2c <UART_read+0x54>
	{
		// If HEAD is not before TAIL, there is not CHARACTER
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 8002ae8:	4b28      	ldr	r3, [pc, #160]	; (8002b8c <UART_read+0xb4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002af0:	4b26      	ldr	r3, [pc, #152]	; (8002b8c <UART_read+0xb4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d102      	bne.n	8002b02 <UART_read+0x2a>
 8002afc:	f04f 33ff 	mov.w	r3, #4294967295
 8002b00:	e03c      	b.n	8002b7c <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8002b02:	4b22      	ldr	r3, [pc, #136]	; (8002b8c <UART_read+0xb4>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4b21      	ldr	r3, [pc, #132]	; (8002b8c <UART_read+0xb4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b0e:	5cd3      	ldrb	r3, [r2, r3]
 8002b10:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8002b12:	4b1e      	ldr	r3, [pc, #120]	; (8002b8c <UART_read+0xb4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <UART_read+0xb4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8002b28:	7bbb      	ldrb	r3, [r7, #14]
 8002b2a:	e027      	b.n	8002b7c <UART_read+0xa4>
		}
	}

	else if (uart == PC_UART)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a18      	ldr	r2, [pc, #96]	; (8002b90 <UART_read+0xb8>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d121      	bne.n	8002b78 <UART_read+0xa0>
	{
		// If HEAD is not before TAIL, there is not CHARACTER
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 8002b34:	4b17      	ldr	r3, [pc, #92]	; (8002b94 <UART_read+0xbc>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002b3c:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <UART_read+0xbc>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d102      	bne.n	8002b4e <UART_read+0x76>
 8002b48:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4c:	e016      	b.n	8002b7c <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8002b4e:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <UART_read+0xbc>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <UART_read+0xbc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b5a:	5cd3      	ldrb	r3, [r2, r3]
 8002b5c:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <UART_read+0xbc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <UART_read+0xbc>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b70:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	e001      	b.n	8002b7c <UART_read+0xa4>
		}
	}

	else return -1;
 8002b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	20001068 	.word	0x20001068
 8002b8c:	20000a60 	.word	0x20000a60
 8002b90:	20000fdc 	.word	0x20000fdc
 8002b94:	20000a68 	.word	0x20000a68

08002b98 <UART_write>:


void UART_write(int c, UART_HandleTypeDef *uart){
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]

	if (c>=0)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	db54      	blt.n	8002c52 <UART_write+0xba>
	{
		if (uart == WiFi_UART)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	4a2d      	ldr	r2, [pc, #180]	; (8002c60 <UART_write+0xc8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d126      	bne.n	8002bfe <UART_write+0x66>
		{
			int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8002bb0:	4b2c      	ldr	r3, [pc, #176]	; (8002c64 <UART_write+0xcc>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bb8:	3301      	adds	r3, #1
 8002bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bbe:	60bb      	str	r3, [r7, #8]

			// If OUTPUT BUFFER is full, INTERRUPTION empties it
		    while (i == _tx_buffer1->tail);
 8002bc0:	bf00      	nop
 8002bc2:	4b28      	ldr	r3, [pc, #160]	; (8002c64 <UART_write+0xcc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d0f8      	beq.n	8002bc2 <UART_write+0x2a>

		   _tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8002bd0:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <UART_write+0xcc>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b23      	ldr	r3, [pc, #140]	; (8002c64 <UART_write+0xcc>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	b2c9      	uxtb	r1, r1
 8002be0:	54d1      	strb	r1, [r2, r3]
		   _tx_buffer1->head = i;
 8002be2:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <UART_write+0xcc>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		   // Enables INTERRUPTION in the UART TRANSMISSION
		   __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_TXE);
 8002bec:	4b1c      	ldr	r3, [pc, #112]	; (8002c60 <UART_write+0xc8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <UART_write+0xc8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bfa:	60da      	str	r2, [r3, #12]

			// Enables INTERRUPTION in the UART TRANSMISSION
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
		}
	}
}
 8002bfc:	e029      	b.n	8002c52 <UART_write+0xba>
		else if (uart == PC_UART)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	4a19      	ldr	r2, [pc, #100]	; (8002c68 <UART_write+0xd0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d125      	bne.n	8002c52 <UART_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8002c06:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <UART_write+0xd4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c0e:	3301      	adds	r3, #1
 8002c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c14:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 8002c16:	bf00      	nop
 8002c18:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <UART_write+0xd4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d0f8      	beq.n	8002c18 <UART_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8002c26:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <UART_write+0xd4>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <UART_write+0xd4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	b2c9      	uxtb	r1, r1
 8002c36:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <UART_write+0xd4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
 8002c42:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <UART_write+0xd0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <UART_write+0xd0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c50:	60da      	str	r2, [r3, #12]
}
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	20001068 	.word	0x20001068
 8002c64:	20000a64 	.word	0x20000a64
 8002c68:	20000fdc 	.word	0x20000fdc
 8002c6c:	20000a5c 	.word	0x20000a5c

08002c70 <UART_available>:


int UART_available(UART_HandleTypeDef *uart){
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]

	if (uart == WiFi_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a19      	ldr	r2, [pc, #100]	; (8002ce0 <UART_available+0x70>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d111      	bne.n	8002ca4 <UART_available+0x34>
 8002c80:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <UART_available+0x74>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	4b16      	ldr	r3, [pc, #88]	; (8002ce4 <UART_available+0x74>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ca2:	e017      	b.n	8002cd4 <UART_available+0x64>

	else if (uart == PC_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a10      	ldr	r2, [pc, #64]	; (8002ce8 <UART_available+0x78>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d111      	bne.n	8002cd0 <UART_available+0x60>
 8002cac:	4b0f      	ldr	r3, [pc, #60]	; (8002cec <UART_available+0x7c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <UART_available+0x7c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cce:	e001      	b.n	8002cd4 <UART_available+0x64>

	return -1;
 8002cd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	20001068 	.word	0x20001068
 8002ce4:	20000a60 	.word	0x20000a60
 8002ce8:	20000fdc 	.word	0x20000fdc
 8002cec:	20000a68 	.word	0x20000a68

08002cf0 <UART_send>:

	return 1;
}


void UART_send (const char *s, UART_HandleTypeDef *uart){
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]

	while(*s!='\0') UART_write(*s++, uart);
 8002cfa:	e007      	b.n	8002d0c <UART_send+0x1c>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	607a      	str	r2, [r7, #4]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	6839      	ldr	r1, [r7, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff ff46 	bl	8002b98 <UART_write>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f3      	bne.n	8002cfc <UART_send+0xc>
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <UART_copyUpto>:

  while(*s) UART_write(*s++, uart);
}


int UART_copyUpto(char *string, char *buffertocopyinto, UART_HandleTypeDef *uart){
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]

	int so_far =0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f7fd fa4d 	bl	80001d0 <strlen>
 8002d36:	4603      	mov	r3, r0
 8002d38:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61bb      	str	r3, [r7, #24]

again:
	while (!UART_available(uart));
 8002d3e:	bf00      	nop
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7ff ff95 	bl	8002c70 <UART_available>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f9      	beq.n	8002d40 <UART_copyUpto+0x20>

	while (UART_peek(uart) != string[so_far]){
 8002d4c:	e01f      	b.n	8002d8e <UART_copyUpto+0x6e>

		buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8002d4e:	4b32      	ldr	r3, [pc, #200]	; (8002e18 <UART_copyUpto+0xf8>)
 8002d50:	6819      	ldr	r1, [r3, #0]
 8002d52:	4b31      	ldr	r3, [pc, #196]	; (8002e18 <UART_copyUpto+0xf8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	68b8      	ldr	r0, [r7, #8]
 8002d5e:	4403      	add	r3, r0
 8002d60:	5c8a      	ldrb	r2, [r1, r2]
 8002d62:	701a      	strb	r2, [r3, #0]
		_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8002d64:	4b2c      	ldr	r3, [pc, #176]	; (8002e18 <UART_copyUpto+0xf8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	4b2a      	ldr	r3, [pc, #168]	; (8002e18 <UART_copyUpto+0xf8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d76:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		indx++;
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	61bb      	str	r3, [r7, #24]
		while (!UART_available(uart));
 8002d80:	bf00      	nop
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff ff74 	bl	8002c70 <UART_available>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f9      	beq.n	8002d82 <UART_copyUpto+0x62>
	while (UART_peek(uart) != string[so_far]){
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff fe5c 	bl	8002a4c <UART_peek>
 8002d94:	4601      	mov	r1, r0
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	4299      	cmp	r1, r3
 8002da0:	d1d5      	bne.n	8002d4e <UART_copyUpto+0x2e>

	}

	while (UART_peek(uart) == string [so_far]){
 8002da2:	e01b      	b.n	8002ddc <UART_copyUpto+0xbc>

		so_far++;
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	3301      	adds	r3, #1
 8002da8:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = UART_read(uart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff fe94 	bl	8002ad8 <UART_read>
 8002db0:	4601      	mov	r1, r0
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	61ba      	str	r2, [r7, #24]
 8002db8:	461a      	mov	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	b2ca      	uxtb	r2, r1
 8002dc0:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d101      	bne.n	8002dce <UART_copyUpto+0xae>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e01f      	b.n	8002e0e <UART_copyUpto+0xee>
		while (!UART_available(uart));
 8002dce:	bf00      	nop
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ff4d 	bl	8002c70 <UART_available>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f9      	beq.n	8002dd0 <UART_copyUpto+0xb0>
	while (UART_peek(uart) == string [so_far]){
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff fe35 	bl	8002a4c <UART_peek>
 8002de2:	4601      	mov	r1, r0
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4413      	add	r3, r2
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	4299      	cmp	r1, r3
 8002dee:	d0d9      	beq.n	8002da4 <UART_copyUpto+0x84>
	}

	if (so_far != len){
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d002      	beq.n	8002dfe <UART_copyUpto+0xde>

		so_far = 0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61fb      	str	r3, [r7, #28]
		goto again;
 8002dfc:	e79f      	b.n	8002d3e <UART_copyUpto+0x1e>
	}

	if (so_far == len) return 1;
 8002dfe:	69fa      	ldr	r2, [r7, #28]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d101      	bne.n	8002e0a <UART_copyUpto+0xea>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e001      	b.n	8002e0e <UART_copyUpto+0xee>

	else return -1;
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3720      	adds	r7, #32
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000a60 	.word	0x20000a60

08002e1c <UART_waitFor>:


int UART_waitFor(char *string,UART_HandleTypeDef *uart){
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]

	int so_far =0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7fd f9d0 	bl	80001d0 <strlen>
 8002e30:	4603      	mov	r3, r0
 8002e32:	60bb      	str	r3, [r7, #8]

again_device:
	while (!UART_available(uart));
 8002e34:	bf00      	nop
 8002e36:	6838      	ldr	r0, [r7, #0]
 8002e38:	f7ff ff1a 	bl	8002c70 <UART_available>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f9      	beq.n	8002e36 <UART_waitFor+0x1a>

	if (UART_peek(uart) != string[so_far]){
 8002e42:	6838      	ldr	r0, [r7, #0]
 8002e44:	f7ff fe02 	bl	8002a4c <UART_peek>
 8002e48:	4601      	mov	r1, r0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	4413      	add	r3, r2
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	4299      	cmp	r1, r3
 8002e54:	d01e      	beq.n	8002e94 <UART_waitFor+0x78>

		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 8002e56:	4b1e      	ldr	r3, [pc, #120]	; (8002ed0 <UART_waitFor+0xb4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <UART_waitFor+0xb4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 8002e6c:	e7e2      	b.n	8002e34 <UART_waitFor+0x18>

	}

	while (UART_peek(uart) == string [so_far]){

		so_far++;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	3301      	adds	r3, #1
 8002e72:	60fb      	str	r3, [r7, #12]
		UART_read(uart);
 8002e74:	6838      	ldr	r0, [r7, #0]
 8002e76:	f7ff fe2f 	bl	8002ad8 <UART_read>
		if (so_far == len) return 1;
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d101      	bne.n	8002e86 <UART_waitFor+0x6a>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e01f      	b.n	8002ec6 <UART_waitFor+0xaa>
		while (!UART_available(uart));
 8002e86:	bf00      	nop
 8002e88:	6838      	ldr	r0, [r7, #0]
 8002e8a:	f7ff fef1 	bl	8002c70 <UART_available>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f9      	beq.n	8002e88 <UART_waitFor+0x6c>
	while (UART_peek(uart) == string [so_far]){
 8002e94:	6838      	ldr	r0, [r7, #0]
 8002e96:	f7ff fdd9 	bl	8002a4c <UART_peek>
 8002e9a:	4601      	mov	r1, r0
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	4299      	cmp	r1, r3
 8002ea6:	d0e2      	beq.n	8002e6e <UART_waitFor+0x52>
	}

	if (so_far != len){
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d002      	beq.n	8002eb6 <UART_waitFor+0x9a>

		so_far = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60fb      	str	r3, [r7, #12]
		goto again_device;
 8002eb4:	e7be      	b.n	8002e34 <UART_waitFor+0x18>
	}

	if (so_far == len) return 1;
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d101      	bne.n	8002ec2 <UART_waitFor+0xa6>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e001      	b.n	8002ec6 <UART_waitFor+0xaa>

	else return -1;
 8002ec2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20000a60 	.word	0x20000a60

08002ed4 <UART_isr>:


void UART_isr(UART_HandleTypeDef *huart){
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]

	uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	613b      	str	r3, [r7, #16]

	/* If DR (DATA REGISTER) is not empty and RX INT is ENABLE */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d023      	beq.n	8002f3e <UART_isr+0x6a>
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01e      	beq.n	8002f3e <UART_isr+0x6a>
    	    	                USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	************************************************************************************************************/

		huart->Instance->SR;                   // Read SR (STATUS REGISTER)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR; // Read DR (DATA REGISTER)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	73fb      	strb	r3, [r7, #15]

        if (huart == WiFi_UART){
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a3f      	ldr	r2, [pc, #252]	; (8003010 <UART_isr+0x13c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d107      	bne.n	8002f26 <UART_isr+0x52>

        	storeChar(c, _rx_buffer1); // Stock DATA in BUFFER
 8002f16:	4b3f      	ldr	r3, [pc, #252]	; (8003014 <UART_isr+0x140>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fd70 	bl	8002a04 <storeChar>
        else if (huart == PC_UART){

        	storeChar(c, _rx_buffer2); // Stock DATA in BUFFER
        }

        return;
 8002f24:	e06d      	b.n	8003002 <UART_isr+0x12e>
        else if (huart == PC_UART){
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a3b      	ldr	r2, [pc, #236]	; (8003018 <UART_isr+0x144>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d169      	bne.n	8003002 <UART_isr+0x12e>
        	storeChar(c, _rx_buffer2); // Stock DATA in BUFFER
 8002f2e:	4b3b      	ldr	r3, [pc, #236]	; (800301c <UART_isr+0x148>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff fd64 	bl	8002a04 <storeChar>
        return;
 8002f3c:	e061      	b.n	8003002 <UART_isr+0x12e>
    }

    /* If INTERRUPTION is produced by TRANSMIT DATA REGISTER EMPTY */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET)){
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d05f      	beq.n	8003008 <UART_isr+0x134>
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d05a      	beq.n	8003008 <UART_isr+0x134>

    	if (huart == WiFi_UART){
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a2e      	ldr	r2, [pc, #184]	; (8003010 <UART_isr+0x13c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d127      	bne.n	8002faa <UART_isr+0xd6>

    		if(tx_buffer1.head == tx_buffer1.tail){
 8002f5a:	4b31      	ldr	r3, [pc, #196]	; (8003020 <UART_isr+0x14c>)
 8002f5c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002f60:	4b2f      	ldr	r3, [pc, #188]	; (8003020 <UART_isr+0x14c>)
 8002f62:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d108      	bne.n	8002f7c <UART_isr+0xa8>

    			// Empty BUFFER, disable INTERRUPTION
    	        __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f78:	60da      	str	r2, [r3, #12]
        	     huart->Instance->DR = c;

        	}
        }

    	return;
 8002f7a:	e044      	b.n	8003006 <UART_isr+0x132>
    			unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8002f7c:	4b28      	ldr	r3, [pc, #160]	; (8003020 <UART_isr+0x14c>)
 8002f7e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002f82:	4a27      	ldr	r2, [pc, #156]	; (8003020 <UART_isr+0x14c>)
 8002f84:	5cd3      	ldrb	r3, [r2, r3]
 8002f86:	737b      	strb	r3, [r7, #13]
    			tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8002f88:	4b25      	ldr	r3, [pc, #148]	; (8003020 <UART_isr+0x14c>)
 8002f8a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002f8e:	3301      	adds	r3, #1
 8002f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f94:	4a22      	ldr	r2, [pc, #136]	; (8003020 <UART_isr+0x14c>)
 8002f96:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    			huart->Instance->SR;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
    			huart->Instance->DR = c;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	7b7a      	ldrb	r2, [r7, #13]
 8002fa6:	605a      	str	r2, [r3, #4]
    	return;
 8002fa8:	e02d      	b.n	8003006 <UART_isr+0x132>
    	else if (huart == PC_UART){
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a1a      	ldr	r2, [pc, #104]	; (8003018 <UART_isr+0x144>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d129      	bne.n	8003006 <UART_isr+0x132>
    		if(tx_buffer2.head == tx_buffer2.tail){
 8002fb2:	4b1c      	ldr	r3, [pc, #112]	; (8003024 <UART_isr+0x150>)
 8002fb4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002fb8:	4b1a      	ldr	r3, [pc, #104]	; (8003024 <UART_isr+0x150>)
 8002fba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d108      	bne.n	8002fd4 <UART_isr+0x100>
        	    __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fd0:	60da      	str	r2, [r3, #12]
    	return;
 8002fd2:	e018      	b.n	8003006 <UART_isr+0x132>
        	    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8002fd4:	4b13      	ldr	r3, [pc, #76]	; (8003024 <UART_isr+0x150>)
 8002fd6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002fda:	4a12      	ldr	r2, [pc, #72]	; (8003024 <UART_isr+0x150>)
 8002fdc:	5cd3      	ldrb	r3, [r2, r3]
 8002fde:	73bb      	strb	r3, [r7, #14]
        	    tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8002fe0:	4b10      	ldr	r3, [pc, #64]	; (8003024 <UART_isr+0x150>)
 8002fe2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fec:	4a0d      	ldr	r2, [pc, #52]	; (8003024 <UART_isr+0x150>)
 8002fee:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	     huart->Instance->SR;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
        	     huart->Instance->DR = c;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	7bba      	ldrb	r2, [r7, #14]
 8002ffe:	605a      	str	r2, [r3, #4]
    	return;
 8003000:	e001      	b.n	8003006 <UART_isr+0x132>
        return;
 8003002:	bf00      	nop
 8003004:	e000      	b.n	8003008 <UART_isr+0x134>
    	return;
 8003006:	bf00      	nop
    }
}
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20001068 	.word	0x20001068
 8003014:	20000a60 	.word	0x20000a60
 8003018:	20000fdc 	.word	0x20000fdc
 800301c:	20000a68 	.word	0x20000a68
 8003020:	20000298 	.word	0x20000298
 8003024:	200006a8 	.word	0x200006a8

08003028 <draw_pixel>:

uint8_t gddram[4][128];


void draw_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	71fb      	strb	r3, [r7, #7]
 8003032:	460b      	mov	r3, r1
 8003034:	71bb      	strb	r3, [r7, #6]
 8003036:	4613      	mov	r3, r2
 8003038:	717b      	strb	r3, [r7, #5]
	if(x<128 && y<32)
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	2b00      	cmp	r3, #0
 8003040:	db3b      	blt.n	80030ba <draw_pixel+0x92>
 8003042:	79bb      	ldrb	r3, [r7, #6]
 8003044:	2b1f      	cmp	r3, #31
 8003046:	d838      	bhi.n	80030ba <draw_pixel+0x92>
	{
		uint8_t pixel = 0x01;
 8003048:	2301      	movs	r3, #1
 800304a:	73fb      	strb	r3, [r7, #15]
		uint8_t line = y>>3;
 800304c:	79bb      	ldrb	r3, [r7, #6]
 800304e:	08db      	lsrs	r3, r3, #3
 8003050:	73bb      	strb	r3, [r7, #14]
		uint8_t byte = pixel<<(y%8);
 8003052:	7bfa      	ldrb	r2, [r7, #15]
 8003054:	79bb      	ldrb	r3, [r7, #6]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	737b      	strb	r3, [r7, #13]
		if(color)
 8003060:	797b      	ldrb	r3, [r7, #5]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d012      	beq.n	800308c <draw_pixel+0x64>
			gddram[line][x] |= byte;
 8003066:	7bba      	ldrb	r2, [r7, #14]
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	4917      	ldr	r1, [pc, #92]	; (80030c8 <draw_pixel+0xa0>)
 800306c:	01d2      	lsls	r2, r2, #7
 800306e:	440a      	add	r2, r1
 8003070:	4413      	add	r3, r2
 8003072:	7818      	ldrb	r0, [r3, #0]
 8003074:	7bba      	ldrb	r2, [r7, #14]
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	7b79      	ldrb	r1, [r7, #13]
 800307a:	4301      	orrs	r1, r0
 800307c:	b2c8      	uxtb	r0, r1
 800307e:	4912      	ldr	r1, [pc, #72]	; (80030c8 <draw_pixel+0xa0>)
 8003080:	01d2      	lsls	r2, r2, #7
 8003082:	440a      	add	r2, r1
 8003084:	4413      	add	r3, r2
 8003086:	4602      	mov	r2, r0
 8003088:	701a      	strb	r2, [r3, #0]
		else
			gddram[line][x] &= ~byte;
	}
}
 800308a:	e016      	b.n	80030ba <draw_pixel+0x92>
			gddram[line][x] &= ~byte;
 800308c:	7bba      	ldrb	r2, [r7, #14]
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	490d      	ldr	r1, [pc, #52]	; (80030c8 <draw_pixel+0xa0>)
 8003092:	01d2      	lsls	r2, r2, #7
 8003094:	440a      	add	r2, r1
 8003096:	4413      	add	r3, r2
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	b25a      	sxtb	r2, r3
 800309c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	b25b      	sxtb	r3, r3
 80030a4:	4013      	ands	r3, r2
 80030a6:	b259      	sxtb	r1, r3
 80030a8:	7bba      	ldrb	r2, [r7, #14]
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	b2c8      	uxtb	r0, r1
 80030ae:	4906      	ldr	r1, [pc, #24]	; (80030c8 <draw_pixel+0xa0>)
 80030b0:	01d2      	lsls	r2, r2, #7
 80030b2:	440a      	add	r2, r1
 80030b4:	4413      	add	r3, r2
 80030b6:	4602      	mov	r2, r0
 80030b8:	701a      	strb	r2, [r3, #0]
}
 80030ba:	bf00      	nop
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	20000a6c 	.word	0x20000a6c

080030cc <invert_pixel>:
				draw_pixel(x*3+i,y*3+j,color);
	}
}

void invert_pixel(uint8_t x, uint8_t y)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	460a      	mov	r2, r1
 80030d6:	71fb      	strb	r3, [r7, #7]
 80030d8:	4613      	mov	r3, r2
 80030da:	71bb      	strb	r3, [r7, #6]
	if(x<128 && y<32)
 80030dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	db24      	blt.n	800312e <invert_pixel+0x62>
 80030e4:	79bb      	ldrb	r3, [r7, #6]
 80030e6:	2b1f      	cmp	r3, #31
 80030e8:	d821      	bhi.n	800312e <invert_pixel+0x62>
	{
		uint8_t pixel = 0x01;
 80030ea:	2301      	movs	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
		gddram[y>>3][x] ^= pixel<<(y%8);
 80030ee:	79bb      	ldrb	r3, [r7, #6]
 80030f0:	08db      	lsrs	r3, r3, #3
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	461a      	mov	r2, r3
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	4910      	ldr	r1, [pc, #64]	; (800313c <invert_pixel+0x70>)
 80030fa:	01d2      	lsls	r2, r2, #7
 80030fc:	440a      	add	r2, r1
 80030fe:	4413      	add	r3, r2
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	b25a      	sxtb	r2, r3
 8003104:	7bf9      	ldrb	r1, [r7, #15]
 8003106:	79bb      	ldrb	r3, [r7, #6]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	fa01 f303 	lsl.w	r3, r1, r3
 8003110:	b25b      	sxtb	r3, r3
 8003112:	4053      	eors	r3, r2
 8003114:	b259      	sxtb	r1, r3
 8003116:	79bb      	ldrb	r3, [r7, #6]
 8003118:	08db      	lsrs	r3, r3, #3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	b2c8      	uxtb	r0, r1
 8003122:	4906      	ldr	r1, [pc, #24]	; (800313c <invert_pixel+0x70>)
 8003124:	01d2      	lsls	r2, r2, #7
 8003126:	440a      	add	r2, r1
 8003128:	4413      	add	r3, r2
 800312a:	4602      	mov	r2, r0
 800312c:	701a      	strb	r2, [r3, #0]
	}
}
 800312e:	bf00      	nop
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	20000a6c 	.word	0x20000a6c

08003140 <line_v>:
		for(j=0;j<128;j++)
			gddram[i][j]=0x00;
}

void line_v(uint8_t y0, uint8_t y1, uint8_t x, uint8_t width, uint8_t mode)
{
 8003140:	b590      	push	{r4, r7, lr}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	4604      	mov	r4, r0
 8003148:	4608      	mov	r0, r1
 800314a:	4611      	mov	r1, r2
 800314c:	461a      	mov	r2, r3
 800314e:	4623      	mov	r3, r4
 8003150:	71fb      	strb	r3, [r7, #7]
 8003152:	4603      	mov	r3, r0
 8003154:	71bb      	strb	r3, [r7, #6]
 8003156:	460b      	mov	r3, r1
 8003158:	717b      	strb	r3, [r7, #5]
 800315a:	4613      	mov	r3, r2
 800315c:	713b      	strb	r3, [r7, #4]
	if(y0>y1)
 800315e:	79fa      	ldrb	r2, [r7, #7]
 8003160:	79bb      	ldrb	r3, [r7, #6]
 8003162:	429a      	cmp	r2, r3
 8003164:	d905      	bls.n	8003172 <line_v+0x32>
	{
		uint8_t temp = y0;
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	757b      	strb	r3, [r7, #21]
		y0 = y1;
 800316a:	79bb      	ldrb	r3, [r7, #6]
 800316c:	71fb      	strb	r3, [r7, #7]
		y1 = temp;
 800316e:	7d7b      	ldrb	r3, [r7, #21]
 8003170:	71bb      	strb	r3, [r7, #6]
	}
	uint8_t i,j;
	switch(mode)
 8003172:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003176:	2b02      	cmp	r3, #2
 8003178:	f000 80ac 	beq.w	80032d4 <line_v+0x194>
 800317c:	2b02      	cmp	r3, #2
 800317e:	f300 80fb 	bgt.w	8003378 <line_v+0x238>
 8003182:	2b00      	cmp	r3, #0
 8003184:	d054      	beq.n	8003230 <line_v+0xf0>
 8003186:	2b01      	cmp	r3, #1
 8003188:	f040 80f6 	bne.w	8003378 <line_v+0x238>
	{
		case add :
			if(width%2)
 800318c:	793b      	ldrb	r3, [r7, #4]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d027      	beq.n	80031e8 <line_v+0xa8>
			{
				uint8_t start = x-(width-1)/2;
 8003198:	793b      	ldrb	r3, [r7, #4]
 800319a:	3b01      	subs	r3, #1
 800319c:	0fda      	lsrs	r2, r3, #31
 800319e:	4413      	add	r3, r2
 80031a0:	105b      	asrs	r3, r3, #1
 80031a2:	425b      	negs	r3, r3
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	797b      	ldrb	r3, [r7, #5]
 80031a8:	4413      	add	r3, r2
 80031aa:	747b      	strb	r3, [r7, #17]
				for(i=0;i<width;i++)
 80031ac:	2300      	movs	r3, #0
 80031ae:	75fb      	strb	r3, [r7, #23]
 80031b0:	e015      	b.n	80031de <line_v+0x9e>
					for(j=y0;j<y1;j++)
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	75bb      	strb	r3, [r7, #22]
 80031b6:	e00b      	b.n	80031d0 <line_v+0x90>
						draw_pixel(start+i,j,1);
 80031b8:	7c7a      	ldrb	r2, [r7, #17]
 80031ba:	7dfb      	ldrb	r3, [r7, #23]
 80031bc:	4413      	add	r3, r2
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	7db9      	ldrb	r1, [r7, #22]
 80031c2:	2201      	movs	r2, #1
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff ff2f 	bl	8003028 <draw_pixel>
					for(j=y0;j<y1;j++)
 80031ca:	7dbb      	ldrb	r3, [r7, #22]
 80031cc:	3301      	adds	r3, #1
 80031ce:	75bb      	strb	r3, [r7, #22]
 80031d0:	7dba      	ldrb	r2, [r7, #22]
 80031d2:	79bb      	ldrb	r3, [r7, #6]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d3ef      	bcc.n	80031b8 <line_v+0x78>
				for(i=0;i<width;i++)
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
 80031da:	3301      	adds	r3, #1
 80031dc:	75fb      	strb	r3, [r7, #23]
 80031de:	7dfa      	ldrb	r2, [r7, #23]
 80031e0:	793b      	ldrb	r3, [r7, #4]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d3e5      	bcc.n	80031b2 <line_v+0x72>
				uint8_t start = x-width/2;
				for(i=0;i<width;i++)
					for(j=y0;j<y1;j++)
						draw_pixel(start+i,j,1);
			}
			break;
 80031e6:	e0c7      	b.n	8003378 <line_v+0x238>
				uint8_t start = x-width/2;
 80031e8:	793b      	ldrb	r3, [r7, #4]
 80031ea:	085b      	lsrs	r3, r3, #1
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	797a      	ldrb	r2, [r7, #5]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	74bb      	strb	r3, [r7, #18]
				for(i=0;i<width;i++)
 80031f4:	2300      	movs	r3, #0
 80031f6:	75fb      	strb	r3, [r7, #23]
 80031f8:	e015      	b.n	8003226 <line_v+0xe6>
					for(j=y0;j<y1;j++)
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	75bb      	strb	r3, [r7, #22]
 80031fe:	e00b      	b.n	8003218 <line_v+0xd8>
						draw_pixel(start+i,j,1);
 8003200:	7cba      	ldrb	r2, [r7, #18]
 8003202:	7dfb      	ldrb	r3, [r7, #23]
 8003204:	4413      	add	r3, r2
 8003206:	b2db      	uxtb	r3, r3
 8003208:	7db9      	ldrb	r1, [r7, #22]
 800320a:	2201      	movs	r2, #1
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff0b 	bl	8003028 <draw_pixel>
					for(j=y0;j<y1;j++)
 8003212:	7dbb      	ldrb	r3, [r7, #22]
 8003214:	3301      	adds	r3, #1
 8003216:	75bb      	strb	r3, [r7, #22]
 8003218:	7dba      	ldrb	r2, [r7, #22]
 800321a:	79bb      	ldrb	r3, [r7, #6]
 800321c:	429a      	cmp	r2, r3
 800321e:	d3ef      	bcc.n	8003200 <line_v+0xc0>
				for(i=0;i<width;i++)
 8003220:	7dfb      	ldrb	r3, [r7, #23]
 8003222:	3301      	adds	r3, #1
 8003224:	75fb      	strb	r3, [r7, #23]
 8003226:	7dfa      	ldrb	r2, [r7, #23]
 8003228:	793b      	ldrb	r3, [r7, #4]
 800322a:	429a      	cmp	r2, r3
 800322c:	d3e5      	bcc.n	80031fa <line_v+0xba>
			break;
 800322e:	e0a3      	b.n	8003378 <line_v+0x238>

		case erase :
			if(width%2)
 8003230:	793b      	ldrb	r3, [r7, #4]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d027      	beq.n	800328c <line_v+0x14c>
			{
				uint8_t start = x-(width-1)/2;
 800323c:	793b      	ldrb	r3, [r7, #4]
 800323e:	3b01      	subs	r3, #1
 8003240:	0fda      	lsrs	r2, r3, #31
 8003242:	4413      	add	r3, r2
 8003244:	105b      	asrs	r3, r3, #1
 8003246:	425b      	negs	r3, r3
 8003248:	b2da      	uxtb	r2, r3
 800324a:	797b      	ldrb	r3, [r7, #5]
 800324c:	4413      	add	r3, r2
 800324e:	73fb      	strb	r3, [r7, #15]
				for(i=0;i<width;i++)
 8003250:	2300      	movs	r3, #0
 8003252:	75fb      	strb	r3, [r7, #23]
 8003254:	e015      	b.n	8003282 <line_v+0x142>
					for(j=y0;j<y1;j++)
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	75bb      	strb	r3, [r7, #22]
 800325a:	e00b      	b.n	8003274 <line_v+0x134>
						draw_pixel(start+i,j,0);
 800325c:	7bfa      	ldrb	r2, [r7, #15]
 800325e:	7dfb      	ldrb	r3, [r7, #23]
 8003260:	4413      	add	r3, r2
 8003262:	b2db      	uxtb	r3, r3
 8003264:	7db9      	ldrb	r1, [r7, #22]
 8003266:	2200      	movs	r2, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff fedd 	bl	8003028 <draw_pixel>
					for(j=y0;j<y1;j++)
 800326e:	7dbb      	ldrb	r3, [r7, #22]
 8003270:	3301      	adds	r3, #1
 8003272:	75bb      	strb	r3, [r7, #22]
 8003274:	7dba      	ldrb	r2, [r7, #22]
 8003276:	79bb      	ldrb	r3, [r7, #6]
 8003278:	429a      	cmp	r2, r3
 800327a:	d3ef      	bcc.n	800325c <line_v+0x11c>
				for(i=0;i<width;i++)
 800327c:	7dfb      	ldrb	r3, [r7, #23]
 800327e:	3301      	adds	r3, #1
 8003280:	75fb      	strb	r3, [r7, #23]
 8003282:	7dfa      	ldrb	r2, [r7, #23]
 8003284:	793b      	ldrb	r3, [r7, #4]
 8003286:	429a      	cmp	r2, r3
 8003288:	d3e5      	bcc.n	8003256 <line_v+0x116>
				uint8_t start = x-width/2;
				for(i=0;i<width;i++)
					for(j=y0;j<y1;j++)
						draw_pixel(start+i,j,0);
			}
			break;
 800328a:	e075      	b.n	8003378 <line_v+0x238>
				uint8_t start = x-width/2;
 800328c:	793b      	ldrb	r3, [r7, #4]
 800328e:	085b      	lsrs	r3, r3, #1
 8003290:	b2db      	uxtb	r3, r3
 8003292:	797a      	ldrb	r2, [r7, #5]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	743b      	strb	r3, [r7, #16]
				for(i=0;i<width;i++)
 8003298:	2300      	movs	r3, #0
 800329a:	75fb      	strb	r3, [r7, #23]
 800329c:	e015      	b.n	80032ca <line_v+0x18a>
					for(j=y0;j<y1;j++)
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	75bb      	strb	r3, [r7, #22]
 80032a2:	e00b      	b.n	80032bc <line_v+0x17c>
						draw_pixel(start+i,j,0);
 80032a4:	7c3a      	ldrb	r2, [r7, #16]
 80032a6:	7dfb      	ldrb	r3, [r7, #23]
 80032a8:	4413      	add	r3, r2
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	7db9      	ldrb	r1, [r7, #22]
 80032ae:	2200      	movs	r2, #0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff feb9 	bl	8003028 <draw_pixel>
					for(j=y0;j<y1;j++)
 80032b6:	7dbb      	ldrb	r3, [r7, #22]
 80032b8:	3301      	adds	r3, #1
 80032ba:	75bb      	strb	r3, [r7, #22]
 80032bc:	7dba      	ldrb	r2, [r7, #22]
 80032be:	79bb      	ldrb	r3, [r7, #6]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d3ef      	bcc.n	80032a4 <line_v+0x164>
				for(i=0;i<width;i++)
 80032c4:	7dfb      	ldrb	r3, [r7, #23]
 80032c6:	3301      	adds	r3, #1
 80032c8:	75fb      	strb	r3, [r7, #23]
 80032ca:	7dfa      	ldrb	r2, [r7, #23]
 80032cc:	793b      	ldrb	r3, [r7, #4]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d3e5      	bcc.n	800329e <line_v+0x15e>
			break;
 80032d2:	e051      	b.n	8003378 <line_v+0x238>

		case invert :
			if(width%2)
 80032d4:	793b      	ldrb	r3, [r7, #4]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d027      	beq.n	8003330 <line_v+0x1f0>
			{
				uint8_t start = x-(width-1)/2;
 80032e0:	793b      	ldrb	r3, [r7, #4]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	0fda      	lsrs	r2, r3, #31
 80032e6:	4413      	add	r3, r2
 80032e8:	105b      	asrs	r3, r3, #1
 80032ea:	425b      	negs	r3, r3
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	797b      	ldrb	r3, [r7, #5]
 80032f0:	4413      	add	r3, r2
 80032f2:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<width;i++)
 80032f4:	2300      	movs	r3, #0
 80032f6:	75fb      	strb	r3, [r7, #23]
 80032f8:	e015      	b.n	8003326 <line_v+0x1e6>
					for(j=y0;j<y1;j++)
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	75bb      	strb	r3, [r7, #22]
 80032fe:	e00b      	b.n	8003318 <line_v+0x1d8>
						invert_pixel(start+i,j);
 8003300:	7cfa      	ldrb	r2, [r7, #19]
 8003302:	7dfb      	ldrb	r3, [r7, #23]
 8003304:	4413      	add	r3, r2
 8003306:	b2db      	uxtb	r3, r3
 8003308:	7dba      	ldrb	r2, [r7, #22]
 800330a:	4611      	mov	r1, r2
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fedd 	bl	80030cc <invert_pixel>
					for(j=y0;j<y1;j++)
 8003312:	7dbb      	ldrb	r3, [r7, #22]
 8003314:	3301      	adds	r3, #1
 8003316:	75bb      	strb	r3, [r7, #22]
 8003318:	7dba      	ldrb	r2, [r7, #22]
 800331a:	79bb      	ldrb	r3, [r7, #6]
 800331c:	429a      	cmp	r2, r3
 800331e:	d3ef      	bcc.n	8003300 <line_v+0x1c0>
				for(i=0;i<width;i++)
 8003320:	7dfb      	ldrb	r3, [r7, #23]
 8003322:	3301      	adds	r3, #1
 8003324:	75fb      	strb	r3, [r7, #23]
 8003326:	7dfa      	ldrb	r2, [r7, #23]
 8003328:	793b      	ldrb	r3, [r7, #4]
 800332a:	429a      	cmp	r2, r3
 800332c:	d3e5      	bcc.n	80032fa <line_v+0x1ba>
				uint8_t start = x-width/2;
				for(i=0;i<width;i++)
					for(j=y0;j<y1;j++)
						invert_pixel(start+i,j);
			}
			break;
 800332e:	e022      	b.n	8003376 <line_v+0x236>
				uint8_t start = x-width/2;
 8003330:	793b      	ldrb	r3, [r7, #4]
 8003332:	085b      	lsrs	r3, r3, #1
 8003334:	b2db      	uxtb	r3, r3
 8003336:	797a      	ldrb	r2, [r7, #5]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	753b      	strb	r3, [r7, #20]
				for(i=0;i<width;i++)
 800333c:	2300      	movs	r3, #0
 800333e:	75fb      	strb	r3, [r7, #23]
 8003340:	e015      	b.n	800336e <line_v+0x22e>
					for(j=y0;j<y1;j++)
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	75bb      	strb	r3, [r7, #22]
 8003346:	e00b      	b.n	8003360 <line_v+0x220>
						invert_pixel(start+i,j);
 8003348:	7d3a      	ldrb	r2, [r7, #20]
 800334a:	7dfb      	ldrb	r3, [r7, #23]
 800334c:	4413      	add	r3, r2
 800334e:	b2db      	uxtb	r3, r3
 8003350:	7dba      	ldrb	r2, [r7, #22]
 8003352:	4611      	mov	r1, r2
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff feb9 	bl	80030cc <invert_pixel>
					for(j=y0;j<y1;j++)
 800335a:	7dbb      	ldrb	r3, [r7, #22]
 800335c:	3301      	adds	r3, #1
 800335e:	75bb      	strb	r3, [r7, #22]
 8003360:	7dba      	ldrb	r2, [r7, #22]
 8003362:	79bb      	ldrb	r3, [r7, #6]
 8003364:	429a      	cmp	r2, r3
 8003366:	d3ef      	bcc.n	8003348 <line_v+0x208>
				for(i=0;i<width;i++)
 8003368:	7dfb      	ldrb	r3, [r7, #23]
 800336a:	3301      	adds	r3, #1
 800336c:	75fb      	strb	r3, [r7, #23]
 800336e:	7dfa      	ldrb	r2, [r7, #23]
 8003370:	793b      	ldrb	r3, [r7, #4]
 8003372:	429a      	cmp	r2, r3
 8003374:	d3e5      	bcc.n	8003342 <line_v+0x202>
			break;
 8003376:	bf00      	nop
	}
}
 8003378:	bf00      	nop
 800337a:	371c      	adds	r7, #28
 800337c:	46bd      	mov	sp, r7
 800337e:	bd90      	pop	{r4, r7, pc}

08003380 <line_h>:

void line_h(uint8_t x0, uint8_t x1, uint8_t y0, uint8_t width, uint8_t mode)
{
 8003380:	b590      	push	{r4, r7, lr}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	4604      	mov	r4, r0
 8003388:	4608      	mov	r0, r1
 800338a:	4611      	mov	r1, r2
 800338c:	461a      	mov	r2, r3
 800338e:	4623      	mov	r3, r4
 8003390:	71fb      	strb	r3, [r7, #7]
 8003392:	4603      	mov	r3, r0
 8003394:	71bb      	strb	r3, [r7, #6]
 8003396:	460b      	mov	r3, r1
 8003398:	717b      	strb	r3, [r7, #5]
 800339a:	4613      	mov	r3, r2
 800339c:	713b      	strb	r3, [r7, #4]
	if(x0>x1)
 800339e:	79fa      	ldrb	r2, [r7, #7]
 80033a0:	79bb      	ldrb	r3, [r7, #6]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d905      	bls.n	80033b2 <line_h+0x32>
	{
		uint8_t temp = x0;
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	757b      	strb	r3, [r7, #21]
		x0 = x1;
 80033aa:	79bb      	ldrb	r3, [r7, #6]
 80033ac:	71fb      	strb	r3, [r7, #7]
		x1 = temp;
 80033ae:	7d7b      	ldrb	r3, [r7, #21]
 80033b0:	71bb      	strb	r3, [r7, #6]
	}
	uint8_t i,j;
	switch(mode)
 80033b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	f000 80ac 	beq.w	8003514 <line_h+0x194>
 80033bc:	2b02      	cmp	r3, #2
 80033be:	f300 80fb 	bgt.w	80035b8 <line_h+0x238>
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d054      	beq.n	8003470 <line_h+0xf0>
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	f040 80f6 	bne.w	80035b8 <line_h+0x238>
	{
		case add :
			if(width%2)
 80033cc:	793b      	ldrb	r3, [r7, #4]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d027      	beq.n	8003428 <line_h+0xa8>
			{
				uint8_t start = y0-(width-1)/2;
 80033d8:	793b      	ldrb	r3, [r7, #4]
 80033da:	3b01      	subs	r3, #1
 80033dc:	0fda      	lsrs	r2, r3, #31
 80033de:	4413      	add	r3, r2
 80033e0:	105b      	asrs	r3, r3, #1
 80033e2:	425b      	negs	r3, r3
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	797b      	ldrb	r3, [r7, #5]
 80033e8:	4413      	add	r3, r2
 80033ea:	747b      	strb	r3, [r7, #17]
				for(i=0;i<width;i++)
 80033ec:	2300      	movs	r3, #0
 80033ee:	75fb      	strb	r3, [r7, #23]
 80033f0:	e015      	b.n	800341e <line_h+0x9e>
					for(j=x0;j<=x1;j++)
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	75bb      	strb	r3, [r7, #22]
 80033f6:	e00b      	b.n	8003410 <line_h+0x90>
						draw_pixel(j,start+i,1);
 80033f8:	7c7a      	ldrb	r2, [r7, #17]
 80033fa:	7dfb      	ldrb	r3, [r7, #23]
 80033fc:	4413      	add	r3, r2
 80033fe:	b2d9      	uxtb	r1, r3
 8003400:	7dbb      	ldrb	r3, [r7, #22]
 8003402:	2201      	movs	r2, #1
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fe0f 	bl	8003028 <draw_pixel>
					for(j=x0;j<=x1;j++)
 800340a:	7dbb      	ldrb	r3, [r7, #22]
 800340c:	3301      	adds	r3, #1
 800340e:	75bb      	strb	r3, [r7, #22]
 8003410:	7dba      	ldrb	r2, [r7, #22]
 8003412:	79bb      	ldrb	r3, [r7, #6]
 8003414:	429a      	cmp	r2, r3
 8003416:	d9ef      	bls.n	80033f8 <line_h+0x78>
				for(i=0;i<width;i++)
 8003418:	7dfb      	ldrb	r3, [r7, #23]
 800341a:	3301      	adds	r3, #1
 800341c:	75fb      	strb	r3, [r7, #23]
 800341e:	7dfa      	ldrb	r2, [r7, #23]
 8003420:	793b      	ldrb	r3, [r7, #4]
 8003422:	429a      	cmp	r2, r3
 8003424:	d3e5      	bcc.n	80033f2 <line_h+0x72>
				uint8_t start = y0-width/2;
				for(i=0;i<width;i++)
					for(j=x0;j<=x1;j++)
						draw_pixel(j,start+i,1);
			}
			break;
 8003426:	e0c7      	b.n	80035b8 <line_h+0x238>
				uint8_t start = y0-width/2;
 8003428:	793b      	ldrb	r3, [r7, #4]
 800342a:	085b      	lsrs	r3, r3, #1
 800342c:	b2db      	uxtb	r3, r3
 800342e:	797a      	ldrb	r2, [r7, #5]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	74bb      	strb	r3, [r7, #18]
				for(i=0;i<width;i++)
 8003434:	2300      	movs	r3, #0
 8003436:	75fb      	strb	r3, [r7, #23]
 8003438:	e015      	b.n	8003466 <line_h+0xe6>
					for(j=x0;j<=x1;j++)
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	75bb      	strb	r3, [r7, #22]
 800343e:	e00b      	b.n	8003458 <line_h+0xd8>
						draw_pixel(j,start+i,1);
 8003440:	7cba      	ldrb	r2, [r7, #18]
 8003442:	7dfb      	ldrb	r3, [r7, #23]
 8003444:	4413      	add	r3, r2
 8003446:	b2d9      	uxtb	r1, r3
 8003448:	7dbb      	ldrb	r3, [r7, #22]
 800344a:	2201      	movs	r2, #1
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff fdeb 	bl	8003028 <draw_pixel>
					for(j=x0;j<=x1;j++)
 8003452:	7dbb      	ldrb	r3, [r7, #22]
 8003454:	3301      	adds	r3, #1
 8003456:	75bb      	strb	r3, [r7, #22]
 8003458:	7dba      	ldrb	r2, [r7, #22]
 800345a:	79bb      	ldrb	r3, [r7, #6]
 800345c:	429a      	cmp	r2, r3
 800345e:	d9ef      	bls.n	8003440 <line_h+0xc0>
				for(i=0;i<width;i++)
 8003460:	7dfb      	ldrb	r3, [r7, #23]
 8003462:	3301      	adds	r3, #1
 8003464:	75fb      	strb	r3, [r7, #23]
 8003466:	7dfa      	ldrb	r2, [r7, #23]
 8003468:	793b      	ldrb	r3, [r7, #4]
 800346a:	429a      	cmp	r2, r3
 800346c:	d3e5      	bcc.n	800343a <line_h+0xba>
			break;
 800346e:	e0a3      	b.n	80035b8 <line_h+0x238>

		case erase :
			if(width%2)
 8003470:	793b      	ldrb	r3, [r7, #4]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d027      	beq.n	80034cc <line_h+0x14c>
			{
				uint8_t start = y0-(width-1)/2;
 800347c:	793b      	ldrb	r3, [r7, #4]
 800347e:	3b01      	subs	r3, #1
 8003480:	0fda      	lsrs	r2, r3, #31
 8003482:	4413      	add	r3, r2
 8003484:	105b      	asrs	r3, r3, #1
 8003486:	425b      	negs	r3, r3
 8003488:	b2da      	uxtb	r2, r3
 800348a:	797b      	ldrb	r3, [r7, #5]
 800348c:	4413      	add	r3, r2
 800348e:	73fb      	strb	r3, [r7, #15]
				for(i=0;i<width;i++)
 8003490:	2300      	movs	r3, #0
 8003492:	75fb      	strb	r3, [r7, #23]
 8003494:	e015      	b.n	80034c2 <line_h+0x142>
					for(j=x0;j<=x1;j++)
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	75bb      	strb	r3, [r7, #22]
 800349a:	e00b      	b.n	80034b4 <line_h+0x134>
						draw_pixel(j,start+i,0);
 800349c:	7bfa      	ldrb	r2, [r7, #15]
 800349e:	7dfb      	ldrb	r3, [r7, #23]
 80034a0:	4413      	add	r3, r2
 80034a2:	b2d9      	uxtb	r1, r3
 80034a4:	7dbb      	ldrb	r3, [r7, #22]
 80034a6:	2200      	movs	r2, #0
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff fdbd 	bl	8003028 <draw_pixel>
					for(j=x0;j<=x1;j++)
 80034ae:	7dbb      	ldrb	r3, [r7, #22]
 80034b0:	3301      	adds	r3, #1
 80034b2:	75bb      	strb	r3, [r7, #22]
 80034b4:	7dba      	ldrb	r2, [r7, #22]
 80034b6:	79bb      	ldrb	r3, [r7, #6]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d9ef      	bls.n	800349c <line_h+0x11c>
				for(i=0;i<width;i++)
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
 80034be:	3301      	adds	r3, #1
 80034c0:	75fb      	strb	r3, [r7, #23]
 80034c2:	7dfa      	ldrb	r2, [r7, #23]
 80034c4:	793b      	ldrb	r3, [r7, #4]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d3e5      	bcc.n	8003496 <line_h+0x116>
				uint8_t start = y0-width/2;
				for(i=0;i<width;i++)
					for(j=x0;j<=x1;j++)
						draw_pixel(j,start+i,0);
			}
			break;
 80034ca:	e075      	b.n	80035b8 <line_h+0x238>
				uint8_t start = y0-width/2;
 80034cc:	793b      	ldrb	r3, [r7, #4]
 80034ce:	085b      	lsrs	r3, r3, #1
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	797a      	ldrb	r2, [r7, #5]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	743b      	strb	r3, [r7, #16]
				for(i=0;i<width;i++)
 80034d8:	2300      	movs	r3, #0
 80034da:	75fb      	strb	r3, [r7, #23]
 80034dc:	e015      	b.n	800350a <line_h+0x18a>
					for(j=x0;j<=x1;j++)
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	75bb      	strb	r3, [r7, #22]
 80034e2:	e00b      	b.n	80034fc <line_h+0x17c>
						draw_pixel(j,start+i,0);
 80034e4:	7c3a      	ldrb	r2, [r7, #16]
 80034e6:	7dfb      	ldrb	r3, [r7, #23]
 80034e8:	4413      	add	r3, r2
 80034ea:	b2d9      	uxtb	r1, r3
 80034ec:	7dbb      	ldrb	r3, [r7, #22]
 80034ee:	2200      	movs	r2, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fd99 	bl	8003028 <draw_pixel>
					for(j=x0;j<=x1;j++)
 80034f6:	7dbb      	ldrb	r3, [r7, #22]
 80034f8:	3301      	adds	r3, #1
 80034fa:	75bb      	strb	r3, [r7, #22]
 80034fc:	7dba      	ldrb	r2, [r7, #22]
 80034fe:	79bb      	ldrb	r3, [r7, #6]
 8003500:	429a      	cmp	r2, r3
 8003502:	d9ef      	bls.n	80034e4 <line_h+0x164>
				for(i=0;i<width;i++)
 8003504:	7dfb      	ldrb	r3, [r7, #23]
 8003506:	3301      	adds	r3, #1
 8003508:	75fb      	strb	r3, [r7, #23]
 800350a:	7dfa      	ldrb	r2, [r7, #23]
 800350c:	793b      	ldrb	r3, [r7, #4]
 800350e:	429a      	cmp	r2, r3
 8003510:	d3e5      	bcc.n	80034de <line_h+0x15e>
			break;
 8003512:	e051      	b.n	80035b8 <line_h+0x238>

		case invert :
			if(width%2)
 8003514:	793b      	ldrb	r3, [r7, #4]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d027      	beq.n	8003570 <line_h+0x1f0>
			{
				uint8_t start = y0-(width-1)/2;
 8003520:	793b      	ldrb	r3, [r7, #4]
 8003522:	3b01      	subs	r3, #1
 8003524:	0fda      	lsrs	r2, r3, #31
 8003526:	4413      	add	r3, r2
 8003528:	105b      	asrs	r3, r3, #1
 800352a:	425b      	negs	r3, r3
 800352c:	b2da      	uxtb	r2, r3
 800352e:	797b      	ldrb	r3, [r7, #5]
 8003530:	4413      	add	r3, r2
 8003532:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<width;i++)
 8003534:	2300      	movs	r3, #0
 8003536:	75fb      	strb	r3, [r7, #23]
 8003538:	e015      	b.n	8003566 <line_h+0x1e6>
					for(j=x0;j<=x1;j++)
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	75bb      	strb	r3, [r7, #22]
 800353e:	e00b      	b.n	8003558 <line_h+0x1d8>
						invert_pixel(j,start+i);
 8003540:	7cfa      	ldrb	r2, [r7, #19]
 8003542:	7dfb      	ldrb	r3, [r7, #23]
 8003544:	4413      	add	r3, r2
 8003546:	b2da      	uxtb	r2, r3
 8003548:	7dbb      	ldrb	r3, [r7, #22]
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff fdbd 	bl	80030cc <invert_pixel>
					for(j=x0;j<=x1;j++)
 8003552:	7dbb      	ldrb	r3, [r7, #22]
 8003554:	3301      	adds	r3, #1
 8003556:	75bb      	strb	r3, [r7, #22]
 8003558:	7dba      	ldrb	r2, [r7, #22]
 800355a:	79bb      	ldrb	r3, [r7, #6]
 800355c:	429a      	cmp	r2, r3
 800355e:	d9ef      	bls.n	8003540 <line_h+0x1c0>
				for(i=0;i<width;i++)
 8003560:	7dfb      	ldrb	r3, [r7, #23]
 8003562:	3301      	adds	r3, #1
 8003564:	75fb      	strb	r3, [r7, #23]
 8003566:	7dfa      	ldrb	r2, [r7, #23]
 8003568:	793b      	ldrb	r3, [r7, #4]
 800356a:	429a      	cmp	r2, r3
 800356c:	d3e5      	bcc.n	800353a <line_h+0x1ba>
				uint8_t start = y0-width/2;
				for(i=0;i<width;i++)
					for(j=x0;j<=x1;j++)
						invert_pixel(j,start+i);
			}
			break;
 800356e:	e022      	b.n	80035b6 <line_h+0x236>
				uint8_t start = y0-width/2;
 8003570:	793b      	ldrb	r3, [r7, #4]
 8003572:	085b      	lsrs	r3, r3, #1
 8003574:	b2db      	uxtb	r3, r3
 8003576:	797a      	ldrb	r2, [r7, #5]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	753b      	strb	r3, [r7, #20]
				for(i=0;i<width;i++)
 800357c:	2300      	movs	r3, #0
 800357e:	75fb      	strb	r3, [r7, #23]
 8003580:	e015      	b.n	80035ae <line_h+0x22e>
					for(j=x0;j<=x1;j++)
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	75bb      	strb	r3, [r7, #22]
 8003586:	e00b      	b.n	80035a0 <line_h+0x220>
						invert_pixel(j,start+i);
 8003588:	7d3a      	ldrb	r2, [r7, #20]
 800358a:	7dfb      	ldrb	r3, [r7, #23]
 800358c:	4413      	add	r3, r2
 800358e:	b2da      	uxtb	r2, r3
 8003590:	7dbb      	ldrb	r3, [r7, #22]
 8003592:	4611      	mov	r1, r2
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff fd99 	bl	80030cc <invert_pixel>
					for(j=x0;j<=x1;j++)
 800359a:	7dbb      	ldrb	r3, [r7, #22]
 800359c:	3301      	adds	r3, #1
 800359e:	75bb      	strb	r3, [r7, #22]
 80035a0:	7dba      	ldrb	r2, [r7, #22]
 80035a2:	79bb      	ldrb	r3, [r7, #6]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d9ef      	bls.n	8003588 <line_h+0x208>
				for(i=0;i<width;i++)
 80035a8:	7dfb      	ldrb	r3, [r7, #23]
 80035aa:	3301      	adds	r3, #1
 80035ac:	75fb      	strb	r3, [r7, #23]
 80035ae:	7dfa      	ldrb	r2, [r7, #23]
 80035b0:	793b      	ldrb	r3, [r7, #4]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d3e5      	bcc.n	8003582 <line_h+0x202>
			break;
 80035b6:	bf00      	nop

	}
}
 80035b8:	bf00      	nop
 80035ba:	371c      	adds	r7, #28
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd90      	pop	{r4, r7, pc}

080035c0 <graphics_Glyph>:


void graphics_Glyph(unsigned char left, unsigned char top,
			   unsigned char width, unsigned char height,
			   const unsigned char *glyph, unsigned char store_width)
{
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4604      	mov	r4, r0
 80035c8:	4608      	mov	r0, r1
 80035ca:	4611      	mov	r1, r2
 80035cc:	461a      	mov	r2, r3
 80035ce:	4623      	mov	r3, r4
 80035d0:	71fb      	strb	r3, [r7, #7]
 80035d2:	4603      	mov	r3, r0
 80035d4:	71bb      	strb	r3, [r7, #6]
 80035d6:	460b      	mov	r3, r1
 80035d8:	717b      	strb	r3, [r7, #5]
 80035da:	4613      	mov	r3, r2
 80035dc:	713b      	strb	r3, [r7, #4]
	unsigned char x,b,glyph_idx, bitmask;
	int8_t y;
	const unsigned char *glyph_scan = glyph;
 80035de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e0:	613b      	str	r3, [r7, #16]

	for (x=0; x<width; x++)
 80035e2:	2300      	movs	r3, #0
 80035e4:	75fb      	strb	r3, [r7, #23]
 80035e6:	e04d      	b.n	8003684 <graphics_Glyph+0xc4>
	{
		for (y=0; y<height; y++)
 80035e8:	2300      	movs	r3, #0
 80035ea:	75bb      	strb	r3, [r7, #22]
 80035ec:	e042      	b.n	8003674 <graphics_Glyph+0xb4>
		{
			glyph_idx = (x / 8) + y*store_width;
 80035ee:	7dfb      	ldrb	r3, [r7, #23]
 80035f0:	08db      	lsrs	r3, r3, #3
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	7dbb      	ldrb	r3, [r7, #22]
 80035f6:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80035fa:	fb11 f303 	smulbb	r3, r1, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	4413      	add	r3, r2
 8003602:	73fb      	strb	r3, [r7, #15]
			b = glyph_scan[glyph_idx];
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4413      	add	r3, r2
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	73bb      	strb	r3, [r7, #14]
			bitmask = 1<<(7-(x % 8));
 800360e:	7dfb      	ldrb	r3, [r7, #23]
 8003610:	43db      	mvns	r3, r3
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	2201      	movs	r2, #1
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	737b      	strb	r3, [r7, #13]
			if (b & bitmask)
 800361e:	7bba      	ldrb	r2, [r7, #14]
 8003620:	7b7b      	ldrb	r3, [r7, #13]
 8003622:	4013      	ands	r3, r2
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00f      	beq.n	800364a <graphics_Glyph+0x8a>
				draw_pixel(left-width+x,top+y,1);
 800362a:	79fa      	ldrb	r2, [r7, #7]
 800362c:	797b      	ldrb	r3, [r7, #5]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	b2da      	uxtb	r2, r3
 8003632:	7dfb      	ldrb	r3, [r7, #23]
 8003634:	4413      	add	r3, r2
 8003636:	b2d8      	uxtb	r0, r3
 8003638:	7dba      	ldrb	r2, [r7, #22]
 800363a:	79bb      	ldrb	r3, [r7, #6]
 800363c:	4413      	add	r3, r2
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2201      	movs	r2, #1
 8003642:	4619      	mov	r1, r3
 8003644:	f7ff fcf0 	bl	8003028 <draw_pixel>
 8003648:	e00e      	b.n	8003668 <graphics_Glyph+0xa8>
			else
				draw_pixel(left-width+x,top+y,0);
 800364a:	79fa      	ldrb	r2, [r7, #7]
 800364c:	797b      	ldrb	r3, [r7, #5]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	b2da      	uxtb	r2, r3
 8003652:	7dfb      	ldrb	r3, [r7, #23]
 8003654:	4413      	add	r3, r2
 8003656:	b2d8      	uxtb	r0, r3
 8003658:	7dba      	ldrb	r2, [r7, #22]
 800365a:	79bb      	ldrb	r3, [r7, #6]
 800365c:	4413      	add	r3, r2
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2200      	movs	r2, #0
 8003662:	4619      	mov	r1, r3
 8003664:	f7ff fce0 	bl	8003028 <draw_pixel>
		for (y=0; y<height; y++)
 8003668:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	3301      	adds	r3, #1
 8003670:	b2db      	uxtb	r3, r3
 8003672:	75bb      	strb	r3, [r7, #22]
 8003674:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8003678:	793b      	ldrb	r3, [r7, #4]
 800367a:	429a      	cmp	r2, r3
 800367c:	dbb7      	blt.n	80035ee <graphics_Glyph+0x2e>
	for (x=0; x<width; x++)
 800367e:	7dfb      	ldrb	r3, [r7, #23]
 8003680:	3301      	adds	r3, #1
 8003682:	75fb      	strb	r3, [r7, #23]
 8003684:	7dfa      	ldrb	r2, [r7, #23]
 8003686:	797b      	ldrb	r3, [r7, #5]
 8003688:	429a      	cmp	r2, r3
 800368a:	d3ad      	bcc.n	80035e8 <graphics_Glyph+0x28>
		}
	}
}
 800368c:	bf00      	nop
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	bd90      	pop	{r4, r7, pc}
	...

08003698 <graphics_text>:

void graphics_text(unsigned char left, unsigned char top, unsigned char font, char *str)
{
 8003698:	b590      	push	{r4, r7, lr}
 800369a:	b089      	sub	sp, #36	; 0x24
 800369c:	af02      	add	r7, sp, #8
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	4603      	mov	r3, r0
 80036a2:	71fb      	strb	r3, [r7, #7]
 80036a4:	460b      	mov	r3, r1
 80036a6:	71bb      	strb	r3, [r7, #6]
 80036a8:	4613      	mov	r3, r2
 80036aa:	717b      	strb	r3, [r7, #5]
	unsigned char x = left;
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	75fb      	strb	r3, [r7, #23]
 	unsigned char width;
	unsigned char height;
	unsigned char store_width;
	const unsigned char *glyph_ptr;

  while(*str != 0x00)
 80036b0:	e081      	b.n	80037b6 <graphics_text+0x11e>
  {

		glyph = (unsigned char)*str;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	75bb      	strb	r3, [r7, #22]

		/* check to make sure the symbol is a legal one */
		/* if not then just replace it with the default character */
		if((glyph < fonts[font].glyph_beg) || (glyph > fonts[font].glyph_end))
 80036b8:	797a      	ldrb	r2, [r7, #5]
 80036ba:	4944      	ldr	r1, [pc, #272]	; (80037cc <graphics_text+0x134>)
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	3310      	adds	r3, #16
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	7dba      	ldrb	r2, [r7, #22]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d30b      	bcc.n	80036e8 <graphics_text+0x50>
 80036d0:	797a      	ldrb	r2, [r7, #5]
 80036d2:	493e      	ldr	r1, [pc, #248]	; (80037cc <graphics_text+0x134>)
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	3311      	adds	r3, #17
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	7dba      	ldrb	r2, [r7, #22]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d909      	bls.n	80036fc <graphics_text+0x64>
		{
			glyph = fonts[font].glyph_def;
 80036e8:	797a      	ldrb	r2, [r7, #5]
 80036ea:	4938      	ldr	r1, [pc, #224]	; (80037cc <graphics_text+0x134>)
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	3312      	adds	r3, #18
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	75bb      	strb	r3, [r7, #22]
		}


		/* make zero based index into the font data arrays */
		glyph -= fonts[font].glyph_beg;
 80036fc:	797a      	ldrb	r2, [r7, #5]
 80036fe:	4933      	ldr	r1, [pc, #204]	; (80037cc <graphics_text+0x134>)
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	3310      	adds	r3, #16
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	7dba      	ldrb	r2, [r7, #22]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	75bb      	strb	r3, [r7, #22]
		width = fonts[font].fixed_width;	/* check if it is a fixed width */
 8003714:	797a      	ldrb	r2, [r7, #5]
 8003716:	492d      	ldr	r1, [pc, #180]	; (80037cc <graphics_text+0x134>)
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	3308      	adds	r3, #8
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	757b      	strb	r3, [r7, #21]
		if(width == 0)
 8003728:	7d7b      	ldrb	r3, [r7, #21]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10c      	bne.n	8003748 <graphics_text+0xb0>
		{
			width=fonts[font].width_table[glyph];	/* get the variable width instead */
 800372e:	797a      	ldrb	r2, [r7, #5]
 8003730:	4926      	ldr	r1, [pc, #152]	; (80037cc <graphics_text+0x134>)
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	330c      	adds	r3, #12
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	7dbb      	ldrb	r3, [r7, #22]
 8003742:	4413      	add	r3, r2
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	757b      	strb	r3, [r7, #21]
		}

		height = fonts[font].glyph_height;
 8003748:	797a      	ldrb	r2, [r7, #5]
 800374a:	4920      	ldr	r1, [pc, #128]	; (80037cc <graphics_text+0x134>)
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	3301      	adds	r3, #1
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	753b      	strb	r3, [r7, #20]
		store_width = fonts[font].store_width;
 800375c:	797a      	ldrb	r2, [r7, #5]
 800375e:	491b      	ldr	r1, [pc, #108]	; (80037cc <graphics_text+0x134>)
 8003760:	4613      	mov	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	74fb      	strb	r3, [r7, #19]

		glyph_ptr = fonts[font].glyph_table + ((unsigned int)glyph * (unsigned int)store_width * (unsigned int)height);
 800376e:	797a      	ldrb	r2, [r7, #5]
 8003770:	4916      	ldr	r1, [pc, #88]	; (80037cc <graphics_text+0x134>)
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	3304      	adds	r3, #4
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	7dbb      	ldrb	r3, [r7, #22]
 8003782:	7cf9      	ldrb	r1, [r7, #19]
 8003784:	fb01 f303 	mul.w	r3, r1, r3
 8003788:	7d39      	ldrb	r1, [r7, #20]
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	4413      	add	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]


		x+=width;
 8003792:	7dfa      	ldrb	r2, [r7, #23]
 8003794:	7d7b      	ldrb	r3, [r7, #21]
 8003796:	4413      	add	r3, r2
 8003798:	75fb      	strb	r3, [r7, #23]
		graphics_Glyph(x,top,width,height,glyph_ptr,store_width);  /* plug symbol into buffer */
 800379a:	7d3c      	ldrb	r4, [r7, #20]
 800379c:	7d7a      	ldrb	r2, [r7, #21]
 800379e:	79b9      	ldrb	r1, [r7, #6]
 80037a0:	7df8      	ldrb	r0, [r7, #23]
 80037a2:	7cfb      	ldrb	r3, [r7, #19]
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	4623      	mov	r3, r4
 80037ac:	f7ff ff08 	bl	80035c0 <graphics_Glyph>
		str++;								/* point to next character in string */
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	3301      	adds	r3, #1
 80037b4:	603b      	str	r3, [r7, #0]
  while(*str != 0x00)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f47f af79 	bne.w	80036b2 <graphics_text+0x1a>
	}

}
 80037c0:	bf00      	nop
 80037c2:	bf00      	nop
 80037c4:	371c      	adds	r7, #28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd90      	pop	{r4, r7, pc}
 80037ca:	bf00      	nop
 80037cc:	0800adbc 	.word	0x0800adbc

080037d0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	80fb      	strh	r3, [r7, #6]

    if (GPIO_Pin==S_In_Pin)
 80037da:	88fb      	ldrh	r3, [r7, #6]
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d102      	bne.n	80037e6 <HAL_GPIO_EXTI_Callback+0x16>
    {
        inside = 1;
 80037e0:	4b07      	ldr	r3, [pc, #28]	; (8003800 <HAL_GPIO_EXTI_Callback+0x30>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin==S_Out_Pin)
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d102      	bne.n	80037f2 <HAL_GPIO_EXTI_Callback+0x22>
    {
        outside = 1;
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <HAL_GPIO_EXTI_Callback+0x34>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	601a      	str	r2, [r3, #0]
    }
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	200008b0 	.word	0x200008b0
 8003804:	200008b4 	.word	0x200008b4

08003808 <debouncer>:

int debouncer(volatile int* button_int, GPIO_TypeDef* GPIO_port, uint16_t GPIO_number){ // Bounce Control
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	4613      	mov	r3, r2
 8003814:	80fb      	strh	r3, [r7, #6]

	static uint8_t button_count=0;
	static int counter=0;

	if (*button_int==1)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d13b      	bne.n	8003896 <debouncer+0x8e>
	{
		if (button_count==0)
 800381e:	4b20      	ldr	r3, [pc, #128]	; (80038a0 <debouncer+0x98>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10b      	bne.n	800383e <debouncer+0x36>
		{
			counter=HAL_GetTick();
 8003826:	f002 fa2b 	bl	8005c80 <HAL_GetTick>
 800382a:	4603      	mov	r3, r0
 800382c:	461a      	mov	r2, r3
 800382e:	4b1d      	ldr	r3, [pc, #116]	; (80038a4 <debouncer+0x9c>)
 8003830:	601a      	str	r2, [r3, #0]
			button_count++;
 8003832:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <debouncer+0x98>)
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	3301      	adds	r3, #1
 8003838:	b2da      	uxtb	r2, r3
 800383a:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <debouncer+0x98>)
 800383c:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick()-counter>=20)
 800383e:	f002 fa1f 	bl	8005c80 <HAL_GetTick>
 8003842:	4603      	mov	r3, r0
 8003844:	4a17      	ldr	r2, [pc, #92]	; (80038a4 <debouncer+0x9c>)
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	1a9b      	subs	r3, r3, r2
 800384a:	2b13      	cmp	r3, #19
 800384c:	d923      	bls.n	8003896 <debouncer+0x8e>
		{
			counter=HAL_GetTick();
 800384e:	f002 fa17 	bl	8005c80 <HAL_GetTick>
 8003852:	4603      	mov	r3, r0
 8003854:	461a      	mov	r2, r3
 8003856:	4b13      	ldr	r3, [pc, #76]	; (80038a4 <debouncer+0x9c>)
 8003858:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number)!=1)
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	4619      	mov	r1, r3
 800385e:	68b8      	ldr	r0, [r7, #8]
 8003860:	f003 f94a 	bl	8006af8 <HAL_GPIO_ReadPin>
 8003864:	4603      	mov	r3, r0
 8003866:	2b01      	cmp	r3, #1
 8003868:	d003      	beq.n	8003872 <debouncer+0x6a>
			{
				button_count=1;
 800386a:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <debouncer+0x98>)
 800386c:	2201      	movs	r2, #1
 800386e:	701a      	strb	r2, [r3, #0]
 8003870:	e005      	b.n	800387e <debouncer+0x76>
			}
			else
			{
				button_count++;
 8003872:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <debouncer+0x98>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	3301      	adds	r3, #1
 8003878:	b2da      	uxtb	r2, r3
 800387a:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <debouncer+0x98>)
 800387c:	701a      	strb	r2, [r3, #0]
			}
			if (button_count==4 ) // Debounce Period
 800387e:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <debouncer+0x98>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b04      	cmp	r3, #4
 8003884:	d107      	bne.n	8003896 <debouncer+0x8e>
			{
				button_count=0;
 8003886:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <debouncer+0x98>)
 8003888:	2200      	movs	r2, #0
 800388a:	701a      	strb	r2, [r3, #0]
				*button_int=0;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
				return 1;
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <debouncer+0x90>
			}
		}
	}
	return 0;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	200008f0 	.word	0x200008f0
 80038a4:	200008f4 	.word	0x200008f4

080038a8 <delay>:


/*----------- Delay (ms) -----------*/
void delay(uint16_t time){
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim6,0);
 80038b2:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <delay+0x30>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2200      	movs	r2, #0
 80038b8:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim6))<time);
 80038ba:	bf00      	nop
 80038bc:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <delay+0x30>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d3f9      	bcc.n	80038bc <delay+0x14>
}
 80038c8:	bf00      	nop
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	20000f04 	.word	0x20000f04

080038dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038dc:	b5b0      	push	{r4, r5, r7, lr}
 80038de:	b098      	sub	sp, #96	; 0x60
 80038e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038e2:	f002 f967 	bl	8005bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038e6:	f000 fd05 	bl	80042f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038ea:	f001 fa8f 	bl	8004e0c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80038ee:	f001 fa0f 	bl	8004d10 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80038f2:	f001 fa61 	bl	8004db8 <MX_USART6_UART_Init>
  MX_TIM5_Init();
 80038f6:	f001 f8d3 	bl	8004aa0 <MX_TIM5_Init>
  MX_TIM1_Init();
 80038fa:	f000 fe89 	bl	8004610 <MX_TIM1_Init>
  MX_TIM4_Init();
 80038fe:	f001 f859 	bl	80049b4 <MX_TIM4_Init>
  MX_TIM2_Init();
 8003902:	f000 ff3d 	bl	8004780 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003906:	f000 ffc7 	bl	8004898 <MX_TIM3_Init>
  MX_TIM8_Init();
 800390a:	f001 f94d 	bl	8004ba8 <MX_TIM8_Init>
  MX_TIM9_Init();
 800390e:	f001 f99b 	bl	8004c48 <MX_TIM9_Init>
  MX_TIM6_Init();
 8003912:	f001 f913 	bl	8004b3c <MX_TIM6_Init>
  MX_ADC1_Init();
 8003916:	f000 fd57 	bl	80043c8 <MX_ADC1_Init>
  MX_ADC2_Init();
 800391a:	f000 fda7 	bl	800446c <MX_ADC2_Init>
  MX_ADC3_Init();
 800391e:	f000 fdf7 	bl	8004510 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8003922:	f001 fa1f 	bl	8004d64 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8003926:	f000 fe45 	bl	80045b4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // RGB Gaming LED
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800392a:	2100      	movs	r1, #0
 800392c:	484a      	ldr	r0, [pc, #296]	; (8003a58 <main+0x17c>)
 800392e:	f004 faff 	bl	8007f30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003932:	2104      	movs	r1, #4
 8003934:	4848      	ldr	r0, [pc, #288]	; (8003a58 <main+0x17c>)
 8003936:	f004 fafb 	bl	8007f30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800393a:	2108      	movs	r1, #8
 800393c:	4846      	ldr	r0, [pc, #280]	; (8003a58 <main+0x17c>)
 800393e:	f004 faf7 	bl	8007f30 <HAL_TIM_PWM_Start>

  // Parcel Servo
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003942:	2100      	movs	r1, #0
 8003944:	4845      	ldr	r0, [pc, #276]	; (8003a5c <main+0x180>)
 8003946:	f004 faf3 	bl	8007f30 <HAL_TIM_PWM_Start>

  // Garage Servo
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800394a:	2104      	movs	r1, #4
 800394c:	4843      	ldr	r0, [pc, #268]	; (8003a5c <main+0x180>)
 800394e:	f004 faef 	bl	8007f30 <HAL_TIM_PWM_Start>

  // Swning Servo
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8003952:	2108      	movs	r1, #8
 8003954:	4841      	ldr	r0, [pc, #260]	; (8003a5c <main+0x180>)
 8003956:	f004 faeb 	bl	8007f30 <HAL_TIM_PWM_Start>

  // Living Room Servo
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800395a:	210c      	movs	r1, #12
 800395c:	4840      	ldr	r0, [pc, #256]	; (8003a60 <main+0x184>)
 800395e:	f004 fae7 	bl	8007f30 <HAL_TIM_PWM_Start>

  // Bedroom Servo
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003962:	2104      	movs	r1, #4
 8003964:	483e      	ldr	r0, [pc, #248]	; (8003a60 <main+0x184>)
 8003966:	f004 fae3 	bl	8007f30 <HAL_TIM_PWM_Start>

  // Office Servo
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800396a:	2108      	movs	r1, #8
 800396c:	483c      	ldr	r0, [pc, #240]	; (8003a60 <main+0x184>)
 800396e:	f004 fadf 	bl	8007f30 <HAL_TIM_PWM_Start>

  // Living Room DC Motor
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8003972:	2100      	movs	r1, #0
 8003974:	483b      	ldr	r0, [pc, #236]	; (8003a64 <main+0x188>)
 8003976:	f004 fadb 	bl	8007f30 <HAL_TIM_PWM_Start>

  // Buzzer
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800397a:	2100      	movs	r1, #0
 800397c:	483a      	ldr	r0, [pc, #232]	; (8003a68 <main+0x18c>)
 800397e:	f004 fad7 	bl	8007f30 <HAL_TIM_PWM_Start>

  /*----------- DHT22 Sensor-----------*/
  HAL_TIM_Base_Start(&htim6);
 8003982:	483a      	ldr	r0, [pc, #232]	; (8003a6c <main+0x190>)
 8003984:	f004 fa12 	bl	8007dac <HAL_TIM_Base_Start>

  /*----------- LDR & HW390 & Rain Initialization  -----------*/
  HAL_ADC_Start(&hadc1); // LDR
 8003988:	4839      	ldr	r0, [pc, #228]	; (8003a70 <main+0x194>)
 800398a:	f002 f9ed 	bl	8005d68 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2); // HW-390
 800398e:	4839      	ldr	r0, [pc, #228]	; (8003a74 <main+0x198>)
 8003990:	f002 f9ea 	bl	8005d68 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3); // Rain
 8003994:	4838      	ldr	r0, [pc, #224]	; (8003a78 <main+0x19c>)
 8003996:	f002 f9e7 	bl	8005d68 <HAL_ADC_Start>

  //__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
  ESP_Init("iPhone Carmela","pistacho");
 800399a:	4938      	ldr	r1, [pc, #224]	; (8003a7c <main+0x1a0>)
 800399c:	4838      	ldr	r0, [pc, #224]	; (8003a80 <main+0x1a4>)
 800399e:	f7fd fbdb 	bl	8001158 <ESP_Init>

  // OLED Thermostat
  oled_init(); // Initialize OLED
 80039a2:	f001 fbe1 	bl	8005168 <oled_init>

  // Frame
  line_h(0, 127, 1, 2, 1);
 80039a6:	2301      	movs	r3, #1
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	2302      	movs	r3, #2
 80039ac:	2201      	movs	r2, #1
 80039ae:	217f      	movs	r1, #127	; 0x7f
 80039b0:	2000      	movs	r0, #0
 80039b2:	f7ff fce5 	bl	8003380 <line_h>
  line_h(0, 127, 30, 2, 1);
 80039b6:	2301      	movs	r3, #1
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	2302      	movs	r3, #2
 80039bc:	221e      	movs	r2, #30
 80039be:	217f      	movs	r1, #127	; 0x7f
 80039c0:	2000      	movs	r0, #0
 80039c2:	f7ff fcdd 	bl	8003380 <line_h>
  line_v(0, 31, 1, 2, 1);
 80039c6:	2301      	movs	r3, #1
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	2302      	movs	r3, #2
 80039cc:	2201      	movs	r2, #1
 80039ce:	211f      	movs	r1, #31
 80039d0:	2000      	movs	r0, #0
 80039d2:	f7ff fbb5 	bl	8003140 <line_v>
  line_v(0, 31, 127, 2, 1);
 80039d6:	2301      	movs	r3, #1
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	2302      	movs	r3, #2
 80039dc:	227f      	movs	r2, #127	; 0x7f
 80039de:	211f      	movs	r1, #31
 80039e0:	2000      	movs	r0, #0
 80039e2:	f7ff fbad 	bl	8003140 <line_v>

  // Line
  line_h(5, 122, 15, 1, 1);
 80039e6:	2301      	movs	r3, #1
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	2301      	movs	r3, #1
 80039ec:	220f      	movs	r2, #15
 80039ee:	217a      	movs	r1, #122	; 0x7a
 80039f0:	2005      	movs	r0, #5
 80039f2:	f7ff fcc5 	bl	8003380 <line_h>

  graphics_text(7, 5, FONT_SEVEN_DOT, "IN");
 80039f6:	4b23      	ldr	r3, [pc, #140]	; (8003a84 <main+0x1a8>)
 80039f8:	2202      	movs	r2, #2
 80039fa:	2105      	movs	r1, #5
 80039fc:	2007      	movs	r0, #7
 80039fe:	f7ff fe4b 	bl	8003698 <graphics_text>
  graphics_text(7, 19, FONT_SEVEN_DOT, "OUT");
 8003a02:	4b21      	ldr	r3, [pc, #132]	; (8003a88 <main+0x1ac>)
 8003a04:	2202      	movs	r2, #2
 8003a06:	2113      	movs	r1, #19
 8003a08:	2007      	movs	r0, #7
 8003a0a:	f7ff fe45 	bl	8003698 <graphics_text>

  oled_update(); // Update OLED
 8003a0e:	f001 fb57 	bl	80050c0 <oled_update>
  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	ESP_messageHandler();
 8003a12:	f7fd fccd 	bl	80013b0 <ESP_messageHandler>

		// Vehicle Doorbell
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) == 0){
 8003a16:	2101      	movs	r1, #1
 8003a18:	481c      	ldr	r0, [pc, #112]	; (8003a8c <main+0x1b0>)
 8003a1a:	f003 f86d 	bl	8006af8 <HAL_GPIO_ReadPin>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d152      	bne.n	8003aca <main+0x1ee>

			int known = readRFID();
 8003a24:	f7fe fd64 	bl	80024f0 <readRFID>
 8003a28:	6578      	str	r0, [r7, #84]	; 0x54
			if(known == 1){
 8003a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d133      	bne.n	8003a98 <main+0x1bc>
				char kn[15] = "OPENING DOOR \n\n";
 8003a30:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <main+0x1b4>)
 8003a32:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8003a36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a38:	c407      	stmia	r4!, {r0, r1, r2}
 8003a3a:	8023      	strh	r3, [r4, #0]
 8003a3c:	3402      	adds	r4, #2
 8003a3e:	0c1b      	lsrs	r3, r3, #16
 8003a40:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart6, (uint8_t *) kn, 15, HAL_MAX_DELAY);
 8003a42:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003a46:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4a:	220f      	movs	r2, #15
 8003a4c:	4811      	ldr	r0, [pc, #68]	; (8003a94 <main+0x1b8>)
 8003a4e:	f005 f8ec 	bl	8008c2a <HAL_UART_Transmit>

				actParcelRFID();
 8003a52:	f7fe fe53 	bl	80026fc <actParcelRFID>
 8003a56:	e038      	b.n	8003aca <main+0x1ee>
 8003a58:	20000f4c 	.word	0x20000f4c
 8003a5c:	20001020 	.word	0x20001020
 8003a60:	20000e2c 	.word	0x20000e2c
 8003a64:	20000f94 	.word	0x20000f94
 8003a68:	20000cb4 	.word	0x20000cb4
 8003a6c:	20000f04 	.word	0x20000f04
 8003a70:	20000e74 	.word	0x20000e74
 8003a74:	20000d48 	.word	0x20000d48
 8003a78:	20000ebc 	.word	0x20000ebc
 8003a7c:	0800ad38 	.word	0x0800ad38
 8003a80:	0800ad44 	.word	0x0800ad44
 8003a84:	0800ad54 	.word	0x0800ad54
 8003a88:	0800ad58 	.word	0x0800ad58
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	0800ad98 	.word	0x0800ad98
 8003a94:	20000fdc 	.word	0x20000fdc
			}
			else if(known == 0){
 8003a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d115      	bne.n	8003aca <main+0x1ee>
				char unkn[19] = "CALLING THE BELL \n\n";
 8003a9e:	4ba5      	ldr	r3, [pc, #660]	; (8003d34 <main+0x458>)
 8003aa0:	f107 0418 	add.w	r4, r7, #24
 8003aa4:	461d      	mov	r5, r3
 8003aa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003aa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003aaa:	682b      	ldr	r3, [r5, #0]
 8003aac:	461a      	mov	r2, r3
 8003aae:	8022      	strh	r2, [r4, #0]
 8003ab0:	3402      	adds	r4, #2
 8003ab2:	0c1b      	lsrs	r3, r3, #16
 8003ab4:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart6, (uint8_t *) unkn, 19, HAL_MAX_DELAY);
 8003ab6:	f107 0118 	add.w	r1, r7, #24
 8003aba:	f04f 33ff 	mov.w	r3, #4294967295
 8003abe:	2213      	movs	r2, #19
 8003ac0:	489d      	ldr	r0, [pc, #628]	; (8003d38 <main+0x45c>)
 8003ac2:	f005 f8b2 	bl	8008c2a <HAL_UART_Transmit>

				playBell();
 8003ac6:	f7fd f975 	bl	8000db4 <playBell>
			}
		}

		// People Doorbell
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){
 8003aca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ace:	489b      	ldr	r0, [pc, #620]	; (8003d3c <main+0x460>)
 8003ad0:	f003 f812 	bl	8006af8 <HAL_GPIO_ReadPin>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <main+0x202>

				playBell();
 8003ada:	f7fd f96b 	bl	8000db4 <playBell>
		}

		// Alarm Stop
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == 0){
 8003ade:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ae2:	4896      	ldr	r0, [pc, #600]	; (8003d3c <main+0x460>)
 8003ae4:	f003 f808 	bl	8006af8 <HAL_GPIO_ReadPin>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d103      	bne.n	8003af6 <main+0x21a>

			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8003aee:	4b94      	ldr	r3, [pc, #592]	; (8003d40 <main+0x464>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2200      	movs	r2, #0
 8003af4:	635a      	str	r2, [r3, #52]	; 0x34
		}

		// Alarm
		if (debouncer(&inside, S_In_GPIO_Port, S_In_Pin)){
 8003af6:	2208      	movs	r2, #8
 8003af8:	4992      	ldr	r1, [pc, #584]	; (8003d44 <main+0x468>)
 8003afa:	4893      	ldr	r0, [pc, #588]	; (8003d48 <main+0x46c>)
 8003afc:	f7ff fe84 	bl	8003808 <debouncer>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d005      	beq.n	8003b12 <main+0x236>

			if(vSecurity[0] == '1') playAlarm();
 8003b06:	4b91      	ldr	r3, [pc, #580]	; (8003d4c <main+0x470>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b31      	cmp	r3, #49	; 0x31
 8003b0c:	d101      	bne.n	8003b12 <main+0x236>
 8003b0e:	f7fd f987 	bl	8000e20 <playAlarm>
		}
		if (debouncer(&outside, S_Out_GPIO_Port, S_Out_Pin)){
 8003b12:	2202      	movs	r2, #2
 8003b14:	498b      	ldr	r1, [pc, #556]	; (8003d44 <main+0x468>)
 8003b16:	488e      	ldr	r0, [pc, #568]	; (8003d50 <main+0x474>)
 8003b18:	f7ff fe76 	bl	8003808 <debouncer>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d005      	beq.n	8003b2e <main+0x252>

			if(vSecurity[1] == '1') playAlarm();
 8003b22:	4b8a      	ldr	r3, [pc, #552]	; (8003d4c <main+0x470>)
 8003b24:	785b      	ldrb	r3, [r3, #1]
 8003b26:	2b31      	cmp	r3, #49	; 0x31
 8003b28:	d101      	bne.n	8003b2e <main+0x252>
 8003b2a:	f7fd f979 	bl	8000e20 <playAlarm>
		}

		// PARCEL DOOR (90)
		if(vWindow[0]=='1' || vOutside[4]=='1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 91);
 8003b2e:	4b89      	ldr	r3, [pc, #548]	; (8003d54 <main+0x478>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b31      	cmp	r3, #49	; 0x31
 8003b34:	d003      	beq.n	8003b3e <main+0x262>
 8003b36:	4b88      	ldr	r3, [pc, #544]	; (8003d58 <main+0x47c>)
 8003b38:	791b      	ldrb	r3, [r3, #4]
 8003b3a:	2b31      	cmp	r3, #49	; 0x31
 8003b3c:	d103      	bne.n	8003b46 <main+0x26a>
 8003b3e:	4b87      	ldr	r3, [pc, #540]	; (8003d5c <main+0x480>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	225b      	movs	r2, #91	; 0x5b
 8003b44:	635a      	str	r2, [r3, #52]	; 0x34
		if(vWindow[0]=='0' || vOutside[4]=='0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89);
 8003b46:	4b83      	ldr	r3, [pc, #524]	; (8003d54 <main+0x478>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b30      	cmp	r3, #48	; 0x30
 8003b4c:	d003      	beq.n	8003b56 <main+0x27a>
 8003b4e:	4b82      	ldr	r3, [pc, #520]	; (8003d58 <main+0x47c>)
 8003b50:	791b      	ldrb	r3, [r3, #4]
 8003b52:	2b30      	cmp	r3, #48	; 0x30
 8003b54:	d103      	bne.n	8003b5e <main+0x282>
 8003b56:	4b81      	ldr	r3, [pc, #516]	; (8003d5c <main+0x480>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2259      	movs	r2, #89	; 0x59
 8003b5c:	635a      	str	r2, [r3, #52]	; 0x34

		// GARAGE DOOR (90)
		if(vWindow[1]=='1' || vGarage[1] == '1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 92); // Faster at 30
 8003b5e:	4b7d      	ldr	r3, [pc, #500]	; (8003d54 <main+0x478>)
 8003b60:	785b      	ldrb	r3, [r3, #1]
 8003b62:	2b31      	cmp	r3, #49	; 0x31
 8003b64:	d003      	beq.n	8003b6e <main+0x292>
 8003b66:	4b7e      	ldr	r3, [pc, #504]	; (8003d60 <main+0x484>)
 8003b68:	785b      	ldrb	r3, [r3, #1]
 8003b6a:	2b31      	cmp	r3, #49	; 0x31
 8003b6c:	d103      	bne.n	8003b76 <main+0x29a>
 8003b6e:	4b7b      	ldr	r3, [pc, #492]	; (8003d5c <main+0x480>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	225c      	movs	r2, #92	; 0x5c
 8003b74:	639a      	str	r2, [r3, #56]	; 0x38
		if(vWindow[1]=='0' || vGarage[1] == '0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 89);
 8003b76:	4b77      	ldr	r3, [pc, #476]	; (8003d54 <main+0x478>)
 8003b78:	785b      	ldrb	r3, [r3, #1]
 8003b7a:	2b30      	cmp	r3, #48	; 0x30
 8003b7c:	d003      	beq.n	8003b86 <main+0x2aa>
 8003b7e:	4b78      	ldr	r3, [pc, #480]	; (8003d60 <main+0x484>)
 8003b80:	785b      	ldrb	r3, [r3, #1]
 8003b82:	2b30      	cmp	r3, #48	; 0x30
 8003b84:	d103      	bne.n	8003b8e <main+0x2b2>
 8003b86:	4b75      	ldr	r3, [pc, #468]	; (8003d5c <main+0x480>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2259      	movs	r2, #89	; 0x59
 8003b8c:	639a      	str	r2, [r3, #56]	; 0x38

		// CLOTHES LINE AWNING (90)
		if(vOutside[0]=='1'){
 8003b8e:	4b72      	ldr	r3, [pc, #456]	; (8003d58 <main+0x47c>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b31      	cmp	r3, #49	; 0x31
 8003b94:	d10e      	bne.n	8003bb4 <main+0x2d8>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 91);
 8003b96:	4b71      	ldr	r3, [pc, #452]	; (8003d5c <main+0x480>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	225b      	movs	r2, #91	; 0x5b
 8003b9c:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8003b9e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003ba2:	f002 f879 	bl	8005c98 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90);
 8003ba6:	4b6d      	ldr	r3, [pc, #436]	; (8003d5c <main+0x480>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	225a      	movs	r2, #90	; 0x5a
 8003bac:	63da      	str	r2, [r3, #60]	; 0x3c
			awning = 1;
 8003bae:	4b6d      	ldr	r3, [pc, #436]	; (8003d64 <main+0x488>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]
		}
		if(vOutside[0]=='0'){
 8003bb4:	4b68      	ldr	r3, [pc, #416]	; (8003d58 <main+0x47c>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b30      	cmp	r3, #48	; 0x30
 8003bba:	d10e      	bne.n	8003bda <main+0x2fe>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 88);
 8003bbc:	4b67      	ldr	r3, [pc, #412]	; (8003d5c <main+0x480>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2258      	movs	r2, #88	; 0x58
 8003bc2:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8003bc4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003bc8:	f002 f866 	bl	8005c98 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90);
 8003bcc:	4b63      	ldr	r3, [pc, #396]	; (8003d5c <main+0x480>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	225a      	movs	r2, #90	; 0x5a
 8003bd2:	63da      	str	r2, [r3, #60]	; 0x3c
			awning = 0;
 8003bd4:	4b63      	ldr	r3, [pc, #396]	; (8003d64 <main+0x488>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
		}
		vOutside[0]='x';
 8003bda:	4b5f      	ldr	r3, [pc, #380]	; (8003d58 <main+0x47c>)
 8003bdc:	2278      	movs	r2, #120	; 0x78
 8003bde:	701a      	strb	r2, [r3, #0]

		// LIVING ROOM WINDOW (90)
		if(vWindow[2]=='1' || vLiving[5]=='1') {
 8003be0:	4b5c      	ldr	r3, [pc, #368]	; (8003d54 <main+0x478>)
 8003be2:	789b      	ldrb	r3, [r3, #2]
 8003be4:	2b31      	cmp	r3, #49	; 0x31
 8003be6:	d003      	beq.n	8003bf0 <main+0x314>
 8003be8:	4b5f      	ldr	r3, [pc, #380]	; (8003d68 <main+0x48c>)
 8003bea:	795b      	ldrb	r3, [r3, #5]
 8003bec:	2b31      	cmp	r3, #49	; 0x31
 8003bee:	d10b      	bne.n	8003c08 <main+0x32c>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 91);
 8003bf0:	4b5e      	ldr	r3, [pc, #376]	; (8003d6c <main+0x490>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	225b      	movs	r2, #91	; 0x5b
 8003bf6:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(3000);
 8003bf8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003bfc:	f002 f84c 	bl	8005c98 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 90);
 8003c00:	4b5a      	ldr	r3, [pc, #360]	; (8003d6c <main+0x490>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	225a      	movs	r2, #90	; 0x5a
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40
		}
		if(vWindow[2]=='0'|| vLiving[5]=='0') {
 8003c08:	4b52      	ldr	r3, [pc, #328]	; (8003d54 <main+0x478>)
 8003c0a:	789b      	ldrb	r3, [r3, #2]
 8003c0c:	2b30      	cmp	r3, #48	; 0x30
 8003c0e:	d003      	beq.n	8003c18 <main+0x33c>
 8003c10:	4b55      	ldr	r3, [pc, #340]	; (8003d68 <main+0x48c>)
 8003c12:	795b      	ldrb	r3, [r3, #5]
 8003c14:	2b30      	cmp	r3, #48	; 0x30
 8003c16:	d10b      	bne.n	8003c30 <main+0x354>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 89);
 8003c18:	4b54      	ldr	r3, [pc, #336]	; (8003d6c <main+0x490>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2259      	movs	r2, #89	; 0x59
 8003c1e:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(3000);
 8003c20:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003c24:	f002 f838 	bl	8005c98 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 90);
 8003c28:	4b50      	ldr	r3, [pc, #320]	; (8003d6c <main+0x490>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	225a      	movs	r2, #90	; 0x5a
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40
		}
		vWindow[2]='x';
 8003c30:	4b48      	ldr	r3, [pc, #288]	; (8003d54 <main+0x478>)
 8003c32:	2278      	movs	r2, #120	; 0x78
 8003c34:	709a      	strb	r2, [r3, #2]
		vLiving[5]='x';
 8003c36:	4b4c      	ldr	r3, [pc, #304]	; (8003d68 <main+0x48c>)
 8003c38:	2278      	movs	r2, #120	; 0x78
 8003c3a:	715a      	strb	r2, [r3, #5]

		// BEDROOM WINDOW (90)
		if(vWindow[3]=='1' || vBedroom[3]=='1') {
 8003c3c:	4b45      	ldr	r3, [pc, #276]	; (8003d54 <main+0x478>)
 8003c3e:	78db      	ldrb	r3, [r3, #3]
 8003c40:	2b31      	cmp	r3, #49	; 0x31
 8003c42:	d003      	beq.n	8003c4c <main+0x370>
 8003c44:	4b4a      	ldr	r3, [pc, #296]	; (8003d70 <main+0x494>)
 8003c46:	78db      	ldrb	r3, [r3, #3]
 8003c48:	2b31      	cmp	r3, #49	; 0x31
 8003c4a:	d10b      	bne.n	8003c64 <main+0x388>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 92);
 8003c4c:	4b47      	ldr	r3, [pc, #284]	; (8003d6c <main+0x490>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	225c      	movs	r2, #92	; 0x5c
 8003c52:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(3000);
 8003c54:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003c58:	f002 f81e 	bl	8005c98 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 90);
 8003c5c:	4b43      	ldr	r3, [pc, #268]	; (8003d6c <main+0x490>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	225a      	movs	r2, #90	; 0x5a
 8003c62:	639a      	str	r2, [r3, #56]	; 0x38
		}
		if(vWindow[3]=='0' || vBedroom[3]=='0') {
 8003c64:	4b3b      	ldr	r3, [pc, #236]	; (8003d54 <main+0x478>)
 8003c66:	78db      	ldrb	r3, [r3, #3]
 8003c68:	2b30      	cmp	r3, #48	; 0x30
 8003c6a:	d003      	beq.n	8003c74 <main+0x398>
 8003c6c:	4b40      	ldr	r3, [pc, #256]	; (8003d70 <main+0x494>)
 8003c6e:	78db      	ldrb	r3, [r3, #3]
 8003c70:	2b30      	cmp	r3, #48	; 0x30
 8003c72:	d10b      	bne.n	8003c8c <main+0x3b0>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 89);
 8003c74:	4b3d      	ldr	r3, [pc, #244]	; (8003d6c <main+0x490>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2259      	movs	r2, #89	; 0x59
 8003c7a:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(3000);
 8003c7c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003c80:	f002 f80a 	bl	8005c98 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 90);
 8003c84:	4b39      	ldr	r3, [pc, #228]	; (8003d6c <main+0x490>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	225a      	movs	r2, #90	; 0x5a
 8003c8a:	639a      	str	r2, [r3, #56]	; 0x38
		}
		vWindow[3]='x';
 8003c8c:	4b31      	ldr	r3, [pc, #196]	; (8003d54 <main+0x478>)
 8003c8e:	2278      	movs	r2, #120	; 0x78
 8003c90:	70da      	strb	r2, [r3, #3]
		vBedroom[3]='x';
 8003c92:	4b37      	ldr	r3, [pc, #220]	; (8003d70 <main+0x494>)
 8003c94:	2278      	movs	r2, #120	; 0x78
 8003c96:	70da      	strb	r2, [r3, #3]

		// OFFICE WINDOW (90)
		if(vWindow[4]=='1' || vOffice[11]=='1') {
 8003c98:	4b2e      	ldr	r3, [pc, #184]	; (8003d54 <main+0x478>)
 8003c9a:	791b      	ldrb	r3, [r3, #4]
 8003c9c:	2b31      	cmp	r3, #49	; 0x31
 8003c9e:	d003      	beq.n	8003ca8 <main+0x3cc>
 8003ca0:	4b34      	ldr	r3, [pc, #208]	; (8003d74 <main+0x498>)
 8003ca2:	7adb      	ldrb	r3, [r3, #11]
 8003ca4:	2b31      	cmp	r3, #49	; 0x31
 8003ca6:	d10b      	bne.n	8003cc0 <main+0x3e4>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 91);
 8003ca8:	4b30      	ldr	r3, [pc, #192]	; (8003d6c <main+0x490>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	225b      	movs	r2, #91	; 0x5b
 8003cae:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8003cb0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003cb4:	f001 fff0 	bl	8005c98 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 90);
 8003cb8:	4b2c      	ldr	r3, [pc, #176]	; (8003d6c <main+0x490>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	225a      	movs	r2, #90	; 0x5a
 8003cbe:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		if(vWindow[4]=='0' || vOffice[11]=='0') {
 8003cc0:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <main+0x478>)
 8003cc2:	791b      	ldrb	r3, [r3, #4]
 8003cc4:	2b30      	cmp	r3, #48	; 0x30
 8003cc6:	d003      	beq.n	8003cd0 <main+0x3f4>
 8003cc8:	4b2a      	ldr	r3, [pc, #168]	; (8003d74 <main+0x498>)
 8003cca:	7adb      	ldrb	r3, [r3, #11]
 8003ccc:	2b30      	cmp	r3, #48	; 0x30
 8003cce:	d10b      	bne.n	8003ce8 <main+0x40c>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 88);
 8003cd0:	4b26      	ldr	r3, [pc, #152]	; (8003d6c <main+0x490>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2258      	movs	r2, #88	; 0x58
 8003cd6:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8003cd8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003cdc:	f001 ffdc 	bl	8005c98 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 90);
 8003ce0:	4b22      	ldr	r3, [pc, #136]	; (8003d6c <main+0x490>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	225a      	movs	r2, #90	; 0x5a
 8003ce6:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		vWindow[4]='x';
 8003ce8:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <main+0x478>)
 8003cea:	2278      	movs	r2, #120	; 0x78
 8003cec:	711a      	strb	r2, [r3, #4]
		vOffice[11]='x';
 8003cee:	4b21      	ldr	r3, [pc, #132]	; (8003d74 <main+0x498>)
 8003cf0:	2278      	movs	r2, #120	; 0x78
 8003cf2:	72da      	strb	r2, [r3, #11]

		// PARCEL LIMIT SWITCH
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == 0){
 8003cf4:	2140      	movs	r1, #64	; 0x40
 8003cf6:	4813      	ldr	r0, [pc, #76]	; (8003d44 <main+0x468>)
 8003cf8:	f002 fefe 	bl	8006af8 <HAL_GPIO_ReadPin>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d14d      	bne.n	8003d9e <main+0x4c2>

			if (vWindow[0]=='1' || vOutside[4]=='1'){
 8003d02:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <main+0x478>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b31      	cmp	r3, #49	; 0x31
 8003d08:	d003      	beq.n	8003d12 <main+0x436>
 8003d0a:	4b13      	ldr	r3, [pc, #76]	; (8003d58 <main+0x47c>)
 8003d0c:	791b      	ldrb	r3, [r3, #4]
 8003d0e:	2b31      	cmp	r3, #49	; 0x31
 8003d10:	d107      	bne.n	8003d22 <main+0x446>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89); // Parcel Servo
 8003d12:	4b12      	ldr	r3, [pc, #72]	; (8003d5c <main+0x480>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2259      	movs	r2, #89	; 0x59
 8003d18:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(1000);
 8003d1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d1e:	f001 ffbb 	bl	8005c98 <HAL_Delay>
			}
			if (vWindow[0]=='0' || vOutside[4]=='0'){
 8003d22:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <main+0x478>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b30      	cmp	r3, #48	; 0x30
 8003d28:	d027      	beq.n	8003d7a <main+0x49e>
 8003d2a:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <main+0x47c>)
 8003d2c:	791b      	ldrb	r3, [r3, #4]
 8003d2e:	2b30      	cmp	r3, #48	; 0x30
 8003d30:	e022      	b.n	8003d78 <main+0x49c>
 8003d32:	bf00      	nop
 8003d34:	0800ada8 	.word	0x0800ada8
 8003d38:	20000fdc 	.word	0x20000fdc
 8003d3c:	40020800 	.word	0x40020800
 8003d40:	20000cb4 	.word	0x20000cb4
 8003d44:	40021000 	.word	0x40021000
 8003d48:	200008b0 	.word	0x200008b0
 8003d4c:	20000970 	.word	0x20000970
 8003d50:	200008b4 	.word	0x200008b4
 8003d54:	2000091c 	.word	0x2000091c
 8003d58:	2000095c 	.word	0x2000095c
 8003d5c:	20001020 	.word	0x20001020
 8003d60:	20000968 	.word	0x20000968
 8003d64:	200008d0 	.word	0x200008d0
 8003d68:	20000914 	.word	0x20000914
 8003d6c:	20000e2c 	.word	0x20000e2c
 8003d70:	20000974 	.word	0x20000974
 8003d74:	20000950 	.word	0x20000950
 8003d78:	d107      	bne.n	8003d8a <main+0x4ae>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 91); // Parcel Servo
 8003d7a:	4b85      	ldr	r3, [pc, #532]	; (8003f90 <main+0x6b4>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	225b      	movs	r2, #91	; 0x5b
 8003d80:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(1000);
 8003d82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d86:	f001 ff87 	bl	8005c98 <HAL_Delay>
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 90); // Parcel Servo
 8003d8a:	4b81      	ldr	r3, [pc, #516]	; (8003f90 <main+0x6b4>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	225a      	movs	r2, #90	; 0x5a
 8003d90:	635a      	str	r2, [r3, #52]	; 0x34
			vWindow[0]='x'; // Parcel Servo
 8003d92:	4b80      	ldr	r3, [pc, #512]	; (8003f94 <main+0x6b8>)
 8003d94:	2278      	movs	r2, #120	; 0x78
 8003d96:	701a      	strb	r2, [r3, #0]
			vOutside[4]='x'; // Parcel Servo
 8003d98:	4b7f      	ldr	r3, [pc, #508]	; (8003f98 <main+0x6bc>)
 8003d9a:	2278      	movs	r2, #120	; 0x78
 8003d9c:	711a      	strb	r2, [r3, #4]
		}

		// GARAGE LIMIT SWITCH
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == 0){
 8003d9e:	2110      	movs	r1, #16
 8003da0:	487e      	ldr	r0, [pc, #504]	; (8003f9c <main+0x6c0>)
 8003da2:	f002 fea9 	bl	8006af8 <HAL_GPIO_ReadPin>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d129      	bne.n	8003e00 <main+0x524>

			if (vWindow[1]=='1' || vGarage[1]=='1'){
 8003dac:	4b79      	ldr	r3, [pc, #484]	; (8003f94 <main+0x6b8>)
 8003dae:	785b      	ldrb	r3, [r3, #1]
 8003db0:	2b31      	cmp	r3, #49	; 0x31
 8003db2:	d003      	beq.n	8003dbc <main+0x4e0>
 8003db4:	4b7a      	ldr	r3, [pc, #488]	; (8003fa0 <main+0x6c4>)
 8003db6:	785b      	ldrb	r3, [r3, #1]
 8003db8:	2b31      	cmp	r3, #49	; 0x31
 8003dba:	d107      	bne.n	8003dcc <main+0x4f0>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 89); // Garage Servo
 8003dbc:	4b74      	ldr	r3, [pc, #464]	; (8003f90 <main+0x6b4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2259      	movs	r2, #89	; 0x59
 8003dc2:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(1000);
 8003dc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dc8:	f001 ff66 	bl	8005c98 <HAL_Delay>
			}
			if (vWindow[1]=='0' || vGarage[1]=='0'){
 8003dcc:	4b71      	ldr	r3, [pc, #452]	; (8003f94 <main+0x6b8>)
 8003dce:	785b      	ldrb	r3, [r3, #1]
 8003dd0:	2b30      	cmp	r3, #48	; 0x30
 8003dd2:	d003      	beq.n	8003ddc <main+0x500>
 8003dd4:	4b72      	ldr	r3, [pc, #456]	; (8003fa0 <main+0x6c4>)
 8003dd6:	785b      	ldrb	r3, [r3, #1]
 8003dd8:	2b30      	cmp	r3, #48	; 0x30
 8003dda:	d107      	bne.n	8003dec <main+0x510>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 92); // Garage Servo
 8003ddc:	4b6c      	ldr	r3, [pc, #432]	; (8003f90 <main+0x6b4>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	225c      	movs	r2, #92	; 0x5c
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(1000);
 8003de4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003de8:	f001 ff56 	bl	8005c98 <HAL_Delay>
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 90); // Garage Servo
 8003dec:	4b68      	ldr	r3, [pc, #416]	; (8003f90 <main+0x6b4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	225a      	movs	r2, #90	; 0x5a
 8003df2:	639a      	str	r2, [r3, #56]	; 0x38
			vWindow[1]='x'; // Garage Servo
 8003df4:	4b67      	ldr	r3, [pc, #412]	; (8003f94 <main+0x6b8>)
 8003df6:	2278      	movs	r2, #120	; 0x78
 8003df8:	705a      	strb	r2, [r3, #1]
			vGarage[1]='x'; // Garage Servo
 8003dfa:	4b69      	ldr	r3, [pc, #420]	; (8003fa0 <main+0x6c4>)
 8003dfc:	2278      	movs	r2, #120	; 0x78
 8003dfe:	705a      	strb	r2, [r3, #1]
		}

		// LINVING ROOM FAN
		if(vWeather[0]=='1') {
 8003e00:	4b68      	ldr	r3, [pc, #416]	; (8003fa4 <main+0x6c8>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b31      	cmp	r3, #49	; 0x31
 8003e06:	d10e      	bne.n	8003e26 <main+0x54a>
			__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 1000);
 8003e08:	4b67      	ldr	r3, [pc, #412]	; (8003fa8 <main+0x6cc>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e10:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
 8003e12:	2201      	movs	r2, #1
 8003e14:	2110      	movs	r1, #16
 8003e16:	4865      	ldr	r0, [pc, #404]	; (8003fac <main+0x6d0>)
 8003e18:	f002 fe86 	bl	8006b28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,GPIO_PIN_RESET);
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2120      	movs	r1, #32
 8003e20:	4862      	ldr	r0, [pc, #392]	; (8003fac <main+0x6d0>)
 8003e22:	f002 fe81 	bl	8006b28 <HAL_GPIO_WritePin>
		}
		if(vWeather[0]=='0') {
 8003e26:	4b5f      	ldr	r3, [pc, #380]	; (8003fa4 <main+0x6c8>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b30      	cmp	r3, #48	; 0x30
 8003e2c:	d10d      	bne.n	8003e4a <main+0x56e>
			__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 8003e2e:	4b5e      	ldr	r3, [pc, #376]	; (8003fa8 <main+0x6cc>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2200      	movs	r2, #0
 8003e34:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_RESET);
 8003e36:	2200      	movs	r2, #0
 8003e38:	2110      	movs	r1, #16
 8003e3a:	485c      	ldr	r0, [pc, #368]	; (8003fac <main+0x6d0>)
 8003e3c:	f002 fe74 	bl	8006b28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,GPIO_PIN_RESET);
 8003e40:	2200      	movs	r2, #0
 8003e42:	2120      	movs	r1, #32
 8003e44:	4859      	ldr	r0, [pc, #356]	; (8003fac <main+0x6d0>)
 8003e46:	f002 fe6f 	bl	8006b28 <HAL_GPIO_WritePin>
		}

		// SETTINGS
		f_on = temp_value(vSettings[0], vSettings[1], vSettings[2]);
 8003e4a:	4b59      	ldr	r3, [pc, #356]	; (8003fb0 <main+0x6d4>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	4a58      	ldr	r2, [pc, #352]	; (8003fb0 <main+0x6d4>)
 8003e50:	7851      	ldrb	r1, [r2, #1]
 8003e52:	4a57      	ldr	r2, [pc, #348]	; (8003fb0 <main+0x6d4>)
 8003e54:	7892      	ldrb	r2, [r2, #2]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe fc8c 	bl	8002774 <temp_value>
 8003e5c:	eef0 7a40 	vmov.f32	s15, s0
 8003e60:	4b54      	ldr	r3, [pc, #336]	; (8003fb4 <main+0x6d8>)
 8003e62:	edc3 7a00 	vstr	s15, [r3]
		f_off = temp_value(vSettings[3], vSettings[4], vSettings[5]);
 8003e66:	4b52      	ldr	r3, [pc, #328]	; (8003fb0 <main+0x6d4>)
 8003e68:	78db      	ldrb	r3, [r3, #3]
 8003e6a:	4a51      	ldr	r2, [pc, #324]	; (8003fb0 <main+0x6d4>)
 8003e6c:	7911      	ldrb	r1, [r2, #4]
 8003e6e:	4a50      	ldr	r2, [pc, #320]	; (8003fb0 <main+0x6d4>)
 8003e70:	7952      	ldrb	r2, [r2, #5]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fe fc7e 	bl	8002774 <temp_value>
 8003e78:	eef0 7a40 	vmov.f32	s15, s0
 8003e7c:	4b4e      	ldr	r3, [pc, #312]	; (8003fb8 <main+0x6dc>)
 8003e7e:	edc3 7a00 	vstr	s15, [r3]
		h_on = temp_value(vSettings[6], vSettings[7], vSettings[8]);
 8003e82:	4b4b      	ldr	r3, [pc, #300]	; (8003fb0 <main+0x6d4>)
 8003e84:	799b      	ldrb	r3, [r3, #6]
 8003e86:	4a4a      	ldr	r2, [pc, #296]	; (8003fb0 <main+0x6d4>)
 8003e88:	79d1      	ldrb	r1, [r2, #7]
 8003e8a:	4a49      	ldr	r2, [pc, #292]	; (8003fb0 <main+0x6d4>)
 8003e8c:	7a12      	ldrb	r2, [r2, #8]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fe fc70 	bl	8002774 <temp_value>
 8003e94:	eef0 7a40 	vmov.f32	s15, s0
 8003e98:	4b48      	ldr	r3, [pc, #288]	; (8003fbc <main+0x6e0>)
 8003e9a:	edc3 7a00 	vstr	s15, [r3]
		h_off = temp_value(vSettings[9], vSettings[10], vSettings[11]);
 8003e9e:	4b44      	ldr	r3, [pc, #272]	; (8003fb0 <main+0x6d4>)
 8003ea0:	7a5b      	ldrb	r3, [r3, #9]
 8003ea2:	4a43      	ldr	r2, [pc, #268]	; (8003fb0 <main+0x6d4>)
 8003ea4:	7a91      	ldrb	r1, [r2, #10]
 8003ea6:	4a42      	ldr	r2, [pc, #264]	; (8003fb0 <main+0x6d4>)
 8003ea8:	7ad2      	ldrb	r2, [r2, #11]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fe fc62 	bl	8002774 <temp_value>
 8003eb0:	eef0 7a40 	vmov.f32	s15, s0
 8003eb4:	4b42      	ldr	r3, [pc, #264]	; (8003fc0 <main+0x6e4>)
 8003eb6:	edc3 7a00 	vstr	s15, [r3]

		rh_min = rh_value(vSettings[12], vSettings[13]);
 8003eba:	4b3d      	ldr	r3, [pc, #244]	; (8003fb0 <main+0x6d4>)
 8003ebc:	7b1b      	ldrb	r3, [r3, #12]
 8003ebe:	4a3c      	ldr	r2, [pc, #240]	; (8003fb0 <main+0x6d4>)
 8003ec0:	7b52      	ldrb	r2, [r2, #13]
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7fe fb91 	bl	80025ec <rh_value>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	4a3d      	ldr	r2, [pc, #244]	; (8003fc4 <main+0x6e8>)
 8003ece:	6013      	str	r3, [r2, #0]
		rh_max = rh_value(vSettings[14], vSettings[15]);
 8003ed0:	4b37      	ldr	r3, [pc, #220]	; (8003fb0 <main+0x6d4>)
 8003ed2:	7b9b      	ldrb	r3, [r3, #14]
 8003ed4:	4a36      	ldr	r2, [pc, #216]	; (8003fb0 <main+0x6d4>)
 8003ed6:	7bd2      	ldrb	r2, [r2, #15]
 8003ed8:	4611      	mov	r1, r2
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe fb86 	bl	80025ec <rh_value>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	4a39      	ldr	r2, [pc, #228]	; (8003fc8 <main+0x6ec>)
 8003ee4:	6013      	str	r3, [r2, #0]


		/*----------- Sensor Reading -----------*/

		// LDR
		if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8003ee6:	f04f 31ff 	mov.w	r1, #4294967295
 8003eea:	4838      	ldr	r0, [pc, #224]	; (8003fcc <main+0x6f0>)
 8003eec:	f002 f80e 	bl	8005f0c <HAL_ADC_PollForConversion>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d106      	bne.n	8003f04 <main+0x628>
			LDR_value = HAL_ADC_GetValue(&hadc1);
 8003ef6:	4835      	ldr	r0, [pc, #212]	; (8003fcc <main+0x6f0>)
 8003ef8:	f002 f893 	bl	8006022 <HAL_ADC_GetValue>
 8003efc:	4603      	mov	r3, r0
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	4b33      	ldr	r3, [pc, #204]	; (8003fd0 <main+0x6f4>)
 8003f02:	801a      	strh	r2, [r3, #0]

		ldr(LDR_value);
 8003f04:	4b32      	ldr	r3, [pc, #200]	; (8003fd0 <main+0x6f4>)
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fe f9f7 	bl	80022fc <ldr>

		// Rain
		if(HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY) == HAL_OK)
 8003f0e:	f04f 31ff 	mov.w	r1, #4294967295
 8003f12:	4830      	ldr	r0, [pc, #192]	; (8003fd4 <main+0x6f8>)
 8003f14:	f001 fffa 	bl	8005f0c <HAL_ADC_PollForConversion>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <main+0x650>
			Rain_read = HAL_ADC_GetValue(&hadc3);
 8003f1e:	482d      	ldr	r0, [pc, #180]	; (8003fd4 <main+0x6f8>)
 8003f20:	f002 f87f 	bl	8006022 <HAL_ADC_GetValue>
 8003f24:	4603      	mov	r3, r0
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	4b2b      	ldr	r3, [pc, #172]	; (8003fd8 <main+0x6fc>)
 8003f2a:	801a      	strh	r2, [r3, #0]

		Rain = 100 - ((100*Rain_read)/255);
 8003f2c:	4b2a      	ldr	r3, [pc, #168]	; (8003fd8 <main+0x6fc>)
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	461a      	mov	r2, r3
 8003f32:	2364      	movs	r3, #100	; 0x64
 8003f34:	fb03 f302 	mul.w	r3, r3, r2
 8003f38:	4a28      	ldr	r2, [pc, #160]	; (8003fdc <main+0x700>)
 8003f3a:	fb82 1203 	smull	r1, r2, r2, r3
 8003f3e:	441a      	add	r2, r3
 8003f40:	11d2      	asrs	r2, r2, #7
 8003f42:	17db      	asrs	r3, r3, #31
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3364      	adds	r3, #100	; 0x64
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	4b24      	ldr	r3, [pc, #144]	; (8003fe0 <main+0x704>)
 8003f4e:	801a      	strh	r2, [r3, #0]

		if(vOutside[5] == '1'){
 8003f50:	4b11      	ldr	r3, [pc, #68]	; (8003f98 <main+0x6bc>)
 8003f52:	795b      	ldrb	r3, [r3, #5]
 8003f54:	2b31      	cmp	r3, #49	; 0x31
 8003f56:	d165      	bne.n	8004024 <main+0x748>
			// There are clothes and it is raining (closed awning)
			if (Rain>5 && vOutside[6] == '1' && awning == 0){
 8003f58:	4b21      	ldr	r3, [pc, #132]	; (8003fe0 <main+0x704>)
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	2b05      	cmp	r3, #5
 8003f5e:	d943      	bls.n	8003fe8 <main+0x70c>
 8003f60:	4b0d      	ldr	r3, [pc, #52]	; (8003f98 <main+0x6bc>)
 8003f62:	799b      	ldrb	r3, [r3, #6]
 8003f64:	2b31      	cmp	r3, #49	; 0x31
 8003f66:	d13f      	bne.n	8003fe8 <main+0x70c>
 8003f68:	4b1e      	ldr	r3, [pc, #120]	; (8003fe4 <main+0x708>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d13b      	bne.n	8003fe8 <main+0x70c>

				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 91); // Open awning
 8003f70:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <main+0x6b4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	225b      	movs	r2, #91	; 0x5b
 8003f76:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_Delay(3000);
 8003f78:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003f7c:	f001 fe8c 	bl	8005c98 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90);
 8003f80:	4b03      	ldr	r3, [pc, #12]	; (8003f90 <main+0x6b4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	225a      	movs	r2, #90	; 0x5a
 8003f86:	63da      	str	r2, [r3, #60]	; 0x3c
				awning = 1;
 8003f88:	4b16      	ldr	r3, [pc, #88]	; (8003fe4 <main+0x708>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	e046      	b.n	800401e <main+0x742>
 8003f90:	20001020 	.word	0x20001020
 8003f94:	2000091c 	.word	0x2000091c
 8003f98:	2000095c 	.word	0x2000095c
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	20000968 	.word	0x20000968
 8003fa4:	20000940 	.word	0x20000940
 8003fa8:	20000f94 	.word	0x20000f94
 8003fac:	40020800 	.word	0x40020800
 8003fb0:	20000904 	.word	0x20000904
 8003fb4:	200008b8 	.word	0x200008b8
 8003fb8:	200008bc 	.word	0x200008bc
 8003fbc:	200008c0 	.word	0x200008c0
 8003fc0:	200008c4 	.word	0x200008c4
 8003fc4:	200008c8 	.word	0x200008c8
 8003fc8:	200008cc 	.word	0x200008cc
 8003fcc:	20000e74 	.word	0x20000e74
 8003fd0:	200008d4 	.word	0x200008d4
 8003fd4:	20000ebc 	.word	0x20000ebc
 8003fd8:	200008da 	.word	0x200008da
 8003fdc:	80808081 	.word	0x80808081
 8003fe0:	200008dc 	.word	0x200008dc
 8003fe4:	200008d0 	.word	0x200008d0

			// There are clothes and it is raining (opened awning)
			// There are not clothes and it is raining (closed awning)

			// There are not clothes and it is raining (opened awning)
			else if (Rain>5 && vOutside[6] == '0' && awning == 1){
 8003fe8:	4ba9      	ldr	r3, [pc, #676]	; (8004290 <main+0x9b4>)
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	2b05      	cmp	r3, #5
 8003fee:	d916      	bls.n	800401e <main+0x742>
 8003ff0:	4ba8      	ldr	r3, [pc, #672]	; (8004294 <main+0x9b8>)
 8003ff2:	799b      	ldrb	r3, [r3, #6]
 8003ff4:	2b30      	cmp	r3, #48	; 0x30
 8003ff6:	d112      	bne.n	800401e <main+0x742>
 8003ff8:	4ba7      	ldr	r3, [pc, #668]	; (8004298 <main+0x9bc>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d10e      	bne.n	800401e <main+0x742>

				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 88); // Close awning
 8004000:	4ba6      	ldr	r3, [pc, #664]	; (800429c <main+0x9c0>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2258      	movs	r2, #88	; 0x58
 8004006:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_Delay(3000);
 8004008:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800400c:	f001 fe44 	bl	8005c98 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90);
 8004010:	4ba2      	ldr	r3, [pc, #648]	; (800429c <main+0x9c0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	225a      	movs	r2, #90	; 0x5a
 8004016:	63da      	str	r2, [r3, #60]	; 0x3c
				awning = 0;
 8004018:	4b9f      	ldr	r3, [pc, #636]	; (8004298 <main+0x9bc>)
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]
			}

			// There are clothes and it is not raining (awning does not matter)
			// There are not clothes and it is not raining (awning does not matter)

			vOutside[0]='x';
 800401e:	4b9d      	ldr	r3, [pc, #628]	; (8004294 <main+0x9b8>)
 8004020:	2278      	movs	r2, #120	; 0x78
 8004022:	701a      	strb	r2, [r3, #0]
		}

		// HW-390
		if(HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK)
 8004024:	f04f 31ff 	mov.w	r1, #4294967295
 8004028:	489d      	ldr	r0, [pc, #628]	; (80042a0 <main+0x9c4>)
 800402a:	f001 ff6f 	bl	8005f0c <HAL_ADC_PollForConversion>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d106      	bne.n	8004042 <main+0x766>
			Hygro_read = HAL_ADC_GetValue(&hadc2);
 8004034:	489a      	ldr	r0, [pc, #616]	; (80042a0 <main+0x9c4>)
 8004036:	f001 fff4 	bl	8006022 <HAL_ADC_GetValue>
 800403a:	4603      	mov	r3, r0
 800403c:	b29a      	uxth	r2, r3
 800403e:	4b99      	ldr	r3, [pc, #612]	; (80042a4 <main+0x9c8>)
 8004040:	801a      	strh	r2, [r3, #0]

		Hygro = 100 - ((100*Hygro_read)/255);
 8004042:	4b98      	ldr	r3, [pc, #608]	; (80042a4 <main+0x9c8>)
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	2364      	movs	r3, #100	; 0x64
 800404a:	fb03 f302 	mul.w	r3, r3, r2
 800404e:	4a96      	ldr	r2, [pc, #600]	; (80042a8 <main+0x9cc>)
 8004050:	fb82 1203 	smull	r1, r2, r2, r3
 8004054:	441a      	add	r2, r3
 8004056:	11d2      	asrs	r2, r2, #7
 8004058:	17db      	asrs	r3, r3, #31
 800405a:	1a9b      	subs	r3, r3, r2
 800405c:	b29b      	uxth	r3, r3
 800405e:	3364      	adds	r3, #100	; 0x64
 8004060:	b29a      	uxth	r2, r3
 8004062:	4b92      	ldr	r3, [pc, #584]	; (80042ac <main+0x9d0>)
 8004064:	801a      	strh	r2, [r3, #0]
			}
			else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET); // Water
		}*/

		//DHT22
		if(readDHT == 1){
 8004066:	4b92      	ldr	r3, [pc, #584]	; (80042b0 <main+0x9d4>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b01      	cmp	r3, #1
 800406c:	f040 80d5 	bne.w	800421a <main+0x93e>

		  	// Inside
		  	DHT22_getData(&DHT22_inside);
 8004070:	4890      	ldr	r0, [pc, #576]	; (80042b4 <main+0x9d8>)
 8004072:	f7fc ffe3 	bl	800103c <DHT22_getData>
		  	RHInside = DHT22_inside.Humidity;
 8004076:	4b8f      	ldr	r3, [pc, #572]	; (80042b4 <main+0x9d8>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	4a8f      	ldr	r2, [pc, #572]	; (80042b8 <main+0x9dc>)
 800407c:	6013      	str	r3, [r2, #0]
		  	TempInside = DHT22_inside.Temperature;
 800407e:	4b8d      	ldr	r3, [pc, #564]	; (80042b4 <main+0x9d8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a8e      	ldr	r2, [pc, #568]	; (80042bc <main+0x9e0>)
 8004084:	6013      	str	r3, [r2, #0]

		    int in_rh_unit = RHInside;
 8004086:	4b8c      	ldr	r3, [pc, #560]	; (80042b8 <main+0x9dc>)
 8004088:	edd3 7a00 	vldr	s15, [r3]
 800408c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004090:	ee17 3a90 	vmov	r3, s15
 8004094:	653b      	str	r3, [r7, #80]	; 0x50
		    int in_rh_dec = (RHInside-in_rh_unit)*10;
 8004096:	4b88      	ldr	r3, [pc, #544]	; (80042b8 <main+0x9dc>)
 8004098:	ed93 7a00 	vldr	s14, [r3]
 800409c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800409e:	ee07 3a90 	vmov	s15, r3
 80040a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040aa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80040ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040b6:	ee17 3a90 	vmov	r3, s15
 80040ba:	64fb      	str	r3, [r7, #76]	; 0x4c
		    char c_in_rh_unit[2];
		    char c_in_rh_dec[1];
		    itoa(in_rh_unit, c_in_rh_unit, 10);
 80040bc:	f107 0314 	add.w	r3, r7, #20
 80040c0:	220a      	movs	r2, #10
 80040c2:	4619      	mov	r1, r3
 80040c4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80040c6:	f005 fdaf 	bl	8009c28 <itoa>
		    itoa(in_rh_dec, c_in_rh_dec, 10);
 80040ca:	f107 0310 	add.w	r3, r7, #16
 80040ce:	220a      	movs	r2, #10
 80040d0:	4619      	mov	r1, r3
 80040d2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80040d4:	f005 fda8 	bl	8009c28 <itoa>

		    int in_temp_unit = TempInside;
 80040d8:	4b78      	ldr	r3, [pc, #480]	; (80042bc <main+0x9e0>)
 80040da:	edd3 7a00 	vldr	s15, [r3]
 80040de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040e2:	ee17 3a90 	vmov	r3, s15
 80040e6:	64bb      	str	r3, [r7, #72]	; 0x48
		    int in_temp_dec = (TempInside-in_temp_unit)*10;
 80040e8:	4b74      	ldr	r3, [pc, #464]	; (80042bc <main+0x9e0>)
 80040ea:	ed93 7a00 	vldr	s14, [r3]
 80040ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040f0:	ee07 3a90 	vmov	s15, r3
 80040f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004100:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004104:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004108:	ee17 3a90 	vmov	r3, s15
 800410c:	647b      	str	r3, [r7, #68]	; 0x44
		    char c_in_temp_unit[2];
		    char c_in_temp_dec[1];
		    itoa(in_temp_unit, c_in_temp_unit, 10);
 800410e:	f107 030c 	add.w	r3, r7, #12
 8004112:	220a      	movs	r2, #10
 8004114:	4619      	mov	r1, r3
 8004116:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004118:	f005 fd86 	bl	8009c28 <itoa>
		    itoa(in_temp_dec, c_in_temp_dec, 10);
 800411c:	f107 0308 	add.w	r3, r7, #8
 8004120:	220a      	movs	r2, #10
 8004122:	4619      	mov	r1, r3
 8004124:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004126:	f005 fd7f 	bl	8009c28 <itoa>

		    graphics_text(44, 6, FONT_SIX_DOT, "RH      .");
 800412a:	4b65      	ldr	r3, [pc, #404]	; (80042c0 <main+0x9e4>)
 800412c:	2201      	movs	r2, #1
 800412e:	2106      	movs	r1, #6
 8004130:	202c      	movs	r0, #44	; 0x2c
 8004132:	f7ff fab1 	bl	8003698 <graphics_text>
		    graphics_text(56, 6, FONT_SIX_DOT, c_in_rh_unit);
 8004136:	f107 0314 	add.w	r3, r7, #20
 800413a:	2201      	movs	r2, #1
 800413c:	2106      	movs	r1, #6
 800413e:	2038      	movs	r0, #56	; 0x38
 8004140:	f7ff faaa 	bl	8003698 <graphics_text>
		    graphics_text(68, 6, FONT_SIX_DOT, c_in_rh_dec);
 8004144:	f107 0310 	add.w	r3, r7, #16
 8004148:	2201      	movs	r2, #1
 800414a:	2106      	movs	r1, #6
 800414c:	2044      	movs	r0, #68	; 0x44
 800414e:	f7ff faa3 	bl	8003698 <graphics_text>
		    graphics_text(75, 6, FONT_SIX_DOT, "%");
 8004152:	4b5c      	ldr	r3, [pc, #368]	; (80042c4 <main+0x9e8>)
 8004154:	2201      	movs	r2, #1
 8004156:	2106      	movs	r1, #6
 8004158:	204b      	movs	r0, #75	; 0x4b
 800415a:	f7ff fa9d 	bl	8003698 <graphics_text>

		    graphics_text(90, 6, FONT_SIX_DOT, "T      .");
 800415e:	4b5a      	ldr	r3, [pc, #360]	; (80042c8 <main+0x9ec>)
 8004160:	2201      	movs	r2, #1
 8004162:	2106      	movs	r1, #6
 8004164:	205a      	movs	r0, #90	; 0x5a
 8004166:	f7ff fa97 	bl	8003698 <graphics_text>
		    graphics_text(98, 6, FONT_SIX_DOT, c_in_temp_unit);
 800416a:	f107 030c 	add.w	r3, r7, #12
 800416e:	2201      	movs	r2, #1
 8004170:	2106      	movs	r1, #6
 8004172:	2062      	movs	r0, #98	; 0x62
 8004174:	f7ff fa90 	bl	8003698 <graphics_text>
		    graphics_text(110, 6, FONT_SIX_DOT, c_in_temp_dec);
 8004178:	f107 0308 	add.w	r3, r7, #8
 800417c:	2201      	movs	r2, #1
 800417e:	2106      	movs	r1, #6
 8004180:	206e      	movs	r0, #110	; 0x6e
 8004182:	f7ff fa89 	bl	8003698 <graphics_text>
		    graphics_text(117, 6, FONT_SIX_DOT, "C");
 8004186:	4b51      	ldr	r3, [pc, #324]	; (80042cc <main+0x9f0>)
 8004188:	2201      	movs	r2, #1
 800418a:	2106      	movs	r1, #6
 800418c:	2075      	movs	r0, #117	; 0x75
 800418e:	f7ff fa83 	bl	8003698 <graphics_text>

			// Exterior
			DHT22_getData(&DHT22_outside);
 8004192:	484f      	ldr	r0, [pc, #316]	; (80042d0 <main+0x9f4>)
 8004194:	f7fc ff52 	bl	800103c <DHT22_getData>
		  	RHOutside = DHT22_outside.Humidity;
 8004198:	4b4d      	ldr	r3, [pc, #308]	; (80042d0 <main+0x9f4>)
 800419a:	edd3 7a01 	vldr	s15, [r3, #4]
 800419e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041a2:	ee17 2a90 	vmov	r2, s15
 80041a6:	4b4b      	ldr	r3, [pc, #300]	; (80042d4 <main+0x9f8>)
 80041a8:	601a      	str	r2, [r3, #0]
		  	TempOutside = DHT22_outside.Temperature;
 80041aa:	4b49      	ldr	r3, [pc, #292]	; (80042d0 <main+0x9f4>)
 80041ac:	edd3 7a00 	vldr	s15, [r3]
 80041b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041b4:	ee17 2a90 	vmov	r2, s15
 80041b8:	4b47      	ldr	r3, [pc, #284]	; (80042d8 <main+0x9fc>)
 80041ba:	601a      	str	r2, [r3, #0]

		    int out_rh_unit = RHOutside;
 80041bc:	4b45      	ldr	r3, [pc, #276]	; (80042d4 <main+0x9f8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	643b      	str	r3, [r7, #64]	; 0x40
		    char c_out_rh_unit[2];
		    itoa(out_rh_unit, c_out_rh_unit, 10);
 80041c2:	1d3b      	adds	r3, r7, #4
 80041c4:	220a      	movs	r2, #10
 80041c6:	4619      	mov	r1, r3
 80041c8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80041ca:	f005 fd2d 	bl	8009c28 <itoa>

		    int out_temp_unit = TempOutside;
 80041ce:	4b42      	ldr	r3, [pc, #264]	; (80042d8 <main+0x9fc>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	63fb      	str	r3, [r7, #60]	; 0x3c
		    char c_out_temp_unit[2];
		    itoa(out_temp_unit, c_out_temp_unit, 10);
 80041d4:	463b      	mov	r3, r7
 80041d6:	220a      	movs	r2, #10
 80041d8:	4619      	mov	r1, r3
 80041da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80041dc:	f005 fd24 	bl	8009c28 <itoa>

		    graphics_text(44, 20, FONT_SIX_DOT, "RH      .0 %");
 80041e0:	4b3e      	ldr	r3, [pc, #248]	; (80042dc <main+0xa00>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	2114      	movs	r1, #20
 80041e6:	202c      	movs	r0, #44	; 0x2c
 80041e8:	f7ff fa56 	bl	8003698 <graphics_text>
		    graphics_text(56, 20, FONT_SIX_DOT, c_out_rh_unit);
 80041ec:	1d3b      	adds	r3, r7, #4
 80041ee:	2201      	movs	r2, #1
 80041f0:	2114      	movs	r1, #20
 80041f2:	2038      	movs	r0, #56	; 0x38
 80041f4:	f7ff fa50 	bl	8003698 <graphics_text>

		    graphics_text(90, 20, FONT_SIX_DOT, "T      .0 C");
 80041f8:	4b39      	ldr	r3, [pc, #228]	; (80042e0 <main+0xa04>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	2114      	movs	r1, #20
 80041fe:	205a      	movs	r0, #90	; 0x5a
 8004200:	f7ff fa4a 	bl	8003698 <graphics_text>
		    graphics_text(98, 20, FONT_SIX_DOT, c_out_temp_unit);
 8004204:	463b      	mov	r3, r7
 8004206:	2201      	movs	r2, #1
 8004208:	2114      	movs	r1, #20
 800420a:	2062      	movs	r0, #98	; 0x62
 800420c:	f7ff fa44 	bl	8003698 <graphics_text>


		    oled_update(); // Update OLED
 8004210:	f000 ff56 	bl	80050c0 <oled_update>

		  	readDHT = 0;
 8004214:	4b26      	ldr	r3, [pc, #152]	; (80042b0 <main+0x9d4>)
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
		}

		if(vWeather[4] == '1'){
 800421a:	4b32      	ldr	r3, [pc, #200]	; (80042e4 <main+0xa08>)
 800421c:	791b      	ldrb	r3, [r3, #4]
 800421e:	2b31      	cmp	r3, #49	; 0x31
 8004220:	f47f abf7 	bne.w	8003a12 <main+0x136>
				HAL_GPIO_WritePin(GPIOX, GPIO_PIN_XX, SET); // Living Room Fan
			}
			else HAL_GPIO_WritePin(GPIOX, GPIO_PIN_X, RESET); // Living Room Fan*/

			// Heat is turned off and it does not reach the minimum temperature or it is turned on and it does not reach the maximum temperature
			if (((!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) && (TempInside<h_on)) || ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)) && (TempInside<h_off))){
 8004224:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004228:	482f      	ldr	r0, [pc, #188]	; (80042e8 <main+0xa0c>)
 800422a:	f002 fc65 	bl	8006af8 <HAL_GPIO_ReadPin>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10a      	bne.n	800424a <main+0x96e>
 8004234:	4b21      	ldr	r3, [pc, #132]	; (80042bc <main+0x9e0>)
 8004236:	ed93 7a00 	vldr	s14, [r3]
 800423a:	4b2c      	ldr	r3, [pc, #176]	; (80042ec <main+0xa10>)
 800423c:	edd3 7a00 	vldr	s15, [r3]
 8004240:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004248:	d412      	bmi.n	8004270 <main+0x994>
 800424a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800424e:	4826      	ldr	r0, [pc, #152]	; (80042e8 <main+0xa0c>)
 8004250:	f002 fc52 	bl	8006af8 <HAL_GPIO_ReadPin>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d011      	beq.n	800427e <main+0x9a2>
 800425a:	4b18      	ldr	r3, [pc, #96]	; (80042bc <main+0x9e0>)
 800425c:	ed93 7a00 	vldr	s14, [r3]
 8004260:	4b23      	ldr	r3, [pc, #140]	; (80042f0 <main+0xa14>)
 8004262:	edd3 7a00 	vldr	s15, [r3]
 8004266:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800426a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800426e:	d506      	bpl.n	800427e <main+0x9a2>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET); // Heat
 8004270:	2201      	movs	r2, #1
 8004272:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004276:	481c      	ldr	r0, [pc, #112]	; (80042e8 <main+0xa0c>)
 8004278:	f002 fc56 	bl	8006b28 <HAL_GPIO_WritePin>
 800427c:	e005      	b.n	800428a <main+0x9ae>
			}
			else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET); // Heat
 800427e:	2200      	movs	r2, #0
 8004280:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004284:	4818      	ldr	r0, [pc, #96]	; (80042e8 <main+0xa0c>)
 8004286:	f002 fc4f 	bl	8006b28 <HAL_GPIO_WritePin>
  while (1){
 800428a:	f7ff bbc2 	b.w	8003a12 <main+0x136>
 800428e:	bf00      	nop
 8004290:	200008dc 	.word	0x200008dc
 8004294:	2000095c 	.word	0x2000095c
 8004298:	200008d0 	.word	0x200008d0
 800429c:	20001020 	.word	0x20001020
 80042a0:	20000d48 	.word	0x20000d48
 80042a4:	200008d6 	.word	0x200008d6
 80042a8:	80808081 	.word	0x80808081
 80042ac:	200008d8 	.word	0x200008d8
 80042b0:	2000094c 	.word	0x2000094c
 80042b4:	200010ac 	.word	0x200010ac
 80042b8:	200008ec 	.word	0x200008ec
 80042bc:	200008e8 	.word	0x200008e8
 80042c0:	0800ad5c 	.word	0x0800ad5c
 80042c4:	0800ad68 	.word	0x0800ad68
 80042c8:	0800ad6c 	.word	0x0800ad6c
 80042cc:	0800ad78 	.word	0x0800ad78
 80042d0:	20000cfc 	.word	0x20000cfc
 80042d4:	200008e4 	.word	0x200008e4
 80042d8:	200008e0 	.word	0x200008e0
 80042dc:	0800ad7c 	.word	0x0800ad7c
 80042e0:	0800ad8c 	.word	0x0800ad8c
 80042e4:	20000940 	.word	0x20000940
 80042e8:	40020400 	.word	0x40020400
 80042ec:	200008c0 	.word	0x200008c0
 80042f0:	200008c4 	.word	0x200008c4

080042f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b094      	sub	sp, #80	; 0x50
 80042f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042fa:	f107 0320 	add.w	r3, r7, #32
 80042fe:	2230      	movs	r2, #48	; 0x30
 8004300:	2100      	movs	r1, #0
 8004302:	4618      	mov	r0, r3
 8004304:	f005 fc92 	bl	8009c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004308:	f107 030c 	add.w	r3, r7, #12
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	605a      	str	r2, [r3, #4]
 8004312:	609a      	str	r2, [r3, #8]
 8004314:	60da      	str	r2, [r3, #12]
 8004316:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004318:	2300      	movs	r3, #0
 800431a:	60bb      	str	r3, [r7, #8]
 800431c:	4b28      	ldr	r3, [pc, #160]	; (80043c0 <SystemClock_Config+0xcc>)
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	4a27      	ldr	r2, [pc, #156]	; (80043c0 <SystemClock_Config+0xcc>)
 8004322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004326:	6413      	str	r3, [r2, #64]	; 0x40
 8004328:	4b25      	ldr	r3, [pc, #148]	; (80043c0 <SystemClock_Config+0xcc>)
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004330:	60bb      	str	r3, [r7, #8]
 8004332:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004334:	2300      	movs	r3, #0
 8004336:	607b      	str	r3, [r7, #4]
 8004338:	4b22      	ldr	r3, [pc, #136]	; (80043c4 <SystemClock_Config+0xd0>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a21      	ldr	r2, [pc, #132]	; (80043c4 <SystemClock_Config+0xd0>)
 800433e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004342:	6013      	str	r3, [r2, #0]
 8004344:	4b1f      	ldr	r3, [pc, #124]	; (80043c4 <SystemClock_Config+0xd0>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800434c:	607b      	str	r3, [r7, #4]
 800434e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004350:	2301      	movs	r3, #1
 8004352:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004354:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004358:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800435a:	2302      	movs	r3, #2
 800435c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800435e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004362:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004364:	2304      	movs	r3, #4
 8004366:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8004368:	2332      	movs	r3, #50	; 0x32
 800436a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800436c:	2302      	movs	r3, #2
 800436e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004370:	2307      	movs	r3, #7
 8004372:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004374:	f107 0320 	add.w	r3, r7, #32
 8004378:	4618      	mov	r0, r3
 800437a:	f003 f853 	bl	8007424 <HAL_RCC_OscConfig>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004384:	f000 fe7e 	bl	8005084 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004388:	230f      	movs	r3, #15
 800438a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800438c:	2302      	movs	r3, #2
 800438e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004398:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800439a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800439e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80043a0:	f107 030c 	add.w	r3, r7, #12
 80043a4:	2101      	movs	r1, #1
 80043a6:	4618      	mov	r0, r3
 80043a8:	f003 fab4 	bl	8007914 <HAL_RCC_ClockConfig>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80043b2:	f000 fe67 	bl	8005084 <Error_Handler>
  }
}
 80043b6:	bf00      	nop
 80043b8:	3750      	adds	r7, #80	; 0x50
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40023800 	.word	0x40023800
 80043c4:	40007000 	.word	0x40007000

080043c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80043ce:	463b      	mov	r3, r7
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	605a      	str	r2, [r3, #4]
 80043d6:	609a      	str	r2, [r3, #8]
 80043d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80043da:	4b21      	ldr	r3, [pc, #132]	; (8004460 <MX_ADC1_Init+0x98>)
 80043dc:	4a21      	ldr	r2, [pc, #132]	; (8004464 <MX_ADC1_Init+0x9c>)
 80043de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80043e0:	4b1f      	ldr	r3, [pc, #124]	; (8004460 <MX_ADC1_Init+0x98>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80043e6:	4b1e      	ldr	r3, [pc, #120]	; (8004460 <MX_ADC1_Init+0x98>)
 80043e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80043ee:	4b1c      	ldr	r3, [pc, #112]	; (8004460 <MX_ADC1_Init+0x98>)
 80043f0:	2201      	movs	r2, #1
 80043f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80043f4:	4b1a      	ldr	r3, [pc, #104]	; (8004460 <MX_ADC1_Init+0x98>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80043fa:	4b19      	ldr	r3, [pc, #100]	; (8004460 <MX_ADC1_Init+0x98>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004402:	4b17      	ldr	r3, [pc, #92]	; (8004460 <MX_ADC1_Init+0x98>)
 8004404:	2200      	movs	r2, #0
 8004406:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004408:	4b15      	ldr	r3, [pc, #84]	; (8004460 <MX_ADC1_Init+0x98>)
 800440a:	4a17      	ldr	r2, [pc, #92]	; (8004468 <MX_ADC1_Init+0xa0>)
 800440c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800440e:	4b14      	ldr	r3, [pc, #80]	; (8004460 <MX_ADC1_Init+0x98>)
 8004410:	2200      	movs	r2, #0
 8004412:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004414:	4b12      	ldr	r3, [pc, #72]	; (8004460 <MX_ADC1_Init+0x98>)
 8004416:	2201      	movs	r2, #1
 8004418:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800441a:	4b11      	ldr	r3, [pc, #68]	; (8004460 <MX_ADC1_Init+0x98>)
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004422:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <MX_ADC1_Init+0x98>)
 8004424:	2200      	movs	r2, #0
 8004426:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004428:	480d      	ldr	r0, [pc, #52]	; (8004460 <MX_ADC1_Init+0x98>)
 800442a:	f001 fc59 	bl	8005ce0 <HAL_ADC_Init>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004434:	f000 fe26 	bl	8005084 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004438:	2304      	movs	r3, #4
 800443a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800443c:	2301      	movs	r3, #1
 800443e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004440:	2307      	movs	r3, #7
 8004442:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004444:	463b      	mov	r3, r7
 8004446:	4619      	mov	r1, r3
 8004448:	4805      	ldr	r0, [pc, #20]	; (8004460 <MX_ADC1_Init+0x98>)
 800444a:	f001 fdf7 	bl	800603c <HAL_ADC_ConfigChannel>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004454:	f000 fe16 	bl	8005084 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004458:	bf00      	nop
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20000e74 	.word	0x20000e74
 8004464:	40012000 	.word	0x40012000
 8004468:	0f000001 	.word	0x0f000001

0800446c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004472:	463b      	mov	r3, r7
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	605a      	str	r2, [r3, #4]
 800447a:	609a      	str	r2, [r3, #8]
 800447c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800447e:	4b21      	ldr	r3, [pc, #132]	; (8004504 <MX_ADC2_Init+0x98>)
 8004480:	4a21      	ldr	r2, [pc, #132]	; (8004508 <MX_ADC2_Init+0x9c>)
 8004482:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004484:	4b1f      	ldr	r3, [pc, #124]	; (8004504 <MX_ADC2_Init+0x98>)
 8004486:	2200      	movs	r2, #0
 8004488:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 800448a:	4b1e      	ldr	r3, [pc, #120]	; (8004504 <MX_ADC2_Init+0x98>)
 800448c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004490:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8004492:	4b1c      	ldr	r3, [pc, #112]	; (8004504 <MX_ADC2_Init+0x98>)
 8004494:	2200      	movs	r2, #0
 8004496:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004498:	4b1a      	ldr	r3, [pc, #104]	; (8004504 <MX_ADC2_Init+0x98>)
 800449a:	2201      	movs	r2, #1
 800449c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800449e:	4b19      	ldr	r3, [pc, #100]	; (8004504 <MX_ADC2_Init+0x98>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80044a6:	4b17      	ldr	r3, [pc, #92]	; (8004504 <MX_ADC2_Init+0x98>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80044ac:	4b15      	ldr	r3, [pc, #84]	; (8004504 <MX_ADC2_Init+0x98>)
 80044ae:	4a17      	ldr	r2, [pc, #92]	; (800450c <MX_ADC2_Init+0xa0>)
 80044b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80044b2:	4b14      	ldr	r3, [pc, #80]	; (8004504 <MX_ADC2_Init+0x98>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80044b8:	4b12      	ldr	r3, [pc, #72]	; (8004504 <MX_ADC2_Init+0x98>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80044be:	4b11      	ldr	r3, [pc, #68]	; (8004504 <MX_ADC2_Init+0x98>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80044c6:	4b0f      	ldr	r3, [pc, #60]	; (8004504 <MX_ADC2_Init+0x98>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80044cc:	480d      	ldr	r0, [pc, #52]	; (8004504 <MX_ADC2_Init+0x98>)
 80044ce:	f001 fc07 	bl	8005ce0 <HAL_ADC_Init>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80044d8:	f000 fdd4 	bl	8005084 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80044dc:	2308      	movs	r3, #8
 80044de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80044e0:	2301      	movs	r3, #1
 80044e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80044e4:	2307      	movs	r3, #7
 80044e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80044e8:	463b      	mov	r3, r7
 80044ea:	4619      	mov	r1, r3
 80044ec:	4805      	ldr	r0, [pc, #20]	; (8004504 <MX_ADC2_Init+0x98>)
 80044ee:	f001 fda5 	bl	800603c <HAL_ADC_ConfigChannel>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80044f8:	f000 fdc4 	bl	8005084 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80044fc:	bf00      	nop
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	20000d48 	.word	0x20000d48
 8004508:	40012100 	.word	0x40012100
 800450c:	0f000001 	.word	0x0f000001

08004510 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004516:	463b      	mov	r3, r7
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	605a      	str	r2, [r3, #4]
 800451e:	609a      	str	r2, [r3, #8]
 8004520:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8004522:	4b21      	ldr	r3, [pc, #132]	; (80045a8 <MX_ADC3_Init+0x98>)
 8004524:	4a21      	ldr	r2, [pc, #132]	; (80045ac <MX_ADC3_Init+0x9c>)
 8004526:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004528:	4b1f      	ldr	r3, [pc, #124]	; (80045a8 <MX_ADC3_Init+0x98>)
 800452a:	2200      	movs	r2, #0
 800452c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 800452e:	4b1e      	ldr	r3, [pc, #120]	; (80045a8 <MX_ADC3_Init+0x98>)
 8004530:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004534:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8004536:	4b1c      	ldr	r3, [pc, #112]	; (80045a8 <MX_ADC3_Init+0x98>)
 8004538:	2200      	movs	r2, #0
 800453a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800453c:	4b1a      	ldr	r3, [pc, #104]	; (80045a8 <MX_ADC3_Init+0x98>)
 800453e:	2201      	movs	r2, #1
 8004540:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004542:	4b19      	ldr	r3, [pc, #100]	; (80045a8 <MX_ADC3_Init+0x98>)
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800454a:	4b17      	ldr	r3, [pc, #92]	; (80045a8 <MX_ADC3_Init+0x98>)
 800454c:	2200      	movs	r2, #0
 800454e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004550:	4b15      	ldr	r3, [pc, #84]	; (80045a8 <MX_ADC3_Init+0x98>)
 8004552:	4a17      	ldr	r2, [pc, #92]	; (80045b0 <MX_ADC3_Init+0xa0>)
 8004554:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004556:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <MX_ADC3_Init+0x98>)
 8004558:	2200      	movs	r2, #0
 800455a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800455c:	4b12      	ldr	r3, [pc, #72]	; (80045a8 <MX_ADC3_Init+0x98>)
 800455e:	2201      	movs	r2, #1
 8004560:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8004562:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <MX_ADC3_Init+0x98>)
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800456a:	4b0f      	ldr	r3, [pc, #60]	; (80045a8 <MX_ADC3_Init+0x98>)
 800456c:	2200      	movs	r2, #0
 800456e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004570:	480d      	ldr	r0, [pc, #52]	; (80045a8 <MX_ADC3_Init+0x98>)
 8004572:	f001 fbb5 	bl	8005ce0 <HAL_ADC_Init>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800457c:	f000 fd82 	bl	8005084 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8004580:	230b      	movs	r3, #11
 8004582:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004584:	2301      	movs	r3, #1
 8004586:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004588:	2307      	movs	r3, #7
 800458a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800458c:	463b      	mov	r3, r7
 800458e:	4619      	mov	r1, r3
 8004590:	4805      	ldr	r0, [pc, #20]	; (80045a8 <MX_ADC3_Init+0x98>)
 8004592:	f001 fd53 	bl	800603c <HAL_ADC_ConfigChannel>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800459c:	f000 fd72 	bl	8005084 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80045a0:	bf00      	nop
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	20000ebc 	.word	0x20000ebc
 80045ac:	40012200 	.word	0x40012200
 80045b0:	0f000001 	.word	0x0f000001

080045b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80045b8:	4b12      	ldr	r3, [pc, #72]	; (8004604 <MX_I2C1_Init+0x50>)
 80045ba:	4a13      	ldr	r2, [pc, #76]	; (8004608 <MX_I2C1_Init+0x54>)
 80045bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80045be:	4b11      	ldr	r3, [pc, #68]	; (8004604 <MX_I2C1_Init+0x50>)
 80045c0:	4a12      	ldr	r2, [pc, #72]	; (800460c <MX_I2C1_Init+0x58>)
 80045c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80045c4:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <MX_I2C1_Init+0x50>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80045ca:	4b0e      	ldr	r3, [pc, #56]	; (8004604 <MX_I2C1_Init+0x50>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80045d0:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <MX_I2C1_Init+0x50>)
 80045d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80045d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80045d8:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <MX_I2C1_Init+0x50>)
 80045da:	2200      	movs	r2, #0
 80045dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80045de:	4b09      	ldr	r3, [pc, #36]	; (8004604 <MX_I2C1_Init+0x50>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80045e4:	4b07      	ldr	r3, [pc, #28]	; (8004604 <MX_I2C1_Init+0x50>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <MX_I2C1_Init+0x50>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80045f0:	4804      	ldr	r0, [pc, #16]	; (8004604 <MX_I2C1_Init+0x50>)
 80045f2:	f002 facb 	bl	8006b8c <HAL_I2C_Init>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80045fc:	f000 fd42 	bl	8005084 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004600:	bf00      	nop
 8004602:	bd80      	pop	{r7, pc}
 8004604:	20000d90 	.word	0x20000d90
 8004608:	40005400 	.word	0x40005400
 800460c:	00061a80 	.word	0x00061a80

08004610 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b096      	sub	sp, #88	; 0x58
 8004614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004616:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	605a      	str	r2, [r3, #4]
 8004620:	609a      	str	r2, [r3, #8]
 8004622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004624:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800462e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	605a      	str	r2, [r3, #4]
 8004638:	609a      	str	r2, [r3, #8]
 800463a:	60da      	str	r2, [r3, #12]
 800463c:	611a      	str	r2, [r3, #16]
 800463e:	615a      	str	r2, [r3, #20]
 8004640:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004642:	1d3b      	adds	r3, r7, #4
 8004644:	2220      	movs	r2, #32
 8004646:	2100      	movs	r1, #0
 8004648:	4618      	mov	r0, r3
 800464a:	f005 faef 	bl	8009c2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800464e:	4b4a      	ldr	r3, [pc, #296]	; (8004778 <MX_TIM1_Init+0x168>)
 8004650:	4a4a      	ldr	r2, [pc, #296]	; (800477c <MX_TIM1_Init+0x16c>)
 8004652:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8004654:	4b48      	ldr	r3, [pc, #288]	; (8004778 <MX_TIM1_Init+0x168>)
 8004656:	225f      	movs	r2, #95	; 0x5f
 8004658:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800465a:	4b47      	ldr	r3, [pc, #284]	; (8004778 <MX_TIM1_Init+0x168>)
 800465c:	2200      	movs	r2, #0
 800465e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 8004660:	4b45      	ldr	r3, [pc, #276]	; (8004778 <MX_TIM1_Init+0x168>)
 8004662:	22fe      	movs	r2, #254	; 0xfe
 8004664:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004666:	4b44      	ldr	r3, [pc, #272]	; (8004778 <MX_TIM1_Init+0x168>)
 8004668:	2200      	movs	r2, #0
 800466a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800466c:	4b42      	ldr	r3, [pc, #264]	; (8004778 <MX_TIM1_Init+0x168>)
 800466e:	2200      	movs	r2, #0
 8004670:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004672:	4b41      	ldr	r3, [pc, #260]	; (8004778 <MX_TIM1_Init+0x168>)
 8004674:	2200      	movs	r2, #0
 8004676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004678:	483f      	ldr	r0, [pc, #252]	; (8004778 <MX_TIM1_Init+0x168>)
 800467a:	f003 fb47 	bl	8007d0c <HAL_TIM_Base_Init>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8004684:	f000 fcfe 	bl	8005084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800468c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800468e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004692:	4619      	mov	r1, r3
 8004694:	4838      	ldr	r0, [pc, #224]	; (8004778 <MX_TIM1_Init+0x168>)
 8004696:	f003 fdd5 	bl	8008244 <HAL_TIM_ConfigClockSource>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80046a0:	f000 fcf0 	bl	8005084 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80046a4:	4834      	ldr	r0, [pc, #208]	; (8004778 <MX_TIM1_Init+0x168>)
 80046a6:	f003 fbe9 	bl	8007e7c <HAL_TIM_PWM_Init>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80046b0:	f000 fce8 	bl	8005084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046b4:	2300      	movs	r3, #0
 80046b6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046b8:	2300      	movs	r3, #0
 80046ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80046bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80046c0:	4619      	mov	r1, r3
 80046c2:	482d      	ldr	r0, [pc, #180]	; (8004778 <MX_TIM1_Init+0x168>)
 80046c4:	f004 f996 	bl	80089f4 <HAL_TIMEx_MasterConfigSynchronization>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80046ce:	f000 fcd9 	bl	8005084 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046d2:	2360      	movs	r3, #96	; 0x60
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80046d6:	2300      	movs	r3, #0
 80046d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046da:	2300      	movs	r3, #0
 80046dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80046de:	2300      	movs	r3, #0
 80046e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046e2:	2300      	movs	r3, #0
 80046e4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80046e6:	2300      	movs	r3, #0
 80046e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80046ea:	2300      	movs	r3, #0
 80046ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80046ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046f2:	2200      	movs	r2, #0
 80046f4:	4619      	mov	r1, r3
 80046f6:	4820      	ldr	r0, [pc, #128]	; (8004778 <MX_TIM1_Init+0x168>)
 80046f8:	f003 fce2 	bl	80080c0 <HAL_TIM_PWM_ConfigChannel>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8004702:	f000 fcbf 	bl	8005084 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800470a:	2204      	movs	r2, #4
 800470c:	4619      	mov	r1, r3
 800470e:	481a      	ldr	r0, [pc, #104]	; (8004778 <MX_TIM1_Init+0x168>)
 8004710:	f003 fcd6 	bl	80080c0 <HAL_TIM_PWM_ConfigChannel>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800471a:	f000 fcb3 	bl	8005084 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800471e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004722:	2208      	movs	r2, #8
 8004724:	4619      	mov	r1, r3
 8004726:	4814      	ldr	r0, [pc, #80]	; (8004778 <MX_TIM1_Init+0x168>)
 8004728:	f003 fcca 	bl	80080c0 <HAL_TIM_PWM_ConfigChannel>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8004732:	f000 fca7 	bl	8005084 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004736:	2300      	movs	r3, #0
 8004738:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800473a:	2300      	movs	r3, #0
 800473c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004742:	2300      	movs	r3, #0
 8004744:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004746:	2300      	movs	r3, #0
 8004748:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800474a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800474e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004750:	2300      	movs	r3, #0
 8004752:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004754:	1d3b      	adds	r3, r7, #4
 8004756:	4619      	mov	r1, r3
 8004758:	4807      	ldr	r0, [pc, #28]	; (8004778 <MX_TIM1_Init+0x168>)
 800475a:	f004 f9c7 	bl	8008aec <HAL_TIMEx_ConfigBreakDeadTime>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8004764:	f000 fc8e 	bl	8005084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004768:	4803      	ldr	r0, [pc, #12]	; (8004778 <MX_TIM1_Init+0x168>)
 800476a:	f000 ff41 	bl	80055f0 <HAL_TIM_MspPostInit>

}
 800476e:	bf00      	nop
 8004770:	3758      	adds	r7, #88	; 0x58
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20000f4c 	.word	0x20000f4c
 800477c:	40010000 	.word	0x40010000

08004780 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08e      	sub	sp, #56	; 0x38
 8004784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	605a      	str	r2, [r3, #4]
 8004790:	609a      	str	r2, [r3, #8]
 8004792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004794:	f107 0320 	add.w	r3, r7, #32
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800479e:	1d3b      	adds	r3, r7, #4
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	605a      	str	r2, [r3, #4]
 80047a6:	609a      	str	r2, [r3, #8]
 80047a8:	60da      	str	r2, [r3, #12]
 80047aa:	611a      	str	r2, [r3, #16]
 80047ac:	615a      	str	r2, [r3, #20]
 80047ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80047b0:	4b38      	ldr	r3, [pc, #224]	; (8004894 <MX_TIM2_Init+0x114>)
 80047b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80047b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 500-1;
 80047b8:	4b36      	ldr	r3, [pc, #216]	; (8004894 <MX_TIM2_Init+0x114>)
 80047ba:	f240 12f3 	movw	r2, #499	; 0x1f3
 80047be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047c0:	4b34      	ldr	r3, [pc, #208]	; (8004894 <MX_TIM2_Init+0x114>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 80047c6:	4b33      	ldr	r3, [pc, #204]	; (8004894 <MX_TIM2_Init+0x114>)
 80047c8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80047cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047ce:	4b31      	ldr	r3, [pc, #196]	; (8004894 <MX_TIM2_Init+0x114>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047d4:	4b2f      	ldr	r3, [pc, #188]	; (8004894 <MX_TIM2_Init+0x114>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80047da:	482e      	ldr	r0, [pc, #184]	; (8004894 <MX_TIM2_Init+0x114>)
 80047dc:	f003 fa96 	bl	8007d0c <HAL_TIM_Base_Init>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80047e6:	f000 fc4d 	bl	8005084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80047f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047f4:	4619      	mov	r1, r3
 80047f6:	4827      	ldr	r0, [pc, #156]	; (8004894 <MX_TIM2_Init+0x114>)
 80047f8:	f003 fd24 	bl	8008244 <HAL_TIM_ConfigClockSource>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004802:	f000 fc3f 	bl	8005084 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004806:	4823      	ldr	r0, [pc, #140]	; (8004894 <MX_TIM2_Init+0x114>)
 8004808:	f003 fb38 	bl	8007e7c <HAL_TIM_PWM_Init>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004812:	f000 fc37 	bl	8005084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004816:	2300      	movs	r3, #0
 8004818:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800481a:	2300      	movs	r3, #0
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800481e:	f107 0320 	add.w	r3, r7, #32
 8004822:	4619      	mov	r1, r3
 8004824:	481b      	ldr	r0, [pc, #108]	; (8004894 <MX_TIM2_Init+0x114>)
 8004826:	f004 f8e5 	bl	80089f4 <HAL_TIMEx_MasterConfigSynchronization>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004830:	f000 fc28 	bl	8005084 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004834:	2360      	movs	r3, #96	; 0x60
 8004836:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004838:	2300      	movs	r3, #0
 800483a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004844:	1d3b      	adds	r3, r7, #4
 8004846:	2200      	movs	r2, #0
 8004848:	4619      	mov	r1, r3
 800484a:	4812      	ldr	r0, [pc, #72]	; (8004894 <MX_TIM2_Init+0x114>)
 800484c:	f003 fc38 	bl	80080c0 <HAL_TIM_PWM_ConfigChannel>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004856:	f000 fc15 	bl	8005084 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800485a:	1d3b      	adds	r3, r7, #4
 800485c:	2204      	movs	r2, #4
 800485e:	4619      	mov	r1, r3
 8004860:	480c      	ldr	r0, [pc, #48]	; (8004894 <MX_TIM2_Init+0x114>)
 8004862:	f003 fc2d 	bl	80080c0 <HAL_TIM_PWM_ConfigChannel>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800486c:	f000 fc0a 	bl	8005084 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004870:	1d3b      	adds	r3, r7, #4
 8004872:	2208      	movs	r2, #8
 8004874:	4619      	mov	r1, r3
 8004876:	4807      	ldr	r0, [pc, #28]	; (8004894 <MX_TIM2_Init+0x114>)
 8004878:	f003 fc22 	bl	80080c0 <HAL_TIM_PWM_ConfigChannel>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8004882:	f000 fbff 	bl	8005084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004886:	4803      	ldr	r0, [pc, #12]	; (8004894 <MX_TIM2_Init+0x114>)
 8004888:	f000 feb2 	bl	80055f0 <HAL_TIM_MspPostInit>

}
 800488c:	bf00      	nop
 800488e:	3738      	adds	r7, #56	; 0x38
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	20001020 	.word	0x20001020

08004898 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08e      	sub	sp, #56	; 0x38
 800489c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800489e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	605a      	str	r2, [r3, #4]
 80048a8:	609a      	str	r2, [r3, #8]
 80048aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048ac:	f107 0320 	add.w	r3, r7, #32
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048b6:	1d3b      	adds	r3, r7, #4
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	605a      	str	r2, [r3, #4]
 80048be:	609a      	str	r2, [r3, #8]
 80048c0:	60da      	str	r2, [r3, #12]
 80048c2:	611a      	str	r2, [r3, #16]
 80048c4:	615a      	str	r2, [r3, #20]
 80048c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80048c8:	4b38      	ldr	r3, [pc, #224]	; (80049ac <MX_TIM3_Init+0x114>)
 80048ca:	4a39      	ldr	r2, [pc, #228]	; (80049b0 <MX_TIM3_Init+0x118>)
 80048cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 80048ce:	4b37      	ldr	r3, [pc, #220]	; (80049ac <MX_TIM3_Init+0x114>)
 80048d0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80048d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048d6:	4b35      	ldr	r3, [pc, #212]	; (80049ac <MX_TIM3_Init+0x114>)
 80048d8:	2200      	movs	r2, #0
 80048da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80048dc:	4b33      	ldr	r3, [pc, #204]	; (80049ac <MX_TIM3_Init+0x114>)
 80048de:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80048e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048e4:	4b31      	ldr	r3, [pc, #196]	; (80049ac <MX_TIM3_Init+0x114>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048ea:	4b30      	ldr	r3, [pc, #192]	; (80049ac <MX_TIM3_Init+0x114>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80048f0:	482e      	ldr	r0, [pc, #184]	; (80049ac <MX_TIM3_Init+0x114>)
 80048f2:	f003 fa0b 	bl	8007d0c <HAL_TIM_Base_Init>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80048fc:	f000 fbc2 	bl	8005084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004904:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004906:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800490a:	4619      	mov	r1, r3
 800490c:	4827      	ldr	r0, [pc, #156]	; (80049ac <MX_TIM3_Init+0x114>)
 800490e:	f003 fc99 	bl	8008244 <HAL_TIM_ConfigClockSource>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004918:	f000 fbb4 	bl	8005084 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800491c:	4823      	ldr	r0, [pc, #140]	; (80049ac <MX_TIM3_Init+0x114>)
 800491e:	f003 faad 	bl	8007e7c <HAL_TIM_PWM_Init>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004928:	f000 fbac 	bl	8005084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800492c:	2300      	movs	r3, #0
 800492e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004930:	2300      	movs	r3, #0
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004934:	f107 0320 	add.w	r3, r7, #32
 8004938:	4619      	mov	r1, r3
 800493a:	481c      	ldr	r0, [pc, #112]	; (80049ac <MX_TIM3_Init+0x114>)
 800493c:	f004 f85a 	bl	80089f4 <HAL_TIMEx_MasterConfigSynchronization>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004946:	f000 fb9d 	bl	8005084 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800494a:	2360      	movs	r3, #96	; 0x60
 800494c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800494e:	2300      	movs	r3, #0
 8004950:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004952:	2300      	movs	r3, #0
 8004954:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800495a:	1d3b      	adds	r3, r7, #4
 800495c:	2204      	movs	r2, #4
 800495e:	4619      	mov	r1, r3
 8004960:	4812      	ldr	r0, [pc, #72]	; (80049ac <MX_TIM3_Init+0x114>)
 8004962:	f003 fbad 	bl	80080c0 <HAL_TIM_PWM_ConfigChannel>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800496c:	f000 fb8a 	bl	8005084 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004970:	1d3b      	adds	r3, r7, #4
 8004972:	2208      	movs	r2, #8
 8004974:	4619      	mov	r1, r3
 8004976:	480d      	ldr	r0, [pc, #52]	; (80049ac <MX_TIM3_Init+0x114>)
 8004978:	f003 fba2 	bl	80080c0 <HAL_TIM_PWM_ConfigChannel>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8004982:	f000 fb7f 	bl	8005084 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004986:	1d3b      	adds	r3, r7, #4
 8004988:	220c      	movs	r2, #12
 800498a:	4619      	mov	r1, r3
 800498c:	4807      	ldr	r0, [pc, #28]	; (80049ac <MX_TIM3_Init+0x114>)
 800498e:	f003 fb97 	bl	80080c0 <HAL_TIM_PWM_ConfigChannel>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8004998:	f000 fb74 	bl	8005084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800499c:	4803      	ldr	r0, [pc, #12]	; (80049ac <MX_TIM3_Init+0x114>)
 800499e:	f000 fe27 	bl	80055f0 <HAL_TIM_MspPostInit>

}
 80049a2:	bf00      	nop
 80049a4:	3738      	adds	r7, #56	; 0x38
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20000e2c 	.word	0x20000e2c
 80049b0:	40000400 	.word	0x40000400

080049b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08e      	sub	sp, #56	; 0x38
 80049b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	605a      	str	r2, [r3, #4]
 80049c4:	609a      	str	r2, [r3, #8]
 80049c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049c8:	f107 0320 	add.w	r3, r7, #32
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049d2:	1d3b      	adds	r3, r7, #4
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	605a      	str	r2, [r3, #4]
 80049da:	609a      	str	r2, [r3, #8]
 80049dc:	60da      	str	r2, [r3, #12]
 80049de:	611a      	str	r2, [r3, #16]
 80049e0:	615a      	str	r2, [r3, #20]
 80049e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80049e4:	4b2c      	ldr	r3, [pc, #176]	; (8004a98 <MX_TIM4_Init+0xe4>)
 80049e6:	4a2d      	ldr	r2, [pc, #180]	; (8004a9c <MX_TIM4_Init+0xe8>)
 80049e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 80049ea:	4b2b      	ldr	r3, [pc, #172]	; (8004a98 <MX_TIM4_Init+0xe4>)
 80049ec:	225f      	movs	r2, #95	; 0x5f
 80049ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049f0:	4b29      	ldr	r3, [pc, #164]	; (8004a98 <MX_TIM4_Init+0xe4>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20;
 80049f6:	4b28      	ldr	r3, [pc, #160]	; (8004a98 <MX_TIM4_Init+0xe4>)
 80049f8:	2214      	movs	r2, #20
 80049fa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049fc:	4b26      	ldr	r3, [pc, #152]	; (8004a98 <MX_TIM4_Init+0xe4>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a02:	4b25      	ldr	r3, [pc, #148]	; (8004a98 <MX_TIM4_Init+0xe4>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004a08:	4823      	ldr	r0, [pc, #140]	; (8004a98 <MX_TIM4_Init+0xe4>)
 8004a0a:	f003 f97f 	bl	8007d0c <HAL_TIM_Base_Init>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8004a14:	f000 fb36 	bl	8005084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004a1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a22:	4619      	mov	r1, r3
 8004a24:	481c      	ldr	r0, [pc, #112]	; (8004a98 <MX_TIM4_Init+0xe4>)
 8004a26:	f003 fc0d 	bl	8008244 <HAL_TIM_ConfigClockSource>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8004a30:	f000 fb28 	bl	8005084 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004a34:	4818      	ldr	r0, [pc, #96]	; (8004a98 <MX_TIM4_Init+0xe4>)
 8004a36:	f003 fa21 	bl	8007e7c <HAL_TIM_PWM_Init>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8004a40:	f000 fb20 	bl	8005084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a44:	2300      	movs	r3, #0
 8004a46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004a4c:	f107 0320 	add.w	r3, r7, #32
 8004a50:	4619      	mov	r1, r3
 8004a52:	4811      	ldr	r0, [pc, #68]	; (8004a98 <MX_TIM4_Init+0xe4>)
 8004a54:	f003 ffce 	bl	80089f4 <HAL_TIMEx_MasterConfigSynchronization>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8004a5e:	f000 fb11 	bl	8005084 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a62:	2360      	movs	r3, #96	; 0x60
 8004a64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a72:	1d3b      	adds	r3, r7, #4
 8004a74:	2200      	movs	r2, #0
 8004a76:	4619      	mov	r1, r3
 8004a78:	4807      	ldr	r0, [pc, #28]	; (8004a98 <MX_TIM4_Init+0xe4>)
 8004a7a:	f003 fb21 	bl	80080c0 <HAL_TIM_PWM_ConfigChannel>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8004a84:	f000 fafe 	bl	8005084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004a88:	4803      	ldr	r0, [pc, #12]	; (8004a98 <MX_TIM4_Init+0xe4>)
 8004a8a:	f000 fdb1 	bl	80055f0 <HAL_TIM_MspPostInit>

}
 8004a8e:	bf00      	nop
 8004a90:	3738      	adds	r7, #56	; 0x38
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	20000cb4 	.word	0x20000cb4
 8004a9c:	40000800 	.word	0x40000800

08004aa0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004aa6:	f107 0308 	add.w	r3, r7, #8
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	605a      	str	r2, [r3, #4]
 8004ab0:	609a      	str	r2, [r3, #8]
 8004ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ab4:	463b      	mov	r3, r7
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004abc:	4b1d      	ldr	r3, [pc, #116]	; (8004b34 <MX_TIM5_Init+0x94>)
 8004abe:	4a1e      	ldr	r2, [pc, #120]	; (8004b38 <MX_TIM5_Init+0x98>)
 8004ac0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 96-1;
 8004ac2:	4b1c      	ldr	r3, [pc, #112]	; (8004b34 <MX_TIM5_Init+0x94>)
 8004ac4:	225f      	movs	r2, #95	; 0x5f
 8004ac6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ac8:	4b1a      	ldr	r3, [pc, #104]	; (8004b34 <MX_TIM5_Init+0x94>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 8004ace:	4b19      	ldr	r3, [pc, #100]	; (8004b34 <MX_TIM5_Init+0x94>)
 8004ad0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8004ad4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ad6:	4b17      	ldr	r3, [pc, #92]	; (8004b34 <MX_TIM5_Init+0x94>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004adc:	4b15      	ldr	r3, [pc, #84]	; (8004b34 <MX_TIM5_Init+0x94>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004ae2:	4814      	ldr	r0, [pc, #80]	; (8004b34 <MX_TIM5_Init+0x94>)
 8004ae4:	f003 f912 	bl	8007d0c <HAL_TIM_Base_Init>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8004aee:	f000 fac9 	bl	8005084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004af6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004af8:	f107 0308 	add.w	r3, r7, #8
 8004afc:	4619      	mov	r1, r3
 8004afe:	480d      	ldr	r0, [pc, #52]	; (8004b34 <MX_TIM5_Init+0x94>)
 8004b00:	f003 fba0 	bl	8008244 <HAL_TIM_ConfigClockSource>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8004b0a:	f000 fabb 	bl	8005084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b12:	2300      	movs	r3, #0
 8004b14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004b16:	463b      	mov	r3, r7
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4806      	ldr	r0, [pc, #24]	; (8004b34 <MX_TIM5_Init+0x94>)
 8004b1c:	f003 ff6a 	bl	80089f4 <HAL_TIMEx_MasterConfigSynchronization>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8004b26:	f000 faad 	bl	8005084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004b2a:	bf00      	nop
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20000de4 	.word	0x20000de4
 8004b38:	40000c00 	.word	0x40000c00

08004b3c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b42:	463b      	mov	r3, r7
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004b4a:	4b15      	ldr	r3, [pc, #84]	; (8004ba0 <MX_TIM6_Init+0x64>)
 8004b4c:	4a15      	ldr	r2, [pc, #84]	; (8004ba4 <MX_TIM6_Init+0x68>)
 8004b4e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8004b50:	4b13      	ldr	r3, [pc, #76]	; (8004ba0 <MX_TIM6_Init+0x64>)
 8004b52:	2231      	movs	r2, #49	; 0x31
 8004b54:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b56:	4b12      	ldr	r3, [pc, #72]	; (8004ba0 <MX_TIM6_Init+0x64>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8004b5c:	4b10      	ldr	r3, [pc, #64]	; (8004ba0 <MX_TIM6_Init+0x64>)
 8004b5e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b62:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b64:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <MX_TIM6_Init+0x64>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004b6a:	480d      	ldr	r0, [pc, #52]	; (8004ba0 <MX_TIM6_Init+0x64>)
 8004b6c:	f003 f8ce 	bl	8007d0c <HAL_TIM_Base_Init>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004b76:	f000 fa85 	bl	8005084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004b82:	463b      	mov	r3, r7
 8004b84:	4619      	mov	r1, r3
 8004b86:	4806      	ldr	r0, [pc, #24]	; (8004ba0 <MX_TIM6_Init+0x64>)
 8004b88:	f003 ff34 	bl	80089f4 <HAL_TIMEx_MasterConfigSynchronization>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004b92:	f000 fa77 	bl	8005084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004b96:	bf00      	nop
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000f04 	.word	0x20000f04
 8004ba4:	40001000 	.word	0x40001000

08004ba8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004bae:	f107 0308 	add.w	r3, r7, #8
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	605a      	str	r2, [r3, #4]
 8004bb8:	609a      	str	r2, [r3, #8]
 8004bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bbc:	463b      	mov	r3, r7
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004bc4:	4b1e      	ldr	r3, [pc, #120]	; (8004c40 <MX_TIM8_Init+0x98>)
 8004bc6:	4a1f      	ldr	r2, [pc, #124]	; (8004c44 <MX_TIM8_Init+0x9c>)
 8004bc8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004bca:	4b1d      	ldr	r3, [pc, #116]	; (8004c40 <MX_TIM8_Init+0x98>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bd0:	4b1b      	ldr	r3, [pc, #108]	; (8004c40 <MX_TIM8_Init+0x98>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004bd6:	4b1a      	ldr	r3, [pc, #104]	; (8004c40 <MX_TIM8_Init+0x98>)
 8004bd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bdc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bde:	4b18      	ldr	r3, [pc, #96]	; (8004c40 <MX_TIM8_Init+0x98>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004be4:	4b16      	ldr	r3, [pc, #88]	; (8004c40 <MX_TIM8_Init+0x98>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bea:	4b15      	ldr	r3, [pc, #84]	; (8004c40 <MX_TIM8_Init+0x98>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004bf0:	4813      	ldr	r0, [pc, #76]	; (8004c40 <MX_TIM8_Init+0x98>)
 8004bf2:	f003 f88b 	bl	8007d0c <HAL_TIM_Base_Init>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8004bfc:	f000 fa42 	bl	8005084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004c06:	f107 0308 	add.w	r3, r7, #8
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	480c      	ldr	r0, [pc, #48]	; (8004c40 <MX_TIM8_Init+0x98>)
 8004c0e:	f003 fb19 	bl	8008244 <HAL_TIM_ConfigClockSource>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8004c18:	f000 fa34 	bl	8005084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c20:	2300      	movs	r3, #0
 8004c22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004c24:	463b      	mov	r3, r7
 8004c26:	4619      	mov	r1, r3
 8004c28:	4805      	ldr	r0, [pc, #20]	; (8004c40 <MX_TIM8_Init+0x98>)
 8004c2a:	f003 fee3 	bl	80089f4 <HAL_TIMEx_MasterConfigSynchronization>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8004c34:	f000 fa26 	bl	8005084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004c38:	bf00      	nop
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20000c6c 	.word	0x20000c6c
 8004c44:	40010400 	.word	0x40010400

08004c48 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08c      	sub	sp, #48	; 0x30
 8004c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c4e:	f107 0320 	add.w	r3, r7, #32
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	605a      	str	r2, [r3, #4]
 8004c58:	609a      	str	r2, [r3, #8]
 8004c5a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c5c:	1d3b      	adds	r3, r7, #4
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	605a      	str	r2, [r3, #4]
 8004c64:	609a      	str	r2, [r3, #8]
 8004c66:	60da      	str	r2, [r3, #12]
 8004c68:	611a      	str	r2, [r3, #16]
 8004c6a:	615a      	str	r2, [r3, #20]
 8004c6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8004c6e:	4b26      	ldr	r3, [pc, #152]	; (8004d08 <MX_TIM9_Init+0xc0>)
 8004c70:	4a26      	ldr	r2, [pc, #152]	; (8004d0c <MX_TIM9_Init+0xc4>)
 8004c72:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 500-1;
 8004c74:	4b24      	ldr	r3, [pc, #144]	; (8004d08 <MX_TIM9_Init+0xc0>)
 8004c76:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004c7a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c7c:	4b22      	ldr	r3, [pc, #136]	; (8004d08 <MX_TIM9_Init+0xc0>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2000-1;
 8004c82:	4b21      	ldr	r3, [pc, #132]	; (8004d08 <MX_TIM9_Init+0xc0>)
 8004c84:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8004c88:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c8a:	4b1f      	ldr	r3, [pc, #124]	; (8004d08 <MX_TIM9_Init+0xc0>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c90:	4b1d      	ldr	r3, [pc, #116]	; (8004d08 <MX_TIM9_Init+0xc0>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8004c96:	481c      	ldr	r0, [pc, #112]	; (8004d08 <MX_TIM9_Init+0xc0>)
 8004c98:	f003 f838 	bl	8007d0c <HAL_TIM_Base_Init>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 8004ca2:	f000 f9ef 	bl	8005084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004caa:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8004cac:	f107 0320 	add.w	r3, r7, #32
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4815      	ldr	r0, [pc, #84]	; (8004d08 <MX_TIM9_Init+0xc0>)
 8004cb4:	f003 fac6 	bl	8008244 <HAL_TIM_ConfigClockSource>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 8004cbe:	f000 f9e1 	bl	8005084 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8004cc2:	4811      	ldr	r0, [pc, #68]	; (8004d08 <MX_TIM9_Init+0xc0>)
 8004cc4:	f003 f8da 	bl	8007e7c <HAL_TIM_PWM_Init>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8004cce:	f000 f9d9 	bl	8005084 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004cd2:	2360      	movs	r3, #96	; 0x60
 8004cd4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ce2:	1d3b      	adds	r3, r7, #4
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4807      	ldr	r0, [pc, #28]	; (8004d08 <MX_TIM9_Init+0xc0>)
 8004cea:	f003 f9e9 	bl	80080c0 <HAL_TIM_PWM_ConfigChannel>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8004cf4:	f000 f9c6 	bl	8005084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8004cf8:	4803      	ldr	r0, [pc, #12]	; (8004d08 <MX_TIM9_Init+0xc0>)
 8004cfa:	f000 fc79 	bl	80055f0 <HAL_TIM_MspPostInit>

}
 8004cfe:	bf00      	nop
 8004d00:	3730      	adds	r7, #48	; 0x30
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20000f94 	.word	0x20000f94
 8004d0c:	40014000 	.word	0x40014000

08004d10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004d14:	4b11      	ldr	r3, [pc, #68]	; (8004d5c <MX_USART2_UART_Init+0x4c>)
 8004d16:	4a12      	ldr	r2, [pc, #72]	; (8004d60 <MX_USART2_UART_Init+0x50>)
 8004d18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004d1a:	4b10      	ldr	r3, [pc, #64]	; (8004d5c <MX_USART2_UART_Init+0x4c>)
 8004d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004d22:	4b0e      	ldr	r3, [pc, #56]	; (8004d5c <MX_USART2_UART_Init+0x4c>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004d28:	4b0c      	ldr	r3, [pc, #48]	; (8004d5c <MX_USART2_UART_Init+0x4c>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d2e:	4b0b      	ldr	r3, [pc, #44]	; (8004d5c <MX_USART2_UART_Init+0x4c>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d34:	4b09      	ldr	r3, [pc, #36]	; (8004d5c <MX_USART2_UART_Init+0x4c>)
 8004d36:	220c      	movs	r2, #12
 8004d38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d3a:	4b08      	ldr	r3, [pc, #32]	; (8004d5c <MX_USART2_UART_Init+0x4c>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d40:	4b06      	ldr	r3, [pc, #24]	; (8004d5c <MX_USART2_UART_Init+0x4c>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004d46:	4805      	ldr	r0, [pc, #20]	; (8004d5c <MX_USART2_UART_Init+0x4c>)
 8004d48:	f003 ff22 	bl	8008b90 <HAL_UART_Init>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004d52:	f000 f997 	bl	8005084 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004d56:	bf00      	nop
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20001068 	.word	0x20001068
 8004d60:	40004400 	.word	0x40004400

08004d64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004d68:	4b11      	ldr	r3, [pc, #68]	; (8004db0 <MX_USART3_UART_Init+0x4c>)
 8004d6a:	4a12      	ldr	r2, [pc, #72]	; (8004db4 <MX_USART3_UART_Init+0x50>)
 8004d6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004d6e:	4b10      	ldr	r3, [pc, #64]	; (8004db0 <MX_USART3_UART_Init+0x4c>)
 8004d70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004d74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004d76:	4b0e      	ldr	r3, [pc, #56]	; (8004db0 <MX_USART3_UART_Init+0x4c>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004d7c:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <MX_USART3_UART_Init+0x4c>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004d82:	4b0b      	ldr	r3, [pc, #44]	; (8004db0 <MX_USART3_UART_Init+0x4c>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004d88:	4b09      	ldr	r3, [pc, #36]	; (8004db0 <MX_USART3_UART_Init+0x4c>)
 8004d8a:	220c      	movs	r2, #12
 8004d8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d8e:	4b08      	ldr	r3, [pc, #32]	; (8004db0 <MX_USART3_UART_Init+0x4c>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d94:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <MX_USART3_UART_Init+0x4c>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004d9a:	4805      	ldr	r0, [pc, #20]	; (8004db0 <MX_USART3_UART_Init+0x4c>)
 8004d9c:	f003 fef8 	bl	8008b90 <HAL_UART_Init>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004da6:	f000 f96d 	bl	8005084 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004daa:	bf00      	nop
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	20000d04 	.word	0x20000d04
 8004db4:	40004800 	.word	0x40004800

08004db8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004dbc:	4b11      	ldr	r3, [pc, #68]	; (8004e04 <MX_USART6_UART_Init+0x4c>)
 8004dbe:	4a12      	ldr	r2, [pc, #72]	; (8004e08 <MX_USART6_UART_Init+0x50>)
 8004dc0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004dc2:	4b10      	ldr	r3, [pc, #64]	; (8004e04 <MX_USART6_UART_Init+0x4c>)
 8004dc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004dc8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004dca:	4b0e      	ldr	r3, [pc, #56]	; (8004e04 <MX_USART6_UART_Init+0x4c>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004dd0:	4b0c      	ldr	r3, [pc, #48]	; (8004e04 <MX_USART6_UART_Init+0x4c>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004dd6:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <MX_USART6_UART_Init+0x4c>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004ddc:	4b09      	ldr	r3, [pc, #36]	; (8004e04 <MX_USART6_UART_Init+0x4c>)
 8004dde:	220c      	movs	r2, #12
 8004de0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004de2:	4b08      	ldr	r3, [pc, #32]	; (8004e04 <MX_USART6_UART_Init+0x4c>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004de8:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <MX_USART6_UART_Init+0x4c>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004dee:	4805      	ldr	r0, [pc, #20]	; (8004e04 <MX_USART6_UART_Init+0x4c>)
 8004df0:	f003 fece 	bl	8008b90 <HAL_UART_Init>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004dfa:	f000 f943 	bl	8005084 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004dfe:	bf00      	nop
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20000fdc 	.word	0x20000fdc
 8004e08:	40011400 	.word	0x40011400

08004e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08c      	sub	sp, #48	; 0x30
 8004e10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e12:	f107 031c 	add.w	r3, r7, #28
 8004e16:	2200      	movs	r2, #0
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	605a      	str	r2, [r3, #4]
 8004e1c:	609a      	str	r2, [r3, #8]
 8004e1e:	60da      	str	r2, [r3, #12]
 8004e20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e22:	2300      	movs	r3, #0
 8004e24:	61bb      	str	r3, [r7, #24]
 8004e26:	4b91      	ldr	r3, [pc, #580]	; (800506c <MX_GPIO_Init+0x260>)
 8004e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2a:	4a90      	ldr	r2, [pc, #576]	; (800506c <MX_GPIO_Init+0x260>)
 8004e2c:	f043 0310 	orr.w	r3, r3, #16
 8004e30:	6313      	str	r3, [r2, #48]	; 0x30
 8004e32:	4b8e      	ldr	r3, [pc, #568]	; (800506c <MX_GPIO_Init+0x260>)
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	f003 0310 	and.w	r3, r3, #16
 8004e3a:	61bb      	str	r3, [r7, #24]
 8004e3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e3e:	2300      	movs	r3, #0
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	4b8a      	ldr	r3, [pc, #552]	; (800506c <MX_GPIO_Init+0x260>)
 8004e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e46:	4a89      	ldr	r2, [pc, #548]	; (800506c <MX_GPIO_Init+0x260>)
 8004e48:	f043 0304 	orr.w	r3, r3, #4
 8004e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e4e:	4b87      	ldr	r3, [pc, #540]	; (800506c <MX_GPIO_Init+0x260>)
 8004e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e52:	f003 0304 	and.w	r3, r3, #4
 8004e56:	617b      	str	r3, [r7, #20]
 8004e58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	4b83      	ldr	r3, [pc, #524]	; (800506c <MX_GPIO_Init+0x260>)
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	4a82      	ldr	r2, [pc, #520]	; (800506c <MX_GPIO_Init+0x260>)
 8004e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e68:	6313      	str	r3, [r2, #48]	; 0x30
 8004e6a:	4b80      	ldr	r3, [pc, #512]	; (800506c <MX_GPIO_Init+0x260>)
 8004e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e72:	613b      	str	r3, [r7, #16]
 8004e74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e76:	2300      	movs	r3, #0
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	4b7c      	ldr	r3, [pc, #496]	; (800506c <MX_GPIO_Init+0x260>)
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7e:	4a7b      	ldr	r2, [pc, #492]	; (800506c <MX_GPIO_Init+0x260>)
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	6313      	str	r3, [r2, #48]	; 0x30
 8004e86:	4b79      	ldr	r3, [pc, #484]	; (800506c <MX_GPIO_Init+0x260>)
 8004e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e92:	2300      	movs	r3, #0
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	4b75      	ldr	r3, [pc, #468]	; (800506c <MX_GPIO_Init+0x260>)
 8004e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9a:	4a74      	ldr	r2, [pc, #464]	; (800506c <MX_GPIO_Init+0x260>)
 8004e9c:	f043 0302 	orr.w	r3, r3, #2
 8004ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ea2:	4b72      	ldr	r3, [pc, #456]	; (800506c <MX_GPIO_Init+0x260>)
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	60bb      	str	r3, [r7, #8]
 8004eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004eae:	2300      	movs	r3, #0
 8004eb0:	607b      	str	r3, [r7, #4]
 8004eb2:	4b6e      	ldr	r3, [pc, #440]	; (800506c <MX_GPIO_Init+0x260>)
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb6:	4a6d      	ldr	r2, [pc, #436]	; (800506c <MX_GPIO_Init+0x260>)
 8004eb8:	f043 0308 	orr.w	r3, r3, #8
 8004ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ebe:	4b6b      	ldr	r3, [pc, #428]	; (800506c <MX_GPIO_Init+0x260>)
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	607b      	str	r3, [r7, #4]
 8004ec8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WiFi_OK_Pin|Living_Fan_1_Pin|Livin_Fan_2_Pin|L_Kitchen_Pin
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f641 4131 	movw	r1, #7217	; 0x1c31
 8004ed0:	4867      	ldr	r0, [pc, #412]	; (8005070 <MX_GPIO_Init+0x264>)
 8004ed2:	f001 fe29 	bl	8006b28 <HAL_GPIO_WritePin>
                          |L_Garage_Pin|L_ClothesLine_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DHT22_In_Pin|DHT22_Out_Pin, GPIO_PIN_RESET);
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8004edc:	4865      	ldr	r0, [pc, #404]	; (8005074 <MX_GPIO_Init+0x268>)
 8004ede:	f001 fe23 	bl	8006b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Water_Pin|Heat_Pin|L_Mirror_Pin|L_Left_Pin
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f24a 01f8 	movw	r1, #41208	; 0xa0f8
 8004ee8:	4863      	ldr	r0, [pc, #396]	; (8005078 <MX_GPIO_Init+0x26c>)
 8004eea:	f001 fe1d 	bl	8006b28 <HAL_GPIO_WritePin>
                          |L_Office_Pin|L_Right_Pin|L_TV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L_Sink_GPIO_Port, L_Sink_Pin, GPIO_PIN_RESET);
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ef4:	4861      	ldr	r0, [pc, #388]	; (800507c <MX_GPIO_Init+0x270>)
 8004ef6:	f001 fe17 	bl	8006b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, L_Hall_Pin|L_Dining_Pin|L_Garden_Pin|L_Living_Pin
 8004efa:	2200      	movs	r2, #0
 8004efc:	21ff      	movs	r1, #255	; 0xff
 8004efe:	4860      	ldr	r0, [pc, #384]	; (8005080 <MX_GPIO_Init+0x274>)
 8004f00:	f001 fe12 	bl	8006b28 <HAL_GPIO_WritePin>
                          |L_Porch_Pin|L_Relax_Pin|L_Bathroom_Pin|L_Bedroom_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : S_In_Pin Parcel_Limit_Pin S_Out_Pin */
  GPIO_InitStruct.Pin = S_In_Pin|Parcel_Limit_Pin|S_Out_Pin;
 8004f04:	231a      	movs	r3, #26
 8004f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004f08:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f12:	f107 031c 	add.w	r3, r7, #28
 8004f16:	4619      	mov	r1, r3
 8004f18:	4856      	ldr	r0, [pc, #344]	; (8005074 <MX_GPIO_Init+0x268>)
 8004f1a:	f001 fc51 	bl	80067c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Parcel_Garage_Pin */
  GPIO_InitStruct.Pin = Parcel_Garage_Pin;
 8004f1e:	2340      	movs	r3, #64	; 0x40
 8004f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004f26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Parcel_Garage_GPIO_Port, &GPIO_InitStruct);
 8004f2c:	f107 031c 	add.w	r3, r7, #28
 8004f30:	4619      	mov	r1, r3
 8004f32:	4850      	ldr	r0, [pc, #320]	; (8005074 <MX_GPIO_Init+0x268>)
 8004f34:	f001 fc44 	bl	80067c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_People_Bell_Pin B_Stop_Pin */
  GPIO_InitStruct.Pin = B_People_Bell_Pin|B_Stop_Pin;
 8004f38:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f3e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004f42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f44:	2300      	movs	r3, #0
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f48:	f107 031c 	add.w	r3, r7, #28
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4848      	ldr	r0, [pc, #288]	; (8005070 <MX_GPIO_Init+0x264>)
 8004f50:	f001 fc36 	bl	80067c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : WiFi_OK_Pin Living_Fan_1_Pin Livin_Fan_2_Pin L_Kitchen_Pin
                           L_Garage_Pin L_ClothesLine_Pin */
  GPIO_InitStruct.Pin = WiFi_OK_Pin|Living_Fan_1_Pin|Livin_Fan_2_Pin|L_Kitchen_Pin
 8004f54:	f641 4331 	movw	r3, #7217	; 0x1c31
 8004f58:	61fb      	str	r3, [r7, #28]
                          |L_Garage_Pin|L_ClothesLine_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f62:	2300      	movs	r3, #0
 8004f64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f66:	f107 031c 	add.w	r3, r7, #28
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4840      	ldr	r0, [pc, #256]	; (8005070 <MX_GPIO_Init+0x264>)
 8004f6e:	f001 fc27 	bl	80067c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT22_In_Pin DHT22_Out_Pin */
  GPIO_InitStruct.Pin = DHT22_In_Pin|DHT22_Out_Pin;
 8004f72:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f80:	2300      	movs	r3, #0
 8004f82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f84:	f107 031c 	add.w	r3, r7, #28
 8004f88:	4619      	mov	r1, r3
 8004f8a:	483a      	ldr	r0, [pc, #232]	; (8005074 <MX_GPIO_Init+0x268>)
 8004f8c:	f001 fc18 	bl	80067c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Water_Pin Heat_Pin L_Mirror_Pin L_Left_Pin
                           L_Office_Pin L_Right_Pin L_TV_Pin */
  GPIO_InitStruct.Pin = Water_Pin|Heat_Pin|L_Mirror_Pin|L_Left_Pin
 8004f90:	f24a 03f8 	movw	r3, #41208	; 0xa0f8
 8004f94:	61fb      	str	r3, [r7, #28]
                          |L_Office_Pin|L_Right_Pin|L_TV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f96:	2301      	movs	r3, #1
 8004f98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fa2:	f107 031c 	add.w	r3, r7, #28
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	4833      	ldr	r0, [pc, #204]	; (8005078 <MX_GPIO_Init+0x26c>)
 8004faa:	f001 fc09 	bl	80067c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_Sink_Pin */
  GPIO_InitStruct.Pin = L_Sink_Pin;
 8004fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(L_Sink_GPIO_Port, &GPIO_InitStruct);
 8004fc0:	f107 031c 	add.w	r3, r7, #28
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	482d      	ldr	r0, [pc, #180]	; (800507c <MX_GPIO_Init+0x270>)
 8004fc8:	f001 fbfa 	bl	80067c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_Hall_Pin L_Dining_Pin L_Garden_Pin L_Living_Pin
                           L_Porch_Pin L_Relax_Pin L_Bathroom_Pin L_Bedroom_Pin */
  GPIO_InitStruct.Pin = L_Hall_Pin|L_Dining_Pin|L_Garden_Pin|L_Living_Pin
 8004fcc:	23ff      	movs	r3, #255	; 0xff
 8004fce:	61fb      	str	r3, [r7, #28]
                          |L_Porch_Pin|L_Relax_Pin|L_Bathroom_Pin|L_Bedroom_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fdc:	f107 031c 	add.w	r3, r7, #28
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4827      	ldr	r0, [pc, #156]	; (8005080 <MX_GPIO_Init+0x274>)
 8004fe4:	f001 fbec 	bl	80067c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_Vehicle_Bell_Pin */
  GPIO_InitStruct.Pin = B_Vehicle_Bell_Pin;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004fec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B_Vehicle_Bell_GPIO_Port, &GPIO_InitStruct);
 8004ff6:	f107 031c 	add.w	r3, r7, #28
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	481d      	ldr	r0, [pc, #116]	; (8005074 <MX_GPIO_Init+0x268>)
 8004ffe:	f001 fbdf 	bl	80067c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005002:	2200      	movs	r2, #0
 8005004:	2100      	movs	r1, #0
 8005006:	2006      	movs	r0, #6
 8005008:	f001 fb11 	bl	800662e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800500c:	2006      	movs	r0, #6
 800500e:	f001 fb2a 	bl	8006666 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8005012:	2200      	movs	r2, #0
 8005014:	2100      	movs	r1, #0
 8005016:	2007      	movs	r0, #7
 8005018:	f001 fb09 	bl	800662e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800501c:	2007      	movs	r0, #7
 800501e:	f001 fb22 	bl	8006666 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8005022:	2200      	movs	r2, #0
 8005024:	2100      	movs	r1, #0
 8005026:	2009      	movs	r0, #9
 8005028:	f001 fb01 	bl	800662e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800502c:	2009      	movs	r0, #9
 800502e:	f001 fb1a 	bl	8006666 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005032:	2200      	movs	r2, #0
 8005034:	2100      	movs	r1, #0
 8005036:	200a      	movs	r0, #10
 8005038:	f001 faf9 	bl	800662e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800503c:	200a      	movs	r0, #10
 800503e:	f001 fb12 	bl	8006666 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005042:	2200      	movs	r2, #0
 8005044:	2100      	movs	r1, #0
 8005046:	2017      	movs	r0, #23
 8005048:	f001 faf1 	bl	800662e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800504c:	2017      	movs	r0, #23
 800504e:	f001 fb0a 	bl	8006666 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005052:	2200      	movs	r2, #0
 8005054:	2100      	movs	r1, #0
 8005056:	2028      	movs	r0, #40	; 0x28
 8005058:	f001 fae9 	bl	800662e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800505c:	2028      	movs	r0, #40	; 0x28
 800505e:	f001 fb02 	bl	8006666 <HAL_NVIC_EnableIRQ>

}
 8005062:	bf00      	nop
 8005064:	3730      	adds	r7, #48	; 0x30
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40023800 	.word	0x40023800
 8005070:	40020800 	.word	0x40020800
 8005074:	40021000 	.word	0x40021000
 8005078:	40020400 	.word	0x40020400
 800507c:	40020000 	.word	0x40020000
 8005080:	40020c00 	.word	0x40020c00

08005084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005088:	b672      	cpsid	i
}
 800508a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800508c:	e7fe      	b.n	800508c <Error_Handler+0x8>
	...

08005090 <ssd1306_command>:
extern I2C_HandleTypeDef hi2c1;

extern uint8_t gddram[4][128];

void ssd1306_command(uint8_t byte)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af02      	add	r7, sp, #8
 8005096:	4603      	mov	r3, r0
 8005098:	71fb      	strb	r3, [r7, #7]
   uint8_t buffer[2];
	buffer[0] = 0x00;
 800509a:	2300      	movs	r3, #0
 800509c:	733b      	strb	r3, [r7, #12]
	buffer[1] = byte;
 800509e:	79fb      	ldrb	r3, [r7, #7]
 80050a0:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1,0x78,buffer,2,50);
 80050a2:	f107 020c 	add.w	r2, r7, #12
 80050a6:	2332      	movs	r3, #50	; 0x32
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	2302      	movs	r3, #2
 80050ac:	2178      	movs	r1, #120	; 0x78
 80050ae:	4803      	ldr	r0, [pc, #12]	; (80050bc <ssd1306_command+0x2c>)
 80050b0:	f001 feb0 	bl	8006e14 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&hi2c1,0x78,&buffer[1],1,50);

}
 80050b4:	bf00      	nop
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	20000d90 	.word	0x20000d90

080050c0 <oled_update>:

void oled_update(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b088      	sub	sp, #32
 80050c4:	af02      	add	r7, sp, #8
  ssd1306_command(SSD1306_COLUMNADDR);
 80050c6:	2021      	movs	r0, #33	; 0x21
 80050c8:	f7ff ffe2 	bl	8005090 <ssd1306_command>
  ssd1306_command(0);   // Column start address (0 = reset)
 80050cc:	2000      	movs	r0, #0
 80050ce:	f7ff ffdf 	bl	8005090 <ssd1306_command>
  ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
 80050d2:	207f      	movs	r0, #127	; 0x7f
 80050d4:	f7ff ffdc 	bl	8005090 <ssd1306_command>

  ssd1306_command(SSD1306_PAGEADDR);
 80050d8:	2022      	movs	r0, #34	; 0x22
 80050da:	f7ff ffd9 	bl	8005090 <ssd1306_command>
  ssd1306_command(0); // Page start address (0 = reset)
 80050de:	2000      	movs	r0, #0
 80050e0:	f7ff ffd6 	bl	8005090 <ssd1306_command>
  ssd1306_command(3); // Page end address
 80050e4:	2003      	movs	r0, #3
 80050e6:	f7ff ffd3 	bl	8005090 <ssd1306_command>



	//SEND data in 16byte packs
	uint8_t buffer[17];
	buffer[0] = 0x40;
 80050ea:	2340      	movs	r3, #64	; 0x40
 80050ec:	703b      	strb	r3, [r7, #0]
	for(uint16_t line=0; line<4; line++)
 80050ee:	2300      	movs	r3, #0
 80050f0:	82fb      	strh	r3, [r7, #22]
 80050f2:	e02d      	b.n	8005150 <oled_update+0x90>
	{
		for(uint8_t x=0;x<127;x+=16)
 80050f4:	2300      	movs	r3, #0
 80050f6:	757b      	strb	r3, [r7, #21]
 80050f8:	e024      	b.n	8005144 <oled_update+0x84>
		{
			for(uint8_t i=1;i<17;i++)
 80050fa:	2301      	movs	r3, #1
 80050fc:	753b      	strb	r3, [r7, #20]
 80050fe:	e012      	b.n	8005126 <oled_update+0x66>
			{
				buffer[i] = gddram[line][x+i-1];
 8005100:	8af9      	ldrh	r1, [r7, #22]
 8005102:	7d7a      	ldrb	r2, [r7, #21]
 8005104:	7d3b      	ldrb	r3, [r7, #20]
 8005106:	4413      	add	r3, r2
 8005108:	1e5a      	subs	r2, r3, #1
 800510a:	7d3b      	ldrb	r3, [r7, #20]
 800510c:	4814      	ldr	r0, [pc, #80]	; (8005160 <oled_update+0xa0>)
 800510e:	01c9      	lsls	r1, r1, #7
 8005110:	4401      	add	r1, r0
 8005112:	440a      	add	r2, r1
 8005114:	7812      	ldrb	r2, [r2, #0]
 8005116:	f107 0118 	add.w	r1, r7, #24
 800511a:	440b      	add	r3, r1
 800511c:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(uint8_t i=1;i<17;i++)
 8005120:	7d3b      	ldrb	r3, [r7, #20]
 8005122:	3301      	adds	r3, #1
 8005124:	753b      	strb	r3, [r7, #20]
 8005126:	7d3b      	ldrb	r3, [r7, #20]
 8005128:	2b10      	cmp	r3, #16
 800512a:	d9e9      	bls.n	8005100 <oled_update+0x40>
			}
			HAL_I2C_Master_Transmit(&hi2c1,0x78,buffer,17,1000);
 800512c:	463a      	mov	r2, r7
 800512e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	2311      	movs	r3, #17
 8005136:	2178      	movs	r1, #120	; 0x78
 8005138:	480a      	ldr	r0, [pc, #40]	; (8005164 <oled_update+0xa4>)
 800513a:	f001 fe6b 	bl	8006e14 <HAL_I2C_Master_Transmit>
		for(uint8_t x=0;x<127;x+=16)
 800513e:	7d7b      	ldrb	r3, [r7, #21]
 8005140:	3310      	adds	r3, #16
 8005142:	757b      	strb	r3, [r7, #21]
 8005144:	7d7b      	ldrb	r3, [r7, #21]
 8005146:	2b7e      	cmp	r3, #126	; 0x7e
 8005148:	d9d7      	bls.n	80050fa <oled_update+0x3a>
	for(uint16_t line=0; line<4; line++)
 800514a:	8afb      	ldrh	r3, [r7, #22]
 800514c:	3301      	adds	r3, #1
 800514e:	82fb      	strh	r3, [r7, #22]
 8005150:	8afb      	ldrh	r3, [r7, #22]
 8005152:	2b03      	cmp	r3, #3
 8005154:	d9ce      	bls.n	80050f4 <oled_update+0x34>
		}
	}

}
 8005156:	bf00      	nop
 8005158:	bf00      	nop
 800515a:	3718      	adds	r7, #24
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	20000a6c 	.word	0x20000a6c
 8005164:	20000d90 	.word	0x20000d90

08005168 <oled_init>:

void oled_init(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
	// Init sequence
  ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 800516e:	20ae      	movs	r0, #174	; 0xae
 8005170:	f7ff ff8e 	bl	8005090 <ssd1306_command>
  ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 8005174:	20d5      	movs	r0, #213	; 0xd5
 8005176:	f7ff ff8b 	bl	8005090 <ssd1306_command>
  ssd1306_command(0x80);                                  // the suggested ratio 0x80
 800517a:	2080      	movs	r0, #128	; 0x80
 800517c:	f7ff ff88 	bl	8005090 <ssd1306_command>

  ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 8005180:	20a8      	movs	r0, #168	; 0xa8
 8005182:	f7ff ff85 	bl	8005090 <ssd1306_command>
  ssd1306_command(SSD1306_LCDHEIGHT - 1);
 8005186:	201f      	movs	r0, #31
 8005188:	f7ff ff82 	bl	8005090 <ssd1306_command>

  ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 800518c:	20d3      	movs	r0, #211	; 0xd3
 800518e:	f7ff ff7f 	bl	8005090 <ssd1306_command>
  ssd1306_command(0x0);                                   // no offset
 8005192:	2000      	movs	r0, #0
 8005194:	f7ff ff7c 	bl	8005090 <ssd1306_command>
  ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 8005198:	2040      	movs	r0, #64	; 0x40
 800519a:	f7ff ff79 	bl	8005090 <ssd1306_command>
  ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 800519e:	208d      	movs	r0, #141	; 0x8d
 80051a0:	f7ff ff76 	bl	8005090 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x10); }
  else
    { ssd1306_command(0x14); }
 80051a4:	2014      	movs	r0, #20
 80051a6:	f7ff ff73 	bl	8005090 <ssd1306_command>
  ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 80051aa:	2020      	movs	r0, #32
 80051ac:	f7ff ff70 	bl	8005090 <ssd1306_command>
  ssd1306_command(0x00);                                  // 0x0 act like ks0108
 80051b0:	2000      	movs	r0, #0
 80051b2:	f7ff ff6d 	bl	8005090 <ssd1306_command>
  ssd1306_command(SSD1306_SEGREMAP | 0x1);
 80051b6:	20a1      	movs	r0, #161	; 0xa1
 80051b8:	f7ff ff6a 	bl	8005090 <ssd1306_command>
  ssd1306_command(SSD1306_COMSCANDEC);
 80051bc:	20c8      	movs	r0, #200	; 0xc8
 80051be:	f7ff ff67 	bl	8005090 <ssd1306_command>

 #if defined SSD1306_128_32
  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 80051c2:	20da      	movs	r0, #218	; 0xda
 80051c4:	f7ff ff64 	bl	8005090 <ssd1306_command>
  ssd1306_command(0x02);
 80051c8:	2002      	movs	r0, #2
 80051ca:	f7ff ff61 	bl	8005090 <ssd1306_command>
  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 80051ce:	2081      	movs	r0, #129	; 0x81
 80051d0:	f7ff ff5e 	bl	8005090 <ssd1306_command>
  ssd1306_command(0x8F);
 80051d4:	208f      	movs	r0, #143	; 0x8f
 80051d6:	f7ff ff5b 	bl	8005090 <ssd1306_command>
  else
    { ssd1306_command(0xAF); }

#endif

  ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 80051da:	20d9      	movs	r0, #217	; 0xd9
 80051dc:	f7ff ff58 	bl	8005090 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x22); }
  else
    { ssd1306_command(0xF1); }
 80051e0:	20f1      	movs	r0, #241	; 0xf1
 80051e2:	f7ff ff55 	bl	8005090 <ssd1306_command>
  ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 80051e6:	20db      	movs	r0, #219	; 0xdb
 80051e8:	f7ff ff52 	bl	8005090 <ssd1306_command>
  ssd1306_command(0x40);
 80051ec:	2040      	movs	r0, #64	; 0x40
 80051ee:	f7ff ff4f 	bl	8005090 <ssd1306_command>
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 80051f2:	20a4      	movs	r0, #164	; 0xa4
 80051f4:	f7ff ff4c 	bl	8005090 <ssd1306_command>
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 80051f8:	20a6      	movs	r0, #166	; 0xa6
 80051fa:	f7ff ff49 	bl	8005090 <ssd1306_command>

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
 80051fe:	202e      	movs	r0, #46	; 0x2e
 8005200:	f7ff ff46 	bl	8005090 <ssd1306_command>

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 8005204:	20af      	movs	r0, #175	; 0xaf
 8005206:	f7ff ff43 	bl	8005090 <ssd1306_command>

	//init buffer
	 for(int i = 0; i<4; i++)
 800520a:	2300      	movs	r3, #0
 800520c:	607b      	str	r3, [r7, #4]
 800520e:	e013      	b.n	8005238 <oled_init+0xd0>
		for(int j = 0; j<128; j++)
 8005210:	2300      	movs	r3, #0
 8005212:	603b      	str	r3, [r7, #0]
 8005214:	e00a      	b.n	800522c <oled_init+0xc4>
			gddram[i][j] = 0x00;
 8005216:	4a0c      	ldr	r2, [pc, #48]	; (8005248 <oled_init+0xe0>)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	01db      	lsls	r3, r3, #7
 800521c:	441a      	add	r2, r3
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	4413      	add	r3, r2
 8005222:	2200      	movs	r2, #0
 8005224:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j<128; j++)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	3301      	adds	r3, #1
 800522a:	603b      	str	r3, [r7, #0]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b7f      	cmp	r3, #127	; 0x7f
 8005230:	ddf1      	ble.n	8005216 <oled_init+0xae>
	 for(int i = 0; i<4; i++)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	3301      	adds	r3, #1
 8005236:	607b      	str	r3, [r7, #4]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b03      	cmp	r3, #3
 800523c:	dde8      	ble.n	8005210 <oled_init+0xa8>
}
 800523e:	bf00      	nop
 8005240:	bf00      	nop
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	20000a6c 	.word	0x20000a6c

0800524c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005252:	2300      	movs	r3, #0
 8005254:	607b      	str	r3, [r7, #4]
 8005256:	4b10      	ldr	r3, [pc, #64]	; (8005298 <HAL_MspInit+0x4c>)
 8005258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525a:	4a0f      	ldr	r2, [pc, #60]	; (8005298 <HAL_MspInit+0x4c>)
 800525c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005260:	6453      	str	r3, [r2, #68]	; 0x44
 8005262:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <HAL_MspInit+0x4c>)
 8005264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800526a:	607b      	str	r3, [r7, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800526e:	2300      	movs	r3, #0
 8005270:	603b      	str	r3, [r7, #0]
 8005272:	4b09      	ldr	r3, [pc, #36]	; (8005298 <HAL_MspInit+0x4c>)
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	4a08      	ldr	r2, [pc, #32]	; (8005298 <HAL_MspInit+0x4c>)
 8005278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800527c:	6413      	str	r3, [r2, #64]	; 0x40
 800527e:	4b06      	ldr	r3, [pc, #24]	; (8005298 <HAL_MspInit+0x4c>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005286:	603b      	str	r3, [r7, #0]
 8005288:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800528a:	2007      	movs	r0, #7
 800528c:	f001 f9c4 	bl	8006618 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005290:	bf00      	nop
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	40023800 	.word	0x40023800

0800529c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08e      	sub	sp, #56	; 0x38
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	605a      	str	r2, [r3, #4]
 80052ae:	609a      	str	r2, [r3, #8]
 80052b0:	60da      	str	r2, [r3, #12]
 80052b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a45      	ldr	r2, [pc, #276]	; (80053d0 <HAL_ADC_MspInit+0x134>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d128      	bne.n	8005310 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80052be:	2300      	movs	r3, #0
 80052c0:	623b      	str	r3, [r7, #32]
 80052c2:	4b44      	ldr	r3, [pc, #272]	; (80053d4 <HAL_ADC_MspInit+0x138>)
 80052c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c6:	4a43      	ldr	r2, [pc, #268]	; (80053d4 <HAL_ADC_MspInit+0x138>)
 80052c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052cc:	6453      	str	r3, [r2, #68]	; 0x44
 80052ce:	4b41      	ldr	r3, [pc, #260]	; (80053d4 <HAL_ADC_MspInit+0x138>)
 80052d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d6:	623b      	str	r3, [r7, #32]
 80052d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052da:	2300      	movs	r3, #0
 80052dc:	61fb      	str	r3, [r7, #28]
 80052de:	4b3d      	ldr	r3, [pc, #244]	; (80053d4 <HAL_ADC_MspInit+0x138>)
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	4a3c      	ldr	r2, [pc, #240]	; (80053d4 <HAL_ADC_MspInit+0x138>)
 80052e4:	f043 0301 	orr.w	r3, r3, #1
 80052e8:	6313      	str	r3, [r2, #48]	; 0x30
 80052ea:	4b3a      	ldr	r3, [pc, #232]	; (80053d4 <HAL_ADC_MspInit+0x138>)
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	61fb      	str	r3, [r7, #28]
 80052f4:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = LDR_Pin;
 80052f6:	2310      	movs	r3, #16
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052fa:	2303      	movs	r3, #3
 80052fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052fe:	2300      	movs	r3, #0
 8005300:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 8005302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005306:	4619      	mov	r1, r3
 8005308:	4833      	ldr	r0, [pc, #204]	; (80053d8 <HAL_ADC_MspInit+0x13c>)
 800530a:	f001 fa59 	bl	80067c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800530e:	e05a      	b.n	80053c6 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a31      	ldr	r2, [pc, #196]	; (80053dc <HAL_ADC_MspInit+0x140>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d128      	bne.n	800536c <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800531a:	2300      	movs	r3, #0
 800531c:	61bb      	str	r3, [r7, #24]
 800531e:	4b2d      	ldr	r3, [pc, #180]	; (80053d4 <HAL_ADC_MspInit+0x138>)
 8005320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005322:	4a2c      	ldr	r2, [pc, #176]	; (80053d4 <HAL_ADC_MspInit+0x138>)
 8005324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005328:	6453      	str	r3, [r2, #68]	; 0x44
 800532a:	4b2a      	ldr	r3, [pc, #168]	; (80053d4 <HAL_ADC_MspInit+0x138>)
 800532c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005332:	61bb      	str	r3, [r7, #24]
 8005334:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005336:	2300      	movs	r3, #0
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	4b26      	ldr	r3, [pc, #152]	; (80053d4 <HAL_ADC_MspInit+0x138>)
 800533c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533e:	4a25      	ldr	r2, [pc, #148]	; (80053d4 <HAL_ADC_MspInit+0x138>)
 8005340:	f043 0302 	orr.w	r3, r3, #2
 8005344:	6313      	str	r3, [r2, #48]	; 0x30
 8005346:	4b23      	ldr	r3, [pc, #140]	; (80053d4 <HAL_ADC_MspInit+0x138>)
 8005348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = HW_390_Pin;
 8005352:	2301      	movs	r3, #1
 8005354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005356:	2303      	movs	r3, #3
 8005358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800535a:	2300      	movs	r3, #0
 800535c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HW_390_GPIO_Port, &GPIO_InitStruct);
 800535e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005362:	4619      	mov	r1, r3
 8005364:	481e      	ldr	r0, [pc, #120]	; (80053e0 <HAL_ADC_MspInit+0x144>)
 8005366:	f001 fa2b 	bl	80067c0 <HAL_GPIO_Init>
}
 800536a:	e02c      	b.n	80053c6 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a1c      	ldr	r2, [pc, #112]	; (80053e4 <HAL_ADC_MspInit+0x148>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d127      	bne.n	80053c6 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005376:	2300      	movs	r3, #0
 8005378:	613b      	str	r3, [r7, #16]
 800537a:	4b16      	ldr	r3, [pc, #88]	; (80053d4 <HAL_ADC_MspInit+0x138>)
 800537c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537e:	4a15      	ldr	r2, [pc, #84]	; (80053d4 <HAL_ADC_MspInit+0x138>)
 8005380:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005384:	6453      	str	r3, [r2, #68]	; 0x44
 8005386:	4b13      	ldr	r3, [pc, #76]	; (80053d4 <HAL_ADC_MspInit+0x138>)
 8005388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800538e:	613b      	str	r3, [r7, #16]
 8005390:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	4b0f      	ldr	r3, [pc, #60]	; (80053d4 <HAL_ADC_MspInit+0x138>)
 8005398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539a:	4a0e      	ldr	r2, [pc, #56]	; (80053d4 <HAL_ADC_MspInit+0x138>)
 800539c:	f043 0304 	orr.w	r3, r3, #4
 80053a0:	6313      	str	r3, [r2, #48]	; 0x30
 80053a2:	4b0c      	ldr	r3, [pc, #48]	; (80053d4 <HAL_ADC_MspInit+0x138>)
 80053a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a6:	f003 0304 	and.w	r3, r3, #4
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Rain_Pin;
 80053ae:	2302      	movs	r3, #2
 80053b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80053b2:	2303      	movs	r3, #3
 80053b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Rain_GPIO_Port, &GPIO_InitStruct);
 80053ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053be:	4619      	mov	r1, r3
 80053c0:	4809      	ldr	r0, [pc, #36]	; (80053e8 <HAL_ADC_MspInit+0x14c>)
 80053c2:	f001 f9fd 	bl	80067c0 <HAL_GPIO_Init>
}
 80053c6:	bf00      	nop
 80053c8:	3738      	adds	r7, #56	; 0x38
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	40012000 	.word	0x40012000
 80053d4:	40023800 	.word	0x40023800
 80053d8:	40020000 	.word	0x40020000
 80053dc:	40012100 	.word	0x40012100
 80053e0:	40020400 	.word	0x40020400
 80053e4:	40012200 	.word	0x40012200
 80053e8:	40020800 	.word	0x40020800

080053ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08a      	sub	sp, #40	; 0x28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053f4:	f107 0314 	add.w	r3, r7, #20
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	605a      	str	r2, [r3, #4]
 80053fe:	609a      	str	r2, [r3, #8]
 8005400:	60da      	str	r2, [r3, #12]
 8005402:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a19      	ldr	r2, [pc, #100]	; (8005470 <HAL_I2C_MspInit+0x84>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d12c      	bne.n	8005468 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800540e:	2300      	movs	r3, #0
 8005410:	613b      	str	r3, [r7, #16]
 8005412:	4b18      	ldr	r3, [pc, #96]	; (8005474 <HAL_I2C_MspInit+0x88>)
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	4a17      	ldr	r2, [pc, #92]	; (8005474 <HAL_I2C_MspInit+0x88>)
 8005418:	f043 0302 	orr.w	r3, r3, #2
 800541c:	6313      	str	r3, [r2, #48]	; 0x30
 800541e:	4b15      	ldr	r3, [pc, #84]	; (8005474 <HAL_I2C_MspInit+0x88>)
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	613b      	str	r3, [r7, #16]
 8005428:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 800542a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800542e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005430:	2312      	movs	r3, #18
 8005432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005434:	2300      	movs	r3, #0
 8005436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005438:	2303      	movs	r3, #3
 800543a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800543c:	2304      	movs	r3, #4
 800543e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005440:	f107 0314 	add.w	r3, r7, #20
 8005444:	4619      	mov	r1, r3
 8005446:	480c      	ldr	r0, [pc, #48]	; (8005478 <HAL_I2C_MspInit+0x8c>)
 8005448:	f001 f9ba 	bl	80067c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800544c:	2300      	movs	r3, #0
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	4b08      	ldr	r3, [pc, #32]	; (8005474 <HAL_I2C_MspInit+0x88>)
 8005452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005454:	4a07      	ldr	r2, [pc, #28]	; (8005474 <HAL_I2C_MspInit+0x88>)
 8005456:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800545a:	6413      	str	r3, [r2, #64]	; 0x40
 800545c:	4b05      	ldr	r3, [pc, #20]	; (8005474 <HAL_I2C_MspInit+0x88>)
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005468:	bf00      	nop
 800546a:	3728      	adds	r7, #40	; 0x28
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40005400 	.word	0x40005400
 8005474:	40023800 	.word	0x40023800
 8005478:	40020400 	.word	0x40020400

0800547c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800547c:	b480      	push	{r7}
 800547e:	b08b      	sub	sp, #44	; 0x2c
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a51      	ldr	r2, [pc, #324]	; (80055d0 <HAL_TIM_Base_MspInit+0x154>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d10e      	bne.n	80054ac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800548e:	2300      	movs	r3, #0
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
 8005492:	4b50      	ldr	r3, [pc, #320]	; (80055d4 <HAL_TIM_Base_MspInit+0x158>)
 8005494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005496:	4a4f      	ldr	r2, [pc, #316]	; (80055d4 <HAL_TIM_Base_MspInit+0x158>)
 8005498:	f043 0301 	orr.w	r3, r3, #1
 800549c:	6453      	str	r3, [r2, #68]	; 0x44
 800549e:	4b4d      	ldr	r3, [pc, #308]	; (80055d4 <HAL_TIM_Base_MspInit+0x158>)
 80054a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80054aa:	e08a      	b.n	80055c2 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM2)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b4:	d10e      	bne.n	80054d4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80054b6:	2300      	movs	r3, #0
 80054b8:	623b      	str	r3, [r7, #32]
 80054ba:	4b46      	ldr	r3, [pc, #280]	; (80055d4 <HAL_TIM_Base_MspInit+0x158>)
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	4a45      	ldr	r2, [pc, #276]	; (80055d4 <HAL_TIM_Base_MspInit+0x158>)
 80054c0:	f043 0301 	orr.w	r3, r3, #1
 80054c4:	6413      	str	r3, [r2, #64]	; 0x40
 80054c6:	4b43      	ldr	r3, [pc, #268]	; (80055d4 <HAL_TIM_Base_MspInit+0x158>)
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	623b      	str	r3, [r7, #32]
 80054d0:	6a3b      	ldr	r3, [r7, #32]
}
 80054d2:	e076      	b.n	80055c2 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM3)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a3f      	ldr	r2, [pc, #252]	; (80055d8 <HAL_TIM_Base_MspInit+0x15c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d10e      	bne.n	80054fc <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80054de:	2300      	movs	r3, #0
 80054e0:	61fb      	str	r3, [r7, #28]
 80054e2:	4b3c      	ldr	r3, [pc, #240]	; (80055d4 <HAL_TIM_Base_MspInit+0x158>)
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	4a3b      	ldr	r2, [pc, #236]	; (80055d4 <HAL_TIM_Base_MspInit+0x158>)
 80054e8:	f043 0302 	orr.w	r3, r3, #2
 80054ec:	6413      	str	r3, [r2, #64]	; 0x40
 80054ee:	4b39      	ldr	r3, [pc, #228]	; (80055d4 <HAL_TIM_Base_MspInit+0x158>)
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	61fb      	str	r3, [r7, #28]
 80054f8:	69fb      	ldr	r3, [r7, #28]
}
 80054fa:	e062      	b.n	80055c2 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM4)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a36      	ldr	r2, [pc, #216]	; (80055dc <HAL_TIM_Base_MspInit+0x160>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d10e      	bne.n	8005524 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005506:	2300      	movs	r3, #0
 8005508:	61bb      	str	r3, [r7, #24]
 800550a:	4b32      	ldr	r3, [pc, #200]	; (80055d4 <HAL_TIM_Base_MspInit+0x158>)
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	4a31      	ldr	r2, [pc, #196]	; (80055d4 <HAL_TIM_Base_MspInit+0x158>)
 8005510:	f043 0304 	orr.w	r3, r3, #4
 8005514:	6413      	str	r3, [r2, #64]	; 0x40
 8005516:	4b2f      	ldr	r3, [pc, #188]	; (80055d4 <HAL_TIM_Base_MspInit+0x158>)
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	f003 0304 	and.w	r3, r3, #4
 800551e:	61bb      	str	r3, [r7, #24]
 8005520:	69bb      	ldr	r3, [r7, #24]
}
 8005522:	e04e      	b.n	80055c2 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM5)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a2d      	ldr	r2, [pc, #180]	; (80055e0 <HAL_TIM_Base_MspInit+0x164>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d10e      	bne.n	800554c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800552e:	2300      	movs	r3, #0
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	4b28      	ldr	r3, [pc, #160]	; (80055d4 <HAL_TIM_Base_MspInit+0x158>)
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	4a27      	ldr	r2, [pc, #156]	; (80055d4 <HAL_TIM_Base_MspInit+0x158>)
 8005538:	f043 0308 	orr.w	r3, r3, #8
 800553c:	6413      	str	r3, [r2, #64]	; 0x40
 800553e:	4b25      	ldr	r3, [pc, #148]	; (80055d4 <HAL_TIM_Base_MspInit+0x158>)
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	617b      	str	r3, [r7, #20]
 8005548:	697b      	ldr	r3, [r7, #20]
}
 800554a:	e03a      	b.n	80055c2 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM6)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a24      	ldr	r2, [pc, #144]	; (80055e4 <HAL_TIM_Base_MspInit+0x168>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d10e      	bne.n	8005574 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005556:	2300      	movs	r3, #0
 8005558:	613b      	str	r3, [r7, #16]
 800555a:	4b1e      	ldr	r3, [pc, #120]	; (80055d4 <HAL_TIM_Base_MspInit+0x158>)
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	4a1d      	ldr	r2, [pc, #116]	; (80055d4 <HAL_TIM_Base_MspInit+0x158>)
 8005560:	f043 0310 	orr.w	r3, r3, #16
 8005564:	6413      	str	r3, [r2, #64]	; 0x40
 8005566:	4b1b      	ldr	r3, [pc, #108]	; (80055d4 <HAL_TIM_Base_MspInit+0x158>)
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	f003 0310 	and.w	r3, r3, #16
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	693b      	ldr	r3, [r7, #16]
}
 8005572:	e026      	b.n	80055c2 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM8)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a1b      	ldr	r2, [pc, #108]	; (80055e8 <HAL_TIM_Base_MspInit+0x16c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d10e      	bne.n	800559c <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800557e:	2300      	movs	r3, #0
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	4b14      	ldr	r3, [pc, #80]	; (80055d4 <HAL_TIM_Base_MspInit+0x158>)
 8005584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005586:	4a13      	ldr	r2, [pc, #76]	; (80055d4 <HAL_TIM_Base_MspInit+0x158>)
 8005588:	f043 0302 	orr.w	r3, r3, #2
 800558c:	6453      	str	r3, [r2, #68]	; 0x44
 800558e:	4b11      	ldr	r3, [pc, #68]	; (80055d4 <HAL_TIM_Base_MspInit+0x158>)
 8005590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	68fb      	ldr	r3, [r7, #12]
}
 800559a:	e012      	b.n	80055c2 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM9)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a12      	ldr	r2, [pc, #72]	; (80055ec <HAL_TIM_Base_MspInit+0x170>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d10d      	bne.n	80055c2 <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80055a6:	2300      	movs	r3, #0
 80055a8:	60bb      	str	r3, [r7, #8]
 80055aa:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <HAL_TIM_Base_MspInit+0x158>)
 80055ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ae:	4a09      	ldr	r2, [pc, #36]	; (80055d4 <HAL_TIM_Base_MspInit+0x158>)
 80055b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b4:	6453      	str	r3, [r2, #68]	; 0x44
 80055b6:	4b07      	ldr	r3, [pc, #28]	; (80055d4 <HAL_TIM_Base_MspInit+0x158>)
 80055b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055be:	60bb      	str	r3, [r7, #8]
 80055c0:	68bb      	ldr	r3, [r7, #8]
}
 80055c2:	bf00      	nop
 80055c4:	372c      	adds	r7, #44	; 0x2c
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	40010000 	.word	0x40010000
 80055d4:	40023800 	.word	0x40023800
 80055d8:	40000400 	.word	0x40000400
 80055dc:	40000800 	.word	0x40000800
 80055e0:	40000c00 	.word	0x40000c00
 80055e4:	40001000 	.word	0x40001000
 80055e8:	40010400 	.word	0x40010400
 80055ec:	40014000 	.word	0x40014000

080055f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08e      	sub	sp, #56	; 0x38
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	605a      	str	r2, [r3, #4]
 8005602:	609a      	str	r2, [r3, #8]
 8005604:	60da      	str	r2, [r3, #12]
 8005606:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a7a      	ldr	r2, [pc, #488]	; (80057f8 <HAL_TIM_MspPostInit+0x208>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d11f      	bne.n	8005652 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005612:	2300      	movs	r3, #0
 8005614:	623b      	str	r3, [r7, #32]
 8005616:	4b79      	ldr	r3, [pc, #484]	; (80057fc <HAL_TIM_MspPostInit+0x20c>)
 8005618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561a:	4a78      	ldr	r2, [pc, #480]	; (80057fc <HAL_TIM_MspPostInit+0x20c>)
 800561c:	f043 0301 	orr.w	r3, r3, #1
 8005620:	6313      	str	r3, [r2, #48]	; 0x30
 8005622:	4b76      	ldr	r3, [pc, #472]	; (80057fc <HAL_TIM_MspPostInit+0x20c>)
 8005624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	623b      	str	r3, [r7, #32]
 800562c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = L_GamingG_Pin|L_GamingR_Pin|L_GamingB_Pin;
 800562e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005634:	2302      	movs	r3, #2
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005638:	2300      	movs	r3, #0
 800563a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800563c:	2300      	movs	r3, #0
 800563e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005640:	2301      	movs	r3, #1
 8005642:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005648:	4619      	mov	r1, r3
 800564a:	486d      	ldr	r0, [pc, #436]	; (8005800 <HAL_TIM_MspPostInit+0x210>)
 800564c:	f001 f8b8 	bl	80067c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8005650:	e0cd      	b.n	80057ee <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM2)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800565a:	d13d      	bne.n	80056d8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800565c:	2300      	movs	r3, #0
 800565e:	61fb      	str	r3, [r7, #28]
 8005660:	4b66      	ldr	r3, [pc, #408]	; (80057fc <HAL_TIM_MspPostInit+0x20c>)
 8005662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005664:	4a65      	ldr	r2, [pc, #404]	; (80057fc <HAL_TIM_MspPostInit+0x20c>)
 8005666:	f043 0301 	orr.w	r3, r3, #1
 800566a:	6313      	str	r3, [r2, #48]	; 0x30
 800566c:	4b63      	ldr	r3, [pc, #396]	; (80057fc <HAL_TIM_MspPostInit+0x20c>)
 800566e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	61fb      	str	r3, [r7, #28]
 8005676:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005678:	2300      	movs	r3, #0
 800567a:	61bb      	str	r3, [r7, #24]
 800567c:	4b5f      	ldr	r3, [pc, #380]	; (80057fc <HAL_TIM_MspPostInit+0x20c>)
 800567e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005680:	4a5e      	ldr	r2, [pc, #376]	; (80057fc <HAL_TIM_MspPostInit+0x20c>)
 8005682:	f043 0302 	orr.w	r3, r3, #2
 8005686:	6313      	str	r3, [r2, #48]	; 0x30
 8005688:	4b5c      	ldr	r3, [pc, #368]	; (80057fc <HAL_TIM_MspPostInit+0x20c>)
 800568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	61bb      	str	r3, [r7, #24]
 8005692:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = Parcel_Servo_Pin|Garaje_Servo_Pin;
 8005694:	2303      	movs	r3, #3
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005698:	2302      	movs	r3, #2
 800569a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800569c:	2300      	movs	r3, #0
 800569e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056a0:	2300      	movs	r3, #0
 80056a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80056a4:	2301      	movs	r3, #1
 80056a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056ac:	4619      	mov	r1, r3
 80056ae:	4854      	ldr	r0, [pc, #336]	; (8005800 <HAL_TIM_MspPostInit+0x210>)
 80056b0:	f001 f886 	bl	80067c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Awning_Servo_Pin;
 80056b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056ba:	2302      	movs	r3, #2
 80056bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056be:	2300      	movs	r3, #0
 80056c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056c2:	2300      	movs	r3, #0
 80056c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80056c6:	2301      	movs	r3, #1
 80056c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Awning_Servo_GPIO_Port, &GPIO_InitStruct);
 80056ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056ce:	4619      	mov	r1, r3
 80056d0:	484c      	ldr	r0, [pc, #304]	; (8005804 <HAL_TIM_MspPostInit+0x214>)
 80056d2:	f001 f875 	bl	80067c0 <HAL_GPIO_Init>
}
 80056d6:	e08a      	b.n	80057ee <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM3)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a4a      	ldr	r2, [pc, #296]	; (8005808 <HAL_TIM_MspPostInit+0x218>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d13d      	bne.n	800575e <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056e2:	2300      	movs	r3, #0
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	4b45      	ldr	r3, [pc, #276]	; (80057fc <HAL_TIM_MspPostInit+0x20c>)
 80056e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ea:	4a44      	ldr	r2, [pc, #272]	; (80057fc <HAL_TIM_MspPostInit+0x20c>)
 80056ec:	f043 0301 	orr.w	r3, r3, #1
 80056f0:	6313      	str	r3, [r2, #48]	; 0x30
 80056f2:	4b42      	ldr	r3, [pc, #264]	; (80057fc <HAL_TIM_MspPostInit+0x20c>)
 80056f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80056fe:	2300      	movs	r3, #0
 8005700:	613b      	str	r3, [r7, #16]
 8005702:	4b3e      	ldr	r3, [pc, #248]	; (80057fc <HAL_TIM_MspPostInit+0x20c>)
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	4a3d      	ldr	r2, [pc, #244]	; (80057fc <HAL_TIM_MspPostInit+0x20c>)
 8005708:	f043 0304 	orr.w	r3, r3, #4
 800570c:	6313      	str	r3, [r2, #48]	; 0x30
 800570e:	4b3b      	ldr	r3, [pc, #236]	; (80057fc <HAL_TIM_MspPostInit+0x20c>)
 8005710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005712:	f003 0304 	and.w	r3, r3, #4
 8005716:	613b      	str	r3, [r7, #16]
 8005718:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Bedroom_Servo_Pin;
 800571a:	2380      	movs	r3, #128	; 0x80
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800571e:	2302      	movs	r3, #2
 8005720:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005722:	2300      	movs	r3, #0
 8005724:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005726:	2300      	movs	r3, #0
 8005728:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800572a:	2302      	movs	r3, #2
 800572c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Bedroom_Servo_GPIO_Port, &GPIO_InitStruct);
 800572e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005732:	4619      	mov	r1, r3
 8005734:	4832      	ldr	r0, [pc, #200]	; (8005800 <HAL_TIM_MspPostInit+0x210>)
 8005736:	f001 f843 	bl	80067c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Office_Servo_Pin|Living_Servo_Pin;
 800573a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800573e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005740:	2302      	movs	r3, #2
 8005742:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005744:	2300      	movs	r3, #0
 8005746:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005748:	2300      	movs	r3, #0
 800574a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800574c:	2302      	movs	r3, #2
 800574e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005754:	4619      	mov	r1, r3
 8005756:	482d      	ldr	r0, [pc, #180]	; (800580c <HAL_TIM_MspPostInit+0x21c>)
 8005758:	f001 f832 	bl	80067c0 <HAL_GPIO_Init>
}
 800575c:	e047      	b.n	80057ee <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM4)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a2b      	ldr	r2, [pc, #172]	; (8005810 <HAL_TIM_MspPostInit+0x220>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d11f      	bne.n	80057a8 <HAL_TIM_MspPostInit+0x1b8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005768:	2300      	movs	r3, #0
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	4b23      	ldr	r3, [pc, #140]	; (80057fc <HAL_TIM_MspPostInit+0x20c>)
 800576e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005770:	4a22      	ldr	r2, [pc, #136]	; (80057fc <HAL_TIM_MspPostInit+0x20c>)
 8005772:	f043 0308 	orr.w	r3, r3, #8
 8005776:	6313      	str	r3, [r2, #48]	; 0x30
 8005778:	4b20      	ldr	r3, [pc, #128]	; (80057fc <HAL_TIM_MspPostInit+0x20c>)
 800577a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577c:	f003 0308 	and.w	r3, r3, #8
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005788:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800578a:	2302      	movs	r3, #2
 800578c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800578e:	2300      	movs	r3, #0
 8005790:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005792:	2300      	movs	r3, #0
 8005794:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005796:	2302      	movs	r3, #2
 8005798:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800579a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800579e:	4619      	mov	r1, r3
 80057a0:	481c      	ldr	r0, [pc, #112]	; (8005814 <HAL_TIM_MspPostInit+0x224>)
 80057a2:	f001 f80d 	bl	80067c0 <HAL_GPIO_Init>
}
 80057a6:	e022      	b.n	80057ee <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM9)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1a      	ldr	r2, [pc, #104]	; (8005818 <HAL_TIM_MspPostInit+0x228>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d11d      	bne.n	80057ee <HAL_TIM_MspPostInit+0x1fe>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80057b2:	2300      	movs	r3, #0
 80057b4:	60bb      	str	r3, [r7, #8]
 80057b6:	4b11      	ldr	r3, [pc, #68]	; (80057fc <HAL_TIM_MspPostInit+0x20c>)
 80057b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ba:	4a10      	ldr	r2, [pc, #64]	; (80057fc <HAL_TIM_MspPostInit+0x20c>)
 80057bc:	f043 0310 	orr.w	r3, r3, #16
 80057c0:	6313      	str	r3, [r2, #48]	; 0x30
 80057c2:	4b0e      	ldr	r3, [pc, #56]	; (80057fc <HAL_TIM_MspPostInit+0x20c>)
 80057c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c6:	f003 0310 	and.w	r3, r3, #16
 80057ca:	60bb      	str	r3, [r7, #8]
 80057cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80057ce:	2320      	movs	r3, #32
 80057d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057d2:	2302      	movs	r3, #2
 80057d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057da:	2300      	movs	r3, #0
 80057dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80057de:	2303      	movs	r3, #3
 80057e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80057e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057e6:	4619      	mov	r1, r3
 80057e8:	480c      	ldr	r0, [pc, #48]	; (800581c <HAL_TIM_MspPostInit+0x22c>)
 80057ea:	f000 ffe9 	bl	80067c0 <HAL_GPIO_Init>
}
 80057ee:	bf00      	nop
 80057f0:	3738      	adds	r7, #56	; 0x38
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	40010000 	.word	0x40010000
 80057fc:	40023800 	.word	0x40023800
 8005800:	40020000 	.word	0x40020000
 8005804:	40020400 	.word	0x40020400
 8005808:	40000400 	.word	0x40000400
 800580c:	40020800 	.word	0x40020800
 8005810:	40000800 	.word	0x40000800
 8005814:	40020c00 	.word	0x40020c00
 8005818:	40014000 	.word	0x40014000
 800581c:	40021000 	.word	0x40021000

08005820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08e      	sub	sp, #56	; 0x38
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	605a      	str	r2, [r3, #4]
 8005832:	609a      	str	r2, [r3, #8]
 8005834:	60da      	str	r2, [r3, #12]
 8005836:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a63      	ldr	r2, [pc, #396]	; (80059cc <HAL_UART_MspInit+0x1ac>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d134      	bne.n	80058ac <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005842:	2300      	movs	r3, #0
 8005844:	623b      	str	r3, [r7, #32]
 8005846:	4b62      	ldr	r3, [pc, #392]	; (80059d0 <HAL_UART_MspInit+0x1b0>)
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	4a61      	ldr	r2, [pc, #388]	; (80059d0 <HAL_UART_MspInit+0x1b0>)
 800584c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005850:	6413      	str	r3, [r2, #64]	; 0x40
 8005852:	4b5f      	ldr	r3, [pc, #380]	; (80059d0 <HAL_UART_MspInit+0x1b0>)
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585a:	623b      	str	r3, [r7, #32]
 800585c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800585e:	2300      	movs	r3, #0
 8005860:	61fb      	str	r3, [r7, #28]
 8005862:	4b5b      	ldr	r3, [pc, #364]	; (80059d0 <HAL_UART_MspInit+0x1b0>)
 8005864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005866:	4a5a      	ldr	r2, [pc, #360]	; (80059d0 <HAL_UART_MspInit+0x1b0>)
 8005868:	f043 0301 	orr.w	r3, r3, #1
 800586c:	6313      	str	r3, [r2, #48]	; 0x30
 800586e:	4b58      	ldr	r3, [pc, #352]	; (80059d0 <HAL_UART_MspInit+0x1b0>)
 8005870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	61fb      	str	r3, [r7, #28]
 8005878:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800587a:	230c      	movs	r3, #12
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800587e:	2302      	movs	r3, #2
 8005880:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005882:	2300      	movs	r3, #0
 8005884:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005886:	2303      	movs	r3, #3
 8005888:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800588a:	2307      	movs	r3, #7
 800588c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800588e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005892:	4619      	mov	r1, r3
 8005894:	484f      	ldr	r0, [pc, #316]	; (80059d4 <HAL_UART_MspInit+0x1b4>)
 8005896:	f000 ff93 	bl	80067c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800589a:	2200      	movs	r2, #0
 800589c:	2100      	movs	r1, #0
 800589e:	2026      	movs	r0, #38	; 0x26
 80058a0:	f000 fec5 	bl	800662e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80058a4:	2026      	movs	r0, #38	; 0x26
 80058a6:	f000 fede 	bl	8006666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80058aa:	e08a      	b.n	80059c2 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART3)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a49      	ldr	r2, [pc, #292]	; (80059d8 <HAL_UART_MspInit+0x1b8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d14c      	bne.n	8005950 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART3_CLK_ENABLE();
 80058b6:	2300      	movs	r3, #0
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	4b45      	ldr	r3, [pc, #276]	; (80059d0 <HAL_UART_MspInit+0x1b0>)
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	4a44      	ldr	r2, [pc, #272]	; (80059d0 <HAL_UART_MspInit+0x1b0>)
 80058c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058c4:	6413      	str	r3, [r2, #64]	; 0x40
 80058c6:	4b42      	ldr	r3, [pc, #264]	; (80059d0 <HAL_UART_MspInit+0x1b0>)
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058ce:	61bb      	str	r3, [r7, #24]
 80058d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058d2:	2300      	movs	r3, #0
 80058d4:	617b      	str	r3, [r7, #20]
 80058d6:	4b3e      	ldr	r3, [pc, #248]	; (80059d0 <HAL_UART_MspInit+0x1b0>)
 80058d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058da:	4a3d      	ldr	r2, [pc, #244]	; (80059d0 <HAL_UART_MspInit+0x1b0>)
 80058dc:	f043 0302 	orr.w	r3, r3, #2
 80058e0:	6313      	str	r3, [r2, #48]	; 0x30
 80058e2:	4b3b      	ldr	r3, [pc, #236]	; (80059d0 <HAL_UART_MspInit+0x1b0>)
 80058e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	617b      	str	r3, [r7, #20]
 80058ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80058ee:	2300      	movs	r3, #0
 80058f0:	613b      	str	r3, [r7, #16]
 80058f2:	4b37      	ldr	r3, [pc, #220]	; (80059d0 <HAL_UART_MspInit+0x1b0>)
 80058f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f6:	4a36      	ldr	r2, [pc, #216]	; (80059d0 <HAL_UART_MspInit+0x1b0>)
 80058f8:	f043 0308 	orr.w	r3, r3, #8
 80058fc:	6313      	str	r3, [r2, #48]	; 0x30
 80058fe:	4b34      	ldr	r3, [pc, #208]	; (80059d0 <HAL_UART_MspInit+0x1b0>)
 8005900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	613b      	str	r3, [r7, #16]
 8005908:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800590a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800590e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005910:	2302      	movs	r3, #2
 8005912:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005914:	2300      	movs	r3, #0
 8005916:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005918:	2303      	movs	r3, #3
 800591a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800591c:	2307      	movs	r3, #7
 800591e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005924:	4619      	mov	r1, r3
 8005926:	482d      	ldr	r0, [pc, #180]	; (80059dc <HAL_UART_MspInit+0x1bc>)
 8005928:	f000 ff4a 	bl	80067c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800592c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005932:	2302      	movs	r3, #2
 8005934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005936:	2300      	movs	r3, #0
 8005938:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800593a:	2303      	movs	r3, #3
 800593c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800593e:	2307      	movs	r3, #7
 8005940:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005946:	4619      	mov	r1, r3
 8005948:	4825      	ldr	r0, [pc, #148]	; (80059e0 <HAL_UART_MspInit+0x1c0>)
 800594a:	f000 ff39 	bl	80067c0 <HAL_GPIO_Init>
}
 800594e:	e038      	b.n	80059c2 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART6)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a23      	ldr	r2, [pc, #140]	; (80059e4 <HAL_UART_MspInit+0x1c4>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d133      	bne.n	80059c2 <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	4b1c      	ldr	r3, [pc, #112]	; (80059d0 <HAL_UART_MspInit+0x1b0>)
 8005960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005962:	4a1b      	ldr	r2, [pc, #108]	; (80059d0 <HAL_UART_MspInit+0x1b0>)
 8005964:	f043 0320 	orr.w	r3, r3, #32
 8005968:	6453      	str	r3, [r2, #68]	; 0x44
 800596a:	4b19      	ldr	r3, [pc, #100]	; (80059d0 <HAL_UART_MspInit+0x1b0>)
 800596c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005976:	2300      	movs	r3, #0
 8005978:	60bb      	str	r3, [r7, #8]
 800597a:	4b15      	ldr	r3, [pc, #84]	; (80059d0 <HAL_UART_MspInit+0x1b0>)
 800597c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597e:	4a14      	ldr	r2, [pc, #80]	; (80059d0 <HAL_UART_MspInit+0x1b0>)
 8005980:	f043 0304 	orr.w	r3, r3, #4
 8005984:	6313      	str	r3, [r2, #48]	; 0x30
 8005986:	4b12      	ldr	r3, [pc, #72]	; (80059d0 <HAL_UART_MspInit+0x1b0>)
 8005988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	60bb      	str	r3, [r7, #8]
 8005990:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005992:	23c0      	movs	r3, #192	; 0xc0
 8005994:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005996:	2302      	movs	r3, #2
 8005998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800599a:	2300      	movs	r3, #0
 800599c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800599e:	2303      	movs	r3, #3
 80059a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80059a2:	2308      	movs	r3, #8
 80059a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059aa:	4619      	mov	r1, r3
 80059ac:	480e      	ldr	r0, [pc, #56]	; (80059e8 <HAL_UART_MspInit+0x1c8>)
 80059ae:	f000 ff07 	bl	80067c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80059b2:	2200      	movs	r2, #0
 80059b4:	2100      	movs	r1, #0
 80059b6:	2047      	movs	r0, #71	; 0x47
 80059b8:	f000 fe39 	bl	800662e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80059bc:	2047      	movs	r0, #71	; 0x47
 80059be:	f000 fe52 	bl	8006666 <HAL_NVIC_EnableIRQ>
}
 80059c2:	bf00      	nop
 80059c4:	3738      	adds	r7, #56	; 0x38
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	40004400 	.word	0x40004400
 80059d0:	40023800 	.word	0x40023800
 80059d4:	40020000 	.word	0x40020000
 80059d8:	40004800 	.word	0x40004800
 80059dc:	40020400 	.word	0x40020400
 80059e0:	40020c00 	.word	0x40020c00
 80059e4:	40011400 	.word	0x40011400
 80059e8:	40020800 	.word	0x40020800

080059ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80059ec:	b480      	push	{r7}
 80059ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80059f0:	e7fe      	b.n	80059f0 <NMI_Handler+0x4>

080059f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80059f2:	b480      	push	{r7}
 80059f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80059f6:	e7fe      	b.n	80059f6 <HardFault_Handler+0x4>

080059f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80059f8:	b480      	push	{r7}
 80059fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80059fc:	e7fe      	b.n	80059fc <MemManage_Handler+0x4>

080059fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80059fe:	b480      	push	{r7}
 8005a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a02:	e7fe      	b.n	8005a02 <BusFault_Handler+0x4>

08005a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a04:	b480      	push	{r7}
 8005a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a08:	e7fe      	b.n	8005a08 <UsageFault_Handler+0x4>

08005a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005a0e:	bf00      	nop
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a1c:	bf00      	nop
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005a26:	b480      	push	{r7}
 8005a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a2a:	bf00      	nop
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a38:	f000 f90e 	bl	8005c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a3c:	bf00      	nop
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005a44:	2001      	movs	r0, #1
 8005a46:	f001 f889 	bl	8006b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005a4a:	bf00      	nop
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005a52:	2002      	movs	r0, #2
 8005a54:	f001 f882 	bl	8006b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005a58:	bf00      	nop
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005a60:	2008      	movs	r0, #8
 8005a62:	f001 f87b 	bl	8006b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005a66:	bf00      	nop
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005a6e:	2010      	movs	r0, #16
 8005a70:	f001 f874 	bl	8006b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005a74:	bf00      	nop
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8005a7c:	2040      	movs	r0, #64	; 0x40
 8005a7e:	f001 f86d 	bl	8006b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005a82:	bf00      	nop
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UART_isr(&huart2);
 8005a8c:	4803      	ldr	r0, [pc, #12]	; (8005a9c <USART2_IRQHandler+0x14>)
 8005a8e:	f7fd fa21 	bl	8002ed4 <UART_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005a92:	4802      	ldr	r0, [pc, #8]	; (8005a9c <USART2_IRQHandler+0x14>)
 8005a94:	f003 f9fe 	bl	8008e94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005a98:	bf00      	nop
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	20001068 	.word	0x20001068

08005aa0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005aa4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005aa8:	f001 f858 	bl	8006b5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005aac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005ab0:	f001 f854 	bl	8006b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005ab4:	bf00      	nop
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	UART_isr(&huart6);
 8005abc:	4803      	ldr	r0, [pc, #12]	; (8005acc <USART6_IRQHandler+0x14>)
 8005abe:	f7fd fa09 	bl	8002ed4 <UART_isr>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005ac2:	4802      	ldr	r0, [pc, #8]	; (8005acc <USART6_IRQHandler+0x14>)
 8005ac4:	f003 f9e6 	bl	8008e94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005ac8:	bf00      	nop
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	20000fdc 	.word	0x20000fdc

08005ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ad8:	4a14      	ldr	r2, [pc, #80]	; (8005b2c <_sbrk+0x5c>)
 8005ada:	4b15      	ldr	r3, [pc, #84]	; (8005b30 <_sbrk+0x60>)
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ae4:	4b13      	ldr	r3, [pc, #76]	; (8005b34 <_sbrk+0x64>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d102      	bne.n	8005af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005aec:	4b11      	ldr	r3, [pc, #68]	; (8005b34 <_sbrk+0x64>)
 8005aee:	4a12      	ldr	r2, [pc, #72]	; (8005b38 <_sbrk+0x68>)
 8005af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005af2:	4b10      	ldr	r3, [pc, #64]	; (8005b34 <_sbrk+0x64>)
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4413      	add	r3, r2
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d207      	bcs.n	8005b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005b00:	f004 f850 	bl	8009ba4 <__errno>
 8005b04:	4603      	mov	r3, r0
 8005b06:	220c      	movs	r2, #12
 8005b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b0e:	e009      	b.n	8005b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005b10:	4b08      	ldr	r3, [pc, #32]	; (8005b34 <_sbrk+0x64>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005b16:	4b07      	ldr	r3, [pc, #28]	; (8005b34 <_sbrk+0x64>)
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	4a05      	ldr	r2, [pc, #20]	; (8005b34 <_sbrk+0x64>)
 8005b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005b22:	68fb      	ldr	r3, [r7, #12]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3718      	adds	r7, #24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	20020000 	.word	0x20020000
 8005b30:	00000400 	.word	0x00000400
 8005b34:	200008f8 	.word	0x200008f8
 8005b38:	200010c8 	.word	0x200010c8

08005b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b40:	4b06      	ldr	r3, [pc, #24]	; (8005b5c <SystemInit+0x20>)
 8005b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b46:	4a05      	ldr	r2, [pc, #20]	; (8005b5c <SystemInit+0x20>)
 8005b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005b50:	bf00      	nop
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	e000ed00 	.word	0xe000ed00

08005b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005b64:	480d      	ldr	r0, [pc, #52]	; (8005b9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005b66:	490e      	ldr	r1, [pc, #56]	; (8005ba0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005b68:	4a0e      	ldr	r2, [pc, #56]	; (8005ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b6c:	e002      	b.n	8005b74 <LoopCopyDataInit>

08005b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b72:	3304      	adds	r3, #4

08005b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b78:	d3f9      	bcc.n	8005b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b7a:	4a0b      	ldr	r2, [pc, #44]	; (8005ba8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005b7c:	4c0b      	ldr	r4, [pc, #44]	; (8005bac <LoopFillZerobss+0x26>)
  movs r3, #0
 8005b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b80:	e001      	b.n	8005b86 <LoopFillZerobss>

08005b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b84:	3204      	adds	r2, #4

08005b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b88:	d3fb      	bcc.n	8005b82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005b8a:	f7ff ffd7 	bl	8005b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b8e:	f004 f80f 	bl	8009bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b92:	f7fd fea3 	bl	80038dc <main>
  bx  lr    
 8005b96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005b98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ba0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8005ba4:	0800d2a4 	.word	0x0800d2a4
  ldr r2, =_sbss
 8005ba8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8005bac:	200010c8 	.word	0x200010c8

08005bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005bb0:	e7fe      	b.n	8005bb0 <ADC_IRQHandler>
	...

08005bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005bb8:	4b0e      	ldr	r3, [pc, #56]	; (8005bf4 <HAL_Init+0x40>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a0d      	ldr	r2, [pc, #52]	; (8005bf4 <HAL_Init+0x40>)
 8005bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005bc4:	4b0b      	ldr	r3, [pc, #44]	; (8005bf4 <HAL_Init+0x40>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a0a      	ldr	r2, [pc, #40]	; (8005bf4 <HAL_Init+0x40>)
 8005bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005bce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005bd0:	4b08      	ldr	r3, [pc, #32]	; (8005bf4 <HAL_Init+0x40>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a07      	ldr	r2, [pc, #28]	; (8005bf4 <HAL_Init+0x40>)
 8005bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005bdc:	2003      	movs	r0, #3
 8005bde:	f000 fd1b 	bl	8006618 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005be2:	2000      	movs	r0, #0
 8005be4:	f000 f808 	bl	8005bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005be8:	f7ff fb30 	bl	800524c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	40023c00 	.word	0x40023c00

08005bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005c00:	4b12      	ldr	r3, [pc, #72]	; (8005c4c <HAL_InitTick+0x54>)
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	4b12      	ldr	r3, [pc, #72]	; (8005c50 <HAL_InitTick+0x58>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	4619      	mov	r1, r3
 8005c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 fd33 	bl	8006682 <HAL_SYSTICK_Config>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e00e      	b.n	8005c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b0f      	cmp	r3, #15
 8005c2a:	d80a      	bhi.n	8005c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	6879      	ldr	r1, [r7, #4]
 8005c30:	f04f 30ff 	mov.w	r0, #4294967295
 8005c34:	f000 fcfb 	bl	800662e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005c38:	4a06      	ldr	r2, [pc, #24]	; (8005c54 <HAL_InitTick+0x5c>)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e000      	b.n	8005c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	20000000 	.word	0x20000000
 8005c50:	20000008 	.word	0x20000008
 8005c54:	20000004 	.word	0x20000004

08005c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c5c:	4b06      	ldr	r3, [pc, #24]	; (8005c78 <HAL_IncTick+0x20>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	461a      	mov	r2, r3
 8005c62:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <HAL_IncTick+0x24>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4413      	add	r3, r2
 8005c68:	4a04      	ldr	r2, [pc, #16]	; (8005c7c <HAL_IncTick+0x24>)
 8005c6a:	6013      	str	r3, [r2, #0]
}
 8005c6c:	bf00      	nop
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	20000008 	.word	0x20000008
 8005c7c:	200010b4 	.word	0x200010b4

08005c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0
  return uwTick;
 8005c84:	4b03      	ldr	r3, [pc, #12]	; (8005c94 <HAL_GetTick+0x14>)
 8005c86:	681b      	ldr	r3, [r3, #0]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	200010b4 	.word	0x200010b4

08005c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ca0:	f7ff ffee 	bl	8005c80 <HAL_GetTick>
 8005ca4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb0:	d005      	beq.n	8005cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005cb2:	4b0a      	ldr	r3, [pc, #40]	; (8005cdc <HAL_Delay+0x44>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4413      	add	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005cbe:	bf00      	nop
 8005cc0:	f7ff ffde 	bl	8005c80 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d8f7      	bhi.n	8005cc0 <HAL_Delay+0x28>
  {
  }
}
 8005cd0:	bf00      	nop
 8005cd2:	bf00      	nop
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	20000008 	.word	0x20000008

08005ce0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e033      	b.n	8005d5e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d109      	bne.n	8005d12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7ff facc 	bl	800529c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	f003 0310 	and.w	r3, r3, #16
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d118      	bne.n	8005d50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005d26:	f023 0302 	bic.w	r3, r3, #2
 8005d2a:	f043 0202 	orr.w	r2, r3, #2
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 faa4 	bl	8006280 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	f023 0303 	bic.w	r3, r3, #3
 8005d46:	f043 0201 	orr.w	r2, r3, #1
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	641a      	str	r2, [r3, #64]	; 0x40
 8005d4e:	e001      	b.n	8005d54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
	...

08005d68 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005d70:	2300      	movs	r3, #0
 8005d72:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d101      	bne.n	8005d82 <HAL_ADC_Start+0x1a>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	e0b2      	b.n	8005ee8 <HAL_ADC_Start+0x180>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d018      	beq.n	8005dca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689a      	ldr	r2, [r3, #8]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0201 	orr.w	r2, r2, #1
 8005da6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005da8:	4b52      	ldr	r3, [pc, #328]	; (8005ef4 <HAL_ADC_Start+0x18c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a52      	ldr	r2, [pc, #328]	; (8005ef8 <HAL_ADC_Start+0x190>)
 8005dae:	fba2 2303 	umull	r2, r3, r2, r3
 8005db2:	0c9a      	lsrs	r2, r3, #18
 8005db4:	4613      	mov	r3, r2
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	4413      	add	r3, r2
 8005dba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005dbc:	e002      	b.n	8005dc4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1f9      	bne.n	8005dbe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d17a      	bne.n	8005ece <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ddc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005de0:	f023 0301 	bic.w	r3, r3, #1
 8005de4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d007      	beq.n	8005e0a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005e02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e16:	d106      	bne.n	8005e26 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e1c:	f023 0206 	bic.w	r2, r3, #6
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	645a      	str	r2, [r3, #68]	; 0x44
 8005e24:	e002      	b.n	8005e2c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e34:	4b31      	ldr	r3, [pc, #196]	; (8005efc <HAL_ADC_Start+0x194>)
 8005e36:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005e40:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f003 031f 	and.w	r3, r3, #31
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d12a      	bne.n	8005ea4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a2b      	ldr	r2, [pc, #172]	; (8005f00 <HAL_ADC_Start+0x198>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d015      	beq.n	8005e84 <HAL_ADC_Start+0x11c>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a29      	ldr	r2, [pc, #164]	; (8005f04 <HAL_ADC_Start+0x19c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d105      	bne.n	8005e6e <HAL_ADC_Start+0x106>
 8005e62:	4b26      	ldr	r3, [pc, #152]	; (8005efc <HAL_ADC_Start+0x194>)
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f003 031f 	and.w	r3, r3, #31
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a25      	ldr	r2, [pc, #148]	; (8005f08 <HAL_ADC_Start+0x1a0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d136      	bne.n	8005ee6 <HAL_ADC_Start+0x17e>
 8005e78:	4b20      	ldr	r3, [pc, #128]	; (8005efc <HAL_ADC_Start+0x194>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f003 0310 	and.w	r3, r3, #16
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d130      	bne.n	8005ee6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d129      	bne.n	8005ee6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005ea0:	609a      	str	r2, [r3, #8]
 8005ea2:	e020      	b.n	8005ee6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a15      	ldr	r2, [pc, #84]	; (8005f00 <HAL_ADC_Start+0x198>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d11b      	bne.n	8005ee6 <HAL_ADC_Start+0x17e>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d114      	bne.n	8005ee6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005eca:	609a      	str	r2, [r3, #8]
 8005ecc:	e00b      	b.n	8005ee6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed2:	f043 0210 	orr.w	r2, r3, #16
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ede:	f043 0201 	orr.w	r2, r3, #1
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	20000000 	.word	0x20000000
 8005ef8:	431bde83 	.word	0x431bde83
 8005efc:	40012300 	.word	0x40012300
 8005f00:	40012000 	.word	0x40012000
 8005f04:	40012100 	.word	0x40012100
 8005f08:	40012200 	.word	0x40012200

08005f0c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f28:	d113      	bne.n	8005f52 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f38:	d10b      	bne.n	8005f52 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	f043 0220 	orr.w	r2, r3, #32
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e063      	b.n	800601a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005f52:	f7ff fe95 	bl	8005c80 <HAL_GetTick>
 8005f56:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005f58:	e021      	b.n	8005f9e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f60:	d01d      	beq.n	8005f9e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d007      	beq.n	8005f78 <HAL_ADC_PollForConversion+0x6c>
 8005f68:	f7ff fe8a 	bl	8005c80 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d212      	bcs.n	8005f9e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d00b      	beq.n	8005f9e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	f043 0204 	orr.w	r2, r3, #4
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e03d      	b.n	800601a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d1d6      	bne.n	8005f5a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f06f 0212 	mvn.w	r2, #18
 8005fb4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d123      	bne.n	8006018 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d11f      	bne.n	8006018 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fde:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d006      	beq.n	8005ff4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d111      	bne.n	8006018 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006004:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d105      	bne.n	8006018 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006010:	f043 0201 	orr.w	r2, r3, #1
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006022:	b480      	push	{r7}
 8006024:	b083      	sub	sp, #12
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006030:	4618      	mov	r0, r3
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006050:	2b01      	cmp	r3, #1
 8006052:	d101      	bne.n	8006058 <HAL_ADC_ConfigChannel+0x1c>
 8006054:	2302      	movs	r3, #2
 8006056:	e105      	b.n	8006264 <HAL_ADC_ConfigChannel+0x228>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b09      	cmp	r3, #9
 8006066:	d925      	bls.n	80060b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68d9      	ldr	r1, [r3, #12]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	b29b      	uxth	r3, r3
 8006074:	461a      	mov	r2, r3
 8006076:	4613      	mov	r3, r2
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	4413      	add	r3, r2
 800607c:	3b1e      	subs	r3, #30
 800607e:	2207      	movs	r2, #7
 8006080:	fa02 f303 	lsl.w	r3, r2, r3
 8006084:	43da      	mvns	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	400a      	ands	r2, r1
 800608c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68d9      	ldr	r1, [r3, #12]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	b29b      	uxth	r3, r3
 800609e:	4618      	mov	r0, r3
 80060a0:	4603      	mov	r3, r0
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	4403      	add	r3, r0
 80060a6:	3b1e      	subs	r3, #30
 80060a8:	409a      	lsls	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	430a      	orrs	r2, r1
 80060b0:	60da      	str	r2, [r3, #12]
 80060b2:	e022      	b.n	80060fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6919      	ldr	r1, [r3, #16]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	b29b      	uxth	r3, r3
 80060c0:	461a      	mov	r2, r3
 80060c2:	4613      	mov	r3, r2
 80060c4:	005b      	lsls	r3, r3, #1
 80060c6:	4413      	add	r3, r2
 80060c8:	2207      	movs	r2, #7
 80060ca:	fa02 f303 	lsl.w	r3, r2, r3
 80060ce:	43da      	mvns	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	400a      	ands	r2, r1
 80060d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6919      	ldr	r1, [r3, #16]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	689a      	ldr	r2, [r3, #8]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	4618      	mov	r0, r3
 80060ea:	4603      	mov	r3, r0
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	4403      	add	r3, r0
 80060f0:	409a      	lsls	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2b06      	cmp	r3, #6
 8006100:	d824      	bhi.n	800614c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	4613      	mov	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	3b05      	subs	r3, #5
 8006114:	221f      	movs	r2, #31
 8006116:	fa02 f303 	lsl.w	r3, r2, r3
 800611a:	43da      	mvns	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	400a      	ands	r2, r1
 8006122:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	b29b      	uxth	r3, r3
 8006130:	4618      	mov	r0, r3
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	4613      	mov	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	3b05      	subs	r3, #5
 800613e:	fa00 f203 	lsl.w	r2, r0, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	635a      	str	r2, [r3, #52]	; 0x34
 800614a:	e04c      	b.n	80061e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	2b0c      	cmp	r3, #12
 8006152:	d824      	bhi.n	800619e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	4613      	mov	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	3b23      	subs	r3, #35	; 0x23
 8006166:	221f      	movs	r2, #31
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	43da      	mvns	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	400a      	ands	r2, r1
 8006174:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	b29b      	uxth	r3, r3
 8006182:	4618      	mov	r0, r3
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	3b23      	subs	r3, #35	; 0x23
 8006190:	fa00 f203 	lsl.w	r2, r0, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	631a      	str	r2, [r3, #48]	; 0x30
 800619c:	e023      	b.n	80061e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	3b41      	subs	r3, #65	; 0x41
 80061b0:	221f      	movs	r2, #31
 80061b2:	fa02 f303 	lsl.w	r3, r2, r3
 80061b6:	43da      	mvns	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	400a      	ands	r2, r1
 80061be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	4618      	mov	r0, r3
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	4613      	mov	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	3b41      	subs	r3, #65	; 0x41
 80061da:	fa00 f203 	lsl.w	r2, r0, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80061e6:	4b22      	ldr	r3, [pc, #136]	; (8006270 <HAL_ADC_ConfigChannel+0x234>)
 80061e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a21      	ldr	r2, [pc, #132]	; (8006274 <HAL_ADC_ConfigChannel+0x238>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d109      	bne.n	8006208 <HAL_ADC_ConfigChannel+0x1cc>
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b12      	cmp	r3, #18
 80061fa:	d105      	bne.n	8006208 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a19      	ldr	r2, [pc, #100]	; (8006274 <HAL_ADC_ConfigChannel+0x238>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d123      	bne.n	800625a <HAL_ADC_ConfigChannel+0x21e>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b10      	cmp	r3, #16
 8006218:	d003      	beq.n	8006222 <HAL_ADC_ConfigChannel+0x1e6>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b11      	cmp	r3, #17
 8006220:	d11b      	bne.n	800625a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b10      	cmp	r3, #16
 8006234:	d111      	bne.n	800625a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006236:	4b10      	ldr	r3, [pc, #64]	; (8006278 <HAL_ADC_ConfigChannel+0x23c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a10      	ldr	r2, [pc, #64]	; (800627c <HAL_ADC_ConfigChannel+0x240>)
 800623c:	fba2 2303 	umull	r2, r3, r2, r3
 8006240:	0c9a      	lsrs	r2, r3, #18
 8006242:	4613      	mov	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800624c:	e002      	b.n	8006254 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	3b01      	subs	r3, #1
 8006252:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1f9      	bne.n	800624e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	40012300 	.word	0x40012300
 8006274:	40012000 	.word	0x40012000
 8006278:	20000000 	.word	0x20000000
 800627c:	431bde83 	.word	0x431bde83

08006280 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006288:	4b79      	ldr	r3, [pc, #484]	; (8006470 <ADC_Init+0x1f0>)
 800628a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	431a      	orrs	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6859      	ldr	r1, [r3, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	021a      	lsls	r2, r3, #8
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80062d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6859      	ldr	r1, [r3, #4]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689a      	ldr	r2, [r3, #8]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6899      	ldr	r1, [r3, #8]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68da      	ldr	r2, [r3, #12]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006312:	4a58      	ldr	r2, [pc, #352]	; (8006474 <ADC_Init+0x1f4>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d022      	beq.n	800635e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006326:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6899      	ldr	r1, [r3, #8]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689a      	ldr	r2, [r3, #8]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006348:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6899      	ldr	r1, [r3, #8]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	609a      	str	r2, [r3, #8]
 800635c:	e00f      	b.n	800637e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800636c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800637c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0202 	bic.w	r2, r2, #2
 800638c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6899      	ldr	r1, [r3, #8]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	7e1b      	ldrb	r3, [r3, #24]
 8006398:	005a      	lsls	r2, r3, #1
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d01b      	beq.n	80063e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80063ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6859      	ldr	r1, [r3, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	3b01      	subs	r3, #1
 80063d8:	035a      	lsls	r2, r3, #13
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	605a      	str	r2, [r3, #4]
 80063e2:	e007      	b.n	80063f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006402:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	3b01      	subs	r3, #1
 8006410:	051a      	lsls	r2, r3, #20
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006428:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6899      	ldr	r1, [r3, #8]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006436:	025a      	lsls	r2, r3, #9
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689a      	ldr	r2, [r3, #8]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800644e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6899      	ldr	r1, [r3, #8]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	029a      	lsls	r2, r3, #10
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	609a      	str	r2, [r3, #8]
}
 8006464:	bf00      	nop
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	40012300 	.word	0x40012300
 8006474:	0f000001 	.word	0x0f000001

08006478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006488:	4b0c      	ldr	r3, [pc, #48]	; (80064bc <__NVIC_SetPriorityGrouping+0x44>)
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006494:	4013      	ands	r3, r2
 8006496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80064a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064aa:	4a04      	ldr	r2, [pc, #16]	; (80064bc <__NVIC_SetPriorityGrouping+0x44>)
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	60d3      	str	r3, [r2, #12]
}
 80064b0:	bf00      	nop
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	e000ed00 	.word	0xe000ed00

080064c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064c0:	b480      	push	{r7}
 80064c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064c4:	4b04      	ldr	r3, [pc, #16]	; (80064d8 <__NVIC_GetPriorityGrouping+0x18>)
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	0a1b      	lsrs	r3, r3, #8
 80064ca:	f003 0307 	and.w	r3, r3, #7
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	e000ed00 	.word	0xe000ed00

080064dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	4603      	mov	r3, r0
 80064e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	db0b      	blt.n	8006506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064ee:	79fb      	ldrb	r3, [r7, #7]
 80064f0:	f003 021f 	and.w	r2, r3, #31
 80064f4:	4907      	ldr	r1, [pc, #28]	; (8006514 <__NVIC_EnableIRQ+0x38>)
 80064f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064fa:	095b      	lsrs	r3, r3, #5
 80064fc:	2001      	movs	r0, #1
 80064fe:	fa00 f202 	lsl.w	r2, r0, r2
 8006502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	e000e100 	.word	0xe000e100

08006518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	4603      	mov	r3, r0
 8006520:	6039      	str	r1, [r7, #0]
 8006522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006528:	2b00      	cmp	r3, #0
 800652a:	db0a      	blt.n	8006542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	b2da      	uxtb	r2, r3
 8006530:	490c      	ldr	r1, [pc, #48]	; (8006564 <__NVIC_SetPriority+0x4c>)
 8006532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006536:	0112      	lsls	r2, r2, #4
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	440b      	add	r3, r1
 800653c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006540:	e00a      	b.n	8006558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	b2da      	uxtb	r2, r3
 8006546:	4908      	ldr	r1, [pc, #32]	; (8006568 <__NVIC_SetPriority+0x50>)
 8006548:	79fb      	ldrb	r3, [r7, #7]
 800654a:	f003 030f 	and.w	r3, r3, #15
 800654e:	3b04      	subs	r3, #4
 8006550:	0112      	lsls	r2, r2, #4
 8006552:	b2d2      	uxtb	r2, r2
 8006554:	440b      	add	r3, r1
 8006556:	761a      	strb	r2, [r3, #24]
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	e000e100 	.word	0xe000e100
 8006568:	e000ed00 	.word	0xe000ed00

0800656c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800656c:	b480      	push	{r7}
 800656e:	b089      	sub	sp, #36	; 0x24
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f003 0307 	and.w	r3, r3, #7
 800657e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	f1c3 0307 	rsb	r3, r3, #7
 8006586:	2b04      	cmp	r3, #4
 8006588:	bf28      	it	cs
 800658a:	2304      	movcs	r3, #4
 800658c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	3304      	adds	r3, #4
 8006592:	2b06      	cmp	r3, #6
 8006594:	d902      	bls.n	800659c <NVIC_EncodePriority+0x30>
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	3b03      	subs	r3, #3
 800659a:	e000      	b.n	800659e <NVIC_EncodePriority+0x32>
 800659c:	2300      	movs	r3, #0
 800659e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065a0:	f04f 32ff 	mov.w	r2, #4294967295
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	fa02 f303 	lsl.w	r3, r2, r3
 80065aa:	43da      	mvns	r2, r3
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	401a      	ands	r2, r3
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065b4:	f04f 31ff 	mov.w	r1, #4294967295
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	fa01 f303 	lsl.w	r3, r1, r3
 80065be:	43d9      	mvns	r1, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065c4:	4313      	orrs	r3, r2
         );
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3724      	adds	r7, #36	; 0x24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
	...

080065d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	3b01      	subs	r3, #1
 80065e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065e4:	d301      	bcc.n	80065ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80065e6:	2301      	movs	r3, #1
 80065e8:	e00f      	b.n	800660a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065ea:	4a0a      	ldr	r2, [pc, #40]	; (8006614 <SysTick_Config+0x40>)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3b01      	subs	r3, #1
 80065f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065f2:	210f      	movs	r1, #15
 80065f4:	f04f 30ff 	mov.w	r0, #4294967295
 80065f8:	f7ff ff8e 	bl	8006518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065fc:	4b05      	ldr	r3, [pc, #20]	; (8006614 <SysTick_Config+0x40>)
 80065fe:	2200      	movs	r2, #0
 8006600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006602:	4b04      	ldr	r3, [pc, #16]	; (8006614 <SysTick_Config+0x40>)
 8006604:	2207      	movs	r2, #7
 8006606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	e000e010 	.word	0xe000e010

08006618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7ff ff29 	bl	8006478 <__NVIC_SetPriorityGrouping>
}
 8006626:	bf00      	nop
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800662e:	b580      	push	{r7, lr}
 8006630:	b086      	sub	sp, #24
 8006632:	af00      	add	r7, sp, #0
 8006634:	4603      	mov	r3, r0
 8006636:	60b9      	str	r1, [r7, #8]
 8006638:	607a      	str	r2, [r7, #4]
 800663a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800663c:	2300      	movs	r3, #0
 800663e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006640:	f7ff ff3e 	bl	80064c0 <__NVIC_GetPriorityGrouping>
 8006644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	68b9      	ldr	r1, [r7, #8]
 800664a:	6978      	ldr	r0, [r7, #20]
 800664c:	f7ff ff8e 	bl	800656c <NVIC_EncodePriority>
 8006650:	4602      	mov	r2, r0
 8006652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006656:	4611      	mov	r1, r2
 8006658:	4618      	mov	r0, r3
 800665a:	f7ff ff5d 	bl	8006518 <__NVIC_SetPriority>
}
 800665e:	bf00      	nop
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b082      	sub	sp, #8
 800666a:	af00      	add	r7, sp, #0
 800666c:	4603      	mov	r3, r0
 800666e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006674:	4618      	mov	r0, r3
 8006676:	f7ff ff31 	bl	80064dc <__NVIC_EnableIRQ>
}
 800667a:	bf00      	nop
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b082      	sub	sp, #8
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7ff ffa2 	bl	80065d4 <SysTick_Config>
 8006690:	4603      	mov	r3, r0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80066a8:	f7ff faea 	bl	8005c80 <HAL_GetTick>
 80066ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d008      	beq.n	80066cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2280      	movs	r2, #128	; 0x80
 80066be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e052      	b.n	8006772 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0216 	bic.w	r2, r2, #22
 80066da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695a      	ldr	r2, [r3, #20]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d103      	bne.n	80066fc <HAL_DMA_Abort+0x62>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d007      	beq.n	800670c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 0208 	bic.w	r2, r2, #8
 800670a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0201 	bic.w	r2, r2, #1
 800671a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800671c:	e013      	b.n	8006746 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800671e:	f7ff faaf 	bl	8005c80 <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	2b05      	cmp	r3, #5
 800672a:	d90c      	bls.n	8006746 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2220      	movs	r2, #32
 8006730:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2203      	movs	r2, #3
 8006736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e015      	b.n	8006772 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1e4      	bne.n	800671e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006758:	223f      	movs	r2, #63	; 0x3f
 800675a:	409a      	lsls	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800677a:	b480      	push	{r7}
 800677c:	b083      	sub	sp, #12
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b02      	cmp	r3, #2
 800678c:	d004      	beq.n	8006798 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2280      	movs	r2, #128	; 0x80
 8006792:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e00c      	b.n	80067b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2205      	movs	r2, #5
 800679c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0201 	bic.w	r2, r2, #1
 80067ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
	...

080067c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b089      	sub	sp, #36	; 0x24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80067ce:	2300      	movs	r3, #0
 80067d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067d6:	2300      	movs	r3, #0
 80067d8:	61fb      	str	r3, [r7, #28]
 80067da:	e16b      	b.n	8006ab4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80067dc:	2201      	movs	r2, #1
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	fa02 f303 	lsl.w	r3, r2, r3
 80067e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	4013      	ands	r3, r2
 80067ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	f040 815a 	bne.w	8006aae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f003 0303 	and.w	r3, r3, #3
 8006802:	2b01      	cmp	r3, #1
 8006804:	d005      	beq.n	8006812 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800680e:	2b02      	cmp	r3, #2
 8006810:	d130      	bne.n	8006874 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	005b      	lsls	r3, r3, #1
 800681c:	2203      	movs	r2, #3
 800681e:	fa02 f303 	lsl.w	r3, r2, r3
 8006822:	43db      	mvns	r3, r3
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	4013      	ands	r3, r2
 8006828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	68da      	ldr	r2, [r3, #12]
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	005b      	lsls	r3, r3, #1
 8006832:	fa02 f303 	lsl.w	r3, r2, r3
 8006836:	69ba      	ldr	r2, [r7, #24]
 8006838:	4313      	orrs	r3, r2
 800683a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006848:	2201      	movs	r2, #1
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	fa02 f303 	lsl.w	r3, r2, r3
 8006850:	43db      	mvns	r3, r3
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	4013      	ands	r3, r2
 8006856:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	091b      	lsrs	r3, r3, #4
 800685e:	f003 0201 	and.w	r2, r3, #1
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	fa02 f303 	lsl.w	r3, r2, r3
 8006868:	69ba      	ldr	r2, [r7, #24]
 800686a:	4313      	orrs	r3, r2
 800686c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69ba      	ldr	r2, [r7, #24]
 8006872:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f003 0303 	and.w	r3, r3, #3
 800687c:	2b03      	cmp	r3, #3
 800687e:	d017      	beq.n	80068b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	005b      	lsls	r3, r3, #1
 800688a:	2203      	movs	r2, #3
 800688c:	fa02 f303 	lsl.w	r3, r2, r3
 8006890:	43db      	mvns	r3, r3
 8006892:	69ba      	ldr	r2, [r7, #24]
 8006894:	4013      	ands	r3, r2
 8006896:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	689a      	ldr	r2, [r3, #8]
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	005b      	lsls	r3, r3, #1
 80068a0:	fa02 f303 	lsl.w	r3, r2, r3
 80068a4:	69ba      	ldr	r2, [r7, #24]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f003 0303 	and.w	r3, r3, #3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d123      	bne.n	8006904 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	08da      	lsrs	r2, r3, #3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3208      	adds	r2, #8
 80068c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	f003 0307 	and.w	r3, r3, #7
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	220f      	movs	r2, #15
 80068d4:	fa02 f303 	lsl.w	r3, r2, r3
 80068d8:	43db      	mvns	r3, r3
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	4013      	ands	r3, r2
 80068de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	691a      	ldr	r2, [r3, #16]
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	f003 0307 	and.w	r3, r3, #7
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	fa02 f303 	lsl.w	r3, r2, r3
 80068f0:	69ba      	ldr	r2, [r7, #24]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	08da      	lsrs	r2, r3, #3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3208      	adds	r2, #8
 80068fe:	69b9      	ldr	r1, [r7, #24]
 8006900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	005b      	lsls	r3, r3, #1
 800690e:	2203      	movs	r2, #3
 8006910:	fa02 f303 	lsl.w	r3, r2, r3
 8006914:	43db      	mvns	r3, r3
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	4013      	ands	r3, r2
 800691a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f003 0203 	and.w	r2, r3, #3
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	005b      	lsls	r3, r3, #1
 8006928:	fa02 f303 	lsl.w	r3, r2, r3
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	4313      	orrs	r3, r2
 8006930:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	69ba      	ldr	r2, [r7, #24]
 8006936:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006940:	2b00      	cmp	r3, #0
 8006942:	f000 80b4 	beq.w	8006aae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006946:	2300      	movs	r3, #0
 8006948:	60fb      	str	r3, [r7, #12]
 800694a:	4b60      	ldr	r3, [pc, #384]	; (8006acc <HAL_GPIO_Init+0x30c>)
 800694c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694e:	4a5f      	ldr	r2, [pc, #380]	; (8006acc <HAL_GPIO_Init+0x30c>)
 8006950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006954:	6453      	str	r3, [r2, #68]	; 0x44
 8006956:	4b5d      	ldr	r3, [pc, #372]	; (8006acc <HAL_GPIO_Init+0x30c>)
 8006958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800695a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800695e:	60fb      	str	r3, [r7, #12]
 8006960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006962:	4a5b      	ldr	r2, [pc, #364]	; (8006ad0 <HAL_GPIO_Init+0x310>)
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	089b      	lsrs	r3, r3, #2
 8006968:	3302      	adds	r3, #2
 800696a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800696e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	f003 0303 	and.w	r3, r3, #3
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	220f      	movs	r2, #15
 800697a:	fa02 f303 	lsl.w	r3, r2, r3
 800697e:	43db      	mvns	r3, r3
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	4013      	ands	r3, r2
 8006984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a52      	ldr	r2, [pc, #328]	; (8006ad4 <HAL_GPIO_Init+0x314>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d02b      	beq.n	80069e6 <HAL_GPIO_Init+0x226>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a51      	ldr	r2, [pc, #324]	; (8006ad8 <HAL_GPIO_Init+0x318>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d025      	beq.n	80069e2 <HAL_GPIO_Init+0x222>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a50      	ldr	r2, [pc, #320]	; (8006adc <HAL_GPIO_Init+0x31c>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d01f      	beq.n	80069de <HAL_GPIO_Init+0x21e>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a4f      	ldr	r2, [pc, #316]	; (8006ae0 <HAL_GPIO_Init+0x320>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d019      	beq.n	80069da <HAL_GPIO_Init+0x21a>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a4e      	ldr	r2, [pc, #312]	; (8006ae4 <HAL_GPIO_Init+0x324>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d013      	beq.n	80069d6 <HAL_GPIO_Init+0x216>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a4d      	ldr	r2, [pc, #308]	; (8006ae8 <HAL_GPIO_Init+0x328>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d00d      	beq.n	80069d2 <HAL_GPIO_Init+0x212>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a4c      	ldr	r2, [pc, #304]	; (8006aec <HAL_GPIO_Init+0x32c>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d007      	beq.n	80069ce <HAL_GPIO_Init+0x20e>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a4b      	ldr	r2, [pc, #300]	; (8006af0 <HAL_GPIO_Init+0x330>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d101      	bne.n	80069ca <HAL_GPIO_Init+0x20a>
 80069c6:	2307      	movs	r3, #7
 80069c8:	e00e      	b.n	80069e8 <HAL_GPIO_Init+0x228>
 80069ca:	2308      	movs	r3, #8
 80069cc:	e00c      	b.n	80069e8 <HAL_GPIO_Init+0x228>
 80069ce:	2306      	movs	r3, #6
 80069d0:	e00a      	b.n	80069e8 <HAL_GPIO_Init+0x228>
 80069d2:	2305      	movs	r3, #5
 80069d4:	e008      	b.n	80069e8 <HAL_GPIO_Init+0x228>
 80069d6:	2304      	movs	r3, #4
 80069d8:	e006      	b.n	80069e8 <HAL_GPIO_Init+0x228>
 80069da:	2303      	movs	r3, #3
 80069dc:	e004      	b.n	80069e8 <HAL_GPIO_Init+0x228>
 80069de:	2302      	movs	r3, #2
 80069e0:	e002      	b.n	80069e8 <HAL_GPIO_Init+0x228>
 80069e2:	2301      	movs	r3, #1
 80069e4:	e000      	b.n	80069e8 <HAL_GPIO_Init+0x228>
 80069e6:	2300      	movs	r3, #0
 80069e8:	69fa      	ldr	r2, [r7, #28]
 80069ea:	f002 0203 	and.w	r2, r2, #3
 80069ee:	0092      	lsls	r2, r2, #2
 80069f0:	4093      	lsls	r3, r2
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80069f8:	4935      	ldr	r1, [pc, #212]	; (8006ad0 <HAL_GPIO_Init+0x310>)
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	089b      	lsrs	r3, r3, #2
 80069fe:	3302      	adds	r3, #2
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006a06:	4b3b      	ldr	r3, [pc, #236]	; (8006af4 <HAL_GPIO_Init+0x334>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	43db      	mvns	r3, r3
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	4013      	ands	r3, r2
 8006a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006a2a:	4a32      	ldr	r2, [pc, #200]	; (8006af4 <HAL_GPIO_Init+0x334>)
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006a30:	4b30      	ldr	r3, [pc, #192]	; (8006af4 <HAL_GPIO_Init+0x334>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	43db      	mvns	r3, r3
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006a54:	4a27      	ldr	r2, [pc, #156]	; (8006af4 <HAL_GPIO_Init+0x334>)
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006a5a:	4b26      	ldr	r3, [pc, #152]	; (8006af4 <HAL_GPIO_Init+0x334>)
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	43db      	mvns	r3, r3
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	4013      	ands	r3, r2
 8006a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006a76:	69ba      	ldr	r2, [r7, #24]
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006a7e:	4a1d      	ldr	r2, [pc, #116]	; (8006af4 <HAL_GPIO_Init+0x334>)
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006a84:	4b1b      	ldr	r3, [pc, #108]	; (8006af4 <HAL_GPIO_Init+0x334>)
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	43db      	mvns	r3, r3
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	4013      	ands	r3, r2
 8006a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006aa8:	4a12      	ldr	r2, [pc, #72]	; (8006af4 <HAL_GPIO_Init+0x334>)
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	61fb      	str	r3, [r7, #28]
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	2b0f      	cmp	r3, #15
 8006ab8:	f67f ae90 	bls.w	80067dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006abc:	bf00      	nop
 8006abe:	bf00      	nop
 8006ac0:	3724      	adds	r7, #36	; 0x24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	40023800 	.word	0x40023800
 8006ad0:	40013800 	.word	0x40013800
 8006ad4:	40020000 	.word	0x40020000
 8006ad8:	40020400 	.word	0x40020400
 8006adc:	40020800 	.word	0x40020800
 8006ae0:	40020c00 	.word	0x40020c00
 8006ae4:	40021000 	.word	0x40021000
 8006ae8:	40021400 	.word	0x40021400
 8006aec:	40021800 	.word	0x40021800
 8006af0:	40021c00 	.word	0x40021c00
 8006af4:	40013c00 	.word	0x40013c00

08006af8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	460b      	mov	r3, r1
 8006b02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	691a      	ldr	r2, [r3, #16]
 8006b08:	887b      	ldrh	r3, [r7, #2]
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b10:	2301      	movs	r3, #1
 8006b12:	73fb      	strb	r3, [r7, #15]
 8006b14:	e001      	b.n	8006b1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b16:	2300      	movs	r3, #0
 8006b18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	807b      	strh	r3, [r7, #2]
 8006b34:	4613      	mov	r3, r2
 8006b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006b38:	787b      	ldrb	r3, [r7, #1]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b3e:	887a      	ldrh	r2, [r7, #2]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006b44:	e003      	b.n	8006b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006b46:	887b      	ldrh	r3, [r7, #2]
 8006b48:	041a      	lsls	r2, r3, #16
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	619a      	str	r2, [r3, #24]
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
	...

08006b5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	4603      	mov	r3, r0
 8006b64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006b66:	4b08      	ldr	r3, [pc, #32]	; (8006b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b68:	695a      	ldr	r2, [r3, #20]
 8006b6a:	88fb      	ldrh	r3, [r7, #6]
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d006      	beq.n	8006b80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b72:	4a05      	ldr	r2, [pc, #20]	; (8006b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b74:	88fb      	ldrh	r3, [r7, #6]
 8006b76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b78:	88fb      	ldrh	r3, [r7, #6]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fc fe28 	bl	80037d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006b80:	bf00      	nop
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	40013c00 	.word	0x40013c00

08006b8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e12b      	b.n	8006df6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d106      	bne.n	8006bb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7fe fc1a 	bl	80053ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2224      	movs	r2, #36	; 0x24
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f022 0201 	bic.w	r2, r2, #1
 8006bce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006bee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006bf0:	f001 f864 	bl	8007cbc <HAL_RCC_GetPCLK1Freq>
 8006bf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	4a81      	ldr	r2, [pc, #516]	; (8006e00 <HAL_I2C_Init+0x274>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d807      	bhi.n	8006c10 <HAL_I2C_Init+0x84>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4a80      	ldr	r2, [pc, #512]	; (8006e04 <HAL_I2C_Init+0x278>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	bf94      	ite	ls
 8006c08:	2301      	movls	r3, #1
 8006c0a:	2300      	movhi	r3, #0
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	e006      	b.n	8006c1e <HAL_I2C_Init+0x92>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4a7d      	ldr	r2, [pc, #500]	; (8006e08 <HAL_I2C_Init+0x27c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	bf94      	ite	ls
 8006c18:	2301      	movls	r3, #1
 8006c1a:	2300      	movhi	r3, #0
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e0e7      	b.n	8006df6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	4a78      	ldr	r2, [pc, #480]	; (8006e0c <HAL_I2C_Init+0x280>)
 8006c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c2e:	0c9b      	lsrs	r3, r3, #18
 8006c30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	4a6a      	ldr	r2, [pc, #424]	; (8006e00 <HAL_I2C_Init+0x274>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d802      	bhi.n	8006c60 <HAL_I2C_Init+0xd4>
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	e009      	b.n	8006c74 <HAL_I2C_Init+0xe8>
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006c66:	fb02 f303 	mul.w	r3, r2, r3
 8006c6a:	4a69      	ldr	r2, [pc, #420]	; (8006e10 <HAL_I2C_Init+0x284>)
 8006c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c70:	099b      	lsrs	r3, r3, #6
 8006c72:	3301      	adds	r3, #1
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	6812      	ldr	r2, [r2, #0]
 8006c78:	430b      	orrs	r3, r1
 8006c7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006c86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	495c      	ldr	r1, [pc, #368]	; (8006e00 <HAL_I2C_Init+0x274>)
 8006c90:	428b      	cmp	r3, r1
 8006c92:	d819      	bhi.n	8006cc8 <HAL_I2C_Init+0x13c>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	1e59      	subs	r1, r3, #1
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ca2:	1c59      	adds	r1, r3, #1
 8006ca4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006ca8:	400b      	ands	r3, r1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00a      	beq.n	8006cc4 <HAL_I2C_Init+0x138>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	1e59      	subs	r1, r3, #1
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	005b      	lsls	r3, r3, #1
 8006cb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cc2:	e051      	b.n	8006d68 <HAL_I2C_Init+0x1dc>
 8006cc4:	2304      	movs	r3, #4
 8006cc6:	e04f      	b.n	8006d68 <HAL_I2C_Init+0x1dc>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d111      	bne.n	8006cf4 <HAL_I2C_Init+0x168>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	1e58      	subs	r0, r3, #1
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6859      	ldr	r1, [r3, #4]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	440b      	add	r3, r1
 8006cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	bf0c      	ite	eq
 8006cec:	2301      	moveq	r3, #1
 8006cee:	2300      	movne	r3, #0
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	e012      	b.n	8006d1a <HAL_I2C_Init+0x18e>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	1e58      	subs	r0, r3, #1
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6859      	ldr	r1, [r3, #4]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	440b      	add	r3, r1
 8006d02:	0099      	lsls	r1, r3, #2
 8006d04:	440b      	add	r3, r1
 8006d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	bf0c      	ite	eq
 8006d14:	2301      	moveq	r3, #1
 8006d16:	2300      	movne	r3, #0
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d001      	beq.n	8006d22 <HAL_I2C_Init+0x196>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e022      	b.n	8006d68 <HAL_I2C_Init+0x1dc>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10e      	bne.n	8006d48 <HAL_I2C_Init+0x1bc>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	1e58      	subs	r0, r3, #1
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6859      	ldr	r1, [r3, #4]
 8006d32:	460b      	mov	r3, r1
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	440b      	add	r3, r1
 8006d38:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d46:	e00f      	b.n	8006d68 <HAL_I2C_Init+0x1dc>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	1e58      	subs	r0, r3, #1
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6859      	ldr	r1, [r3, #4]
 8006d50:	460b      	mov	r3, r1
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	440b      	add	r3, r1
 8006d56:	0099      	lsls	r1, r3, #2
 8006d58:	440b      	add	r3, r1
 8006d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d5e:	3301      	adds	r3, #1
 8006d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d68:	6879      	ldr	r1, [r7, #4]
 8006d6a:	6809      	ldr	r1, [r1, #0]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	69da      	ldr	r2, [r3, #28]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006d96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	6911      	ldr	r1, [r2, #16]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	68d2      	ldr	r2, [r2, #12]
 8006da2:	4311      	orrs	r1, r2
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	6812      	ldr	r2, [r2, #0]
 8006da8:	430b      	orrs	r3, r1
 8006daa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	695a      	ldr	r2, [r3, #20]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0201 	orr.w	r2, r2, #1
 8006dd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2220      	movs	r2, #32
 8006de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	000186a0 	.word	0x000186a0
 8006e04:	001e847f 	.word	0x001e847f
 8006e08:	003d08ff 	.word	0x003d08ff
 8006e0c:	431bde83 	.word	0x431bde83
 8006e10:	10624dd3 	.word	0x10624dd3

08006e14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af02      	add	r7, sp, #8
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	607a      	str	r2, [r7, #4]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	460b      	mov	r3, r1
 8006e22:	817b      	strh	r3, [r7, #10]
 8006e24:	4613      	mov	r3, r2
 8006e26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006e28:	f7fe ff2a 	bl	8005c80 <HAL_GetTick>
 8006e2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b20      	cmp	r3, #32
 8006e38:	f040 80e0 	bne.w	8006ffc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	2319      	movs	r3, #25
 8006e42:	2201      	movs	r2, #1
 8006e44:	4970      	ldr	r1, [pc, #448]	; (8007008 <HAL_I2C_Master_Transmit+0x1f4>)
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f000 f964 	bl	8007114 <I2C_WaitOnFlagUntilTimeout>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006e52:	2302      	movs	r3, #2
 8006e54:	e0d3      	b.n	8006ffe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <HAL_I2C_Master_Transmit+0x50>
 8006e60:	2302      	movs	r3, #2
 8006e62:	e0cc      	b.n	8006ffe <HAL_I2C_Master_Transmit+0x1ea>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d007      	beq.n	8006e8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f042 0201 	orr.w	r2, r2, #1
 8006e88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2221      	movs	r2, #33	; 0x21
 8006e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2210      	movs	r2, #16
 8006ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	893a      	ldrh	r2, [r7, #8]
 8006eba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4a50      	ldr	r2, [pc, #320]	; (800700c <HAL_I2C_Master_Transmit+0x1f8>)
 8006eca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006ecc:	8979      	ldrh	r1, [r7, #10]
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	6a3a      	ldr	r2, [r7, #32]
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 f89c 	bl	8007010 <I2C_MasterRequestWrite>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e08d      	b.n	8006ffe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	613b      	str	r3, [r7, #16]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	613b      	str	r3, [r7, #16]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	613b      	str	r3, [r7, #16]
 8006ef6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006ef8:	e066      	b.n	8006fc8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	6a39      	ldr	r1, [r7, #32]
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f000 f9de 	bl	80072c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00d      	beq.n	8006f26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	d107      	bne.n	8006f22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e06b      	b.n	8006ffe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2a:	781a      	ldrb	r2, [r3, #0]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	f003 0304 	and.w	r3, r3, #4
 8006f60:	2b04      	cmp	r3, #4
 8006f62:	d11b      	bne.n	8006f9c <HAL_I2C_Master_Transmit+0x188>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d017      	beq.n	8006f9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f70:	781a      	ldrb	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7c:	1c5a      	adds	r2, r3, #1
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f94:	3b01      	subs	r3, #1
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	6a39      	ldr	r1, [r7, #32]
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f000 f9ce 	bl	8007342 <I2C_WaitOnBTFFlagUntilTimeout>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00d      	beq.n	8006fc8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb0:	2b04      	cmp	r3, #4
 8006fb2:	d107      	bne.n	8006fc4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fc2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e01a      	b.n	8006ffe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d194      	bne.n	8006efa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	e000      	b.n	8006ffe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006ffc:	2302      	movs	r3, #2
  }
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	00100002 	.word	0x00100002
 800700c:	ffff0000 	.word	0xffff0000

08007010 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b088      	sub	sp, #32
 8007014:	af02      	add	r7, sp, #8
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	607a      	str	r2, [r7, #4]
 800701a:	603b      	str	r3, [r7, #0]
 800701c:	460b      	mov	r3, r1
 800701e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007024:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2b08      	cmp	r3, #8
 800702a:	d006      	beq.n	800703a <I2C_MasterRequestWrite+0x2a>
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d003      	beq.n	800703a <I2C_MasterRequestWrite+0x2a>
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007038:	d108      	bne.n	800704c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	e00b      	b.n	8007064 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007050:	2b12      	cmp	r3, #18
 8007052:	d107      	bne.n	8007064 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007062:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 f84f 	bl	8007114 <I2C_WaitOnFlagUntilTimeout>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00d      	beq.n	8007098 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800708a:	d103      	bne.n	8007094 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007092:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e035      	b.n	8007104 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070a0:	d108      	bne.n	80070b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070a2:	897b      	ldrh	r3, [r7, #10]
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	461a      	mov	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070b0:	611a      	str	r2, [r3, #16]
 80070b2:	e01b      	b.n	80070ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80070b4:	897b      	ldrh	r3, [r7, #10]
 80070b6:	11db      	asrs	r3, r3, #7
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	f003 0306 	and.w	r3, r3, #6
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	f063 030f 	orn	r3, r3, #15
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	490e      	ldr	r1, [pc, #56]	; (800710c <I2C_MasterRequestWrite+0xfc>)
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f000 f875 	bl	80071c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d001      	beq.n	80070e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e010      	b.n	8007104 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80070e2:	897b      	ldrh	r3, [r7, #10]
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	4907      	ldr	r1, [pc, #28]	; (8007110 <I2C_MasterRequestWrite+0x100>)
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f000 f865 	bl	80071c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e000      	b.n	8007104 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	00010008 	.word	0x00010008
 8007110:	00010002 	.word	0x00010002

08007114 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	603b      	str	r3, [r7, #0]
 8007120:	4613      	mov	r3, r2
 8007122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007124:	e025      	b.n	8007172 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800712c:	d021      	beq.n	8007172 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800712e:	f7fe fda7 	bl	8005c80 <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	429a      	cmp	r2, r3
 800713c:	d302      	bcc.n	8007144 <I2C_WaitOnFlagUntilTimeout+0x30>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d116      	bne.n	8007172 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2220      	movs	r2, #32
 800714e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715e:	f043 0220 	orr.w	r2, r3, #32
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e023      	b.n	80071ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	0c1b      	lsrs	r3, r3, #16
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b01      	cmp	r3, #1
 800717a:	d10d      	bne.n	8007198 <I2C_WaitOnFlagUntilTimeout+0x84>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	43da      	mvns	r2, r3
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	4013      	ands	r3, r2
 8007188:	b29b      	uxth	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	bf0c      	ite	eq
 800718e:	2301      	moveq	r3, #1
 8007190:	2300      	movne	r3, #0
 8007192:	b2db      	uxtb	r3, r3
 8007194:	461a      	mov	r2, r3
 8007196:	e00c      	b.n	80071b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	43da      	mvns	r2, r3
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	4013      	ands	r3, r2
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	bf0c      	ite	eq
 80071aa:	2301      	moveq	r3, #1
 80071ac:	2300      	movne	r3, #0
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	461a      	mov	r2, r3
 80071b2:	79fb      	ldrb	r3, [r7, #7]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d0b6      	beq.n	8007126 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b084      	sub	sp, #16
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	60f8      	str	r0, [r7, #12]
 80071ca:	60b9      	str	r1, [r7, #8]
 80071cc:	607a      	str	r2, [r7, #4]
 80071ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80071d0:	e051      	b.n	8007276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071e0:	d123      	bne.n	800722a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2220      	movs	r2, #32
 8007206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007216:	f043 0204 	orr.w	r2, r3, #4
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e046      	b.n	80072b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007230:	d021      	beq.n	8007276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007232:	f7fe fd25 	bl	8005c80 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	429a      	cmp	r2, r3
 8007240:	d302      	bcc.n	8007248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d116      	bne.n	8007276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2220      	movs	r2, #32
 8007252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	f043 0220 	orr.w	r2, r3, #32
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e020      	b.n	80072b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	0c1b      	lsrs	r3, r3, #16
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b01      	cmp	r3, #1
 800727e:	d10c      	bne.n	800729a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	43da      	mvns	r2, r3
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	4013      	ands	r3, r2
 800728c:	b29b      	uxth	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	bf14      	ite	ne
 8007292:	2301      	movne	r3, #1
 8007294:	2300      	moveq	r3, #0
 8007296:	b2db      	uxtb	r3, r3
 8007298:	e00b      	b.n	80072b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	43da      	mvns	r2, r3
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	4013      	ands	r3, r2
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	bf14      	ite	ne
 80072ac:	2301      	movne	r3, #1
 80072ae:	2300      	moveq	r3, #0
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d18d      	bne.n	80071d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072cc:	e02d      	b.n	800732a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f000 f878 	bl	80073c4 <I2C_IsAcknowledgeFailed>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d001      	beq.n	80072de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e02d      	b.n	800733a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e4:	d021      	beq.n	800732a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072e6:	f7fe fccb 	bl	8005c80 <HAL_GetTick>
 80072ea:	4602      	mov	r2, r0
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d302      	bcc.n	80072fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d116      	bne.n	800732a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2220      	movs	r2, #32
 8007306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	f043 0220 	orr.w	r2, r3, #32
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e007      	b.n	800733a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	695b      	ldr	r3, [r3, #20]
 8007330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007334:	2b80      	cmp	r3, #128	; 0x80
 8007336:	d1ca      	bne.n	80072ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b084      	sub	sp, #16
 8007346:	af00      	add	r7, sp, #0
 8007348:	60f8      	str	r0, [r7, #12]
 800734a:	60b9      	str	r1, [r7, #8]
 800734c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800734e:	e02d      	b.n	80073ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 f837 	bl	80073c4 <I2C_IsAcknowledgeFailed>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e02d      	b.n	80073bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007366:	d021      	beq.n	80073ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007368:	f7fe fc8a 	bl	8005c80 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	429a      	cmp	r2, r3
 8007376:	d302      	bcc.n	800737e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d116      	bne.n	80073ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2220      	movs	r2, #32
 8007388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007398:	f043 0220 	orr.w	r2, r3, #32
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e007      	b.n	80073bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	f003 0304 	and.w	r3, r3, #4
 80073b6:	2b04      	cmp	r3, #4
 80073b8:	d1ca      	bne.n	8007350 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073da:	d11b      	bne.n	8007414 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80073e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2220      	movs	r2, #32
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007400:	f043 0204 	orr.w	r2, r3, #4
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e000      	b.n	8007416 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
	...

08007424 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e264      	b.n	8007900 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	2b00      	cmp	r3, #0
 8007440:	d075      	beq.n	800752e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007442:	4ba3      	ldr	r3, [pc, #652]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f003 030c 	and.w	r3, r3, #12
 800744a:	2b04      	cmp	r3, #4
 800744c:	d00c      	beq.n	8007468 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800744e:	4ba0      	ldr	r3, [pc, #640]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007456:	2b08      	cmp	r3, #8
 8007458:	d112      	bne.n	8007480 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800745a:	4b9d      	ldr	r3, [pc, #628]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007466:	d10b      	bne.n	8007480 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007468:	4b99      	ldr	r3, [pc, #612]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d05b      	beq.n	800752c <HAL_RCC_OscConfig+0x108>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d157      	bne.n	800752c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e23f      	b.n	8007900 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007488:	d106      	bne.n	8007498 <HAL_RCC_OscConfig+0x74>
 800748a:	4b91      	ldr	r3, [pc, #580]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a90      	ldr	r2, [pc, #576]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 8007490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007494:	6013      	str	r3, [r2, #0]
 8007496:	e01d      	b.n	80074d4 <HAL_RCC_OscConfig+0xb0>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074a0:	d10c      	bne.n	80074bc <HAL_RCC_OscConfig+0x98>
 80074a2:	4b8b      	ldr	r3, [pc, #556]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a8a      	ldr	r2, [pc, #552]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 80074a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074ac:	6013      	str	r3, [r2, #0]
 80074ae:	4b88      	ldr	r3, [pc, #544]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a87      	ldr	r2, [pc, #540]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 80074b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074b8:	6013      	str	r3, [r2, #0]
 80074ba:	e00b      	b.n	80074d4 <HAL_RCC_OscConfig+0xb0>
 80074bc:	4b84      	ldr	r3, [pc, #528]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a83      	ldr	r2, [pc, #524]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 80074c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	4b81      	ldr	r3, [pc, #516]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a80      	ldr	r2, [pc, #512]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 80074ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d013      	beq.n	8007504 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074dc:	f7fe fbd0 	bl	8005c80 <HAL_GetTick>
 80074e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074e2:	e008      	b.n	80074f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074e4:	f7fe fbcc 	bl	8005c80 <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	2b64      	cmp	r3, #100	; 0x64
 80074f0:	d901      	bls.n	80074f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e204      	b.n	8007900 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074f6:	4b76      	ldr	r3, [pc, #472]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d0f0      	beq.n	80074e4 <HAL_RCC_OscConfig+0xc0>
 8007502:	e014      	b.n	800752e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007504:	f7fe fbbc 	bl	8005c80 <HAL_GetTick>
 8007508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800750a:	e008      	b.n	800751e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800750c:	f7fe fbb8 	bl	8005c80 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b64      	cmp	r3, #100	; 0x64
 8007518:	d901      	bls.n	800751e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e1f0      	b.n	8007900 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800751e:	4b6c      	ldr	r3, [pc, #432]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1f0      	bne.n	800750c <HAL_RCC_OscConfig+0xe8>
 800752a:	e000      	b.n	800752e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800752c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	2b00      	cmp	r3, #0
 8007538:	d063      	beq.n	8007602 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800753a:	4b65      	ldr	r3, [pc, #404]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f003 030c 	and.w	r3, r3, #12
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00b      	beq.n	800755e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007546:	4b62      	ldr	r3, [pc, #392]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800754e:	2b08      	cmp	r3, #8
 8007550:	d11c      	bne.n	800758c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007552:	4b5f      	ldr	r3, [pc, #380]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d116      	bne.n	800758c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800755e:	4b5c      	ldr	r3, [pc, #368]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0302 	and.w	r3, r3, #2
 8007566:	2b00      	cmp	r3, #0
 8007568:	d005      	beq.n	8007576 <HAL_RCC_OscConfig+0x152>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d001      	beq.n	8007576 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e1c4      	b.n	8007900 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007576:	4b56      	ldr	r3, [pc, #344]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	00db      	lsls	r3, r3, #3
 8007584:	4952      	ldr	r1, [pc, #328]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 8007586:	4313      	orrs	r3, r2
 8007588:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800758a:	e03a      	b.n	8007602 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d020      	beq.n	80075d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007594:	4b4f      	ldr	r3, [pc, #316]	; (80076d4 <HAL_RCC_OscConfig+0x2b0>)
 8007596:	2201      	movs	r2, #1
 8007598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800759a:	f7fe fb71 	bl	8005c80 <HAL_GetTick>
 800759e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075a0:	e008      	b.n	80075b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075a2:	f7fe fb6d 	bl	8005c80 <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d901      	bls.n	80075b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e1a5      	b.n	8007900 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075b4:	4b46      	ldr	r3, [pc, #280]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0302 	and.w	r3, r3, #2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d0f0      	beq.n	80075a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075c0:	4b43      	ldr	r3, [pc, #268]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	00db      	lsls	r3, r3, #3
 80075ce:	4940      	ldr	r1, [pc, #256]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	600b      	str	r3, [r1, #0]
 80075d4:	e015      	b.n	8007602 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80075d6:	4b3f      	ldr	r3, [pc, #252]	; (80076d4 <HAL_RCC_OscConfig+0x2b0>)
 80075d8:	2200      	movs	r2, #0
 80075da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075dc:	f7fe fb50 	bl	8005c80 <HAL_GetTick>
 80075e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075e2:	e008      	b.n	80075f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075e4:	f7fe fb4c 	bl	8005c80 <HAL_GetTick>
 80075e8:	4602      	mov	r2, r0
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d901      	bls.n	80075f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e184      	b.n	8007900 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075f6:	4b36      	ldr	r3, [pc, #216]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0302 	and.w	r3, r3, #2
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1f0      	bne.n	80075e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0308 	and.w	r3, r3, #8
 800760a:	2b00      	cmp	r3, #0
 800760c:	d030      	beq.n	8007670 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d016      	beq.n	8007644 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007616:	4b30      	ldr	r3, [pc, #192]	; (80076d8 <HAL_RCC_OscConfig+0x2b4>)
 8007618:	2201      	movs	r2, #1
 800761a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800761c:	f7fe fb30 	bl	8005c80 <HAL_GetTick>
 8007620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007622:	e008      	b.n	8007636 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007624:	f7fe fb2c 	bl	8005c80 <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	2b02      	cmp	r3, #2
 8007630:	d901      	bls.n	8007636 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e164      	b.n	8007900 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007636:	4b26      	ldr	r3, [pc, #152]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 8007638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d0f0      	beq.n	8007624 <HAL_RCC_OscConfig+0x200>
 8007642:	e015      	b.n	8007670 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007644:	4b24      	ldr	r3, [pc, #144]	; (80076d8 <HAL_RCC_OscConfig+0x2b4>)
 8007646:	2200      	movs	r2, #0
 8007648:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800764a:	f7fe fb19 	bl	8005c80 <HAL_GetTick>
 800764e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007650:	e008      	b.n	8007664 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007652:	f7fe fb15 	bl	8005c80 <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	2b02      	cmp	r3, #2
 800765e:	d901      	bls.n	8007664 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e14d      	b.n	8007900 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007664:	4b1a      	ldr	r3, [pc, #104]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 8007666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007668:	f003 0302 	and.w	r3, r3, #2
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1f0      	bne.n	8007652 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0304 	and.w	r3, r3, #4
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 80a0 	beq.w	80077be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800767e:	2300      	movs	r3, #0
 8007680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007682:	4b13      	ldr	r3, [pc, #76]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 8007684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10f      	bne.n	80076ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800768e:	2300      	movs	r3, #0
 8007690:	60bb      	str	r3, [r7, #8]
 8007692:	4b0f      	ldr	r3, [pc, #60]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 8007694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007696:	4a0e      	ldr	r2, [pc, #56]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 8007698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800769c:	6413      	str	r3, [r2, #64]	; 0x40
 800769e:	4b0c      	ldr	r3, [pc, #48]	; (80076d0 <HAL_RCC_OscConfig+0x2ac>)
 80076a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076a6:	60bb      	str	r3, [r7, #8]
 80076a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076aa:	2301      	movs	r3, #1
 80076ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076ae:	4b0b      	ldr	r3, [pc, #44]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d121      	bne.n	80076fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076ba:	4b08      	ldr	r3, [pc, #32]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a07      	ldr	r2, [pc, #28]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 80076c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076c6:	f7fe fadb 	bl	8005c80 <HAL_GetTick>
 80076ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076cc:	e011      	b.n	80076f2 <HAL_RCC_OscConfig+0x2ce>
 80076ce:	bf00      	nop
 80076d0:	40023800 	.word	0x40023800
 80076d4:	42470000 	.word	0x42470000
 80076d8:	42470e80 	.word	0x42470e80
 80076dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076e0:	f7fe face 	bl	8005c80 <HAL_GetTick>
 80076e4:	4602      	mov	r2, r0
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d901      	bls.n	80076f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e106      	b.n	8007900 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076f2:	4b85      	ldr	r3, [pc, #532]	; (8007908 <HAL_RCC_OscConfig+0x4e4>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d0f0      	beq.n	80076e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d106      	bne.n	8007714 <HAL_RCC_OscConfig+0x2f0>
 8007706:	4b81      	ldr	r3, [pc, #516]	; (800790c <HAL_RCC_OscConfig+0x4e8>)
 8007708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800770a:	4a80      	ldr	r2, [pc, #512]	; (800790c <HAL_RCC_OscConfig+0x4e8>)
 800770c:	f043 0301 	orr.w	r3, r3, #1
 8007710:	6713      	str	r3, [r2, #112]	; 0x70
 8007712:	e01c      	b.n	800774e <HAL_RCC_OscConfig+0x32a>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	2b05      	cmp	r3, #5
 800771a:	d10c      	bne.n	8007736 <HAL_RCC_OscConfig+0x312>
 800771c:	4b7b      	ldr	r3, [pc, #492]	; (800790c <HAL_RCC_OscConfig+0x4e8>)
 800771e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007720:	4a7a      	ldr	r2, [pc, #488]	; (800790c <HAL_RCC_OscConfig+0x4e8>)
 8007722:	f043 0304 	orr.w	r3, r3, #4
 8007726:	6713      	str	r3, [r2, #112]	; 0x70
 8007728:	4b78      	ldr	r3, [pc, #480]	; (800790c <HAL_RCC_OscConfig+0x4e8>)
 800772a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800772c:	4a77      	ldr	r2, [pc, #476]	; (800790c <HAL_RCC_OscConfig+0x4e8>)
 800772e:	f043 0301 	orr.w	r3, r3, #1
 8007732:	6713      	str	r3, [r2, #112]	; 0x70
 8007734:	e00b      	b.n	800774e <HAL_RCC_OscConfig+0x32a>
 8007736:	4b75      	ldr	r3, [pc, #468]	; (800790c <HAL_RCC_OscConfig+0x4e8>)
 8007738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800773a:	4a74      	ldr	r2, [pc, #464]	; (800790c <HAL_RCC_OscConfig+0x4e8>)
 800773c:	f023 0301 	bic.w	r3, r3, #1
 8007740:	6713      	str	r3, [r2, #112]	; 0x70
 8007742:	4b72      	ldr	r3, [pc, #456]	; (800790c <HAL_RCC_OscConfig+0x4e8>)
 8007744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007746:	4a71      	ldr	r2, [pc, #452]	; (800790c <HAL_RCC_OscConfig+0x4e8>)
 8007748:	f023 0304 	bic.w	r3, r3, #4
 800774c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d015      	beq.n	8007782 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007756:	f7fe fa93 	bl	8005c80 <HAL_GetTick>
 800775a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800775c:	e00a      	b.n	8007774 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800775e:	f7fe fa8f 	bl	8005c80 <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	f241 3288 	movw	r2, #5000	; 0x1388
 800776c:	4293      	cmp	r3, r2
 800776e:	d901      	bls.n	8007774 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e0c5      	b.n	8007900 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007774:	4b65      	ldr	r3, [pc, #404]	; (800790c <HAL_RCC_OscConfig+0x4e8>)
 8007776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d0ee      	beq.n	800775e <HAL_RCC_OscConfig+0x33a>
 8007780:	e014      	b.n	80077ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007782:	f7fe fa7d 	bl	8005c80 <HAL_GetTick>
 8007786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007788:	e00a      	b.n	80077a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800778a:	f7fe fa79 	bl	8005c80 <HAL_GetTick>
 800778e:	4602      	mov	r2, r0
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	1ad3      	subs	r3, r2, r3
 8007794:	f241 3288 	movw	r2, #5000	; 0x1388
 8007798:	4293      	cmp	r3, r2
 800779a:	d901      	bls.n	80077a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e0af      	b.n	8007900 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077a0:	4b5a      	ldr	r3, [pc, #360]	; (800790c <HAL_RCC_OscConfig+0x4e8>)
 80077a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1ee      	bne.n	800778a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80077ac:	7dfb      	ldrb	r3, [r7, #23]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d105      	bne.n	80077be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077b2:	4b56      	ldr	r3, [pc, #344]	; (800790c <HAL_RCC_OscConfig+0x4e8>)
 80077b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b6:	4a55      	ldr	r2, [pc, #340]	; (800790c <HAL_RCC_OscConfig+0x4e8>)
 80077b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 809b 	beq.w	80078fe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80077c8:	4b50      	ldr	r3, [pc, #320]	; (800790c <HAL_RCC_OscConfig+0x4e8>)
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f003 030c 	and.w	r3, r3, #12
 80077d0:	2b08      	cmp	r3, #8
 80077d2:	d05c      	beq.n	800788e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d141      	bne.n	8007860 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077dc:	4b4c      	ldr	r3, [pc, #304]	; (8007910 <HAL_RCC_OscConfig+0x4ec>)
 80077de:	2200      	movs	r2, #0
 80077e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077e2:	f7fe fa4d 	bl	8005c80 <HAL_GetTick>
 80077e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077e8:	e008      	b.n	80077fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077ea:	f7fe fa49 	bl	8005c80 <HAL_GetTick>
 80077ee:	4602      	mov	r2, r0
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d901      	bls.n	80077fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e081      	b.n	8007900 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077fc:	4b43      	ldr	r3, [pc, #268]	; (800790c <HAL_RCC_OscConfig+0x4e8>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1f0      	bne.n	80077ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	69da      	ldr	r2, [r3, #28]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a1b      	ldr	r3, [r3, #32]
 8007810:	431a      	orrs	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007816:	019b      	lsls	r3, r3, #6
 8007818:	431a      	orrs	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781e:	085b      	lsrs	r3, r3, #1
 8007820:	3b01      	subs	r3, #1
 8007822:	041b      	lsls	r3, r3, #16
 8007824:	431a      	orrs	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782a:	061b      	lsls	r3, r3, #24
 800782c:	4937      	ldr	r1, [pc, #220]	; (800790c <HAL_RCC_OscConfig+0x4e8>)
 800782e:	4313      	orrs	r3, r2
 8007830:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007832:	4b37      	ldr	r3, [pc, #220]	; (8007910 <HAL_RCC_OscConfig+0x4ec>)
 8007834:	2201      	movs	r2, #1
 8007836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007838:	f7fe fa22 	bl	8005c80 <HAL_GetTick>
 800783c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800783e:	e008      	b.n	8007852 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007840:	f7fe fa1e 	bl	8005c80 <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	2b02      	cmp	r3, #2
 800784c:	d901      	bls.n	8007852 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	e056      	b.n	8007900 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007852:	4b2e      	ldr	r3, [pc, #184]	; (800790c <HAL_RCC_OscConfig+0x4e8>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d0f0      	beq.n	8007840 <HAL_RCC_OscConfig+0x41c>
 800785e:	e04e      	b.n	80078fe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007860:	4b2b      	ldr	r3, [pc, #172]	; (8007910 <HAL_RCC_OscConfig+0x4ec>)
 8007862:	2200      	movs	r2, #0
 8007864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007866:	f7fe fa0b 	bl	8005c80 <HAL_GetTick>
 800786a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800786c:	e008      	b.n	8007880 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800786e:	f7fe fa07 	bl	8005c80 <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	2b02      	cmp	r3, #2
 800787a:	d901      	bls.n	8007880 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e03f      	b.n	8007900 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007880:	4b22      	ldr	r3, [pc, #136]	; (800790c <HAL_RCC_OscConfig+0x4e8>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1f0      	bne.n	800786e <HAL_RCC_OscConfig+0x44a>
 800788c:	e037      	b.n	80078fe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d101      	bne.n	800789a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e032      	b.n	8007900 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800789a:	4b1c      	ldr	r3, [pc, #112]	; (800790c <HAL_RCC_OscConfig+0x4e8>)
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d028      	beq.n	80078fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d121      	bne.n	80078fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d11a      	bne.n	80078fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80078ca:	4013      	ands	r3, r2
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80078d0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d111      	bne.n	80078fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e0:	085b      	lsrs	r3, r3, #1
 80078e2:	3b01      	subs	r3, #1
 80078e4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d107      	bne.n	80078fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d001      	beq.n	80078fe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e000      	b.n	8007900 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3718      	adds	r7, #24
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	40007000 	.word	0x40007000
 800790c:	40023800 	.word	0x40023800
 8007910:	42470060 	.word	0x42470060

08007914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d101      	bne.n	8007928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e0cc      	b.n	8007ac2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007928:	4b68      	ldr	r3, [pc, #416]	; (8007acc <HAL_RCC_ClockConfig+0x1b8>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0307 	and.w	r3, r3, #7
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	429a      	cmp	r2, r3
 8007934:	d90c      	bls.n	8007950 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007936:	4b65      	ldr	r3, [pc, #404]	; (8007acc <HAL_RCC_ClockConfig+0x1b8>)
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	b2d2      	uxtb	r2, r2
 800793c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800793e:	4b63      	ldr	r3, [pc, #396]	; (8007acc <HAL_RCC_ClockConfig+0x1b8>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0307 	and.w	r3, r3, #7
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	429a      	cmp	r2, r3
 800794a:	d001      	beq.n	8007950 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e0b8      	b.n	8007ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0302 	and.w	r3, r3, #2
 8007958:	2b00      	cmp	r3, #0
 800795a:	d020      	beq.n	800799e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0304 	and.w	r3, r3, #4
 8007964:	2b00      	cmp	r3, #0
 8007966:	d005      	beq.n	8007974 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007968:	4b59      	ldr	r3, [pc, #356]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	4a58      	ldr	r2, [pc, #352]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800796e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007972:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0308 	and.w	r3, r3, #8
 800797c:	2b00      	cmp	r3, #0
 800797e:	d005      	beq.n	800798c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007980:	4b53      	ldr	r3, [pc, #332]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	4a52      	ldr	r2, [pc, #328]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8007986:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800798a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800798c:	4b50      	ldr	r3, [pc, #320]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	494d      	ldr	r1, [pc, #308]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800799a:	4313      	orrs	r3, r2
 800799c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d044      	beq.n	8007a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d107      	bne.n	80079c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079b2:	4b47      	ldr	r3, [pc, #284]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d119      	bne.n	80079f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e07f      	b.n	8007ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d003      	beq.n	80079d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80079ce:	2b03      	cmp	r3, #3
 80079d0:	d107      	bne.n	80079e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079d2:	4b3f      	ldr	r3, [pc, #252]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d109      	bne.n	80079f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e06f      	b.n	8007ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079e2:	4b3b      	ldr	r3, [pc, #236]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0302 	and.w	r3, r3, #2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d101      	bne.n	80079f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e067      	b.n	8007ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80079f2:	4b37      	ldr	r3, [pc, #220]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f023 0203 	bic.w	r2, r3, #3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	4934      	ldr	r1, [pc, #208]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a00:	4313      	orrs	r3, r2
 8007a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a04:	f7fe f93c 	bl	8005c80 <HAL_GetTick>
 8007a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a0a:	e00a      	b.n	8007a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a0c:	f7fe f938 	bl	8005c80 <HAL_GetTick>
 8007a10:	4602      	mov	r2, r0
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d901      	bls.n	8007a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e04f      	b.n	8007ac2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a22:	4b2b      	ldr	r3, [pc, #172]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f003 020c 	and.w	r2, r3, #12
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d1eb      	bne.n	8007a0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a34:	4b25      	ldr	r3, [pc, #148]	; (8007acc <HAL_RCC_ClockConfig+0x1b8>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 0307 	and.w	r3, r3, #7
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d20c      	bcs.n	8007a5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a42:	4b22      	ldr	r3, [pc, #136]	; (8007acc <HAL_RCC_ClockConfig+0x1b8>)
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	b2d2      	uxtb	r2, r2
 8007a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a4a:	4b20      	ldr	r3, [pc, #128]	; (8007acc <HAL_RCC_ClockConfig+0x1b8>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0307 	and.w	r3, r3, #7
 8007a52:	683a      	ldr	r2, [r7, #0]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d001      	beq.n	8007a5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e032      	b.n	8007ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d008      	beq.n	8007a7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a68:	4b19      	ldr	r3, [pc, #100]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	4916      	ldr	r1, [pc, #88]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 0308 	and.w	r3, r3, #8
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d009      	beq.n	8007a9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a86:	4b12      	ldr	r3, [pc, #72]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	490e      	ldr	r1, [pc, #56]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a96:	4313      	orrs	r3, r2
 8007a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007a9a:	f000 f821 	bl	8007ae0 <HAL_RCC_GetSysClockFreq>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	4b0b      	ldr	r3, [pc, #44]	; (8007ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	091b      	lsrs	r3, r3, #4
 8007aa6:	f003 030f 	and.w	r3, r3, #15
 8007aaa:	490a      	ldr	r1, [pc, #40]	; (8007ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8007aac:	5ccb      	ldrb	r3, [r1, r3]
 8007aae:	fa22 f303 	lsr.w	r3, r2, r3
 8007ab2:	4a09      	ldr	r2, [pc, #36]	; (8007ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8007ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007ab6:	4b09      	ldr	r3, [pc, #36]	; (8007adc <HAL_RCC_ClockConfig+0x1c8>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7fe f89c 	bl	8005bf8 <HAL_InitTick>

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	40023c00 	.word	0x40023c00
 8007ad0:	40023800 	.word	0x40023800
 8007ad4:	0800d224 	.word	0x0800d224
 8007ad8:	20000000 	.word	0x20000000
 8007adc:	20000004 	.word	0x20000004

08007ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ae0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007ae4:	b084      	sub	sp, #16
 8007ae6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	607b      	str	r3, [r7, #4]
 8007aec:	2300      	movs	r3, #0
 8007aee:	60fb      	str	r3, [r7, #12]
 8007af0:	2300      	movs	r3, #0
 8007af2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007af8:	4b67      	ldr	r3, [pc, #412]	; (8007c98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f003 030c 	and.w	r3, r3, #12
 8007b00:	2b08      	cmp	r3, #8
 8007b02:	d00d      	beq.n	8007b20 <HAL_RCC_GetSysClockFreq+0x40>
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	f200 80bd 	bhi.w	8007c84 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d002      	beq.n	8007b14 <HAL_RCC_GetSysClockFreq+0x34>
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	d003      	beq.n	8007b1a <HAL_RCC_GetSysClockFreq+0x3a>
 8007b12:	e0b7      	b.n	8007c84 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b14:	4b61      	ldr	r3, [pc, #388]	; (8007c9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007b16:	60bb      	str	r3, [r7, #8]
       break;
 8007b18:	e0b7      	b.n	8007c8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b1a:	4b61      	ldr	r3, [pc, #388]	; (8007ca0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007b1c:	60bb      	str	r3, [r7, #8]
      break;
 8007b1e:	e0b4      	b.n	8007c8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b20:	4b5d      	ldr	r3, [pc, #372]	; (8007c98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007b2a:	4b5b      	ldr	r3, [pc, #364]	; (8007c98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d04d      	beq.n	8007bd2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b36:	4b58      	ldr	r3, [pc, #352]	; (8007c98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	099b      	lsrs	r3, r3, #6
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	f04f 0300 	mov.w	r3, #0
 8007b42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007b46:	f04f 0100 	mov.w	r1, #0
 8007b4a:	ea02 0800 	and.w	r8, r2, r0
 8007b4e:	ea03 0901 	and.w	r9, r3, r1
 8007b52:	4640      	mov	r0, r8
 8007b54:	4649      	mov	r1, r9
 8007b56:	f04f 0200 	mov.w	r2, #0
 8007b5a:	f04f 0300 	mov.w	r3, #0
 8007b5e:	014b      	lsls	r3, r1, #5
 8007b60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007b64:	0142      	lsls	r2, r0, #5
 8007b66:	4610      	mov	r0, r2
 8007b68:	4619      	mov	r1, r3
 8007b6a:	ebb0 0008 	subs.w	r0, r0, r8
 8007b6e:	eb61 0109 	sbc.w	r1, r1, r9
 8007b72:	f04f 0200 	mov.w	r2, #0
 8007b76:	f04f 0300 	mov.w	r3, #0
 8007b7a:	018b      	lsls	r3, r1, #6
 8007b7c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007b80:	0182      	lsls	r2, r0, #6
 8007b82:	1a12      	subs	r2, r2, r0
 8007b84:	eb63 0301 	sbc.w	r3, r3, r1
 8007b88:	f04f 0000 	mov.w	r0, #0
 8007b8c:	f04f 0100 	mov.w	r1, #0
 8007b90:	00d9      	lsls	r1, r3, #3
 8007b92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b96:	00d0      	lsls	r0, r2, #3
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	eb12 0208 	adds.w	r2, r2, r8
 8007ba0:	eb43 0309 	adc.w	r3, r3, r9
 8007ba4:	f04f 0000 	mov.w	r0, #0
 8007ba8:	f04f 0100 	mov.w	r1, #0
 8007bac:	0259      	lsls	r1, r3, #9
 8007bae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007bb2:	0250      	lsls	r0, r2, #9
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	4610      	mov	r0, r2
 8007bba:	4619      	mov	r1, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	f04f 0300 	mov.w	r3, #0
 8007bc4:	f7f8 ff7a 	bl	8000abc <__aeabi_uldivmod>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	460b      	mov	r3, r1
 8007bcc:	4613      	mov	r3, r2
 8007bce:	60fb      	str	r3, [r7, #12]
 8007bd0:	e04a      	b.n	8007c68 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bd2:	4b31      	ldr	r3, [pc, #196]	; (8007c98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	099b      	lsrs	r3, r3, #6
 8007bd8:	461a      	mov	r2, r3
 8007bda:	f04f 0300 	mov.w	r3, #0
 8007bde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007be2:	f04f 0100 	mov.w	r1, #0
 8007be6:	ea02 0400 	and.w	r4, r2, r0
 8007bea:	ea03 0501 	and.w	r5, r3, r1
 8007bee:	4620      	mov	r0, r4
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	f04f 0200 	mov.w	r2, #0
 8007bf6:	f04f 0300 	mov.w	r3, #0
 8007bfa:	014b      	lsls	r3, r1, #5
 8007bfc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007c00:	0142      	lsls	r2, r0, #5
 8007c02:	4610      	mov	r0, r2
 8007c04:	4619      	mov	r1, r3
 8007c06:	1b00      	subs	r0, r0, r4
 8007c08:	eb61 0105 	sbc.w	r1, r1, r5
 8007c0c:	f04f 0200 	mov.w	r2, #0
 8007c10:	f04f 0300 	mov.w	r3, #0
 8007c14:	018b      	lsls	r3, r1, #6
 8007c16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007c1a:	0182      	lsls	r2, r0, #6
 8007c1c:	1a12      	subs	r2, r2, r0
 8007c1e:	eb63 0301 	sbc.w	r3, r3, r1
 8007c22:	f04f 0000 	mov.w	r0, #0
 8007c26:	f04f 0100 	mov.w	r1, #0
 8007c2a:	00d9      	lsls	r1, r3, #3
 8007c2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c30:	00d0      	lsls	r0, r2, #3
 8007c32:	4602      	mov	r2, r0
 8007c34:	460b      	mov	r3, r1
 8007c36:	1912      	adds	r2, r2, r4
 8007c38:	eb45 0303 	adc.w	r3, r5, r3
 8007c3c:	f04f 0000 	mov.w	r0, #0
 8007c40:	f04f 0100 	mov.w	r1, #0
 8007c44:	0299      	lsls	r1, r3, #10
 8007c46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007c4a:	0290      	lsls	r0, r2, #10
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4610      	mov	r0, r2
 8007c52:	4619      	mov	r1, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	461a      	mov	r2, r3
 8007c58:	f04f 0300 	mov.w	r3, #0
 8007c5c:	f7f8 ff2e 	bl	8000abc <__aeabi_uldivmod>
 8007c60:	4602      	mov	r2, r0
 8007c62:	460b      	mov	r3, r1
 8007c64:	4613      	mov	r3, r2
 8007c66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007c68:	4b0b      	ldr	r3, [pc, #44]	; (8007c98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	0c1b      	lsrs	r3, r3, #16
 8007c6e:	f003 0303 	and.w	r3, r3, #3
 8007c72:	3301      	adds	r3, #1
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c80:	60bb      	str	r3, [r7, #8]
      break;
 8007c82:	e002      	b.n	8007c8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c84:	4b05      	ldr	r3, [pc, #20]	; (8007c9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007c86:	60bb      	str	r3, [r7, #8]
      break;
 8007c88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007c96:	bf00      	nop
 8007c98:	40023800 	.word	0x40023800
 8007c9c:	00f42400 	.word	0x00f42400
 8007ca0:	007a1200 	.word	0x007a1200

08007ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ca8:	4b03      	ldr	r3, [pc, #12]	; (8007cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007caa:	681b      	ldr	r3, [r3, #0]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	20000000 	.word	0x20000000

08007cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007cc0:	f7ff fff0 	bl	8007ca4 <HAL_RCC_GetHCLKFreq>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	4b05      	ldr	r3, [pc, #20]	; (8007cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	0a9b      	lsrs	r3, r3, #10
 8007ccc:	f003 0307 	and.w	r3, r3, #7
 8007cd0:	4903      	ldr	r1, [pc, #12]	; (8007ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cd2:	5ccb      	ldrb	r3, [r1, r3]
 8007cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	40023800 	.word	0x40023800
 8007ce0:	0800d234 	.word	0x0800d234

08007ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ce8:	f7ff ffdc 	bl	8007ca4 <HAL_RCC_GetHCLKFreq>
 8007cec:	4602      	mov	r2, r0
 8007cee:	4b05      	ldr	r3, [pc, #20]	; (8007d04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	0b5b      	lsrs	r3, r3, #13
 8007cf4:	f003 0307 	and.w	r3, r3, #7
 8007cf8:	4903      	ldr	r1, [pc, #12]	; (8007d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007cfa:	5ccb      	ldrb	r3, [r1, r3]
 8007cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	40023800 	.word	0x40023800
 8007d08:	0800d234 	.word	0x0800d234

08007d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e041      	b.n	8007da2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d106      	bne.n	8007d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7fd fba2 	bl	800547c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3304      	adds	r3, #4
 8007d48:	4619      	mov	r1, r3
 8007d4a:	4610      	mov	r0, r2
 8007d4c:	f000 fb42 	bl	80083d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
	...

08007dac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d001      	beq.n	8007dc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e046      	b.n	8007e52 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a23      	ldr	r2, [pc, #140]	; (8007e60 <HAL_TIM_Base_Start+0xb4>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d022      	beq.n	8007e1c <HAL_TIM_Base_Start+0x70>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dde:	d01d      	beq.n	8007e1c <HAL_TIM_Base_Start+0x70>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a1f      	ldr	r2, [pc, #124]	; (8007e64 <HAL_TIM_Base_Start+0xb8>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d018      	beq.n	8007e1c <HAL_TIM_Base_Start+0x70>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a1e      	ldr	r2, [pc, #120]	; (8007e68 <HAL_TIM_Base_Start+0xbc>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d013      	beq.n	8007e1c <HAL_TIM_Base_Start+0x70>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a1c      	ldr	r2, [pc, #112]	; (8007e6c <HAL_TIM_Base_Start+0xc0>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d00e      	beq.n	8007e1c <HAL_TIM_Base_Start+0x70>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a1b      	ldr	r2, [pc, #108]	; (8007e70 <HAL_TIM_Base_Start+0xc4>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d009      	beq.n	8007e1c <HAL_TIM_Base_Start+0x70>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a19      	ldr	r2, [pc, #100]	; (8007e74 <HAL_TIM_Base_Start+0xc8>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d004      	beq.n	8007e1c <HAL_TIM_Base_Start+0x70>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a18      	ldr	r2, [pc, #96]	; (8007e78 <HAL_TIM_Base_Start+0xcc>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d111      	bne.n	8007e40 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f003 0307 	and.w	r3, r3, #7
 8007e26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2b06      	cmp	r3, #6
 8007e2c:	d010      	beq.n	8007e50 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f042 0201 	orr.w	r2, r2, #1
 8007e3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e3e:	e007      	b.n	8007e50 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f042 0201 	orr.w	r2, r2, #1
 8007e4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3714      	adds	r7, #20
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	40010000 	.word	0x40010000
 8007e64:	40000400 	.word	0x40000400
 8007e68:	40000800 	.word	0x40000800
 8007e6c:	40000c00 	.word	0x40000c00
 8007e70:	40010400 	.word	0x40010400
 8007e74:	40014000 	.word	0x40014000
 8007e78:	40001800 	.word	0x40001800

08007e7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d101      	bne.n	8007e8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e041      	b.n	8007f12 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d106      	bne.n	8007ea8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f839 	bl	8007f1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	4619      	mov	r1, r3
 8007eba:	4610      	mov	r0, r2
 8007ebc:	f000 fa8a 	bl	80083d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b083      	sub	sp, #12
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f22:	bf00      	nop
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
	...

08007f30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d109      	bne.n	8007f54 <HAL_TIM_PWM_Start+0x24>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	bf14      	ite	ne
 8007f4c:	2301      	movne	r3, #1
 8007f4e:	2300      	moveq	r3, #0
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	e022      	b.n	8007f9a <HAL_TIM_PWM_Start+0x6a>
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	2b04      	cmp	r3, #4
 8007f58:	d109      	bne.n	8007f6e <HAL_TIM_PWM_Start+0x3e>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	bf14      	ite	ne
 8007f66:	2301      	movne	r3, #1
 8007f68:	2300      	moveq	r3, #0
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	e015      	b.n	8007f9a <HAL_TIM_PWM_Start+0x6a>
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	2b08      	cmp	r3, #8
 8007f72:	d109      	bne.n	8007f88 <HAL_TIM_PWM_Start+0x58>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	bf14      	ite	ne
 8007f80:	2301      	movne	r3, #1
 8007f82:	2300      	moveq	r3, #0
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	e008      	b.n	8007f9a <HAL_TIM_PWM_Start+0x6a>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	bf14      	ite	ne
 8007f94:	2301      	movne	r3, #1
 8007f96:	2300      	moveq	r3, #0
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e07c      	b.n	800809c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d104      	bne.n	8007fb2 <HAL_TIM_PWM_Start+0x82>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2202      	movs	r2, #2
 8007fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fb0:	e013      	b.n	8007fda <HAL_TIM_PWM_Start+0xaa>
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	2b04      	cmp	r3, #4
 8007fb6:	d104      	bne.n	8007fc2 <HAL_TIM_PWM_Start+0x92>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fc0:	e00b      	b.n	8007fda <HAL_TIM_PWM_Start+0xaa>
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	2b08      	cmp	r3, #8
 8007fc6:	d104      	bne.n	8007fd2 <HAL_TIM_PWM_Start+0xa2>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2202      	movs	r2, #2
 8007fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fd0:	e003      	b.n	8007fda <HAL_TIM_PWM_Start+0xaa>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2202      	movs	r2, #2
 8007fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f000 fce0 	bl	80089a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a2d      	ldr	r2, [pc, #180]	; (80080a4 <HAL_TIM_PWM_Start+0x174>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d004      	beq.n	8007ffc <HAL_TIM_PWM_Start+0xcc>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a2c      	ldr	r2, [pc, #176]	; (80080a8 <HAL_TIM_PWM_Start+0x178>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d101      	bne.n	8008000 <HAL_TIM_PWM_Start+0xd0>
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e000      	b.n	8008002 <HAL_TIM_PWM_Start+0xd2>
 8008000:	2300      	movs	r3, #0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d007      	beq.n	8008016 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008014:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a22      	ldr	r2, [pc, #136]	; (80080a4 <HAL_TIM_PWM_Start+0x174>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d022      	beq.n	8008066 <HAL_TIM_PWM_Start+0x136>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008028:	d01d      	beq.n	8008066 <HAL_TIM_PWM_Start+0x136>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a1f      	ldr	r2, [pc, #124]	; (80080ac <HAL_TIM_PWM_Start+0x17c>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d018      	beq.n	8008066 <HAL_TIM_PWM_Start+0x136>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a1d      	ldr	r2, [pc, #116]	; (80080b0 <HAL_TIM_PWM_Start+0x180>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d013      	beq.n	8008066 <HAL_TIM_PWM_Start+0x136>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a1c      	ldr	r2, [pc, #112]	; (80080b4 <HAL_TIM_PWM_Start+0x184>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d00e      	beq.n	8008066 <HAL_TIM_PWM_Start+0x136>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a16      	ldr	r2, [pc, #88]	; (80080a8 <HAL_TIM_PWM_Start+0x178>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d009      	beq.n	8008066 <HAL_TIM_PWM_Start+0x136>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a18      	ldr	r2, [pc, #96]	; (80080b8 <HAL_TIM_PWM_Start+0x188>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d004      	beq.n	8008066 <HAL_TIM_PWM_Start+0x136>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a16      	ldr	r2, [pc, #88]	; (80080bc <HAL_TIM_PWM_Start+0x18c>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d111      	bne.n	800808a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f003 0307 	and.w	r3, r3, #7
 8008070:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2b06      	cmp	r3, #6
 8008076:	d010      	beq.n	800809a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f042 0201 	orr.w	r2, r2, #1
 8008086:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008088:	e007      	b.n	800809a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f042 0201 	orr.w	r2, r2, #1
 8008098:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	40010000 	.word	0x40010000
 80080a8:	40010400 	.word	0x40010400
 80080ac:	40000400 	.word	0x40000400
 80080b0:	40000800 	.word	0x40000800
 80080b4:	40000c00 	.word	0x40000c00
 80080b8:	40014000 	.word	0x40014000
 80080bc:	40001800 	.word	0x40001800

080080c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b086      	sub	sp, #24
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080cc:	2300      	movs	r3, #0
 80080ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d101      	bne.n	80080de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80080da:	2302      	movs	r3, #2
 80080dc:	e0ae      	b.n	800823c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2b0c      	cmp	r3, #12
 80080ea:	f200 809f 	bhi.w	800822c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80080ee:	a201      	add	r2, pc, #4	; (adr r2, 80080f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80080f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f4:	08008129 	.word	0x08008129
 80080f8:	0800822d 	.word	0x0800822d
 80080fc:	0800822d 	.word	0x0800822d
 8008100:	0800822d 	.word	0x0800822d
 8008104:	08008169 	.word	0x08008169
 8008108:	0800822d 	.word	0x0800822d
 800810c:	0800822d 	.word	0x0800822d
 8008110:	0800822d 	.word	0x0800822d
 8008114:	080081ab 	.word	0x080081ab
 8008118:	0800822d 	.word	0x0800822d
 800811c:	0800822d 	.word	0x0800822d
 8008120:	0800822d 	.word	0x0800822d
 8008124:	080081eb 	.word	0x080081eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68b9      	ldr	r1, [r7, #8]
 800812e:	4618      	mov	r0, r3
 8008130:	f000 f9f0 	bl	8008514 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	699a      	ldr	r2, [r3, #24]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f042 0208 	orr.w	r2, r2, #8
 8008142:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	699a      	ldr	r2, [r3, #24]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f022 0204 	bic.w	r2, r2, #4
 8008152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6999      	ldr	r1, [r3, #24]
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	691a      	ldr	r2, [r3, #16]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	619a      	str	r2, [r3, #24]
      break;
 8008166:	e064      	b.n	8008232 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68b9      	ldr	r1, [r7, #8]
 800816e:	4618      	mov	r0, r3
 8008170:	f000 fa40 	bl	80085f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	699a      	ldr	r2, [r3, #24]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008182:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	699a      	ldr	r2, [r3, #24]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008192:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	6999      	ldr	r1, [r3, #24]
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	021a      	lsls	r2, r3, #8
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	430a      	orrs	r2, r1
 80081a6:	619a      	str	r2, [r3, #24]
      break;
 80081a8:	e043      	b.n	8008232 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68b9      	ldr	r1, [r7, #8]
 80081b0:	4618      	mov	r0, r3
 80081b2:	f000 fa95 	bl	80086e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	69da      	ldr	r2, [r3, #28]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f042 0208 	orr.w	r2, r2, #8
 80081c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	69da      	ldr	r2, [r3, #28]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f022 0204 	bic.w	r2, r2, #4
 80081d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	69d9      	ldr	r1, [r3, #28]
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	691a      	ldr	r2, [r3, #16]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	430a      	orrs	r2, r1
 80081e6:	61da      	str	r2, [r3, #28]
      break;
 80081e8:	e023      	b.n	8008232 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68b9      	ldr	r1, [r7, #8]
 80081f0:	4618      	mov	r0, r3
 80081f2:	f000 fae9 	bl	80087c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	69da      	ldr	r2, [r3, #28]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008204:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	69da      	ldr	r2, [r3, #28]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008214:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	69d9      	ldr	r1, [r3, #28]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	021a      	lsls	r2, r3, #8
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	430a      	orrs	r2, r1
 8008228:	61da      	str	r2, [r3, #28]
      break;
 800822a:	e002      	b.n	8008232 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	75fb      	strb	r3, [r7, #23]
      break;
 8008230:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800823a:	7dfb      	ldrb	r3, [r7, #23]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3718      	adds	r7, #24
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800824e:	2300      	movs	r3, #0
 8008250:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008258:	2b01      	cmp	r3, #1
 800825a:	d101      	bne.n	8008260 <HAL_TIM_ConfigClockSource+0x1c>
 800825c:	2302      	movs	r3, #2
 800825e:	e0b4      	b.n	80083ca <HAL_TIM_ConfigClockSource+0x186>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2202      	movs	r2, #2
 800826c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800827e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008286:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008298:	d03e      	beq.n	8008318 <HAL_TIM_ConfigClockSource+0xd4>
 800829a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800829e:	f200 8087 	bhi.w	80083b0 <HAL_TIM_ConfigClockSource+0x16c>
 80082a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082a6:	f000 8086 	beq.w	80083b6 <HAL_TIM_ConfigClockSource+0x172>
 80082aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ae:	d87f      	bhi.n	80083b0 <HAL_TIM_ConfigClockSource+0x16c>
 80082b0:	2b70      	cmp	r3, #112	; 0x70
 80082b2:	d01a      	beq.n	80082ea <HAL_TIM_ConfigClockSource+0xa6>
 80082b4:	2b70      	cmp	r3, #112	; 0x70
 80082b6:	d87b      	bhi.n	80083b0 <HAL_TIM_ConfigClockSource+0x16c>
 80082b8:	2b60      	cmp	r3, #96	; 0x60
 80082ba:	d050      	beq.n	800835e <HAL_TIM_ConfigClockSource+0x11a>
 80082bc:	2b60      	cmp	r3, #96	; 0x60
 80082be:	d877      	bhi.n	80083b0 <HAL_TIM_ConfigClockSource+0x16c>
 80082c0:	2b50      	cmp	r3, #80	; 0x50
 80082c2:	d03c      	beq.n	800833e <HAL_TIM_ConfigClockSource+0xfa>
 80082c4:	2b50      	cmp	r3, #80	; 0x50
 80082c6:	d873      	bhi.n	80083b0 <HAL_TIM_ConfigClockSource+0x16c>
 80082c8:	2b40      	cmp	r3, #64	; 0x40
 80082ca:	d058      	beq.n	800837e <HAL_TIM_ConfigClockSource+0x13a>
 80082cc:	2b40      	cmp	r3, #64	; 0x40
 80082ce:	d86f      	bhi.n	80083b0 <HAL_TIM_ConfigClockSource+0x16c>
 80082d0:	2b30      	cmp	r3, #48	; 0x30
 80082d2:	d064      	beq.n	800839e <HAL_TIM_ConfigClockSource+0x15a>
 80082d4:	2b30      	cmp	r3, #48	; 0x30
 80082d6:	d86b      	bhi.n	80083b0 <HAL_TIM_ConfigClockSource+0x16c>
 80082d8:	2b20      	cmp	r3, #32
 80082da:	d060      	beq.n	800839e <HAL_TIM_ConfigClockSource+0x15a>
 80082dc:	2b20      	cmp	r3, #32
 80082de:	d867      	bhi.n	80083b0 <HAL_TIM_ConfigClockSource+0x16c>
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d05c      	beq.n	800839e <HAL_TIM_ConfigClockSource+0x15a>
 80082e4:	2b10      	cmp	r3, #16
 80082e6:	d05a      	beq.n	800839e <HAL_TIM_ConfigClockSource+0x15a>
 80082e8:	e062      	b.n	80083b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6818      	ldr	r0, [r3, #0]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	6899      	ldr	r1, [r3, #8]
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	f000 fb35 	bl	8008968 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800830c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	609a      	str	r2, [r3, #8]
      break;
 8008316:	e04f      	b.n	80083b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6818      	ldr	r0, [r3, #0]
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	6899      	ldr	r1, [r3, #8]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	685a      	ldr	r2, [r3, #4]
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	f000 fb1e 	bl	8008968 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689a      	ldr	r2, [r3, #8]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800833a:	609a      	str	r2, [r3, #8]
      break;
 800833c:	e03c      	b.n	80083b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6818      	ldr	r0, [r3, #0]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	6859      	ldr	r1, [r3, #4]
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	461a      	mov	r2, r3
 800834c:	f000 fa92 	bl	8008874 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2150      	movs	r1, #80	; 0x50
 8008356:	4618      	mov	r0, r3
 8008358:	f000 faeb 	bl	8008932 <TIM_ITRx_SetConfig>
      break;
 800835c:	e02c      	b.n	80083b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6818      	ldr	r0, [r3, #0]
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	6859      	ldr	r1, [r3, #4]
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	461a      	mov	r2, r3
 800836c:	f000 fab1 	bl	80088d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2160      	movs	r1, #96	; 0x60
 8008376:	4618      	mov	r0, r3
 8008378:	f000 fadb 	bl	8008932 <TIM_ITRx_SetConfig>
      break;
 800837c:	e01c      	b.n	80083b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6818      	ldr	r0, [r3, #0]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	6859      	ldr	r1, [r3, #4]
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	461a      	mov	r2, r3
 800838c:	f000 fa72 	bl	8008874 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2140      	movs	r1, #64	; 0x40
 8008396:	4618      	mov	r0, r3
 8008398:	f000 facb 	bl	8008932 <TIM_ITRx_SetConfig>
      break;
 800839c:	e00c      	b.n	80083b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4619      	mov	r1, r3
 80083a8:	4610      	mov	r0, r2
 80083aa:	f000 fac2 	bl	8008932 <TIM_ITRx_SetConfig>
      break;
 80083ae:	e003      	b.n	80083b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	73fb      	strb	r3, [r7, #15]
      break;
 80083b4:	e000      	b.n	80083b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80083b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80083c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a40      	ldr	r2, [pc, #256]	; (80084e8 <TIM_Base_SetConfig+0x114>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d013      	beq.n	8008414 <TIM_Base_SetConfig+0x40>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083f2:	d00f      	beq.n	8008414 <TIM_Base_SetConfig+0x40>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a3d      	ldr	r2, [pc, #244]	; (80084ec <TIM_Base_SetConfig+0x118>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d00b      	beq.n	8008414 <TIM_Base_SetConfig+0x40>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a3c      	ldr	r2, [pc, #240]	; (80084f0 <TIM_Base_SetConfig+0x11c>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d007      	beq.n	8008414 <TIM_Base_SetConfig+0x40>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a3b      	ldr	r2, [pc, #236]	; (80084f4 <TIM_Base_SetConfig+0x120>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d003      	beq.n	8008414 <TIM_Base_SetConfig+0x40>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a3a      	ldr	r2, [pc, #232]	; (80084f8 <TIM_Base_SetConfig+0x124>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d108      	bne.n	8008426 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800841a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	4313      	orrs	r3, r2
 8008424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a2f      	ldr	r2, [pc, #188]	; (80084e8 <TIM_Base_SetConfig+0x114>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d02b      	beq.n	8008486 <TIM_Base_SetConfig+0xb2>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008434:	d027      	beq.n	8008486 <TIM_Base_SetConfig+0xb2>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a2c      	ldr	r2, [pc, #176]	; (80084ec <TIM_Base_SetConfig+0x118>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d023      	beq.n	8008486 <TIM_Base_SetConfig+0xb2>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a2b      	ldr	r2, [pc, #172]	; (80084f0 <TIM_Base_SetConfig+0x11c>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d01f      	beq.n	8008486 <TIM_Base_SetConfig+0xb2>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a2a      	ldr	r2, [pc, #168]	; (80084f4 <TIM_Base_SetConfig+0x120>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d01b      	beq.n	8008486 <TIM_Base_SetConfig+0xb2>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a29      	ldr	r2, [pc, #164]	; (80084f8 <TIM_Base_SetConfig+0x124>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d017      	beq.n	8008486 <TIM_Base_SetConfig+0xb2>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a28      	ldr	r2, [pc, #160]	; (80084fc <TIM_Base_SetConfig+0x128>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d013      	beq.n	8008486 <TIM_Base_SetConfig+0xb2>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a27      	ldr	r2, [pc, #156]	; (8008500 <TIM_Base_SetConfig+0x12c>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d00f      	beq.n	8008486 <TIM_Base_SetConfig+0xb2>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a26      	ldr	r2, [pc, #152]	; (8008504 <TIM_Base_SetConfig+0x130>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d00b      	beq.n	8008486 <TIM_Base_SetConfig+0xb2>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a25      	ldr	r2, [pc, #148]	; (8008508 <TIM_Base_SetConfig+0x134>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d007      	beq.n	8008486 <TIM_Base_SetConfig+0xb2>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a24      	ldr	r2, [pc, #144]	; (800850c <TIM_Base_SetConfig+0x138>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d003      	beq.n	8008486 <TIM_Base_SetConfig+0xb2>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a23      	ldr	r2, [pc, #140]	; (8008510 <TIM_Base_SetConfig+0x13c>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d108      	bne.n	8008498 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800848c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	4313      	orrs	r3, r2
 8008496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	689a      	ldr	r2, [r3, #8]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a0a      	ldr	r2, [pc, #40]	; (80084e8 <TIM_Base_SetConfig+0x114>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d003      	beq.n	80084cc <TIM_Base_SetConfig+0xf8>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a0c      	ldr	r2, [pc, #48]	; (80084f8 <TIM_Base_SetConfig+0x124>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d103      	bne.n	80084d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	691a      	ldr	r2, [r3, #16]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	615a      	str	r2, [r3, #20]
}
 80084da:	bf00      	nop
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	40010000 	.word	0x40010000
 80084ec:	40000400 	.word	0x40000400
 80084f0:	40000800 	.word	0x40000800
 80084f4:	40000c00 	.word	0x40000c00
 80084f8:	40010400 	.word	0x40010400
 80084fc:	40014000 	.word	0x40014000
 8008500:	40014400 	.word	0x40014400
 8008504:	40014800 	.word	0x40014800
 8008508:	40001800 	.word	0x40001800
 800850c:	40001c00 	.word	0x40001c00
 8008510:	40002000 	.word	0x40002000

08008514 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008514:	b480      	push	{r7}
 8008516:	b087      	sub	sp, #28
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a1b      	ldr	r3, [r3, #32]
 8008522:	f023 0201 	bic.w	r2, r3, #1
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a1b      	ldr	r3, [r3, #32]
 800852e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f023 0303 	bic.w	r3, r3, #3
 800854a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	4313      	orrs	r3, r2
 8008554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f023 0302 	bic.w	r3, r3, #2
 800855c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	697a      	ldr	r2, [r7, #20]
 8008564:	4313      	orrs	r3, r2
 8008566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a20      	ldr	r2, [pc, #128]	; (80085ec <TIM_OC1_SetConfig+0xd8>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d003      	beq.n	8008578 <TIM_OC1_SetConfig+0x64>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a1f      	ldr	r2, [pc, #124]	; (80085f0 <TIM_OC1_SetConfig+0xdc>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d10c      	bne.n	8008592 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	f023 0308 	bic.w	r3, r3, #8
 800857e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	4313      	orrs	r3, r2
 8008588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	f023 0304 	bic.w	r3, r3, #4
 8008590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a15      	ldr	r2, [pc, #84]	; (80085ec <TIM_OC1_SetConfig+0xd8>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d003      	beq.n	80085a2 <TIM_OC1_SetConfig+0x8e>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a14      	ldr	r2, [pc, #80]	; (80085f0 <TIM_OC1_SetConfig+0xdc>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d111      	bne.n	80085c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	621a      	str	r2, [r3, #32]
}
 80085e0:	bf00      	nop
 80085e2:	371c      	adds	r7, #28
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr
 80085ec:	40010000 	.word	0x40010000
 80085f0:	40010400 	.word	0x40010400

080085f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b087      	sub	sp, #28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	f023 0210 	bic.w	r2, r3, #16
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a1b      	ldr	r3, [r3, #32]
 800860e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800862a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	021b      	lsls	r3, r3, #8
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	4313      	orrs	r3, r2
 8008636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	f023 0320 	bic.w	r3, r3, #32
 800863e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	011b      	lsls	r3, r3, #4
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	4313      	orrs	r3, r2
 800864a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a22      	ldr	r2, [pc, #136]	; (80086d8 <TIM_OC2_SetConfig+0xe4>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d003      	beq.n	800865c <TIM_OC2_SetConfig+0x68>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a21      	ldr	r2, [pc, #132]	; (80086dc <TIM_OC2_SetConfig+0xe8>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d10d      	bne.n	8008678 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	011b      	lsls	r3, r3, #4
 800866a:	697a      	ldr	r2, [r7, #20]
 800866c:	4313      	orrs	r3, r2
 800866e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008676:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a17      	ldr	r2, [pc, #92]	; (80086d8 <TIM_OC2_SetConfig+0xe4>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d003      	beq.n	8008688 <TIM_OC2_SetConfig+0x94>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a16      	ldr	r2, [pc, #88]	; (80086dc <TIM_OC2_SetConfig+0xe8>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d113      	bne.n	80086b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800868e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008696:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	685a      	ldr	r2, [r3, #4]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	621a      	str	r2, [r3, #32]
}
 80086ca:	bf00      	nop
 80086cc:	371c      	adds	r7, #28
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	40010000 	.word	0x40010000
 80086dc:	40010400 	.word	0x40010400

080086e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b087      	sub	sp, #28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	69db      	ldr	r3, [r3, #28]
 8008706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800870e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f023 0303 	bic.w	r3, r3, #3
 8008716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	4313      	orrs	r3, r2
 8008720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	021b      	lsls	r3, r3, #8
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	4313      	orrs	r3, r2
 8008734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a21      	ldr	r2, [pc, #132]	; (80087c0 <TIM_OC3_SetConfig+0xe0>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d003      	beq.n	8008746 <TIM_OC3_SetConfig+0x66>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a20      	ldr	r2, [pc, #128]	; (80087c4 <TIM_OC3_SetConfig+0xe4>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d10d      	bne.n	8008762 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800874c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	021b      	lsls	r3, r3, #8
 8008754:	697a      	ldr	r2, [r7, #20]
 8008756:	4313      	orrs	r3, r2
 8008758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a16      	ldr	r2, [pc, #88]	; (80087c0 <TIM_OC3_SetConfig+0xe0>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d003      	beq.n	8008772 <TIM_OC3_SetConfig+0x92>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a15      	ldr	r2, [pc, #84]	; (80087c4 <TIM_OC3_SetConfig+0xe4>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d113      	bne.n	800879a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	011b      	lsls	r3, r3, #4
 8008788:	693a      	ldr	r2, [r7, #16]
 800878a:	4313      	orrs	r3, r2
 800878c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	011b      	lsls	r3, r3, #4
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	4313      	orrs	r3, r2
 8008798:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	693a      	ldr	r2, [r7, #16]
 800879e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	685a      	ldr	r2, [r3, #4]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	697a      	ldr	r2, [r7, #20]
 80087b2:	621a      	str	r2, [r3, #32]
}
 80087b4:	bf00      	nop
 80087b6:	371c      	adds	r7, #28
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr
 80087c0:	40010000 	.word	0x40010000
 80087c4:	40010400 	.word	0x40010400

080087c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b087      	sub	sp, #28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	69db      	ldr	r3, [r3, #28]
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	021b      	lsls	r3, r3, #8
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	4313      	orrs	r3, r2
 800880a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	031b      	lsls	r3, r3, #12
 800881a:	693a      	ldr	r2, [r7, #16]
 800881c:	4313      	orrs	r3, r2
 800881e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a12      	ldr	r2, [pc, #72]	; (800886c <TIM_OC4_SetConfig+0xa4>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d003      	beq.n	8008830 <TIM_OC4_SetConfig+0x68>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a11      	ldr	r2, [pc, #68]	; (8008870 <TIM_OC4_SetConfig+0xa8>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d109      	bne.n	8008844 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008836:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	695b      	ldr	r3, [r3, #20]
 800883c:	019b      	lsls	r3, r3, #6
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	4313      	orrs	r3, r2
 8008842:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	685a      	ldr	r2, [r3, #4]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	693a      	ldr	r2, [r7, #16]
 800885c:	621a      	str	r2, [r3, #32]
}
 800885e:	bf00      	nop
 8008860:	371c      	adds	r7, #28
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	40010000 	.word	0x40010000
 8008870:	40010400 	.word	0x40010400

08008874 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008874:	b480      	push	{r7}
 8008876:	b087      	sub	sp, #28
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6a1b      	ldr	r3, [r3, #32]
 8008884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	f023 0201 	bic.w	r2, r3, #1
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	699b      	ldr	r3, [r3, #24]
 8008896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800889e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	011b      	lsls	r3, r3, #4
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f023 030a 	bic.w	r3, r3, #10
 80088b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	621a      	str	r2, [r3, #32]
}
 80088c6:	bf00      	nop
 80088c8:	371c      	adds	r7, #28
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b087      	sub	sp, #28
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	60f8      	str	r0, [r7, #12]
 80088da:	60b9      	str	r1, [r7, #8]
 80088dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	f023 0210 	bic.w	r2, r3, #16
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6a1b      	ldr	r3, [r3, #32]
 80088f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	031b      	lsls	r3, r3, #12
 8008902:	697a      	ldr	r2, [r7, #20]
 8008904:	4313      	orrs	r3, r2
 8008906:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800890e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	011b      	lsls	r3, r3, #4
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	4313      	orrs	r3, r2
 8008918:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	621a      	str	r2, [r3, #32]
}
 8008926:	bf00      	nop
 8008928:	371c      	adds	r7, #28
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008932:	b480      	push	{r7}
 8008934:	b085      	sub	sp, #20
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008948:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800894a:	683a      	ldr	r2, [r7, #0]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4313      	orrs	r3, r2
 8008950:	f043 0307 	orr.w	r3, r3, #7
 8008954:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	609a      	str	r2, [r3, #8]
}
 800895c:	bf00      	nop
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008968:	b480      	push	{r7}
 800896a:	b087      	sub	sp, #28
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008982:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	021a      	lsls	r2, r3, #8
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	431a      	orrs	r2, r3
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	4313      	orrs	r3, r2
 8008990:	697a      	ldr	r2, [r7, #20]
 8008992:	4313      	orrs	r3, r2
 8008994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	697a      	ldr	r2, [r7, #20]
 800899a:	609a      	str	r2, [r3, #8]
}
 800899c:	bf00      	nop
 800899e:	371c      	adds	r7, #28
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b087      	sub	sp, #28
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	f003 031f 	and.w	r3, r3, #31
 80089ba:	2201      	movs	r2, #1
 80089bc:	fa02 f303 	lsl.w	r3, r2, r3
 80089c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6a1a      	ldr	r2, [r3, #32]
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	43db      	mvns	r3, r3
 80089ca:	401a      	ands	r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6a1a      	ldr	r2, [r3, #32]
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	f003 031f 	and.w	r3, r3, #31
 80089da:	6879      	ldr	r1, [r7, #4]
 80089dc:	fa01 f303 	lsl.w	r3, r1, r3
 80089e0:	431a      	orrs	r2, r3
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	621a      	str	r2, [r3, #32]
}
 80089e6:	bf00      	nop
 80089e8:	371c      	adds	r7, #28
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
	...

080089f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d101      	bne.n	8008a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a08:	2302      	movs	r3, #2
 8008a0a:	e05a      	b.n	8008ac2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2202      	movs	r2, #2
 8008a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a21      	ldr	r2, [pc, #132]	; (8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d022      	beq.n	8008a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a58:	d01d      	beq.n	8008a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a1d      	ldr	r2, [pc, #116]	; (8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d018      	beq.n	8008a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a1b      	ldr	r2, [pc, #108]	; (8008ad8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d013      	beq.n	8008a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a1a      	ldr	r2, [pc, #104]	; (8008adc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d00e      	beq.n	8008a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a18      	ldr	r2, [pc, #96]	; (8008ae0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d009      	beq.n	8008a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a17      	ldr	r2, [pc, #92]	; (8008ae4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d004      	beq.n	8008a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a15      	ldr	r2, [pc, #84]	; (8008ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d10c      	bne.n	8008ab0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3714      	adds	r7, #20
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	40010000 	.word	0x40010000
 8008ad4:	40000400 	.word	0x40000400
 8008ad8:	40000800 	.word	0x40000800
 8008adc:	40000c00 	.word	0x40000c00
 8008ae0:	40010400 	.word	0x40010400
 8008ae4:	40014000 	.word	0x40014000
 8008ae8:	40001800 	.word	0x40001800

08008aec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008af6:	2300      	movs	r3, #0
 8008af8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d101      	bne.n	8008b08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008b04:	2302      	movs	r3, #2
 8008b06:	e03d      	b.n	8008b84 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	695b      	ldr	r3, [r3, #20]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3714      	adds	r7, #20
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e03f      	b.n	8008c22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d106      	bne.n	8008bbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f7fc fe32 	bl	8005820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2224      	movs	r2, #36	; 0x24
 8008bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68da      	ldr	r2, [r3, #12]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fe1d 	bl	8009814 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	691a      	ldr	r2, [r3, #16]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008be8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	695a      	ldr	r2, [r3, #20]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68da      	ldr	r2, [r3, #12]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2220      	movs	r2, #32
 8008c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2220      	movs	r2, #32
 8008c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b08a      	sub	sp, #40	; 0x28
 8008c2e:	af02      	add	r7, sp, #8
 8008c30:	60f8      	str	r0, [r7, #12]
 8008c32:	60b9      	str	r1, [r7, #8]
 8008c34:	603b      	str	r3, [r7, #0]
 8008c36:	4613      	mov	r3, r2
 8008c38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	2b20      	cmp	r3, #32
 8008c48:	d17c      	bne.n	8008d44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d002      	beq.n	8008c56 <HAL_UART_Transmit+0x2c>
 8008c50:	88fb      	ldrh	r3, [r7, #6]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d101      	bne.n	8008c5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e075      	b.n	8008d46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d101      	bne.n	8008c68 <HAL_UART_Transmit+0x3e>
 8008c64:	2302      	movs	r3, #2
 8008c66:	e06e      	b.n	8008d46 <HAL_UART_Transmit+0x11c>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2221      	movs	r2, #33	; 0x21
 8008c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c7e:	f7fc ffff 	bl	8005c80 <HAL_GetTick>
 8008c82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	88fa      	ldrh	r2, [r7, #6]
 8008c88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	88fa      	ldrh	r2, [r7, #6]
 8008c8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c98:	d108      	bne.n	8008cac <HAL_UART_Transmit+0x82>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d104      	bne.n	8008cac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	61bb      	str	r3, [r7, #24]
 8008caa:	e003      	b.n	8008cb4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008cbc:	e02a      	b.n	8008d14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	9300      	str	r3, [sp, #0]
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	2180      	movs	r1, #128	; 0x80
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f000 fb9b 	bl	8009404 <UART_WaitOnFlagUntilTimeout>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d001      	beq.n	8008cd8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e036      	b.n	8008d46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10b      	bne.n	8008cf6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	881b      	ldrh	r3, [r3, #0]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	3302      	adds	r3, #2
 8008cf2:	61bb      	str	r3, [r7, #24]
 8008cf4:	e007      	b.n	8008d06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	781a      	ldrb	r2, [r3, #0]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	3301      	adds	r3, #1
 8008d04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1cf      	bne.n	8008cbe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	2200      	movs	r2, #0
 8008d26:	2140      	movs	r1, #64	; 0x40
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f000 fb6b 	bl	8009404 <UART_WaitOnFlagUntilTimeout>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008d34:	2303      	movs	r3, #3
 8008d36:	e006      	b.n	8008d46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2220      	movs	r2, #32
 8008d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	e000      	b.n	8008d46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008d44:	2302      	movs	r3, #2
  }
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3720      	adds	r7, #32
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b08a      	sub	sp, #40	; 0x28
 8008d52:	af02      	add	r7, sp, #8
 8008d54:	60f8      	str	r0, [r7, #12]
 8008d56:	60b9      	str	r1, [r7, #8]
 8008d58:	603b      	str	r3, [r7, #0]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b20      	cmp	r3, #32
 8008d6c:	f040 808c 	bne.w	8008e88 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d002      	beq.n	8008d7c <HAL_UART_Receive+0x2e>
 8008d76:	88fb      	ldrh	r3, [r7, #6]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d101      	bne.n	8008d80 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e084      	b.n	8008e8a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d101      	bne.n	8008d8e <HAL_UART_Receive+0x40>
 8008d8a:	2302      	movs	r3, #2
 8008d8c:	e07d      	b.n	8008e8a <HAL_UART_Receive+0x13c>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2201      	movs	r2, #1
 8008d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2222      	movs	r2, #34	; 0x22
 8008da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2200      	movs	r2, #0
 8008da8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008daa:	f7fc ff69 	bl	8005c80 <HAL_GetTick>
 8008dae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	88fa      	ldrh	r2, [r7, #6]
 8008db4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	88fa      	ldrh	r2, [r7, #6]
 8008dba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dc4:	d108      	bne.n	8008dd8 <HAL_UART_Receive+0x8a>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d104      	bne.n	8008dd8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	61bb      	str	r3, [r7, #24]
 8008dd6:	e003      	b.n	8008de0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008de8:	e043      	b.n	8008e72 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	2200      	movs	r2, #0
 8008df2:	2120      	movs	r1, #32
 8008df4:	68f8      	ldr	r0, [r7, #12]
 8008df6:	f000 fb05 	bl	8009404 <UART_WaitOnFlagUntilTimeout>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d001      	beq.n	8008e04 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008e00:	2303      	movs	r3, #3
 8008e02:	e042      	b.n	8008e8a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10c      	bne.n	8008e24 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	3302      	adds	r3, #2
 8008e20:	61bb      	str	r3, [r7, #24]
 8008e22:	e01f      	b.n	8008e64 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e2c:	d007      	beq.n	8008e3e <HAL_UART_Receive+0xf0>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d10a      	bne.n	8008e4c <HAL_UART_Receive+0xfe>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d106      	bne.n	8008e4c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	701a      	strb	r2, [r3, #0]
 8008e4a:	e008      	b.n	8008e5e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	3301      	adds	r3, #1
 8008e62:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	b29a      	uxth	r2, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1b6      	bne.n	8008dea <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2220      	movs	r2, #32
 8008e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008e84:	2300      	movs	r3, #0
 8008e86:	e000      	b.n	8008e8a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008e88:	2302      	movs	r3, #2
  }
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3720      	adds	r7, #32
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
	...

08008e94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b0ba      	sub	sp, #232	; 0xe8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	695b      	ldr	r3, [r3, #20]
 8008eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eca:	f003 030f 	and.w	r3, r3, #15
 8008ece:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008ed2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d10f      	bne.n	8008efa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ede:	f003 0320 	and.w	r3, r3, #32
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d009      	beq.n	8008efa <HAL_UART_IRQHandler+0x66>
 8008ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eea:	f003 0320 	and.w	r3, r3, #32
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d003      	beq.n	8008efa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 fbd3 	bl	800969e <UART_Receive_IT>
      return;
 8008ef8:	e256      	b.n	80093a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008efa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f000 80de 	beq.w	80090c0 <HAL_UART_IRQHandler+0x22c>
 8008f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f08:	f003 0301 	and.w	r3, r3, #1
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d106      	bne.n	8008f1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f14:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f000 80d1 	beq.w	80090c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00b      	beq.n	8008f42 <HAL_UART_IRQHandler+0xae>
 8008f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d005      	beq.n	8008f42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3a:	f043 0201 	orr.w	r2, r3, #1
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f46:	f003 0304 	and.w	r3, r3, #4
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00b      	beq.n	8008f66 <HAL_UART_IRQHandler+0xd2>
 8008f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d005      	beq.n	8008f66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5e:	f043 0202 	orr.w	r2, r3, #2
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f6a:	f003 0302 	and.w	r3, r3, #2
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00b      	beq.n	8008f8a <HAL_UART_IRQHandler+0xf6>
 8008f72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d005      	beq.n	8008f8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f82:	f043 0204 	orr.w	r2, r3, #4
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f8e:	f003 0308 	and.w	r3, r3, #8
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d011      	beq.n	8008fba <HAL_UART_IRQHandler+0x126>
 8008f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f9a:	f003 0320 	and.w	r3, r3, #32
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d105      	bne.n	8008fae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fa6:	f003 0301 	and.w	r3, r3, #1
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d005      	beq.n	8008fba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb2:	f043 0208 	orr.w	r2, r3, #8
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f000 81ed 	beq.w	800939e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fc8:	f003 0320 	and.w	r3, r3, #32
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d008      	beq.n	8008fe2 <HAL_UART_IRQHandler+0x14e>
 8008fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fd4:	f003 0320 	and.w	r3, r3, #32
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d002      	beq.n	8008fe2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 fb5e 	bl	800969e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	695b      	ldr	r3, [r3, #20]
 8008fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fec:	2b40      	cmp	r3, #64	; 0x40
 8008fee:	bf0c      	ite	eq
 8008ff0:	2301      	moveq	r3, #1
 8008ff2:	2300      	movne	r3, #0
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffe:	f003 0308 	and.w	r3, r3, #8
 8009002:	2b00      	cmp	r3, #0
 8009004:	d103      	bne.n	800900e <HAL_UART_IRQHandler+0x17a>
 8009006:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800900a:	2b00      	cmp	r3, #0
 800900c:	d04f      	beq.n	80090ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fa66 	bl	80094e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	695b      	ldr	r3, [r3, #20]
 800901a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800901e:	2b40      	cmp	r3, #64	; 0x40
 8009020:	d141      	bne.n	80090a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	3314      	adds	r3, #20
 8009028:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009030:	e853 3f00 	ldrex	r3, [r3]
 8009034:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009038:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800903c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	3314      	adds	r3, #20
 800904a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800904e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009052:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009056:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800905a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800905e:	e841 2300 	strex	r3, r2, [r1]
 8009062:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009066:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1d9      	bne.n	8009022 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009072:	2b00      	cmp	r3, #0
 8009074:	d013      	beq.n	800909e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907a:	4a7d      	ldr	r2, [pc, #500]	; (8009270 <HAL_UART_IRQHandler+0x3dc>)
 800907c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009082:	4618      	mov	r0, r3
 8009084:	f7fd fb79 	bl	800677a <HAL_DMA_Abort_IT>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d016      	beq.n	80090bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009098:	4610      	mov	r0, r2
 800909a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800909c:	e00e      	b.n	80090bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 f99a 	bl	80093d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090a4:	e00a      	b.n	80090bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f996 	bl	80093d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090ac:	e006      	b.n	80090bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f992 	bl	80093d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80090ba:	e170      	b.n	800939e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090bc:	bf00      	nop
    return;
 80090be:	e16e      	b.n	800939e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	f040 814a 	bne.w	800935e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80090ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ce:	f003 0310 	and.w	r3, r3, #16
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f000 8143 	beq.w	800935e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80090d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090dc:	f003 0310 	and.w	r3, r3, #16
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f000 813c 	beq.w	800935e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80090e6:	2300      	movs	r3, #0
 80090e8:	60bb      	str	r3, [r7, #8]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	60bb      	str	r3, [r7, #8]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	60bb      	str	r3, [r7, #8]
 80090fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	695b      	ldr	r3, [r3, #20]
 8009102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009106:	2b40      	cmp	r3, #64	; 0x40
 8009108:	f040 80b4 	bne.w	8009274 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009118:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800911c:	2b00      	cmp	r3, #0
 800911e:	f000 8140 	beq.w	80093a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009126:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800912a:	429a      	cmp	r2, r3
 800912c:	f080 8139 	bcs.w	80093a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009136:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009142:	f000 8088 	beq.w	8009256 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	330c      	adds	r3, #12
 800914c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009150:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009154:	e853 3f00 	ldrex	r3, [r3]
 8009158:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800915c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009164:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	330c      	adds	r3, #12
 800916e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009172:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800917e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009182:	e841 2300 	strex	r3, r2, [r1]
 8009186:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800918a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1d9      	bne.n	8009146 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	3314      	adds	r3, #20
 8009198:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800919c:	e853 3f00 	ldrex	r3, [r3]
 80091a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80091a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091a4:	f023 0301 	bic.w	r3, r3, #1
 80091a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	3314      	adds	r3, #20
 80091b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80091b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80091ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80091be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80091c2:	e841 2300 	strex	r3, r2, [r1]
 80091c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80091c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d1e1      	bne.n	8009192 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	3314      	adds	r3, #20
 80091d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091d8:	e853 3f00 	ldrex	r3, [r3]
 80091dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80091de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	3314      	adds	r3, #20
 80091ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80091f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80091f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80091f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80091fa:	e841 2300 	strex	r3, r2, [r1]
 80091fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1e3      	bne.n	80091ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2220      	movs	r2, #32
 800920a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	330c      	adds	r3, #12
 800921a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800921e:	e853 3f00 	ldrex	r3, [r3]
 8009222:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009226:	f023 0310 	bic.w	r3, r3, #16
 800922a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	330c      	adds	r3, #12
 8009234:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009238:	65ba      	str	r2, [r7, #88]	; 0x58
 800923a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800923e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009240:	e841 2300 	strex	r3, r2, [r1]
 8009244:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1e3      	bne.n	8009214 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009250:	4618      	mov	r0, r3
 8009252:	f7fd fa22 	bl	800669a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800925e:	b29b      	uxth	r3, r3
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	b29b      	uxth	r3, r3
 8009264:	4619      	mov	r1, r3
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f8c0 	bl	80093ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800926c:	e099      	b.n	80093a2 <HAL_UART_IRQHandler+0x50e>
 800926e:	bf00      	nop
 8009270:	080095a7 	.word	0x080095a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800927c:	b29b      	uxth	r3, r3
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009288:	b29b      	uxth	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	f000 808b 	beq.w	80093a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009290:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009294:	2b00      	cmp	r3, #0
 8009296:	f000 8086 	beq.w	80093a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	330c      	adds	r3, #12
 80092a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a4:	e853 3f00 	ldrex	r3, [r3]
 80092a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	330c      	adds	r3, #12
 80092ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80092be:	647a      	str	r2, [r7, #68]	; 0x44
 80092c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80092c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092c6:	e841 2300 	strex	r3, r2, [r1]
 80092ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80092cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1e3      	bne.n	800929a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3314      	adds	r3, #20
 80092d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092dc:	e853 3f00 	ldrex	r3, [r3]
 80092e0:	623b      	str	r3, [r7, #32]
   return(result);
 80092e2:	6a3b      	ldr	r3, [r7, #32]
 80092e4:	f023 0301 	bic.w	r3, r3, #1
 80092e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	3314      	adds	r3, #20
 80092f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80092f6:	633a      	str	r2, [r7, #48]	; 0x30
 80092f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092fe:	e841 2300 	strex	r3, r2, [r1]
 8009302:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1e3      	bne.n	80092d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2220      	movs	r2, #32
 800930e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	330c      	adds	r3, #12
 800931e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	e853 3f00 	ldrex	r3, [r3]
 8009326:	60fb      	str	r3, [r7, #12]
   return(result);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f023 0310 	bic.w	r3, r3, #16
 800932e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	330c      	adds	r3, #12
 8009338:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800933c:	61fa      	str	r2, [r7, #28]
 800933e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009340:	69b9      	ldr	r1, [r7, #24]
 8009342:	69fa      	ldr	r2, [r7, #28]
 8009344:	e841 2300 	strex	r3, r2, [r1]
 8009348:	617b      	str	r3, [r7, #20]
   return(result);
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d1e3      	bne.n	8009318 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009350:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009354:	4619      	mov	r1, r3
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f848 	bl	80093ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800935c:	e023      	b.n	80093a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800935e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009366:	2b00      	cmp	r3, #0
 8009368:	d009      	beq.n	800937e <HAL_UART_IRQHandler+0x4ea>
 800936a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800936e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009372:	2b00      	cmp	r3, #0
 8009374:	d003      	beq.n	800937e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f929 	bl	80095ce <UART_Transmit_IT>
    return;
 800937c:	e014      	b.n	80093a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800937e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00e      	beq.n	80093a8 <HAL_UART_IRQHandler+0x514>
 800938a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800938e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009392:	2b00      	cmp	r3, #0
 8009394:	d008      	beq.n	80093a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f969 	bl	800966e <UART_EndTransmit_IT>
    return;
 800939c:	e004      	b.n	80093a8 <HAL_UART_IRQHandler+0x514>
    return;
 800939e:	bf00      	nop
 80093a0:	e002      	b.n	80093a8 <HAL_UART_IRQHandler+0x514>
      return;
 80093a2:	bf00      	nop
 80093a4:	e000      	b.n	80093a8 <HAL_UART_IRQHandler+0x514>
      return;
 80093a6:	bf00      	nop
  }
}
 80093a8:	37e8      	adds	r7, #232	; 0xe8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop

080093b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80093cc:	bf00      	nop
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	460b      	mov	r3, r1
 80093f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80093f8:	bf00      	nop
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b090      	sub	sp, #64	; 0x40
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	603b      	str	r3, [r7, #0]
 8009410:	4613      	mov	r3, r2
 8009412:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009414:	e050      	b.n	80094b8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800941c:	d04c      	beq.n	80094b8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800941e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009420:	2b00      	cmp	r3, #0
 8009422:	d007      	beq.n	8009434 <UART_WaitOnFlagUntilTimeout+0x30>
 8009424:	f7fc fc2c 	bl	8005c80 <HAL_GetTick>
 8009428:	4602      	mov	r2, r0
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009430:	429a      	cmp	r2, r3
 8009432:	d241      	bcs.n	80094b8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	330c      	adds	r3, #12
 800943a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943e:	e853 3f00 	ldrex	r3, [r3]
 8009442:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009446:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800944a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	330c      	adds	r3, #12
 8009452:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009454:	637a      	str	r2, [r7, #52]	; 0x34
 8009456:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009458:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800945a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800945c:	e841 2300 	strex	r3, r2, [r1]
 8009460:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1e5      	bne.n	8009434 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3314      	adds	r3, #20
 800946e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	e853 3f00 	ldrex	r3, [r3]
 8009476:	613b      	str	r3, [r7, #16]
   return(result);
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	f023 0301 	bic.w	r3, r3, #1
 800947e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3314      	adds	r3, #20
 8009486:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009488:	623a      	str	r2, [r7, #32]
 800948a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948c:	69f9      	ldr	r1, [r7, #28]
 800948e:	6a3a      	ldr	r2, [r7, #32]
 8009490:	e841 2300 	strex	r3, r2, [r1]
 8009494:	61bb      	str	r3, [r7, #24]
   return(result);
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1e5      	bne.n	8009468 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2220      	movs	r2, #32
 80094a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2220      	movs	r2, #32
 80094a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80094b4:	2303      	movs	r3, #3
 80094b6:	e00f      	b.n	80094d8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	4013      	ands	r3, r2
 80094c2:	68ba      	ldr	r2, [r7, #8]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	bf0c      	ite	eq
 80094c8:	2301      	moveq	r3, #1
 80094ca:	2300      	movne	r3, #0
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	461a      	mov	r2, r3
 80094d0:	79fb      	ldrb	r3, [r7, #7]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d09f      	beq.n	8009416 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3740      	adds	r7, #64	; 0x40
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b095      	sub	sp, #84	; 0x54
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	330c      	adds	r3, #12
 80094ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f2:	e853 3f00 	ldrex	r3, [r3]
 80094f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80094f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	330c      	adds	r3, #12
 8009506:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009508:	643a      	str	r2, [r7, #64]	; 0x40
 800950a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800950e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009510:	e841 2300 	strex	r3, r2, [r1]
 8009514:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009518:	2b00      	cmp	r3, #0
 800951a:	d1e5      	bne.n	80094e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	3314      	adds	r3, #20
 8009522:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009524:	6a3b      	ldr	r3, [r7, #32]
 8009526:	e853 3f00 	ldrex	r3, [r3]
 800952a:	61fb      	str	r3, [r7, #28]
   return(result);
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	f023 0301 	bic.w	r3, r3, #1
 8009532:	64bb      	str	r3, [r7, #72]	; 0x48
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	3314      	adds	r3, #20
 800953a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800953c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800953e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009544:	e841 2300 	strex	r3, r2, [r1]
 8009548:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800954a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954c:	2b00      	cmp	r3, #0
 800954e:	d1e5      	bne.n	800951c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009554:	2b01      	cmp	r3, #1
 8009556:	d119      	bne.n	800958c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	330c      	adds	r3, #12
 800955e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	e853 3f00 	ldrex	r3, [r3]
 8009566:	60bb      	str	r3, [r7, #8]
   return(result);
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	f023 0310 	bic.w	r3, r3, #16
 800956e:	647b      	str	r3, [r7, #68]	; 0x44
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	330c      	adds	r3, #12
 8009576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009578:	61ba      	str	r2, [r7, #24]
 800957a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957c:	6979      	ldr	r1, [r7, #20]
 800957e:	69ba      	ldr	r2, [r7, #24]
 8009580:	e841 2300 	strex	r3, r2, [r1]
 8009584:	613b      	str	r3, [r7, #16]
   return(result);
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1e5      	bne.n	8009558 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2220      	movs	r2, #32
 8009590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	631a      	str	r2, [r3, #48]	; 0x30
}
 800959a:	bf00      	nop
 800959c:	3754      	adds	r7, #84	; 0x54
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr

080095a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b084      	sub	sp, #16
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f7ff ff09 	bl	80093d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095c6:	bf00      	nop
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80095ce:	b480      	push	{r7}
 80095d0:	b085      	sub	sp, #20
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	2b21      	cmp	r3, #33	; 0x21
 80095e0:	d13e      	bne.n	8009660 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095ea:	d114      	bne.n	8009616 <UART_Transmit_IT+0x48>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d110      	bne.n	8009616 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a1b      	ldr	r3, [r3, #32]
 80095f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	881b      	ldrh	r3, [r3, #0]
 80095fe:	461a      	mov	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009608:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	1c9a      	adds	r2, r3, #2
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	621a      	str	r2, [r3, #32]
 8009614:	e008      	b.n	8009628 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6a1b      	ldr	r3, [r3, #32]
 800961a:	1c59      	adds	r1, r3, #1
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	6211      	str	r1, [r2, #32]
 8009620:	781a      	ldrb	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800962c:	b29b      	uxth	r3, r3
 800962e:	3b01      	subs	r3, #1
 8009630:	b29b      	uxth	r3, r3
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	4619      	mov	r1, r3
 8009636:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10f      	bne.n	800965c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68da      	ldr	r2, [r3, #12]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800964a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68da      	ldr	r2, [r3, #12]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800965a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	e000      	b.n	8009662 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009660:	2302      	movs	r3, #2
  }
}
 8009662:	4618      	mov	r0, r3
 8009664:	3714      	adds	r7, #20
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr

0800966e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b082      	sub	sp, #8
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68da      	ldr	r2, [r3, #12]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009684:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2220      	movs	r2, #32
 800968a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f7ff fe8e 	bl	80093b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b08c      	sub	sp, #48	; 0x30
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	2b22      	cmp	r3, #34	; 0x22
 80096b0:	f040 80ab 	bne.w	800980a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096bc:	d117      	bne.n	80096ee <UART_Receive_IT+0x50>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	691b      	ldr	r3, [r3, #16]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d113      	bne.n	80096ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80096c6:	2300      	movs	r3, #0
 80096c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096dc:	b29a      	uxth	r2, r3
 80096de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e6:	1c9a      	adds	r2, r3, #2
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	629a      	str	r2, [r3, #40]	; 0x28
 80096ec:	e026      	b.n	800973c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80096f4:	2300      	movs	r3, #0
 80096f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009700:	d007      	beq.n	8009712 <UART_Receive_IT+0x74>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10a      	bne.n	8009720 <UART_Receive_IT+0x82>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d106      	bne.n	8009720 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	b2da      	uxtb	r2, r3
 800971a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971c:	701a      	strb	r2, [r3, #0]
 800971e:	e008      	b.n	8009732 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	b2db      	uxtb	r3, r3
 8009728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800972c:	b2da      	uxtb	r2, r3
 800972e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009730:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009736:	1c5a      	adds	r2, r3, #1
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009740:	b29b      	uxth	r3, r3
 8009742:	3b01      	subs	r3, #1
 8009744:	b29b      	uxth	r3, r3
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	4619      	mov	r1, r3
 800974a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800974c:	2b00      	cmp	r3, #0
 800974e:	d15a      	bne.n	8009806 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68da      	ldr	r2, [r3, #12]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f022 0220 	bic.w	r2, r2, #32
 800975e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	68da      	ldr	r2, [r3, #12]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800976e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	695a      	ldr	r2, [r3, #20]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f022 0201 	bic.w	r2, r2, #1
 800977e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2220      	movs	r2, #32
 8009784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800978c:	2b01      	cmp	r3, #1
 800978e:	d135      	bne.n	80097fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	330c      	adds	r3, #12
 800979c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	e853 3f00 	ldrex	r3, [r3]
 80097a4:	613b      	str	r3, [r7, #16]
   return(result);
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	f023 0310 	bic.w	r3, r3, #16
 80097ac:	627b      	str	r3, [r7, #36]	; 0x24
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	330c      	adds	r3, #12
 80097b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097b6:	623a      	str	r2, [r7, #32]
 80097b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ba:	69f9      	ldr	r1, [r7, #28]
 80097bc:	6a3a      	ldr	r2, [r7, #32]
 80097be:	e841 2300 	strex	r3, r2, [r1]
 80097c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1e5      	bne.n	8009796 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 0310 	and.w	r3, r3, #16
 80097d4:	2b10      	cmp	r3, #16
 80097d6:	d10a      	bne.n	80097ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80097d8:	2300      	movs	r3, #0
 80097da:	60fb      	str	r3, [r7, #12]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	60fb      	str	r3, [r7, #12]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	60fb      	str	r3, [r7, #12]
 80097ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80097f2:	4619      	mov	r1, r3
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f7ff fdf9 	bl	80093ec <HAL_UARTEx_RxEventCallback>
 80097fa:	e002      	b.n	8009802 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f7ff fde1 	bl	80093c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009802:	2300      	movs	r3, #0
 8009804:	e002      	b.n	800980c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	e000      	b.n	800980c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800980a:	2302      	movs	r3, #2
  }
}
 800980c:	4618      	mov	r0, r3
 800980e:	3730      	adds	r7, #48	; 0x30
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009818:	b09f      	sub	sp, #124	; 0x7c
 800981a:	af00      	add	r7, sp, #0
 800981c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800981e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800982a:	68d9      	ldr	r1, [r3, #12]
 800982c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	ea40 0301 	orr.w	r3, r0, r1
 8009834:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009838:	689a      	ldr	r2, [r3, #8]
 800983a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	431a      	orrs	r2, r3
 8009840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009842:	695b      	ldr	r3, [r3, #20]
 8009844:	431a      	orrs	r2, r3
 8009846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009848:	69db      	ldr	r3, [r3, #28]
 800984a:	4313      	orrs	r3, r2
 800984c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800984e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009858:	f021 010c 	bic.w	r1, r1, #12
 800985c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009862:	430b      	orrs	r3, r1
 8009864:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	695b      	ldr	r3, [r3, #20]
 800986c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009872:	6999      	ldr	r1, [r3, #24]
 8009874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	ea40 0301 	orr.w	r3, r0, r1
 800987c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800987e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	4bc5      	ldr	r3, [pc, #788]	; (8009b98 <UART_SetConfig+0x384>)
 8009884:	429a      	cmp	r2, r3
 8009886:	d004      	beq.n	8009892 <UART_SetConfig+0x7e>
 8009888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	4bc3      	ldr	r3, [pc, #780]	; (8009b9c <UART_SetConfig+0x388>)
 800988e:	429a      	cmp	r2, r3
 8009890:	d103      	bne.n	800989a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009892:	f7fe fa27 	bl	8007ce4 <HAL_RCC_GetPCLK2Freq>
 8009896:	6778      	str	r0, [r7, #116]	; 0x74
 8009898:	e002      	b.n	80098a0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800989a:	f7fe fa0f 	bl	8007cbc <HAL_RCC_GetPCLK1Freq>
 800989e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098a2:	69db      	ldr	r3, [r3, #28]
 80098a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098a8:	f040 80b6 	bne.w	8009a18 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80098ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098ae:	461c      	mov	r4, r3
 80098b0:	f04f 0500 	mov.w	r5, #0
 80098b4:	4622      	mov	r2, r4
 80098b6:	462b      	mov	r3, r5
 80098b8:	1891      	adds	r1, r2, r2
 80098ba:	6439      	str	r1, [r7, #64]	; 0x40
 80098bc:	415b      	adcs	r3, r3
 80098be:	647b      	str	r3, [r7, #68]	; 0x44
 80098c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80098c4:	1912      	adds	r2, r2, r4
 80098c6:	eb45 0303 	adc.w	r3, r5, r3
 80098ca:	f04f 0000 	mov.w	r0, #0
 80098ce:	f04f 0100 	mov.w	r1, #0
 80098d2:	00d9      	lsls	r1, r3, #3
 80098d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80098d8:	00d0      	lsls	r0, r2, #3
 80098da:	4602      	mov	r2, r0
 80098dc:	460b      	mov	r3, r1
 80098de:	1911      	adds	r1, r2, r4
 80098e0:	6639      	str	r1, [r7, #96]	; 0x60
 80098e2:	416b      	adcs	r3, r5
 80098e4:	667b      	str	r3, [r7, #100]	; 0x64
 80098e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	461a      	mov	r2, r3
 80098ec:	f04f 0300 	mov.w	r3, #0
 80098f0:	1891      	adds	r1, r2, r2
 80098f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80098f4:	415b      	adcs	r3, r3
 80098f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80098fc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009900:	f7f7 f8dc 	bl	8000abc <__aeabi_uldivmod>
 8009904:	4602      	mov	r2, r0
 8009906:	460b      	mov	r3, r1
 8009908:	4ba5      	ldr	r3, [pc, #660]	; (8009ba0 <UART_SetConfig+0x38c>)
 800990a:	fba3 2302 	umull	r2, r3, r3, r2
 800990e:	095b      	lsrs	r3, r3, #5
 8009910:	011e      	lsls	r6, r3, #4
 8009912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009914:	461c      	mov	r4, r3
 8009916:	f04f 0500 	mov.w	r5, #0
 800991a:	4622      	mov	r2, r4
 800991c:	462b      	mov	r3, r5
 800991e:	1891      	adds	r1, r2, r2
 8009920:	6339      	str	r1, [r7, #48]	; 0x30
 8009922:	415b      	adcs	r3, r3
 8009924:	637b      	str	r3, [r7, #52]	; 0x34
 8009926:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800992a:	1912      	adds	r2, r2, r4
 800992c:	eb45 0303 	adc.w	r3, r5, r3
 8009930:	f04f 0000 	mov.w	r0, #0
 8009934:	f04f 0100 	mov.w	r1, #0
 8009938:	00d9      	lsls	r1, r3, #3
 800993a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800993e:	00d0      	lsls	r0, r2, #3
 8009940:	4602      	mov	r2, r0
 8009942:	460b      	mov	r3, r1
 8009944:	1911      	adds	r1, r2, r4
 8009946:	65b9      	str	r1, [r7, #88]	; 0x58
 8009948:	416b      	adcs	r3, r5
 800994a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800994c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	461a      	mov	r2, r3
 8009952:	f04f 0300 	mov.w	r3, #0
 8009956:	1891      	adds	r1, r2, r2
 8009958:	62b9      	str	r1, [r7, #40]	; 0x28
 800995a:	415b      	adcs	r3, r3
 800995c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800995e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009962:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009966:	f7f7 f8a9 	bl	8000abc <__aeabi_uldivmod>
 800996a:	4602      	mov	r2, r0
 800996c:	460b      	mov	r3, r1
 800996e:	4b8c      	ldr	r3, [pc, #560]	; (8009ba0 <UART_SetConfig+0x38c>)
 8009970:	fba3 1302 	umull	r1, r3, r3, r2
 8009974:	095b      	lsrs	r3, r3, #5
 8009976:	2164      	movs	r1, #100	; 0x64
 8009978:	fb01 f303 	mul.w	r3, r1, r3
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	00db      	lsls	r3, r3, #3
 8009980:	3332      	adds	r3, #50	; 0x32
 8009982:	4a87      	ldr	r2, [pc, #540]	; (8009ba0 <UART_SetConfig+0x38c>)
 8009984:	fba2 2303 	umull	r2, r3, r2, r3
 8009988:	095b      	lsrs	r3, r3, #5
 800998a:	005b      	lsls	r3, r3, #1
 800998c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009990:	441e      	add	r6, r3
 8009992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009994:	4618      	mov	r0, r3
 8009996:	f04f 0100 	mov.w	r1, #0
 800999a:	4602      	mov	r2, r0
 800999c:	460b      	mov	r3, r1
 800999e:	1894      	adds	r4, r2, r2
 80099a0:	623c      	str	r4, [r7, #32]
 80099a2:	415b      	adcs	r3, r3
 80099a4:	627b      	str	r3, [r7, #36]	; 0x24
 80099a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80099aa:	1812      	adds	r2, r2, r0
 80099ac:	eb41 0303 	adc.w	r3, r1, r3
 80099b0:	f04f 0400 	mov.w	r4, #0
 80099b4:	f04f 0500 	mov.w	r5, #0
 80099b8:	00dd      	lsls	r5, r3, #3
 80099ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80099be:	00d4      	lsls	r4, r2, #3
 80099c0:	4622      	mov	r2, r4
 80099c2:	462b      	mov	r3, r5
 80099c4:	1814      	adds	r4, r2, r0
 80099c6:	653c      	str	r4, [r7, #80]	; 0x50
 80099c8:	414b      	adcs	r3, r1
 80099ca:	657b      	str	r3, [r7, #84]	; 0x54
 80099cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	461a      	mov	r2, r3
 80099d2:	f04f 0300 	mov.w	r3, #0
 80099d6:	1891      	adds	r1, r2, r2
 80099d8:	61b9      	str	r1, [r7, #24]
 80099da:	415b      	adcs	r3, r3
 80099dc:	61fb      	str	r3, [r7, #28]
 80099de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80099e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80099e6:	f7f7 f869 	bl	8000abc <__aeabi_uldivmod>
 80099ea:	4602      	mov	r2, r0
 80099ec:	460b      	mov	r3, r1
 80099ee:	4b6c      	ldr	r3, [pc, #432]	; (8009ba0 <UART_SetConfig+0x38c>)
 80099f0:	fba3 1302 	umull	r1, r3, r3, r2
 80099f4:	095b      	lsrs	r3, r3, #5
 80099f6:	2164      	movs	r1, #100	; 0x64
 80099f8:	fb01 f303 	mul.w	r3, r1, r3
 80099fc:	1ad3      	subs	r3, r2, r3
 80099fe:	00db      	lsls	r3, r3, #3
 8009a00:	3332      	adds	r3, #50	; 0x32
 8009a02:	4a67      	ldr	r2, [pc, #412]	; (8009ba0 <UART_SetConfig+0x38c>)
 8009a04:	fba2 2303 	umull	r2, r3, r2, r3
 8009a08:	095b      	lsrs	r3, r3, #5
 8009a0a:	f003 0207 	and.w	r2, r3, #7
 8009a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4432      	add	r2, r6
 8009a14:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009a16:	e0b9      	b.n	8009b8c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a1a:	461c      	mov	r4, r3
 8009a1c:	f04f 0500 	mov.w	r5, #0
 8009a20:	4622      	mov	r2, r4
 8009a22:	462b      	mov	r3, r5
 8009a24:	1891      	adds	r1, r2, r2
 8009a26:	6139      	str	r1, [r7, #16]
 8009a28:	415b      	adcs	r3, r3
 8009a2a:	617b      	str	r3, [r7, #20]
 8009a2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009a30:	1912      	adds	r2, r2, r4
 8009a32:	eb45 0303 	adc.w	r3, r5, r3
 8009a36:	f04f 0000 	mov.w	r0, #0
 8009a3a:	f04f 0100 	mov.w	r1, #0
 8009a3e:	00d9      	lsls	r1, r3, #3
 8009a40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009a44:	00d0      	lsls	r0, r2, #3
 8009a46:	4602      	mov	r2, r0
 8009a48:	460b      	mov	r3, r1
 8009a4a:	eb12 0804 	adds.w	r8, r2, r4
 8009a4e:	eb43 0905 	adc.w	r9, r3, r5
 8009a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	4618      	mov	r0, r3
 8009a58:	f04f 0100 	mov.w	r1, #0
 8009a5c:	f04f 0200 	mov.w	r2, #0
 8009a60:	f04f 0300 	mov.w	r3, #0
 8009a64:	008b      	lsls	r3, r1, #2
 8009a66:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009a6a:	0082      	lsls	r2, r0, #2
 8009a6c:	4640      	mov	r0, r8
 8009a6e:	4649      	mov	r1, r9
 8009a70:	f7f7 f824 	bl	8000abc <__aeabi_uldivmod>
 8009a74:	4602      	mov	r2, r0
 8009a76:	460b      	mov	r3, r1
 8009a78:	4b49      	ldr	r3, [pc, #292]	; (8009ba0 <UART_SetConfig+0x38c>)
 8009a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8009a7e:	095b      	lsrs	r3, r3, #5
 8009a80:	011e      	lsls	r6, r3, #4
 8009a82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a84:	4618      	mov	r0, r3
 8009a86:	f04f 0100 	mov.w	r1, #0
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	1894      	adds	r4, r2, r2
 8009a90:	60bc      	str	r4, [r7, #8]
 8009a92:	415b      	adcs	r3, r3
 8009a94:	60fb      	str	r3, [r7, #12]
 8009a96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a9a:	1812      	adds	r2, r2, r0
 8009a9c:	eb41 0303 	adc.w	r3, r1, r3
 8009aa0:	f04f 0400 	mov.w	r4, #0
 8009aa4:	f04f 0500 	mov.w	r5, #0
 8009aa8:	00dd      	lsls	r5, r3, #3
 8009aaa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009aae:	00d4      	lsls	r4, r2, #3
 8009ab0:	4622      	mov	r2, r4
 8009ab2:	462b      	mov	r3, r5
 8009ab4:	1814      	adds	r4, r2, r0
 8009ab6:	64bc      	str	r4, [r7, #72]	; 0x48
 8009ab8:	414b      	adcs	r3, r1
 8009aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f04f 0100 	mov.w	r1, #0
 8009ac6:	f04f 0200 	mov.w	r2, #0
 8009aca:	f04f 0300 	mov.w	r3, #0
 8009ace:	008b      	lsls	r3, r1, #2
 8009ad0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009ad4:	0082      	lsls	r2, r0, #2
 8009ad6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009ada:	f7f6 ffef 	bl	8000abc <__aeabi_uldivmod>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4b2f      	ldr	r3, [pc, #188]	; (8009ba0 <UART_SetConfig+0x38c>)
 8009ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8009ae8:	095b      	lsrs	r3, r3, #5
 8009aea:	2164      	movs	r1, #100	; 0x64
 8009aec:	fb01 f303 	mul.w	r3, r1, r3
 8009af0:	1ad3      	subs	r3, r2, r3
 8009af2:	011b      	lsls	r3, r3, #4
 8009af4:	3332      	adds	r3, #50	; 0x32
 8009af6:	4a2a      	ldr	r2, [pc, #168]	; (8009ba0 <UART_SetConfig+0x38c>)
 8009af8:	fba2 2303 	umull	r2, r3, r2, r3
 8009afc:	095b      	lsrs	r3, r3, #5
 8009afe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b02:	441e      	add	r6, r3
 8009b04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b06:	4618      	mov	r0, r3
 8009b08:	f04f 0100 	mov.w	r1, #0
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	460b      	mov	r3, r1
 8009b10:	1894      	adds	r4, r2, r2
 8009b12:	603c      	str	r4, [r7, #0]
 8009b14:	415b      	adcs	r3, r3
 8009b16:	607b      	str	r3, [r7, #4]
 8009b18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b1c:	1812      	adds	r2, r2, r0
 8009b1e:	eb41 0303 	adc.w	r3, r1, r3
 8009b22:	f04f 0400 	mov.w	r4, #0
 8009b26:	f04f 0500 	mov.w	r5, #0
 8009b2a:	00dd      	lsls	r5, r3, #3
 8009b2c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009b30:	00d4      	lsls	r4, r2, #3
 8009b32:	4622      	mov	r2, r4
 8009b34:	462b      	mov	r3, r5
 8009b36:	eb12 0a00 	adds.w	sl, r2, r0
 8009b3a:	eb43 0b01 	adc.w	fp, r3, r1
 8009b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	4618      	mov	r0, r3
 8009b44:	f04f 0100 	mov.w	r1, #0
 8009b48:	f04f 0200 	mov.w	r2, #0
 8009b4c:	f04f 0300 	mov.w	r3, #0
 8009b50:	008b      	lsls	r3, r1, #2
 8009b52:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009b56:	0082      	lsls	r2, r0, #2
 8009b58:	4650      	mov	r0, sl
 8009b5a:	4659      	mov	r1, fp
 8009b5c:	f7f6 ffae 	bl	8000abc <__aeabi_uldivmod>
 8009b60:	4602      	mov	r2, r0
 8009b62:	460b      	mov	r3, r1
 8009b64:	4b0e      	ldr	r3, [pc, #56]	; (8009ba0 <UART_SetConfig+0x38c>)
 8009b66:	fba3 1302 	umull	r1, r3, r3, r2
 8009b6a:	095b      	lsrs	r3, r3, #5
 8009b6c:	2164      	movs	r1, #100	; 0x64
 8009b6e:	fb01 f303 	mul.w	r3, r1, r3
 8009b72:	1ad3      	subs	r3, r2, r3
 8009b74:	011b      	lsls	r3, r3, #4
 8009b76:	3332      	adds	r3, #50	; 0x32
 8009b78:	4a09      	ldr	r2, [pc, #36]	; (8009ba0 <UART_SetConfig+0x38c>)
 8009b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b7e:	095b      	lsrs	r3, r3, #5
 8009b80:	f003 020f 	and.w	r2, r3, #15
 8009b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4432      	add	r2, r6
 8009b8a:	609a      	str	r2, [r3, #8]
}
 8009b8c:	bf00      	nop
 8009b8e:	377c      	adds	r7, #124	; 0x7c
 8009b90:	46bd      	mov	sp, r7
 8009b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b96:	bf00      	nop
 8009b98:	40011000 	.word	0x40011000
 8009b9c:	40011400 	.word	0x40011400
 8009ba0:	51eb851f 	.word	0x51eb851f

08009ba4 <__errno>:
 8009ba4:	4b01      	ldr	r3, [pc, #4]	; (8009bac <__errno+0x8>)
 8009ba6:	6818      	ldr	r0, [r3, #0]
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	2000000c 	.word	0x2000000c

08009bb0 <__libc_init_array>:
 8009bb0:	b570      	push	{r4, r5, r6, lr}
 8009bb2:	4d0d      	ldr	r5, [pc, #52]	; (8009be8 <__libc_init_array+0x38>)
 8009bb4:	4c0d      	ldr	r4, [pc, #52]	; (8009bec <__libc_init_array+0x3c>)
 8009bb6:	1b64      	subs	r4, r4, r5
 8009bb8:	10a4      	asrs	r4, r4, #2
 8009bba:	2600      	movs	r6, #0
 8009bbc:	42a6      	cmp	r6, r4
 8009bbe:	d109      	bne.n	8009bd4 <__libc_init_array+0x24>
 8009bc0:	4d0b      	ldr	r5, [pc, #44]	; (8009bf0 <__libc_init_array+0x40>)
 8009bc2:	4c0c      	ldr	r4, [pc, #48]	; (8009bf4 <__libc_init_array+0x44>)
 8009bc4:	f000 fcaa 	bl	800a51c <_init>
 8009bc8:	1b64      	subs	r4, r4, r5
 8009bca:	10a4      	asrs	r4, r4, #2
 8009bcc:	2600      	movs	r6, #0
 8009bce:	42a6      	cmp	r6, r4
 8009bd0:	d105      	bne.n	8009bde <__libc_init_array+0x2e>
 8009bd2:	bd70      	pop	{r4, r5, r6, pc}
 8009bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bd8:	4798      	blx	r3
 8009bda:	3601      	adds	r6, #1
 8009bdc:	e7ee      	b.n	8009bbc <__libc_init_array+0xc>
 8009bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8009be2:	4798      	blx	r3
 8009be4:	3601      	adds	r6, #1
 8009be6:	e7f2      	b.n	8009bce <__libc_init_array+0x1e>
 8009be8:	0800d29c 	.word	0x0800d29c
 8009bec:	0800d29c 	.word	0x0800d29c
 8009bf0:	0800d29c 	.word	0x0800d29c
 8009bf4:	0800d2a0 	.word	0x0800d2a0

08009bf8 <__itoa>:
 8009bf8:	1e93      	subs	r3, r2, #2
 8009bfa:	2b22      	cmp	r3, #34	; 0x22
 8009bfc:	b510      	push	{r4, lr}
 8009bfe:	460c      	mov	r4, r1
 8009c00:	d904      	bls.n	8009c0c <__itoa+0x14>
 8009c02:	2300      	movs	r3, #0
 8009c04:	700b      	strb	r3, [r1, #0]
 8009c06:	461c      	mov	r4, r3
 8009c08:	4620      	mov	r0, r4
 8009c0a:	bd10      	pop	{r4, pc}
 8009c0c:	2a0a      	cmp	r2, #10
 8009c0e:	d109      	bne.n	8009c24 <__itoa+0x2c>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	da07      	bge.n	8009c24 <__itoa+0x2c>
 8009c14:	232d      	movs	r3, #45	; 0x2d
 8009c16:	700b      	strb	r3, [r1, #0]
 8009c18:	4240      	negs	r0, r0
 8009c1a:	2101      	movs	r1, #1
 8009c1c:	4421      	add	r1, r4
 8009c1e:	f000 f82d 	bl	8009c7c <__utoa>
 8009c22:	e7f1      	b.n	8009c08 <__itoa+0x10>
 8009c24:	2100      	movs	r1, #0
 8009c26:	e7f9      	b.n	8009c1c <__itoa+0x24>

08009c28 <itoa>:
 8009c28:	f7ff bfe6 	b.w	8009bf8 <__itoa>

08009c2c <memset>:
 8009c2c:	4402      	add	r2, r0
 8009c2e:	4603      	mov	r3, r0
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d100      	bne.n	8009c36 <memset+0xa>
 8009c34:	4770      	bx	lr
 8009c36:	f803 1b01 	strb.w	r1, [r3], #1
 8009c3a:	e7f9      	b.n	8009c30 <memset+0x4>

08009c3c <siprintf>:
 8009c3c:	b40e      	push	{r1, r2, r3}
 8009c3e:	b500      	push	{lr}
 8009c40:	b09c      	sub	sp, #112	; 0x70
 8009c42:	ab1d      	add	r3, sp, #116	; 0x74
 8009c44:	9002      	str	r0, [sp, #8]
 8009c46:	9006      	str	r0, [sp, #24]
 8009c48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c4c:	4809      	ldr	r0, [pc, #36]	; (8009c74 <siprintf+0x38>)
 8009c4e:	9107      	str	r1, [sp, #28]
 8009c50:	9104      	str	r1, [sp, #16]
 8009c52:	4909      	ldr	r1, [pc, #36]	; (8009c78 <siprintf+0x3c>)
 8009c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c58:	9105      	str	r1, [sp, #20]
 8009c5a:	6800      	ldr	r0, [r0, #0]
 8009c5c:	9301      	str	r3, [sp, #4]
 8009c5e:	a902      	add	r1, sp, #8
 8009c60:	f000 f8aa 	bl	8009db8 <_svfiprintf_r>
 8009c64:	9b02      	ldr	r3, [sp, #8]
 8009c66:	2200      	movs	r2, #0
 8009c68:	701a      	strb	r2, [r3, #0]
 8009c6a:	b01c      	add	sp, #112	; 0x70
 8009c6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c70:	b003      	add	sp, #12
 8009c72:	4770      	bx	lr
 8009c74:	2000000c 	.word	0x2000000c
 8009c78:	ffff0208 	.word	0xffff0208

08009c7c <__utoa>:
 8009c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c7e:	4c1f      	ldr	r4, [pc, #124]	; (8009cfc <__utoa+0x80>)
 8009c80:	b08b      	sub	sp, #44	; 0x2c
 8009c82:	4605      	mov	r5, r0
 8009c84:	460b      	mov	r3, r1
 8009c86:	466e      	mov	r6, sp
 8009c88:	f104 0c20 	add.w	ip, r4, #32
 8009c8c:	6820      	ldr	r0, [r4, #0]
 8009c8e:	6861      	ldr	r1, [r4, #4]
 8009c90:	4637      	mov	r7, r6
 8009c92:	c703      	stmia	r7!, {r0, r1}
 8009c94:	3408      	adds	r4, #8
 8009c96:	4564      	cmp	r4, ip
 8009c98:	463e      	mov	r6, r7
 8009c9a:	d1f7      	bne.n	8009c8c <__utoa+0x10>
 8009c9c:	7921      	ldrb	r1, [r4, #4]
 8009c9e:	7139      	strb	r1, [r7, #4]
 8009ca0:	1e91      	subs	r1, r2, #2
 8009ca2:	6820      	ldr	r0, [r4, #0]
 8009ca4:	6038      	str	r0, [r7, #0]
 8009ca6:	2922      	cmp	r1, #34	; 0x22
 8009ca8:	f04f 0100 	mov.w	r1, #0
 8009cac:	d904      	bls.n	8009cb8 <__utoa+0x3c>
 8009cae:	7019      	strb	r1, [r3, #0]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	b00b      	add	sp, #44	; 0x2c
 8009cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cb8:	1e58      	subs	r0, r3, #1
 8009cba:	4684      	mov	ip, r0
 8009cbc:	fbb5 f7f2 	udiv	r7, r5, r2
 8009cc0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8009cc4:	fb02 5617 	mls	r6, r2, r7, r5
 8009cc8:	4476      	add	r6, lr
 8009cca:	460c      	mov	r4, r1
 8009ccc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009cd0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009cd4:	462e      	mov	r6, r5
 8009cd6:	42b2      	cmp	r2, r6
 8009cd8:	f101 0101 	add.w	r1, r1, #1
 8009cdc:	463d      	mov	r5, r7
 8009cde:	d9ed      	bls.n	8009cbc <__utoa+0x40>
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	545a      	strb	r2, [r3, r1]
 8009ce4:	1919      	adds	r1, r3, r4
 8009ce6:	1aa5      	subs	r5, r4, r2
 8009ce8:	42aa      	cmp	r2, r5
 8009cea:	dae2      	bge.n	8009cb2 <__utoa+0x36>
 8009cec:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009cf0:	780e      	ldrb	r6, [r1, #0]
 8009cf2:	7006      	strb	r6, [r0, #0]
 8009cf4:	3201      	adds	r2, #1
 8009cf6:	f801 5901 	strb.w	r5, [r1], #-1
 8009cfa:	e7f4      	b.n	8009ce6 <__utoa+0x6a>
 8009cfc:	0800d23c 	.word	0x0800d23c

08009d00 <__ssputs_r>:
 8009d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d04:	688e      	ldr	r6, [r1, #8]
 8009d06:	429e      	cmp	r6, r3
 8009d08:	4682      	mov	sl, r0
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	4690      	mov	r8, r2
 8009d0e:	461f      	mov	r7, r3
 8009d10:	d838      	bhi.n	8009d84 <__ssputs_r+0x84>
 8009d12:	898a      	ldrh	r2, [r1, #12]
 8009d14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d18:	d032      	beq.n	8009d80 <__ssputs_r+0x80>
 8009d1a:	6825      	ldr	r5, [r4, #0]
 8009d1c:	6909      	ldr	r1, [r1, #16]
 8009d1e:	eba5 0901 	sub.w	r9, r5, r1
 8009d22:	6965      	ldr	r5, [r4, #20]
 8009d24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	444b      	add	r3, r9
 8009d30:	106d      	asrs	r5, r5, #1
 8009d32:	429d      	cmp	r5, r3
 8009d34:	bf38      	it	cc
 8009d36:	461d      	movcc	r5, r3
 8009d38:	0553      	lsls	r3, r2, #21
 8009d3a:	d531      	bpl.n	8009da0 <__ssputs_r+0xa0>
 8009d3c:	4629      	mov	r1, r5
 8009d3e:	f000 fb47 	bl	800a3d0 <_malloc_r>
 8009d42:	4606      	mov	r6, r0
 8009d44:	b950      	cbnz	r0, 8009d5c <__ssputs_r+0x5c>
 8009d46:	230c      	movs	r3, #12
 8009d48:	f8ca 3000 	str.w	r3, [sl]
 8009d4c:	89a3      	ldrh	r3, [r4, #12]
 8009d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d52:	81a3      	strh	r3, [r4, #12]
 8009d54:	f04f 30ff 	mov.w	r0, #4294967295
 8009d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d5c:	6921      	ldr	r1, [r4, #16]
 8009d5e:	464a      	mov	r2, r9
 8009d60:	f000 fabe 	bl	800a2e0 <memcpy>
 8009d64:	89a3      	ldrh	r3, [r4, #12]
 8009d66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d6e:	81a3      	strh	r3, [r4, #12]
 8009d70:	6126      	str	r6, [r4, #16]
 8009d72:	6165      	str	r5, [r4, #20]
 8009d74:	444e      	add	r6, r9
 8009d76:	eba5 0509 	sub.w	r5, r5, r9
 8009d7a:	6026      	str	r6, [r4, #0]
 8009d7c:	60a5      	str	r5, [r4, #8]
 8009d7e:	463e      	mov	r6, r7
 8009d80:	42be      	cmp	r6, r7
 8009d82:	d900      	bls.n	8009d86 <__ssputs_r+0x86>
 8009d84:	463e      	mov	r6, r7
 8009d86:	4632      	mov	r2, r6
 8009d88:	6820      	ldr	r0, [r4, #0]
 8009d8a:	4641      	mov	r1, r8
 8009d8c:	f000 fab6 	bl	800a2fc <memmove>
 8009d90:	68a3      	ldr	r3, [r4, #8]
 8009d92:	6822      	ldr	r2, [r4, #0]
 8009d94:	1b9b      	subs	r3, r3, r6
 8009d96:	4432      	add	r2, r6
 8009d98:	60a3      	str	r3, [r4, #8]
 8009d9a:	6022      	str	r2, [r4, #0]
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	e7db      	b.n	8009d58 <__ssputs_r+0x58>
 8009da0:	462a      	mov	r2, r5
 8009da2:	f000 fb6f 	bl	800a484 <_realloc_r>
 8009da6:	4606      	mov	r6, r0
 8009da8:	2800      	cmp	r0, #0
 8009daa:	d1e1      	bne.n	8009d70 <__ssputs_r+0x70>
 8009dac:	6921      	ldr	r1, [r4, #16]
 8009dae:	4650      	mov	r0, sl
 8009db0:	f000 fabe 	bl	800a330 <_free_r>
 8009db4:	e7c7      	b.n	8009d46 <__ssputs_r+0x46>
	...

08009db8 <_svfiprintf_r>:
 8009db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dbc:	4698      	mov	r8, r3
 8009dbe:	898b      	ldrh	r3, [r1, #12]
 8009dc0:	061b      	lsls	r3, r3, #24
 8009dc2:	b09d      	sub	sp, #116	; 0x74
 8009dc4:	4607      	mov	r7, r0
 8009dc6:	460d      	mov	r5, r1
 8009dc8:	4614      	mov	r4, r2
 8009dca:	d50e      	bpl.n	8009dea <_svfiprintf_r+0x32>
 8009dcc:	690b      	ldr	r3, [r1, #16]
 8009dce:	b963      	cbnz	r3, 8009dea <_svfiprintf_r+0x32>
 8009dd0:	2140      	movs	r1, #64	; 0x40
 8009dd2:	f000 fafd 	bl	800a3d0 <_malloc_r>
 8009dd6:	6028      	str	r0, [r5, #0]
 8009dd8:	6128      	str	r0, [r5, #16]
 8009dda:	b920      	cbnz	r0, 8009de6 <_svfiprintf_r+0x2e>
 8009ddc:	230c      	movs	r3, #12
 8009dde:	603b      	str	r3, [r7, #0]
 8009de0:	f04f 30ff 	mov.w	r0, #4294967295
 8009de4:	e0d1      	b.n	8009f8a <_svfiprintf_r+0x1d2>
 8009de6:	2340      	movs	r3, #64	; 0x40
 8009de8:	616b      	str	r3, [r5, #20]
 8009dea:	2300      	movs	r3, #0
 8009dec:	9309      	str	r3, [sp, #36]	; 0x24
 8009dee:	2320      	movs	r3, #32
 8009df0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009df4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009df8:	2330      	movs	r3, #48	; 0x30
 8009dfa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009fa4 <_svfiprintf_r+0x1ec>
 8009dfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e02:	f04f 0901 	mov.w	r9, #1
 8009e06:	4623      	mov	r3, r4
 8009e08:	469a      	mov	sl, r3
 8009e0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e0e:	b10a      	cbz	r2, 8009e14 <_svfiprintf_r+0x5c>
 8009e10:	2a25      	cmp	r2, #37	; 0x25
 8009e12:	d1f9      	bne.n	8009e08 <_svfiprintf_r+0x50>
 8009e14:	ebba 0b04 	subs.w	fp, sl, r4
 8009e18:	d00b      	beq.n	8009e32 <_svfiprintf_r+0x7a>
 8009e1a:	465b      	mov	r3, fp
 8009e1c:	4622      	mov	r2, r4
 8009e1e:	4629      	mov	r1, r5
 8009e20:	4638      	mov	r0, r7
 8009e22:	f7ff ff6d 	bl	8009d00 <__ssputs_r>
 8009e26:	3001      	adds	r0, #1
 8009e28:	f000 80aa 	beq.w	8009f80 <_svfiprintf_r+0x1c8>
 8009e2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e2e:	445a      	add	r2, fp
 8009e30:	9209      	str	r2, [sp, #36]	; 0x24
 8009e32:	f89a 3000 	ldrb.w	r3, [sl]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f000 80a2 	beq.w	8009f80 <_svfiprintf_r+0x1c8>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e46:	f10a 0a01 	add.w	sl, sl, #1
 8009e4a:	9304      	str	r3, [sp, #16]
 8009e4c:	9307      	str	r3, [sp, #28]
 8009e4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e52:	931a      	str	r3, [sp, #104]	; 0x68
 8009e54:	4654      	mov	r4, sl
 8009e56:	2205      	movs	r2, #5
 8009e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e5c:	4851      	ldr	r0, [pc, #324]	; (8009fa4 <_svfiprintf_r+0x1ec>)
 8009e5e:	f7f6 f9bf 	bl	80001e0 <memchr>
 8009e62:	9a04      	ldr	r2, [sp, #16]
 8009e64:	b9d8      	cbnz	r0, 8009e9e <_svfiprintf_r+0xe6>
 8009e66:	06d0      	lsls	r0, r2, #27
 8009e68:	bf44      	itt	mi
 8009e6a:	2320      	movmi	r3, #32
 8009e6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e70:	0711      	lsls	r1, r2, #28
 8009e72:	bf44      	itt	mi
 8009e74:	232b      	movmi	r3, #43	; 0x2b
 8009e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e7a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e7e:	2b2a      	cmp	r3, #42	; 0x2a
 8009e80:	d015      	beq.n	8009eae <_svfiprintf_r+0xf6>
 8009e82:	9a07      	ldr	r2, [sp, #28]
 8009e84:	4654      	mov	r4, sl
 8009e86:	2000      	movs	r0, #0
 8009e88:	f04f 0c0a 	mov.w	ip, #10
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e92:	3b30      	subs	r3, #48	; 0x30
 8009e94:	2b09      	cmp	r3, #9
 8009e96:	d94e      	bls.n	8009f36 <_svfiprintf_r+0x17e>
 8009e98:	b1b0      	cbz	r0, 8009ec8 <_svfiprintf_r+0x110>
 8009e9a:	9207      	str	r2, [sp, #28]
 8009e9c:	e014      	b.n	8009ec8 <_svfiprintf_r+0x110>
 8009e9e:	eba0 0308 	sub.w	r3, r0, r8
 8009ea2:	fa09 f303 	lsl.w	r3, r9, r3
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	9304      	str	r3, [sp, #16]
 8009eaa:	46a2      	mov	sl, r4
 8009eac:	e7d2      	b.n	8009e54 <_svfiprintf_r+0x9c>
 8009eae:	9b03      	ldr	r3, [sp, #12]
 8009eb0:	1d19      	adds	r1, r3, #4
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	9103      	str	r1, [sp, #12]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	bfbb      	ittet	lt
 8009eba:	425b      	neglt	r3, r3
 8009ebc:	f042 0202 	orrlt.w	r2, r2, #2
 8009ec0:	9307      	strge	r3, [sp, #28]
 8009ec2:	9307      	strlt	r3, [sp, #28]
 8009ec4:	bfb8      	it	lt
 8009ec6:	9204      	strlt	r2, [sp, #16]
 8009ec8:	7823      	ldrb	r3, [r4, #0]
 8009eca:	2b2e      	cmp	r3, #46	; 0x2e
 8009ecc:	d10c      	bne.n	8009ee8 <_svfiprintf_r+0x130>
 8009ece:	7863      	ldrb	r3, [r4, #1]
 8009ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ed2:	d135      	bne.n	8009f40 <_svfiprintf_r+0x188>
 8009ed4:	9b03      	ldr	r3, [sp, #12]
 8009ed6:	1d1a      	adds	r2, r3, #4
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	9203      	str	r2, [sp, #12]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	bfb8      	it	lt
 8009ee0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ee4:	3402      	adds	r4, #2
 8009ee6:	9305      	str	r3, [sp, #20]
 8009ee8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009fb4 <_svfiprintf_r+0x1fc>
 8009eec:	7821      	ldrb	r1, [r4, #0]
 8009eee:	2203      	movs	r2, #3
 8009ef0:	4650      	mov	r0, sl
 8009ef2:	f7f6 f975 	bl	80001e0 <memchr>
 8009ef6:	b140      	cbz	r0, 8009f0a <_svfiprintf_r+0x152>
 8009ef8:	2340      	movs	r3, #64	; 0x40
 8009efa:	eba0 000a 	sub.w	r0, r0, sl
 8009efe:	fa03 f000 	lsl.w	r0, r3, r0
 8009f02:	9b04      	ldr	r3, [sp, #16]
 8009f04:	4303      	orrs	r3, r0
 8009f06:	3401      	adds	r4, #1
 8009f08:	9304      	str	r3, [sp, #16]
 8009f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f0e:	4826      	ldr	r0, [pc, #152]	; (8009fa8 <_svfiprintf_r+0x1f0>)
 8009f10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f14:	2206      	movs	r2, #6
 8009f16:	f7f6 f963 	bl	80001e0 <memchr>
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	d038      	beq.n	8009f90 <_svfiprintf_r+0x1d8>
 8009f1e:	4b23      	ldr	r3, [pc, #140]	; (8009fac <_svfiprintf_r+0x1f4>)
 8009f20:	bb1b      	cbnz	r3, 8009f6a <_svfiprintf_r+0x1b2>
 8009f22:	9b03      	ldr	r3, [sp, #12]
 8009f24:	3307      	adds	r3, #7
 8009f26:	f023 0307 	bic.w	r3, r3, #7
 8009f2a:	3308      	adds	r3, #8
 8009f2c:	9303      	str	r3, [sp, #12]
 8009f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f30:	4433      	add	r3, r6
 8009f32:	9309      	str	r3, [sp, #36]	; 0x24
 8009f34:	e767      	b.n	8009e06 <_svfiprintf_r+0x4e>
 8009f36:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f3a:	460c      	mov	r4, r1
 8009f3c:	2001      	movs	r0, #1
 8009f3e:	e7a5      	b.n	8009e8c <_svfiprintf_r+0xd4>
 8009f40:	2300      	movs	r3, #0
 8009f42:	3401      	adds	r4, #1
 8009f44:	9305      	str	r3, [sp, #20]
 8009f46:	4619      	mov	r1, r3
 8009f48:	f04f 0c0a 	mov.w	ip, #10
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f52:	3a30      	subs	r2, #48	; 0x30
 8009f54:	2a09      	cmp	r2, #9
 8009f56:	d903      	bls.n	8009f60 <_svfiprintf_r+0x1a8>
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d0c5      	beq.n	8009ee8 <_svfiprintf_r+0x130>
 8009f5c:	9105      	str	r1, [sp, #20]
 8009f5e:	e7c3      	b.n	8009ee8 <_svfiprintf_r+0x130>
 8009f60:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f64:	4604      	mov	r4, r0
 8009f66:	2301      	movs	r3, #1
 8009f68:	e7f0      	b.n	8009f4c <_svfiprintf_r+0x194>
 8009f6a:	ab03      	add	r3, sp, #12
 8009f6c:	9300      	str	r3, [sp, #0]
 8009f6e:	462a      	mov	r2, r5
 8009f70:	4b0f      	ldr	r3, [pc, #60]	; (8009fb0 <_svfiprintf_r+0x1f8>)
 8009f72:	a904      	add	r1, sp, #16
 8009f74:	4638      	mov	r0, r7
 8009f76:	f3af 8000 	nop.w
 8009f7a:	1c42      	adds	r2, r0, #1
 8009f7c:	4606      	mov	r6, r0
 8009f7e:	d1d6      	bne.n	8009f2e <_svfiprintf_r+0x176>
 8009f80:	89ab      	ldrh	r3, [r5, #12]
 8009f82:	065b      	lsls	r3, r3, #25
 8009f84:	f53f af2c 	bmi.w	8009de0 <_svfiprintf_r+0x28>
 8009f88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f8a:	b01d      	add	sp, #116	; 0x74
 8009f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f90:	ab03      	add	r3, sp, #12
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	462a      	mov	r2, r5
 8009f96:	4b06      	ldr	r3, [pc, #24]	; (8009fb0 <_svfiprintf_r+0x1f8>)
 8009f98:	a904      	add	r1, sp, #16
 8009f9a:	4638      	mov	r0, r7
 8009f9c:	f000 f87a 	bl	800a094 <_printf_i>
 8009fa0:	e7eb      	b.n	8009f7a <_svfiprintf_r+0x1c2>
 8009fa2:	bf00      	nop
 8009fa4:	0800d261 	.word	0x0800d261
 8009fa8:	0800d26b 	.word	0x0800d26b
 8009fac:	00000000 	.word	0x00000000
 8009fb0:	08009d01 	.word	0x08009d01
 8009fb4:	0800d267 	.word	0x0800d267

08009fb8 <_printf_common>:
 8009fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fbc:	4616      	mov	r6, r2
 8009fbe:	4699      	mov	r9, r3
 8009fc0:	688a      	ldr	r2, [r1, #8]
 8009fc2:	690b      	ldr	r3, [r1, #16]
 8009fc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	bfb8      	it	lt
 8009fcc:	4613      	movlt	r3, r2
 8009fce:	6033      	str	r3, [r6, #0]
 8009fd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fd4:	4607      	mov	r7, r0
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	b10a      	cbz	r2, 8009fde <_printf_common+0x26>
 8009fda:	3301      	adds	r3, #1
 8009fdc:	6033      	str	r3, [r6, #0]
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	0699      	lsls	r1, r3, #26
 8009fe2:	bf42      	ittt	mi
 8009fe4:	6833      	ldrmi	r3, [r6, #0]
 8009fe6:	3302      	addmi	r3, #2
 8009fe8:	6033      	strmi	r3, [r6, #0]
 8009fea:	6825      	ldr	r5, [r4, #0]
 8009fec:	f015 0506 	ands.w	r5, r5, #6
 8009ff0:	d106      	bne.n	800a000 <_printf_common+0x48>
 8009ff2:	f104 0a19 	add.w	sl, r4, #25
 8009ff6:	68e3      	ldr	r3, [r4, #12]
 8009ff8:	6832      	ldr	r2, [r6, #0]
 8009ffa:	1a9b      	subs	r3, r3, r2
 8009ffc:	42ab      	cmp	r3, r5
 8009ffe:	dc26      	bgt.n	800a04e <_printf_common+0x96>
 800a000:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a004:	1e13      	subs	r3, r2, #0
 800a006:	6822      	ldr	r2, [r4, #0]
 800a008:	bf18      	it	ne
 800a00a:	2301      	movne	r3, #1
 800a00c:	0692      	lsls	r2, r2, #26
 800a00e:	d42b      	bmi.n	800a068 <_printf_common+0xb0>
 800a010:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a014:	4649      	mov	r1, r9
 800a016:	4638      	mov	r0, r7
 800a018:	47c0      	blx	r8
 800a01a:	3001      	adds	r0, #1
 800a01c:	d01e      	beq.n	800a05c <_printf_common+0xa4>
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	68e5      	ldr	r5, [r4, #12]
 800a022:	6832      	ldr	r2, [r6, #0]
 800a024:	f003 0306 	and.w	r3, r3, #6
 800a028:	2b04      	cmp	r3, #4
 800a02a:	bf08      	it	eq
 800a02c:	1aad      	subeq	r5, r5, r2
 800a02e:	68a3      	ldr	r3, [r4, #8]
 800a030:	6922      	ldr	r2, [r4, #16]
 800a032:	bf0c      	ite	eq
 800a034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a038:	2500      	movne	r5, #0
 800a03a:	4293      	cmp	r3, r2
 800a03c:	bfc4      	itt	gt
 800a03e:	1a9b      	subgt	r3, r3, r2
 800a040:	18ed      	addgt	r5, r5, r3
 800a042:	2600      	movs	r6, #0
 800a044:	341a      	adds	r4, #26
 800a046:	42b5      	cmp	r5, r6
 800a048:	d11a      	bne.n	800a080 <_printf_common+0xc8>
 800a04a:	2000      	movs	r0, #0
 800a04c:	e008      	b.n	800a060 <_printf_common+0xa8>
 800a04e:	2301      	movs	r3, #1
 800a050:	4652      	mov	r2, sl
 800a052:	4649      	mov	r1, r9
 800a054:	4638      	mov	r0, r7
 800a056:	47c0      	blx	r8
 800a058:	3001      	adds	r0, #1
 800a05a:	d103      	bne.n	800a064 <_printf_common+0xac>
 800a05c:	f04f 30ff 	mov.w	r0, #4294967295
 800a060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a064:	3501      	adds	r5, #1
 800a066:	e7c6      	b.n	8009ff6 <_printf_common+0x3e>
 800a068:	18e1      	adds	r1, r4, r3
 800a06a:	1c5a      	adds	r2, r3, #1
 800a06c:	2030      	movs	r0, #48	; 0x30
 800a06e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a072:	4422      	add	r2, r4
 800a074:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a078:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a07c:	3302      	adds	r3, #2
 800a07e:	e7c7      	b.n	800a010 <_printf_common+0x58>
 800a080:	2301      	movs	r3, #1
 800a082:	4622      	mov	r2, r4
 800a084:	4649      	mov	r1, r9
 800a086:	4638      	mov	r0, r7
 800a088:	47c0      	blx	r8
 800a08a:	3001      	adds	r0, #1
 800a08c:	d0e6      	beq.n	800a05c <_printf_common+0xa4>
 800a08e:	3601      	adds	r6, #1
 800a090:	e7d9      	b.n	800a046 <_printf_common+0x8e>
	...

0800a094 <_printf_i>:
 800a094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a098:	460c      	mov	r4, r1
 800a09a:	4691      	mov	r9, r2
 800a09c:	7e27      	ldrb	r7, [r4, #24]
 800a09e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a0a0:	2f78      	cmp	r7, #120	; 0x78
 800a0a2:	4680      	mov	r8, r0
 800a0a4:	469a      	mov	sl, r3
 800a0a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0aa:	d807      	bhi.n	800a0bc <_printf_i+0x28>
 800a0ac:	2f62      	cmp	r7, #98	; 0x62
 800a0ae:	d80a      	bhi.n	800a0c6 <_printf_i+0x32>
 800a0b0:	2f00      	cmp	r7, #0
 800a0b2:	f000 80d8 	beq.w	800a266 <_printf_i+0x1d2>
 800a0b6:	2f58      	cmp	r7, #88	; 0x58
 800a0b8:	f000 80a3 	beq.w	800a202 <_printf_i+0x16e>
 800a0bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a0c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0c4:	e03a      	b.n	800a13c <_printf_i+0xa8>
 800a0c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0ca:	2b15      	cmp	r3, #21
 800a0cc:	d8f6      	bhi.n	800a0bc <_printf_i+0x28>
 800a0ce:	a001      	add	r0, pc, #4	; (adr r0, 800a0d4 <_printf_i+0x40>)
 800a0d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a0d4:	0800a12d 	.word	0x0800a12d
 800a0d8:	0800a141 	.word	0x0800a141
 800a0dc:	0800a0bd 	.word	0x0800a0bd
 800a0e0:	0800a0bd 	.word	0x0800a0bd
 800a0e4:	0800a0bd 	.word	0x0800a0bd
 800a0e8:	0800a0bd 	.word	0x0800a0bd
 800a0ec:	0800a141 	.word	0x0800a141
 800a0f0:	0800a0bd 	.word	0x0800a0bd
 800a0f4:	0800a0bd 	.word	0x0800a0bd
 800a0f8:	0800a0bd 	.word	0x0800a0bd
 800a0fc:	0800a0bd 	.word	0x0800a0bd
 800a100:	0800a24d 	.word	0x0800a24d
 800a104:	0800a171 	.word	0x0800a171
 800a108:	0800a22f 	.word	0x0800a22f
 800a10c:	0800a0bd 	.word	0x0800a0bd
 800a110:	0800a0bd 	.word	0x0800a0bd
 800a114:	0800a26f 	.word	0x0800a26f
 800a118:	0800a0bd 	.word	0x0800a0bd
 800a11c:	0800a171 	.word	0x0800a171
 800a120:	0800a0bd 	.word	0x0800a0bd
 800a124:	0800a0bd 	.word	0x0800a0bd
 800a128:	0800a237 	.word	0x0800a237
 800a12c:	680b      	ldr	r3, [r1, #0]
 800a12e:	1d1a      	adds	r2, r3, #4
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	600a      	str	r2, [r1, #0]
 800a134:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a138:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a13c:	2301      	movs	r3, #1
 800a13e:	e0a3      	b.n	800a288 <_printf_i+0x1f4>
 800a140:	6825      	ldr	r5, [r4, #0]
 800a142:	6808      	ldr	r0, [r1, #0]
 800a144:	062e      	lsls	r6, r5, #24
 800a146:	f100 0304 	add.w	r3, r0, #4
 800a14a:	d50a      	bpl.n	800a162 <_printf_i+0xce>
 800a14c:	6805      	ldr	r5, [r0, #0]
 800a14e:	600b      	str	r3, [r1, #0]
 800a150:	2d00      	cmp	r5, #0
 800a152:	da03      	bge.n	800a15c <_printf_i+0xc8>
 800a154:	232d      	movs	r3, #45	; 0x2d
 800a156:	426d      	negs	r5, r5
 800a158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a15c:	485e      	ldr	r0, [pc, #376]	; (800a2d8 <_printf_i+0x244>)
 800a15e:	230a      	movs	r3, #10
 800a160:	e019      	b.n	800a196 <_printf_i+0x102>
 800a162:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a166:	6805      	ldr	r5, [r0, #0]
 800a168:	600b      	str	r3, [r1, #0]
 800a16a:	bf18      	it	ne
 800a16c:	b22d      	sxthne	r5, r5
 800a16e:	e7ef      	b.n	800a150 <_printf_i+0xbc>
 800a170:	680b      	ldr	r3, [r1, #0]
 800a172:	6825      	ldr	r5, [r4, #0]
 800a174:	1d18      	adds	r0, r3, #4
 800a176:	6008      	str	r0, [r1, #0]
 800a178:	0628      	lsls	r0, r5, #24
 800a17a:	d501      	bpl.n	800a180 <_printf_i+0xec>
 800a17c:	681d      	ldr	r5, [r3, #0]
 800a17e:	e002      	b.n	800a186 <_printf_i+0xf2>
 800a180:	0669      	lsls	r1, r5, #25
 800a182:	d5fb      	bpl.n	800a17c <_printf_i+0xe8>
 800a184:	881d      	ldrh	r5, [r3, #0]
 800a186:	4854      	ldr	r0, [pc, #336]	; (800a2d8 <_printf_i+0x244>)
 800a188:	2f6f      	cmp	r7, #111	; 0x6f
 800a18a:	bf0c      	ite	eq
 800a18c:	2308      	moveq	r3, #8
 800a18e:	230a      	movne	r3, #10
 800a190:	2100      	movs	r1, #0
 800a192:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a196:	6866      	ldr	r6, [r4, #4]
 800a198:	60a6      	str	r6, [r4, #8]
 800a19a:	2e00      	cmp	r6, #0
 800a19c:	bfa2      	ittt	ge
 800a19e:	6821      	ldrge	r1, [r4, #0]
 800a1a0:	f021 0104 	bicge.w	r1, r1, #4
 800a1a4:	6021      	strge	r1, [r4, #0]
 800a1a6:	b90d      	cbnz	r5, 800a1ac <_printf_i+0x118>
 800a1a8:	2e00      	cmp	r6, #0
 800a1aa:	d04d      	beq.n	800a248 <_printf_i+0x1b4>
 800a1ac:	4616      	mov	r6, r2
 800a1ae:	fbb5 f1f3 	udiv	r1, r5, r3
 800a1b2:	fb03 5711 	mls	r7, r3, r1, r5
 800a1b6:	5dc7      	ldrb	r7, [r0, r7]
 800a1b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a1bc:	462f      	mov	r7, r5
 800a1be:	42bb      	cmp	r3, r7
 800a1c0:	460d      	mov	r5, r1
 800a1c2:	d9f4      	bls.n	800a1ae <_printf_i+0x11a>
 800a1c4:	2b08      	cmp	r3, #8
 800a1c6:	d10b      	bne.n	800a1e0 <_printf_i+0x14c>
 800a1c8:	6823      	ldr	r3, [r4, #0]
 800a1ca:	07df      	lsls	r7, r3, #31
 800a1cc:	d508      	bpl.n	800a1e0 <_printf_i+0x14c>
 800a1ce:	6923      	ldr	r3, [r4, #16]
 800a1d0:	6861      	ldr	r1, [r4, #4]
 800a1d2:	4299      	cmp	r1, r3
 800a1d4:	bfde      	ittt	le
 800a1d6:	2330      	movle	r3, #48	; 0x30
 800a1d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a1dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a1e0:	1b92      	subs	r2, r2, r6
 800a1e2:	6122      	str	r2, [r4, #16]
 800a1e4:	f8cd a000 	str.w	sl, [sp]
 800a1e8:	464b      	mov	r3, r9
 800a1ea:	aa03      	add	r2, sp, #12
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	4640      	mov	r0, r8
 800a1f0:	f7ff fee2 	bl	8009fb8 <_printf_common>
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	d14c      	bne.n	800a292 <_printf_i+0x1fe>
 800a1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1fc:	b004      	add	sp, #16
 800a1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a202:	4835      	ldr	r0, [pc, #212]	; (800a2d8 <_printf_i+0x244>)
 800a204:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a208:	6823      	ldr	r3, [r4, #0]
 800a20a:	680e      	ldr	r6, [r1, #0]
 800a20c:	061f      	lsls	r7, r3, #24
 800a20e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a212:	600e      	str	r6, [r1, #0]
 800a214:	d514      	bpl.n	800a240 <_printf_i+0x1ac>
 800a216:	07d9      	lsls	r1, r3, #31
 800a218:	bf44      	itt	mi
 800a21a:	f043 0320 	orrmi.w	r3, r3, #32
 800a21e:	6023      	strmi	r3, [r4, #0]
 800a220:	b91d      	cbnz	r5, 800a22a <_printf_i+0x196>
 800a222:	6823      	ldr	r3, [r4, #0]
 800a224:	f023 0320 	bic.w	r3, r3, #32
 800a228:	6023      	str	r3, [r4, #0]
 800a22a:	2310      	movs	r3, #16
 800a22c:	e7b0      	b.n	800a190 <_printf_i+0xfc>
 800a22e:	6823      	ldr	r3, [r4, #0]
 800a230:	f043 0320 	orr.w	r3, r3, #32
 800a234:	6023      	str	r3, [r4, #0]
 800a236:	2378      	movs	r3, #120	; 0x78
 800a238:	4828      	ldr	r0, [pc, #160]	; (800a2dc <_printf_i+0x248>)
 800a23a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a23e:	e7e3      	b.n	800a208 <_printf_i+0x174>
 800a240:	065e      	lsls	r6, r3, #25
 800a242:	bf48      	it	mi
 800a244:	b2ad      	uxthmi	r5, r5
 800a246:	e7e6      	b.n	800a216 <_printf_i+0x182>
 800a248:	4616      	mov	r6, r2
 800a24a:	e7bb      	b.n	800a1c4 <_printf_i+0x130>
 800a24c:	680b      	ldr	r3, [r1, #0]
 800a24e:	6826      	ldr	r6, [r4, #0]
 800a250:	6960      	ldr	r0, [r4, #20]
 800a252:	1d1d      	adds	r5, r3, #4
 800a254:	600d      	str	r5, [r1, #0]
 800a256:	0635      	lsls	r5, r6, #24
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	d501      	bpl.n	800a260 <_printf_i+0x1cc>
 800a25c:	6018      	str	r0, [r3, #0]
 800a25e:	e002      	b.n	800a266 <_printf_i+0x1d2>
 800a260:	0671      	lsls	r1, r6, #25
 800a262:	d5fb      	bpl.n	800a25c <_printf_i+0x1c8>
 800a264:	8018      	strh	r0, [r3, #0]
 800a266:	2300      	movs	r3, #0
 800a268:	6123      	str	r3, [r4, #16]
 800a26a:	4616      	mov	r6, r2
 800a26c:	e7ba      	b.n	800a1e4 <_printf_i+0x150>
 800a26e:	680b      	ldr	r3, [r1, #0]
 800a270:	1d1a      	adds	r2, r3, #4
 800a272:	600a      	str	r2, [r1, #0]
 800a274:	681e      	ldr	r6, [r3, #0]
 800a276:	6862      	ldr	r2, [r4, #4]
 800a278:	2100      	movs	r1, #0
 800a27a:	4630      	mov	r0, r6
 800a27c:	f7f5 ffb0 	bl	80001e0 <memchr>
 800a280:	b108      	cbz	r0, 800a286 <_printf_i+0x1f2>
 800a282:	1b80      	subs	r0, r0, r6
 800a284:	6060      	str	r0, [r4, #4]
 800a286:	6863      	ldr	r3, [r4, #4]
 800a288:	6123      	str	r3, [r4, #16]
 800a28a:	2300      	movs	r3, #0
 800a28c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a290:	e7a8      	b.n	800a1e4 <_printf_i+0x150>
 800a292:	6923      	ldr	r3, [r4, #16]
 800a294:	4632      	mov	r2, r6
 800a296:	4649      	mov	r1, r9
 800a298:	4640      	mov	r0, r8
 800a29a:	47d0      	blx	sl
 800a29c:	3001      	adds	r0, #1
 800a29e:	d0ab      	beq.n	800a1f8 <_printf_i+0x164>
 800a2a0:	6823      	ldr	r3, [r4, #0]
 800a2a2:	079b      	lsls	r3, r3, #30
 800a2a4:	d413      	bmi.n	800a2ce <_printf_i+0x23a>
 800a2a6:	68e0      	ldr	r0, [r4, #12]
 800a2a8:	9b03      	ldr	r3, [sp, #12]
 800a2aa:	4298      	cmp	r0, r3
 800a2ac:	bfb8      	it	lt
 800a2ae:	4618      	movlt	r0, r3
 800a2b0:	e7a4      	b.n	800a1fc <_printf_i+0x168>
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	4632      	mov	r2, r6
 800a2b6:	4649      	mov	r1, r9
 800a2b8:	4640      	mov	r0, r8
 800a2ba:	47d0      	blx	sl
 800a2bc:	3001      	adds	r0, #1
 800a2be:	d09b      	beq.n	800a1f8 <_printf_i+0x164>
 800a2c0:	3501      	adds	r5, #1
 800a2c2:	68e3      	ldr	r3, [r4, #12]
 800a2c4:	9903      	ldr	r1, [sp, #12]
 800a2c6:	1a5b      	subs	r3, r3, r1
 800a2c8:	42ab      	cmp	r3, r5
 800a2ca:	dcf2      	bgt.n	800a2b2 <_printf_i+0x21e>
 800a2cc:	e7eb      	b.n	800a2a6 <_printf_i+0x212>
 800a2ce:	2500      	movs	r5, #0
 800a2d0:	f104 0619 	add.w	r6, r4, #25
 800a2d4:	e7f5      	b.n	800a2c2 <_printf_i+0x22e>
 800a2d6:	bf00      	nop
 800a2d8:	0800d272 	.word	0x0800d272
 800a2dc:	0800d283 	.word	0x0800d283

0800a2e0 <memcpy>:
 800a2e0:	440a      	add	r2, r1
 800a2e2:	4291      	cmp	r1, r2
 800a2e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2e8:	d100      	bne.n	800a2ec <memcpy+0xc>
 800a2ea:	4770      	bx	lr
 800a2ec:	b510      	push	{r4, lr}
 800a2ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2f6:	4291      	cmp	r1, r2
 800a2f8:	d1f9      	bne.n	800a2ee <memcpy+0xe>
 800a2fa:	bd10      	pop	{r4, pc}

0800a2fc <memmove>:
 800a2fc:	4288      	cmp	r0, r1
 800a2fe:	b510      	push	{r4, lr}
 800a300:	eb01 0402 	add.w	r4, r1, r2
 800a304:	d902      	bls.n	800a30c <memmove+0x10>
 800a306:	4284      	cmp	r4, r0
 800a308:	4623      	mov	r3, r4
 800a30a:	d807      	bhi.n	800a31c <memmove+0x20>
 800a30c:	1e43      	subs	r3, r0, #1
 800a30e:	42a1      	cmp	r1, r4
 800a310:	d008      	beq.n	800a324 <memmove+0x28>
 800a312:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a316:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a31a:	e7f8      	b.n	800a30e <memmove+0x12>
 800a31c:	4402      	add	r2, r0
 800a31e:	4601      	mov	r1, r0
 800a320:	428a      	cmp	r2, r1
 800a322:	d100      	bne.n	800a326 <memmove+0x2a>
 800a324:	bd10      	pop	{r4, pc}
 800a326:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a32a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a32e:	e7f7      	b.n	800a320 <memmove+0x24>

0800a330 <_free_r>:
 800a330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a332:	2900      	cmp	r1, #0
 800a334:	d048      	beq.n	800a3c8 <_free_r+0x98>
 800a336:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a33a:	9001      	str	r0, [sp, #4]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	f1a1 0404 	sub.w	r4, r1, #4
 800a342:	bfb8      	it	lt
 800a344:	18e4      	addlt	r4, r4, r3
 800a346:	f000 f8d3 	bl	800a4f0 <__malloc_lock>
 800a34a:	4a20      	ldr	r2, [pc, #128]	; (800a3cc <_free_r+0x9c>)
 800a34c:	9801      	ldr	r0, [sp, #4]
 800a34e:	6813      	ldr	r3, [r2, #0]
 800a350:	4615      	mov	r5, r2
 800a352:	b933      	cbnz	r3, 800a362 <_free_r+0x32>
 800a354:	6063      	str	r3, [r4, #4]
 800a356:	6014      	str	r4, [r2, #0]
 800a358:	b003      	add	sp, #12
 800a35a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a35e:	f000 b8cd 	b.w	800a4fc <__malloc_unlock>
 800a362:	42a3      	cmp	r3, r4
 800a364:	d90b      	bls.n	800a37e <_free_r+0x4e>
 800a366:	6821      	ldr	r1, [r4, #0]
 800a368:	1862      	adds	r2, r4, r1
 800a36a:	4293      	cmp	r3, r2
 800a36c:	bf04      	itt	eq
 800a36e:	681a      	ldreq	r2, [r3, #0]
 800a370:	685b      	ldreq	r3, [r3, #4]
 800a372:	6063      	str	r3, [r4, #4]
 800a374:	bf04      	itt	eq
 800a376:	1852      	addeq	r2, r2, r1
 800a378:	6022      	streq	r2, [r4, #0]
 800a37a:	602c      	str	r4, [r5, #0]
 800a37c:	e7ec      	b.n	800a358 <_free_r+0x28>
 800a37e:	461a      	mov	r2, r3
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	b10b      	cbz	r3, 800a388 <_free_r+0x58>
 800a384:	42a3      	cmp	r3, r4
 800a386:	d9fa      	bls.n	800a37e <_free_r+0x4e>
 800a388:	6811      	ldr	r1, [r2, #0]
 800a38a:	1855      	adds	r5, r2, r1
 800a38c:	42a5      	cmp	r5, r4
 800a38e:	d10b      	bne.n	800a3a8 <_free_r+0x78>
 800a390:	6824      	ldr	r4, [r4, #0]
 800a392:	4421      	add	r1, r4
 800a394:	1854      	adds	r4, r2, r1
 800a396:	42a3      	cmp	r3, r4
 800a398:	6011      	str	r1, [r2, #0]
 800a39a:	d1dd      	bne.n	800a358 <_free_r+0x28>
 800a39c:	681c      	ldr	r4, [r3, #0]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	6053      	str	r3, [r2, #4]
 800a3a2:	4421      	add	r1, r4
 800a3a4:	6011      	str	r1, [r2, #0]
 800a3a6:	e7d7      	b.n	800a358 <_free_r+0x28>
 800a3a8:	d902      	bls.n	800a3b0 <_free_r+0x80>
 800a3aa:	230c      	movs	r3, #12
 800a3ac:	6003      	str	r3, [r0, #0]
 800a3ae:	e7d3      	b.n	800a358 <_free_r+0x28>
 800a3b0:	6825      	ldr	r5, [r4, #0]
 800a3b2:	1961      	adds	r1, r4, r5
 800a3b4:	428b      	cmp	r3, r1
 800a3b6:	bf04      	itt	eq
 800a3b8:	6819      	ldreq	r1, [r3, #0]
 800a3ba:	685b      	ldreq	r3, [r3, #4]
 800a3bc:	6063      	str	r3, [r4, #4]
 800a3be:	bf04      	itt	eq
 800a3c0:	1949      	addeq	r1, r1, r5
 800a3c2:	6021      	streq	r1, [r4, #0]
 800a3c4:	6054      	str	r4, [r2, #4]
 800a3c6:	e7c7      	b.n	800a358 <_free_r+0x28>
 800a3c8:	b003      	add	sp, #12
 800a3ca:	bd30      	pop	{r4, r5, pc}
 800a3cc:	200008fc 	.word	0x200008fc

0800a3d0 <_malloc_r>:
 800a3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d2:	1ccd      	adds	r5, r1, #3
 800a3d4:	f025 0503 	bic.w	r5, r5, #3
 800a3d8:	3508      	adds	r5, #8
 800a3da:	2d0c      	cmp	r5, #12
 800a3dc:	bf38      	it	cc
 800a3de:	250c      	movcc	r5, #12
 800a3e0:	2d00      	cmp	r5, #0
 800a3e2:	4606      	mov	r6, r0
 800a3e4:	db01      	blt.n	800a3ea <_malloc_r+0x1a>
 800a3e6:	42a9      	cmp	r1, r5
 800a3e8:	d903      	bls.n	800a3f2 <_malloc_r+0x22>
 800a3ea:	230c      	movs	r3, #12
 800a3ec:	6033      	str	r3, [r6, #0]
 800a3ee:	2000      	movs	r0, #0
 800a3f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3f2:	f000 f87d 	bl	800a4f0 <__malloc_lock>
 800a3f6:	4921      	ldr	r1, [pc, #132]	; (800a47c <_malloc_r+0xac>)
 800a3f8:	680a      	ldr	r2, [r1, #0]
 800a3fa:	4614      	mov	r4, r2
 800a3fc:	b99c      	cbnz	r4, 800a426 <_malloc_r+0x56>
 800a3fe:	4f20      	ldr	r7, [pc, #128]	; (800a480 <_malloc_r+0xb0>)
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	b923      	cbnz	r3, 800a40e <_malloc_r+0x3e>
 800a404:	4621      	mov	r1, r4
 800a406:	4630      	mov	r0, r6
 800a408:	f000 f862 	bl	800a4d0 <_sbrk_r>
 800a40c:	6038      	str	r0, [r7, #0]
 800a40e:	4629      	mov	r1, r5
 800a410:	4630      	mov	r0, r6
 800a412:	f000 f85d 	bl	800a4d0 <_sbrk_r>
 800a416:	1c43      	adds	r3, r0, #1
 800a418:	d123      	bne.n	800a462 <_malloc_r+0x92>
 800a41a:	230c      	movs	r3, #12
 800a41c:	6033      	str	r3, [r6, #0]
 800a41e:	4630      	mov	r0, r6
 800a420:	f000 f86c 	bl	800a4fc <__malloc_unlock>
 800a424:	e7e3      	b.n	800a3ee <_malloc_r+0x1e>
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	1b5b      	subs	r3, r3, r5
 800a42a:	d417      	bmi.n	800a45c <_malloc_r+0x8c>
 800a42c:	2b0b      	cmp	r3, #11
 800a42e:	d903      	bls.n	800a438 <_malloc_r+0x68>
 800a430:	6023      	str	r3, [r4, #0]
 800a432:	441c      	add	r4, r3
 800a434:	6025      	str	r5, [r4, #0]
 800a436:	e004      	b.n	800a442 <_malloc_r+0x72>
 800a438:	6863      	ldr	r3, [r4, #4]
 800a43a:	42a2      	cmp	r2, r4
 800a43c:	bf0c      	ite	eq
 800a43e:	600b      	streq	r3, [r1, #0]
 800a440:	6053      	strne	r3, [r2, #4]
 800a442:	4630      	mov	r0, r6
 800a444:	f000 f85a 	bl	800a4fc <__malloc_unlock>
 800a448:	f104 000b 	add.w	r0, r4, #11
 800a44c:	1d23      	adds	r3, r4, #4
 800a44e:	f020 0007 	bic.w	r0, r0, #7
 800a452:	1ac2      	subs	r2, r0, r3
 800a454:	d0cc      	beq.n	800a3f0 <_malloc_r+0x20>
 800a456:	1a1b      	subs	r3, r3, r0
 800a458:	50a3      	str	r3, [r4, r2]
 800a45a:	e7c9      	b.n	800a3f0 <_malloc_r+0x20>
 800a45c:	4622      	mov	r2, r4
 800a45e:	6864      	ldr	r4, [r4, #4]
 800a460:	e7cc      	b.n	800a3fc <_malloc_r+0x2c>
 800a462:	1cc4      	adds	r4, r0, #3
 800a464:	f024 0403 	bic.w	r4, r4, #3
 800a468:	42a0      	cmp	r0, r4
 800a46a:	d0e3      	beq.n	800a434 <_malloc_r+0x64>
 800a46c:	1a21      	subs	r1, r4, r0
 800a46e:	4630      	mov	r0, r6
 800a470:	f000 f82e 	bl	800a4d0 <_sbrk_r>
 800a474:	3001      	adds	r0, #1
 800a476:	d1dd      	bne.n	800a434 <_malloc_r+0x64>
 800a478:	e7cf      	b.n	800a41a <_malloc_r+0x4a>
 800a47a:	bf00      	nop
 800a47c:	200008fc 	.word	0x200008fc
 800a480:	20000900 	.word	0x20000900

0800a484 <_realloc_r>:
 800a484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a486:	4607      	mov	r7, r0
 800a488:	4614      	mov	r4, r2
 800a48a:	460e      	mov	r6, r1
 800a48c:	b921      	cbnz	r1, 800a498 <_realloc_r+0x14>
 800a48e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a492:	4611      	mov	r1, r2
 800a494:	f7ff bf9c 	b.w	800a3d0 <_malloc_r>
 800a498:	b922      	cbnz	r2, 800a4a4 <_realloc_r+0x20>
 800a49a:	f7ff ff49 	bl	800a330 <_free_r>
 800a49e:	4625      	mov	r5, r4
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4a4:	f000 f830 	bl	800a508 <_malloc_usable_size_r>
 800a4a8:	42a0      	cmp	r0, r4
 800a4aa:	d20f      	bcs.n	800a4cc <_realloc_r+0x48>
 800a4ac:	4621      	mov	r1, r4
 800a4ae:	4638      	mov	r0, r7
 800a4b0:	f7ff ff8e 	bl	800a3d0 <_malloc_r>
 800a4b4:	4605      	mov	r5, r0
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	d0f2      	beq.n	800a4a0 <_realloc_r+0x1c>
 800a4ba:	4631      	mov	r1, r6
 800a4bc:	4622      	mov	r2, r4
 800a4be:	f7ff ff0f 	bl	800a2e0 <memcpy>
 800a4c2:	4631      	mov	r1, r6
 800a4c4:	4638      	mov	r0, r7
 800a4c6:	f7ff ff33 	bl	800a330 <_free_r>
 800a4ca:	e7e9      	b.n	800a4a0 <_realloc_r+0x1c>
 800a4cc:	4635      	mov	r5, r6
 800a4ce:	e7e7      	b.n	800a4a0 <_realloc_r+0x1c>

0800a4d0 <_sbrk_r>:
 800a4d0:	b538      	push	{r3, r4, r5, lr}
 800a4d2:	4d06      	ldr	r5, [pc, #24]	; (800a4ec <_sbrk_r+0x1c>)
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	4608      	mov	r0, r1
 800a4da:	602b      	str	r3, [r5, #0]
 800a4dc:	f7fb faf8 	bl	8005ad0 <_sbrk>
 800a4e0:	1c43      	adds	r3, r0, #1
 800a4e2:	d102      	bne.n	800a4ea <_sbrk_r+0x1a>
 800a4e4:	682b      	ldr	r3, [r5, #0]
 800a4e6:	b103      	cbz	r3, 800a4ea <_sbrk_r+0x1a>
 800a4e8:	6023      	str	r3, [r4, #0]
 800a4ea:	bd38      	pop	{r3, r4, r5, pc}
 800a4ec:	200010b8 	.word	0x200010b8

0800a4f0 <__malloc_lock>:
 800a4f0:	4801      	ldr	r0, [pc, #4]	; (800a4f8 <__malloc_lock+0x8>)
 800a4f2:	f000 b811 	b.w	800a518 <__retarget_lock_acquire_recursive>
 800a4f6:	bf00      	nop
 800a4f8:	200010c0 	.word	0x200010c0

0800a4fc <__malloc_unlock>:
 800a4fc:	4801      	ldr	r0, [pc, #4]	; (800a504 <__malloc_unlock+0x8>)
 800a4fe:	f000 b80c 	b.w	800a51a <__retarget_lock_release_recursive>
 800a502:	bf00      	nop
 800a504:	200010c0 	.word	0x200010c0

0800a508 <_malloc_usable_size_r>:
 800a508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a50c:	1f18      	subs	r0, r3, #4
 800a50e:	2b00      	cmp	r3, #0
 800a510:	bfbc      	itt	lt
 800a512:	580b      	ldrlt	r3, [r1, r0]
 800a514:	18c0      	addlt	r0, r0, r3
 800a516:	4770      	bx	lr

0800a518 <__retarget_lock_acquire_recursive>:
 800a518:	4770      	bx	lr

0800a51a <__retarget_lock_release_recursive>:
 800a51a:	4770      	bx	lr

0800a51c <_init>:
 800a51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a51e:	bf00      	nop
 800a520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a522:	bc08      	pop	{r3}
 800a524:	469e      	mov	lr, r3
 800a526:	4770      	bx	lr

0800a528 <_fini>:
 800a528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52a:	bf00      	nop
 800a52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a52e:	bc08      	pop	{r3}
 800a530:	469e      	mov	lr, r3
 800a532:	4770      	bx	lr
