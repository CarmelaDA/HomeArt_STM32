
HomeArt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007718  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000834  080078a8  080078a8  000178a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080dc  080080dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080080dc  080080dc  000180dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080e4  080080e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080e4  080080e4  000180e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080e8  080080e8  000180e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080080ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000da8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000e18  20000e18  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014d95  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a75  00000000  00000000  00034e35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef8  00000000  00000000  000378b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e30  00000000  00000000  000387a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004035  00000000  00000000  000395d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000132c3  00000000  00000000  0003d60d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8c93  00000000  00000000  000508d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00129563  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004210  00000000  00000000  001295b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007890 	.word	0x08007890

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007890 	.word	0x08007890

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <ESP_clearBuffer>:
char *Terminate = "</body></html>";


/*****************************************************************************************************************************************/

void ESP_clearBuffer(void){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

	memset(buffer_app, 0, 60);
 800057c:	223c      	movs	r2, #60	; 0x3c
 800057e:	2100      	movs	r1, #0
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <ESP_clearBuffer+0x18>)
 8000582:	f006 fd4f 	bl	8007024 <memset>
	buffer_index = 0;
 8000586:	4b03      	ldr	r3, [pc, #12]	; (8000594 <ESP_clearBuffer+0x1c>)
 8000588:	2200      	movs	r2, #0
 800058a:	801a      	strh	r2, [r3, #0]
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200008fc 	.word	0x200008fc
 8000594:	200009fe 	.word	0x200009fe

08000598 <ESP_Init>:


void ESP_Init(char *SSID, char *PASSWD){
 8000598:	b580      	push	{r7, lr}
 800059a:	b09a      	sub	sp, #104	; 0x68
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]

	ESP_clearBuffer();
 80005a2:	f7ff ffe9 	bl	8000578 <ESP_clearBuffer>
	char data[80];

	ringInit();
 80005a6:	f000 ffcf 	bl	8001548 <ringInit>

	HAL_Delay(1000);
 80005aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ae:	f003 f9d5 	bl	800395c <HAL_Delay>

	/********** AT **********/

	UART_send("AT\r\n", WiFi_UART);
 80005b2:	4974      	ldr	r1, [pc, #464]	; (8000784 <ESP_Init+0x1ec>)
 80005b4:	4874      	ldr	r0, [pc, #464]	; (8000788 <ESP_Init+0x1f0>)
 80005b6:	f001 f985 	bl	80018c4 <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 80005ba:	bf00      	nop
 80005bc:	4971      	ldr	r1, [pc, #452]	; (8000784 <ESP_Init+0x1ec>)
 80005be:	4873      	ldr	r0, [pc, #460]	; (800078c <ESP_Init+0x1f4>)
 80005c0:	f001 fa16 	bl	80019f0 <UART_waitFor>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f8      	beq.n	80005bc <ESP_Init+0x24>
	UART_send("AT  ---->  OK\n", PC_UART);
 80005ca:	4971      	ldr	r1, [pc, #452]	; (8000790 <ESP_Init+0x1f8>)
 80005cc:	4871      	ldr	r0, [pc, #452]	; (8000794 <ESP_Init+0x1fc>)
 80005ce:	f001 f979 	bl	80018c4 <UART_send>


	HAL_Delay(2000);
 80005d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005d6:	f003 f9c1 	bl	800395c <HAL_Delay>


	/********** AT+RST **********/
	UART_send("AT+RST\r\n", WiFi_UART);
 80005da:	496a      	ldr	r1, [pc, #424]	; (8000784 <ESP_Init+0x1ec>)
 80005dc:	486e      	ldr	r0, [pc, #440]	; (8000798 <ESP_Init+0x200>)
 80005de:	f001 f971 	bl	80018c4 <UART_send>
	UART_send("\nReseteando ", PC_UART);
 80005e2:	496b      	ldr	r1, [pc, #428]	; (8000790 <ESP_Init+0x1f8>)
 80005e4:	486d      	ldr	r0, [pc, #436]	; (800079c <ESP_Init+0x204>)
 80005e6:	f001 f96d 	bl	80018c4 <UART_send>

	for (int i=0; i<3; i++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	667b      	str	r3, [r7, #100]	; 0x64
 80005ee:	e00a      	b.n	8000606 <ESP_Init+0x6e>
	{
		UART_send(" . ", PC_UART);
 80005f0:	4967      	ldr	r1, [pc, #412]	; (8000790 <ESP_Init+0x1f8>)
 80005f2:	486b      	ldr	r0, [pc, #428]	; (80007a0 <ESP_Init+0x208>)
 80005f4:	f001 f966 	bl	80018c4 <UART_send>
		HAL_Delay(1500);
 80005f8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005fc:	f003 f9ae 	bl	800395c <HAL_Delay>
	for (int i=0; i<3; i++)
 8000600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000602:	3301      	adds	r3, #1
 8000604:	667b      	str	r3, [r7, #100]	; 0x64
 8000606:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000608:	2b02      	cmp	r3, #2
 800060a:	ddf1      	ble.n	80005f0 <ESP_Init+0x58>
	}


	/********** AT **********/
	UART_send("AT\r\n", WiFi_UART);
 800060c:	495d      	ldr	r1, [pc, #372]	; (8000784 <ESP_Init+0x1ec>)
 800060e:	485e      	ldr	r0, [pc, #376]	; (8000788 <ESP_Init+0x1f0>)
 8000610:	f001 f958 	bl	80018c4 <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 8000614:	bf00      	nop
 8000616:	495b      	ldr	r1, [pc, #364]	; (8000784 <ESP_Init+0x1ec>)
 8000618:	485c      	ldr	r0, [pc, #368]	; (800078c <ESP_Init+0x1f4>)
 800061a:	f001 f9e9 	bl	80019f0 <UART_waitFor>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d0f8      	beq.n	8000616 <ESP_Init+0x7e>
	UART_send("\n\nAT  ---->  OK\n\n", PC_UART);
 8000624:	495a      	ldr	r1, [pc, #360]	; (8000790 <ESP_Init+0x1f8>)
 8000626:	485f      	ldr	r0, [pc, #380]	; (80007a4 <ESP_Init+0x20c>)
 8000628:	f001 f94c 	bl	80018c4 <UART_send>


	HAL_Delay(2000);
 800062c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000630:	f003 f994 	bl	800395c <HAL_Delay>


	/********** AT+CWMODE=3 **********/
	UART_send("AT+CWMODE=3\r\n", WiFi_UART);
 8000634:	4953      	ldr	r1, [pc, #332]	; (8000784 <ESP_Init+0x1ec>)
 8000636:	485c      	ldr	r0, [pc, #368]	; (80007a8 <ESP_Init+0x210>)
 8000638:	f001 f944 	bl	80018c4 <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 800063c:	bf00      	nop
 800063e:	4951      	ldr	r1, [pc, #324]	; (8000784 <ESP_Init+0x1ec>)
 8000640:	4852      	ldr	r0, [pc, #328]	; (800078c <ESP_Init+0x1f4>)
 8000642:	f001 f9d5 	bl	80019f0 <UART_waitFor>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d0f8      	beq.n	800063e <ESP_Init+0xa6>
	UART_send("CW MODE  ---->  3\n\n", PC_UART);
 800064c:	4950      	ldr	r1, [pc, #320]	; (8000790 <ESP_Init+0x1f8>)
 800064e:	4857      	ldr	r0, [pc, #348]	; (80007ac <ESP_Init+0x214>)
 8000650:	f001 f938 	bl	80018c4 <UART_send>


	/********** AT+CWJAP="SSID","PASSWD" **********/
	UART_send("Conectando con la RED proporcionada ", PC_UART);
 8000654:	494e      	ldr	r1, [pc, #312]	; (8000790 <ESP_Init+0x1f8>)
 8000656:	4856      	ldr	r0, [pc, #344]	; (80007b0 <ESP_Init+0x218>)
 8000658:	f001 f934 	bl	80018c4 <UART_send>

	for (int i=0; i<3; i++)
 800065c:	2300      	movs	r3, #0
 800065e:	663b      	str	r3, [r7, #96]	; 0x60
 8000660:	e00a      	b.n	8000678 <ESP_Init+0xe0>
	{
		UART_send(" . ", PC_UART);
 8000662:	494b      	ldr	r1, [pc, #300]	; (8000790 <ESP_Init+0x1f8>)
 8000664:	484e      	ldr	r0, [pc, #312]	; (80007a0 <ESP_Init+0x208>)
 8000666:	f001 f92d 	bl	80018c4 <UART_send>
		HAL_Delay(1500);
 800066a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800066e:	f003 f975 	bl	800395c <HAL_Delay>
	for (int i=0; i<3; i++)
 8000672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000674:	3301      	adds	r3, #1
 8000676:	663b      	str	r3, [r7, #96]	; 0x60
 8000678:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800067a:	2b02      	cmp	r3, #2
 800067c:	ddf1      	ble.n	8000662 <ESP_Init+0xca>
	}

	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 800067e:	f107 000c 	add.w	r0, r7, #12
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	494b      	ldr	r1, [pc, #300]	; (80007b4 <ESP_Init+0x21c>)
 8000688:	f006 fcd4 	bl	8007034 <siprintf>
	UART_send(data, WiFi_UART);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	493c      	ldr	r1, [pc, #240]	; (8000784 <ESP_Init+0x1ec>)
 8000692:	4618      	mov	r0, r3
 8000694:	f001 f916 	bl	80018c4 <UART_send>
	while (!(UART_waitFor("WIFI GOT IP\r\n\r\nOK\r\n", WiFi_UART)));
 8000698:	bf00      	nop
 800069a:	493a      	ldr	r1, [pc, #232]	; (8000784 <ESP_Init+0x1ec>)
 800069c:	4846      	ldr	r0, [pc, #280]	; (80007b8 <ESP_Init+0x220>)
 800069e:	f001 f9a7 	bl	80019f0 <UART_waitFor>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d0f8      	beq.n	800069a <ESP_Init+0x102>
	sprintf (data, "\n\nConectado a  \"%s\"\n\n", SSID);
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	4943      	ldr	r1, [pc, #268]	; (80007bc <ESP_Init+0x224>)
 80006b0:	4618      	mov	r0, r3
 80006b2:	f006 fcbf 	bl	8007034 <siprintf>
	UART_send(data,PC_UART);
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	4935      	ldr	r1, [pc, #212]	; (8000790 <ESP_Init+0x1f8>)
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 f901 	bl	80018c4 <UART_send>
	//UART_send("AT+CIPSTA?\r\n", WiFi_UART);
	//sprintf (data, "AT+CIPSTA?\r\n");


	/********** AT+CIFSR **********/
	UART_send("AT+CIFSR\r\n", WiFi_UART);
 80006c2:	4930      	ldr	r1, [pc, #192]	; (8000784 <ESP_Init+0x1ec>)
 80006c4:	483e      	ldr	r0, [pc, #248]	; (80007c0 <ESP_Init+0x228>)
 80006c6:	f001 f8fd 	bl	80018c4 <UART_send>
	while (!(UART_waitFor("CIFSR:STAIP,\"", WiFi_UART)));
 80006ca:	bf00      	nop
 80006cc:	492d      	ldr	r1, [pc, #180]	; (8000784 <ESP_Init+0x1ec>)
 80006ce:	483d      	ldr	r0, [pc, #244]	; (80007c4 <ESP_Init+0x22c>)
 80006d0:	f001 f98e 	bl	80019f0 <UART_waitFor>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d0f8      	beq.n	80006cc <ESP_Init+0x134>
	while (!(UART_copyUpto("\"",buffer, WiFi_UART)));
 80006da:	bf00      	nop
 80006dc:	4a29      	ldr	r2, [pc, #164]	; (8000784 <ESP_Init+0x1ec>)
 80006de:	493a      	ldr	r1, [pc, #232]	; (80007c8 <ESP_Init+0x230>)
 80006e0:	483a      	ldr	r0, [pc, #232]	; (80007cc <ESP_Init+0x234>)
 80006e2:	f001 f907 	bl	80018f4 <UART_copyUpto>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0f7      	beq.n	80006dc <ESP_Init+0x144>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 80006ec:	bf00      	nop
 80006ee:	4925      	ldr	r1, [pc, #148]	; (8000784 <ESP_Init+0x1ec>)
 80006f0:	4826      	ldr	r0, [pc, #152]	; (800078c <ESP_Init+0x1f4>)
 80006f2:	f001 f97d 	bl	80019f0 <UART_waitFor>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d0f8      	beq.n	80006ee <ESP_Init+0x156>
	int len = strlen (buffer);
 80006fc:	4832      	ldr	r0, [pc, #200]	; (80007c8 <ESP_Init+0x230>)
 80006fe:	f7ff fd67 	bl	80001d0 <strlen>
 8000702:	4603      	mov	r3, r0
 8000704:	65fb      	str	r3, [r7, #92]	; 0x5c
	buffer[len-1] = '\0';
 8000706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000708:	3b01      	subs	r3, #1
 800070a:	4a2f      	ldr	r2, [pc, #188]	; (80007c8 <ESP_Init+0x230>)
 800070c:	2100      	movs	r1, #0
 800070e:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP :  %s\n\n", buffer);
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	4a2c      	ldr	r2, [pc, #176]	; (80007c8 <ESP_Init+0x230>)
 8000716:	492e      	ldr	r1, [pc, #184]	; (80007d0 <ESP_Init+0x238>)
 8000718:	4618      	mov	r0, r3
 800071a:	f006 fc8b 	bl	8007034 <siprintf>
	UART_send(data, PC_UART);
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	491b      	ldr	r1, [pc, #108]	; (8000790 <ESP_Init+0x1f8>)
 8000724:	4618      	mov	r0, r3
 8000726:	f001 f8cd 	bl	80018c4 <UART_send>


	/********** AT+CIPMUX=1 **********/
	UART_send("AT+CIPMUX=1\r\n", WiFi_UART);
 800072a:	4916      	ldr	r1, [pc, #88]	; (8000784 <ESP_Init+0x1ec>)
 800072c:	4829      	ldr	r0, [pc, #164]	; (80007d4 <ESP_Init+0x23c>)
 800072e:	f001 f8c9 	bl	80018c4 <UART_send>
	while (!(UART_waitFor("AT+CIPMUX=1\r\r\n\r\nOK\r\n", WiFi_UART)));
 8000732:	bf00      	nop
 8000734:	4913      	ldr	r1, [pc, #76]	; (8000784 <ESP_Init+0x1ec>)
 8000736:	4828      	ldr	r0, [pc, #160]	; (80007d8 <ESP_Init+0x240>)
 8000738:	f001 f95a 	bl	80019f0 <UART_waitFor>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0f8      	beq.n	8000734 <ESP_Init+0x19c>
	UART_send("CIPMUX  ---->  OK\n\n", PC_UART);
 8000742:	4913      	ldr	r1, [pc, #76]	; (8000790 <ESP_Init+0x1f8>)
 8000744:	4825      	ldr	r0, [pc, #148]	; (80007dc <ESP_Init+0x244>)
 8000746:	f001 f8bd 	bl	80018c4 <UART_send>
	//while (!(UART_waitFor("OK\r\n", WiFi_UART)));
	//UART_send("CIPSTART  ---->  OK\n\n", PC_UART);


	/********** AT+CIPSERVER=1,80 **********/
	UART_send("AT+CIPSERVER=1,80\r\n", WiFi_UART);
 800074a:	490e      	ldr	r1, [pc, #56]	; (8000784 <ESP_Init+0x1ec>)
 800074c:	4824      	ldr	r0, [pc, #144]	; (80007e0 <ESP_Init+0x248>)
 800074e:	f001 f8b9 	bl	80018c4 <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 8000752:	bf00      	nop
 8000754:	490b      	ldr	r1, [pc, #44]	; (8000784 <ESP_Init+0x1ec>)
 8000756:	480d      	ldr	r0, [pc, #52]	; (800078c <ESP_Init+0x1f4>)
 8000758:	f001 f94a 	bl	80019f0 <UART_waitFor>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d0f8      	beq.n	8000754 <ESP_Init+0x1bc>
	UART_send("CIPSERVER  ---->  OK\n\n", PC_UART);
 8000762:	490b      	ldr	r1, [pc, #44]	; (8000790 <ESP_Init+0x1f8>)
 8000764:	481f      	ldr	r0, [pc, #124]	; (80007e4 <ESP_Init+0x24c>)
 8000766:	f001 f8ad 	bl	80018c4 <UART_send>


	/********** FIN **********/
	UART_send("Conectado a la IP\n\n", PC_UART);
 800076a:	4909      	ldr	r1, [pc, #36]	; (8000790 <ESP_Init+0x1f8>)
 800076c:	481e      	ldr	r0, [pc, #120]	; (80007e8 <ESP_Init+0x250>)
 800076e:	f001 f8a9 	bl	80018c4 <UART_send>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1); // CONNECTED
 8000772:	2201      	movs	r2, #1
 8000774:	2101      	movs	r1, #1
 8000776:	481d      	ldr	r0, [pc, #116]	; (80007ec <ESP_Init+0x254>)
 8000778:	f004 f838 	bl	80047ec <HAL_GPIO_WritePin>
}
 800077c:	bf00      	nop
 800077e:	3768      	adds	r7, #104	; 0x68
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000db8 	.word	0x20000db8
 8000788:	08007cbc 	.word	0x08007cbc
 800078c:	08007cc4 	.word	0x08007cc4
 8000790:	20000d2c 	.word	0x20000d2c
 8000794:	08007ccc 	.word	0x08007ccc
 8000798:	08007cdc 	.word	0x08007cdc
 800079c:	08007ce8 	.word	0x08007ce8
 80007a0:	08007cf8 	.word	0x08007cf8
 80007a4:	08007cfc 	.word	0x08007cfc
 80007a8:	08007d10 	.word	0x08007d10
 80007ac:	08007d20 	.word	0x08007d20
 80007b0:	08007d34 	.word	0x08007d34
 80007b4:	08007d5c 	.word	0x08007d5c
 80007b8:	08007d74 	.word	0x08007d74
 80007bc:	08007d88 	.word	0x08007d88
 80007c0:	08007da0 	.word	0x08007da0
 80007c4:	08007dac 	.word	0x08007dac
 80007c8:	2000094c 	.word	0x2000094c
 80007cc:	08007dbc 	.word	0x08007dbc
 80007d0:	08007dc0 	.word	0x08007dc0
 80007d4:	08007dcc 	.word	0x08007dcc
 80007d8:	08007ddc 	.word	0x08007ddc
 80007dc:	08007df4 	.word	0x08007df4
 80007e0:	08007e08 	.word	0x08007e08
 80007e4:	08007e1c 	.word	0x08007e1c
 80007e8:	08007e34 	.word	0x08007e34
 80007ec:	40020800 	.word	0x40020800

080007f0 <ESP_messageHandler>:
	}
	return -1;
}


void ESP_messageHandler(void){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

	//__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);

	memset(textrc, 0, 100);
 80007f4:	2264      	movs	r2, #100	; 0x64
 80007f6:	2100      	movs	r1, #0
 80007f8:	48a9      	ldr	r0, [pc, #676]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80007fa:	f006 fc13 	bl	8007024 <memset>

	HAL_UART_Receive(&huart2, (uint8_t *)textrc, 100, 100); //(uint8_t *)
 80007fe:	2364      	movs	r3, #100	; 0x64
 8000800:	2264      	movs	r2, #100	; 0x64
 8000802:	49a7      	ldr	r1, [pc, #668]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000804:	48a7      	ldr	r0, [pc, #668]	; (8000aa4 <ESP_messageHandler+0x2b4>)
 8000806:	f005 fcb8 	bl	800617a <HAL_UART_Receive>

	HAL_UART_Transmit(&huart6, (uint8_t *)textrc, 100, HAL_MAX_DELAY);
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	2264      	movs	r2, #100	; 0x64
 8000810:	49a3      	ldr	r1, [pc, #652]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000812:	48a5      	ldr	r0, [pc, #660]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 8000814:	f005 fc1f 	bl	8006056 <HAL_UART_Transmit>
	UART_send("\n", PC_UART);
 8000818:	49a3      	ldr	r1, [pc, #652]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 800081a:	48a4      	ldr	r0, [pc, #656]	; (8000aac <ESP_messageHandler+0x2bc>)
 800081c:	f001 f852 	bl	80018c4 <UART_send>

	fragment[0] = textrc[25]; // Asignación de Fragmento
 8000820:	4b9f      	ldr	r3, [pc, #636]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000822:	7e5a      	ldrb	r2, [r3, #25]
 8000824:	4ba2      	ldr	r3, [pc, #648]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000826:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart6, (uint8_t *)fragment, 1, HAL_MAX_DELAY);
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	2201      	movs	r2, #1
 800082e:	49a0      	ldr	r1, [pc, #640]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000830:	489d      	ldr	r0, [pc, #628]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 8000832:	f005 fc10 	bl	8006056 <HAL_UART_Transmit>
	UART_send("\n", PC_UART);
 8000836:	499c      	ldr	r1, [pc, #624]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 8000838:	489c      	ldr	r0, [pc, #624]	; (8000aac <ESP_messageHandler+0x2bc>)
 800083a:	f001 f843 	bl	80018c4 <UART_send>


	// SEGURIDAD
	if (fragment[0] == 's'){
 800083e:	4b9c      	ldr	r3, [pc, #624]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b73      	cmp	r3, #115	; 0x73
 8000844:	d10b      	bne.n	800085e <ESP_messageHandler+0x6e>
		UART_send("SEGURIDAD \n", PC_UART);
 8000846:	4998      	ldr	r1, [pc, #608]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 8000848:	489a      	ldr	r0, [pc, #616]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 800084a:	f001 f83b 	bl	80018c4 <UART_send>
		vSeg[0] = textrc[28]; // Alarma Interior
 800084e:	4b94      	ldr	r3, [pc, #592]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000850:	7f1a      	ldrb	r2, [r3, #28]
 8000852:	4b99      	ldr	r3, [pc, #612]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000854:	701a      	strb	r2, [r3, #0]
		vSeg[1] = textrc[31]; // Alarma Exterior
 8000856:	4b92      	ldr	r3, [pc, #584]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000858:	7fda      	ldrb	r2, [r3, #31]
 800085a:	4b97      	ldr	r3, [pc, #604]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 800085c:	705a      	strb	r2, [r3, #1]
	}

	// ILUMINACIÓN
	if (fragment[0] == 'i'){
 800085e:	4b94      	ldr	r3, [pc, #592]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b69      	cmp	r3, #105	; 0x69
 8000864:	f040 8234 	bne.w	8000cd0 <ESP_messageHandler+0x4e0>
		UART_send("ILUMINACION \n", PC_UART);
 8000868:	498f      	ldr	r1, [pc, #572]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 800086a:	4894      	ldr	r0, [pc, #592]	; (8000abc <ESP_messageHandler+0x2cc>)
 800086c:	f001 f82a 	bl	80018c4 <UART_send>
		vIlum[0] = textrc[28]; 	// Luz Sala
 8000870:	4b8b      	ldr	r3, [pc, #556]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000872:	7f1a      	ldrb	r2, [r3, #28]
 8000874:	4b92      	ldr	r3, [pc, #584]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000876:	701a      	strb	r2, [r3, #0]
		vIlum[1] = textrc[31]; 	// Luz Comedor
 8000878:	4b89      	ldr	r3, [pc, #548]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 800087a:	7fda      	ldrb	r2, [r3, #31]
 800087c:	4b90      	ldr	r3, [pc, #576]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800087e:	705a      	strb	r2, [r3, #1]
		vIlum[2] = textrc[34]; 	// Luz Ambiente
 8000880:	4b87      	ldr	r3, [pc, #540]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000882:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000886:	4b8e      	ldr	r3, [pc, #568]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000888:	709a      	strb	r2, [r3, #2]
		vIlum[3] = textrc[37]; 	// Luz Recibidor
 800088a:	4b85      	ldr	r3, [pc, #532]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 800088c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000890:	4b8b      	ldr	r3, [pc, #556]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000892:	70da      	strb	r2, [r3, #3]
		vIlum[4] = textrc[40]; 	// Luz Cocina
 8000894:	4b82      	ldr	r3, [pc, #520]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000896:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800089a:	4b89      	ldr	r3, [pc, #548]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800089c:	711a      	strb	r2, [r3, #4]
		vIlum[5] = textrc[43]; 	// Luz Fregadero
 800089e:	4b80      	ldr	r3, [pc, #512]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008a0:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80008a4:	4b86      	ldr	r3, [pc, #536]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008a6:	715a      	strb	r2, [r3, #5]
		vIlum[6] = textrc[46]; 	// Luz Baño
 80008a8:	4b7d      	ldr	r3, [pc, #500]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008aa:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80008ae:	4b84      	ldr	r3, [pc, #528]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008b0:	719a      	strb	r2, [r3, #6]
		vIlum[7] = textrc[49]; 	// Luz Espejo
 80008b2:	4b7b      	ldr	r3, [pc, #492]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008b4:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80008b8:	4b81      	ldr	r3, [pc, #516]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008ba:	71da      	strb	r2, [r3, #7]
		vIlum[8] = textrc[52]; 	// Luz Dormitorio
 80008bc:	4b78      	ldr	r3, [pc, #480]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008be:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80008c2:	4b7f      	ldr	r3, [pc, #508]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008c4:	721a      	strb	r2, [r3, #8]
		vIlum[9] = textrc[55]; 	// Luz Mesita Izq
 80008c6:	4b76      	ldr	r3, [pc, #472]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008c8:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80008cc:	4b7c      	ldr	r3, [pc, #496]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008ce:	725a      	strb	r2, [r3, #9]
		vIlum[10] = textrc[58]; // Luz Mesita Dch
 80008d0:	4b73      	ldr	r3, [pc, #460]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008d2:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80008d6:	4b7a      	ldr	r3, [pc, #488]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008d8:	729a      	strb	r2, [r3, #10]
		vIlum[11] = textrc[61]; // Luz Oficina
 80008da:	4b71      	ldr	r3, [pc, #452]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008dc:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80008e0:	4b77      	ldr	r3, [pc, #476]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008e2:	72da      	strb	r2, [r3, #11]
		vIlum[12] = textrc[64]; // Luz Gaming
 80008e4:	4b6e      	ldr	r3, [pc, #440]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008e6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80008ea:	4b75      	ldr	r3, [pc, #468]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008ec:	731a      	strb	r2, [r3, #12]
		vIlum[13] = textrc[67]; // Luz Rx100
 80008ee:	4b6c      	ldr	r3, [pc, #432]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008f0:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80008f4:	4b72      	ldr	r3, [pc, #456]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008f6:	735a      	strb	r2, [r3, #13]
		vIlum[14] = textrc[68]; // Luz Rx10
 80008f8:	4b69      	ldr	r3, [pc, #420]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008fa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80008fe:	4b70      	ldr	r3, [pc, #448]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000900:	739a      	strb	r2, [r3, #14]
		vIlum[15] = textrc[69]; // Luz Rx1
 8000902:	4b67      	ldr	r3, [pc, #412]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000904:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8000908:	4b6d      	ldr	r3, [pc, #436]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800090a:	73da      	strb	r2, [r3, #15]
		vIlum[16] = textrc[72]; // Luz Gx100
 800090c:	4b64      	ldr	r3, [pc, #400]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 800090e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8000912:	4b6b      	ldr	r3, [pc, #428]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000914:	741a      	strb	r2, [r3, #16]
		vIlum[17] = textrc[73]; // Luz Gx10
 8000916:	4b62      	ldr	r3, [pc, #392]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000918:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800091c:	4b68      	ldr	r3, [pc, #416]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800091e:	745a      	strb	r2, [r3, #17]
		vIlum[18] = textrc[74]; // Luz Gx1
 8000920:	4b5f      	ldr	r3, [pc, #380]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000922:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8000926:	4b66      	ldr	r3, [pc, #408]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000928:	749a      	strb	r2, [r3, #18]
		vIlum[19] = textrc[77]; // Luz Bx100
 800092a:	4b5d      	ldr	r3, [pc, #372]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 800092c:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8000930:	4b63      	ldr	r3, [pc, #396]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000932:	74da      	strb	r2, [r3, #19]
		vIlum[20] = textrc[78]; // Luz Bx10
 8000934:	4b5a      	ldr	r3, [pc, #360]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000936:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 800093a:	4b61      	ldr	r3, [pc, #388]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800093c:	751a      	strb	r2, [r3, #20]
		vIlum[21] = textrc[79]; // Luz Bx1
 800093e:	4b58      	ldr	r3, [pc, #352]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000940:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8000944:	4b5e      	ldr	r3, [pc, #376]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000946:	755a      	strb	r2, [r3, #21]
		vIlum[22] = textrc[82]; // Luz Garaje
 8000948:	4b55      	ldr	r3, [pc, #340]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 800094a:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 800094e:	4b5c      	ldr	r3, [pc, #368]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000950:	759a      	strb	r2, [r3, #22]
		vIlum[23] = textrc[85]; // Luz Jardín
 8000952:	4b53      	ldr	r3, [pc, #332]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000954:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8000958:	4b59      	ldr	r3, [pc, #356]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800095a:	75da      	strb	r2, [r3, #23]
		vIlum[24] = textrc[88]; // Luz Porche
 800095c:	4b50      	ldr	r3, [pc, #320]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 800095e:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8000962:	4b57      	ldr	r3, [pc, #348]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000964:	761a      	strb	r2, [r3, #24]
		vIlum[25] = textrc[91]; // Luz Tendedero
 8000966:	4b4e      	ldr	r3, [pc, #312]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000968:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 800096c:	4b54      	ldr	r3, [pc, #336]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800096e:	765a      	strb	r2, [r3, #25]
		vIlum[26] = textrc[94]; // Automático
 8000970:	4b4b      	ldr	r3, [pc, #300]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000972:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 8000976:	4b52      	ldr	r3, [pc, #328]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000978:	769a      	strb	r2, [r3, #26]


		if(vIlum[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, RESET);
 800097a:	4b51      	ldr	r3, [pc, #324]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b30      	cmp	r3, #48	; 0x30
 8000980:	d105      	bne.n	800098e <ESP_messageHandler+0x19e>
 8000982:	2200      	movs	r2, #0
 8000984:	2108      	movs	r1, #8
 8000986:	484f      	ldr	r0, [pc, #316]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 8000988:	f003 ff30 	bl	80047ec <HAL_GPIO_WritePin>
 800098c:	e008      	b.n	80009a0 <ESP_messageHandler+0x1b0>
		else if(vIlum[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, SET);
 800098e:	4b4c      	ldr	r3, [pc, #304]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b31      	cmp	r3, #49	; 0x31
 8000994:	d104      	bne.n	80009a0 <ESP_messageHandler+0x1b0>
 8000996:	2201      	movs	r2, #1
 8000998:	2108      	movs	r1, #8
 800099a:	484a      	ldr	r0, [pc, #296]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 800099c:	f003 ff26 	bl	80047ec <HAL_GPIO_WritePin>

		if(vIlum[1] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET);
 80009a0:	4b47      	ldr	r3, [pc, #284]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80009a2:	785b      	ldrb	r3, [r3, #1]
 80009a4:	2b30      	cmp	r3, #48	; 0x30
 80009a6:	d105      	bne.n	80009b4 <ESP_messageHandler+0x1c4>
 80009a8:	2200      	movs	r2, #0
 80009aa:	2102      	movs	r1, #2
 80009ac:	4845      	ldr	r0, [pc, #276]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 80009ae:	f003 ff1d 	bl	80047ec <HAL_GPIO_WritePin>
 80009b2:	e008      	b.n	80009c6 <ESP_messageHandler+0x1d6>
		else if(vIlum[1] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, SET);
 80009b4:	4b42      	ldr	r3, [pc, #264]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80009b6:	785b      	ldrb	r3, [r3, #1]
 80009b8:	2b31      	cmp	r3, #49	; 0x31
 80009ba:	d104      	bne.n	80009c6 <ESP_messageHandler+0x1d6>
 80009bc:	2201      	movs	r2, #1
 80009be:	2102      	movs	r1, #2
 80009c0:	4840      	ldr	r0, [pc, #256]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 80009c2:	f003 ff13 	bl	80047ec <HAL_GPIO_WritePin>

		if(vIlum[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, RESET);
 80009c6:	4b3e      	ldr	r3, [pc, #248]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80009c8:	789b      	ldrb	r3, [r3, #2]
 80009ca:	2b30      	cmp	r3, #48	; 0x30
 80009cc:	d105      	bne.n	80009da <ESP_messageHandler+0x1ea>
 80009ce:	2200      	movs	r2, #0
 80009d0:	2120      	movs	r1, #32
 80009d2:	483c      	ldr	r0, [pc, #240]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 80009d4:	f003 ff0a 	bl	80047ec <HAL_GPIO_WritePin>
 80009d8:	e008      	b.n	80009ec <ESP_messageHandler+0x1fc>
		else if(vIlum[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, SET);
 80009da:	4b39      	ldr	r3, [pc, #228]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80009dc:	789b      	ldrb	r3, [r3, #2]
 80009de:	2b31      	cmp	r3, #49	; 0x31
 80009e0:	d104      	bne.n	80009ec <ESP_messageHandler+0x1fc>
 80009e2:	2201      	movs	r2, #1
 80009e4:	2120      	movs	r1, #32
 80009e6:	4837      	ldr	r0, [pc, #220]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 80009e8:	f003 ff00 	bl	80047ec <HAL_GPIO_WritePin>

		if(vIlum[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET);
 80009ec:	4b34      	ldr	r3, [pc, #208]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80009ee:	78db      	ldrb	r3, [r3, #3]
 80009f0:	2b30      	cmp	r3, #48	; 0x30
 80009f2:	d105      	bne.n	8000a00 <ESP_messageHandler+0x210>
 80009f4:	2200      	movs	r2, #0
 80009f6:	2101      	movs	r1, #1
 80009f8:	4832      	ldr	r0, [pc, #200]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 80009fa:	f003 fef7 	bl	80047ec <HAL_GPIO_WritePin>
 80009fe:	e008      	b.n	8000a12 <ESP_messageHandler+0x222>
		else if(vIlum[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 8000a00:	4b2f      	ldr	r3, [pc, #188]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a02:	78db      	ldrb	r3, [r3, #3]
 8000a04:	2b31      	cmp	r3, #49	; 0x31
 8000a06:	d104      	bne.n	8000a12 <ESP_messageHandler+0x222>
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	482d      	ldr	r0, [pc, #180]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 8000a0e:	f003 feed 	bl	80047ec <HAL_GPIO_WritePin>

		if(vIlum[4] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET);
 8000a12:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a14:	791b      	ldrb	r3, [r3, #4]
 8000a16:	2b30      	cmp	r3, #48	; 0x30
 8000a18:	d106      	bne.n	8000a28 <ESP_messageHandler+0x238>
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a20:	4829      	ldr	r0, [pc, #164]	; (8000ac8 <ESP_messageHandler+0x2d8>)
 8000a22:	f003 fee3 	bl	80047ec <HAL_GPIO_WritePin>
 8000a26:	e009      	b.n	8000a3c <ESP_messageHandler+0x24c>
		else if(vIlum[4] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 8000a28:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a2a:	791b      	ldrb	r3, [r3, #4]
 8000a2c:	2b31      	cmp	r3, #49	; 0x31
 8000a2e:	d105      	bne.n	8000a3c <ESP_messageHandler+0x24c>
 8000a30:	2201      	movs	r2, #1
 8000a32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a36:	4824      	ldr	r0, [pc, #144]	; (8000ac8 <ESP_messageHandler+0x2d8>)
 8000a38:	f003 fed8 	bl	80047ec <HAL_GPIO_WritePin>

		if(vIlum[5] == '0') HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET);
 8000a3c:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a3e:	795b      	ldrb	r3, [r3, #5]
 8000a40:	2b30      	cmp	r3, #48	; 0x30
 8000a42:	d106      	bne.n	8000a52 <ESP_messageHandler+0x262>
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a4a:	4820      	ldr	r0, [pc, #128]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000a4c:	f003 fece 	bl	80047ec <HAL_GPIO_WritePin>
 8000a50:	e009      	b.n	8000a66 <ESP_messageHandler+0x276>
		else if(vIlum[5] == '1')HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 8000a52:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a54:	795b      	ldrb	r3, [r3, #5]
 8000a56:	2b31      	cmp	r3, #49	; 0x31
 8000a58:	d105      	bne.n	8000a66 <ESP_messageHandler+0x276>
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a60:	481a      	ldr	r0, [pc, #104]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000a62:	f003 fec3 	bl	80047ec <HAL_GPIO_WritePin>

		if(vIlum[6] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, RESET);
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a68:	799b      	ldrb	r3, [r3, #6]
 8000a6a:	2b30      	cmp	r3, #48	; 0x30
 8000a6c:	d105      	bne.n	8000a7a <ESP_messageHandler+0x28a>
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2140      	movs	r1, #64	; 0x40
 8000a72:	4814      	ldr	r0, [pc, #80]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 8000a74:	f003 feba 	bl	80047ec <HAL_GPIO_WritePin>
 8000a78:	e008      	b.n	8000a8c <ESP_messageHandler+0x29c>
		else if(vIlum[6] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, SET);
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a7c:	799b      	ldrb	r3, [r3, #6]
 8000a7e:	2b31      	cmp	r3, #49	; 0x31
 8000a80:	d104      	bne.n	8000a8c <ESP_messageHandler+0x29c>
 8000a82:	2201      	movs	r2, #1
 8000a84:	2140      	movs	r1, #64	; 0x40
 8000a86:	480f      	ldr	r0, [pc, #60]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 8000a88:	f003 feb0 	bl	80047ec <HAL_GPIO_WritePin>

		if(vIlum[7] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a8e:	79db      	ldrb	r3, [r3, #7]
 8000a90:	2b30      	cmp	r3, #48	; 0x30
 8000a92:	d11f      	bne.n	8000ad4 <ESP_messageHandler+0x2e4>
 8000a94:	2200      	movs	r2, #0
 8000a96:	2108      	movs	r1, #8
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <ESP_messageHandler+0x2e0>)
 8000a9a:	f003 fea7 	bl	80047ec <HAL_GPIO_WritePin>
 8000a9e:	e022      	b.n	8000ae6 <ESP_messageHandler+0x2f6>
 8000aa0:	20000984 	.word	0x20000984
 8000aa4:	20000db8 	.word	0x20000db8
 8000aa8:	20000d2c 	.word	0x20000d2c
 8000aac:	08007eb0 	.word	0x08007eb0
 8000ab0:	2000097c 	.word	0x2000097c
 8000ab4:	08007eb4 	.word	0x08007eb4
 8000ab8:	200009fc 	.word	0x200009fc
 8000abc:	08007ec0 	.word	0x08007ec0
 8000ac0:	20000960 	.word	0x20000960
 8000ac4:	40020c00 	.word	0x40020c00
 8000ac8:	40020800 	.word	0x40020800
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40020400 	.word	0x40020400
		else if(vIlum[7] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8000ad4:	4b71      	ldr	r3, [pc, #452]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000ad6:	79db      	ldrb	r3, [r3, #7]
 8000ad8:	2b31      	cmp	r3, #49	; 0x31
 8000ada:	d104      	bne.n	8000ae6 <ESP_messageHandler+0x2f6>
 8000adc:	2201      	movs	r2, #1
 8000ade:	2108      	movs	r1, #8
 8000ae0:	486f      	ldr	r0, [pc, #444]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000ae2:	f003 fe83 	bl	80047ec <HAL_GPIO_WritePin>

		if(vIlum[8] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, RESET);
 8000ae6:	4b6d      	ldr	r3, [pc, #436]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000ae8:	7a1b      	ldrb	r3, [r3, #8]
 8000aea:	2b30      	cmp	r3, #48	; 0x30
 8000aec:	d105      	bne.n	8000afa <ESP_messageHandler+0x30a>
 8000aee:	2200      	movs	r2, #0
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	486c      	ldr	r0, [pc, #432]	; (8000ca4 <ESP_messageHandler+0x4b4>)
 8000af4:	f003 fe7a 	bl	80047ec <HAL_GPIO_WritePin>
 8000af8:	e008      	b.n	8000b0c <ESP_messageHandler+0x31c>
		else if(vIlum[8] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET);
 8000afa:	4b68      	ldr	r3, [pc, #416]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000afc:	7a1b      	ldrb	r3, [r3, #8]
 8000afe:	2b31      	cmp	r3, #49	; 0x31
 8000b00:	d104      	bne.n	8000b0c <ESP_messageHandler+0x31c>
 8000b02:	2201      	movs	r2, #1
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	4867      	ldr	r0, [pc, #412]	; (8000ca4 <ESP_messageHandler+0x4b4>)
 8000b08:	f003 fe70 	bl	80047ec <HAL_GPIO_WritePin>

		if(vIlum[9] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000b0c:	4b63      	ldr	r3, [pc, #396]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000b0e:	7a5b      	ldrb	r3, [r3, #9]
 8000b10:	2b30      	cmp	r3, #48	; 0x30
 8000b12:	d105      	bne.n	8000b20 <ESP_messageHandler+0x330>
 8000b14:	2200      	movs	r2, #0
 8000b16:	2110      	movs	r1, #16
 8000b18:	4861      	ldr	r0, [pc, #388]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000b1a:	f003 fe67 	bl	80047ec <HAL_GPIO_WritePin>
 8000b1e:	e008      	b.n	8000b32 <ESP_messageHandler+0x342>
		else if(vIlum[9] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000b20:	4b5e      	ldr	r3, [pc, #376]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000b22:	7a5b      	ldrb	r3, [r3, #9]
 8000b24:	2b31      	cmp	r3, #49	; 0x31
 8000b26:	d104      	bne.n	8000b32 <ESP_messageHandler+0x342>
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2110      	movs	r1, #16
 8000b2c:	485c      	ldr	r0, [pc, #368]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000b2e:	f003 fe5d 	bl	80047ec <HAL_GPIO_WritePin>

		if(vIlum[10] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000b32:	4b5a      	ldr	r3, [pc, #360]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000b34:	7a9b      	ldrb	r3, [r3, #10]
 8000b36:	2b30      	cmp	r3, #48	; 0x30
 8000b38:	d105      	bne.n	8000b46 <ESP_messageHandler+0x356>
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2140      	movs	r1, #64	; 0x40
 8000b3e:	4858      	ldr	r0, [pc, #352]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000b40:	f003 fe54 	bl	80047ec <HAL_GPIO_WritePin>
 8000b44:	e008      	b.n	8000b58 <ESP_messageHandler+0x368>
		else if(vIlum[10] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8000b46:	4b55      	ldr	r3, [pc, #340]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000b48:	7a9b      	ldrb	r3, [r3, #10]
 8000b4a:	2b31      	cmp	r3, #49	; 0x31
 8000b4c:	d104      	bne.n	8000b58 <ESP_messageHandler+0x368>
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2140      	movs	r1, #64	; 0x40
 8000b52:	4853      	ldr	r0, [pc, #332]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000b54:	f003 fe4a 	bl	80047ec <HAL_GPIO_WritePin>

		if(vIlum[11] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000b58:	4b50      	ldr	r3, [pc, #320]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000b5a:	7adb      	ldrb	r3, [r3, #11]
 8000b5c:	2b30      	cmp	r3, #48	; 0x30
 8000b5e:	d105      	bne.n	8000b6c <ESP_messageHandler+0x37c>
 8000b60:	2200      	movs	r2, #0
 8000b62:	2120      	movs	r1, #32
 8000b64:	484e      	ldr	r0, [pc, #312]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000b66:	f003 fe41 	bl	80047ec <HAL_GPIO_WritePin>
 8000b6a:	e008      	b.n	8000b7e <ESP_messageHandler+0x38e>
		else if(vIlum[11] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000b6c:	4b4b      	ldr	r3, [pc, #300]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000b6e:	7adb      	ldrb	r3, [r3, #11]
 8000b70:	2b31      	cmp	r3, #49	; 0x31
 8000b72:	d104      	bne.n	8000b7e <ESP_messageHandler+0x38e>
 8000b74:	2201      	movs	r2, #1
 8000b76:	2120      	movs	r1, #32
 8000b78:	4849      	ldr	r0, [pc, #292]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000b7a:	f003 fe37 	bl	80047ec <HAL_GPIO_WritePin>

		if(vIlum[12] == '0'){
 8000b7e:	4b47      	ldr	r3, [pc, #284]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000b80:	7b1b      	ldrb	r3, [r3, #12]
 8000b82:	2b30      	cmp	r3, #48	; 0x30
 8000b84:	d10c      	bne.n	8000ba0 <ESP_messageHandler+0x3b0>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000b86:	4b48      	ldr	r3, [pc, #288]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000b8e:	4b46      	ldr	r3, [pc, #280]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2200      	movs	r2, #0
 8000b94:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000b96:	4b44      	ldr	r3, [pc, #272]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b9e:	e036      	b.n	8000c0e <ESP_messageHandler+0x41e>
		}
		else if(vIlum[12] == '1'){
 8000ba0:	4b3e      	ldr	r3, [pc, #248]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000ba2:	7b1b      	ldrb	r3, [r3, #12]
 8000ba4:	2b31      	cmp	r3, #49	; 0x31
 8000ba6:	d132      	bne.n	8000c0e <ESP_messageHandler+0x41e>

			//uint8_t r, g, b;

			r = rgb_value (vIlum[13],vIlum[14],vIlum[15]);
 8000ba8:	4b3c      	ldr	r3, [pc, #240]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000baa:	7b5b      	ldrb	r3, [r3, #13]
 8000bac:	4a3b      	ldr	r2, [pc, #236]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000bae:	7b91      	ldrb	r1, [r2, #14]
 8000bb0:	4a3a      	ldr	r2, [pc, #232]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000bb2:	7bd2      	ldrb	r2, [r2, #15]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 fc2b 	bl	8001410 <rgb_value>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	4a3b      	ldr	r2, [pc, #236]	; (8000cac <ESP_messageHandler+0x4bc>)
 8000bbe:	6013      	str	r3, [r2, #0]
			g = rgb_value (vIlum[16],vIlum[17],vIlum[18]);
 8000bc0:	4b36      	ldr	r3, [pc, #216]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000bc2:	7c1b      	ldrb	r3, [r3, #16]
 8000bc4:	4a35      	ldr	r2, [pc, #212]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000bc6:	7c51      	ldrb	r1, [r2, #17]
 8000bc8:	4a34      	ldr	r2, [pc, #208]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000bca:	7c92      	ldrb	r2, [r2, #18]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 fc1f 	bl	8001410 <rgb_value>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4a36      	ldr	r2, [pc, #216]	; (8000cb0 <ESP_messageHandler+0x4c0>)
 8000bd6:	6013      	str	r3, [r2, #0]
			b = rgb_value (vIlum[19],vIlum[20],vIlum[21]);
 8000bd8:	4b30      	ldr	r3, [pc, #192]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000bda:	7cdb      	ldrb	r3, [r3, #19]
 8000bdc:	4a2f      	ldr	r2, [pc, #188]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000bde:	7d11      	ldrb	r1, [r2, #20]
 8000be0:	4a2e      	ldr	r2, [pc, #184]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000be2:	7d52      	ldrb	r2, [r2, #21]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 fc13 	bl	8001410 <rgb_value>
 8000bea:	4603      	mov	r3, r0
 8000bec:	4a31      	ldr	r2, [pc, #196]	; (8000cb4 <ESP_messageHandler+0x4c4>)
 8000bee:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, g); // PA8
 8000bf0:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <ESP_messageHandler+0x4c0>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b2c      	ldr	r3, [pc, #176]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, r); // PA9
 8000bfa:	4b2c      	ldr	r3, [pc, #176]	; (8000cac <ESP_messageHandler+0x4bc>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b); // PA10
 8000c04:	4b2b      	ldr	r3, [pc, #172]	; (8000cb4 <ESP_messageHandler+0x4c4>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		if(vIlum[22] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET);
 8000c0e:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c10:	7d9b      	ldrb	r3, [r3, #22]
 8000c12:	2b30      	cmp	r3, #48	; 0x30
 8000c14:	d106      	bne.n	8000c24 <ESP_messageHandler+0x434>
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c1c:	4826      	ldr	r0, [pc, #152]	; (8000cb8 <ESP_messageHandler+0x4c8>)
 8000c1e:	f003 fde5 	bl	80047ec <HAL_GPIO_WritePin>
 8000c22:	e009      	b.n	8000c38 <ESP_messageHandler+0x448>
		else if(vIlum[22] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c26:	7d9b      	ldrb	r3, [r3, #22]
 8000c28:	2b31      	cmp	r3, #49	; 0x31
 8000c2a:	d105      	bne.n	8000c38 <ESP_messageHandler+0x448>
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c32:	4821      	ldr	r0, [pc, #132]	; (8000cb8 <ESP_messageHandler+0x4c8>)
 8000c34:	f003 fdda 	bl	80047ec <HAL_GPIO_WritePin>

		if(vIlum[23] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET);
 8000c38:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c3a:	7ddb      	ldrb	r3, [r3, #23]
 8000c3c:	2b30      	cmp	r3, #48	; 0x30
 8000c3e:	d105      	bne.n	8000c4c <ESP_messageHandler+0x45c>
 8000c40:	2200      	movs	r2, #0
 8000c42:	2104      	movs	r1, #4
 8000c44:	4817      	ldr	r0, [pc, #92]	; (8000ca4 <ESP_messageHandler+0x4b4>)
 8000c46:	f003 fdd1 	bl	80047ec <HAL_GPIO_WritePin>
 8000c4a:	e008      	b.n	8000c5e <ESP_messageHandler+0x46e>
		else if(vIlum[23] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c4e:	7ddb      	ldrb	r3, [r3, #23]
 8000c50:	2b31      	cmp	r3, #49	; 0x31
 8000c52:	d104      	bne.n	8000c5e <ESP_messageHandler+0x46e>
 8000c54:	2201      	movs	r2, #1
 8000c56:	2104      	movs	r1, #4
 8000c58:	4812      	ldr	r0, [pc, #72]	; (8000ca4 <ESP_messageHandler+0x4b4>)
 8000c5a:	f003 fdc7 	bl	80047ec <HAL_GPIO_WritePin>

		if(vIlum[24] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c60:	7e1b      	ldrb	r3, [r3, #24]
 8000c62:	2b30      	cmp	r3, #48	; 0x30
 8000c64:	d105      	bne.n	8000c72 <ESP_messageHandler+0x482>
 8000c66:	2200      	movs	r2, #0
 8000c68:	2110      	movs	r1, #16
 8000c6a:	480e      	ldr	r0, [pc, #56]	; (8000ca4 <ESP_messageHandler+0x4b4>)
 8000c6c:	f003 fdbe 	bl	80047ec <HAL_GPIO_WritePin>
 8000c70:	e008      	b.n	8000c84 <ESP_messageHandler+0x494>
		else if(vIlum[24] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c74:	7e1b      	ldrb	r3, [r3, #24]
 8000c76:	2b31      	cmp	r3, #49	; 0x31
 8000c78:	d104      	bne.n	8000c84 <ESP_messageHandler+0x494>
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2110      	movs	r1, #16
 8000c7e:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <ESP_messageHandler+0x4b4>)
 8000c80:	f003 fdb4 	bl	80047ec <HAL_GPIO_WritePin>

		if(vIlum[25] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c86:	7e5b      	ldrb	r3, [r3, #25]
 8000c88:	2b30      	cmp	r3, #48	; 0x30
 8000c8a:	d117      	bne.n	8000cbc <ESP_messageHandler+0x4cc>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c92:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <ESP_messageHandler+0x4c8>)
 8000c94:	f003 fdaa 	bl	80047ec <HAL_GPIO_WritePin>
 8000c98:	e01a      	b.n	8000cd0 <ESP_messageHandler+0x4e0>
 8000c9a:	bf00      	nop
 8000c9c:	20000960 	.word	0x20000960
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	40020c00 	.word	0x40020c00
 8000ca8:	20000c9c 	.word	0x20000c9c
 8000cac:	200008f0 	.word	0x200008f0
 8000cb0:	200008e4 	.word	0x200008e4
 8000cb4:	200008e0 	.word	0x200008e0
 8000cb8:	40020800 	.word	0x40020800
		else if(vIlum[25] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8000cbc:	4ba4      	ldr	r3, [pc, #656]	; (8000f50 <ESP_messageHandler+0x760>)
 8000cbe:	7e5b      	ldrb	r3, [r3, #25]
 8000cc0:	2b31      	cmp	r3, #49	; 0x31
 8000cc2:	d105      	bne.n	8000cd0 <ESP_messageHandler+0x4e0>
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cca:	48a2      	ldr	r0, [pc, #648]	; (8000f54 <ESP_messageHandler+0x764>)
 8000ccc:	f003 fd8e 	bl	80047ec <HAL_GPIO_WritePin>
	}

	// PUERTAS Y VENTANAS
	if (fragment[0] == 'p'){
 8000cd0:	4ba1      	ldr	r3, [pc, #644]	; (8000f58 <ESP_messageHandler+0x768>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b70      	cmp	r3, #112	; 0x70
 8000cd6:	d107      	bne.n	8000ce8 <ESP_messageHandler+0x4f8>
		UART_send("PUERTAS Y VENTANAS (PUERTA PARCELA)\n", PC_UART);
 8000cd8:	49a0      	ldr	r1, [pc, #640]	; (8000f5c <ESP_messageHandler+0x76c>)
 8000cda:	48a1      	ldr	r0, [pc, #644]	; (8000f60 <ESP_messageHandler+0x770>)
 8000cdc:	f000 fdf2 	bl	80018c4 <UART_send>
		vVent[0] = textrc[28]; // P. Parcela
 8000ce0:	4ba0      	ldr	r3, [pc, #640]	; (8000f64 <ESP_messageHandler+0x774>)
 8000ce2:	7f1a      	ldrb	r2, [r3, #28]
 8000ce4:	4ba0      	ldr	r3, [pc, #640]	; (8000f68 <ESP_messageHandler+0x778>)
 8000ce6:	701a      	strb	r2, [r3, #0]
	}
	if (fragment[0] == 'g'){
 8000ce8:	4b9b      	ldr	r3, [pc, #620]	; (8000f58 <ESP_messageHandler+0x768>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b67      	cmp	r3, #103	; 0x67
 8000cee:	d107      	bne.n	8000d00 <ESP_messageHandler+0x510>
		UART_send("PUERTAS Y VENTANAS (PUERTA GARAJE)\n", PC_UART);
 8000cf0:	499a      	ldr	r1, [pc, #616]	; (8000f5c <ESP_messageHandler+0x76c>)
 8000cf2:	489e      	ldr	r0, [pc, #632]	; (8000f6c <ESP_messageHandler+0x77c>)
 8000cf4:	f000 fde6 	bl	80018c4 <UART_send>
		vVent[1] = textrc[31]; // P. Garaje
 8000cf8:	4b9a      	ldr	r3, [pc, #616]	; (8000f64 <ESP_messageHandler+0x774>)
 8000cfa:	7fda      	ldrb	r2, [r3, #31]
 8000cfc:	4b9a      	ldr	r3, [pc, #616]	; (8000f68 <ESP_messageHandler+0x778>)
 8000cfe:	705a      	strb	r2, [r3, #1]
	}
	if (fragment[0] == 'l'){
 8000d00:	4b95      	ldr	r3, [pc, #596]	; (8000f58 <ESP_messageHandler+0x768>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b6c      	cmp	r3, #108	; 0x6c
 8000d06:	d108      	bne.n	8000d1a <ESP_messageHandler+0x52a>
		UART_send("PUERTAS Y VENTANAS (VENTANA SALÓN)\n", PC_UART);
 8000d08:	4994      	ldr	r1, [pc, #592]	; (8000f5c <ESP_messageHandler+0x76c>)
 8000d0a:	4899      	ldr	r0, [pc, #612]	; (8000f70 <ESP_messageHandler+0x780>)
 8000d0c:	f000 fdda 	bl	80018c4 <UART_send>
		vVent[2] = textrc[34]; // V. Salón
 8000d10:	4b94      	ldr	r3, [pc, #592]	; (8000f64 <ESP_messageHandler+0x774>)
 8000d12:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000d16:	4b94      	ldr	r3, [pc, #592]	; (8000f68 <ESP_messageHandler+0x778>)
 8000d18:	709a      	strb	r2, [r3, #2]
	}
	if (fragment[0] == 'd'){
 8000d1a:	4b8f      	ldr	r3, [pc, #572]	; (8000f58 <ESP_messageHandler+0x768>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b64      	cmp	r3, #100	; 0x64
 8000d20:	d108      	bne.n	8000d34 <ESP_messageHandler+0x544>
		UART_send("PUERTAS Y VENTANAS (VENTANA DORMITORIO)\n", PC_UART);
 8000d22:	498e      	ldr	r1, [pc, #568]	; (8000f5c <ESP_messageHandler+0x76c>)
 8000d24:	4893      	ldr	r0, [pc, #588]	; (8000f74 <ESP_messageHandler+0x784>)
 8000d26:	f000 fdcd 	bl	80018c4 <UART_send>
		vVent[3] = textrc[37]; // V. Dormitorio
 8000d2a:	4b8e      	ldr	r3, [pc, #568]	; (8000f64 <ESP_messageHandler+0x774>)
 8000d2c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000d30:	4b8d      	ldr	r3, [pc, #564]	; (8000f68 <ESP_messageHandler+0x778>)
 8000d32:	70da      	strb	r2, [r3, #3]
	}
	if (fragment[0] == 'o'){
 8000d34:	4b88      	ldr	r3, [pc, #544]	; (8000f58 <ESP_messageHandler+0x768>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b6f      	cmp	r3, #111	; 0x6f
 8000d3a:	d108      	bne.n	8000d4e <ESP_messageHandler+0x55e>
		UART_send("PUERTAS Y VENTANAS (VENTANA OFICINA)\n", PC_UART);
 8000d3c:	4987      	ldr	r1, [pc, #540]	; (8000f5c <ESP_messageHandler+0x76c>)
 8000d3e:	488e      	ldr	r0, [pc, #568]	; (8000f78 <ESP_messageHandler+0x788>)
 8000d40:	f000 fdc0 	bl	80018c4 <UART_send>
		vVent[4] = textrc[40]; // V. Oficina
 8000d44:	4b87      	ldr	r3, [pc, #540]	; (8000f64 <ESP_messageHandler+0x774>)
 8000d46:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000d4a:	4b87      	ldr	r3, [pc, #540]	; (8000f68 <ESP_messageHandler+0x778>)
 8000d4c:	711a      	strb	r2, [r3, #4]
	}

	// TIEMPO
	if (fragment[0] == 't'){
 8000d4e:	4b82      	ldr	r3, [pc, #520]	; (8000f58 <ESP_messageHandler+0x768>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b74      	cmp	r3, #116	; 0x74
 8000d54:	d12a      	bne.n	8000dac <ESP_messageHandler+0x5bc>
		UART_send("TIEMPO\n", PC_UART);
 8000d56:	4981      	ldr	r1, [pc, #516]	; (8000f5c <ESP_messageHandler+0x76c>)
 8000d58:	4888      	ldr	r0, [pc, #544]	; (8000f7c <ESP_messageHandler+0x78c>)
 8000d5a:	f000 fdb3 	bl	80018c4 <UART_send>
		vTemp[0] = textrc[28]; 	// Vent. Salón
 8000d5e:	4b81      	ldr	r3, [pc, #516]	; (8000f64 <ESP_messageHandler+0x774>)
 8000d60:	7f1a      	ldrb	r2, [r3, #28]
 8000d62:	4b87      	ldr	r3, [pc, #540]	; (8000f80 <ESP_messageHandler+0x790>)
 8000d64:	701a      	strb	r2, [r3, #0]
		vTemp[1] = textrc[31]; 	// Vent. Dormitorio
 8000d66:	4b7f      	ldr	r3, [pc, #508]	; (8000f64 <ESP_messageHandler+0x774>)
 8000d68:	7fda      	ldrb	r2, [r3, #31]
 8000d6a:	4b85      	ldr	r3, [pc, #532]	; (8000f80 <ESP_messageHandler+0x790>)
 8000d6c:	705a      	strb	r2, [r3, #1]
		vTemp[2] = textrc[34]; 	// Vent. Oficina
 8000d6e:	4b7d      	ldr	r3, [pc, #500]	; (8000f64 <ESP_messageHandler+0x774>)
 8000d70:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000d74:	4b82      	ldr	r3, [pc, #520]	; (8000f80 <ESP_messageHandler+0x790>)
 8000d76:	709a      	strb	r2, [r3, #2]
		vTemp[4] = textrc[37]; 	// Calefacción
 8000d78:	4b7a      	ldr	r3, [pc, #488]	; (8000f64 <ESP_messageHandler+0x774>)
 8000d7a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000d7e:	4b80      	ldr	r3, [pc, #512]	; (8000f80 <ESP_messageHandler+0x790>)
 8000d80:	711a      	strb	r2, [r3, #4]

		if(vTemp[4] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET); // Calefacción
 8000d82:	4b7f      	ldr	r3, [pc, #508]	; (8000f80 <ESP_messageHandler+0x790>)
 8000d84:	791b      	ldrb	r3, [r3, #4]
 8000d86:	2b30      	cmp	r3, #48	; 0x30
 8000d88:	d106      	bne.n	8000d98 <ESP_messageHandler+0x5a8>
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d90:	487c      	ldr	r0, [pc, #496]	; (8000f84 <ESP_messageHandler+0x794>)
 8000d92:	f003 fd2b 	bl	80047ec <HAL_GPIO_WritePin>
 8000d96:	e009      	b.n	8000dac <ESP_messageHandler+0x5bc>
		else if(vTemp[4] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 8000d98:	4b79      	ldr	r3, [pc, #484]	; (8000f80 <ESP_messageHandler+0x790>)
 8000d9a:	791b      	ldrb	r3, [r3, #4]
 8000d9c:	2b31      	cmp	r3, #49	; 0x31
 8000d9e:	d105      	bne.n	8000dac <ESP_messageHandler+0x5bc>
 8000da0:	2201      	movs	r2, #1
 8000da2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da6:	4877      	ldr	r0, [pc, #476]	; (8000f84 <ESP_messageHandler+0x794>)
 8000da8:	f003 fd20 	bl	80047ec <HAL_GPIO_WritePin>
    }

	// EXTERIOR
	if (fragment[0] == 'e'){
 8000dac:	4b6a      	ldr	r3, [pc, #424]	; (8000f58 <ESP_messageHandler+0x768>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b65      	cmp	r3, #101	; 0x65
 8000db2:	d151      	bne.n	8000e58 <ESP_messageHandler+0x668>
		UART_send("LUCES (EXTERIOR)\n", PC_UART);
 8000db4:	4969      	ldr	r1, [pc, #420]	; (8000f5c <ESP_messageHandler+0x76c>)
 8000db6:	4874      	ldr	r0, [pc, #464]	; (8000f88 <ESP_messageHandler+0x798>)
 8000db8:	f000 fd84 	bl	80018c4 <UART_send>
		//vExt[0] = textrc[28]; 	// Toldo Tendedero
		vExt[1] = textrc[31]; 	// Luz Tendedero
 8000dbc:	4b69      	ldr	r3, [pc, #420]	; (8000f64 <ESP_messageHandler+0x774>)
 8000dbe:	7fda      	ldrb	r2, [r3, #31]
 8000dc0:	4b72      	ldr	r3, [pc, #456]	; (8000f8c <ESP_messageHandler+0x79c>)
 8000dc2:	705a      	strb	r2, [r3, #1]
		vExt[2] = textrc[34]; 	// Luz Porche
 8000dc4:	4b67      	ldr	r3, [pc, #412]	; (8000f64 <ESP_messageHandler+0x774>)
 8000dc6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000dca:	4b70      	ldr	r3, [pc, #448]	; (8000f8c <ESP_messageHandler+0x79c>)
 8000dcc:	709a      	strb	r2, [r3, #2]
		vExt[3] = textrc[37]; 	// Luz Jardín
 8000dce:	4b65      	ldr	r3, [pc, #404]	; (8000f64 <ESP_messageHandler+0x774>)
 8000dd0:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000dd4:	4b6d      	ldr	r3, [pc, #436]	; (8000f8c <ESP_messageHandler+0x79c>)
 8000dd6:	70da      	strb	r2, [r3, #3]
		//vExt[4] = textrc[40]; 	// Puerta Parcela
		vExt[5] = textrc[43]; // Automático
 8000dd8:	4b62      	ldr	r3, [pc, #392]	; (8000f64 <ESP_messageHandler+0x774>)
 8000dda:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8000dde:	4b6b      	ldr	r3, [pc, #428]	; (8000f8c <ESP_messageHandler+0x79c>)
 8000de0:	715a      	strb	r2, [r3, #5]

		if(vExt[1] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET); // Luz Tendedero
 8000de2:	4b6a      	ldr	r3, [pc, #424]	; (8000f8c <ESP_messageHandler+0x79c>)
 8000de4:	785b      	ldrb	r3, [r3, #1]
 8000de6:	2b30      	cmp	r3, #48	; 0x30
 8000de8:	d106      	bne.n	8000df8 <ESP_messageHandler+0x608>
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df0:	4858      	ldr	r0, [pc, #352]	; (8000f54 <ESP_messageHandler+0x764>)
 8000df2:	f003 fcfb 	bl	80047ec <HAL_GPIO_WritePin>
 8000df6:	e009      	b.n	8000e0c <ESP_messageHandler+0x61c>
		else if(vExt[1] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8000df8:	4b64      	ldr	r3, [pc, #400]	; (8000f8c <ESP_messageHandler+0x79c>)
 8000dfa:	785b      	ldrb	r3, [r3, #1]
 8000dfc:	2b31      	cmp	r3, #49	; 0x31
 8000dfe:	d105      	bne.n	8000e0c <ESP_messageHandler+0x61c>
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e06:	4853      	ldr	r0, [pc, #332]	; (8000f54 <ESP_messageHandler+0x764>)
 8000e08:	f003 fcf0 	bl	80047ec <HAL_GPIO_WritePin>

		if(vExt[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET); // Luz Porche
 8000e0c:	4b5f      	ldr	r3, [pc, #380]	; (8000f8c <ESP_messageHandler+0x79c>)
 8000e0e:	789b      	ldrb	r3, [r3, #2]
 8000e10:	2b30      	cmp	r3, #48	; 0x30
 8000e12:	d105      	bne.n	8000e20 <ESP_messageHandler+0x630>
 8000e14:	2200      	movs	r2, #0
 8000e16:	2110      	movs	r1, #16
 8000e18:	485d      	ldr	r0, [pc, #372]	; (8000f90 <ESP_messageHandler+0x7a0>)
 8000e1a:	f003 fce7 	bl	80047ec <HAL_GPIO_WritePin>
 8000e1e:	e008      	b.n	8000e32 <ESP_messageHandler+0x642>
		else if(vExt[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 8000e20:	4b5a      	ldr	r3, [pc, #360]	; (8000f8c <ESP_messageHandler+0x79c>)
 8000e22:	789b      	ldrb	r3, [r3, #2]
 8000e24:	2b31      	cmp	r3, #49	; 0x31
 8000e26:	d104      	bne.n	8000e32 <ESP_messageHandler+0x642>
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	4858      	ldr	r0, [pc, #352]	; (8000f90 <ESP_messageHandler+0x7a0>)
 8000e2e:	f003 fcdd 	bl	80047ec <HAL_GPIO_WritePin>

		if(vExt[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET); // Luz Jardín
 8000e32:	4b56      	ldr	r3, [pc, #344]	; (8000f8c <ESP_messageHandler+0x79c>)
 8000e34:	78db      	ldrb	r3, [r3, #3]
 8000e36:	2b30      	cmp	r3, #48	; 0x30
 8000e38:	d105      	bne.n	8000e46 <ESP_messageHandler+0x656>
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2104      	movs	r1, #4
 8000e3e:	4854      	ldr	r0, [pc, #336]	; (8000f90 <ESP_messageHandler+0x7a0>)
 8000e40:	f003 fcd4 	bl	80047ec <HAL_GPIO_WritePin>
 8000e44:	e008      	b.n	8000e58 <ESP_messageHandler+0x668>
		else if(vExt[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8000e46:	4b51      	ldr	r3, [pc, #324]	; (8000f8c <ESP_messageHandler+0x79c>)
 8000e48:	78db      	ldrb	r3, [r3, #3]
 8000e4a:	2b31      	cmp	r3, #49	; 0x31
 8000e4c:	d104      	bne.n	8000e58 <ESP_messageHandler+0x668>
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2104      	movs	r1, #4
 8000e52:	484f      	ldr	r0, [pc, #316]	; (8000f90 <ESP_messageHandler+0x7a0>)
 8000e54:	f003 fcca 	bl	80047ec <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'P'){
 8000e58:	4b3f      	ldr	r3, [pc, #252]	; (8000f58 <ESP_messageHandler+0x768>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b50      	cmp	r3, #80	; 0x50
 8000e5e:	d108      	bne.n	8000e72 <ESP_messageHandler+0x682>
		UART_send("PARCELA (EXTERIOR)\n", PC_UART);
 8000e60:	493e      	ldr	r1, [pc, #248]	; (8000f5c <ESP_messageHandler+0x76c>)
 8000e62:	484c      	ldr	r0, [pc, #304]	; (8000f94 <ESP_messageHandler+0x7a4>)
 8000e64:	f000 fd2e 	bl	80018c4 <UART_send>
		//vExt[0] = textrc[28]; 	// Toldo Tendedero
		//vExt[1] = textrc[31]; 	// Luz Tendedero
		//vExt[2] = textrc[34]; 	// Luz Porche
		//vExt[3] = textrc[37]; 	// Luz Jardín
		vExt[4] = textrc[40]; 	// Puerta Parcela
 8000e68:	4b3e      	ldr	r3, [pc, #248]	; (8000f64 <ESP_messageHandler+0x774>)
 8000e6a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000e6e:	4b47      	ldr	r3, [pc, #284]	; (8000f8c <ESP_messageHandler+0x79c>)
 8000e70:	711a      	strb	r2, [r3, #4]
	}

	if (fragment[0] == 'R'){
 8000e72:	4b39      	ldr	r3, [pc, #228]	; (8000f58 <ESP_messageHandler+0x768>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b52      	cmp	r3, #82	; 0x52
 8000e78:	d107      	bne.n	8000e8a <ESP_messageHandler+0x69a>
		UART_send("TENDEDERO (EXTERIOR)\n", PC_UART);
 8000e7a:	4938      	ldr	r1, [pc, #224]	; (8000f5c <ESP_messageHandler+0x76c>)
 8000e7c:	4846      	ldr	r0, [pc, #280]	; (8000f98 <ESP_messageHandler+0x7a8>)
 8000e7e:	f000 fd21 	bl	80018c4 <UART_send>
		vExt[0] = textrc[28]; 	// Toldo Tendedero
 8000e82:	4b38      	ldr	r3, [pc, #224]	; (8000f64 <ESP_messageHandler+0x774>)
 8000e84:	7f1a      	ldrb	r2, [r3, #28]
 8000e86:	4b41      	ldr	r3, [pc, #260]	; (8000f8c <ESP_messageHandler+0x79c>)
 8000e88:	701a      	strb	r2, [r3, #0]
		//vExt[3] = textrc[37]; 	// Luz Jardín
		//vExt[4] = textrc[40]; 	// Puerta Parcela
	}

	// SALÓN
	if (fragment[0] == 'n'){
 8000e8a:	4b33      	ldr	r3, [pc, #204]	; (8000f58 <ESP_messageHandler+0x768>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b6e      	cmp	r3, #110	; 0x6e
 8000e90:	f040 80a4 	bne.w	8000fdc <ESP_messageHandler+0x7ec>
		UART_send("SALON \n", PC_UART);
 8000e94:	4931      	ldr	r1, [pc, #196]	; (8000f5c <ESP_messageHandler+0x76c>)
 8000e96:	4841      	ldr	r0, [pc, #260]	; (8000f9c <ESP_messageHandler+0x7ac>)
 8000e98:	f000 fd14 	bl	80018c4 <UART_send>
		vSal[0] = textrc[28]; 	// Televisión
 8000e9c:	4b31      	ldr	r3, [pc, #196]	; (8000f64 <ESP_messageHandler+0x774>)
 8000e9e:	7f1a      	ldrb	r2, [r3, #28]
 8000ea0:	4b3f      	ldr	r3, [pc, #252]	; (8000fa0 <ESP_messageHandler+0x7b0>)
 8000ea2:	701a      	strb	r2, [r3, #0]
		vSal[1] = textrc[31]; 	// Luz Sala
 8000ea4:	4b2f      	ldr	r3, [pc, #188]	; (8000f64 <ESP_messageHandler+0x774>)
 8000ea6:	7fda      	ldrb	r2, [r3, #31]
 8000ea8:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <ESP_messageHandler+0x7b0>)
 8000eaa:	705a      	strb	r2, [r3, #1]
		vSal[2] = textrc[34]; 	// Luz Comedor
 8000eac:	4b2d      	ldr	r3, [pc, #180]	; (8000f64 <ESP_messageHandler+0x774>)
 8000eae:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000eb2:	4b3b      	ldr	r3, [pc, #236]	; (8000fa0 <ESP_messageHandler+0x7b0>)
 8000eb4:	709a      	strb	r2, [r3, #2]
		vSal[3] = textrc[37]; 	// Luz Ambiente
 8000eb6:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <ESP_messageHandler+0x774>)
 8000eb8:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000ebc:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <ESP_messageHandler+0x7b0>)
 8000ebe:	70da      	strb	r2, [r3, #3]
		vSal[4] = textrc[40]; 	// Luz Recibidor
 8000ec0:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <ESP_messageHandler+0x774>)
 8000ec2:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000ec6:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <ESP_messageHandler+0x7b0>)
 8000ec8:	711a      	strb	r2, [r3, #4]
		//vSal[5] = textrc[43]; 	// V. Salón

		if(vSal[0] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET); // Televisión
 8000eca:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <ESP_messageHandler+0x7b0>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b30      	cmp	r3, #48	; 0x30
 8000ed0:	d105      	bne.n	8000ede <ESP_messageHandler+0x6ee>
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2180      	movs	r1, #128	; 0x80
 8000ed6:	482b      	ldr	r0, [pc, #172]	; (8000f84 <ESP_messageHandler+0x794>)
 8000ed8:	f003 fc88 	bl	80047ec <HAL_GPIO_WritePin>
 8000edc:	e008      	b.n	8000ef0 <ESP_messageHandler+0x700>
		else if(vSal[0] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 8000ede:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <ESP_messageHandler+0x7b0>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b31      	cmp	r3, #49	; 0x31
 8000ee4:	d104      	bne.n	8000ef0 <ESP_messageHandler+0x700>
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2180      	movs	r1, #128	; 0x80
 8000eea:	4826      	ldr	r0, [pc, #152]	; (8000f84 <ESP_messageHandler+0x794>)
 8000eec:	f003 fc7e 	bl	80047ec <HAL_GPIO_WritePin>

		if(vSal[1] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, RESET); // Luz Sala
 8000ef0:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <ESP_messageHandler+0x7b0>)
 8000ef2:	785b      	ldrb	r3, [r3, #1]
 8000ef4:	2b30      	cmp	r3, #48	; 0x30
 8000ef6:	d105      	bne.n	8000f04 <ESP_messageHandler+0x714>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2108      	movs	r1, #8
 8000efc:	4824      	ldr	r0, [pc, #144]	; (8000f90 <ESP_messageHandler+0x7a0>)
 8000efe:	f003 fc75 	bl	80047ec <HAL_GPIO_WritePin>
 8000f02:	e008      	b.n	8000f16 <ESP_messageHandler+0x726>
		else if(vSal[1] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, SET);
 8000f04:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <ESP_messageHandler+0x7b0>)
 8000f06:	785b      	ldrb	r3, [r3, #1]
 8000f08:	2b31      	cmp	r3, #49	; 0x31
 8000f0a:	d104      	bne.n	8000f16 <ESP_messageHandler+0x726>
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2108      	movs	r1, #8
 8000f10:	481f      	ldr	r0, [pc, #124]	; (8000f90 <ESP_messageHandler+0x7a0>)
 8000f12:	f003 fc6b 	bl	80047ec <HAL_GPIO_WritePin>

		if(vSal[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET); // Luz Comedor
 8000f16:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <ESP_messageHandler+0x7b0>)
 8000f18:	789b      	ldrb	r3, [r3, #2]
 8000f1a:	2b30      	cmp	r3, #48	; 0x30
 8000f1c:	d105      	bne.n	8000f2a <ESP_messageHandler+0x73a>
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2102      	movs	r1, #2
 8000f22:	481b      	ldr	r0, [pc, #108]	; (8000f90 <ESP_messageHandler+0x7a0>)
 8000f24:	f003 fc62 	bl	80047ec <HAL_GPIO_WritePin>
 8000f28:	e008      	b.n	8000f3c <ESP_messageHandler+0x74c>
		else if(vSal[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, SET);
 8000f2a:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <ESP_messageHandler+0x7b0>)
 8000f2c:	789b      	ldrb	r3, [r3, #2]
 8000f2e:	2b31      	cmp	r3, #49	; 0x31
 8000f30:	d104      	bne.n	8000f3c <ESP_messageHandler+0x74c>
 8000f32:	2201      	movs	r2, #1
 8000f34:	2102      	movs	r1, #2
 8000f36:	4816      	ldr	r0, [pc, #88]	; (8000f90 <ESP_messageHandler+0x7a0>)
 8000f38:	f003 fc58 	bl	80047ec <HAL_GPIO_WritePin>

		if(vSal[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, RESET); // Luz Ambiente
 8000f3c:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <ESP_messageHandler+0x7b0>)
 8000f3e:	78db      	ldrb	r3, [r3, #3]
 8000f40:	2b30      	cmp	r3, #48	; 0x30
 8000f42:	d12f      	bne.n	8000fa4 <ESP_messageHandler+0x7b4>
 8000f44:	2200      	movs	r2, #0
 8000f46:	2120      	movs	r1, #32
 8000f48:	4811      	ldr	r0, [pc, #68]	; (8000f90 <ESP_messageHandler+0x7a0>)
 8000f4a:	f003 fc4f 	bl	80047ec <HAL_GPIO_WritePin>
 8000f4e:	e032      	b.n	8000fb6 <ESP_messageHandler+0x7c6>
 8000f50:	20000960 	.word	0x20000960
 8000f54:	40020800 	.word	0x40020800
 8000f58:	2000097c 	.word	0x2000097c
 8000f5c:	20000d2c 	.word	0x20000d2c
 8000f60:	08007ed0 	.word	0x08007ed0
 8000f64:	20000984 	.word	0x20000984
 8000f68:	200008e8 	.word	0x200008e8
 8000f6c:	08007ef8 	.word	0x08007ef8
 8000f70:	08007f1c 	.word	0x08007f1c
 8000f74:	08007f44 	.word	0x08007f44
 8000f78:	08007f70 	.word	0x08007f70
 8000f7c:	08007f98 	.word	0x08007f98
 8000f80:	20000938 	.word	0x20000938
 8000f84:	40020400 	.word	0x40020400
 8000f88:	08007fa0 	.word	0x08007fa0
 8000f8c:	200008f4 	.word	0x200008f4
 8000f90:	40020c00 	.word	0x40020c00
 8000f94:	08007fb4 	.word	0x08007fb4
 8000f98:	08007fc8 	.word	0x08007fc8
 8000f9c:	08007fe0 	.word	0x08007fe0
 8000fa0:	200009f4 	.word	0x200009f4
		else if(vSal[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, SET);
 8000fa4:	4b9d      	ldr	r3, [pc, #628]	; (800121c <ESP_messageHandler+0xa2c>)
 8000fa6:	78db      	ldrb	r3, [r3, #3]
 8000fa8:	2b31      	cmp	r3, #49	; 0x31
 8000faa:	d104      	bne.n	8000fb6 <ESP_messageHandler+0x7c6>
 8000fac:	2201      	movs	r2, #1
 8000fae:	2120      	movs	r1, #32
 8000fb0:	489b      	ldr	r0, [pc, #620]	; (8001220 <ESP_messageHandler+0xa30>)
 8000fb2:	f003 fc1b 	bl	80047ec <HAL_GPIO_WritePin>

		if(vSal[4] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET); // Luz Recibidor
 8000fb6:	4b99      	ldr	r3, [pc, #612]	; (800121c <ESP_messageHandler+0xa2c>)
 8000fb8:	791b      	ldrb	r3, [r3, #4]
 8000fba:	2b30      	cmp	r3, #48	; 0x30
 8000fbc:	d105      	bne.n	8000fca <ESP_messageHandler+0x7da>
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	4897      	ldr	r0, [pc, #604]	; (8001220 <ESP_messageHandler+0xa30>)
 8000fc4:	f003 fc12 	bl	80047ec <HAL_GPIO_WritePin>
 8000fc8:	e008      	b.n	8000fdc <ESP_messageHandler+0x7ec>
		else if(vSal[5] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 8000fca:	4b94      	ldr	r3, [pc, #592]	; (800121c <ESP_messageHandler+0xa2c>)
 8000fcc:	795b      	ldrb	r3, [r3, #5]
 8000fce:	2b31      	cmp	r3, #49	; 0x31
 8000fd0:	d104      	bne.n	8000fdc <ESP_messageHandler+0x7ec>
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4892      	ldr	r0, [pc, #584]	; (8001220 <ESP_messageHandler+0xa30>)
 8000fd8:	f003 fc08 	bl	80047ec <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'N'){
 8000fdc:	4b91      	ldr	r3, [pc, #580]	; (8001224 <ESP_messageHandler+0xa34>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b4e      	cmp	r3, #78	; 0x4e
 8000fe2:	d108      	bne.n	8000ff6 <ESP_messageHandler+0x806>
			UART_send("V. SALON (SALON) \n", PC_UART);
 8000fe4:	4990      	ldr	r1, [pc, #576]	; (8001228 <ESP_messageHandler+0xa38>)
 8000fe6:	4891      	ldr	r0, [pc, #580]	; (800122c <ESP_messageHandler+0xa3c>)
 8000fe8:	f000 fc6c 	bl	80018c4 <UART_send>
			//vSal[0] = textrc[28]; 	// Televisión
			//vSal[1] = textrc[31]; 	// Luz Sala
			//vSal[2] = textrc[34]; 	// Luz Comedor
			//vSal[3] = textrc[37]; 	// Luz Ambiente
			//vSal[4] = textrc[40]; 	// Luz Recibidor
			vSal[5] = textrc[43]; 	// V. Salón
 8000fec:	4b90      	ldr	r3, [pc, #576]	; (8001230 <ESP_messageHandler+0xa40>)
 8000fee:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8000ff2:	4b8a      	ldr	r3, [pc, #552]	; (800121c <ESP_messageHandler+0xa2c>)
 8000ff4:	715a      	strb	r2, [r3, #5]
		}

	// COCINA
	if (fragment[0] == 'c'){
 8000ff6:	4b8b      	ldr	r3, [pc, #556]	; (8001224 <ESP_messageHandler+0xa34>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b63      	cmp	r3, #99	; 0x63
 8000ffc:	d135      	bne.n	800106a <ESP_messageHandler+0x87a>
		UART_send("COCINA \n", PC_UART);
 8000ffe:	498a      	ldr	r1, [pc, #552]	; (8001228 <ESP_messageHandler+0xa38>)
 8001000:	488c      	ldr	r0, [pc, #560]	; (8001234 <ESP_messageHandler+0xa44>)
 8001002:	f000 fc5f 	bl	80018c4 <UART_send>
		vCoc[0] = textrc[28]; 	// Luz Cocina
 8001006:	4b8a      	ldr	r3, [pc, #552]	; (8001230 <ESP_messageHandler+0xa40>)
 8001008:	7f1a      	ldrb	r2, [r3, #28]
 800100a:	4b8b      	ldr	r3, [pc, #556]	; (8001238 <ESP_messageHandler+0xa48>)
 800100c:	701a      	strb	r2, [r3, #0]
		vCoc[1] = textrc[31]; 	// Luz Fregadero
 800100e:	4b88      	ldr	r3, [pc, #544]	; (8001230 <ESP_messageHandler+0xa40>)
 8001010:	7fda      	ldrb	r2, [r3, #31]
 8001012:	4b89      	ldr	r3, [pc, #548]	; (8001238 <ESP_messageHandler+0xa48>)
 8001014:	705a      	strb	r2, [r3, #1]

		if(vCoc[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET); // Luz Cocina
 8001016:	4b88      	ldr	r3, [pc, #544]	; (8001238 <ESP_messageHandler+0xa48>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b30      	cmp	r3, #48	; 0x30
 800101c:	d106      	bne.n	800102c <ESP_messageHandler+0x83c>
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001024:	4885      	ldr	r0, [pc, #532]	; (800123c <ESP_messageHandler+0xa4c>)
 8001026:	f003 fbe1 	bl	80047ec <HAL_GPIO_WritePin>
 800102a:	e009      	b.n	8001040 <ESP_messageHandler+0x850>
		else if(vCoc[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 800102c:	4b82      	ldr	r3, [pc, #520]	; (8001238 <ESP_messageHandler+0xa48>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b31      	cmp	r3, #49	; 0x31
 8001032:	d105      	bne.n	8001040 <ESP_messageHandler+0x850>
 8001034:	2201      	movs	r2, #1
 8001036:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800103a:	4880      	ldr	r0, [pc, #512]	; (800123c <ESP_messageHandler+0xa4c>)
 800103c:	f003 fbd6 	bl	80047ec <HAL_GPIO_WritePin>

		if(vCoc[1] == '0') HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET); // Luz Fregadero
 8001040:	4b7d      	ldr	r3, [pc, #500]	; (8001238 <ESP_messageHandler+0xa48>)
 8001042:	785b      	ldrb	r3, [r3, #1]
 8001044:	2b30      	cmp	r3, #48	; 0x30
 8001046:	d106      	bne.n	8001056 <ESP_messageHandler+0x866>
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800104e:	487c      	ldr	r0, [pc, #496]	; (8001240 <ESP_messageHandler+0xa50>)
 8001050:	f003 fbcc 	bl	80047ec <HAL_GPIO_WritePin>
 8001054:	e009      	b.n	800106a <ESP_messageHandler+0x87a>
		else if(vCoc[1] == '1')HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 8001056:	4b78      	ldr	r3, [pc, #480]	; (8001238 <ESP_messageHandler+0xa48>)
 8001058:	785b      	ldrb	r3, [r3, #1]
 800105a:	2b31      	cmp	r3, #49	; 0x31
 800105c:	d105      	bne.n	800106a <ESP_messageHandler+0x87a>
 800105e:	2201      	movs	r2, #1
 8001060:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001064:	4876      	ldr	r0, [pc, #472]	; (8001240 <ESP_messageHandler+0xa50>)
 8001066:	f003 fbc1 	bl	80047ec <HAL_GPIO_WritePin>
	}

	// BAÑO
	if (fragment[0] == 'b'){
 800106a:	4b6e      	ldr	r3, [pc, #440]	; (8001224 <ESP_messageHandler+0xa34>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b62      	cmp	r3, #98	; 0x62
 8001070:	d131      	bne.n	80010d6 <ESP_messageHandler+0x8e6>
		UART_send("BAÑO \n", PC_UART);
 8001072:	496d      	ldr	r1, [pc, #436]	; (8001228 <ESP_messageHandler+0xa38>)
 8001074:	4873      	ldr	r0, [pc, #460]	; (8001244 <ESP_messageHandler+0xa54>)
 8001076:	f000 fc25 	bl	80018c4 <UART_send>
		vBan[0] = textrc[28]; 	// Luz Baño
 800107a:	4b6d      	ldr	r3, [pc, #436]	; (8001230 <ESP_messageHandler+0xa40>)
 800107c:	7f1a      	ldrb	r2, [r3, #28]
 800107e:	4b72      	ldr	r3, [pc, #456]	; (8001248 <ESP_messageHandler+0xa58>)
 8001080:	701a      	strb	r2, [r3, #0]
		vBan[1] = textrc[31]; 	// Luz Espejo
 8001082:	4b6b      	ldr	r3, [pc, #428]	; (8001230 <ESP_messageHandler+0xa40>)
 8001084:	7fda      	ldrb	r2, [r3, #31]
 8001086:	4b70      	ldr	r3, [pc, #448]	; (8001248 <ESP_messageHandler+0xa58>)
 8001088:	705a      	strb	r2, [r3, #1]

		if(vBan[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, RESET); // Luz Baño
 800108a:	4b6f      	ldr	r3, [pc, #444]	; (8001248 <ESP_messageHandler+0xa58>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b30      	cmp	r3, #48	; 0x30
 8001090:	d105      	bne.n	800109e <ESP_messageHandler+0x8ae>
 8001092:	2200      	movs	r2, #0
 8001094:	2140      	movs	r1, #64	; 0x40
 8001096:	4862      	ldr	r0, [pc, #392]	; (8001220 <ESP_messageHandler+0xa30>)
 8001098:	f003 fba8 	bl	80047ec <HAL_GPIO_WritePin>
 800109c:	e008      	b.n	80010b0 <ESP_messageHandler+0x8c0>
		else if(vBan[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, SET);
 800109e:	4b6a      	ldr	r3, [pc, #424]	; (8001248 <ESP_messageHandler+0xa58>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b31      	cmp	r3, #49	; 0x31
 80010a4:	d104      	bne.n	80010b0 <ESP_messageHandler+0x8c0>
 80010a6:	2201      	movs	r2, #1
 80010a8:	2140      	movs	r1, #64	; 0x40
 80010aa:	485d      	ldr	r0, [pc, #372]	; (8001220 <ESP_messageHandler+0xa30>)
 80010ac:	f003 fb9e 	bl	80047ec <HAL_GPIO_WritePin>

		if(vBan[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET); // Luz Espejo
 80010b0:	4b65      	ldr	r3, [pc, #404]	; (8001248 <ESP_messageHandler+0xa58>)
 80010b2:	785b      	ldrb	r3, [r3, #1]
 80010b4:	2b30      	cmp	r3, #48	; 0x30
 80010b6:	d105      	bne.n	80010c4 <ESP_messageHandler+0x8d4>
 80010b8:	2200      	movs	r2, #0
 80010ba:	2108      	movs	r1, #8
 80010bc:	4863      	ldr	r0, [pc, #396]	; (800124c <ESP_messageHandler+0xa5c>)
 80010be:	f003 fb95 	bl	80047ec <HAL_GPIO_WritePin>
 80010c2:	e008      	b.n	80010d6 <ESP_messageHandler+0x8e6>
		else if(vBan[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 80010c4:	4b60      	ldr	r3, [pc, #384]	; (8001248 <ESP_messageHandler+0xa58>)
 80010c6:	785b      	ldrb	r3, [r3, #1]
 80010c8:	2b31      	cmp	r3, #49	; 0x31
 80010ca:	d104      	bne.n	80010d6 <ESP_messageHandler+0x8e6>
 80010cc:	2201      	movs	r2, #1
 80010ce:	2108      	movs	r1, #8
 80010d0:	485e      	ldr	r0, [pc, #376]	; (800124c <ESP_messageHandler+0xa5c>)
 80010d2:	f003 fb8b 	bl	80047ec <HAL_GPIO_WritePin>
	}

	// DORMITORIO
	if (fragment[0] == 'r'){
 80010d6:	4b53      	ldr	r3, [pc, #332]	; (8001224 <ESP_messageHandler+0xa34>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b72      	cmp	r3, #114	; 0x72
 80010dc:	d149      	bne.n	8001172 <ESP_messageHandler+0x982>
		UART_send("LUCES (DORMITORIO) \n", PC_UART);
 80010de:	4952      	ldr	r1, [pc, #328]	; (8001228 <ESP_messageHandler+0xa38>)
 80010e0:	485b      	ldr	r0, [pc, #364]	; (8001250 <ESP_messageHandler+0xa60>)
 80010e2:	f000 fbef 	bl	80018c4 <UART_send>
		vDor[0] = textrc[28]; 	// Luz Dormitorio
 80010e6:	4b52      	ldr	r3, [pc, #328]	; (8001230 <ESP_messageHandler+0xa40>)
 80010e8:	7f1a      	ldrb	r2, [r3, #28]
 80010ea:	4b5a      	ldr	r3, [pc, #360]	; (8001254 <ESP_messageHandler+0xa64>)
 80010ec:	701a      	strb	r2, [r3, #0]
		vDor[1] = textrc[31]; 	// Luz Mesita Izq
 80010ee:	4b50      	ldr	r3, [pc, #320]	; (8001230 <ESP_messageHandler+0xa40>)
 80010f0:	7fda      	ldrb	r2, [r3, #31]
 80010f2:	4b58      	ldr	r3, [pc, #352]	; (8001254 <ESP_messageHandler+0xa64>)
 80010f4:	705a      	strb	r2, [r3, #1]
		vDor[2] = textrc[34]; 	// Luz Mesita Dch
 80010f6:	4b4e      	ldr	r3, [pc, #312]	; (8001230 <ESP_messageHandler+0xa40>)
 80010f8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80010fc:	4b55      	ldr	r3, [pc, #340]	; (8001254 <ESP_messageHandler+0xa64>)
 80010fe:	709a      	strb	r2, [r3, #2]
		//vDor[3] = textrc[37]; 	// V. Dormitorio

		if(vDor[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, RESET); // Luz Dormitorio
 8001100:	4b54      	ldr	r3, [pc, #336]	; (8001254 <ESP_messageHandler+0xa64>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b30      	cmp	r3, #48	; 0x30
 8001106:	d105      	bne.n	8001114 <ESP_messageHandler+0x924>
 8001108:	2200      	movs	r2, #0
 800110a:	2180      	movs	r1, #128	; 0x80
 800110c:	4844      	ldr	r0, [pc, #272]	; (8001220 <ESP_messageHandler+0xa30>)
 800110e:	f003 fb6d 	bl	80047ec <HAL_GPIO_WritePin>
 8001112:	e008      	b.n	8001126 <ESP_messageHandler+0x936>
		else if(vDor[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET);
 8001114:	4b4f      	ldr	r3, [pc, #316]	; (8001254 <ESP_messageHandler+0xa64>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b31      	cmp	r3, #49	; 0x31
 800111a:	d104      	bne.n	8001126 <ESP_messageHandler+0x936>
 800111c:	2201      	movs	r2, #1
 800111e:	2180      	movs	r1, #128	; 0x80
 8001120:	483f      	ldr	r0, [pc, #252]	; (8001220 <ESP_messageHandler+0xa30>)
 8001122:	f003 fb63 	bl	80047ec <HAL_GPIO_WritePin>

		if(vDor[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET); // Luz Mesita Izq
 8001126:	4b4b      	ldr	r3, [pc, #300]	; (8001254 <ESP_messageHandler+0xa64>)
 8001128:	785b      	ldrb	r3, [r3, #1]
 800112a:	2b30      	cmp	r3, #48	; 0x30
 800112c:	d105      	bne.n	800113a <ESP_messageHandler+0x94a>
 800112e:	2200      	movs	r2, #0
 8001130:	2110      	movs	r1, #16
 8001132:	4846      	ldr	r0, [pc, #280]	; (800124c <ESP_messageHandler+0xa5c>)
 8001134:	f003 fb5a 	bl	80047ec <HAL_GPIO_WritePin>
 8001138:	e008      	b.n	800114c <ESP_messageHandler+0x95c>
		else if(vDor[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 800113a:	4b46      	ldr	r3, [pc, #280]	; (8001254 <ESP_messageHandler+0xa64>)
 800113c:	785b      	ldrb	r3, [r3, #1]
 800113e:	2b31      	cmp	r3, #49	; 0x31
 8001140:	d104      	bne.n	800114c <ESP_messageHandler+0x95c>
 8001142:	2201      	movs	r2, #1
 8001144:	2110      	movs	r1, #16
 8001146:	4841      	ldr	r0, [pc, #260]	; (800124c <ESP_messageHandler+0xa5c>)
 8001148:	f003 fb50 	bl	80047ec <HAL_GPIO_WritePin>

		if(vDor[2] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET); // Luz Mesita Dch
 800114c:	4b41      	ldr	r3, [pc, #260]	; (8001254 <ESP_messageHandler+0xa64>)
 800114e:	789b      	ldrb	r3, [r3, #2]
 8001150:	2b30      	cmp	r3, #48	; 0x30
 8001152:	d105      	bne.n	8001160 <ESP_messageHandler+0x970>
 8001154:	2200      	movs	r2, #0
 8001156:	2140      	movs	r1, #64	; 0x40
 8001158:	483c      	ldr	r0, [pc, #240]	; (800124c <ESP_messageHandler+0xa5c>)
 800115a:	f003 fb47 	bl	80047ec <HAL_GPIO_WritePin>
 800115e:	e008      	b.n	8001172 <ESP_messageHandler+0x982>
		else if(vDor[2] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8001160:	4b3c      	ldr	r3, [pc, #240]	; (8001254 <ESP_messageHandler+0xa64>)
 8001162:	789b      	ldrb	r3, [r3, #2]
 8001164:	2b31      	cmp	r3, #49	; 0x31
 8001166:	d104      	bne.n	8001172 <ESP_messageHandler+0x982>
 8001168:	2201      	movs	r2, #1
 800116a:	2140      	movs	r1, #64	; 0x40
 800116c:	4837      	ldr	r0, [pc, #220]	; (800124c <ESP_messageHandler+0xa5c>)
 800116e:	f003 fb3d 	bl	80047ec <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'D'){
 8001172:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <ESP_messageHandler+0xa34>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b44      	cmp	r3, #68	; 0x44
 8001178:	d108      	bne.n	800118c <ESP_messageHandler+0x99c>
		UART_send("V. DORMITORIO (DORMITORIO) \n", PC_UART);
 800117a:	492b      	ldr	r1, [pc, #172]	; (8001228 <ESP_messageHandler+0xa38>)
 800117c:	4836      	ldr	r0, [pc, #216]	; (8001258 <ESP_messageHandler+0xa68>)
 800117e:	f000 fba1 	bl	80018c4 <UART_send>
		//vDor[0] = textrc[28]; 	// Luz Dormitorio
		//vDor[1] = textrc[31]; 	// Luz Mesita Izq
		//vDor[2] = textrc[34]; 	// Luz Mesita Dch
		vDor[3] = textrc[37]; 	// V. Dormitorio
 8001182:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <ESP_messageHandler+0xa40>)
 8001184:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001188:	4b32      	ldr	r3, [pc, #200]	; (8001254 <ESP_messageHandler+0xa64>)
 800118a:	70da      	strb	r2, [r3, #3]
	}

	// OFICINA
	if (fragment[0] == 'f'){
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <ESP_messageHandler+0xa34>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b66      	cmp	r3, #102	; 0x66
 8001192:	f040 80b8 	bne.w	8001306 <ESP_messageHandler+0xb16>
		UART_send("LUCES (OFICINA) \n", PC_UART);
 8001196:	4924      	ldr	r1, [pc, #144]	; (8001228 <ESP_messageHandler+0xa38>)
 8001198:	4830      	ldr	r0, [pc, #192]	; (800125c <ESP_messageHandler+0xa6c>)
 800119a:	f000 fb93 	bl	80018c4 <UART_send>
		vOfi[0] = textrc[28]; // Luz Oficina
 800119e:	4b24      	ldr	r3, [pc, #144]	; (8001230 <ESP_messageHandler+0xa40>)
 80011a0:	7f1a      	ldrb	r2, [r3, #28]
 80011a2:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <ESP_messageHandler+0xa70>)
 80011a4:	701a      	strb	r2, [r3, #0]
		vOfi[1] = textrc[31]; // Luz Gaming
 80011a6:	4b22      	ldr	r3, [pc, #136]	; (8001230 <ESP_messageHandler+0xa40>)
 80011a8:	7fda      	ldrb	r2, [r3, #31]
 80011aa:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <ESP_messageHandler+0xa70>)
 80011ac:	705a      	strb	r2, [r3, #1]
		vOfi[2] = textrc[34]; // Luz Rx100
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <ESP_messageHandler+0xa40>)
 80011b0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80011b4:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <ESP_messageHandler+0xa70>)
 80011b6:	709a      	strb	r2, [r3, #2]
		vOfi[3] = textrc[37]; // Luz Rx10
 80011b8:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <ESP_messageHandler+0xa40>)
 80011ba:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80011be:	4b28      	ldr	r3, [pc, #160]	; (8001260 <ESP_messageHandler+0xa70>)
 80011c0:	70da      	strb	r2, [r3, #3]
		vOfi[4] = textrc[40]; // Luz Rx1
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <ESP_messageHandler+0xa40>)
 80011c4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80011c8:	4b25      	ldr	r3, [pc, #148]	; (8001260 <ESP_messageHandler+0xa70>)
 80011ca:	711a      	strb	r2, [r3, #4]
		vOfi[5] = textrc[43]; // Luz Gx100
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <ESP_messageHandler+0xa40>)
 80011ce:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80011d2:	4b23      	ldr	r3, [pc, #140]	; (8001260 <ESP_messageHandler+0xa70>)
 80011d4:	715a      	strb	r2, [r3, #5]
		vOfi[6] = textrc[46]; // Luz Gx10
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <ESP_messageHandler+0xa40>)
 80011d8:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80011dc:	4b20      	ldr	r3, [pc, #128]	; (8001260 <ESP_messageHandler+0xa70>)
 80011de:	719a      	strb	r2, [r3, #6]
		vOfi[7] = textrc[49]; // Luz Gx1
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <ESP_messageHandler+0xa40>)
 80011e2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80011e6:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <ESP_messageHandler+0xa70>)
 80011e8:	71da      	strb	r2, [r3, #7]
		vOfi[8] = textrc[52]; // Luz Bx100
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <ESP_messageHandler+0xa40>)
 80011ec:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <ESP_messageHandler+0xa70>)
 80011f2:	721a      	strb	r2, [r3, #8]
		vOfi[9] = textrc[55]; // Luz Bx10
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <ESP_messageHandler+0xa40>)
 80011f6:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80011fa:	4b19      	ldr	r3, [pc, #100]	; (8001260 <ESP_messageHandler+0xa70>)
 80011fc:	725a      	strb	r2, [r3, #9]
		vOfi[10] = textrc[58]; // Luz Bx1
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <ESP_messageHandler+0xa40>)
 8001200:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8001204:	4b16      	ldr	r3, [pc, #88]	; (8001260 <ESP_messageHandler+0xa70>)
 8001206:	729a      	strb	r2, [r3, #10]
		//vOfi[11] = textrc[61]; // V. Oficina

		if(vOfi[0] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET); // Luz Oficina
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <ESP_messageHandler+0xa70>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b30      	cmp	r3, #48	; 0x30
 800120e:	d129      	bne.n	8001264 <ESP_messageHandler+0xa74>
 8001210:	2200      	movs	r2, #0
 8001212:	2120      	movs	r1, #32
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <ESP_messageHandler+0xa5c>)
 8001216:	f003 fae9 	bl	80047ec <HAL_GPIO_WritePin>
 800121a:	e02c      	b.n	8001276 <ESP_messageHandler+0xa86>
 800121c:	200009f4 	.word	0x200009f4
 8001220:	40020c00 	.word	0x40020c00
 8001224:	2000097c 	.word	0x2000097c
 8001228:	20000d2c 	.word	0x20000d2c
 800122c:	08007fe8 	.word	0x08007fe8
 8001230:	20000984 	.word	0x20000984
 8001234:	08007ffc 	.word	0x08007ffc
 8001238:	200008d8 	.word	0x200008d8
 800123c:	40020800 	.word	0x40020800
 8001240:	40020000 	.word	0x40020000
 8001244:	08008008 	.word	0x08008008
 8001248:	20000948 	.word	0x20000948
 800124c:	40020400 	.word	0x40020400
 8001250:	08008010 	.word	0x08008010
 8001254:	200008dc 	.word	0x200008dc
 8001258:	08008028 	.word	0x08008028
 800125c:	08008048 	.word	0x08008048
 8001260:	2000093c 	.word	0x2000093c
		else if(vOfi[0] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001264:	4b2f      	ldr	r3, [pc, #188]	; (8001324 <ESP_messageHandler+0xb34>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b31      	cmp	r3, #49	; 0x31
 800126a:	d104      	bne.n	8001276 <ESP_messageHandler+0xa86>
 800126c:	2201      	movs	r2, #1
 800126e:	2120      	movs	r1, #32
 8001270:	482d      	ldr	r0, [pc, #180]	; (8001328 <ESP_messageHandler+0xb38>)
 8001272:	f003 fabb 	bl	80047ec <HAL_GPIO_WritePin>

		if(vOfi[1] == '0'){
 8001276:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <ESP_messageHandler+0xb34>)
 8001278:	785b      	ldrb	r3, [r3, #1]
 800127a:	2b30      	cmp	r3, #48	; 0x30
 800127c:	d10c      	bne.n	8001298 <ESP_messageHandler+0xaa8>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800127e:	4b2b      	ldr	r3, [pc, #172]	; (800132c <ESP_messageHandler+0xb3c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2200      	movs	r2, #0
 8001284:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001286:	4b29      	ldr	r3, [pc, #164]	; (800132c <ESP_messageHandler+0xb3c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2200      	movs	r2, #0
 800128c:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800128e:	4b27      	ldr	r3, [pc, #156]	; (800132c <ESP_messageHandler+0xb3c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2200      	movs	r2, #0
 8001294:	63da      	str	r2, [r3, #60]	; 0x3c
 8001296:	e036      	b.n	8001306 <ESP_messageHandler+0xb16>
		}
		else if(vOfi[1] == '1'){ // Luz Gaming
 8001298:	4b22      	ldr	r3, [pc, #136]	; (8001324 <ESP_messageHandler+0xb34>)
 800129a:	785b      	ldrb	r3, [r3, #1]
 800129c:	2b31      	cmp	r3, #49	; 0x31
 800129e:	d132      	bne.n	8001306 <ESP_messageHandler+0xb16>

			//uint8_t r, g, b;

			r = rgb_value (vOfi[2],vOfi[3],vOfi[4]);
 80012a0:	4b20      	ldr	r3, [pc, #128]	; (8001324 <ESP_messageHandler+0xb34>)
 80012a2:	789b      	ldrb	r3, [r3, #2]
 80012a4:	4a1f      	ldr	r2, [pc, #124]	; (8001324 <ESP_messageHandler+0xb34>)
 80012a6:	78d1      	ldrb	r1, [r2, #3]
 80012a8:	4a1e      	ldr	r2, [pc, #120]	; (8001324 <ESP_messageHandler+0xb34>)
 80012aa:	7912      	ldrb	r2, [r2, #4]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 f8af 	bl	8001410 <rgb_value>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4a1e      	ldr	r2, [pc, #120]	; (8001330 <ESP_messageHandler+0xb40>)
 80012b6:	6013      	str	r3, [r2, #0]
			g = rgb_value (vOfi[5],vOfi[6],vOfi[7]);
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <ESP_messageHandler+0xb34>)
 80012ba:	795b      	ldrb	r3, [r3, #5]
 80012bc:	4a19      	ldr	r2, [pc, #100]	; (8001324 <ESP_messageHandler+0xb34>)
 80012be:	7991      	ldrb	r1, [r2, #6]
 80012c0:	4a18      	ldr	r2, [pc, #96]	; (8001324 <ESP_messageHandler+0xb34>)
 80012c2:	79d2      	ldrb	r2, [r2, #7]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 f8a3 	bl	8001410 <rgb_value>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4a19      	ldr	r2, [pc, #100]	; (8001334 <ESP_messageHandler+0xb44>)
 80012ce:	6013      	str	r3, [r2, #0]
			b = rgb_value (vOfi[8],vOfi[9],vOfi[10]);
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <ESP_messageHandler+0xb34>)
 80012d2:	7a1b      	ldrb	r3, [r3, #8]
 80012d4:	4a13      	ldr	r2, [pc, #76]	; (8001324 <ESP_messageHandler+0xb34>)
 80012d6:	7a51      	ldrb	r1, [r2, #9]
 80012d8:	4a12      	ldr	r2, [pc, #72]	; (8001324 <ESP_messageHandler+0xb34>)
 80012da:	7a92      	ldrb	r2, [r2, #10]
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 f897 	bl	8001410 <rgb_value>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4a14      	ldr	r2, [pc, #80]	; (8001338 <ESP_messageHandler+0xb48>)
 80012e6:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, g); // PA8
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <ESP_messageHandler+0xb44>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <ESP_messageHandler+0xb3c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, r); // PA9
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <ESP_messageHandler+0xb40>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <ESP_messageHandler+0xb3c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b); // PA10
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <ESP_messageHandler+0xb48>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <ESP_messageHandler+0xb3c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}

	if (fragment[0] == 'F'){
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <ESP_messageHandler+0xb4c>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b46      	cmp	r3, #70	; 0x46
 800130c:	d108      	bne.n	8001320 <ESP_messageHandler+0xb30>
		UART_send("V. OFICINA (OFICINA) \n", PC_UART);
 800130e:	490c      	ldr	r1, [pc, #48]	; (8001340 <ESP_messageHandler+0xb50>)
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <ESP_messageHandler+0xb54>)
 8001312:	f000 fad7 	bl	80018c4 <UART_send>
		//vOfi[6] = textrc[46]; // Luz Gx10
		//vOfi[7] = textrc[49]; // Luz Gx1
		//vOfi[8] = textrc[52]; // Luz Bx100
		//vOfi[9] = textrc[55]; // Luz Bx10
		//vOfi[10] = textrc[58]; // Luz Bx1
		vOfi[11] = textrc[61]; // V. Oficina
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <ESP_messageHandler+0xb58>)
 8001318:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800131c:	4b01      	ldr	r3, [pc, #4]	; (8001324 <ESP_messageHandler+0xb34>)
 800131e:	72da      	strb	r2, [r3, #11]
	// AJUSTES
	if (fragment[0] == 'a'){
	}

	//__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	2000093c 	.word	0x2000093c
 8001328:	40020400 	.word	0x40020400
 800132c:	20000c9c 	.word	0x20000c9c
 8001330:	200008f0 	.word	0x200008f0
 8001334:	200008e4 	.word	0x200008e4
 8001338:	200008e0 	.word	0x200008e0
 800133c:	2000097c 	.word	0x2000097c
 8001340:	20000d2c 	.word	0x20000d2c
 8001344:	0800805c 	.word	0x0800805c
 8001348:	20000984 	.word	0x20000984

0800134c <ldr>:


#include <LDR.h>
#include "ESP8266_HAL.h"

void ldr(uint16_t valor){
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	80fb      	strh	r3, [r7, #6]


	if (vIlum[26] == '1' || vExt[5] == '1'){
 8001356:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <ldr+0xb4>)
 8001358:	7e9b      	ldrb	r3, [r3, #26]
 800135a:	2b31      	cmp	r3, #49	; 0x31
 800135c:	d003      	beq.n	8001366 <ldr+0x1a>
 800135e:	4b29      	ldr	r3, [pc, #164]	; (8001404 <ldr+0xb8>)
 8001360:	795b      	ldrb	r3, [r3, #5]
 8001362:	2b31      	cmp	r3, #49	; 0x31
 8001364:	d147      	bne.n	80013f6 <ldr+0xaa>

		if(valor<90) {
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	2b59      	cmp	r3, #89	; 0x59
 800136a:	d822      	bhi.n	80013b2 <ldr+0x66>
			vIlum[23] = 'x';	// Jardín
 800136c:	4b24      	ldr	r3, [pc, #144]	; (8001400 <ldr+0xb4>)
 800136e:	2278      	movs	r2, #120	; 0x78
 8001370:	75da      	strb	r2, [r3, #23]
			vExt[3] = 'x';
 8001372:	4b24      	ldr	r3, [pc, #144]	; (8001404 <ldr+0xb8>)
 8001374:	2278      	movs	r2, #120	; 0x78
 8001376:	70da      	strb	r2, [r3, #3]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8001378:	2201      	movs	r2, #1
 800137a:	2104      	movs	r1, #4
 800137c:	4822      	ldr	r0, [pc, #136]	; (8001408 <ldr+0xbc>)
 800137e:	f003 fa35 	bl	80047ec <HAL_GPIO_WritePin>
			vIlum[24] = 'x';	// Porche
 8001382:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <ldr+0xb4>)
 8001384:	2278      	movs	r2, #120	; 0x78
 8001386:	761a      	strb	r2, [r3, #24]
			vExt[2] = 'x';
 8001388:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <ldr+0xb8>)
 800138a:	2278      	movs	r2, #120	; 0x78
 800138c:	709a      	strb	r2, [r3, #2]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 800138e:	2201      	movs	r2, #1
 8001390:	2110      	movs	r1, #16
 8001392:	481d      	ldr	r0, [pc, #116]	; (8001408 <ldr+0xbc>)
 8001394:	f003 fa2a 	bl	80047ec <HAL_GPIO_WritePin>
			vIlum[25] = 'x';	// Tendedero
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <ldr+0xb4>)
 800139a:	2278      	movs	r2, #120	; 0x78
 800139c:	765a      	strb	r2, [r3, #25]
			vExt[1] = 'x';
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <ldr+0xb8>)
 80013a0:	2278      	movs	r2, #120	; 0x78
 80013a2:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013aa:	4818      	ldr	r0, [pc, #96]	; (800140c <ldr+0xc0>)
 80013ac:	f003 fa1e 	bl	80047ec <HAL_GPIO_WritePin>
			vIlum[25] = 'x';	// Tendedero
			vExt[1] = 'x';
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
		}
	}
}
 80013b0:	e021      	b.n	80013f6 <ldr+0xaa>
			vIlum[23] = 'x';	// Jardín
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <ldr+0xb4>)
 80013b4:	2278      	movs	r2, #120	; 0x78
 80013b6:	75da      	strb	r2, [r3, #23]
			vExt[3] = 'x';
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <ldr+0xb8>)
 80013ba:	2278      	movs	r2, #120	; 0x78
 80013bc:	70da      	strb	r2, [r3, #3]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2104      	movs	r1, #4
 80013c2:	4811      	ldr	r0, [pc, #68]	; (8001408 <ldr+0xbc>)
 80013c4:	f003 fa12 	bl	80047ec <HAL_GPIO_WritePin>
			vIlum[24] = 'x';	// Porche
 80013c8:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <ldr+0xb4>)
 80013ca:	2278      	movs	r2, #120	; 0x78
 80013cc:	761a      	strb	r2, [r3, #24]
			vExt[2] = 'x';
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <ldr+0xb8>)
 80013d0:	2278      	movs	r2, #120	; 0x78
 80013d2:	709a      	strb	r2, [r3, #2]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2110      	movs	r1, #16
 80013d8:	480b      	ldr	r0, [pc, #44]	; (8001408 <ldr+0xbc>)
 80013da:	f003 fa07 	bl	80047ec <HAL_GPIO_WritePin>
			vIlum[25] = 'x';	// Tendedero
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <ldr+0xb4>)
 80013e0:	2278      	movs	r2, #120	; 0x78
 80013e2:	765a      	strb	r2, [r3, #25]
			vExt[1] = 'x';
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <ldr+0xb8>)
 80013e6:	2278      	movs	r2, #120	; 0x78
 80013e8:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013f0:	4806      	ldr	r0, [pc, #24]	; (800140c <ldr+0xc0>)
 80013f2:	f003 f9fb 	bl	80047ec <HAL_GPIO_WritePin>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000960 	.word	0x20000960
 8001404:	200008f4 	.word	0x200008f4
 8001408:	40020c00 	.word	0x40020c00
 800140c:	40020800 	.word	0x40020800

08001410 <rgb_value>:
 */


#include <RGB.h>

int rgb_value(char i, char j, char k){
 8001410:	b480      	push	{r7}
 8001412:	b087      	sub	sp, #28
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	460b      	mov	r3, r1
 800141c:	71bb      	strb	r3, [r7, #6]
 800141e:	4613      	mov	r3, r2
 8001420:	717b      	strb	r3, [r7, #5]

	int a, b, c;

	if(i == '0') a = 0;
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	2b30      	cmp	r3, #48	; 0x30
 8001426:	d102      	bne.n	800142e <rgb_value+0x1e>
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	e00a      	b.n	8001444 <rgb_value+0x34>
	else if(i == '1') a = 100;
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b31      	cmp	r3, #49	; 0x31
 8001432:	d102      	bne.n	800143a <rgb_value+0x2a>
 8001434:	2364      	movs	r3, #100	; 0x64
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	e004      	b.n	8001444 <rgb_value+0x34>
	else if(i == '2') a = 200;
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	2b32      	cmp	r3, #50	; 0x32
 800143e:	d101      	bne.n	8001444 <rgb_value+0x34>
 8001440:	23c8      	movs	r3, #200	; 0xc8
 8001442:	617b      	str	r3, [r7, #20]

	if(j == '0') b = 0;
 8001444:	79bb      	ldrb	r3, [r7, #6]
 8001446:	2b30      	cmp	r3, #48	; 0x30
 8001448:	d102      	bne.n	8001450 <rgb_value+0x40>
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	e034      	b.n	80014ba <rgb_value+0xaa>
	else if(j == '1') b = 10;
 8001450:	79bb      	ldrb	r3, [r7, #6]
 8001452:	2b31      	cmp	r3, #49	; 0x31
 8001454:	d102      	bne.n	800145c <rgb_value+0x4c>
 8001456:	230a      	movs	r3, #10
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	e02e      	b.n	80014ba <rgb_value+0xaa>
	else if(j == '2') b = 20;
 800145c:	79bb      	ldrb	r3, [r7, #6]
 800145e:	2b32      	cmp	r3, #50	; 0x32
 8001460:	d102      	bne.n	8001468 <rgb_value+0x58>
 8001462:	2314      	movs	r3, #20
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	e028      	b.n	80014ba <rgb_value+0xaa>
	else if(j == '3') b = 30;
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	2b33      	cmp	r3, #51	; 0x33
 800146c:	d102      	bne.n	8001474 <rgb_value+0x64>
 800146e:	231e      	movs	r3, #30
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	e022      	b.n	80014ba <rgb_value+0xaa>
	else if(j == '4') b = 40;
 8001474:	79bb      	ldrb	r3, [r7, #6]
 8001476:	2b34      	cmp	r3, #52	; 0x34
 8001478:	d102      	bne.n	8001480 <rgb_value+0x70>
 800147a:	2328      	movs	r3, #40	; 0x28
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	e01c      	b.n	80014ba <rgb_value+0xaa>
	else if(j == '5') b = 50;
 8001480:	79bb      	ldrb	r3, [r7, #6]
 8001482:	2b35      	cmp	r3, #53	; 0x35
 8001484:	d102      	bne.n	800148c <rgb_value+0x7c>
 8001486:	2332      	movs	r3, #50	; 0x32
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	e016      	b.n	80014ba <rgb_value+0xaa>
	else if(j == '6') b = 60;
 800148c:	79bb      	ldrb	r3, [r7, #6]
 800148e:	2b36      	cmp	r3, #54	; 0x36
 8001490:	d102      	bne.n	8001498 <rgb_value+0x88>
 8001492:	233c      	movs	r3, #60	; 0x3c
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	e010      	b.n	80014ba <rgb_value+0xaa>
	else if(j == '7') b = 70;
 8001498:	79bb      	ldrb	r3, [r7, #6]
 800149a:	2b37      	cmp	r3, #55	; 0x37
 800149c:	d102      	bne.n	80014a4 <rgb_value+0x94>
 800149e:	2346      	movs	r3, #70	; 0x46
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	e00a      	b.n	80014ba <rgb_value+0xaa>
	else if(j == '8') b = 80;
 80014a4:	79bb      	ldrb	r3, [r7, #6]
 80014a6:	2b38      	cmp	r3, #56	; 0x38
 80014a8:	d102      	bne.n	80014b0 <rgb_value+0xa0>
 80014aa:	2350      	movs	r3, #80	; 0x50
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	e004      	b.n	80014ba <rgb_value+0xaa>
	else if(j == '9') b = 90;
 80014b0:	79bb      	ldrb	r3, [r7, #6]
 80014b2:	2b39      	cmp	r3, #57	; 0x39
 80014b4:	d101      	bne.n	80014ba <rgb_value+0xaa>
 80014b6:	235a      	movs	r3, #90	; 0x5a
 80014b8:	613b      	str	r3, [r7, #16]

	if(k == '0') c = 0;
 80014ba:	797b      	ldrb	r3, [r7, #5]
 80014bc:	2b30      	cmp	r3, #48	; 0x30
 80014be:	d102      	bne.n	80014c6 <rgb_value+0xb6>
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	e034      	b.n	8001530 <rgb_value+0x120>
	else if(k == '1') c = 1;
 80014c6:	797b      	ldrb	r3, [r7, #5]
 80014c8:	2b31      	cmp	r3, #49	; 0x31
 80014ca:	d102      	bne.n	80014d2 <rgb_value+0xc2>
 80014cc:	2301      	movs	r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	e02e      	b.n	8001530 <rgb_value+0x120>
	else if(k == '2') c = 2;
 80014d2:	797b      	ldrb	r3, [r7, #5]
 80014d4:	2b32      	cmp	r3, #50	; 0x32
 80014d6:	d102      	bne.n	80014de <rgb_value+0xce>
 80014d8:	2302      	movs	r3, #2
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	e028      	b.n	8001530 <rgb_value+0x120>
	else if(k == '3') c = 3;
 80014de:	797b      	ldrb	r3, [r7, #5]
 80014e0:	2b33      	cmp	r3, #51	; 0x33
 80014e2:	d102      	bne.n	80014ea <rgb_value+0xda>
 80014e4:	2303      	movs	r3, #3
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	e022      	b.n	8001530 <rgb_value+0x120>
	else if(k == '4') c = 4;
 80014ea:	797b      	ldrb	r3, [r7, #5]
 80014ec:	2b34      	cmp	r3, #52	; 0x34
 80014ee:	d102      	bne.n	80014f6 <rgb_value+0xe6>
 80014f0:	2304      	movs	r3, #4
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	e01c      	b.n	8001530 <rgb_value+0x120>
	else if(k == '5') c = 5;
 80014f6:	797b      	ldrb	r3, [r7, #5]
 80014f8:	2b35      	cmp	r3, #53	; 0x35
 80014fa:	d102      	bne.n	8001502 <rgb_value+0xf2>
 80014fc:	2305      	movs	r3, #5
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	e016      	b.n	8001530 <rgb_value+0x120>
	else if(k == '6') c = 6;
 8001502:	797b      	ldrb	r3, [r7, #5]
 8001504:	2b36      	cmp	r3, #54	; 0x36
 8001506:	d102      	bne.n	800150e <rgb_value+0xfe>
 8001508:	2306      	movs	r3, #6
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	e010      	b.n	8001530 <rgb_value+0x120>
	else if(k == '7') c = 7;
 800150e:	797b      	ldrb	r3, [r7, #5]
 8001510:	2b37      	cmp	r3, #55	; 0x37
 8001512:	d102      	bne.n	800151a <rgb_value+0x10a>
 8001514:	2307      	movs	r3, #7
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	e00a      	b.n	8001530 <rgb_value+0x120>
	else if(k == '8') c = 8;
 800151a:	797b      	ldrb	r3, [r7, #5]
 800151c:	2b38      	cmp	r3, #56	; 0x38
 800151e:	d102      	bne.n	8001526 <rgb_value+0x116>
 8001520:	2308      	movs	r3, #8
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	e004      	b.n	8001530 <rgb_value+0x120>
	else if(k == '9') c = 9;
 8001526:	797b      	ldrb	r3, [r7, #5]
 8001528:	2b39      	cmp	r3, #57	; 0x39
 800152a:	d101      	bne.n	8001530 <rgb_value+0x120>
 800152c:	2309      	movs	r3, #9
 800152e:	60fb      	str	r3, [r7, #12]

	return a+b+c;
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	441a      	add	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4413      	add	r3, r2
}
 800153a:	4618      	mov	r0, r3
 800153c:	371c      	adds	r7, #28
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <ringInit>:

void storeChar(unsigned char c, Ring_Buffer *buffer);


void ringInit(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
	_rx_buffer1 = &rx_buffer1;
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <ringInit+0x68>)
 800154e:	4a19      	ldr	r2, [pc, #100]	; (80015b4 <ringInit+0x6c>)
 8001550:	601a      	str	r2, [r3, #0]
    _tx_buffer1 = &tx_buffer1;
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <ringInit+0x70>)
 8001554:	4a19      	ldr	r2, [pc, #100]	; (80015bc <ringInit+0x74>)
 8001556:	601a      	str	r2, [r3, #0]
    _rx_buffer2 = &rx_buffer2;
 8001558:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <ringInit+0x78>)
 800155a:	4a1a      	ldr	r2, [pc, #104]	; (80015c4 <ringInit+0x7c>)
 800155c:	601a      	str	r2, [r3, #0]
    _tx_buffer2 = &tx_buffer2;
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <ringInit+0x80>)
 8001560:	4a1a      	ldr	r2, [pc, #104]	; (80015cc <ringInit+0x84>)
 8001562:	601a      	str	r2, [r3, #0]

    /* Habilita la INTERRUPCIÓN por ERROR del UART (frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_ERR);
 8001564:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <ringInit+0x88>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	695a      	ldr	r2, [r3, #20]
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <ringInit+0x88>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0201 	orr.w	r2, r2, #1
 8001572:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_ERR);
 8001574:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <ringInit+0x8c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <ringInit+0x8c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 0201 	orr.w	r2, r2, #1
 8001582:	615a      	str	r2, [r3, #20]

    /* Habilita la INTERRUPCIÓN por REGISTRO DE DATA VACÍO */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_RXNE);
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <ringInit+0x88>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68da      	ldr	r2, [r3, #12]
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <ringInit+0x88>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 0220 	orr.w	r2, r2, #32
 8001592:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_RXNE);
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <ringInit+0x8c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <ringInit+0x8c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0220 	orr.w	r2, r2, #32
 80015a2:	60da      	str	r2, [r3, #12]
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000a04 	.word	0x20000a04
 80015b4:	2000008c 	.word	0x2000008c
 80015b8:	20000a08 	.word	0x20000a08
 80015bc:	20000294 	.word	0x20000294
 80015c0:	20000a0c 	.word	0x20000a0c
 80015c4:	2000049c 	.word	0x2000049c
 80015c8:	20000a00 	.word	0x20000a00
 80015cc:	200006a4 	.word	0x200006a4
 80015d0:	20000db8 	.word	0x20000db8
 80015d4:	20000d2c 	.word	0x20000d2c

080015d8 <storeChar>:


void storeChar(unsigned char c, Ring_Buffer *buffer)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	71fb      	strb	r3, [r7, #7]
    int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015ea:	3301      	adds	r3, #1
 80015ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015f0:	60fb      	str	r3, [r7, #12]

    // Si queremos almacenar lo recibido justo antes de TAIL, significando que HEAD avanzará hasta la posición de TAIL,
    // se provocará un desbordamiento (overflow) del BUFFER, y, por lo tanto, no se escribirá el caracter o ni avanzaremos HEAD.
    if(i != buffer->tail)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d009      	beq.n	8001612 <storeChar+0x3a>
    {
    	buffer->buffer[buffer->head] = c;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	79f9      	ldrb	r1, [r7, #7]
 8001608:	54d1      	strb	r1, [r2, r3]
        buffer->head = i;
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }
}
 8001612:	bf00      	nop
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <UART_peek>:
	}
}


int UART_peek(UART_HandleTypeDef *uart)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a1c      	ldr	r2, [pc, #112]	; (800169c <UART_peek+0x7c>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d114      	bne.n	800165a <UART_peek+0x3a>
	{
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <UART_peek+0x80>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001638:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <UART_peek+0x80>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001640:	429a      	cmp	r2, r3
 8001642:	d102      	bne.n	800164a <UART_peek+0x2a>
 8001644:	f04f 33ff 	mov.w	r3, #4294967295
 8001648:	e022      	b.n	8001690 <UART_peek+0x70>

		else return _rx_buffer1->buffer[_rx_buffer1->tail];
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <UART_peek+0x80>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <UART_peek+0x80>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001656:	5cd3      	ldrb	r3, [r2, r3]
 8001658:	e01a      	b.n	8001690 <UART_peek+0x70>
	}

	else if (uart == PC_UART)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a11      	ldr	r2, [pc, #68]	; (80016a4 <UART_peek+0x84>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d114      	bne.n	800168c <UART_peek+0x6c>
	{
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 8001662:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <UART_peek+0x88>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <UART_peek+0x88>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001672:	429a      	cmp	r2, r3
 8001674:	d102      	bne.n	800167c <UART_peek+0x5c>
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	e009      	b.n	8001690 <UART_peek+0x70>

		else return _rx_buffer2->buffer[_rx_buffer2->tail];
 800167c:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <UART_peek+0x88>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <UART_peek+0x88>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001688:	5cd3      	ldrb	r3, [r2, r3]
 800168a:	e001      	b.n	8001690 <UART_peek+0x70>
	}

	return -1;
 800168c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001690:	4618      	mov	r0, r3
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	20000db8 	.word	0x20000db8
 80016a0:	20000a04 	.word	0x20000a04
 80016a4:	20000d2c 	.word	0x20000d2c
 80016a8:	20000a0c 	.word	0x20000a0c

080016ac <UART_read>:


int UART_read(UART_HandleTypeDef *uart)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a29      	ldr	r2, [pc, #164]	; (800175c <UART_read+0xb0>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d121      	bne.n	8001700 <UART_read+0x54>
	{
		// Si HEAD no está delante de TAIL, no tenemos ningún CARACTER
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 80016bc:	4b28      	ldr	r3, [pc, #160]	; (8001760 <UART_read+0xb4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80016c4:	4b26      	ldr	r3, [pc, #152]	; (8001760 <UART_read+0xb4>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d102      	bne.n	80016d6 <UART_read+0x2a>
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295
 80016d4:	e03c      	b.n	8001750 <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 80016d6:	4b22      	ldr	r3, [pc, #136]	; (8001760 <UART_read+0xb4>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	4b21      	ldr	r3, [pc, #132]	; (8001760 <UART_read+0xb4>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80016e2:	5cd3      	ldrb	r3, [r2, r3]
 80016e4:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 80016e6:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <UART_read+0xb4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <UART_read+0xb4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80016f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 80016fc:	7bbb      	ldrb	r3, [r7, #14]
 80016fe:	e027      	b.n	8001750 <UART_read+0xa4>
		}
	}

	else if (uart == PC_UART)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a18      	ldr	r2, [pc, #96]	; (8001764 <UART_read+0xb8>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d121      	bne.n	800174c <UART_read+0xa0>
	{
		// Si HEAD no está delante de TAIL, no tenemos ningún CARACTER
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <UART_read+0xbc>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <UART_read+0xbc>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001718:	429a      	cmp	r2, r3
 800171a:	d102      	bne.n	8001722 <UART_read+0x76>
 800171c:	f04f 33ff 	mov.w	r3, #4294967295
 8001720:	e016      	b.n	8001750 <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <UART_read+0xbc>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <UART_read+0xbc>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800172e:	5cd3      	ldrb	r3, [r2, r3]
 8001730:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <UART_read+0xbc>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <UART_read+0xbc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001744:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	e001      	b.n	8001750 <UART_read+0xa4>
		}
	}

	else return -1;
 800174c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	20000db8 	.word	0x20000db8
 8001760:	20000a04 	.word	0x20000a04
 8001764:	20000d2c 	.word	0x20000d2c
 8001768:	20000a0c 	.word	0x20000a0c

0800176c <UART_write>:


void UART_write(int c, UART_HandleTypeDef *uart)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	db54      	blt.n	8001826 <UART_write+0xba>
	{
		if (uart == WiFi_UART)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	4a2d      	ldr	r2, [pc, #180]	; (8001834 <UART_write+0xc8>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d126      	bne.n	80017d2 <UART_write+0x66>
		{
			int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8001784:	4b2c      	ldr	r3, [pc, #176]	; (8001838 <UART_write+0xcc>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800178c:	3301      	adds	r3, #1
 800178e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001792:	60bb      	str	r3, [r7, #8]

			// Si el BUFFER de salida está lleno, sólo se puede esperar a la INTERRUPCIÓN que lo vacia */
		    while (i == _tx_buffer1->tail);
 8001794:	bf00      	nop
 8001796:	4b28      	ldr	r3, [pc, #160]	; (8001838 <UART_write+0xcc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d0f8      	beq.n	8001796 <UART_write+0x2a>

		   _tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 80017a4:	4b24      	ldr	r3, [pc, #144]	; (8001838 <UART_write+0xcc>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b23      	ldr	r3, [pc, #140]	; (8001838 <UART_write+0xcc>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	b2c9      	uxtb	r1, r1
 80017b4:	54d1      	strb	r1, [r2, r3]
		   _tx_buffer1->head = i;
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <UART_write+0xcc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		   // Habilitar la INTERRUPCIÓN de TRANSMISIÓN del UART
		   __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_TXE);
 80017c0:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <UART_write+0xc8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68da      	ldr	r2, [r3, #12]
 80017c6:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <UART_write+0xc8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017ce:	60da      	str	r2, [r3, #12]

			// Habilitar la INTERRUPCIÓN de TRANSMISIÓN del UART
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
		}
	}
}
 80017d0:	e029      	b.n	8001826 <UART_write+0xba>
		else if (uart == PC_UART)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	4a19      	ldr	r2, [pc, #100]	; (800183c <UART_write+0xd0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d125      	bne.n	8001826 <UART_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 80017da:	4b19      	ldr	r3, [pc, #100]	; (8001840 <UART_write+0xd4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017e2:	3301      	adds	r3, #1
 80017e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017e8:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 80017ea:	bf00      	nop
 80017ec:	4b14      	ldr	r3, [pc, #80]	; (8001840 <UART_write+0xd4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d0f8      	beq.n	80017ec <UART_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <UART_write+0xd4>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <UART_write+0xd4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	b2c9      	uxtb	r1, r1
 800180a:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <UART_write+0xd4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <UART_write+0xd0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	4b07      	ldr	r3, [pc, #28]	; (800183c <UART_write+0xd0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001824:	60da      	str	r2, [r3, #12]
}
 8001826:	bf00      	nop
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000db8 	.word	0x20000db8
 8001838:	20000a08 	.word	0x20000a08
 800183c:	20000d2c 	.word	0x20000d2c
 8001840:	20000a00 	.word	0x20000a00

08001844 <UART_available>:


int UART_available(UART_HandleTypeDef *uart)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <UART_available+0x70>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d111      	bne.n	8001878 <UART_available+0x34>
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <UART_available+0x74>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800185c:	b29a      	uxth	r2, r3
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <UART_available+0x74>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001866:	b29b      	uxth	r3, r3
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	b29b      	uxth	r3, r3
 800186c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001870:	b29b      	uxth	r3, r3
 8001872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001876:	e017      	b.n	80018a8 <UART_available+0x64>

	else if (uart == PC_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a10      	ldr	r2, [pc, #64]	; (80018bc <UART_available+0x78>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d111      	bne.n	80018a4 <UART_available+0x60>
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <UART_available+0x7c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001888:	b29a      	uxth	r2, r3
 800188a:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <UART_available+0x7c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001892:	b29b      	uxth	r3, r3
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	b29b      	uxth	r3, r3
 8001898:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800189c:	b29b      	uxth	r3, r3
 800189e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018a2:	e001      	b.n	80018a8 <UART_available+0x64>

	return -1;
 80018a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	20000db8 	.word	0x20000db8
 80018b8:	20000a04 	.word	0x20000a04
 80018bc:	20000d2c 	.word	0x20000d2c
 80018c0:	20000a0c 	.word	0x20000a0c

080018c4 <UART_send>:
	return 1;
}


void UART_send (const char *s, UART_HandleTypeDef *uart)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
	while(*s!='\0') UART_write(*s++, uart);
 80018ce:	e007      	b.n	80018e0 <UART_send+0x1c>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	6839      	ldr	r1, [r7, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ff46 	bl	800176c <UART_write>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f3      	bne.n	80018d0 <UART_send+0xc>
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <UART_copyUpto>:
  while(*s) UART_write(*s++, uart);
}


int UART_copyUpto(char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f7fe fc63 	bl	80001d0 <strlen>
 800190a:	4603      	mov	r3, r0
 800190c:	617b      	str	r3, [r7, #20]
	int indx = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]

again:
	while (!UART_available(uart));
 8001912:	bf00      	nop
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ff95 	bl	8001844 <UART_available>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f9      	beq.n	8001914 <UART_copyUpto+0x20>

	while (UART_peek(uart) != string[so_far])
 8001920:	e01f      	b.n	8001962 <UART_copyUpto+0x6e>
	{
		buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8001922:	4b32      	ldr	r3, [pc, #200]	; (80019ec <UART_copyUpto+0xf8>)
 8001924:	6819      	ldr	r1, [r3, #0]
 8001926:	4b31      	ldr	r3, [pc, #196]	; (80019ec <UART_copyUpto+0xf8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	68b8      	ldr	r0, [r7, #8]
 8001932:	4403      	add	r3, r0
 8001934:	5c8a      	ldrb	r2, [r1, r2]
 8001936:	701a      	strb	r2, [r3, #0]
		_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8001938:	4b2c      	ldr	r3, [pc, #176]	; (80019ec <UART_copyUpto+0xf8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001940:	1c5a      	adds	r2, r3, #1
 8001942:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <UART_copyUpto+0xf8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800194a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		indx++;
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	3301      	adds	r3, #1
 8001952:	61bb      	str	r3, [r7, #24]
		while (!UART_available(uart));
 8001954:	bf00      	nop
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ff74 	bl	8001844 <UART_available>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f9      	beq.n	8001956 <UART_copyUpto+0x62>
	while (UART_peek(uart) != string[so_far])
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff fe5c 	bl	8001620 <UART_peek>
 8001968:	4601      	mov	r1, r0
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	4413      	add	r3, r2
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	4299      	cmp	r1, r3
 8001974:	d1d5      	bne.n	8001922 <UART_copyUpto+0x2e>

	}

	while (UART_peek(uart) == string [so_far])
 8001976:	e01b      	b.n	80019b0 <UART_copyUpto+0xbc>
	{
		so_far++;
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	3301      	adds	r3, #1
 800197c:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = UART_read(uart);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff fe94 	bl	80016ac <UART_read>
 8001984:	4601      	mov	r1, r0
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	61ba      	str	r2, [r7, #24]
 800198c:	461a      	mov	r2, r3
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	4413      	add	r3, r2
 8001992:	b2ca      	uxtb	r2, r1
 8001994:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	429a      	cmp	r2, r3
 800199c:	d101      	bne.n	80019a2 <UART_copyUpto+0xae>
 800199e:	2301      	movs	r3, #1
 80019a0:	e01f      	b.n	80019e2 <UART_copyUpto+0xee>
		while (!UART_available(uart));
 80019a2:	bf00      	nop
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ff4d 	bl	8001844 <UART_available>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f9      	beq.n	80019a4 <UART_copyUpto+0xb0>
	while (UART_peek(uart) == string [so_far])
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff fe35 	bl	8001620 <UART_peek>
 80019b6:	4601      	mov	r1, r0
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	4413      	add	r3, r2
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	4299      	cmp	r1, r3
 80019c2:	d0d9      	beq.n	8001978 <UART_copyUpto+0x84>
	}

	if (so_far != len)
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d002      	beq.n	80019d2 <UART_copyUpto+0xde>
	{
		so_far = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
		goto again;
 80019d0:	e79f      	b.n	8001912 <UART_copyUpto+0x1e>
	}

	if (so_far == len) return 1;
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d101      	bne.n	80019de <UART_copyUpto+0xea>
 80019da:	2301      	movs	r3, #1
 80019dc:	e001      	b.n	80019e2 <UART_copyUpto+0xee>

	else return -1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3720      	adds	r7, #32
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000a04 	.word	0x20000a04

080019f0 <UART_waitFor>:


int UART_waitFor(char *string,UART_HandleTypeDef *uart)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
	int so_far =0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7fe fbe6 	bl	80001d0 <strlen>
 8001a04:	4603      	mov	r3, r0
 8001a06:	60bb      	str	r3, [r7, #8]

again_device:
	while (!UART_available(uart));
 8001a08:	bf00      	nop
 8001a0a:	6838      	ldr	r0, [r7, #0]
 8001a0c:	f7ff ff1a 	bl	8001844 <UART_available>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f9      	beq.n	8001a0a <UART_waitFor+0x1a>

	if (UART_peek(uart) != string[so_far])
 8001a16:	6838      	ldr	r0, [r7, #0]
 8001a18:	f7ff fe02 	bl	8001620 <UART_peek>
 8001a1c:	4601      	mov	r1, r0
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	4413      	add	r3, r2
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	4299      	cmp	r1, r3
 8001a28:	d01e      	beq.n	8001a68 <UART_waitFor+0x78>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 8001a2a:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <UART_waitFor+0xb4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <UART_waitFor+0xb4>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 8001a40:	e7e2      	b.n	8001a08 <UART_waitFor+0x18>

	}

	while (UART_peek(uart) == string [so_far])
	{
		so_far++;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	3301      	adds	r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
		UART_read(uart);
 8001a48:	6838      	ldr	r0, [r7, #0]
 8001a4a:	f7ff fe2f 	bl	80016ac <UART_read>
		if (so_far == len) return 1;
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d101      	bne.n	8001a5a <UART_waitFor+0x6a>
 8001a56:	2301      	movs	r3, #1
 8001a58:	e01f      	b.n	8001a9a <UART_waitFor+0xaa>
		while (!UART_available(uart));
 8001a5a:	bf00      	nop
 8001a5c:	6838      	ldr	r0, [r7, #0]
 8001a5e:	f7ff fef1 	bl	8001844 <UART_available>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f9      	beq.n	8001a5c <UART_waitFor+0x6c>
	while (UART_peek(uart) == string [so_far])
 8001a68:	6838      	ldr	r0, [r7, #0]
 8001a6a:	f7ff fdd9 	bl	8001620 <UART_peek>
 8001a6e:	4601      	mov	r1, r0
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	4299      	cmp	r1, r3
 8001a7a:	d0e2      	beq.n	8001a42 <UART_waitFor+0x52>
	}

	if (so_far != len)
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d002      	beq.n	8001a8a <UART_waitFor+0x9a>
	{
		so_far = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
		goto again_device;
 8001a88:	e7be      	b.n	8001a08 <UART_waitFor+0x18>
	}

	if (so_far == len) return 1;
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d101      	bne.n	8001a96 <UART_waitFor+0xa6>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e001      	b.n	8001a9a <UART_waitFor+0xaa>

	else return -1;
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000a04 	.word	0x20000a04

08001aa8 <UART_isr>:


void UART_isr(UART_HandleTypeDef *huart)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	613b      	str	r3, [r7, #16]

	/* Si DR (DATA REGISTER) no está vacío y RX INT está habilitado */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f003 0320 	and.w	r3, r3, #32
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d023      	beq.n	8001b12 <UART_isr+0x6a>
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	f003 0320 	and.w	r3, r3, #32
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d01e      	beq.n	8001b12 <UART_isr+0x6a>
    	    	                USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	************************************************************************************************************/

		huart->Instance->SR;                   // Leer SR (STATUS REGISTER)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR; // Leer DR (DATA REGISTER)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	73fb      	strb	r3, [r7, #15]

        if (huart == WiFi_UART)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a3f      	ldr	r2, [pc, #252]	; (8001be4 <UART_isr+0x13c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d107      	bne.n	8001afa <UART_isr+0x52>
        {
        	storeChar(c, _rx_buffer1); // Almacena DATA en el BUFFER
 8001aea:	4b3f      	ldr	r3, [pc, #252]	; (8001be8 <UART_isr+0x140>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	4611      	mov	r1, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fd70 	bl	80015d8 <storeChar>
        else if (huart == PC_UART)
        {
        	storeChar(c, _rx_buffer2); // Almacena DATA en el BUFFER
        }

        return;
 8001af8:	e06d      	b.n	8001bd6 <UART_isr+0x12e>
        else if (huart == PC_UART)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a3b      	ldr	r2, [pc, #236]	; (8001bec <UART_isr+0x144>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d169      	bne.n	8001bd6 <UART_isr+0x12e>
        	storeChar(c, _rx_buffer2); // Almacena DATA en el BUFFER
 8001b02:	4b3b      	ldr	r3, [pc, #236]	; (8001bf0 <UART_isr+0x148>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fd64 	bl	80015d8 <storeChar>
        return;
 8001b10:	e061      	b.n	8001bd6 <UART_isr+0x12e>
    }

    /* Si la INTERRUPCIÓN se produce por el TRANSMIT DATA REGISTER EMPTY */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d05f      	beq.n	8001bdc <UART_isr+0x134>
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d05a      	beq.n	8001bdc <UART_isr+0x134>
    {
    	if (huart == WiFi_UART)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a2e      	ldr	r2, [pc, #184]	; (8001be4 <UART_isr+0x13c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d127      	bne.n	8001b7e <UART_isr+0xd6>
    	{
    		if(tx_buffer1.head == tx_buffer1.tail)
 8001b2e:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <UART_isr+0x14c>)
 8001b30:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b34:	4b2f      	ldr	r3, [pc, #188]	; (8001bf4 <UART_isr+0x14c>)
 8001b36:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d108      	bne.n	8001b50 <UART_isr+0xa8>
    	    {
    			// BUFFER vacío, inhabilitamos la INTERRUPCIÓN
    	        __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b4c:	60da      	str	r2, [r3, #12]
        	     huart->Instance->DR = c;

        	}
        }

    	return;
 8001b4e:	e044      	b.n	8001bda <UART_isr+0x132>
    			unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8001b50:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <UART_isr+0x14c>)
 8001b52:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001b56:	4a27      	ldr	r2, [pc, #156]	; (8001bf4 <UART_isr+0x14c>)
 8001b58:	5cd3      	ldrb	r3, [r2, r3]
 8001b5a:	737b      	strb	r3, [r7, #13]
    			tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8001b5c:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <UART_isr+0x14c>)
 8001b5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001b62:	3301      	adds	r3, #1
 8001b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b68:	4a22      	ldr	r2, [pc, #136]	; (8001bf4 <UART_isr+0x14c>)
 8001b6a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    			huart->Instance->SR;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
    			huart->Instance->DR = c;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	7b7a      	ldrb	r2, [r7, #13]
 8001b7a:	605a      	str	r2, [r3, #4]
    	return;
 8001b7c:	e02d      	b.n	8001bda <UART_isr+0x132>
    	else if (huart == PC_UART)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a1a      	ldr	r2, [pc, #104]	; (8001bec <UART_isr+0x144>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d129      	bne.n	8001bda <UART_isr+0x132>
    		if(tx_buffer2.head == tx_buffer2.tail)
 8001b86:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <UART_isr+0x150>)
 8001b88:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <UART_isr+0x150>)
 8001b8e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d108      	bne.n	8001ba8 <UART_isr+0x100>
        	    __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ba4:	60da      	str	r2, [r3, #12]
    	return;
 8001ba6:	e018      	b.n	8001bda <UART_isr+0x132>
        	    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <UART_isr+0x150>)
 8001baa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001bae:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <UART_isr+0x150>)
 8001bb0:	5cd3      	ldrb	r3, [r2, r3]
 8001bb2:	73bb      	strb	r3, [r7, #14]
        	    tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8001bb4:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <UART_isr+0x150>)
 8001bb6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001bba:	3301      	adds	r3, #1
 8001bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <UART_isr+0x150>)
 8001bc2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	     huart->Instance->SR;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
        	     huart->Instance->DR = c;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	7bba      	ldrb	r2, [r7, #14]
 8001bd2:	605a      	str	r2, [r3, #4]
    	return;
 8001bd4:	e001      	b.n	8001bda <UART_isr+0x132>
        return;
 8001bd6:	bf00      	nop
 8001bd8:	e000      	b.n	8001bdc <UART_isr+0x134>
    	return;
 8001bda:	bf00      	nop
    }
}
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000db8 	.word	0x20000db8
 8001be8:	20000a04 	.word	0x20000a04
 8001bec:	20000d2c 	.word	0x20000d2c
 8001bf0:	20000a0c 	.word	0x20000a0c
 8001bf4:	20000294 	.word	0x20000294
 8001bf8:	200006a4 	.word	0x200006a4

08001bfc <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin==B_Timbre_Pin)
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d102      	bne.n	8001c12 <HAL_GPIO_EXTI_Callback+0x16>
	{
		timbre = 1;
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x48>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
	}
    if (GPIO_Pin==B_Stop_Pin)
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d102      	bne.n	8001c1e <HAL_GPIO_EXTI_Callback+0x22>
    {
    	stop = 1;
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin==S_Int_Pin)
 8001c1e:	88fb      	ldrh	r3, [r7, #6]
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d102      	bne.n	8001c2a <HAL_GPIO_EXTI_Callback+0x2e>
    {
        interior = 1;
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_GPIO_EXTI_Callback+0x50>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin==S_Ext_Pin)
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d102      	bne.n	8001c36 <HAL_GPIO_EXTI_Callback+0x3a>
    {
        exterior = 1;
 8001c30:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <HAL_GPIO_EXTI_Callback+0x54>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
    }
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	200008ac 	.word	0x200008ac
 8001c48:	200008b0 	.word	0x200008b0
 8001c4c:	200008b4 	.word	0x200008b4
 8001c50:	200008b8 	.word	0x200008b8

08001c54 <debouncer>:

int debouncer(volatile int* button_int, GPIO_TypeDef* GPIO_port, uint16_t GPIO_number) // Control de los rebotes
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count=0;
	static int counter=0;

	if (*button_int==1)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d13b      	bne.n	8001ce2 <debouncer+0x8e>
	{
		if (button_count==0)
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <debouncer+0x98>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10b      	bne.n	8001c8a <debouncer+0x36>
		{
			counter=HAL_GetTick();
 8001c72:	f001 fe67 	bl	8003944 <HAL_GetTick>
 8001c76:	4603      	mov	r3, r0
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <debouncer+0x9c>)
 8001c7c:	601a      	str	r2, [r3, #0]
			button_count++;
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <debouncer+0x98>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	3301      	adds	r3, #1
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4b19      	ldr	r3, [pc, #100]	; (8001cec <debouncer+0x98>)
 8001c88:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick()-counter>=20)
 8001c8a:	f001 fe5b 	bl	8003944 <HAL_GetTick>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4a17      	ldr	r2, [pc, #92]	; (8001cf0 <debouncer+0x9c>)
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	1a9b      	subs	r3, r3, r2
 8001c96:	2b13      	cmp	r3, #19
 8001c98:	d923      	bls.n	8001ce2 <debouncer+0x8e>
		{
			counter=HAL_GetTick();
 8001c9a:	f001 fe53 	bl	8003944 <HAL_GetTick>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <debouncer+0x9c>)
 8001ca4:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number)!=1)
 8001ca6:	88fb      	ldrh	r3, [r7, #6]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	68b8      	ldr	r0, [r7, #8]
 8001cac:	f002 fd86 	bl	80047bc <HAL_GPIO_ReadPin>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d003      	beq.n	8001cbe <debouncer+0x6a>
			{
				button_count=1;
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <debouncer+0x98>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
 8001cbc:	e005      	b.n	8001cca <debouncer+0x76>
			}
			else
			{
				button_count++;
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <debouncer+0x98>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <debouncer+0x98>)
 8001cc8:	701a      	strb	r2, [r3, #0]
			}
			if (button_count==4 ) // Periodo antirebotes
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <debouncer+0x98>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d107      	bne.n	8001ce2 <debouncer+0x8e>
			{
				button_count=0;
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <debouncer+0x98>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
				*button_int=0;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
				return 1;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <debouncer+0x90>
			}
		}
	}
	return 0;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	200008c6 	.word	0x200008c6
 8001cf0:	200008c8 	.word	0x200008c8

08001cf4 <play_Timbre>:


void play_Timbre(void){
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0

	uint8_t tone;

	tone = 25;
 8001cfa:	2319      	movs	r3, #25
 8001cfc:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	005a      	lsls	r2, r3, #1
 8001d02:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <play_Timbre+0x68>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <play_Timbre+0x68>)
 8001d10:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 8001d12:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <play_Timbre+0x68>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	79fa      	ldrb	r2, [r7, #7]
 8001d18:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(300);
 8001d1a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001d1e:	f001 fe1d 	bl	800395c <HAL_Delay>

	tone = 40;
 8001d22:	2328      	movs	r3, #40	; 0x28
 8001d24:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	005a      	lsls	r2, r3, #1
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <play_Timbre+0x68>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <play_Timbre+0x68>)
 8001d38:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 8001d3a:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <play_Timbre+0x68>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	79fa      	ldrb	r2, [r7, #7]
 8001d40:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 8001d42:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001d46:	f001 fe09 	bl	800395c <HAL_Delay>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001d4a:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <play_Timbre+0x68>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000a58 	.word	0x20000a58

08001d60 <play_Alarma>:


void play_Alarma(){
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0

	uint8_t tone;

	for(tone = 40; tone >= 10; tone = tone-10){
 8001d66:	2328      	movs	r3, #40	; 0x28
 8001d68:	71fb      	strb	r3, [r7, #7]
 8001d6a:	e014      	b.n	8001d96 <play_Alarma+0x36>
		__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	005a      	lsls	r2, r3, #1
 8001d70:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <play_Alarma+0x48>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <play_Alarma+0x48>)
 8001d7e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <play_Alarma+0x48>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	79fa      	ldrb	r2, [r7, #7]
 8001d86:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(300);
 8001d88:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001d8c:	f001 fde6 	bl	800395c <HAL_Delay>
	for(tone = 40; tone >= 10; tone = tone-10){
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	3b0a      	subs	r3, #10
 8001d94:	71fb      	strb	r3, [r7, #7]
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	2b09      	cmp	r3, #9
 8001d9a:	d8e7      	bhi.n	8001d6c <play_Alarma+0xc>
	}
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000a58 	.word	0x20000a58

08001dac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001db0:	f001 fd62 	bl	8003878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001db4:	f000 fa76 	bl	80022a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001db8:	f000 ffd2 	bl	8002d60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001dbc:	f000 ff52 	bl	8002c64 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001dc0:	f000 ffa4 	bl	8002d0c <MX_USART6_UART_Init>
  MX_TIM5_Init();
 8001dc4:	f000 fe16 	bl	80029f4 <MX_TIM5_Init>
  MX_TIM1_Init();
 8001dc8:	f000 fbcc 	bl	8002564 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001dcc:	f000 fd9c 	bl	8002908 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001dd0:	f000 fc80 	bl	80026d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001dd4:	f000 fd0a 	bl	80027ec <MX_TIM3_Init>
  MX_TIM8_Init();
 8001dd8:	f000 fe90 	bl	8002afc <MX_TIM8_Init>
  MX_TIM9_Init();
 8001ddc:	f000 fede 	bl	8002b9c <MX_TIM9_Init>
  MX_TIM6_Init();
 8001de0:	f000 fe56 	bl	8002a90 <MX_TIM6_Init>
  MX_ADC1_Init();
 8001de4:	f000 fac8 	bl	8002378 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001de8:	f000 fb18 	bl	800241c <MX_ADC2_Init>
  MX_ADC3_Init();
 8001dec:	f000 fb68 	bl	80024c0 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8001df0:	f000 ff62 	bl	8002cb8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // LED RGB Gaming
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001df4:	2100      	movs	r1, #0
 8001df6:	48a8      	ldr	r0, [pc, #672]	; (8002098 <main+0x2ec>)
 8001df8:	f003 fab0 	bl	800535c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001dfc:	2104      	movs	r1, #4
 8001dfe:	48a6      	ldr	r0, [pc, #664]	; (8002098 <main+0x2ec>)
 8001e00:	f003 faac 	bl	800535c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001e04:	2108      	movs	r1, #8
 8001e06:	48a4      	ldr	r0, [pc, #656]	; (8002098 <main+0x2ec>)
 8001e08:	f003 faa8 	bl	800535c <HAL_TIM_PWM_Start>
  // Servo Parcela
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	48a3      	ldr	r0, [pc, #652]	; (800209c <main+0x2f0>)
 8001e10:	f003 faa4 	bl	800535c <HAL_TIM_PWM_Start>
  // Servo Garaje
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001e14:	2104      	movs	r1, #4
 8001e16:	48a1      	ldr	r0, [pc, #644]	; (800209c <main+0x2f0>)
 8001e18:	f003 faa0 	bl	800535c <HAL_TIM_PWM_Start>
  // Servo Tendedero
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001e1c:	2108      	movs	r1, #8
 8001e1e:	489f      	ldr	r0, [pc, #636]	; (800209c <main+0x2f0>)
 8001e20:	f003 fa9c 	bl	800535c <HAL_TIM_PWM_Start>
  // Servo Salón
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001e24:	210c      	movs	r1, #12
 8001e26:	489e      	ldr	r0, [pc, #632]	; (80020a0 <main+0x2f4>)
 8001e28:	f003 fa98 	bl	800535c <HAL_TIM_PWM_Start>
  // Servo Dormitorio
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001e2c:	2104      	movs	r1, #4
 8001e2e:	489c      	ldr	r0, [pc, #624]	; (80020a0 <main+0x2f4>)
 8001e30:	f003 fa94 	bl	800535c <HAL_TIM_PWM_Start>
  // Servo Oficina
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001e34:	2108      	movs	r1, #8
 8001e36:	489a      	ldr	r0, [pc, #616]	; (80020a0 <main+0x2f4>)
 8001e38:	f003 fa90 	bl	800535c <HAL_TIM_PWM_Start>
  // DC Salón
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4899      	ldr	r0, [pc, #612]	; (80020a4 <main+0x2f8>)
 8001e40:	f003 fa8c 	bl	800535c <HAL_TIM_PWM_Start>
  // Zumbador
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001e44:	2100      	movs	r1, #0
 8001e46:	4898      	ldr	r0, [pc, #608]	; (80020a8 <main+0x2fc>)
 8001e48:	f003 fa88 	bl	800535c <HAL_TIM_PWM_Start>

  /*----------- Útil para Sensor DHT11/22 -----------*/
  HAL_TIM_Base_Start(&htim6);
 8001e4c:	4897      	ldr	r0, [pc, #604]	; (80020ac <main+0x300>)
 8001e4e:	f003 f9c3 	bl	80051d8 <HAL_TIM_Base_Start>

  /*----------- Inicialización LDR & HW390 & Lluvia -----------*/
  HAL_ADC_Start(&hadc1); // LDR
 8001e52:	4897      	ldr	r0, [pc, #604]	; (80020b0 <main+0x304>)
 8001e54:	f001 fdea 	bl	8003a2c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2); // HW-390
 8001e58:	4896      	ldr	r0, [pc, #600]	; (80020b4 <main+0x308>)
 8001e5a:	f001 fde7 	bl	8003a2c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3); // Lluvia
 8001e5e:	4896      	ldr	r0, [pc, #600]	; (80020b8 <main+0x30c>)
 8001e60:	f001 fde4 	bl	8003a2c <HAL_ADC_Start>

  //__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
  ESP_Init("iPhone Carmela","pistacho");
 8001e64:	4995      	ldr	r1, [pc, #596]	; (80020bc <main+0x310>)
 8001e66:	4896      	ldr	r0, [pc, #600]	; (80020c0 <main+0x314>)
 8001e68:	f7fe fb96 	bl	8000598 <ESP_Init>
  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	ESP_messageHandler();
 8001e6c:	f7fe fcc0 	bl	80007f0 <ESP_messageHandler>

		// TIMBRE
		if (debouncer(&timbre, B_Timbre_GPIO_Port, B_Timbre_Pin)){
 8001e70:	2201      	movs	r2, #1
 8001e72:	4994      	ldr	r1, [pc, #592]	; (80020c4 <main+0x318>)
 8001e74:	4894      	ldr	r0, [pc, #592]	; (80020c8 <main+0x31c>)
 8001e76:	f7ff feed 	bl	8001c54 <debouncer>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <main+0xd8>
			play_Timbre();
 8001e80:	f7ff ff38 	bl	8001cf4 <play_Timbre>

		// STOP ALARMA
		// Conexión Wi-Fi

		// ALARMA
		if (debouncer(&interior, S_Int_GPIO_Port, S_Int_Pin)){
 8001e84:	2208      	movs	r2, #8
 8001e86:	498f      	ldr	r1, [pc, #572]	; (80020c4 <main+0x318>)
 8001e88:	4890      	ldr	r0, [pc, #576]	; (80020cc <main+0x320>)
 8001e8a:	f7ff fee3 	bl	8001c54 <debouncer>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <main+0xf4>
			if(vSeg[0] == '1') play_Alarma();
 8001e94:	4b8e      	ldr	r3, [pc, #568]	; (80020d0 <main+0x324>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b31      	cmp	r3, #49	; 0x31
 8001e9a:	d101      	bne.n	8001ea0 <main+0xf4>
 8001e9c:	f7ff ff60 	bl	8001d60 <play_Alarma>
		}
		if (debouncer(&exterior, S_Ext_GPIO_Port, S_Ext_Pin)){
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	4988      	ldr	r1, [pc, #544]	; (80020c4 <main+0x318>)
 8001ea4:	488b      	ldr	r0, [pc, #556]	; (80020d4 <main+0x328>)
 8001ea6:	f7ff fed5 	bl	8001c54 <debouncer>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <main+0x110>
			if(vSeg[1] == '1') play_Alarma();
 8001eb0:	4b87      	ldr	r3, [pc, #540]	; (80020d0 <main+0x324>)
 8001eb2:	785b      	ldrb	r3, [r3, #1]
 8001eb4:	2b31      	cmp	r3, #49	; 0x31
 8001eb6:	d101      	bne.n	8001ebc <main+0x110>
 8001eb8:	f7ff ff52 	bl	8001d60 <play_Alarma>
		}

		// PUERTA PARCELA (90)
		if(vVent[0]=='1' || vExt[4]=='1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 92);
 8001ebc:	4b86      	ldr	r3, [pc, #536]	; (80020d8 <main+0x32c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b31      	cmp	r3, #49	; 0x31
 8001ec2:	d003      	beq.n	8001ecc <main+0x120>
 8001ec4:	4b85      	ldr	r3, [pc, #532]	; (80020dc <main+0x330>)
 8001ec6:	791b      	ldrb	r3, [r3, #4]
 8001ec8:	2b31      	cmp	r3, #49	; 0x31
 8001eca:	d103      	bne.n	8001ed4 <main+0x128>
 8001ecc:	4b73      	ldr	r3, [pc, #460]	; (800209c <main+0x2f0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	225c      	movs	r2, #92	; 0x5c
 8001ed2:	635a      	str	r2, [r3, #52]	; 0x34
		if(vVent[0]=='0' || vExt[4]=='0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89);
 8001ed4:	4b80      	ldr	r3, [pc, #512]	; (80020d8 <main+0x32c>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b30      	cmp	r3, #48	; 0x30
 8001eda:	d003      	beq.n	8001ee4 <main+0x138>
 8001edc:	4b7f      	ldr	r3, [pc, #508]	; (80020dc <main+0x330>)
 8001ede:	791b      	ldrb	r3, [r3, #4]
 8001ee0:	2b30      	cmp	r3, #48	; 0x30
 8001ee2:	d103      	bne.n	8001eec <main+0x140>
 8001ee4:	4b6d      	ldr	r3, [pc, #436]	; (800209c <main+0x2f0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2259      	movs	r2, #89	; 0x59
 8001eea:	635a      	str	r2, [r3, #52]	; 0x34

		// PUERTA GARAJE (90)
		if(vVent[1]=='1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 91); // más rápido a 30
 8001eec:	4b7a      	ldr	r3, [pc, #488]	; (80020d8 <main+0x32c>)
 8001eee:	785b      	ldrb	r3, [r3, #1]
 8001ef0:	2b31      	cmp	r3, #49	; 0x31
 8001ef2:	d103      	bne.n	8001efc <main+0x150>
 8001ef4:	4b69      	ldr	r3, [pc, #420]	; (800209c <main+0x2f0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	225b      	movs	r2, #91	; 0x5b
 8001efa:	639a      	str	r2, [r3, #56]	; 0x38
		if(vVent[1]=='0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 89);
 8001efc:	4b76      	ldr	r3, [pc, #472]	; (80020d8 <main+0x32c>)
 8001efe:	785b      	ldrb	r3, [r3, #1]
 8001f00:	2b30      	cmp	r3, #48	; 0x30
 8001f02:	d103      	bne.n	8001f0c <main+0x160>
 8001f04:	4b65      	ldr	r3, [pc, #404]	; (800209c <main+0x2f0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2259      	movs	r2, #89	; 0x59
 8001f0a:	639a      	str	r2, [r3, #56]	; 0x38

		// TOLDO TENDEDERO (90)
		if(vExt[0]=='1'){
 8001f0c:	4b73      	ldr	r3, [pc, #460]	; (80020dc <main+0x330>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b31      	cmp	r3, #49	; 0x31
 8001f12:	d10b      	bne.n	8001f2c <main+0x180>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 91);
 8001f14:	4b61      	ldr	r3, [pc, #388]	; (800209c <main+0x2f0>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	225b      	movs	r2, #91	; 0x5b
 8001f1a:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8001f1c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001f20:	f001 fd1c 	bl	800395c <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90);
 8001f24:	4b5d      	ldr	r3, [pc, #372]	; (800209c <main+0x2f0>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	225a      	movs	r2, #90	; 0x5a
 8001f2a:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		if(vExt[0]=='0'){
 8001f2c:	4b6b      	ldr	r3, [pc, #428]	; (80020dc <main+0x330>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b30      	cmp	r3, #48	; 0x30
 8001f32:	d10b      	bne.n	8001f4c <main+0x1a0>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 88);
 8001f34:	4b59      	ldr	r3, [pc, #356]	; (800209c <main+0x2f0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2258      	movs	r2, #88	; 0x58
 8001f3a:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8001f3c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001f40:	f001 fd0c 	bl	800395c <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90);
 8001f44:	4b55      	ldr	r3, [pc, #340]	; (800209c <main+0x2f0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	225a      	movs	r2, #90	; 0x5a
 8001f4a:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		vExt[0]='x';
 8001f4c:	4b63      	ldr	r3, [pc, #396]	; (80020dc <main+0x330>)
 8001f4e:	2278      	movs	r2, #120	; 0x78
 8001f50:	701a      	strb	r2, [r3, #0]

		// VENTANA SALÓN (90)
		if(vVent[2]=='1' || vSal[5]=='1') {
 8001f52:	4b61      	ldr	r3, [pc, #388]	; (80020d8 <main+0x32c>)
 8001f54:	789b      	ldrb	r3, [r3, #2]
 8001f56:	2b31      	cmp	r3, #49	; 0x31
 8001f58:	d003      	beq.n	8001f62 <main+0x1b6>
 8001f5a:	4b61      	ldr	r3, [pc, #388]	; (80020e0 <main+0x334>)
 8001f5c:	795b      	ldrb	r3, [r3, #5]
 8001f5e:	2b31      	cmp	r3, #49	; 0x31
 8001f60:	d10b      	bne.n	8001f7a <main+0x1ce>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 91);
 8001f62:	4b4f      	ldr	r3, [pc, #316]	; (80020a0 <main+0x2f4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	225b      	movs	r2, #91	; 0x5b
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(3000);
 8001f6a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001f6e:	f001 fcf5 	bl	800395c <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 90);
 8001f72:	4b4b      	ldr	r3, [pc, #300]	; (80020a0 <main+0x2f4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	225a      	movs	r2, #90	; 0x5a
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40
		}
		if(vVent[2]=='0'|| vSal[5]=='0') {
 8001f7a:	4b57      	ldr	r3, [pc, #348]	; (80020d8 <main+0x32c>)
 8001f7c:	789b      	ldrb	r3, [r3, #2]
 8001f7e:	2b30      	cmp	r3, #48	; 0x30
 8001f80:	d003      	beq.n	8001f8a <main+0x1de>
 8001f82:	4b57      	ldr	r3, [pc, #348]	; (80020e0 <main+0x334>)
 8001f84:	795b      	ldrb	r3, [r3, #5]
 8001f86:	2b30      	cmp	r3, #48	; 0x30
 8001f88:	d10b      	bne.n	8001fa2 <main+0x1f6>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 89);
 8001f8a:	4b45      	ldr	r3, [pc, #276]	; (80020a0 <main+0x2f4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2259      	movs	r2, #89	; 0x59
 8001f90:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(3000);
 8001f92:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001f96:	f001 fce1 	bl	800395c <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 90);
 8001f9a:	4b41      	ldr	r3, [pc, #260]	; (80020a0 <main+0x2f4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	225a      	movs	r2, #90	; 0x5a
 8001fa0:	641a      	str	r2, [r3, #64]	; 0x40
		}
		vVent[2]='x';
 8001fa2:	4b4d      	ldr	r3, [pc, #308]	; (80020d8 <main+0x32c>)
 8001fa4:	2278      	movs	r2, #120	; 0x78
 8001fa6:	709a      	strb	r2, [r3, #2]
		vSal[5]='x';
 8001fa8:	4b4d      	ldr	r3, [pc, #308]	; (80020e0 <main+0x334>)
 8001faa:	2278      	movs	r2, #120	; 0x78
 8001fac:	715a      	strb	r2, [r3, #5]

		// VENTANA DORMITORIO (90)
		if(vVent[3]=='1' || vDor[3]=='1') {
 8001fae:	4b4a      	ldr	r3, [pc, #296]	; (80020d8 <main+0x32c>)
 8001fb0:	78db      	ldrb	r3, [r3, #3]
 8001fb2:	2b31      	cmp	r3, #49	; 0x31
 8001fb4:	d003      	beq.n	8001fbe <main+0x212>
 8001fb6:	4b4b      	ldr	r3, [pc, #300]	; (80020e4 <main+0x338>)
 8001fb8:	78db      	ldrb	r3, [r3, #3]
 8001fba:	2b31      	cmp	r3, #49	; 0x31
 8001fbc:	d10b      	bne.n	8001fd6 <main+0x22a>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 92);
 8001fbe:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <main+0x2f4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	225c      	movs	r2, #92	; 0x5c
 8001fc4:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(3000);
 8001fc6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001fca:	f001 fcc7 	bl	800395c <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 90);
 8001fce:	4b34      	ldr	r3, [pc, #208]	; (80020a0 <main+0x2f4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	225a      	movs	r2, #90	; 0x5a
 8001fd4:	639a      	str	r2, [r3, #56]	; 0x38
		}
		if(vVent[3]=='0' || vDor[3]=='0') {
 8001fd6:	4b40      	ldr	r3, [pc, #256]	; (80020d8 <main+0x32c>)
 8001fd8:	78db      	ldrb	r3, [r3, #3]
 8001fda:	2b30      	cmp	r3, #48	; 0x30
 8001fdc:	d003      	beq.n	8001fe6 <main+0x23a>
 8001fde:	4b41      	ldr	r3, [pc, #260]	; (80020e4 <main+0x338>)
 8001fe0:	78db      	ldrb	r3, [r3, #3]
 8001fe2:	2b30      	cmp	r3, #48	; 0x30
 8001fe4:	d10b      	bne.n	8001ffe <main+0x252>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 89);
 8001fe6:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <main+0x2f4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2259      	movs	r2, #89	; 0x59
 8001fec:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(3000);
 8001fee:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001ff2:	f001 fcb3 	bl	800395c <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 90);
 8001ff6:	4b2a      	ldr	r3, [pc, #168]	; (80020a0 <main+0x2f4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	225a      	movs	r2, #90	; 0x5a
 8001ffc:	639a      	str	r2, [r3, #56]	; 0x38
		}
		vVent[3]='x';
 8001ffe:	4b36      	ldr	r3, [pc, #216]	; (80020d8 <main+0x32c>)
 8002000:	2278      	movs	r2, #120	; 0x78
 8002002:	70da      	strb	r2, [r3, #3]
		vDor[3]='x';
 8002004:	4b37      	ldr	r3, [pc, #220]	; (80020e4 <main+0x338>)
 8002006:	2278      	movs	r2, #120	; 0x78
 8002008:	70da      	strb	r2, [r3, #3]

		// VENTANA OFICINA (90)
		if(vVent[4]=='1' || vOfi[11]=='1') {
 800200a:	4b33      	ldr	r3, [pc, #204]	; (80020d8 <main+0x32c>)
 800200c:	791b      	ldrb	r3, [r3, #4]
 800200e:	2b31      	cmp	r3, #49	; 0x31
 8002010:	d003      	beq.n	800201a <main+0x26e>
 8002012:	4b35      	ldr	r3, [pc, #212]	; (80020e8 <main+0x33c>)
 8002014:	7adb      	ldrb	r3, [r3, #11]
 8002016:	2b31      	cmp	r3, #49	; 0x31
 8002018:	d10b      	bne.n	8002032 <main+0x286>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 91);
 800201a:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <main+0x2f4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	225b      	movs	r2, #91	; 0x5b
 8002020:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8002022:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002026:	f001 fc99 	bl	800395c <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 90);
 800202a:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <main+0x2f4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	225a      	movs	r2, #90	; 0x5a
 8002030:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		if(vVent[4]=='0' || vOfi[11]=='0') {
 8002032:	4b29      	ldr	r3, [pc, #164]	; (80020d8 <main+0x32c>)
 8002034:	791b      	ldrb	r3, [r3, #4]
 8002036:	2b30      	cmp	r3, #48	; 0x30
 8002038:	d003      	beq.n	8002042 <main+0x296>
 800203a:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <main+0x33c>)
 800203c:	7adb      	ldrb	r3, [r3, #11]
 800203e:	2b30      	cmp	r3, #48	; 0x30
 8002040:	d10b      	bne.n	800205a <main+0x2ae>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 88);
 8002042:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <main+0x2f4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2258      	movs	r2, #88	; 0x58
 8002048:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 800204a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800204e:	f001 fc85 	bl	800395c <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 90);
 8002052:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <main+0x2f4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	225a      	movs	r2, #90	; 0x5a
 8002058:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		vVent[4]='x';
 800205a:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <main+0x32c>)
 800205c:	2278      	movs	r2, #120	; 0x78
 800205e:	711a      	strb	r2, [r3, #4]
		vOfi[11]='x';
 8002060:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <main+0x33c>)
 8002062:	2278      	movs	r2, #120	; 0x78
 8002064:	72da      	strb	r2, [r3, #11]

		// FINAL DE CARRERA PARCELA
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == 0){ // cambiar a PE6
 8002066:	2110      	movs	r1, #16
 8002068:	4816      	ldr	r0, [pc, #88]	; (80020c4 <main+0x318>)
 800206a:	f002 fba7 	bl	80047bc <HAL_GPIO_ReadPin>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d155      	bne.n	8002120 <main+0x374>

			if (vVent[0]=='1' || vExt[4]=='1'){
 8002074:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <main+0x32c>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b31      	cmp	r3, #49	; 0x31
 800207a:	d003      	beq.n	8002084 <main+0x2d8>
 800207c:	4b17      	ldr	r3, [pc, #92]	; (80020dc <main+0x330>)
 800207e:	791b      	ldrb	r3, [r3, #4]
 8002080:	2b31      	cmp	r3, #49	; 0x31
 8002082:	d133      	bne.n	80020ec <main+0x340>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89); // S_Parcela
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <main+0x2f0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2259      	movs	r2, #89	; 0x59
 800208a:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(1000);
 800208c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002090:	f001 fc64 	bl	800395c <HAL_Delay>
 8002094:	e02a      	b.n	80020ec <main+0x340>
 8002096:	bf00      	nop
 8002098:	20000c9c 	.word	0x20000c9c
 800209c:	20000d70 	.word	0x20000d70
 80020a0:	20000b7c 	.word	0x20000b7c
 80020a4:	20000ce4 	.word	0x20000ce4
 80020a8:	20000a58 	.word	0x20000a58
 80020ac:	20000c54 	.word	0x20000c54
 80020b0:	20000bc4 	.word	0x20000bc4
 80020b4:	20000ae4 	.word	0x20000ae4
 80020b8:	20000c0c 	.word	0x20000c0c
 80020bc:	08008074 	.word	0x08008074
 80020c0:	08008080 	.word	0x08008080
 80020c4:	40021000 	.word	0x40021000
 80020c8:	200008ac 	.word	0x200008ac
 80020cc:	200008b4 	.word	0x200008b4
 80020d0:	200009fc 	.word	0x200009fc
 80020d4:	200008b8 	.word	0x200008b8
 80020d8:	200008e8 	.word	0x200008e8
 80020dc:	200008f4 	.word	0x200008f4
 80020e0:	200009f4 	.word	0x200009f4
 80020e4:	200008dc 	.word	0x200008dc
 80020e8:	2000093c 	.word	0x2000093c
			}
			if (vVent[0]=='0' || vExt[4]=='0'){
 80020ec:	4b5d      	ldr	r3, [pc, #372]	; (8002264 <main+0x4b8>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b30      	cmp	r3, #48	; 0x30
 80020f2:	d003      	beq.n	80020fc <main+0x350>
 80020f4:	4b5c      	ldr	r3, [pc, #368]	; (8002268 <main+0x4bc>)
 80020f6:	791b      	ldrb	r3, [r3, #4]
 80020f8:	2b30      	cmp	r3, #48	; 0x30
 80020fa:	d107      	bne.n	800210c <main+0x360>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 92); // S_Parcela
 80020fc:	4b5b      	ldr	r3, [pc, #364]	; (800226c <main+0x4c0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	225c      	movs	r2, #92	; 0x5c
 8002102:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(1000);
 8002104:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002108:	f001 fc28 	bl	800395c <HAL_Delay>
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 90); // S_Parcela
 800210c:	4b57      	ldr	r3, [pc, #348]	; (800226c <main+0x4c0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	225a      	movs	r2, #90	; 0x5a
 8002112:	635a      	str	r2, [r3, #52]	; 0x34
			vVent[0]='x'; // S_Parcela
 8002114:	4b53      	ldr	r3, [pc, #332]	; (8002264 <main+0x4b8>)
 8002116:	2278      	movs	r2, #120	; 0x78
 8002118:	701a      	strb	r2, [r3, #0]
			vExt[4]='x'; // S_Parcela
 800211a:	4b53      	ldr	r3, [pc, #332]	; (8002268 <main+0x4bc>)
 800211c:	2278      	movs	r2, #120	; 0x78
 800211e:	711a      	strb	r2, [r3, #4]
		}

		// FINAL DE CARRERA GARAJE
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == 0){
 8002120:	2110      	movs	r1, #16
 8002122:	4853      	ldr	r0, [pc, #332]	; (8002270 <main+0x4c4>)
 8002124:	f002 fb4a 	bl	80047bc <HAL_GPIO_ReadPin>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d11e      	bne.n	800216c <main+0x3c0>

			if (vVent[1]=='1'){
 800212e:	4b4d      	ldr	r3, [pc, #308]	; (8002264 <main+0x4b8>)
 8002130:	785b      	ldrb	r3, [r3, #1]
 8002132:	2b31      	cmp	r3, #49	; 0x31
 8002134:	d107      	bne.n	8002146 <main+0x39a>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 89); // S_Garaje
 8002136:	4b4d      	ldr	r3, [pc, #308]	; (800226c <main+0x4c0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2259      	movs	r2, #89	; 0x59
 800213c:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(1000);
 800213e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002142:	f001 fc0b 	bl	800395c <HAL_Delay>
			}
			if (vVent[1]=='0'){
 8002146:	4b47      	ldr	r3, [pc, #284]	; (8002264 <main+0x4b8>)
 8002148:	785b      	ldrb	r3, [r3, #1]
 800214a:	2b30      	cmp	r3, #48	; 0x30
 800214c:	d107      	bne.n	800215e <main+0x3b2>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 91); // S_Garaje
 800214e:	4b47      	ldr	r3, [pc, #284]	; (800226c <main+0x4c0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	225b      	movs	r2, #91	; 0x5b
 8002154:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(1000);
 8002156:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800215a:	f001 fbff 	bl	800395c <HAL_Delay>
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 90); // S_Garaje
 800215e:	4b43      	ldr	r3, [pc, #268]	; (800226c <main+0x4c0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	225a      	movs	r2, #90	; 0x5a
 8002164:	639a      	str	r2, [r3, #56]	; 0x38
			vVent[1]='x'; // S_Garaje
 8002166:	4b3f      	ldr	r3, [pc, #252]	; (8002264 <main+0x4b8>)
 8002168:	2278      	movs	r2, #120	; 0x78
 800216a:	705a      	strb	r2, [r3, #1]
		}

		// VENTILADOR SALÓN
		if(vTemp[0]=='1') {
 800216c:	4b41      	ldr	r3, [pc, #260]	; (8002274 <main+0x4c8>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b31      	cmp	r3, #49	; 0x31
 8002172:	d10e      	bne.n	8002192 <main+0x3e6>
			__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 1000);
 8002174:	4b40      	ldr	r3, [pc, #256]	; (8002278 <main+0x4cc>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800217c:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
 800217e:	2201      	movs	r2, #1
 8002180:	2110      	movs	r1, #16
 8002182:	483e      	ldr	r0, [pc, #248]	; (800227c <main+0x4d0>)
 8002184:	f002 fb32 	bl	80047ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,GPIO_PIN_RESET);
 8002188:	2200      	movs	r2, #0
 800218a:	2120      	movs	r1, #32
 800218c:	483b      	ldr	r0, [pc, #236]	; (800227c <main+0x4d0>)
 800218e:	f002 fb2d 	bl	80047ec <HAL_GPIO_WritePin>
		}
		if(vTemp[0]=='0') {
 8002192:	4b38      	ldr	r3, [pc, #224]	; (8002274 <main+0x4c8>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b30      	cmp	r3, #48	; 0x30
 8002198:	d10d      	bne.n	80021b6 <main+0x40a>
			__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 800219a:	4b37      	ldr	r3, [pc, #220]	; (8002278 <main+0x4cc>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2200      	movs	r2, #0
 80021a0:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_RESET);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2110      	movs	r1, #16
 80021a6:	4835      	ldr	r0, [pc, #212]	; (800227c <main+0x4d0>)
 80021a8:	f002 fb20 	bl	80047ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,GPIO_PIN_RESET);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2120      	movs	r1, #32
 80021b0:	4832      	ldr	r0, [pc, #200]	; (800227c <main+0x4d0>)
 80021b2:	f002 fb1b 	bl	80047ec <HAL_GPIO_WritePin>
		}

		/*----------- Lectura Sensores -----------*/

		// LDR
		if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 80021b6:	f04f 31ff 	mov.w	r1, #4294967295
 80021ba:	4831      	ldr	r0, [pc, #196]	; (8002280 <main+0x4d4>)
 80021bc:	f001 fd08 	bl	8003bd0 <HAL_ADC_PollForConversion>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d106      	bne.n	80021d4 <main+0x428>
			LDR_valor = HAL_ADC_GetValue(&hadc1);
 80021c6:	482e      	ldr	r0, [pc, #184]	; (8002280 <main+0x4d4>)
 80021c8:	f001 fd8d 	bl	8003ce6 <HAL_ADC_GetValue>
 80021cc:	4603      	mov	r3, r0
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	4b2c      	ldr	r3, [pc, #176]	; (8002284 <main+0x4d8>)
 80021d2:	801a      	strh	r2, [r3, #0]

		ldr(LDR_valor);
 80021d4:	4b2b      	ldr	r3, [pc, #172]	; (8002284 <main+0x4d8>)
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff f8b7 	bl	800134c <ldr>

		// Lluvia
		if(HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY) == HAL_OK)
 80021de:	f04f 31ff 	mov.w	r1, #4294967295
 80021e2:	4829      	ldr	r0, [pc, #164]	; (8002288 <main+0x4dc>)
 80021e4:	f001 fcf4 	bl	8003bd0 <HAL_ADC_PollForConversion>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d106      	bne.n	80021fc <main+0x450>
			Lluvia_lectura = HAL_ADC_GetValue(&hadc3);
 80021ee:	4826      	ldr	r0, [pc, #152]	; (8002288 <main+0x4dc>)
 80021f0:	f001 fd79 	bl	8003ce6 <HAL_ADC_GetValue>
 80021f4:	4603      	mov	r3, r0
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	4b24      	ldr	r3, [pc, #144]	; (800228c <main+0x4e0>)
 80021fa:	801a      	strh	r2, [r3, #0]

		Lluvia_real = 100 - ((100*Lluvia_lectura)/255);
 80021fc:	4b23      	ldr	r3, [pc, #140]	; (800228c <main+0x4e0>)
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	2364      	movs	r3, #100	; 0x64
 8002204:	fb03 f302 	mul.w	r3, r3, r2
 8002208:	4a21      	ldr	r2, [pc, #132]	; (8002290 <main+0x4e4>)
 800220a:	fb82 1203 	smull	r1, r2, r2, r3
 800220e:	441a      	add	r2, r3
 8002210:	11d2      	asrs	r2, r2, #7
 8002212:	17db      	asrs	r3, r3, #31
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	b29b      	uxth	r3, r3
 8002218:	3364      	adds	r3, #100	; 0x64
 800221a:	b29a      	uxth	r2, r3
 800221c:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <main+0x4e8>)
 800221e:	801a      	strh	r2, [r3, #0]

		// HW-390
		if(HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK)
 8002220:	f04f 31ff 	mov.w	r1, #4294967295
 8002224:	481c      	ldr	r0, [pc, #112]	; (8002298 <main+0x4ec>)
 8002226:	f001 fcd3 	bl	8003bd0 <HAL_ADC_PollForConversion>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d106      	bne.n	800223e <main+0x492>
			Higro_lectura = HAL_ADC_GetValue(&hadc2);
 8002230:	4819      	ldr	r0, [pc, #100]	; (8002298 <main+0x4ec>)
 8002232:	f001 fd58 	bl	8003ce6 <HAL_ADC_GetValue>
 8002236:	4603      	mov	r3, r0
 8002238:	b29a      	uxth	r2, r3
 800223a:	4b18      	ldr	r3, [pc, #96]	; (800229c <main+0x4f0>)
 800223c:	801a      	strh	r2, [r3, #0]

		Higro_real = 100 - ((100*Higro_lectura)/255);
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <main+0x4f0>)
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	2364      	movs	r3, #100	; 0x64
 8002246:	fb03 f302 	mul.w	r3, r3, r2
 800224a:	4a11      	ldr	r2, [pc, #68]	; (8002290 <main+0x4e4>)
 800224c:	fb82 1203 	smull	r1, r2, r2, r3
 8002250:	441a      	add	r2, r3
 8002252:	11d2      	asrs	r2, r2, #7
 8002254:	17db      	asrs	r3, r3, #31
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	b29b      	uxth	r3, r3
 800225a:	3364      	adds	r3, #100	; 0x64
 800225c:	b29a      	uxth	r2, r3
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <main+0x4f4>)
 8002260:	801a      	strh	r2, [r3, #0]
	  	ESP_messageHandler();
 8002262:	e603      	b.n	8001e6c <main+0xc0>
 8002264:	200008e8 	.word	0x200008e8
 8002268:	200008f4 	.word	0x200008f4
 800226c:	20000d70 	.word	0x20000d70
 8002270:	40021000 	.word	0x40021000
 8002274:	20000938 	.word	0x20000938
 8002278:	20000ce4 	.word	0x20000ce4
 800227c:	40020800 	.word	0x40020800
 8002280:	20000bc4 	.word	0x20000bc4
 8002284:	200008bc 	.word	0x200008bc
 8002288:	20000c0c 	.word	0x20000c0c
 800228c:	200008c2 	.word	0x200008c2
 8002290:	80808081 	.word	0x80808081
 8002294:	200008c4 	.word	0x200008c4
 8002298:	20000ae4 	.word	0x20000ae4
 800229c:	200008be 	.word	0x200008be
 80022a0:	200008c0 	.word	0x200008c0

080022a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b094      	sub	sp, #80	; 0x50
 80022a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022aa:	f107 0320 	add.w	r3, r7, #32
 80022ae:	2230      	movs	r2, #48	; 0x30
 80022b0:	2100      	movs	r1, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f004 feb6 	bl	8007024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c8:	2300      	movs	r3, #0
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	4b28      	ldr	r3, [pc, #160]	; (8002370 <SystemClock_Config+0xcc>)
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	4a27      	ldr	r2, [pc, #156]	; (8002370 <SystemClock_Config+0xcc>)
 80022d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d6:	6413      	str	r3, [r2, #64]	; 0x40
 80022d8:	4b25      	ldr	r3, [pc, #148]	; (8002370 <SystemClock_Config+0xcc>)
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022e4:	2300      	movs	r3, #0
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	4b22      	ldr	r3, [pc, #136]	; (8002374 <SystemClock_Config+0xd0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a21      	ldr	r2, [pc, #132]	; (8002374 <SystemClock_Config+0xd0>)
 80022ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <SystemClock_Config+0xd0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fc:	607b      	str	r3, [r7, #4]
 80022fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002300:	2301      	movs	r3, #1
 8002302:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002304:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800230a:	2302      	movs	r3, #2
 800230c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800230e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002312:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002314:	2304      	movs	r3, #4
 8002316:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8002318:	2332      	movs	r3, #50	; 0x32
 800231a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800231c:	2302      	movs	r3, #2
 800231e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002320:	2307      	movs	r3, #7
 8002322:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002324:	f107 0320 	add.w	r3, r7, #32
 8002328:	4618      	mov	r0, r3
 800232a:	f002 fa91 	bl	8004850 <HAL_RCC_OscConfig>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002334:	f000 fe3a 	bl	8002fac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002338:	230f      	movs	r3, #15
 800233a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800233c:	2302      	movs	r3, #2
 800233e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002348:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800234a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800234e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	2101      	movs	r1, #1
 8002356:	4618      	mov	r0, r3
 8002358:	f002 fcf2 	bl	8004d40 <HAL_RCC_ClockConfig>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002362:	f000 fe23 	bl	8002fac <Error_Handler>
  }
}
 8002366:	bf00      	nop
 8002368:	3750      	adds	r7, #80	; 0x50
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40023800 	.word	0x40023800
 8002374:	40007000 	.word	0x40007000

08002378 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800237e:	463b      	mov	r3, r7
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800238a:	4b21      	ldr	r3, [pc, #132]	; (8002410 <MX_ADC1_Init+0x98>)
 800238c:	4a21      	ldr	r2, [pc, #132]	; (8002414 <MX_ADC1_Init+0x9c>)
 800238e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002390:	4b1f      	ldr	r3, [pc, #124]	; (8002410 <MX_ADC1_Init+0x98>)
 8002392:	2200      	movs	r2, #0
 8002394:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8002396:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <MX_ADC1_Init+0x98>)
 8002398:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800239c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800239e:	4b1c      	ldr	r3, [pc, #112]	; (8002410 <MX_ADC1_Init+0x98>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80023a4:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <MX_ADC1_Init+0x98>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023aa:	4b19      	ldr	r3, [pc, #100]	; (8002410 <MX_ADC1_Init+0x98>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023b2:	4b17      	ldr	r3, [pc, #92]	; (8002410 <MX_ADC1_Init+0x98>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023b8:	4b15      	ldr	r3, [pc, #84]	; (8002410 <MX_ADC1_Init+0x98>)
 80023ba:	4a17      	ldr	r2, [pc, #92]	; (8002418 <MX_ADC1_Init+0xa0>)
 80023bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023be:	4b14      	ldr	r3, [pc, #80]	; (8002410 <MX_ADC1_Init+0x98>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <MX_ADC1_Init+0x98>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <MX_ADC1_Init+0x98>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80023d2:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <MX_ADC1_Init+0x98>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023d8:	480d      	ldr	r0, [pc, #52]	; (8002410 <MX_ADC1_Init+0x98>)
 80023da:	f001 fae3 	bl	80039a4 <HAL_ADC_Init>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80023e4:	f000 fde2 	bl	8002fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80023e8:	2304      	movs	r3, #4
 80023ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80023ec:	2301      	movs	r3, #1
 80023ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80023f0:	2307      	movs	r3, #7
 80023f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023f4:	463b      	mov	r3, r7
 80023f6:	4619      	mov	r1, r3
 80023f8:	4805      	ldr	r0, [pc, #20]	; (8002410 <MX_ADC1_Init+0x98>)
 80023fa:	f001 fc81 	bl	8003d00 <HAL_ADC_ConfigChannel>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002404:	f000 fdd2 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002408:	bf00      	nop
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000bc4 	.word	0x20000bc4
 8002414:	40012000 	.word	0x40012000
 8002418:	0f000001 	.word	0x0f000001

0800241c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002422:	463b      	mov	r3, r7
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800242e:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <MX_ADC2_Init+0x98>)
 8002430:	4a21      	ldr	r2, [pc, #132]	; (80024b8 <MX_ADC2_Init+0x9c>)
 8002432:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002434:	4b1f      	ldr	r3, [pc, #124]	; (80024b4 <MX_ADC2_Init+0x98>)
 8002436:	2200      	movs	r2, #0
 8002438:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 800243a:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <MX_ADC2_Init+0x98>)
 800243c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002440:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002442:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <MX_ADC2_Init+0x98>)
 8002444:	2200      	movs	r2, #0
 8002446:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002448:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <MX_ADC2_Init+0x98>)
 800244a:	2201      	movs	r2, #1
 800244c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800244e:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <MX_ADC2_Init+0x98>)
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002456:	4b17      	ldr	r3, [pc, #92]	; (80024b4 <MX_ADC2_Init+0x98>)
 8002458:	2200      	movs	r2, #0
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800245c:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <MX_ADC2_Init+0x98>)
 800245e:	4a17      	ldr	r2, [pc, #92]	; (80024bc <MX_ADC2_Init+0xa0>)
 8002460:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002462:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <MX_ADC2_Init+0x98>)
 8002464:	2200      	movs	r2, #0
 8002466:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002468:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <MX_ADC2_Init+0x98>)
 800246a:	2201      	movs	r2, #1
 800246c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <MX_ADC2_Init+0x98>)
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002476:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <MX_ADC2_Init+0x98>)
 8002478:	2200      	movs	r2, #0
 800247a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800247c:	480d      	ldr	r0, [pc, #52]	; (80024b4 <MX_ADC2_Init+0x98>)
 800247e:	f001 fa91 	bl	80039a4 <HAL_ADC_Init>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002488:	f000 fd90 	bl	8002fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800248c:	2308      	movs	r3, #8
 800248e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002490:	2301      	movs	r3, #1
 8002492:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002494:	2307      	movs	r3, #7
 8002496:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002498:	463b      	mov	r3, r7
 800249a:	4619      	mov	r1, r3
 800249c:	4805      	ldr	r0, [pc, #20]	; (80024b4 <MX_ADC2_Init+0x98>)
 800249e:	f001 fc2f 	bl	8003d00 <HAL_ADC_ConfigChannel>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80024a8:	f000 fd80 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80024ac:	bf00      	nop
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20000ae4 	.word	0x20000ae4
 80024b8:	40012100 	.word	0x40012100
 80024bc:	0f000001 	.word	0x0f000001

080024c0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024c6:	463b      	mov	r3, r7
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80024d2:	4b21      	ldr	r3, [pc, #132]	; (8002558 <MX_ADC3_Init+0x98>)
 80024d4:	4a21      	ldr	r2, [pc, #132]	; (800255c <MX_ADC3_Init+0x9c>)
 80024d6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80024d8:	4b1f      	ldr	r3, [pc, #124]	; (8002558 <MX_ADC3_Init+0x98>)
 80024da:	2200      	movs	r2, #0
 80024dc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 80024de:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <MX_ADC3_Init+0x98>)
 80024e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024e4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80024e6:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <MX_ADC3_Init+0x98>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80024ec:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <MX_ADC3_Init+0x98>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80024f2:	4b19      	ldr	r3, [pc, #100]	; (8002558 <MX_ADC3_Init+0x98>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024fa:	4b17      	ldr	r3, [pc, #92]	; (8002558 <MX_ADC3_Init+0x98>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002500:	4b15      	ldr	r3, [pc, #84]	; (8002558 <MX_ADC3_Init+0x98>)
 8002502:	4a17      	ldr	r2, [pc, #92]	; (8002560 <MX_ADC3_Init+0xa0>)
 8002504:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <MX_ADC3_Init+0x98>)
 8002508:	2200      	movs	r2, #0
 800250a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <MX_ADC3_Init+0x98>)
 800250e:	2201      	movs	r2, #1
 8002510:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <MX_ADC3_Init+0x98>)
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800251a:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <MX_ADC3_Init+0x98>)
 800251c:	2200      	movs	r2, #0
 800251e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002520:	480d      	ldr	r0, [pc, #52]	; (8002558 <MX_ADC3_Init+0x98>)
 8002522:	f001 fa3f 	bl	80039a4 <HAL_ADC_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800252c:	f000 fd3e 	bl	8002fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002530:	230b      	movs	r3, #11
 8002532:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002534:	2301      	movs	r3, #1
 8002536:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002538:	2307      	movs	r3, #7
 800253a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800253c:	463b      	mov	r3, r7
 800253e:	4619      	mov	r1, r3
 8002540:	4805      	ldr	r0, [pc, #20]	; (8002558 <MX_ADC3_Init+0x98>)
 8002542:	f001 fbdd 	bl	8003d00 <HAL_ADC_ConfigChannel>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800254c:	f000 fd2e 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002550:	bf00      	nop
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000c0c 	.word	0x20000c0c
 800255c:	40012200 	.word	0x40012200
 8002560:	0f000001 	.word	0x0f000001

08002564 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b096      	sub	sp, #88	; 0x58
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800256a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002578:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	605a      	str	r2, [r3, #4]
 800258c:	609a      	str	r2, [r3, #8]
 800258e:	60da      	str	r2, [r3, #12]
 8002590:	611a      	str	r2, [r3, #16]
 8002592:	615a      	str	r2, [r3, #20]
 8002594:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	2220      	movs	r2, #32
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f004 fd41 	bl	8007024 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025a2:	4b4a      	ldr	r3, [pc, #296]	; (80026cc <MX_TIM1_Init+0x168>)
 80025a4:	4a4a      	ldr	r2, [pc, #296]	; (80026d0 <MX_TIM1_Init+0x16c>)
 80025a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 80025a8:	4b48      	ldr	r3, [pc, #288]	; (80026cc <MX_TIM1_Init+0x168>)
 80025aa:	225f      	movs	r2, #95	; 0x5f
 80025ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ae:	4b47      	ldr	r3, [pc, #284]	; (80026cc <MX_TIM1_Init+0x168>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 80025b4:	4b45      	ldr	r3, [pc, #276]	; (80026cc <MX_TIM1_Init+0x168>)
 80025b6:	22fe      	movs	r2, #254	; 0xfe
 80025b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ba:	4b44      	ldr	r3, [pc, #272]	; (80026cc <MX_TIM1_Init+0x168>)
 80025bc:	2200      	movs	r2, #0
 80025be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025c0:	4b42      	ldr	r3, [pc, #264]	; (80026cc <MX_TIM1_Init+0x168>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c6:	4b41      	ldr	r3, [pc, #260]	; (80026cc <MX_TIM1_Init+0x168>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025cc:	483f      	ldr	r0, [pc, #252]	; (80026cc <MX_TIM1_Init+0x168>)
 80025ce:	f002 fdb3 	bl	8005138 <HAL_TIM_Base_Init>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80025d8:	f000 fce8 	bl	8002fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025e6:	4619      	mov	r1, r3
 80025e8:	4838      	ldr	r0, [pc, #224]	; (80026cc <MX_TIM1_Init+0x168>)
 80025ea:	f003 f841 	bl	8005670 <HAL_TIM_ConfigClockSource>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80025f4:	f000 fcda 	bl	8002fac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80025f8:	4834      	ldr	r0, [pc, #208]	; (80026cc <MX_TIM1_Init+0x168>)
 80025fa:	f002 fe55 	bl	80052a8 <HAL_TIM_PWM_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002604:	f000 fcd2 	bl	8002fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002608:	2300      	movs	r3, #0
 800260a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800260c:	2300      	movs	r3, #0
 800260e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002610:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002614:	4619      	mov	r1, r3
 8002616:	482d      	ldr	r0, [pc, #180]	; (80026cc <MX_TIM1_Init+0x168>)
 8002618:	f003 fc02 	bl	8005e20 <HAL_TIMEx_MasterConfigSynchronization>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002622:	f000 fcc3 	bl	8002fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002626:	2360      	movs	r3, #96	; 0x60
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800262e:	2300      	movs	r3, #0
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002632:	2300      	movs	r3, #0
 8002634:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002636:	2300      	movs	r3, #0
 8002638:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800263a:	2300      	movs	r3, #0
 800263c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002646:	2200      	movs	r2, #0
 8002648:	4619      	mov	r1, r3
 800264a:	4820      	ldr	r0, [pc, #128]	; (80026cc <MX_TIM1_Init+0x168>)
 800264c:	f002 ff4e 	bl	80054ec <HAL_TIM_PWM_ConfigChannel>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002656:	f000 fca9 	bl	8002fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800265a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800265e:	2204      	movs	r2, #4
 8002660:	4619      	mov	r1, r3
 8002662:	481a      	ldr	r0, [pc, #104]	; (80026cc <MX_TIM1_Init+0x168>)
 8002664:	f002 ff42 	bl	80054ec <HAL_TIM_PWM_ConfigChannel>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800266e:	f000 fc9d 	bl	8002fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002676:	2208      	movs	r2, #8
 8002678:	4619      	mov	r1, r3
 800267a:	4814      	ldr	r0, [pc, #80]	; (80026cc <MX_TIM1_Init+0x168>)
 800267c:	f002 ff36 	bl	80054ec <HAL_TIM_PWM_ConfigChannel>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8002686:	f000 fc91 	bl	8002fac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800268a:	2300      	movs	r3, #0
 800268c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800269e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026a8:	1d3b      	adds	r3, r7, #4
 80026aa:	4619      	mov	r1, r3
 80026ac:	4807      	ldr	r0, [pc, #28]	; (80026cc <MX_TIM1_Init+0x168>)
 80026ae:	f003 fc33 	bl	8005f18 <HAL_TIMEx_ConfigBreakDeadTime>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80026b8:	f000 fc78 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80026bc:	4803      	ldr	r0, [pc, #12]	; (80026cc <MX_TIM1_Init+0x168>)
 80026be:	f000 fe05 	bl	80032cc <HAL_TIM_MspPostInit>

}
 80026c2:	bf00      	nop
 80026c4:	3758      	adds	r7, #88	; 0x58
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000c9c 	.word	0x20000c9c
 80026d0:	40010000 	.word	0x40010000

080026d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08e      	sub	sp, #56	; 0x38
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026e8:	f107 0320 	add.w	r3, r7, #32
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026f2:	1d3b      	adds	r3, r7, #4
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	611a      	str	r2, [r3, #16]
 8002700:	615a      	str	r2, [r3, #20]
 8002702:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002704:	4b38      	ldr	r3, [pc, #224]	; (80027e8 <MX_TIM2_Init+0x114>)
 8002706:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800270a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 500-1;
 800270c:	4b36      	ldr	r3, [pc, #216]	; (80027e8 <MX_TIM2_Init+0x114>)
 800270e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002712:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002714:	4b34      	ldr	r3, [pc, #208]	; (80027e8 <MX_TIM2_Init+0x114>)
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 800271a:	4b33      	ldr	r3, [pc, #204]	; (80027e8 <MX_TIM2_Init+0x114>)
 800271c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002720:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002722:	4b31      	ldr	r3, [pc, #196]	; (80027e8 <MX_TIM2_Init+0x114>)
 8002724:	2200      	movs	r2, #0
 8002726:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002728:	4b2f      	ldr	r3, [pc, #188]	; (80027e8 <MX_TIM2_Init+0x114>)
 800272a:	2200      	movs	r2, #0
 800272c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800272e:	482e      	ldr	r0, [pc, #184]	; (80027e8 <MX_TIM2_Init+0x114>)
 8002730:	f002 fd02 	bl	8005138 <HAL_TIM_Base_Init>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800273a:	f000 fc37 	bl	8002fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800273e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002742:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002744:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002748:	4619      	mov	r1, r3
 800274a:	4827      	ldr	r0, [pc, #156]	; (80027e8 <MX_TIM2_Init+0x114>)
 800274c:	f002 ff90 	bl	8005670 <HAL_TIM_ConfigClockSource>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002756:	f000 fc29 	bl	8002fac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800275a:	4823      	ldr	r0, [pc, #140]	; (80027e8 <MX_TIM2_Init+0x114>)
 800275c:	f002 fda4 	bl	80052a8 <HAL_TIM_PWM_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002766:	f000 fc21 	bl	8002fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800276a:	2300      	movs	r3, #0
 800276c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800276e:	2300      	movs	r3, #0
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002772:	f107 0320 	add.w	r3, r7, #32
 8002776:	4619      	mov	r1, r3
 8002778:	481b      	ldr	r0, [pc, #108]	; (80027e8 <MX_TIM2_Init+0x114>)
 800277a:	f003 fb51 	bl	8005e20 <HAL_TIMEx_MasterConfigSynchronization>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002784:	f000 fc12 	bl	8002fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002788:	2360      	movs	r3, #96	; 0x60
 800278a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	2200      	movs	r2, #0
 800279c:	4619      	mov	r1, r3
 800279e:	4812      	ldr	r0, [pc, #72]	; (80027e8 <MX_TIM2_Init+0x114>)
 80027a0:	f002 fea4 	bl	80054ec <HAL_TIM_PWM_ConfigChannel>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80027aa:	f000 fbff 	bl	8002fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027ae:	1d3b      	adds	r3, r7, #4
 80027b0:	2204      	movs	r2, #4
 80027b2:	4619      	mov	r1, r3
 80027b4:	480c      	ldr	r0, [pc, #48]	; (80027e8 <MX_TIM2_Init+0x114>)
 80027b6:	f002 fe99 	bl	80054ec <HAL_TIM_PWM_ConfigChannel>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80027c0:	f000 fbf4 	bl	8002fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80027c4:	1d3b      	adds	r3, r7, #4
 80027c6:	2208      	movs	r2, #8
 80027c8:	4619      	mov	r1, r3
 80027ca:	4807      	ldr	r0, [pc, #28]	; (80027e8 <MX_TIM2_Init+0x114>)
 80027cc:	f002 fe8e 	bl	80054ec <HAL_TIM_PWM_ConfigChannel>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80027d6:	f000 fbe9 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80027da:	4803      	ldr	r0, [pc, #12]	; (80027e8 <MX_TIM2_Init+0x114>)
 80027dc:	f000 fd76 	bl	80032cc <HAL_TIM_MspPostInit>

}
 80027e0:	bf00      	nop
 80027e2:	3738      	adds	r7, #56	; 0x38
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000d70 	.word	0x20000d70

080027ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08e      	sub	sp, #56	; 0x38
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	605a      	str	r2, [r3, #4]
 80027fc:	609a      	str	r2, [r3, #8]
 80027fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002800:	f107 0320 	add.w	r3, r7, #32
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	611a      	str	r2, [r3, #16]
 8002818:	615a      	str	r2, [r3, #20]
 800281a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800281c:	4b38      	ldr	r3, [pc, #224]	; (8002900 <MX_TIM3_Init+0x114>)
 800281e:	4a39      	ldr	r2, [pc, #228]	; (8002904 <MX_TIM3_Init+0x118>)
 8002820:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 8002822:	4b37      	ldr	r3, [pc, #220]	; (8002900 <MX_TIM3_Init+0x114>)
 8002824:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002828:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800282a:	4b35      	ldr	r3, [pc, #212]	; (8002900 <MX_TIM3_Init+0x114>)
 800282c:	2200      	movs	r2, #0
 800282e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8002830:	4b33      	ldr	r3, [pc, #204]	; (8002900 <MX_TIM3_Init+0x114>)
 8002832:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002836:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002838:	4b31      	ldr	r3, [pc, #196]	; (8002900 <MX_TIM3_Init+0x114>)
 800283a:	2200      	movs	r2, #0
 800283c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800283e:	4b30      	ldr	r3, [pc, #192]	; (8002900 <MX_TIM3_Init+0x114>)
 8002840:	2200      	movs	r2, #0
 8002842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002844:	482e      	ldr	r0, [pc, #184]	; (8002900 <MX_TIM3_Init+0x114>)
 8002846:	f002 fc77 	bl	8005138 <HAL_TIM_Base_Init>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002850:	f000 fbac 	bl	8002fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002858:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800285a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800285e:	4619      	mov	r1, r3
 8002860:	4827      	ldr	r0, [pc, #156]	; (8002900 <MX_TIM3_Init+0x114>)
 8002862:	f002 ff05 	bl	8005670 <HAL_TIM_ConfigClockSource>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800286c:	f000 fb9e 	bl	8002fac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002870:	4823      	ldr	r0, [pc, #140]	; (8002900 <MX_TIM3_Init+0x114>)
 8002872:	f002 fd19 	bl	80052a8 <HAL_TIM_PWM_Init>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800287c:	f000 fb96 	bl	8002fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002880:	2300      	movs	r3, #0
 8002882:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002884:	2300      	movs	r3, #0
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002888:	f107 0320 	add.w	r3, r7, #32
 800288c:	4619      	mov	r1, r3
 800288e:	481c      	ldr	r0, [pc, #112]	; (8002900 <MX_TIM3_Init+0x114>)
 8002890:	f003 fac6 	bl	8005e20 <HAL_TIMEx_MasterConfigSynchronization>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800289a:	f000 fb87 	bl	8002fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800289e:	2360      	movs	r3, #96	; 0x60
 80028a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	2204      	movs	r2, #4
 80028b2:	4619      	mov	r1, r3
 80028b4:	4812      	ldr	r0, [pc, #72]	; (8002900 <MX_TIM3_Init+0x114>)
 80028b6:	f002 fe19 	bl	80054ec <HAL_TIM_PWM_ConfigChannel>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80028c0:	f000 fb74 	bl	8002fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028c4:	1d3b      	adds	r3, r7, #4
 80028c6:	2208      	movs	r2, #8
 80028c8:	4619      	mov	r1, r3
 80028ca:	480d      	ldr	r0, [pc, #52]	; (8002900 <MX_TIM3_Init+0x114>)
 80028cc:	f002 fe0e 	bl	80054ec <HAL_TIM_PWM_ConfigChannel>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80028d6:	f000 fb69 	bl	8002fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028da:	1d3b      	adds	r3, r7, #4
 80028dc:	220c      	movs	r2, #12
 80028de:	4619      	mov	r1, r3
 80028e0:	4807      	ldr	r0, [pc, #28]	; (8002900 <MX_TIM3_Init+0x114>)
 80028e2:	f002 fe03 	bl	80054ec <HAL_TIM_PWM_ConfigChannel>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80028ec:	f000 fb5e 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80028f0:	4803      	ldr	r0, [pc, #12]	; (8002900 <MX_TIM3_Init+0x114>)
 80028f2:	f000 fceb 	bl	80032cc <HAL_TIM_MspPostInit>

}
 80028f6:	bf00      	nop
 80028f8:	3738      	adds	r7, #56	; 0x38
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000b7c 	.word	0x20000b7c
 8002904:	40000400 	.word	0x40000400

08002908 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08e      	sub	sp, #56	; 0x38
 800290c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800290e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	605a      	str	r2, [r3, #4]
 8002918:	609a      	str	r2, [r3, #8]
 800291a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800291c:	f107 0320 	add.w	r3, r7, #32
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002926:	1d3b      	adds	r3, r7, #4
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
 8002934:	615a      	str	r2, [r3, #20]
 8002936:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002938:	4b2c      	ldr	r3, [pc, #176]	; (80029ec <MX_TIM4_Init+0xe4>)
 800293a:	4a2d      	ldr	r2, [pc, #180]	; (80029f0 <MX_TIM4_Init+0xe8>)
 800293c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 800293e:	4b2b      	ldr	r3, [pc, #172]	; (80029ec <MX_TIM4_Init+0xe4>)
 8002940:	225f      	movs	r2, #95	; 0x5f
 8002942:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002944:	4b29      	ldr	r3, [pc, #164]	; (80029ec <MX_TIM4_Init+0xe4>)
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20;
 800294a:	4b28      	ldr	r3, [pc, #160]	; (80029ec <MX_TIM4_Init+0xe4>)
 800294c:	2214      	movs	r2, #20
 800294e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002950:	4b26      	ldr	r3, [pc, #152]	; (80029ec <MX_TIM4_Init+0xe4>)
 8002952:	2200      	movs	r2, #0
 8002954:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002956:	4b25      	ldr	r3, [pc, #148]	; (80029ec <MX_TIM4_Init+0xe4>)
 8002958:	2200      	movs	r2, #0
 800295a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800295c:	4823      	ldr	r0, [pc, #140]	; (80029ec <MX_TIM4_Init+0xe4>)
 800295e:	f002 fbeb 	bl	8005138 <HAL_TIM_Base_Init>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002968:	f000 fb20 	bl	8002fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800296c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002972:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002976:	4619      	mov	r1, r3
 8002978:	481c      	ldr	r0, [pc, #112]	; (80029ec <MX_TIM4_Init+0xe4>)
 800297a:	f002 fe79 	bl	8005670 <HAL_TIM_ConfigClockSource>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002984:	f000 fb12 	bl	8002fac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002988:	4818      	ldr	r0, [pc, #96]	; (80029ec <MX_TIM4_Init+0xe4>)
 800298a:	f002 fc8d 	bl	80052a8 <HAL_TIM_PWM_Init>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002994:	f000 fb0a 	bl	8002fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002998:	2300      	movs	r3, #0
 800299a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800299c:	2300      	movs	r3, #0
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029a0:	f107 0320 	add.w	r3, r7, #32
 80029a4:	4619      	mov	r1, r3
 80029a6:	4811      	ldr	r0, [pc, #68]	; (80029ec <MX_TIM4_Init+0xe4>)
 80029a8:	f003 fa3a 	bl	8005e20 <HAL_TIMEx_MasterConfigSynchronization>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80029b2:	f000 fafb 	bl	8002fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029b6:	2360      	movs	r3, #96	; 0x60
 80029b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029c6:	1d3b      	adds	r3, r7, #4
 80029c8:	2200      	movs	r2, #0
 80029ca:	4619      	mov	r1, r3
 80029cc:	4807      	ldr	r0, [pc, #28]	; (80029ec <MX_TIM4_Init+0xe4>)
 80029ce:	f002 fd8d 	bl	80054ec <HAL_TIM_PWM_ConfigChannel>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80029d8:	f000 fae8 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80029dc:	4803      	ldr	r0, [pc, #12]	; (80029ec <MX_TIM4_Init+0xe4>)
 80029de:	f000 fc75 	bl	80032cc <HAL_TIM_MspPostInit>

}
 80029e2:	bf00      	nop
 80029e4:	3738      	adds	r7, #56	; 0x38
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000a58 	.word	0x20000a58
 80029f0:	40000800 	.word	0x40000800

080029f4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029fa:	f107 0308 	add.w	r3, r7, #8
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	609a      	str	r2, [r3, #8]
 8002a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a08:	463b      	mov	r3, r7
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002a10:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <MX_TIM5_Init+0x94>)
 8002a12:	4a1e      	ldr	r2, [pc, #120]	; (8002a8c <MX_TIM5_Init+0x98>)
 8002a14:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 96-1;
 8002a16:	4b1c      	ldr	r3, [pc, #112]	; (8002a88 <MX_TIM5_Init+0x94>)
 8002a18:	225f      	movs	r2, #95	; 0x5f
 8002a1a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a1c:	4b1a      	ldr	r3, [pc, #104]	; (8002a88 <MX_TIM5_Init+0x94>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 8002a22:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <MX_TIM5_Init+0x94>)
 8002a24:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002a28:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a2a:	4b17      	ldr	r3, [pc, #92]	; (8002a88 <MX_TIM5_Init+0x94>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a30:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <MX_TIM5_Init+0x94>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002a36:	4814      	ldr	r0, [pc, #80]	; (8002a88 <MX_TIM5_Init+0x94>)
 8002a38:	f002 fb7e 	bl	8005138 <HAL_TIM_Base_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002a42:	f000 fab3 	bl	8002fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002a4c:	f107 0308 	add.w	r3, r7, #8
 8002a50:	4619      	mov	r1, r3
 8002a52:	480d      	ldr	r0, [pc, #52]	; (8002a88 <MX_TIM5_Init+0x94>)
 8002a54:	f002 fe0c 	bl	8005670 <HAL_TIM_ConfigClockSource>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002a5e:	f000 faa5 	bl	8002fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a62:	2300      	movs	r3, #0
 8002a64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a6a:	463b      	mov	r3, r7
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4806      	ldr	r0, [pc, #24]	; (8002a88 <MX_TIM5_Init+0x94>)
 8002a70:	f003 f9d6 	bl	8005e20 <HAL_TIMEx_MasterConfigSynchronization>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002a7a:	f000 fa97 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002a7e:	bf00      	nop
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000b34 	.word	0x20000b34
 8002a8c:	40000c00 	.word	0x40000c00

08002a90 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a96:	463b      	mov	r3, r7
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002a9e:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <MX_TIM6_Init+0x64>)
 8002aa0:	4a15      	ldr	r2, [pc, #84]	; (8002af8 <MX_TIM6_Init+0x68>)
 8002aa2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8002aa4:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <MX_TIM6_Init+0x64>)
 8002aa6:	2231      	movs	r2, #49	; 0x31
 8002aa8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aaa:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <MX_TIM6_Init+0x64>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8002ab0:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <MX_TIM6_Init+0x64>)
 8002ab2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002ab6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab8:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <MX_TIM6_Init+0x64>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002abe:	480d      	ldr	r0, [pc, #52]	; (8002af4 <MX_TIM6_Init+0x64>)
 8002ac0:	f002 fb3a 	bl	8005138 <HAL_TIM_Base_Init>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002aca:	f000 fa6f 	bl	8002fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002ad6:	463b      	mov	r3, r7
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4806      	ldr	r0, [pc, #24]	; (8002af4 <MX_TIM6_Init+0x64>)
 8002adc:	f003 f9a0 	bl	8005e20 <HAL_TIMEx_MasterConfigSynchronization>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002ae6:	f000 fa61 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000c54 	.word	0x20000c54
 8002af8:	40001000 	.word	0x40001000

08002afc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b02:	f107 0308 	add.w	r3, r7, #8
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	605a      	str	r2, [r3, #4]
 8002b0c:	609a      	str	r2, [r3, #8]
 8002b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b10:	463b      	mov	r3, r7
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002b18:	4b1e      	ldr	r3, [pc, #120]	; (8002b94 <MX_TIM8_Init+0x98>)
 8002b1a:	4a1f      	ldr	r2, [pc, #124]	; (8002b98 <MX_TIM8_Init+0x9c>)
 8002b1c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002b1e:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <MX_TIM8_Init+0x98>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b24:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <MX_TIM8_Init+0x98>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002b2a:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <MX_TIM8_Init+0x98>)
 8002b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b30:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b32:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <MX_TIM8_Init+0x98>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002b38:	4b16      	ldr	r3, [pc, #88]	; (8002b94 <MX_TIM8_Init+0x98>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b3e:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <MX_TIM8_Init+0x98>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002b44:	4813      	ldr	r0, [pc, #76]	; (8002b94 <MX_TIM8_Init+0x98>)
 8002b46:	f002 faf7 	bl	8005138 <HAL_TIM_Base_Init>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8002b50:	f000 fa2c 	bl	8002fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002b5a:	f107 0308 	add.w	r3, r7, #8
 8002b5e:	4619      	mov	r1, r3
 8002b60:	480c      	ldr	r0, [pc, #48]	; (8002b94 <MX_TIM8_Init+0x98>)
 8002b62:	f002 fd85 	bl	8005670 <HAL_TIM_ConfigClockSource>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8002b6c:	f000 fa1e 	bl	8002fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b70:	2300      	movs	r3, #0
 8002b72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002b78:	463b      	mov	r3, r7
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4805      	ldr	r0, [pc, #20]	; (8002b94 <MX_TIM8_Init+0x98>)
 8002b7e:	f003 f94f 	bl	8005e20 <HAL_TIMEx_MasterConfigSynchronization>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8002b88:	f000 fa10 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002b8c:	bf00      	nop
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20000a10 	.word	0x20000a10
 8002b98:	40010400 	.word	0x40010400

08002b9c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08c      	sub	sp, #48	; 0x30
 8002ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ba2:	f107 0320 	add.w	r3, r7, #32
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	605a      	str	r2, [r3, #4]
 8002bac:	609a      	str	r2, [r3, #8]
 8002bae:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bb0:	1d3b      	adds	r3, r7, #4
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	605a      	str	r2, [r3, #4]
 8002bb8:	609a      	str	r2, [r3, #8]
 8002bba:	60da      	str	r2, [r3, #12]
 8002bbc:	611a      	str	r2, [r3, #16]
 8002bbe:	615a      	str	r2, [r3, #20]
 8002bc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002bc2:	4b26      	ldr	r3, [pc, #152]	; (8002c5c <MX_TIM9_Init+0xc0>)
 8002bc4:	4a26      	ldr	r2, [pc, #152]	; (8002c60 <MX_TIM9_Init+0xc4>)
 8002bc6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 500-1;
 8002bc8:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <MX_TIM9_Init+0xc0>)
 8002bca:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002bce:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bd0:	4b22      	ldr	r3, [pc, #136]	; (8002c5c <MX_TIM9_Init+0xc0>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2000-1;
 8002bd6:	4b21      	ldr	r3, [pc, #132]	; (8002c5c <MX_TIM9_Init+0xc0>)
 8002bd8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002bdc:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bde:	4b1f      	ldr	r3, [pc, #124]	; (8002c5c <MX_TIM9_Init+0xc0>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002be4:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <MX_TIM9_Init+0xc0>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002bea:	481c      	ldr	r0, [pc, #112]	; (8002c5c <MX_TIM9_Init+0xc0>)
 8002bec:	f002 faa4 	bl	8005138 <HAL_TIM_Base_Init>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 8002bf6:	f000 f9d9 	bl	8002fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bfe:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002c00:	f107 0320 	add.w	r3, r7, #32
 8002c04:	4619      	mov	r1, r3
 8002c06:	4815      	ldr	r0, [pc, #84]	; (8002c5c <MX_TIM9_Init+0xc0>)
 8002c08:	f002 fd32 	bl	8005670 <HAL_TIM_ConfigClockSource>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 8002c12:	f000 f9cb 	bl	8002fac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002c16:	4811      	ldr	r0, [pc, #68]	; (8002c5c <MX_TIM9_Init+0xc0>)
 8002c18:	f002 fb46 	bl	80052a8 <HAL_TIM_PWM_Init>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8002c22:	f000 f9c3 	bl	8002fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c26:	2360      	movs	r3, #96	; 0x60
 8002c28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c36:	1d3b      	adds	r3, r7, #4
 8002c38:	2200      	movs	r2, #0
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4807      	ldr	r0, [pc, #28]	; (8002c5c <MX_TIM9_Init+0xc0>)
 8002c3e:	f002 fc55 	bl	80054ec <HAL_TIM_PWM_ConfigChannel>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8002c48:	f000 f9b0 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002c4c:	4803      	ldr	r0, [pc, #12]	; (8002c5c <MX_TIM9_Init+0xc0>)
 8002c4e:	f000 fb3d 	bl	80032cc <HAL_TIM_MspPostInit>

}
 8002c52:	bf00      	nop
 8002c54:	3730      	adds	r7, #48	; 0x30
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000ce4 	.word	0x20000ce4
 8002c60:	40014000 	.word	0x40014000

08002c64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c68:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <MX_USART2_UART_Init+0x4c>)
 8002c6a:	4a12      	ldr	r2, [pc, #72]	; (8002cb4 <MX_USART2_UART_Init+0x50>)
 8002c6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c6e:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <MX_USART2_UART_Init+0x4c>)
 8002c70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c76:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <MX_USART2_UART_Init+0x4c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <MX_USART2_UART_Init+0x4c>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c82:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <MX_USART2_UART_Init+0x4c>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c88:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <MX_USART2_UART_Init+0x4c>)
 8002c8a:	220c      	movs	r2, #12
 8002c8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c8e:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <MX_USART2_UART_Init+0x4c>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c94:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <MX_USART2_UART_Init+0x4c>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c9a:	4805      	ldr	r0, [pc, #20]	; (8002cb0 <MX_USART2_UART_Init+0x4c>)
 8002c9c:	f003 f98e 	bl	8005fbc <HAL_UART_Init>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002ca6:	f000 f981 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000db8 	.word	0x20000db8
 8002cb4:	40004400 	.word	0x40004400

08002cb8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002cbc:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <MX_USART3_UART_Init+0x4c>)
 8002cbe:	4a12      	ldr	r2, [pc, #72]	; (8002d08 <MX_USART3_UART_Init+0x50>)
 8002cc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <MX_USART3_UART_Init+0x4c>)
 8002cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <MX_USART3_UART_Init+0x4c>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <MX_USART3_UART_Init+0x4c>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002cd6:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <MX_USART3_UART_Init+0x4c>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002cdc:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <MX_USART3_UART_Init+0x4c>)
 8002cde:	220c      	movs	r2, #12
 8002ce0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <MX_USART3_UART_Init+0x4c>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <MX_USART3_UART_Init+0x4c>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002cee:	4805      	ldr	r0, [pc, #20]	; (8002d04 <MX_USART3_UART_Init+0x4c>)
 8002cf0:	f003 f964 	bl	8005fbc <HAL_UART_Init>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002cfa:	f000 f957 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000aa0 	.word	0x20000aa0
 8002d08:	40004800 	.word	0x40004800

08002d0c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002d10:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d12:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <MX_USART6_UART_Init+0x50>)
 8002d14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002d16:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002d30:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d32:	220c      	movs	r2, #12
 8002d34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d36:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002d42:	4805      	ldr	r0, [pc, #20]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d44:	f003 f93a 	bl	8005fbc <HAL_UART_Init>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002d4e:	f000 f92d 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000d2c 	.word	0x20000d2c
 8002d5c:	40011400 	.word	0x40011400

08002d60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08c      	sub	sp, #48	; 0x30
 8002d64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d66:	f107 031c 	add.w	r3, r7, #28
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	605a      	str	r2, [r3, #4]
 8002d70:	609a      	str	r2, [r3, #8]
 8002d72:	60da      	str	r2, [r3, #12]
 8002d74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	61bb      	str	r3, [r7, #24]
 8002d7a:	4b86      	ldr	r3, [pc, #536]	; (8002f94 <MX_GPIO_Init+0x234>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	4a85      	ldr	r2, [pc, #532]	; (8002f94 <MX_GPIO_Init+0x234>)
 8002d80:	f043 0310 	orr.w	r3, r3, #16
 8002d84:	6313      	str	r3, [r2, #48]	; 0x30
 8002d86:	4b83      	ldr	r3, [pc, #524]	; (8002f94 <MX_GPIO_Init+0x234>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f003 0310 	and.w	r3, r3, #16
 8002d8e:	61bb      	str	r3, [r7, #24]
 8002d90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	4b7f      	ldr	r3, [pc, #508]	; (8002f94 <MX_GPIO_Init+0x234>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	4a7e      	ldr	r2, [pc, #504]	; (8002f94 <MX_GPIO_Init+0x234>)
 8002d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002da0:	6313      	str	r3, [r2, #48]	; 0x30
 8002da2:	4b7c      	ldr	r3, [pc, #496]	; (8002f94 <MX_GPIO_Init+0x234>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	4b78      	ldr	r3, [pc, #480]	; (8002f94 <MX_GPIO_Init+0x234>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4a77      	ldr	r2, [pc, #476]	; (8002f94 <MX_GPIO_Init+0x234>)
 8002db8:	f043 0304 	orr.w	r3, r3, #4
 8002dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbe:	4b75      	ldr	r3, [pc, #468]	; (8002f94 <MX_GPIO_Init+0x234>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	4b71      	ldr	r3, [pc, #452]	; (8002f94 <MX_GPIO_Init+0x234>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	4a70      	ldr	r2, [pc, #448]	; (8002f94 <MX_GPIO_Init+0x234>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dda:	4b6e      	ldr	r3, [pc, #440]	; (8002f94 <MX_GPIO_Init+0x234>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	4b6a      	ldr	r3, [pc, #424]	; (8002f94 <MX_GPIO_Init+0x234>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	4a69      	ldr	r2, [pc, #420]	; (8002f94 <MX_GPIO_Init+0x234>)
 8002df0:	f043 0302 	orr.w	r3, r3, #2
 8002df4:	6313      	str	r3, [r2, #48]	; 0x30
 8002df6:	4b67      	ldr	r3, [pc, #412]	; (8002f94 <MX_GPIO_Init+0x234>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	607b      	str	r3, [r7, #4]
 8002e06:	4b63      	ldr	r3, [pc, #396]	; (8002f94 <MX_GPIO_Init+0x234>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	4a62      	ldr	r2, [pc, #392]	; (8002f94 <MX_GPIO_Init+0x234>)
 8002e0c:	f043 0308 	orr.w	r3, r3, #8
 8002e10:	6313      	str	r3, [r2, #48]	; 0x30
 8002e12:	4b60      	ldr	r3, [pc, #384]	; (8002f94 <MX_GPIO_Init+0x234>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	607b      	str	r3, [r7, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WiFi_OK_Pin|DC_Salon_1_Pin|DC_Salon_2_Pin|L_Cocina_Pin
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f641 4131 	movw	r1, #7217	; 0x1c31
 8002e24:	485c      	ldr	r0, [pc, #368]	; (8002f98 <MX_GPIO_Init+0x238>)
 8002e26:	f001 fce1 	bl	80047ec <HAL_GPIO_WritePin>
                          |L_Garaje_Pin|L_Tendedero_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DHT22_Pin|DHT11_Pin, GPIO_PIN_RESET);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8002e30:	485a      	ldr	r0, [pc, #360]	; (8002f9c <MX_GPIO_Init+0x23c>)
 8002e32:	f001 fcdb 	bl	80047ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Riego_Pin|Peltier_Pin|L_Espejo_Pin|L_Izquierda_Pin
 8002e36:	2200      	movs	r2, #0
 8002e38:	f24a 01f8 	movw	r1, #41208	; 0xa0f8
 8002e3c:	4858      	ldr	r0, [pc, #352]	; (8002fa0 <MX_GPIO_Init+0x240>)
 8002e3e:	f001 fcd5 	bl	80047ec <HAL_GPIO_WritePin>
                          |L_Oficina_Pin|L_Derecha_Pin|L_TV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L_Fregadero_GPIO_Port, L_Fregadero_Pin, GPIO_PIN_RESET);
 8002e42:	2200      	movs	r2, #0
 8002e44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e48:	4856      	ldr	r0, [pc, #344]	; (8002fa4 <MX_GPIO_Init+0x244>)
 8002e4a:	f001 fccf 	bl	80047ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, L_Recibidor_Pin|L_Comedor_Pin|L_Jardin_Pin|L_Sala_Pin
 8002e4e:	2200      	movs	r2, #0
 8002e50:	21ff      	movs	r1, #255	; 0xff
 8002e52:	4855      	ldr	r0, [pc, #340]	; (8002fa8 <MX_GPIO_Init+0x248>)
 8002e54:	f001 fcca 	bl	80047ec <HAL_GPIO_WritePin>
                          |L_Porche_Pin|L_Ambiente_Pin|L_Bano_Pin|L_Dormitorio_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : B_Stop_Pin Fin_Garaje_Pin */
  GPIO_InitStruct.Pin = B_Stop_Pin|Fin_Garaje_Pin;
 8002e58:	2344      	movs	r3, #68	; 0x44
 8002e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e5c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e66:	f107 031c 	add.w	r3, r7, #28
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	484b      	ldr	r0, [pc, #300]	; (8002f9c <MX_GPIO_Init+0x23c>)
 8002e6e:	f001 fb09 	bl	8004484 <HAL_GPIO_Init>

  /*Configure GPIO pins : S_Int_Pin Fin_Parcela_Pin S_Ext_Pin */
  GPIO_InitStruct.Pin = S_Int_Pin|Fin_Parcela_Pin|S_Ext_Pin;
 8002e72:	231a      	movs	r3, #26
 8002e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e76:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e80:	f107 031c 	add.w	r3, r7, #28
 8002e84:	4619      	mov	r1, r3
 8002e86:	4845      	ldr	r0, [pc, #276]	; (8002f9c <MX_GPIO_Init+0x23c>)
 8002e88:	f001 fafc 	bl	8004484 <HAL_GPIO_Init>

  /*Configure GPIO pins : WiFi_OK_Pin DC_Salon_1_Pin DC_Salon_2_Pin L_Cocina_Pin
                           L_Garaje_Pin L_Tendedero_Pin */
  GPIO_InitStruct.Pin = WiFi_OK_Pin|DC_Salon_1_Pin|DC_Salon_2_Pin|L_Cocina_Pin
 8002e8c:	f641 4331 	movw	r3, #7217	; 0x1c31
 8002e90:	61fb      	str	r3, [r7, #28]
                          |L_Garaje_Pin|L_Tendedero_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e92:	2301      	movs	r3, #1
 8002e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e9e:	f107 031c 	add.w	r3, r7, #28
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	483c      	ldr	r0, [pc, #240]	; (8002f98 <MX_GPIO_Init+0x238>)
 8002ea6:	f001 faed 	bl	8004484 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT22_Pin DHT11_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin|DHT11_Pin;
 8002eaa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ebc:	f107 031c 	add.w	r3, r7, #28
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4836      	ldr	r0, [pc, #216]	; (8002f9c <MX_GPIO_Init+0x23c>)
 8002ec4:	f001 fade 	bl	8004484 <HAL_GPIO_Init>

  /*Configure GPIO pins : Riego_Pin Peltier_Pin L_Espejo_Pin L_Izquierda_Pin
                           L_Oficina_Pin L_Derecha_Pin L_TV_Pin */
  GPIO_InitStruct.Pin = Riego_Pin|Peltier_Pin|L_Espejo_Pin|L_Izquierda_Pin
 8002ec8:	f24a 03f8 	movw	r3, #41208	; 0xa0f8
 8002ecc:	61fb      	str	r3, [r7, #28]
                          |L_Oficina_Pin|L_Derecha_Pin|L_TV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eda:	f107 031c 	add.w	r3, r7, #28
 8002ede:	4619      	mov	r1, r3
 8002ee0:	482f      	ldr	r0, [pc, #188]	; (8002fa0 <MX_GPIO_Init+0x240>)
 8002ee2:	f001 facf 	bl	8004484 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_Fregadero_Pin */
  GPIO_InitStruct.Pin = L_Fregadero_Pin;
 8002ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eec:	2301      	movs	r3, #1
 8002eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(L_Fregadero_GPIO_Port, &GPIO_InitStruct);
 8002ef8:	f107 031c 	add.w	r3, r7, #28
 8002efc:	4619      	mov	r1, r3
 8002efe:	4829      	ldr	r0, [pc, #164]	; (8002fa4 <MX_GPIO_Init+0x244>)
 8002f00:	f001 fac0 	bl	8004484 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_Recibidor_Pin L_Comedor_Pin L_Jardin_Pin L_Sala_Pin
                           L_Porche_Pin L_Ambiente_Pin L_Bano_Pin L_Dormitorio_Pin */
  GPIO_InitStruct.Pin = L_Recibidor_Pin|L_Comedor_Pin|L_Jardin_Pin|L_Sala_Pin
 8002f04:	23ff      	movs	r3, #255	; 0xff
 8002f06:	61fb      	str	r3, [r7, #28]
                          |L_Porche_Pin|L_Ambiente_Pin|L_Bano_Pin|L_Dormitorio_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f10:	2300      	movs	r3, #0
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f14:	f107 031c 	add.w	r3, r7, #28
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4823      	ldr	r0, [pc, #140]	; (8002fa8 <MX_GPIO_Init+0x248>)
 8002f1c:	f001 fab2 	bl	8004484 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_Timbre_Pin */
  GPIO_InitStruct.Pin = B_Timbre_Pin;
 8002f20:	2301      	movs	r3, #1
 8002f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f24:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B_Timbre_GPIO_Port, &GPIO_InitStruct);
 8002f2e:	f107 031c 	add.w	r3, r7, #28
 8002f32:	4619      	mov	r1, r3
 8002f34:	4819      	ldr	r0, [pc, #100]	; (8002f9c <MX_GPIO_Init+0x23c>)
 8002f36:	f001 faa5 	bl	8004484 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	2006      	movs	r0, #6
 8002f40:	f001 f9d7 	bl	80042f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002f44:	2006      	movs	r0, #6
 8002f46:	f001 f9f0 	bl	800432a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	2007      	movs	r0, #7
 8002f50:	f001 f9cf 	bl	80042f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002f54:	2007      	movs	r0, #7
 8002f56:	f001 f9e8 	bl	800432a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	2009      	movs	r0, #9
 8002f60:	f001 f9c7 	bl	80042f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002f64:	2009      	movs	r0, #9
 8002f66:	f001 f9e0 	bl	800432a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	200a      	movs	r0, #10
 8002f70:	f001 f9bf 	bl	80042f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002f74:	200a      	movs	r0, #10
 8002f76:	f001 f9d8 	bl	800432a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	2017      	movs	r0, #23
 8002f80:	f001 f9b7 	bl	80042f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f84:	2017      	movs	r0, #23
 8002f86:	f001 f9d0 	bl	800432a <HAL_NVIC_EnableIRQ>

}
 8002f8a:	bf00      	nop
 8002f8c:	3730      	adds	r7, #48	; 0x30
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40020800 	.word	0x40020800
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40020400 	.word	0x40020400
 8002fa4:	40020000 	.word	0x40020000
 8002fa8:	40020c00 	.word	0x40020c00

08002fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb0:	b672      	cpsid	i
}
 8002fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fb4:	e7fe      	b.n	8002fb4 <Error_Handler+0x8>
	...

08002fb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	607b      	str	r3, [r7, #4]
 8002fc2:	4b10      	ldr	r3, [pc, #64]	; (8003004 <HAL_MspInit+0x4c>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	4a0f      	ldr	r2, [pc, #60]	; (8003004 <HAL_MspInit+0x4c>)
 8002fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fce:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <HAL_MspInit+0x4c>)
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd6:	607b      	str	r3, [r7, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	4b09      	ldr	r3, [pc, #36]	; (8003004 <HAL_MspInit+0x4c>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	4a08      	ldr	r2, [pc, #32]	; (8003004 <HAL_MspInit+0x4c>)
 8002fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_MspInit+0x4c>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ff6:	2007      	movs	r0, #7
 8002ff8:	f001 f970 	bl	80042dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40023800 	.word	0x40023800

08003008 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08e      	sub	sp, #56	; 0x38
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	60da      	str	r2, [r3, #12]
 800301e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a45      	ldr	r2, [pc, #276]	; (800313c <HAL_ADC_MspInit+0x134>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d128      	bne.n	800307c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	623b      	str	r3, [r7, #32]
 800302e:	4b44      	ldr	r3, [pc, #272]	; (8003140 <HAL_ADC_MspInit+0x138>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	4a43      	ldr	r2, [pc, #268]	; (8003140 <HAL_ADC_MspInit+0x138>)
 8003034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003038:	6453      	str	r3, [r2, #68]	; 0x44
 800303a:	4b41      	ldr	r3, [pc, #260]	; (8003140 <HAL_ADC_MspInit+0x138>)
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003042:	623b      	str	r3, [r7, #32]
 8003044:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	4b3d      	ldr	r3, [pc, #244]	; (8003140 <HAL_ADC_MspInit+0x138>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	4a3c      	ldr	r2, [pc, #240]	; (8003140 <HAL_ADC_MspInit+0x138>)
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	6313      	str	r3, [r2, #48]	; 0x30
 8003056:	4b3a      	ldr	r3, [pc, #232]	; (8003140 <HAL_ADC_MspInit+0x138>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	61fb      	str	r3, [r7, #28]
 8003060:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = LDR_Pin;
 8003062:	2310      	movs	r3, #16
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003066:	2303      	movs	r3, #3
 8003068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	2300      	movs	r3, #0
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 800306e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003072:	4619      	mov	r1, r3
 8003074:	4833      	ldr	r0, [pc, #204]	; (8003144 <HAL_ADC_MspInit+0x13c>)
 8003076:	f001 fa05 	bl	8004484 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800307a:	e05a      	b.n	8003132 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a31      	ldr	r2, [pc, #196]	; (8003148 <HAL_ADC_MspInit+0x140>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d128      	bne.n	80030d8 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	61bb      	str	r3, [r7, #24]
 800308a:	4b2d      	ldr	r3, [pc, #180]	; (8003140 <HAL_ADC_MspInit+0x138>)
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	4a2c      	ldr	r2, [pc, #176]	; (8003140 <HAL_ADC_MspInit+0x138>)
 8003090:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003094:	6453      	str	r3, [r2, #68]	; 0x44
 8003096:	4b2a      	ldr	r3, [pc, #168]	; (8003140 <HAL_ADC_MspInit+0x138>)
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800309e:	61bb      	str	r3, [r7, #24]
 80030a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	4b26      	ldr	r3, [pc, #152]	; (8003140 <HAL_ADC_MspInit+0x138>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	4a25      	ldr	r2, [pc, #148]	; (8003140 <HAL_ADC_MspInit+0x138>)
 80030ac:	f043 0302 	orr.w	r3, r3, #2
 80030b0:	6313      	str	r3, [r2, #48]	; 0x30
 80030b2:	4b23      	ldr	r3, [pc, #140]	; (8003140 <HAL_ADC_MspInit+0x138>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = HW_390_Pin;
 80030be:	2301      	movs	r3, #1
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030c2:	2303      	movs	r3, #3
 80030c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HW_390_GPIO_Port, &GPIO_InitStruct);
 80030ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ce:	4619      	mov	r1, r3
 80030d0:	481e      	ldr	r0, [pc, #120]	; (800314c <HAL_ADC_MspInit+0x144>)
 80030d2:	f001 f9d7 	bl	8004484 <HAL_GPIO_Init>
}
 80030d6:	e02c      	b.n	8003132 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1c      	ldr	r2, [pc, #112]	; (8003150 <HAL_ADC_MspInit+0x148>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d127      	bne.n	8003132 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	4b16      	ldr	r3, [pc, #88]	; (8003140 <HAL_ADC_MspInit+0x138>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	4a15      	ldr	r2, [pc, #84]	; (8003140 <HAL_ADC_MspInit+0x138>)
 80030ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030f0:	6453      	str	r3, [r2, #68]	; 0x44
 80030f2:	4b13      	ldr	r3, [pc, #76]	; (8003140 <HAL_ADC_MspInit+0x138>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <HAL_ADC_MspInit+0x138>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	4a0e      	ldr	r2, [pc, #56]	; (8003140 <HAL_ADC_MspInit+0x138>)
 8003108:	f043 0304 	orr.w	r3, r3, #4
 800310c:	6313      	str	r3, [r2, #48]	; 0x30
 800310e:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <HAL_ADC_MspInit+0x138>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Lluvia_Pin;
 800311a:	2302      	movs	r3, #2
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800311e:	2303      	movs	r3, #3
 8003120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003122:	2300      	movs	r3, #0
 8003124:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Lluvia_GPIO_Port, &GPIO_InitStruct);
 8003126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800312a:	4619      	mov	r1, r3
 800312c:	4809      	ldr	r0, [pc, #36]	; (8003154 <HAL_ADC_MspInit+0x14c>)
 800312e:	f001 f9a9 	bl	8004484 <HAL_GPIO_Init>
}
 8003132:	bf00      	nop
 8003134:	3738      	adds	r7, #56	; 0x38
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40012000 	.word	0x40012000
 8003140:	40023800 	.word	0x40023800
 8003144:	40020000 	.word	0x40020000
 8003148:	40012100 	.word	0x40012100
 800314c:	40020400 	.word	0x40020400
 8003150:	40012200 	.word	0x40012200
 8003154:	40020800 	.word	0x40020800

08003158 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003158:	b480      	push	{r7}
 800315a:	b08b      	sub	sp, #44	; 0x2c
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a51      	ldr	r2, [pc, #324]	; (80032ac <HAL_TIM_Base_MspInit+0x154>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d10e      	bne.n	8003188 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
 800316e:	4b50      	ldr	r3, [pc, #320]	; (80032b0 <HAL_TIM_Base_MspInit+0x158>)
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	4a4f      	ldr	r2, [pc, #316]	; (80032b0 <HAL_TIM_Base_MspInit+0x158>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	6453      	str	r3, [r2, #68]	; 0x44
 800317a:	4b4d      	ldr	r3, [pc, #308]	; (80032b0 <HAL_TIM_Base_MspInit+0x158>)
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003186:	e08a      	b.n	800329e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003190:	d10e      	bne.n	80031b0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	623b      	str	r3, [r7, #32]
 8003196:	4b46      	ldr	r3, [pc, #280]	; (80032b0 <HAL_TIM_Base_MspInit+0x158>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	4a45      	ldr	r2, [pc, #276]	; (80032b0 <HAL_TIM_Base_MspInit+0x158>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	6413      	str	r3, [r2, #64]	; 0x40
 80031a2:	4b43      	ldr	r3, [pc, #268]	; (80032b0 <HAL_TIM_Base_MspInit+0x158>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	623b      	str	r3, [r7, #32]
 80031ac:	6a3b      	ldr	r3, [r7, #32]
}
 80031ae:	e076      	b.n	800329e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM3)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a3f      	ldr	r2, [pc, #252]	; (80032b4 <HAL_TIM_Base_MspInit+0x15c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d10e      	bne.n	80031d8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	4b3c      	ldr	r3, [pc, #240]	; (80032b0 <HAL_TIM_Base_MspInit+0x158>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	4a3b      	ldr	r2, [pc, #236]	; (80032b0 <HAL_TIM_Base_MspInit+0x158>)
 80031c4:	f043 0302 	orr.w	r3, r3, #2
 80031c8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ca:	4b39      	ldr	r3, [pc, #228]	; (80032b0 <HAL_TIM_Base_MspInit+0x158>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	61fb      	str	r3, [r7, #28]
 80031d4:	69fb      	ldr	r3, [r7, #28]
}
 80031d6:	e062      	b.n	800329e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM4)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a36      	ldr	r2, [pc, #216]	; (80032b8 <HAL_TIM_Base_MspInit+0x160>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d10e      	bne.n	8003200 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	61bb      	str	r3, [r7, #24]
 80031e6:	4b32      	ldr	r3, [pc, #200]	; (80032b0 <HAL_TIM_Base_MspInit+0x158>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	4a31      	ldr	r2, [pc, #196]	; (80032b0 <HAL_TIM_Base_MspInit+0x158>)
 80031ec:	f043 0304 	orr.w	r3, r3, #4
 80031f0:	6413      	str	r3, [r2, #64]	; 0x40
 80031f2:	4b2f      	ldr	r3, [pc, #188]	; (80032b0 <HAL_TIM_Base_MspInit+0x158>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	61bb      	str	r3, [r7, #24]
 80031fc:	69bb      	ldr	r3, [r7, #24]
}
 80031fe:	e04e      	b.n	800329e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM5)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a2d      	ldr	r2, [pc, #180]	; (80032bc <HAL_TIM_Base_MspInit+0x164>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d10e      	bne.n	8003228 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	4b28      	ldr	r3, [pc, #160]	; (80032b0 <HAL_TIM_Base_MspInit+0x158>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	4a27      	ldr	r2, [pc, #156]	; (80032b0 <HAL_TIM_Base_MspInit+0x158>)
 8003214:	f043 0308 	orr.w	r3, r3, #8
 8003218:	6413      	str	r3, [r2, #64]	; 0x40
 800321a:	4b25      	ldr	r3, [pc, #148]	; (80032b0 <HAL_TIM_Base_MspInit+0x158>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	697b      	ldr	r3, [r7, #20]
}
 8003226:	e03a      	b.n	800329e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM6)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a24      	ldr	r2, [pc, #144]	; (80032c0 <HAL_TIM_Base_MspInit+0x168>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d10e      	bne.n	8003250 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	4b1e      	ldr	r3, [pc, #120]	; (80032b0 <HAL_TIM_Base_MspInit+0x158>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	4a1d      	ldr	r2, [pc, #116]	; (80032b0 <HAL_TIM_Base_MspInit+0x158>)
 800323c:	f043 0310 	orr.w	r3, r3, #16
 8003240:	6413      	str	r3, [r2, #64]	; 0x40
 8003242:	4b1b      	ldr	r3, [pc, #108]	; (80032b0 <HAL_TIM_Base_MspInit+0x158>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f003 0310 	and.w	r3, r3, #16
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	693b      	ldr	r3, [r7, #16]
}
 800324e:	e026      	b.n	800329e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM8)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a1b      	ldr	r2, [pc, #108]	; (80032c4 <HAL_TIM_Base_MspInit+0x16c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d10e      	bne.n	8003278 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	4b14      	ldr	r3, [pc, #80]	; (80032b0 <HAL_TIM_Base_MspInit+0x158>)
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	4a13      	ldr	r2, [pc, #76]	; (80032b0 <HAL_TIM_Base_MspInit+0x158>)
 8003264:	f043 0302 	orr.w	r3, r3, #2
 8003268:	6453      	str	r3, [r2, #68]	; 0x44
 800326a:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <HAL_TIM_Base_MspInit+0x158>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
}
 8003276:	e012      	b.n	800329e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM9)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a12      	ldr	r2, [pc, #72]	; (80032c8 <HAL_TIM_Base_MspInit+0x170>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d10d      	bne.n	800329e <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <HAL_TIM_Base_MspInit+0x158>)
 8003288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328a:	4a09      	ldr	r2, [pc, #36]	; (80032b0 <HAL_TIM_Base_MspInit+0x158>)
 800328c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003290:	6453      	str	r3, [r2, #68]	; 0x44
 8003292:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <HAL_TIM_Base_MspInit+0x158>)
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
}
 800329e:	bf00      	nop
 80032a0:	372c      	adds	r7, #44	; 0x2c
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40010000 	.word	0x40010000
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40000400 	.word	0x40000400
 80032b8:	40000800 	.word	0x40000800
 80032bc:	40000c00 	.word	0x40000c00
 80032c0:	40001000 	.word	0x40001000
 80032c4:	40010400 	.word	0x40010400
 80032c8:	40014000 	.word	0x40014000

080032cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08e      	sub	sp, #56	; 0x38
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a7a      	ldr	r2, [pc, #488]	; (80034d4 <HAL_TIM_MspPostInit+0x208>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d11f      	bne.n	800332e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	623b      	str	r3, [r7, #32]
 80032f2:	4b79      	ldr	r3, [pc, #484]	; (80034d8 <HAL_TIM_MspPostInit+0x20c>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	4a78      	ldr	r2, [pc, #480]	; (80034d8 <HAL_TIM_MspPostInit+0x20c>)
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	6313      	str	r3, [r2, #48]	; 0x30
 80032fe:	4b76      	ldr	r3, [pc, #472]	; (80034d8 <HAL_TIM_MspPostInit+0x20c>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	623b      	str	r3, [r7, #32]
 8003308:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = L_GamingG_Pin|L_GamingR_Pin|L_GamingB_Pin;
 800330a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800330e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003310:	2302      	movs	r3, #2
 8003312:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003314:	2300      	movs	r3, #0
 8003316:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003318:	2300      	movs	r3, #0
 800331a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800331c:	2301      	movs	r3, #1
 800331e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003324:	4619      	mov	r1, r3
 8003326:	486d      	ldr	r0, [pc, #436]	; (80034dc <HAL_TIM_MspPostInit+0x210>)
 8003328:	f001 f8ac 	bl	8004484 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800332c:	e0cd      	b.n	80034ca <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM2)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003336:	d13d      	bne.n	80033b4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003338:	2300      	movs	r3, #0
 800333a:	61fb      	str	r3, [r7, #28]
 800333c:	4b66      	ldr	r3, [pc, #408]	; (80034d8 <HAL_TIM_MspPostInit+0x20c>)
 800333e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003340:	4a65      	ldr	r2, [pc, #404]	; (80034d8 <HAL_TIM_MspPostInit+0x20c>)
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	6313      	str	r3, [r2, #48]	; 0x30
 8003348:	4b63      	ldr	r3, [pc, #396]	; (80034d8 <HAL_TIM_MspPostInit+0x20c>)
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003354:	2300      	movs	r3, #0
 8003356:	61bb      	str	r3, [r7, #24]
 8003358:	4b5f      	ldr	r3, [pc, #380]	; (80034d8 <HAL_TIM_MspPostInit+0x20c>)
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	4a5e      	ldr	r2, [pc, #376]	; (80034d8 <HAL_TIM_MspPostInit+0x20c>)
 800335e:	f043 0302 	orr.w	r3, r3, #2
 8003362:	6313      	str	r3, [r2, #48]	; 0x30
 8003364:	4b5c      	ldr	r3, [pc, #368]	; (80034d8 <HAL_TIM_MspPostInit+0x20c>)
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = S_Parcela_Pin|S_Garaje_Pin;
 8003370:	2303      	movs	r3, #3
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003374:	2302      	movs	r3, #2
 8003376:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003378:	2300      	movs	r3, #0
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337c:	2300      	movs	r3, #0
 800337e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003380:	2301      	movs	r3, #1
 8003382:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003388:	4619      	mov	r1, r3
 800338a:	4854      	ldr	r0, [pc, #336]	; (80034dc <HAL_TIM_MspPostInit+0x210>)
 800338c:	f001 f87a 	bl	8004484 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S_Tendedero_Pin;
 8003390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003396:	2302      	movs	r3, #2
 8003398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339a:	2300      	movs	r3, #0
 800339c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339e:	2300      	movs	r3, #0
 80033a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033a2:	2301      	movs	r3, #1
 80033a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(S_Tendedero_GPIO_Port, &GPIO_InitStruct);
 80033a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033aa:	4619      	mov	r1, r3
 80033ac:	484c      	ldr	r0, [pc, #304]	; (80034e0 <HAL_TIM_MspPostInit+0x214>)
 80033ae:	f001 f869 	bl	8004484 <HAL_GPIO_Init>
}
 80033b2:	e08a      	b.n	80034ca <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM3)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a4a      	ldr	r2, [pc, #296]	; (80034e4 <HAL_TIM_MspPostInit+0x218>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d13d      	bne.n	800343a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	4b45      	ldr	r3, [pc, #276]	; (80034d8 <HAL_TIM_MspPostInit+0x20c>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	4a44      	ldr	r2, [pc, #272]	; (80034d8 <HAL_TIM_MspPostInit+0x20c>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	6313      	str	r3, [r2, #48]	; 0x30
 80033ce:	4b42      	ldr	r3, [pc, #264]	; (80034d8 <HAL_TIM_MspPostInit+0x20c>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	4b3e      	ldr	r3, [pc, #248]	; (80034d8 <HAL_TIM_MspPostInit+0x20c>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	4a3d      	ldr	r2, [pc, #244]	; (80034d8 <HAL_TIM_MspPostInit+0x20c>)
 80033e4:	f043 0304 	orr.w	r3, r3, #4
 80033e8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ea:	4b3b      	ldr	r3, [pc, #236]	; (80034d8 <HAL_TIM_MspPostInit+0x20c>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = S_Dormitorio_Pin;
 80033f6:	2380      	movs	r3, #128	; 0x80
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fa:	2302      	movs	r3, #2
 80033fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003402:	2300      	movs	r3, #0
 8003404:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003406:	2302      	movs	r3, #2
 8003408:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(S_Dormitorio_GPIO_Port, &GPIO_InitStruct);
 800340a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800340e:	4619      	mov	r1, r3
 8003410:	4832      	ldr	r0, [pc, #200]	; (80034dc <HAL_TIM_MspPostInit+0x210>)
 8003412:	f001 f837 	bl	8004484 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S_Oficina_Pin|S_Salon_Pin;
 8003416:	f44f 7340 	mov.w	r3, #768	; 0x300
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341c:	2302      	movs	r3, #2
 800341e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003424:	2300      	movs	r3, #0
 8003426:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003428:	2302      	movs	r3, #2
 800342a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800342c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003430:	4619      	mov	r1, r3
 8003432:	482d      	ldr	r0, [pc, #180]	; (80034e8 <HAL_TIM_MspPostInit+0x21c>)
 8003434:	f001 f826 	bl	8004484 <HAL_GPIO_Init>
}
 8003438:	e047      	b.n	80034ca <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM4)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a2b      	ldr	r2, [pc, #172]	; (80034ec <HAL_TIM_MspPostInit+0x220>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d11f      	bne.n	8003484 <HAL_TIM_MspPostInit+0x1b8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	4b23      	ldr	r3, [pc, #140]	; (80034d8 <HAL_TIM_MspPostInit+0x20c>)
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	4a22      	ldr	r2, [pc, #136]	; (80034d8 <HAL_TIM_MspPostInit+0x20c>)
 800344e:	f043 0308 	orr.w	r3, r3, #8
 8003452:	6313      	str	r3, [r2, #48]	; 0x30
 8003454:	4b20      	ldr	r3, [pc, #128]	; (80034d8 <HAL_TIM_MspPostInit+0x20c>)
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Z_Timbre_Pin;
 8003460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003466:	2302      	movs	r3, #2
 8003468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346a:	2300      	movs	r3, #0
 800346c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346e:	2300      	movs	r3, #0
 8003470:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003472:	2302      	movs	r3, #2
 8003474:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Z_Timbre_GPIO_Port, &GPIO_InitStruct);
 8003476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800347a:	4619      	mov	r1, r3
 800347c:	481c      	ldr	r0, [pc, #112]	; (80034f0 <HAL_TIM_MspPostInit+0x224>)
 800347e:	f001 f801 	bl	8004484 <HAL_GPIO_Init>
}
 8003482:	e022      	b.n	80034ca <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM9)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1a      	ldr	r2, [pc, #104]	; (80034f4 <HAL_TIM_MspPostInit+0x228>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d11d      	bne.n	80034ca <HAL_TIM_MspPostInit+0x1fe>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <HAL_TIM_MspPostInit+0x20c>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	4a10      	ldr	r2, [pc, #64]	; (80034d8 <HAL_TIM_MspPostInit+0x20c>)
 8003498:	f043 0310 	orr.w	r3, r3, #16
 800349c:	6313      	str	r3, [r2, #48]	; 0x30
 800349e:	4b0e      	ldr	r3, [pc, #56]	; (80034d8 <HAL_TIM_MspPostInit+0x20c>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	60bb      	str	r3, [r7, #8]
 80034a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80034aa:	2320      	movs	r3, #32
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ae:	2302      	movs	r3, #2
 80034b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b6:	2300      	movs	r3, #0
 80034b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80034ba:	2303      	movs	r3, #3
 80034bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c2:	4619      	mov	r1, r3
 80034c4:	480c      	ldr	r0, [pc, #48]	; (80034f8 <HAL_TIM_MspPostInit+0x22c>)
 80034c6:	f000 ffdd 	bl	8004484 <HAL_GPIO_Init>
}
 80034ca:	bf00      	nop
 80034cc:	3738      	adds	r7, #56	; 0x38
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40010000 	.word	0x40010000
 80034d8:	40023800 	.word	0x40023800
 80034dc:	40020000 	.word	0x40020000
 80034e0:	40020400 	.word	0x40020400
 80034e4:	40000400 	.word	0x40000400
 80034e8:	40020800 	.word	0x40020800
 80034ec:	40000800 	.word	0x40000800
 80034f0:	40020c00 	.word	0x40020c00
 80034f4:	40014000 	.word	0x40014000
 80034f8:	40021000 	.word	0x40021000

080034fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08e      	sub	sp, #56	; 0x38
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a63      	ldr	r2, [pc, #396]	; (80036a8 <HAL_UART_MspInit+0x1ac>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d134      	bne.n	8003588 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	623b      	str	r3, [r7, #32]
 8003522:	4b62      	ldr	r3, [pc, #392]	; (80036ac <HAL_UART_MspInit+0x1b0>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	4a61      	ldr	r2, [pc, #388]	; (80036ac <HAL_UART_MspInit+0x1b0>)
 8003528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800352c:	6413      	str	r3, [r2, #64]	; 0x40
 800352e:	4b5f      	ldr	r3, [pc, #380]	; (80036ac <HAL_UART_MspInit+0x1b0>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	623b      	str	r3, [r7, #32]
 8003538:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
 800353e:	4b5b      	ldr	r3, [pc, #364]	; (80036ac <HAL_UART_MspInit+0x1b0>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	4a5a      	ldr	r2, [pc, #360]	; (80036ac <HAL_UART_MspInit+0x1b0>)
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	6313      	str	r3, [r2, #48]	; 0x30
 800354a:	4b58      	ldr	r3, [pc, #352]	; (80036ac <HAL_UART_MspInit+0x1b0>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	61fb      	str	r3, [r7, #28]
 8003554:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003556:	230c      	movs	r3, #12
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355a:	2302      	movs	r3, #2
 800355c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355e:	2300      	movs	r3, #0
 8003560:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003562:	2303      	movs	r3, #3
 8003564:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003566:	2307      	movs	r3, #7
 8003568:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800356e:	4619      	mov	r1, r3
 8003570:	484f      	ldr	r0, [pc, #316]	; (80036b0 <HAL_UART_MspInit+0x1b4>)
 8003572:	f000 ff87 	bl	8004484 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003576:	2200      	movs	r2, #0
 8003578:	2100      	movs	r1, #0
 800357a:	2026      	movs	r0, #38	; 0x26
 800357c:	f000 feb9 	bl	80042f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003580:	2026      	movs	r0, #38	; 0x26
 8003582:	f000 fed2 	bl	800432a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003586:	e08a      	b.n	800369e <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART3)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a49      	ldr	r2, [pc, #292]	; (80036b4 <HAL_UART_MspInit+0x1b8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d14c      	bne.n	800362c <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	61bb      	str	r3, [r7, #24]
 8003596:	4b45      	ldr	r3, [pc, #276]	; (80036ac <HAL_UART_MspInit+0x1b0>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	4a44      	ldr	r2, [pc, #272]	; (80036ac <HAL_UART_MspInit+0x1b0>)
 800359c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035a0:	6413      	str	r3, [r2, #64]	; 0x40
 80035a2:	4b42      	ldr	r3, [pc, #264]	; (80036ac <HAL_UART_MspInit+0x1b0>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035aa:	61bb      	str	r3, [r7, #24]
 80035ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	4b3e      	ldr	r3, [pc, #248]	; (80036ac <HAL_UART_MspInit+0x1b0>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	4a3d      	ldr	r2, [pc, #244]	; (80036ac <HAL_UART_MspInit+0x1b0>)
 80035b8:	f043 0302 	orr.w	r3, r3, #2
 80035bc:	6313      	str	r3, [r2, #48]	; 0x30
 80035be:	4b3b      	ldr	r3, [pc, #236]	; (80036ac <HAL_UART_MspInit+0x1b0>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	4b37      	ldr	r3, [pc, #220]	; (80036ac <HAL_UART_MspInit+0x1b0>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	4a36      	ldr	r2, [pc, #216]	; (80036ac <HAL_UART_MspInit+0x1b0>)
 80035d4:	f043 0308 	orr.w	r3, r3, #8
 80035d8:	6313      	str	r3, [r2, #48]	; 0x30
 80035da:	4b34      	ldr	r3, [pc, #208]	; (80036ac <HAL_UART_MspInit+0x1b0>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80035e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ec:	2302      	movs	r3, #2
 80035ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f4:	2303      	movs	r3, #3
 80035f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035f8:	2307      	movs	r3, #7
 80035fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003600:	4619      	mov	r1, r3
 8003602:	482d      	ldr	r0, [pc, #180]	; (80036b8 <HAL_UART_MspInit+0x1bc>)
 8003604:	f000 ff3e 	bl	8004484 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003608:	f44f 7380 	mov.w	r3, #256	; 0x100
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360e:	2302      	movs	r3, #2
 8003610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003616:	2303      	movs	r3, #3
 8003618:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800361a:	2307      	movs	r3, #7
 800361c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800361e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003622:	4619      	mov	r1, r3
 8003624:	4825      	ldr	r0, [pc, #148]	; (80036bc <HAL_UART_MspInit+0x1c0>)
 8003626:	f000 ff2d 	bl	8004484 <HAL_GPIO_Init>
}
 800362a:	e038      	b.n	800369e <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART6)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a23      	ldr	r2, [pc, #140]	; (80036c0 <HAL_UART_MspInit+0x1c4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d133      	bne.n	800369e <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	4b1c      	ldr	r3, [pc, #112]	; (80036ac <HAL_UART_MspInit+0x1b0>)
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	4a1b      	ldr	r2, [pc, #108]	; (80036ac <HAL_UART_MspInit+0x1b0>)
 8003640:	f043 0320 	orr.w	r3, r3, #32
 8003644:	6453      	str	r3, [r2, #68]	; 0x44
 8003646:	4b19      	ldr	r3, [pc, #100]	; (80036ac <HAL_UART_MspInit+0x1b0>)
 8003648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	4b15      	ldr	r3, [pc, #84]	; (80036ac <HAL_UART_MspInit+0x1b0>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	4a14      	ldr	r2, [pc, #80]	; (80036ac <HAL_UART_MspInit+0x1b0>)
 800365c:	f043 0304 	orr.w	r3, r3, #4
 8003660:	6313      	str	r3, [r2, #48]	; 0x30
 8003662:	4b12      	ldr	r3, [pc, #72]	; (80036ac <HAL_UART_MspInit+0x1b0>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	60bb      	str	r3, [r7, #8]
 800366c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800366e:	23c0      	movs	r3, #192	; 0xc0
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003672:	2302      	movs	r3, #2
 8003674:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003676:	2300      	movs	r3, #0
 8003678:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800367a:	2303      	movs	r3, #3
 800367c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800367e:	2308      	movs	r3, #8
 8003680:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003686:	4619      	mov	r1, r3
 8003688:	480e      	ldr	r0, [pc, #56]	; (80036c4 <HAL_UART_MspInit+0x1c8>)
 800368a:	f000 fefb 	bl	8004484 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800368e:	2200      	movs	r2, #0
 8003690:	2100      	movs	r1, #0
 8003692:	2047      	movs	r0, #71	; 0x47
 8003694:	f000 fe2d 	bl	80042f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003698:	2047      	movs	r0, #71	; 0x47
 800369a:	f000 fe46 	bl	800432a <HAL_NVIC_EnableIRQ>
}
 800369e:	bf00      	nop
 80036a0:	3738      	adds	r7, #56	; 0x38
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40004400 	.word	0x40004400
 80036ac:	40023800 	.word	0x40023800
 80036b0:	40020000 	.word	0x40020000
 80036b4:	40004800 	.word	0x40004800
 80036b8:	40020400 	.word	0x40020400
 80036bc:	40020c00 	.word	0x40020c00
 80036c0:	40011400 	.word	0x40011400
 80036c4:	40020800 	.word	0x40020800

080036c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036cc:	e7fe      	b.n	80036cc <NMI_Handler+0x4>

080036ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036ce:	b480      	push	{r7}
 80036d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036d2:	e7fe      	b.n	80036d2 <HardFault_Handler+0x4>

080036d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036d8:	e7fe      	b.n	80036d8 <MemManage_Handler+0x4>

080036da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036da:	b480      	push	{r7}
 80036dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036de:	e7fe      	b.n	80036de <BusFault_Handler+0x4>

080036e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036e4:	e7fe      	b.n	80036e4 <UsageFault_Handler+0x4>

080036e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036e6:	b480      	push	{r7}
 80036e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036ea:	bf00      	nop
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036f8:	bf00      	nop
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003702:	b480      	push	{r7}
 8003704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003706:	bf00      	nop
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003714:	f000 f902 	bl	800391c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003718:	bf00      	nop
 800371a:	bd80      	pop	{r7, pc}

0800371c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003720:	2001      	movs	r0, #1
 8003722:	f001 f87d 	bl	8004820 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}

0800372a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800372e:	2002      	movs	r0, #2
 8003730:	f001 f876 	bl	8004820 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003734:	bf00      	nop
 8003736:	bd80      	pop	{r7, pc}

08003738 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800373c:	2008      	movs	r0, #8
 800373e:	f001 f86f 	bl	8004820 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003742:	bf00      	nop
 8003744:	bd80      	pop	{r7, pc}

08003746 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800374a:	2010      	movs	r0, #16
 800374c:	f001 f868 	bl	8004820 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003750:	bf00      	nop
 8003752:	bd80      	pop	{r7, pc}

08003754 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003758:	2040      	movs	r0, #64	; 0x40
 800375a:	f001 f861 	bl	8004820 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UART_isr(&huart2);
 8003768:	4803      	ldr	r0, [pc, #12]	; (8003778 <USART2_IRQHandler+0x14>)
 800376a:	f7fe f99d 	bl	8001aa8 <UART_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800376e:	4802      	ldr	r0, [pc, #8]	; (8003778 <USART2_IRQHandler+0x14>)
 8003770:	f002 fda6 	bl	80062c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003774:	bf00      	nop
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20000db8 	.word	0x20000db8

0800377c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	UART_isr(&huart6);
 8003780:	4803      	ldr	r0, [pc, #12]	; (8003790 <USART6_IRQHandler+0x14>)
 8003782:	f7fe f991 	bl	8001aa8 <UART_isr>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003786:	4802      	ldr	r0, [pc, #8]	; (8003790 <USART6_IRQHandler+0x14>)
 8003788:	f002 fd9a 	bl	80062c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800378c:	bf00      	nop
 800378e:	bd80      	pop	{r7, pc}
 8003790:	20000d2c 	.word	0x20000d2c

08003794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800379c:	4a14      	ldr	r2, [pc, #80]	; (80037f0 <_sbrk+0x5c>)
 800379e:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <_sbrk+0x60>)
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037a8:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <_sbrk+0x64>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d102      	bne.n	80037b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037b0:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <_sbrk+0x64>)
 80037b2:	4a12      	ldr	r2, [pc, #72]	; (80037fc <_sbrk+0x68>)
 80037b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037b6:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <_sbrk+0x64>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4413      	add	r3, r2
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d207      	bcs.n	80037d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037c4:	f003 fc04 	bl	8006fd0 <__errno>
 80037c8:	4603      	mov	r3, r0
 80037ca:	220c      	movs	r2, #12
 80037cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037ce:	f04f 33ff 	mov.w	r3, #4294967295
 80037d2:	e009      	b.n	80037e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037d4:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <_sbrk+0x64>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037da:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <_sbrk+0x64>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4413      	add	r3, r2
 80037e2:	4a05      	ldr	r2, [pc, #20]	; (80037f8 <_sbrk+0x64>)
 80037e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037e6:	68fb      	ldr	r3, [r7, #12]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	20020000 	.word	0x20020000
 80037f4:	00000400 	.word	0x00000400
 80037f8:	200008cc 	.word	0x200008cc
 80037fc:	20000e18 	.word	0x20000e18

08003800 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003804:	4b06      	ldr	r3, [pc, #24]	; (8003820 <SystemInit+0x20>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	4a05      	ldr	r2, [pc, #20]	; (8003820 <SystemInit+0x20>)
 800380c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003814:	bf00      	nop
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800385c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003828:	480d      	ldr	r0, [pc, #52]	; (8003860 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800382a:	490e      	ldr	r1, [pc, #56]	; (8003864 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800382c:	4a0e      	ldr	r2, [pc, #56]	; (8003868 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800382e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003830:	e002      	b.n	8003838 <LoopCopyDataInit>

08003832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003836:	3304      	adds	r3, #4

08003838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800383a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800383c:	d3f9      	bcc.n	8003832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800383e:	4a0b      	ldr	r2, [pc, #44]	; (800386c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003840:	4c0b      	ldr	r4, [pc, #44]	; (8003870 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003844:	e001      	b.n	800384a <LoopFillZerobss>

08003846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003848:	3204      	adds	r2, #4

0800384a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800384a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800384c:	d3fb      	bcc.n	8003846 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800384e:	f7ff ffd7 	bl	8003800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003852:	f003 fbc3 	bl	8006fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003856:	f7fe faa9 	bl	8001dac <main>
  bx  lr    
 800385a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800385c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003864:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003868:	080080ec 	.word	0x080080ec
  ldr r2, =_sbss
 800386c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003870:	20000e18 	.word	0x20000e18

08003874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003874:	e7fe      	b.n	8003874 <ADC_IRQHandler>
	...

08003878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800387c:	4b0e      	ldr	r3, [pc, #56]	; (80038b8 <HAL_Init+0x40>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a0d      	ldr	r2, [pc, #52]	; (80038b8 <HAL_Init+0x40>)
 8003882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003886:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <HAL_Init+0x40>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a0a      	ldr	r2, [pc, #40]	; (80038b8 <HAL_Init+0x40>)
 800388e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003892:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003894:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <HAL_Init+0x40>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a07      	ldr	r2, [pc, #28]	; (80038b8 <HAL_Init+0x40>)
 800389a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038a0:	2003      	movs	r0, #3
 80038a2:	f000 fd1b 	bl	80042dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038a6:	2000      	movs	r0, #0
 80038a8:	f000 f808 	bl	80038bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038ac:	f7ff fb84 	bl	8002fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40023c00 	.word	0x40023c00

080038bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038c4:	4b12      	ldr	r3, [pc, #72]	; (8003910 <HAL_InitTick+0x54>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	4b12      	ldr	r3, [pc, #72]	; (8003914 <HAL_InitTick+0x58>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	4619      	mov	r1, r3
 80038ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80038d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fd33 	bl	8004346 <HAL_SYSTICK_Config>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e00e      	b.n	8003908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b0f      	cmp	r3, #15
 80038ee:	d80a      	bhi.n	8003906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038f0:	2200      	movs	r2, #0
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	f04f 30ff 	mov.w	r0, #4294967295
 80038f8:	f000 fcfb 	bl	80042f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038fc:	4a06      	ldr	r2, [pc, #24]	; (8003918 <HAL_InitTick+0x5c>)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	e000      	b.n	8003908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
}
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20000000 	.word	0x20000000
 8003914:	20000008 	.word	0x20000008
 8003918:	20000004 	.word	0x20000004

0800391c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <HAL_IncTick+0x20>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	4b06      	ldr	r3, [pc, #24]	; (8003940 <HAL_IncTick+0x24>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4413      	add	r3, r2
 800392c:	4a04      	ldr	r2, [pc, #16]	; (8003940 <HAL_IncTick+0x24>)
 800392e:	6013      	str	r3, [r2, #0]
}
 8003930:	bf00      	nop
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000008 	.word	0x20000008
 8003940:	20000e04 	.word	0x20000e04

08003944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  return uwTick;
 8003948:	4b03      	ldr	r3, [pc, #12]	; (8003958 <HAL_GetTick+0x14>)
 800394a:	681b      	ldr	r3, [r3, #0]
}
 800394c:	4618      	mov	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	20000e04 	.word	0x20000e04

0800395c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003964:	f7ff ffee 	bl	8003944 <HAL_GetTick>
 8003968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003974:	d005      	beq.n	8003982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003976:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <HAL_Delay+0x44>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4413      	add	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003982:	bf00      	nop
 8003984:	f7ff ffde 	bl	8003944 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	429a      	cmp	r2, r3
 8003992:	d8f7      	bhi.n	8003984 <HAL_Delay+0x28>
  {
  }
}
 8003994:	bf00      	nop
 8003996:	bf00      	nop
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000008 	.word	0x20000008

080039a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e033      	b.n	8003a22 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d109      	bne.n	80039d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff fb20 	bl	8003008 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f003 0310 	and.w	r3, r3, #16
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d118      	bne.n	8003a14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039ea:	f023 0302 	bic.w	r3, r3, #2
 80039ee:	f043 0202 	orr.w	r2, r3, #2
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 faa4 	bl	8003f44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f023 0303 	bic.w	r3, r3, #3
 8003a0a:	f043 0201 	orr.w	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	641a      	str	r2, [r3, #64]	; 0x40
 8003a12:	e001      	b.n	8003a18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <HAL_ADC_Start+0x1a>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e0b2      	b.n	8003bac <HAL_ADC_Start+0x180>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d018      	beq.n	8003a8e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a6c:	4b52      	ldr	r3, [pc, #328]	; (8003bb8 <HAL_ADC_Start+0x18c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a52      	ldr	r2, [pc, #328]	; (8003bbc <HAL_ADC_Start+0x190>)
 8003a72:	fba2 2303 	umull	r2, r3, r2, r3
 8003a76:	0c9a      	lsrs	r2, r3, #18
 8003a78:	4613      	mov	r3, r2
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	4413      	add	r3, r2
 8003a7e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003a80:	e002      	b.n	8003a88 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	3b01      	subs	r3, #1
 8003a86:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f9      	bne.n	8003a82 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d17a      	bne.n	8003b92 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003aa4:	f023 0301 	bic.w	r3, r3, #1
 8003aa8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d007      	beq.n	8003ace <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ac6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ada:	d106      	bne.n	8003aea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae0:	f023 0206 	bic.w	r2, r3, #6
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	645a      	str	r2, [r3, #68]	; 0x44
 8003ae8:	e002      	b.n	8003af0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003af8:	4b31      	ldr	r3, [pc, #196]	; (8003bc0 <HAL_ADC_Start+0x194>)
 8003afa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003b04:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f003 031f 	and.w	r3, r3, #31
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d12a      	bne.n	8003b68 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a2b      	ldr	r2, [pc, #172]	; (8003bc4 <HAL_ADC_Start+0x198>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d015      	beq.n	8003b48 <HAL_ADC_Start+0x11c>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a29      	ldr	r2, [pc, #164]	; (8003bc8 <HAL_ADC_Start+0x19c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d105      	bne.n	8003b32 <HAL_ADC_Start+0x106>
 8003b26:	4b26      	ldr	r3, [pc, #152]	; (8003bc0 <HAL_ADC_Start+0x194>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a25      	ldr	r2, [pc, #148]	; (8003bcc <HAL_ADC_Start+0x1a0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d136      	bne.n	8003baa <HAL_ADC_Start+0x17e>
 8003b3c:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <HAL_ADC_Start+0x194>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d130      	bne.n	8003baa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d129      	bne.n	8003baa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b64:	609a      	str	r2, [r3, #8]
 8003b66:	e020      	b.n	8003baa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a15      	ldr	r2, [pc, #84]	; (8003bc4 <HAL_ADC_Start+0x198>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d11b      	bne.n	8003baa <HAL_ADC_Start+0x17e>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d114      	bne.n	8003baa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b8e:	609a      	str	r2, [r3, #8]
 8003b90:	e00b      	b.n	8003baa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f043 0210 	orr.w	r2, r3, #16
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	f043 0201 	orr.w	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	20000000 	.word	0x20000000
 8003bbc:	431bde83 	.word	0x431bde83
 8003bc0:	40012300 	.word	0x40012300
 8003bc4:	40012000 	.word	0x40012000
 8003bc8:	40012100 	.word	0x40012100
 8003bcc:	40012200 	.word	0x40012200

08003bd0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bec:	d113      	bne.n	8003c16 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bfc:	d10b      	bne.n	8003c16 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f043 0220 	orr.w	r2, r3, #32
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e063      	b.n	8003cde <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003c16:	f7ff fe95 	bl	8003944 <HAL_GetTick>
 8003c1a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003c1c:	e021      	b.n	8003c62 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c24:	d01d      	beq.n	8003c62 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d007      	beq.n	8003c3c <HAL_ADC_PollForConversion+0x6c>
 8003c2c:	f7ff fe8a 	bl	8003944 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d212      	bcs.n	8003c62 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d00b      	beq.n	8003c62 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f043 0204 	orr.w	r2, r3, #4
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e03d      	b.n	8003cde <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d1d6      	bne.n	8003c1e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f06f 0212 	mvn.w	r2, #18
 8003c78:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d123      	bne.n	8003cdc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d11f      	bne.n	8003cdc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d006      	beq.n	8003cb8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d111      	bne.n	8003cdc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d105      	bne.n	8003cdc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	f043 0201 	orr.w	r2, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x1c>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e105      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x228>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b09      	cmp	r3, #9
 8003d2a:	d925      	bls.n	8003d78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68d9      	ldr	r1, [r3, #12]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	4413      	add	r3, r2
 8003d40:	3b1e      	subs	r3, #30
 8003d42:	2207      	movs	r2, #7
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	43da      	mvns	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	400a      	ands	r2, r1
 8003d50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68d9      	ldr	r1, [r3, #12]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	4618      	mov	r0, r3
 8003d64:	4603      	mov	r3, r0
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	4403      	add	r3, r0
 8003d6a:	3b1e      	subs	r3, #30
 8003d6c:	409a      	lsls	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	60da      	str	r2, [r3, #12]
 8003d76:	e022      	b.n	8003dbe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6919      	ldr	r1, [r3, #16]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	461a      	mov	r2, r3
 8003d86:	4613      	mov	r3, r2
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	4413      	add	r3, r2
 8003d8c:	2207      	movs	r2, #7
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43da      	mvns	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	400a      	ands	r2, r1
 8003d9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6919      	ldr	r1, [r3, #16]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	4618      	mov	r0, r3
 8003dae:	4603      	mov	r3, r0
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	4403      	add	r3, r0
 8003db4:	409a      	lsls	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b06      	cmp	r3, #6
 8003dc4:	d824      	bhi.n	8003e10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	3b05      	subs	r3, #5
 8003dd8:	221f      	movs	r2, #31
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43da      	mvns	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	400a      	ands	r2, r1
 8003de6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	4618      	mov	r0, r3
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	3b05      	subs	r3, #5
 8003e02:	fa00 f203 	lsl.w	r2, r0, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	635a      	str	r2, [r3, #52]	; 0x34
 8003e0e:	e04c      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b0c      	cmp	r3, #12
 8003e16:	d824      	bhi.n	8003e62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	3b23      	subs	r3, #35	; 0x23
 8003e2a:	221f      	movs	r2, #31
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	43da      	mvns	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	400a      	ands	r2, r1
 8003e38:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	4618      	mov	r0, r3
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	3b23      	subs	r3, #35	; 0x23
 8003e54:	fa00 f203 	lsl.w	r2, r0, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	631a      	str	r2, [r3, #48]	; 0x30
 8003e60:	e023      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	3b41      	subs	r3, #65	; 0x41
 8003e74:	221f      	movs	r2, #31
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43da      	mvns	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	400a      	ands	r2, r1
 8003e82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	4618      	mov	r0, r3
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	3b41      	subs	r3, #65	; 0x41
 8003e9e:	fa00 f203 	lsl.w	r2, r0, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003eaa:	4b22      	ldr	r3, [pc, #136]	; (8003f34 <HAL_ADC_ConfigChannel+0x234>)
 8003eac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a21      	ldr	r2, [pc, #132]	; (8003f38 <HAL_ADC_ConfigChannel+0x238>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d109      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x1cc>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b12      	cmp	r3, #18
 8003ebe:	d105      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a19      	ldr	r2, [pc, #100]	; (8003f38 <HAL_ADC_ConfigChannel+0x238>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d123      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x21e>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b10      	cmp	r3, #16
 8003edc:	d003      	beq.n	8003ee6 <HAL_ADC_ConfigChannel+0x1e6>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b11      	cmp	r3, #17
 8003ee4:	d11b      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b10      	cmp	r3, #16
 8003ef8:	d111      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003efa:	4b10      	ldr	r3, [pc, #64]	; (8003f3c <HAL_ADC_ConfigChannel+0x23c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a10      	ldr	r2, [pc, #64]	; (8003f40 <HAL_ADC_ConfigChannel+0x240>)
 8003f00:	fba2 2303 	umull	r2, r3, r2, r3
 8003f04:	0c9a      	lsrs	r2, r3, #18
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003f10:	e002      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	3b01      	subs	r3, #1
 8003f16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f9      	bne.n	8003f12 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	40012300 	.word	0x40012300
 8003f38:	40012000 	.word	0x40012000
 8003f3c:	20000000 	.word	0x20000000
 8003f40:	431bde83 	.word	0x431bde83

08003f44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f4c:	4b79      	ldr	r3, [pc, #484]	; (8004134 <ADC_Init+0x1f0>)
 8003f4e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	431a      	orrs	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6859      	ldr	r1, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	021a      	lsls	r2, r3, #8
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6859      	ldr	r1, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6899      	ldr	r1, [r3, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	4a58      	ldr	r2, [pc, #352]	; (8004138 <ADC_Init+0x1f4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d022      	beq.n	8004022 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6899      	ldr	r1, [r3, #8]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800400c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6899      	ldr	r1, [r3, #8]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	609a      	str	r2, [r3, #8]
 8004020:	e00f      	b.n	8004042 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004030:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004040:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0202 	bic.w	r2, r2, #2
 8004050:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6899      	ldr	r1, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	7e1b      	ldrb	r3, [r3, #24]
 800405c:	005a      	lsls	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01b      	beq.n	80040a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800407e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800408e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6859      	ldr	r1, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	3b01      	subs	r3, #1
 800409c:	035a      	lsls	r2, r3, #13
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	605a      	str	r2, [r3, #4]
 80040a6:	e007      	b.n	80040b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80040c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	051a      	lsls	r2, r3, #20
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6899      	ldr	r1, [r3, #8]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040fa:	025a      	lsls	r2, r3, #9
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004112:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6899      	ldr	r1, [r3, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	029a      	lsls	r2, r3, #10
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	609a      	str	r2, [r3, #8]
}
 8004128:	bf00      	nop
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	40012300 	.word	0x40012300
 8004138:	0f000001 	.word	0x0f000001

0800413c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800414c:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <__NVIC_SetPriorityGrouping+0x44>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004158:	4013      	ands	r3, r2
 800415a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800416c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800416e:	4a04      	ldr	r2, [pc, #16]	; (8004180 <__NVIC_SetPriorityGrouping+0x44>)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	60d3      	str	r3, [r2, #12]
}
 8004174:	bf00      	nop
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	e000ed00 	.word	0xe000ed00

08004184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004188:	4b04      	ldr	r3, [pc, #16]	; (800419c <__NVIC_GetPriorityGrouping+0x18>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	0a1b      	lsrs	r3, r3, #8
 800418e:	f003 0307 	and.w	r3, r3, #7
}
 8004192:	4618      	mov	r0, r3
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	e000ed00 	.word	0xe000ed00

080041a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	db0b      	blt.n	80041ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	f003 021f 	and.w	r2, r3, #31
 80041b8:	4907      	ldr	r1, [pc, #28]	; (80041d8 <__NVIC_EnableIRQ+0x38>)
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	2001      	movs	r0, #1
 80041c2:	fa00 f202 	lsl.w	r2, r0, r2
 80041c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	e000e100 	.word	0xe000e100

080041dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	6039      	str	r1, [r7, #0]
 80041e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	db0a      	blt.n	8004206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	490c      	ldr	r1, [pc, #48]	; (8004228 <__NVIC_SetPriority+0x4c>)
 80041f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fa:	0112      	lsls	r2, r2, #4
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	440b      	add	r3, r1
 8004200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004204:	e00a      	b.n	800421c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	b2da      	uxtb	r2, r3
 800420a:	4908      	ldr	r1, [pc, #32]	; (800422c <__NVIC_SetPriority+0x50>)
 800420c:	79fb      	ldrb	r3, [r7, #7]
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	3b04      	subs	r3, #4
 8004214:	0112      	lsls	r2, r2, #4
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	440b      	add	r3, r1
 800421a:	761a      	strb	r2, [r3, #24]
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	e000e100 	.word	0xe000e100
 800422c:	e000ed00 	.word	0xe000ed00

08004230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004230:	b480      	push	{r7}
 8004232:	b089      	sub	sp, #36	; 0x24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f1c3 0307 	rsb	r3, r3, #7
 800424a:	2b04      	cmp	r3, #4
 800424c:	bf28      	it	cs
 800424e:	2304      	movcs	r3, #4
 8004250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	3304      	adds	r3, #4
 8004256:	2b06      	cmp	r3, #6
 8004258:	d902      	bls.n	8004260 <NVIC_EncodePriority+0x30>
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	3b03      	subs	r3, #3
 800425e:	e000      	b.n	8004262 <NVIC_EncodePriority+0x32>
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004264:	f04f 32ff 	mov.w	r2, #4294967295
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	43da      	mvns	r2, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	401a      	ands	r2, r3
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004278:	f04f 31ff 	mov.w	r1, #4294967295
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	fa01 f303 	lsl.w	r3, r1, r3
 8004282:	43d9      	mvns	r1, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004288:	4313      	orrs	r3, r2
         );
}
 800428a:	4618      	mov	r0, r3
 800428c:	3724      	adds	r7, #36	; 0x24
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
	...

08004298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042a8:	d301      	bcc.n	80042ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042aa:	2301      	movs	r3, #1
 80042ac:	e00f      	b.n	80042ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042ae:	4a0a      	ldr	r2, [pc, #40]	; (80042d8 <SysTick_Config+0x40>)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042b6:	210f      	movs	r1, #15
 80042b8:	f04f 30ff 	mov.w	r0, #4294967295
 80042bc:	f7ff ff8e 	bl	80041dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <SysTick_Config+0x40>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042c6:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <SysTick_Config+0x40>)
 80042c8:	2207      	movs	r2, #7
 80042ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	e000e010 	.word	0xe000e010

080042dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff ff29 	bl	800413c <__NVIC_SetPriorityGrouping>
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b086      	sub	sp, #24
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	4603      	mov	r3, r0
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
 80042fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004304:	f7ff ff3e 	bl	8004184 <__NVIC_GetPriorityGrouping>
 8004308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	68b9      	ldr	r1, [r7, #8]
 800430e:	6978      	ldr	r0, [r7, #20]
 8004310:	f7ff ff8e 	bl	8004230 <NVIC_EncodePriority>
 8004314:	4602      	mov	r2, r0
 8004316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800431a:	4611      	mov	r1, r2
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff ff5d 	bl	80041dc <__NVIC_SetPriority>
}
 8004322:	bf00      	nop
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b082      	sub	sp, #8
 800432e:	af00      	add	r7, sp, #0
 8004330:	4603      	mov	r3, r0
 8004332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff ff31 	bl	80041a0 <__NVIC_EnableIRQ>
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b082      	sub	sp, #8
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7ff ffa2 	bl	8004298 <SysTick_Config>
 8004354:	4603      	mov	r3, r0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800436c:	f7ff faea 	bl	8003944 <HAL_GetTick>
 8004370:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d008      	beq.n	8004390 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2280      	movs	r2, #128	; 0x80
 8004382:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e052      	b.n	8004436 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0216 	bic.w	r2, r2, #22
 800439e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695a      	ldr	r2, [r3, #20]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d103      	bne.n	80043c0 <HAL_DMA_Abort+0x62>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d007      	beq.n	80043d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0208 	bic.w	r2, r2, #8
 80043ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0201 	bic.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043e0:	e013      	b.n	800440a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043e2:	f7ff faaf 	bl	8003944 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b05      	cmp	r3, #5
 80043ee:	d90c      	bls.n	800440a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2220      	movs	r2, #32
 80043f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2203      	movs	r2, #3
 80043fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e015      	b.n	8004436 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e4      	bne.n	80043e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441c:	223f      	movs	r2, #63	; 0x3f
 800441e:	409a      	lsls	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d004      	beq.n	800445c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2280      	movs	r2, #128	; 0x80
 8004456:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e00c      	b.n	8004476 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2205      	movs	r2, #5
 8004460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0201 	bic.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
	...

08004484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004484:	b480      	push	{r7}
 8004486:	b089      	sub	sp, #36	; 0x24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004492:	2300      	movs	r3, #0
 8004494:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004496:	2300      	movs	r3, #0
 8004498:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800449a:	2300      	movs	r3, #0
 800449c:	61fb      	str	r3, [r7, #28]
 800449e:	e16b      	b.n	8004778 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044a0:	2201      	movs	r2, #1
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4013      	ands	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	f040 815a 	bne.w	8004772 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d005      	beq.n	80044d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d130      	bne.n	8004538 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	2203      	movs	r2, #3
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	43db      	mvns	r3, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4013      	ands	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800450c:	2201      	movs	r2, #1
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	43db      	mvns	r3, r3
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	4013      	ands	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	091b      	lsrs	r3, r3, #4
 8004522:	f003 0201 	and.w	r2, r3, #1
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	4313      	orrs	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f003 0303 	and.w	r3, r3, #3
 8004540:	2b03      	cmp	r3, #3
 8004542:	d017      	beq.n	8004574 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	2203      	movs	r2, #3
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	43db      	mvns	r3, r3
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	4013      	ands	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4313      	orrs	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f003 0303 	and.w	r3, r3, #3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d123      	bne.n	80045c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	08da      	lsrs	r2, r3, #3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3208      	adds	r2, #8
 8004588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800458c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	220f      	movs	r2, #15
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	43db      	mvns	r3, r3
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	4013      	ands	r3, r2
 80045a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	08da      	lsrs	r2, r3, #3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3208      	adds	r2, #8
 80045c2:	69b9      	ldr	r1, [r7, #24]
 80045c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	2203      	movs	r2, #3
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	43db      	mvns	r3, r3
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	4013      	ands	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 0203 	and.w	r2, r3, #3
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 80b4 	beq.w	8004772 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800460a:	2300      	movs	r3, #0
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	4b60      	ldr	r3, [pc, #384]	; (8004790 <HAL_GPIO_Init+0x30c>)
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	4a5f      	ldr	r2, [pc, #380]	; (8004790 <HAL_GPIO_Init+0x30c>)
 8004614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004618:	6453      	str	r3, [r2, #68]	; 0x44
 800461a:	4b5d      	ldr	r3, [pc, #372]	; (8004790 <HAL_GPIO_Init+0x30c>)
 800461c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004626:	4a5b      	ldr	r2, [pc, #364]	; (8004794 <HAL_GPIO_Init+0x310>)
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	089b      	lsrs	r3, r3, #2
 800462c:	3302      	adds	r3, #2
 800462e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	220f      	movs	r2, #15
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43db      	mvns	r3, r3
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	4013      	ands	r3, r2
 8004648:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a52      	ldr	r2, [pc, #328]	; (8004798 <HAL_GPIO_Init+0x314>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d02b      	beq.n	80046aa <HAL_GPIO_Init+0x226>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a51      	ldr	r2, [pc, #324]	; (800479c <HAL_GPIO_Init+0x318>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d025      	beq.n	80046a6 <HAL_GPIO_Init+0x222>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a50      	ldr	r2, [pc, #320]	; (80047a0 <HAL_GPIO_Init+0x31c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d01f      	beq.n	80046a2 <HAL_GPIO_Init+0x21e>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a4f      	ldr	r2, [pc, #316]	; (80047a4 <HAL_GPIO_Init+0x320>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d019      	beq.n	800469e <HAL_GPIO_Init+0x21a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a4e      	ldr	r2, [pc, #312]	; (80047a8 <HAL_GPIO_Init+0x324>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d013      	beq.n	800469a <HAL_GPIO_Init+0x216>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a4d      	ldr	r2, [pc, #308]	; (80047ac <HAL_GPIO_Init+0x328>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d00d      	beq.n	8004696 <HAL_GPIO_Init+0x212>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a4c      	ldr	r2, [pc, #304]	; (80047b0 <HAL_GPIO_Init+0x32c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d007      	beq.n	8004692 <HAL_GPIO_Init+0x20e>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a4b      	ldr	r2, [pc, #300]	; (80047b4 <HAL_GPIO_Init+0x330>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d101      	bne.n	800468e <HAL_GPIO_Init+0x20a>
 800468a:	2307      	movs	r3, #7
 800468c:	e00e      	b.n	80046ac <HAL_GPIO_Init+0x228>
 800468e:	2308      	movs	r3, #8
 8004690:	e00c      	b.n	80046ac <HAL_GPIO_Init+0x228>
 8004692:	2306      	movs	r3, #6
 8004694:	e00a      	b.n	80046ac <HAL_GPIO_Init+0x228>
 8004696:	2305      	movs	r3, #5
 8004698:	e008      	b.n	80046ac <HAL_GPIO_Init+0x228>
 800469a:	2304      	movs	r3, #4
 800469c:	e006      	b.n	80046ac <HAL_GPIO_Init+0x228>
 800469e:	2303      	movs	r3, #3
 80046a0:	e004      	b.n	80046ac <HAL_GPIO_Init+0x228>
 80046a2:	2302      	movs	r3, #2
 80046a4:	e002      	b.n	80046ac <HAL_GPIO_Init+0x228>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <HAL_GPIO_Init+0x228>
 80046aa:	2300      	movs	r3, #0
 80046ac:	69fa      	ldr	r2, [r7, #28]
 80046ae:	f002 0203 	and.w	r2, r2, #3
 80046b2:	0092      	lsls	r2, r2, #2
 80046b4:	4093      	lsls	r3, r2
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046bc:	4935      	ldr	r1, [pc, #212]	; (8004794 <HAL_GPIO_Init+0x310>)
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	089b      	lsrs	r3, r3, #2
 80046c2:	3302      	adds	r3, #2
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046ca:	4b3b      	ldr	r3, [pc, #236]	; (80047b8 <HAL_GPIO_Init+0x334>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	43db      	mvns	r3, r3
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	4013      	ands	r3, r2
 80046d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046ee:	4a32      	ldr	r2, [pc, #200]	; (80047b8 <HAL_GPIO_Init+0x334>)
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80046f4:	4b30      	ldr	r3, [pc, #192]	; (80047b8 <HAL_GPIO_Init+0x334>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	43db      	mvns	r3, r3
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	4013      	ands	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004718:	4a27      	ldr	r2, [pc, #156]	; (80047b8 <HAL_GPIO_Init+0x334>)
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800471e:	4b26      	ldr	r3, [pc, #152]	; (80047b8 <HAL_GPIO_Init+0x334>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	43db      	mvns	r3, r3
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	4013      	ands	r3, r2
 800472c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004742:	4a1d      	ldr	r2, [pc, #116]	; (80047b8 <HAL_GPIO_Init+0x334>)
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004748:	4b1b      	ldr	r3, [pc, #108]	; (80047b8 <HAL_GPIO_Init+0x334>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	43db      	mvns	r3, r3
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	4013      	ands	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800476c:	4a12      	ldr	r2, [pc, #72]	; (80047b8 <HAL_GPIO_Init+0x334>)
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	3301      	adds	r3, #1
 8004776:	61fb      	str	r3, [r7, #28]
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	2b0f      	cmp	r3, #15
 800477c:	f67f ae90 	bls.w	80044a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004780:	bf00      	nop
 8004782:	bf00      	nop
 8004784:	3724      	adds	r7, #36	; 0x24
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40023800 	.word	0x40023800
 8004794:	40013800 	.word	0x40013800
 8004798:	40020000 	.word	0x40020000
 800479c:	40020400 	.word	0x40020400
 80047a0:	40020800 	.word	0x40020800
 80047a4:	40020c00 	.word	0x40020c00
 80047a8:	40021000 	.word	0x40021000
 80047ac:	40021400 	.word	0x40021400
 80047b0:	40021800 	.word	0x40021800
 80047b4:	40021c00 	.word	0x40021c00
 80047b8:	40013c00 	.word	0x40013c00

080047bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	887b      	ldrh	r3, [r7, #2]
 80047ce:	4013      	ands	r3, r2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047d4:	2301      	movs	r3, #1
 80047d6:	73fb      	strb	r3, [r7, #15]
 80047d8:	e001      	b.n	80047de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047da:	2300      	movs	r3, #0
 80047dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047de:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	807b      	strh	r3, [r7, #2]
 80047f8:	4613      	mov	r3, r2
 80047fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047fc:	787b      	ldrb	r3, [r7, #1]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004802:	887a      	ldrh	r2, [r7, #2]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004808:	e003      	b.n	8004812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800480a:	887b      	ldrh	r3, [r7, #2]
 800480c:	041a      	lsls	r2, r3, #16
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	619a      	str	r2, [r3, #24]
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
	...

08004820 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	4603      	mov	r3, r0
 8004828:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800482a:	4b08      	ldr	r3, [pc, #32]	; (800484c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800482c:	695a      	ldr	r2, [r3, #20]
 800482e:	88fb      	ldrh	r3, [r7, #6]
 8004830:	4013      	ands	r3, r2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d006      	beq.n	8004844 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004836:	4a05      	ldr	r2, [pc, #20]	; (800484c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004838:	88fb      	ldrh	r3, [r7, #6]
 800483a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800483c:	88fb      	ldrh	r3, [r7, #6]
 800483e:	4618      	mov	r0, r3
 8004840:	f7fd f9dc 	bl	8001bfc <HAL_GPIO_EXTI_Callback>
  }
}
 8004844:	bf00      	nop
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40013c00 	.word	0x40013c00

08004850 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e264      	b.n	8004d2c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d075      	beq.n	800495a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800486e:	4ba3      	ldr	r3, [pc, #652]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 030c 	and.w	r3, r3, #12
 8004876:	2b04      	cmp	r3, #4
 8004878:	d00c      	beq.n	8004894 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800487a:	4ba0      	ldr	r3, [pc, #640]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004882:	2b08      	cmp	r3, #8
 8004884:	d112      	bne.n	80048ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004886:	4b9d      	ldr	r3, [pc, #628]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800488e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004892:	d10b      	bne.n	80048ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004894:	4b99      	ldr	r3, [pc, #612]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d05b      	beq.n	8004958 <HAL_RCC_OscConfig+0x108>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d157      	bne.n	8004958 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e23f      	b.n	8004d2c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b4:	d106      	bne.n	80048c4 <HAL_RCC_OscConfig+0x74>
 80048b6:	4b91      	ldr	r3, [pc, #580]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a90      	ldr	r2, [pc, #576]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 80048bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	e01d      	b.n	8004900 <HAL_RCC_OscConfig+0xb0>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048cc:	d10c      	bne.n	80048e8 <HAL_RCC_OscConfig+0x98>
 80048ce:	4b8b      	ldr	r3, [pc, #556]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a8a      	ldr	r2, [pc, #552]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 80048d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	4b88      	ldr	r3, [pc, #544]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a87      	ldr	r2, [pc, #540]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 80048e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	e00b      	b.n	8004900 <HAL_RCC_OscConfig+0xb0>
 80048e8:	4b84      	ldr	r3, [pc, #528]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a83      	ldr	r2, [pc, #524]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 80048ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f2:	6013      	str	r3, [r2, #0]
 80048f4:	4b81      	ldr	r3, [pc, #516]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a80      	ldr	r2, [pc, #512]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 80048fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d013      	beq.n	8004930 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004908:	f7ff f81c 	bl	8003944 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004910:	f7ff f818 	bl	8003944 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b64      	cmp	r3, #100	; 0x64
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e204      	b.n	8004d2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004922:	4b76      	ldr	r3, [pc, #472]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0f0      	beq.n	8004910 <HAL_RCC_OscConfig+0xc0>
 800492e:	e014      	b.n	800495a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004930:	f7ff f808 	bl	8003944 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004938:	f7ff f804 	bl	8003944 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b64      	cmp	r3, #100	; 0x64
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e1f0      	b.n	8004d2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800494a:	4b6c      	ldr	r3, [pc, #432]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f0      	bne.n	8004938 <HAL_RCC_OscConfig+0xe8>
 8004956:	e000      	b.n	800495a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d063      	beq.n	8004a2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004966:	4b65      	ldr	r3, [pc, #404]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 030c 	and.w	r3, r3, #12
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00b      	beq.n	800498a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004972:	4b62      	ldr	r3, [pc, #392]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800497a:	2b08      	cmp	r3, #8
 800497c:	d11c      	bne.n	80049b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800497e:	4b5f      	ldr	r3, [pc, #380]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d116      	bne.n	80049b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800498a:	4b5c      	ldr	r3, [pc, #368]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d005      	beq.n	80049a2 <HAL_RCC_OscConfig+0x152>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d001      	beq.n	80049a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e1c4      	b.n	8004d2c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a2:	4b56      	ldr	r3, [pc, #344]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	4952      	ldr	r1, [pc, #328]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049b6:	e03a      	b.n	8004a2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d020      	beq.n	8004a02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049c0:	4b4f      	ldr	r3, [pc, #316]	; (8004b00 <HAL_RCC_OscConfig+0x2b0>)
 80049c2:	2201      	movs	r2, #1
 80049c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c6:	f7fe ffbd 	bl	8003944 <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ce:	f7fe ffb9 	bl	8003944 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e1a5      	b.n	8004d2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e0:	4b46      	ldr	r3, [pc, #280]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0f0      	beq.n	80049ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ec:	4b43      	ldr	r3, [pc, #268]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	4940      	ldr	r1, [pc, #256]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	600b      	str	r3, [r1, #0]
 8004a00:	e015      	b.n	8004a2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a02:	4b3f      	ldr	r3, [pc, #252]	; (8004b00 <HAL_RCC_OscConfig+0x2b0>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a08:	f7fe ff9c 	bl	8003944 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a10:	f7fe ff98 	bl	8003944 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e184      	b.n	8004d2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a22:	4b36      	ldr	r3, [pc, #216]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f0      	bne.n	8004a10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d030      	beq.n	8004a9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d016      	beq.n	8004a70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a42:	4b30      	ldr	r3, [pc, #192]	; (8004b04 <HAL_RCC_OscConfig+0x2b4>)
 8004a44:	2201      	movs	r2, #1
 8004a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a48:	f7fe ff7c 	bl	8003944 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a50:	f7fe ff78 	bl	8003944 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e164      	b.n	8004d2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a62:	4b26      	ldr	r3, [pc, #152]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f0      	beq.n	8004a50 <HAL_RCC_OscConfig+0x200>
 8004a6e:	e015      	b.n	8004a9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a70:	4b24      	ldr	r3, [pc, #144]	; (8004b04 <HAL_RCC_OscConfig+0x2b4>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a76:	f7fe ff65 	bl	8003944 <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a7e:	f7fe ff61 	bl	8003944 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e14d      	b.n	8004d2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a90:	4b1a      	ldr	r3, [pc, #104]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 8004a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1f0      	bne.n	8004a7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 80a0 	beq.w	8004bea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aae:	4b13      	ldr	r3, [pc, #76]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10f      	bne.n	8004ada <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aba:	2300      	movs	r3, #0
 8004abc:	60bb      	str	r3, [r7, #8]
 8004abe:	4b0f      	ldr	r3, [pc, #60]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	4a0e      	ldr	r2, [pc, #56]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 8004ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8004aca:	4b0c      	ldr	r3, [pc, #48]	; (8004afc <HAL_RCC_OscConfig+0x2ac>)
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad2:	60bb      	str	r3, [r7, #8]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ada:	4b0b      	ldr	r3, [pc, #44]	; (8004b08 <HAL_RCC_OscConfig+0x2b8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d121      	bne.n	8004b2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ae6:	4b08      	ldr	r3, [pc, #32]	; (8004b08 <HAL_RCC_OscConfig+0x2b8>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a07      	ldr	r2, [pc, #28]	; (8004b08 <HAL_RCC_OscConfig+0x2b8>)
 8004aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004af2:	f7fe ff27 	bl	8003944 <HAL_GetTick>
 8004af6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af8:	e011      	b.n	8004b1e <HAL_RCC_OscConfig+0x2ce>
 8004afa:	bf00      	nop
 8004afc:	40023800 	.word	0x40023800
 8004b00:	42470000 	.word	0x42470000
 8004b04:	42470e80 	.word	0x42470e80
 8004b08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b0c:	f7fe ff1a 	bl	8003944 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e106      	b.n	8004d2c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b1e:	4b85      	ldr	r3, [pc, #532]	; (8004d34 <HAL_RCC_OscConfig+0x4e4>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0f0      	beq.n	8004b0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d106      	bne.n	8004b40 <HAL_RCC_OscConfig+0x2f0>
 8004b32:	4b81      	ldr	r3, [pc, #516]	; (8004d38 <HAL_RCC_OscConfig+0x4e8>)
 8004b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b36:	4a80      	ldr	r2, [pc, #512]	; (8004d38 <HAL_RCC_OscConfig+0x4e8>)
 8004b38:	f043 0301 	orr.w	r3, r3, #1
 8004b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b3e:	e01c      	b.n	8004b7a <HAL_RCC_OscConfig+0x32a>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	2b05      	cmp	r3, #5
 8004b46:	d10c      	bne.n	8004b62 <HAL_RCC_OscConfig+0x312>
 8004b48:	4b7b      	ldr	r3, [pc, #492]	; (8004d38 <HAL_RCC_OscConfig+0x4e8>)
 8004b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4c:	4a7a      	ldr	r2, [pc, #488]	; (8004d38 <HAL_RCC_OscConfig+0x4e8>)
 8004b4e:	f043 0304 	orr.w	r3, r3, #4
 8004b52:	6713      	str	r3, [r2, #112]	; 0x70
 8004b54:	4b78      	ldr	r3, [pc, #480]	; (8004d38 <HAL_RCC_OscConfig+0x4e8>)
 8004b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b58:	4a77      	ldr	r2, [pc, #476]	; (8004d38 <HAL_RCC_OscConfig+0x4e8>)
 8004b5a:	f043 0301 	orr.w	r3, r3, #1
 8004b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b60:	e00b      	b.n	8004b7a <HAL_RCC_OscConfig+0x32a>
 8004b62:	4b75      	ldr	r3, [pc, #468]	; (8004d38 <HAL_RCC_OscConfig+0x4e8>)
 8004b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b66:	4a74      	ldr	r2, [pc, #464]	; (8004d38 <HAL_RCC_OscConfig+0x4e8>)
 8004b68:	f023 0301 	bic.w	r3, r3, #1
 8004b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b6e:	4b72      	ldr	r3, [pc, #456]	; (8004d38 <HAL_RCC_OscConfig+0x4e8>)
 8004b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b72:	4a71      	ldr	r2, [pc, #452]	; (8004d38 <HAL_RCC_OscConfig+0x4e8>)
 8004b74:	f023 0304 	bic.w	r3, r3, #4
 8004b78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d015      	beq.n	8004bae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b82:	f7fe fedf 	bl	8003944 <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b88:	e00a      	b.n	8004ba0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b8a:	f7fe fedb 	bl	8003944 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e0c5      	b.n	8004d2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba0:	4b65      	ldr	r3, [pc, #404]	; (8004d38 <HAL_RCC_OscConfig+0x4e8>)
 8004ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0ee      	beq.n	8004b8a <HAL_RCC_OscConfig+0x33a>
 8004bac:	e014      	b.n	8004bd8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bae:	f7fe fec9 	bl	8003944 <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bb4:	e00a      	b.n	8004bcc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bb6:	f7fe fec5 	bl	8003944 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e0af      	b.n	8004d2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bcc:	4b5a      	ldr	r3, [pc, #360]	; (8004d38 <HAL_RCC_OscConfig+0x4e8>)
 8004bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1ee      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bd8:	7dfb      	ldrb	r3, [r7, #23]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d105      	bne.n	8004bea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bde:	4b56      	ldr	r3, [pc, #344]	; (8004d38 <HAL_RCC_OscConfig+0x4e8>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	4a55      	ldr	r2, [pc, #340]	; (8004d38 <HAL_RCC_OscConfig+0x4e8>)
 8004be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004be8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 809b 	beq.w	8004d2a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bf4:	4b50      	ldr	r3, [pc, #320]	; (8004d38 <HAL_RCC_OscConfig+0x4e8>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 030c 	and.w	r3, r3, #12
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d05c      	beq.n	8004cba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d141      	bne.n	8004c8c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c08:	4b4c      	ldr	r3, [pc, #304]	; (8004d3c <HAL_RCC_OscConfig+0x4ec>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0e:	f7fe fe99 	bl	8003944 <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c16:	f7fe fe95 	bl	8003944 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e081      	b.n	8004d2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c28:	4b43      	ldr	r3, [pc, #268]	; (8004d38 <HAL_RCC_OscConfig+0x4e8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1f0      	bne.n	8004c16 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	69da      	ldr	r2, [r3, #28]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	019b      	lsls	r3, r3, #6
 8004c44:	431a      	orrs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4a:	085b      	lsrs	r3, r3, #1
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	041b      	lsls	r3, r3, #16
 8004c50:	431a      	orrs	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	061b      	lsls	r3, r3, #24
 8004c58:	4937      	ldr	r1, [pc, #220]	; (8004d38 <HAL_RCC_OscConfig+0x4e8>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c5e:	4b37      	ldr	r3, [pc, #220]	; (8004d3c <HAL_RCC_OscConfig+0x4ec>)
 8004c60:	2201      	movs	r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c64:	f7fe fe6e 	bl	8003944 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c6c:	f7fe fe6a 	bl	8003944 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e056      	b.n	8004d2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c7e:	4b2e      	ldr	r3, [pc, #184]	; (8004d38 <HAL_RCC_OscConfig+0x4e8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0f0      	beq.n	8004c6c <HAL_RCC_OscConfig+0x41c>
 8004c8a:	e04e      	b.n	8004d2a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c8c:	4b2b      	ldr	r3, [pc, #172]	; (8004d3c <HAL_RCC_OscConfig+0x4ec>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c92:	f7fe fe57 	bl	8003944 <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c98:	e008      	b.n	8004cac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c9a:	f7fe fe53 	bl	8003944 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e03f      	b.n	8004d2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cac:	4b22      	ldr	r3, [pc, #136]	; (8004d38 <HAL_RCC_OscConfig+0x4e8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1f0      	bne.n	8004c9a <HAL_RCC_OscConfig+0x44a>
 8004cb8:	e037      	b.n	8004d2a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e032      	b.n	8004d2c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cc6:	4b1c      	ldr	r3, [pc, #112]	; (8004d38 <HAL_RCC_OscConfig+0x4e8>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d028      	beq.n	8004d26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d121      	bne.n	8004d26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d11a      	bne.n	8004d26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cfc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d111      	bne.n	8004d26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0c:	085b      	lsrs	r3, r3, #1
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d107      	bne.n	8004d26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d20:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d001      	beq.n	8004d2a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e000      	b.n	8004d2c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40007000 	.word	0x40007000
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	42470060 	.word	0x42470060

08004d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e0cc      	b.n	8004eee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d54:	4b68      	ldr	r3, [pc, #416]	; (8004ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d90c      	bls.n	8004d7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d62:	4b65      	ldr	r3, [pc, #404]	; (8004ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	b2d2      	uxtb	r2, r2
 8004d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6a:	4b63      	ldr	r3, [pc, #396]	; (8004ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d001      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e0b8      	b.n	8004eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d020      	beq.n	8004dca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d005      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d94:	4b59      	ldr	r3, [pc, #356]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	4a58      	ldr	r2, [pc, #352]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dac:	4b53      	ldr	r3, [pc, #332]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	4a52      	ldr	r2, [pc, #328]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004db6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db8:	4b50      	ldr	r3, [pc, #320]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	494d      	ldr	r1, [pc, #308]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d044      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d107      	bne.n	8004dee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dde:	4b47      	ldr	r3, [pc, #284]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d119      	bne.n	8004e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e07f      	b.n	8004eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d003      	beq.n	8004dfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d107      	bne.n	8004e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dfe:	4b3f      	ldr	r3, [pc, #252]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d109      	bne.n	8004e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e06f      	b.n	8004eee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e0e:	4b3b      	ldr	r3, [pc, #236]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e067      	b.n	8004eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e1e:	4b37      	ldr	r3, [pc, #220]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f023 0203 	bic.w	r2, r3, #3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	4934      	ldr	r1, [pc, #208]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e30:	f7fe fd88 	bl	8003944 <HAL_GetTick>
 8004e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e36:	e00a      	b.n	8004e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e38:	f7fe fd84 	bl	8003944 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e04f      	b.n	8004eee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e4e:	4b2b      	ldr	r3, [pc, #172]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 020c 	and.w	r2, r3, #12
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d1eb      	bne.n	8004e38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e60:	4b25      	ldr	r3, [pc, #148]	; (8004ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d20c      	bcs.n	8004e88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6e:	4b22      	ldr	r3, [pc, #136]	; (8004ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e76:	4b20      	ldr	r3, [pc, #128]	; (8004ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d001      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e032      	b.n	8004eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d008      	beq.n	8004ea6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e94:	4b19      	ldr	r3, [pc, #100]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	4916      	ldr	r1, [pc, #88]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d009      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eb2:	4b12      	ldr	r3, [pc, #72]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	490e      	ldr	r1, [pc, #56]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ec6:	f000 f821 	bl	8004f0c <HAL_RCC_GetSysClockFreq>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	091b      	lsrs	r3, r3, #4
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	490a      	ldr	r1, [pc, #40]	; (8004f00 <HAL_RCC_ClockConfig+0x1c0>)
 8004ed8:	5ccb      	ldrb	r3, [r1, r3]
 8004eda:	fa22 f303 	lsr.w	r3, r2, r3
 8004ede:	4a09      	ldr	r2, [pc, #36]	; (8004f04 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ee2:	4b09      	ldr	r3, [pc, #36]	; (8004f08 <HAL_RCC_ClockConfig+0x1c8>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fe fce8 	bl	80038bc <HAL_InitTick>

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40023c00 	.word	0x40023c00
 8004efc:	40023800 	.word	0x40023800
 8004f00:	08008090 	.word	0x08008090
 8004f04:	20000000 	.word	0x20000000
 8004f08:	20000004 	.word	0x20000004

08004f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004f10:	b084      	sub	sp, #16
 8004f12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	607b      	str	r3, [r7, #4]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f24:	4b67      	ldr	r3, [pc, #412]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 030c 	and.w	r3, r3, #12
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d00d      	beq.n	8004f4c <HAL_RCC_GetSysClockFreq+0x40>
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	f200 80bd 	bhi.w	80050b0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <HAL_RCC_GetSysClockFreq+0x34>
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d003      	beq.n	8004f46 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f3e:	e0b7      	b.n	80050b0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f40:	4b61      	ldr	r3, [pc, #388]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004f42:	60bb      	str	r3, [r7, #8]
       break;
 8004f44:	e0b7      	b.n	80050b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f46:	4b61      	ldr	r3, [pc, #388]	; (80050cc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004f48:	60bb      	str	r3, [r7, #8]
      break;
 8004f4a:	e0b4      	b.n	80050b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f4c:	4b5d      	ldr	r3, [pc, #372]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f56:	4b5b      	ldr	r3, [pc, #364]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d04d      	beq.n	8004ffe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f62:	4b58      	ldr	r3, [pc, #352]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	099b      	lsrs	r3, r3, #6
 8004f68:	461a      	mov	r2, r3
 8004f6a:	f04f 0300 	mov.w	r3, #0
 8004f6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f72:	f04f 0100 	mov.w	r1, #0
 8004f76:	ea02 0800 	and.w	r8, r2, r0
 8004f7a:	ea03 0901 	and.w	r9, r3, r1
 8004f7e:	4640      	mov	r0, r8
 8004f80:	4649      	mov	r1, r9
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	f04f 0300 	mov.w	r3, #0
 8004f8a:	014b      	lsls	r3, r1, #5
 8004f8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f90:	0142      	lsls	r2, r0, #5
 8004f92:	4610      	mov	r0, r2
 8004f94:	4619      	mov	r1, r3
 8004f96:	ebb0 0008 	subs.w	r0, r0, r8
 8004f9a:	eb61 0109 	sbc.w	r1, r1, r9
 8004f9e:	f04f 0200 	mov.w	r2, #0
 8004fa2:	f04f 0300 	mov.w	r3, #0
 8004fa6:	018b      	lsls	r3, r1, #6
 8004fa8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004fac:	0182      	lsls	r2, r0, #6
 8004fae:	1a12      	subs	r2, r2, r0
 8004fb0:	eb63 0301 	sbc.w	r3, r3, r1
 8004fb4:	f04f 0000 	mov.w	r0, #0
 8004fb8:	f04f 0100 	mov.w	r1, #0
 8004fbc:	00d9      	lsls	r1, r3, #3
 8004fbe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fc2:	00d0      	lsls	r0, r2, #3
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	eb12 0208 	adds.w	r2, r2, r8
 8004fcc:	eb43 0309 	adc.w	r3, r3, r9
 8004fd0:	f04f 0000 	mov.w	r0, #0
 8004fd4:	f04f 0100 	mov.w	r1, #0
 8004fd8:	0259      	lsls	r1, r3, #9
 8004fda:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004fde:	0250      	lsls	r0, r2, #9
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	461a      	mov	r2, r3
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	f7fb f946 	bl	8000280 <__aeabi_uldivmod>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	e04a      	b.n	8005094 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ffe:	4b31      	ldr	r3, [pc, #196]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	099b      	lsrs	r3, r3, #6
 8005004:	461a      	mov	r2, r3
 8005006:	f04f 0300 	mov.w	r3, #0
 800500a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800500e:	f04f 0100 	mov.w	r1, #0
 8005012:	ea02 0400 	and.w	r4, r2, r0
 8005016:	ea03 0501 	and.w	r5, r3, r1
 800501a:	4620      	mov	r0, r4
 800501c:	4629      	mov	r1, r5
 800501e:	f04f 0200 	mov.w	r2, #0
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	014b      	lsls	r3, r1, #5
 8005028:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800502c:	0142      	lsls	r2, r0, #5
 800502e:	4610      	mov	r0, r2
 8005030:	4619      	mov	r1, r3
 8005032:	1b00      	subs	r0, r0, r4
 8005034:	eb61 0105 	sbc.w	r1, r1, r5
 8005038:	f04f 0200 	mov.w	r2, #0
 800503c:	f04f 0300 	mov.w	r3, #0
 8005040:	018b      	lsls	r3, r1, #6
 8005042:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005046:	0182      	lsls	r2, r0, #6
 8005048:	1a12      	subs	r2, r2, r0
 800504a:	eb63 0301 	sbc.w	r3, r3, r1
 800504e:	f04f 0000 	mov.w	r0, #0
 8005052:	f04f 0100 	mov.w	r1, #0
 8005056:	00d9      	lsls	r1, r3, #3
 8005058:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800505c:	00d0      	lsls	r0, r2, #3
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	1912      	adds	r2, r2, r4
 8005064:	eb45 0303 	adc.w	r3, r5, r3
 8005068:	f04f 0000 	mov.w	r0, #0
 800506c:	f04f 0100 	mov.w	r1, #0
 8005070:	0299      	lsls	r1, r3, #10
 8005072:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005076:	0290      	lsls	r0, r2, #10
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	4610      	mov	r0, r2
 800507e:	4619      	mov	r1, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	461a      	mov	r2, r3
 8005084:	f04f 0300 	mov.w	r3, #0
 8005088:	f7fb f8fa 	bl	8000280 <__aeabi_uldivmod>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4613      	mov	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005094:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	0c1b      	lsrs	r3, r3, #16
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	3301      	adds	r3, #1
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ac:	60bb      	str	r3, [r7, #8]
      break;
 80050ae:	e002      	b.n	80050b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80050b2:	60bb      	str	r3, [r7, #8]
      break;
 80050b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050b6:	68bb      	ldr	r3, [r7, #8]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80050c2:	bf00      	nop
 80050c4:	40023800 	.word	0x40023800
 80050c8:	00f42400 	.word	0x00f42400
 80050cc:	007a1200 	.word	0x007a1200

080050d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050d4:	4b03      	ldr	r3, [pc, #12]	; (80050e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050d6:	681b      	ldr	r3, [r3, #0]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	20000000 	.word	0x20000000

080050e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050ec:	f7ff fff0 	bl	80050d0 <HAL_RCC_GetHCLKFreq>
 80050f0:	4602      	mov	r2, r0
 80050f2:	4b05      	ldr	r3, [pc, #20]	; (8005108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	0a9b      	lsrs	r3, r3, #10
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	4903      	ldr	r1, [pc, #12]	; (800510c <HAL_RCC_GetPCLK1Freq+0x24>)
 80050fe:	5ccb      	ldrb	r3, [r1, r3]
 8005100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005104:	4618      	mov	r0, r3
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40023800 	.word	0x40023800
 800510c:	080080a0 	.word	0x080080a0

08005110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005114:	f7ff ffdc 	bl	80050d0 <HAL_RCC_GetHCLKFreq>
 8005118:	4602      	mov	r2, r0
 800511a:	4b05      	ldr	r3, [pc, #20]	; (8005130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	0b5b      	lsrs	r3, r3, #13
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	4903      	ldr	r1, [pc, #12]	; (8005134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005126:	5ccb      	ldrb	r3, [r1, r3]
 8005128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800512c:	4618      	mov	r0, r3
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40023800 	.word	0x40023800
 8005134:	080080a0 	.word	0x080080a0

08005138 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e041      	b.n	80051ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d106      	bne.n	8005164 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7fd fffa 	bl	8003158 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3304      	adds	r3, #4
 8005174:	4619      	mov	r1, r3
 8005176:	4610      	mov	r0, r2
 8005178:	f000 fb42 	bl	8005800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
	...

080051d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d001      	beq.n	80051f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e046      	b.n	800527e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a23      	ldr	r2, [pc, #140]	; (800528c <HAL_TIM_Base_Start+0xb4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d022      	beq.n	8005248 <HAL_TIM_Base_Start+0x70>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520a:	d01d      	beq.n	8005248 <HAL_TIM_Base_Start+0x70>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a1f      	ldr	r2, [pc, #124]	; (8005290 <HAL_TIM_Base_Start+0xb8>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d018      	beq.n	8005248 <HAL_TIM_Base_Start+0x70>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a1e      	ldr	r2, [pc, #120]	; (8005294 <HAL_TIM_Base_Start+0xbc>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d013      	beq.n	8005248 <HAL_TIM_Base_Start+0x70>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a1c      	ldr	r2, [pc, #112]	; (8005298 <HAL_TIM_Base_Start+0xc0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00e      	beq.n	8005248 <HAL_TIM_Base_Start+0x70>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a1b      	ldr	r2, [pc, #108]	; (800529c <HAL_TIM_Base_Start+0xc4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d009      	beq.n	8005248 <HAL_TIM_Base_Start+0x70>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a19      	ldr	r2, [pc, #100]	; (80052a0 <HAL_TIM_Base_Start+0xc8>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d004      	beq.n	8005248 <HAL_TIM_Base_Start+0x70>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a18      	ldr	r2, [pc, #96]	; (80052a4 <HAL_TIM_Base_Start+0xcc>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d111      	bne.n	800526c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b06      	cmp	r3, #6
 8005258:	d010      	beq.n	800527c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f042 0201 	orr.w	r2, r2, #1
 8005268:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526a:	e007      	b.n	800527c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0201 	orr.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40010000 	.word	0x40010000
 8005290:	40000400 	.word	0x40000400
 8005294:	40000800 	.word	0x40000800
 8005298:	40000c00 	.word	0x40000c00
 800529c:	40010400 	.word	0x40010400
 80052a0:	40014000 	.word	0x40014000
 80052a4:	40001800 	.word	0x40001800

080052a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e041      	b.n	800533e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d106      	bne.n	80052d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f839 	bl	8005346 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3304      	adds	r3, #4
 80052e4:	4619      	mov	r1, r3
 80052e6:	4610      	mov	r0, r2
 80052e8:	f000 fa8a 	bl	8005800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
	...

0800535c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d109      	bne.n	8005380 <HAL_TIM_PWM_Start+0x24>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b01      	cmp	r3, #1
 8005376:	bf14      	ite	ne
 8005378:	2301      	movne	r3, #1
 800537a:	2300      	moveq	r3, #0
 800537c:	b2db      	uxtb	r3, r3
 800537e:	e022      	b.n	80053c6 <HAL_TIM_PWM_Start+0x6a>
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2b04      	cmp	r3, #4
 8005384:	d109      	bne.n	800539a <HAL_TIM_PWM_Start+0x3e>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b01      	cmp	r3, #1
 8005390:	bf14      	ite	ne
 8005392:	2301      	movne	r3, #1
 8005394:	2300      	moveq	r3, #0
 8005396:	b2db      	uxtb	r3, r3
 8005398:	e015      	b.n	80053c6 <HAL_TIM_PWM_Start+0x6a>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b08      	cmp	r3, #8
 800539e:	d109      	bne.n	80053b4 <HAL_TIM_PWM_Start+0x58>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	bf14      	ite	ne
 80053ac:	2301      	movne	r3, #1
 80053ae:	2300      	moveq	r3, #0
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	e008      	b.n	80053c6 <HAL_TIM_PWM_Start+0x6a>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b01      	cmp	r3, #1
 80053be:	bf14      	ite	ne
 80053c0:	2301      	movne	r3, #1
 80053c2:	2300      	moveq	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e07c      	b.n	80054c8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d104      	bne.n	80053de <HAL_TIM_PWM_Start+0x82>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053dc:	e013      	b.n	8005406 <HAL_TIM_PWM_Start+0xaa>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d104      	bne.n	80053ee <HAL_TIM_PWM_Start+0x92>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053ec:	e00b      	b.n	8005406 <HAL_TIM_PWM_Start+0xaa>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d104      	bne.n	80053fe <HAL_TIM_PWM_Start+0xa2>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053fc:	e003      	b.n	8005406 <HAL_TIM_PWM_Start+0xaa>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2202      	movs	r2, #2
 8005402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2201      	movs	r2, #1
 800540c:	6839      	ldr	r1, [r7, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f000 fce0 	bl	8005dd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a2d      	ldr	r2, [pc, #180]	; (80054d0 <HAL_TIM_PWM_Start+0x174>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d004      	beq.n	8005428 <HAL_TIM_PWM_Start+0xcc>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a2c      	ldr	r2, [pc, #176]	; (80054d4 <HAL_TIM_PWM_Start+0x178>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d101      	bne.n	800542c <HAL_TIM_PWM_Start+0xd0>
 8005428:	2301      	movs	r3, #1
 800542a:	e000      	b.n	800542e <HAL_TIM_PWM_Start+0xd2>
 800542c:	2300      	movs	r3, #0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d007      	beq.n	8005442 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005440:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a22      	ldr	r2, [pc, #136]	; (80054d0 <HAL_TIM_PWM_Start+0x174>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d022      	beq.n	8005492 <HAL_TIM_PWM_Start+0x136>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005454:	d01d      	beq.n	8005492 <HAL_TIM_PWM_Start+0x136>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1f      	ldr	r2, [pc, #124]	; (80054d8 <HAL_TIM_PWM_Start+0x17c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d018      	beq.n	8005492 <HAL_TIM_PWM_Start+0x136>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a1d      	ldr	r2, [pc, #116]	; (80054dc <HAL_TIM_PWM_Start+0x180>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d013      	beq.n	8005492 <HAL_TIM_PWM_Start+0x136>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a1c      	ldr	r2, [pc, #112]	; (80054e0 <HAL_TIM_PWM_Start+0x184>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00e      	beq.n	8005492 <HAL_TIM_PWM_Start+0x136>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a16      	ldr	r2, [pc, #88]	; (80054d4 <HAL_TIM_PWM_Start+0x178>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d009      	beq.n	8005492 <HAL_TIM_PWM_Start+0x136>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a18      	ldr	r2, [pc, #96]	; (80054e4 <HAL_TIM_PWM_Start+0x188>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d004      	beq.n	8005492 <HAL_TIM_PWM_Start+0x136>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a16      	ldr	r2, [pc, #88]	; (80054e8 <HAL_TIM_PWM_Start+0x18c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d111      	bne.n	80054b6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b06      	cmp	r3, #6
 80054a2:	d010      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0201 	orr.w	r2, r2, #1
 80054b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b4:	e007      	b.n	80054c6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0201 	orr.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40010000 	.word	0x40010000
 80054d4:	40010400 	.word	0x40010400
 80054d8:	40000400 	.word	0x40000400
 80054dc:	40000800 	.word	0x40000800
 80054e0:	40000c00 	.word	0x40000c00
 80054e4:	40014000 	.word	0x40014000
 80054e8:	40001800 	.word	0x40001800

080054ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005502:	2b01      	cmp	r3, #1
 8005504:	d101      	bne.n	800550a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005506:	2302      	movs	r3, #2
 8005508:	e0ae      	b.n	8005668 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b0c      	cmp	r3, #12
 8005516:	f200 809f 	bhi.w	8005658 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800551a:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800551c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005520:	08005555 	.word	0x08005555
 8005524:	08005659 	.word	0x08005659
 8005528:	08005659 	.word	0x08005659
 800552c:	08005659 	.word	0x08005659
 8005530:	08005595 	.word	0x08005595
 8005534:	08005659 	.word	0x08005659
 8005538:	08005659 	.word	0x08005659
 800553c:	08005659 	.word	0x08005659
 8005540:	080055d7 	.word	0x080055d7
 8005544:	08005659 	.word	0x08005659
 8005548:	08005659 	.word	0x08005659
 800554c:	08005659 	.word	0x08005659
 8005550:	08005617 	.word	0x08005617
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	4618      	mov	r0, r3
 800555c:	f000 f9f0 	bl	8005940 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	699a      	ldr	r2, [r3, #24]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0208 	orr.w	r2, r2, #8
 800556e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699a      	ldr	r2, [r3, #24]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0204 	bic.w	r2, r2, #4
 800557e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6999      	ldr	r1, [r3, #24]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	691a      	ldr	r2, [r3, #16]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	430a      	orrs	r2, r1
 8005590:	619a      	str	r2, [r3, #24]
      break;
 8005592:	e064      	b.n	800565e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68b9      	ldr	r1, [r7, #8]
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fa40 	bl	8005a20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6999      	ldr	r1, [r3, #24]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	021a      	lsls	r2, r3, #8
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	619a      	str	r2, [r3, #24]
      break;
 80055d4:	e043      	b.n	800565e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68b9      	ldr	r1, [r7, #8]
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fa95 	bl	8005b0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69da      	ldr	r2, [r3, #28]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 0208 	orr.w	r2, r2, #8
 80055f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0204 	bic.w	r2, r2, #4
 8005600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69d9      	ldr	r1, [r3, #28]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	61da      	str	r2, [r3, #28]
      break;
 8005614:	e023      	b.n	800565e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	4618      	mov	r0, r3
 800561e:	f000 fae9 	bl	8005bf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	69da      	ldr	r2, [r3, #28]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69d9      	ldr	r1, [r3, #28]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	021a      	lsls	r2, r3, #8
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	61da      	str	r2, [r3, #28]
      break;
 8005656:	e002      	b.n	800565e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	75fb      	strb	r3, [r7, #23]
      break;
 800565c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005666:	7dfb      	ldrb	r3, [r7, #23]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800567a:	2300      	movs	r3, #0
 800567c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005684:	2b01      	cmp	r3, #1
 8005686:	d101      	bne.n	800568c <HAL_TIM_ConfigClockSource+0x1c>
 8005688:	2302      	movs	r3, #2
 800568a:	e0b4      	b.n	80057f6 <HAL_TIM_ConfigClockSource+0x186>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c4:	d03e      	beq.n	8005744 <HAL_TIM_ConfigClockSource+0xd4>
 80056c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ca:	f200 8087 	bhi.w	80057dc <HAL_TIM_ConfigClockSource+0x16c>
 80056ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d2:	f000 8086 	beq.w	80057e2 <HAL_TIM_ConfigClockSource+0x172>
 80056d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056da:	d87f      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x16c>
 80056dc:	2b70      	cmp	r3, #112	; 0x70
 80056de:	d01a      	beq.n	8005716 <HAL_TIM_ConfigClockSource+0xa6>
 80056e0:	2b70      	cmp	r3, #112	; 0x70
 80056e2:	d87b      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x16c>
 80056e4:	2b60      	cmp	r3, #96	; 0x60
 80056e6:	d050      	beq.n	800578a <HAL_TIM_ConfigClockSource+0x11a>
 80056e8:	2b60      	cmp	r3, #96	; 0x60
 80056ea:	d877      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x16c>
 80056ec:	2b50      	cmp	r3, #80	; 0x50
 80056ee:	d03c      	beq.n	800576a <HAL_TIM_ConfigClockSource+0xfa>
 80056f0:	2b50      	cmp	r3, #80	; 0x50
 80056f2:	d873      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x16c>
 80056f4:	2b40      	cmp	r3, #64	; 0x40
 80056f6:	d058      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0x13a>
 80056f8:	2b40      	cmp	r3, #64	; 0x40
 80056fa:	d86f      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x16c>
 80056fc:	2b30      	cmp	r3, #48	; 0x30
 80056fe:	d064      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x15a>
 8005700:	2b30      	cmp	r3, #48	; 0x30
 8005702:	d86b      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x16c>
 8005704:	2b20      	cmp	r3, #32
 8005706:	d060      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x15a>
 8005708:	2b20      	cmp	r3, #32
 800570a:	d867      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x16c>
 800570c:	2b00      	cmp	r3, #0
 800570e:	d05c      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x15a>
 8005710:	2b10      	cmp	r3, #16
 8005712:	d05a      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x15a>
 8005714:	e062      	b.n	80057dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6818      	ldr	r0, [r3, #0]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	6899      	ldr	r1, [r3, #8]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f000 fb35 	bl	8005d94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005738:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	609a      	str	r2, [r3, #8]
      break;
 8005742:	e04f      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6818      	ldr	r0, [r3, #0]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	6899      	ldr	r1, [r3, #8]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f000 fb1e 	bl	8005d94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689a      	ldr	r2, [r3, #8]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005766:	609a      	str	r2, [r3, #8]
      break;
 8005768:	e03c      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6818      	ldr	r0, [r3, #0]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	6859      	ldr	r1, [r3, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	461a      	mov	r2, r3
 8005778:	f000 fa92 	bl	8005ca0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2150      	movs	r1, #80	; 0x50
 8005782:	4618      	mov	r0, r3
 8005784:	f000 faeb 	bl	8005d5e <TIM_ITRx_SetConfig>
      break;
 8005788:	e02c      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	6859      	ldr	r1, [r3, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	461a      	mov	r2, r3
 8005798:	f000 fab1 	bl	8005cfe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2160      	movs	r1, #96	; 0x60
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 fadb 	bl	8005d5e <TIM_ITRx_SetConfig>
      break;
 80057a8:	e01c      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	6859      	ldr	r1, [r3, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	461a      	mov	r2, r3
 80057b8:	f000 fa72 	bl	8005ca0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2140      	movs	r1, #64	; 0x40
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 facb 	bl	8005d5e <TIM_ITRx_SetConfig>
      break;
 80057c8:	e00c      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4619      	mov	r1, r3
 80057d4:	4610      	mov	r0, r2
 80057d6:	f000 fac2 	bl	8005d5e <TIM_ITRx_SetConfig>
      break;
 80057da:	e003      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	73fb      	strb	r3, [r7, #15]
      break;
 80057e0:	e000      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a40      	ldr	r2, [pc, #256]	; (8005914 <TIM_Base_SetConfig+0x114>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d013      	beq.n	8005840 <TIM_Base_SetConfig+0x40>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800581e:	d00f      	beq.n	8005840 <TIM_Base_SetConfig+0x40>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a3d      	ldr	r2, [pc, #244]	; (8005918 <TIM_Base_SetConfig+0x118>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d00b      	beq.n	8005840 <TIM_Base_SetConfig+0x40>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a3c      	ldr	r2, [pc, #240]	; (800591c <TIM_Base_SetConfig+0x11c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d007      	beq.n	8005840 <TIM_Base_SetConfig+0x40>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a3b      	ldr	r2, [pc, #236]	; (8005920 <TIM_Base_SetConfig+0x120>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d003      	beq.n	8005840 <TIM_Base_SetConfig+0x40>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a3a      	ldr	r2, [pc, #232]	; (8005924 <TIM_Base_SetConfig+0x124>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d108      	bne.n	8005852 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a2f      	ldr	r2, [pc, #188]	; (8005914 <TIM_Base_SetConfig+0x114>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d02b      	beq.n	80058b2 <TIM_Base_SetConfig+0xb2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005860:	d027      	beq.n	80058b2 <TIM_Base_SetConfig+0xb2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a2c      	ldr	r2, [pc, #176]	; (8005918 <TIM_Base_SetConfig+0x118>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d023      	beq.n	80058b2 <TIM_Base_SetConfig+0xb2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a2b      	ldr	r2, [pc, #172]	; (800591c <TIM_Base_SetConfig+0x11c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d01f      	beq.n	80058b2 <TIM_Base_SetConfig+0xb2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a2a      	ldr	r2, [pc, #168]	; (8005920 <TIM_Base_SetConfig+0x120>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d01b      	beq.n	80058b2 <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a29      	ldr	r2, [pc, #164]	; (8005924 <TIM_Base_SetConfig+0x124>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d017      	beq.n	80058b2 <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a28      	ldr	r2, [pc, #160]	; (8005928 <TIM_Base_SetConfig+0x128>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d013      	beq.n	80058b2 <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a27      	ldr	r2, [pc, #156]	; (800592c <TIM_Base_SetConfig+0x12c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00f      	beq.n	80058b2 <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a26      	ldr	r2, [pc, #152]	; (8005930 <TIM_Base_SetConfig+0x130>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00b      	beq.n	80058b2 <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a25      	ldr	r2, [pc, #148]	; (8005934 <TIM_Base_SetConfig+0x134>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d007      	beq.n	80058b2 <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a24      	ldr	r2, [pc, #144]	; (8005938 <TIM_Base_SetConfig+0x138>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d003      	beq.n	80058b2 <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a23      	ldr	r2, [pc, #140]	; (800593c <TIM_Base_SetConfig+0x13c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d108      	bne.n	80058c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a0a      	ldr	r2, [pc, #40]	; (8005914 <TIM_Base_SetConfig+0x114>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_Base_SetConfig+0xf8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a0c      	ldr	r2, [pc, #48]	; (8005924 <TIM_Base_SetConfig+0x124>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d103      	bne.n	8005900 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	691a      	ldr	r2, [r3, #16]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	615a      	str	r2, [r3, #20]
}
 8005906:	bf00      	nop
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	40010000 	.word	0x40010000
 8005918:	40000400 	.word	0x40000400
 800591c:	40000800 	.word	0x40000800
 8005920:	40000c00 	.word	0x40000c00
 8005924:	40010400 	.word	0x40010400
 8005928:	40014000 	.word	0x40014000
 800592c:	40014400 	.word	0x40014400
 8005930:	40014800 	.word	0x40014800
 8005934:	40001800 	.word	0x40001800
 8005938:	40001c00 	.word	0x40001c00
 800593c:	40002000 	.word	0x40002000

08005940 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005940:	b480      	push	{r7}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	f023 0201 	bic.w	r2, r3, #1
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0303 	bic.w	r3, r3, #3
 8005976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f023 0302 	bic.w	r3, r3, #2
 8005988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	4313      	orrs	r3, r2
 8005992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a20      	ldr	r2, [pc, #128]	; (8005a18 <TIM_OC1_SetConfig+0xd8>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d003      	beq.n	80059a4 <TIM_OC1_SetConfig+0x64>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a1f      	ldr	r2, [pc, #124]	; (8005a1c <TIM_OC1_SetConfig+0xdc>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d10c      	bne.n	80059be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f023 0308 	bic.w	r3, r3, #8
 80059aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f023 0304 	bic.w	r3, r3, #4
 80059bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a15      	ldr	r2, [pc, #84]	; (8005a18 <TIM_OC1_SetConfig+0xd8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d003      	beq.n	80059ce <TIM_OC1_SetConfig+0x8e>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a14      	ldr	r2, [pc, #80]	; (8005a1c <TIM_OC1_SetConfig+0xdc>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d111      	bne.n	80059f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	621a      	str	r2, [r3, #32]
}
 8005a0c:	bf00      	nop
 8005a0e:	371c      	adds	r7, #28
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	40010000 	.word	0x40010000
 8005a1c:	40010400 	.word	0x40010400

08005a20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	f023 0210 	bic.w	r2, r3, #16
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	021b      	lsls	r3, r3, #8
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f023 0320 	bic.w	r3, r3, #32
 8005a6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a22      	ldr	r2, [pc, #136]	; (8005b04 <TIM_OC2_SetConfig+0xe4>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d003      	beq.n	8005a88 <TIM_OC2_SetConfig+0x68>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a21      	ldr	r2, [pc, #132]	; (8005b08 <TIM_OC2_SetConfig+0xe8>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d10d      	bne.n	8005aa4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a17      	ldr	r2, [pc, #92]	; (8005b04 <TIM_OC2_SetConfig+0xe4>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d003      	beq.n	8005ab4 <TIM_OC2_SetConfig+0x94>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a16      	ldr	r2, [pc, #88]	; (8005b08 <TIM_OC2_SetConfig+0xe8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d113      	bne.n	8005adc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	621a      	str	r2, [r3, #32]
}
 8005af6:	bf00      	nop
 8005af8:	371c      	adds	r7, #28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	40010000 	.word	0x40010000
 8005b08:	40010400 	.word	0x40010400

08005b0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0303 	bic.w	r3, r3, #3
 8005b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	021b      	lsls	r3, r3, #8
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a21      	ldr	r2, [pc, #132]	; (8005bec <TIM_OC3_SetConfig+0xe0>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d003      	beq.n	8005b72 <TIM_OC3_SetConfig+0x66>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a20      	ldr	r2, [pc, #128]	; (8005bf0 <TIM_OC3_SetConfig+0xe4>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d10d      	bne.n	8005b8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	021b      	lsls	r3, r3, #8
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a16      	ldr	r2, [pc, #88]	; (8005bec <TIM_OC3_SetConfig+0xe0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d003      	beq.n	8005b9e <TIM_OC3_SetConfig+0x92>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a15      	ldr	r2, [pc, #84]	; (8005bf0 <TIM_OC3_SetConfig+0xe4>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d113      	bne.n	8005bc6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	621a      	str	r2, [r3, #32]
}
 8005be0:	bf00      	nop
 8005be2:	371c      	adds	r7, #28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	40010000 	.word	0x40010000
 8005bf0:	40010400 	.word	0x40010400

08005bf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b087      	sub	sp, #28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	021b      	lsls	r3, r3, #8
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	031b      	lsls	r3, r3, #12
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a12      	ldr	r2, [pc, #72]	; (8005c98 <TIM_OC4_SetConfig+0xa4>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d003      	beq.n	8005c5c <TIM_OC4_SetConfig+0x68>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a11      	ldr	r2, [pc, #68]	; (8005c9c <TIM_OC4_SetConfig+0xa8>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d109      	bne.n	8005c70 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	019b      	lsls	r3, r3, #6
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	621a      	str	r2, [r3, #32]
}
 8005c8a:	bf00      	nop
 8005c8c:	371c      	adds	r7, #28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	40010000 	.word	0x40010000
 8005c9c:	40010400 	.word	0x40010400

08005ca0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	f023 0201 	bic.w	r2, r3, #1
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f023 030a 	bic.w	r3, r3, #10
 8005cdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	621a      	str	r2, [r3, #32]
}
 8005cf2:	bf00      	nop
 8005cf4:	371c      	adds	r7, #28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b087      	sub	sp, #28
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	f023 0210 	bic.w	r2, r3, #16
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	031b      	lsls	r3, r3, #12
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	621a      	str	r2, [r3, #32]
}
 8005d52:	bf00      	nop
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b085      	sub	sp, #20
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f043 0307 	orr.w	r3, r3, #7
 8005d80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	609a      	str	r2, [r3, #8]
}
 8005d88:	bf00      	nop
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	021a      	lsls	r2, r3, #8
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	609a      	str	r2, [r3, #8]
}
 8005dc8:	bf00      	nop
 8005dca:	371c      	adds	r7, #28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	2201      	movs	r2, #1
 8005de8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a1a      	ldr	r2, [r3, #32]
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	43db      	mvns	r3, r3
 8005df6:	401a      	ands	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a1a      	ldr	r2, [r3, #32]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f003 031f 	and.w	r3, r3, #31
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	621a      	str	r2, [r3, #32]
}
 8005e12:	bf00      	nop
 8005e14:	371c      	adds	r7, #28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
	...

08005e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e34:	2302      	movs	r3, #2
 8005e36:	e05a      	b.n	8005eee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a21      	ldr	r2, [pc, #132]	; (8005efc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d022      	beq.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e84:	d01d      	beq.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a1d      	ldr	r2, [pc, #116]	; (8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d018      	beq.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a1b      	ldr	r2, [pc, #108]	; (8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d013      	beq.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a1a      	ldr	r2, [pc, #104]	; (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00e      	beq.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a18      	ldr	r2, [pc, #96]	; (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d009      	beq.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a17      	ldr	r2, [pc, #92]	; (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d004      	beq.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a15      	ldr	r2, [pc, #84]	; (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d10c      	bne.n	8005edc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ec8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	40010000 	.word	0x40010000
 8005f00:	40000400 	.word	0x40000400
 8005f04:	40000800 	.word	0x40000800
 8005f08:	40000c00 	.word	0x40000c00
 8005f0c:	40010400 	.word	0x40010400
 8005f10:	40014000 	.word	0x40014000
 8005f14:	40001800 	.word	0x40001800

08005f18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d101      	bne.n	8005f34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f30:	2302      	movs	r3, #2
 8005f32:	e03d      	b.n	8005fb0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e03f      	b.n	800604e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d106      	bne.n	8005fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fd fa8a 	bl	80034fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2224      	movs	r2, #36	; 0x24
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fe1d 	bl	8006c40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	691a      	ldr	r2, [r3, #16]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	695a      	ldr	r2, [r3, #20]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2220      	movs	r2, #32
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2220      	movs	r2, #32
 8006048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b08a      	sub	sp, #40	; 0x28
 800605a:	af02      	add	r7, sp, #8
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	603b      	str	r3, [r7, #0]
 8006062:	4613      	mov	r3, r2
 8006064:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b20      	cmp	r3, #32
 8006074:	d17c      	bne.n	8006170 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <HAL_UART_Transmit+0x2c>
 800607c:	88fb      	ldrh	r3, [r7, #6]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e075      	b.n	8006172 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800608c:	2b01      	cmp	r3, #1
 800608e:	d101      	bne.n	8006094 <HAL_UART_Transmit+0x3e>
 8006090:	2302      	movs	r3, #2
 8006092:	e06e      	b.n	8006172 <HAL_UART_Transmit+0x11c>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2221      	movs	r2, #33	; 0x21
 80060a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060aa:	f7fd fc4b 	bl	8003944 <HAL_GetTick>
 80060ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	88fa      	ldrh	r2, [r7, #6]
 80060b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	88fa      	ldrh	r2, [r7, #6]
 80060ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060c4:	d108      	bne.n	80060d8 <HAL_UART_Transmit+0x82>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d104      	bne.n	80060d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80060ce:	2300      	movs	r3, #0
 80060d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	61bb      	str	r3, [r7, #24]
 80060d6:	e003      	b.n	80060e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060dc:	2300      	movs	r3, #0
 80060de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80060e8:	e02a      	b.n	8006140 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2200      	movs	r2, #0
 80060f2:	2180      	movs	r1, #128	; 0x80
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 fb9b 	bl	8006830 <UART_WaitOnFlagUntilTimeout>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e036      	b.n	8006172 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10b      	bne.n	8006122 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006118:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	3302      	adds	r3, #2
 800611e:	61bb      	str	r3, [r7, #24]
 8006120:	e007      	b.n	8006132 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	781a      	ldrb	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	3301      	adds	r3, #1
 8006130:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006136:	b29b      	uxth	r3, r3
 8006138:	3b01      	subs	r3, #1
 800613a:	b29a      	uxth	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006144:	b29b      	uxth	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1cf      	bne.n	80060ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	2200      	movs	r2, #0
 8006152:	2140      	movs	r1, #64	; 0x40
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 fb6b 	bl	8006830 <UART_WaitOnFlagUntilTimeout>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e006      	b.n	8006172 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2220      	movs	r2, #32
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800616c:	2300      	movs	r3, #0
 800616e:	e000      	b.n	8006172 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006170:	2302      	movs	r3, #2
  }
}
 8006172:	4618      	mov	r0, r3
 8006174:	3720      	adds	r7, #32
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b08a      	sub	sp, #40	; 0x28
 800617e:	af02      	add	r7, sp, #8
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	603b      	str	r3, [r7, #0]
 8006186:	4613      	mov	r3, r2
 8006188:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b20      	cmp	r3, #32
 8006198:	f040 808c 	bne.w	80062b4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <HAL_UART_Receive+0x2e>
 80061a2:	88fb      	ldrh	r3, [r7, #6]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e084      	b.n	80062b6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <HAL_UART_Receive+0x40>
 80061b6:	2302      	movs	r3, #2
 80061b8:	e07d      	b.n	80062b6 <HAL_UART_Receive+0x13c>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2222      	movs	r2, #34	; 0x22
 80061cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061d6:	f7fd fbb5 	bl	8003944 <HAL_GetTick>
 80061da:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	88fa      	ldrh	r2, [r7, #6]
 80061e0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	88fa      	ldrh	r2, [r7, #6]
 80061e6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061f0:	d108      	bne.n	8006204 <HAL_UART_Receive+0x8a>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d104      	bne.n	8006204 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80061fa:	2300      	movs	r3, #0
 80061fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	61bb      	str	r3, [r7, #24]
 8006202:	e003      	b.n	800620c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006208:	2300      	movs	r3, #0
 800620a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006214:	e043      	b.n	800629e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2200      	movs	r2, #0
 800621e:	2120      	movs	r1, #32
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 fb05 	bl	8006830 <UART_WaitOnFlagUntilTimeout>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d001      	beq.n	8006230 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e042      	b.n	80062b6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10c      	bne.n	8006250 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	b29b      	uxth	r3, r3
 800623e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006242:	b29a      	uxth	r2, r3
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	3302      	adds	r3, #2
 800624c:	61bb      	str	r3, [r7, #24]
 800624e:	e01f      	b.n	8006290 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006258:	d007      	beq.n	800626a <HAL_UART_Receive+0xf0>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10a      	bne.n	8006278 <HAL_UART_Receive+0xfe>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d106      	bne.n	8006278 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	b2da      	uxtb	r2, r3
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	701a      	strb	r2, [r3, #0]
 8006276:	e008      	b.n	800628a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	b2db      	uxtb	r3, r3
 8006280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006284:	b2da      	uxtb	r2, r3
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	3301      	adds	r3, #1
 800628e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006294:	b29b      	uxth	r3, r3
 8006296:	3b01      	subs	r3, #1
 8006298:	b29a      	uxth	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1b6      	bne.n	8006216 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	e000      	b.n	80062b6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80062b4:	2302      	movs	r3, #2
  }
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3720      	adds	r7, #32
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b0ba      	sub	sp, #232	; 0xe8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80062e6:	2300      	movs	r3, #0
 80062e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80062fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10f      	bne.n	8006326 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800630a:	f003 0320 	and.w	r3, r3, #32
 800630e:	2b00      	cmp	r3, #0
 8006310:	d009      	beq.n	8006326 <HAL_UART_IRQHandler+0x66>
 8006312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fbd3 	bl	8006aca <UART_Receive_IT>
      return;
 8006324:	e256      	b.n	80067d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006326:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 80de 	beq.w	80064ec <HAL_UART_IRQHandler+0x22c>
 8006330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d106      	bne.n	800634a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800633c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006340:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 80d1 	beq.w	80064ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800634a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00b      	beq.n	800636e <HAL_UART_IRQHandler+0xae>
 8006356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800635a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635e:	2b00      	cmp	r3, #0
 8006360:	d005      	beq.n	800636e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	f043 0201 	orr.w	r2, r3, #1
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800636e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006372:	f003 0304 	and.w	r3, r3, #4
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00b      	beq.n	8006392 <HAL_UART_IRQHandler+0xd2>
 800637a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	d005      	beq.n	8006392 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	f043 0202 	orr.w	r2, r3, #2
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00b      	beq.n	80063b6 <HAL_UART_IRQHandler+0xf6>
 800639e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d005      	beq.n	80063b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	f043 0204 	orr.w	r2, r3, #4
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80063b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d011      	beq.n	80063e6 <HAL_UART_IRQHandler+0x126>
 80063c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c6:	f003 0320 	and.w	r3, r3, #32
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d105      	bne.n	80063da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80063ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d005      	beq.n	80063e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	f043 0208 	orr.w	r2, r3, #8
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f000 81ed 	beq.w	80067ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063f4:	f003 0320 	and.w	r3, r3, #32
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d008      	beq.n	800640e <HAL_UART_IRQHandler+0x14e>
 80063fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fb5e 	bl	8006aca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006418:	2b40      	cmp	r3, #64	; 0x40
 800641a:	bf0c      	ite	eq
 800641c:	2301      	moveq	r3, #1
 800641e:	2300      	movne	r3, #0
 8006420:	b2db      	uxtb	r3, r3
 8006422:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	f003 0308 	and.w	r3, r3, #8
 800642e:	2b00      	cmp	r3, #0
 8006430:	d103      	bne.n	800643a <HAL_UART_IRQHandler+0x17a>
 8006432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006436:	2b00      	cmp	r3, #0
 8006438:	d04f      	beq.n	80064da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fa66 	bl	800690c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644a:	2b40      	cmp	r3, #64	; 0x40
 800644c:	d141      	bne.n	80064d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	3314      	adds	r3, #20
 8006454:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006458:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800645c:	e853 3f00 	ldrex	r3, [r3]
 8006460:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006464:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800646c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	3314      	adds	r3, #20
 8006476:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800647a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800647e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006486:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006492:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1d9      	bne.n	800644e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d013      	beq.n	80064ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a6:	4a7d      	ldr	r2, [pc, #500]	; (800669c <HAL_UART_IRQHandler+0x3dc>)
 80064a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fd ffc5 	bl	800443e <HAL_DMA_Abort_IT>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d016      	beq.n	80064e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80064c4:	4610      	mov	r0, r2
 80064c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c8:	e00e      	b.n	80064e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f99a 	bl	8006804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d0:	e00a      	b.n	80064e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f996 	bl	8006804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d8:	e006      	b.n	80064e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f992 	bl	8006804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80064e6:	e170      	b.n	80067ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e8:	bf00      	nop
    return;
 80064ea:	e16e      	b.n	80067ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	f040 814a 	bne.w	800678a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80064f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064fa:	f003 0310 	and.w	r3, r3, #16
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 8143 	beq.w	800678a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006508:	f003 0310 	and.w	r3, r3, #16
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 813c 	beq.w	800678a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006512:	2300      	movs	r3, #0
 8006514:	60bb      	str	r3, [r7, #8]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	60bb      	str	r3, [r7, #8]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	60bb      	str	r3, [r7, #8]
 8006526:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006532:	2b40      	cmp	r3, #64	; 0x40
 8006534:	f040 80b4 	bne.w	80066a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006544:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 8140 	beq.w	80067ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006552:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006556:	429a      	cmp	r2, r3
 8006558:	f080 8139 	bcs.w	80067ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006562:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800656e:	f000 8088 	beq.w	8006682 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	330c      	adds	r3, #12
 8006578:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006580:	e853 3f00 	ldrex	r3, [r3]
 8006584:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006588:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800658c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006590:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	330c      	adds	r3, #12
 800659a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800659e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80065ae:	e841 2300 	strex	r3, r2, [r1]
 80065b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80065b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1d9      	bne.n	8006572 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3314      	adds	r3, #20
 80065c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065c8:	e853 3f00 	ldrex	r3, [r3]
 80065cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80065ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065d0:	f023 0301 	bic.w	r3, r3, #1
 80065d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3314      	adds	r3, #20
 80065de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80065e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80065e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80065ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80065ee:	e841 2300 	strex	r3, r2, [r1]
 80065f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80065f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1e1      	bne.n	80065be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	3314      	adds	r3, #20
 8006600:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006602:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800660a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800660c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006610:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3314      	adds	r3, #20
 800661a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800661e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006620:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006622:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006624:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006626:	e841 2300 	strex	r3, r2, [r1]
 800662a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800662c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1e3      	bne.n	80065fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2220      	movs	r2, #32
 8006636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	330c      	adds	r3, #12
 8006646:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800664a:	e853 3f00 	ldrex	r3, [r3]
 800664e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006652:	f023 0310 	bic.w	r3, r3, #16
 8006656:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	330c      	adds	r3, #12
 8006660:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006664:	65ba      	str	r2, [r7, #88]	; 0x58
 8006666:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006668:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800666a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800666c:	e841 2300 	strex	r3, r2, [r1]
 8006670:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1e3      	bne.n	8006640 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667c:	4618      	mov	r0, r3
 800667e:	f7fd fe6e 	bl	800435e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800668a:	b29b      	uxth	r3, r3
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	b29b      	uxth	r3, r3
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f8c0 	bl	8006818 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006698:	e099      	b.n	80067ce <HAL_UART_IRQHandler+0x50e>
 800669a:	bf00      	nop
 800669c:	080069d3 	.word	0x080069d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f000 808b 	beq.w	80067d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80066bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 8086 	beq.w	80067d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	330c      	adds	r3, #12
 80066cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	330c      	adds	r3, #12
 80066e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80066ea:	647a      	str	r2, [r7, #68]	; 0x44
 80066ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1e3      	bne.n	80066c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3314      	adds	r3, #20
 8006704:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	e853 3f00 	ldrex	r3, [r3]
 800670c:	623b      	str	r3, [r7, #32]
   return(result);
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	f023 0301 	bic.w	r3, r3, #1
 8006714:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3314      	adds	r3, #20
 800671e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006722:	633a      	str	r2, [r7, #48]	; 0x30
 8006724:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006726:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800672a:	e841 2300 	strex	r3, r2, [r1]
 800672e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1e3      	bne.n	80066fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2220      	movs	r2, #32
 800673a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	330c      	adds	r3, #12
 800674a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	e853 3f00 	ldrex	r3, [r3]
 8006752:	60fb      	str	r3, [r7, #12]
   return(result);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 0310 	bic.w	r3, r3, #16
 800675a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	330c      	adds	r3, #12
 8006764:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006768:	61fa      	str	r2, [r7, #28]
 800676a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676c:	69b9      	ldr	r1, [r7, #24]
 800676e:	69fa      	ldr	r2, [r7, #28]
 8006770:	e841 2300 	strex	r3, r2, [r1]
 8006774:	617b      	str	r3, [r7, #20]
   return(result);
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1e3      	bne.n	8006744 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800677c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006780:	4619      	mov	r1, r3
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f848 	bl	8006818 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006788:	e023      	b.n	80067d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800678a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800678e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006792:	2b00      	cmp	r3, #0
 8006794:	d009      	beq.n	80067aa <HAL_UART_IRQHandler+0x4ea>
 8006796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800679a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f929 	bl	80069fa <UART_Transmit_IT>
    return;
 80067a8:	e014      	b.n	80067d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00e      	beq.n	80067d4 <HAL_UART_IRQHandler+0x514>
 80067b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d008      	beq.n	80067d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f969 	bl	8006a9a <UART_EndTransmit_IT>
    return;
 80067c8:	e004      	b.n	80067d4 <HAL_UART_IRQHandler+0x514>
    return;
 80067ca:	bf00      	nop
 80067cc:	e002      	b.n	80067d4 <HAL_UART_IRQHandler+0x514>
      return;
 80067ce:	bf00      	nop
 80067d0:	e000      	b.n	80067d4 <HAL_UART_IRQHandler+0x514>
      return;
 80067d2:	bf00      	nop
  }
}
 80067d4:	37e8      	adds	r7, #232	; 0xe8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop

080067dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	460b      	mov	r3, r1
 8006822:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b090      	sub	sp, #64	; 0x40
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	603b      	str	r3, [r7, #0]
 800683c:	4613      	mov	r3, r2
 800683e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006840:	e050      	b.n	80068e4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006848:	d04c      	beq.n	80068e4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800684a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800684c:	2b00      	cmp	r3, #0
 800684e:	d007      	beq.n	8006860 <UART_WaitOnFlagUntilTimeout+0x30>
 8006850:	f7fd f878 	bl	8003944 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800685c:	429a      	cmp	r2, r3
 800685e:	d241      	bcs.n	80068e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	330c      	adds	r3, #12
 8006866:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686a:	e853 3f00 	ldrex	r3, [r3]
 800686e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	330c      	adds	r3, #12
 800687e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006880:	637a      	str	r2, [r7, #52]	; 0x34
 8006882:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006884:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006888:	e841 2300 	strex	r3, r2, [r1]
 800688c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800688e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1e5      	bne.n	8006860 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3314      	adds	r3, #20
 800689a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	e853 3f00 	ldrex	r3, [r3]
 80068a2:	613b      	str	r3, [r7, #16]
   return(result);
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f023 0301 	bic.w	r3, r3, #1
 80068aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3314      	adds	r3, #20
 80068b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068b4:	623a      	str	r2, [r7, #32]
 80068b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b8:	69f9      	ldr	r1, [r7, #28]
 80068ba:	6a3a      	ldr	r2, [r7, #32]
 80068bc:	e841 2300 	strex	r3, r2, [r1]
 80068c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e5      	bne.n	8006894 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2220      	movs	r2, #32
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e00f      	b.n	8006904 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	4013      	ands	r3, r2
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	bf0c      	ite	eq
 80068f4:	2301      	moveq	r3, #1
 80068f6:	2300      	movne	r3, #0
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	461a      	mov	r2, r3
 80068fc:	79fb      	ldrb	r3, [r7, #7]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d09f      	beq.n	8006842 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3740      	adds	r7, #64	; 0x40
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800690c:	b480      	push	{r7}
 800690e:	b095      	sub	sp, #84	; 0x54
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	330c      	adds	r3, #12
 800691a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800691e:	e853 3f00 	ldrex	r3, [r3]
 8006922:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006926:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800692a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	330c      	adds	r3, #12
 8006932:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006934:	643a      	str	r2, [r7, #64]	; 0x40
 8006936:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800693a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e5      	bne.n	8006914 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3314      	adds	r3, #20
 800694e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	e853 3f00 	ldrex	r3, [r3]
 8006956:	61fb      	str	r3, [r7, #28]
   return(result);
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	f023 0301 	bic.w	r3, r3, #1
 800695e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3314      	adds	r3, #20
 8006966:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006968:	62fa      	str	r2, [r7, #44]	; 0x2c
 800696a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800696e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006970:	e841 2300 	strex	r3, r2, [r1]
 8006974:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1e5      	bne.n	8006948 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006980:	2b01      	cmp	r3, #1
 8006982:	d119      	bne.n	80069b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	330c      	adds	r3, #12
 800698a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	e853 3f00 	ldrex	r3, [r3]
 8006992:	60bb      	str	r3, [r7, #8]
   return(result);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f023 0310 	bic.w	r3, r3, #16
 800699a:	647b      	str	r3, [r7, #68]	; 0x44
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	330c      	adds	r3, #12
 80069a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069a4:	61ba      	str	r2, [r7, #24]
 80069a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	6979      	ldr	r1, [r7, #20]
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	e841 2300 	strex	r3, r2, [r1]
 80069b0:	613b      	str	r3, [r7, #16]
   return(result);
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e5      	bne.n	8006984 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80069c6:	bf00      	nop
 80069c8:	3754      	adds	r7, #84	; 0x54
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f7ff ff09 	bl	8006804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069f2:	bf00      	nop
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b085      	sub	sp, #20
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b21      	cmp	r3, #33	; 0x21
 8006a0c:	d13e      	bne.n	8006a8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a16:	d114      	bne.n	8006a42 <UART_Transmit_IT+0x48>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d110      	bne.n	8006a42 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a1b      	ldr	r3, [r3, #32]
 8006a24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	1c9a      	adds	r2, r3, #2
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	621a      	str	r2, [r3, #32]
 8006a40:	e008      	b.n	8006a54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	1c59      	adds	r1, r3, #1
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	6211      	str	r1, [r2, #32]
 8006a4c:	781a      	ldrb	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	4619      	mov	r1, r3
 8006a62:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10f      	bne.n	8006a88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68da      	ldr	r2, [r3, #12]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68da      	ldr	r2, [r3, #12]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	e000      	b.n	8006a8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a8c:	2302      	movs	r3, #2
  }
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68da      	ldr	r2, [r3, #12]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ab0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff fe8e 	bl	80067dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b08c      	sub	sp, #48	; 0x30
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b22      	cmp	r3, #34	; 0x22
 8006adc:	f040 80ab 	bne.w	8006c36 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae8:	d117      	bne.n	8006b1a <UART_Receive_IT+0x50>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d113      	bne.n	8006b1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006af2:	2300      	movs	r3, #0
 8006af4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b12:	1c9a      	adds	r2, r3, #2
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	629a      	str	r2, [r3, #40]	; 0x28
 8006b18:	e026      	b.n	8006b68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006b20:	2300      	movs	r3, #0
 8006b22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b2c:	d007      	beq.n	8006b3e <UART_Receive_IT+0x74>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10a      	bne.n	8006b4c <UART_Receive_IT+0x82>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b48:	701a      	strb	r2, [r3, #0]
 8006b4a:	e008      	b.n	8006b5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b62:	1c5a      	adds	r2, r3, #1
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	4619      	mov	r1, r3
 8006b76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d15a      	bne.n	8006c32 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 0220 	bic.w	r2, r2, #32
 8006b8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68da      	ldr	r2, [r3, #12]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	695a      	ldr	r2, [r3, #20]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 0201 	bic.w	r2, r2, #1
 8006baa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d135      	bne.n	8006c28 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	330c      	adds	r3, #12
 8006bc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f023 0310 	bic.w	r3, r3, #16
 8006bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	330c      	adds	r3, #12
 8006be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be2:	623a      	str	r2, [r7, #32]
 8006be4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be6:	69f9      	ldr	r1, [r7, #28]
 8006be8:	6a3a      	ldr	r2, [r7, #32]
 8006bea:	e841 2300 	strex	r3, r2, [r1]
 8006bee:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1e5      	bne.n	8006bc2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0310 	and.w	r3, r3, #16
 8006c00:	2b10      	cmp	r3, #16
 8006c02:	d10a      	bne.n	8006c1a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c04:	2300      	movs	r3, #0
 8006c06:	60fb      	str	r3, [r7, #12]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60fb      	str	r3, [r7, #12]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	60fb      	str	r3, [r7, #12]
 8006c18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7ff fdf9 	bl	8006818 <HAL_UARTEx_RxEventCallback>
 8006c26:	e002      	b.n	8006c2e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7ff fde1 	bl	80067f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	e002      	b.n	8006c38 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	e000      	b.n	8006c38 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006c36:	2302      	movs	r3, #2
  }
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3730      	adds	r7, #48	; 0x30
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c44:	b09f      	sub	sp, #124	; 0x7c
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c56:	68d9      	ldr	r1, [r3, #12]
 8006c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	ea40 0301 	orr.w	r3, r0, r1
 8006c60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c64:	689a      	ldr	r2, [r3, #8]
 8006c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	431a      	orrs	r2, r3
 8006c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c84:	f021 010c 	bic.w	r1, r1, #12
 8006c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c8e:	430b      	orrs	r3, r1
 8006c90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c9e:	6999      	ldr	r1, [r3, #24]
 8006ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	ea40 0301 	orr.w	r3, r0, r1
 8006ca8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	4bc5      	ldr	r3, [pc, #788]	; (8006fc4 <UART_SetConfig+0x384>)
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d004      	beq.n	8006cbe <UART_SetConfig+0x7e>
 8006cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	4bc3      	ldr	r3, [pc, #780]	; (8006fc8 <UART_SetConfig+0x388>)
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d103      	bne.n	8006cc6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cbe:	f7fe fa27 	bl	8005110 <HAL_RCC_GetPCLK2Freq>
 8006cc2:	6778      	str	r0, [r7, #116]	; 0x74
 8006cc4:	e002      	b.n	8006ccc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cc6:	f7fe fa0f 	bl	80050e8 <HAL_RCC_GetPCLK1Freq>
 8006cca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cd4:	f040 80b6 	bne.w	8006e44 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cda:	461c      	mov	r4, r3
 8006cdc:	f04f 0500 	mov.w	r5, #0
 8006ce0:	4622      	mov	r2, r4
 8006ce2:	462b      	mov	r3, r5
 8006ce4:	1891      	adds	r1, r2, r2
 8006ce6:	6439      	str	r1, [r7, #64]	; 0x40
 8006ce8:	415b      	adcs	r3, r3
 8006cea:	647b      	str	r3, [r7, #68]	; 0x44
 8006cec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006cf0:	1912      	adds	r2, r2, r4
 8006cf2:	eb45 0303 	adc.w	r3, r5, r3
 8006cf6:	f04f 0000 	mov.w	r0, #0
 8006cfa:	f04f 0100 	mov.w	r1, #0
 8006cfe:	00d9      	lsls	r1, r3, #3
 8006d00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d04:	00d0      	lsls	r0, r2, #3
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	1911      	adds	r1, r2, r4
 8006d0c:	6639      	str	r1, [r7, #96]	; 0x60
 8006d0e:	416b      	adcs	r3, r5
 8006d10:	667b      	str	r3, [r7, #100]	; 0x64
 8006d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	461a      	mov	r2, r3
 8006d18:	f04f 0300 	mov.w	r3, #0
 8006d1c:	1891      	adds	r1, r2, r2
 8006d1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d20:	415b      	adcs	r3, r3
 8006d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d28:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006d2c:	f7f9 faa8 	bl	8000280 <__aeabi_uldivmod>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	4ba5      	ldr	r3, [pc, #660]	; (8006fcc <UART_SetConfig+0x38c>)
 8006d36:	fba3 2302 	umull	r2, r3, r3, r2
 8006d3a:	095b      	lsrs	r3, r3, #5
 8006d3c:	011e      	lsls	r6, r3, #4
 8006d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d40:	461c      	mov	r4, r3
 8006d42:	f04f 0500 	mov.w	r5, #0
 8006d46:	4622      	mov	r2, r4
 8006d48:	462b      	mov	r3, r5
 8006d4a:	1891      	adds	r1, r2, r2
 8006d4c:	6339      	str	r1, [r7, #48]	; 0x30
 8006d4e:	415b      	adcs	r3, r3
 8006d50:	637b      	str	r3, [r7, #52]	; 0x34
 8006d52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006d56:	1912      	adds	r2, r2, r4
 8006d58:	eb45 0303 	adc.w	r3, r5, r3
 8006d5c:	f04f 0000 	mov.w	r0, #0
 8006d60:	f04f 0100 	mov.w	r1, #0
 8006d64:	00d9      	lsls	r1, r3, #3
 8006d66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d6a:	00d0      	lsls	r0, r2, #3
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	1911      	adds	r1, r2, r4
 8006d72:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d74:	416b      	adcs	r3, r5
 8006d76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	f04f 0300 	mov.w	r3, #0
 8006d82:	1891      	adds	r1, r2, r2
 8006d84:	62b9      	str	r1, [r7, #40]	; 0x28
 8006d86:	415b      	adcs	r3, r3
 8006d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d8e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006d92:	f7f9 fa75 	bl	8000280 <__aeabi_uldivmod>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4b8c      	ldr	r3, [pc, #560]	; (8006fcc <UART_SetConfig+0x38c>)
 8006d9c:	fba3 1302 	umull	r1, r3, r3, r2
 8006da0:	095b      	lsrs	r3, r3, #5
 8006da2:	2164      	movs	r1, #100	; 0x64
 8006da4:	fb01 f303 	mul.w	r3, r1, r3
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	00db      	lsls	r3, r3, #3
 8006dac:	3332      	adds	r3, #50	; 0x32
 8006dae:	4a87      	ldr	r2, [pc, #540]	; (8006fcc <UART_SetConfig+0x38c>)
 8006db0:	fba2 2303 	umull	r2, r3, r2, r3
 8006db4:	095b      	lsrs	r3, r3, #5
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006dbc:	441e      	add	r6, r3
 8006dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f04f 0100 	mov.w	r1, #0
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	1894      	adds	r4, r2, r2
 8006dcc:	623c      	str	r4, [r7, #32]
 8006dce:	415b      	adcs	r3, r3
 8006dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006dd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006dd6:	1812      	adds	r2, r2, r0
 8006dd8:	eb41 0303 	adc.w	r3, r1, r3
 8006ddc:	f04f 0400 	mov.w	r4, #0
 8006de0:	f04f 0500 	mov.w	r5, #0
 8006de4:	00dd      	lsls	r5, r3, #3
 8006de6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006dea:	00d4      	lsls	r4, r2, #3
 8006dec:	4622      	mov	r2, r4
 8006dee:	462b      	mov	r3, r5
 8006df0:	1814      	adds	r4, r2, r0
 8006df2:	653c      	str	r4, [r7, #80]	; 0x50
 8006df4:	414b      	adcs	r3, r1
 8006df6:	657b      	str	r3, [r7, #84]	; 0x54
 8006df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	f04f 0300 	mov.w	r3, #0
 8006e02:	1891      	adds	r1, r2, r2
 8006e04:	61b9      	str	r1, [r7, #24]
 8006e06:	415b      	adcs	r3, r3
 8006e08:	61fb      	str	r3, [r7, #28]
 8006e0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e0e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006e12:	f7f9 fa35 	bl	8000280 <__aeabi_uldivmod>
 8006e16:	4602      	mov	r2, r0
 8006e18:	460b      	mov	r3, r1
 8006e1a:	4b6c      	ldr	r3, [pc, #432]	; (8006fcc <UART_SetConfig+0x38c>)
 8006e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e20:	095b      	lsrs	r3, r3, #5
 8006e22:	2164      	movs	r1, #100	; 0x64
 8006e24:	fb01 f303 	mul.w	r3, r1, r3
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	00db      	lsls	r3, r3, #3
 8006e2c:	3332      	adds	r3, #50	; 0x32
 8006e2e:	4a67      	ldr	r2, [pc, #412]	; (8006fcc <UART_SetConfig+0x38c>)
 8006e30:	fba2 2303 	umull	r2, r3, r2, r3
 8006e34:	095b      	lsrs	r3, r3, #5
 8006e36:	f003 0207 	and.w	r2, r3, #7
 8006e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4432      	add	r2, r6
 8006e40:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e42:	e0b9      	b.n	8006fb8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e46:	461c      	mov	r4, r3
 8006e48:	f04f 0500 	mov.w	r5, #0
 8006e4c:	4622      	mov	r2, r4
 8006e4e:	462b      	mov	r3, r5
 8006e50:	1891      	adds	r1, r2, r2
 8006e52:	6139      	str	r1, [r7, #16]
 8006e54:	415b      	adcs	r3, r3
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006e5c:	1912      	adds	r2, r2, r4
 8006e5e:	eb45 0303 	adc.w	r3, r5, r3
 8006e62:	f04f 0000 	mov.w	r0, #0
 8006e66:	f04f 0100 	mov.w	r1, #0
 8006e6a:	00d9      	lsls	r1, r3, #3
 8006e6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e70:	00d0      	lsls	r0, r2, #3
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	eb12 0804 	adds.w	r8, r2, r4
 8006e7a:	eb43 0905 	adc.w	r9, r3, r5
 8006e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f04f 0100 	mov.w	r1, #0
 8006e88:	f04f 0200 	mov.w	r2, #0
 8006e8c:	f04f 0300 	mov.w	r3, #0
 8006e90:	008b      	lsls	r3, r1, #2
 8006e92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e96:	0082      	lsls	r2, r0, #2
 8006e98:	4640      	mov	r0, r8
 8006e9a:	4649      	mov	r1, r9
 8006e9c:	f7f9 f9f0 	bl	8000280 <__aeabi_uldivmod>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4b49      	ldr	r3, [pc, #292]	; (8006fcc <UART_SetConfig+0x38c>)
 8006ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8006eaa:	095b      	lsrs	r3, r3, #5
 8006eac:	011e      	lsls	r6, r3, #4
 8006eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f04f 0100 	mov.w	r1, #0
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	460b      	mov	r3, r1
 8006eba:	1894      	adds	r4, r2, r2
 8006ebc:	60bc      	str	r4, [r7, #8]
 8006ebe:	415b      	adcs	r3, r3
 8006ec0:	60fb      	str	r3, [r7, #12]
 8006ec2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ec6:	1812      	adds	r2, r2, r0
 8006ec8:	eb41 0303 	adc.w	r3, r1, r3
 8006ecc:	f04f 0400 	mov.w	r4, #0
 8006ed0:	f04f 0500 	mov.w	r5, #0
 8006ed4:	00dd      	lsls	r5, r3, #3
 8006ed6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006eda:	00d4      	lsls	r4, r2, #3
 8006edc:	4622      	mov	r2, r4
 8006ede:	462b      	mov	r3, r5
 8006ee0:	1814      	adds	r4, r2, r0
 8006ee2:	64bc      	str	r4, [r7, #72]	; 0x48
 8006ee4:	414b      	adcs	r3, r1
 8006ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	4618      	mov	r0, r3
 8006eee:	f04f 0100 	mov.w	r1, #0
 8006ef2:	f04f 0200 	mov.w	r2, #0
 8006ef6:	f04f 0300 	mov.w	r3, #0
 8006efa:	008b      	lsls	r3, r1, #2
 8006efc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f00:	0082      	lsls	r2, r0, #2
 8006f02:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006f06:	f7f9 f9bb 	bl	8000280 <__aeabi_uldivmod>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	4b2f      	ldr	r3, [pc, #188]	; (8006fcc <UART_SetConfig+0x38c>)
 8006f10:	fba3 1302 	umull	r1, r3, r3, r2
 8006f14:	095b      	lsrs	r3, r3, #5
 8006f16:	2164      	movs	r1, #100	; 0x64
 8006f18:	fb01 f303 	mul.w	r3, r1, r3
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	011b      	lsls	r3, r3, #4
 8006f20:	3332      	adds	r3, #50	; 0x32
 8006f22:	4a2a      	ldr	r2, [pc, #168]	; (8006fcc <UART_SetConfig+0x38c>)
 8006f24:	fba2 2303 	umull	r2, r3, r2, r3
 8006f28:	095b      	lsrs	r3, r3, #5
 8006f2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f2e:	441e      	add	r6, r3
 8006f30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f32:	4618      	mov	r0, r3
 8006f34:	f04f 0100 	mov.w	r1, #0
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	1894      	adds	r4, r2, r2
 8006f3e:	603c      	str	r4, [r7, #0]
 8006f40:	415b      	adcs	r3, r3
 8006f42:	607b      	str	r3, [r7, #4]
 8006f44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f48:	1812      	adds	r2, r2, r0
 8006f4a:	eb41 0303 	adc.w	r3, r1, r3
 8006f4e:	f04f 0400 	mov.w	r4, #0
 8006f52:	f04f 0500 	mov.w	r5, #0
 8006f56:	00dd      	lsls	r5, r3, #3
 8006f58:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f5c:	00d4      	lsls	r4, r2, #3
 8006f5e:	4622      	mov	r2, r4
 8006f60:	462b      	mov	r3, r5
 8006f62:	eb12 0a00 	adds.w	sl, r2, r0
 8006f66:	eb43 0b01 	adc.w	fp, r3, r1
 8006f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f04f 0100 	mov.w	r1, #0
 8006f74:	f04f 0200 	mov.w	r2, #0
 8006f78:	f04f 0300 	mov.w	r3, #0
 8006f7c:	008b      	lsls	r3, r1, #2
 8006f7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f82:	0082      	lsls	r2, r0, #2
 8006f84:	4650      	mov	r0, sl
 8006f86:	4659      	mov	r1, fp
 8006f88:	f7f9 f97a 	bl	8000280 <__aeabi_uldivmod>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4b0e      	ldr	r3, [pc, #56]	; (8006fcc <UART_SetConfig+0x38c>)
 8006f92:	fba3 1302 	umull	r1, r3, r3, r2
 8006f96:	095b      	lsrs	r3, r3, #5
 8006f98:	2164      	movs	r1, #100	; 0x64
 8006f9a:	fb01 f303 	mul.w	r3, r1, r3
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	011b      	lsls	r3, r3, #4
 8006fa2:	3332      	adds	r3, #50	; 0x32
 8006fa4:	4a09      	ldr	r2, [pc, #36]	; (8006fcc <UART_SetConfig+0x38c>)
 8006fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8006faa:	095b      	lsrs	r3, r3, #5
 8006fac:	f003 020f 	and.w	r2, r3, #15
 8006fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4432      	add	r2, r6
 8006fb6:	609a      	str	r2, [r3, #8]
}
 8006fb8:	bf00      	nop
 8006fba:	377c      	adds	r7, #124	; 0x7c
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc2:	bf00      	nop
 8006fc4:	40011000 	.word	0x40011000
 8006fc8:	40011400 	.word	0x40011400
 8006fcc:	51eb851f 	.word	0x51eb851f

08006fd0 <__errno>:
 8006fd0:	4b01      	ldr	r3, [pc, #4]	; (8006fd8 <__errno+0x8>)
 8006fd2:	6818      	ldr	r0, [r3, #0]
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	2000000c 	.word	0x2000000c

08006fdc <__libc_init_array>:
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	4d0d      	ldr	r5, [pc, #52]	; (8007014 <__libc_init_array+0x38>)
 8006fe0:	4c0d      	ldr	r4, [pc, #52]	; (8007018 <__libc_init_array+0x3c>)
 8006fe2:	1b64      	subs	r4, r4, r5
 8006fe4:	10a4      	asrs	r4, r4, #2
 8006fe6:	2600      	movs	r6, #0
 8006fe8:	42a6      	cmp	r6, r4
 8006fea:	d109      	bne.n	8007000 <__libc_init_array+0x24>
 8006fec:	4d0b      	ldr	r5, [pc, #44]	; (800701c <__libc_init_array+0x40>)
 8006fee:	4c0c      	ldr	r4, [pc, #48]	; (8007020 <__libc_init_array+0x44>)
 8006ff0:	f000 fc4e 	bl	8007890 <_init>
 8006ff4:	1b64      	subs	r4, r4, r5
 8006ff6:	10a4      	asrs	r4, r4, #2
 8006ff8:	2600      	movs	r6, #0
 8006ffa:	42a6      	cmp	r6, r4
 8006ffc:	d105      	bne.n	800700a <__libc_init_array+0x2e>
 8006ffe:	bd70      	pop	{r4, r5, r6, pc}
 8007000:	f855 3b04 	ldr.w	r3, [r5], #4
 8007004:	4798      	blx	r3
 8007006:	3601      	adds	r6, #1
 8007008:	e7ee      	b.n	8006fe8 <__libc_init_array+0xc>
 800700a:	f855 3b04 	ldr.w	r3, [r5], #4
 800700e:	4798      	blx	r3
 8007010:	3601      	adds	r6, #1
 8007012:	e7f2      	b.n	8006ffa <__libc_init_array+0x1e>
 8007014:	080080e4 	.word	0x080080e4
 8007018:	080080e4 	.word	0x080080e4
 800701c:	080080e4 	.word	0x080080e4
 8007020:	080080e8 	.word	0x080080e8

08007024 <memset>:
 8007024:	4402      	add	r2, r0
 8007026:	4603      	mov	r3, r0
 8007028:	4293      	cmp	r3, r2
 800702a:	d100      	bne.n	800702e <memset+0xa>
 800702c:	4770      	bx	lr
 800702e:	f803 1b01 	strb.w	r1, [r3], #1
 8007032:	e7f9      	b.n	8007028 <memset+0x4>

08007034 <siprintf>:
 8007034:	b40e      	push	{r1, r2, r3}
 8007036:	b500      	push	{lr}
 8007038:	b09c      	sub	sp, #112	; 0x70
 800703a:	ab1d      	add	r3, sp, #116	; 0x74
 800703c:	9002      	str	r0, [sp, #8]
 800703e:	9006      	str	r0, [sp, #24]
 8007040:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007044:	4809      	ldr	r0, [pc, #36]	; (800706c <siprintf+0x38>)
 8007046:	9107      	str	r1, [sp, #28]
 8007048:	9104      	str	r1, [sp, #16]
 800704a:	4909      	ldr	r1, [pc, #36]	; (8007070 <siprintf+0x3c>)
 800704c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007050:	9105      	str	r1, [sp, #20]
 8007052:	6800      	ldr	r0, [r0, #0]
 8007054:	9301      	str	r3, [sp, #4]
 8007056:	a902      	add	r1, sp, #8
 8007058:	f000 f868 	bl	800712c <_svfiprintf_r>
 800705c:	9b02      	ldr	r3, [sp, #8]
 800705e:	2200      	movs	r2, #0
 8007060:	701a      	strb	r2, [r3, #0]
 8007062:	b01c      	add	sp, #112	; 0x70
 8007064:	f85d eb04 	ldr.w	lr, [sp], #4
 8007068:	b003      	add	sp, #12
 800706a:	4770      	bx	lr
 800706c:	2000000c 	.word	0x2000000c
 8007070:	ffff0208 	.word	0xffff0208

08007074 <__ssputs_r>:
 8007074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007078:	688e      	ldr	r6, [r1, #8]
 800707a:	429e      	cmp	r6, r3
 800707c:	4682      	mov	sl, r0
 800707e:	460c      	mov	r4, r1
 8007080:	4690      	mov	r8, r2
 8007082:	461f      	mov	r7, r3
 8007084:	d838      	bhi.n	80070f8 <__ssputs_r+0x84>
 8007086:	898a      	ldrh	r2, [r1, #12]
 8007088:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800708c:	d032      	beq.n	80070f4 <__ssputs_r+0x80>
 800708e:	6825      	ldr	r5, [r4, #0]
 8007090:	6909      	ldr	r1, [r1, #16]
 8007092:	eba5 0901 	sub.w	r9, r5, r1
 8007096:	6965      	ldr	r5, [r4, #20]
 8007098:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800709c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070a0:	3301      	adds	r3, #1
 80070a2:	444b      	add	r3, r9
 80070a4:	106d      	asrs	r5, r5, #1
 80070a6:	429d      	cmp	r5, r3
 80070a8:	bf38      	it	cc
 80070aa:	461d      	movcc	r5, r3
 80070ac:	0553      	lsls	r3, r2, #21
 80070ae:	d531      	bpl.n	8007114 <__ssputs_r+0xa0>
 80070b0:	4629      	mov	r1, r5
 80070b2:	f000 fb47 	bl	8007744 <_malloc_r>
 80070b6:	4606      	mov	r6, r0
 80070b8:	b950      	cbnz	r0, 80070d0 <__ssputs_r+0x5c>
 80070ba:	230c      	movs	r3, #12
 80070bc:	f8ca 3000 	str.w	r3, [sl]
 80070c0:	89a3      	ldrh	r3, [r4, #12]
 80070c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070c6:	81a3      	strh	r3, [r4, #12]
 80070c8:	f04f 30ff 	mov.w	r0, #4294967295
 80070cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070d0:	6921      	ldr	r1, [r4, #16]
 80070d2:	464a      	mov	r2, r9
 80070d4:	f000 fabe 	bl	8007654 <memcpy>
 80070d8:	89a3      	ldrh	r3, [r4, #12]
 80070da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070e2:	81a3      	strh	r3, [r4, #12]
 80070e4:	6126      	str	r6, [r4, #16]
 80070e6:	6165      	str	r5, [r4, #20]
 80070e8:	444e      	add	r6, r9
 80070ea:	eba5 0509 	sub.w	r5, r5, r9
 80070ee:	6026      	str	r6, [r4, #0]
 80070f0:	60a5      	str	r5, [r4, #8]
 80070f2:	463e      	mov	r6, r7
 80070f4:	42be      	cmp	r6, r7
 80070f6:	d900      	bls.n	80070fa <__ssputs_r+0x86>
 80070f8:	463e      	mov	r6, r7
 80070fa:	4632      	mov	r2, r6
 80070fc:	6820      	ldr	r0, [r4, #0]
 80070fe:	4641      	mov	r1, r8
 8007100:	f000 fab6 	bl	8007670 <memmove>
 8007104:	68a3      	ldr	r3, [r4, #8]
 8007106:	6822      	ldr	r2, [r4, #0]
 8007108:	1b9b      	subs	r3, r3, r6
 800710a:	4432      	add	r2, r6
 800710c:	60a3      	str	r3, [r4, #8]
 800710e:	6022      	str	r2, [r4, #0]
 8007110:	2000      	movs	r0, #0
 8007112:	e7db      	b.n	80070cc <__ssputs_r+0x58>
 8007114:	462a      	mov	r2, r5
 8007116:	f000 fb6f 	bl	80077f8 <_realloc_r>
 800711a:	4606      	mov	r6, r0
 800711c:	2800      	cmp	r0, #0
 800711e:	d1e1      	bne.n	80070e4 <__ssputs_r+0x70>
 8007120:	6921      	ldr	r1, [r4, #16]
 8007122:	4650      	mov	r0, sl
 8007124:	f000 fabe 	bl	80076a4 <_free_r>
 8007128:	e7c7      	b.n	80070ba <__ssputs_r+0x46>
	...

0800712c <_svfiprintf_r>:
 800712c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007130:	4698      	mov	r8, r3
 8007132:	898b      	ldrh	r3, [r1, #12]
 8007134:	061b      	lsls	r3, r3, #24
 8007136:	b09d      	sub	sp, #116	; 0x74
 8007138:	4607      	mov	r7, r0
 800713a:	460d      	mov	r5, r1
 800713c:	4614      	mov	r4, r2
 800713e:	d50e      	bpl.n	800715e <_svfiprintf_r+0x32>
 8007140:	690b      	ldr	r3, [r1, #16]
 8007142:	b963      	cbnz	r3, 800715e <_svfiprintf_r+0x32>
 8007144:	2140      	movs	r1, #64	; 0x40
 8007146:	f000 fafd 	bl	8007744 <_malloc_r>
 800714a:	6028      	str	r0, [r5, #0]
 800714c:	6128      	str	r0, [r5, #16]
 800714e:	b920      	cbnz	r0, 800715a <_svfiprintf_r+0x2e>
 8007150:	230c      	movs	r3, #12
 8007152:	603b      	str	r3, [r7, #0]
 8007154:	f04f 30ff 	mov.w	r0, #4294967295
 8007158:	e0d1      	b.n	80072fe <_svfiprintf_r+0x1d2>
 800715a:	2340      	movs	r3, #64	; 0x40
 800715c:	616b      	str	r3, [r5, #20]
 800715e:	2300      	movs	r3, #0
 8007160:	9309      	str	r3, [sp, #36]	; 0x24
 8007162:	2320      	movs	r3, #32
 8007164:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007168:	f8cd 800c 	str.w	r8, [sp, #12]
 800716c:	2330      	movs	r3, #48	; 0x30
 800716e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007318 <_svfiprintf_r+0x1ec>
 8007172:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007176:	f04f 0901 	mov.w	r9, #1
 800717a:	4623      	mov	r3, r4
 800717c:	469a      	mov	sl, r3
 800717e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007182:	b10a      	cbz	r2, 8007188 <_svfiprintf_r+0x5c>
 8007184:	2a25      	cmp	r2, #37	; 0x25
 8007186:	d1f9      	bne.n	800717c <_svfiprintf_r+0x50>
 8007188:	ebba 0b04 	subs.w	fp, sl, r4
 800718c:	d00b      	beq.n	80071a6 <_svfiprintf_r+0x7a>
 800718e:	465b      	mov	r3, fp
 8007190:	4622      	mov	r2, r4
 8007192:	4629      	mov	r1, r5
 8007194:	4638      	mov	r0, r7
 8007196:	f7ff ff6d 	bl	8007074 <__ssputs_r>
 800719a:	3001      	adds	r0, #1
 800719c:	f000 80aa 	beq.w	80072f4 <_svfiprintf_r+0x1c8>
 80071a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071a2:	445a      	add	r2, fp
 80071a4:	9209      	str	r2, [sp, #36]	; 0x24
 80071a6:	f89a 3000 	ldrb.w	r3, [sl]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f000 80a2 	beq.w	80072f4 <_svfiprintf_r+0x1c8>
 80071b0:	2300      	movs	r3, #0
 80071b2:	f04f 32ff 	mov.w	r2, #4294967295
 80071b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071ba:	f10a 0a01 	add.w	sl, sl, #1
 80071be:	9304      	str	r3, [sp, #16]
 80071c0:	9307      	str	r3, [sp, #28]
 80071c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071c6:	931a      	str	r3, [sp, #104]	; 0x68
 80071c8:	4654      	mov	r4, sl
 80071ca:	2205      	movs	r2, #5
 80071cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071d0:	4851      	ldr	r0, [pc, #324]	; (8007318 <_svfiprintf_r+0x1ec>)
 80071d2:	f7f9 f805 	bl	80001e0 <memchr>
 80071d6:	9a04      	ldr	r2, [sp, #16]
 80071d8:	b9d8      	cbnz	r0, 8007212 <_svfiprintf_r+0xe6>
 80071da:	06d0      	lsls	r0, r2, #27
 80071dc:	bf44      	itt	mi
 80071de:	2320      	movmi	r3, #32
 80071e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071e4:	0711      	lsls	r1, r2, #28
 80071e6:	bf44      	itt	mi
 80071e8:	232b      	movmi	r3, #43	; 0x2b
 80071ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071ee:	f89a 3000 	ldrb.w	r3, [sl]
 80071f2:	2b2a      	cmp	r3, #42	; 0x2a
 80071f4:	d015      	beq.n	8007222 <_svfiprintf_r+0xf6>
 80071f6:	9a07      	ldr	r2, [sp, #28]
 80071f8:	4654      	mov	r4, sl
 80071fa:	2000      	movs	r0, #0
 80071fc:	f04f 0c0a 	mov.w	ip, #10
 8007200:	4621      	mov	r1, r4
 8007202:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007206:	3b30      	subs	r3, #48	; 0x30
 8007208:	2b09      	cmp	r3, #9
 800720a:	d94e      	bls.n	80072aa <_svfiprintf_r+0x17e>
 800720c:	b1b0      	cbz	r0, 800723c <_svfiprintf_r+0x110>
 800720e:	9207      	str	r2, [sp, #28]
 8007210:	e014      	b.n	800723c <_svfiprintf_r+0x110>
 8007212:	eba0 0308 	sub.w	r3, r0, r8
 8007216:	fa09 f303 	lsl.w	r3, r9, r3
 800721a:	4313      	orrs	r3, r2
 800721c:	9304      	str	r3, [sp, #16]
 800721e:	46a2      	mov	sl, r4
 8007220:	e7d2      	b.n	80071c8 <_svfiprintf_r+0x9c>
 8007222:	9b03      	ldr	r3, [sp, #12]
 8007224:	1d19      	adds	r1, r3, #4
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	9103      	str	r1, [sp, #12]
 800722a:	2b00      	cmp	r3, #0
 800722c:	bfbb      	ittet	lt
 800722e:	425b      	neglt	r3, r3
 8007230:	f042 0202 	orrlt.w	r2, r2, #2
 8007234:	9307      	strge	r3, [sp, #28]
 8007236:	9307      	strlt	r3, [sp, #28]
 8007238:	bfb8      	it	lt
 800723a:	9204      	strlt	r2, [sp, #16]
 800723c:	7823      	ldrb	r3, [r4, #0]
 800723e:	2b2e      	cmp	r3, #46	; 0x2e
 8007240:	d10c      	bne.n	800725c <_svfiprintf_r+0x130>
 8007242:	7863      	ldrb	r3, [r4, #1]
 8007244:	2b2a      	cmp	r3, #42	; 0x2a
 8007246:	d135      	bne.n	80072b4 <_svfiprintf_r+0x188>
 8007248:	9b03      	ldr	r3, [sp, #12]
 800724a:	1d1a      	adds	r2, r3, #4
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	9203      	str	r2, [sp, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	bfb8      	it	lt
 8007254:	f04f 33ff 	movlt.w	r3, #4294967295
 8007258:	3402      	adds	r4, #2
 800725a:	9305      	str	r3, [sp, #20]
 800725c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007328 <_svfiprintf_r+0x1fc>
 8007260:	7821      	ldrb	r1, [r4, #0]
 8007262:	2203      	movs	r2, #3
 8007264:	4650      	mov	r0, sl
 8007266:	f7f8 ffbb 	bl	80001e0 <memchr>
 800726a:	b140      	cbz	r0, 800727e <_svfiprintf_r+0x152>
 800726c:	2340      	movs	r3, #64	; 0x40
 800726e:	eba0 000a 	sub.w	r0, r0, sl
 8007272:	fa03 f000 	lsl.w	r0, r3, r0
 8007276:	9b04      	ldr	r3, [sp, #16]
 8007278:	4303      	orrs	r3, r0
 800727a:	3401      	adds	r4, #1
 800727c:	9304      	str	r3, [sp, #16]
 800727e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007282:	4826      	ldr	r0, [pc, #152]	; (800731c <_svfiprintf_r+0x1f0>)
 8007284:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007288:	2206      	movs	r2, #6
 800728a:	f7f8 ffa9 	bl	80001e0 <memchr>
 800728e:	2800      	cmp	r0, #0
 8007290:	d038      	beq.n	8007304 <_svfiprintf_r+0x1d8>
 8007292:	4b23      	ldr	r3, [pc, #140]	; (8007320 <_svfiprintf_r+0x1f4>)
 8007294:	bb1b      	cbnz	r3, 80072de <_svfiprintf_r+0x1b2>
 8007296:	9b03      	ldr	r3, [sp, #12]
 8007298:	3307      	adds	r3, #7
 800729a:	f023 0307 	bic.w	r3, r3, #7
 800729e:	3308      	adds	r3, #8
 80072a0:	9303      	str	r3, [sp, #12]
 80072a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a4:	4433      	add	r3, r6
 80072a6:	9309      	str	r3, [sp, #36]	; 0x24
 80072a8:	e767      	b.n	800717a <_svfiprintf_r+0x4e>
 80072aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80072ae:	460c      	mov	r4, r1
 80072b0:	2001      	movs	r0, #1
 80072b2:	e7a5      	b.n	8007200 <_svfiprintf_r+0xd4>
 80072b4:	2300      	movs	r3, #0
 80072b6:	3401      	adds	r4, #1
 80072b8:	9305      	str	r3, [sp, #20]
 80072ba:	4619      	mov	r1, r3
 80072bc:	f04f 0c0a 	mov.w	ip, #10
 80072c0:	4620      	mov	r0, r4
 80072c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072c6:	3a30      	subs	r2, #48	; 0x30
 80072c8:	2a09      	cmp	r2, #9
 80072ca:	d903      	bls.n	80072d4 <_svfiprintf_r+0x1a8>
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d0c5      	beq.n	800725c <_svfiprintf_r+0x130>
 80072d0:	9105      	str	r1, [sp, #20]
 80072d2:	e7c3      	b.n	800725c <_svfiprintf_r+0x130>
 80072d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80072d8:	4604      	mov	r4, r0
 80072da:	2301      	movs	r3, #1
 80072dc:	e7f0      	b.n	80072c0 <_svfiprintf_r+0x194>
 80072de:	ab03      	add	r3, sp, #12
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	462a      	mov	r2, r5
 80072e4:	4b0f      	ldr	r3, [pc, #60]	; (8007324 <_svfiprintf_r+0x1f8>)
 80072e6:	a904      	add	r1, sp, #16
 80072e8:	4638      	mov	r0, r7
 80072ea:	f3af 8000 	nop.w
 80072ee:	1c42      	adds	r2, r0, #1
 80072f0:	4606      	mov	r6, r0
 80072f2:	d1d6      	bne.n	80072a2 <_svfiprintf_r+0x176>
 80072f4:	89ab      	ldrh	r3, [r5, #12]
 80072f6:	065b      	lsls	r3, r3, #25
 80072f8:	f53f af2c 	bmi.w	8007154 <_svfiprintf_r+0x28>
 80072fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072fe:	b01d      	add	sp, #116	; 0x74
 8007300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007304:	ab03      	add	r3, sp, #12
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	462a      	mov	r2, r5
 800730a:	4b06      	ldr	r3, [pc, #24]	; (8007324 <_svfiprintf_r+0x1f8>)
 800730c:	a904      	add	r1, sp, #16
 800730e:	4638      	mov	r0, r7
 8007310:	f000 f87a 	bl	8007408 <_printf_i>
 8007314:	e7eb      	b.n	80072ee <_svfiprintf_r+0x1c2>
 8007316:	bf00      	nop
 8007318:	080080a8 	.word	0x080080a8
 800731c:	080080b2 	.word	0x080080b2
 8007320:	00000000 	.word	0x00000000
 8007324:	08007075 	.word	0x08007075
 8007328:	080080ae 	.word	0x080080ae

0800732c <_printf_common>:
 800732c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007330:	4616      	mov	r6, r2
 8007332:	4699      	mov	r9, r3
 8007334:	688a      	ldr	r2, [r1, #8]
 8007336:	690b      	ldr	r3, [r1, #16]
 8007338:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800733c:	4293      	cmp	r3, r2
 800733e:	bfb8      	it	lt
 8007340:	4613      	movlt	r3, r2
 8007342:	6033      	str	r3, [r6, #0]
 8007344:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007348:	4607      	mov	r7, r0
 800734a:	460c      	mov	r4, r1
 800734c:	b10a      	cbz	r2, 8007352 <_printf_common+0x26>
 800734e:	3301      	adds	r3, #1
 8007350:	6033      	str	r3, [r6, #0]
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	0699      	lsls	r1, r3, #26
 8007356:	bf42      	ittt	mi
 8007358:	6833      	ldrmi	r3, [r6, #0]
 800735a:	3302      	addmi	r3, #2
 800735c:	6033      	strmi	r3, [r6, #0]
 800735e:	6825      	ldr	r5, [r4, #0]
 8007360:	f015 0506 	ands.w	r5, r5, #6
 8007364:	d106      	bne.n	8007374 <_printf_common+0x48>
 8007366:	f104 0a19 	add.w	sl, r4, #25
 800736a:	68e3      	ldr	r3, [r4, #12]
 800736c:	6832      	ldr	r2, [r6, #0]
 800736e:	1a9b      	subs	r3, r3, r2
 8007370:	42ab      	cmp	r3, r5
 8007372:	dc26      	bgt.n	80073c2 <_printf_common+0x96>
 8007374:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007378:	1e13      	subs	r3, r2, #0
 800737a:	6822      	ldr	r2, [r4, #0]
 800737c:	bf18      	it	ne
 800737e:	2301      	movne	r3, #1
 8007380:	0692      	lsls	r2, r2, #26
 8007382:	d42b      	bmi.n	80073dc <_printf_common+0xb0>
 8007384:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007388:	4649      	mov	r1, r9
 800738a:	4638      	mov	r0, r7
 800738c:	47c0      	blx	r8
 800738e:	3001      	adds	r0, #1
 8007390:	d01e      	beq.n	80073d0 <_printf_common+0xa4>
 8007392:	6823      	ldr	r3, [r4, #0]
 8007394:	68e5      	ldr	r5, [r4, #12]
 8007396:	6832      	ldr	r2, [r6, #0]
 8007398:	f003 0306 	and.w	r3, r3, #6
 800739c:	2b04      	cmp	r3, #4
 800739e:	bf08      	it	eq
 80073a0:	1aad      	subeq	r5, r5, r2
 80073a2:	68a3      	ldr	r3, [r4, #8]
 80073a4:	6922      	ldr	r2, [r4, #16]
 80073a6:	bf0c      	ite	eq
 80073a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073ac:	2500      	movne	r5, #0
 80073ae:	4293      	cmp	r3, r2
 80073b0:	bfc4      	itt	gt
 80073b2:	1a9b      	subgt	r3, r3, r2
 80073b4:	18ed      	addgt	r5, r5, r3
 80073b6:	2600      	movs	r6, #0
 80073b8:	341a      	adds	r4, #26
 80073ba:	42b5      	cmp	r5, r6
 80073bc:	d11a      	bne.n	80073f4 <_printf_common+0xc8>
 80073be:	2000      	movs	r0, #0
 80073c0:	e008      	b.n	80073d4 <_printf_common+0xa8>
 80073c2:	2301      	movs	r3, #1
 80073c4:	4652      	mov	r2, sl
 80073c6:	4649      	mov	r1, r9
 80073c8:	4638      	mov	r0, r7
 80073ca:	47c0      	blx	r8
 80073cc:	3001      	adds	r0, #1
 80073ce:	d103      	bne.n	80073d8 <_printf_common+0xac>
 80073d0:	f04f 30ff 	mov.w	r0, #4294967295
 80073d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d8:	3501      	adds	r5, #1
 80073da:	e7c6      	b.n	800736a <_printf_common+0x3e>
 80073dc:	18e1      	adds	r1, r4, r3
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	2030      	movs	r0, #48	; 0x30
 80073e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073e6:	4422      	add	r2, r4
 80073e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073f0:	3302      	adds	r3, #2
 80073f2:	e7c7      	b.n	8007384 <_printf_common+0x58>
 80073f4:	2301      	movs	r3, #1
 80073f6:	4622      	mov	r2, r4
 80073f8:	4649      	mov	r1, r9
 80073fa:	4638      	mov	r0, r7
 80073fc:	47c0      	blx	r8
 80073fe:	3001      	adds	r0, #1
 8007400:	d0e6      	beq.n	80073d0 <_printf_common+0xa4>
 8007402:	3601      	adds	r6, #1
 8007404:	e7d9      	b.n	80073ba <_printf_common+0x8e>
	...

08007408 <_printf_i>:
 8007408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800740c:	460c      	mov	r4, r1
 800740e:	4691      	mov	r9, r2
 8007410:	7e27      	ldrb	r7, [r4, #24]
 8007412:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007414:	2f78      	cmp	r7, #120	; 0x78
 8007416:	4680      	mov	r8, r0
 8007418:	469a      	mov	sl, r3
 800741a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800741e:	d807      	bhi.n	8007430 <_printf_i+0x28>
 8007420:	2f62      	cmp	r7, #98	; 0x62
 8007422:	d80a      	bhi.n	800743a <_printf_i+0x32>
 8007424:	2f00      	cmp	r7, #0
 8007426:	f000 80d8 	beq.w	80075da <_printf_i+0x1d2>
 800742a:	2f58      	cmp	r7, #88	; 0x58
 800742c:	f000 80a3 	beq.w	8007576 <_printf_i+0x16e>
 8007430:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007434:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007438:	e03a      	b.n	80074b0 <_printf_i+0xa8>
 800743a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800743e:	2b15      	cmp	r3, #21
 8007440:	d8f6      	bhi.n	8007430 <_printf_i+0x28>
 8007442:	a001      	add	r0, pc, #4	; (adr r0, 8007448 <_printf_i+0x40>)
 8007444:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007448:	080074a1 	.word	0x080074a1
 800744c:	080074b5 	.word	0x080074b5
 8007450:	08007431 	.word	0x08007431
 8007454:	08007431 	.word	0x08007431
 8007458:	08007431 	.word	0x08007431
 800745c:	08007431 	.word	0x08007431
 8007460:	080074b5 	.word	0x080074b5
 8007464:	08007431 	.word	0x08007431
 8007468:	08007431 	.word	0x08007431
 800746c:	08007431 	.word	0x08007431
 8007470:	08007431 	.word	0x08007431
 8007474:	080075c1 	.word	0x080075c1
 8007478:	080074e5 	.word	0x080074e5
 800747c:	080075a3 	.word	0x080075a3
 8007480:	08007431 	.word	0x08007431
 8007484:	08007431 	.word	0x08007431
 8007488:	080075e3 	.word	0x080075e3
 800748c:	08007431 	.word	0x08007431
 8007490:	080074e5 	.word	0x080074e5
 8007494:	08007431 	.word	0x08007431
 8007498:	08007431 	.word	0x08007431
 800749c:	080075ab 	.word	0x080075ab
 80074a0:	680b      	ldr	r3, [r1, #0]
 80074a2:	1d1a      	adds	r2, r3, #4
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	600a      	str	r2, [r1, #0]
 80074a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80074ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074b0:	2301      	movs	r3, #1
 80074b2:	e0a3      	b.n	80075fc <_printf_i+0x1f4>
 80074b4:	6825      	ldr	r5, [r4, #0]
 80074b6:	6808      	ldr	r0, [r1, #0]
 80074b8:	062e      	lsls	r6, r5, #24
 80074ba:	f100 0304 	add.w	r3, r0, #4
 80074be:	d50a      	bpl.n	80074d6 <_printf_i+0xce>
 80074c0:	6805      	ldr	r5, [r0, #0]
 80074c2:	600b      	str	r3, [r1, #0]
 80074c4:	2d00      	cmp	r5, #0
 80074c6:	da03      	bge.n	80074d0 <_printf_i+0xc8>
 80074c8:	232d      	movs	r3, #45	; 0x2d
 80074ca:	426d      	negs	r5, r5
 80074cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074d0:	485e      	ldr	r0, [pc, #376]	; (800764c <_printf_i+0x244>)
 80074d2:	230a      	movs	r3, #10
 80074d4:	e019      	b.n	800750a <_printf_i+0x102>
 80074d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80074da:	6805      	ldr	r5, [r0, #0]
 80074dc:	600b      	str	r3, [r1, #0]
 80074de:	bf18      	it	ne
 80074e0:	b22d      	sxthne	r5, r5
 80074e2:	e7ef      	b.n	80074c4 <_printf_i+0xbc>
 80074e4:	680b      	ldr	r3, [r1, #0]
 80074e6:	6825      	ldr	r5, [r4, #0]
 80074e8:	1d18      	adds	r0, r3, #4
 80074ea:	6008      	str	r0, [r1, #0]
 80074ec:	0628      	lsls	r0, r5, #24
 80074ee:	d501      	bpl.n	80074f4 <_printf_i+0xec>
 80074f0:	681d      	ldr	r5, [r3, #0]
 80074f2:	e002      	b.n	80074fa <_printf_i+0xf2>
 80074f4:	0669      	lsls	r1, r5, #25
 80074f6:	d5fb      	bpl.n	80074f0 <_printf_i+0xe8>
 80074f8:	881d      	ldrh	r5, [r3, #0]
 80074fa:	4854      	ldr	r0, [pc, #336]	; (800764c <_printf_i+0x244>)
 80074fc:	2f6f      	cmp	r7, #111	; 0x6f
 80074fe:	bf0c      	ite	eq
 8007500:	2308      	moveq	r3, #8
 8007502:	230a      	movne	r3, #10
 8007504:	2100      	movs	r1, #0
 8007506:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800750a:	6866      	ldr	r6, [r4, #4]
 800750c:	60a6      	str	r6, [r4, #8]
 800750e:	2e00      	cmp	r6, #0
 8007510:	bfa2      	ittt	ge
 8007512:	6821      	ldrge	r1, [r4, #0]
 8007514:	f021 0104 	bicge.w	r1, r1, #4
 8007518:	6021      	strge	r1, [r4, #0]
 800751a:	b90d      	cbnz	r5, 8007520 <_printf_i+0x118>
 800751c:	2e00      	cmp	r6, #0
 800751e:	d04d      	beq.n	80075bc <_printf_i+0x1b4>
 8007520:	4616      	mov	r6, r2
 8007522:	fbb5 f1f3 	udiv	r1, r5, r3
 8007526:	fb03 5711 	mls	r7, r3, r1, r5
 800752a:	5dc7      	ldrb	r7, [r0, r7]
 800752c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007530:	462f      	mov	r7, r5
 8007532:	42bb      	cmp	r3, r7
 8007534:	460d      	mov	r5, r1
 8007536:	d9f4      	bls.n	8007522 <_printf_i+0x11a>
 8007538:	2b08      	cmp	r3, #8
 800753a:	d10b      	bne.n	8007554 <_printf_i+0x14c>
 800753c:	6823      	ldr	r3, [r4, #0]
 800753e:	07df      	lsls	r7, r3, #31
 8007540:	d508      	bpl.n	8007554 <_printf_i+0x14c>
 8007542:	6923      	ldr	r3, [r4, #16]
 8007544:	6861      	ldr	r1, [r4, #4]
 8007546:	4299      	cmp	r1, r3
 8007548:	bfde      	ittt	le
 800754a:	2330      	movle	r3, #48	; 0x30
 800754c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007550:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007554:	1b92      	subs	r2, r2, r6
 8007556:	6122      	str	r2, [r4, #16]
 8007558:	f8cd a000 	str.w	sl, [sp]
 800755c:	464b      	mov	r3, r9
 800755e:	aa03      	add	r2, sp, #12
 8007560:	4621      	mov	r1, r4
 8007562:	4640      	mov	r0, r8
 8007564:	f7ff fee2 	bl	800732c <_printf_common>
 8007568:	3001      	adds	r0, #1
 800756a:	d14c      	bne.n	8007606 <_printf_i+0x1fe>
 800756c:	f04f 30ff 	mov.w	r0, #4294967295
 8007570:	b004      	add	sp, #16
 8007572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007576:	4835      	ldr	r0, [pc, #212]	; (800764c <_printf_i+0x244>)
 8007578:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800757c:	6823      	ldr	r3, [r4, #0]
 800757e:	680e      	ldr	r6, [r1, #0]
 8007580:	061f      	lsls	r7, r3, #24
 8007582:	f856 5b04 	ldr.w	r5, [r6], #4
 8007586:	600e      	str	r6, [r1, #0]
 8007588:	d514      	bpl.n	80075b4 <_printf_i+0x1ac>
 800758a:	07d9      	lsls	r1, r3, #31
 800758c:	bf44      	itt	mi
 800758e:	f043 0320 	orrmi.w	r3, r3, #32
 8007592:	6023      	strmi	r3, [r4, #0]
 8007594:	b91d      	cbnz	r5, 800759e <_printf_i+0x196>
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	f023 0320 	bic.w	r3, r3, #32
 800759c:	6023      	str	r3, [r4, #0]
 800759e:	2310      	movs	r3, #16
 80075a0:	e7b0      	b.n	8007504 <_printf_i+0xfc>
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	f043 0320 	orr.w	r3, r3, #32
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	2378      	movs	r3, #120	; 0x78
 80075ac:	4828      	ldr	r0, [pc, #160]	; (8007650 <_printf_i+0x248>)
 80075ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075b2:	e7e3      	b.n	800757c <_printf_i+0x174>
 80075b4:	065e      	lsls	r6, r3, #25
 80075b6:	bf48      	it	mi
 80075b8:	b2ad      	uxthmi	r5, r5
 80075ba:	e7e6      	b.n	800758a <_printf_i+0x182>
 80075bc:	4616      	mov	r6, r2
 80075be:	e7bb      	b.n	8007538 <_printf_i+0x130>
 80075c0:	680b      	ldr	r3, [r1, #0]
 80075c2:	6826      	ldr	r6, [r4, #0]
 80075c4:	6960      	ldr	r0, [r4, #20]
 80075c6:	1d1d      	adds	r5, r3, #4
 80075c8:	600d      	str	r5, [r1, #0]
 80075ca:	0635      	lsls	r5, r6, #24
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	d501      	bpl.n	80075d4 <_printf_i+0x1cc>
 80075d0:	6018      	str	r0, [r3, #0]
 80075d2:	e002      	b.n	80075da <_printf_i+0x1d2>
 80075d4:	0671      	lsls	r1, r6, #25
 80075d6:	d5fb      	bpl.n	80075d0 <_printf_i+0x1c8>
 80075d8:	8018      	strh	r0, [r3, #0]
 80075da:	2300      	movs	r3, #0
 80075dc:	6123      	str	r3, [r4, #16]
 80075de:	4616      	mov	r6, r2
 80075e0:	e7ba      	b.n	8007558 <_printf_i+0x150>
 80075e2:	680b      	ldr	r3, [r1, #0]
 80075e4:	1d1a      	adds	r2, r3, #4
 80075e6:	600a      	str	r2, [r1, #0]
 80075e8:	681e      	ldr	r6, [r3, #0]
 80075ea:	6862      	ldr	r2, [r4, #4]
 80075ec:	2100      	movs	r1, #0
 80075ee:	4630      	mov	r0, r6
 80075f0:	f7f8 fdf6 	bl	80001e0 <memchr>
 80075f4:	b108      	cbz	r0, 80075fa <_printf_i+0x1f2>
 80075f6:	1b80      	subs	r0, r0, r6
 80075f8:	6060      	str	r0, [r4, #4]
 80075fa:	6863      	ldr	r3, [r4, #4]
 80075fc:	6123      	str	r3, [r4, #16]
 80075fe:	2300      	movs	r3, #0
 8007600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007604:	e7a8      	b.n	8007558 <_printf_i+0x150>
 8007606:	6923      	ldr	r3, [r4, #16]
 8007608:	4632      	mov	r2, r6
 800760a:	4649      	mov	r1, r9
 800760c:	4640      	mov	r0, r8
 800760e:	47d0      	blx	sl
 8007610:	3001      	adds	r0, #1
 8007612:	d0ab      	beq.n	800756c <_printf_i+0x164>
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	079b      	lsls	r3, r3, #30
 8007618:	d413      	bmi.n	8007642 <_printf_i+0x23a>
 800761a:	68e0      	ldr	r0, [r4, #12]
 800761c:	9b03      	ldr	r3, [sp, #12]
 800761e:	4298      	cmp	r0, r3
 8007620:	bfb8      	it	lt
 8007622:	4618      	movlt	r0, r3
 8007624:	e7a4      	b.n	8007570 <_printf_i+0x168>
 8007626:	2301      	movs	r3, #1
 8007628:	4632      	mov	r2, r6
 800762a:	4649      	mov	r1, r9
 800762c:	4640      	mov	r0, r8
 800762e:	47d0      	blx	sl
 8007630:	3001      	adds	r0, #1
 8007632:	d09b      	beq.n	800756c <_printf_i+0x164>
 8007634:	3501      	adds	r5, #1
 8007636:	68e3      	ldr	r3, [r4, #12]
 8007638:	9903      	ldr	r1, [sp, #12]
 800763a:	1a5b      	subs	r3, r3, r1
 800763c:	42ab      	cmp	r3, r5
 800763e:	dcf2      	bgt.n	8007626 <_printf_i+0x21e>
 8007640:	e7eb      	b.n	800761a <_printf_i+0x212>
 8007642:	2500      	movs	r5, #0
 8007644:	f104 0619 	add.w	r6, r4, #25
 8007648:	e7f5      	b.n	8007636 <_printf_i+0x22e>
 800764a:	bf00      	nop
 800764c:	080080b9 	.word	0x080080b9
 8007650:	080080ca 	.word	0x080080ca

08007654 <memcpy>:
 8007654:	440a      	add	r2, r1
 8007656:	4291      	cmp	r1, r2
 8007658:	f100 33ff 	add.w	r3, r0, #4294967295
 800765c:	d100      	bne.n	8007660 <memcpy+0xc>
 800765e:	4770      	bx	lr
 8007660:	b510      	push	{r4, lr}
 8007662:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007666:	f803 4f01 	strb.w	r4, [r3, #1]!
 800766a:	4291      	cmp	r1, r2
 800766c:	d1f9      	bne.n	8007662 <memcpy+0xe>
 800766e:	bd10      	pop	{r4, pc}

08007670 <memmove>:
 8007670:	4288      	cmp	r0, r1
 8007672:	b510      	push	{r4, lr}
 8007674:	eb01 0402 	add.w	r4, r1, r2
 8007678:	d902      	bls.n	8007680 <memmove+0x10>
 800767a:	4284      	cmp	r4, r0
 800767c:	4623      	mov	r3, r4
 800767e:	d807      	bhi.n	8007690 <memmove+0x20>
 8007680:	1e43      	subs	r3, r0, #1
 8007682:	42a1      	cmp	r1, r4
 8007684:	d008      	beq.n	8007698 <memmove+0x28>
 8007686:	f811 2b01 	ldrb.w	r2, [r1], #1
 800768a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800768e:	e7f8      	b.n	8007682 <memmove+0x12>
 8007690:	4402      	add	r2, r0
 8007692:	4601      	mov	r1, r0
 8007694:	428a      	cmp	r2, r1
 8007696:	d100      	bne.n	800769a <memmove+0x2a>
 8007698:	bd10      	pop	{r4, pc}
 800769a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800769e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076a2:	e7f7      	b.n	8007694 <memmove+0x24>

080076a4 <_free_r>:
 80076a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076a6:	2900      	cmp	r1, #0
 80076a8:	d048      	beq.n	800773c <_free_r+0x98>
 80076aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ae:	9001      	str	r0, [sp, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f1a1 0404 	sub.w	r4, r1, #4
 80076b6:	bfb8      	it	lt
 80076b8:	18e4      	addlt	r4, r4, r3
 80076ba:	f000 f8d3 	bl	8007864 <__malloc_lock>
 80076be:	4a20      	ldr	r2, [pc, #128]	; (8007740 <_free_r+0x9c>)
 80076c0:	9801      	ldr	r0, [sp, #4]
 80076c2:	6813      	ldr	r3, [r2, #0]
 80076c4:	4615      	mov	r5, r2
 80076c6:	b933      	cbnz	r3, 80076d6 <_free_r+0x32>
 80076c8:	6063      	str	r3, [r4, #4]
 80076ca:	6014      	str	r4, [r2, #0]
 80076cc:	b003      	add	sp, #12
 80076ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076d2:	f000 b8cd 	b.w	8007870 <__malloc_unlock>
 80076d6:	42a3      	cmp	r3, r4
 80076d8:	d90b      	bls.n	80076f2 <_free_r+0x4e>
 80076da:	6821      	ldr	r1, [r4, #0]
 80076dc:	1862      	adds	r2, r4, r1
 80076de:	4293      	cmp	r3, r2
 80076e0:	bf04      	itt	eq
 80076e2:	681a      	ldreq	r2, [r3, #0]
 80076e4:	685b      	ldreq	r3, [r3, #4]
 80076e6:	6063      	str	r3, [r4, #4]
 80076e8:	bf04      	itt	eq
 80076ea:	1852      	addeq	r2, r2, r1
 80076ec:	6022      	streq	r2, [r4, #0]
 80076ee:	602c      	str	r4, [r5, #0]
 80076f0:	e7ec      	b.n	80076cc <_free_r+0x28>
 80076f2:	461a      	mov	r2, r3
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	b10b      	cbz	r3, 80076fc <_free_r+0x58>
 80076f8:	42a3      	cmp	r3, r4
 80076fa:	d9fa      	bls.n	80076f2 <_free_r+0x4e>
 80076fc:	6811      	ldr	r1, [r2, #0]
 80076fe:	1855      	adds	r5, r2, r1
 8007700:	42a5      	cmp	r5, r4
 8007702:	d10b      	bne.n	800771c <_free_r+0x78>
 8007704:	6824      	ldr	r4, [r4, #0]
 8007706:	4421      	add	r1, r4
 8007708:	1854      	adds	r4, r2, r1
 800770a:	42a3      	cmp	r3, r4
 800770c:	6011      	str	r1, [r2, #0]
 800770e:	d1dd      	bne.n	80076cc <_free_r+0x28>
 8007710:	681c      	ldr	r4, [r3, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	6053      	str	r3, [r2, #4]
 8007716:	4421      	add	r1, r4
 8007718:	6011      	str	r1, [r2, #0]
 800771a:	e7d7      	b.n	80076cc <_free_r+0x28>
 800771c:	d902      	bls.n	8007724 <_free_r+0x80>
 800771e:	230c      	movs	r3, #12
 8007720:	6003      	str	r3, [r0, #0]
 8007722:	e7d3      	b.n	80076cc <_free_r+0x28>
 8007724:	6825      	ldr	r5, [r4, #0]
 8007726:	1961      	adds	r1, r4, r5
 8007728:	428b      	cmp	r3, r1
 800772a:	bf04      	itt	eq
 800772c:	6819      	ldreq	r1, [r3, #0]
 800772e:	685b      	ldreq	r3, [r3, #4]
 8007730:	6063      	str	r3, [r4, #4]
 8007732:	bf04      	itt	eq
 8007734:	1949      	addeq	r1, r1, r5
 8007736:	6021      	streq	r1, [r4, #0]
 8007738:	6054      	str	r4, [r2, #4]
 800773a:	e7c7      	b.n	80076cc <_free_r+0x28>
 800773c:	b003      	add	sp, #12
 800773e:	bd30      	pop	{r4, r5, pc}
 8007740:	200008d0 	.word	0x200008d0

08007744 <_malloc_r>:
 8007744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007746:	1ccd      	adds	r5, r1, #3
 8007748:	f025 0503 	bic.w	r5, r5, #3
 800774c:	3508      	adds	r5, #8
 800774e:	2d0c      	cmp	r5, #12
 8007750:	bf38      	it	cc
 8007752:	250c      	movcc	r5, #12
 8007754:	2d00      	cmp	r5, #0
 8007756:	4606      	mov	r6, r0
 8007758:	db01      	blt.n	800775e <_malloc_r+0x1a>
 800775a:	42a9      	cmp	r1, r5
 800775c:	d903      	bls.n	8007766 <_malloc_r+0x22>
 800775e:	230c      	movs	r3, #12
 8007760:	6033      	str	r3, [r6, #0]
 8007762:	2000      	movs	r0, #0
 8007764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007766:	f000 f87d 	bl	8007864 <__malloc_lock>
 800776a:	4921      	ldr	r1, [pc, #132]	; (80077f0 <_malloc_r+0xac>)
 800776c:	680a      	ldr	r2, [r1, #0]
 800776e:	4614      	mov	r4, r2
 8007770:	b99c      	cbnz	r4, 800779a <_malloc_r+0x56>
 8007772:	4f20      	ldr	r7, [pc, #128]	; (80077f4 <_malloc_r+0xb0>)
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	b923      	cbnz	r3, 8007782 <_malloc_r+0x3e>
 8007778:	4621      	mov	r1, r4
 800777a:	4630      	mov	r0, r6
 800777c:	f000 f862 	bl	8007844 <_sbrk_r>
 8007780:	6038      	str	r0, [r7, #0]
 8007782:	4629      	mov	r1, r5
 8007784:	4630      	mov	r0, r6
 8007786:	f000 f85d 	bl	8007844 <_sbrk_r>
 800778a:	1c43      	adds	r3, r0, #1
 800778c:	d123      	bne.n	80077d6 <_malloc_r+0x92>
 800778e:	230c      	movs	r3, #12
 8007790:	6033      	str	r3, [r6, #0]
 8007792:	4630      	mov	r0, r6
 8007794:	f000 f86c 	bl	8007870 <__malloc_unlock>
 8007798:	e7e3      	b.n	8007762 <_malloc_r+0x1e>
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	1b5b      	subs	r3, r3, r5
 800779e:	d417      	bmi.n	80077d0 <_malloc_r+0x8c>
 80077a0:	2b0b      	cmp	r3, #11
 80077a2:	d903      	bls.n	80077ac <_malloc_r+0x68>
 80077a4:	6023      	str	r3, [r4, #0]
 80077a6:	441c      	add	r4, r3
 80077a8:	6025      	str	r5, [r4, #0]
 80077aa:	e004      	b.n	80077b6 <_malloc_r+0x72>
 80077ac:	6863      	ldr	r3, [r4, #4]
 80077ae:	42a2      	cmp	r2, r4
 80077b0:	bf0c      	ite	eq
 80077b2:	600b      	streq	r3, [r1, #0]
 80077b4:	6053      	strne	r3, [r2, #4]
 80077b6:	4630      	mov	r0, r6
 80077b8:	f000 f85a 	bl	8007870 <__malloc_unlock>
 80077bc:	f104 000b 	add.w	r0, r4, #11
 80077c0:	1d23      	adds	r3, r4, #4
 80077c2:	f020 0007 	bic.w	r0, r0, #7
 80077c6:	1ac2      	subs	r2, r0, r3
 80077c8:	d0cc      	beq.n	8007764 <_malloc_r+0x20>
 80077ca:	1a1b      	subs	r3, r3, r0
 80077cc:	50a3      	str	r3, [r4, r2]
 80077ce:	e7c9      	b.n	8007764 <_malloc_r+0x20>
 80077d0:	4622      	mov	r2, r4
 80077d2:	6864      	ldr	r4, [r4, #4]
 80077d4:	e7cc      	b.n	8007770 <_malloc_r+0x2c>
 80077d6:	1cc4      	adds	r4, r0, #3
 80077d8:	f024 0403 	bic.w	r4, r4, #3
 80077dc:	42a0      	cmp	r0, r4
 80077de:	d0e3      	beq.n	80077a8 <_malloc_r+0x64>
 80077e0:	1a21      	subs	r1, r4, r0
 80077e2:	4630      	mov	r0, r6
 80077e4:	f000 f82e 	bl	8007844 <_sbrk_r>
 80077e8:	3001      	adds	r0, #1
 80077ea:	d1dd      	bne.n	80077a8 <_malloc_r+0x64>
 80077ec:	e7cf      	b.n	800778e <_malloc_r+0x4a>
 80077ee:	bf00      	nop
 80077f0:	200008d0 	.word	0x200008d0
 80077f4:	200008d4 	.word	0x200008d4

080077f8 <_realloc_r>:
 80077f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fa:	4607      	mov	r7, r0
 80077fc:	4614      	mov	r4, r2
 80077fe:	460e      	mov	r6, r1
 8007800:	b921      	cbnz	r1, 800780c <_realloc_r+0x14>
 8007802:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007806:	4611      	mov	r1, r2
 8007808:	f7ff bf9c 	b.w	8007744 <_malloc_r>
 800780c:	b922      	cbnz	r2, 8007818 <_realloc_r+0x20>
 800780e:	f7ff ff49 	bl	80076a4 <_free_r>
 8007812:	4625      	mov	r5, r4
 8007814:	4628      	mov	r0, r5
 8007816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007818:	f000 f830 	bl	800787c <_malloc_usable_size_r>
 800781c:	42a0      	cmp	r0, r4
 800781e:	d20f      	bcs.n	8007840 <_realloc_r+0x48>
 8007820:	4621      	mov	r1, r4
 8007822:	4638      	mov	r0, r7
 8007824:	f7ff ff8e 	bl	8007744 <_malloc_r>
 8007828:	4605      	mov	r5, r0
 800782a:	2800      	cmp	r0, #0
 800782c:	d0f2      	beq.n	8007814 <_realloc_r+0x1c>
 800782e:	4631      	mov	r1, r6
 8007830:	4622      	mov	r2, r4
 8007832:	f7ff ff0f 	bl	8007654 <memcpy>
 8007836:	4631      	mov	r1, r6
 8007838:	4638      	mov	r0, r7
 800783a:	f7ff ff33 	bl	80076a4 <_free_r>
 800783e:	e7e9      	b.n	8007814 <_realloc_r+0x1c>
 8007840:	4635      	mov	r5, r6
 8007842:	e7e7      	b.n	8007814 <_realloc_r+0x1c>

08007844 <_sbrk_r>:
 8007844:	b538      	push	{r3, r4, r5, lr}
 8007846:	4d06      	ldr	r5, [pc, #24]	; (8007860 <_sbrk_r+0x1c>)
 8007848:	2300      	movs	r3, #0
 800784a:	4604      	mov	r4, r0
 800784c:	4608      	mov	r0, r1
 800784e:	602b      	str	r3, [r5, #0]
 8007850:	f7fb ffa0 	bl	8003794 <_sbrk>
 8007854:	1c43      	adds	r3, r0, #1
 8007856:	d102      	bne.n	800785e <_sbrk_r+0x1a>
 8007858:	682b      	ldr	r3, [r5, #0]
 800785a:	b103      	cbz	r3, 800785e <_sbrk_r+0x1a>
 800785c:	6023      	str	r3, [r4, #0]
 800785e:	bd38      	pop	{r3, r4, r5, pc}
 8007860:	20000e08 	.word	0x20000e08

08007864 <__malloc_lock>:
 8007864:	4801      	ldr	r0, [pc, #4]	; (800786c <__malloc_lock+0x8>)
 8007866:	f000 b811 	b.w	800788c <__retarget_lock_acquire_recursive>
 800786a:	bf00      	nop
 800786c:	20000e10 	.word	0x20000e10

08007870 <__malloc_unlock>:
 8007870:	4801      	ldr	r0, [pc, #4]	; (8007878 <__malloc_unlock+0x8>)
 8007872:	f000 b80c 	b.w	800788e <__retarget_lock_release_recursive>
 8007876:	bf00      	nop
 8007878:	20000e10 	.word	0x20000e10

0800787c <_malloc_usable_size_r>:
 800787c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007880:	1f18      	subs	r0, r3, #4
 8007882:	2b00      	cmp	r3, #0
 8007884:	bfbc      	itt	lt
 8007886:	580b      	ldrlt	r3, [r1, r0]
 8007888:	18c0      	addlt	r0, r0, r3
 800788a:	4770      	bx	lr

0800788c <__retarget_lock_acquire_recursive>:
 800788c:	4770      	bx	lr

0800788e <__retarget_lock_release_recursive>:
 800788e:	4770      	bx	lr

08007890 <_init>:
 8007890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007892:	bf00      	nop
 8007894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007896:	bc08      	pop	{r3}
 8007898:	469e      	mov	lr, r3
 800789a:	4770      	bx	lr

0800789c <_fini>:
 800789c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789e:	bf00      	nop
 80078a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078a2:	bc08      	pop	{r3}
 80078a4:	469e      	mov	lr, r3
 80078a6:	4770      	bx	lr
