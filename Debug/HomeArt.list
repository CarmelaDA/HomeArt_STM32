
HomeArt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005120  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  080052b0  080052b0  000152b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005940  08005940  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005940  08005940  00015940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005948  08005948  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005948  08005948  00015948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800594c  0800594c  0001594c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000a64  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ad4  20000ad4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e1b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000230e  00000000  00000000  00030ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d18  00000000  00000000  000331d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c80  00000000  00000000  00033ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000216f7  00000000  00000000  00034b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fa89  00000000  00000000  0005625f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbb40  00000000  00000000  00065ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00131828  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a90  00000000  00000000  0013187c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005298 	.word	0x08005298

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005298 	.word	0x08005298

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <ESP_clearBuffer>:
char *Terminate = "</body></html>";


/*****************************************************************************************************************************************/

void ESP_clearBuffer(void){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

	memset(buffer_app, 0, 60);
 800057c:	223c      	movs	r2, #60	; 0x3c
 800057e:	2100      	movs	r1, #0
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <ESP_clearBuffer+0x18>)
 8000582:	f004 fa53 	bl	8004a2c <memset>
	buffer_index = 0;
 8000586:	4b03      	ldr	r3, [pc, #12]	; (8000594 <ESP_clearBuffer+0x1c>)
 8000588:	2200      	movs	r2, #0
 800058a:	801a      	strh	r2, [r3, #0]
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200008b8 	.word	0x200008b8
 8000594:	20000996 	.word	0x20000996

08000598 <ESP_Init>:


void ESP_Init(char *SSID, char *PASSWD){
 8000598:	b580      	push	{r7, lr}
 800059a:	b09a      	sub	sp, #104	; 0x68
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]

	ESP_clearBuffer();
 80005a2:	f7ff ffe9 	bl	8000578 <ESP_clearBuffer>
	char data[80];

	ringInit();
 80005a6:	f000 fb0f 	bl	8000bc8 <ringInit>

	HAL_Delay(1000);
 80005aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ae:	f001 fb3f 	bl	8001c30 <HAL_Delay>

	/********** AT **********/

	UART_send("AT\r\n", WiFi_UART);
 80005b2:	4974      	ldr	r1, [pc, #464]	; (8000784 <ESP_Init+0x1ec>)
 80005b4:	4874      	ldr	r0, [pc, #464]	; (8000788 <ESP_Init+0x1f0>)
 80005b6:	f000 fcc5 	bl	8000f44 <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 80005ba:	bf00      	nop
 80005bc:	4971      	ldr	r1, [pc, #452]	; (8000784 <ESP_Init+0x1ec>)
 80005be:	4873      	ldr	r0, [pc, #460]	; (800078c <ESP_Init+0x1f4>)
 80005c0:	f000 fd56 	bl	8001070 <UART_waitFor>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f8      	beq.n	80005bc <ESP_Init+0x24>
	UART_send("AT  ---->  OK\n", PC_UART);
 80005ca:	4971      	ldr	r1, [pc, #452]	; (8000790 <ESP_Init+0x1f8>)
 80005cc:	4871      	ldr	r0, [pc, #452]	; (8000794 <ESP_Init+0x1fc>)
 80005ce:	f000 fcb9 	bl	8000f44 <UART_send>


	HAL_Delay(2000);
 80005d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005d6:	f001 fb2b 	bl	8001c30 <HAL_Delay>


	/********** AT+RST **********/
	UART_send("AT+RST\r\n", WiFi_UART);
 80005da:	496a      	ldr	r1, [pc, #424]	; (8000784 <ESP_Init+0x1ec>)
 80005dc:	486e      	ldr	r0, [pc, #440]	; (8000798 <ESP_Init+0x200>)
 80005de:	f000 fcb1 	bl	8000f44 <UART_send>
	UART_send("\nReseteando ", PC_UART);
 80005e2:	496b      	ldr	r1, [pc, #428]	; (8000790 <ESP_Init+0x1f8>)
 80005e4:	486d      	ldr	r0, [pc, #436]	; (800079c <ESP_Init+0x204>)
 80005e6:	f000 fcad 	bl	8000f44 <UART_send>

	for (int i=0; i<3; i++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	667b      	str	r3, [r7, #100]	; 0x64
 80005ee:	e00a      	b.n	8000606 <ESP_Init+0x6e>
	{
		UART_send(" . ", PC_UART);
 80005f0:	4967      	ldr	r1, [pc, #412]	; (8000790 <ESP_Init+0x1f8>)
 80005f2:	486b      	ldr	r0, [pc, #428]	; (80007a0 <ESP_Init+0x208>)
 80005f4:	f000 fca6 	bl	8000f44 <UART_send>
		HAL_Delay(1500);
 80005f8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005fc:	f001 fb18 	bl	8001c30 <HAL_Delay>
	for (int i=0; i<3; i++)
 8000600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000602:	3301      	adds	r3, #1
 8000604:	667b      	str	r3, [r7, #100]	; 0x64
 8000606:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000608:	2b02      	cmp	r3, #2
 800060a:	ddf1      	ble.n	80005f0 <ESP_Init+0x58>
	}


	/********** AT **********/
	UART_send("AT\r\n", WiFi_UART);
 800060c:	495d      	ldr	r1, [pc, #372]	; (8000784 <ESP_Init+0x1ec>)
 800060e:	485e      	ldr	r0, [pc, #376]	; (8000788 <ESP_Init+0x1f0>)
 8000610:	f000 fc98 	bl	8000f44 <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 8000614:	bf00      	nop
 8000616:	495b      	ldr	r1, [pc, #364]	; (8000784 <ESP_Init+0x1ec>)
 8000618:	485c      	ldr	r0, [pc, #368]	; (800078c <ESP_Init+0x1f4>)
 800061a:	f000 fd29 	bl	8001070 <UART_waitFor>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d0f8      	beq.n	8000616 <ESP_Init+0x7e>
	UART_send("\n\nAT  ---->  OK\n\n", PC_UART);
 8000624:	495a      	ldr	r1, [pc, #360]	; (8000790 <ESP_Init+0x1f8>)
 8000626:	485f      	ldr	r0, [pc, #380]	; (80007a4 <ESP_Init+0x20c>)
 8000628:	f000 fc8c 	bl	8000f44 <UART_send>


	HAL_Delay(2000);
 800062c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000630:	f001 fafe 	bl	8001c30 <HAL_Delay>


	/********** AT+CWMODE=3 **********/
	UART_send("AT+CWMODE=3\r\n", WiFi_UART);
 8000634:	4953      	ldr	r1, [pc, #332]	; (8000784 <ESP_Init+0x1ec>)
 8000636:	485c      	ldr	r0, [pc, #368]	; (80007a8 <ESP_Init+0x210>)
 8000638:	f000 fc84 	bl	8000f44 <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 800063c:	bf00      	nop
 800063e:	4951      	ldr	r1, [pc, #324]	; (8000784 <ESP_Init+0x1ec>)
 8000640:	4852      	ldr	r0, [pc, #328]	; (800078c <ESP_Init+0x1f4>)
 8000642:	f000 fd15 	bl	8001070 <UART_waitFor>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d0f8      	beq.n	800063e <ESP_Init+0xa6>
	UART_send("CW MODE  ---->  3\n\n", PC_UART);
 800064c:	4950      	ldr	r1, [pc, #320]	; (8000790 <ESP_Init+0x1f8>)
 800064e:	4857      	ldr	r0, [pc, #348]	; (80007ac <ESP_Init+0x214>)
 8000650:	f000 fc78 	bl	8000f44 <UART_send>


	/********** AT+CWJAP="SSID","PASSWD" **********/
	UART_send("Conectando con la RED proporcionada ", PC_UART);
 8000654:	494e      	ldr	r1, [pc, #312]	; (8000790 <ESP_Init+0x1f8>)
 8000656:	4856      	ldr	r0, [pc, #344]	; (80007b0 <ESP_Init+0x218>)
 8000658:	f000 fc74 	bl	8000f44 <UART_send>

	for (int i=0; i<3; i++)
 800065c:	2300      	movs	r3, #0
 800065e:	663b      	str	r3, [r7, #96]	; 0x60
 8000660:	e00a      	b.n	8000678 <ESP_Init+0xe0>
	{
		UART_send(" . ", PC_UART);
 8000662:	494b      	ldr	r1, [pc, #300]	; (8000790 <ESP_Init+0x1f8>)
 8000664:	484e      	ldr	r0, [pc, #312]	; (80007a0 <ESP_Init+0x208>)
 8000666:	f000 fc6d 	bl	8000f44 <UART_send>
		HAL_Delay(1500);
 800066a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800066e:	f001 fadf 	bl	8001c30 <HAL_Delay>
	for (int i=0; i<3; i++)
 8000672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000674:	3301      	adds	r3, #1
 8000676:	663b      	str	r3, [r7, #96]	; 0x60
 8000678:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800067a:	2b02      	cmp	r3, #2
 800067c:	ddf1      	ble.n	8000662 <ESP_Init+0xca>
	}

	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 800067e:	f107 000c 	add.w	r0, r7, #12
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	494b      	ldr	r1, [pc, #300]	; (80007b4 <ESP_Init+0x21c>)
 8000688:	f004 f9d8 	bl	8004a3c <siprintf>
	UART_send(data, WiFi_UART);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	493c      	ldr	r1, [pc, #240]	; (8000784 <ESP_Init+0x1ec>)
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fc56 	bl	8000f44 <UART_send>
	while (!(UART_waitFor("WIFI GOT IP\r\n\r\nOK\r\n", WiFi_UART)));
 8000698:	bf00      	nop
 800069a:	493a      	ldr	r1, [pc, #232]	; (8000784 <ESP_Init+0x1ec>)
 800069c:	4846      	ldr	r0, [pc, #280]	; (80007b8 <ESP_Init+0x220>)
 800069e:	f000 fce7 	bl	8001070 <UART_waitFor>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d0f8      	beq.n	800069a <ESP_Init+0x102>
	sprintf (data, "\n\nConectado a  \"%s\"\n\n", SSID);
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	4943      	ldr	r1, [pc, #268]	; (80007bc <ESP_Init+0x224>)
 80006b0:	4618      	mov	r0, r3
 80006b2:	f004 f9c3 	bl	8004a3c <siprintf>
	UART_send(data,PC_UART);
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	4935      	ldr	r1, [pc, #212]	; (8000790 <ESP_Init+0x1f8>)
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fc41 	bl	8000f44 <UART_send>
	//UART_send("AT+CIPSTA?\r\n", WiFi_UART);
	//sprintf (data, "AT+CIPSTA?\r\n");


	/********** AT+CIFSR **********/
	UART_send("AT+CIFSR\r\n", WiFi_UART);
 80006c2:	4930      	ldr	r1, [pc, #192]	; (8000784 <ESP_Init+0x1ec>)
 80006c4:	483e      	ldr	r0, [pc, #248]	; (80007c0 <ESP_Init+0x228>)
 80006c6:	f000 fc3d 	bl	8000f44 <UART_send>
	while (!(UART_waitFor("CIFSR:STAIP,\"", WiFi_UART)));
 80006ca:	bf00      	nop
 80006cc:	492d      	ldr	r1, [pc, #180]	; (8000784 <ESP_Init+0x1ec>)
 80006ce:	483d      	ldr	r0, [pc, #244]	; (80007c4 <ESP_Init+0x22c>)
 80006d0:	f000 fcce 	bl	8001070 <UART_waitFor>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d0f8      	beq.n	80006cc <ESP_Init+0x134>
	while (!(UART_copyUpto("\"",buffer, WiFi_UART)));
 80006da:	bf00      	nop
 80006dc:	4a29      	ldr	r2, [pc, #164]	; (8000784 <ESP_Init+0x1ec>)
 80006de:	493a      	ldr	r1, [pc, #232]	; (80007c8 <ESP_Init+0x230>)
 80006e0:	483a      	ldr	r0, [pc, #232]	; (80007cc <ESP_Init+0x234>)
 80006e2:	f000 fc47 	bl	8000f74 <UART_copyUpto>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0f7      	beq.n	80006dc <ESP_Init+0x144>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 80006ec:	bf00      	nop
 80006ee:	4925      	ldr	r1, [pc, #148]	; (8000784 <ESP_Init+0x1ec>)
 80006f0:	4826      	ldr	r0, [pc, #152]	; (800078c <ESP_Init+0x1f4>)
 80006f2:	f000 fcbd 	bl	8001070 <UART_waitFor>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d0f8      	beq.n	80006ee <ESP_Init+0x156>
	int len = strlen (buffer);
 80006fc:	4832      	ldr	r0, [pc, #200]	; (80007c8 <ESP_Init+0x230>)
 80006fe:	f7ff fd67 	bl	80001d0 <strlen>
 8000702:	4603      	mov	r3, r0
 8000704:	65fb      	str	r3, [r7, #92]	; 0x5c
	buffer[len-1] = '\0';
 8000706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000708:	3b01      	subs	r3, #1
 800070a:	4a2f      	ldr	r2, [pc, #188]	; (80007c8 <ESP_Init+0x230>)
 800070c:	2100      	movs	r1, #0
 800070e:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP :  %s\n\n", buffer);
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	4a2c      	ldr	r2, [pc, #176]	; (80007c8 <ESP_Init+0x230>)
 8000716:	492e      	ldr	r1, [pc, #184]	; (80007d0 <ESP_Init+0x238>)
 8000718:	4618      	mov	r0, r3
 800071a:	f004 f98f 	bl	8004a3c <siprintf>
	UART_send(data, PC_UART);
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	491b      	ldr	r1, [pc, #108]	; (8000790 <ESP_Init+0x1f8>)
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fc0d 	bl	8000f44 <UART_send>


	/********** AT+CIPMUX=1 **********/
	UART_send("AT+CIPMUX=1\r\n", WiFi_UART);
 800072a:	4916      	ldr	r1, [pc, #88]	; (8000784 <ESP_Init+0x1ec>)
 800072c:	4829      	ldr	r0, [pc, #164]	; (80007d4 <ESP_Init+0x23c>)
 800072e:	f000 fc09 	bl	8000f44 <UART_send>
	while (!(UART_waitFor("AT+CIPMUX=1\r\r\n\r\nOK\r\n", WiFi_UART)));
 8000732:	bf00      	nop
 8000734:	4913      	ldr	r1, [pc, #76]	; (8000784 <ESP_Init+0x1ec>)
 8000736:	4828      	ldr	r0, [pc, #160]	; (80007d8 <ESP_Init+0x240>)
 8000738:	f000 fc9a 	bl	8001070 <UART_waitFor>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0f8      	beq.n	8000734 <ESP_Init+0x19c>
	UART_send("CIPMUX  ---->  OK\n\n", PC_UART);
 8000742:	4913      	ldr	r1, [pc, #76]	; (8000790 <ESP_Init+0x1f8>)
 8000744:	4825      	ldr	r0, [pc, #148]	; (80007dc <ESP_Init+0x244>)
 8000746:	f000 fbfd 	bl	8000f44 <UART_send>
	//while (!(UART_waitFor("OK\r\n", WiFi_UART)));
	//UART_send("CIPSTART  ---->  OK\n\n", PC_UART);


	/********** AT+CIPSERVER=1,80 **********/
	UART_send("AT+CIPSERVER=1,80\r\n", WiFi_UART);
 800074a:	490e      	ldr	r1, [pc, #56]	; (8000784 <ESP_Init+0x1ec>)
 800074c:	4824      	ldr	r0, [pc, #144]	; (80007e0 <ESP_Init+0x248>)
 800074e:	f000 fbf9 	bl	8000f44 <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 8000752:	bf00      	nop
 8000754:	490b      	ldr	r1, [pc, #44]	; (8000784 <ESP_Init+0x1ec>)
 8000756:	480d      	ldr	r0, [pc, #52]	; (800078c <ESP_Init+0x1f4>)
 8000758:	f000 fc8a 	bl	8001070 <UART_waitFor>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d0f8      	beq.n	8000754 <ESP_Init+0x1bc>
	UART_send("CIPSERVER  ---->  OK\n\n", PC_UART);
 8000762:	490b      	ldr	r1, [pc, #44]	; (8000790 <ESP_Init+0x1f8>)
 8000764:	481f      	ldr	r0, [pc, #124]	; (80007e4 <ESP_Init+0x24c>)
 8000766:	f000 fbed 	bl	8000f44 <UART_send>


	/********** FIN **********/
	UART_send("Conectado a la IP\n\n", PC_UART);
 800076a:	4909      	ldr	r1, [pc, #36]	; (8000790 <ESP_Init+0x1f8>)
 800076c:	481e      	ldr	r0, [pc, #120]	; (80007e8 <ESP_Init+0x250>)
 800076e:	f000 fbe9 	bl	8000f44 <UART_send>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1); // CONNECTED
 8000772:	2201      	movs	r2, #1
 8000774:	2101      	movs	r1, #1
 8000776:	481d      	ldr	r0, [pc, #116]	; (80007ec <ESP_Init+0x254>)
 8000778:	f001 fdbe 	bl	80022f8 <HAL_GPIO_WritePin>
}
 800077c:	bf00      	nop
 800077e:	3768      	adds	r7, #104	; 0x68
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000a7c 	.word	0x20000a7c
 8000788:	080056c4 	.word	0x080056c4
 800078c:	080056cc 	.word	0x080056cc
 8000790:	20000a38 	.word	0x20000a38
 8000794:	080056d4 	.word	0x080056d4
 8000798:	080056e4 	.word	0x080056e4
 800079c:	080056f0 	.word	0x080056f0
 80007a0:	08005700 	.word	0x08005700
 80007a4:	08005704 	.word	0x08005704
 80007a8:	08005718 	.word	0x08005718
 80007ac:	08005728 	.word	0x08005728
 80007b0:	0800573c 	.word	0x0800573c
 80007b4:	08005764 	.word	0x08005764
 80007b8:	0800577c 	.word	0x0800577c
 80007bc:	08005790 	.word	0x08005790
 80007c0:	080057a8 	.word	0x080057a8
 80007c4:	080057b4 	.word	0x080057b4
 80007c8:	200008f4 	.word	0x200008f4
 80007cc:	080057c4 	.word	0x080057c4
 80007d0:	080057c8 	.word	0x080057c8
 80007d4:	080057d4 	.word	0x080057d4
 80007d8:	080057e4 	.word	0x080057e4
 80007dc:	080057fc 	.word	0x080057fc
 80007e0:	08005810 	.word	0x08005810
 80007e4:	08005824 	.word	0x08005824
 80007e8:	0800583c 	.word	0x0800583c
 80007ec:	40020800 	.word	0x40020800

080007f0 <ESP_messageHandler>:
	}
	return -1;
}


void ESP_messageHandler(void){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

	//__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
	ESP_clearBuffer();
 80007f4:	f7ff fec0 	bl	8000578 <ESP_clearBuffer>
	//memset(textrc, 0, 70);

	HAL_UART_Receive(&huart2, (uint8_t *)textrc, 100, 100); //(uint8_t *)
 80007f8:	2364      	movs	r3, #100	; 0x64
 80007fa:	2264      	movs	r2, #100	; 0x64
 80007fc:	49aa      	ldr	r1, [pc, #680]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 80007fe:	48ab      	ldr	r0, [pc, #684]	; (8000aac <ESP_messageHandler+0x2bc>)
 8000800:	f003 f9bf 	bl	8003b82 <HAL_UART_Receive>

	//while (!(UART_waitFor("SET", WiFi_UART)))
	{
		HAL_UART_Transmit(&huart6, (uint8_t *)textrc, 100, HAL_MAX_DELAY);
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
 8000808:	2264      	movs	r2, #100	; 0x64
 800080a:	49a7      	ldr	r1, [pc, #668]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 800080c:	48a8      	ldr	r0, [pc, #672]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 800080e:	f003 f926 	bl	8003a5e <HAL_UART_Transmit>
		//HAL_Delay(10);
		UART_send("\n", PC_UART);
 8000812:	49a7      	ldr	r1, [pc, #668]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000814:	48a7      	ldr	r0, [pc, #668]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 8000816:	f000 fb95 	bl	8000f44 <UART_send>
	}

	fragment[0] = textrc[25]; // Asignación de Fragmento
 800081a:	4ba3      	ldr	r3, [pc, #652]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 800081c:	7e5a      	ldrb	r2, [r3, #25]
 800081e:	4ba6      	ldr	r3, [pc, #664]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000820:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart6, (uint8_t *)fragment, 1, HAL_MAX_DELAY);
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	2201      	movs	r2, #1
 8000828:	49a3      	ldr	r1, [pc, #652]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 800082a:	48a1      	ldr	r0, [pc, #644]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 800082c:	f003 f917 	bl	8003a5e <HAL_UART_Transmit>
	UART_send("\n", PC_UART);
 8000830:	499f      	ldr	r1, [pc, #636]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000832:	48a0      	ldr	r0, [pc, #640]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 8000834:	f000 fb86 	bl	8000f44 <UART_send>
	//HAL_UART_Transmit(&huart6, (uint8_t *)vIlum, 2, HAL_MAX_DELAY);
	//UART_send("\n", PC_UART);

	// ILUMINACIÓN
	if (fragment[0] == 'i'){
 8000838:	4b9f      	ldr	r3, [pc, #636]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b69      	cmp	r3, #105	; 0x69
 800083e:	f040 81a0 	bne.w	8000b82 <ESP_messageHandler+0x392>
		UART_send("ILUMINACION \n", PC_UART);
 8000842:	499b      	ldr	r1, [pc, #620]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000844:	489d      	ldr	r0, [pc, #628]	; (8000abc <ESP_messageHandler+0x2cc>)
 8000846:	f000 fb7d 	bl	8000f44 <UART_send>
		vIlum[0] = textrc[28]; 	// Luz Sala
 800084a:	4b97      	ldr	r3, [pc, #604]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 800084c:	7f1a      	ldrb	r2, [r3, #28]
 800084e:	4b9c      	ldr	r3, [pc, #624]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000850:	701a      	strb	r2, [r3, #0]
		vIlum[1] = textrc[31]; 	// Luz Comedor
 8000852:	4b95      	ldr	r3, [pc, #596]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 8000854:	7fda      	ldrb	r2, [r3, #31]
 8000856:	4b9a      	ldr	r3, [pc, #616]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000858:	705a      	strb	r2, [r3, #1]
		vIlum[2] = textrc[34]; 	// Luz Ambiente
 800085a:	4b93      	ldr	r3, [pc, #588]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 800085c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000860:	4b97      	ldr	r3, [pc, #604]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000862:	709a      	strb	r2, [r3, #2]
		vIlum[3] = textrc[37]; 	// Luz Recibidor
 8000864:	4b90      	ldr	r3, [pc, #576]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 8000866:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800086a:	4b95      	ldr	r3, [pc, #596]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800086c:	70da      	strb	r2, [r3, #3]
		vIlum[4] = textrc[40]; 	// Luz Cocina
 800086e:	4b8e      	ldr	r3, [pc, #568]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 8000870:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000874:	4b92      	ldr	r3, [pc, #584]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000876:	711a      	strb	r2, [r3, #4]
		vIlum[5] = textrc[43]; 	// Luz Fregadero
 8000878:	4b8b      	ldr	r3, [pc, #556]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 800087a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800087e:	4b90      	ldr	r3, [pc, #576]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000880:	715a      	strb	r2, [r3, #5]
		vIlum[6] = textrc[46]; 	// Luz Baño
 8000882:	4b89      	ldr	r3, [pc, #548]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 8000884:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8000888:	4b8d      	ldr	r3, [pc, #564]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800088a:	719a      	strb	r2, [r3, #6]
		vIlum[7] = textrc[49]; 	// Luz Espejo
 800088c:	4b86      	ldr	r3, [pc, #536]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 800088e:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8000892:	4b8b      	ldr	r3, [pc, #556]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000894:	71da      	strb	r2, [r3, #7]
		vIlum[8] = textrc[52]; 	// Luz Dormitorio
 8000896:	4b84      	ldr	r3, [pc, #528]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 8000898:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800089c:	4b88      	ldr	r3, [pc, #544]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800089e:	721a      	strb	r2, [r3, #8]
		vIlum[9] = textrc[55]; 	// Luz Mesita Izq
 80008a0:	4b81      	ldr	r3, [pc, #516]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 80008a2:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80008a6:	4b86      	ldr	r3, [pc, #536]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008a8:	725a      	strb	r2, [r3, #9]
		vIlum[10] = textrc[58]; // Luz Mesita Dch
 80008aa:	4b7f      	ldr	r3, [pc, #508]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 80008ac:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80008b0:	4b83      	ldr	r3, [pc, #524]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008b2:	729a      	strb	r2, [r3, #10]
		vIlum[11] = textrc[61]; // Luz Oficina
 80008b4:	4b7c      	ldr	r3, [pc, #496]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 80008b6:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80008ba:	4b81      	ldr	r3, [pc, #516]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008bc:	72da      	strb	r2, [r3, #11]
		vIlum[12] = textrc[64]; // Luz Gaming
 80008be:	4b7a      	ldr	r3, [pc, #488]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 80008c0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80008c4:	4b7e      	ldr	r3, [pc, #504]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008c6:	731a      	strb	r2, [r3, #12]
		vIlum[13] = textrc[67]; // Luz Garaje
 80008c8:	4b77      	ldr	r3, [pc, #476]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 80008ca:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80008ce:	4b7c      	ldr	r3, [pc, #496]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008d0:	735a      	strb	r2, [r3, #13]
		vIlum[14] = textrc[70]; // Luz Jardín
 80008d2:	4b75      	ldr	r3, [pc, #468]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 80008d4:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80008d8:	4b79      	ldr	r3, [pc, #484]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008da:	739a      	strb	r2, [r3, #14]
		vIlum[15] = textrc[73]; // Luz Porche
 80008dc:	4b72      	ldr	r3, [pc, #456]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 80008de:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 80008e2:	4b77      	ldr	r3, [pc, #476]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008e4:	73da      	strb	r2, [r3, #15]
		vIlum[16] = textrc[76]; // Luz Tendedero
 80008e6:	4b70      	ldr	r3, [pc, #448]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 80008e8:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80008ec:	4b74      	ldr	r3, [pc, #464]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008ee:	741a      	strb	r2, [r3, #16]


		if(vIlum[0] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 80008f0:	4b73      	ldr	r3, [pc, #460]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b30      	cmp	r3, #48	; 0x30
 80008f6:	d105      	bne.n	8000904 <ESP_messageHandler+0x114>
 80008f8:	2200      	movs	r2, #0
 80008fa:	2180      	movs	r1, #128	; 0x80
 80008fc:	4871      	ldr	r0, [pc, #452]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 80008fe:	f001 fcfb 	bl	80022f8 <HAL_GPIO_WritePin>
 8000902:	e008      	b.n	8000916 <ESP_messageHandler+0x126>
		else if(vIlum[0] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 8000904:	4b6e      	ldr	r3, [pc, #440]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b31      	cmp	r3, #49	; 0x31
 800090a:	d104      	bne.n	8000916 <ESP_messageHandler+0x126>
 800090c:	2201      	movs	r2, #1
 800090e:	2180      	movs	r1, #128	; 0x80
 8000910:	486c      	ldr	r0, [pc, #432]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 8000912:	f001 fcf1 	bl	80022f8 <HAL_GPIO_WritePin>

		if(vIlum[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000916:	4b6a      	ldr	r3, [pc, #424]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000918:	785b      	ldrb	r3, [r3, #1]
 800091a:	2b30      	cmp	r3, #48	; 0x30
 800091c:	d105      	bne.n	800092a <ESP_messageHandler+0x13a>
 800091e:	2200      	movs	r2, #0
 8000920:	2140      	movs	r1, #64	; 0x40
 8000922:	4868      	ldr	r0, [pc, #416]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 8000924:	f001 fce8 	bl	80022f8 <HAL_GPIO_WritePin>
 8000928:	e008      	b.n	800093c <ESP_messageHandler+0x14c>
		else if(vIlum[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 800092a:	4b65      	ldr	r3, [pc, #404]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800092c:	785b      	ldrb	r3, [r3, #1]
 800092e:	2b31      	cmp	r3, #49	; 0x31
 8000930:	d104      	bne.n	800093c <ESP_messageHandler+0x14c>
 8000932:	2201      	movs	r2, #1
 8000934:	2140      	movs	r1, #64	; 0x40
 8000936:	4863      	ldr	r0, [pc, #396]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 8000938:	f001 fcde 	bl	80022f8 <HAL_GPIO_WritePin>

		if(vIlum[2] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 800093c:	4b60      	ldr	r3, [pc, #384]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800093e:	789b      	ldrb	r3, [r3, #2]
 8000940:	2b30      	cmp	r3, #48	; 0x30
 8000942:	d105      	bne.n	8000950 <ESP_messageHandler+0x160>
 8000944:	2200      	movs	r2, #0
 8000946:	2120      	movs	r1, #32
 8000948:	485e      	ldr	r0, [pc, #376]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 800094a:	f001 fcd5 	bl	80022f8 <HAL_GPIO_WritePin>
 800094e:	e008      	b.n	8000962 <ESP_messageHandler+0x172>
		else if(vIlum[2] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000950:	4b5b      	ldr	r3, [pc, #364]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000952:	789b      	ldrb	r3, [r3, #2]
 8000954:	2b31      	cmp	r3, #49	; 0x31
 8000956:	d104      	bne.n	8000962 <ESP_messageHandler+0x172>
 8000958:	2201      	movs	r2, #1
 800095a:	2120      	movs	r1, #32
 800095c:	4859      	ldr	r0, [pc, #356]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 800095e:	f001 fccb 	bl	80022f8 <HAL_GPIO_WritePin>

		if(vIlum[3] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000962:	4b57      	ldr	r3, [pc, #348]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000964:	78db      	ldrb	r3, [r3, #3]
 8000966:	2b30      	cmp	r3, #48	; 0x30
 8000968:	d105      	bne.n	8000976 <ESP_messageHandler+0x186>
 800096a:	2200      	movs	r2, #0
 800096c:	2110      	movs	r1, #16
 800096e:	4855      	ldr	r0, [pc, #340]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 8000970:	f001 fcc2 	bl	80022f8 <HAL_GPIO_WritePin>
 8000974:	e008      	b.n	8000988 <ESP_messageHandler+0x198>
		else if(vIlum[3] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000976:	4b52      	ldr	r3, [pc, #328]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000978:	78db      	ldrb	r3, [r3, #3]
 800097a:	2b31      	cmp	r3, #49	; 0x31
 800097c:	d104      	bne.n	8000988 <ESP_messageHandler+0x198>
 800097e:	2201      	movs	r2, #1
 8000980:	2110      	movs	r1, #16
 8000982:	4850      	ldr	r0, [pc, #320]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 8000984:	f001 fcb8 	bl	80022f8 <HAL_GPIO_WritePin>

		if(vIlum[4] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000988:	4b4d      	ldr	r3, [pc, #308]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800098a:	791b      	ldrb	r3, [r3, #4]
 800098c:	2b30      	cmp	r3, #48	; 0x30
 800098e:	d105      	bne.n	800099c <ESP_messageHandler+0x1ac>
 8000990:	2200      	movs	r2, #0
 8000992:	2108      	movs	r1, #8
 8000994:	484b      	ldr	r0, [pc, #300]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 8000996:	f001 fcaf 	bl	80022f8 <HAL_GPIO_WritePin>
 800099a:	e008      	b.n	80009ae <ESP_messageHandler+0x1be>
		else if(vIlum[4] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 800099c:	4b48      	ldr	r3, [pc, #288]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800099e:	791b      	ldrb	r3, [r3, #4]
 80009a0:	2b31      	cmp	r3, #49	; 0x31
 80009a2:	d104      	bne.n	80009ae <ESP_messageHandler+0x1be>
 80009a4:	2201      	movs	r2, #1
 80009a6:	2108      	movs	r1, #8
 80009a8:	4846      	ldr	r0, [pc, #280]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 80009aa:	f001 fca5 	bl	80022f8 <HAL_GPIO_WritePin>

		if(vIlum[5] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, RESET);
 80009ae:	4b44      	ldr	r3, [pc, #272]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80009b0:	795b      	ldrb	r3, [r3, #5]
 80009b2:	2b30      	cmp	r3, #48	; 0x30
 80009b4:	d105      	bne.n	80009c2 <ESP_messageHandler+0x1d2>
 80009b6:	2200      	movs	r2, #0
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	4843      	ldr	r0, [pc, #268]	; (8000ac8 <ESP_messageHandler+0x2d8>)
 80009bc:	f001 fc9c 	bl	80022f8 <HAL_GPIO_WritePin>
 80009c0:	e008      	b.n	80009d4 <ESP_messageHandler+0x1e4>
		else if(vIlum[5] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET);
 80009c2:	4b3f      	ldr	r3, [pc, #252]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80009c4:	795b      	ldrb	r3, [r3, #5]
 80009c6:	2b31      	cmp	r3, #49	; 0x31
 80009c8:	d104      	bne.n	80009d4 <ESP_messageHandler+0x1e4>
 80009ca:	2201      	movs	r2, #1
 80009cc:	2180      	movs	r1, #128	; 0x80
 80009ce:	483e      	ldr	r0, [pc, #248]	; (8000ac8 <ESP_messageHandler+0x2d8>)
 80009d0:	f001 fc92 	bl	80022f8 <HAL_GPIO_WritePin>

		if(vIlum[6] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, RESET);
 80009d4:	4b3a      	ldr	r3, [pc, #232]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80009d6:	799b      	ldrb	r3, [r3, #6]
 80009d8:	2b30      	cmp	r3, #48	; 0x30
 80009da:	d105      	bne.n	80009e8 <ESP_messageHandler+0x1f8>
 80009dc:	2200      	movs	r2, #0
 80009de:	2140      	movs	r1, #64	; 0x40
 80009e0:	4839      	ldr	r0, [pc, #228]	; (8000ac8 <ESP_messageHandler+0x2d8>)
 80009e2:	f001 fc89 	bl	80022f8 <HAL_GPIO_WritePin>
 80009e6:	e008      	b.n	80009fa <ESP_messageHandler+0x20a>
		else if(vIlum[6] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, SET);
 80009e8:	4b35      	ldr	r3, [pc, #212]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80009ea:	799b      	ldrb	r3, [r3, #6]
 80009ec:	2b31      	cmp	r3, #49	; 0x31
 80009ee:	d104      	bne.n	80009fa <ESP_messageHandler+0x20a>
 80009f0:	2201      	movs	r2, #1
 80009f2:	2140      	movs	r1, #64	; 0x40
 80009f4:	4834      	ldr	r0, [pc, #208]	; (8000ac8 <ESP_messageHandler+0x2d8>)
 80009f6:	f001 fc7f 	bl	80022f8 <HAL_GPIO_WritePin>

		if(vIlum[7] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, RESET);
 80009fa:	4b31      	ldr	r3, [pc, #196]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80009fc:	79db      	ldrb	r3, [r3, #7]
 80009fe:	2b30      	cmp	r3, #48	; 0x30
 8000a00:	d105      	bne.n	8000a0e <ESP_messageHandler+0x21e>
 8000a02:	2200      	movs	r2, #0
 8000a04:	2120      	movs	r1, #32
 8000a06:	4830      	ldr	r0, [pc, #192]	; (8000ac8 <ESP_messageHandler+0x2d8>)
 8000a08:	f001 fc76 	bl	80022f8 <HAL_GPIO_WritePin>
 8000a0c:	e008      	b.n	8000a20 <ESP_messageHandler+0x230>
		else if(vIlum[7] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, SET);
 8000a0e:	4b2c      	ldr	r3, [pc, #176]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a10:	79db      	ldrb	r3, [r3, #7]
 8000a12:	2b31      	cmp	r3, #49	; 0x31
 8000a14:	d104      	bne.n	8000a20 <ESP_messageHandler+0x230>
 8000a16:	2201      	movs	r2, #1
 8000a18:	2120      	movs	r1, #32
 8000a1a:	482b      	ldr	r0, [pc, #172]	; (8000ac8 <ESP_messageHandler+0x2d8>)
 8000a1c:	f001 fc6c 	bl	80022f8 <HAL_GPIO_WritePin>

		if(vIlum[8] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
 8000a20:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a22:	7a1b      	ldrb	r3, [r3, #8]
 8000a24:	2b30      	cmp	r3, #48	; 0x30
 8000a26:	d105      	bne.n	8000a34 <ESP_messageHandler+0x244>
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2110      	movs	r1, #16
 8000a2c:	4826      	ldr	r0, [pc, #152]	; (8000ac8 <ESP_messageHandler+0x2d8>)
 8000a2e:	f001 fc63 	bl	80022f8 <HAL_GPIO_WritePin>
 8000a32:	e008      	b.n	8000a46 <ESP_messageHandler+0x256>
		else if(vIlum[8] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a36:	7a1b      	ldrb	r3, [r3, #8]
 8000a38:	2b31      	cmp	r3, #49	; 0x31
 8000a3a:	d104      	bne.n	8000a46 <ESP_messageHandler+0x256>
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2110      	movs	r1, #16
 8000a40:	4821      	ldr	r0, [pc, #132]	; (8000ac8 <ESP_messageHandler+0x2d8>)
 8000a42:	f001 fc59 	bl	80022f8 <HAL_GPIO_WritePin>

		if(vIlum[9] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, RESET);
 8000a46:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a48:	7a5b      	ldrb	r3, [r3, #9]
 8000a4a:	2b30      	cmp	r3, #48	; 0x30
 8000a4c:	d105      	bne.n	8000a5a <ESP_messageHandler+0x26a>
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2108      	movs	r1, #8
 8000a52:	481d      	ldr	r0, [pc, #116]	; (8000ac8 <ESP_messageHandler+0x2d8>)
 8000a54:	f001 fc50 	bl	80022f8 <HAL_GPIO_WritePin>
 8000a58:	e008      	b.n	8000a6c <ESP_messageHandler+0x27c>
		else if(vIlum[9] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, SET);
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a5c:	7a5b      	ldrb	r3, [r3, #9]
 8000a5e:	2b31      	cmp	r3, #49	; 0x31
 8000a60:	d104      	bne.n	8000a6c <ESP_messageHandler+0x27c>
 8000a62:	2201      	movs	r2, #1
 8000a64:	2108      	movs	r1, #8
 8000a66:	4818      	ldr	r0, [pc, #96]	; (8000ac8 <ESP_messageHandler+0x2d8>)
 8000a68:	f001 fc46 	bl	80022f8 <HAL_GPIO_WritePin>

		if(vIlum[10] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET);
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a6e:	7a9b      	ldrb	r3, [r3, #10]
 8000a70:	2b30      	cmp	r3, #48	; 0x30
 8000a72:	d105      	bne.n	8000a80 <ESP_messageHandler+0x290>
 8000a74:	2200      	movs	r2, #0
 8000a76:	2104      	movs	r1, #4
 8000a78:	4813      	ldr	r0, [pc, #76]	; (8000ac8 <ESP_messageHandler+0x2d8>)
 8000a7a:	f001 fc3d 	bl	80022f8 <HAL_GPIO_WritePin>
 8000a7e:	e008      	b.n	8000a92 <ESP_messageHandler+0x2a2>
		else if(vIlum[10] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a82:	7a9b      	ldrb	r3, [r3, #10]
 8000a84:	2b31      	cmp	r3, #49	; 0x31
 8000a86:	d104      	bne.n	8000a92 <ESP_messageHandler+0x2a2>
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2104      	movs	r1, #4
 8000a8c:	480e      	ldr	r0, [pc, #56]	; (8000ac8 <ESP_messageHandler+0x2d8>)
 8000a8e:	f001 fc33 	bl	80022f8 <HAL_GPIO_WritePin>

		if(vIlum[11] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET);
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a94:	7adb      	ldrb	r3, [r3, #11]
 8000a96:	2b30      	cmp	r3, #48	; 0x30
 8000a98:	d118      	bne.n	8000acc <ESP_messageHandler+0x2dc>
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	480a      	ldr	r0, [pc, #40]	; (8000ac8 <ESP_messageHandler+0x2d8>)
 8000aa0:	f001 fc2a 	bl	80022f8 <HAL_GPIO_WritePin>
 8000aa4:	e01b      	b.n	8000ade <ESP_messageHandler+0x2ee>
 8000aa6:	bf00      	nop
 8000aa8:	20000924 	.word	0x20000924
 8000aac:	20000a7c 	.word	0x20000a7c
 8000ab0:	20000a38 	.word	0x20000a38
 8000ab4:	080058b8 	.word	0x080058b8
 8000ab8:	2000091c 	.word	0x2000091c
 8000abc:	080058bc 	.word	0x080058bc
 8000ac0:	20000908 	.word	0x20000908
 8000ac4:	40020400 	.word	0x40020400
 8000ac8:	40020c00 	.word	0x40020c00
		else if(vIlum[11] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, SET);
 8000acc:	4b36      	ldr	r3, [pc, #216]	; (8000ba8 <ESP_messageHandler+0x3b8>)
 8000ace:	7adb      	ldrb	r3, [r3, #11]
 8000ad0:	2b31      	cmp	r3, #49	; 0x31
 8000ad2:	d104      	bne.n	8000ade <ESP_messageHandler+0x2ee>
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	4834      	ldr	r0, [pc, #208]	; (8000bac <ESP_messageHandler+0x3bc>)
 8000ada:	f001 fc0d 	bl	80022f8 <HAL_GPIO_WritePin>
				HAL_Delay(10); // Buscar contador para no bloquear el programa
			}
			}
		}*/

		if(vIlum[13] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 8000ade:	4b32      	ldr	r3, [pc, #200]	; (8000ba8 <ESP_messageHandler+0x3b8>)
 8000ae0:	7b5b      	ldrb	r3, [r3, #13]
 8000ae2:	2b30      	cmp	r3, #48	; 0x30
 8000ae4:	d106      	bne.n	8000af4 <ESP_messageHandler+0x304>
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aec:	4830      	ldr	r0, [pc, #192]	; (8000bb0 <ESP_messageHandler+0x3c0>)
 8000aee:	f001 fc03 	bl	80022f8 <HAL_GPIO_WritePin>
 8000af2:	e009      	b.n	8000b08 <ESP_messageHandler+0x318>
		else if(vIlum[13] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8000af4:	4b2c      	ldr	r3, [pc, #176]	; (8000ba8 <ESP_messageHandler+0x3b8>)
 8000af6:	7b5b      	ldrb	r3, [r3, #13]
 8000af8:	2b31      	cmp	r3, #49	; 0x31
 8000afa:	d105      	bne.n	8000b08 <ESP_messageHandler+0x318>
 8000afc:	2201      	movs	r2, #1
 8000afe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b02:	482b      	ldr	r0, [pc, #172]	; (8000bb0 <ESP_messageHandler+0x3c0>)
 8000b04:	f001 fbf8 	bl	80022f8 <HAL_GPIO_WritePin>

		if(vIlum[14] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET);
 8000b08:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <ESP_messageHandler+0x3b8>)
 8000b0a:	7b9b      	ldrb	r3, [r3, #14]
 8000b0c:	2b30      	cmp	r3, #48	; 0x30
 8000b0e:	d105      	bne.n	8000b1c <ESP_messageHandler+0x32c>
 8000b10:	2200      	movs	r2, #0
 8000b12:	2101      	movs	r1, #1
 8000b14:	4825      	ldr	r0, [pc, #148]	; (8000bac <ESP_messageHandler+0x3bc>)
 8000b16:	f001 fbef 	bl	80022f8 <HAL_GPIO_WritePin>
 8000b1a:	e008      	b.n	8000b2e <ESP_messageHandler+0x33e>
		else if(vIlum[14] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 8000b1c:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <ESP_messageHandler+0x3b8>)
 8000b1e:	7b9b      	ldrb	r3, [r3, #14]
 8000b20:	2b31      	cmp	r3, #49	; 0x31
 8000b22:	d104      	bne.n	8000b2e <ESP_messageHandler+0x33e>
 8000b24:	2201      	movs	r2, #1
 8000b26:	2101      	movs	r1, #1
 8000b28:	4820      	ldr	r0, [pc, #128]	; (8000bac <ESP_messageHandler+0x3bc>)
 8000b2a:	f001 fbe5 	bl	80022f8 <HAL_GPIO_WritePin>

		if(vIlum[15] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET);
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <ESP_messageHandler+0x3b8>)
 8000b30:	7bdb      	ldrb	r3, [r3, #15]
 8000b32:	2b30      	cmp	r3, #48	; 0x30
 8000b34:	d106      	bne.n	8000b44 <ESP_messageHandler+0x354>
 8000b36:	2200      	movs	r2, #0
 8000b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3c:	481c      	ldr	r0, [pc, #112]	; (8000bb0 <ESP_messageHandler+0x3c0>)
 8000b3e:	f001 fbdb 	bl	80022f8 <HAL_GPIO_WritePin>
 8000b42:	e009      	b.n	8000b58 <ESP_messageHandler+0x368>
		else if(vIlum[15] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <ESP_messageHandler+0x3b8>)
 8000b46:	7bdb      	ldrb	r3, [r3, #15]
 8000b48:	2b31      	cmp	r3, #49	; 0x31
 8000b4a:	d105      	bne.n	8000b58 <ESP_messageHandler+0x368>
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b52:	4817      	ldr	r0, [pc, #92]	; (8000bb0 <ESP_messageHandler+0x3c0>)
 8000b54:	f001 fbd0 	bl	80022f8 <HAL_GPIO_WritePin>

		if(vIlum[16] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET);
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <ESP_messageHandler+0x3b8>)
 8000b5a:	7c1b      	ldrb	r3, [r3, #16]
 8000b5c:	2b30      	cmp	r3, #48	; 0x30
 8000b5e:	d106      	bne.n	8000b6e <ESP_messageHandler+0x37e>
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b66:	4812      	ldr	r0, [pc, #72]	; (8000bb0 <ESP_messageHandler+0x3c0>)
 8000b68:	f001 fbc6 	bl	80022f8 <HAL_GPIO_WritePin>
 8000b6c:	e009      	b.n	8000b82 <ESP_messageHandler+0x392>
		else if(vIlum[16] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <ESP_messageHandler+0x3b8>)
 8000b70:	7c1b      	ldrb	r3, [r3, #16]
 8000b72:	2b31      	cmp	r3, #49	; 0x31
 8000b74:	d105      	bne.n	8000b82 <ESP_messageHandler+0x392>
 8000b76:	2201      	movs	r2, #1
 8000b78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b7c:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <ESP_messageHandler+0x3c0>)
 8000b7e:	f001 fbbb 	bl	80022f8 <HAL_GPIO_WritePin>
	}

	// SEGURIDAD
	if (fragment[0] == 'a'){
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <ESP_messageHandler+0x3c4>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b61      	cmp	r3, #97	; 0x61
 8000b88:	d10b      	bne.n	8000ba2 <ESP_messageHandler+0x3b2>
		UART_send("SEGURIDAD \n", PC_UART);
 8000b8a:	490b      	ldr	r1, [pc, #44]	; (8000bb8 <ESP_messageHandler+0x3c8>)
 8000b8c:	480b      	ldr	r0, [pc, #44]	; (8000bbc <ESP_messageHandler+0x3cc>)
 8000b8e:	f000 f9d9 	bl	8000f44 <UART_send>
		vSeg[0] = textrc[28]; // Alarma Interior
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <ESP_messageHandler+0x3d0>)
 8000b94:	7f1a      	ldrb	r2, [r3, #28]
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <ESP_messageHandler+0x3d4>)
 8000b98:	701a      	strb	r2, [r3, #0]
		vSeg[1] = textrc[31]; // Alarma Exterior
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <ESP_messageHandler+0x3d0>)
 8000b9c:	7fda      	ldrb	r2, [r3, #31]
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <ESP_messageHandler+0x3d4>)
 8000ba0:	705a      	strb	r2, [r3, #1]



	//ESP_clearBuffer();
	//__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000908 	.word	0x20000908
 8000bac:	40020c00 	.word	0x40020c00
 8000bb0:	40020800 	.word	0x40020800
 8000bb4:	2000091c 	.word	0x2000091c
 8000bb8:	20000a38 	.word	0x20000a38
 8000bbc:	080058cc 	.word	0x080058cc
 8000bc0:	20000924 	.word	0x20000924
 8000bc4:	20000994 	.word	0x20000994

08000bc8 <ringInit>:

void storeChar(unsigned char c, Ring_Buffer *buffer);


void ringInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
	_rx_buffer1 = &rx_buffer1;
 8000bcc:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <ringInit+0x68>)
 8000bce:	4a19      	ldr	r2, [pc, #100]	; (8000c34 <ringInit+0x6c>)
 8000bd0:	601a      	str	r2, [r3, #0]
    _tx_buffer1 = &tx_buffer1;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <ringInit+0x70>)
 8000bd4:	4a19      	ldr	r2, [pc, #100]	; (8000c3c <ringInit+0x74>)
 8000bd6:	601a      	str	r2, [r3, #0]
    _rx_buffer2 = &rx_buffer2;
 8000bd8:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <ringInit+0x78>)
 8000bda:	4a1a      	ldr	r2, [pc, #104]	; (8000c44 <ringInit+0x7c>)
 8000bdc:	601a      	str	r2, [r3, #0]
    _tx_buffer2 = &tx_buffer2;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <ringInit+0x80>)
 8000be0:	4a1a      	ldr	r2, [pc, #104]	; (8000c4c <ringInit+0x84>)
 8000be2:	601a      	str	r2, [r3, #0]

    /* Habilita la INTERRUPCIÓN por ERROR del UART (frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_ERR);
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <ringInit+0x88>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	695a      	ldr	r2, [r3, #20]
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <ringInit+0x88>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f042 0201 	orr.w	r2, r2, #1
 8000bf2:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_ERR);
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <ringInit+0x8c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	695a      	ldr	r2, [r3, #20]
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <ringInit+0x8c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f042 0201 	orr.w	r2, r2, #1
 8000c02:	615a      	str	r2, [r3, #20]

    /* Habilita la INTERRUPCIÓN por REGISTRO DE DATA VACÍO */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_RXNE);
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <ringInit+0x88>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	68da      	ldr	r2, [r3, #12]
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <ringInit+0x88>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f042 0220 	orr.w	r2, r2, #32
 8000c12:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_RXNE);
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <ringInit+0x8c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	68da      	ldr	r2, [r3, #12]
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <ringInit+0x8c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f042 0220 	orr.w	r2, r2, #32
 8000c22:	60da      	str	r2, [r3, #12]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	2000099c 	.word	0x2000099c
 8000c34:	2000008c 	.word	0x2000008c
 8000c38:	200009a0 	.word	0x200009a0
 8000c3c:	20000294 	.word	0x20000294
 8000c40:	200009a4 	.word	0x200009a4
 8000c44:	2000049c 	.word	0x2000049c
 8000c48:	20000998 	.word	0x20000998
 8000c4c:	200006a4 	.word	0x200006a4
 8000c50:	20000a7c 	.word	0x20000a7c
 8000c54:	20000a38 	.word	0x20000a38

08000c58 <storeChar>:


void storeChar(unsigned char c, Ring_Buffer *buffer)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
    int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c70:	60fb      	str	r3, [r7, #12]

    // Si queremos almacenar lo recibido justo antes de TAIL, significando que HEAD avanzará hasta la posición de TAIL,
    // se provocará un desbordamiento (overflow) del BUFFER, y, por lo tanto, no se escribirá el caracter o ni avanzaremos HEAD.
    if(i != buffer->tail)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d009      	beq.n	8000c92 <storeChar+0x3a>
    {
    	buffer->buffer[buffer->head] = c;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c84:	683a      	ldr	r2, [r7, #0]
 8000c86:	79f9      	ldrb	r1, [r7, #7]
 8000c88:	54d1      	strb	r1, [r2, r3]
        buffer->head = i;
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }
}
 8000c92:	bf00      	nop
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
	...

08000ca0 <UART_peek>:
	}
}


int UART_peek(UART_HandleTypeDef *uart)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a1c      	ldr	r2, [pc, #112]	; (8000d1c <UART_peek+0x7c>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d114      	bne.n	8000cda <UART_peek+0x3a>
	{
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <UART_peek+0x80>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000cb8:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <UART_peek+0x80>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d102      	bne.n	8000cca <UART_peek+0x2a>
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc8:	e022      	b.n	8000d10 <UART_peek+0x70>

		else return _rx_buffer1->buffer[_rx_buffer1->tail];
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <UART_peek+0x80>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <UART_peek+0x80>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000cd6:	5cd3      	ldrb	r3, [r2, r3]
 8000cd8:	e01a      	b.n	8000d10 <UART_peek+0x70>
	}

	else if (uart == PC_UART)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a11      	ldr	r2, [pc, #68]	; (8000d24 <UART_peek+0x84>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d114      	bne.n	8000d0c <UART_peek+0x6c>
	{
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <UART_peek+0x88>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <UART_peek+0x88>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d102      	bne.n	8000cfc <UART_peek+0x5c>
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	e009      	b.n	8000d10 <UART_peek+0x70>

		else return _rx_buffer2->buffer[_rx_buffer2->tail];
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <UART_peek+0x88>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <UART_peek+0x88>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000d08:	5cd3      	ldrb	r3, [r2, r3]
 8000d0a:	e001      	b.n	8000d10 <UART_peek+0x70>
	}

	return -1;
 8000d0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	20000a7c 	.word	0x20000a7c
 8000d20:	2000099c 	.word	0x2000099c
 8000d24:	20000a38 	.word	0x20000a38
 8000d28:	200009a4 	.word	0x200009a4

08000d2c <UART_read>:


int UART_read(UART_HandleTypeDef *uart)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a29      	ldr	r2, [pc, #164]	; (8000ddc <UART_read+0xb0>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d121      	bne.n	8000d80 <UART_read+0x54>
	{
		// Si HEAD no está delante de TAIL, no tenemos ningún CARACTER
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 8000d3c:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <UART_read+0xb4>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000d44:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <UART_read+0xb4>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d102      	bne.n	8000d56 <UART_read+0x2a>
 8000d50:	f04f 33ff 	mov.w	r3, #4294967295
 8000d54:	e03c      	b.n	8000dd0 <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000d56:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <UART_read+0xb4>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <UART_read+0xb4>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000d62:	5cd3      	ldrb	r3, [r2, r3]
 8000d64:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000d66:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <UART_read+0xb4>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000d6e:	1c5a      	adds	r2, r3, #1
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <UART_read+0xb4>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d78:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8000d7c:	7bbb      	ldrb	r3, [r7, #14]
 8000d7e:	e027      	b.n	8000dd0 <UART_read+0xa4>
		}
	}

	else if (uart == PC_UART)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a18      	ldr	r2, [pc, #96]	; (8000de4 <UART_read+0xb8>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d121      	bne.n	8000dcc <UART_read+0xa0>
	{
		// Si HEAD no está delante de TAIL, no tenemos ningún CARACTER
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 8000d88:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <UART_read+0xbc>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <UART_read+0xbc>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d102      	bne.n	8000da2 <UART_read+0x76>
 8000d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000da0:	e016      	b.n	8000dd0 <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <UART_read+0xbc>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <UART_read+0xbc>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000dae:	5cd3      	ldrb	r3, [r2, r3]
 8000db0:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <UART_read+0xbc>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000dba:	1c5a      	adds	r2, r3, #1
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <UART_read+0xbc>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000dc4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	e001      	b.n	8000dd0 <UART_read+0xa4>
		}
	}

	else return -1;
 8000dcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	20000a7c 	.word	0x20000a7c
 8000de0:	2000099c 	.word	0x2000099c
 8000de4:	20000a38 	.word	0x20000a38
 8000de8:	200009a4 	.word	0x200009a4

08000dec <UART_write>:


void UART_write(int c, UART_HandleTypeDef *uart)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db54      	blt.n	8000ea6 <UART_write+0xba>
	{
		if (uart == WiFi_UART)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	4a2d      	ldr	r2, [pc, #180]	; (8000eb4 <UART_write+0xc8>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d126      	bne.n	8000e52 <UART_write+0x66>
		{
			int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8000e04:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <UART_write+0xcc>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e12:	60bb      	str	r3, [r7, #8]

			// Si el BUFFER de salida está lleno, sólo se puede esperar a la INTERRUPCIÓN que lo vacia */
		    while (i == _tx_buffer1->tail);
 8000e14:	bf00      	nop
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <UART_write+0xcc>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d0f8      	beq.n	8000e16 <UART_write+0x2a>

		   _tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8000e24:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <UART_write+0xcc>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <UART_write+0xcc>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e30:	6879      	ldr	r1, [r7, #4]
 8000e32:	b2c9      	uxtb	r1, r1
 8000e34:	54d1      	strb	r1, [r2, r3]
		   _tx_buffer1->head = i;
 8000e36:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <UART_write+0xcc>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		   // Habilitar la INTERRUPCIÓN de TRANSMISIÓN del UART
		   __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_TXE);
 8000e40:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <UART_write+0xc8>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	68da      	ldr	r2, [r3, #12]
 8000e46:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <UART_write+0xc8>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e4e:	60da      	str	r2, [r3, #12]

			// Habilitar la INTERRUPCIÓN de TRANSMISIÓN del UART
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
		}
	}
}
 8000e50:	e029      	b.n	8000ea6 <UART_write+0xba>
		else if (uart == PC_UART)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	4a19      	ldr	r2, [pc, #100]	; (8000ebc <UART_write+0xd0>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d125      	bne.n	8000ea6 <UART_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <UART_write+0xd4>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e62:	3301      	adds	r3, #1
 8000e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e68:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 8000e6a:	bf00      	nop
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <UART_write+0xd4>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d0f8      	beq.n	8000e6c <UART_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <UART_write+0xd4>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <UART_write+0xd4>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	b2c9      	uxtb	r1, r1
 8000e8a:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <UART_write+0xd4>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <UART_write+0xd0>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	68da      	ldr	r2, [r3, #12]
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <UART_write+0xd0>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ea4:	60da      	str	r2, [r3, #12]
}
 8000ea6:	bf00      	nop
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000a7c 	.word	0x20000a7c
 8000eb8:	200009a0 	.word	0x200009a0
 8000ebc:	20000a38 	.word	0x20000a38
 8000ec0:	20000998 	.word	0x20000998

08000ec4 <UART_available>:


int UART_available(UART_HandleTypeDef *uart)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a19      	ldr	r2, [pc, #100]	; (8000f34 <UART_available+0x70>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d111      	bne.n	8000ef8 <UART_available+0x34>
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <UART_available+0x74>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <UART_available+0x74>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ef6:	e017      	b.n	8000f28 <UART_available+0x64>

	else if (uart == PC_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a10      	ldr	r2, [pc, #64]	; (8000f3c <UART_available+0x78>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d111      	bne.n	8000f24 <UART_available+0x60>
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <UART_available+0x7c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <UART_available+0x7c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f22:	e001      	b.n	8000f28 <UART_available+0x64>

	return -1;
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	20000a7c 	.word	0x20000a7c
 8000f38:	2000099c 	.word	0x2000099c
 8000f3c:	20000a38 	.word	0x20000a38
 8000f40:	200009a4 	.word	0x200009a4

08000f44 <UART_send>:
	return 1;
}


void UART_send (const char *s, UART_HandleTypeDef *uart)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	while(*s!='\0') UART_write(*s++, uart);
 8000f4e:	e007      	b.n	8000f60 <UART_send+0x1c>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	607a      	str	r2, [r7, #4]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	6839      	ldr	r1, [r7, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff ff46 	bl	8000dec <UART_write>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1f3      	bne.n	8000f50 <UART_send+0xc>
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <UART_copyUpto>:
  while(*s) UART_write(*s++, uart);
}


int UART_copyUpto(char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8000f84:	68f8      	ldr	r0, [r7, #12]
 8000f86:	f7ff f923 	bl	80001d0 <strlen>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]

again:
	while (!UART_available(uart));
 8000f92:	bf00      	nop
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff ff95 	bl	8000ec4 <UART_available>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d0f9      	beq.n	8000f94 <UART_copyUpto+0x20>

	while (UART_peek(uart) != string[so_far])
 8000fa0:	e01f      	b.n	8000fe2 <UART_copyUpto+0x6e>
	{
		buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000fa2:	4b32      	ldr	r3, [pc, #200]	; (800106c <UART_copyUpto+0xf8>)
 8000fa4:	6819      	ldr	r1, [r3, #0]
 8000fa6:	4b31      	ldr	r3, [pc, #196]	; (800106c <UART_copyUpto+0xf8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	68b8      	ldr	r0, [r7, #8]
 8000fb2:	4403      	add	r3, r0
 8000fb4:	5c8a      	ldrb	r2, [r1, r2]
 8000fb6:	701a      	strb	r2, [r3, #0]
		_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000fb8:	4b2c      	ldr	r3, [pc, #176]	; (800106c <UART_copyUpto+0xf8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	4b2a      	ldr	r3, [pc, #168]	; (800106c <UART_copyUpto+0xf8>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000fca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		indx++;
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	61bb      	str	r3, [r7, #24]
		while (!UART_available(uart));
 8000fd4:	bf00      	nop
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ff74 	bl	8000ec4 <UART_available>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0f9      	beq.n	8000fd6 <UART_copyUpto+0x62>
	while (UART_peek(uart) != string[so_far])
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff fe5c 	bl	8000ca0 <UART_peek>
 8000fe8:	4601      	mov	r1, r0
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	4299      	cmp	r1, r3
 8000ff4:	d1d5      	bne.n	8000fa2 <UART_copyUpto+0x2e>

	}

	while (UART_peek(uart) == string [so_far])
 8000ff6:	e01b      	b.n	8001030 <UART_copyUpto+0xbc>
	{
		so_far++;
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = UART_read(uart);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff fe94 	bl	8000d2c <UART_read>
 8001004:	4601      	mov	r1, r0
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	1c5a      	adds	r2, r3, #1
 800100a:	61ba      	str	r2, [r7, #24]
 800100c:	461a      	mov	r2, r3
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	4413      	add	r3, r2
 8001012:	b2ca      	uxtb	r2, r1
 8001014:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001016:	69fa      	ldr	r2, [r7, #28]
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	429a      	cmp	r2, r3
 800101c:	d101      	bne.n	8001022 <UART_copyUpto+0xae>
 800101e:	2301      	movs	r3, #1
 8001020:	e01f      	b.n	8001062 <UART_copyUpto+0xee>
		while (!UART_available(uart));
 8001022:	bf00      	nop
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ff4d 	bl	8000ec4 <UART_available>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0f9      	beq.n	8001024 <UART_copyUpto+0xb0>
	while (UART_peek(uart) == string [so_far])
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff fe35 	bl	8000ca0 <UART_peek>
 8001036:	4601      	mov	r1, r0
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4299      	cmp	r1, r3
 8001042:	d0d9      	beq.n	8000ff8 <UART_copyUpto+0x84>
	}

	if (so_far != len)
 8001044:	69fa      	ldr	r2, [r7, #28]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	429a      	cmp	r2, r3
 800104a:	d002      	beq.n	8001052 <UART_copyUpto+0xde>
	{
		so_far = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
		goto again;
 8001050:	e79f      	b.n	8000f92 <UART_copyUpto+0x1e>
	}

	if (so_far == len) return 1;
 8001052:	69fa      	ldr	r2, [r7, #28]
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	429a      	cmp	r2, r3
 8001058:	d101      	bne.n	800105e <UART_copyUpto+0xea>
 800105a:	2301      	movs	r3, #1
 800105c:	e001      	b.n	8001062 <UART_copyUpto+0xee>

	else return -1;
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001062:	4618      	mov	r0, r3
 8001064:	3720      	adds	r7, #32
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000099c 	.word	0x2000099c

08001070 <UART_waitFor>:


int UART_waitFor(char *string,UART_HandleTypeDef *uart)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
	int so_far =0;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff f8a6 	bl	80001d0 <strlen>
 8001084:	4603      	mov	r3, r0
 8001086:	60bb      	str	r3, [r7, #8]

again_device:
	while (!UART_available(uart));
 8001088:	bf00      	nop
 800108a:	6838      	ldr	r0, [r7, #0]
 800108c:	f7ff ff1a 	bl	8000ec4 <UART_available>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f9      	beq.n	800108a <UART_waitFor+0x1a>

	if (UART_peek(uart) != string[so_far])
 8001096:	6838      	ldr	r0, [r7, #0]
 8001098:	f7ff fe02 	bl	8000ca0 <UART_peek>
 800109c:	4601      	mov	r1, r0
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	4299      	cmp	r1, r3
 80010a8:	d01e      	beq.n	80010e8 <UART_waitFor+0x78>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 80010aa:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <UART_waitFor+0xb4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80010b2:	1c5a      	adds	r2, r3, #1
 80010b4:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <UART_waitFor+0xb4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 80010c0:	e7e2      	b.n	8001088 <UART_waitFor+0x18>

	}

	while (UART_peek(uart) == string [so_far])
	{
		so_far++;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	3301      	adds	r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
		UART_read(uart);
 80010c8:	6838      	ldr	r0, [r7, #0]
 80010ca:	f7ff fe2f 	bl	8000d2c <UART_read>
		if (so_far == len) return 1;
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d101      	bne.n	80010da <UART_waitFor+0x6a>
 80010d6:	2301      	movs	r3, #1
 80010d8:	e01f      	b.n	800111a <UART_waitFor+0xaa>
		while (!UART_available(uart));
 80010da:	bf00      	nop
 80010dc:	6838      	ldr	r0, [r7, #0]
 80010de:	f7ff fef1 	bl	8000ec4 <UART_available>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0f9      	beq.n	80010dc <UART_waitFor+0x6c>
	while (UART_peek(uart) == string [so_far])
 80010e8:	6838      	ldr	r0, [r7, #0]
 80010ea:	f7ff fdd9 	bl	8000ca0 <UART_peek>
 80010ee:	4601      	mov	r1, r0
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4299      	cmp	r1, r3
 80010fa:	d0e2      	beq.n	80010c2 <UART_waitFor+0x52>
	}

	if (so_far != len)
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	429a      	cmp	r2, r3
 8001102:	d002      	beq.n	800110a <UART_waitFor+0x9a>
	{
		so_far = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
		goto again_device;
 8001108:	e7be      	b.n	8001088 <UART_waitFor+0x18>
	}

	if (so_far == len) return 1;
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	429a      	cmp	r2, r3
 8001110:	d101      	bne.n	8001116 <UART_waitFor+0xa6>
 8001112:	2301      	movs	r3, #1
 8001114:	e001      	b.n	800111a <UART_waitFor+0xaa>

	else return -1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000099c 	.word	0x2000099c

08001128 <UART_isr>:


void UART_isr(UART_HandleTypeDef *huart)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	613b      	str	r3, [r7, #16]

	/* Si DR (DATA REGISTER) no está vacío y RX INT está habilitado */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	f003 0320 	and.w	r3, r3, #32
 8001146:	2b00      	cmp	r3, #0
 8001148:	d023      	beq.n	8001192 <UART_isr+0x6a>
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	f003 0320 	and.w	r3, r3, #32
 8001150:	2b00      	cmp	r3, #0
 8001152:	d01e      	beq.n	8001192 <UART_isr+0x6a>
    	    	                USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	************************************************************************************************************/

		huart->Instance->SR;                   // Leer SR (STATUS REGISTER)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR; // Leer DR (DATA REGISTER)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	73fb      	strb	r3, [r7, #15]

        if (huart == WiFi_UART)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a3f      	ldr	r2, [pc, #252]	; (8001264 <UART_isr+0x13c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d107      	bne.n	800117a <UART_isr+0x52>
        {
        	storeChar(c, _rx_buffer1); // Almacena DATA en el BUFFER
 800116a:	4b3f      	ldr	r3, [pc, #252]	; (8001268 <UART_isr+0x140>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fd70 	bl	8000c58 <storeChar>
        else if (huart == PC_UART)
        {
        	storeChar(c, _rx_buffer2); // Almacena DATA en el BUFFER
        }

        return;
 8001178:	e06d      	b.n	8001256 <UART_isr+0x12e>
        else if (huart == PC_UART)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a3b      	ldr	r2, [pc, #236]	; (800126c <UART_isr+0x144>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d169      	bne.n	8001256 <UART_isr+0x12e>
        	storeChar(c, _rx_buffer2); // Almacena DATA en el BUFFER
 8001182:	4b3b      	ldr	r3, [pc, #236]	; (8001270 <UART_isr+0x148>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	4611      	mov	r1, r2
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fd64 	bl	8000c58 <storeChar>
        return;
 8001190:	e061      	b.n	8001256 <UART_isr+0x12e>
    }

    /* Si la INTERRUPCIÓN se produce por el TRANSMIT DATA REGISTER EMPTY */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001198:	2b00      	cmp	r3, #0
 800119a:	d05f      	beq.n	800125c <UART_isr+0x134>
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d05a      	beq.n	800125c <UART_isr+0x134>
    {
    	if (huart == WiFi_UART)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a2e      	ldr	r2, [pc, #184]	; (8001264 <UART_isr+0x13c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d127      	bne.n	80011fe <UART_isr+0xd6>
    	{
    		if(tx_buffer1.head == tx_buffer1.tail)
 80011ae:	4b31      	ldr	r3, [pc, #196]	; (8001274 <UART_isr+0x14c>)
 80011b0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80011b4:	4b2f      	ldr	r3, [pc, #188]	; (8001274 <UART_isr+0x14c>)
 80011b6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d108      	bne.n	80011d0 <UART_isr+0xa8>
    	    {
    			// BUFFER vacío, inhabilitamos la INTERRUPCIÓN
    	        __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011cc:	60da      	str	r2, [r3, #12]
        	     huart->Instance->DR = c;

        	}
        }

    	return;
 80011ce:	e044      	b.n	800125a <UART_isr+0x132>
    			unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 80011d0:	4b28      	ldr	r3, [pc, #160]	; (8001274 <UART_isr+0x14c>)
 80011d2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011d6:	4a27      	ldr	r2, [pc, #156]	; (8001274 <UART_isr+0x14c>)
 80011d8:	5cd3      	ldrb	r3, [r2, r3]
 80011da:	737b      	strb	r3, [r7, #13]
    			tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 80011dc:	4b25      	ldr	r3, [pc, #148]	; (8001274 <UART_isr+0x14c>)
 80011de:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011e2:	3301      	adds	r3, #1
 80011e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011e8:	4a22      	ldr	r2, [pc, #136]	; (8001274 <UART_isr+0x14c>)
 80011ea:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    			huart->Instance->SR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
    			huart->Instance->DR = c;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	7b7a      	ldrb	r2, [r7, #13]
 80011fa:	605a      	str	r2, [r3, #4]
    	return;
 80011fc:	e02d      	b.n	800125a <UART_isr+0x132>
    	else if (huart == PC_UART)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a1a      	ldr	r2, [pc, #104]	; (800126c <UART_isr+0x144>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d129      	bne.n	800125a <UART_isr+0x132>
    		if(tx_buffer2.head == tx_buffer2.tail)
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <UART_isr+0x150>)
 8001208:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <UART_isr+0x150>)
 800120e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001212:	429a      	cmp	r2, r3
 8001214:	d108      	bne.n	8001228 <UART_isr+0x100>
        	    __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68da      	ldr	r2, [r3, #12]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001224:	60da      	str	r2, [r3, #12]
    	return;
 8001226:	e018      	b.n	800125a <UART_isr+0x132>
        	    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8001228:	4b13      	ldr	r3, [pc, #76]	; (8001278 <UART_isr+0x150>)
 800122a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <UART_isr+0x150>)
 8001230:	5cd3      	ldrb	r3, [r2, r3]
 8001232:	73bb      	strb	r3, [r7, #14]
        	    tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8001234:	4b10      	ldr	r3, [pc, #64]	; (8001278 <UART_isr+0x150>)
 8001236:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800123a:	3301      	adds	r3, #1
 800123c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001240:	4a0d      	ldr	r2, [pc, #52]	; (8001278 <UART_isr+0x150>)
 8001242:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	     huart->Instance->SR;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
        	     huart->Instance->DR = c;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	7bba      	ldrb	r2, [r7, #14]
 8001252:	605a      	str	r2, [r3, #4]
    	return;
 8001254:	e001      	b.n	800125a <UART_isr+0x132>
        return;
 8001256:	bf00      	nop
 8001258:	e000      	b.n	800125c <UART_isr+0x134>
    	return;
 800125a:	bf00      	nop
    }
}
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000a7c 	.word	0x20000a7c
 8001268:	2000099c 	.word	0x2000099c
 800126c:	20000a38 	.word	0x20000a38
 8001270:	200009a4 	.word	0x200009a4
 8001274:	20000294 	.word	0x20000294
 8001278:	200006a4 	.word	0x200006a4

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001280:	f000 fc64 	bl	8001b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001284:	f000 f824 	bl	80012d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001288:	f000 f9e6 	bl	8001658 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800128c:	f000 f990 	bl	80015b0 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001290:	f000 f9b8 	bl	8001604 <MX_USART6_UART_Init>
  MX_TIM5_Init();
 8001294:	f000 f93e 	bl	8001514 <MX_TIM5_Init>
  MX_TIM1_Init();
 8001298:	f000 f884 	bl	80013a4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800129c:	2100      	movs	r1, #0
 800129e:	4809      	ldr	r0, [pc, #36]	; (80012c4 <main+0x48>)
 80012a0:	f001 fd60 	bl	8002d64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80012a4:	2104      	movs	r1, #4
 80012a6:	4807      	ldr	r0, [pc, #28]	; (80012c4 <main+0x48>)
 80012a8:	f001 fd5c 	bl	8002d64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80012ac:	2108      	movs	r1, #8
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <main+0x48>)
 80012b0:	f001 fd58 	bl	8002d64 <HAL_TIM_PWM_Start>
  //__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
  ESP_Init("iPhone Carmela","pistacho");
 80012b4:	4904      	ldr	r1, [pc, #16]	; (80012c8 <main+0x4c>)
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <main+0x50>)
 80012b8:	f7ff f96e 	bl	8000598 <ESP_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//serverStart();
		ESP_messageHandler();
 80012bc:	f7ff fa98 	bl	80007f0 <ESP_messageHandler>
 80012c0:	e7fc      	b.n	80012bc <main+0x40>
 80012c2:	bf00      	nop
 80012c4:	200009f0 	.word	0x200009f0
 80012c8:	080058d8 	.word	0x080058d8
 80012cc:	080058e4 	.word	0x080058e4

080012d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b094      	sub	sp, #80	; 0x50
 80012d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d6:	f107 0320 	add.w	r3, r7, #32
 80012da:	2230      	movs	r2, #48	; 0x30
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 fba4 	bl	8004a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	4b28      	ldr	r3, [pc, #160]	; (800139c <SystemClock_Config+0xcc>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	4a27      	ldr	r2, [pc, #156]	; (800139c <SystemClock_Config+0xcc>)
 80012fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001302:	6413      	str	r3, [r2, #64]	; 0x40
 8001304:	4b25      	ldr	r3, [pc, #148]	; (800139c <SystemClock_Config+0xcc>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001310:	2300      	movs	r3, #0
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <SystemClock_Config+0xd0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a21      	ldr	r2, [pc, #132]	; (80013a0 <SystemClock_Config+0xd0>)
 800131a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <SystemClock_Config+0xd0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800132c:	2302      	movs	r3, #2
 800132e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001330:	2301      	movs	r3, #1
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001334:	2310      	movs	r3, #16
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001338:	2302      	movs	r3, #2
 800133a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800133c:	2300      	movs	r3, #0
 800133e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001340:	2308      	movs	r3, #8
 8001342:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001344:	2332      	movs	r3, #50	; 0x32
 8001346:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001348:	2304      	movs	r3, #4
 800134a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800134c:	2307      	movs	r3, #7
 800134e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001350:	f107 0320 	add.w	r3, r7, #32
 8001354:	4618      	mov	r0, r3
 8001356:	f000 ffe9 	bl	800232c <HAL_RCC_OscConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001360:	f000 fa12 	bl	8001788 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001364:	230f      	movs	r3, #15
 8001366:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001368:	2302      	movs	r3, #2
 800136a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001370:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001374:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f001 fa4a 	bl	800281c <HAL_RCC_ClockConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800138e:	f000 f9fb 	bl	8001788 <Error_Handler>
  }
}
 8001392:	bf00      	nop
 8001394:	3750      	adds	r7, #80	; 0x50
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40007000 	.word	0x40007000

080013a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b096      	sub	sp, #88	; 0x58
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]
 80013d2:	615a      	str	r2, [r3, #20]
 80013d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2220      	movs	r2, #32
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f003 fb25 	bl	8004a2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013e2:	4b4a      	ldr	r3, [pc, #296]	; (800150c <MX_TIM1_Init+0x168>)
 80013e4:	4a4a      	ldr	r2, [pc, #296]	; (8001510 <MX_TIM1_Init+0x16c>)
 80013e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 80013e8:	4b48      	ldr	r3, [pc, #288]	; (800150c <MX_TIM1_Init+0x168>)
 80013ea:	225f      	movs	r2, #95	; 0x5f
 80013ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ee:	4b47      	ldr	r3, [pc, #284]	; (800150c <MX_TIM1_Init+0x168>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 80013f4:	4b45      	ldr	r3, [pc, #276]	; (800150c <MX_TIM1_Init+0x168>)
 80013f6:	22fe      	movs	r2, #254	; 0xfe
 80013f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fa:	4b44      	ldr	r3, [pc, #272]	; (800150c <MX_TIM1_Init+0x168>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001400:	4b42      	ldr	r3, [pc, #264]	; (800150c <MX_TIM1_Init+0x168>)
 8001402:	2200      	movs	r2, #0
 8001404:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001406:	4b41      	ldr	r3, [pc, #260]	; (800150c <MX_TIM1_Init+0x168>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800140c:	483f      	ldr	r0, [pc, #252]	; (800150c <MX_TIM1_Init+0x168>)
 800140e:	f001 fc01 	bl	8002c14 <HAL_TIM_Base_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001418:	f000 f9b6 	bl	8001788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800141c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001420:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001422:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001426:	4619      	mov	r1, r3
 8001428:	4838      	ldr	r0, [pc, #224]	; (800150c <MX_TIM1_Init+0x168>)
 800142a:	f001 fe25 	bl	8003078 <HAL_TIM_ConfigClockSource>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001434:	f000 f9a8 	bl	8001788 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001438:	4834      	ldr	r0, [pc, #208]	; (800150c <MX_TIM1_Init+0x168>)
 800143a:	f001 fc3a 	bl	8002cb2 <HAL_TIM_PWM_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001444:	f000 f9a0 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001448:	2300      	movs	r3, #0
 800144a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001450:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001454:	4619      	mov	r1, r3
 8001456:	482d      	ldr	r0, [pc, #180]	; (800150c <MX_TIM1_Init+0x168>)
 8001458:	f002 f9e6 	bl	8003828 <HAL_TIMEx_MasterConfigSynchronization>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001462:	f000 f991 	bl	8001788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001466:	2360      	movs	r3, #96	; 0x60
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800146e:	2300      	movs	r3, #0
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001472:	2300      	movs	r3, #0
 8001474:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	2200      	movs	r2, #0
 8001488:	4619      	mov	r1, r3
 800148a:	4820      	ldr	r0, [pc, #128]	; (800150c <MX_TIM1_Init+0x168>)
 800148c:	f001 fd32 	bl	8002ef4 <HAL_TIM_PWM_ConfigChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001496:	f000 f977 	bl	8001788 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800149a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149e:	2204      	movs	r2, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	481a      	ldr	r0, [pc, #104]	; (800150c <MX_TIM1_Init+0x168>)
 80014a4:	f001 fd26 	bl	8002ef4 <HAL_TIM_PWM_ConfigChannel>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80014ae:	f000 f96b 	bl	8001788 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b6:	2208      	movs	r2, #8
 80014b8:	4619      	mov	r1, r3
 80014ba:	4814      	ldr	r0, [pc, #80]	; (800150c <MX_TIM1_Init+0x168>)
 80014bc:	f001 fd1a 	bl	8002ef4 <HAL_TIM_PWM_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80014c6:	f000 f95f 	bl	8001788 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	4619      	mov	r1, r3
 80014ec:	4807      	ldr	r0, [pc, #28]	; (800150c <MX_TIM1_Init+0x168>)
 80014ee:	f002 fa17 	bl	8003920 <HAL_TIMEx_ConfigBreakDeadTime>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80014f8:	f000 f946 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014fc:	4803      	ldr	r0, [pc, #12]	; (800150c <MX_TIM1_Init+0x168>)
 80014fe:	f000 f9a9 	bl	8001854 <HAL_TIM_MspPostInit>

}
 8001502:	bf00      	nop
 8001504:	3758      	adds	r7, #88	; 0x58
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200009f0 	.word	0x200009f0
 8001510:	40010000 	.word	0x40010000

08001514 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001528:	463b      	mov	r3, r7
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001530:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <MX_TIM5_Init+0x94>)
 8001532:	4a1e      	ldr	r2, [pc, #120]	; (80015ac <MX_TIM5_Init+0x98>)
 8001534:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <MX_TIM5_Init+0x94>)
 8001538:	2200      	movs	r2, #0
 800153a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153c:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <MX_TIM5_Init+0x94>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001542:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <MX_TIM5_Init+0x94>)
 8001544:	f04f 32ff 	mov.w	r2, #4294967295
 8001548:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <MX_TIM5_Init+0x94>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001550:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <MX_TIM5_Init+0x94>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001556:	4814      	ldr	r0, [pc, #80]	; (80015a8 <MX_TIM5_Init+0x94>)
 8001558:	f001 fb5c 	bl	8002c14 <HAL_TIM_Base_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001562:	f000 f911 	bl	8001788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800156c:	f107 0308 	add.w	r3, r7, #8
 8001570:	4619      	mov	r1, r3
 8001572:	480d      	ldr	r0, [pc, #52]	; (80015a8 <MX_TIM5_Init+0x94>)
 8001574:	f001 fd80 	bl	8003078 <HAL_TIM_ConfigClockSource>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800157e:	f000 f903 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800158a:	463b      	mov	r3, r7
 800158c:	4619      	mov	r1, r3
 800158e:	4806      	ldr	r0, [pc, #24]	; (80015a8 <MX_TIM5_Init+0x94>)
 8001590:	f002 f94a 	bl	8003828 <HAL_TIMEx_MasterConfigSynchronization>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800159a:	f000 f8f5 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200009a8 	.word	0x200009a8
 80015ac:	40000c00 	.word	0x40000c00

080015b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <MX_USART2_UART_Init+0x50>)
 80015b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015d6:	220c      	movs	r2, #12
 80015d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015e8:	f002 f9ec 	bl	80039c4 <HAL_UART_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015f2:	f000 f8c9 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000a7c 	.word	0x20000a7c
 8001600:	40004400 	.word	0x40004400

08001604 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_USART6_UART_Init+0x4c>)
 800160a:	4a12      	ldr	r2, [pc, #72]	; (8001654 <MX_USART6_UART_Init+0x50>)
 800160c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <MX_USART6_UART_Init+0x4c>)
 8001610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001614:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_USART6_UART_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_USART6_UART_Init+0x4c>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_USART6_UART_Init+0x4c>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_USART6_UART_Init+0x4c>)
 800162a:	220c      	movs	r2, #12
 800162c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_USART6_UART_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_USART6_UART_Init+0x4c>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_USART6_UART_Init+0x4c>)
 800163c:	f002 f9c2 	bl	80039c4 <HAL_UART_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001646:	f000 f89f 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000a38 	.word	0x20000a38
 8001654:	40011400 	.word	0x40011400

08001658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	4b41      	ldr	r3, [pc, #260]	; (8001778 <MX_GPIO_Init+0x120>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a40      	ldr	r2, [pc, #256]	; (8001778 <MX_GPIO_Init+0x120>)
 8001678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <MX_GPIO_Init+0x120>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b3a      	ldr	r3, [pc, #232]	; (8001778 <MX_GPIO_Init+0x120>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a39      	ldr	r2, [pc, #228]	; (8001778 <MX_GPIO_Init+0x120>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b37      	ldr	r3, [pc, #220]	; (8001778 <MX_GPIO_Init+0x120>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	4b33      	ldr	r3, [pc, #204]	; (8001778 <MX_GPIO_Init+0x120>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a32      	ldr	r2, [pc, #200]	; (8001778 <MX_GPIO_Init+0x120>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b30      	ldr	r3, [pc, #192]	; (8001778 <MX_GPIO_Init+0x120>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	4b2c      	ldr	r3, [pc, #176]	; (8001778 <MX_GPIO_Init+0x120>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a2b      	ldr	r2, [pc, #172]	; (8001778 <MX_GPIO_Init+0x120>)
 80016cc:	f043 0308 	orr.w	r3, r3, #8
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b29      	ldr	r3, [pc, #164]	; (8001778 <MX_GPIO_Init+0x120>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	603b      	str	r3, [r7, #0]
 80016e2:	4b25      	ldr	r3, [pc, #148]	; (8001778 <MX_GPIO_Init+0x120>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a24      	ldr	r2, [pc, #144]	; (8001778 <MX_GPIO_Init+0x120>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b22      	ldr	r3, [pc, #136]	; (8001778 <MX_GPIO_Init+0x120>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WiFi_OK_Pin|L_Porche_Pin|L_Tendedero_Pin|L_Garaje_Pin, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	f641 4101 	movw	r1, #7169	; 0x1c01
 8001700:	481e      	ldr	r0, [pc, #120]	; (800177c <MX_GPIO_Init+0x124>)
 8001702:	f000 fdf9 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, L_Jardin_Pin|Oficina_Pin|L_Derecha_Pin|L_Izquierda_Pin
 8001706:	2200      	movs	r2, #0
 8001708:	21ff      	movs	r1, #255	; 0xff
 800170a:	481d      	ldr	r0, [pc, #116]	; (8001780 <MX_GPIO_Init+0x128>)
 800170c:	f000 fdf4 	bl	80022f8 <HAL_GPIO_WritePin>
                          |L_Domitorio_Pin|L_Espejo_Pin|L_Bano_Pin|L_Fregadero_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L_Cocina_Pin|L_Recibidor_Pin|L_Ambiente_Pin|L_Comedor_Pin
 8001710:	2200      	movs	r2, #0
 8001712:	21f8      	movs	r1, #248	; 0xf8
 8001714:	481b      	ldr	r0, [pc, #108]	; (8001784 <MX_GPIO_Init+0x12c>)
 8001716:	f000 fdef 	bl	80022f8 <HAL_GPIO_WritePin>
                          |L_Sala_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : WiFi_OK_Pin L_Porche_Pin L_Tendedero_Pin L_Garaje_Pin */
  GPIO_InitStruct.Pin = WiFi_OK_Pin|L_Porche_Pin|L_Tendedero_Pin|L_Garaje_Pin;
 800171a:	f641 4301 	movw	r3, #7169	; 0x1c01
 800171e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001720:	2301      	movs	r3, #1
 8001722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	4812      	ldr	r0, [pc, #72]	; (800177c <MX_GPIO_Init+0x124>)
 8001734:	f000 fc44 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_Jardin_Pin Oficina_Pin L_Derecha_Pin L_Izquierda_Pin
                           L_Domitorio_Pin L_Espejo_Pin L_Bano_Pin L_Fregadero_Pin */
  GPIO_InitStruct.Pin = L_Jardin_Pin|Oficina_Pin|L_Derecha_Pin|L_Izquierda_Pin
 8001738:	23ff      	movs	r3, #255	; 0xff
 800173a:	617b      	str	r3, [r7, #20]
                          |L_Domitorio_Pin|L_Espejo_Pin|L_Bano_Pin|L_Fregadero_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	4619      	mov	r1, r3
 800174e:	480c      	ldr	r0, [pc, #48]	; (8001780 <MX_GPIO_Init+0x128>)
 8001750:	f000 fc36 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_Cocina_Pin L_Recibidor_Pin L_Ambiente_Pin L_Comedor_Pin
                           L_Sala_Pin */
  GPIO_InitStruct.Pin = L_Cocina_Pin|L_Recibidor_Pin|L_Ambiente_Pin|L_Comedor_Pin
 8001754:	23f8      	movs	r3, #248	; 0xf8
 8001756:	617b      	str	r3, [r7, #20]
                          |L_Sala_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001758:	2301      	movs	r3, #1
 800175a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4619      	mov	r1, r3
 800176a:	4806      	ldr	r0, [pc, #24]	; (8001784 <MX_GPIO_Init+0x12c>)
 800176c:	f000 fc28 	bl	8001fc0 <HAL_GPIO_Init>

}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	; 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40023800 	.word	0x40023800
 800177c:	40020800 	.word	0x40020800
 8001780:	40020c00 	.word	0x40020c00
 8001784:	40020400 	.word	0x40020400

08001788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800178c:	b672      	cpsid	i
}
 800178e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001790:	e7fe      	b.n	8001790 <Error_Handler+0x8>
	...

08001794 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_MspInit+0x4c>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	4a0f      	ldr	r2, [pc, #60]	; (80017e0 <HAL_MspInit+0x4c>)
 80017a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a8:	6453      	str	r3, [r2, #68]	; 0x44
 80017aa:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <HAL_MspInit+0x4c>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_MspInit+0x4c>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <HAL_MspInit+0x4c>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_MspInit+0x4c>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017d2:	2007      	movs	r0, #7
 80017d4:	f000 fb20 	bl	8001e18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40023800 	.word	0x40023800

080017e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a15      	ldr	r2, [pc, #84]	; (8001848 <HAL_TIM_Base_MspInit+0x64>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d10e      	bne.n	8001814 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <HAL_TIM_Base_MspInit+0x68>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	4a13      	ldr	r2, [pc, #76]	; (800184c <HAL_TIM_Base_MspInit+0x68>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <HAL_TIM_Base_MspInit+0x68>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001812:	e012      	b.n	800183a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0d      	ldr	r2, [pc, #52]	; (8001850 <HAL_TIM_Base_MspInit+0x6c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d10d      	bne.n	800183a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_TIM_Base_MspInit+0x68>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a09      	ldr	r2, [pc, #36]	; (800184c <HAL_TIM_Base_MspInit+0x68>)
 8001828:	f043 0308 	orr.w	r3, r3, #8
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <HAL_TIM_Base_MspInit+0x68>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
}
 800183a:	bf00      	nop
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40010000 	.word	0x40010000
 800184c:	40023800 	.word	0x40023800
 8001850:	40000c00 	.word	0x40000c00

08001854 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a12      	ldr	r2, [pc, #72]	; (80018bc <HAL_TIM_MspPostInit+0x68>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d11e      	bne.n	80018b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <HAL_TIM_MspPostInit+0x6c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a10      	ldr	r2, [pc, #64]	; (80018c0 <HAL_TIM_MspPostInit+0x6c>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <HAL_TIM_MspPostInit+0x6c>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001892:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001896:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018a4:	2301      	movs	r3, #1
 80018a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	4619      	mov	r1, r3
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <HAL_TIM_MspPostInit+0x70>)
 80018b0:	f000 fb86 	bl	8001fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018b4:	bf00      	nop
 80018b6:	3720      	adds	r7, #32
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40010000 	.word	0x40010000
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40020000 	.word	0x40020000

080018c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08c      	sub	sp, #48	; 0x30
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 031c 	add.w	r3, r7, #28
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a3a      	ldr	r2, [pc, #232]	; (80019d0 <HAL_UART_MspInit+0x108>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d134      	bne.n	8001954 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
 80018ee:	4b39      	ldr	r3, [pc, #228]	; (80019d4 <HAL_UART_MspInit+0x10c>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a38      	ldr	r2, [pc, #224]	; (80019d4 <HAL_UART_MspInit+0x10c>)
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b36      	ldr	r3, [pc, #216]	; (80019d4 <HAL_UART_MspInit+0x10c>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	61bb      	str	r3, [r7, #24]
 8001904:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	4b32      	ldr	r3, [pc, #200]	; (80019d4 <HAL_UART_MspInit+0x10c>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a31      	ldr	r2, [pc, #196]	; (80019d4 <HAL_UART_MspInit+0x10c>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b2f      	ldr	r3, [pc, #188]	; (80019d4 <HAL_UART_MspInit+0x10c>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001922:	230c      	movs	r3, #12
 8001924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001926:	2302      	movs	r3, #2
 8001928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192e:	2303      	movs	r3, #3
 8001930:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001932:	2307      	movs	r3, #7
 8001934:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001936:	f107 031c 	add.w	r3, r7, #28
 800193a:	4619      	mov	r1, r3
 800193c:	4826      	ldr	r0, [pc, #152]	; (80019d8 <HAL_UART_MspInit+0x110>)
 800193e:	f000 fb3f 	bl	8001fc0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2100      	movs	r1, #0
 8001946:	2026      	movs	r0, #38	; 0x26
 8001948:	f000 fa71 	bl	8001e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800194c:	2026      	movs	r0, #38	; 0x26
 800194e:	f000 fa8a 	bl	8001e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001952:	e038      	b.n	80019c6 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a20      	ldr	r2, [pc, #128]	; (80019dc <HAL_UART_MspInit+0x114>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d133      	bne.n	80019c6 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <HAL_UART_MspInit+0x10c>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a1b      	ldr	r2, [pc, #108]	; (80019d4 <HAL_UART_MspInit+0x10c>)
 8001968:	f043 0320 	orr.w	r3, r3, #32
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <HAL_UART_MspInit+0x10c>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f003 0320 	and.w	r3, r3, #32
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_UART_MspInit+0x10c>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <HAL_UART_MspInit+0x10c>)
 8001984:	f043 0304 	orr.w	r3, r3, #4
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_UART_MspInit+0x10c>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001996:	23c0      	movs	r3, #192	; 0xc0
 8001998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80019a6:	2308      	movs	r3, #8
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019aa:	f107 031c 	add.w	r3, r7, #28
 80019ae:	4619      	mov	r1, r3
 80019b0:	480b      	ldr	r0, [pc, #44]	; (80019e0 <HAL_UART_MspInit+0x118>)
 80019b2:	f000 fb05 	bl	8001fc0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	2047      	movs	r0, #71	; 0x47
 80019bc:	f000 fa37 	bl	8001e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80019c0:	2047      	movs	r0, #71	; 0x47
 80019c2:	f000 fa50 	bl	8001e66 <HAL_NVIC_EnableIRQ>
}
 80019c6:	bf00      	nop
 80019c8:	3730      	adds	r7, #48	; 0x30
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40004400 	.word	0x40004400
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020000 	.word	0x40020000
 80019dc:	40011400 	.word	0x40011400
 80019e0:	40020800 	.word	0x40020800

080019e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <NMI_Handler+0x4>

080019ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ee:	e7fe      	b.n	80019ee <HardFault_Handler+0x4>

080019f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <MemManage_Handler+0x4>

080019f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fa:	e7fe      	b.n	80019fa <BusFault_Handler+0x4>

080019fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <UsageFault_Handler+0x4>

08001a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a30:	f000 f8de 	bl	8001bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UART_isr(&huart2);
 8001a3c:	4803      	ldr	r0, [pc, #12]	; (8001a4c <USART2_IRQHandler+0x14>)
 8001a3e:	f7ff fb73 	bl	8001128 <UART_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a42:	4802      	ldr	r0, [pc, #8]	; (8001a4c <USART2_IRQHandler+0x14>)
 8001a44:	f002 f940 	bl	8003cc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000a7c 	.word	0x20000a7c

08001a50 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	UART_isr(&huart6);
 8001a54:	4803      	ldr	r0, [pc, #12]	; (8001a64 <USART6_IRQHandler+0x14>)
 8001a56:	f7ff fb67 	bl	8001128 <UART_isr>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001a5a:	4802      	ldr	r0, [pc, #8]	; (8001a64 <USART6_IRQHandler+0x14>)
 8001a5c:	f002 f934 	bl	8003cc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000a38 	.word	0x20000a38

08001a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a70:	4a14      	ldr	r2, [pc, #80]	; (8001ac4 <_sbrk+0x5c>)
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <_sbrk+0x60>)
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <_sbrk+0x64>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <_sbrk+0x64>)
 8001a86:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <_sbrk+0x68>)
 8001a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d207      	bcs.n	8001aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a98:	f002 ff9e 	bl	80049d8 <__errno>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa6:	e009      	b.n	8001abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <_sbrk+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aae:	4b07      	ldr	r3, [pc, #28]	; (8001acc <_sbrk+0x64>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	4a05      	ldr	r2, [pc, #20]	; (8001acc <_sbrk+0x64>)
 8001ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aba:	68fb      	ldr	r3, [r7, #12]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20020000 	.word	0x20020000
 8001ac8:	00000400 	.word	0x00000400
 8001acc:	200008ac 	.word	0x200008ac
 8001ad0:	20000ad8 	.word	0x20000ad8

08001ad4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <SystemInit+0x20>)
 8001ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ade:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <SystemInit+0x20>)
 8001ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001afc:	480d      	ldr	r0, [pc, #52]	; (8001b34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001afe:	490e      	ldr	r1, [pc, #56]	; (8001b38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b00:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b04:	e002      	b.n	8001b0c <LoopCopyDataInit>

08001b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0a:	3304      	adds	r3, #4

08001b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b10:	d3f9      	bcc.n	8001b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b12:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b14:	4c0b      	ldr	r4, [pc, #44]	; (8001b44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b18:	e001      	b.n	8001b1e <LoopFillZerobss>

08001b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b1c:	3204      	adds	r2, #4

08001b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b20:	d3fb      	bcc.n	8001b1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b22:	f7ff ffd7 	bl	8001ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b26:	f002 ff5d 	bl	80049e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b2a:	f7ff fba7 	bl	800127c <main>
  bx  lr    
 8001b2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b38:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b3c:	08005950 	.word	0x08005950
  ldr r2, =_sbss
 8001b40:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b44:	20000ad4 	.word	0x20000ad4

08001b48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b48:	e7fe      	b.n	8001b48 <ADC_IRQHandler>
	...

08001b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b50:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <HAL_Init+0x40>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <HAL_Init+0x40>)
 8001b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_Init+0x40>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <HAL_Init+0x40>)
 8001b62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <HAL_Init+0x40>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a07      	ldr	r2, [pc, #28]	; (8001b8c <HAL_Init+0x40>)
 8001b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b74:	2003      	movs	r0, #3
 8001b76:	f000 f94f 	bl	8001e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f000 f808 	bl	8001b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b80:	f7ff fe08 	bl	8001794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40023c00 	.word	0x40023c00

08001b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b98:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_InitTick+0x54>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_InitTick+0x58>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 f967 	bl	8001e82 <HAL_SYSTICK_Config>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e00e      	b.n	8001bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b0f      	cmp	r3, #15
 8001bc2:	d80a      	bhi.n	8001bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bcc:	f000 f92f 	bl	8001e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd0:	4a06      	ldr	r2, [pc, #24]	; (8001bec <HAL_InitTick+0x5c>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e000      	b.n	8001bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000000 	.word	0x20000000
 8001be8:	20000008 	.word	0x20000008
 8001bec:	20000004 	.word	0x20000004

08001bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_IncTick+0x20>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_IncTick+0x24>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <HAL_IncTick+0x24>)
 8001c02:	6013      	str	r3, [r2, #0]
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000008 	.word	0x20000008
 8001c14:	20000ac0 	.word	0x20000ac0

08001c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <HAL_GetTick+0x14>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000ac0 	.word	0x20000ac0

08001c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c38:	f7ff ffee 	bl	8001c18 <HAL_GetTick>
 8001c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c48:	d005      	beq.n	8001c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_Delay+0x44>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4413      	add	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c56:	bf00      	nop
 8001c58:	f7ff ffde 	bl	8001c18 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d8f7      	bhi.n	8001c58 <HAL_Delay+0x28>
  {
  }
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000008 	.word	0x20000008

08001c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <__NVIC_SetPriorityGrouping+0x44>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c94:	4013      	ands	r3, r2
 8001c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001caa:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <__NVIC_SetPriorityGrouping+0x44>)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	60d3      	str	r3, [r2, #12]
}
 8001cb0:	bf00      	nop
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc4:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	f003 0307 	and.w	r3, r3, #7
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	db0b      	blt.n	8001d06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	f003 021f 	and.w	r2, r3, #31
 8001cf4:	4907      	ldr	r1, [pc, #28]	; (8001d14 <__NVIC_EnableIRQ+0x38>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	095b      	lsrs	r3, r3, #5
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000e100 	.word	0xe000e100

08001d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	db0a      	blt.n	8001d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	490c      	ldr	r1, [pc, #48]	; (8001d64 <__NVIC_SetPriority+0x4c>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	0112      	lsls	r2, r2, #4
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d40:	e00a      	b.n	8001d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4908      	ldr	r1, [pc, #32]	; (8001d68 <__NVIC_SetPriority+0x50>)
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	3b04      	subs	r3, #4
 8001d50:	0112      	lsls	r2, r2, #4
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	440b      	add	r3, r1
 8001d56:	761a      	strb	r2, [r3, #24]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000e100 	.word	0xe000e100
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b089      	sub	sp, #36	; 0x24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f1c3 0307 	rsb	r3, r3, #7
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	bf28      	it	cs
 8001d8a:	2304      	movcs	r3, #4
 8001d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3304      	adds	r3, #4
 8001d92:	2b06      	cmp	r3, #6
 8001d94:	d902      	bls.n	8001d9c <NVIC_EncodePriority+0x30>
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3b03      	subs	r3, #3
 8001d9a:	e000      	b.n	8001d9e <NVIC_EncodePriority+0x32>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	f04f 32ff 	mov.w	r2, #4294967295
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43da      	mvns	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	401a      	ands	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db4:	f04f 31ff 	mov.w	r1, #4294967295
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	43d9      	mvns	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	4313      	orrs	r3, r2
         );
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3724      	adds	r7, #36	; 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de4:	d301      	bcc.n	8001dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00f      	b.n	8001e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dea:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <SysTick_Config+0x40>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df2:	210f      	movs	r1, #15
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f7ff ff8e 	bl	8001d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <SysTick_Config+0x40>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e02:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <SysTick_Config+0x40>)
 8001e04:	2207      	movs	r2, #7
 8001e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	e000e010 	.word	0xe000e010

08001e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ff29 	bl	8001c78 <__NVIC_SetPriorityGrouping>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b086      	sub	sp, #24
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e40:	f7ff ff3e 	bl	8001cc0 <__NVIC_GetPriorityGrouping>
 8001e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	6978      	ldr	r0, [r7, #20]
 8001e4c:	f7ff ff8e 	bl	8001d6c <NVIC_EncodePriority>
 8001e50:	4602      	mov	r2, r0
 8001e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff5d 	bl	8001d18 <__NVIC_SetPriority>
}
 8001e5e:	bf00      	nop
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff31 	bl	8001cdc <__NVIC_EnableIRQ>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ffa2 	bl	8001dd4 <SysTick_Config>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ea8:	f7ff feb6 	bl	8001c18 <HAL_GetTick>
 8001eac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d008      	beq.n	8001ecc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2280      	movs	r2, #128	; 0x80
 8001ebe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e052      	b.n	8001f72 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0216 	bic.w	r2, r2, #22
 8001eda:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695a      	ldr	r2, [r3, #20]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d103      	bne.n	8001efc <HAL_DMA_Abort+0x62>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0208 	bic.w	r2, r2, #8
 8001f0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0201 	bic.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f1c:	e013      	b.n	8001f46 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f1e:	f7ff fe7b 	bl	8001c18 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b05      	cmp	r3, #5
 8001f2a:	d90c      	bls.n	8001f46 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2203      	movs	r2, #3
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e015      	b.n	8001f72 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1e4      	bne.n	8001f1e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f58:	223f      	movs	r2, #63	; 0x3f
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d004      	beq.n	8001f98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2280      	movs	r2, #128	; 0x80
 8001f92:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e00c      	b.n	8001fb2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2205      	movs	r2, #5
 8001f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0201 	bic.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	; 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	e16b      	b.n	80022b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fdc:	2201      	movs	r2, #1
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	f040 815a 	bne.w	80022ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d005      	beq.n	8002012 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800200e:	2b02      	cmp	r3, #2
 8002010:	d130      	bne.n	8002074 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2203      	movs	r2, #3
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002048:	2201      	movs	r2, #1
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 0201 	and.w	r2, r3, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	2b03      	cmp	r3, #3
 800207e:	d017      	beq.n	80020b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d123      	bne.n	8002104 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	08da      	lsrs	r2, r3, #3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3208      	adds	r2, #8
 80020c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	220f      	movs	r2, #15
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	08da      	lsrs	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3208      	adds	r2, #8
 80020fe:	69b9      	ldr	r1, [r7, #24]
 8002100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2203      	movs	r2, #3
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0203 	and.w	r2, r3, #3
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 80b4 	beq.w	80022ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	4b60      	ldr	r3, [pc, #384]	; (80022cc <HAL_GPIO_Init+0x30c>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	4a5f      	ldr	r2, [pc, #380]	; (80022cc <HAL_GPIO_Init+0x30c>)
 8002150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002154:	6453      	str	r3, [r2, #68]	; 0x44
 8002156:	4b5d      	ldr	r3, [pc, #372]	; (80022cc <HAL_GPIO_Init+0x30c>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002162:	4a5b      	ldr	r2, [pc, #364]	; (80022d0 <HAL_GPIO_Init+0x310>)
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	3302      	adds	r3, #2
 800216a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	220f      	movs	r2, #15
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a52      	ldr	r2, [pc, #328]	; (80022d4 <HAL_GPIO_Init+0x314>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d02b      	beq.n	80021e6 <HAL_GPIO_Init+0x226>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a51      	ldr	r2, [pc, #324]	; (80022d8 <HAL_GPIO_Init+0x318>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d025      	beq.n	80021e2 <HAL_GPIO_Init+0x222>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a50      	ldr	r2, [pc, #320]	; (80022dc <HAL_GPIO_Init+0x31c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d01f      	beq.n	80021de <HAL_GPIO_Init+0x21e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4f      	ldr	r2, [pc, #316]	; (80022e0 <HAL_GPIO_Init+0x320>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d019      	beq.n	80021da <HAL_GPIO_Init+0x21a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a4e      	ldr	r2, [pc, #312]	; (80022e4 <HAL_GPIO_Init+0x324>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d013      	beq.n	80021d6 <HAL_GPIO_Init+0x216>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a4d      	ldr	r2, [pc, #308]	; (80022e8 <HAL_GPIO_Init+0x328>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00d      	beq.n	80021d2 <HAL_GPIO_Init+0x212>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a4c      	ldr	r2, [pc, #304]	; (80022ec <HAL_GPIO_Init+0x32c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d007      	beq.n	80021ce <HAL_GPIO_Init+0x20e>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a4b      	ldr	r2, [pc, #300]	; (80022f0 <HAL_GPIO_Init+0x330>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d101      	bne.n	80021ca <HAL_GPIO_Init+0x20a>
 80021c6:	2307      	movs	r3, #7
 80021c8:	e00e      	b.n	80021e8 <HAL_GPIO_Init+0x228>
 80021ca:	2308      	movs	r3, #8
 80021cc:	e00c      	b.n	80021e8 <HAL_GPIO_Init+0x228>
 80021ce:	2306      	movs	r3, #6
 80021d0:	e00a      	b.n	80021e8 <HAL_GPIO_Init+0x228>
 80021d2:	2305      	movs	r3, #5
 80021d4:	e008      	b.n	80021e8 <HAL_GPIO_Init+0x228>
 80021d6:	2304      	movs	r3, #4
 80021d8:	e006      	b.n	80021e8 <HAL_GPIO_Init+0x228>
 80021da:	2303      	movs	r3, #3
 80021dc:	e004      	b.n	80021e8 <HAL_GPIO_Init+0x228>
 80021de:	2302      	movs	r3, #2
 80021e0:	e002      	b.n	80021e8 <HAL_GPIO_Init+0x228>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <HAL_GPIO_Init+0x228>
 80021e6:	2300      	movs	r3, #0
 80021e8:	69fa      	ldr	r2, [r7, #28]
 80021ea:	f002 0203 	and.w	r2, r2, #3
 80021ee:	0092      	lsls	r2, r2, #2
 80021f0:	4093      	lsls	r3, r2
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021f8:	4935      	ldr	r1, [pc, #212]	; (80022d0 <HAL_GPIO_Init+0x310>)
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	089b      	lsrs	r3, r3, #2
 80021fe:	3302      	adds	r3, #2
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002206:	4b3b      	ldr	r3, [pc, #236]	; (80022f4 <HAL_GPIO_Init+0x334>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800222a:	4a32      	ldr	r2, [pc, #200]	; (80022f4 <HAL_GPIO_Init+0x334>)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002230:	4b30      	ldr	r3, [pc, #192]	; (80022f4 <HAL_GPIO_Init+0x334>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002254:	4a27      	ldr	r2, [pc, #156]	; (80022f4 <HAL_GPIO_Init+0x334>)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800225a:	4b26      	ldr	r3, [pc, #152]	; (80022f4 <HAL_GPIO_Init+0x334>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800227e:	4a1d      	ldr	r2, [pc, #116]	; (80022f4 <HAL_GPIO_Init+0x334>)
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002284:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <HAL_GPIO_Init+0x334>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022a8:	4a12      	ldr	r2, [pc, #72]	; (80022f4 <HAL_GPIO_Init+0x334>)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	3301      	adds	r3, #1
 80022b2:	61fb      	str	r3, [r7, #28]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	2b0f      	cmp	r3, #15
 80022b8:	f67f ae90 	bls.w	8001fdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3724      	adds	r7, #36	; 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40013800 	.word	0x40013800
 80022d4:	40020000 	.word	0x40020000
 80022d8:	40020400 	.word	0x40020400
 80022dc:	40020800 	.word	0x40020800
 80022e0:	40020c00 	.word	0x40020c00
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40021400 	.word	0x40021400
 80022ec:	40021800 	.word	0x40021800
 80022f0:	40021c00 	.word	0x40021c00
 80022f4:	40013c00 	.word	0x40013c00

080022f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	807b      	strh	r3, [r7, #2]
 8002304:	4613      	mov	r3, r2
 8002306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002308:	787b      	ldrb	r3, [r7, #1]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002314:	e003      	b.n	800231e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002316:	887b      	ldrh	r3, [r7, #2]
 8002318:	041a      	lsls	r2, r3, #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	619a      	str	r2, [r3, #24]
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
	...

0800232c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e264      	b.n	8002808 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d075      	beq.n	8002436 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800234a:	4ba3      	ldr	r3, [pc, #652]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b04      	cmp	r3, #4
 8002354:	d00c      	beq.n	8002370 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002356:	4ba0      	ldr	r3, [pc, #640]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800235e:	2b08      	cmp	r3, #8
 8002360:	d112      	bne.n	8002388 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002362:	4b9d      	ldr	r3, [pc, #628]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800236e:	d10b      	bne.n	8002388 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002370:	4b99      	ldr	r3, [pc, #612]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d05b      	beq.n	8002434 <HAL_RCC_OscConfig+0x108>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d157      	bne.n	8002434 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e23f      	b.n	8002808 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002390:	d106      	bne.n	80023a0 <HAL_RCC_OscConfig+0x74>
 8002392:	4b91      	ldr	r3, [pc, #580]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a90      	ldr	r2, [pc, #576]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 8002398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	e01d      	b.n	80023dc <HAL_RCC_OscConfig+0xb0>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0x98>
 80023aa:	4b8b      	ldr	r3, [pc, #556]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a8a      	ldr	r2, [pc, #552]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 80023b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	4b88      	ldr	r3, [pc, #544]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a87      	ldr	r2, [pc, #540]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	e00b      	b.n	80023dc <HAL_RCC_OscConfig+0xb0>
 80023c4:	4b84      	ldr	r3, [pc, #528]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a83      	ldr	r2, [pc, #524]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 80023ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	4b81      	ldr	r3, [pc, #516]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a80      	ldr	r2, [pc, #512]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d013      	beq.n	800240c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7ff fc18 	bl	8001c18 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ec:	f7ff fc14 	bl	8001c18 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b64      	cmp	r3, #100	; 0x64
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e204      	b.n	8002808 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	4b76      	ldr	r3, [pc, #472]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0xc0>
 800240a:	e014      	b.n	8002436 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7ff fc04 	bl	8001c18 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002414:	f7ff fc00 	bl	8001c18 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	; 0x64
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e1f0      	b.n	8002808 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002426:	4b6c      	ldr	r3, [pc, #432]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0xe8>
 8002432:	e000      	b.n	8002436 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d063      	beq.n	800250a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002442:	4b65      	ldr	r3, [pc, #404]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00b      	beq.n	8002466 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800244e:	4b62      	ldr	r3, [pc, #392]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002456:	2b08      	cmp	r3, #8
 8002458:	d11c      	bne.n	8002494 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245a:	4b5f      	ldr	r3, [pc, #380]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d116      	bne.n	8002494 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002466:	4b5c      	ldr	r3, [pc, #368]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d005      	beq.n	800247e <HAL_RCC_OscConfig+0x152>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d001      	beq.n	800247e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e1c4      	b.n	8002808 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247e:	4b56      	ldr	r3, [pc, #344]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4952      	ldr	r1, [pc, #328]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002492:	e03a      	b.n	800250a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d020      	beq.n	80024de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800249c:	4b4f      	ldr	r3, [pc, #316]	; (80025dc <HAL_RCC_OscConfig+0x2b0>)
 800249e:	2201      	movs	r2, #1
 80024a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a2:	f7ff fbb9 	bl	8001c18 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024aa:	f7ff fbb5 	bl	8001c18 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e1a5      	b.n	8002808 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024bc:	4b46      	ldr	r3, [pc, #280]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c8:	4b43      	ldr	r3, [pc, #268]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4940      	ldr	r1, [pc, #256]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	600b      	str	r3, [r1, #0]
 80024dc:	e015      	b.n	800250a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024de:	4b3f      	ldr	r3, [pc, #252]	; (80025dc <HAL_RCC_OscConfig+0x2b0>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e4:	f7ff fb98 	bl	8001c18 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ec:	f7ff fb94 	bl	8001c18 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e184      	b.n	8002808 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fe:	4b36      	ldr	r3, [pc, #216]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d030      	beq.n	8002578 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d016      	beq.n	800254c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251e:	4b30      	ldr	r3, [pc, #192]	; (80025e0 <HAL_RCC_OscConfig+0x2b4>)
 8002520:	2201      	movs	r2, #1
 8002522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002524:	f7ff fb78 	bl	8001c18 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800252c:	f7ff fb74 	bl	8001c18 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e164      	b.n	8002808 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253e:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 8002540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f0      	beq.n	800252c <HAL_RCC_OscConfig+0x200>
 800254a:	e015      	b.n	8002578 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800254c:	4b24      	ldr	r3, [pc, #144]	; (80025e0 <HAL_RCC_OscConfig+0x2b4>)
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002552:	f7ff fb61 	bl	8001c18 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800255a:	f7ff fb5d 	bl	8001c18 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e14d      	b.n	8002808 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800256c:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 800256e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f0      	bne.n	800255a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80a0 	beq.w	80026c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002586:	2300      	movs	r3, #0
 8002588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800258a:	4b13      	ldr	r3, [pc, #76]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10f      	bne.n	80025b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	4a0e      	ldr	r2, [pc, #56]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 80025a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a4:	6413      	str	r3, [r2, #64]	; 0x40
 80025a6:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ae:	60bb      	str	r3, [r7, #8]
 80025b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025b2:	2301      	movs	r3, #1
 80025b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b6:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_RCC_OscConfig+0x2b8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d121      	bne.n	8002606 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <HAL_RCC_OscConfig+0x2b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a07      	ldr	r2, [pc, #28]	; (80025e4 <HAL_RCC_OscConfig+0x2b8>)
 80025c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ce:	f7ff fb23 	bl	8001c18 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d4:	e011      	b.n	80025fa <HAL_RCC_OscConfig+0x2ce>
 80025d6:	bf00      	nop
 80025d8:	40023800 	.word	0x40023800
 80025dc:	42470000 	.word	0x42470000
 80025e0:	42470e80 	.word	0x42470e80
 80025e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e8:	f7ff fb16 	bl	8001c18 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e106      	b.n	8002808 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fa:	4b85      	ldr	r3, [pc, #532]	; (8002810 <HAL_RCC_OscConfig+0x4e4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d106      	bne.n	800261c <HAL_RCC_OscConfig+0x2f0>
 800260e:	4b81      	ldr	r3, [pc, #516]	; (8002814 <HAL_RCC_OscConfig+0x4e8>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002612:	4a80      	ldr	r2, [pc, #512]	; (8002814 <HAL_RCC_OscConfig+0x4e8>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6713      	str	r3, [r2, #112]	; 0x70
 800261a:	e01c      	b.n	8002656 <HAL_RCC_OscConfig+0x32a>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b05      	cmp	r3, #5
 8002622:	d10c      	bne.n	800263e <HAL_RCC_OscConfig+0x312>
 8002624:	4b7b      	ldr	r3, [pc, #492]	; (8002814 <HAL_RCC_OscConfig+0x4e8>)
 8002626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002628:	4a7a      	ldr	r2, [pc, #488]	; (8002814 <HAL_RCC_OscConfig+0x4e8>)
 800262a:	f043 0304 	orr.w	r3, r3, #4
 800262e:	6713      	str	r3, [r2, #112]	; 0x70
 8002630:	4b78      	ldr	r3, [pc, #480]	; (8002814 <HAL_RCC_OscConfig+0x4e8>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a77      	ldr	r2, [pc, #476]	; (8002814 <HAL_RCC_OscConfig+0x4e8>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	e00b      	b.n	8002656 <HAL_RCC_OscConfig+0x32a>
 800263e:	4b75      	ldr	r3, [pc, #468]	; (8002814 <HAL_RCC_OscConfig+0x4e8>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002642:	4a74      	ldr	r2, [pc, #464]	; (8002814 <HAL_RCC_OscConfig+0x4e8>)
 8002644:	f023 0301 	bic.w	r3, r3, #1
 8002648:	6713      	str	r3, [r2, #112]	; 0x70
 800264a:	4b72      	ldr	r3, [pc, #456]	; (8002814 <HAL_RCC_OscConfig+0x4e8>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a71      	ldr	r2, [pc, #452]	; (8002814 <HAL_RCC_OscConfig+0x4e8>)
 8002650:	f023 0304 	bic.w	r3, r3, #4
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d015      	beq.n	800268a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265e:	f7ff fadb 	bl	8001c18 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002664:	e00a      	b.n	800267c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002666:	f7ff fad7 	bl	8001c18 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	f241 3288 	movw	r2, #5000	; 0x1388
 8002674:	4293      	cmp	r3, r2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e0c5      	b.n	8002808 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267c:	4b65      	ldr	r3, [pc, #404]	; (8002814 <HAL_RCC_OscConfig+0x4e8>)
 800267e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0ee      	beq.n	8002666 <HAL_RCC_OscConfig+0x33a>
 8002688:	e014      	b.n	80026b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268a:	f7ff fac5 	bl	8001c18 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002690:	e00a      	b.n	80026a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002692:	f7ff fac1 	bl	8001c18 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e0af      	b.n	8002808 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a8:	4b5a      	ldr	r3, [pc, #360]	; (8002814 <HAL_RCC_OscConfig+0x4e8>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1ee      	bne.n	8002692 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026b4:	7dfb      	ldrb	r3, [r7, #23]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d105      	bne.n	80026c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ba:	4b56      	ldr	r3, [pc, #344]	; (8002814 <HAL_RCC_OscConfig+0x4e8>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	4a55      	ldr	r2, [pc, #340]	; (8002814 <HAL_RCC_OscConfig+0x4e8>)
 80026c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 809b 	beq.w	8002806 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026d0:	4b50      	ldr	r3, [pc, #320]	; (8002814 <HAL_RCC_OscConfig+0x4e8>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 030c 	and.w	r3, r3, #12
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d05c      	beq.n	8002796 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d141      	bne.n	8002768 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e4:	4b4c      	ldr	r3, [pc, #304]	; (8002818 <HAL_RCC_OscConfig+0x4ec>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ea:	f7ff fa95 	bl	8001c18 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f2:	f7ff fa91 	bl	8001c18 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e081      	b.n	8002808 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002704:	4b43      	ldr	r3, [pc, #268]	; (8002814 <HAL_RCC_OscConfig+0x4e8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f0      	bne.n	80026f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69da      	ldr	r2, [r3, #28]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	019b      	lsls	r3, r3, #6
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002726:	085b      	lsrs	r3, r3, #1
 8002728:	3b01      	subs	r3, #1
 800272a:	041b      	lsls	r3, r3, #16
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002732:	061b      	lsls	r3, r3, #24
 8002734:	4937      	ldr	r1, [pc, #220]	; (8002814 <HAL_RCC_OscConfig+0x4e8>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800273a:	4b37      	ldr	r3, [pc, #220]	; (8002818 <HAL_RCC_OscConfig+0x4ec>)
 800273c:	2201      	movs	r2, #1
 800273e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7ff fa6a 	bl	8001c18 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002748:	f7ff fa66 	bl	8001c18 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e056      	b.n	8002808 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800275a:	4b2e      	ldr	r3, [pc, #184]	; (8002814 <HAL_RCC_OscConfig+0x4e8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0x41c>
 8002766:	e04e      	b.n	8002806 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002768:	4b2b      	ldr	r3, [pc, #172]	; (8002818 <HAL_RCC_OscConfig+0x4ec>)
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276e:	f7ff fa53 	bl	8001c18 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002776:	f7ff fa4f 	bl	8001c18 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e03f      	b.n	8002808 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002788:	4b22      	ldr	r3, [pc, #136]	; (8002814 <HAL_RCC_OscConfig+0x4e8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f0      	bne.n	8002776 <HAL_RCC_OscConfig+0x44a>
 8002794:	e037      	b.n	8002806 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e032      	b.n	8002808 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027a2:	4b1c      	ldr	r3, [pc, #112]	; (8002814 <HAL_RCC_OscConfig+0x4e8>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d028      	beq.n	8002802 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d121      	bne.n	8002802 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d11a      	bne.n	8002802 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027d2:	4013      	ands	r3, r2
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027da:	4293      	cmp	r3, r2
 80027dc:	d111      	bne.n	8002802 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	085b      	lsrs	r3, r3, #1
 80027ea:	3b01      	subs	r3, #1
 80027ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d107      	bne.n	8002802 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027fe:	429a      	cmp	r2, r3
 8002800:	d001      	beq.n	8002806 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40007000 	.word	0x40007000
 8002814:	40023800 	.word	0x40023800
 8002818:	42470060 	.word	0x42470060

0800281c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0cc      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002830:	4b68      	ldr	r3, [pc, #416]	; (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d90c      	bls.n	8002858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b65      	ldr	r3, [pc, #404]	; (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b63      	ldr	r3, [pc, #396]	; (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0b8      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d020      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002870:	4b59      	ldr	r3, [pc, #356]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4a58      	ldr	r2, [pc, #352]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800287a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002888:	4b53      	ldr	r3, [pc, #332]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	4a52      	ldr	r2, [pc, #328]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002892:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002894:	4b50      	ldr	r3, [pc, #320]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	494d      	ldr	r1, [pc, #308]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d044      	beq.n	800293c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d107      	bne.n	80028ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ba:	4b47      	ldr	r3, [pc, #284]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d119      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e07f      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d003      	beq.n	80028da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028da:	4b3f      	ldr	r3, [pc, #252]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e06f      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ea:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e067      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028fa:	4b37      	ldr	r3, [pc, #220]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f023 0203 	bic.w	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	4934      	ldr	r1, [pc, #208]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	4313      	orrs	r3, r2
 800290a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800290c:	f7ff f984 	bl	8001c18 <HAL_GetTick>
 8002910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002912:	e00a      	b.n	800292a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002914:	f7ff f980 	bl	8001c18 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e04f      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292a:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 020c 	and.w	r2, r3, #12
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	429a      	cmp	r2, r3
 800293a:	d1eb      	bne.n	8002914 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800293c:	4b25      	ldr	r3, [pc, #148]	; (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d20c      	bcs.n	8002964 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	4b20      	ldr	r3, [pc, #128]	; (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e032      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002970:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4916      	ldr	r1, [pc, #88]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d009      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800298e:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	490e      	ldr	r1, [pc, #56]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029a2:	f000 f821 	bl	80029e8 <HAL_RCC_GetSysClockFreq>
 80029a6:	4602      	mov	r2, r0
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	490a      	ldr	r1, [pc, #40]	; (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 80029b4:	5ccb      	ldrb	r3, [r1, r3]
 80029b6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ba:	4a09      	ldr	r2, [pc, #36]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029be:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff f8e4 	bl	8001b90 <HAL_InitTick>

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40023c00 	.word	0x40023c00
 80029d8:	40023800 	.word	0x40023800
 80029dc:	080058f4 	.word	0x080058f4
 80029e0:	20000000 	.word	0x20000000
 80029e4:	20000004 	.word	0x20000004

080029e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	2300      	movs	r3, #0
 80029fa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a00:	4b67      	ldr	r3, [pc, #412]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 030c 	and.w	r3, r3, #12
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d00d      	beq.n	8002a28 <HAL_RCC_GetSysClockFreq+0x40>
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	f200 80bd 	bhi.w	8002b8c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0x34>
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d003      	beq.n	8002a22 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a1a:	e0b7      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a1c:	4b61      	ldr	r3, [pc, #388]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a1e:	60bb      	str	r3, [r7, #8]
       break;
 8002a20:	e0b7      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a22:	4b61      	ldr	r3, [pc, #388]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002a24:	60bb      	str	r3, [r7, #8]
      break;
 8002a26:	e0b4      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a28:	4b5d      	ldr	r3, [pc, #372]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a30:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a32:	4b5b      	ldr	r3, [pc, #364]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d04d      	beq.n	8002ada <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a3e:	4b58      	ldr	r3, [pc, #352]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	099b      	lsrs	r3, r3, #6
 8002a44:	461a      	mov	r2, r3
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a4e:	f04f 0100 	mov.w	r1, #0
 8002a52:	ea02 0800 	and.w	r8, r2, r0
 8002a56:	ea03 0901 	and.w	r9, r3, r1
 8002a5a:	4640      	mov	r0, r8
 8002a5c:	4649      	mov	r1, r9
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	014b      	lsls	r3, r1, #5
 8002a68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a6c:	0142      	lsls	r2, r0, #5
 8002a6e:	4610      	mov	r0, r2
 8002a70:	4619      	mov	r1, r3
 8002a72:	ebb0 0008 	subs.w	r0, r0, r8
 8002a76:	eb61 0109 	sbc.w	r1, r1, r9
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	018b      	lsls	r3, r1, #6
 8002a84:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a88:	0182      	lsls	r2, r0, #6
 8002a8a:	1a12      	subs	r2, r2, r0
 8002a8c:	eb63 0301 	sbc.w	r3, r3, r1
 8002a90:	f04f 0000 	mov.w	r0, #0
 8002a94:	f04f 0100 	mov.w	r1, #0
 8002a98:	00d9      	lsls	r1, r3, #3
 8002a9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a9e:	00d0      	lsls	r0, r2, #3
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	eb12 0208 	adds.w	r2, r2, r8
 8002aa8:	eb43 0309 	adc.w	r3, r3, r9
 8002aac:	f04f 0000 	mov.w	r0, #0
 8002ab0:	f04f 0100 	mov.w	r1, #0
 8002ab4:	0259      	lsls	r1, r3, #9
 8002ab6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002aba:	0250      	lsls	r0, r2, #9
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	f7fd fbd8 	bl	8000280 <__aeabi_uldivmod>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	e04a      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ada:	4b31      	ldr	r3, [pc, #196]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	099b      	lsrs	r3, r3, #6
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002aea:	f04f 0100 	mov.w	r1, #0
 8002aee:	ea02 0400 	and.w	r4, r2, r0
 8002af2:	ea03 0501 	and.w	r5, r3, r1
 8002af6:	4620      	mov	r0, r4
 8002af8:	4629      	mov	r1, r5
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	014b      	lsls	r3, r1, #5
 8002b04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b08:	0142      	lsls	r2, r0, #5
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	1b00      	subs	r0, r0, r4
 8002b10:	eb61 0105 	sbc.w	r1, r1, r5
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	018b      	lsls	r3, r1, #6
 8002b1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b22:	0182      	lsls	r2, r0, #6
 8002b24:	1a12      	subs	r2, r2, r0
 8002b26:	eb63 0301 	sbc.w	r3, r3, r1
 8002b2a:	f04f 0000 	mov.w	r0, #0
 8002b2e:	f04f 0100 	mov.w	r1, #0
 8002b32:	00d9      	lsls	r1, r3, #3
 8002b34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b38:	00d0      	lsls	r0, r2, #3
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	1912      	adds	r2, r2, r4
 8002b40:	eb45 0303 	adc.w	r3, r5, r3
 8002b44:	f04f 0000 	mov.w	r0, #0
 8002b48:	f04f 0100 	mov.w	r1, #0
 8002b4c:	0299      	lsls	r1, r3, #10
 8002b4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b52:	0290      	lsls	r0, r2, #10
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4610      	mov	r0, r2
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	f7fd fb8c 	bl	8000280 <__aeabi_uldivmod>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	0c1b      	lsrs	r3, r3, #16
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	60bb      	str	r3, [r7, #8]
      break;
 8002b8a:	e002      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b8e:	60bb      	str	r3, [r7, #8]
      break;
 8002b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b92:	68bb      	ldr	r3, [r7, #8]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	007a1200 	.word	0x007a1200

08002bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000000 	.word	0x20000000

08002bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bc8:	f7ff fff0 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	0a9b      	lsrs	r3, r3, #10
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	4903      	ldr	r1, [pc, #12]	; (8002be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bda:	5ccb      	ldrb	r3, [r1, r3]
 8002bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40023800 	.word	0x40023800
 8002be8:	08005904 	.word	0x08005904

08002bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bf0:	f7ff ffdc 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	0b5b      	lsrs	r3, r3, #13
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	4903      	ldr	r1, [pc, #12]	; (8002c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c02:	5ccb      	ldrb	r3, [r1, r3]
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	08005904 	.word	0x08005904

08002c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e041      	b.n	8002caa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fe fdd2 	bl	80017e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3304      	adds	r3, #4
 8002c50:	4619      	mov	r1, r3
 8002c52:	4610      	mov	r0, r2
 8002c54:	f000 fad8 	bl	8003208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e041      	b.n	8002d48 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d106      	bne.n	8002cde <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f839 	bl	8002d50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3304      	adds	r3, #4
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	f000 fa89 	bl	8003208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d109      	bne.n	8002d88 <HAL_TIM_PWM_Start+0x24>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	bf14      	ite	ne
 8002d80:	2301      	movne	r3, #1
 8002d82:	2300      	moveq	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	e022      	b.n	8002dce <HAL_TIM_PWM_Start+0x6a>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d109      	bne.n	8002da2 <HAL_TIM_PWM_Start+0x3e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	bf14      	ite	ne
 8002d9a:	2301      	movne	r3, #1
 8002d9c:	2300      	moveq	r3, #0
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	e015      	b.n	8002dce <HAL_TIM_PWM_Start+0x6a>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d109      	bne.n	8002dbc <HAL_TIM_PWM_Start+0x58>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	bf14      	ite	ne
 8002db4:	2301      	movne	r3, #1
 8002db6:	2300      	moveq	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	e008      	b.n	8002dce <HAL_TIM_PWM_Start+0x6a>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	bf14      	ite	ne
 8002dc8:	2301      	movne	r3, #1
 8002dca:	2300      	moveq	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e07c      	b.n	8002ed0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d104      	bne.n	8002de6 <HAL_TIM_PWM_Start+0x82>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002de4:	e013      	b.n	8002e0e <HAL_TIM_PWM_Start+0xaa>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d104      	bne.n	8002df6 <HAL_TIM_PWM_Start+0x92>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002df4:	e00b      	b.n	8002e0e <HAL_TIM_PWM_Start+0xaa>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d104      	bne.n	8002e06 <HAL_TIM_PWM_Start+0xa2>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e04:	e003      	b.n	8002e0e <HAL_TIM_PWM_Start+0xaa>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2201      	movs	r2, #1
 8002e14:	6839      	ldr	r1, [r7, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fce0 	bl	80037dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a2d      	ldr	r2, [pc, #180]	; (8002ed8 <HAL_TIM_PWM_Start+0x174>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d004      	beq.n	8002e30 <HAL_TIM_PWM_Start+0xcc>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a2c      	ldr	r2, [pc, #176]	; (8002edc <HAL_TIM_PWM_Start+0x178>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d101      	bne.n	8002e34 <HAL_TIM_PWM_Start+0xd0>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <HAL_TIM_PWM_Start+0xd2>
 8002e34:	2300      	movs	r3, #0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d007      	beq.n	8002e4a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a22      	ldr	r2, [pc, #136]	; (8002ed8 <HAL_TIM_PWM_Start+0x174>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d022      	beq.n	8002e9a <HAL_TIM_PWM_Start+0x136>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5c:	d01d      	beq.n	8002e9a <HAL_TIM_PWM_Start+0x136>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a1f      	ldr	r2, [pc, #124]	; (8002ee0 <HAL_TIM_PWM_Start+0x17c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d018      	beq.n	8002e9a <HAL_TIM_PWM_Start+0x136>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a1d      	ldr	r2, [pc, #116]	; (8002ee4 <HAL_TIM_PWM_Start+0x180>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d013      	beq.n	8002e9a <HAL_TIM_PWM_Start+0x136>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a1c      	ldr	r2, [pc, #112]	; (8002ee8 <HAL_TIM_PWM_Start+0x184>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d00e      	beq.n	8002e9a <HAL_TIM_PWM_Start+0x136>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a16      	ldr	r2, [pc, #88]	; (8002edc <HAL_TIM_PWM_Start+0x178>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d009      	beq.n	8002e9a <HAL_TIM_PWM_Start+0x136>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a18      	ldr	r2, [pc, #96]	; (8002eec <HAL_TIM_PWM_Start+0x188>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d004      	beq.n	8002e9a <HAL_TIM_PWM_Start+0x136>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a16      	ldr	r2, [pc, #88]	; (8002ef0 <HAL_TIM_PWM_Start+0x18c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d111      	bne.n	8002ebe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b06      	cmp	r3, #6
 8002eaa:	d010      	beq.n	8002ece <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ebc:	e007      	b.n	8002ece <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0201 	orr.w	r2, r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40010000 	.word	0x40010000
 8002edc:	40010400 	.word	0x40010400
 8002ee0:	40000400 	.word	0x40000400
 8002ee4:	40000800 	.word	0x40000800
 8002ee8:	40000c00 	.word	0x40000c00
 8002eec:	40014000 	.word	0x40014000
 8002ef0:	40001800 	.word	0x40001800

08002ef4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e0ae      	b.n	8003070 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b0c      	cmp	r3, #12
 8002f1e:	f200 809f 	bhi.w	8003060 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f22:	a201      	add	r2, pc, #4	; (adr r2, 8002f28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f28:	08002f5d 	.word	0x08002f5d
 8002f2c:	08003061 	.word	0x08003061
 8002f30:	08003061 	.word	0x08003061
 8002f34:	08003061 	.word	0x08003061
 8002f38:	08002f9d 	.word	0x08002f9d
 8002f3c:	08003061 	.word	0x08003061
 8002f40:	08003061 	.word	0x08003061
 8002f44:	08003061 	.word	0x08003061
 8002f48:	08002fdf 	.word	0x08002fdf
 8002f4c:	08003061 	.word	0x08003061
 8002f50:	08003061 	.word	0x08003061
 8002f54:	08003061 	.word	0x08003061
 8002f58:	0800301f 	.word	0x0800301f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f9f0 	bl	8003348 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0208 	orr.w	r2, r2, #8
 8002f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699a      	ldr	r2, [r3, #24]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0204 	bic.w	r2, r2, #4
 8002f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6999      	ldr	r1, [r3, #24]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	619a      	str	r2, [r3, #24]
      break;
 8002f9a:	e064      	b.n	8003066 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fa40 	bl	8003428 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699a      	ldr	r2, [r3, #24]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6999      	ldr	r1, [r3, #24]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	021a      	lsls	r2, r3, #8
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	619a      	str	r2, [r3, #24]
      break;
 8002fdc:	e043      	b.n	8003066 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68b9      	ldr	r1, [r7, #8]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fa95 	bl	8003514 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	69da      	ldr	r2, [r3, #28]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0208 	orr.w	r2, r2, #8
 8002ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0204 	bic.w	r2, r2, #4
 8003008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69d9      	ldr	r1, [r3, #28]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	61da      	str	r2, [r3, #28]
      break;
 800301c:	e023      	b.n	8003066 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	4618      	mov	r0, r3
 8003026:	f000 fae9 	bl	80035fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69da      	ldr	r2, [r3, #28]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69d9      	ldr	r1, [r3, #28]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	021a      	lsls	r2, r3, #8
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	61da      	str	r2, [r3, #28]
      break;
 800305e:	e002      	b.n	8003066 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	75fb      	strb	r3, [r7, #23]
      break;
 8003064:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800306e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_TIM_ConfigClockSource+0x1c>
 8003090:	2302      	movs	r3, #2
 8003092:	e0b4      	b.n	80031fe <HAL_TIM_ConfigClockSource+0x186>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030cc:	d03e      	beq.n	800314c <HAL_TIM_ConfigClockSource+0xd4>
 80030ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d2:	f200 8087 	bhi.w	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
 80030d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030da:	f000 8086 	beq.w	80031ea <HAL_TIM_ConfigClockSource+0x172>
 80030de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e2:	d87f      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
 80030e4:	2b70      	cmp	r3, #112	; 0x70
 80030e6:	d01a      	beq.n	800311e <HAL_TIM_ConfigClockSource+0xa6>
 80030e8:	2b70      	cmp	r3, #112	; 0x70
 80030ea:	d87b      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
 80030ec:	2b60      	cmp	r3, #96	; 0x60
 80030ee:	d050      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0x11a>
 80030f0:	2b60      	cmp	r3, #96	; 0x60
 80030f2:	d877      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
 80030f4:	2b50      	cmp	r3, #80	; 0x50
 80030f6:	d03c      	beq.n	8003172 <HAL_TIM_ConfigClockSource+0xfa>
 80030f8:	2b50      	cmp	r3, #80	; 0x50
 80030fa:	d873      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
 80030fc:	2b40      	cmp	r3, #64	; 0x40
 80030fe:	d058      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x13a>
 8003100:	2b40      	cmp	r3, #64	; 0x40
 8003102:	d86f      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003104:	2b30      	cmp	r3, #48	; 0x30
 8003106:	d064      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003108:	2b30      	cmp	r3, #48	; 0x30
 800310a:	d86b      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
 800310c:	2b20      	cmp	r3, #32
 800310e:	d060      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003110:	2b20      	cmp	r3, #32
 8003112:	d867      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003114:	2b00      	cmp	r3, #0
 8003116:	d05c      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003118:	2b10      	cmp	r3, #16
 800311a:	d05a      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x15a>
 800311c:	e062      	b.n	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6899      	ldr	r1, [r3, #8]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f000 fb35 	bl	800379c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003140:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	609a      	str	r2, [r3, #8]
      break;
 800314a:	e04f      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	6899      	ldr	r1, [r3, #8]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f000 fb1e 	bl	800379c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800316e:	609a      	str	r2, [r3, #8]
      break;
 8003170:	e03c      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	6859      	ldr	r1, [r3, #4]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	461a      	mov	r2, r3
 8003180:	f000 fa92 	bl	80036a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2150      	movs	r1, #80	; 0x50
 800318a:	4618      	mov	r0, r3
 800318c:	f000 faeb 	bl	8003766 <TIM_ITRx_SetConfig>
      break;
 8003190:	e02c      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	6859      	ldr	r1, [r3, #4]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	461a      	mov	r2, r3
 80031a0:	f000 fab1 	bl	8003706 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2160      	movs	r1, #96	; 0x60
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fadb 	bl	8003766 <TIM_ITRx_SetConfig>
      break;
 80031b0:	e01c      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6859      	ldr	r1, [r3, #4]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	461a      	mov	r2, r3
 80031c0:	f000 fa72 	bl	80036a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2140      	movs	r1, #64	; 0x40
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 facb 	bl	8003766 <TIM_ITRx_SetConfig>
      break;
 80031d0:	e00c      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4619      	mov	r1, r3
 80031dc:	4610      	mov	r0, r2
 80031de:	f000 fac2 	bl	8003766 <TIM_ITRx_SetConfig>
      break;
 80031e2:	e003      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
      break;
 80031e8:	e000      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a40      	ldr	r2, [pc, #256]	; (800331c <TIM_Base_SetConfig+0x114>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d013      	beq.n	8003248 <TIM_Base_SetConfig+0x40>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003226:	d00f      	beq.n	8003248 <TIM_Base_SetConfig+0x40>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a3d      	ldr	r2, [pc, #244]	; (8003320 <TIM_Base_SetConfig+0x118>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00b      	beq.n	8003248 <TIM_Base_SetConfig+0x40>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a3c      	ldr	r2, [pc, #240]	; (8003324 <TIM_Base_SetConfig+0x11c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d007      	beq.n	8003248 <TIM_Base_SetConfig+0x40>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a3b      	ldr	r2, [pc, #236]	; (8003328 <TIM_Base_SetConfig+0x120>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d003      	beq.n	8003248 <TIM_Base_SetConfig+0x40>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a3a      	ldr	r2, [pc, #232]	; (800332c <TIM_Base_SetConfig+0x124>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d108      	bne.n	800325a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a2f      	ldr	r2, [pc, #188]	; (800331c <TIM_Base_SetConfig+0x114>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d02b      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003268:	d027      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a2c      	ldr	r2, [pc, #176]	; (8003320 <TIM_Base_SetConfig+0x118>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d023      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a2b      	ldr	r2, [pc, #172]	; (8003324 <TIM_Base_SetConfig+0x11c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d01f      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a2a      	ldr	r2, [pc, #168]	; (8003328 <TIM_Base_SetConfig+0x120>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d01b      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a29      	ldr	r2, [pc, #164]	; (800332c <TIM_Base_SetConfig+0x124>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d017      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a28      	ldr	r2, [pc, #160]	; (8003330 <TIM_Base_SetConfig+0x128>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d013      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a27      	ldr	r2, [pc, #156]	; (8003334 <TIM_Base_SetConfig+0x12c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00f      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a26      	ldr	r2, [pc, #152]	; (8003338 <TIM_Base_SetConfig+0x130>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00b      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a25      	ldr	r2, [pc, #148]	; (800333c <TIM_Base_SetConfig+0x134>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d007      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a24      	ldr	r2, [pc, #144]	; (8003340 <TIM_Base_SetConfig+0x138>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d003      	beq.n	80032ba <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a23      	ldr	r2, [pc, #140]	; (8003344 <TIM_Base_SetConfig+0x13c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d108      	bne.n	80032cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a0a      	ldr	r2, [pc, #40]	; (800331c <TIM_Base_SetConfig+0x114>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d003      	beq.n	8003300 <TIM_Base_SetConfig+0xf8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a0c      	ldr	r2, [pc, #48]	; (800332c <TIM_Base_SetConfig+0x124>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d103      	bne.n	8003308 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	615a      	str	r2, [r3, #20]
}
 800330e:	bf00      	nop
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40010000 	.word	0x40010000
 8003320:	40000400 	.word	0x40000400
 8003324:	40000800 	.word	0x40000800
 8003328:	40000c00 	.word	0x40000c00
 800332c:	40010400 	.word	0x40010400
 8003330:	40014000 	.word	0x40014000
 8003334:	40014400 	.word	0x40014400
 8003338:	40014800 	.word	0x40014800
 800333c:	40001800 	.word	0x40001800
 8003340:	40001c00 	.word	0x40001c00
 8003344:	40002000 	.word	0x40002000

08003348 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003348:	b480      	push	{r7}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	f023 0201 	bic.w	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 0303 	bic.w	r3, r3, #3
 800337e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	4313      	orrs	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f023 0302 	bic.w	r3, r3, #2
 8003390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4313      	orrs	r3, r2
 800339a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a20      	ldr	r2, [pc, #128]	; (8003420 <TIM_OC1_SetConfig+0xd8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d003      	beq.n	80033ac <TIM_OC1_SetConfig+0x64>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a1f      	ldr	r2, [pc, #124]	; (8003424 <TIM_OC1_SetConfig+0xdc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d10c      	bne.n	80033c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f023 0308 	bic.w	r3, r3, #8
 80033b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f023 0304 	bic.w	r3, r3, #4
 80033c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a15      	ldr	r2, [pc, #84]	; (8003420 <TIM_OC1_SetConfig+0xd8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d003      	beq.n	80033d6 <TIM_OC1_SetConfig+0x8e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a14      	ldr	r2, [pc, #80]	; (8003424 <TIM_OC1_SetConfig+0xdc>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d111      	bne.n	80033fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	621a      	str	r2, [r3, #32]
}
 8003414:	bf00      	nop
 8003416:	371c      	adds	r7, #28
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	40010000 	.word	0x40010000
 8003424:	40010400 	.word	0x40010400

08003428 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	f023 0210 	bic.w	r2, r3, #16
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800345e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	021b      	lsls	r3, r3, #8
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4313      	orrs	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f023 0320 	bic.w	r3, r3, #32
 8003472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a22      	ldr	r2, [pc, #136]	; (800350c <TIM_OC2_SetConfig+0xe4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d003      	beq.n	8003490 <TIM_OC2_SetConfig+0x68>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a21      	ldr	r2, [pc, #132]	; (8003510 <TIM_OC2_SetConfig+0xe8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d10d      	bne.n	80034ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a17      	ldr	r2, [pc, #92]	; (800350c <TIM_OC2_SetConfig+0xe4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d003      	beq.n	80034bc <TIM_OC2_SetConfig+0x94>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a16      	ldr	r2, [pc, #88]	; (8003510 <TIM_OC2_SetConfig+0xe8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d113      	bne.n	80034e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	621a      	str	r2, [r3, #32]
}
 80034fe:	bf00      	nop
 8003500:	371c      	adds	r7, #28
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40010000 	.word	0x40010000
 8003510:	40010400 	.word	0x40010400

08003514 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0303 	bic.w	r3, r3, #3
 800354a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800355c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a21      	ldr	r2, [pc, #132]	; (80035f4 <TIM_OC3_SetConfig+0xe0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d003      	beq.n	800357a <TIM_OC3_SetConfig+0x66>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a20      	ldr	r2, [pc, #128]	; (80035f8 <TIM_OC3_SetConfig+0xe4>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d10d      	bne.n	8003596 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	4313      	orrs	r3, r2
 800358c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a16      	ldr	r2, [pc, #88]	; (80035f4 <TIM_OC3_SetConfig+0xe0>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d003      	beq.n	80035a6 <TIM_OC3_SetConfig+0x92>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a15      	ldr	r2, [pc, #84]	; (80035f8 <TIM_OC3_SetConfig+0xe4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d113      	bne.n	80035ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	621a      	str	r2, [r3, #32]
}
 80035e8:	bf00      	nop
 80035ea:	371c      	adds	r7, #28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	40010000 	.word	0x40010000
 80035f8:	40010400 	.word	0x40010400

080035fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800362a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	021b      	lsls	r3, r3, #8
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003646:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	031b      	lsls	r3, r3, #12
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a12      	ldr	r2, [pc, #72]	; (80036a0 <TIM_OC4_SetConfig+0xa4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d003      	beq.n	8003664 <TIM_OC4_SetConfig+0x68>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a11      	ldr	r2, [pc, #68]	; (80036a4 <TIM_OC4_SetConfig+0xa8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d109      	bne.n	8003678 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800366a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	019b      	lsls	r3, r3, #6
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	621a      	str	r2, [r3, #32]
}
 8003692:	bf00      	nop
 8003694:	371c      	adds	r7, #28
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40010000 	.word	0x40010000
 80036a4:	40010400 	.word	0x40010400

080036a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	f023 0201 	bic.w	r2, r3, #1
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f023 030a 	bic.w	r3, r3, #10
 80036e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	621a      	str	r2, [r3, #32]
}
 80036fa:	bf00      	nop
 80036fc:	371c      	adds	r7, #28
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003706:	b480      	push	{r7}
 8003708:	b087      	sub	sp, #28
 800370a:	af00      	add	r7, sp, #0
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	f023 0210 	bic.w	r2, r3, #16
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003730:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	031b      	lsls	r3, r3, #12
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003742:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	621a      	str	r2, [r3, #32]
}
 800375a:	bf00      	nop
 800375c:	371c      	adds	r7, #28
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003766:	b480      	push	{r7}
 8003768:	b085      	sub	sp, #20
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	f043 0307 	orr.w	r3, r3, #7
 8003788:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	609a      	str	r2, [r3, #8]
}
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	021a      	lsls	r2, r3, #8
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	431a      	orrs	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	609a      	str	r2, [r3, #8]
}
 80037d0:	bf00      	nop
 80037d2:	371c      	adds	r7, #28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f003 031f 	and.w	r3, r3, #31
 80037ee:	2201      	movs	r2, #1
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a1a      	ldr	r2, [r3, #32]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	43db      	mvns	r3, r3
 80037fe:	401a      	ands	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a1a      	ldr	r2, [r3, #32]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	fa01 f303 	lsl.w	r3, r1, r3
 8003814:	431a      	orrs	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	621a      	str	r2, [r3, #32]
}
 800381a:	bf00      	nop
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
	...

08003828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800383c:	2302      	movs	r3, #2
 800383e:	e05a      	b.n	80038f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003866:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	4313      	orrs	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a21      	ldr	r2, [pc, #132]	; (8003904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d022      	beq.n	80038ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388c:	d01d      	beq.n	80038ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a1d      	ldr	r2, [pc, #116]	; (8003908 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d018      	beq.n	80038ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a1b      	ldr	r2, [pc, #108]	; (800390c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d013      	beq.n	80038ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a1a      	ldr	r2, [pc, #104]	; (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d00e      	beq.n	80038ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a18      	ldr	r2, [pc, #96]	; (8003914 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d009      	beq.n	80038ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a17      	ldr	r2, [pc, #92]	; (8003918 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d004      	beq.n	80038ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a15      	ldr	r2, [pc, #84]	; (800391c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d10c      	bne.n	80038e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40010000 	.word	0x40010000
 8003908:	40000400 	.word	0x40000400
 800390c:	40000800 	.word	0x40000800
 8003910:	40000c00 	.word	0x40000c00
 8003914:	40010400 	.word	0x40010400
 8003918:	40014000 	.word	0x40014000
 800391c:	40001800 	.word	0x40001800

08003920 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003938:	2302      	movs	r3, #2
 800393a:	e03d      	b.n	80039b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	4313      	orrs	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4313      	orrs	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e03f      	b.n	8003a56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fd ff6c 	bl	80018c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2224      	movs	r2, #36	; 0x24
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 fe1d 	bl	8004648 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695a      	ldr	r2, [r3, #20]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b08a      	sub	sp, #40	; 0x28
 8003a62:	af02      	add	r7, sp, #8
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	603b      	str	r3, [r7, #0]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b20      	cmp	r3, #32
 8003a7c:	d17c      	bne.n	8003b78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <HAL_UART_Transmit+0x2c>
 8003a84:	88fb      	ldrh	r3, [r7, #6]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e075      	b.n	8003b7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_UART_Transmit+0x3e>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e06e      	b.n	8003b7a <HAL_UART_Transmit+0x11c>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2221      	movs	r2, #33	; 0x21
 8003aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ab2:	f7fe f8b1 	bl	8001c18 <HAL_GetTick>
 8003ab6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	88fa      	ldrh	r2, [r7, #6]
 8003abc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	88fa      	ldrh	r2, [r7, #6]
 8003ac2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003acc:	d108      	bne.n	8003ae0 <HAL_UART_Transmit+0x82>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d104      	bne.n	8003ae0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	61bb      	str	r3, [r7, #24]
 8003ade:	e003      	b.n	8003ae8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003af0:	e02a      	b.n	8003b48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2200      	movs	r2, #0
 8003afa:	2180      	movs	r1, #128	; 0x80
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fb9b 	bl	8004238 <UART_WaitOnFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e036      	b.n	8003b7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10b      	bne.n	8003b2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	3302      	adds	r3, #2
 8003b26:	61bb      	str	r3, [r7, #24]
 8003b28:	e007      	b.n	8003b3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	781a      	ldrb	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	3301      	adds	r3, #1
 8003b38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1cf      	bne.n	8003af2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2140      	movs	r1, #64	; 0x40
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 fb6b 	bl	8004238 <UART_WaitOnFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e006      	b.n	8003b7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	e000      	b.n	8003b7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b78:	2302      	movs	r3, #2
  }
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3720      	adds	r7, #32
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b08a      	sub	sp, #40	; 0x28
 8003b86:	af02      	add	r7, sp, #8
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	603b      	str	r3, [r7, #0]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b20      	cmp	r3, #32
 8003ba0:	f040 808c 	bne.w	8003cbc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_UART_Receive+0x2e>
 8003baa:	88fb      	ldrh	r3, [r7, #6]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e084      	b.n	8003cbe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_UART_Receive+0x40>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e07d      	b.n	8003cbe <HAL_UART_Receive+0x13c>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2222      	movs	r2, #34	; 0x22
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bde:	f7fe f81b 	bl	8001c18 <HAL_GetTick>
 8003be2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	88fa      	ldrh	r2, [r7, #6]
 8003be8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	88fa      	ldrh	r2, [r7, #6]
 8003bee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf8:	d108      	bne.n	8003c0c <HAL_UART_Receive+0x8a>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d104      	bne.n	8003c0c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	61bb      	str	r3, [r7, #24]
 8003c0a:	e003      	b.n	8003c14 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003c1c:	e043      	b.n	8003ca6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2200      	movs	r2, #0
 8003c26:	2120      	movs	r1, #32
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 fb05 	bl	8004238 <UART_WaitOnFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e042      	b.n	8003cbe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10c      	bne.n	8003c58 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	3302      	adds	r3, #2
 8003c54:	61bb      	str	r3, [r7, #24]
 8003c56:	e01f      	b.n	8003c98 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c60:	d007      	beq.n	8003c72 <HAL_UART_Receive+0xf0>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10a      	bne.n	8003c80 <HAL_UART_Receive+0xfe>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	701a      	strb	r2, [r3, #0]
 8003c7e:	e008      	b.n	8003c92 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	3301      	adds	r3, #1
 8003c96:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1b6      	bne.n	8003c1e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	e000      	b.n	8003cbe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003cbc:	2302      	movs	r3, #2
  }
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3720      	adds	r7, #32
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
	...

08003cc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b0ba      	sub	sp, #232	; 0xe8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10f      	bne.n	8003d2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d009      	beq.n	8003d2e <HAL_UART_IRQHandler+0x66>
 8003d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fbd3 	bl	80044d2 <UART_Receive_IT>
      return;
 8003d2c:	e256      	b.n	80041dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 80de 	beq.w	8003ef4 <HAL_UART_IRQHandler+0x22c>
 8003d38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d106      	bne.n	8003d52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80d1 	beq.w	8003ef4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00b      	beq.n	8003d76 <HAL_UART_IRQHandler+0xae>
 8003d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f043 0201 	orr.w	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00b      	beq.n	8003d9a <HAL_UART_IRQHandler+0xd2>
 8003d82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d005      	beq.n	8003d9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f043 0202 	orr.w	r2, r3, #2
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00b      	beq.n	8003dbe <HAL_UART_IRQHandler+0xf6>
 8003da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d005      	beq.n	8003dbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	f043 0204 	orr.w	r2, r3, #4
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d011      	beq.n	8003dee <HAL_UART_IRQHandler+0x126>
 8003dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d105      	bne.n	8003de2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d005      	beq.n	8003dee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f043 0208 	orr.w	r2, r3, #8
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 81ed 	beq.w	80041d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_UART_IRQHandler+0x14e>
 8003e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 fb5e 	bl	80044d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e20:	2b40      	cmp	r3, #64	; 0x40
 8003e22:	bf0c      	ite	eq
 8003e24:	2301      	moveq	r3, #1
 8003e26:	2300      	movne	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d103      	bne.n	8003e42 <HAL_UART_IRQHandler+0x17a>
 8003e3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d04f      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 fa66 	bl	8004314 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e52:	2b40      	cmp	r3, #64	; 0x40
 8003e54:	d141      	bne.n	8003eda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3314      	adds	r3, #20
 8003e5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e64:	e853 3f00 	ldrex	r3, [r3]
 8003e68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3314      	adds	r3, #20
 8003e7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1d9      	bne.n	8003e56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d013      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	4a7d      	ldr	r2, [pc, #500]	; (80040a4 <HAL_UART_IRQHandler+0x3dc>)
 8003eb0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fe f85f 	bl	8001f7a <HAL_DMA_Abort_IT>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d016      	beq.n	8003ef0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ecc:	4610      	mov	r0, r2
 8003ece:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed0:	e00e      	b.n	8003ef0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f99a 	bl	800420c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed8:	e00a      	b.n	8003ef0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f996 	bl	800420c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee0:	e006      	b.n	8003ef0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f992 	bl	800420c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003eee:	e170      	b.n	80041d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef0:	bf00      	nop
    return;
 8003ef2:	e16e      	b.n	80041d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	f040 814a 	bne.w	8004192 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f02:	f003 0310 	and.w	r3, r3, #16
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 8143 	beq.w	8004192 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f10:	f003 0310 	and.w	r3, r3, #16
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 813c 	beq.w	8004192 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3a:	2b40      	cmp	r3, #64	; 0x40
 8003f3c:	f040 80b4 	bne.w	80040a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 8140 	beq.w	80041d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	f080 8139 	bcs.w	80041d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f76:	f000 8088 	beq.w	800408a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	330c      	adds	r3, #12
 8003f80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f88:	e853 3f00 	ldrex	r3, [r3]
 8003f8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	330c      	adds	r3, #12
 8003fa2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003fa6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003faa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fb6:	e841 2300 	strex	r3, r2, [r1]
 8003fba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1d9      	bne.n	8003f7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3314      	adds	r3, #20
 8003fcc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fd0:	e853 3f00 	ldrex	r3, [r3]
 8003fd4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003fd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fd8:	f023 0301 	bic.w	r3, r3, #1
 8003fdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3314      	adds	r3, #20
 8003fe6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ff2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ff6:	e841 2300 	strex	r3, r2, [r1]
 8003ffa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1e1      	bne.n	8003fc6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3314      	adds	r3, #20
 8004008:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800400c:	e853 3f00 	ldrex	r3, [r3]
 8004010:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004018:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3314      	adds	r3, #20
 8004022:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004026:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004028:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800402c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800402e:	e841 2300 	strex	r3, r2, [r1]
 8004032:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1e3      	bne.n	8004002 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	330c      	adds	r3, #12
 800404e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004052:	e853 3f00 	ldrex	r3, [r3]
 8004056:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800405a:	f023 0310 	bic.w	r3, r3, #16
 800405e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	330c      	adds	r3, #12
 8004068:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800406c:	65ba      	str	r2, [r7, #88]	; 0x58
 800406e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004070:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004072:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004074:	e841 2300 	strex	r3, r2, [r1]
 8004078:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800407a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1e3      	bne.n	8004048 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004084:	4618      	mov	r0, r3
 8004086:	f7fd ff08 	bl	8001e9a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004092:	b29b      	uxth	r3, r3
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	b29b      	uxth	r3, r3
 8004098:	4619      	mov	r1, r3
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f8c0 	bl	8004220 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040a0:	e099      	b.n	80041d6 <HAL_UART_IRQHandler+0x50e>
 80040a2:	bf00      	nop
 80040a4:	080043db 	.word	0x080043db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 808b 	beq.w	80041da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80040c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 8086 	beq.w	80041da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	330c      	adds	r3, #12
 80040d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d8:	e853 3f00 	ldrex	r3, [r3]
 80040dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	330c      	adds	r3, #12
 80040ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80040f2:	647a      	str	r2, [r7, #68]	; 0x44
 80040f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040fa:	e841 2300 	strex	r3, r2, [r1]
 80040fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1e3      	bne.n	80040ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3314      	adds	r3, #20
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	e853 3f00 	ldrex	r3, [r3]
 8004114:	623b      	str	r3, [r7, #32]
   return(result);
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	f023 0301 	bic.w	r3, r3, #1
 800411c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3314      	adds	r3, #20
 8004126:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800412a:	633a      	str	r2, [r7, #48]	; 0x30
 800412c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004132:	e841 2300 	strex	r3, r2, [r1]
 8004136:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1e3      	bne.n	8004106 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	330c      	adds	r3, #12
 8004152:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	e853 3f00 	ldrex	r3, [r3]
 800415a:	60fb      	str	r3, [r7, #12]
   return(result);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0310 	bic.w	r3, r3, #16
 8004162:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	330c      	adds	r3, #12
 800416c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004170:	61fa      	str	r2, [r7, #28]
 8004172:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004174:	69b9      	ldr	r1, [r7, #24]
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	e841 2300 	strex	r3, r2, [r1]
 800417c:	617b      	str	r3, [r7, #20]
   return(result);
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1e3      	bne.n	800414c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004184:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004188:	4619      	mov	r1, r3
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f848 	bl	8004220 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004190:	e023      	b.n	80041da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419a:	2b00      	cmp	r3, #0
 800419c:	d009      	beq.n	80041b2 <HAL_UART_IRQHandler+0x4ea>
 800419e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f929 	bl	8004402 <UART_Transmit_IT>
    return;
 80041b0:	e014      	b.n	80041dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00e      	beq.n	80041dc <HAL_UART_IRQHandler+0x514>
 80041be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d008      	beq.n	80041dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f969 	bl	80044a2 <UART_EndTransmit_IT>
    return;
 80041d0:	e004      	b.n	80041dc <HAL_UART_IRQHandler+0x514>
    return;
 80041d2:	bf00      	nop
 80041d4:	e002      	b.n	80041dc <HAL_UART_IRQHandler+0x514>
      return;
 80041d6:	bf00      	nop
 80041d8:	e000      	b.n	80041dc <HAL_UART_IRQHandler+0x514>
      return;
 80041da:	bf00      	nop
  }
}
 80041dc:	37e8      	adds	r7, #232	; 0xe8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop

080041e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b090      	sub	sp, #64	; 0x40
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	4613      	mov	r3, r2
 8004246:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004248:	e050      	b.n	80042ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800424a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800424c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004250:	d04c      	beq.n	80042ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004254:	2b00      	cmp	r3, #0
 8004256:	d007      	beq.n	8004268 <UART_WaitOnFlagUntilTimeout+0x30>
 8004258:	f7fd fcde 	bl	8001c18 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004264:	429a      	cmp	r2, r3
 8004266:	d241      	bcs.n	80042ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	330c      	adds	r3, #12
 800426e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004272:	e853 3f00 	ldrex	r3, [r3]
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800427e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	330c      	adds	r3, #12
 8004286:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004288:	637a      	str	r2, [r7, #52]	; 0x34
 800428a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800428e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004290:	e841 2300 	strex	r3, r2, [r1]
 8004294:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1e5      	bne.n	8004268 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3314      	adds	r3, #20
 80042a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	e853 3f00 	ldrex	r3, [r3]
 80042aa:	613b      	str	r3, [r7, #16]
   return(result);
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f023 0301 	bic.w	r3, r3, #1
 80042b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3314      	adds	r3, #20
 80042ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042bc:	623a      	str	r2, [r7, #32]
 80042be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c0:	69f9      	ldr	r1, [r7, #28]
 80042c2:	6a3a      	ldr	r2, [r7, #32]
 80042c4:	e841 2300 	strex	r3, r2, [r1]
 80042c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e5      	bne.n	800429c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e00f      	b.n	800430c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	4013      	ands	r3, r2
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	bf0c      	ite	eq
 80042fc:	2301      	moveq	r3, #1
 80042fe:	2300      	movne	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	461a      	mov	r2, r3
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	429a      	cmp	r2, r3
 8004308:	d09f      	beq.n	800424a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3740      	adds	r7, #64	; 0x40
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004314:	b480      	push	{r7}
 8004316:	b095      	sub	sp, #84	; 0x54
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	330c      	adds	r3, #12
 8004322:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004326:	e853 3f00 	ldrex	r3, [r3]
 800432a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800432c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	330c      	adds	r3, #12
 800433a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800433c:	643a      	str	r2, [r7, #64]	; 0x40
 800433e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004340:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004342:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004344:	e841 2300 	strex	r3, r2, [r1]
 8004348:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800434a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1e5      	bne.n	800431c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3314      	adds	r3, #20
 8004356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f023 0301 	bic.w	r3, r3, #1
 8004366:	64bb      	str	r3, [r7, #72]	; 0x48
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3314      	adds	r3, #20
 800436e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004370:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004378:	e841 2300 	strex	r3, r2, [r1]
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e5      	bne.n	8004350 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004388:	2b01      	cmp	r3, #1
 800438a:	d119      	bne.n	80043c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	330c      	adds	r3, #12
 8004392:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	60bb      	str	r3, [r7, #8]
   return(result);
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f023 0310 	bic.w	r3, r3, #16
 80043a2:	647b      	str	r3, [r7, #68]	; 0x44
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	330c      	adds	r3, #12
 80043aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043ac:	61ba      	str	r2, [r7, #24]
 80043ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	6979      	ldr	r1, [r7, #20]
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	613b      	str	r3, [r7, #16]
   return(result);
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e5      	bne.n	800438c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80043ce:	bf00      	nop
 80043d0:	3754      	adds	r7, #84	; 0x54
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f7ff ff09 	bl	800420c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043fa:	bf00      	nop
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004402:	b480      	push	{r7}
 8004404:	b085      	sub	sp, #20
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b21      	cmp	r3, #33	; 0x21
 8004414:	d13e      	bne.n	8004494 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800441e:	d114      	bne.n	800444a <UART_Transmit_IT+0x48>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d110      	bne.n	800444a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800443c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	1c9a      	adds	r2, r3, #2
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	621a      	str	r2, [r3, #32]
 8004448:	e008      	b.n	800445c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	1c59      	adds	r1, r3, #1
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6211      	str	r1, [r2, #32]
 8004454:	781a      	ldrb	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29b      	uxth	r3, r3
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	4619      	mov	r1, r3
 800446a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10f      	bne.n	8004490 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800447e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800448e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	e000      	b.n	8004496 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004494:	2302      	movs	r3, #2
  }
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff fe8e 	bl	80041e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b08c      	sub	sp, #48	; 0x30
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b22      	cmp	r3, #34	; 0x22
 80044e4:	f040 80ab 	bne.w	800463e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f0:	d117      	bne.n	8004522 <UART_Receive_IT+0x50>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d113      	bne.n	8004522 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	b29b      	uxth	r3, r3
 800450c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004510:	b29a      	uxth	r2, r3
 8004512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004514:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	1c9a      	adds	r2, r3, #2
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	629a      	str	r2, [r3, #40]	; 0x28
 8004520:	e026      	b.n	8004570 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004528:	2300      	movs	r3, #0
 800452a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004534:	d007      	beq.n	8004546 <UART_Receive_IT+0x74>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10a      	bne.n	8004554 <UART_Receive_IT+0x82>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	b2da      	uxtb	r2, r3
 800454e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004550:	701a      	strb	r2, [r3, #0]
 8004552:	e008      	b.n	8004566 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	b2db      	uxtb	r3, r3
 800455c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004560:	b2da      	uxtb	r2, r3
 8004562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004564:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004574:	b29b      	uxth	r3, r3
 8004576:	3b01      	subs	r3, #1
 8004578:	b29b      	uxth	r3, r3
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	4619      	mov	r1, r3
 800457e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004580:	2b00      	cmp	r3, #0
 8004582:	d15a      	bne.n	800463a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0220 	bic.w	r2, r2, #32
 8004592:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695a      	ldr	r2, [r3, #20]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0201 	bic.w	r2, r2, #1
 80045b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d135      	bne.n	8004630 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	330c      	adds	r3, #12
 80045d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	613b      	str	r3, [r7, #16]
   return(result);
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f023 0310 	bic.w	r3, r3, #16
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	330c      	adds	r3, #12
 80045e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ea:	623a      	str	r2, [r7, #32]
 80045ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	69f9      	ldr	r1, [r7, #28]
 80045f0:	6a3a      	ldr	r2, [r7, #32]
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e5      	bne.n	80045ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0310 	and.w	r3, r3, #16
 8004608:	2b10      	cmp	r3, #16
 800460a:	d10a      	bne.n	8004622 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800460c:	2300      	movs	r3, #0
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004626:	4619      	mov	r1, r3
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7ff fdf9 	bl	8004220 <HAL_UARTEx_RxEventCallback>
 800462e:	e002      	b.n	8004636 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff fde1 	bl	80041f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	e002      	b.n	8004640 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	e000      	b.n	8004640 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800463e:	2302      	movs	r3, #2
  }
}
 8004640:	4618      	mov	r0, r3
 8004642:	3730      	adds	r7, #48	; 0x30
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800464c:	b09f      	sub	sp, #124	; 0x7c
 800464e:	af00      	add	r7, sp, #0
 8004650:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800465c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800465e:	68d9      	ldr	r1, [r3, #12]
 8004660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	ea40 0301 	orr.w	r3, r0, r1
 8004668:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800466a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	431a      	orrs	r2, r3
 8004674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	431a      	orrs	r2, r3
 800467a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	4313      	orrs	r3, r2
 8004680:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800468c:	f021 010c 	bic.w	r1, r1, #12
 8004690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004696:	430b      	orrs	r3, r1
 8004698:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800469a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a6:	6999      	ldr	r1, [r3, #24]
 80046a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	ea40 0301 	orr.w	r3, r0, r1
 80046b0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	4bc5      	ldr	r3, [pc, #788]	; (80049cc <UART_SetConfig+0x384>)
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d004      	beq.n	80046c6 <UART_SetConfig+0x7e>
 80046bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	4bc3      	ldr	r3, [pc, #780]	; (80049d0 <UART_SetConfig+0x388>)
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d103      	bne.n	80046ce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046c6:	f7fe fa91 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 80046ca:	6778      	str	r0, [r7, #116]	; 0x74
 80046cc:	e002      	b.n	80046d4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046ce:	f7fe fa79 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 80046d2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046dc:	f040 80b6 	bne.w	800484c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046e2:	461c      	mov	r4, r3
 80046e4:	f04f 0500 	mov.w	r5, #0
 80046e8:	4622      	mov	r2, r4
 80046ea:	462b      	mov	r3, r5
 80046ec:	1891      	adds	r1, r2, r2
 80046ee:	6439      	str	r1, [r7, #64]	; 0x40
 80046f0:	415b      	adcs	r3, r3
 80046f2:	647b      	str	r3, [r7, #68]	; 0x44
 80046f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80046f8:	1912      	adds	r2, r2, r4
 80046fa:	eb45 0303 	adc.w	r3, r5, r3
 80046fe:	f04f 0000 	mov.w	r0, #0
 8004702:	f04f 0100 	mov.w	r1, #0
 8004706:	00d9      	lsls	r1, r3, #3
 8004708:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800470c:	00d0      	lsls	r0, r2, #3
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	1911      	adds	r1, r2, r4
 8004714:	6639      	str	r1, [r7, #96]	; 0x60
 8004716:	416b      	adcs	r3, r5
 8004718:	667b      	str	r3, [r7, #100]	; 0x64
 800471a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	461a      	mov	r2, r3
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	1891      	adds	r1, r2, r2
 8004726:	63b9      	str	r1, [r7, #56]	; 0x38
 8004728:	415b      	adcs	r3, r3
 800472a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800472c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004730:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004734:	f7fb fda4 	bl	8000280 <__aeabi_uldivmod>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4ba5      	ldr	r3, [pc, #660]	; (80049d4 <UART_SetConfig+0x38c>)
 800473e:	fba3 2302 	umull	r2, r3, r3, r2
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	011e      	lsls	r6, r3, #4
 8004746:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004748:	461c      	mov	r4, r3
 800474a:	f04f 0500 	mov.w	r5, #0
 800474e:	4622      	mov	r2, r4
 8004750:	462b      	mov	r3, r5
 8004752:	1891      	adds	r1, r2, r2
 8004754:	6339      	str	r1, [r7, #48]	; 0x30
 8004756:	415b      	adcs	r3, r3
 8004758:	637b      	str	r3, [r7, #52]	; 0x34
 800475a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800475e:	1912      	adds	r2, r2, r4
 8004760:	eb45 0303 	adc.w	r3, r5, r3
 8004764:	f04f 0000 	mov.w	r0, #0
 8004768:	f04f 0100 	mov.w	r1, #0
 800476c:	00d9      	lsls	r1, r3, #3
 800476e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004772:	00d0      	lsls	r0, r2, #3
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	1911      	adds	r1, r2, r4
 800477a:	65b9      	str	r1, [r7, #88]	; 0x58
 800477c:	416b      	adcs	r3, r5
 800477e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	461a      	mov	r2, r3
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	1891      	adds	r1, r2, r2
 800478c:	62b9      	str	r1, [r7, #40]	; 0x28
 800478e:	415b      	adcs	r3, r3
 8004790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004792:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004796:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800479a:	f7fb fd71 	bl	8000280 <__aeabi_uldivmod>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4b8c      	ldr	r3, [pc, #560]	; (80049d4 <UART_SetConfig+0x38c>)
 80047a4:	fba3 1302 	umull	r1, r3, r3, r2
 80047a8:	095b      	lsrs	r3, r3, #5
 80047aa:	2164      	movs	r1, #100	; 0x64
 80047ac:	fb01 f303 	mul.w	r3, r1, r3
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	3332      	adds	r3, #50	; 0x32
 80047b6:	4a87      	ldr	r2, [pc, #540]	; (80049d4 <UART_SetConfig+0x38c>)
 80047b8:	fba2 2303 	umull	r2, r3, r2, r3
 80047bc:	095b      	lsrs	r3, r3, #5
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047c4:	441e      	add	r6, r3
 80047c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047c8:	4618      	mov	r0, r3
 80047ca:	f04f 0100 	mov.w	r1, #0
 80047ce:	4602      	mov	r2, r0
 80047d0:	460b      	mov	r3, r1
 80047d2:	1894      	adds	r4, r2, r2
 80047d4:	623c      	str	r4, [r7, #32]
 80047d6:	415b      	adcs	r3, r3
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
 80047da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047de:	1812      	adds	r2, r2, r0
 80047e0:	eb41 0303 	adc.w	r3, r1, r3
 80047e4:	f04f 0400 	mov.w	r4, #0
 80047e8:	f04f 0500 	mov.w	r5, #0
 80047ec:	00dd      	lsls	r5, r3, #3
 80047ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047f2:	00d4      	lsls	r4, r2, #3
 80047f4:	4622      	mov	r2, r4
 80047f6:	462b      	mov	r3, r5
 80047f8:	1814      	adds	r4, r2, r0
 80047fa:	653c      	str	r4, [r7, #80]	; 0x50
 80047fc:	414b      	adcs	r3, r1
 80047fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	461a      	mov	r2, r3
 8004806:	f04f 0300 	mov.w	r3, #0
 800480a:	1891      	adds	r1, r2, r2
 800480c:	61b9      	str	r1, [r7, #24]
 800480e:	415b      	adcs	r3, r3
 8004810:	61fb      	str	r3, [r7, #28]
 8004812:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004816:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800481a:	f7fb fd31 	bl	8000280 <__aeabi_uldivmod>
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	4b6c      	ldr	r3, [pc, #432]	; (80049d4 <UART_SetConfig+0x38c>)
 8004824:	fba3 1302 	umull	r1, r3, r3, r2
 8004828:	095b      	lsrs	r3, r3, #5
 800482a:	2164      	movs	r1, #100	; 0x64
 800482c:	fb01 f303 	mul.w	r3, r1, r3
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	3332      	adds	r3, #50	; 0x32
 8004836:	4a67      	ldr	r2, [pc, #412]	; (80049d4 <UART_SetConfig+0x38c>)
 8004838:	fba2 2303 	umull	r2, r3, r2, r3
 800483c:	095b      	lsrs	r3, r3, #5
 800483e:	f003 0207 	and.w	r2, r3, #7
 8004842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4432      	add	r2, r6
 8004848:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800484a:	e0b9      	b.n	80049c0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800484c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800484e:	461c      	mov	r4, r3
 8004850:	f04f 0500 	mov.w	r5, #0
 8004854:	4622      	mov	r2, r4
 8004856:	462b      	mov	r3, r5
 8004858:	1891      	adds	r1, r2, r2
 800485a:	6139      	str	r1, [r7, #16]
 800485c:	415b      	adcs	r3, r3
 800485e:	617b      	str	r3, [r7, #20]
 8004860:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004864:	1912      	adds	r2, r2, r4
 8004866:	eb45 0303 	adc.w	r3, r5, r3
 800486a:	f04f 0000 	mov.w	r0, #0
 800486e:	f04f 0100 	mov.w	r1, #0
 8004872:	00d9      	lsls	r1, r3, #3
 8004874:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004878:	00d0      	lsls	r0, r2, #3
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	eb12 0804 	adds.w	r8, r2, r4
 8004882:	eb43 0905 	adc.w	r9, r3, r5
 8004886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	4618      	mov	r0, r3
 800488c:	f04f 0100 	mov.w	r1, #0
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	f04f 0300 	mov.w	r3, #0
 8004898:	008b      	lsls	r3, r1, #2
 800489a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800489e:	0082      	lsls	r2, r0, #2
 80048a0:	4640      	mov	r0, r8
 80048a2:	4649      	mov	r1, r9
 80048a4:	f7fb fcec 	bl	8000280 <__aeabi_uldivmod>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4b49      	ldr	r3, [pc, #292]	; (80049d4 <UART_SetConfig+0x38c>)
 80048ae:	fba3 2302 	umull	r2, r3, r3, r2
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	011e      	lsls	r6, r3, #4
 80048b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048b8:	4618      	mov	r0, r3
 80048ba:	f04f 0100 	mov.w	r1, #0
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	1894      	adds	r4, r2, r2
 80048c4:	60bc      	str	r4, [r7, #8]
 80048c6:	415b      	adcs	r3, r3
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048ce:	1812      	adds	r2, r2, r0
 80048d0:	eb41 0303 	adc.w	r3, r1, r3
 80048d4:	f04f 0400 	mov.w	r4, #0
 80048d8:	f04f 0500 	mov.w	r5, #0
 80048dc:	00dd      	lsls	r5, r3, #3
 80048de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80048e2:	00d4      	lsls	r4, r2, #3
 80048e4:	4622      	mov	r2, r4
 80048e6:	462b      	mov	r3, r5
 80048e8:	1814      	adds	r4, r2, r0
 80048ea:	64bc      	str	r4, [r7, #72]	; 0x48
 80048ec:	414b      	adcs	r3, r1
 80048ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f04f 0100 	mov.w	r1, #0
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	f04f 0300 	mov.w	r3, #0
 8004902:	008b      	lsls	r3, r1, #2
 8004904:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004908:	0082      	lsls	r2, r0, #2
 800490a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800490e:	f7fb fcb7 	bl	8000280 <__aeabi_uldivmod>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4b2f      	ldr	r3, [pc, #188]	; (80049d4 <UART_SetConfig+0x38c>)
 8004918:	fba3 1302 	umull	r1, r3, r3, r2
 800491c:	095b      	lsrs	r3, r3, #5
 800491e:	2164      	movs	r1, #100	; 0x64
 8004920:	fb01 f303 	mul.w	r3, r1, r3
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	3332      	adds	r3, #50	; 0x32
 800492a:	4a2a      	ldr	r2, [pc, #168]	; (80049d4 <UART_SetConfig+0x38c>)
 800492c:	fba2 2303 	umull	r2, r3, r2, r3
 8004930:	095b      	lsrs	r3, r3, #5
 8004932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004936:	441e      	add	r6, r3
 8004938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800493a:	4618      	mov	r0, r3
 800493c:	f04f 0100 	mov.w	r1, #0
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	1894      	adds	r4, r2, r2
 8004946:	603c      	str	r4, [r7, #0]
 8004948:	415b      	adcs	r3, r3
 800494a:	607b      	str	r3, [r7, #4]
 800494c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004950:	1812      	adds	r2, r2, r0
 8004952:	eb41 0303 	adc.w	r3, r1, r3
 8004956:	f04f 0400 	mov.w	r4, #0
 800495a:	f04f 0500 	mov.w	r5, #0
 800495e:	00dd      	lsls	r5, r3, #3
 8004960:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004964:	00d4      	lsls	r4, r2, #3
 8004966:	4622      	mov	r2, r4
 8004968:	462b      	mov	r3, r5
 800496a:	eb12 0a00 	adds.w	sl, r2, r0
 800496e:	eb43 0b01 	adc.w	fp, r3, r1
 8004972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	4618      	mov	r0, r3
 8004978:	f04f 0100 	mov.w	r1, #0
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	f04f 0300 	mov.w	r3, #0
 8004984:	008b      	lsls	r3, r1, #2
 8004986:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800498a:	0082      	lsls	r2, r0, #2
 800498c:	4650      	mov	r0, sl
 800498e:	4659      	mov	r1, fp
 8004990:	f7fb fc76 	bl	8000280 <__aeabi_uldivmod>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <UART_SetConfig+0x38c>)
 800499a:	fba3 1302 	umull	r1, r3, r3, r2
 800499e:	095b      	lsrs	r3, r3, #5
 80049a0:	2164      	movs	r1, #100	; 0x64
 80049a2:	fb01 f303 	mul.w	r3, r1, r3
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	3332      	adds	r3, #50	; 0x32
 80049ac:	4a09      	ldr	r2, [pc, #36]	; (80049d4 <UART_SetConfig+0x38c>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	f003 020f 	and.w	r2, r3, #15
 80049b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4432      	add	r2, r6
 80049be:	609a      	str	r2, [r3, #8]
}
 80049c0:	bf00      	nop
 80049c2:	377c      	adds	r7, #124	; 0x7c
 80049c4:	46bd      	mov	sp, r7
 80049c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ca:	bf00      	nop
 80049cc:	40011000 	.word	0x40011000
 80049d0:	40011400 	.word	0x40011400
 80049d4:	51eb851f 	.word	0x51eb851f

080049d8 <__errno>:
 80049d8:	4b01      	ldr	r3, [pc, #4]	; (80049e0 <__errno+0x8>)
 80049da:	6818      	ldr	r0, [r3, #0]
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	2000000c 	.word	0x2000000c

080049e4 <__libc_init_array>:
 80049e4:	b570      	push	{r4, r5, r6, lr}
 80049e6:	4d0d      	ldr	r5, [pc, #52]	; (8004a1c <__libc_init_array+0x38>)
 80049e8:	4c0d      	ldr	r4, [pc, #52]	; (8004a20 <__libc_init_array+0x3c>)
 80049ea:	1b64      	subs	r4, r4, r5
 80049ec:	10a4      	asrs	r4, r4, #2
 80049ee:	2600      	movs	r6, #0
 80049f0:	42a6      	cmp	r6, r4
 80049f2:	d109      	bne.n	8004a08 <__libc_init_array+0x24>
 80049f4:	4d0b      	ldr	r5, [pc, #44]	; (8004a24 <__libc_init_array+0x40>)
 80049f6:	4c0c      	ldr	r4, [pc, #48]	; (8004a28 <__libc_init_array+0x44>)
 80049f8:	f000 fc4e 	bl	8005298 <_init>
 80049fc:	1b64      	subs	r4, r4, r5
 80049fe:	10a4      	asrs	r4, r4, #2
 8004a00:	2600      	movs	r6, #0
 8004a02:	42a6      	cmp	r6, r4
 8004a04:	d105      	bne.n	8004a12 <__libc_init_array+0x2e>
 8004a06:	bd70      	pop	{r4, r5, r6, pc}
 8004a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a0c:	4798      	blx	r3
 8004a0e:	3601      	adds	r6, #1
 8004a10:	e7ee      	b.n	80049f0 <__libc_init_array+0xc>
 8004a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a16:	4798      	blx	r3
 8004a18:	3601      	adds	r6, #1
 8004a1a:	e7f2      	b.n	8004a02 <__libc_init_array+0x1e>
 8004a1c:	08005948 	.word	0x08005948
 8004a20:	08005948 	.word	0x08005948
 8004a24:	08005948 	.word	0x08005948
 8004a28:	0800594c 	.word	0x0800594c

08004a2c <memset>:
 8004a2c:	4402      	add	r2, r0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d100      	bne.n	8004a36 <memset+0xa>
 8004a34:	4770      	bx	lr
 8004a36:	f803 1b01 	strb.w	r1, [r3], #1
 8004a3a:	e7f9      	b.n	8004a30 <memset+0x4>

08004a3c <siprintf>:
 8004a3c:	b40e      	push	{r1, r2, r3}
 8004a3e:	b500      	push	{lr}
 8004a40:	b09c      	sub	sp, #112	; 0x70
 8004a42:	ab1d      	add	r3, sp, #116	; 0x74
 8004a44:	9002      	str	r0, [sp, #8]
 8004a46:	9006      	str	r0, [sp, #24]
 8004a48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a4c:	4809      	ldr	r0, [pc, #36]	; (8004a74 <siprintf+0x38>)
 8004a4e:	9107      	str	r1, [sp, #28]
 8004a50:	9104      	str	r1, [sp, #16]
 8004a52:	4909      	ldr	r1, [pc, #36]	; (8004a78 <siprintf+0x3c>)
 8004a54:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a58:	9105      	str	r1, [sp, #20]
 8004a5a:	6800      	ldr	r0, [r0, #0]
 8004a5c:	9301      	str	r3, [sp, #4]
 8004a5e:	a902      	add	r1, sp, #8
 8004a60:	f000 f868 	bl	8004b34 <_svfiprintf_r>
 8004a64:	9b02      	ldr	r3, [sp, #8]
 8004a66:	2200      	movs	r2, #0
 8004a68:	701a      	strb	r2, [r3, #0]
 8004a6a:	b01c      	add	sp, #112	; 0x70
 8004a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a70:	b003      	add	sp, #12
 8004a72:	4770      	bx	lr
 8004a74:	2000000c 	.word	0x2000000c
 8004a78:	ffff0208 	.word	0xffff0208

08004a7c <__ssputs_r>:
 8004a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a80:	688e      	ldr	r6, [r1, #8]
 8004a82:	429e      	cmp	r6, r3
 8004a84:	4682      	mov	sl, r0
 8004a86:	460c      	mov	r4, r1
 8004a88:	4690      	mov	r8, r2
 8004a8a:	461f      	mov	r7, r3
 8004a8c:	d838      	bhi.n	8004b00 <__ssputs_r+0x84>
 8004a8e:	898a      	ldrh	r2, [r1, #12]
 8004a90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a94:	d032      	beq.n	8004afc <__ssputs_r+0x80>
 8004a96:	6825      	ldr	r5, [r4, #0]
 8004a98:	6909      	ldr	r1, [r1, #16]
 8004a9a:	eba5 0901 	sub.w	r9, r5, r1
 8004a9e:	6965      	ldr	r5, [r4, #20]
 8004aa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004aa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	444b      	add	r3, r9
 8004aac:	106d      	asrs	r5, r5, #1
 8004aae:	429d      	cmp	r5, r3
 8004ab0:	bf38      	it	cc
 8004ab2:	461d      	movcc	r5, r3
 8004ab4:	0553      	lsls	r3, r2, #21
 8004ab6:	d531      	bpl.n	8004b1c <__ssputs_r+0xa0>
 8004ab8:	4629      	mov	r1, r5
 8004aba:	f000 fb47 	bl	800514c <_malloc_r>
 8004abe:	4606      	mov	r6, r0
 8004ac0:	b950      	cbnz	r0, 8004ad8 <__ssputs_r+0x5c>
 8004ac2:	230c      	movs	r3, #12
 8004ac4:	f8ca 3000 	str.w	r3, [sl]
 8004ac8:	89a3      	ldrh	r3, [r4, #12]
 8004aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ace:	81a3      	strh	r3, [r4, #12]
 8004ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad8:	6921      	ldr	r1, [r4, #16]
 8004ada:	464a      	mov	r2, r9
 8004adc:	f000 fabe 	bl	800505c <memcpy>
 8004ae0:	89a3      	ldrh	r3, [r4, #12]
 8004ae2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aea:	81a3      	strh	r3, [r4, #12]
 8004aec:	6126      	str	r6, [r4, #16]
 8004aee:	6165      	str	r5, [r4, #20]
 8004af0:	444e      	add	r6, r9
 8004af2:	eba5 0509 	sub.w	r5, r5, r9
 8004af6:	6026      	str	r6, [r4, #0]
 8004af8:	60a5      	str	r5, [r4, #8]
 8004afa:	463e      	mov	r6, r7
 8004afc:	42be      	cmp	r6, r7
 8004afe:	d900      	bls.n	8004b02 <__ssputs_r+0x86>
 8004b00:	463e      	mov	r6, r7
 8004b02:	4632      	mov	r2, r6
 8004b04:	6820      	ldr	r0, [r4, #0]
 8004b06:	4641      	mov	r1, r8
 8004b08:	f000 fab6 	bl	8005078 <memmove>
 8004b0c:	68a3      	ldr	r3, [r4, #8]
 8004b0e:	6822      	ldr	r2, [r4, #0]
 8004b10:	1b9b      	subs	r3, r3, r6
 8004b12:	4432      	add	r2, r6
 8004b14:	60a3      	str	r3, [r4, #8]
 8004b16:	6022      	str	r2, [r4, #0]
 8004b18:	2000      	movs	r0, #0
 8004b1a:	e7db      	b.n	8004ad4 <__ssputs_r+0x58>
 8004b1c:	462a      	mov	r2, r5
 8004b1e:	f000 fb6f 	bl	8005200 <_realloc_r>
 8004b22:	4606      	mov	r6, r0
 8004b24:	2800      	cmp	r0, #0
 8004b26:	d1e1      	bne.n	8004aec <__ssputs_r+0x70>
 8004b28:	6921      	ldr	r1, [r4, #16]
 8004b2a:	4650      	mov	r0, sl
 8004b2c:	f000 fabe 	bl	80050ac <_free_r>
 8004b30:	e7c7      	b.n	8004ac2 <__ssputs_r+0x46>
	...

08004b34 <_svfiprintf_r>:
 8004b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b38:	4698      	mov	r8, r3
 8004b3a:	898b      	ldrh	r3, [r1, #12]
 8004b3c:	061b      	lsls	r3, r3, #24
 8004b3e:	b09d      	sub	sp, #116	; 0x74
 8004b40:	4607      	mov	r7, r0
 8004b42:	460d      	mov	r5, r1
 8004b44:	4614      	mov	r4, r2
 8004b46:	d50e      	bpl.n	8004b66 <_svfiprintf_r+0x32>
 8004b48:	690b      	ldr	r3, [r1, #16]
 8004b4a:	b963      	cbnz	r3, 8004b66 <_svfiprintf_r+0x32>
 8004b4c:	2140      	movs	r1, #64	; 0x40
 8004b4e:	f000 fafd 	bl	800514c <_malloc_r>
 8004b52:	6028      	str	r0, [r5, #0]
 8004b54:	6128      	str	r0, [r5, #16]
 8004b56:	b920      	cbnz	r0, 8004b62 <_svfiprintf_r+0x2e>
 8004b58:	230c      	movs	r3, #12
 8004b5a:	603b      	str	r3, [r7, #0]
 8004b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b60:	e0d1      	b.n	8004d06 <_svfiprintf_r+0x1d2>
 8004b62:	2340      	movs	r3, #64	; 0x40
 8004b64:	616b      	str	r3, [r5, #20]
 8004b66:	2300      	movs	r3, #0
 8004b68:	9309      	str	r3, [sp, #36]	; 0x24
 8004b6a:	2320      	movs	r3, #32
 8004b6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b70:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b74:	2330      	movs	r3, #48	; 0x30
 8004b76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004d20 <_svfiprintf_r+0x1ec>
 8004b7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b7e:	f04f 0901 	mov.w	r9, #1
 8004b82:	4623      	mov	r3, r4
 8004b84:	469a      	mov	sl, r3
 8004b86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b8a:	b10a      	cbz	r2, 8004b90 <_svfiprintf_r+0x5c>
 8004b8c:	2a25      	cmp	r2, #37	; 0x25
 8004b8e:	d1f9      	bne.n	8004b84 <_svfiprintf_r+0x50>
 8004b90:	ebba 0b04 	subs.w	fp, sl, r4
 8004b94:	d00b      	beq.n	8004bae <_svfiprintf_r+0x7a>
 8004b96:	465b      	mov	r3, fp
 8004b98:	4622      	mov	r2, r4
 8004b9a:	4629      	mov	r1, r5
 8004b9c:	4638      	mov	r0, r7
 8004b9e:	f7ff ff6d 	bl	8004a7c <__ssputs_r>
 8004ba2:	3001      	adds	r0, #1
 8004ba4:	f000 80aa 	beq.w	8004cfc <_svfiprintf_r+0x1c8>
 8004ba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004baa:	445a      	add	r2, fp
 8004bac:	9209      	str	r2, [sp, #36]	; 0x24
 8004bae:	f89a 3000 	ldrb.w	r3, [sl]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 80a2 	beq.w	8004cfc <_svfiprintf_r+0x1c8>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f04f 32ff 	mov.w	r2, #4294967295
 8004bbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bc2:	f10a 0a01 	add.w	sl, sl, #1
 8004bc6:	9304      	str	r3, [sp, #16]
 8004bc8:	9307      	str	r3, [sp, #28]
 8004bca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bce:	931a      	str	r3, [sp, #104]	; 0x68
 8004bd0:	4654      	mov	r4, sl
 8004bd2:	2205      	movs	r2, #5
 8004bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bd8:	4851      	ldr	r0, [pc, #324]	; (8004d20 <_svfiprintf_r+0x1ec>)
 8004bda:	f7fb fb01 	bl	80001e0 <memchr>
 8004bde:	9a04      	ldr	r2, [sp, #16]
 8004be0:	b9d8      	cbnz	r0, 8004c1a <_svfiprintf_r+0xe6>
 8004be2:	06d0      	lsls	r0, r2, #27
 8004be4:	bf44      	itt	mi
 8004be6:	2320      	movmi	r3, #32
 8004be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bec:	0711      	lsls	r1, r2, #28
 8004bee:	bf44      	itt	mi
 8004bf0:	232b      	movmi	r3, #43	; 0x2b
 8004bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8004bfa:	2b2a      	cmp	r3, #42	; 0x2a
 8004bfc:	d015      	beq.n	8004c2a <_svfiprintf_r+0xf6>
 8004bfe:	9a07      	ldr	r2, [sp, #28]
 8004c00:	4654      	mov	r4, sl
 8004c02:	2000      	movs	r0, #0
 8004c04:	f04f 0c0a 	mov.w	ip, #10
 8004c08:	4621      	mov	r1, r4
 8004c0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c0e:	3b30      	subs	r3, #48	; 0x30
 8004c10:	2b09      	cmp	r3, #9
 8004c12:	d94e      	bls.n	8004cb2 <_svfiprintf_r+0x17e>
 8004c14:	b1b0      	cbz	r0, 8004c44 <_svfiprintf_r+0x110>
 8004c16:	9207      	str	r2, [sp, #28]
 8004c18:	e014      	b.n	8004c44 <_svfiprintf_r+0x110>
 8004c1a:	eba0 0308 	sub.w	r3, r0, r8
 8004c1e:	fa09 f303 	lsl.w	r3, r9, r3
 8004c22:	4313      	orrs	r3, r2
 8004c24:	9304      	str	r3, [sp, #16]
 8004c26:	46a2      	mov	sl, r4
 8004c28:	e7d2      	b.n	8004bd0 <_svfiprintf_r+0x9c>
 8004c2a:	9b03      	ldr	r3, [sp, #12]
 8004c2c:	1d19      	adds	r1, r3, #4
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	9103      	str	r1, [sp, #12]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	bfbb      	ittet	lt
 8004c36:	425b      	neglt	r3, r3
 8004c38:	f042 0202 	orrlt.w	r2, r2, #2
 8004c3c:	9307      	strge	r3, [sp, #28]
 8004c3e:	9307      	strlt	r3, [sp, #28]
 8004c40:	bfb8      	it	lt
 8004c42:	9204      	strlt	r2, [sp, #16]
 8004c44:	7823      	ldrb	r3, [r4, #0]
 8004c46:	2b2e      	cmp	r3, #46	; 0x2e
 8004c48:	d10c      	bne.n	8004c64 <_svfiprintf_r+0x130>
 8004c4a:	7863      	ldrb	r3, [r4, #1]
 8004c4c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c4e:	d135      	bne.n	8004cbc <_svfiprintf_r+0x188>
 8004c50:	9b03      	ldr	r3, [sp, #12]
 8004c52:	1d1a      	adds	r2, r3, #4
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	9203      	str	r2, [sp, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bfb8      	it	lt
 8004c5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c60:	3402      	adds	r4, #2
 8004c62:	9305      	str	r3, [sp, #20]
 8004c64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d30 <_svfiprintf_r+0x1fc>
 8004c68:	7821      	ldrb	r1, [r4, #0]
 8004c6a:	2203      	movs	r2, #3
 8004c6c:	4650      	mov	r0, sl
 8004c6e:	f7fb fab7 	bl	80001e0 <memchr>
 8004c72:	b140      	cbz	r0, 8004c86 <_svfiprintf_r+0x152>
 8004c74:	2340      	movs	r3, #64	; 0x40
 8004c76:	eba0 000a 	sub.w	r0, r0, sl
 8004c7a:	fa03 f000 	lsl.w	r0, r3, r0
 8004c7e:	9b04      	ldr	r3, [sp, #16]
 8004c80:	4303      	orrs	r3, r0
 8004c82:	3401      	adds	r4, #1
 8004c84:	9304      	str	r3, [sp, #16]
 8004c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c8a:	4826      	ldr	r0, [pc, #152]	; (8004d24 <_svfiprintf_r+0x1f0>)
 8004c8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c90:	2206      	movs	r2, #6
 8004c92:	f7fb faa5 	bl	80001e0 <memchr>
 8004c96:	2800      	cmp	r0, #0
 8004c98:	d038      	beq.n	8004d0c <_svfiprintf_r+0x1d8>
 8004c9a:	4b23      	ldr	r3, [pc, #140]	; (8004d28 <_svfiprintf_r+0x1f4>)
 8004c9c:	bb1b      	cbnz	r3, 8004ce6 <_svfiprintf_r+0x1b2>
 8004c9e:	9b03      	ldr	r3, [sp, #12]
 8004ca0:	3307      	adds	r3, #7
 8004ca2:	f023 0307 	bic.w	r3, r3, #7
 8004ca6:	3308      	adds	r3, #8
 8004ca8:	9303      	str	r3, [sp, #12]
 8004caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cac:	4433      	add	r3, r6
 8004cae:	9309      	str	r3, [sp, #36]	; 0x24
 8004cb0:	e767      	b.n	8004b82 <_svfiprintf_r+0x4e>
 8004cb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cb6:	460c      	mov	r4, r1
 8004cb8:	2001      	movs	r0, #1
 8004cba:	e7a5      	b.n	8004c08 <_svfiprintf_r+0xd4>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	3401      	adds	r4, #1
 8004cc0:	9305      	str	r3, [sp, #20]
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	f04f 0c0a 	mov.w	ip, #10
 8004cc8:	4620      	mov	r0, r4
 8004cca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cce:	3a30      	subs	r2, #48	; 0x30
 8004cd0:	2a09      	cmp	r2, #9
 8004cd2:	d903      	bls.n	8004cdc <_svfiprintf_r+0x1a8>
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0c5      	beq.n	8004c64 <_svfiprintf_r+0x130>
 8004cd8:	9105      	str	r1, [sp, #20]
 8004cda:	e7c3      	b.n	8004c64 <_svfiprintf_r+0x130>
 8004cdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ce0:	4604      	mov	r4, r0
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e7f0      	b.n	8004cc8 <_svfiprintf_r+0x194>
 8004ce6:	ab03      	add	r3, sp, #12
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	462a      	mov	r2, r5
 8004cec:	4b0f      	ldr	r3, [pc, #60]	; (8004d2c <_svfiprintf_r+0x1f8>)
 8004cee:	a904      	add	r1, sp, #16
 8004cf0:	4638      	mov	r0, r7
 8004cf2:	f3af 8000 	nop.w
 8004cf6:	1c42      	adds	r2, r0, #1
 8004cf8:	4606      	mov	r6, r0
 8004cfa:	d1d6      	bne.n	8004caa <_svfiprintf_r+0x176>
 8004cfc:	89ab      	ldrh	r3, [r5, #12]
 8004cfe:	065b      	lsls	r3, r3, #25
 8004d00:	f53f af2c 	bmi.w	8004b5c <_svfiprintf_r+0x28>
 8004d04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d06:	b01d      	add	sp, #116	; 0x74
 8004d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d0c:	ab03      	add	r3, sp, #12
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	462a      	mov	r2, r5
 8004d12:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <_svfiprintf_r+0x1f8>)
 8004d14:	a904      	add	r1, sp, #16
 8004d16:	4638      	mov	r0, r7
 8004d18:	f000 f87a 	bl	8004e10 <_printf_i>
 8004d1c:	e7eb      	b.n	8004cf6 <_svfiprintf_r+0x1c2>
 8004d1e:	bf00      	nop
 8004d20:	0800590c 	.word	0x0800590c
 8004d24:	08005916 	.word	0x08005916
 8004d28:	00000000 	.word	0x00000000
 8004d2c:	08004a7d 	.word	0x08004a7d
 8004d30:	08005912 	.word	0x08005912

08004d34 <_printf_common>:
 8004d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d38:	4616      	mov	r6, r2
 8004d3a:	4699      	mov	r9, r3
 8004d3c:	688a      	ldr	r2, [r1, #8]
 8004d3e:	690b      	ldr	r3, [r1, #16]
 8004d40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d44:	4293      	cmp	r3, r2
 8004d46:	bfb8      	it	lt
 8004d48:	4613      	movlt	r3, r2
 8004d4a:	6033      	str	r3, [r6, #0]
 8004d4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d50:	4607      	mov	r7, r0
 8004d52:	460c      	mov	r4, r1
 8004d54:	b10a      	cbz	r2, 8004d5a <_printf_common+0x26>
 8004d56:	3301      	adds	r3, #1
 8004d58:	6033      	str	r3, [r6, #0]
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	0699      	lsls	r1, r3, #26
 8004d5e:	bf42      	ittt	mi
 8004d60:	6833      	ldrmi	r3, [r6, #0]
 8004d62:	3302      	addmi	r3, #2
 8004d64:	6033      	strmi	r3, [r6, #0]
 8004d66:	6825      	ldr	r5, [r4, #0]
 8004d68:	f015 0506 	ands.w	r5, r5, #6
 8004d6c:	d106      	bne.n	8004d7c <_printf_common+0x48>
 8004d6e:	f104 0a19 	add.w	sl, r4, #25
 8004d72:	68e3      	ldr	r3, [r4, #12]
 8004d74:	6832      	ldr	r2, [r6, #0]
 8004d76:	1a9b      	subs	r3, r3, r2
 8004d78:	42ab      	cmp	r3, r5
 8004d7a:	dc26      	bgt.n	8004dca <_printf_common+0x96>
 8004d7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d80:	1e13      	subs	r3, r2, #0
 8004d82:	6822      	ldr	r2, [r4, #0]
 8004d84:	bf18      	it	ne
 8004d86:	2301      	movne	r3, #1
 8004d88:	0692      	lsls	r2, r2, #26
 8004d8a:	d42b      	bmi.n	8004de4 <_printf_common+0xb0>
 8004d8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d90:	4649      	mov	r1, r9
 8004d92:	4638      	mov	r0, r7
 8004d94:	47c0      	blx	r8
 8004d96:	3001      	adds	r0, #1
 8004d98:	d01e      	beq.n	8004dd8 <_printf_common+0xa4>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	68e5      	ldr	r5, [r4, #12]
 8004d9e:	6832      	ldr	r2, [r6, #0]
 8004da0:	f003 0306 	and.w	r3, r3, #6
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	bf08      	it	eq
 8004da8:	1aad      	subeq	r5, r5, r2
 8004daa:	68a3      	ldr	r3, [r4, #8]
 8004dac:	6922      	ldr	r2, [r4, #16]
 8004dae:	bf0c      	ite	eq
 8004db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004db4:	2500      	movne	r5, #0
 8004db6:	4293      	cmp	r3, r2
 8004db8:	bfc4      	itt	gt
 8004dba:	1a9b      	subgt	r3, r3, r2
 8004dbc:	18ed      	addgt	r5, r5, r3
 8004dbe:	2600      	movs	r6, #0
 8004dc0:	341a      	adds	r4, #26
 8004dc2:	42b5      	cmp	r5, r6
 8004dc4:	d11a      	bne.n	8004dfc <_printf_common+0xc8>
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	e008      	b.n	8004ddc <_printf_common+0xa8>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	4652      	mov	r2, sl
 8004dce:	4649      	mov	r1, r9
 8004dd0:	4638      	mov	r0, r7
 8004dd2:	47c0      	blx	r8
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	d103      	bne.n	8004de0 <_printf_common+0xac>
 8004dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de0:	3501      	adds	r5, #1
 8004de2:	e7c6      	b.n	8004d72 <_printf_common+0x3e>
 8004de4:	18e1      	adds	r1, r4, r3
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	2030      	movs	r0, #48	; 0x30
 8004dea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dee:	4422      	add	r2, r4
 8004df0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004df4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004df8:	3302      	adds	r3, #2
 8004dfa:	e7c7      	b.n	8004d8c <_printf_common+0x58>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	4622      	mov	r2, r4
 8004e00:	4649      	mov	r1, r9
 8004e02:	4638      	mov	r0, r7
 8004e04:	47c0      	blx	r8
 8004e06:	3001      	adds	r0, #1
 8004e08:	d0e6      	beq.n	8004dd8 <_printf_common+0xa4>
 8004e0a:	3601      	adds	r6, #1
 8004e0c:	e7d9      	b.n	8004dc2 <_printf_common+0x8e>
	...

08004e10 <_printf_i>:
 8004e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e14:	460c      	mov	r4, r1
 8004e16:	4691      	mov	r9, r2
 8004e18:	7e27      	ldrb	r7, [r4, #24]
 8004e1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e1c:	2f78      	cmp	r7, #120	; 0x78
 8004e1e:	4680      	mov	r8, r0
 8004e20:	469a      	mov	sl, r3
 8004e22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e26:	d807      	bhi.n	8004e38 <_printf_i+0x28>
 8004e28:	2f62      	cmp	r7, #98	; 0x62
 8004e2a:	d80a      	bhi.n	8004e42 <_printf_i+0x32>
 8004e2c:	2f00      	cmp	r7, #0
 8004e2e:	f000 80d8 	beq.w	8004fe2 <_printf_i+0x1d2>
 8004e32:	2f58      	cmp	r7, #88	; 0x58
 8004e34:	f000 80a3 	beq.w	8004f7e <_printf_i+0x16e>
 8004e38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e40:	e03a      	b.n	8004eb8 <_printf_i+0xa8>
 8004e42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e46:	2b15      	cmp	r3, #21
 8004e48:	d8f6      	bhi.n	8004e38 <_printf_i+0x28>
 8004e4a:	a001      	add	r0, pc, #4	; (adr r0, 8004e50 <_printf_i+0x40>)
 8004e4c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e50:	08004ea9 	.word	0x08004ea9
 8004e54:	08004ebd 	.word	0x08004ebd
 8004e58:	08004e39 	.word	0x08004e39
 8004e5c:	08004e39 	.word	0x08004e39
 8004e60:	08004e39 	.word	0x08004e39
 8004e64:	08004e39 	.word	0x08004e39
 8004e68:	08004ebd 	.word	0x08004ebd
 8004e6c:	08004e39 	.word	0x08004e39
 8004e70:	08004e39 	.word	0x08004e39
 8004e74:	08004e39 	.word	0x08004e39
 8004e78:	08004e39 	.word	0x08004e39
 8004e7c:	08004fc9 	.word	0x08004fc9
 8004e80:	08004eed 	.word	0x08004eed
 8004e84:	08004fab 	.word	0x08004fab
 8004e88:	08004e39 	.word	0x08004e39
 8004e8c:	08004e39 	.word	0x08004e39
 8004e90:	08004feb 	.word	0x08004feb
 8004e94:	08004e39 	.word	0x08004e39
 8004e98:	08004eed 	.word	0x08004eed
 8004e9c:	08004e39 	.word	0x08004e39
 8004ea0:	08004e39 	.word	0x08004e39
 8004ea4:	08004fb3 	.word	0x08004fb3
 8004ea8:	680b      	ldr	r3, [r1, #0]
 8004eaa:	1d1a      	adds	r2, r3, #4
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	600a      	str	r2, [r1, #0]
 8004eb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004eb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e0a3      	b.n	8005004 <_printf_i+0x1f4>
 8004ebc:	6825      	ldr	r5, [r4, #0]
 8004ebe:	6808      	ldr	r0, [r1, #0]
 8004ec0:	062e      	lsls	r6, r5, #24
 8004ec2:	f100 0304 	add.w	r3, r0, #4
 8004ec6:	d50a      	bpl.n	8004ede <_printf_i+0xce>
 8004ec8:	6805      	ldr	r5, [r0, #0]
 8004eca:	600b      	str	r3, [r1, #0]
 8004ecc:	2d00      	cmp	r5, #0
 8004ece:	da03      	bge.n	8004ed8 <_printf_i+0xc8>
 8004ed0:	232d      	movs	r3, #45	; 0x2d
 8004ed2:	426d      	negs	r5, r5
 8004ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ed8:	485e      	ldr	r0, [pc, #376]	; (8005054 <_printf_i+0x244>)
 8004eda:	230a      	movs	r3, #10
 8004edc:	e019      	b.n	8004f12 <_printf_i+0x102>
 8004ede:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004ee2:	6805      	ldr	r5, [r0, #0]
 8004ee4:	600b      	str	r3, [r1, #0]
 8004ee6:	bf18      	it	ne
 8004ee8:	b22d      	sxthne	r5, r5
 8004eea:	e7ef      	b.n	8004ecc <_printf_i+0xbc>
 8004eec:	680b      	ldr	r3, [r1, #0]
 8004eee:	6825      	ldr	r5, [r4, #0]
 8004ef0:	1d18      	adds	r0, r3, #4
 8004ef2:	6008      	str	r0, [r1, #0]
 8004ef4:	0628      	lsls	r0, r5, #24
 8004ef6:	d501      	bpl.n	8004efc <_printf_i+0xec>
 8004ef8:	681d      	ldr	r5, [r3, #0]
 8004efa:	e002      	b.n	8004f02 <_printf_i+0xf2>
 8004efc:	0669      	lsls	r1, r5, #25
 8004efe:	d5fb      	bpl.n	8004ef8 <_printf_i+0xe8>
 8004f00:	881d      	ldrh	r5, [r3, #0]
 8004f02:	4854      	ldr	r0, [pc, #336]	; (8005054 <_printf_i+0x244>)
 8004f04:	2f6f      	cmp	r7, #111	; 0x6f
 8004f06:	bf0c      	ite	eq
 8004f08:	2308      	moveq	r3, #8
 8004f0a:	230a      	movne	r3, #10
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f12:	6866      	ldr	r6, [r4, #4]
 8004f14:	60a6      	str	r6, [r4, #8]
 8004f16:	2e00      	cmp	r6, #0
 8004f18:	bfa2      	ittt	ge
 8004f1a:	6821      	ldrge	r1, [r4, #0]
 8004f1c:	f021 0104 	bicge.w	r1, r1, #4
 8004f20:	6021      	strge	r1, [r4, #0]
 8004f22:	b90d      	cbnz	r5, 8004f28 <_printf_i+0x118>
 8004f24:	2e00      	cmp	r6, #0
 8004f26:	d04d      	beq.n	8004fc4 <_printf_i+0x1b4>
 8004f28:	4616      	mov	r6, r2
 8004f2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f2e:	fb03 5711 	mls	r7, r3, r1, r5
 8004f32:	5dc7      	ldrb	r7, [r0, r7]
 8004f34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f38:	462f      	mov	r7, r5
 8004f3a:	42bb      	cmp	r3, r7
 8004f3c:	460d      	mov	r5, r1
 8004f3e:	d9f4      	bls.n	8004f2a <_printf_i+0x11a>
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d10b      	bne.n	8004f5c <_printf_i+0x14c>
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	07df      	lsls	r7, r3, #31
 8004f48:	d508      	bpl.n	8004f5c <_printf_i+0x14c>
 8004f4a:	6923      	ldr	r3, [r4, #16]
 8004f4c:	6861      	ldr	r1, [r4, #4]
 8004f4e:	4299      	cmp	r1, r3
 8004f50:	bfde      	ittt	le
 8004f52:	2330      	movle	r3, #48	; 0x30
 8004f54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f5c:	1b92      	subs	r2, r2, r6
 8004f5e:	6122      	str	r2, [r4, #16]
 8004f60:	f8cd a000 	str.w	sl, [sp]
 8004f64:	464b      	mov	r3, r9
 8004f66:	aa03      	add	r2, sp, #12
 8004f68:	4621      	mov	r1, r4
 8004f6a:	4640      	mov	r0, r8
 8004f6c:	f7ff fee2 	bl	8004d34 <_printf_common>
 8004f70:	3001      	adds	r0, #1
 8004f72:	d14c      	bne.n	800500e <_printf_i+0x1fe>
 8004f74:	f04f 30ff 	mov.w	r0, #4294967295
 8004f78:	b004      	add	sp, #16
 8004f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f7e:	4835      	ldr	r0, [pc, #212]	; (8005054 <_printf_i+0x244>)
 8004f80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	680e      	ldr	r6, [r1, #0]
 8004f88:	061f      	lsls	r7, r3, #24
 8004f8a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004f8e:	600e      	str	r6, [r1, #0]
 8004f90:	d514      	bpl.n	8004fbc <_printf_i+0x1ac>
 8004f92:	07d9      	lsls	r1, r3, #31
 8004f94:	bf44      	itt	mi
 8004f96:	f043 0320 	orrmi.w	r3, r3, #32
 8004f9a:	6023      	strmi	r3, [r4, #0]
 8004f9c:	b91d      	cbnz	r5, 8004fa6 <_printf_i+0x196>
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	f023 0320 	bic.w	r3, r3, #32
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	2310      	movs	r3, #16
 8004fa8:	e7b0      	b.n	8004f0c <_printf_i+0xfc>
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	f043 0320 	orr.w	r3, r3, #32
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	2378      	movs	r3, #120	; 0x78
 8004fb4:	4828      	ldr	r0, [pc, #160]	; (8005058 <_printf_i+0x248>)
 8004fb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fba:	e7e3      	b.n	8004f84 <_printf_i+0x174>
 8004fbc:	065e      	lsls	r6, r3, #25
 8004fbe:	bf48      	it	mi
 8004fc0:	b2ad      	uxthmi	r5, r5
 8004fc2:	e7e6      	b.n	8004f92 <_printf_i+0x182>
 8004fc4:	4616      	mov	r6, r2
 8004fc6:	e7bb      	b.n	8004f40 <_printf_i+0x130>
 8004fc8:	680b      	ldr	r3, [r1, #0]
 8004fca:	6826      	ldr	r6, [r4, #0]
 8004fcc:	6960      	ldr	r0, [r4, #20]
 8004fce:	1d1d      	adds	r5, r3, #4
 8004fd0:	600d      	str	r5, [r1, #0]
 8004fd2:	0635      	lsls	r5, r6, #24
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	d501      	bpl.n	8004fdc <_printf_i+0x1cc>
 8004fd8:	6018      	str	r0, [r3, #0]
 8004fda:	e002      	b.n	8004fe2 <_printf_i+0x1d2>
 8004fdc:	0671      	lsls	r1, r6, #25
 8004fde:	d5fb      	bpl.n	8004fd8 <_printf_i+0x1c8>
 8004fe0:	8018      	strh	r0, [r3, #0]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	6123      	str	r3, [r4, #16]
 8004fe6:	4616      	mov	r6, r2
 8004fe8:	e7ba      	b.n	8004f60 <_printf_i+0x150>
 8004fea:	680b      	ldr	r3, [r1, #0]
 8004fec:	1d1a      	adds	r2, r3, #4
 8004fee:	600a      	str	r2, [r1, #0]
 8004ff0:	681e      	ldr	r6, [r3, #0]
 8004ff2:	6862      	ldr	r2, [r4, #4]
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	f7fb f8f2 	bl	80001e0 <memchr>
 8004ffc:	b108      	cbz	r0, 8005002 <_printf_i+0x1f2>
 8004ffe:	1b80      	subs	r0, r0, r6
 8005000:	6060      	str	r0, [r4, #4]
 8005002:	6863      	ldr	r3, [r4, #4]
 8005004:	6123      	str	r3, [r4, #16]
 8005006:	2300      	movs	r3, #0
 8005008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800500c:	e7a8      	b.n	8004f60 <_printf_i+0x150>
 800500e:	6923      	ldr	r3, [r4, #16]
 8005010:	4632      	mov	r2, r6
 8005012:	4649      	mov	r1, r9
 8005014:	4640      	mov	r0, r8
 8005016:	47d0      	blx	sl
 8005018:	3001      	adds	r0, #1
 800501a:	d0ab      	beq.n	8004f74 <_printf_i+0x164>
 800501c:	6823      	ldr	r3, [r4, #0]
 800501e:	079b      	lsls	r3, r3, #30
 8005020:	d413      	bmi.n	800504a <_printf_i+0x23a>
 8005022:	68e0      	ldr	r0, [r4, #12]
 8005024:	9b03      	ldr	r3, [sp, #12]
 8005026:	4298      	cmp	r0, r3
 8005028:	bfb8      	it	lt
 800502a:	4618      	movlt	r0, r3
 800502c:	e7a4      	b.n	8004f78 <_printf_i+0x168>
 800502e:	2301      	movs	r3, #1
 8005030:	4632      	mov	r2, r6
 8005032:	4649      	mov	r1, r9
 8005034:	4640      	mov	r0, r8
 8005036:	47d0      	blx	sl
 8005038:	3001      	adds	r0, #1
 800503a:	d09b      	beq.n	8004f74 <_printf_i+0x164>
 800503c:	3501      	adds	r5, #1
 800503e:	68e3      	ldr	r3, [r4, #12]
 8005040:	9903      	ldr	r1, [sp, #12]
 8005042:	1a5b      	subs	r3, r3, r1
 8005044:	42ab      	cmp	r3, r5
 8005046:	dcf2      	bgt.n	800502e <_printf_i+0x21e>
 8005048:	e7eb      	b.n	8005022 <_printf_i+0x212>
 800504a:	2500      	movs	r5, #0
 800504c:	f104 0619 	add.w	r6, r4, #25
 8005050:	e7f5      	b.n	800503e <_printf_i+0x22e>
 8005052:	bf00      	nop
 8005054:	0800591d 	.word	0x0800591d
 8005058:	0800592e 	.word	0x0800592e

0800505c <memcpy>:
 800505c:	440a      	add	r2, r1
 800505e:	4291      	cmp	r1, r2
 8005060:	f100 33ff 	add.w	r3, r0, #4294967295
 8005064:	d100      	bne.n	8005068 <memcpy+0xc>
 8005066:	4770      	bx	lr
 8005068:	b510      	push	{r4, lr}
 800506a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800506e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005072:	4291      	cmp	r1, r2
 8005074:	d1f9      	bne.n	800506a <memcpy+0xe>
 8005076:	bd10      	pop	{r4, pc}

08005078 <memmove>:
 8005078:	4288      	cmp	r0, r1
 800507a:	b510      	push	{r4, lr}
 800507c:	eb01 0402 	add.w	r4, r1, r2
 8005080:	d902      	bls.n	8005088 <memmove+0x10>
 8005082:	4284      	cmp	r4, r0
 8005084:	4623      	mov	r3, r4
 8005086:	d807      	bhi.n	8005098 <memmove+0x20>
 8005088:	1e43      	subs	r3, r0, #1
 800508a:	42a1      	cmp	r1, r4
 800508c:	d008      	beq.n	80050a0 <memmove+0x28>
 800508e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005092:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005096:	e7f8      	b.n	800508a <memmove+0x12>
 8005098:	4402      	add	r2, r0
 800509a:	4601      	mov	r1, r0
 800509c:	428a      	cmp	r2, r1
 800509e:	d100      	bne.n	80050a2 <memmove+0x2a>
 80050a0:	bd10      	pop	{r4, pc}
 80050a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050aa:	e7f7      	b.n	800509c <memmove+0x24>

080050ac <_free_r>:
 80050ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050ae:	2900      	cmp	r1, #0
 80050b0:	d048      	beq.n	8005144 <_free_r+0x98>
 80050b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050b6:	9001      	str	r0, [sp, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f1a1 0404 	sub.w	r4, r1, #4
 80050be:	bfb8      	it	lt
 80050c0:	18e4      	addlt	r4, r4, r3
 80050c2:	f000 f8d3 	bl	800526c <__malloc_lock>
 80050c6:	4a20      	ldr	r2, [pc, #128]	; (8005148 <_free_r+0x9c>)
 80050c8:	9801      	ldr	r0, [sp, #4]
 80050ca:	6813      	ldr	r3, [r2, #0]
 80050cc:	4615      	mov	r5, r2
 80050ce:	b933      	cbnz	r3, 80050de <_free_r+0x32>
 80050d0:	6063      	str	r3, [r4, #4]
 80050d2:	6014      	str	r4, [r2, #0]
 80050d4:	b003      	add	sp, #12
 80050d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050da:	f000 b8cd 	b.w	8005278 <__malloc_unlock>
 80050de:	42a3      	cmp	r3, r4
 80050e0:	d90b      	bls.n	80050fa <_free_r+0x4e>
 80050e2:	6821      	ldr	r1, [r4, #0]
 80050e4:	1862      	adds	r2, r4, r1
 80050e6:	4293      	cmp	r3, r2
 80050e8:	bf04      	itt	eq
 80050ea:	681a      	ldreq	r2, [r3, #0]
 80050ec:	685b      	ldreq	r3, [r3, #4]
 80050ee:	6063      	str	r3, [r4, #4]
 80050f0:	bf04      	itt	eq
 80050f2:	1852      	addeq	r2, r2, r1
 80050f4:	6022      	streq	r2, [r4, #0]
 80050f6:	602c      	str	r4, [r5, #0]
 80050f8:	e7ec      	b.n	80050d4 <_free_r+0x28>
 80050fa:	461a      	mov	r2, r3
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	b10b      	cbz	r3, 8005104 <_free_r+0x58>
 8005100:	42a3      	cmp	r3, r4
 8005102:	d9fa      	bls.n	80050fa <_free_r+0x4e>
 8005104:	6811      	ldr	r1, [r2, #0]
 8005106:	1855      	adds	r5, r2, r1
 8005108:	42a5      	cmp	r5, r4
 800510a:	d10b      	bne.n	8005124 <_free_r+0x78>
 800510c:	6824      	ldr	r4, [r4, #0]
 800510e:	4421      	add	r1, r4
 8005110:	1854      	adds	r4, r2, r1
 8005112:	42a3      	cmp	r3, r4
 8005114:	6011      	str	r1, [r2, #0]
 8005116:	d1dd      	bne.n	80050d4 <_free_r+0x28>
 8005118:	681c      	ldr	r4, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	6053      	str	r3, [r2, #4]
 800511e:	4421      	add	r1, r4
 8005120:	6011      	str	r1, [r2, #0]
 8005122:	e7d7      	b.n	80050d4 <_free_r+0x28>
 8005124:	d902      	bls.n	800512c <_free_r+0x80>
 8005126:	230c      	movs	r3, #12
 8005128:	6003      	str	r3, [r0, #0]
 800512a:	e7d3      	b.n	80050d4 <_free_r+0x28>
 800512c:	6825      	ldr	r5, [r4, #0]
 800512e:	1961      	adds	r1, r4, r5
 8005130:	428b      	cmp	r3, r1
 8005132:	bf04      	itt	eq
 8005134:	6819      	ldreq	r1, [r3, #0]
 8005136:	685b      	ldreq	r3, [r3, #4]
 8005138:	6063      	str	r3, [r4, #4]
 800513a:	bf04      	itt	eq
 800513c:	1949      	addeq	r1, r1, r5
 800513e:	6021      	streq	r1, [r4, #0]
 8005140:	6054      	str	r4, [r2, #4]
 8005142:	e7c7      	b.n	80050d4 <_free_r+0x28>
 8005144:	b003      	add	sp, #12
 8005146:	bd30      	pop	{r4, r5, pc}
 8005148:	200008b0 	.word	0x200008b0

0800514c <_malloc_r>:
 800514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514e:	1ccd      	adds	r5, r1, #3
 8005150:	f025 0503 	bic.w	r5, r5, #3
 8005154:	3508      	adds	r5, #8
 8005156:	2d0c      	cmp	r5, #12
 8005158:	bf38      	it	cc
 800515a:	250c      	movcc	r5, #12
 800515c:	2d00      	cmp	r5, #0
 800515e:	4606      	mov	r6, r0
 8005160:	db01      	blt.n	8005166 <_malloc_r+0x1a>
 8005162:	42a9      	cmp	r1, r5
 8005164:	d903      	bls.n	800516e <_malloc_r+0x22>
 8005166:	230c      	movs	r3, #12
 8005168:	6033      	str	r3, [r6, #0]
 800516a:	2000      	movs	r0, #0
 800516c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800516e:	f000 f87d 	bl	800526c <__malloc_lock>
 8005172:	4921      	ldr	r1, [pc, #132]	; (80051f8 <_malloc_r+0xac>)
 8005174:	680a      	ldr	r2, [r1, #0]
 8005176:	4614      	mov	r4, r2
 8005178:	b99c      	cbnz	r4, 80051a2 <_malloc_r+0x56>
 800517a:	4f20      	ldr	r7, [pc, #128]	; (80051fc <_malloc_r+0xb0>)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	b923      	cbnz	r3, 800518a <_malloc_r+0x3e>
 8005180:	4621      	mov	r1, r4
 8005182:	4630      	mov	r0, r6
 8005184:	f000 f862 	bl	800524c <_sbrk_r>
 8005188:	6038      	str	r0, [r7, #0]
 800518a:	4629      	mov	r1, r5
 800518c:	4630      	mov	r0, r6
 800518e:	f000 f85d 	bl	800524c <_sbrk_r>
 8005192:	1c43      	adds	r3, r0, #1
 8005194:	d123      	bne.n	80051de <_malloc_r+0x92>
 8005196:	230c      	movs	r3, #12
 8005198:	6033      	str	r3, [r6, #0]
 800519a:	4630      	mov	r0, r6
 800519c:	f000 f86c 	bl	8005278 <__malloc_unlock>
 80051a0:	e7e3      	b.n	800516a <_malloc_r+0x1e>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	1b5b      	subs	r3, r3, r5
 80051a6:	d417      	bmi.n	80051d8 <_malloc_r+0x8c>
 80051a8:	2b0b      	cmp	r3, #11
 80051aa:	d903      	bls.n	80051b4 <_malloc_r+0x68>
 80051ac:	6023      	str	r3, [r4, #0]
 80051ae:	441c      	add	r4, r3
 80051b0:	6025      	str	r5, [r4, #0]
 80051b2:	e004      	b.n	80051be <_malloc_r+0x72>
 80051b4:	6863      	ldr	r3, [r4, #4]
 80051b6:	42a2      	cmp	r2, r4
 80051b8:	bf0c      	ite	eq
 80051ba:	600b      	streq	r3, [r1, #0]
 80051bc:	6053      	strne	r3, [r2, #4]
 80051be:	4630      	mov	r0, r6
 80051c0:	f000 f85a 	bl	8005278 <__malloc_unlock>
 80051c4:	f104 000b 	add.w	r0, r4, #11
 80051c8:	1d23      	adds	r3, r4, #4
 80051ca:	f020 0007 	bic.w	r0, r0, #7
 80051ce:	1ac2      	subs	r2, r0, r3
 80051d0:	d0cc      	beq.n	800516c <_malloc_r+0x20>
 80051d2:	1a1b      	subs	r3, r3, r0
 80051d4:	50a3      	str	r3, [r4, r2]
 80051d6:	e7c9      	b.n	800516c <_malloc_r+0x20>
 80051d8:	4622      	mov	r2, r4
 80051da:	6864      	ldr	r4, [r4, #4]
 80051dc:	e7cc      	b.n	8005178 <_malloc_r+0x2c>
 80051de:	1cc4      	adds	r4, r0, #3
 80051e0:	f024 0403 	bic.w	r4, r4, #3
 80051e4:	42a0      	cmp	r0, r4
 80051e6:	d0e3      	beq.n	80051b0 <_malloc_r+0x64>
 80051e8:	1a21      	subs	r1, r4, r0
 80051ea:	4630      	mov	r0, r6
 80051ec:	f000 f82e 	bl	800524c <_sbrk_r>
 80051f0:	3001      	adds	r0, #1
 80051f2:	d1dd      	bne.n	80051b0 <_malloc_r+0x64>
 80051f4:	e7cf      	b.n	8005196 <_malloc_r+0x4a>
 80051f6:	bf00      	nop
 80051f8:	200008b0 	.word	0x200008b0
 80051fc:	200008b4 	.word	0x200008b4

08005200 <_realloc_r>:
 8005200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005202:	4607      	mov	r7, r0
 8005204:	4614      	mov	r4, r2
 8005206:	460e      	mov	r6, r1
 8005208:	b921      	cbnz	r1, 8005214 <_realloc_r+0x14>
 800520a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800520e:	4611      	mov	r1, r2
 8005210:	f7ff bf9c 	b.w	800514c <_malloc_r>
 8005214:	b922      	cbnz	r2, 8005220 <_realloc_r+0x20>
 8005216:	f7ff ff49 	bl	80050ac <_free_r>
 800521a:	4625      	mov	r5, r4
 800521c:	4628      	mov	r0, r5
 800521e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005220:	f000 f830 	bl	8005284 <_malloc_usable_size_r>
 8005224:	42a0      	cmp	r0, r4
 8005226:	d20f      	bcs.n	8005248 <_realloc_r+0x48>
 8005228:	4621      	mov	r1, r4
 800522a:	4638      	mov	r0, r7
 800522c:	f7ff ff8e 	bl	800514c <_malloc_r>
 8005230:	4605      	mov	r5, r0
 8005232:	2800      	cmp	r0, #0
 8005234:	d0f2      	beq.n	800521c <_realloc_r+0x1c>
 8005236:	4631      	mov	r1, r6
 8005238:	4622      	mov	r2, r4
 800523a:	f7ff ff0f 	bl	800505c <memcpy>
 800523e:	4631      	mov	r1, r6
 8005240:	4638      	mov	r0, r7
 8005242:	f7ff ff33 	bl	80050ac <_free_r>
 8005246:	e7e9      	b.n	800521c <_realloc_r+0x1c>
 8005248:	4635      	mov	r5, r6
 800524a:	e7e7      	b.n	800521c <_realloc_r+0x1c>

0800524c <_sbrk_r>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	4d06      	ldr	r5, [pc, #24]	; (8005268 <_sbrk_r+0x1c>)
 8005250:	2300      	movs	r3, #0
 8005252:	4604      	mov	r4, r0
 8005254:	4608      	mov	r0, r1
 8005256:	602b      	str	r3, [r5, #0]
 8005258:	f7fc fc06 	bl	8001a68 <_sbrk>
 800525c:	1c43      	adds	r3, r0, #1
 800525e:	d102      	bne.n	8005266 <_sbrk_r+0x1a>
 8005260:	682b      	ldr	r3, [r5, #0]
 8005262:	b103      	cbz	r3, 8005266 <_sbrk_r+0x1a>
 8005264:	6023      	str	r3, [r4, #0]
 8005266:	bd38      	pop	{r3, r4, r5, pc}
 8005268:	20000ac4 	.word	0x20000ac4

0800526c <__malloc_lock>:
 800526c:	4801      	ldr	r0, [pc, #4]	; (8005274 <__malloc_lock+0x8>)
 800526e:	f000 b811 	b.w	8005294 <__retarget_lock_acquire_recursive>
 8005272:	bf00      	nop
 8005274:	20000acc 	.word	0x20000acc

08005278 <__malloc_unlock>:
 8005278:	4801      	ldr	r0, [pc, #4]	; (8005280 <__malloc_unlock+0x8>)
 800527a:	f000 b80c 	b.w	8005296 <__retarget_lock_release_recursive>
 800527e:	bf00      	nop
 8005280:	20000acc 	.word	0x20000acc

08005284 <_malloc_usable_size_r>:
 8005284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005288:	1f18      	subs	r0, r3, #4
 800528a:	2b00      	cmp	r3, #0
 800528c:	bfbc      	itt	lt
 800528e:	580b      	ldrlt	r3, [r1, r0]
 8005290:	18c0      	addlt	r0, r0, r3
 8005292:	4770      	bx	lr

08005294 <__retarget_lock_acquire_recursive>:
 8005294:	4770      	bx	lr

08005296 <__retarget_lock_release_recursive>:
 8005296:	4770      	bx	lr

08005298 <_init>:
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529a:	bf00      	nop
 800529c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529e:	bc08      	pop	{r3}
 80052a0:	469e      	mov	lr, r3
 80052a2:	4770      	bx	lr

080052a4 <_fini>:
 80052a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a6:	bf00      	nop
 80052a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052aa:	bc08      	pop	{r3}
 80052ac:	469e      	mov	lr, r3
 80052ae:	4770      	bx	lr
