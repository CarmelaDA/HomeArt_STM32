
HomeArt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000076c  08007278  08007278  00017278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079e4  080079e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080079e4  080079e4  000179e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079ec  080079ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079ec  080079ec  000179ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079f0  080079f0  000179f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080079f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000d78  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000de8  20000de8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014b3c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a75  00000000  00000000  00034bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef0  00000000  00000000  00037658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e28  00000000  00000000  00038548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c0f  00000000  00000000  00039370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012f2b  00000000  00000000  0005cf7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8b5f  00000000  00000000  0006feaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00148a09  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041f4  00000000  00000000  00148a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007260 	.word	0x08007260

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007260 	.word	0x08007260

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <ESP_clearBuffer>:
char *Terminate = "</body></html>";


/*****************************************************************************************************************************************/

void ESP_clearBuffer(void){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

	memset(buffer_app, 0, 60);
 800057c:	223c      	movs	r2, #60	; 0x3c
 800057e:	2100      	movs	r1, #0
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <ESP_clearBuffer+0x18>)
 8000582:	f006 fa37 	bl	80069f4 <memset>
	buffer_index = 0;
 8000586:	4b03      	ldr	r3, [pc, #12]	; (8000594 <ESP_clearBuffer+0x1c>)
 8000588:	2200      	movs	r2, #0
 800058a:	801a      	strh	r2, [r3, #0]
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200008f4 	.word	0x200008f4
 8000594:	200009de 	.word	0x200009de

08000598 <ESP_Init>:


void ESP_Init(char *SSID, char *PASSWD){
 8000598:	b580      	push	{r7, lr}
 800059a:	b09a      	sub	sp, #104	; 0x68
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]

	ESP_clearBuffer();
 80005a2:	f7ff ffe9 	bl	8000578 <ESP_clearBuffer>
	char data[80];

	ringInit();
 80005a6:	f000 fd5f 	bl	8001068 <ringInit>

	HAL_Delay(1000);
 80005aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ae:	f002 febd 	bl	800332c <HAL_Delay>

	/********** AT **********/

	UART_send("AT\r\n", WiFi_UART);
 80005b2:	4974      	ldr	r1, [pc, #464]	; (8000784 <ESP_Init+0x1ec>)
 80005b4:	4874      	ldr	r0, [pc, #464]	; (8000788 <ESP_Init+0x1f0>)
 80005b6:	f000 ff15 	bl	80013e4 <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 80005ba:	bf00      	nop
 80005bc:	4971      	ldr	r1, [pc, #452]	; (8000784 <ESP_Init+0x1ec>)
 80005be:	4873      	ldr	r0, [pc, #460]	; (800078c <ESP_Init+0x1f4>)
 80005c0:	f000 ffa6 	bl	8001510 <UART_waitFor>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f8      	beq.n	80005bc <ESP_Init+0x24>
	UART_send("AT  ---->  OK\n", PC_UART);
 80005ca:	4971      	ldr	r1, [pc, #452]	; (8000790 <ESP_Init+0x1f8>)
 80005cc:	4871      	ldr	r0, [pc, #452]	; (8000794 <ESP_Init+0x1fc>)
 80005ce:	f000 ff09 	bl	80013e4 <UART_send>


	HAL_Delay(2000);
 80005d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005d6:	f002 fea9 	bl	800332c <HAL_Delay>


	/********** AT+RST **********/
	UART_send("AT+RST\r\n", WiFi_UART);
 80005da:	496a      	ldr	r1, [pc, #424]	; (8000784 <ESP_Init+0x1ec>)
 80005dc:	486e      	ldr	r0, [pc, #440]	; (8000798 <ESP_Init+0x200>)
 80005de:	f000 ff01 	bl	80013e4 <UART_send>
	UART_send("\nReseteando ", PC_UART);
 80005e2:	496b      	ldr	r1, [pc, #428]	; (8000790 <ESP_Init+0x1f8>)
 80005e4:	486d      	ldr	r0, [pc, #436]	; (800079c <ESP_Init+0x204>)
 80005e6:	f000 fefd 	bl	80013e4 <UART_send>

	for (int i=0; i<3; i++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	667b      	str	r3, [r7, #100]	; 0x64
 80005ee:	e00a      	b.n	8000606 <ESP_Init+0x6e>
	{
		UART_send(" . ", PC_UART);
 80005f0:	4967      	ldr	r1, [pc, #412]	; (8000790 <ESP_Init+0x1f8>)
 80005f2:	486b      	ldr	r0, [pc, #428]	; (80007a0 <ESP_Init+0x208>)
 80005f4:	f000 fef6 	bl	80013e4 <UART_send>
		HAL_Delay(1500);
 80005f8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005fc:	f002 fe96 	bl	800332c <HAL_Delay>
	for (int i=0; i<3; i++)
 8000600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000602:	3301      	adds	r3, #1
 8000604:	667b      	str	r3, [r7, #100]	; 0x64
 8000606:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000608:	2b02      	cmp	r3, #2
 800060a:	ddf1      	ble.n	80005f0 <ESP_Init+0x58>
	}


	/********** AT **********/
	UART_send("AT\r\n", WiFi_UART);
 800060c:	495d      	ldr	r1, [pc, #372]	; (8000784 <ESP_Init+0x1ec>)
 800060e:	485e      	ldr	r0, [pc, #376]	; (8000788 <ESP_Init+0x1f0>)
 8000610:	f000 fee8 	bl	80013e4 <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 8000614:	bf00      	nop
 8000616:	495b      	ldr	r1, [pc, #364]	; (8000784 <ESP_Init+0x1ec>)
 8000618:	485c      	ldr	r0, [pc, #368]	; (800078c <ESP_Init+0x1f4>)
 800061a:	f000 ff79 	bl	8001510 <UART_waitFor>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d0f8      	beq.n	8000616 <ESP_Init+0x7e>
	UART_send("\n\nAT  ---->  OK\n\n", PC_UART);
 8000624:	495a      	ldr	r1, [pc, #360]	; (8000790 <ESP_Init+0x1f8>)
 8000626:	485f      	ldr	r0, [pc, #380]	; (80007a4 <ESP_Init+0x20c>)
 8000628:	f000 fedc 	bl	80013e4 <UART_send>


	HAL_Delay(2000);
 800062c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000630:	f002 fe7c 	bl	800332c <HAL_Delay>


	/********** AT+CWMODE=3 **********/
	UART_send("AT+CWMODE=3\r\n", WiFi_UART);
 8000634:	4953      	ldr	r1, [pc, #332]	; (8000784 <ESP_Init+0x1ec>)
 8000636:	485c      	ldr	r0, [pc, #368]	; (80007a8 <ESP_Init+0x210>)
 8000638:	f000 fed4 	bl	80013e4 <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 800063c:	bf00      	nop
 800063e:	4951      	ldr	r1, [pc, #324]	; (8000784 <ESP_Init+0x1ec>)
 8000640:	4852      	ldr	r0, [pc, #328]	; (800078c <ESP_Init+0x1f4>)
 8000642:	f000 ff65 	bl	8001510 <UART_waitFor>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d0f8      	beq.n	800063e <ESP_Init+0xa6>
	UART_send("CW MODE  ---->  3\n\n", PC_UART);
 800064c:	4950      	ldr	r1, [pc, #320]	; (8000790 <ESP_Init+0x1f8>)
 800064e:	4857      	ldr	r0, [pc, #348]	; (80007ac <ESP_Init+0x214>)
 8000650:	f000 fec8 	bl	80013e4 <UART_send>


	/********** AT+CWJAP="SSID","PASSWD" **********/
	UART_send("Conectando con la RED proporcionada ", PC_UART);
 8000654:	494e      	ldr	r1, [pc, #312]	; (8000790 <ESP_Init+0x1f8>)
 8000656:	4856      	ldr	r0, [pc, #344]	; (80007b0 <ESP_Init+0x218>)
 8000658:	f000 fec4 	bl	80013e4 <UART_send>

	for (int i=0; i<3; i++)
 800065c:	2300      	movs	r3, #0
 800065e:	663b      	str	r3, [r7, #96]	; 0x60
 8000660:	e00a      	b.n	8000678 <ESP_Init+0xe0>
	{
		UART_send(" . ", PC_UART);
 8000662:	494b      	ldr	r1, [pc, #300]	; (8000790 <ESP_Init+0x1f8>)
 8000664:	484e      	ldr	r0, [pc, #312]	; (80007a0 <ESP_Init+0x208>)
 8000666:	f000 febd 	bl	80013e4 <UART_send>
		HAL_Delay(1500);
 800066a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800066e:	f002 fe5d 	bl	800332c <HAL_Delay>
	for (int i=0; i<3; i++)
 8000672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000674:	3301      	adds	r3, #1
 8000676:	663b      	str	r3, [r7, #96]	; 0x60
 8000678:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800067a:	2b02      	cmp	r3, #2
 800067c:	ddf1      	ble.n	8000662 <ESP_Init+0xca>
	}

	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 800067e:	f107 000c 	add.w	r0, r7, #12
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	494b      	ldr	r1, [pc, #300]	; (80007b4 <ESP_Init+0x21c>)
 8000688:	f006 f9bc 	bl	8006a04 <siprintf>
	UART_send(data, WiFi_UART);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	493c      	ldr	r1, [pc, #240]	; (8000784 <ESP_Init+0x1ec>)
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fea6 	bl	80013e4 <UART_send>
	while (!(UART_waitFor("WIFI GOT IP\r\n\r\nOK\r\n", WiFi_UART)));
 8000698:	bf00      	nop
 800069a:	493a      	ldr	r1, [pc, #232]	; (8000784 <ESP_Init+0x1ec>)
 800069c:	4846      	ldr	r0, [pc, #280]	; (80007b8 <ESP_Init+0x220>)
 800069e:	f000 ff37 	bl	8001510 <UART_waitFor>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d0f8      	beq.n	800069a <ESP_Init+0x102>
	sprintf (data, "\n\nConectado a  \"%s\"\n\n", SSID);
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	4943      	ldr	r1, [pc, #268]	; (80007bc <ESP_Init+0x224>)
 80006b0:	4618      	mov	r0, r3
 80006b2:	f006 f9a7 	bl	8006a04 <siprintf>
	UART_send(data,PC_UART);
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	4935      	ldr	r1, [pc, #212]	; (8000790 <ESP_Init+0x1f8>)
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fe91 	bl	80013e4 <UART_send>
	//UART_send("AT+CIPSTA?\r\n", WiFi_UART);
	//sprintf (data, "AT+CIPSTA?\r\n");


	/********** AT+CIFSR **********/
	UART_send("AT+CIFSR\r\n", WiFi_UART);
 80006c2:	4930      	ldr	r1, [pc, #192]	; (8000784 <ESP_Init+0x1ec>)
 80006c4:	483e      	ldr	r0, [pc, #248]	; (80007c0 <ESP_Init+0x228>)
 80006c6:	f000 fe8d 	bl	80013e4 <UART_send>
	while (!(UART_waitFor("CIFSR:STAIP,\"", WiFi_UART)));
 80006ca:	bf00      	nop
 80006cc:	492d      	ldr	r1, [pc, #180]	; (8000784 <ESP_Init+0x1ec>)
 80006ce:	483d      	ldr	r0, [pc, #244]	; (80007c4 <ESP_Init+0x22c>)
 80006d0:	f000 ff1e 	bl	8001510 <UART_waitFor>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d0f8      	beq.n	80006cc <ESP_Init+0x134>
	while (!(UART_copyUpto("\"",buffer, WiFi_UART)));
 80006da:	bf00      	nop
 80006dc:	4a29      	ldr	r2, [pc, #164]	; (8000784 <ESP_Init+0x1ec>)
 80006de:	493a      	ldr	r1, [pc, #232]	; (80007c8 <ESP_Init+0x230>)
 80006e0:	483a      	ldr	r0, [pc, #232]	; (80007cc <ESP_Init+0x234>)
 80006e2:	f000 fe97 	bl	8001414 <UART_copyUpto>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0f7      	beq.n	80006dc <ESP_Init+0x144>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 80006ec:	bf00      	nop
 80006ee:	4925      	ldr	r1, [pc, #148]	; (8000784 <ESP_Init+0x1ec>)
 80006f0:	4826      	ldr	r0, [pc, #152]	; (800078c <ESP_Init+0x1f4>)
 80006f2:	f000 ff0d 	bl	8001510 <UART_waitFor>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d0f8      	beq.n	80006ee <ESP_Init+0x156>
	int len = strlen (buffer);
 80006fc:	4832      	ldr	r0, [pc, #200]	; (80007c8 <ESP_Init+0x230>)
 80006fe:	f7ff fd67 	bl	80001d0 <strlen>
 8000702:	4603      	mov	r3, r0
 8000704:	65fb      	str	r3, [r7, #92]	; 0x5c
	buffer[len-1] = '\0';
 8000706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000708:	3b01      	subs	r3, #1
 800070a:	4a2f      	ldr	r2, [pc, #188]	; (80007c8 <ESP_Init+0x230>)
 800070c:	2100      	movs	r1, #0
 800070e:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP :  %s\n\n", buffer);
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	4a2c      	ldr	r2, [pc, #176]	; (80007c8 <ESP_Init+0x230>)
 8000716:	492e      	ldr	r1, [pc, #184]	; (80007d0 <ESP_Init+0x238>)
 8000718:	4618      	mov	r0, r3
 800071a:	f006 f973 	bl	8006a04 <siprintf>
	UART_send(data, PC_UART);
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	491b      	ldr	r1, [pc, #108]	; (8000790 <ESP_Init+0x1f8>)
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fe5d 	bl	80013e4 <UART_send>


	/********** AT+CIPMUX=1 **********/
	UART_send("AT+CIPMUX=1\r\n", WiFi_UART);
 800072a:	4916      	ldr	r1, [pc, #88]	; (8000784 <ESP_Init+0x1ec>)
 800072c:	4829      	ldr	r0, [pc, #164]	; (80007d4 <ESP_Init+0x23c>)
 800072e:	f000 fe59 	bl	80013e4 <UART_send>
	while (!(UART_waitFor("AT+CIPMUX=1\r\r\n\r\nOK\r\n", WiFi_UART)));
 8000732:	bf00      	nop
 8000734:	4913      	ldr	r1, [pc, #76]	; (8000784 <ESP_Init+0x1ec>)
 8000736:	4828      	ldr	r0, [pc, #160]	; (80007d8 <ESP_Init+0x240>)
 8000738:	f000 feea 	bl	8001510 <UART_waitFor>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0f8      	beq.n	8000734 <ESP_Init+0x19c>
	UART_send("CIPMUX  ---->  OK\n\n", PC_UART);
 8000742:	4913      	ldr	r1, [pc, #76]	; (8000790 <ESP_Init+0x1f8>)
 8000744:	4825      	ldr	r0, [pc, #148]	; (80007dc <ESP_Init+0x244>)
 8000746:	f000 fe4d 	bl	80013e4 <UART_send>
	//while (!(UART_waitFor("OK\r\n", WiFi_UART)));
	//UART_send("CIPSTART  ---->  OK\n\n", PC_UART);


	/********** AT+CIPSERVER=1,80 **********/
	UART_send("AT+CIPSERVER=1,80\r\n", WiFi_UART);
 800074a:	490e      	ldr	r1, [pc, #56]	; (8000784 <ESP_Init+0x1ec>)
 800074c:	4824      	ldr	r0, [pc, #144]	; (80007e0 <ESP_Init+0x248>)
 800074e:	f000 fe49 	bl	80013e4 <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 8000752:	bf00      	nop
 8000754:	490b      	ldr	r1, [pc, #44]	; (8000784 <ESP_Init+0x1ec>)
 8000756:	480d      	ldr	r0, [pc, #52]	; (800078c <ESP_Init+0x1f4>)
 8000758:	f000 feda 	bl	8001510 <UART_waitFor>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d0f8      	beq.n	8000754 <ESP_Init+0x1bc>
	UART_send("CIPSERVER  ---->  OK\n\n", PC_UART);
 8000762:	490b      	ldr	r1, [pc, #44]	; (8000790 <ESP_Init+0x1f8>)
 8000764:	481f      	ldr	r0, [pc, #124]	; (80007e4 <ESP_Init+0x24c>)
 8000766:	f000 fe3d 	bl	80013e4 <UART_send>


	/********** FIN **********/
	UART_send("Conectado a la IP\n\n", PC_UART);
 800076a:	4909      	ldr	r1, [pc, #36]	; (8000790 <ESP_Init+0x1f8>)
 800076c:	481e      	ldr	r0, [pc, #120]	; (80007e8 <ESP_Init+0x250>)
 800076e:	f000 fe39 	bl	80013e4 <UART_send>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1); // CONNECTED
 8000772:	2201      	movs	r2, #1
 8000774:	2101      	movs	r1, #1
 8000776:	481d      	ldr	r0, [pc, #116]	; (80007ec <ESP_Init+0x254>)
 8000778:	f003 fd20 	bl	80041bc <HAL_GPIO_WritePin>
}
 800077c:	bf00      	nop
 800077e:	3768      	adds	r7, #104	; 0x68
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000d90 	.word	0x20000d90
 8000788:	0800768c 	.word	0x0800768c
 800078c:	08007694 	.word	0x08007694
 8000790:	20000d04 	.word	0x20000d04
 8000794:	0800769c 	.word	0x0800769c
 8000798:	080076ac 	.word	0x080076ac
 800079c:	080076b8 	.word	0x080076b8
 80007a0:	080076c8 	.word	0x080076c8
 80007a4:	080076cc 	.word	0x080076cc
 80007a8:	080076e0 	.word	0x080076e0
 80007ac:	080076f0 	.word	0x080076f0
 80007b0:	08007704 	.word	0x08007704
 80007b4:	0800772c 	.word	0x0800772c
 80007b8:	08007744 	.word	0x08007744
 80007bc:	08007758 	.word	0x08007758
 80007c0:	08007770 	.word	0x08007770
 80007c4:	0800777c 	.word	0x0800777c
 80007c8:	20000934 	.word	0x20000934
 80007cc:	0800778c 	.word	0x0800778c
 80007d0:	08007790 	.word	0x08007790
 80007d4:	0800779c 	.word	0x0800779c
 80007d8:	080077ac 	.word	0x080077ac
 80007dc:	080077c4 	.word	0x080077c4
 80007e0:	080077d8 	.word	0x080077d8
 80007e4:	080077ec 	.word	0x080077ec
 80007e8:	08007804 	.word	0x08007804
 80007ec:	40020800 	.word	0x40020800

080007f0 <ESP_messageHandler>:
	}
	return -1;
}


void ESP_messageHandler(void){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

	//__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);

	memset(textrc, 0, 100);
 80007f4:	2264      	movs	r2, #100	; 0x64
 80007f6:	2100      	movs	r1, #0
 80007f8:	48a9      	ldr	r0, [pc, #676]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80007fa:	f006 f8fb 	bl	80069f4 <memset>

	HAL_UART_Receive(&huart2, (uint8_t *)textrc, 100, 100); //(uint8_t *)
 80007fe:	2364      	movs	r3, #100	; 0x64
 8000800:	2264      	movs	r2, #100	; 0x64
 8000802:	49a7      	ldr	r1, [pc, #668]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000804:	48a7      	ldr	r0, [pc, #668]	; (8000aa4 <ESP_messageHandler+0x2b4>)
 8000806:	f005 f9a0 	bl	8005b4a <HAL_UART_Receive>

	HAL_UART_Transmit(&huart6, (uint8_t *)textrc, 100, HAL_MAX_DELAY);
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	2264      	movs	r2, #100	; 0x64
 8000810:	49a3      	ldr	r1, [pc, #652]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000812:	48a5      	ldr	r0, [pc, #660]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 8000814:	f005 f907 	bl	8005a26 <HAL_UART_Transmit>
	UART_send("\n", PC_UART);
 8000818:	49a3      	ldr	r1, [pc, #652]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 800081a:	48a4      	ldr	r0, [pc, #656]	; (8000aac <ESP_messageHandler+0x2bc>)
 800081c:	f000 fde2 	bl	80013e4 <UART_send>

	fragment[0] = textrc[25]; // Asignación de Fragmento
 8000820:	4b9f      	ldr	r3, [pc, #636]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000822:	7e5a      	ldrb	r2, [r3, #25]
 8000824:	4ba2      	ldr	r3, [pc, #648]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000826:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart6, (uint8_t *)fragment, 1, HAL_MAX_DELAY);
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	2201      	movs	r2, #1
 800082e:	49a0      	ldr	r1, [pc, #640]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000830:	489d      	ldr	r0, [pc, #628]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 8000832:	f005 f8f8 	bl	8005a26 <HAL_UART_Transmit>
	UART_send("\n", PC_UART);
 8000836:	499c      	ldr	r1, [pc, #624]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 8000838:	489c      	ldr	r0, [pc, #624]	; (8000aac <ESP_messageHandler+0x2bc>)
 800083a:	f000 fdd3 	bl	80013e4 <UART_send>


	// SEGURIDAD
	if (fragment[0] == 's'){
 800083e:	4b9c      	ldr	r3, [pc, #624]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b73      	cmp	r3, #115	; 0x73
 8000844:	d10b      	bne.n	800085e <ESP_messageHandler+0x6e>
		UART_send("SEGURIDAD \n", PC_UART);
 8000846:	4998      	ldr	r1, [pc, #608]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 8000848:	489a      	ldr	r0, [pc, #616]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 800084a:	f000 fdcb 	bl	80013e4 <UART_send>
		vSeg[0] = textrc[28]; // Alarma Interior
 800084e:	4b94      	ldr	r3, [pc, #592]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000850:	7f1a      	ldrb	r2, [r3, #28]
 8000852:	4b99      	ldr	r3, [pc, #612]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000854:	701a      	strb	r2, [r3, #0]
		vSeg[1] = textrc[31]; // Alarma Exterior
 8000856:	4b92      	ldr	r3, [pc, #584]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000858:	7fda      	ldrb	r2, [r3, #31]
 800085a:	4b97      	ldr	r3, [pc, #604]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 800085c:	705a      	strb	r2, [r3, #1]
	}

	// ILUMINACIÓN
	if (fragment[0] == 'i'){
 800085e:	4b94      	ldr	r3, [pc, #592]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b69      	cmp	r3, #105	; 0x69
 8000864:	f040 8234 	bne.w	8000cd0 <ESP_messageHandler+0x4e0>
		UART_send("ILUMINACION \n", PC_UART);
 8000868:	498f      	ldr	r1, [pc, #572]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 800086a:	4894      	ldr	r0, [pc, #592]	; (8000abc <ESP_messageHandler+0x2cc>)
 800086c:	f000 fdba 	bl	80013e4 <UART_send>
		vIlum[0] = textrc[28]; 	// Luz Sala
 8000870:	4b8b      	ldr	r3, [pc, #556]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000872:	7f1a      	ldrb	r2, [r3, #28]
 8000874:	4b92      	ldr	r3, [pc, #584]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000876:	701a      	strb	r2, [r3, #0]
		vIlum[1] = textrc[31]; 	// Luz Comedor
 8000878:	4b89      	ldr	r3, [pc, #548]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 800087a:	7fda      	ldrb	r2, [r3, #31]
 800087c:	4b90      	ldr	r3, [pc, #576]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800087e:	705a      	strb	r2, [r3, #1]
		vIlum[2] = textrc[34]; 	// Luz Ambiente
 8000880:	4b87      	ldr	r3, [pc, #540]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000882:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000886:	4b8e      	ldr	r3, [pc, #568]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000888:	709a      	strb	r2, [r3, #2]
		vIlum[3] = textrc[37]; 	// Luz Recibidor
 800088a:	4b85      	ldr	r3, [pc, #532]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 800088c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000890:	4b8b      	ldr	r3, [pc, #556]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000892:	70da      	strb	r2, [r3, #3]
		vIlum[4] = textrc[40]; 	// Luz Cocina
 8000894:	4b82      	ldr	r3, [pc, #520]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000896:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800089a:	4b89      	ldr	r3, [pc, #548]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800089c:	711a      	strb	r2, [r3, #4]
		vIlum[5] = textrc[43]; 	// Luz Fregadero
 800089e:	4b80      	ldr	r3, [pc, #512]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008a0:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80008a4:	4b86      	ldr	r3, [pc, #536]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008a6:	715a      	strb	r2, [r3, #5]
		vIlum[6] = textrc[46]; 	// Luz Baño
 80008a8:	4b7d      	ldr	r3, [pc, #500]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008aa:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80008ae:	4b84      	ldr	r3, [pc, #528]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008b0:	719a      	strb	r2, [r3, #6]
		vIlum[7] = textrc[49]; 	// Luz Espejo
 80008b2:	4b7b      	ldr	r3, [pc, #492]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008b4:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80008b8:	4b81      	ldr	r3, [pc, #516]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008ba:	71da      	strb	r2, [r3, #7]
		vIlum[8] = textrc[52]; 	// Luz Dormitorio
 80008bc:	4b78      	ldr	r3, [pc, #480]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008be:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80008c2:	4b7f      	ldr	r3, [pc, #508]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008c4:	721a      	strb	r2, [r3, #8]
		vIlum[9] = textrc[55]; 	// Luz Mesita Izq
 80008c6:	4b76      	ldr	r3, [pc, #472]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008c8:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80008cc:	4b7c      	ldr	r3, [pc, #496]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008ce:	725a      	strb	r2, [r3, #9]
		vIlum[10] = textrc[58]; // Luz Mesita Dch
 80008d0:	4b73      	ldr	r3, [pc, #460]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008d2:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80008d6:	4b7a      	ldr	r3, [pc, #488]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008d8:	729a      	strb	r2, [r3, #10]
		vIlum[11] = textrc[61]; // Luz Oficina
 80008da:	4b71      	ldr	r3, [pc, #452]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008dc:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80008e0:	4b77      	ldr	r3, [pc, #476]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008e2:	72da      	strb	r2, [r3, #11]
		vIlum[12] = textrc[64]; // Luz Gaming
 80008e4:	4b6e      	ldr	r3, [pc, #440]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008e6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80008ea:	4b75      	ldr	r3, [pc, #468]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008ec:	731a      	strb	r2, [r3, #12]
		vIlum[13] = textrc[67]; // Luz Rx100
 80008ee:	4b6c      	ldr	r3, [pc, #432]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008f0:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80008f4:	4b72      	ldr	r3, [pc, #456]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008f6:	735a      	strb	r2, [r3, #13]
		vIlum[14] = textrc[68]; // Luz Rx10
 80008f8:	4b69      	ldr	r3, [pc, #420]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008fa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80008fe:	4b70      	ldr	r3, [pc, #448]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000900:	739a      	strb	r2, [r3, #14]
		vIlum[15] = textrc[69]; // Luz Rx1
 8000902:	4b67      	ldr	r3, [pc, #412]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000904:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8000908:	4b6d      	ldr	r3, [pc, #436]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800090a:	73da      	strb	r2, [r3, #15]
		vIlum[16] = textrc[72]; // Luz Gx100
 800090c:	4b64      	ldr	r3, [pc, #400]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 800090e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8000912:	4b6b      	ldr	r3, [pc, #428]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000914:	741a      	strb	r2, [r3, #16]
		vIlum[17] = textrc[73]; // Luz Gx10
 8000916:	4b62      	ldr	r3, [pc, #392]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000918:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800091c:	4b68      	ldr	r3, [pc, #416]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800091e:	745a      	strb	r2, [r3, #17]
		vIlum[18] = textrc[74]; // Luz Gx1
 8000920:	4b5f      	ldr	r3, [pc, #380]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000922:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8000926:	4b66      	ldr	r3, [pc, #408]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000928:	749a      	strb	r2, [r3, #18]
		vIlum[19] = textrc[77]; // Luz Bx100
 800092a:	4b5d      	ldr	r3, [pc, #372]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 800092c:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8000930:	4b63      	ldr	r3, [pc, #396]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000932:	74da      	strb	r2, [r3, #19]
		vIlum[20] = textrc[78]; // Luz Bx10
 8000934:	4b5a      	ldr	r3, [pc, #360]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000936:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 800093a:	4b61      	ldr	r3, [pc, #388]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800093c:	751a      	strb	r2, [r3, #20]
		vIlum[21] = textrc[79]; // Luz Bx1
 800093e:	4b58      	ldr	r3, [pc, #352]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000940:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8000944:	4b5e      	ldr	r3, [pc, #376]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000946:	755a      	strb	r2, [r3, #21]
		vIlum[22] = textrc[82]; // Luz Garaje
 8000948:	4b55      	ldr	r3, [pc, #340]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 800094a:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 800094e:	4b5c      	ldr	r3, [pc, #368]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000950:	759a      	strb	r2, [r3, #22]
		vIlum[23] = textrc[85]; // Luz Jardín
 8000952:	4b53      	ldr	r3, [pc, #332]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000954:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8000958:	4b59      	ldr	r3, [pc, #356]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800095a:	75da      	strb	r2, [r3, #23]
		vIlum[24] = textrc[88]; // Luz Porche
 800095c:	4b50      	ldr	r3, [pc, #320]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 800095e:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8000962:	4b57      	ldr	r3, [pc, #348]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000964:	761a      	strb	r2, [r3, #24]
		vIlum[25] = textrc[91]; // Luz Tendedero
 8000966:	4b4e      	ldr	r3, [pc, #312]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000968:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 800096c:	4b54      	ldr	r3, [pc, #336]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800096e:	765a      	strb	r2, [r3, #25]
		vIlum[26] = textrc[94]; // Automático
 8000970:	4b4b      	ldr	r3, [pc, #300]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000972:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 8000976:	4b52      	ldr	r3, [pc, #328]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000978:	769a      	strb	r2, [r3, #26]


		if(vIlum[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, RESET);
 800097a:	4b51      	ldr	r3, [pc, #324]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b30      	cmp	r3, #48	; 0x30
 8000980:	d105      	bne.n	800098e <ESP_messageHandler+0x19e>
 8000982:	2200      	movs	r2, #0
 8000984:	2108      	movs	r1, #8
 8000986:	484f      	ldr	r0, [pc, #316]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 8000988:	f003 fc18 	bl	80041bc <HAL_GPIO_WritePin>
 800098c:	e008      	b.n	80009a0 <ESP_messageHandler+0x1b0>
		else if(vIlum[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, SET);
 800098e:	4b4c      	ldr	r3, [pc, #304]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b31      	cmp	r3, #49	; 0x31
 8000994:	d104      	bne.n	80009a0 <ESP_messageHandler+0x1b0>
 8000996:	2201      	movs	r2, #1
 8000998:	2108      	movs	r1, #8
 800099a:	484a      	ldr	r0, [pc, #296]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 800099c:	f003 fc0e 	bl	80041bc <HAL_GPIO_WritePin>

		if(vIlum[1] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET);
 80009a0:	4b47      	ldr	r3, [pc, #284]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80009a2:	785b      	ldrb	r3, [r3, #1]
 80009a4:	2b30      	cmp	r3, #48	; 0x30
 80009a6:	d105      	bne.n	80009b4 <ESP_messageHandler+0x1c4>
 80009a8:	2200      	movs	r2, #0
 80009aa:	2102      	movs	r1, #2
 80009ac:	4845      	ldr	r0, [pc, #276]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 80009ae:	f003 fc05 	bl	80041bc <HAL_GPIO_WritePin>
 80009b2:	e008      	b.n	80009c6 <ESP_messageHandler+0x1d6>
		else if(vIlum[1] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, SET);
 80009b4:	4b42      	ldr	r3, [pc, #264]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80009b6:	785b      	ldrb	r3, [r3, #1]
 80009b8:	2b31      	cmp	r3, #49	; 0x31
 80009ba:	d104      	bne.n	80009c6 <ESP_messageHandler+0x1d6>
 80009bc:	2201      	movs	r2, #1
 80009be:	2102      	movs	r1, #2
 80009c0:	4840      	ldr	r0, [pc, #256]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 80009c2:	f003 fbfb 	bl	80041bc <HAL_GPIO_WritePin>

		if(vIlum[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, RESET);
 80009c6:	4b3e      	ldr	r3, [pc, #248]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80009c8:	789b      	ldrb	r3, [r3, #2]
 80009ca:	2b30      	cmp	r3, #48	; 0x30
 80009cc:	d105      	bne.n	80009da <ESP_messageHandler+0x1ea>
 80009ce:	2200      	movs	r2, #0
 80009d0:	2120      	movs	r1, #32
 80009d2:	483c      	ldr	r0, [pc, #240]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 80009d4:	f003 fbf2 	bl	80041bc <HAL_GPIO_WritePin>
 80009d8:	e008      	b.n	80009ec <ESP_messageHandler+0x1fc>
		else if(vIlum[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, SET);
 80009da:	4b39      	ldr	r3, [pc, #228]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80009dc:	789b      	ldrb	r3, [r3, #2]
 80009de:	2b31      	cmp	r3, #49	; 0x31
 80009e0:	d104      	bne.n	80009ec <ESP_messageHandler+0x1fc>
 80009e2:	2201      	movs	r2, #1
 80009e4:	2120      	movs	r1, #32
 80009e6:	4837      	ldr	r0, [pc, #220]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 80009e8:	f003 fbe8 	bl	80041bc <HAL_GPIO_WritePin>

		if(vIlum[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET);
 80009ec:	4b34      	ldr	r3, [pc, #208]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80009ee:	78db      	ldrb	r3, [r3, #3]
 80009f0:	2b30      	cmp	r3, #48	; 0x30
 80009f2:	d105      	bne.n	8000a00 <ESP_messageHandler+0x210>
 80009f4:	2200      	movs	r2, #0
 80009f6:	2101      	movs	r1, #1
 80009f8:	4832      	ldr	r0, [pc, #200]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 80009fa:	f003 fbdf 	bl	80041bc <HAL_GPIO_WritePin>
 80009fe:	e008      	b.n	8000a12 <ESP_messageHandler+0x222>
		else if(vIlum[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 8000a00:	4b2f      	ldr	r3, [pc, #188]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a02:	78db      	ldrb	r3, [r3, #3]
 8000a04:	2b31      	cmp	r3, #49	; 0x31
 8000a06:	d104      	bne.n	8000a12 <ESP_messageHandler+0x222>
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	482d      	ldr	r0, [pc, #180]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 8000a0e:	f003 fbd5 	bl	80041bc <HAL_GPIO_WritePin>

		if(vIlum[4] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET);
 8000a12:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a14:	791b      	ldrb	r3, [r3, #4]
 8000a16:	2b30      	cmp	r3, #48	; 0x30
 8000a18:	d106      	bne.n	8000a28 <ESP_messageHandler+0x238>
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a20:	4829      	ldr	r0, [pc, #164]	; (8000ac8 <ESP_messageHandler+0x2d8>)
 8000a22:	f003 fbcb 	bl	80041bc <HAL_GPIO_WritePin>
 8000a26:	e009      	b.n	8000a3c <ESP_messageHandler+0x24c>
		else if(vIlum[4] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 8000a28:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a2a:	791b      	ldrb	r3, [r3, #4]
 8000a2c:	2b31      	cmp	r3, #49	; 0x31
 8000a2e:	d105      	bne.n	8000a3c <ESP_messageHandler+0x24c>
 8000a30:	2201      	movs	r2, #1
 8000a32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a36:	4824      	ldr	r0, [pc, #144]	; (8000ac8 <ESP_messageHandler+0x2d8>)
 8000a38:	f003 fbc0 	bl	80041bc <HAL_GPIO_WritePin>

		if(vIlum[5] == '0') HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET);
 8000a3c:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a3e:	795b      	ldrb	r3, [r3, #5]
 8000a40:	2b30      	cmp	r3, #48	; 0x30
 8000a42:	d106      	bne.n	8000a52 <ESP_messageHandler+0x262>
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a4a:	4820      	ldr	r0, [pc, #128]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000a4c:	f003 fbb6 	bl	80041bc <HAL_GPIO_WritePin>
 8000a50:	e009      	b.n	8000a66 <ESP_messageHandler+0x276>
		else if(vIlum[5] == '1')HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 8000a52:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a54:	795b      	ldrb	r3, [r3, #5]
 8000a56:	2b31      	cmp	r3, #49	; 0x31
 8000a58:	d105      	bne.n	8000a66 <ESP_messageHandler+0x276>
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a60:	481a      	ldr	r0, [pc, #104]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000a62:	f003 fbab 	bl	80041bc <HAL_GPIO_WritePin>

		if(vIlum[6] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, RESET);
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a68:	799b      	ldrb	r3, [r3, #6]
 8000a6a:	2b30      	cmp	r3, #48	; 0x30
 8000a6c:	d105      	bne.n	8000a7a <ESP_messageHandler+0x28a>
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2140      	movs	r1, #64	; 0x40
 8000a72:	4814      	ldr	r0, [pc, #80]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 8000a74:	f003 fba2 	bl	80041bc <HAL_GPIO_WritePin>
 8000a78:	e008      	b.n	8000a8c <ESP_messageHandler+0x29c>
		else if(vIlum[6] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, SET);
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a7c:	799b      	ldrb	r3, [r3, #6]
 8000a7e:	2b31      	cmp	r3, #49	; 0x31
 8000a80:	d104      	bne.n	8000a8c <ESP_messageHandler+0x29c>
 8000a82:	2201      	movs	r2, #1
 8000a84:	2140      	movs	r1, #64	; 0x40
 8000a86:	480f      	ldr	r0, [pc, #60]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 8000a88:	f003 fb98 	bl	80041bc <HAL_GPIO_WritePin>

		if(vIlum[7] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a8e:	79db      	ldrb	r3, [r3, #7]
 8000a90:	2b30      	cmp	r3, #48	; 0x30
 8000a92:	d11f      	bne.n	8000ad4 <ESP_messageHandler+0x2e4>
 8000a94:	2200      	movs	r2, #0
 8000a96:	2108      	movs	r1, #8
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <ESP_messageHandler+0x2e0>)
 8000a9a:	f003 fb8f 	bl	80041bc <HAL_GPIO_WritePin>
 8000a9e:	e022      	b.n	8000ae6 <ESP_messageHandler+0x2f6>
 8000aa0:	2000096c 	.word	0x2000096c
 8000aa4:	20000d90 	.word	0x20000d90
 8000aa8:	20000d04 	.word	0x20000d04
 8000aac:	08007880 	.word	0x08007880
 8000ab0:	20000964 	.word	0x20000964
 8000ab4:	08007884 	.word	0x08007884
 8000ab8:	200009dc 	.word	0x200009dc
 8000abc:	08007890 	.word	0x08007890
 8000ac0:	20000948 	.word	0x20000948
 8000ac4:	40020c00 	.word	0x40020c00
 8000ac8:	40020800 	.word	0x40020800
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40020400 	.word	0x40020400
		else if(vIlum[7] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8000ad4:	4b71      	ldr	r3, [pc, #452]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000ad6:	79db      	ldrb	r3, [r3, #7]
 8000ad8:	2b31      	cmp	r3, #49	; 0x31
 8000ada:	d104      	bne.n	8000ae6 <ESP_messageHandler+0x2f6>
 8000adc:	2201      	movs	r2, #1
 8000ade:	2108      	movs	r1, #8
 8000ae0:	486f      	ldr	r0, [pc, #444]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000ae2:	f003 fb6b 	bl	80041bc <HAL_GPIO_WritePin>

		if(vIlum[8] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, RESET);
 8000ae6:	4b6d      	ldr	r3, [pc, #436]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000ae8:	7a1b      	ldrb	r3, [r3, #8]
 8000aea:	2b30      	cmp	r3, #48	; 0x30
 8000aec:	d105      	bne.n	8000afa <ESP_messageHandler+0x30a>
 8000aee:	2200      	movs	r2, #0
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	486c      	ldr	r0, [pc, #432]	; (8000ca4 <ESP_messageHandler+0x4b4>)
 8000af4:	f003 fb62 	bl	80041bc <HAL_GPIO_WritePin>
 8000af8:	e008      	b.n	8000b0c <ESP_messageHandler+0x31c>
		else if(vIlum[8] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET);
 8000afa:	4b68      	ldr	r3, [pc, #416]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000afc:	7a1b      	ldrb	r3, [r3, #8]
 8000afe:	2b31      	cmp	r3, #49	; 0x31
 8000b00:	d104      	bne.n	8000b0c <ESP_messageHandler+0x31c>
 8000b02:	2201      	movs	r2, #1
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	4867      	ldr	r0, [pc, #412]	; (8000ca4 <ESP_messageHandler+0x4b4>)
 8000b08:	f003 fb58 	bl	80041bc <HAL_GPIO_WritePin>

		if(vIlum[9] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000b0c:	4b63      	ldr	r3, [pc, #396]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000b0e:	7a5b      	ldrb	r3, [r3, #9]
 8000b10:	2b30      	cmp	r3, #48	; 0x30
 8000b12:	d105      	bne.n	8000b20 <ESP_messageHandler+0x330>
 8000b14:	2200      	movs	r2, #0
 8000b16:	2110      	movs	r1, #16
 8000b18:	4861      	ldr	r0, [pc, #388]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000b1a:	f003 fb4f 	bl	80041bc <HAL_GPIO_WritePin>
 8000b1e:	e008      	b.n	8000b32 <ESP_messageHandler+0x342>
		else if(vIlum[9] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000b20:	4b5e      	ldr	r3, [pc, #376]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000b22:	7a5b      	ldrb	r3, [r3, #9]
 8000b24:	2b31      	cmp	r3, #49	; 0x31
 8000b26:	d104      	bne.n	8000b32 <ESP_messageHandler+0x342>
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2110      	movs	r1, #16
 8000b2c:	485c      	ldr	r0, [pc, #368]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000b2e:	f003 fb45 	bl	80041bc <HAL_GPIO_WritePin>

		if(vIlum[10] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000b32:	4b5a      	ldr	r3, [pc, #360]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000b34:	7a9b      	ldrb	r3, [r3, #10]
 8000b36:	2b30      	cmp	r3, #48	; 0x30
 8000b38:	d105      	bne.n	8000b46 <ESP_messageHandler+0x356>
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2140      	movs	r1, #64	; 0x40
 8000b3e:	4858      	ldr	r0, [pc, #352]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000b40:	f003 fb3c 	bl	80041bc <HAL_GPIO_WritePin>
 8000b44:	e008      	b.n	8000b58 <ESP_messageHandler+0x368>
		else if(vIlum[10] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8000b46:	4b55      	ldr	r3, [pc, #340]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000b48:	7a9b      	ldrb	r3, [r3, #10]
 8000b4a:	2b31      	cmp	r3, #49	; 0x31
 8000b4c:	d104      	bne.n	8000b58 <ESP_messageHandler+0x368>
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2140      	movs	r1, #64	; 0x40
 8000b52:	4853      	ldr	r0, [pc, #332]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000b54:	f003 fb32 	bl	80041bc <HAL_GPIO_WritePin>

		if(vIlum[11] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000b58:	4b50      	ldr	r3, [pc, #320]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000b5a:	7adb      	ldrb	r3, [r3, #11]
 8000b5c:	2b30      	cmp	r3, #48	; 0x30
 8000b5e:	d105      	bne.n	8000b6c <ESP_messageHandler+0x37c>
 8000b60:	2200      	movs	r2, #0
 8000b62:	2120      	movs	r1, #32
 8000b64:	484e      	ldr	r0, [pc, #312]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000b66:	f003 fb29 	bl	80041bc <HAL_GPIO_WritePin>
 8000b6a:	e008      	b.n	8000b7e <ESP_messageHandler+0x38e>
		else if(vIlum[11] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000b6c:	4b4b      	ldr	r3, [pc, #300]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000b6e:	7adb      	ldrb	r3, [r3, #11]
 8000b70:	2b31      	cmp	r3, #49	; 0x31
 8000b72:	d104      	bne.n	8000b7e <ESP_messageHandler+0x38e>
 8000b74:	2201      	movs	r2, #1
 8000b76:	2120      	movs	r1, #32
 8000b78:	4849      	ldr	r0, [pc, #292]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000b7a:	f003 fb1f 	bl	80041bc <HAL_GPIO_WritePin>

		if(vIlum[12] == '0'){
 8000b7e:	4b47      	ldr	r3, [pc, #284]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000b80:	7b1b      	ldrb	r3, [r3, #12]
 8000b82:	2b30      	cmp	r3, #48	; 0x30
 8000b84:	d10c      	bne.n	8000ba0 <ESP_messageHandler+0x3b0>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000b86:	4b48      	ldr	r3, [pc, #288]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000b8e:	4b46      	ldr	r3, [pc, #280]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2200      	movs	r2, #0
 8000b94:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000b96:	4b44      	ldr	r3, [pc, #272]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b9e:	e036      	b.n	8000c0e <ESP_messageHandler+0x41e>
		}
		else if(vIlum[12] == '1'){
 8000ba0:	4b3e      	ldr	r3, [pc, #248]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000ba2:	7b1b      	ldrb	r3, [r3, #12]
 8000ba4:	2b31      	cmp	r3, #49	; 0x31
 8000ba6:	d132      	bne.n	8000c0e <ESP_messageHandler+0x41e>

			//uint8_t r, g, b;

			r = rgb_value (vIlum[13],vIlum[14],vIlum[15]);
 8000ba8:	4b3c      	ldr	r3, [pc, #240]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000baa:	7b5b      	ldrb	r3, [r3, #13]
 8000bac:	4a3b      	ldr	r2, [pc, #236]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000bae:	7b91      	ldrb	r1, [r2, #14]
 8000bb0:	4a3a      	ldr	r2, [pc, #232]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000bb2:	7bd2      	ldrb	r2, [r2, #15]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 f9bb 	bl	8000f30 <rgb_value>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	4a3b      	ldr	r2, [pc, #236]	; (8000cac <ESP_messageHandler+0x4bc>)
 8000bbe:	6013      	str	r3, [r2, #0]
			g = rgb_value (vIlum[16],vIlum[17],vIlum[18]);
 8000bc0:	4b36      	ldr	r3, [pc, #216]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000bc2:	7c1b      	ldrb	r3, [r3, #16]
 8000bc4:	4a35      	ldr	r2, [pc, #212]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000bc6:	7c51      	ldrb	r1, [r2, #17]
 8000bc8:	4a34      	ldr	r2, [pc, #208]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000bca:	7c92      	ldrb	r2, [r2, #18]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f9af 	bl	8000f30 <rgb_value>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4a36      	ldr	r2, [pc, #216]	; (8000cb0 <ESP_messageHandler+0x4c0>)
 8000bd6:	6013      	str	r3, [r2, #0]
			b = rgb_value (vIlum[19],vIlum[20],vIlum[21]);
 8000bd8:	4b30      	ldr	r3, [pc, #192]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000bda:	7cdb      	ldrb	r3, [r3, #19]
 8000bdc:	4a2f      	ldr	r2, [pc, #188]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000bde:	7d11      	ldrb	r1, [r2, #20]
 8000be0:	4a2e      	ldr	r2, [pc, #184]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000be2:	7d52      	ldrb	r2, [r2, #21]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 f9a3 	bl	8000f30 <rgb_value>
 8000bea:	4603      	mov	r3, r0
 8000bec:	4a31      	ldr	r2, [pc, #196]	; (8000cb4 <ESP_messageHandler+0x4c4>)
 8000bee:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, g); // PA8
 8000bf0:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <ESP_messageHandler+0x4c0>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b2c      	ldr	r3, [pc, #176]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, r); // PA9
 8000bfa:	4b2c      	ldr	r3, [pc, #176]	; (8000cac <ESP_messageHandler+0x4bc>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b); // PA10
 8000c04:	4b2b      	ldr	r3, [pc, #172]	; (8000cb4 <ESP_messageHandler+0x4c4>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		if(vIlum[22] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET);
 8000c0e:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c10:	7d9b      	ldrb	r3, [r3, #22]
 8000c12:	2b30      	cmp	r3, #48	; 0x30
 8000c14:	d106      	bne.n	8000c24 <ESP_messageHandler+0x434>
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c1c:	4826      	ldr	r0, [pc, #152]	; (8000cb8 <ESP_messageHandler+0x4c8>)
 8000c1e:	f003 facd 	bl	80041bc <HAL_GPIO_WritePin>
 8000c22:	e009      	b.n	8000c38 <ESP_messageHandler+0x448>
		else if(vIlum[22] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c26:	7d9b      	ldrb	r3, [r3, #22]
 8000c28:	2b31      	cmp	r3, #49	; 0x31
 8000c2a:	d105      	bne.n	8000c38 <ESP_messageHandler+0x448>
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c32:	4821      	ldr	r0, [pc, #132]	; (8000cb8 <ESP_messageHandler+0x4c8>)
 8000c34:	f003 fac2 	bl	80041bc <HAL_GPIO_WritePin>

		if(vIlum[23] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET);
 8000c38:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c3a:	7ddb      	ldrb	r3, [r3, #23]
 8000c3c:	2b30      	cmp	r3, #48	; 0x30
 8000c3e:	d105      	bne.n	8000c4c <ESP_messageHandler+0x45c>
 8000c40:	2200      	movs	r2, #0
 8000c42:	2104      	movs	r1, #4
 8000c44:	4817      	ldr	r0, [pc, #92]	; (8000ca4 <ESP_messageHandler+0x4b4>)
 8000c46:	f003 fab9 	bl	80041bc <HAL_GPIO_WritePin>
 8000c4a:	e008      	b.n	8000c5e <ESP_messageHandler+0x46e>
		else if(vIlum[23] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c4e:	7ddb      	ldrb	r3, [r3, #23]
 8000c50:	2b31      	cmp	r3, #49	; 0x31
 8000c52:	d104      	bne.n	8000c5e <ESP_messageHandler+0x46e>
 8000c54:	2201      	movs	r2, #1
 8000c56:	2104      	movs	r1, #4
 8000c58:	4812      	ldr	r0, [pc, #72]	; (8000ca4 <ESP_messageHandler+0x4b4>)
 8000c5a:	f003 faaf 	bl	80041bc <HAL_GPIO_WritePin>

		if(vIlum[24] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c60:	7e1b      	ldrb	r3, [r3, #24]
 8000c62:	2b30      	cmp	r3, #48	; 0x30
 8000c64:	d105      	bne.n	8000c72 <ESP_messageHandler+0x482>
 8000c66:	2200      	movs	r2, #0
 8000c68:	2110      	movs	r1, #16
 8000c6a:	480e      	ldr	r0, [pc, #56]	; (8000ca4 <ESP_messageHandler+0x4b4>)
 8000c6c:	f003 faa6 	bl	80041bc <HAL_GPIO_WritePin>
 8000c70:	e008      	b.n	8000c84 <ESP_messageHandler+0x494>
		else if(vIlum[24] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c74:	7e1b      	ldrb	r3, [r3, #24]
 8000c76:	2b31      	cmp	r3, #49	; 0x31
 8000c78:	d104      	bne.n	8000c84 <ESP_messageHandler+0x494>
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2110      	movs	r1, #16
 8000c7e:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <ESP_messageHandler+0x4b4>)
 8000c80:	f003 fa9c 	bl	80041bc <HAL_GPIO_WritePin>

		if(vIlum[25] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c86:	7e5b      	ldrb	r3, [r3, #25]
 8000c88:	2b30      	cmp	r3, #48	; 0x30
 8000c8a:	d117      	bne.n	8000cbc <ESP_messageHandler+0x4cc>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c92:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <ESP_messageHandler+0x4c8>)
 8000c94:	f003 fa92 	bl	80041bc <HAL_GPIO_WritePin>
 8000c98:	e01a      	b.n	8000cd0 <ESP_messageHandler+0x4e0>
 8000c9a:	bf00      	nop
 8000c9c:	20000948 	.word	0x20000948
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	40020c00 	.word	0x40020c00
 8000ca8:	20000c74 	.word	0x20000c74
 8000cac:	200008e8 	.word	0x200008e8
 8000cb0:	200008dc 	.word	0x200008dc
 8000cb4:	200008d8 	.word	0x200008d8
 8000cb8:	40020800 	.word	0x40020800
		else if(vIlum[25] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8000cbc:	4b67      	ldr	r3, [pc, #412]	; (8000e5c <ESP_messageHandler+0x66c>)
 8000cbe:	7e5b      	ldrb	r3, [r3, #25]
 8000cc0:	2b31      	cmp	r3, #49	; 0x31
 8000cc2:	d105      	bne.n	8000cd0 <ESP_messageHandler+0x4e0>
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cca:	4865      	ldr	r0, [pc, #404]	; (8000e60 <ESP_messageHandler+0x670>)
 8000ccc:	f003 fa76 	bl	80041bc <HAL_GPIO_WritePin>
	}

	// PUERTAS Y VENTANAS
	if (fragment[0] == 'p'){
 8000cd0:	4b64      	ldr	r3, [pc, #400]	; (8000e64 <ESP_messageHandler+0x674>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b70      	cmp	r3, #112	; 0x70
 8000cd6:	d107      	bne.n	8000ce8 <ESP_messageHandler+0x4f8>
		UART_send("PUERTAS Y VENTANAS (PUERTA PARCELA)\n", PC_UART);
 8000cd8:	4963      	ldr	r1, [pc, #396]	; (8000e68 <ESP_messageHandler+0x678>)
 8000cda:	4864      	ldr	r0, [pc, #400]	; (8000e6c <ESP_messageHandler+0x67c>)
 8000cdc:	f000 fb82 	bl	80013e4 <UART_send>
		vVent[1] = textrc[28]; // Puerta Parcela
 8000ce0:	4b63      	ldr	r3, [pc, #396]	; (8000e70 <ESP_messageHandler+0x680>)
 8000ce2:	7f1a      	ldrb	r2, [r3, #28]
 8000ce4:	4b63      	ldr	r3, [pc, #396]	; (8000e74 <ESP_messageHandler+0x684>)
 8000ce6:	705a      	strb	r2, [r3, #1]
	}
	if (fragment[0] == 'g'){
 8000ce8:	4b5e      	ldr	r3, [pc, #376]	; (8000e64 <ESP_messageHandler+0x674>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b67      	cmp	r3, #103	; 0x67
 8000cee:	d107      	bne.n	8000d00 <ESP_messageHandler+0x510>
		UART_send("PUERTAS Y VENTANAS (PUERTA GARAJE)\n", PC_UART);
 8000cf0:	495d      	ldr	r1, [pc, #372]	; (8000e68 <ESP_messageHandler+0x678>)
 8000cf2:	4861      	ldr	r0, [pc, #388]	; (8000e78 <ESP_messageHandler+0x688>)
 8000cf4:	f000 fb76 	bl	80013e4 <UART_send>
		vVent[0] = textrc[31]; // Puerta Garaje
 8000cf8:	4b5d      	ldr	r3, [pc, #372]	; (8000e70 <ESP_messageHandler+0x680>)
 8000cfa:	7fda      	ldrb	r2, [r3, #31]
 8000cfc:	4b5d      	ldr	r3, [pc, #372]	; (8000e74 <ESP_messageHandler+0x684>)
 8000cfe:	701a      	strb	r2, [r3, #0]
	}
	if (fragment[0] == 'l'){
 8000d00:	4b58      	ldr	r3, [pc, #352]	; (8000e64 <ESP_messageHandler+0x674>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b6c      	cmp	r3, #108	; 0x6c
 8000d06:	d108      	bne.n	8000d1a <ESP_messageHandler+0x52a>
		UART_send("PUERTAS Y VENTANAS (VENTANA SALÓN)\n", PC_UART);
 8000d08:	4957      	ldr	r1, [pc, #348]	; (8000e68 <ESP_messageHandler+0x678>)
 8000d0a:	485c      	ldr	r0, [pc, #368]	; (8000e7c <ESP_messageHandler+0x68c>)
 8000d0c:	f000 fb6a 	bl	80013e4 <UART_send>
		vVent[2] = textrc[34]; // Ventana Salón
 8000d10:	4b57      	ldr	r3, [pc, #348]	; (8000e70 <ESP_messageHandler+0x680>)
 8000d12:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000d16:	4b57      	ldr	r3, [pc, #348]	; (8000e74 <ESP_messageHandler+0x684>)
 8000d18:	709a      	strb	r2, [r3, #2]
	}
	if (fragment[0] == 'd'){
 8000d1a:	4b52      	ldr	r3, [pc, #328]	; (8000e64 <ESP_messageHandler+0x674>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b64      	cmp	r3, #100	; 0x64
 8000d20:	d108      	bne.n	8000d34 <ESP_messageHandler+0x544>
		UART_send("PUERTAS Y VENTANAS (VENTANA DORMITORIO)\n", PC_UART);
 8000d22:	4951      	ldr	r1, [pc, #324]	; (8000e68 <ESP_messageHandler+0x678>)
 8000d24:	4856      	ldr	r0, [pc, #344]	; (8000e80 <ESP_messageHandler+0x690>)
 8000d26:	f000 fb5d 	bl	80013e4 <UART_send>
		vVent[3] = textrc[37]; // Ventana Dormitorio
 8000d2a:	4b51      	ldr	r3, [pc, #324]	; (8000e70 <ESP_messageHandler+0x680>)
 8000d2c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000d30:	4b50      	ldr	r3, [pc, #320]	; (8000e74 <ESP_messageHandler+0x684>)
 8000d32:	70da      	strb	r2, [r3, #3]
	}
	if (fragment[0] == 'o'){
 8000d34:	4b4b      	ldr	r3, [pc, #300]	; (8000e64 <ESP_messageHandler+0x674>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b6f      	cmp	r3, #111	; 0x6f
 8000d3a:	d108      	bne.n	8000d4e <ESP_messageHandler+0x55e>
		UART_send("PUERTAS Y VENTANAS (VENTANA OFICINA)\n", PC_UART);
 8000d3c:	494a      	ldr	r1, [pc, #296]	; (8000e68 <ESP_messageHandler+0x678>)
 8000d3e:	4851      	ldr	r0, [pc, #324]	; (8000e84 <ESP_messageHandler+0x694>)
 8000d40:	f000 fb50 	bl	80013e4 <UART_send>
		vVent[4] = textrc[40]; // Ventana Oficina
 8000d44:	4b4a      	ldr	r3, [pc, #296]	; (8000e70 <ESP_messageHandler+0x680>)
 8000d46:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000d4a:	4b4a      	ldr	r3, [pc, #296]	; (8000e74 <ESP_messageHandler+0x684>)
 8000d4c:	711a      	strb	r2, [r3, #4]
	}

	// TIEMPO
	if (fragment[0] == 't'){
 8000d4e:	4b45      	ldr	r3, [pc, #276]	; (8000e64 <ESP_messageHandler+0x674>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b74      	cmp	r3, #116	; 0x74
 8000d54:	d115      	bne.n	8000d82 <ESP_messageHandler+0x592>
		UART_send("TIEMPO\n", PC_UART);
 8000d56:	4944      	ldr	r1, [pc, #272]	; (8000e68 <ESP_messageHandler+0x678>)
 8000d58:	484b      	ldr	r0, [pc, #300]	; (8000e88 <ESP_messageHandler+0x698>)
 8000d5a:	f000 fb43 	bl	80013e4 <UART_send>
		vTemp[0] = textrc[28]; 	// Vent. Salón
 8000d5e:	4b44      	ldr	r3, [pc, #272]	; (8000e70 <ESP_messageHandler+0x680>)
 8000d60:	7f1a      	ldrb	r2, [r3, #28]
 8000d62:	4b4a      	ldr	r3, [pc, #296]	; (8000e8c <ESP_messageHandler+0x69c>)
 8000d64:	701a      	strb	r2, [r3, #0]
		vTemp[1] = textrc[31]; 	// Vent. Dormitorio
 8000d66:	4b42      	ldr	r3, [pc, #264]	; (8000e70 <ESP_messageHandler+0x680>)
 8000d68:	7fda      	ldrb	r2, [r3, #31]
 8000d6a:	4b48      	ldr	r3, [pc, #288]	; (8000e8c <ESP_messageHandler+0x69c>)
 8000d6c:	705a      	strb	r2, [r3, #1]
		vTemp[2] = textrc[34]; 	// Vent. Oficina
 8000d6e:	4b40      	ldr	r3, [pc, #256]	; (8000e70 <ESP_messageHandler+0x680>)
 8000d70:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000d74:	4b45      	ldr	r3, [pc, #276]	; (8000e8c <ESP_messageHandler+0x69c>)
 8000d76:	709a      	strb	r2, [r3, #2]
		vTemp[4] = textrc[37]; 	// Calefacción
 8000d78:	4b3d      	ldr	r3, [pc, #244]	; (8000e70 <ESP_messageHandler+0x680>)
 8000d7a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000d7e:	4b43      	ldr	r3, [pc, #268]	; (8000e8c <ESP_messageHandler+0x69c>)
 8000d80:	711a      	strb	r2, [r3, #4]
    }

	// EXTERIOR
	if (fragment[0] == 'e'){
 8000d82:	4b38      	ldr	r3, [pc, #224]	; (8000e64 <ESP_messageHandler+0x674>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b65      	cmp	r3, #101	; 0x65
 8000d88:	d14c      	bne.n	8000e24 <ESP_messageHandler+0x634>
		UART_send("EXTERIOR\n", PC_UART);
 8000d8a:	4937      	ldr	r1, [pc, #220]	; (8000e68 <ESP_messageHandler+0x678>)
 8000d8c:	4840      	ldr	r0, [pc, #256]	; (8000e90 <ESP_messageHandler+0x6a0>)
 8000d8e:	f000 fb29 	bl	80013e4 <UART_send>
		//vExt[0] = textrc[28]; 	// Toldo Tendedero
		vExt[1] = textrc[31]; 	// Luz Tendedero
 8000d92:	4b37      	ldr	r3, [pc, #220]	; (8000e70 <ESP_messageHandler+0x680>)
 8000d94:	7fda      	ldrb	r2, [r3, #31]
 8000d96:	4b3f      	ldr	r3, [pc, #252]	; (8000e94 <ESP_messageHandler+0x6a4>)
 8000d98:	705a      	strb	r2, [r3, #1]
		vExt[2] = textrc[34]; 	// Luz Porche
 8000d9a:	4b35      	ldr	r3, [pc, #212]	; (8000e70 <ESP_messageHandler+0x680>)
 8000d9c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000da0:	4b3c      	ldr	r3, [pc, #240]	; (8000e94 <ESP_messageHandler+0x6a4>)
 8000da2:	709a      	strb	r2, [r3, #2]
		vExt[3] = textrc[37]; 	// Luz Jardín
 8000da4:	4b32      	ldr	r3, [pc, #200]	; (8000e70 <ESP_messageHandler+0x680>)
 8000da6:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000daa:	4b3a      	ldr	r3, [pc, #232]	; (8000e94 <ESP_messageHandler+0x6a4>)
 8000dac:	70da      	strb	r2, [r3, #3]
		//vExt[4] = textrc[40]; 	// Puerta Parcela

		if(vExt[1] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET); // Luz Tendedero
 8000dae:	4b39      	ldr	r3, [pc, #228]	; (8000e94 <ESP_messageHandler+0x6a4>)
 8000db0:	785b      	ldrb	r3, [r3, #1]
 8000db2:	2b30      	cmp	r3, #48	; 0x30
 8000db4:	d106      	bne.n	8000dc4 <ESP_messageHandler+0x5d4>
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dbc:	4828      	ldr	r0, [pc, #160]	; (8000e60 <ESP_messageHandler+0x670>)
 8000dbe:	f003 f9fd 	bl	80041bc <HAL_GPIO_WritePin>
 8000dc2:	e009      	b.n	8000dd8 <ESP_messageHandler+0x5e8>
		else if(vExt[1] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8000dc4:	4b33      	ldr	r3, [pc, #204]	; (8000e94 <ESP_messageHandler+0x6a4>)
 8000dc6:	785b      	ldrb	r3, [r3, #1]
 8000dc8:	2b31      	cmp	r3, #49	; 0x31
 8000dca:	d105      	bne.n	8000dd8 <ESP_messageHandler+0x5e8>
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dd2:	4823      	ldr	r0, [pc, #140]	; (8000e60 <ESP_messageHandler+0x670>)
 8000dd4:	f003 f9f2 	bl	80041bc <HAL_GPIO_WritePin>

		if(vExt[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET); // Luz Porche
 8000dd8:	4b2e      	ldr	r3, [pc, #184]	; (8000e94 <ESP_messageHandler+0x6a4>)
 8000dda:	789b      	ldrb	r3, [r3, #2]
 8000ddc:	2b30      	cmp	r3, #48	; 0x30
 8000dde:	d105      	bne.n	8000dec <ESP_messageHandler+0x5fc>
 8000de0:	2200      	movs	r2, #0
 8000de2:	2110      	movs	r1, #16
 8000de4:	482c      	ldr	r0, [pc, #176]	; (8000e98 <ESP_messageHandler+0x6a8>)
 8000de6:	f003 f9e9 	bl	80041bc <HAL_GPIO_WritePin>
 8000dea:	e008      	b.n	8000dfe <ESP_messageHandler+0x60e>
		else if(vExt[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 8000dec:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <ESP_messageHandler+0x6a4>)
 8000dee:	789b      	ldrb	r3, [r3, #2]
 8000df0:	2b31      	cmp	r3, #49	; 0x31
 8000df2:	d104      	bne.n	8000dfe <ESP_messageHandler+0x60e>
 8000df4:	2201      	movs	r2, #1
 8000df6:	2110      	movs	r1, #16
 8000df8:	4827      	ldr	r0, [pc, #156]	; (8000e98 <ESP_messageHandler+0x6a8>)
 8000dfa:	f003 f9df 	bl	80041bc <HAL_GPIO_WritePin>

		if(vExt[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET); // Luz Jardín
 8000dfe:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <ESP_messageHandler+0x6a4>)
 8000e00:	78db      	ldrb	r3, [r3, #3]
 8000e02:	2b30      	cmp	r3, #48	; 0x30
 8000e04:	d105      	bne.n	8000e12 <ESP_messageHandler+0x622>
 8000e06:	2200      	movs	r2, #0
 8000e08:	2104      	movs	r1, #4
 8000e0a:	4823      	ldr	r0, [pc, #140]	; (8000e98 <ESP_messageHandler+0x6a8>)
 8000e0c:	f003 f9d6 	bl	80041bc <HAL_GPIO_WritePin>
 8000e10:	e008      	b.n	8000e24 <ESP_messageHandler+0x634>
		else if(vExt[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <ESP_messageHandler+0x6a4>)
 8000e14:	78db      	ldrb	r3, [r3, #3]
 8000e16:	2b31      	cmp	r3, #49	; 0x31
 8000e18:	d104      	bne.n	8000e24 <ESP_messageHandler+0x634>
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2104      	movs	r1, #4
 8000e1e:	481e      	ldr	r0, [pc, #120]	; (8000e98 <ESP_messageHandler+0x6a8>)
 8000e20:	f003 f9cc 	bl	80041bc <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'P'){
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <ESP_messageHandler+0x674>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b50      	cmp	r3, #80	; 0x50
 8000e2a:	d108      	bne.n	8000e3e <ESP_messageHandler+0x64e>
			UART_send("EXTERIOR\n", PC_UART);
 8000e2c:	490e      	ldr	r1, [pc, #56]	; (8000e68 <ESP_messageHandler+0x678>)
 8000e2e:	4818      	ldr	r0, [pc, #96]	; (8000e90 <ESP_messageHandler+0x6a0>)
 8000e30:	f000 fad8 	bl	80013e4 <UART_send>
			//vExt[0] = textrc[28]; 	// Toldo Tendedero
			//vExt[1] = textrc[31]; 	// Luz Tendedero
			//vExt[2] = textrc[34]; 	// Luz Porche
			//vExt[3] = textrc[37]; 	// Luz Jardín
			vExt[4] = textrc[40]; 	// Puerta Parcela
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <ESP_messageHandler+0x680>)
 8000e36:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <ESP_messageHandler+0x6a4>)
 8000e3c:	711a      	strb	r2, [r3, #4]
	}

	if (fragment[0] == 'R'){
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <ESP_messageHandler+0x674>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b52      	cmp	r3, #82	; 0x52
 8000e44:	d107      	bne.n	8000e56 <ESP_messageHandler+0x666>
			UART_send("EXTERIOR\n", PC_UART);
 8000e46:	4908      	ldr	r1, [pc, #32]	; (8000e68 <ESP_messageHandler+0x678>)
 8000e48:	4811      	ldr	r0, [pc, #68]	; (8000e90 <ESP_messageHandler+0x6a0>)
 8000e4a:	f000 facb 	bl	80013e4 <UART_send>
			vExt[0] = textrc[28]; 	// Toldo Tendedero
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <ESP_messageHandler+0x680>)
 8000e50:	7f1a      	ldrb	r2, [r3, #28]
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <ESP_messageHandler+0x6a4>)
 8000e54:	701a      	strb	r2, [r3, #0]
	// AJUSTES
	if (fragment[0] == 'a'){
	}

	//__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000948 	.word	0x20000948
 8000e60:	40020800 	.word	0x40020800
 8000e64:	20000964 	.word	0x20000964
 8000e68:	20000d04 	.word	0x20000d04
 8000e6c:	080078a0 	.word	0x080078a0
 8000e70:	2000096c 	.word	0x2000096c
 8000e74:	200008e0 	.word	0x200008e0
 8000e78:	080078c8 	.word	0x080078c8
 8000e7c:	080078ec 	.word	0x080078ec
 8000e80:	08007914 	.word	0x08007914
 8000e84:	08007940 	.word	0x08007940
 8000e88:	08007968 	.word	0x08007968
 8000e8c:	20000930 	.word	0x20000930
 8000e90:	08007970 	.word	0x08007970
 8000e94:	200008ec 	.word	0x200008ec
 8000e98:	40020c00 	.word	0x40020c00

08000e9c <ldr>:


#include <LDR.h>
#include "ESP8266_HAL.h"

void ldr(uint16_t valor){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	80fb      	strh	r3, [r7, #6]


	if (vIlum[26] == '1'){
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <ldr+0x88>)
 8000ea8:	7e9b      	ldrb	r3, [r3, #26]
 8000eaa:	2b31      	cmp	r3, #49	; 0x31
 8000eac:	d135      	bne.n	8000f1a <ldr+0x7e>

		if(valor<90) {
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	2b59      	cmp	r3, #89	; 0x59
 8000eb2:	d819      	bhi.n	8000ee8 <ldr+0x4c>
			vIlum[23] = 'x';	// Jardín
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <ldr+0x88>)
 8000eb6:	2278      	movs	r2, #120	; 0x78
 8000eb8:	75da      	strb	r2, [r3, #23]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	481a      	ldr	r0, [pc, #104]	; (8000f28 <ldr+0x8c>)
 8000ec0:	f003 f97c 	bl	80041bc <HAL_GPIO_WritePin>
			vIlum[24] = 'x';	// Porche
 8000ec4:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <ldr+0x88>)
 8000ec6:	2278      	movs	r2, #120	; 0x78
 8000ec8:	761a      	strb	r2, [r3, #24]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	2110      	movs	r1, #16
 8000ece:	4816      	ldr	r0, [pc, #88]	; (8000f28 <ldr+0x8c>)
 8000ed0:	f003 f974 	bl	80041bc <HAL_GPIO_WritePin>
			vIlum[25] = 'x';	// Tendedero
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <ldr+0x88>)
 8000ed6:	2278      	movs	r2, #120	; 0x78
 8000ed8:	765a      	strb	r2, [r3, #25]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee0:	4812      	ldr	r0, [pc, #72]	; (8000f2c <ldr+0x90>)
 8000ee2:	f003 f96b 	bl	80041bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
			vIlum[25] = 'x';	// Tendedero
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
		}
	}
}
 8000ee6:	e018      	b.n	8000f1a <ldr+0x7e>
			vIlum[23] = 'x';	// Jardín
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <ldr+0x88>)
 8000eea:	2278      	movs	r2, #120	; 0x78
 8000eec:	75da      	strb	r2, [r3, #23]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2104      	movs	r1, #4
 8000ef2:	480d      	ldr	r0, [pc, #52]	; (8000f28 <ldr+0x8c>)
 8000ef4:	f003 f962 	bl	80041bc <HAL_GPIO_WritePin>
			vIlum[24] = 'x';	// Porche
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <ldr+0x88>)
 8000efa:	2278      	movs	r2, #120	; 0x78
 8000efc:	761a      	strb	r2, [r3, #24]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2110      	movs	r1, #16
 8000f02:	4809      	ldr	r0, [pc, #36]	; (8000f28 <ldr+0x8c>)
 8000f04:	f003 f95a 	bl	80041bc <HAL_GPIO_WritePin>
			vIlum[25] = 'x';	// Tendedero
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <ldr+0x88>)
 8000f0a:	2278      	movs	r2, #120	; 0x78
 8000f0c:	765a      	strb	r2, [r3, #25]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <ldr+0x90>)
 8000f16:	f003 f951 	bl	80041bc <HAL_GPIO_WritePin>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000948 	.word	0x20000948
 8000f28:	40020c00 	.word	0x40020c00
 8000f2c:	40020800 	.word	0x40020800

08000f30 <rgb_value>:
 */


#include <RGB.h>

int rgb_value(char i, char j, char k){
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	71bb      	strb	r3, [r7, #6]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	717b      	strb	r3, [r7, #5]

	int a, b, c;

	if(i == '0') a = 0;
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2b30      	cmp	r3, #48	; 0x30
 8000f46:	d102      	bne.n	8000f4e <rgb_value+0x1e>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	e00a      	b.n	8000f64 <rgb_value+0x34>
	else if(i == '1') a = 100;
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2b31      	cmp	r3, #49	; 0x31
 8000f52:	d102      	bne.n	8000f5a <rgb_value+0x2a>
 8000f54:	2364      	movs	r3, #100	; 0x64
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	e004      	b.n	8000f64 <rgb_value+0x34>
	else if(i == '2') a = 200;
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b32      	cmp	r3, #50	; 0x32
 8000f5e:	d101      	bne.n	8000f64 <rgb_value+0x34>
 8000f60:	23c8      	movs	r3, #200	; 0xc8
 8000f62:	617b      	str	r3, [r7, #20]

	if(j == '0') b = 0;
 8000f64:	79bb      	ldrb	r3, [r7, #6]
 8000f66:	2b30      	cmp	r3, #48	; 0x30
 8000f68:	d102      	bne.n	8000f70 <rgb_value+0x40>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	e034      	b.n	8000fda <rgb_value+0xaa>
	else if(j == '1') b = 10;
 8000f70:	79bb      	ldrb	r3, [r7, #6]
 8000f72:	2b31      	cmp	r3, #49	; 0x31
 8000f74:	d102      	bne.n	8000f7c <rgb_value+0x4c>
 8000f76:	230a      	movs	r3, #10
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	e02e      	b.n	8000fda <rgb_value+0xaa>
	else if(j == '2') b = 20;
 8000f7c:	79bb      	ldrb	r3, [r7, #6]
 8000f7e:	2b32      	cmp	r3, #50	; 0x32
 8000f80:	d102      	bne.n	8000f88 <rgb_value+0x58>
 8000f82:	2314      	movs	r3, #20
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	e028      	b.n	8000fda <rgb_value+0xaa>
	else if(j == '3') b = 30;
 8000f88:	79bb      	ldrb	r3, [r7, #6]
 8000f8a:	2b33      	cmp	r3, #51	; 0x33
 8000f8c:	d102      	bne.n	8000f94 <rgb_value+0x64>
 8000f8e:	231e      	movs	r3, #30
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	e022      	b.n	8000fda <rgb_value+0xaa>
	else if(j == '4') b = 40;
 8000f94:	79bb      	ldrb	r3, [r7, #6]
 8000f96:	2b34      	cmp	r3, #52	; 0x34
 8000f98:	d102      	bne.n	8000fa0 <rgb_value+0x70>
 8000f9a:	2328      	movs	r3, #40	; 0x28
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	e01c      	b.n	8000fda <rgb_value+0xaa>
	else if(j == '5') b = 50;
 8000fa0:	79bb      	ldrb	r3, [r7, #6]
 8000fa2:	2b35      	cmp	r3, #53	; 0x35
 8000fa4:	d102      	bne.n	8000fac <rgb_value+0x7c>
 8000fa6:	2332      	movs	r3, #50	; 0x32
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	e016      	b.n	8000fda <rgb_value+0xaa>
	else if(j == '6') b = 60;
 8000fac:	79bb      	ldrb	r3, [r7, #6]
 8000fae:	2b36      	cmp	r3, #54	; 0x36
 8000fb0:	d102      	bne.n	8000fb8 <rgb_value+0x88>
 8000fb2:	233c      	movs	r3, #60	; 0x3c
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	e010      	b.n	8000fda <rgb_value+0xaa>
	else if(j == '7') b = 70;
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	2b37      	cmp	r3, #55	; 0x37
 8000fbc:	d102      	bne.n	8000fc4 <rgb_value+0x94>
 8000fbe:	2346      	movs	r3, #70	; 0x46
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	e00a      	b.n	8000fda <rgb_value+0xaa>
	else if(j == '8') b = 80;
 8000fc4:	79bb      	ldrb	r3, [r7, #6]
 8000fc6:	2b38      	cmp	r3, #56	; 0x38
 8000fc8:	d102      	bne.n	8000fd0 <rgb_value+0xa0>
 8000fca:	2350      	movs	r3, #80	; 0x50
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	e004      	b.n	8000fda <rgb_value+0xaa>
	else if(j == '9') b = 90;
 8000fd0:	79bb      	ldrb	r3, [r7, #6]
 8000fd2:	2b39      	cmp	r3, #57	; 0x39
 8000fd4:	d101      	bne.n	8000fda <rgb_value+0xaa>
 8000fd6:	235a      	movs	r3, #90	; 0x5a
 8000fd8:	613b      	str	r3, [r7, #16]

	if(k == '0') c = 0;
 8000fda:	797b      	ldrb	r3, [r7, #5]
 8000fdc:	2b30      	cmp	r3, #48	; 0x30
 8000fde:	d102      	bne.n	8000fe6 <rgb_value+0xb6>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	e034      	b.n	8001050 <rgb_value+0x120>
	else if(k == '1') c = 1;
 8000fe6:	797b      	ldrb	r3, [r7, #5]
 8000fe8:	2b31      	cmp	r3, #49	; 0x31
 8000fea:	d102      	bne.n	8000ff2 <rgb_value+0xc2>
 8000fec:	2301      	movs	r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	e02e      	b.n	8001050 <rgb_value+0x120>
	else if(k == '2') c = 2;
 8000ff2:	797b      	ldrb	r3, [r7, #5]
 8000ff4:	2b32      	cmp	r3, #50	; 0x32
 8000ff6:	d102      	bne.n	8000ffe <rgb_value+0xce>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	e028      	b.n	8001050 <rgb_value+0x120>
	else if(k == '3') c = 3;
 8000ffe:	797b      	ldrb	r3, [r7, #5]
 8001000:	2b33      	cmp	r3, #51	; 0x33
 8001002:	d102      	bne.n	800100a <rgb_value+0xda>
 8001004:	2303      	movs	r3, #3
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	e022      	b.n	8001050 <rgb_value+0x120>
	else if(k == '4') c = 4;
 800100a:	797b      	ldrb	r3, [r7, #5]
 800100c:	2b34      	cmp	r3, #52	; 0x34
 800100e:	d102      	bne.n	8001016 <rgb_value+0xe6>
 8001010:	2304      	movs	r3, #4
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	e01c      	b.n	8001050 <rgb_value+0x120>
	else if(k == '5') c = 5;
 8001016:	797b      	ldrb	r3, [r7, #5]
 8001018:	2b35      	cmp	r3, #53	; 0x35
 800101a:	d102      	bne.n	8001022 <rgb_value+0xf2>
 800101c:	2305      	movs	r3, #5
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	e016      	b.n	8001050 <rgb_value+0x120>
	else if(k == '6') c = 6;
 8001022:	797b      	ldrb	r3, [r7, #5]
 8001024:	2b36      	cmp	r3, #54	; 0x36
 8001026:	d102      	bne.n	800102e <rgb_value+0xfe>
 8001028:	2306      	movs	r3, #6
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	e010      	b.n	8001050 <rgb_value+0x120>
	else if(k == '7') c = 7;
 800102e:	797b      	ldrb	r3, [r7, #5]
 8001030:	2b37      	cmp	r3, #55	; 0x37
 8001032:	d102      	bne.n	800103a <rgb_value+0x10a>
 8001034:	2307      	movs	r3, #7
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	e00a      	b.n	8001050 <rgb_value+0x120>
	else if(k == '8') c = 8;
 800103a:	797b      	ldrb	r3, [r7, #5]
 800103c:	2b38      	cmp	r3, #56	; 0x38
 800103e:	d102      	bne.n	8001046 <rgb_value+0x116>
 8001040:	2308      	movs	r3, #8
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	e004      	b.n	8001050 <rgb_value+0x120>
	else if(k == '9') c = 9;
 8001046:	797b      	ldrb	r3, [r7, #5]
 8001048:	2b39      	cmp	r3, #57	; 0x39
 800104a:	d101      	bne.n	8001050 <rgb_value+0x120>
 800104c:	2309      	movs	r3, #9
 800104e:	60fb      	str	r3, [r7, #12]

	return a+b+c;
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	441a      	add	r2, r3
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4413      	add	r3, r2
}
 800105a:	4618      	mov	r0, r3
 800105c:	371c      	adds	r7, #28
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <ringInit>:

void storeChar(unsigned char c, Ring_Buffer *buffer);


void ringInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
	_rx_buffer1 = &rx_buffer1;
 800106c:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <ringInit+0x68>)
 800106e:	4a19      	ldr	r2, [pc, #100]	; (80010d4 <ringInit+0x6c>)
 8001070:	601a      	str	r2, [r3, #0]
    _tx_buffer1 = &tx_buffer1;
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <ringInit+0x70>)
 8001074:	4a19      	ldr	r2, [pc, #100]	; (80010dc <ringInit+0x74>)
 8001076:	601a      	str	r2, [r3, #0]
    _rx_buffer2 = &rx_buffer2;
 8001078:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <ringInit+0x78>)
 800107a:	4a1a      	ldr	r2, [pc, #104]	; (80010e4 <ringInit+0x7c>)
 800107c:	601a      	str	r2, [r3, #0]
    _tx_buffer2 = &tx_buffer2;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <ringInit+0x80>)
 8001080:	4a1a      	ldr	r2, [pc, #104]	; (80010ec <ringInit+0x84>)
 8001082:	601a      	str	r2, [r3, #0]

    /* Habilita la INTERRUPCIÓN por ERROR del UART (frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_ERR);
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <ringInit+0x88>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	695a      	ldr	r2, [r3, #20]
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <ringInit+0x88>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 0201 	orr.w	r2, r2, #1
 8001092:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_ERR);
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <ringInit+0x8c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	695a      	ldr	r2, [r3, #20]
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <ringInit+0x8c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 0201 	orr.w	r2, r2, #1
 80010a2:	615a      	str	r2, [r3, #20]

    /* Habilita la INTERRUPCIÓN por REGISTRO DE DATA VACÍO */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_RXNE);
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <ringInit+0x88>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <ringInit+0x88>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f042 0220 	orr.w	r2, r2, #32
 80010b2:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_RXNE);
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <ringInit+0x8c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <ringInit+0x8c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f042 0220 	orr.w	r2, r2, #32
 80010c2:	60da      	str	r2, [r3, #12]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	200009e4 	.word	0x200009e4
 80010d4:	2000008c 	.word	0x2000008c
 80010d8:	200009e8 	.word	0x200009e8
 80010dc:	20000294 	.word	0x20000294
 80010e0:	200009ec 	.word	0x200009ec
 80010e4:	2000049c 	.word	0x2000049c
 80010e8:	200009e0 	.word	0x200009e0
 80010ec:	200006a4 	.word	0x200006a4
 80010f0:	20000d90 	.word	0x20000d90
 80010f4:	20000d04 	.word	0x20000d04

080010f8 <storeChar>:


void storeChar(unsigned char c, Ring_Buffer *buffer)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
    int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800110a:	3301      	adds	r3, #1
 800110c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001110:	60fb      	str	r3, [r7, #12]

    // Si queremos almacenar lo recibido justo antes de TAIL, significando que HEAD avanzará hasta la posición de TAIL,
    // se provocará un desbordamiento (overflow) del BUFFER, y, por lo tanto, no se escribirá el caracter o ni avanzaremos HEAD.
    if(i != buffer->tail)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	429a      	cmp	r2, r3
 800111c:	d009      	beq.n	8001132 <storeChar+0x3a>
    {
    	buffer->buffer[buffer->head] = c;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	79f9      	ldrb	r1, [r7, #7]
 8001128:	54d1      	strb	r1, [r2, r3]
        buffer->head = i;
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }
}
 8001132:	bf00      	nop
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <UART_peek>:
	}
}


int UART_peek(UART_HandleTypeDef *uart)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a1c      	ldr	r2, [pc, #112]	; (80011bc <UART_peek+0x7c>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d114      	bne.n	800117a <UART_peek+0x3a>
	{
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 8001150:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <UART_peek+0x80>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001158:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <UART_peek+0x80>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001160:	429a      	cmp	r2, r3
 8001162:	d102      	bne.n	800116a <UART_peek+0x2a>
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
 8001168:	e022      	b.n	80011b0 <UART_peek+0x70>

		else return _rx_buffer1->buffer[_rx_buffer1->tail];
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <UART_peek+0x80>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <UART_peek+0x80>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001176:	5cd3      	ldrb	r3, [r2, r3]
 8001178:	e01a      	b.n	80011b0 <UART_peek+0x70>
	}

	else if (uart == PC_UART)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a11      	ldr	r2, [pc, #68]	; (80011c4 <UART_peek+0x84>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d114      	bne.n	80011ac <UART_peek+0x6c>
	{
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <UART_peek+0x88>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <UART_peek+0x88>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001192:	429a      	cmp	r2, r3
 8001194:	d102      	bne.n	800119c <UART_peek+0x5c>
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	e009      	b.n	80011b0 <UART_peek+0x70>

		else return _rx_buffer2->buffer[_rx_buffer2->tail];
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <UART_peek+0x88>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <UART_peek+0x88>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011a8:	5cd3      	ldrb	r3, [r2, r3]
 80011aa:	e001      	b.n	80011b0 <UART_peek+0x70>
	}

	return -1;
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	20000d90 	.word	0x20000d90
 80011c0:	200009e4 	.word	0x200009e4
 80011c4:	20000d04 	.word	0x20000d04
 80011c8:	200009ec 	.word	0x200009ec

080011cc <UART_read>:


int UART_read(UART_HandleTypeDef *uart)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a29      	ldr	r2, [pc, #164]	; (800127c <UART_read+0xb0>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d121      	bne.n	8001220 <UART_read+0x54>
	{
		// Si HEAD no está delante de TAIL, no tenemos ningún CARACTER
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 80011dc:	4b28      	ldr	r3, [pc, #160]	; (8001280 <UART_read+0xb4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <UART_read+0xb4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d102      	bne.n	80011f6 <UART_read+0x2a>
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295
 80011f4:	e03c      	b.n	8001270 <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 80011f6:	4b22      	ldr	r3, [pc, #136]	; (8001280 <UART_read+0xb4>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <UART_read+0xb4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001202:	5cd3      	ldrb	r3, [r2, r3]
 8001204:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8001206:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <UART_read+0xb4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <UART_read+0xb4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001218:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 800121c:	7bbb      	ldrb	r3, [r7, #14]
 800121e:	e027      	b.n	8001270 <UART_read+0xa4>
		}
	}

	else if (uart == PC_UART)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a18      	ldr	r2, [pc, #96]	; (8001284 <UART_read+0xb8>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d121      	bne.n	800126c <UART_read+0xa0>
	{
		// Si HEAD no está delante de TAIL, no tenemos ningún CARACTER
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <UART_read+0xbc>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <UART_read+0xbc>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001238:	429a      	cmp	r2, r3
 800123a:	d102      	bne.n	8001242 <UART_read+0x76>
 800123c:	f04f 33ff 	mov.w	r3, #4294967295
 8001240:	e016      	b.n	8001270 <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <UART_read+0xbc>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <UART_read+0xbc>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800124e:	5cd3      	ldrb	r3, [r2, r3]
 8001250:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <UART_read+0xbc>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <UART_read+0xbc>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001264:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	e001      	b.n	8001270 <UART_read+0xa4>
		}
	}

	else return -1;
 800126c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001270:	4618      	mov	r0, r3
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	20000d90 	.word	0x20000d90
 8001280:	200009e4 	.word	0x200009e4
 8001284:	20000d04 	.word	0x20000d04
 8001288:	200009ec 	.word	0x200009ec

0800128c <UART_write>:


void UART_write(int c, UART_HandleTypeDef *uart)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	db54      	blt.n	8001346 <UART_write+0xba>
	{
		if (uart == WiFi_UART)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	4a2d      	ldr	r2, [pc, #180]	; (8001354 <UART_write+0xc8>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d126      	bne.n	80012f2 <UART_write+0x66>
		{
			int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 80012a4:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <UART_write+0xcc>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012ac:	3301      	adds	r3, #1
 80012ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012b2:	60bb      	str	r3, [r7, #8]

			// Si el BUFFER de salida está lleno, sólo se puede esperar a la INTERRUPCIÓN que lo vacia */
		    while (i == _tx_buffer1->tail);
 80012b4:	bf00      	nop
 80012b6:	4b28      	ldr	r3, [pc, #160]	; (8001358 <UART_write+0xcc>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d0f8      	beq.n	80012b6 <UART_write+0x2a>

		   _tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 80012c4:	4b24      	ldr	r3, [pc, #144]	; (8001358 <UART_write+0xcc>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b23      	ldr	r3, [pc, #140]	; (8001358 <UART_write+0xcc>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	b2c9      	uxtb	r1, r1
 80012d4:	54d1      	strb	r1, [r2, r3]
		   _tx_buffer1->head = i;
 80012d6:	4b20      	ldr	r3, [pc, #128]	; (8001358 <UART_write+0xcc>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		   // Habilitar la INTERRUPCIÓN de TRANSMISIÓN del UART
		   __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_TXE);
 80012e0:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <UART_write+0xc8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <UART_write+0xc8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012ee:	60da      	str	r2, [r3, #12]

			// Habilitar la INTERRUPCIÓN de TRANSMISIÓN del UART
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
		}
	}
}
 80012f0:	e029      	b.n	8001346 <UART_write+0xba>
		else if (uart == PC_UART)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	4a19      	ldr	r2, [pc, #100]	; (800135c <UART_write+0xd0>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d125      	bne.n	8001346 <UART_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <UART_write+0xd4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001302:	3301      	adds	r3, #1
 8001304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001308:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 800130a:	bf00      	nop
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <UART_write+0xd4>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	429a      	cmp	r2, r3
 8001318:	d0f8      	beq.n	800130c <UART_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <UART_write+0xd4>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <UART_write+0xd4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	b2c9      	uxtb	r1, r1
 800132a:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <UART_write+0xd4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <UART_write+0xd0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68da      	ldr	r2, [r3, #12]
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <UART_write+0xd0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001344:	60da      	str	r2, [r3, #12]
}
 8001346:	bf00      	nop
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20000d90 	.word	0x20000d90
 8001358:	200009e8 	.word	0x200009e8
 800135c:	20000d04 	.word	0x20000d04
 8001360:	200009e0 	.word	0x200009e0

08001364 <UART_available>:


int UART_available(UART_HandleTypeDef *uart)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a19      	ldr	r2, [pc, #100]	; (80013d4 <UART_available+0x70>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d111      	bne.n	8001398 <UART_available+0x34>
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <UART_available+0x74>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800137c:	b29a      	uxth	r2, r3
 800137e:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <UART_available+0x74>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001386:	b29b      	uxth	r3, r3
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	b29b      	uxth	r3, r3
 800138c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001390:	b29b      	uxth	r3, r3
 8001392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001396:	e017      	b.n	80013c8 <UART_available+0x64>

	else if (uart == PC_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a10      	ldr	r2, [pc, #64]	; (80013dc <UART_available+0x78>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d111      	bne.n	80013c4 <UART_available+0x60>
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <UART_available+0x7c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <UART_available+0x7c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013bc:	b29b      	uxth	r3, r3
 80013be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013c2:	e001      	b.n	80013c8 <UART_available+0x64>

	return -1;
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	20000d90 	.word	0x20000d90
 80013d8:	200009e4 	.word	0x200009e4
 80013dc:	20000d04 	.word	0x20000d04
 80013e0:	200009ec 	.word	0x200009ec

080013e4 <UART_send>:
	return 1;
}


void UART_send (const char *s, UART_HandleTypeDef *uart)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
	while(*s!='\0') UART_write(*s++, uart);
 80013ee:	e007      	b.n	8001400 <UART_send+0x1c>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	6839      	ldr	r1, [r7, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff46 	bl	800128c <UART_write>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f3      	bne.n	80013f0 <UART_send+0xc>
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <UART_copyUpto>:
  while(*s) UART_write(*s++, uart);
}


int UART_copyUpto(char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f7fe fed3 	bl	80001d0 <strlen>
 800142a:	4603      	mov	r3, r0
 800142c:	617b      	str	r3, [r7, #20]
	int indx = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]

again:
	while (!UART_available(uart));
 8001432:	bf00      	nop
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff95 	bl	8001364 <UART_available>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f9      	beq.n	8001434 <UART_copyUpto+0x20>

	while (UART_peek(uart) != string[so_far])
 8001440:	e01f      	b.n	8001482 <UART_copyUpto+0x6e>
	{
		buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8001442:	4b32      	ldr	r3, [pc, #200]	; (800150c <UART_copyUpto+0xf8>)
 8001444:	6819      	ldr	r1, [r3, #0]
 8001446:	4b31      	ldr	r3, [pc, #196]	; (800150c <UART_copyUpto+0xf8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	68b8      	ldr	r0, [r7, #8]
 8001452:	4403      	add	r3, r0
 8001454:	5c8a      	ldrb	r2, [r1, r2]
 8001456:	701a      	strb	r2, [r3, #0]
		_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8001458:	4b2c      	ldr	r3, [pc, #176]	; (800150c <UART_copyUpto+0xf8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001460:	1c5a      	adds	r2, r3, #1
 8001462:	4b2a      	ldr	r3, [pc, #168]	; (800150c <UART_copyUpto+0xf8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800146a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		indx++;
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	3301      	adds	r3, #1
 8001472:	61bb      	str	r3, [r7, #24]
		while (!UART_available(uart));
 8001474:	bf00      	nop
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ff74 	bl	8001364 <UART_available>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f9      	beq.n	8001476 <UART_copyUpto+0x62>
	while (UART_peek(uart) != string[so_far])
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fe5c 	bl	8001140 <UART_peek>
 8001488:	4601      	mov	r1, r0
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	4299      	cmp	r1, r3
 8001494:	d1d5      	bne.n	8001442 <UART_copyUpto+0x2e>

	}

	while (UART_peek(uart) == string [so_far])
 8001496:	e01b      	b.n	80014d0 <UART_copyUpto+0xbc>
	{
		so_far++;
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	3301      	adds	r3, #1
 800149c:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = UART_read(uart);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fe94 	bl	80011cc <UART_read>
 80014a4:	4601      	mov	r1, r0
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	61ba      	str	r2, [r7, #24]
 80014ac:	461a      	mov	r2, r3
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	4413      	add	r3, r2
 80014b2:	b2ca      	uxtb	r2, r1
 80014b4:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 80014b6:	69fa      	ldr	r2, [r7, #28]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d101      	bne.n	80014c2 <UART_copyUpto+0xae>
 80014be:	2301      	movs	r3, #1
 80014c0:	e01f      	b.n	8001502 <UART_copyUpto+0xee>
		while (!UART_available(uart));
 80014c2:	bf00      	nop
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff4d 	bl	8001364 <UART_available>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f9      	beq.n	80014c4 <UART_copyUpto+0xb0>
	while (UART_peek(uart) == string [so_far])
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff fe35 	bl	8001140 <UART_peek>
 80014d6:	4601      	mov	r1, r0
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	4413      	add	r3, r2
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4299      	cmp	r1, r3
 80014e2:	d0d9      	beq.n	8001498 <UART_copyUpto+0x84>
	}

	if (so_far != len)
 80014e4:	69fa      	ldr	r2, [r7, #28]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d002      	beq.n	80014f2 <UART_copyUpto+0xde>
	{
		so_far = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
		goto again;
 80014f0:	e79f      	b.n	8001432 <UART_copyUpto+0x1e>
	}

	if (so_far == len) return 1;
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d101      	bne.n	80014fe <UART_copyUpto+0xea>
 80014fa:	2301      	movs	r3, #1
 80014fc:	e001      	b.n	8001502 <UART_copyUpto+0xee>

	else return -1;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001502:	4618      	mov	r0, r3
 8001504:	3720      	adds	r7, #32
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200009e4 	.word	0x200009e4

08001510 <UART_waitFor>:


int UART_waitFor(char *string,UART_HandleTypeDef *uart)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
	int so_far =0;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7fe fe56 	bl	80001d0 <strlen>
 8001524:	4603      	mov	r3, r0
 8001526:	60bb      	str	r3, [r7, #8]

again_device:
	while (!UART_available(uart));
 8001528:	bf00      	nop
 800152a:	6838      	ldr	r0, [r7, #0]
 800152c:	f7ff ff1a 	bl	8001364 <UART_available>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f9      	beq.n	800152a <UART_waitFor+0x1a>

	if (UART_peek(uart) != string[so_far])
 8001536:	6838      	ldr	r0, [r7, #0]
 8001538:	f7ff fe02 	bl	8001140 <UART_peek>
 800153c:	4601      	mov	r1, r0
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	4413      	add	r3, r2
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	4299      	cmp	r1, r3
 8001548:	d01e      	beq.n	8001588 <UART_waitFor+0x78>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <UART_waitFor+0xb4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <UART_waitFor+0xb4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800155c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 8001560:	e7e2      	b.n	8001528 <UART_waitFor+0x18>

	}

	while (UART_peek(uart) == string [so_far])
	{
		so_far++;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	3301      	adds	r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
		UART_read(uart);
 8001568:	6838      	ldr	r0, [r7, #0]
 800156a:	f7ff fe2f 	bl	80011cc <UART_read>
		if (so_far == len) return 1;
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	429a      	cmp	r2, r3
 8001574:	d101      	bne.n	800157a <UART_waitFor+0x6a>
 8001576:	2301      	movs	r3, #1
 8001578:	e01f      	b.n	80015ba <UART_waitFor+0xaa>
		while (!UART_available(uart));
 800157a:	bf00      	nop
 800157c:	6838      	ldr	r0, [r7, #0]
 800157e:	f7ff fef1 	bl	8001364 <UART_available>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f9      	beq.n	800157c <UART_waitFor+0x6c>
	while (UART_peek(uart) == string [so_far])
 8001588:	6838      	ldr	r0, [r7, #0]
 800158a:	f7ff fdd9 	bl	8001140 <UART_peek>
 800158e:	4601      	mov	r1, r0
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4299      	cmp	r1, r3
 800159a:	d0e2      	beq.n	8001562 <UART_waitFor+0x52>
	}

	if (so_far != len)
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d002      	beq.n	80015aa <UART_waitFor+0x9a>
	{
		so_far = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
		goto again_device;
 80015a8:	e7be      	b.n	8001528 <UART_waitFor+0x18>
	}

	if (so_far == len) return 1;
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d101      	bne.n	80015b6 <UART_waitFor+0xa6>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e001      	b.n	80015ba <UART_waitFor+0xaa>

	else return -1;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200009e4 	.word	0x200009e4

080015c8 <UART_isr>:


void UART_isr(UART_HandleTypeDef *huart)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	613b      	str	r3, [r7, #16]

	/* Si DR (DATA REGISTER) no está vacío y RX INT está habilitado */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f003 0320 	and.w	r3, r3, #32
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d023      	beq.n	8001632 <UART_isr+0x6a>
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	f003 0320 	and.w	r3, r3, #32
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d01e      	beq.n	8001632 <UART_isr+0x6a>
    	    	                USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	************************************************************************************************************/

		huart->Instance->SR;                   // Leer SR (STATUS REGISTER)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR; // Leer DR (DATA REGISTER)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	73fb      	strb	r3, [r7, #15]

        if (huart == WiFi_UART)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a3f      	ldr	r2, [pc, #252]	; (8001704 <UART_isr+0x13c>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d107      	bne.n	800161a <UART_isr+0x52>
        {
        	storeChar(c, _rx_buffer1); // Almacena DATA en el BUFFER
 800160a:	4b3f      	ldr	r3, [pc, #252]	; (8001708 <UART_isr+0x140>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fd70 	bl	80010f8 <storeChar>
        else if (huart == PC_UART)
        {
        	storeChar(c, _rx_buffer2); // Almacena DATA en el BUFFER
        }

        return;
 8001618:	e06d      	b.n	80016f6 <UART_isr+0x12e>
        else if (huart == PC_UART)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a3b      	ldr	r2, [pc, #236]	; (800170c <UART_isr+0x144>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d169      	bne.n	80016f6 <UART_isr+0x12e>
        	storeChar(c, _rx_buffer2); // Almacena DATA en el BUFFER
 8001622:	4b3b      	ldr	r3, [pc, #236]	; (8001710 <UART_isr+0x148>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	4611      	mov	r1, r2
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fd64 	bl	80010f8 <storeChar>
        return;
 8001630:	e061      	b.n	80016f6 <UART_isr+0x12e>
    }

    /* Si la INTERRUPCIÓN se produce por el TRANSMIT DATA REGISTER EMPTY */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001638:	2b00      	cmp	r3, #0
 800163a:	d05f      	beq.n	80016fc <UART_isr+0x134>
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001642:	2b00      	cmp	r3, #0
 8001644:	d05a      	beq.n	80016fc <UART_isr+0x134>
    {
    	if (huart == WiFi_UART)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a2e      	ldr	r2, [pc, #184]	; (8001704 <UART_isr+0x13c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d127      	bne.n	800169e <UART_isr+0xd6>
    	{
    		if(tx_buffer1.head == tx_buffer1.tail)
 800164e:	4b31      	ldr	r3, [pc, #196]	; (8001714 <UART_isr+0x14c>)
 8001650:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001654:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <UART_isr+0x14c>)
 8001656:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800165a:	429a      	cmp	r2, r3
 800165c:	d108      	bne.n	8001670 <UART_isr+0xa8>
    	    {
    			// BUFFER vacío, inhabilitamos la INTERRUPCIÓN
    	        __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800166c:	60da      	str	r2, [r3, #12]
        	     huart->Instance->DR = c;

        	}
        }

    	return;
 800166e:	e044      	b.n	80016fa <UART_isr+0x132>
    			unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8001670:	4b28      	ldr	r3, [pc, #160]	; (8001714 <UART_isr+0x14c>)
 8001672:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001676:	4a27      	ldr	r2, [pc, #156]	; (8001714 <UART_isr+0x14c>)
 8001678:	5cd3      	ldrb	r3, [r2, r3]
 800167a:	737b      	strb	r3, [r7, #13]
    			tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 800167c:	4b25      	ldr	r3, [pc, #148]	; (8001714 <UART_isr+0x14c>)
 800167e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001682:	3301      	adds	r3, #1
 8001684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001688:	4a22      	ldr	r2, [pc, #136]	; (8001714 <UART_isr+0x14c>)
 800168a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    			huart->Instance->SR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
    			huart->Instance->DR = c;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	7b7a      	ldrb	r2, [r7, #13]
 800169a:	605a      	str	r2, [r3, #4]
    	return;
 800169c:	e02d      	b.n	80016fa <UART_isr+0x132>
    	else if (huart == PC_UART)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a1a      	ldr	r2, [pc, #104]	; (800170c <UART_isr+0x144>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d129      	bne.n	80016fa <UART_isr+0x132>
    		if(tx_buffer2.head == tx_buffer2.tail)
 80016a6:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <UART_isr+0x150>)
 80016a8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80016ac:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <UART_isr+0x150>)
 80016ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d108      	bne.n	80016c8 <UART_isr+0x100>
        	    __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016c4:	60da      	str	r2, [r3, #12]
    	return;
 80016c6:	e018      	b.n	80016fa <UART_isr+0x132>
        	    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <UART_isr+0x150>)
 80016ca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80016ce:	4a12      	ldr	r2, [pc, #72]	; (8001718 <UART_isr+0x150>)
 80016d0:	5cd3      	ldrb	r3, [r2, r3]
 80016d2:	73bb      	strb	r3, [r7, #14]
        	    tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 80016d4:	4b10      	ldr	r3, [pc, #64]	; (8001718 <UART_isr+0x150>)
 80016d6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80016da:	3301      	adds	r3, #1
 80016dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016e0:	4a0d      	ldr	r2, [pc, #52]	; (8001718 <UART_isr+0x150>)
 80016e2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	     huart->Instance->SR;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
        	     huart->Instance->DR = c;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	7bba      	ldrb	r2, [r7, #14]
 80016f2:	605a      	str	r2, [r3, #4]
    	return;
 80016f4:	e001      	b.n	80016fa <UART_isr+0x132>
        return;
 80016f6:	bf00      	nop
 80016f8:	e000      	b.n	80016fc <UART_isr+0x134>
    	return;
 80016fa:	bf00      	nop
    }
}
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000d90 	.word	0x20000d90
 8001708:	200009e4 	.word	0x200009e4
 800170c:	20000d04 	.word	0x20000d04
 8001710:	200009ec 	.word	0x200009ec
 8001714:	20000294 	.word	0x20000294
 8001718:	200006a4 	.word	0x200006a4

0800171c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin==B_Timbre_Pin)
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d102      	bne.n	8001732 <HAL_GPIO_EXTI_Callback+0x16>
	{
		timbre = 1;
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <HAL_GPIO_EXTI_Callback+0x48>)
 800172e:	2201      	movs	r2, #1
 8001730:	601a      	str	r2, [r3, #0]
	}
    if (GPIO_Pin==B_Stop_Pin)
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	2b04      	cmp	r3, #4
 8001736:	d102      	bne.n	800173e <HAL_GPIO_EXTI_Callback+0x22>
    {
    	stop = 1;
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_GPIO_EXTI_Callback+0x4c>)
 800173a:	2201      	movs	r2, #1
 800173c:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin==S_Int_Pin)
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	2b08      	cmp	r3, #8
 8001742:	d102      	bne.n	800174a <HAL_GPIO_EXTI_Callback+0x2e>
    {
        interior = 1;
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_GPIO_EXTI_Callback+0x50>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin==S_Ext_Pin)
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d102      	bne.n	8001756 <HAL_GPIO_EXTI_Callback+0x3a>
    {
        exterior = 1;
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <HAL_GPIO_EXTI_Callback+0x54>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]
    }
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	200008ac 	.word	0x200008ac
 8001768:	200008b0 	.word	0x200008b0
 800176c:	200008b4 	.word	0x200008b4
 8001770:	200008b8 	.word	0x200008b8

08001774 <debouncer>:

int debouncer(volatile int* button_int, GPIO_TypeDef* GPIO_port, uint16_t GPIO_number) // Control de los rebotes
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	4613      	mov	r3, r2
 8001780:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count=0;
	static int counter=0;

	if (*button_int==1)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d13b      	bne.n	8001802 <debouncer+0x8e>
	{
		if (button_count==0)
 800178a:	4b20      	ldr	r3, [pc, #128]	; (800180c <debouncer+0x98>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10b      	bne.n	80017aa <debouncer+0x36>
		{
			counter=HAL_GetTick();
 8001792:	f001 fdbf 	bl	8003314 <HAL_GetTick>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <debouncer+0x9c>)
 800179c:	601a      	str	r2, [r3, #0]
			button_count++;
 800179e:	4b1b      	ldr	r3, [pc, #108]	; (800180c <debouncer+0x98>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	3301      	adds	r3, #1
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4b19      	ldr	r3, [pc, #100]	; (800180c <debouncer+0x98>)
 80017a8:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick()-counter>=20)
 80017aa:	f001 fdb3 	bl	8003314 <HAL_GetTick>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4a17      	ldr	r2, [pc, #92]	; (8001810 <debouncer+0x9c>)
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	1a9b      	subs	r3, r3, r2
 80017b6:	2b13      	cmp	r3, #19
 80017b8:	d923      	bls.n	8001802 <debouncer+0x8e>
		{
			counter=HAL_GetTick();
 80017ba:	f001 fdab 	bl	8003314 <HAL_GetTick>
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <debouncer+0x9c>)
 80017c4:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number)!=1)
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	4619      	mov	r1, r3
 80017ca:	68b8      	ldr	r0, [r7, #8]
 80017cc:	f002 fcde 	bl	800418c <HAL_GPIO_ReadPin>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d003      	beq.n	80017de <debouncer+0x6a>
			{
				button_count=1;
 80017d6:	4b0d      	ldr	r3, [pc, #52]	; (800180c <debouncer+0x98>)
 80017d8:	2201      	movs	r2, #1
 80017da:	701a      	strb	r2, [r3, #0]
 80017dc:	e005      	b.n	80017ea <debouncer+0x76>
			}
			else
			{
				button_count++;
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <debouncer+0x98>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	3301      	adds	r3, #1
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <debouncer+0x98>)
 80017e8:	701a      	strb	r2, [r3, #0]
			}
			if (button_count==4 ) // Periodo antirebotes
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <debouncer+0x98>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d107      	bne.n	8001802 <debouncer+0x8e>
			{
				button_count=0;
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <debouncer+0x98>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
				*button_int=0;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
				return 1;
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <debouncer+0x90>
			}
		}
	}
	return 0;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	200008c6 	.word	0x200008c6
 8001810:	200008c8 	.word	0x200008c8

08001814 <play_Timbre>:


void play_Timbre(void){
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0

	uint8_t tone;

	tone = 25;
 800181a:	2319      	movs	r3, #25
 800181c:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	005a      	lsls	r2, r3, #1
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <play_Timbre+0x68>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	461a      	mov	r2, r3
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <play_Timbre+0x68>)
 8001830:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <play_Timbre+0x68>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	79fa      	ldrb	r2, [r7, #7]
 8001838:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(300);
 800183a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800183e:	f001 fd75 	bl	800332c <HAL_Delay>

	tone = 40;
 8001842:	2328      	movs	r3, #40	; 0x28
 8001844:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	005a      	lsls	r2, r3, #1
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <play_Timbre+0x68>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	461a      	mov	r2, r3
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <play_Timbre+0x68>)
 8001858:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <play_Timbre+0x68>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	79fa      	ldrb	r2, [r7, #7]
 8001860:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 8001862:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001866:	f001 fd61 	bl	800332c <HAL_Delay>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 800186a:	4b04      	ldr	r3, [pc, #16]	; (800187c <play_Timbre+0x68>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2200      	movs	r2, #0
 8001870:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000a38 	.word	0x20000a38

08001880 <play_Alarma>:


void play_Alarma(){
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0

	uint8_t tone;

	for(tone = 40; tone >= 10; tone = tone-10){
 8001886:	2328      	movs	r3, #40	; 0x28
 8001888:	71fb      	strb	r3, [r7, #7]
 800188a:	e014      	b.n	80018b6 <play_Alarma+0x36>
		__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	005a      	lsls	r2, r3, #1
 8001890:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <play_Alarma+0x48>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	62da      	str	r2, [r3, #44]	; 0x2c
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	461a      	mov	r2, r3
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <play_Alarma+0x48>)
 800189e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <play_Alarma+0x48>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	79fa      	ldrb	r2, [r7, #7]
 80018a6:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(300);
 80018a8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80018ac:	f001 fd3e 	bl	800332c <HAL_Delay>
	for(tone = 40; tone >= 10; tone = tone-10){
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	3b0a      	subs	r3, #10
 80018b4:	71fb      	strb	r3, [r7, #7]
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	2b09      	cmp	r3, #9
 80018ba:	d8e7      	bhi.n	800188c <play_Alarma+0xc>
	}
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000a38 	.word	0x20000a38

080018cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d0:	f001 fcba 	bl	8003248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d4:	f000 f9de 	bl	8001c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018d8:	f000 ff3a 	bl	8002750 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018dc:	f000 feba 	bl	8002654 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80018e0:	f000 ff0c 	bl	80026fc <MX_USART6_UART_Init>
  MX_TIM5_Init();
 80018e4:	f000 fd7e 	bl	80023e4 <MX_TIM5_Init>
  MX_TIM1_Init();
 80018e8:	f000 fb34 	bl	8001f54 <MX_TIM1_Init>
  MX_TIM4_Init();
 80018ec:	f000 fd04 	bl	80022f8 <MX_TIM4_Init>
  MX_TIM2_Init();
 80018f0:	f000 fbe8 	bl	80020c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80018f4:	f000 fc72 	bl	80021dc <MX_TIM3_Init>
  MX_TIM8_Init();
 80018f8:	f000 fdf8 	bl	80024ec <MX_TIM8_Init>
  MX_TIM9_Init();
 80018fc:	f000 fe46 	bl	800258c <MX_TIM9_Init>
  MX_TIM6_Init();
 8001900:	f000 fdbe 	bl	8002480 <MX_TIM6_Init>
  MX_ADC1_Init();
 8001904:	f000 fa30 	bl	8001d68 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001908:	f000 fa80 	bl	8001e0c <MX_ADC2_Init>
  MX_ADC3_Init();
 800190c:	f000 fad0 	bl	8001eb0 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8001910:	f000 feca 	bl	80026a8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // LED RGB Gaming
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001914:	2100      	movs	r1, #0
 8001916:	48ad      	ldr	r0, [pc, #692]	; (8001bcc <main+0x300>)
 8001918:	f003 fa08 	bl	8004d2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800191c:	2104      	movs	r1, #4
 800191e:	48ab      	ldr	r0, [pc, #684]	; (8001bcc <main+0x300>)
 8001920:	f003 fa04 	bl	8004d2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001924:	2108      	movs	r1, #8
 8001926:	48a9      	ldr	r0, [pc, #676]	; (8001bcc <main+0x300>)
 8001928:	f003 fa00 	bl	8004d2c <HAL_TIM_PWM_Start>
  // Servo Parcela
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800192c:	2100      	movs	r1, #0
 800192e:	48a8      	ldr	r0, [pc, #672]	; (8001bd0 <main+0x304>)
 8001930:	f003 f9fc 	bl	8004d2c <HAL_TIM_PWM_Start>
  // Servo Garaje
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001934:	2104      	movs	r1, #4
 8001936:	48a6      	ldr	r0, [pc, #664]	; (8001bd0 <main+0x304>)
 8001938:	f003 f9f8 	bl	8004d2c <HAL_TIM_PWM_Start>
  // Servo Tendedero
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800193c:	2108      	movs	r1, #8
 800193e:	48a4      	ldr	r0, [pc, #656]	; (8001bd0 <main+0x304>)
 8001940:	f003 f9f4 	bl	8004d2c <HAL_TIM_PWM_Start>
  // Servo Salón
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001944:	210c      	movs	r1, #12
 8001946:	48a3      	ldr	r0, [pc, #652]	; (8001bd4 <main+0x308>)
 8001948:	f003 f9f0 	bl	8004d2c <HAL_TIM_PWM_Start>
  // Servo Dormitorio
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800194c:	2104      	movs	r1, #4
 800194e:	48a1      	ldr	r0, [pc, #644]	; (8001bd4 <main+0x308>)
 8001950:	f003 f9ec 	bl	8004d2c <HAL_TIM_PWM_Start>
  // Servo Oficina
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001954:	2108      	movs	r1, #8
 8001956:	489f      	ldr	r0, [pc, #636]	; (8001bd4 <main+0x308>)
 8001958:	f003 f9e8 	bl	8004d2c <HAL_TIM_PWM_Start>
  // DC Salón
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 800195c:	2100      	movs	r1, #0
 800195e:	489e      	ldr	r0, [pc, #632]	; (8001bd8 <main+0x30c>)
 8001960:	f003 f9e4 	bl	8004d2c <HAL_TIM_PWM_Start>
  // Zumbador
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001964:	2100      	movs	r1, #0
 8001966:	489d      	ldr	r0, [pc, #628]	; (8001bdc <main+0x310>)
 8001968:	f003 f9e0 	bl	8004d2c <HAL_TIM_PWM_Start>

  /*----------- Útil para Sensor DHT11/22 -----------*/
  HAL_TIM_Base_Start(&htim6);
 800196c:	489c      	ldr	r0, [pc, #624]	; (8001be0 <main+0x314>)
 800196e:	f003 f91b 	bl	8004ba8 <HAL_TIM_Base_Start>

  /*----------- Inicialización LDR & HW390 & Lluvia -----------*/
  HAL_ADC_Start(&hadc1); // LDR
 8001972:	489c      	ldr	r0, [pc, #624]	; (8001be4 <main+0x318>)
 8001974:	f001 fd42 	bl	80033fc <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2); // HW-390
 8001978:	489b      	ldr	r0, [pc, #620]	; (8001be8 <main+0x31c>)
 800197a:	f001 fd3f 	bl	80033fc <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3); // Lluvia
 800197e:	489b      	ldr	r0, [pc, #620]	; (8001bec <main+0x320>)
 8001980:	f001 fd3c 	bl	80033fc <HAL_ADC_Start>

  //__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
  ESP_Init("iPhone Carmela","pistacho");
 8001984:	499a      	ldr	r1, [pc, #616]	; (8001bf0 <main+0x324>)
 8001986:	489b      	ldr	r0, [pc, #620]	; (8001bf4 <main+0x328>)
 8001988:	f7fe fe06 	bl	8000598 <ESP_Init>
  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	ESP_messageHandler();
 800198c:	f7fe ff30 	bl	80007f0 <ESP_messageHandler>

		// TIMBRE
		if (debouncer(&timbre, B_Timbre_GPIO_Port, B_Timbre_Pin)){
 8001990:	2201      	movs	r2, #1
 8001992:	4999      	ldr	r1, [pc, #612]	; (8001bf8 <main+0x32c>)
 8001994:	4899      	ldr	r0, [pc, #612]	; (8001bfc <main+0x330>)
 8001996:	f7ff feed 	bl	8001774 <debouncer>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <main+0xd8>
			play_Timbre();
 80019a0:	f7ff ff38 	bl	8001814 <play_Timbre>

		// STOP ALARMA
		// Conexión Wi-Fi

		// ALARMA
		if (debouncer(&interior, S_Int_GPIO_Port, S_Int_Pin)){
 80019a4:	2208      	movs	r2, #8
 80019a6:	4994      	ldr	r1, [pc, #592]	; (8001bf8 <main+0x32c>)
 80019a8:	4895      	ldr	r0, [pc, #596]	; (8001c00 <main+0x334>)
 80019aa:	f7ff fee3 	bl	8001774 <debouncer>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <main+0xf4>
			if(vSeg[0] == '1') play_Alarma();
 80019b4:	4b93      	ldr	r3, [pc, #588]	; (8001c04 <main+0x338>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b31      	cmp	r3, #49	; 0x31
 80019ba:	d101      	bne.n	80019c0 <main+0xf4>
 80019bc:	f7ff ff60 	bl	8001880 <play_Alarma>
		}
		if (debouncer(&exterior, S_Ext_GPIO_Port, S_Ext_Pin)){
 80019c0:	2202      	movs	r2, #2
 80019c2:	498d      	ldr	r1, [pc, #564]	; (8001bf8 <main+0x32c>)
 80019c4:	4890      	ldr	r0, [pc, #576]	; (8001c08 <main+0x33c>)
 80019c6:	f7ff fed5 	bl	8001774 <debouncer>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <main+0x110>
			if(vSeg[1] == '1') play_Alarma();
 80019d0:	4b8c      	ldr	r3, [pc, #560]	; (8001c04 <main+0x338>)
 80019d2:	785b      	ldrb	r3, [r3, #1]
 80019d4:	2b31      	cmp	r3, #49	; 0x31
 80019d6:	d101      	bne.n	80019dc <main+0x110>
 80019d8:	f7ff ff52 	bl	8001880 <play_Alarma>
		}

		// PUERTA PARCELA (90)
		if(vVent[1]=='1' || vExt[4]=='1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 92);
 80019dc:	4b8b      	ldr	r3, [pc, #556]	; (8001c0c <main+0x340>)
 80019de:	785b      	ldrb	r3, [r3, #1]
 80019e0:	2b31      	cmp	r3, #49	; 0x31
 80019e2:	d003      	beq.n	80019ec <main+0x120>
 80019e4:	4b8a      	ldr	r3, [pc, #552]	; (8001c10 <main+0x344>)
 80019e6:	791b      	ldrb	r3, [r3, #4]
 80019e8:	2b31      	cmp	r3, #49	; 0x31
 80019ea:	d103      	bne.n	80019f4 <main+0x128>
 80019ec:	4b78      	ldr	r3, [pc, #480]	; (8001bd0 <main+0x304>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	225c      	movs	r2, #92	; 0x5c
 80019f2:	635a      	str	r2, [r3, #52]	; 0x34
		if(vVent[1]=='0' || vExt[4]=='0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89);
 80019f4:	4b85      	ldr	r3, [pc, #532]	; (8001c0c <main+0x340>)
 80019f6:	785b      	ldrb	r3, [r3, #1]
 80019f8:	2b30      	cmp	r3, #48	; 0x30
 80019fa:	d003      	beq.n	8001a04 <main+0x138>
 80019fc:	4b84      	ldr	r3, [pc, #528]	; (8001c10 <main+0x344>)
 80019fe:	791b      	ldrb	r3, [r3, #4]
 8001a00:	2b30      	cmp	r3, #48	; 0x30
 8001a02:	d103      	bne.n	8001a0c <main+0x140>
 8001a04:	4b72      	ldr	r3, [pc, #456]	; (8001bd0 <main+0x304>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2259      	movs	r2, #89	; 0x59
 8001a0a:	635a      	str	r2, [r3, #52]	; 0x34

		// PUERTA GARAJE (90)
		if(vVent[0]=='1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 92); // más rápido a 30
 8001a0c:	4b7f      	ldr	r3, [pc, #508]	; (8001c0c <main+0x340>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b31      	cmp	r3, #49	; 0x31
 8001a12:	d103      	bne.n	8001a1c <main+0x150>
 8001a14:	4b6e      	ldr	r3, [pc, #440]	; (8001bd0 <main+0x304>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	225c      	movs	r2, #92	; 0x5c
 8001a1a:	639a      	str	r2, [r3, #56]	; 0x38
		if(vVent[0]=='0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 89);
 8001a1c:	4b7b      	ldr	r3, [pc, #492]	; (8001c0c <main+0x340>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b30      	cmp	r3, #48	; 0x30
 8001a22:	d103      	bne.n	8001a2c <main+0x160>
 8001a24:	4b6a      	ldr	r3, [pc, #424]	; (8001bd0 <main+0x304>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2259      	movs	r2, #89	; 0x59
 8001a2a:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(3000);
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90);
		}*/

		// VENTANA SALÓN (90)
		if(vVent[2]=='1') {
 8001a2c:	4b77      	ldr	r3, [pc, #476]	; (8001c0c <main+0x340>)
 8001a2e:	789b      	ldrb	r3, [r3, #2]
 8001a30:	2b31      	cmp	r3, #49	; 0x31
 8001a32:	d10b      	bne.n	8001a4c <main+0x180>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 92);
 8001a34:	4b67      	ldr	r3, [pc, #412]	; (8001bd4 <main+0x308>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	225c      	movs	r2, #92	; 0x5c
 8001a3a:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(3000);
 8001a3c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a40:	f001 fc74 	bl	800332c <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 90);
 8001a44:	4b63      	ldr	r3, [pc, #396]	; (8001bd4 <main+0x308>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	225a      	movs	r2, #90	; 0x5a
 8001a4a:	641a      	str	r2, [r3, #64]	; 0x40
		}
		if(vVent[2]=='0') {
 8001a4c:	4b6f      	ldr	r3, [pc, #444]	; (8001c0c <main+0x340>)
 8001a4e:	789b      	ldrb	r3, [r3, #2]
 8001a50:	2b30      	cmp	r3, #48	; 0x30
 8001a52:	d10b      	bne.n	8001a6c <main+0x1a0>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 89);
 8001a54:	4b5f      	ldr	r3, [pc, #380]	; (8001bd4 <main+0x308>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2259      	movs	r2, #89	; 0x59
 8001a5a:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(3000);
 8001a5c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a60:	f001 fc64 	bl	800332c <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 90);
 8001a64:	4b5b      	ldr	r3, [pc, #364]	; (8001bd4 <main+0x308>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	225a      	movs	r2, #90	; 0x5a
 8001a6a:	641a      	str	r2, [r3, #64]	; 0x40
		}
		vVent[2]='x';
 8001a6c:	4b67      	ldr	r3, [pc, #412]	; (8001c0c <main+0x340>)
 8001a6e:	2278      	movs	r2, #120	; 0x78
 8001a70:	709a      	strb	r2, [r3, #2]

		// VENTANA DORMITORIO (90)
		if(vVent[3]=='1') {
 8001a72:	4b66      	ldr	r3, [pc, #408]	; (8001c0c <main+0x340>)
 8001a74:	78db      	ldrb	r3, [r3, #3]
 8001a76:	2b31      	cmp	r3, #49	; 0x31
 8001a78:	d10b      	bne.n	8001a92 <main+0x1c6>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 92);
 8001a7a:	4b56      	ldr	r3, [pc, #344]	; (8001bd4 <main+0x308>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	225c      	movs	r2, #92	; 0x5c
 8001a80:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(3000);
 8001a82:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a86:	f001 fc51 	bl	800332c <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 90);
 8001a8a:	4b52      	ldr	r3, [pc, #328]	; (8001bd4 <main+0x308>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	225a      	movs	r2, #90	; 0x5a
 8001a90:	639a      	str	r2, [r3, #56]	; 0x38
		}
		if(vVent[3]=='0') {
 8001a92:	4b5e      	ldr	r3, [pc, #376]	; (8001c0c <main+0x340>)
 8001a94:	78db      	ldrb	r3, [r3, #3]
 8001a96:	2b30      	cmp	r3, #48	; 0x30
 8001a98:	d10b      	bne.n	8001ab2 <main+0x1e6>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 89);
 8001a9a:	4b4e      	ldr	r3, [pc, #312]	; (8001bd4 <main+0x308>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2259      	movs	r2, #89	; 0x59
 8001aa0:	639a      	str	r2, [r3, #56]	; 0x38

			HAL_Delay(3000);
 8001aa2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001aa6:	f001 fc41 	bl	800332c <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 90);
 8001aaa:	4b4a      	ldr	r3, [pc, #296]	; (8001bd4 <main+0x308>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	225a      	movs	r2, #90	; 0x5a
 8001ab0:	639a      	str	r2, [r3, #56]	; 0x38
		}
		vVent[3]='x';
 8001ab2:	4b56      	ldr	r3, [pc, #344]	; (8001c0c <main+0x340>)
 8001ab4:	2278      	movs	r2, #120	; 0x78
 8001ab6:	70da      	strb	r2, [r3, #3]

		// VENTANA OFICINA (90)
		if(vVent[4]=='1') {
 8001ab8:	4b54      	ldr	r3, [pc, #336]	; (8001c0c <main+0x340>)
 8001aba:	791b      	ldrb	r3, [r3, #4]
 8001abc:	2b31      	cmp	r3, #49	; 0x31
 8001abe:	d10b      	bne.n	8001ad8 <main+0x20c>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 92);
 8001ac0:	4b44      	ldr	r3, [pc, #272]	; (8001bd4 <main+0x308>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	225c      	movs	r2, #92	; 0x5c
 8001ac6:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8001ac8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001acc:	f001 fc2e 	bl	800332c <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 90);
 8001ad0:	4b40      	ldr	r3, [pc, #256]	; (8001bd4 <main+0x308>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	225a      	movs	r2, #90	; 0x5a
 8001ad6:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		if(vVent[4]=='0') {
 8001ad8:	4b4c      	ldr	r3, [pc, #304]	; (8001c0c <main+0x340>)
 8001ada:	791b      	ldrb	r3, [r3, #4]
 8001adc:	2b30      	cmp	r3, #48	; 0x30
 8001ade:	d10b      	bne.n	8001af8 <main+0x22c>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 89);
 8001ae0:	4b3c      	ldr	r3, [pc, #240]	; (8001bd4 <main+0x308>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2259      	movs	r2, #89	; 0x59
 8001ae6:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8001ae8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001aec:	f001 fc1e 	bl	800332c <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 90);
 8001af0:	4b38      	ldr	r3, [pc, #224]	; (8001bd4 <main+0x308>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	225a      	movs	r2, #90	; 0x5a
 8001af6:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		vVent[4]='x';
 8001af8:	4b44      	ldr	r3, [pc, #272]	; (8001c0c <main+0x340>)
 8001afa:	2278      	movs	r2, #120	; 0x78
 8001afc:	711a      	strb	r2, [r3, #4]

		// FINALES DE CARRERA
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == 1){
 8001afe:	2110      	movs	r1, #16
 8001b00:	483d      	ldr	r0, [pc, #244]	; (8001bf8 <main+0x32c>)
 8001b02:	f002 fb43 	bl	800418c <HAL_GPIO_ReadPin>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d110      	bne.n	8001b2e <main+0x262>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 90); // S_Parcela
 8001b0c:	4b30      	ldr	r3, [pc, #192]	; (8001bd0 <main+0x304>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	225a      	movs	r2, #90	; 0x5a
 8001b12:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 90); // S_Garaje
 8001b14:	4b2e      	ldr	r3, [pc, #184]	; (8001bd0 <main+0x304>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	225a      	movs	r2, #90	; 0x5a
 8001b1a:	639a      	str	r2, [r3, #56]	; 0x38
			vVent[0]='x'; // S_Parcela
 8001b1c:	4b3b      	ldr	r3, [pc, #236]	; (8001c0c <main+0x340>)
 8001b1e:	2278      	movs	r2, #120	; 0x78
 8001b20:	701a      	strb	r2, [r3, #0]
			vExt[4]='x'; // S_Parcela
 8001b22:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <main+0x344>)
 8001b24:	2278      	movs	r2, #120	; 0x78
 8001b26:	711a      	strb	r2, [r3, #4]
			vVent[1]='x'; // S_Garaje
 8001b28:	4b38      	ldr	r3, [pc, #224]	; (8001c0c <main+0x340>)
 8001b2a:	2278      	movs	r2, #120	; 0x78
 8001b2c:	705a      	strb	r2, [r3, #1]
		}

		// VENTILADOR SALÓN
		if(vTemp[0]=='1') {
 8001b2e:	4b39      	ldr	r3, [pc, #228]	; (8001c14 <main+0x348>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b31      	cmp	r3, #49	; 0x31
 8001b34:	d10e      	bne.n	8001b54 <main+0x288>
			__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 1000);
 8001b36:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <main+0x30c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b3e:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
 8001b40:	2201      	movs	r2, #1
 8001b42:	2110      	movs	r1, #16
 8001b44:	4834      	ldr	r0, [pc, #208]	; (8001c18 <main+0x34c>)
 8001b46:	f002 fb39 	bl	80041bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2120      	movs	r1, #32
 8001b4e:	4832      	ldr	r0, [pc, #200]	; (8001c18 <main+0x34c>)
 8001b50:	f002 fb34 	bl	80041bc <HAL_GPIO_WritePin>
		}
		if(vTemp[0]=='0') {
 8001b54:	4b2f      	ldr	r3, [pc, #188]	; (8001c14 <main+0x348>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b30      	cmp	r3, #48	; 0x30
 8001b5a:	d10d      	bne.n	8001b78 <main+0x2ac>
			__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 8001b5c:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <main+0x30c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2200      	movs	r2, #0
 8001b62:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_RESET);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2110      	movs	r1, #16
 8001b68:	482b      	ldr	r0, [pc, #172]	; (8001c18 <main+0x34c>)
 8001b6a:	f002 fb27 	bl	80041bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,GPIO_PIN_RESET);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2120      	movs	r1, #32
 8001b72:	4829      	ldr	r0, [pc, #164]	; (8001c18 <main+0x34c>)
 8001b74:	f002 fb22 	bl	80041bc <HAL_GPIO_WritePin>
		}

		/*----------- Lectura Sensores -----------*/
		// LDR

		if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7c:	4819      	ldr	r0, [pc, #100]	; (8001be4 <main+0x318>)
 8001b7e:	f001 fd0f 	bl	80035a0 <HAL_ADC_PollForConversion>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d106      	bne.n	8001b96 <main+0x2ca>
			LDR_valor = HAL_ADC_GetValue(&hadc1);
 8001b88:	4816      	ldr	r0, [pc, #88]	; (8001be4 <main+0x318>)
 8001b8a:	f001 fd94 	bl	80036b6 <HAL_ADC_GetValue>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	4b22      	ldr	r3, [pc, #136]	; (8001c1c <main+0x350>)
 8001b94:	801a      	strh	r2, [r3, #0]

		ldr(LDR_valor);
 8001b96:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <main+0x350>)
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff f97e 	bl	8000e9c <ldr>

		// HW-390

		if(HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK)
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	4810      	ldr	r0, [pc, #64]	; (8001be8 <main+0x31c>)
 8001ba6:	f001 fcfb 	bl	80035a0 <HAL_ADC_PollForConversion>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d106      	bne.n	8001bbe <main+0x2f2>
			Higro_lectura = HAL_ADC_GetValue(&hadc2);
 8001bb0:	480d      	ldr	r0, [pc, #52]	; (8001be8 <main+0x31c>)
 8001bb2:	f001 fd80 	bl	80036b6 <HAL_ADC_GetValue>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <main+0x354>)
 8001bbc:	801a      	strh	r2, [r3, #0]

		Higro_real = 100 - ((100*Higro_lectura)/255);
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <main+0x354>)
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	2364      	movs	r3, #100	; 0x64
 8001bc6:	fb03 f302 	mul.w	r3, r3, r2
 8001bca:	e02b      	b.n	8001c24 <main+0x358>
 8001bcc:	20000c74 	.word	0x20000c74
 8001bd0:	20000d48 	.word	0x20000d48
 8001bd4:	20000b54 	.word	0x20000b54
 8001bd8:	20000cbc 	.word	0x20000cbc
 8001bdc:	20000a38 	.word	0x20000a38
 8001be0:	20000c2c 	.word	0x20000c2c
 8001be4:	20000b9c 	.word	0x20000b9c
 8001be8:	20000ac4 	.word	0x20000ac4
 8001bec:	20000be4 	.word	0x20000be4
 8001bf0:	0800797c 	.word	0x0800797c
 8001bf4:	08007988 	.word	0x08007988
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	200008ac 	.word	0x200008ac
 8001c00:	200008b4 	.word	0x200008b4
 8001c04:	200009dc 	.word	0x200009dc
 8001c08:	200008b8 	.word	0x200008b8
 8001c0c:	200008e0 	.word	0x200008e0
 8001c10:	200008ec 	.word	0x200008ec
 8001c14:	20000930 	.word	0x20000930
 8001c18:	40020800 	.word	0x40020800
 8001c1c:	200008bc 	.word	0x200008bc
 8001c20:	200008be 	.word	0x200008be
 8001c24:	4a16      	ldr	r2, [pc, #88]	; (8001c80 <main+0x3b4>)
 8001c26:	fb82 1203 	smull	r1, r2, r2, r3
 8001c2a:	441a      	add	r2, r3
 8001c2c:	11d2      	asrs	r2, r2, #7
 8001c2e:	17db      	asrs	r3, r3, #31
 8001c30:	1a9b      	subs	r3, r3, r2
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	3364      	adds	r3, #100	; 0x64
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <main+0x3b8>)
 8001c3a:	801a      	strh	r2, [r3, #0]

		// Lluvia

		if(HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY) == HAL_OK)
 8001c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c40:	4811      	ldr	r0, [pc, #68]	; (8001c88 <main+0x3bc>)
 8001c42:	f001 fcad 	bl	80035a0 <HAL_ADC_PollForConversion>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d106      	bne.n	8001c5a <main+0x38e>
			Lluvia_lectura = HAL_ADC_GetValue(&hadc3);
 8001c4c:	480e      	ldr	r0, [pc, #56]	; (8001c88 <main+0x3bc>)
 8001c4e:	f001 fd32 	bl	80036b6 <HAL_ADC_GetValue>
 8001c52:	4603      	mov	r3, r0
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <main+0x3c0>)
 8001c58:	801a      	strh	r2, [r3, #0]

		Lluvia_real = 100 - ((100*Lluvia_lectura)/255);
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <main+0x3c0>)
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	2364      	movs	r3, #100	; 0x64
 8001c62:	fb03 f302 	mul.w	r3, r3, r2
 8001c66:	4a06      	ldr	r2, [pc, #24]	; (8001c80 <main+0x3b4>)
 8001c68:	fb82 1203 	smull	r1, r2, r2, r3
 8001c6c:	441a      	add	r2, r3
 8001c6e:	11d2      	asrs	r2, r2, #7
 8001c70:	17db      	asrs	r3, r3, #31
 8001c72:	1a9b      	subs	r3, r3, r2
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	3364      	adds	r3, #100	; 0x64
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <main+0x3c4>)
 8001c7c:	801a      	strh	r2, [r3, #0]
	  	ESP_messageHandler();
 8001c7e:	e685      	b.n	800198c <main+0xc0>
 8001c80:	80808081 	.word	0x80808081
 8001c84:	200008c0 	.word	0x200008c0
 8001c88:	20000be4 	.word	0x20000be4
 8001c8c:	200008c2 	.word	0x200008c2
 8001c90:	200008c4 	.word	0x200008c4

08001c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b094      	sub	sp, #80	; 0x50
 8001c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c9a:	f107 0320 	add.w	r3, r7, #32
 8001c9e:	2230      	movs	r2, #48	; 0x30
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f004 fea6 	bl	80069f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca8:	f107 030c 	add.w	r3, r7, #12
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	4b28      	ldr	r3, [pc, #160]	; (8001d60 <SystemClock_Config+0xcc>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	4a27      	ldr	r2, [pc, #156]	; (8001d60 <SystemClock_Config+0xcc>)
 8001cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc8:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <SystemClock_Config+0xcc>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	4b22      	ldr	r3, [pc, #136]	; (8001d64 <SystemClock_Config+0xd0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a21      	ldr	r2, [pc, #132]	; (8001d64 <SystemClock_Config+0xd0>)
 8001cde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4b1f      	ldr	r3, [pc, #124]	; (8001d64 <SystemClock_Config+0xd0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d04:	2304      	movs	r3, #4
 8001d06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001d08:	2332      	movs	r3, #50	; 0x32
 8001d0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d10:	2307      	movs	r3, #7
 8001d12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d14:	f107 0320 	add.w	r3, r7, #32
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f002 fa81 	bl	8004220 <HAL_RCC_OscConfig>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d24:	f000 fe32 	bl	800298c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d28:	230f      	movs	r3, #15
 8001d2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	2101      	movs	r1, #1
 8001d46:	4618      	mov	r0, r3
 8001d48:	f002 fce2 	bl	8004710 <HAL_RCC_ClockConfig>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d52:	f000 fe1b 	bl	800298c <Error_Handler>
  }
}
 8001d56:	bf00      	nop
 8001d58:	3750      	adds	r7, #80	; 0x50
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40007000 	.word	0x40007000

08001d68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d6e:	463b      	mov	r3, r7
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d7a:	4b21      	ldr	r3, [pc, #132]	; (8001e00 <MX_ADC1_Init+0x98>)
 8001d7c:	4a21      	ldr	r2, [pc, #132]	; (8001e04 <MX_ADC1_Init+0x9c>)
 8001d7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d80:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <MX_ADC1_Init+0x98>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001d86:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <MX_ADC1_Init+0x98>)
 8001d88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001d8e:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <MX_ADC1_Init+0x98>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d94:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <MX_ADC1_Init+0x98>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d9a:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <MX_ADC1_Init+0x98>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001da2:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <MX_ADC1_Init+0x98>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001da8:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <MX_ADC1_Init+0x98>)
 8001daa:	4a17      	ldr	r2, [pc, #92]	; (8001e08 <MX_ADC1_Init+0xa0>)
 8001dac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dae:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <MX_ADC1_Init+0x98>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <MX_ADC1_Init+0x98>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001dba:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <MX_ADC1_Init+0x98>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <MX_ADC1_Init+0x98>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dc8:	480d      	ldr	r0, [pc, #52]	; (8001e00 <MX_ADC1_Init+0x98>)
 8001dca:	f001 fad3 	bl	8003374 <HAL_ADC_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001dd4:	f000 fdda 	bl	800298c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001dd8:	2304      	movs	r3, #4
 8001dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001de0:	2307      	movs	r3, #7
 8001de2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001de4:	463b      	mov	r3, r7
 8001de6:	4619      	mov	r1, r3
 8001de8:	4805      	ldr	r0, [pc, #20]	; (8001e00 <MX_ADC1_Init+0x98>)
 8001dea:	f001 fc71 	bl	80036d0 <HAL_ADC_ConfigChannel>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001df4:	f000 fdca 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001df8:	bf00      	nop
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000b9c 	.word	0x20000b9c
 8001e04:	40012000 	.word	0x40012000
 8001e08:	0f000001 	.word	0x0f000001

08001e0c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e12:	463b      	mov	r3, r7
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001e1e:	4b21      	ldr	r3, [pc, #132]	; (8001ea4 <MX_ADC2_Init+0x98>)
 8001e20:	4a21      	ldr	r2, [pc, #132]	; (8001ea8 <MX_ADC2_Init+0x9c>)
 8001e22:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001e24:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <MX_ADC2_Init+0x98>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8001e2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <MX_ADC2_Init+0x98>)
 8001e2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e30:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001e32:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <MX_ADC2_Init+0x98>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001e38:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <MX_ADC2_Init+0x98>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e3e:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <MX_ADC2_Init+0x98>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e46:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <MX_ADC2_Init+0x98>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e4c:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <MX_ADC2_Init+0x98>)
 8001e4e:	4a17      	ldr	r2, [pc, #92]	; (8001eac <MX_ADC2_Init+0xa0>)
 8001e50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e52:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <MX_ADC2_Init+0x98>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <MX_ADC2_Init+0x98>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001e5e:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <MX_ADC2_Init+0x98>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001e66:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <MX_ADC2_Init+0x98>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e6c:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <MX_ADC2_Init+0x98>)
 8001e6e:	f001 fa81 	bl	8003374 <HAL_ADC_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001e78:	f000 fd88 	bl	800298c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001e7c:	2308      	movs	r3, #8
 8001e7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e80:	2301      	movs	r3, #1
 8001e82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001e84:	2307      	movs	r3, #7
 8001e86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001e88:	463b      	mov	r3, r7
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <MX_ADC2_Init+0x98>)
 8001e8e:	f001 fc1f 	bl	80036d0 <HAL_ADC_ConfigChannel>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001e98:	f000 fd78 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000ac4 	.word	0x20000ac4
 8001ea8:	40012100 	.word	0x40012100
 8001eac:	0f000001 	.word	0x0f000001

08001eb0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001eb6:	463b      	mov	r3, r7
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001ec2:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <MX_ADC3_Init+0x98>)
 8001ec4:	4a21      	ldr	r2, [pc, #132]	; (8001f4c <MX_ADC3_Init+0x9c>)
 8001ec6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ec8:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <MX_ADC3_Init+0x98>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 8001ece:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <MX_ADC3_Init+0x98>)
 8001ed0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ed4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001ed6:	4b1c      	ldr	r3, [pc, #112]	; (8001f48 <MX_ADC3_Init+0x98>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001edc:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <MX_ADC3_Init+0x98>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001ee2:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <MX_ADC3_Init+0x98>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001eea:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <MX_ADC3_Init+0x98>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ef0:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <MX_ADC3_Init+0x98>)
 8001ef2:	4a17      	ldr	r2, [pc, #92]	; (8001f50 <MX_ADC3_Init+0xa0>)
 8001ef4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <MX_ADC3_Init+0x98>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <MX_ADC3_Init+0x98>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <MX_ADC3_Init+0x98>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001f0a:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <MX_ADC3_Init+0x98>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001f10:	480d      	ldr	r0, [pc, #52]	; (8001f48 <MX_ADC3_Init+0x98>)
 8001f12:	f001 fa2f 	bl	8003374 <HAL_ADC_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001f1c:	f000 fd36 	bl	800298c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001f20:	230b      	movs	r3, #11
 8001f22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f24:	2301      	movs	r3, #1
 8001f26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001f28:	2307      	movs	r3, #7
 8001f2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4805      	ldr	r0, [pc, #20]	; (8001f48 <MX_ADC3_Init+0x98>)
 8001f32:	f001 fbcd 	bl	80036d0 <HAL_ADC_ConfigChannel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001f3c:	f000 fd26 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001f40:	bf00      	nop
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000be4 	.word	0x20000be4
 8001f4c:	40012200 	.word	0x40012200
 8001f50:	0f000001 	.word	0x0f000001

08001f54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b096      	sub	sp, #88	; 0x58
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
 8001f80:	611a      	str	r2, [r3, #16]
 8001f82:	615a      	str	r2, [r3, #20]
 8001f84:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	2220      	movs	r2, #32
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f004 fd31 	bl	80069f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f92:	4b4a      	ldr	r3, [pc, #296]	; (80020bc <MX_TIM1_Init+0x168>)
 8001f94:	4a4a      	ldr	r2, [pc, #296]	; (80020c0 <MX_TIM1_Init+0x16c>)
 8001f96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8001f98:	4b48      	ldr	r3, [pc, #288]	; (80020bc <MX_TIM1_Init+0x168>)
 8001f9a:	225f      	movs	r2, #95	; 0x5f
 8001f9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9e:	4b47      	ldr	r3, [pc, #284]	; (80020bc <MX_TIM1_Init+0x168>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 8001fa4:	4b45      	ldr	r3, [pc, #276]	; (80020bc <MX_TIM1_Init+0x168>)
 8001fa6:	22fe      	movs	r2, #254	; 0xfe
 8001fa8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001faa:	4b44      	ldr	r3, [pc, #272]	; (80020bc <MX_TIM1_Init+0x168>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fb0:	4b42      	ldr	r3, [pc, #264]	; (80020bc <MX_TIM1_Init+0x168>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb6:	4b41      	ldr	r3, [pc, #260]	; (80020bc <MX_TIM1_Init+0x168>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fbc:	483f      	ldr	r0, [pc, #252]	; (80020bc <MX_TIM1_Init+0x168>)
 8001fbe:	f002 fda3 	bl	8004b08 <HAL_TIM_Base_Init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001fc8:	f000 fce0 	bl	800298c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fd2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4838      	ldr	r0, [pc, #224]	; (80020bc <MX_TIM1_Init+0x168>)
 8001fda:	f003 f831 	bl	8005040 <HAL_TIM_ConfigClockSource>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001fe4:	f000 fcd2 	bl	800298c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fe8:	4834      	ldr	r0, [pc, #208]	; (80020bc <MX_TIM1_Init+0x168>)
 8001fea:	f002 fe45 	bl	8004c78 <HAL_TIM_PWM_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001ff4:	f000 fcca 	bl	800298c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002000:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002004:	4619      	mov	r1, r3
 8002006:	482d      	ldr	r0, [pc, #180]	; (80020bc <MX_TIM1_Init+0x168>)
 8002008:	f003 fbf2 	bl	80057f0 <HAL_TIMEx_MasterConfigSynchronization>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002012:	f000 fcbb 	bl	800298c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002016:	2360      	movs	r3, #96	; 0x60
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800201e:	2300      	movs	r3, #0
 8002020:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002022:	2300      	movs	r3, #0
 8002024:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002026:	2300      	movs	r3, #0
 8002028:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002036:	2200      	movs	r2, #0
 8002038:	4619      	mov	r1, r3
 800203a:	4820      	ldr	r0, [pc, #128]	; (80020bc <MX_TIM1_Init+0x168>)
 800203c:	f002 ff3e 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002046:	f000 fca1 	bl	800298c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800204a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800204e:	2204      	movs	r2, #4
 8002050:	4619      	mov	r1, r3
 8002052:	481a      	ldr	r0, [pc, #104]	; (80020bc <MX_TIM1_Init+0x168>)
 8002054:	f002 ff32 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800205e:	f000 fc95 	bl	800298c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002066:	2208      	movs	r2, #8
 8002068:	4619      	mov	r1, r3
 800206a:	4814      	ldr	r0, [pc, #80]	; (80020bc <MX_TIM1_Init+0x168>)
 800206c:	f002 ff26 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8002076:	f000 fc89 	bl	800298c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800207e:	2300      	movs	r3, #0
 8002080:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800208e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002092:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	4619      	mov	r1, r3
 800209c:	4807      	ldr	r0, [pc, #28]	; (80020bc <MX_TIM1_Init+0x168>)
 800209e:	f003 fc23 	bl	80058e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80020a8:	f000 fc70 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020ac:	4803      	ldr	r0, [pc, #12]	; (80020bc <MX_TIM1_Init+0x168>)
 80020ae:	f000 fdfd 	bl	8002cac <HAL_TIM_MspPostInit>

}
 80020b2:	bf00      	nop
 80020b4:	3758      	adds	r7, #88	; 0x58
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000c74 	.word	0x20000c74
 80020c0:	40010000 	.word	0x40010000

080020c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08e      	sub	sp, #56	; 0x38
 80020c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	605a      	str	r2, [r3, #4]
 80020d4:	609a      	str	r2, [r3, #8]
 80020d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d8:	f107 0320 	add.w	r3, r7, #32
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
 80020f0:	615a      	str	r2, [r3, #20]
 80020f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020f4:	4b38      	ldr	r3, [pc, #224]	; (80021d8 <MX_TIM2_Init+0x114>)
 80020f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 500-1;
 80020fc:	4b36      	ldr	r3, [pc, #216]	; (80021d8 <MX_TIM2_Init+0x114>)
 80020fe:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002102:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002104:	4b34      	ldr	r3, [pc, #208]	; (80021d8 <MX_TIM2_Init+0x114>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 800210a:	4b33      	ldr	r3, [pc, #204]	; (80021d8 <MX_TIM2_Init+0x114>)
 800210c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002110:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002112:	4b31      	ldr	r3, [pc, #196]	; (80021d8 <MX_TIM2_Init+0x114>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002118:	4b2f      	ldr	r3, [pc, #188]	; (80021d8 <MX_TIM2_Init+0x114>)
 800211a:	2200      	movs	r2, #0
 800211c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800211e:	482e      	ldr	r0, [pc, #184]	; (80021d8 <MX_TIM2_Init+0x114>)
 8002120:	f002 fcf2 	bl	8004b08 <HAL_TIM_Base_Init>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800212a:	f000 fc2f 	bl	800298c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800212e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002134:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002138:	4619      	mov	r1, r3
 800213a:	4827      	ldr	r0, [pc, #156]	; (80021d8 <MX_TIM2_Init+0x114>)
 800213c:	f002 ff80 	bl	8005040 <HAL_TIM_ConfigClockSource>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002146:	f000 fc21 	bl	800298c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800214a:	4823      	ldr	r0, [pc, #140]	; (80021d8 <MX_TIM2_Init+0x114>)
 800214c:	f002 fd94 	bl	8004c78 <HAL_TIM_PWM_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002156:	f000 fc19 	bl	800298c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002162:	f107 0320 	add.w	r3, r7, #32
 8002166:	4619      	mov	r1, r3
 8002168:	481b      	ldr	r0, [pc, #108]	; (80021d8 <MX_TIM2_Init+0x114>)
 800216a:	f003 fb41 	bl	80057f0 <HAL_TIMEx_MasterConfigSynchronization>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002174:	f000 fc0a 	bl	800298c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002178:	2360      	movs	r3, #96	; 0x60
 800217a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002188:	1d3b      	adds	r3, r7, #4
 800218a:	2200      	movs	r2, #0
 800218c:	4619      	mov	r1, r3
 800218e:	4812      	ldr	r0, [pc, #72]	; (80021d8 <MX_TIM2_Init+0x114>)
 8002190:	f002 fe94 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800219a:	f000 fbf7 	bl	800298c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	2204      	movs	r2, #4
 80021a2:	4619      	mov	r1, r3
 80021a4:	480c      	ldr	r0, [pc, #48]	; (80021d8 <MX_TIM2_Init+0x114>)
 80021a6:	f002 fe89 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80021b0:	f000 fbec 	bl	800298c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021b4:	1d3b      	adds	r3, r7, #4
 80021b6:	2208      	movs	r2, #8
 80021b8:	4619      	mov	r1, r3
 80021ba:	4807      	ldr	r0, [pc, #28]	; (80021d8 <MX_TIM2_Init+0x114>)
 80021bc:	f002 fe7e 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80021c6:	f000 fbe1 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021ca:	4803      	ldr	r0, [pc, #12]	; (80021d8 <MX_TIM2_Init+0x114>)
 80021cc:	f000 fd6e 	bl	8002cac <HAL_TIM_MspPostInit>

}
 80021d0:	bf00      	nop
 80021d2:	3738      	adds	r7, #56	; 0x38
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000d48 	.word	0x20000d48

080021dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08e      	sub	sp, #56	; 0x38
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f0:	f107 0320 	add.w	r3, r7, #32
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
 8002208:	615a      	str	r2, [r3, #20]
 800220a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800220c:	4b38      	ldr	r3, [pc, #224]	; (80022f0 <MX_TIM3_Init+0x114>)
 800220e:	4a39      	ldr	r2, [pc, #228]	; (80022f4 <MX_TIM3_Init+0x118>)
 8002210:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 8002212:	4b37      	ldr	r3, [pc, #220]	; (80022f0 <MX_TIM3_Init+0x114>)
 8002214:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002218:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800221a:	4b35      	ldr	r3, [pc, #212]	; (80022f0 <MX_TIM3_Init+0x114>)
 800221c:	2200      	movs	r2, #0
 800221e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8002220:	4b33      	ldr	r3, [pc, #204]	; (80022f0 <MX_TIM3_Init+0x114>)
 8002222:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002226:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002228:	4b31      	ldr	r3, [pc, #196]	; (80022f0 <MX_TIM3_Init+0x114>)
 800222a:	2200      	movs	r2, #0
 800222c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222e:	4b30      	ldr	r3, [pc, #192]	; (80022f0 <MX_TIM3_Init+0x114>)
 8002230:	2200      	movs	r2, #0
 8002232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002234:	482e      	ldr	r0, [pc, #184]	; (80022f0 <MX_TIM3_Init+0x114>)
 8002236:	f002 fc67 	bl	8004b08 <HAL_TIM_Base_Init>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002240:	f000 fba4 	bl	800298c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002248:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800224a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800224e:	4619      	mov	r1, r3
 8002250:	4827      	ldr	r0, [pc, #156]	; (80022f0 <MX_TIM3_Init+0x114>)
 8002252:	f002 fef5 	bl	8005040 <HAL_TIM_ConfigClockSource>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800225c:	f000 fb96 	bl	800298c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002260:	4823      	ldr	r0, [pc, #140]	; (80022f0 <MX_TIM3_Init+0x114>)
 8002262:	f002 fd09 	bl	8004c78 <HAL_TIM_PWM_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800226c:	f000 fb8e 	bl	800298c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002270:	2300      	movs	r3, #0
 8002272:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002274:	2300      	movs	r3, #0
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002278:	f107 0320 	add.w	r3, r7, #32
 800227c:	4619      	mov	r1, r3
 800227e:	481c      	ldr	r0, [pc, #112]	; (80022f0 <MX_TIM3_Init+0x114>)
 8002280:	f003 fab6 	bl	80057f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800228a:	f000 fb7f 	bl	800298c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800228e:	2360      	movs	r3, #96	; 0x60
 8002290:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800229e:	1d3b      	adds	r3, r7, #4
 80022a0:	2204      	movs	r2, #4
 80022a2:	4619      	mov	r1, r3
 80022a4:	4812      	ldr	r0, [pc, #72]	; (80022f0 <MX_TIM3_Init+0x114>)
 80022a6:	f002 fe09 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80022b0:	f000 fb6c 	bl	800298c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	2208      	movs	r2, #8
 80022b8:	4619      	mov	r1, r3
 80022ba:	480d      	ldr	r0, [pc, #52]	; (80022f0 <MX_TIM3_Init+0x114>)
 80022bc:	f002 fdfe 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80022c6:	f000 fb61 	bl	800298c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	220c      	movs	r2, #12
 80022ce:	4619      	mov	r1, r3
 80022d0:	4807      	ldr	r0, [pc, #28]	; (80022f0 <MX_TIM3_Init+0x114>)
 80022d2:	f002 fdf3 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80022dc:	f000 fb56 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022e0:	4803      	ldr	r0, [pc, #12]	; (80022f0 <MX_TIM3_Init+0x114>)
 80022e2:	f000 fce3 	bl	8002cac <HAL_TIM_MspPostInit>

}
 80022e6:	bf00      	nop
 80022e8:	3738      	adds	r7, #56	; 0x38
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000b54 	.word	0x20000b54
 80022f4:	40000400 	.word	0x40000400

080022f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08e      	sub	sp, #56	; 0x38
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800230c:	f107 0320 	add.w	r3, r7, #32
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002316:	1d3b      	adds	r3, r7, #4
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
 8002324:	615a      	str	r2, [r3, #20]
 8002326:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002328:	4b2c      	ldr	r3, [pc, #176]	; (80023dc <MX_TIM4_Init+0xe4>)
 800232a:	4a2d      	ldr	r2, [pc, #180]	; (80023e0 <MX_TIM4_Init+0xe8>)
 800232c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 800232e:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <MX_TIM4_Init+0xe4>)
 8002330:	225f      	movs	r2, #95	; 0x5f
 8002332:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002334:	4b29      	ldr	r3, [pc, #164]	; (80023dc <MX_TIM4_Init+0xe4>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20;
 800233a:	4b28      	ldr	r3, [pc, #160]	; (80023dc <MX_TIM4_Init+0xe4>)
 800233c:	2214      	movs	r2, #20
 800233e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002340:	4b26      	ldr	r3, [pc, #152]	; (80023dc <MX_TIM4_Init+0xe4>)
 8002342:	2200      	movs	r2, #0
 8002344:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002346:	4b25      	ldr	r3, [pc, #148]	; (80023dc <MX_TIM4_Init+0xe4>)
 8002348:	2200      	movs	r2, #0
 800234a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800234c:	4823      	ldr	r0, [pc, #140]	; (80023dc <MX_TIM4_Init+0xe4>)
 800234e:	f002 fbdb 	bl	8004b08 <HAL_TIM_Base_Init>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002358:	f000 fb18 	bl	800298c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800235c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002366:	4619      	mov	r1, r3
 8002368:	481c      	ldr	r0, [pc, #112]	; (80023dc <MX_TIM4_Init+0xe4>)
 800236a:	f002 fe69 	bl	8005040 <HAL_TIM_ConfigClockSource>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002374:	f000 fb0a 	bl	800298c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002378:	4818      	ldr	r0, [pc, #96]	; (80023dc <MX_TIM4_Init+0xe4>)
 800237a:	f002 fc7d 	bl	8004c78 <HAL_TIM_PWM_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002384:	f000 fb02 	bl	800298c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002388:	2300      	movs	r3, #0
 800238a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800238c:	2300      	movs	r3, #0
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002390:	f107 0320 	add.w	r3, r7, #32
 8002394:	4619      	mov	r1, r3
 8002396:	4811      	ldr	r0, [pc, #68]	; (80023dc <MX_TIM4_Init+0xe4>)
 8002398:	f003 fa2a 	bl	80057f0 <HAL_TIMEx_MasterConfigSynchronization>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80023a2:	f000 faf3 	bl	800298c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023a6:	2360      	movs	r3, #96	; 0x60
 80023a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	2200      	movs	r2, #0
 80023ba:	4619      	mov	r1, r3
 80023bc:	4807      	ldr	r0, [pc, #28]	; (80023dc <MX_TIM4_Init+0xe4>)
 80023be:	f002 fd7d 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80023c8:	f000 fae0 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80023cc:	4803      	ldr	r0, [pc, #12]	; (80023dc <MX_TIM4_Init+0xe4>)
 80023ce:	f000 fc6d 	bl	8002cac <HAL_TIM_MspPostInit>

}
 80023d2:	bf00      	nop
 80023d4:	3738      	adds	r7, #56	; 0x38
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000a38 	.word	0x20000a38
 80023e0:	40000800 	.word	0x40000800

080023e4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ea:	f107 0308 	add.w	r3, r7, #8
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	609a      	str	r2, [r3, #8]
 80023f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f8:	463b      	mov	r3, r7
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002400:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <MX_TIM5_Init+0x94>)
 8002402:	4a1e      	ldr	r2, [pc, #120]	; (800247c <MX_TIM5_Init+0x98>)
 8002404:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 96-1;
 8002406:	4b1c      	ldr	r3, [pc, #112]	; (8002478 <MX_TIM5_Init+0x94>)
 8002408:	225f      	movs	r2, #95	; 0x5f
 800240a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240c:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <MX_TIM5_Init+0x94>)
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 8002412:	4b19      	ldr	r3, [pc, #100]	; (8002478 <MX_TIM5_Init+0x94>)
 8002414:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002418:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800241a:	4b17      	ldr	r3, [pc, #92]	; (8002478 <MX_TIM5_Init+0x94>)
 800241c:	2200      	movs	r2, #0
 800241e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002420:	4b15      	ldr	r3, [pc, #84]	; (8002478 <MX_TIM5_Init+0x94>)
 8002422:	2200      	movs	r2, #0
 8002424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002426:	4814      	ldr	r0, [pc, #80]	; (8002478 <MX_TIM5_Init+0x94>)
 8002428:	f002 fb6e 	bl	8004b08 <HAL_TIM_Base_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002432:	f000 faab 	bl	800298c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800243a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800243c:	f107 0308 	add.w	r3, r7, #8
 8002440:	4619      	mov	r1, r3
 8002442:	480d      	ldr	r0, [pc, #52]	; (8002478 <MX_TIM5_Init+0x94>)
 8002444:	f002 fdfc 	bl	8005040 <HAL_TIM_ConfigClockSource>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800244e:	f000 fa9d 	bl	800298c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002456:	2300      	movs	r3, #0
 8002458:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800245a:	463b      	mov	r3, r7
 800245c:	4619      	mov	r1, r3
 800245e:	4806      	ldr	r0, [pc, #24]	; (8002478 <MX_TIM5_Init+0x94>)
 8002460:	f003 f9c6 	bl	80057f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800246a:	f000 fa8f 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800246e:	bf00      	nop
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000b0c 	.word	0x20000b0c
 800247c:	40000c00 	.word	0x40000c00

08002480 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002486:	463b      	mov	r3, r7
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800248e:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <MX_TIM6_Init+0x64>)
 8002490:	4a15      	ldr	r2, [pc, #84]	; (80024e8 <MX_TIM6_Init+0x68>)
 8002492:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8002494:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <MX_TIM6_Init+0x64>)
 8002496:	2231      	movs	r2, #49	; 0x31
 8002498:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <MX_TIM6_Init+0x64>)
 800249c:	2200      	movs	r2, #0
 800249e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 80024a0:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <MX_TIM6_Init+0x64>)
 80024a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80024a6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a8:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <MX_TIM6_Init+0x64>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80024ae:	480d      	ldr	r0, [pc, #52]	; (80024e4 <MX_TIM6_Init+0x64>)
 80024b0:	f002 fb2a 	bl	8004b08 <HAL_TIM_Base_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80024ba:	f000 fa67 	bl	800298c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024be:	2300      	movs	r3, #0
 80024c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80024c6:	463b      	mov	r3, r7
 80024c8:	4619      	mov	r1, r3
 80024ca:	4806      	ldr	r0, [pc, #24]	; (80024e4 <MX_TIM6_Init+0x64>)
 80024cc:	f003 f990 	bl	80057f0 <HAL_TIMEx_MasterConfigSynchronization>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80024d6:	f000 fa59 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000c2c 	.word	0x20000c2c
 80024e8:	40001000 	.word	0x40001000

080024ec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024f2:	f107 0308 	add.w	r3, r7, #8
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	605a      	str	r2, [r3, #4]
 80024fc:	609a      	str	r2, [r3, #8]
 80024fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002500:	463b      	mov	r3, r7
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002508:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <MX_TIM8_Init+0x98>)
 800250a:	4a1f      	ldr	r2, [pc, #124]	; (8002588 <MX_TIM8_Init+0x9c>)
 800250c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800250e:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <MX_TIM8_Init+0x98>)
 8002510:	2200      	movs	r2, #0
 8002512:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002514:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <MX_TIM8_Init+0x98>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800251a:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <MX_TIM8_Init+0x98>)
 800251c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002520:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <MX_TIM8_Init+0x98>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002528:	4b16      	ldr	r3, [pc, #88]	; (8002584 <MX_TIM8_Init+0x98>)
 800252a:	2200      	movs	r2, #0
 800252c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800252e:	4b15      	ldr	r3, [pc, #84]	; (8002584 <MX_TIM8_Init+0x98>)
 8002530:	2200      	movs	r2, #0
 8002532:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002534:	4813      	ldr	r0, [pc, #76]	; (8002584 <MX_TIM8_Init+0x98>)
 8002536:	f002 fae7 	bl	8004b08 <HAL_TIM_Base_Init>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8002540:	f000 fa24 	bl	800298c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002548:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800254a:	f107 0308 	add.w	r3, r7, #8
 800254e:	4619      	mov	r1, r3
 8002550:	480c      	ldr	r0, [pc, #48]	; (8002584 <MX_TIM8_Init+0x98>)
 8002552:	f002 fd75 	bl	8005040 <HAL_TIM_ConfigClockSource>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 800255c:	f000 fa16 	bl	800298c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002560:	2300      	movs	r3, #0
 8002562:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002564:	2300      	movs	r3, #0
 8002566:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002568:	463b      	mov	r3, r7
 800256a:	4619      	mov	r1, r3
 800256c:	4805      	ldr	r0, [pc, #20]	; (8002584 <MX_TIM8_Init+0x98>)
 800256e:	f003 f93f 	bl	80057f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8002578:	f000 fa08 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800257c:	bf00      	nop
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	200009f0 	.word	0x200009f0
 8002588:	40010400 	.word	0x40010400

0800258c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08c      	sub	sp, #48	; 0x30
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002592:	f107 0320 	add.w	r3, r7, #32
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	605a      	str	r2, [r3, #4]
 800259c:	609a      	str	r2, [r3, #8]
 800259e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025a0:	1d3b      	adds	r3, r7, #4
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	605a      	str	r2, [r3, #4]
 80025a8:	609a      	str	r2, [r3, #8]
 80025aa:	60da      	str	r2, [r3, #12]
 80025ac:	611a      	str	r2, [r3, #16]
 80025ae:	615a      	str	r2, [r3, #20]
 80025b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80025b2:	4b26      	ldr	r3, [pc, #152]	; (800264c <MX_TIM9_Init+0xc0>)
 80025b4:	4a26      	ldr	r2, [pc, #152]	; (8002650 <MX_TIM9_Init+0xc4>)
 80025b6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 500-1;
 80025b8:	4b24      	ldr	r3, [pc, #144]	; (800264c <MX_TIM9_Init+0xc0>)
 80025ba:	f240 12f3 	movw	r2, #499	; 0x1f3
 80025be:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c0:	4b22      	ldr	r3, [pc, #136]	; (800264c <MX_TIM9_Init+0xc0>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2000-1;
 80025c6:	4b21      	ldr	r3, [pc, #132]	; (800264c <MX_TIM9_Init+0xc0>)
 80025c8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80025cc:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ce:	4b1f      	ldr	r3, [pc, #124]	; (800264c <MX_TIM9_Init+0xc0>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d4:	4b1d      	ldr	r3, [pc, #116]	; (800264c <MX_TIM9_Init+0xc0>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80025da:	481c      	ldr	r0, [pc, #112]	; (800264c <MX_TIM9_Init+0xc0>)
 80025dc:	f002 fa94 	bl	8004b08 <HAL_TIM_Base_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 80025e6:	f000 f9d1 	bl	800298c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80025f0:	f107 0320 	add.w	r3, r7, #32
 80025f4:	4619      	mov	r1, r3
 80025f6:	4815      	ldr	r0, [pc, #84]	; (800264c <MX_TIM9_Init+0xc0>)
 80025f8:	f002 fd22 	bl	8005040 <HAL_TIM_ConfigClockSource>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 8002602:	f000 f9c3 	bl	800298c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002606:	4811      	ldr	r0, [pc, #68]	; (800264c <MX_TIM9_Init+0xc0>)
 8002608:	f002 fb36 	bl	8004c78 <HAL_TIM_PWM_Init>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8002612:	f000 f9bb 	bl	800298c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002616:	2360      	movs	r3, #96	; 0x60
 8002618:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	2200      	movs	r2, #0
 800262a:	4619      	mov	r1, r3
 800262c:	4807      	ldr	r0, [pc, #28]	; (800264c <MX_TIM9_Init+0xc0>)
 800262e:	f002 fc45 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8002638:	f000 f9a8 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800263c:	4803      	ldr	r0, [pc, #12]	; (800264c <MX_TIM9_Init+0xc0>)
 800263e:	f000 fb35 	bl	8002cac <HAL_TIM_MspPostInit>

}
 8002642:	bf00      	nop
 8002644:	3730      	adds	r7, #48	; 0x30
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000cbc 	.word	0x20000cbc
 8002650:	40014000 	.word	0x40014000

08002654 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 800265a:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <MX_USART2_UART_Init+0x50>)
 800265c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 8002660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002664:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 800266e:	2200      	movs	r2, #0
 8002670:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 800267a:	220c      	movs	r2, #12
 800267c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800267e:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 8002686:	2200      	movs	r2, #0
 8002688:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800268a:	4805      	ldr	r0, [pc, #20]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 800268c:	f003 f97e 	bl	800598c <HAL_UART_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002696:	f000 f979 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000d90 	.word	0x20000d90
 80026a4:	40004400 	.word	0x40004400

080026a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026ac:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026ae:	4a12      	ldr	r2, [pc, #72]	; (80026f8 <MX_USART3_UART_Init+0x50>)
 80026b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026ba:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026c0:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026c6:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026ce:	220c      	movs	r2, #12
 80026d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026d2:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026da:	2200      	movs	r2, #0
 80026dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026de:	4805      	ldr	r0, [pc, #20]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026e0:	f003 f954 	bl	800598c <HAL_UART_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80026ea:	f000 f94f 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000a80 	.word	0x20000a80
 80026f8:	40004800 	.word	0x40004800

080026fc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <MX_USART6_UART_Init+0x4c>)
 8002702:	4a12      	ldr	r2, [pc, #72]	; (800274c <MX_USART6_UART_Init+0x50>)
 8002704:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002706:	4b10      	ldr	r3, [pc, #64]	; (8002748 <MX_USART6_UART_Init+0x4c>)
 8002708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800270c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <MX_USART6_UART_Init+0x4c>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <MX_USART6_UART_Init+0x4c>)
 8002716:	2200      	movs	r2, #0
 8002718:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800271a:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <MX_USART6_UART_Init+0x4c>)
 800271c:	2200      	movs	r2, #0
 800271e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002720:	4b09      	ldr	r3, [pc, #36]	; (8002748 <MX_USART6_UART_Init+0x4c>)
 8002722:	220c      	movs	r2, #12
 8002724:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002726:	4b08      	ldr	r3, [pc, #32]	; (8002748 <MX_USART6_UART_Init+0x4c>)
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <MX_USART6_UART_Init+0x4c>)
 800272e:	2200      	movs	r2, #0
 8002730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002732:	4805      	ldr	r0, [pc, #20]	; (8002748 <MX_USART6_UART_Init+0x4c>)
 8002734:	f003 f92a 	bl	800598c <HAL_UART_Init>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800273e:	f000 f925 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000d04 	.word	0x20000d04
 800274c:	40011400 	.word	0x40011400

08002750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08c      	sub	sp, #48	; 0x30
 8002754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002756:	f107 031c 	add.w	r3, r7, #28
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	605a      	str	r2, [r3, #4]
 8002760:	609a      	str	r2, [r3, #8]
 8002762:	60da      	str	r2, [r3, #12]
 8002764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	61bb      	str	r3, [r7, #24]
 800276a:	4b82      	ldr	r3, [pc, #520]	; (8002974 <MX_GPIO_Init+0x224>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a81      	ldr	r2, [pc, #516]	; (8002974 <MX_GPIO_Init+0x224>)
 8002770:	f043 0310 	orr.w	r3, r3, #16
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b7f      	ldr	r3, [pc, #508]	; (8002974 <MX_GPIO_Init+0x224>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	61bb      	str	r3, [r7, #24]
 8002780:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	4b7b      	ldr	r3, [pc, #492]	; (8002974 <MX_GPIO_Init+0x224>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a7a      	ldr	r2, [pc, #488]	; (8002974 <MX_GPIO_Init+0x224>)
 800278c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b78      	ldr	r3, [pc, #480]	; (8002974 <MX_GPIO_Init+0x224>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	4b74      	ldr	r3, [pc, #464]	; (8002974 <MX_GPIO_Init+0x224>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a73      	ldr	r2, [pc, #460]	; (8002974 <MX_GPIO_Init+0x224>)
 80027a8:	f043 0304 	orr.w	r3, r3, #4
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b71      	ldr	r3, [pc, #452]	; (8002974 <MX_GPIO_Init+0x224>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	4b6d      	ldr	r3, [pc, #436]	; (8002974 <MX_GPIO_Init+0x224>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	4a6c      	ldr	r2, [pc, #432]	; (8002974 <MX_GPIO_Init+0x224>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ca:	4b6a      	ldr	r3, [pc, #424]	; (8002974 <MX_GPIO_Init+0x224>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	4b66      	ldr	r3, [pc, #408]	; (8002974 <MX_GPIO_Init+0x224>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a65      	ldr	r2, [pc, #404]	; (8002974 <MX_GPIO_Init+0x224>)
 80027e0:	f043 0302 	orr.w	r3, r3, #2
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b63      	ldr	r3, [pc, #396]	; (8002974 <MX_GPIO_Init+0x224>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	607b      	str	r3, [r7, #4]
 80027f6:	4b5f      	ldr	r3, [pc, #380]	; (8002974 <MX_GPIO_Init+0x224>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	4a5e      	ldr	r2, [pc, #376]	; (8002974 <MX_GPIO_Init+0x224>)
 80027fc:	f043 0308 	orr.w	r3, r3, #8
 8002800:	6313      	str	r3, [r2, #48]	; 0x30
 8002802:	4b5c      	ldr	r3, [pc, #368]	; (8002974 <MX_GPIO_Init+0x224>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	607b      	str	r3, [r7, #4]
 800280c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WiFi_OK_Pin|DC_Salon_1_Pin|DC_Salon_2_Pin|L_Cocina_Pin
 800280e:	2200      	movs	r2, #0
 8002810:	f641 4131 	movw	r1, #7217	; 0x1c31
 8002814:	4858      	ldr	r0, [pc, #352]	; (8002978 <MX_GPIO_Init+0x228>)
 8002816:	f001 fcd1 	bl	80041bc <HAL_GPIO_WritePin>
                          |L_Garaje_Pin|L_Tendedero_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DHT22_Pin|DHT11_Pin, GPIO_PIN_RESET);
 800281a:	2200      	movs	r2, #0
 800281c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8002820:	4856      	ldr	r0, [pc, #344]	; (800297c <MX_GPIO_Init+0x22c>)
 8002822:	f001 fccb 	bl	80041bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Riego_Pin|Peltier_Pin|L_Espejo_Pin|L_Izquierda_Pin
 8002826:	2200      	movs	r2, #0
 8002828:	f24a 0178 	movw	r1, #41080	; 0xa078
 800282c:	4854      	ldr	r0, [pc, #336]	; (8002980 <MX_GPIO_Init+0x230>)
 800282e:	f001 fcc5 	bl	80041bc <HAL_GPIO_WritePin>
                          |L_Oficina_Pin|L_Derecha_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L_Fregadero_GPIO_Port, L_Fregadero_Pin, GPIO_PIN_RESET);
 8002832:	2200      	movs	r2, #0
 8002834:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002838:	4852      	ldr	r0, [pc, #328]	; (8002984 <MX_GPIO_Init+0x234>)
 800283a:	f001 fcbf 	bl	80041bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, L_Recibidor_Pin|L_Comedor_Pin|L_Jardin_Pin|L_Sala_Pin
 800283e:	2200      	movs	r2, #0
 8002840:	21ff      	movs	r1, #255	; 0xff
 8002842:	4851      	ldr	r0, [pc, #324]	; (8002988 <MX_GPIO_Init+0x238>)
 8002844:	f001 fcba 	bl	80041bc <HAL_GPIO_WritePin>
                          |L_Porche_Pin|L_Ambiente_Pin|L_Bano_Pin|L_Dormitorio_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B_Stop_Pin */
  GPIO_InitStruct.Pin = B_Stop_Pin;
 8002848:	2304      	movs	r3, #4
 800284a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800284c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B_Stop_GPIO_Port, &GPIO_InitStruct);
 8002856:	f107 031c 	add.w	r3, r7, #28
 800285a:	4619      	mov	r1, r3
 800285c:	4847      	ldr	r0, [pc, #284]	; (800297c <MX_GPIO_Init+0x22c>)
 800285e:	f001 faf9 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : S_Int_Pin Fin_Servo_Pin S_Ext_Pin */
  GPIO_InitStruct.Pin = S_Int_Pin|Fin_Servo_Pin|S_Ext_Pin;
 8002862:	231a      	movs	r3, #26
 8002864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002866:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800286a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800286c:	2301      	movs	r3, #1
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002870:	f107 031c 	add.w	r3, r7, #28
 8002874:	4619      	mov	r1, r3
 8002876:	4841      	ldr	r0, [pc, #260]	; (800297c <MX_GPIO_Init+0x22c>)
 8002878:	f001 faec 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : WiFi_OK_Pin DC_Salon_1_Pin DC_Salon_2_Pin L_Cocina_Pin
                           L_Garaje_Pin L_Tendedero_Pin */
  GPIO_InitStruct.Pin = WiFi_OK_Pin|DC_Salon_1_Pin|DC_Salon_2_Pin|L_Cocina_Pin
 800287c:	f641 4331 	movw	r3, #7217	; 0x1c31
 8002880:	61fb      	str	r3, [r7, #28]
                          |L_Garaje_Pin|L_Tendedero_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002882:	2301      	movs	r3, #1
 8002884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	2300      	movs	r3, #0
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288a:	2300      	movs	r3, #0
 800288c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800288e:	f107 031c 	add.w	r3, r7, #28
 8002892:	4619      	mov	r1, r3
 8002894:	4838      	ldr	r0, [pc, #224]	; (8002978 <MX_GPIO_Init+0x228>)
 8002896:	f001 fadd 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT22_Pin DHT11_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin|DHT11_Pin;
 800289a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800289e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a0:	2301      	movs	r3, #1
 80028a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a8:	2300      	movs	r3, #0
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028ac:	f107 031c 	add.w	r3, r7, #28
 80028b0:	4619      	mov	r1, r3
 80028b2:	4832      	ldr	r0, [pc, #200]	; (800297c <MX_GPIO_Init+0x22c>)
 80028b4:	f001 face 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : Riego_Pin Peltier_Pin L_Espejo_Pin L_Izquierda_Pin
                           L_Oficina_Pin L_Derecha_Pin */
  GPIO_InitStruct.Pin = Riego_Pin|Peltier_Pin|L_Espejo_Pin|L_Izquierda_Pin
 80028b8:	f24a 0378 	movw	r3, #41080	; 0xa078
 80028bc:	61fb      	str	r3, [r7, #28]
                          |L_Oficina_Pin|L_Derecha_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028be:	2301      	movs	r3, #1
 80028c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c6:	2300      	movs	r3, #0
 80028c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ca:	f107 031c 	add.w	r3, r7, #28
 80028ce:	4619      	mov	r1, r3
 80028d0:	482b      	ldr	r0, [pc, #172]	; (8002980 <MX_GPIO_Init+0x230>)
 80028d2:	f001 fabf 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_Fregadero_Pin */
  GPIO_InitStruct.Pin = L_Fregadero_Pin;
 80028d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028dc:	2301      	movs	r3, #1
 80028de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e4:	2300      	movs	r3, #0
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(L_Fregadero_GPIO_Port, &GPIO_InitStruct);
 80028e8:	f107 031c 	add.w	r3, r7, #28
 80028ec:	4619      	mov	r1, r3
 80028ee:	4825      	ldr	r0, [pc, #148]	; (8002984 <MX_GPIO_Init+0x234>)
 80028f0:	f001 fab0 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_Recibidor_Pin L_Comedor_Pin L_Jardin_Pin L_Sala_Pin
                           L_Porche_Pin L_Ambiente_Pin L_Bano_Pin L_Dormitorio_Pin */
  GPIO_InitStruct.Pin = L_Recibidor_Pin|L_Comedor_Pin|L_Jardin_Pin|L_Sala_Pin
 80028f4:	23ff      	movs	r3, #255	; 0xff
 80028f6:	61fb      	str	r3, [r7, #28]
                          |L_Porche_Pin|L_Ambiente_Pin|L_Bano_Pin|L_Dormitorio_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f8:	2301      	movs	r3, #1
 80028fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002900:	2300      	movs	r3, #0
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002904:	f107 031c 	add.w	r3, r7, #28
 8002908:	4619      	mov	r1, r3
 800290a:	481f      	ldr	r0, [pc, #124]	; (8002988 <MX_GPIO_Init+0x238>)
 800290c:	f001 faa2 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_Timbre_Pin */
  GPIO_InitStruct.Pin = B_Timbre_Pin;
 8002910:	2301      	movs	r3, #1
 8002912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002914:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800291a:	2302      	movs	r3, #2
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B_Timbre_GPIO_Port, &GPIO_InitStruct);
 800291e:	f107 031c 	add.w	r3, r7, #28
 8002922:	4619      	mov	r1, r3
 8002924:	4815      	ldr	r0, [pc, #84]	; (800297c <MX_GPIO_Init+0x22c>)
 8002926:	f001 fa95 	bl	8003e54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	2100      	movs	r1, #0
 800292e:	2006      	movs	r0, #6
 8002930:	f001 f9c7 	bl	8003cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002934:	2006      	movs	r0, #6
 8002936:	f001 f9e0 	bl	8003cfa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800293a:	2200      	movs	r2, #0
 800293c:	2100      	movs	r1, #0
 800293e:	2007      	movs	r0, #7
 8002940:	f001 f9bf 	bl	8003cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002944:	2007      	movs	r0, #7
 8002946:	f001 f9d8 	bl	8003cfa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800294a:	2200      	movs	r2, #0
 800294c:	2100      	movs	r1, #0
 800294e:	2009      	movs	r0, #9
 8002950:	f001 f9b7 	bl	8003cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002954:	2009      	movs	r0, #9
 8002956:	f001 f9d0 	bl	8003cfa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800295a:	2200      	movs	r2, #0
 800295c:	2100      	movs	r1, #0
 800295e:	200a      	movs	r0, #10
 8002960:	f001 f9af 	bl	8003cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002964:	200a      	movs	r0, #10
 8002966:	f001 f9c8 	bl	8003cfa <HAL_NVIC_EnableIRQ>

}
 800296a:	bf00      	nop
 800296c:	3730      	adds	r7, #48	; 0x30
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800
 8002978:	40020800 	.word	0x40020800
 800297c:	40021000 	.word	0x40021000
 8002980:	40020400 	.word	0x40020400
 8002984:	40020000 	.word	0x40020000
 8002988:	40020c00 	.word	0x40020c00

0800298c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002990:	b672      	cpsid	i
}
 8002992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002994:	e7fe      	b.n	8002994 <Error_Handler+0x8>
	...

08002998 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	607b      	str	r3, [r7, #4]
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <HAL_MspInit+0x4c>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	4a0f      	ldr	r2, [pc, #60]	; (80029e4 <HAL_MspInit+0x4c>)
 80029a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ac:	6453      	str	r3, [r2, #68]	; 0x44
 80029ae:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <HAL_MspInit+0x4c>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b6:	607b      	str	r3, [r7, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	603b      	str	r3, [r7, #0]
 80029be:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <HAL_MspInit+0x4c>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	4a08      	ldr	r2, [pc, #32]	; (80029e4 <HAL_MspInit+0x4c>)
 80029c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ca:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <HAL_MspInit+0x4c>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80029d6:	2007      	movs	r0, #7
 80029d8:	f001 f968 	bl	8003cac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40023800 	.word	0x40023800

080029e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08e      	sub	sp, #56	; 0x38
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a45      	ldr	r2, [pc, #276]	; (8002b1c <HAL_ADC_MspInit+0x134>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d128      	bne.n	8002a5c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	623b      	str	r3, [r7, #32]
 8002a0e:	4b44      	ldr	r3, [pc, #272]	; (8002b20 <HAL_ADC_MspInit+0x138>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	4a43      	ldr	r2, [pc, #268]	; (8002b20 <HAL_ADC_MspInit+0x138>)
 8002a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a18:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1a:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <HAL_ADC_MspInit+0x138>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a22:	623b      	str	r3, [r7, #32]
 8002a24:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
 8002a2a:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <HAL_ADC_MspInit+0x138>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	4a3c      	ldr	r2, [pc, #240]	; (8002b20 <HAL_ADC_MspInit+0x138>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6313      	str	r3, [r2, #48]	; 0x30
 8002a36:	4b3a      	ldr	r3, [pc, #232]	; (8002b20 <HAL_ADC_MspInit+0x138>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = LDR_Pin;
 8002a42:	2310      	movs	r3, #16
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a46:	2303      	movs	r3, #3
 8002a48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 8002a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a52:	4619      	mov	r1, r3
 8002a54:	4833      	ldr	r0, [pc, #204]	; (8002b24 <HAL_ADC_MspInit+0x13c>)
 8002a56:	f001 f9fd 	bl	8003e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002a5a:	e05a      	b.n	8002b12 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a31      	ldr	r2, [pc, #196]	; (8002b28 <HAL_ADC_MspInit+0x140>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d128      	bne.n	8002ab8 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	4b2d      	ldr	r3, [pc, #180]	; (8002b20 <HAL_ADC_MspInit+0x138>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	4a2c      	ldr	r2, [pc, #176]	; (8002b20 <HAL_ADC_MspInit+0x138>)
 8002a70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a74:	6453      	str	r3, [r2, #68]	; 0x44
 8002a76:	4b2a      	ldr	r3, [pc, #168]	; (8002b20 <HAL_ADC_MspInit+0x138>)
 8002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a7e:	61bb      	str	r3, [r7, #24]
 8002a80:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	4b26      	ldr	r3, [pc, #152]	; (8002b20 <HAL_ADC_MspInit+0x138>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	4a25      	ldr	r2, [pc, #148]	; (8002b20 <HAL_ADC_MspInit+0x138>)
 8002a8c:	f043 0302 	orr.w	r3, r3, #2
 8002a90:	6313      	str	r3, [r2, #48]	; 0x30
 8002a92:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <HAL_ADC_MspInit+0x138>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = HW_390_Pin;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HW_390_GPIO_Port, &GPIO_InitStruct);
 8002aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aae:	4619      	mov	r1, r3
 8002ab0:	481e      	ldr	r0, [pc, #120]	; (8002b2c <HAL_ADC_MspInit+0x144>)
 8002ab2:	f001 f9cf 	bl	8003e54 <HAL_GPIO_Init>
}
 8002ab6:	e02c      	b.n	8002b12 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a1c      	ldr	r2, [pc, #112]	; (8002b30 <HAL_ADC_MspInit+0x148>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d127      	bne.n	8002b12 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <HAL_ADC_MspInit+0x138>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	4a15      	ldr	r2, [pc, #84]	; (8002b20 <HAL_ADC_MspInit+0x138>)
 8002acc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad2:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <HAL_ADC_MspInit+0x138>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <HAL_ADC_MspInit+0x138>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	4a0e      	ldr	r2, [pc, #56]	; (8002b20 <HAL_ADC_MspInit+0x138>)
 8002ae8:	f043 0304 	orr.w	r3, r3, #4
 8002aec:	6313      	str	r3, [r2, #48]	; 0x30
 8002aee:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <HAL_ADC_MspInit+0x138>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Lluvia_Pin;
 8002afa:	2302      	movs	r3, #2
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002afe:	2303      	movs	r3, #3
 8002b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Lluvia_GPIO_Port, &GPIO_InitStruct);
 8002b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4809      	ldr	r0, [pc, #36]	; (8002b34 <HAL_ADC_MspInit+0x14c>)
 8002b0e:	f001 f9a1 	bl	8003e54 <HAL_GPIO_Init>
}
 8002b12:	bf00      	nop
 8002b14:	3738      	adds	r7, #56	; 0x38
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40012000 	.word	0x40012000
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40020000 	.word	0x40020000
 8002b28:	40012100 	.word	0x40012100
 8002b2c:	40020400 	.word	0x40020400
 8002b30:	40012200 	.word	0x40012200
 8002b34:	40020800 	.word	0x40020800

08002b38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b08b      	sub	sp, #44	; 0x2c
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a51      	ldr	r2, [pc, #324]	; (8002c8c <HAL_TIM_Base_MspInit+0x154>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d10e      	bne.n	8002b68 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4e:	4b50      	ldr	r3, [pc, #320]	; (8002c90 <HAL_TIM_Base_MspInit+0x158>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	4a4f      	ldr	r2, [pc, #316]	; (8002c90 <HAL_TIM_Base_MspInit+0x158>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	6453      	str	r3, [r2, #68]	; 0x44
 8002b5a:	4b4d      	ldr	r3, [pc, #308]	; (8002c90 <HAL_TIM_Base_MspInit+0x158>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002b66:	e08a      	b.n	8002c7e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b70:	d10e      	bne.n	8002b90 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	623b      	str	r3, [r7, #32]
 8002b76:	4b46      	ldr	r3, [pc, #280]	; (8002c90 <HAL_TIM_Base_MspInit+0x158>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	4a45      	ldr	r2, [pc, #276]	; (8002c90 <HAL_TIM_Base_MspInit+0x158>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6413      	str	r3, [r2, #64]	; 0x40
 8002b82:	4b43      	ldr	r3, [pc, #268]	; (8002c90 <HAL_TIM_Base_MspInit+0x158>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	623b      	str	r3, [r7, #32]
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
}
 8002b8e:	e076      	b.n	8002c7e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM3)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a3f      	ldr	r2, [pc, #252]	; (8002c94 <HAL_TIM_Base_MspInit+0x15c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d10e      	bne.n	8002bb8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
 8002b9e:	4b3c      	ldr	r3, [pc, #240]	; (8002c90 <HAL_TIM_Base_MspInit+0x158>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	4a3b      	ldr	r2, [pc, #236]	; (8002c90 <HAL_TIM_Base_MspInit+0x158>)
 8002ba4:	f043 0302 	orr.w	r3, r3, #2
 8002ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8002baa:	4b39      	ldr	r3, [pc, #228]	; (8002c90 <HAL_TIM_Base_MspInit+0x158>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	61fb      	str	r3, [r7, #28]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
}
 8002bb6:	e062      	b.n	8002c7e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM4)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a36      	ldr	r2, [pc, #216]	; (8002c98 <HAL_TIM_Base_MspInit+0x160>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d10e      	bne.n	8002be0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61bb      	str	r3, [r7, #24]
 8002bc6:	4b32      	ldr	r3, [pc, #200]	; (8002c90 <HAL_TIM_Base_MspInit+0x158>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	4a31      	ldr	r2, [pc, #196]	; (8002c90 <HAL_TIM_Base_MspInit+0x158>)
 8002bcc:	f043 0304 	orr.w	r3, r3, #4
 8002bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd2:	4b2f      	ldr	r3, [pc, #188]	; (8002c90 <HAL_TIM_Base_MspInit+0x158>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	61bb      	str	r3, [r7, #24]
 8002bdc:	69bb      	ldr	r3, [r7, #24]
}
 8002bde:	e04e      	b.n	8002c7e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM5)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a2d      	ldr	r2, [pc, #180]	; (8002c9c <HAL_TIM_Base_MspInit+0x164>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d10e      	bne.n	8002c08 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <HAL_TIM_Base_MspInit+0x158>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	4a27      	ldr	r2, [pc, #156]	; (8002c90 <HAL_TIM_Base_MspInit+0x158>)
 8002bf4:	f043 0308 	orr.w	r3, r3, #8
 8002bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfa:	4b25      	ldr	r3, [pc, #148]	; (8002c90 <HAL_TIM_Base_MspInit+0x158>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	697b      	ldr	r3, [r7, #20]
}
 8002c06:	e03a      	b.n	8002c7e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM6)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a24      	ldr	r2, [pc, #144]	; (8002ca0 <HAL_TIM_Base_MspInit+0x168>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d10e      	bne.n	8002c30 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <HAL_TIM_Base_MspInit+0x158>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	4a1d      	ldr	r2, [pc, #116]	; (8002c90 <HAL_TIM_Base_MspInit+0x158>)
 8002c1c:	f043 0310 	orr.w	r3, r3, #16
 8002c20:	6413      	str	r3, [r2, #64]	; 0x40
 8002c22:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <HAL_TIM_Base_MspInit+0x158>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	693b      	ldr	r3, [r7, #16]
}
 8002c2e:	e026      	b.n	8002c7e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM8)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a1b      	ldr	r2, [pc, #108]	; (8002ca4 <HAL_TIM_Base_MspInit+0x16c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d10e      	bne.n	8002c58 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <HAL_TIM_Base_MspInit+0x158>)
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	4a13      	ldr	r2, [pc, #76]	; (8002c90 <HAL_TIM_Base_MspInit+0x158>)
 8002c44:	f043 0302 	orr.w	r3, r3, #2
 8002c48:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4a:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <HAL_TIM_Base_MspInit+0x158>)
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
}
 8002c56:	e012      	b.n	8002c7e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM9)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <HAL_TIM_Base_MspInit+0x170>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d10d      	bne.n	8002c7e <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <HAL_TIM_Base_MspInit+0x158>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	4a09      	ldr	r2, [pc, #36]	; (8002c90 <HAL_TIM_Base_MspInit+0x158>)
 8002c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c70:	6453      	str	r3, [r2, #68]	; 0x44
 8002c72:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <HAL_TIM_Base_MspInit+0x158>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
}
 8002c7e:	bf00      	nop
 8002c80:	372c      	adds	r7, #44	; 0x2c
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40010000 	.word	0x40010000
 8002c90:	40023800 	.word	0x40023800
 8002c94:	40000400 	.word	0x40000400
 8002c98:	40000800 	.word	0x40000800
 8002c9c:	40000c00 	.word	0x40000c00
 8002ca0:	40001000 	.word	0x40001000
 8002ca4:	40010400 	.word	0x40010400
 8002ca8:	40014000 	.word	0x40014000

08002cac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08e      	sub	sp, #56	; 0x38
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a7a      	ldr	r2, [pc, #488]	; (8002eb4 <HAL_TIM_MspPostInit+0x208>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d11f      	bne.n	8002d0e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	623b      	str	r3, [r7, #32]
 8002cd2:	4b79      	ldr	r3, [pc, #484]	; (8002eb8 <HAL_TIM_MspPostInit+0x20c>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	4a78      	ldr	r2, [pc, #480]	; (8002eb8 <HAL_TIM_MspPostInit+0x20c>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cde:	4b76      	ldr	r3, [pc, #472]	; (8002eb8 <HAL_TIM_MspPostInit+0x20c>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	623b      	str	r3, [r7, #32]
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = L_GamingG_Pin|L_GamingR_Pin|L_GamingB_Pin;
 8002cea:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d04:	4619      	mov	r1, r3
 8002d06:	486d      	ldr	r0, [pc, #436]	; (8002ebc <HAL_TIM_MspPostInit+0x210>)
 8002d08:	f001 f8a4 	bl	8003e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002d0c:	e0cd      	b.n	8002eaa <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM2)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d16:	d13d      	bne.n	8002d94 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61fb      	str	r3, [r7, #28]
 8002d1c:	4b66      	ldr	r3, [pc, #408]	; (8002eb8 <HAL_TIM_MspPostInit+0x20c>)
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	4a65      	ldr	r2, [pc, #404]	; (8002eb8 <HAL_TIM_MspPostInit+0x20c>)
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	6313      	str	r3, [r2, #48]	; 0x30
 8002d28:	4b63      	ldr	r3, [pc, #396]	; (8002eb8 <HAL_TIM_MspPostInit+0x20c>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d34:	2300      	movs	r3, #0
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	4b5f      	ldr	r3, [pc, #380]	; (8002eb8 <HAL_TIM_MspPostInit+0x20c>)
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	4a5e      	ldr	r2, [pc, #376]	; (8002eb8 <HAL_TIM_MspPostInit+0x20c>)
 8002d3e:	f043 0302 	orr.w	r3, r3, #2
 8002d42:	6313      	str	r3, [r2, #48]	; 0x30
 8002d44:	4b5c      	ldr	r3, [pc, #368]	; (8002eb8 <HAL_TIM_MspPostInit+0x20c>)
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = S_Parcela_Pin|S_Garaje_Pin;
 8002d50:	2303      	movs	r3, #3
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d54:	2302      	movs	r3, #2
 8002d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d60:	2301      	movs	r3, #1
 8002d62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4854      	ldr	r0, [pc, #336]	; (8002ebc <HAL_TIM_MspPostInit+0x210>)
 8002d6c:	f001 f872 	bl	8003e54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S_Tendedero_Pin;
 8002d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d76:	2302      	movs	r3, #2
 8002d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d82:	2301      	movs	r3, #1
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(S_Tendedero_GPIO_Port, &GPIO_InitStruct);
 8002d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	484c      	ldr	r0, [pc, #304]	; (8002ec0 <HAL_TIM_MspPostInit+0x214>)
 8002d8e:	f001 f861 	bl	8003e54 <HAL_GPIO_Init>
}
 8002d92:	e08a      	b.n	8002eaa <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM3)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a4a      	ldr	r2, [pc, #296]	; (8002ec4 <HAL_TIM_MspPostInit+0x218>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d13d      	bne.n	8002e1a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	4b45      	ldr	r3, [pc, #276]	; (8002eb8 <HAL_TIM_MspPostInit+0x20c>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a44      	ldr	r2, [pc, #272]	; (8002eb8 <HAL_TIM_MspPostInit+0x20c>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b42      	ldr	r3, [pc, #264]	; (8002eb8 <HAL_TIM_MspPostInit+0x20c>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	613b      	str	r3, [r7, #16]
 8002dbe:	4b3e      	ldr	r3, [pc, #248]	; (8002eb8 <HAL_TIM_MspPostInit+0x20c>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	4a3d      	ldr	r2, [pc, #244]	; (8002eb8 <HAL_TIM_MspPostInit+0x20c>)
 8002dc4:	f043 0304 	orr.w	r3, r3, #4
 8002dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dca:	4b3b      	ldr	r3, [pc, #236]	; (8002eb8 <HAL_TIM_MspPostInit+0x20c>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = S_Dormitorio_Pin;
 8002dd6:	2380      	movs	r3, #128	; 0x80
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de2:	2300      	movs	r3, #0
 8002de4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002de6:	2302      	movs	r3, #2
 8002de8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(S_Dormitorio_GPIO_Port, &GPIO_InitStruct);
 8002dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dee:	4619      	mov	r1, r3
 8002df0:	4832      	ldr	r0, [pc, #200]	; (8002ebc <HAL_TIM_MspPostInit+0x210>)
 8002df2:	f001 f82f 	bl	8003e54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S_Oficina_Pin|S_Salon_Pin;
 8002df6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e04:	2300      	movs	r3, #0
 8002e06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e10:	4619      	mov	r1, r3
 8002e12:	482d      	ldr	r0, [pc, #180]	; (8002ec8 <HAL_TIM_MspPostInit+0x21c>)
 8002e14:	f001 f81e 	bl	8003e54 <HAL_GPIO_Init>
}
 8002e18:	e047      	b.n	8002eaa <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM4)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a2b      	ldr	r2, [pc, #172]	; (8002ecc <HAL_TIM_MspPostInit+0x220>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d11f      	bne.n	8002e64 <HAL_TIM_MspPostInit+0x1b8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	4b23      	ldr	r3, [pc, #140]	; (8002eb8 <HAL_TIM_MspPostInit+0x20c>)
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	4a22      	ldr	r2, [pc, #136]	; (8002eb8 <HAL_TIM_MspPostInit+0x20c>)
 8002e2e:	f043 0308 	orr.w	r3, r3, #8
 8002e32:	6313      	str	r3, [r2, #48]	; 0x30
 8002e34:	4b20      	ldr	r3, [pc, #128]	; (8002eb8 <HAL_TIM_MspPostInit+0x20c>)
 8002e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Z_Timbre_Pin;
 8002e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e52:	2302      	movs	r3, #2
 8002e54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Z_Timbre_GPIO_Port, &GPIO_InitStruct);
 8002e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	481c      	ldr	r0, [pc, #112]	; (8002ed0 <HAL_TIM_MspPostInit+0x224>)
 8002e5e:	f000 fff9 	bl	8003e54 <HAL_GPIO_Init>
}
 8002e62:	e022      	b.n	8002eaa <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM9)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a1a      	ldr	r2, [pc, #104]	; (8002ed4 <HAL_TIM_MspPostInit+0x228>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d11d      	bne.n	8002eaa <HAL_TIM_MspPostInit+0x1fe>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <HAL_TIM_MspPostInit+0x20c>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a10      	ldr	r2, [pc, #64]	; (8002eb8 <HAL_TIM_MspPostInit+0x20c>)
 8002e78:	f043 0310 	orr.w	r3, r3, #16
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <HAL_TIM_MspPostInit+0x20c>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e8a:	2320      	movs	r3, #32
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e96:	2300      	movs	r3, #0
 8002e98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	480c      	ldr	r0, [pc, #48]	; (8002ed8 <HAL_TIM_MspPostInit+0x22c>)
 8002ea6:	f000 ffd5 	bl	8003e54 <HAL_GPIO_Init>
}
 8002eaa:	bf00      	nop
 8002eac:	3738      	adds	r7, #56	; 0x38
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40010000 	.word	0x40010000
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40020000 	.word	0x40020000
 8002ec0:	40020400 	.word	0x40020400
 8002ec4:	40000400 	.word	0x40000400
 8002ec8:	40020800 	.word	0x40020800
 8002ecc:	40000800 	.word	0x40000800
 8002ed0:	40020c00 	.word	0x40020c00
 8002ed4:	40014000 	.word	0x40014000
 8002ed8:	40021000 	.word	0x40021000

08002edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08e      	sub	sp, #56	; 0x38
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a63      	ldr	r2, [pc, #396]	; (8003088 <HAL_UART_MspInit+0x1ac>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d134      	bne.n	8002f68 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	623b      	str	r3, [r7, #32]
 8002f02:	4b62      	ldr	r3, [pc, #392]	; (800308c <HAL_UART_MspInit+0x1b0>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	4a61      	ldr	r2, [pc, #388]	; (800308c <HAL_UART_MspInit+0x1b0>)
 8002f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0e:	4b5f      	ldr	r3, [pc, #380]	; (800308c <HAL_UART_MspInit+0x1b0>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	623b      	str	r3, [r7, #32]
 8002f18:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	4b5b      	ldr	r3, [pc, #364]	; (800308c <HAL_UART_MspInit+0x1b0>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	4a5a      	ldr	r2, [pc, #360]	; (800308c <HAL_UART_MspInit+0x1b0>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2a:	4b58      	ldr	r3, [pc, #352]	; (800308c <HAL_UART_MspInit+0x1b0>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	61fb      	str	r3, [r7, #28]
 8002f34:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f36:	230c      	movs	r3, #12
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f42:	2303      	movs	r3, #3
 8002f44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f46:	2307      	movs	r3, #7
 8002f48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f4e:	4619      	mov	r1, r3
 8002f50:	484f      	ldr	r0, [pc, #316]	; (8003090 <HAL_UART_MspInit+0x1b4>)
 8002f52:	f000 ff7f 	bl	8003e54 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f56:	2200      	movs	r2, #0
 8002f58:	2100      	movs	r1, #0
 8002f5a:	2026      	movs	r0, #38	; 0x26
 8002f5c:	f000 feb1 	bl	8003cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f60:	2026      	movs	r0, #38	; 0x26
 8002f62:	f000 feca 	bl	8003cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002f66:	e08a      	b.n	800307e <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART3)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a49      	ldr	r2, [pc, #292]	; (8003094 <HAL_UART_MspInit+0x1b8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d14c      	bne.n	800300c <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	61bb      	str	r3, [r7, #24]
 8002f76:	4b45      	ldr	r3, [pc, #276]	; (800308c <HAL_UART_MspInit+0x1b0>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	4a44      	ldr	r2, [pc, #272]	; (800308c <HAL_UART_MspInit+0x1b0>)
 8002f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f80:	6413      	str	r3, [r2, #64]	; 0x40
 8002f82:	4b42      	ldr	r3, [pc, #264]	; (800308c <HAL_UART_MspInit+0x1b0>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f8a:	61bb      	str	r3, [r7, #24]
 8002f8c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	4b3e      	ldr	r3, [pc, #248]	; (800308c <HAL_UART_MspInit+0x1b0>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	4a3d      	ldr	r2, [pc, #244]	; (800308c <HAL_UART_MspInit+0x1b0>)
 8002f98:	f043 0302 	orr.w	r3, r3, #2
 8002f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9e:	4b3b      	ldr	r3, [pc, #236]	; (800308c <HAL_UART_MspInit+0x1b0>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	4b37      	ldr	r3, [pc, #220]	; (800308c <HAL_UART_MspInit+0x1b0>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	4a36      	ldr	r2, [pc, #216]	; (800308c <HAL_UART_MspInit+0x1b0>)
 8002fb4:	f043 0308 	orr.w	r3, r3, #8
 8002fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fba:	4b34      	ldr	r3, [pc, #208]	; (800308c <HAL_UART_MspInit+0x1b0>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002fc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fd8:	2307      	movs	r3, #7
 8002fda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	482d      	ldr	r0, [pc, #180]	; (8003098 <HAL_UART_MspInit+0x1bc>)
 8002fe4:	f000 ff36 	bl	8003e54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ffa:	2307      	movs	r3, #7
 8002ffc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003002:	4619      	mov	r1, r3
 8003004:	4825      	ldr	r0, [pc, #148]	; (800309c <HAL_UART_MspInit+0x1c0>)
 8003006:	f000 ff25 	bl	8003e54 <HAL_GPIO_Init>
}
 800300a:	e038      	b.n	800307e <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART6)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a23      	ldr	r2, [pc, #140]	; (80030a0 <HAL_UART_MspInit+0x1c4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d133      	bne.n	800307e <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	4b1c      	ldr	r3, [pc, #112]	; (800308c <HAL_UART_MspInit+0x1b0>)
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	4a1b      	ldr	r2, [pc, #108]	; (800308c <HAL_UART_MspInit+0x1b0>)
 8003020:	f043 0320 	orr.w	r3, r3, #32
 8003024:	6453      	str	r3, [r2, #68]	; 0x44
 8003026:	4b19      	ldr	r3, [pc, #100]	; (800308c <HAL_UART_MspInit+0x1b0>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302a:	f003 0320 	and.w	r3, r3, #32
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	4b15      	ldr	r3, [pc, #84]	; (800308c <HAL_UART_MspInit+0x1b0>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	4a14      	ldr	r2, [pc, #80]	; (800308c <HAL_UART_MspInit+0x1b0>)
 800303c:	f043 0304 	orr.w	r3, r3, #4
 8003040:	6313      	str	r3, [r2, #48]	; 0x30
 8003042:	4b12      	ldr	r3, [pc, #72]	; (800308c <HAL_UART_MspInit+0x1b0>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800304e:	23c0      	movs	r3, #192	; 0xc0
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003052:	2302      	movs	r3, #2
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003056:	2300      	movs	r3, #0
 8003058:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800305a:	2303      	movs	r3, #3
 800305c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800305e:	2308      	movs	r3, #8
 8003060:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003066:	4619      	mov	r1, r3
 8003068:	480e      	ldr	r0, [pc, #56]	; (80030a4 <HAL_UART_MspInit+0x1c8>)
 800306a:	f000 fef3 	bl	8003e54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800306e:	2200      	movs	r2, #0
 8003070:	2100      	movs	r1, #0
 8003072:	2047      	movs	r0, #71	; 0x47
 8003074:	f000 fe25 	bl	8003cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003078:	2047      	movs	r0, #71	; 0x47
 800307a:	f000 fe3e 	bl	8003cfa <HAL_NVIC_EnableIRQ>
}
 800307e:	bf00      	nop
 8003080:	3738      	adds	r7, #56	; 0x38
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40004400 	.word	0x40004400
 800308c:	40023800 	.word	0x40023800
 8003090:	40020000 	.word	0x40020000
 8003094:	40004800 	.word	0x40004800
 8003098:	40020400 	.word	0x40020400
 800309c:	40020c00 	.word	0x40020c00
 80030a0:	40011400 	.word	0x40011400
 80030a4:	40020800 	.word	0x40020800

080030a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030ac:	e7fe      	b.n	80030ac <NMI_Handler+0x4>

080030ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030b2:	e7fe      	b.n	80030b2 <HardFault_Handler+0x4>

080030b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030b8:	e7fe      	b.n	80030b8 <MemManage_Handler+0x4>

080030ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ba:	b480      	push	{r7}
 80030bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030be:	e7fe      	b.n	80030be <BusFault_Handler+0x4>

080030c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030c4:	e7fe      	b.n	80030c4 <UsageFault_Handler+0x4>

080030c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030c6:	b480      	push	{r7}
 80030c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030d8:	bf00      	nop
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030e2:	b480      	push	{r7}
 80030e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030e6:	bf00      	nop
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030f4:	f000 f8fa 	bl	80032ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030f8:	bf00      	nop
 80030fa:	bd80      	pop	{r7, pc}

080030fc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003100:	2001      	movs	r0, #1
 8003102:	f001 f875 	bl	80041f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}

0800310a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800310e:	2002      	movs	r0, #2
 8003110:	f001 f86e 	bl	80041f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003114:	bf00      	nop
 8003116:	bd80      	pop	{r7, pc}

08003118 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800311c:	2008      	movs	r0, #8
 800311e:	f001 f867 	bl	80041f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	bd80      	pop	{r7, pc}

08003126 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800312a:	2010      	movs	r0, #16
 800312c:	f001 f860 	bl	80041f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003130:	bf00      	nop
 8003132:	bd80      	pop	{r7, pc}

08003134 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UART_isr(&huart2);
 8003138:	4803      	ldr	r0, [pc, #12]	; (8003148 <USART2_IRQHandler+0x14>)
 800313a:	f7fe fa45 	bl	80015c8 <UART_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800313e:	4802      	ldr	r0, [pc, #8]	; (8003148 <USART2_IRQHandler+0x14>)
 8003140:	f002 fda6 	bl	8005c90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003144:	bf00      	nop
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20000d90 	.word	0x20000d90

0800314c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	UART_isr(&huart6);
 8003150:	4803      	ldr	r0, [pc, #12]	; (8003160 <USART6_IRQHandler+0x14>)
 8003152:	f7fe fa39 	bl	80015c8 <UART_isr>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003156:	4802      	ldr	r0, [pc, #8]	; (8003160 <USART6_IRQHandler+0x14>)
 8003158:	f002 fd9a 	bl	8005c90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800315c:	bf00      	nop
 800315e:	bd80      	pop	{r7, pc}
 8003160:	20000d04 	.word	0x20000d04

08003164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800316c:	4a14      	ldr	r2, [pc, #80]	; (80031c0 <_sbrk+0x5c>)
 800316e:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <_sbrk+0x60>)
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003178:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <_sbrk+0x64>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d102      	bne.n	8003186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003180:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <_sbrk+0x64>)
 8003182:	4a12      	ldr	r2, [pc, #72]	; (80031cc <_sbrk+0x68>)
 8003184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003186:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <_sbrk+0x64>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4413      	add	r3, r2
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	429a      	cmp	r2, r3
 8003192:	d207      	bcs.n	80031a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003194:	f003 fc04 	bl	80069a0 <__errno>
 8003198:	4603      	mov	r3, r0
 800319a:	220c      	movs	r2, #12
 800319c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800319e:	f04f 33ff 	mov.w	r3, #4294967295
 80031a2:	e009      	b.n	80031b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031a4:	4b08      	ldr	r3, [pc, #32]	; (80031c8 <_sbrk+0x64>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031aa:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <_sbrk+0x64>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4413      	add	r3, r2
 80031b2:	4a05      	ldr	r2, [pc, #20]	; (80031c8 <_sbrk+0x64>)
 80031b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031b6:	68fb      	ldr	r3, [r7, #12]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20020000 	.word	0x20020000
 80031c4:	00000400 	.word	0x00000400
 80031c8:	200008cc 	.word	0x200008cc
 80031cc:	20000de8 	.word	0x20000de8

080031d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <SystemInit+0x20>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	4a05      	ldr	r2, [pc, #20]	; (80031f0 <SystemInit+0x20>)
 80031dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	e000ed00 	.word	0xe000ed00

080031f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80031f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800322c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031f8:	480d      	ldr	r0, [pc, #52]	; (8003230 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031fa:	490e      	ldr	r1, [pc, #56]	; (8003234 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031fc:	4a0e      	ldr	r2, [pc, #56]	; (8003238 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003200:	e002      	b.n	8003208 <LoopCopyDataInit>

08003202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003206:	3304      	adds	r3, #4

08003208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800320a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800320c:	d3f9      	bcc.n	8003202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800320e:	4a0b      	ldr	r2, [pc, #44]	; (800323c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003210:	4c0b      	ldr	r4, [pc, #44]	; (8003240 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003214:	e001      	b.n	800321a <LoopFillZerobss>

08003216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003218:	3204      	adds	r2, #4

0800321a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800321a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800321c:	d3fb      	bcc.n	8003216 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800321e:	f7ff ffd7 	bl	80031d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003222:	f003 fbc3 	bl	80069ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003226:	f7fe fb51 	bl	80018cc <main>
  bx  lr    
 800322a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800322c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003234:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003238:	080079f4 	.word	0x080079f4
  ldr r2, =_sbss
 800323c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003240:	20000de8 	.word	0x20000de8

08003244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003244:	e7fe      	b.n	8003244 <ADC_IRQHandler>
	...

08003248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800324c:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <HAL_Init+0x40>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a0d      	ldr	r2, [pc, #52]	; (8003288 <HAL_Init+0x40>)
 8003252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003256:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <HAL_Init+0x40>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <HAL_Init+0x40>)
 800325e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003262:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003264:	4b08      	ldr	r3, [pc, #32]	; (8003288 <HAL_Init+0x40>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a07      	ldr	r2, [pc, #28]	; (8003288 <HAL_Init+0x40>)
 800326a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800326e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003270:	2003      	movs	r0, #3
 8003272:	f000 fd1b 	bl	8003cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003276:	2000      	movs	r0, #0
 8003278:	f000 f808 	bl	800328c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800327c:	f7ff fb8c 	bl	8002998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40023c00 	.word	0x40023c00

0800328c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003294:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <HAL_InitTick+0x54>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <HAL_InitTick+0x58>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	4619      	mov	r1, r3
 800329e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 fd33 	bl	8003d16 <HAL_SYSTICK_Config>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e00e      	b.n	80032d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b0f      	cmp	r3, #15
 80032be:	d80a      	bhi.n	80032d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032c0:	2200      	movs	r2, #0
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	f04f 30ff 	mov.w	r0, #4294967295
 80032c8:	f000 fcfb 	bl	8003cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032cc:	4a06      	ldr	r2, [pc, #24]	; (80032e8 <HAL_InitTick+0x5c>)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	e000      	b.n	80032d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	20000000 	.word	0x20000000
 80032e4:	20000008 	.word	0x20000008
 80032e8:	20000004 	.word	0x20000004

080032ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032f0:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_IncTick+0x20>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	461a      	mov	r2, r3
 80032f6:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_IncTick+0x24>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4413      	add	r3, r2
 80032fc:	4a04      	ldr	r2, [pc, #16]	; (8003310 <HAL_IncTick+0x24>)
 80032fe:	6013      	str	r3, [r2, #0]
}
 8003300:	bf00      	nop
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	20000008 	.word	0x20000008
 8003310:	20000dd4 	.word	0x20000dd4

08003314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return uwTick;
 8003318:	4b03      	ldr	r3, [pc, #12]	; (8003328 <HAL_GetTick+0x14>)
 800331a:	681b      	ldr	r3, [r3, #0]
}
 800331c:	4618      	mov	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	20000dd4 	.word	0x20000dd4

0800332c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003334:	f7ff ffee 	bl	8003314 <HAL_GetTick>
 8003338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003344:	d005      	beq.n	8003352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003346:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <HAL_Delay+0x44>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4413      	add	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003352:	bf00      	nop
 8003354:	f7ff ffde 	bl	8003314 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	429a      	cmp	r2, r3
 8003362:	d8f7      	bhi.n	8003354 <HAL_Delay+0x28>
  {
  }
}
 8003364:	bf00      	nop
 8003366:	bf00      	nop
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20000008 	.word	0x20000008

08003374 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e033      	b.n	80033f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff fb28 	bl	80029e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f003 0310 	and.w	r3, r3, #16
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d118      	bne.n	80033e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033ba:	f023 0302 	bic.w	r3, r3, #2
 80033be:	f043 0202 	orr.w	r2, r3, #2
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 faa4 	bl	8003914 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f023 0303 	bic.w	r3, r3, #3
 80033da:	f043 0201 	orr.w	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40
 80033e2:	e001      	b.n	80033e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_ADC_Start+0x1a>
 8003412:	2302      	movs	r3, #2
 8003414:	e0b2      	b.n	800357c <HAL_ADC_Start+0x180>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b01      	cmp	r3, #1
 800342a:	d018      	beq.n	800345e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800343c:	4b52      	ldr	r3, [pc, #328]	; (8003588 <HAL_ADC_Start+0x18c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a52      	ldr	r2, [pc, #328]	; (800358c <HAL_ADC_Start+0x190>)
 8003442:	fba2 2303 	umull	r2, r3, r2, r3
 8003446:	0c9a      	lsrs	r2, r3, #18
 8003448:	4613      	mov	r3, r2
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	4413      	add	r3, r2
 800344e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003450:	e002      	b.n	8003458 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	3b01      	subs	r3, #1
 8003456:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f9      	bne.n	8003452 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b01      	cmp	r3, #1
 800346a:	d17a      	bne.n	8003562 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003474:	f023 0301 	bic.w	r3, r3, #1
 8003478:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348a:	2b00      	cmp	r3, #0
 800348c:	d007      	beq.n	800349e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003496:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034aa:	d106      	bne.n	80034ba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	f023 0206 	bic.w	r2, r3, #6
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	645a      	str	r2, [r3, #68]	; 0x44
 80034b8:	e002      	b.n	80034c0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034c8:	4b31      	ldr	r3, [pc, #196]	; (8003590 <HAL_ADC_Start+0x194>)
 80034ca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80034d4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 031f 	and.w	r3, r3, #31
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d12a      	bne.n	8003538 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a2b      	ldr	r2, [pc, #172]	; (8003594 <HAL_ADC_Start+0x198>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d015      	beq.n	8003518 <HAL_ADC_Start+0x11c>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a29      	ldr	r2, [pc, #164]	; (8003598 <HAL_ADC_Start+0x19c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d105      	bne.n	8003502 <HAL_ADC_Start+0x106>
 80034f6:	4b26      	ldr	r3, [pc, #152]	; (8003590 <HAL_ADC_Start+0x194>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 031f 	and.w	r3, r3, #31
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a25      	ldr	r2, [pc, #148]	; (800359c <HAL_ADC_Start+0x1a0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d136      	bne.n	800357a <HAL_ADC_Start+0x17e>
 800350c:	4b20      	ldr	r3, [pc, #128]	; (8003590 <HAL_ADC_Start+0x194>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 0310 	and.w	r3, r3, #16
 8003514:	2b00      	cmp	r3, #0
 8003516:	d130      	bne.n	800357a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d129      	bne.n	800357a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003534:	609a      	str	r2, [r3, #8]
 8003536:	e020      	b.n	800357a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a15      	ldr	r2, [pc, #84]	; (8003594 <HAL_ADC_Start+0x198>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d11b      	bne.n	800357a <HAL_ADC_Start+0x17e>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d114      	bne.n	800357a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800355e:	609a      	str	r2, [r3, #8]
 8003560:	e00b      	b.n	800357a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f043 0210 	orr.w	r2, r3, #16
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	f043 0201 	orr.w	r2, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	20000000 	.word	0x20000000
 800358c:	431bde83 	.word	0x431bde83
 8003590:	40012300 	.word	0x40012300
 8003594:	40012000 	.word	0x40012000
 8003598:	40012100 	.word	0x40012100
 800359c:	40012200 	.word	0x40012200

080035a0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035bc:	d113      	bne.n	80035e6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80035c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035cc:	d10b      	bne.n	80035e6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f043 0220 	orr.w	r2, r3, #32
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e063      	b.n	80036ae <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80035e6:	f7ff fe95 	bl	8003314 <HAL_GetTick>
 80035ea:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80035ec:	e021      	b.n	8003632 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f4:	d01d      	beq.n	8003632 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d007      	beq.n	800360c <HAL_ADC_PollForConversion+0x6c>
 80035fc:	f7ff fe8a 	bl	8003314 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d212      	bcs.n	8003632 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b02      	cmp	r3, #2
 8003618:	d00b      	beq.n	8003632 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	f043 0204 	orr.w	r2, r3, #4
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e03d      	b.n	80036ae <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b02      	cmp	r3, #2
 800363e:	d1d6      	bne.n	80035ee <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0212 	mvn.w	r2, #18
 8003648:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d123      	bne.n	80036ac <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003668:	2b00      	cmp	r3, #0
 800366a:	d11f      	bne.n	80036ac <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003676:	2b00      	cmp	r3, #0
 8003678:	d006      	beq.n	8003688 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003684:	2b00      	cmp	r3, #0
 8003686:	d111      	bne.n	80036ac <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d105      	bne.n	80036ac <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	f043 0201 	orr.w	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x1c>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e105      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x228>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b09      	cmp	r3, #9
 80036fa:	d925      	bls.n	8003748 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68d9      	ldr	r1, [r3, #12]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	b29b      	uxth	r3, r3
 8003708:	461a      	mov	r2, r3
 800370a:	4613      	mov	r3, r2
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	4413      	add	r3, r2
 8003710:	3b1e      	subs	r3, #30
 8003712:	2207      	movs	r2, #7
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43da      	mvns	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	400a      	ands	r2, r1
 8003720:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68d9      	ldr	r1, [r3, #12]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	b29b      	uxth	r3, r3
 8003732:	4618      	mov	r0, r3
 8003734:	4603      	mov	r3, r0
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	4403      	add	r3, r0
 800373a:	3b1e      	subs	r3, #30
 800373c:	409a      	lsls	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	e022      	b.n	800378e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6919      	ldr	r1, [r3, #16]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	b29b      	uxth	r3, r3
 8003754:	461a      	mov	r2, r3
 8003756:	4613      	mov	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4413      	add	r3, r2
 800375c:	2207      	movs	r2, #7
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43da      	mvns	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	400a      	ands	r2, r1
 800376a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6919      	ldr	r1, [r3, #16]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	b29b      	uxth	r3, r3
 800377c:	4618      	mov	r0, r3
 800377e:	4603      	mov	r3, r0
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	4403      	add	r3, r0
 8003784:	409a      	lsls	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b06      	cmp	r3, #6
 8003794:	d824      	bhi.n	80037e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	3b05      	subs	r3, #5
 80037a8:	221f      	movs	r2, #31
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43da      	mvns	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	400a      	ands	r2, r1
 80037b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	4618      	mov	r0, r3
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	3b05      	subs	r3, #5
 80037d2:	fa00 f203 	lsl.w	r2, r0, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	635a      	str	r2, [r3, #52]	; 0x34
 80037de:	e04c      	b.n	800387a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b0c      	cmp	r3, #12
 80037e6:	d824      	bhi.n	8003832 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	3b23      	subs	r3, #35	; 0x23
 80037fa:	221f      	movs	r2, #31
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	43da      	mvns	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	400a      	ands	r2, r1
 8003808:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	b29b      	uxth	r3, r3
 8003816:	4618      	mov	r0, r3
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	3b23      	subs	r3, #35	; 0x23
 8003824:	fa00 f203 	lsl.w	r2, r0, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	631a      	str	r2, [r3, #48]	; 0x30
 8003830:	e023      	b.n	800387a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	3b41      	subs	r3, #65	; 0x41
 8003844:	221f      	movs	r2, #31
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43da      	mvns	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	400a      	ands	r2, r1
 8003852:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	b29b      	uxth	r3, r3
 8003860:	4618      	mov	r0, r3
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	3b41      	subs	r3, #65	; 0x41
 800386e:	fa00 f203 	lsl.w	r2, r0, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800387a:	4b22      	ldr	r3, [pc, #136]	; (8003904 <HAL_ADC_ConfigChannel+0x234>)
 800387c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a21      	ldr	r2, [pc, #132]	; (8003908 <HAL_ADC_ConfigChannel+0x238>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d109      	bne.n	800389c <HAL_ADC_ConfigChannel+0x1cc>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b12      	cmp	r3, #18
 800388e:	d105      	bne.n	800389c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a19      	ldr	r2, [pc, #100]	; (8003908 <HAL_ADC_ConfigChannel+0x238>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d123      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x21e>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b10      	cmp	r3, #16
 80038ac:	d003      	beq.n	80038b6 <HAL_ADC_ConfigChannel+0x1e6>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b11      	cmp	r3, #17
 80038b4:	d11b      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b10      	cmp	r3, #16
 80038c8:	d111      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038ca:	4b10      	ldr	r3, [pc, #64]	; (800390c <HAL_ADC_ConfigChannel+0x23c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a10      	ldr	r2, [pc, #64]	; (8003910 <HAL_ADC_ConfigChannel+0x240>)
 80038d0:	fba2 2303 	umull	r2, r3, r2, r3
 80038d4:	0c9a      	lsrs	r2, r3, #18
 80038d6:	4613      	mov	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038e0:	e002      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f9      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	40012300 	.word	0x40012300
 8003908:	40012000 	.word	0x40012000
 800390c:	20000000 	.word	0x20000000
 8003910:	431bde83 	.word	0x431bde83

08003914 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800391c:	4b79      	ldr	r3, [pc, #484]	; (8003b04 <ADC_Init+0x1f0>)
 800391e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	431a      	orrs	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003948:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6859      	ldr	r1, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	021a      	lsls	r2, r3, #8
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800396c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6859      	ldr	r1, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800398e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6899      	ldr	r1, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a6:	4a58      	ldr	r2, [pc, #352]	; (8003b08 <ADC_Init+0x1f4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d022      	beq.n	80039f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6899      	ldr	r1, [r3, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6899      	ldr	r1, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	e00f      	b.n	8003a12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0202 	bic.w	r2, r2, #2
 8003a20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6899      	ldr	r1, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	7e1b      	ldrb	r3, [r3, #24]
 8003a2c:	005a      	lsls	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01b      	beq.n	8003a78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6859      	ldr	r1, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	035a      	lsls	r2, r3, #13
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	605a      	str	r2, [r3, #4]
 8003a76:	e007      	b.n	8003a88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	051a      	lsls	r2, r3, #20
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003abc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6899      	ldr	r1, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003aca:	025a      	lsls	r2, r3, #9
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6899      	ldr	r1, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	029a      	lsls	r2, r3, #10
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	609a      	str	r2, [r3, #8]
}
 8003af8:	bf00      	nop
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	40012300 	.word	0x40012300
 8003b08:	0f000001 	.word	0x0f000001

08003b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b1c:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <__NVIC_SetPriorityGrouping+0x44>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b28:	4013      	ands	r3, r2
 8003b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b3e:	4a04      	ldr	r2, [pc, #16]	; (8003b50 <__NVIC_SetPriorityGrouping+0x44>)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	60d3      	str	r3, [r2, #12]
}
 8003b44:	bf00      	nop
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	e000ed00 	.word	0xe000ed00

08003b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b58:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <__NVIC_GetPriorityGrouping+0x18>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	0a1b      	lsrs	r3, r3, #8
 8003b5e:	f003 0307 	and.w	r3, r3, #7
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	e000ed00 	.word	0xe000ed00

08003b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	db0b      	blt.n	8003b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b82:	79fb      	ldrb	r3, [r7, #7]
 8003b84:	f003 021f 	and.w	r2, r3, #31
 8003b88:	4907      	ldr	r1, [pc, #28]	; (8003ba8 <__NVIC_EnableIRQ+0x38>)
 8003b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	2001      	movs	r0, #1
 8003b92:	fa00 f202 	lsl.w	r2, r0, r2
 8003b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	e000e100 	.word	0xe000e100

08003bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	6039      	str	r1, [r7, #0]
 8003bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	db0a      	blt.n	8003bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	490c      	ldr	r1, [pc, #48]	; (8003bf8 <__NVIC_SetPriority+0x4c>)
 8003bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bca:	0112      	lsls	r2, r2, #4
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	440b      	add	r3, r1
 8003bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bd4:	e00a      	b.n	8003bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	4908      	ldr	r1, [pc, #32]	; (8003bfc <__NVIC_SetPriority+0x50>)
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	3b04      	subs	r3, #4
 8003be4:	0112      	lsls	r2, r2, #4
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	440b      	add	r3, r1
 8003bea:	761a      	strb	r2, [r3, #24]
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	e000e100 	.word	0xe000e100
 8003bfc:	e000ed00 	.word	0xe000ed00

08003c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b089      	sub	sp, #36	; 0x24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f1c3 0307 	rsb	r3, r3, #7
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	bf28      	it	cs
 8003c1e:	2304      	movcs	r3, #4
 8003c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	3304      	adds	r3, #4
 8003c26:	2b06      	cmp	r3, #6
 8003c28:	d902      	bls.n	8003c30 <NVIC_EncodePriority+0x30>
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	3b03      	subs	r3, #3
 8003c2e:	e000      	b.n	8003c32 <NVIC_EncodePriority+0x32>
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c34:	f04f 32ff 	mov.w	r2, #4294967295
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43da      	mvns	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	401a      	ands	r2, r3
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c48:	f04f 31ff 	mov.w	r1, #4294967295
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c52:	43d9      	mvns	r1, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c58:	4313      	orrs	r3, r2
         );
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3724      	adds	r7, #36	; 0x24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c78:	d301      	bcc.n	8003c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e00f      	b.n	8003c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ca8 <SysTick_Config+0x40>)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c86:	210f      	movs	r1, #15
 8003c88:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8c:	f7ff ff8e 	bl	8003bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c90:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <SysTick_Config+0x40>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c96:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <SysTick_Config+0x40>)
 8003c98:	2207      	movs	r2, #7
 8003c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	e000e010 	.word	0xe000e010

08003cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff ff29 	bl	8003b0c <__NVIC_SetPriorityGrouping>
}
 8003cba:	bf00      	nop
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b086      	sub	sp, #24
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	4603      	mov	r3, r0
 8003cca:	60b9      	str	r1, [r7, #8]
 8003ccc:	607a      	str	r2, [r7, #4]
 8003cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cd4:	f7ff ff3e 	bl	8003b54 <__NVIC_GetPriorityGrouping>
 8003cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	68b9      	ldr	r1, [r7, #8]
 8003cde:	6978      	ldr	r0, [r7, #20]
 8003ce0:	f7ff ff8e 	bl	8003c00 <NVIC_EncodePriority>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cea:	4611      	mov	r1, r2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff ff5d 	bl	8003bac <__NVIC_SetPriority>
}
 8003cf2:	bf00      	nop
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	4603      	mov	r3, r0
 8003d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff ff31 	bl	8003b70 <__NVIC_EnableIRQ>
}
 8003d0e:	bf00      	nop
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b082      	sub	sp, #8
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff ffa2 	bl	8003c68 <SysTick_Config>
 8003d24:	4603      	mov	r3, r0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d3c:	f7ff faea 	bl	8003314 <HAL_GetTick>
 8003d40:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d008      	beq.n	8003d60 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2280      	movs	r2, #128	; 0x80
 8003d52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e052      	b.n	8003e06 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0216 	bic.w	r2, r2, #22
 8003d6e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695a      	ldr	r2, [r3, #20]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d7e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d103      	bne.n	8003d90 <HAL_DMA_Abort+0x62>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d007      	beq.n	8003da0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0208 	bic.w	r2, r2, #8
 8003d9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0201 	bic.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003db0:	e013      	b.n	8003dda <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003db2:	f7ff faaf 	bl	8003314 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b05      	cmp	r3, #5
 8003dbe:	d90c      	bls.n	8003dda <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2203      	movs	r2, #3
 8003dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e015      	b.n	8003e06 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e4      	bne.n	8003db2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dec:	223f      	movs	r2, #63	; 0x3f
 8003dee:	409a      	lsls	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d004      	beq.n	8003e2c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2280      	movs	r2, #128	; 0x80
 8003e26:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e00c      	b.n	8003e46 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2205      	movs	r2, #5
 8003e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0201 	bic.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
	...

08003e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b089      	sub	sp, #36	; 0x24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61fb      	str	r3, [r7, #28]
 8003e6e:	e16b      	b.n	8004148 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e70:	2201      	movs	r2, #1
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4013      	ands	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	f040 815a 	bne.w	8004142 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d005      	beq.n	8003ea6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d130      	bne.n	8003f08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003edc:	2201      	movs	r2, #1
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	091b      	lsrs	r3, r3, #4
 8003ef2:	f003 0201 	and.w	r2, r3, #1
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d017      	beq.n	8003f44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	2203      	movs	r2, #3
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	43db      	mvns	r3, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d123      	bne.n	8003f98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	08da      	lsrs	r2, r3, #3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3208      	adds	r2, #8
 8003f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	220f      	movs	r2, #15
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4013      	ands	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	691a      	ldr	r2, [r3, #16]
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	08da      	lsrs	r2, r3, #3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3208      	adds	r2, #8
 8003f92:	69b9      	ldr	r1, [r7, #24]
 8003f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4013      	ands	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 0203 	and.w	r2, r3, #3
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 80b4 	beq.w	8004142 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	4b60      	ldr	r3, [pc, #384]	; (8004160 <HAL_GPIO_Init+0x30c>)
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe2:	4a5f      	ldr	r2, [pc, #380]	; (8004160 <HAL_GPIO_Init+0x30c>)
 8003fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8003fea:	4b5d      	ldr	r3, [pc, #372]	; (8004160 <HAL_GPIO_Init+0x30c>)
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ff6:	4a5b      	ldr	r2, [pc, #364]	; (8004164 <HAL_GPIO_Init+0x310>)
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	089b      	lsrs	r3, r3, #2
 8003ffc:	3302      	adds	r3, #2
 8003ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	220f      	movs	r2, #15
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	43db      	mvns	r3, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4013      	ands	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a52      	ldr	r2, [pc, #328]	; (8004168 <HAL_GPIO_Init+0x314>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d02b      	beq.n	800407a <HAL_GPIO_Init+0x226>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a51      	ldr	r2, [pc, #324]	; (800416c <HAL_GPIO_Init+0x318>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d025      	beq.n	8004076 <HAL_GPIO_Init+0x222>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a50      	ldr	r2, [pc, #320]	; (8004170 <HAL_GPIO_Init+0x31c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d01f      	beq.n	8004072 <HAL_GPIO_Init+0x21e>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a4f      	ldr	r2, [pc, #316]	; (8004174 <HAL_GPIO_Init+0x320>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d019      	beq.n	800406e <HAL_GPIO_Init+0x21a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a4e      	ldr	r2, [pc, #312]	; (8004178 <HAL_GPIO_Init+0x324>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d013      	beq.n	800406a <HAL_GPIO_Init+0x216>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a4d      	ldr	r2, [pc, #308]	; (800417c <HAL_GPIO_Init+0x328>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00d      	beq.n	8004066 <HAL_GPIO_Init+0x212>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a4c      	ldr	r2, [pc, #304]	; (8004180 <HAL_GPIO_Init+0x32c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d007      	beq.n	8004062 <HAL_GPIO_Init+0x20e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a4b      	ldr	r2, [pc, #300]	; (8004184 <HAL_GPIO_Init+0x330>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d101      	bne.n	800405e <HAL_GPIO_Init+0x20a>
 800405a:	2307      	movs	r3, #7
 800405c:	e00e      	b.n	800407c <HAL_GPIO_Init+0x228>
 800405e:	2308      	movs	r3, #8
 8004060:	e00c      	b.n	800407c <HAL_GPIO_Init+0x228>
 8004062:	2306      	movs	r3, #6
 8004064:	e00a      	b.n	800407c <HAL_GPIO_Init+0x228>
 8004066:	2305      	movs	r3, #5
 8004068:	e008      	b.n	800407c <HAL_GPIO_Init+0x228>
 800406a:	2304      	movs	r3, #4
 800406c:	e006      	b.n	800407c <HAL_GPIO_Init+0x228>
 800406e:	2303      	movs	r3, #3
 8004070:	e004      	b.n	800407c <HAL_GPIO_Init+0x228>
 8004072:	2302      	movs	r3, #2
 8004074:	e002      	b.n	800407c <HAL_GPIO_Init+0x228>
 8004076:	2301      	movs	r3, #1
 8004078:	e000      	b.n	800407c <HAL_GPIO_Init+0x228>
 800407a:	2300      	movs	r3, #0
 800407c:	69fa      	ldr	r2, [r7, #28]
 800407e:	f002 0203 	and.w	r2, r2, #3
 8004082:	0092      	lsls	r2, r2, #2
 8004084:	4093      	lsls	r3, r2
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4313      	orrs	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800408c:	4935      	ldr	r1, [pc, #212]	; (8004164 <HAL_GPIO_Init+0x310>)
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	089b      	lsrs	r3, r3, #2
 8004092:	3302      	adds	r3, #2
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800409a:	4b3b      	ldr	r3, [pc, #236]	; (8004188 <HAL_GPIO_Init+0x334>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	43db      	mvns	r3, r3
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	4013      	ands	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040be:	4a32      	ldr	r2, [pc, #200]	; (8004188 <HAL_GPIO_Init+0x334>)
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040c4:	4b30      	ldr	r3, [pc, #192]	; (8004188 <HAL_GPIO_Init+0x334>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	43db      	mvns	r3, r3
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4013      	ands	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040e8:	4a27      	ldr	r2, [pc, #156]	; (8004188 <HAL_GPIO_Init+0x334>)
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040ee:	4b26      	ldr	r3, [pc, #152]	; (8004188 <HAL_GPIO_Init+0x334>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	43db      	mvns	r3, r3
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	4013      	ands	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004112:	4a1d      	ldr	r2, [pc, #116]	; (8004188 <HAL_GPIO_Init+0x334>)
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004118:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <HAL_GPIO_Init+0x334>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	43db      	mvns	r3, r3
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	4013      	ands	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800413c:	4a12      	ldr	r2, [pc, #72]	; (8004188 <HAL_GPIO_Init+0x334>)
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	3301      	adds	r3, #1
 8004146:	61fb      	str	r3, [r7, #28]
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	2b0f      	cmp	r3, #15
 800414c:	f67f ae90 	bls.w	8003e70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004150:	bf00      	nop
 8004152:	bf00      	nop
 8004154:	3724      	adds	r7, #36	; 0x24
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40023800 	.word	0x40023800
 8004164:	40013800 	.word	0x40013800
 8004168:	40020000 	.word	0x40020000
 800416c:	40020400 	.word	0x40020400
 8004170:	40020800 	.word	0x40020800
 8004174:	40020c00 	.word	0x40020c00
 8004178:	40021000 	.word	0x40021000
 800417c:	40021400 	.word	0x40021400
 8004180:	40021800 	.word	0x40021800
 8004184:	40021c00 	.word	0x40021c00
 8004188:	40013c00 	.word	0x40013c00

0800418c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	887b      	ldrh	r3, [r7, #2]
 800419e:	4013      	ands	r3, r2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041a4:	2301      	movs	r3, #1
 80041a6:	73fb      	strb	r3, [r7, #15]
 80041a8:	e001      	b.n	80041ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041aa:	2300      	movs	r3, #0
 80041ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	807b      	strh	r3, [r7, #2]
 80041c8:	4613      	mov	r3, r2
 80041ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041cc:	787b      	ldrb	r3, [r7, #1]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041d2:	887a      	ldrh	r2, [r7, #2]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041d8:	e003      	b.n	80041e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041da:	887b      	ldrh	r3, [r7, #2]
 80041dc:	041a      	lsls	r2, r3, #16
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	619a      	str	r2, [r3, #24]
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
	...

080041f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80041fa:	4b08      	ldr	r3, [pc, #32]	; (800421c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041fc:	695a      	ldr	r2, [r3, #20]
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	4013      	ands	r3, r2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d006      	beq.n	8004214 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004206:	4a05      	ldr	r2, [pc, #20]	; (800421c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004208:	88fb      	ldrh	r3, [r7, #6]
 800420a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	4618      	mov	r0, r3
 8004210:	f7fd fa84 	bl	800171c <HAL_GPIO_EXTI_Callback>
  }
}
 8004214:	bf00      	nop
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40013c00 	.word	0x40013c00

08004220 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e264      	b.n	80046fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d075      	beq.n	800432a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800423e:	4ba3      	ldr	r3, [pc, #652]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 030c 	and.w	r3, r3, #12
 8004246:	2b04      	cmp	r3, #4
 8004248:	d00c      	beq.n	8004264 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800424a:	4ba0      	ldr	r3, [pc, #640]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004252:	2b08      	cmp	r3, #8
 8004254:	d112      	bne.n	800427c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004256:	4b9d      	ldr	r3, [pc, #628]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800425e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004262:	d10b      	bne.n	800427c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004264:	4b99      	ldr	r3, [pc, #612]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d05b      	beq.n	8004328 <HAL_RCC_OscConfig+0x108>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d157      	bne.n	8004328 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e23f      	b.n	80046fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004284:	d106      	bne.n	8004294 <HAL_RCC_OscConfig+0x74>
 8004286:	4b91      	ldr	r3, [pc, #580]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a90      	ldr	r2, [pc, #576]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 800428c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	e01d      	b.n	80042d0 <HAL_RCC_OscConfig+0xb0>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800429c:	d10c      	bne.n	80042b8 <HAL_RCC_OscConfig+0x98>
 800429e:	4b8b      	ldr	r3, [pc, #556]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a8a      	ldr	r2, [pc, #552]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 80042a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	4b88      	ldr	r3, [pc, #544]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a87      	ldr	r2, [pc, #540]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 80042b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	e00b      	b.n	80042d0 <HAL_RCC_OscConfig+0xb0>
 80042b8:	4b84      	ldr	r3, [pc, #528]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a83      	ldr	r2, [pc, #524]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 80042be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	4b81      	ldr	r3, [pc, #516]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a80      	ldr	r2, [pc, #512]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 80042ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d013      	beq.n	8004300 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d8:	f7ff f81c 	bl	8003314 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042e0:	f7ff f818 	bl	8003314 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b64      	cmp	r3, #100	; 0x64
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e204      	b.n	80046fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f2:	4b76      	ldr	r3, [pc, #472]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0f0      	beq.n	80042e0 <HAL_RCC_OscConfig+0xc0>
 80042fe:	e014      	b.n	800432a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004300:	f7ff f808 	bl	8003314 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004308:	f7ff f804 	bl	8003314 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b64      	cmp	r3, #100	; 0x64
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e1f0      	b.n	80046fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431a:	4b6c      	ldr	r3, [pc, #432]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <HAL_RCC_OscConfig+0xe8>
 8004326:	e000      	b.n	800432a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d063      	beq.n	80043fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004336:	4b65      	ldr	r3, [pc, #404]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 030c 	and.w	r3, r3, #12
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00b      	beq.n	800435a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004342:	4b62      	ldr	r3, [pc, #392]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800434a:	2b08      	cmp	r3, #8
 800434c:	d11c      	bne.n	8004388 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800434e:	4b5f      	ldr	r3, [pc, #380]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d116      	bne.n	8004388 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800435a:	4b5c      	ldr	r3, [pc, #368]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d005      	beq.n	8004372 <HAL_RCC_OscConfig+0x152>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d001      	beq.n	8004372 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e1c4      	b.n	80046fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004372:	4b56      	ldr	r3, [pc, #344]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4952      	ldr	r1, [pc, #328]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 8004382:	4313      	orrs	r3, r2
 8004384:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004386:	e03a      	b.n	80043fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d020      	beq.n	80043d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004390:	4b4f      	ldr	r3, [pc, #316]	; (80044d0 <HAL_RCC_OscConfig+0x2b0>)
 8004392:	2201      	movs	r2, #1
 8004394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004396:	f7fe ffbd 	bl	8003314 <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439c:	e008      	b.n	80043b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800439e:	f7fe ffb9 	bl	8003314 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e1a5      	b.n	80046fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b0:	4b46      	ldr	r3, [pc, #280]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0f0      	beq.n	800439e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043bc:	4b43      	ldr	r3, [pc, #268]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	4940      	ldr	r1, [pc, #256]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	600b      	str	r3, [r1, #0]
 80043d0:	e015      	b.n	80043fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043d2:	4b3f      	ldr	r3, [pc, #252]	; (80044d0 <HAL_RCC_OscConfig+0x2b0>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d8:	f7fe ff9c 	bl	8003314 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043e0:	f7fe ff98 	bl	8003314 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e184      	b.n	80046fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f2:	4b36      	ldr	r3, [pc, #216]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1f0      	bne.n	80043e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	d030      	beq.n	800446c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d016      	beq.n	8004440 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004412:	4b30      	ldr	r3, [pc, #192]	; (80044d4 <HAL_RCC_OscConfig+0x2b4>)
 8004414:	2201      	movs	r2, #1
 8004416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004418:	f7fe ff7c 	bl	8003314 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004420:	f7fe ff78 	bl	8003314 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e164      	b.n	80046fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004432:	4b26      	ldr	r3, [pc, #152]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 8004434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0f0      	beq.n	8004420 <HAL_RCC_OscConfig+0x200>
 800443e:	e015      	b.n	800446c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004440:	4b24      	ldr	r3, [pc, #144]	; (80044d4 <HAL_RCC_OscConfig+0x2b4>)
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004446:	f7fe ff65 	bl	8003314 <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800444e:	f7fe ff61 	bl	8003314 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e14d      	b.n	80046fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004460:	4b1a      	ldr	r3, [pc, #104]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 8004462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1f0      	bne.n	800444e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 80a0 	beq.w	80045ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800447a:	2300      	movs	r3, #0
 800447c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800447e:	4b13      	ldr	r3, [pc, #76]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10f      	bne.n	80044aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800448a:	2300      	movs	r3, #0
 800448c:	60bb      	str	r3, [r7, #8]
 800448e:	4b0f      	ldr	r3, [pc, #60]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	4a0e      	ldr	r2, [pc, #56]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 8004494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004498:	6413      	str	r3, [r2, #64]	; 0x40
 800449a:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <HAL_RCC_OscConfig+0x2ac>)
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a2:	60bb      	str	r3, [r7, #8]
 80044a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044a6:	2301      	movs	r3, #1
 80044a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044aa:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <HAL_RCC_OscConfig+0x2b8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d121      	bne.n	80044fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044b6:	4b08      	ldr	r3, [pc, #32]	; (80044d8 <HAL_RCC_OscConfig+0x2b8>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a07      	ldr	r2, [pc, #28]	; (80044d8 <HAL_RCC_OscConfig+0x2b8>)
 80044bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044c2:	f7fe ff27 	bl	8003314 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c8:	e011      	b.n	80044ee <HAL_RCC_OscConfig+0x2ce>
 80044ca:	bf00      	nop
 80044cc:	40023800 	.word	0x40023800
 80044d0:	42470000 	.word	0x42470000
 80044d4:	42470e80 	.word	0x42470e80
 80044d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044dc:	f7fe ff1a 	bl	8003314 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e106      	b.n	80046fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ee:	4b85      	ldr	r3, [pc, #532]	; (8004704 <HAL_RCC_OscConfig+0x4e4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d106      	bne.n	8004510 <HAL_RCC_OscConfig+0x2f0>
 8004502:	4b81      	ldr	r3, [pc, #516]	; (8004708 <HAL_RCC_OscConfig+0x4e8>)
 8004504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004506:	4a80      	ldr	r2, [pc, #512]	; (8004708 <HAL_RCC_OscConfig+0x4e8>)
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	6713      	str	r3, [r2, #112]	; 0x70
 800450e:	e01c      	b.n	800454a <HAL_RCC_OscConfig+0x32a>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b05      	cmp	r3, #5
 8004516:	d10c      	bne.n	8004532 <HAL_RCC_OscConfig+0x312>
 8004518:	4b7b      	ldr	r3, [pc, #492]	; (8004708 <HAL_RCC_OscConfig+0x4e8>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451c:	4a7a      	ldr	r2, [pc, #488]	; (8004708 <HAL_RCC_OscConfig+0x4e8>)
 800451e:	f043 0304 	orr.w	r3, r3, #4
 8004522:	6713      	str	r3, [r2, #112]	; 0x70
 8004524:	4b78      	ldr	r3, [pc, #480]	; (8004708 <HAL_RCC_OscConfig+0x4e8>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004528:	4a77      	ldr	r2, [pc, #476]	; (8004708 <HAL_RCC_OscConfig+0x4e8>)
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	6713      	str	r3, [r2, #112]	; 0x70
 8004530:	e00b      	b.n	800454a <HAL_RCC_OscConfig+0x32a>
 8004532:	4b75      	ldr	r3, [pc, #468]	; (8004708 <HAL_RCC_OscConfig+0x4e8>)
 8004534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004536:	4a74      	ldr	r2, [pc, #464]	; (8004708 <HAL_RCC_OscConfig+0x4e8>)
 8004538:	f023 0301 	bic.w	r3, r3, #1
 800453c:	6713      	str	r3, [r2, #112]	; 0x70
 800453e:	4b72      	ldr	r3, [pc, #456]	; (8004708 <HAL_RCC_OscConfig+0x4e8>)
 8004540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004542:	4a71      	ldr	r2, [pc, #452]	; (8004708 <HAL_RCC_OscConfig+0x4e8>)
 8004544:	f023 0304 	bic.w	r3, r3, #4
 8004548:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d015      	beq.n	800457e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004552:	f7fe fedf 	bl	8003314 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004558:	e00a      	b.n	8004570 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800455a:	f7fe fedb 	bl	8003314 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	f241 3288 	movw	r2, #5000	; 0x1388
 8004568:	4293      	cmp	r3, r2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e0c5      	b.n	80046fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004570:	4b65      	ldr	r3, [pc, #404]	; (8004708 <HAL_RCC_OscConfig+0x4e8>)
 8004572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0ee      	beq.n	800455a <HAL_RCC_OscConfig+0x33a>
 800457c:	e014      	b.n	80045a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800457e:	f7fe fec9 	bl	8003314 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004584:	e00a      	b.n	800459c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004586:	f7fe fec5 	bl	8003314 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	f241 3288 	movw	r2, #5000	; 0x1388
 8004594:	4293      	cmp	r3, r2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e0af      	b.n	80046fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800459c:	4b5a      	ldr	r3, [pc, #360]	; (8004708 <HAL_RCC_OscConfig+0x4e8>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1ee      	bne.n	8004586 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045a8:	7dfb      	ldrb	r3, [r7, #23]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d105      	bne.n	80045ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ae:	4b56      	ldr	r3, [pc, #344]	; (8004708 <HAL_RCC_OscConfig+0x4e8>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	4a55      	ldr	r2, [pc, #340]	; (8004708 <HAL_RCC_OscConfig+0x4e8>)
 80045b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 809b 	beq.w	80046fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045c4:	4b50      	ldr	r3, [pc, #320]	; (8004708 <HAL_RCC_OscConfig+0x4e8>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 030c 	and.w	r3, r3, #12
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d05c      	beq.n	800468a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d141      	bne.n	800465c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d8:	4b4c      	ldr	r3, [pc, #304]	; (800470c <HAL_RCC_OscConfig+0x4ec>)
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045de:	f7fe fe99 	bl	8003314 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045e4:	e008      	b.n	80045f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045e6:	f7fe fe95 	bl	8003314 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e081      	b.n	80046fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f8:	4b43      	ldr	r3, [pc, #268]	; (8004708 <HAL_RCC_OscConfig+0x4e8>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1f0      	bne.n	80045e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69da      	ldr	r2, [r3, #28]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	019b      	lsls	r3, r3, #6
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461a:	085b      	lsrs	r3, r3, #1
 800461c:	3b01      	subs	r3, #1
 800461e:	041b      	lsls	r3, r3, #16
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004626:	061b      	lsls	r3, r3, #24
 8004628:	4937      	ldr	r1, [pc, #220]	; (8004708 <HAL_RCC_OscConfig+0x4e8>)
 800462a:	4313      	orrs	r3, r2
 800462c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800462e:	4b37      	ldr	r3, [pc, #220]	; (800470c <HAL_RCC_OscConfig+0x4ec>)
 8004630:	2201      	movs	r2, #1
 8004632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004634:	f7fe fe6e 	bl	8003314 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800463c:	f7fe fe6a 	bl	8003314 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e056      	b.n	80046fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800464e:	4b2e      	ldr	r3, [pc, #184]	; (8004708 <HAL_RCC_OscConfig+0x4e8>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0f0      	beq.n	800463c <HAL_RCC_OscConfig+0x41c>
 800465a:	e04e      	b.n	80046fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800465c:	4b2b      	ldr	r3, [pc, #172]	; (800470c <HAL_RCC_OscConfig+0x4ec>)
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004662:	f7fe fe57 	bl	8003314 <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800466a:	f7fe fe53 	bl	8003314 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e03f      	b.n	80046fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467c:	4b22      	ldr	r3, [pc, #136]	; (8004708 <HAL_RCC_OscConfig+0x4e8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1f0      	bne.n	800466a <HAL_RCC_OscConfig+0x44a>
 8004688:	e037      	b.n	80046fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e032      	b.n	80046fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004696:	4b1c      	ldr	r3, [pc, #112]	; (8004708 <HAL_RCC_OscConfig+0x4e8>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d028      	beq.n	80046f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d121      	bne.n	80046f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046bc:	429a      	cmp	r2, r3
 80046be:	d11a      	bne.n	80046f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046c6:	4013      	ands	r3, r2
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d111      	bne.n	80046f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	085b      	lsrs	r3, r3, #1
 80046de:	3b01      	subs	r3, #1
 80046e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d107      	bne.n	80046f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d001      	beq.n	80046fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e000      	b.n	80046fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40007000 	.word	0x40007000
 8004708:	40023800 	.word	0x40023800
 800470c:	42470060 	.word	0x42470060

08004710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e0cc      	b.n	80048be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004724:	4b68      	ldr	r3, [pc, #416]	; (80048c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d90c      	bls.n	800474c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004732:	4b65      	ldr	r3, [pc, #404]	; (80048c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800473a:	4b63      	ldr	r3, [pc, #396]	; (80048c8 <HAL_RCC_ClockConfig+0x1b8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d001      	beq.n	800474c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e0b8      	b.n	80048be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d020      	beq.n	800479a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004764:	4b59      	ldr	r3, [pc, #356]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	4a58      	ldr	r2, [pc, #352]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800476e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800477c:	4b53      	ldr	r3, [pc, #332]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	4a52      	ldr	r2, [pc, #328]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 8004782:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004786:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004788:	4b50      	ldr	r3, [pc, #320]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	494d      	ldr	r1, [pc, #308]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	4313      	orrs	r3, r2
 8004798:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d044      	beq.n	8004830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d107      	bne.n	80047be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ae:	4b47      	ldr	r3, [pc, #284]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d119      	bne.n	80047ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e07f      	b.n	80048be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d003      	beq.n	80047ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ca:	2b03      	cmp	r3, #3
 80047cc:	d107      	bne.n	80047de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ce:	4b3f      	ldr	r3, [pc, #252]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e06f      	b.n	80048be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047de:	4b3b      	ldr	r3, [pc, #236]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e067      	b.n	80048be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ee:	4b37      	ldr	r3, [pc, #220]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f023 0203 	bic.w	r2, r3, #3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	4934      	ldr	r1, [pc, #208]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004800:	f7fe fd88 	bl	8003314 <HAL_GetTick>
 8004804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004806:	e00a      	b.n	800481e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004808:	f7fe fd84 	bl	8003314 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	f241 3288 	movw	r2, #5000	; 0x1388
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e04f      	b.n	80048be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481e:	4b2b      	ldr	r3, [pc, #172]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 020c 	and.w	r2, r3, #12
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	429a      	cmp	r2, r3
 800482e:	d1eb      	bne.n	8004808 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004830:	4b25      	ldr	r3, [pc, #148]	; (80048c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d20c      	bcs.n	8004858 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483e:	4b22      	ldr	r3, [pc, #136]	; (80048c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004846:	4b20      	ldr	r3, [pc, #128]	; (80048c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	429a      	cmp	r2, r3
 8004852:	d001      	beq.n	8004858 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e032      	b.n	80048be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d008      	beq.n	8004876 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004864:	4b19      	ldr	r3, [pc, #100]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	4916      	ldr	r1, [pc, #88]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	4313      	orrs	r3, r2
 8004874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d009      	beq.n	8004896 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004882:	4b12      	ldr	r3, [pc, #72]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	490e      	ldr	r1, [pc, #56]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	4313      	orrs	r3, r2
 8004894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004896:	f000 f821 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 800489a:	4602      	mov	r2, r0
 800489c:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	091b      	lsrs	r3, r3, #4
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	490a      	ldr	r1, [pc, #40]	; (80048d0 <HAL_RCC_ClockConfig+0x1c0>)
 80048a8:	5ccb      	ldrb	r3, [r1, r3]
 80048aa:	fa22 f303 	lsr.w	r3, r2, r3
 80048ae:	4a09      	ldr	r2, [pc, #36]	; (80048d4 <HAL_RCC_ClockConfig+0x1c4>)
 80048b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048b2:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <HAL_RCC_ClockConfig+0x1c8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fe fce8 	bl	800328c <HAL_InitTick>

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40023c00 	.word	0x40023c00
 80048cc:	40023800 	.word	0x40023800
 80048d0:	08007998 	.word	0x08007998
 80048d4:	20000000 	.word	0x20000000
 80048d8:	20000004 	.word	0x20000004

080048dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80048e0:	b084      	sub	sp, #16
 80048e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	607b      	str	r3, [r7, #4]
 80048e8:	2300      	movs	r3, #0
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	2300      	movs	r3, #0
 80048ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048f4:	4b67      	ldr	r3, [pc, #412]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 030c 	and.w	r3, r3, #12
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d00d      	beq.n	800491c <HAL_RCC_GetSysClockFreq+0x40>
 8004900:	2b08      	cmp	r3, #8
 8004902:	f200 80bd 	bhi.w	8004a80 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <HAL_RCC_GetSysClockFreq+0x34>
 800490a:	2b04      	cmp	r3, #4
 800490c:	d003      	beq.n	8004916 <HAL_RCC_GetSysClockFreq+0x3a>
 800490e:	e0b7      	b.n	8004a80 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004910:	4b61      	ldr	r3, [pc, #388]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004912:	60bb      	str	r3, [r7, #8]
       break;
 8004914:	e0b7      	b.n	8004a86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004916:	4b61      	ldr	r3, [pc, #388]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004918:	60bb      	str	r3, [r7, #8]
      break;
 800491a:	e0b4      	b.n	8004a86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800491c:	4b5d      	ldr	r3, [pc, #372]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004924:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004926:	4b5b      	ldr	r3, [pc, #364]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d04d      	beq.n	80049ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004932:	4b58      	ldr	r3, [pc, #352]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	099b      	lsrs	r3, r3, #6
 8004938:	461a      	mov	r2, r3
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004942:	f04f 0100 	mov.w	r1, #0
 8004946:	ea02 0800 	and.w	r8, r2, r0
 800494a:	ea03 0901 	and.w	r9, r3, r1
 800494e:	4640      	mov	r0, r8
 8004950:	4649      	mov	r1, r9
 8004952:	f04f 0200 	mov.w	r2, #0
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	014b      	lsls	r3, r1, #5
 800495c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004960:	0142      	lsls	r2, r0, #5
 8004962:	4610      	mov	r0, r2
 8004964:	4619      	mov	r1, r3
 8004966:	ebb0 0008 	subs.w	r0, r0, r8
 800496a:	eb61 0109 	sbc.w	r1, r1, r9
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	018b      	lsls	r3, r1, #6
 8004978:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800497c:	0182      	lsls	r2, r0, #6
 800497e:	1a12      	subs	r2, r2, r0
 8004980:	eb63 0301 	sbc.w	r3, r3, r1
 8004984:	f04f 0000 	mov.w	r0, #0
 8004988:	f04f 0100 	mov.w	r1, #0
 800498c:	00d9      	lsls	r1, r3, #3
 800498e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004992:	00d0      	lsls	r0, r2, #3
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	eb12 0208 	adds.w	r2, r2, r8
 800499c:	eb43 0309 	adc.w	r3, r3, r9
 80049a0:	f04f 0000 	mov.w	r0, #0
 80049a4:	f04f 0100 	mov.w	r1, #0
 80049a8:	0259      	lsls	r1, r3, #9
 80049aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80049ae:	0250      	lsls	r0, r2, #9
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4610      	mov	r0, r2
 80049b6:	4619      	mov	r1, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	461a      	mov	r2, r3
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	f7fb fc5e 	bl	8000280 <__aeabi_uldivmod>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4613      	mov	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	e04a      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ce:	4b31      	ldr	r3, [pc, #196]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	099b      	lsrs	r3, r3, #6
 80049d4:	461a      	mov	r2, r3
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049de:	f04f 0100 	mov.w	r1, #0
 80049e2:	ea02 0400 	and.w	r4, r2, r0
 80049e6:	ea03 0501 	and.w	r5, r3, r1
 80049ea:	4620      	mov	r0, r4
 80049ec:	4629      	mov	r1, r5
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	014b      	lsls	r3, r1, #5
 80049f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049fc:	0142      	lsls	r2, r0, #5
 80049fe:	4610      	mov	r0, r2
 8004a00:	4619      	mov	r1, r3
 8004a02:	1b00      	subs	r0, r0, r4
 8004a04:	eb61 0105 	sbc.w	r1, r1, r5
 8004a08:	f04f 0200 	mov.w	r2, #0
 8004a0c:	f04f 0300 	mov.w	r3, #0
 8004a10:	018b      	lsls	r3, r1, #6
 8004a12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a16:	0182      	lsls	r2, r0, #6
 8004a18:	1a12      	subs	r2, r2, r0
 8004a1a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a1e:	f04f 0000 	mov.w	r0, #0
 8004a22:	f04f 0100 	mov.w	r1, #0
 8004a26:	00d9      	lsls	r1, r3, #3
 8004a28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a2c:	00d0      	lsls	r0, r2, #3
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	1912      	adds	r2, r2, r4
 8004a34:	eb45 0303 	adc.w	r3, r5, r3
 8004a38:	f04f 0000 	mov.w	r0, #0
 8004a3c:	f04f 0100 	mov.w	r1, #0
 8004a40:	0299      	lsls	r1, r3, #10
 8004a42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a46:	0290      	lsls	r0, r2, #10
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	4619      	mov	r1, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	461a      	mov	r2, r3
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	f7fb fc12 	bl	8000280 <__aeabi_uldivmod>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4613      	mov	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a64:	4b0b      	ldr	r3, [pc, #44]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	0c1b      	lsrs	r3, r3, #16
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	3301      	adds	r3, #1
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7c:	60bb      	str	r3, [r7, #8]
      break;
 8004a7e:	e002      	b.n	8004a86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a80:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a82:	60bb      	str	r3, [r7, #8]
      break;
 8004a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a86:	68bb      	ldr	r3, [r7, #8]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004a92:	bf00      	nop
 8004a94:	40023800 	.word	0x40023800
 8004a98:	00f42400 	.word	0x00f42400
 8004a9c:	007a1200 	.word	0x007a1200

08004aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aa4:	4b03      	ldr	r3, [pc, #12]	; (8004ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	20000000 	.word	0x20000000

08004ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004abc:	f7ff fff0 	bl	8004aa0 <HAL_RCC_GetHCLKFreq>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	0a9b      	lsrs	r3, r3, #10
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	4903      	ldr	r1, [pc, #12]	; (8004adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ace:	5ccb      	ldrb	r3, [r1, r3]
 8004ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	080079a8 	.word	0x080079a8

08004ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ae4:	f7ff ffdc 	bl	8004aa0 <HAL_RCC_GetHCLKFreq>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	0b5b      	lsrs	r3, r3, #13
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	4903      	ldr	r1, [pc, #12]	; (8004b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004af6:	5ccb      	ldrb	r3, [r1, r3]
 8004af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40023800 	.word	0x40023800
 8004b04:	080079a8 	.word	0x080079a8

08004b08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e041      	b.n	8004b9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fe f802 	bl	8002b38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3304      	adds	r3, #4
 8004b44:	4619      	mov	r1, r3
 8004b46:	4610      	mov	r0, r2
 8004b48:	f000 fb42 	bl	80051d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
	...

08004ba8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d001      	beq.n	8004bc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e046      	b.n	8004c4e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a23      	ldr	r2, [pc, #140]	; (8004c5c <HAL_TIM_Base_Start+0xb4>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d022      	beq.n	8004c18 <HAL_TIM_Base_Start+0x70>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bda:	d01d      	beq.n	8004c18 <HAL_TIM_Base_Start+0x70>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1f      	ldr	r2, [pc, #124]	; (8004c60 <HAL_TIM_Base_Start+0xb8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d018      	beq.n	8004c18 <HAL_TIM_Base_Start+0x70>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a1e      	ldr	r2, [pc, #120]	; (8004c64 <HAL_TIM_Base_Start+0xbc>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d013      	beq.n	8004c18 <HAL_TIM_Base_Start+0x70>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a1c      	ldr	r2, [pc, #112]	; (8004c68 <HAL_TIM_Base_Start+0xc0>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00e      	beq.n	8004c18 <HAL_TIM_Base_Start+0x70>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a1b      	ldr	r2, [pc, #108]	; (8004c6c <HAL_TIM_Base_Start+0xc4>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d009      	beq.n	8004c18 <HAL_TIM_Base_Start+0x70>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a19      	ldr	r2, [pc, #100]	; (8004c70 <HAL_TIM_Base_Start+0xc8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d004      	beq.n	8004c18 <HAL_TIM_Base_Start+0x70>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a18      	ldr	r2, [pc, #96]	; (8004c74 <HAL_TIM_Base_Start+0xcc>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d111      	bne.n	8004c3c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b06      	cmp	r3, #6
 8004c28:	d010      	beq.n	8004c4c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f042 0201 	orr.w	r2, r2, #1
 8004c38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3a:	e007      	b.n	8004c4c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40010000 	.word	0x40010000
 8004c60:	40000400 	.word	0x40000400
 8004c64:	40000800 	.word	0x40000800
 8004c68:	40000c00 	.word	0x40000c00
 8004c6c:	40010400 	.word	0x40010400
 8004c70:	40014000 	.word	0x40014000
 8004c74:	40001800 	.word	0x40001800

08004c78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e041      	b.n	8004d0e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d106      	bne.n	8004ca4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f839 	bl	8004d16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	f000 fa8a 	bl	80051d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
	...

08004d2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d109      	bne.n	8004d50 <HAL_TIM_PWM_Start+0x24>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	bf14      	ite	ne
 8004d48:	2301      	movne	r3, #1
 8004d4a:	2300      	moveq	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	e022      	b.n	8004d96 <HAL_TIM_PWM_Start+0x6a>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d109      	bne.n	8004d6a <HAL_TIM_PWM_Start+0x3e>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	bf14      	ite	ne
 8004d62:	2301      	movne	r3, #1
 8004d64:	2300      	moveq	r3, #0
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	e015      	b.n	8004d96 <HAL_TIM_PWM_Start+0x6a>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d109      	bne.n	8004d84 <HAL_TIM_PWM_Start+0x58>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	bf14      	ite	ne
 8004d7c:	2301      	movne	r3, #1
 8004d7e:	2300      	moveq	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	e008      	b.n	8004d96 <HAL_TIM_PWM_Start+0x6a>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	bf14      	ite	ne
 8004d90:	2301      	movne	r3, #1
 8004d92:	2300      	moveq	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e07c      	b.n	8004e98 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d104      	bne.n	8004dae <HAL_TIM_PWM_Start+0x82>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dac:	e013      	b.n	8004dd6 <HAL_TIM_PWM_Start+0xaa>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d104      	bne.n	8004dbe <HAL_TIM_PWM_Start+0x92>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dbc:	e00b      	b.n	8004dd6 <HAL_TIM_PWM_Start+0xaa>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d104      	bne.n	8004dce <HAL_TIM_PWM_Start+0xa2>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dcc:	e003      	b.n	8004dd6 <HAL_TIM_PWM_Start+0xaa>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	6839      	ldr	r1, [r7, #0]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fce0 	bl	80057a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a2d      	ldr	r2, [pc, #180]	; (8004ea0 <HAL_TIM_PWM_Start+0x174>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d004      	beq.n	8004df8 <HAL_TIM_PWM_Start+0xcc>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a2c      	ldr	r2, [pc, #176]	; (8004ea4 <HAL_TIM_PWM_Start+0x178>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d101      	bne.n	8004dfc <HAL_TIM_PWM_Start+0xd0>
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e000      	b.n	8004dfe <HAL_TIM_PWM_Start+0xd2>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d007      	beq.n	8004e12 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a22      	ldr	r2, [pc, #136]	; (8004ea0 <HAL_TIM_PWM_Start+0x174>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d022      	beq.n	8004e62 <HAL_TIM_PWM_Start+0x136>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e24:	d01d      	beq.n	8004e62 <HAL_TIM_PWM_Start+0x136>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a1f      	ldr	r2, [pc, #124]	; (8004ea8 <HAL_TIM_PWM_Start+0x17c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d018      	beq.n	8004e62 <HAL_TIM_PWM_Start+0x136>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a1d      	ldr	r2, [pc, #116]	; (8004eac <HAL_TIM_PWM_Start+0x180>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d013      	beq.n	8004e62 <HAL_TIM_PWM_Start+0x136>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a1c      	ldr	r2, [pc, #112]	; (8004eb0 <HAL_TIM_PWM_Start+0x184>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d00e      	beq.n	8004e62 <HAL_TIM_PWM_Start+0x136>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a16      	ldr	r2, [pc, #88]	; (8004ea4 <HAL_TIM_PWM_Start+0x178>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d009      	beq.n	8004e62 <HAL_TIM_PWM_Start+0x136>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a18      	ldr	r2, [pc, #96]	; (8004eb4 <HAL_TIM_PWM_Start+0x188>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d004      	beq.n	8004e62 <HAL_TIM_PWM_Start+0x136>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a16      	ldr	r2, [pc, #88]	; (8004eb8 <HAL_TIM_PWM_Start+0x18c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d111      	bne.n	8004e86 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b06      	cmp	r3, #6
 8004e72:	d010      	beq.n	8004e96 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e84:	e007      	b.n	8004e96 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f042 0201 	orr.w	r2, r2, #1
 8004e94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40010000 	.word	0x40010000
 8004ea4:	40010400 	.word	0x40010400
 8004ea8:	40000400 	.word	0x40000400
 8004eac:	40000800 	.word	0x40000800
 8004eb0:	40000c00 	.word	0x40000c00
 8004eb4:	40014000 	.word	0x40014000
 8004eb8:	40001800 	.word	0x40001800

08004ebc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e0ae      	b.n	8005038 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b0c      	cmp	r3, #12
 8004ee6:	f200 809f 	bhi.w	8005028 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004eea:	a201      	add	r2, pc, #4	; (adr r2, 8004ef0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef0:	08004f25 	.word	0x08004f25
 8004ef4:	08005029 	.word	0x08005029
 8004ef8:	08005029 	.word	0x08005029
 8004efc:	08005029 	.word	0x08005029
 8004f00:	08004f65 	.word	0x08004f65
 8004f04:	08005029 	.word	0x08005029
 8004f08:	08005029 	.word	0x08005029
 8004f0c:	08005029 	.word	0x08005029
 8004f10:	08004fa7 	.word	0x08004fa7
 8004f14:	08005029 	.word	0x08005029
 8004f18:	08005029 	.word	0x08005029
 8004f1c:	08005029 	.word	0x08005029
 8004f20:	08004fe7 	.word	0x08004fe7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68b9      	ldr	r1, [r7, #8]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 f9f0 	bl	8005310 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699a      	ldr	r2, [r3, #24]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0208 	orr.w	r2, r2, #8
 8004f3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0204 	bic.w	r2, r2, #4
 8004f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6999      	ldr	r1, [r3, #24]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	691a      	ldr	r2, [r3, #16]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	619a      	str	r2, [r3, #24]
      break;
 8004f62:	e064      	b.n	800502e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68b9      	ldr	r1, [r7, #8]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fa40 	bl	80053f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6999      	ldr	r1, [r3, #24]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	021a      	lsls	r2, r3, #8
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	619a      	str	r2, [r3, #24]
      break;
 8004fa4:	e043      	b.n	800502e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68b9      	ldr	r1, [r7, #8]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fa95 	bl	80054dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69da      	ldr	r2, [r3, #28]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0208 	orr.w	r2, r2, #8
 8004fc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69da      	ldr	r2, [r3, #28]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0204 	bic.w	r2, r2, #4
 8004fd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69d9      	ldr	r1, [r3, #28]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	61da      	str	r2, [r3, #28]
      break;
 8004fe4:	e023      	b.n	800502e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68b9      	ldr	r1, [r7, #8]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fae9 	bl	80055c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69da      	ldr	r2, [r3, #28]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69d9      	ldr	r1, [r3, #28]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	021a      	lsls	r2, r3, #8
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	61da      	str	r2, [r3, #28]
      break;
 8005026:	e002      	b.n	800502e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	75fb      	strb	r3, [r7, #23]
      break;
 800502c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005036:	7dfb      	ldrb	r3, [r7, #23]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_TIM_ConfigClockSource+0x1c>
 8005058:	2302      	movs	r3, #2
 800505a:	e0b4      	b.n	80051c6 <HAL_TIM_ConfigClockSource+0x186>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800507a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005082:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005094:	d03e      	beq.n	8005114 <HAL_TIM_ConfigClockSource+0xd4>
 8005096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800509a:	f200 8087 	bhi.w	80051ac <HAL_TIM_ConfigClockSource+0x16c>
 800509e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a2:	f000 8086 	beq.w	80051b2 <HAL_TIM_ConfigClockSource+0x172>
 80050a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050aa:	d87f      	bhi.n	80051ac <HAL_TIM_ConfigClockSource+0x16c>
 80050ac:	2b70      	cmp	r3, #112	; 0x70
 80050ae:	d01a      	beq.n	80050e6 <HAL_TIM_ConfigClockSource+0xa6>
 80050b0:	2b70      	cmp	r3, #112	; 0x70
 80050b2:	d87b      	bhi.n	80051ac <HAL_TIM_ConfigClockSource+0x16c>
 80050b4:	2b60      	cmp	r3, #96	; 0x60
 80050b6:	d050      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x11a>
 80050b8:	2b60      	cmp	r3, #96	; 0x60
 80050ba:	d877      	bhi.n	80051ac <HAL_TIM_ConfigClockSource+0x16c>
 80050bc:	2b50      	cmp	r3, #80	; 0x50
 80050be:	d03c      	beq.n	800513a <HAL_TIM_ConfigClockSource+0xfa>
 80050c0:	2b50      	cmp	r3, #80	; 0x50
 80050c2:	d873      	bhi.n	80051ac <HAL_TIM_ConfigClockSource+0x16c>
 80050c4:	2b40      	cmp	r3, #64	; 0x40
 80050c6:	d058      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x13a>
 80050c8:	2b40      	cmp	r3, #64	; 0x40
 80050ca:	d86f      	bhi.n	80051ac <HAL_TIM_ConfigClockSource+0x16c>
 80050cc:	2b30      	cmp	r3, #48	; 0x30
 80050ce:	d064      	beq.n	800519a <HAL_TIM_ConfigClockSource+0x15a>
 80050d0:	2b30      	cmp	r3, #48	; 0x30
 80050d2:	d86b      	bhi.n	80051ac <HAL_TIM_ConfigClockSource+0x16c>
 80050d4:	2b20      	cmp	r3, #32
 80050d6:	d060      	beq.n	800519a <HAL_TIM_ConfigClockSource+0x15a>
 80050d8:	2b20      	cmp	r3, #32
 80050da:	d867      	bhi.n	80051ac <HAL_TIM_ConfigClockSource+0x16c>
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d05c      	beq.n	800519a <HAL_TIM_ConfigClockSource+0x15a>
 80050e0:	2b10      	cmp	r3, #16
 80050e2:	d05a      	beq.n	800519a <HAL_TIM_ConfigClockSource+0x15a>
 80050e4:	e062      	b.n	80051ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6818      	ldr	r0, [r3, #0]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	6899      	ldr	r1, [r3, #8]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f000 fb35 	bl	8005764 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005108:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	609a      	str	r2, [r3, #8]
      break;
 8005112:	e04f      	b.n	80051b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6818      	ldr	r0, [r3, #0]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	6899      	ldr	r1, [r3, #8]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f000 fb1e 	bl	8005764 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005136:	609a      	str	r2, [r3, #8]
      break;
 8005138:	e03c      	b.n	80051b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6818      	ldr	r0, [r3, #0]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	6859      	ldr	r1, [r3, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	461a      	mov	r2, r3
 8005148:	f000 fa92 	bl	8005670 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2150      	movs	r1, #80	; 0x50
 8005152:	4618      	mov	r0, r3
 8005154:	f000 faeb 	bl	800572e <TIM_ITRx_SetConfig>
      break;
 8005158:	e02c      	b.n	80051b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6818      	ldr	r0, [r3, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	6859      	ldr	r1, [r3, #4]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	461a      	mov	r2, r3
 8005168:	f000 fab1 	bl	80056ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2160      	movs	r1, #96	; 0x60
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fadb 	bl	800572e <TIM_ITRx_SetConfig>
      break;
 8005178:	e01c      	b.n	80051b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6818      	ldr	r0, [r3, #0]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	6859      	ldr	r1, [r3, #4]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	461a      	mov	r2, r3
 8005188:	f000 fa72 	bl	8005670 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2140      	movs	r1, #64	; 0x40
 8005192:	4618      	mov	r0, r3
 8005194:	f000 facb 	bl	800572e <TIM_ITRx_SetConfig>
      break;
 8005198:	e00c      	b.n	80051b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4619      	mov	r1, r3
 80051a4:	4610      	mov	r0, r2
 80051a6:	f000 fac2 	bl	800572e <TIM_ITRx_SetConfig>
      break;
 80051aa:	e003      	b.n	80051b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	73fb      	strb	r3, [r7, #15]
      break;
 80051b0:	e000      	b.n	80051b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
	...

080051d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a40      	ldr	r2, [pc, #256]	; (80052e4 <TIM_Base_SetConfig+0x114>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d013      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ee:	d00f      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a3d      	ldr	r2, [pc, #244]	; (80052e8 <TIM_Base_SetConfig+0x118>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d00b      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a3c      	ldr	r2, [pc, #240]	; (80052ec <TIM_Base_SetConfig+0x11c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d007      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a3b      	ldr	r2, [pc, #236]	; (80052f0 <TIM_Base_SetConfig+0x120>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d003      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a3a      	ldr	r2, [pc, #232]	; (80052f4 <TIM_Base_SetConfig+0x124>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d108      	bne.n	8005222 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a2f      	ldr	r2, [pc, #188]	; (80052e4 <TIM_Base_SetConfig+0x114>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d02b      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005230:	d027      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a2c      	ldr	r2, [pc, #176]	; (80052e8 <TIM_Base_SetConfig+0x118>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d023      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a2b      	ldr	r2, [pc, #172]	; (80052ec <TIM_Base_SetConfig+0x11c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d01f      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a2a      	ldr	r2, [pc, #168]	; (80052f0 <TIM_Base_SetConfig+0x120>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d01b      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a29      	ldr	r2, [pc, #164]	; (80052f4 <TIM_Base_SetConfig+0x124>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d017      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a28      	ldr	r2, [pc, #160]	; (80052f8 <TIM_Base_SetConfig+0x128>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d013      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a27      	ldr	r2, [pc, #156]	; (80052fc <TIM_Base_SetConfig+0x12c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00f      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a26      	ldr	r2, [pc, #152]	; (8005300 <TIM_Base_SetConfig+0x130>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00b      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a25      	ldr	r2, [pc, #148]	; (8005304 <TIM_Base_SetConfig+0x134>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d007      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a24      	ldr	r2, [pc, #144]	; (8005308 <TIM_Base_SetConfig+0x138>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d003      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a23      	ldr	r2, [pc, #140]	; (800530c <TIM_Base_SetConfig+0x13c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d108      	bne.n	8005294 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4313      	orrs	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a0a      	ldr	r2, [pc, #40]	; (80052e4 <TIM_Base_SetConfig+0x114>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d003      	beq.n	80052c8 <TIM_Base_SetConfig+0xf8>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a0c      	ldr	r2, [pc, #48]	; (80052f4 <TIM_Base_SetConfig+0x124>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d103      	bne.n	80052d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	615a      	str	r2, [r3, #20]
}
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40010000 	.word	0x40010000
 80052e8:	40000400 	.word	0x40000400
 80052ec:	40000800 	.word	0x40000800
 80052f0:	40000c00 	.word	0x40000c00
 80052f4:	40010400 	.word	0x40010400
 80052f8:	40014000 	.word	0x40014000
 80052fc:	40014400 	.word	0x40014400
 8005300:	40014800 	.word	0x40014800
 8005304:	40001800 	.word	0x40001800
 8005308:	40001c00 	.word	0x40001c00
 800530c:	40002000 	.word	0x40002000

08005310 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	f023 0201 	bic.w	r2, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0303 	bic.w	r3, r3, #3
 8005346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f023 0302 	bic.w	r3, r3, #2
 8005358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	4313      	orrs	r3, r2
 8005362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a20      	ldr	r2, [pc, #128]	; (80053e8 <TIM_OC1_SetConfig+0xd8>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d003      	beq.n	8005374 <TIM_OC1_SetConfig+0x64>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a1f      	ldr	r2, [pc, #124]	; (80053ec <TIM_OC1_SetConfig+0xdc>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d10c      	bne.n	800538e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f023 0308 	bic.w	r3, r3, #8
 800537a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	4313      	orrs	r3, r2
 8005384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f023 0304 	bic.w	r3, r3, #4
 800538c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a15      	ldr	r2, [pc, #84]	; (80053e8 <TIM_OC1_SetConfig+0xd8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d003      	beq.n	800539e <TIM_OC1_SetConfig+0x8e>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a14      	ldr	r2, [pc, #80]	; (80053ec <TIM_OC1_SetConfig+0xdc>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d111      	bne.n	80053c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	621a      	str	r2, [r3, #32]
}
 80053dc:	bf00      	nop
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	40010000 	.word	0x40010000
 80053ec:	40010400 	.word	0x40010400

080053f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	f023 0210 	bic.w	r2, r3, #16
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800541e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	021b      	lsls	r3, r3, #8
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	4313      	orrs	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f023 0320 	bic.w	r3, r3, #32
 800543a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	4313      	orrs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a22      	ldr	r2, [pc, #136]	; (80054d4 <TIM_OC2_SetConfig+0xe4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d003      	beq.n	8005458 <TIM_OC2_SetConfig+0x68>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a21      	ldr	r2, [pc, #132]	; (80054d8 <TIM_OC2_SetConfig+0xe8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d10d      	bne.n	8005474 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800545e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	011b      	lsls	r3, r3, #4
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005472:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a17      	ldr	r2, [pc, #92]	; (80054d4 <TIM_OC2_SetConfig+0xe4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d003      	beq.n	8005484 <TIM_OC2_SetConfig+0x94>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a16      	ldr	r2, [pc, #88]	; (80054d8 <TIM_OC2_SetConfig+0xe8>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d113      	bne.n	80054ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800548a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005492:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	621a      	str	r2, [r3, #32]
}
 80054c6:	bf00      	nop
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40010000 	.word	0x40010000
 80054d8:	40010400 	.word	0x40010400

080054dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 0303 	bic.w	r3, r3, #3
 8005512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	021b      	lsls	r3, r3, #8
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a21      	ldr	r2, [pc, #132]	; (80055bc <TIM_OC3_SetConfig+0xe0>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d003      	beq.n	8005542 <TIM_OC3_SetConfig+0x66>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a20      	ldr	r2, [pc, #128]	; (80055c0 <TIM_OC3_SetConfig+0xe4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d10d      	bne.n	800555e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005548:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	021b      	lsls	r3, r3, #8
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	4313      	orrs	r3, r2
 8005554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800555c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a16      	ldr	r2, [pc, #88]	; (80055bc <TIM_OC3_SetConfig+0xe0>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d003      	beq.n	800556e <TIM_OC3_SetConfig+0x92>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a15      	ldr	r2, [pc, #84]	; (80055c0 <TIM_OC3_SetConfig+0xe4>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d113      	bne.n	8005596 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800557c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4313      	orrs	r3, r2
 8005588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	621a      	str	r2, [r3, #32]
}
 80055b0:	bf00      	nop
 80055b2:	371c      	adds	r7, #28
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	40010000 	.word	0x40010000
 80055c0:	40010400 	.word	0x40010400

080055c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	021b      	lsls	r3, r3, #8
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800560e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	031b      	lsls	r3, r3, #12
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4313      	orrs	r3, r2
 800561a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a12      	ldr	r2, [pc, #72]	; (8005668 <TIM_OC4_SetConfig+0xa4>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d003      	beq.n	800562c <TIM_OC4_SetConfig+0x68>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a11      	ldr	r2, [pc, #68]	; (800566c <TIM_OC4_SetConfig+0xa8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d109      	bne.n	8005640 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005632:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	019b      	lsls	r3, r3, #6
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	621a      	str	r2, [r3, #32]
}
 800565a:	bf00      	nop
 800565c:	371c      	adds	r7, #28
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	40010000 	.word	0x40010000
 800566c:	40010400 	.word	0x40010400

08005670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	f023 0201 	bic.w	r2, r3, #1
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800569a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	011b      	lsls	r3, r3, #4
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f023 030a 	bic.w	r3, r3, #10
 80056ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	621a      	str	r2, [r3, #32]
}
 80056c2:	bf00      	nop
 80056c4:	371c      	adds	r7, #28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b087      	sub	sp, #28
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	f023 0210 	bic.w	r2, r3, #16
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	031b      	lsls	r3, r3, #12
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800570a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	621a      	str	r2, [r3, #32]
}
 8005722:	bf00      	nop
 8005724:	371c      	adds	r7, #28
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800572e:	b480      	push	{r7}
 8005730:	b085      	sub	sp, #20
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	f043 0307 	orr.w	r3, r3, #7
 8005750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	609a      	str	r2, [r3, #8]
}
 8005758:	bf00      	nop
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800577e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	021a      	lsls	r2, r3, #8
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	431a      	orrs	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4313      	orrs	r3, r2
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	609a      	str	r2, [r3, #8]
}
 8005798:	bf00      	nop
 800579a:	371c      	adds	r7, #28
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f003 031f 	and.w	r3, r3, #31
 80057b6:	2201      	movs	r2, #1
 80057b8:	fa02 f303 	lsl.w	r3, r2, r3
 80057bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6a1a      	ldr	r2, [r3, #32]
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	43db      	mvns	r3, r3
 80057c6:	401a      	ands	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6a1a      	ldr	r2, [r3, #32]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f003 031f 	and.w	r3, r3, #31
 80057d6:	6879      	ldr	r1, [r7, #4]
 80057d8:	fa01 f303 	lsl.w	r3, r1, r3
 80057dc:	431a      	orrs	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	621a      	str	r2, [r3, #32]
}
 80057e2:	bf00      	nop
 80057e4:	371c      	adds	r7, #28
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
	...

080057f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005804:	2302      	movs	r3, #2
 8005806:	e05a      	b.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a21      	ldr	r2, [pc, #132]	; (80058cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d022      	beq.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005854:	d01d      	beq.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a1d      	ldr	r2, [pc, #116]	; (80058d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d018      	beq.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1b      	ldr	r2, [pc, #108]	; (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d013      	beq.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a1a      	ldr	r2, [pc, #104]	; (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00e      	beq.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a18      	ldr	r2, [pc, #96]	; (80058dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d009      	beq.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a17      	ldr	r2, [pc, #92]	; (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d004      	beq.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a15      	ldr	r2, [pc, #84]	; (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d10c      	bne.n	80058ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005898:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	40010000 	.word	0x40010000
 80058d0:	40000400 	.word	0x40000400
 80058d4:	40000800 	.word	0x40000800
 80058d8:	40000c00 	.word	0x40000c00
 80058dc:	40010400 	.word	0x40010400
 80058e0:	40014000 	.word	0x40014000
 80058e4:	40001800 	.word	0x40001800

080058e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005900:	2302      	movs	r3, #2
 8005902:	e03d      	b.n	8005980 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4313      	orrs	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	4313      	orrs	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e03f      	b.n	8005a1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d106      	bne.n	80059b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7fd fa92 	bl	8002edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2224      	movs	r2, #36	; 0x24
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fe1d 	bl	8006610 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	691a      	ldr	r2, [r3, #16]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	695a      	ldr	r2, [r3, #20]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68da      	ldr	r2, [r3, #12]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b08a      	sub	sp, #40	; 0x28
 8005a2a:	af02      	add	r7, sp, #8
 8005a2c:	60f8      	str	r0, [r7, #12]
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	603b      	str	r3, [r7, #0]
 8005a32:	4613      	mov	r3, r2
 8005a34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b20      	cmp	r3, #32
 8005a44:	d17c      	bne.n	8005b40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <HAL_UART_Transmit+0x2c>
 8005a4c:	88fb      	ldrh	r3, [r7, #6]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e075      	b.n	8005b42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_UART_Transmit+0x3e>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e06e      	b.n	8005b42 <HAL_UART_Transmit+0x11c>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2221      	movs	r2, #33	; 0x21
 8005a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a7a:	f7fd fc4b 	bl	8003314 <HAL_GetTick>
 8005a7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	88fa      	ldrh	r2, [r7, #6]
 8005a84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	88fa      	ldrh	r2, [r7, #6]
 8005a8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a94:	d108      	bne.n	8005aa8 <HAL_UART_Transmit+0x82>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d104      	bne.n	8005aa8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	61bb      	str	r3, [r7, #24]
 8005aa6:	e003      	b.n	8005ab0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aac:	2300      	movs	r3, #0
 8005aae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ab8:	e02a      	b.n	8005b10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	2180      	movs	r1, #128	; 0x80
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 fb9b 	bl	8006200 <UART_WaitOnFlagUntilTimeout>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e036      	b.n	8005b42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10b      	bne.n	8005af2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ae8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	3302      	adds	r3, #2
 8005aee:	61bb      	str	r3, [r7, #24]
 8005af0:	e007      	b.n	8005b02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	781a      	ldrb	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	3301      	adds	r3, #1
 8005b00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1cf      	bne.n	8005aba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2200      	movs	r2, #0
 8005b22:	2140      	movs	r1, #64	; 0x40
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 fb6b 	bl	8006200 <UART_WaitOnFlagUntilTimeout>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e006      	b.n	8005b42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	e000      	b.n	8005b42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b40:	2302      	movs	r3, #2
  }
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3720      	adds	r7, #32
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b08a      	sub	sp, #40	; 0x28
 8005b4e:	af02      	add	r7, sp, #8
 8005b50:	60f8      	str	r0, [r7, #12]
 8005b52:	60b9      	str	r1, [r7, #8]
 8005b54:	603b      	str	r3, [r7, #0]
 8005b56:	4613      	mov	r3, r2
 8005b58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b20      	cmp	r3, #32
 8005b68:	f040 808c 	bne.w	8005c84 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d002      	beq.n	8005b78 <HAL_UART_Receive+0x2e>
 8005b72:	88fb      	ldrh	r3, [r7, #6]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e084      	b.n	8005c86 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <HAL_UART_Receive+0x40>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e07d      	b.n	8005c86 <HAL_UART_Receive+0x13c>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2222      	movs	r2, #34	; 0x22
 8005b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ba6:	f7fd fbb5 	bl	8003314 <HAL_GetTick>
 8005baa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	88fa      	ldrh	r2, [r7, #6]
 8005bb0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	88fa      	ldrh	r2, [r7, #6]
 8005bb6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc0:	d108      	bne.n	8005bd4 <HAL_UART_Receive+0x8a>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d104      	bne.n	8005bd4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	61bb      	str	r3, [r7, #24]
 8005bd2:	e003      	b.n	8005bdc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005be4:	e043      	b.n	8005c6e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2200      	movs	r2, #0
 8005bee:	2120      	movs	r1, #32
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 fb05 	bl	8006200 <UART_WaitOnFlagUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e042      	b.n	8005c86 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10c      	bne.n	8005c20 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	3302      	adds	r3, #2
 8005c1c:	61bb      	str	r3, [r7, #24]
 8005c1e:	e01f      	b.n	8005c60 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c28:	d007      	beq.n	8005c3a <HAL_UART_Receive+0xf0>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10a      	bne.n	8005c48 <HAL_UART_Receive+0xfe>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	701a      	strb	r2, [r3, #0]
 8005c46:	e008      	b.n	8005c5a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1b6      	bne.n	8005be6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	e000      	b.n	8005c86 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005c84:	2302      	movs	r3, #2
  }
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3720      	adds	r7, #32
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
	...

08005c90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b0ba      	sub	sp, #232	; 0xe8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005cce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10f      	bne.n	8005cf6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cda:	f003 0320 	and.w	r3, r3, #32
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d009      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x66>
 8005ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ce6:	f003 0320 	and.w	r3, r3, #32
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fbd3 	bl	800649a <UART_Receive_IT>
      return;
 8005cf4:	e256      	b.n	80061a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005cf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 80de 	beq.w	8005ebc <HAL_UART_IRQHandler+0x22c>
 8005d00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d106      	bne.n	8005d1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 80d1 	beq.w	8005ebc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00b      	beq.n	8005d3e <HAL_UART_IRQHandler+0xae>
 8005d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d005      	beq.n	8005d3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d36:	f043 0201 	orr.w	r2, r3, #1
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d42:	f003 0304 	and.w	r3, r3, #4
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00b      	beq.n	8005d62 <HAL_UART_IRQHandler+0xd2>
 8005d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d005      	beq.n	8005d62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5a:	f043 0202 	orr.w	r2, r3, #2
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00b      	beq.n	8005d86 <HAL_UART_IRQHandler+0xf6>
 8005d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d005      	beq.n	8005d86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	f043 0204 	orr.w	r2, r3, #4
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d8a:	f003 0308 	and.w	r3, r3, #8
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d011      	beq.n	8005db6 <HAL_UART_IRQHandler+0x126>
 8005d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d96:	f003 0320 	and.w	r3, r3, #32
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d105      	bne.n	8005daa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d005      	beq.n	8005db6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	f043 0208 	orr.w	r2, r3, #8
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 81ed 	beq.w	800619a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc4:	f003 0320 	and.w	r3, r3, #32
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d008      	beq.n	8005dde <HAL_UART_IRQHandler+0x14e>
 8005dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd0:	f003 0320 	and.w	r3, r3, #32
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fb5e 	bl	800649a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de8:	2b40      	cmp	r3, #64	; 0x40
 8005dea:	bf0c      	ite	eq
 8005dec:	2301      	moveq	r3, #1
 8005dee:	2300      	movne	r3, #0
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d103      	bne.n	8005e0a <HAL_UART_IRQHandler+0x17a>
 8005e02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d04f      	beq.n	8005eaa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fa66 	bl	80062dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1a:	2b40      	cmp	r3, #64	; 0x40
 8005e1c:	d141      	bne.n	8005ea2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	3314      	adds	r3, #20
 8005e24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e2c:	e853 3f00 	ldrex	r3, [r3]
 8005e30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3314      	adds	r3, #20
 8005e46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e5a:	e841 2300 	strex	r3, r2, [r1]
 8005e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1d9      	bne.n	8005e1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d013      	beq.n	8005e9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e76:	4a7d      	ldr	r2, [pc, #500]	; (800606c <HAL_UART_IRQHandler+0x3dc>)
 8005e78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fd ffc5 	bl	8003e0e <HAL_DMA_Abort_IT>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d016      	beq.n	8005eb8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e94:	4610      	mov	r0, r2
 8005e96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e98:	e00e      	b.n	8005eb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f99a 	bl	80061d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea0:	e00a      	b.n	8005eb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f996 	bl	80061d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea8:	e006      	b.n	8005eb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f992 	bl	80061d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005eb6:	e170      	b.n	800619a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb8:	bf00      	nop
    return;
 8005eba:	e16e      	b.n	800619a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	f040 814a 	bne.w	800615a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eca:	f003 0310 	and.w	r3, r3, #16
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 8143 	beq.w	800615a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ed8:	f003 0310 	and.w	r3, r3, #16
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 813c 	beq.w	800615a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60bb      	str	r3, [r7, #8]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	60bb      	str	r3, [r7, #8]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	60bb      	str	r3, [r7, #8]
 8005ef6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f02:	2b40      	cmp	r3, #64	; 0x40
 8005f04:	f040 80b4 	bne.w	8006070 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 8140 	beq.w	800619e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f26:	429a      	cmp	r2, r3
 8005f28:	f080 8139 	bcs.w	800619e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f3e:	f000 8088 	beq.w	8006052 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	330c      	adds	r3, #12
 8005f48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f50:	e853 3f00 	ldrex	r3, [r3]
 8005f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	330c      	adds	r3, #12
 8005f6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005f6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f7e:	e841 2300 	strex	r3, r2, [r1]
 8005f82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1d9      	bne.n	8005f42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3314      	adds	r3, #20
 8005f94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f98:	e853 3f00 	ldrex	r3, [r3]
 8005f9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fa0:	f023 0301 	bic.w	r3, r3, #1
 8005fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3314      	adds	r3, #20
 8005fae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005fb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005fb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005fba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005fbe:	e841 2300 	strex	r3, r2, [r1]
 8005fc2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1e1      	bne.n	8005f8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	3314      	adds	r3, #20
 8005fd0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fd4:	e853 3f00 	ldrex	r3, [r3]
 8005fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	3314      	adds	r3, #20
 8005fea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005fee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ff0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ff4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ff6:	e841 2300 	strex	r3, r2, [r1]
 8005ffa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ffc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1e3      	bne.n	8005fca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2220      	movs	r2, #32
 8006006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	330c      	adds	r3, #12
 8006016:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800601a:	e853 3f00 	ldrex	r3, [r3]
 800601e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006022:	f023 0310 	bic.w	r3, r3, #16
 8006026:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	330c      	adds	r3, #12
 8006030:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006034:	65ba      	str	r2, [r7, #88]	; 0x58
 8006036:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800603a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800603c:	e841 2300 	strex	r3, r2, [r1]
 8006040:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e3      	bne.n	8006010 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604c:	4618      	mov	r0, r3
 800604e:	f7fd fe6e 	bl	8003d2e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800605a:	b29b      	uxth	r3, r3
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	b29b      	uxth	r3, r3
 8006060:	4619      	mov	r1, r3
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f8c0 	bl	80061e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006068:	e099      	b.n	800619e <HAL_UART_IRQHandler+0x50e>
 800606a:	bf00      	nop
 800606c:	080063a3 	.word	0x080063a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006078:	b29b      	uxth	r3, r3
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006084:	b29b      	uxth	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	f000 808b 	beq.w	80061a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800608c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 8086 	beq.w	80061a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	330c      	adds	r3, #12
 800609c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a0:	e853 3f00 	ldrex	r3, [r3]
 80060a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	330c      	adds	r3, #12
 80060b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80060ba:	647a      	str	r2, [r7, #68]	; 0x44
 80060bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060c2:	e841 2300 	strex	r3, r2, [r1]
 80060c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1e3      	bne.n	8006096 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3314      	adds	r3, #20
 80060d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	e853 3f00 	ldrex	r3, [r3]
 80060dc:	623b      	str	r3, [r7, #32]
   return(result);
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	f023 0301 	bic.w	r3, r3, #1
 80060e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	3314      	adds	r3, #20
 80060ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80060f2:	633a      	str	r2, [r7, #48]	; 0x30
 80060f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e3      	bne.n	80060ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	330c      	adds	r3, #12
 800611a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	e853 3f00 	ldrex	r3, [r3]
 8006122:	60fb      	str	r3, [r7, #12]
   return(result);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0310 	bic.w	r3, r3, #16
 800612a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	330c      	adds	r3, #12
 8006134:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006138:	61fa      	str	r2, [r7, #28]
 800613a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613c:	69b9      	ldr	r1, [r7, #24]
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	e841 2300 	strex	r3, r2, [r1]
 8006144:	617b      	str	r3, [r7, #20]
   return(result);
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1e3      	bne.n	8006114 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800614c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006150:	4619      	mov	r1, r3
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f848 	bl	80061e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006158:	e023      	b.n	80061a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800615a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800615e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006162:	2b00      	cmp	r3, #0
 8006164:	d009      	beq.n	800617a <HAL_UART_IRQHandler+0x4ea>
 8006166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800616a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f929 	bl	80063ca <UART_Transmit_IT>
    return;
 8006178:	e014      	b.n	80061a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800617a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800617e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00e      	beq.n	80061a4 <HAL_UART_IRQHandler+0x514>
 8006186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800618a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618e:	2b00      	cmp	r3, #0
 8006190:	d008      	beq.n	80061a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f969 	bl	800646a <UART_EndTransmit_IT>
    return;
 8006198:	e004      	b.n	80061a4 <HAL_UART_IRQHandler+0x514>
    return;
 800619a:	bf00      	nop
 800619c:	e002      	b.n	80061a4 <HAL_UART_IRQHandler+0x514>
      return;
 800619e:	bf00      	nop
 80061a0:	e000      	b.n	80061a4 <HAL_UART_IRQHandler+0x514>
      return;
 80061a2:	bf00      	nop
  }
}
 80061a4:	37e8      	adds	r7, #232	; 0xe8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop

080061ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	460b      	mov	r3, r1
 80061f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b090      	sub	sp, #64	; 0x40
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	603b      	str	r3, [r7, #0]
 800620c:	4613      	mov	r3, r2
 800620e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006210:	e050      	b.n	80062b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006218:	d04c      	beq.n	80062b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800621a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800621c:	2b00      	cmp	r3, #0
 800621e:	d007      	beq.n	8006230 <UART_WaitOnFlagUntilTimeout+0x30>
 8006220:	f7fd f878 	bl	8003314 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800622c:	429a      	cmp	r2, r3
 800622e:	d241      	bcs.n	80062b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	330c      	adds	r3, #12
 8006236:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	e853 3f00 	ldrex	r3, [r3]
 800623e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	330c      	adds	r3, #12
 800624e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006250:	637a      	str	r2, [r7, #52]	; 0x34
 8006252:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006254:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006258:	e841 2300 	strex	r3, r2, [r1]
 800625c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800625e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1e5      	bne.n	8006230 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3314      	adds	r3, #20
 800626a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	e853 3f00 	ldrex	r3, [r3]
 8006272:	613b      	str	r3, [r7, #16]
   return(result);
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	f023 0301 	bic.w	r3, r3, #1
 800627a:	63bb      	str	r3, [r7, #56]	; 0x38
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3314      	adds	r3, #20
 8006282:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006284:	623a      	str	r2, [r7, #32]
 8006286:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006288:	69f9      	ldr	r1, [r7, #28]
 800628a:	6a3a      	ldr	r2, [r7, #32]
 800628c:	e841 2300 	strex	r3, r2, [r1]
 8006290:	61bb      	str	r3, [r7, #24]
   return(result);
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1e5      	bne.n	8006264 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2220      	movs	r2, #32
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e00f      	b.n	80062d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	4013      	ands	r3, r2
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	bf0c      	ite	eq
 80062c4:	2301      	moveq	r3, #1
 80062c6:	2300      	movne	r3, #0
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	461a      	mov	r2, r3
 80062cc:	79fb      	ldrb	r3, [r7, #7]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d09f      	beq.n	8006212 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3740      	adds	r7, #64	; 0x40
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062dc:	b480      	push	{r7}
 80062de:	b095      	sub	sp, #84	; 0x54
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	330c      	adds	r3, #12
 80062ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ee:	e853 3f00 	ldrex	r3, [r3]
 80062f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	330c      	adds	r3, #12
 8006302:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006304:	643a      	str	r2, [r7, #64]	; 0x40
 8006306:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006308:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800630a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800630c:	e841 2300 	strex	r3, r2, [r1]
 8006310:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1e5      	bne.n	80062e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3314      	adds	r3, #20
 800631e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	e853 3f00 	ldrex	r3, [r3]
 8006326:	61fb      	str	r3, [r7, #28]
   return(result);
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	f023 0301 	bic.w	r3, r3, #1
 800632e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	3314      	adds	r3, #20
 8006336:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006338:	62fa      	str	r2, [r7, #44]	; 0x2c
 800633a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800633e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006340:	e841 2300 	strex	r3, r2, [r1]
 8006344:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1e5      	bne.n	8006318 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006350:	2b01      	cmp	r3, #1
 8006352:	d119      	bne.n	8006388 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	330c      	adds	r3, #12
 800635a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	e853 3f00 	ldrex	r3, [r3]
 8006362:	60bb      	str	r3, [r7, #8]
   return(result);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f023 0310 	bic.w	r3, r3, #16
 800636a:	647b      	str	r3, [r7, #68]	; 0x44
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	330c      	adds	r3, #12
 8006372:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006374:	61ba      	str	r2, [r7, #24]
 8006376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	6979      	ldr	r1, [r7, #20]
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	613b      	str	r3, [r7, #16]
   return(result);
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e5      	bne.n	8006354 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2220      	movs	r2, #32
 800638c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006396:	bf00      	nop
 8006398:	3754      	adds	r7, #84	; 0x54
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b084      	sub	sp, #16
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f7ff ff09 	bl	80061d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063c2:	bf00      	nop
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b085      	sub	sp, #20
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b21      	cmp	r3, #33	; 0x21
 80063dc:	d13e      	bne.n	800645c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063e6:	d114      	bne.n	8006412 <UART_Transmit_IT+0x48>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d110      	bne.n	8006412 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	881b      	ldrh	r3, [r3, #0]
 80063fa:	461a      	mov	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006404:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	1c9a      	adds	r2, r3, #2
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	621a      	str	r2, [r3, #32]
 8006410:	e008      	b.n	8006424 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	1c59      	adds	r1, r3, #1
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6211      	str	r1, [r2, #32]
 800641c:	781a      	ldrb	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006428:	b29b      	uxth	r3, r3
 800642a:	3b01      	subs	r3, #1
 800642c:	b29b      	uxth	r3, r3
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	4619      	mov	r1, r3
 8006432:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10f      	bne.n	8006458 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006446:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68da      	ldr	r2, [r3, #12]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006456:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006458:	2300      	movs	r3, #0
 800645a:	e000      	b.n	800645e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800645c:	2302      	movs	r3, #2
  }
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b082      	sub	sp, #8
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006480:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2220      	movs	r2, #32
 8006486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7ff fe8e 	bl	80061ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b08c      	sub	sp, #48	; 0x30
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b22      	cmp	r3, #34	; 0x22
 80064ac:	f040 80ab 	bne.w	8006606 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b8:	d117      	bne.n	80064ea <UART_Receive_IT+0x50>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d113      	bne.n	80064ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80064c2:	2300      	movs	r3, #0
 80064c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064d8:	b29a      	uxth	r2, r3
 80064da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e2:	1c9a      	adds	r2, r3, #2
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	629a      	str	r2, [r3, #40]	; 0x28
 80064e8:	e026      	b.n	8006538 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80064f0:	2300      	movs	r3, #0
 80064f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064fc:	d007      	beq.n	800650e <UART_Receive_IT+0x74>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10a      	bne.n	800651c <UART_Receive_IT+0x82>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d106      	bne.n	800651c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	b2da      	uxtb	r2, r3
 8006516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006518:	701a      	strb	r2, [r3, #0]
 800651a:	e008      	b.n	800652e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	b2db      	uxtb	r3, r3
 8006524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006528:	b2da      	uxtb	r2, r3
 800652a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800653c:	b29b      	uxth	r3, r3
 800653e:	3b01      	subs	r3, #1
 8006540:	b29b      	uxth	r3, r3
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	4619      	mov	r1, r3
 8006546:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006548:	2b00      	cmp	r3, #0
 800654a:	d15a      	bne.n	8006602 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68da      	ldr	r2, [r3, #12]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 0220 	bic.w	r2, r2, #32
 800655a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68da      	ldr	r2, [r3, #12]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800656a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	695a      	ldr	r2, [r3, #20]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f022 0201 	bic.w	r2, r2, #1
 800657a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2220      	movs	r2, #32
 8006580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006588:	2b01      	cmp	r3, #1
 800658a:	d135      	bne.n	80065f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	330c      	adds	r3, #12
 8006598:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	e853 3f00 	ldrex	r3, [r3]
 80065a0:	613b      	str	r3, [r7, #16]
   return(result);
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f023 0310 	bic.w	r3, r3, #16
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	330c      	adds	r3, #12
 80065b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b2:	623a      	str	r2, [r7, #32]
 80065b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	69f9      	ldr	r1, [r7, #28]
 80065b8:	6a3a      	ldr	r2, [r7, #32]
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	61bb      	str	r3, [r7, #24]
   return(result);
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1e5      	bne.n	8006592 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0310 	and.w	r3, r3, #16
 80065d0:	2b10      	cmp	r3, #16
 80065d2:	d10a      	bne.n	80065ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065d4:	2300      	movs	r3, #0
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	60fb      	str	r3, [r7, #12]
 80065e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065ee:	4619      	mov	r1, r3
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff fdf9 	bl	80061e8 <HAL_UARTEx_RxEventCallback>
 80065f6:	e002      	b.n	80065fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7ff fde1 	bl	80061c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	e002      	b.n	8006608 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	e000      	b.n	8006608 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006606:	2302      	movs	r3, #2
  }
}
 8006608:	4618      	mov	r0, r3
 800660a:	3730      	adds	r7, #48	; 0x30
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006614:	b09f      	sub	sp, #124	; 0x7c
 8006616:	af00      	add	r7, sp, #0
 8006618:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800661a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006626:	68d9      	ldr	r1, [r3, #12]
 8006628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	ea40 0301 	orr.w	r3, r0, r1
 8006630:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006634:	689a      	ldr	r2, [r3, #8]
 8006636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	431a      	orrs	r2, r3
 800663c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	431a      	orrs	r2, r3
 8006642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	4313      	orrs	r3, r2
 8006648:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800664a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006654:	f021 010c 	bic.w	r1, r1, #12
 8006658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800665e:	430b      	orrs	r3, r1
 8006660:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800666c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800666e:	6999      	ldr	r1, [r3, #24]
 8006670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	ea40 0301 	orr.w	r3, r0, r1
 8006678:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800667a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	4bc5      	ldr	r3, [pc, #788]	; (8006994 <UART_SetConfig+0x384>)
 8006680:	429a      	cmp	r2, r3
 8006682:	d004      	beq.n	800668e <UART_SetConfig+0x7e>
 8006684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	4bc3      	ldr	r3, [pc, #780]	; (8006998 <UART_SetConfig+0x388>)
 800668a:	429a      	cmp	r2, r3
 800668c:	d103      	bne.n	8006696 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800668e:	f7fe fa27 	bl	8004ae0 <HAL_RCC_GetPCLK2Freq>
 8006692:	6778      	str	r0, [r7, #116]	; 0x74
 8006694:	e002      	b.n	800669c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006696:	f7fe fa0f 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 800669a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800669c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066a4:	f040 80b6 	bne.w	8006814 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066aa:	461c      	mov	r4, r3
 80066ac:	f04f 0500 	mov.w	r5, #0
 80066b0:	4622      	mov	r2, r4
 80066b2:	462b      	mov	r3, r5
 80066b4:	1891      	adds	r1, r2, r2
 80066b6:	6439      	str	r1, [r7, #64]	; 0x40
 80066b8:	415b      	adcs	r3, r3
 80066ba:	647b      	str	r3, [r7, #68]	; 0x44
 80066bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066c0:	1912      	adds	r2, r2, r4
 80066c2:	eb45 0303 	adc.w	r3, r5, r3
 80066c6:	f04f 0000 	mov.w	r0, #0
 80066ca:	f04f 0100 	mov.w	r1, #0
 80066ce:	00d9      	lsls	r1, r3, #3
 80066d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066d4:	00d0      	lsls	r0, r2, #3
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	1911      	adds	r1, r2, r4
 80066dc:	6639      	str	r1, [r7, #96]	; 0x60
 80066de:	416b      	adcs	r3, r5
 80066e0:	667b      	str	r3, [r7, #100]	; 0x64
 80066e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	461a      	mov	r2, r3
 80066e8:	f04f 0300 	mov.w	r3, #0
 80066ec:	1891      	adds	r1, r2, r2
 80066ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80066f0:	415b      	adcs	r3, r3
 80066f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80066f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80066fc:	f7f9 fdc0 	bl	8000280 <__aeabi_uldivmod>
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	4ba5      	ldr	r3, [pc, #660]	; (800699c <UART_SetConfig+0x38c>)
 8006706:	fba3 2302 	umull	r2, r3, r3, r2
 800670a:	095b      	lsrs	r3, r3, #5
 800670c:	011e      	lsls	r6, r3, #4
 800670e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006710:	461c      	mov	r4, r3
 8006712:	f04f 0500 	mov.w	r5, #0
 8006716:	4622      	mov	r2, r4
 8006718:	462b      	mov	r3, r5
 800671a:	1891      	adds	r1, r2, r2
 800671c:	6339      	str	r1, [r7, #48]	; 0x30
 800671e:	415b      	adcs	r3, r3
 8006720:	637b      	str	r3, [r7, #52]	; 0x34
 8006722:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006726:	1912      	adds	r2, r2, r4
 8006728:	eb45 0303 	adc.w	r3, r5, r3
 800672c:	f04f 0000 	mov.w	r0, #0
 8006730:	f04f 0100 	mov.w	r1, #0
 8006734:	00d9      	lsls	r1, r3, #3
 8006736:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800673a:	00d0      	lsls	r0, r2, #3
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	1911      	adds	r1, r2, r4
 8006742:	65b9      	str	r1, [r7, #88]	; 0x58
 8006744:	416b      	adcs	r3, r5
 8006746:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	461a      	mov	r2, r3
 800674e:	f04f 0300 	mov.w	r3, #0
 8006752:	1891      	adds	r1, r2, r2
 8006754:	62b9      	str	r1, [r7, #40]	; 0x28
 8006756:	415b      	adcs	r3, r3
 8006758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800675a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800675e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006762:	f7f9 fd8d 	bl	8000280 <__aeabi_uldivmod>
 8006766:	4602      	mov	r2, r0
 8006768:	460b      	mov	r3, r1
 800676a:	4b8c      	ldr	r3, [pc, #560]	; (800699c <UART_SetConfig+0x38c>)
 800676c:	fba3 1302 	umull	r1, r3, r3, r2
 8006770:	095b      	lsrs	r3, r3, #5
 8006772:	2164      	movs	r1, #100	; 0x64
 8006774:	fb01 f303 	mul.w	r3, r1, r3
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	00db      	lsls	r3, r3, #3
 800677c:	3332      	adds	r3, #50	; 0x32
 800677e:	4a87      	ldr	r2, [pc, #540]	; (800699c <UART_SetConfig+0x38c>)
 8006780:	fba2 2303 	umull	r2, r3, r2, r3
 8006784:	095b      	lsrs	r3, r3, #5
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800678c:	441e      	add	r6, r3
 800678e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006790:	4618      	mov	r0, r3
 8006792:	f04f 0100 	mov.w	r1, #0
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	1894      	adds	r4, r2, r2
 800679c:	623c      	str	r4, [r7, #32]
 800679e:	415b      	adcs	r3, r3
 80067a0:	627b      	str	r3, [r7, #36]	; 0x24
 80067a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067a6:	1812      	adds	r2, r2, r0
 80067a8:	eb41 0303 	adc.w	r3, r1, r3
 80067ac:	f04f 0400 	mov.w	r4, #0
 80067b0:	f04f 0500 	mov.w	r5, #0
 80067b4:	00dd      	lsls	r5, r3, #3
 80067b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80067ba:	00d4      	lsls	r4, r2, #3
 80067bc:	4622      	mov	r2, r4
 80067be:	462b      	mov	r3, r5
 80067c0:	1814      	adds	r4, r2, r0
 80067c2:	653c      	str	r4, [r7, #80]	; 0x50
 80067c4:	414b      	adcs	r3, r1
 80067c6:	657b      	str	r3, [r7, #84]	; 0x54
 80067c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	461a      	mov	r2, r3
 80067ce:	f04f 0300 	mov.w	r3, #0
 80067d2:	1891      	adds	r1, r2, r2
 80067d4:	61b9      	str	r1, [r7, #24]
 80067d6:	415b      	adcs	r3, r3
 80067d8:	61fb      	str	r3, [r7, #28]
 80067da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80067e2:	f7f9 fd4d 	bl	8000280 <__aeabi_uldivmod>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	4b6c      	ldr	r3, [pc, #432]	; (800699c <UART_SetConfig+0x38c>)
 80067ec:	fba3 1302 	umull	r1, r3, r3, r2
 80067f0:	095b      	lsrs	r3, r3, #5
 80067f2:	2164      	movs	r1, #100	; 0x64
 80067f4:	fb01 f303 	mul.w	r3, r1, r3
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	3332      	adds	r3, #50	; 0x32
 80067fe:	4a67      	ldr	r2, [pc, #412]	; (800699c <UART_SetConfig+0x38c>)
 8006800:	fba2 2303 	umull	r2, r3, r2, r3
 8006804:	095b      	lsrs	r3, r3, #5
 8006806:	f003 0207 	and.w	r2, r3, #7
 800680a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4432      	add	r2, r6
 8006810:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006812:	e0b9      	b.n	8006988 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006816:	461c      	mov	r4, r3
 8006818:	f04f 0500 	mov.w	r5, #0
 800681c:	4622      	mov	r2, r4
 800681e:	462b      	mov	r3, r5
 8006820:	1891      	adds	r1, r2, r2
 8006822:	6139      	str	r1, [r7, #16]
 8006824:	415b      	adcs	r3, r3
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800682c:	1912      	adds	r2, r2, r4
 800682e:	eb45 0303 	adc.w	r3, r5, r3
 8006832:	f04f 0000 	mov.w	r0, #0
 8006836:	f04f 0100 	mov.w	r1, #0
 800683a:	00d9      	lsls	r1, r3, #3
 800683c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006840:	00d0      	lsls	r0, r2, #3
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	eb12 0804 	adds.w	r8, r2, r4
 800684a:	eb43 0905 	adc.w	r9, r3, r5
 800684e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	4618      	mov	r0, r3
 8006854:	f04f 0100 	mov.w	r1, #0
 8006858:	f04f 0200 	mov.w	r2, #0
 800685c:	f04f 0300 	mov.w	r3, #0
 8006860:	008b      	lsls	r3, r1, #2
 8006862:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006866:	0082      	lsls	r2, r0, #2
 8006868:	4640      	mov	r0, r8
 800686a:	4649      	mov	r1, r9
 800686c:	f7f9 fd08 	bl	8000280 <__aeabi_uldivmod>
 8006870:	4602      	mov	r2, r0
 8006872:	460b      	mov	r3, r1
 8006874:	4b49      	ldr	r3, [pc, #292]	; (800699c <UART_SetConfig+0x38c>)
 8006876:	fba3 2302 	umull	r2, r3, r3, r2
 800687a:	095b      	lsrs	r3, r3, #5
 800687c:	011e      	lsls	r6, r3, #4
 800687e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006880:	4618      	mov	r0, r3
 8006882:	f04f 0100 	mov.w	r1, #0
 8006886:	4602      	mov	r2, r0
 8006888:	460b      	mov	r3, r1
 800688a:	1894      	adds	r4, r2, r2
 800688c:	60bc      	str	r4, [r7, #8]
 800688e:	415b      	adcs	r3, r3
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006896:	1812      	adds	r2, r2, r0
 8006898:	eb41 0303 	adc.w	r3, r1, r3
 800689c:	f04f 0400 	mov.w	r4, #0
 80068a0:	f04f 0500 	mov.w	r5, #0
 80068a4:	00dd      	lsls	r5, r3, #3
 80068a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80068aa:	00d4      	lsls	r4, r2, #3
 80068ac:	4622      	mov	r2, r4
 80068ae:	462b      	mov	r3, r5
 80068b0:	1814      	adds	r4, r2, r0
 80068b2:	64bc      	str	r4, [r7, #72]	; 0x48
 80068b4:	414b      	adcs	r3, r1
 80068b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	4618      	mov	r0, r3
 80068be:	f04f 0100 	mov.w	r1, #0
 80068c2:	f04f 0200 	mov.w	r2, #0
 80068c6:	f04f 0300 	mov.w	r3, #0
 80068ca:	008b      	lsls	r3, r1, #2
 80068cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80068d0:	0082      	lsls	r2, r0, #2
 80068d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80068d6:	f7f9 fcd3 	bl	8000280 <__aeabi_uldivmod>
 80068da:	4602      	mov	r2, r0
 80068dc:	460b      	mov	r3, r1
 80068de:	4b2f      	ldr	r3, [pc, #188]	; (800699c <UART_SetConfig+0x38c>)
 80068e0:	fba3 1302 	umull	r1, r3, r3, r2
 80068e4:	095b      	lsrs	r3, r3, #5
 80068e6:	2164      	movs	r1, #100	; 0x64
 80068e8:	fb01 f303 	mul.w	r3, r1, r3
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	011b      	lsls	r3, r3, #4
 80068f0:	3332      	adds	r3, #50	; 0x32
 80068f2:	4a2a      	ldr	r2, [pc, #168]	; (800699c <UART_SetConfig+0x38c>)
 80068f4:	fba2 2303 	umull	r2, r3, r2, r3
 80068f8:	095b      	lsrs	r3, r3, #5
 80068fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068fe:	441e      	add	r6, r3
 8006900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006902:	4618      	mov	r0, r3
 8006904:	f04f 0100 	mov.w	r1, #0
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	1894      	adds	r4, r2, r2
 800690e:	603c      	str	r4, [r7, #0]
 8006910:	415b      	adcs	r3, r3
 8006912:	607b      	str	r3, [r7, #4]
 8006914:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006918:	1812      	adds	r2, r2, r0
 800691a:	eb41 0303 	adc.w	r3, r1, r3
 800691e:	f04f 0400 	mov.w	r4, #0
 8006922:	f04f 0500 	mov.w	r5, #0
 8006926:	00dd      	lsls	r5, r3, #3
 8006928:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800692c:	00d4      	lsls	r4, r2, #3
 800692e:	4622      	mov	r2, r4
 8006930:	462b      	mov	r3, r5
 8006932:	eb12 0a00 	adds.w	sl, r2, r0
 8006936:	eb43 0b01 	adc.w	fp, r3, r1
 800693a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	4618      	mov	r0, r3
 8006940:	f04f 0100 	mov.w	r1, #0
 8006944:	f04f 0200 	mov.w	r2, #0
 8006948:	f04f 0300 	mov.w	r3, #0
 800694c:	008b      	lsls	r3, r1, #2
 800694e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006952:	0082      	lsls	r2, r0, #2
 8006954:	4650      	mov	r0, sl
 8006956:	4659      	mov	r1, fp
 8006958:	f7f9 fc92 	bl	8000280 <__aeabi_uldivmod>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	4b0e      	ldr	r3, [pc, #56]	; (800699c <UART_SetConfig+0x38c>)
 8006962:	fba3 1302 	umull	r1, r3, r3, r2
 8006966:	095b      	lsrs	r3, r3, #5
 8006968:	2164      	movs	r1, #100	; 0x64
 800696a:	fb01 f303 	mul.w	r3, r1, r3
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	011b      	lsls	r3, r3, #4
 8006972:	3332      	adds	r3, #50	; 0x32
 8006974:	4a09      	ldr	r2, [pc, #36]	; (800699c <UART_SetConfig+0x38c>)
 8006976:	fba2 2303 	umull	r2, r3, r2, r3
 800697a:	095b      	lsrs	r3, r3, #5
 800697c:	f003 020f 	and.w	r2, r3, #15
 8006980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4432      	add	r2, r6
 8006986:	609a      	str	r2, [r3, #8]
}
 8006988:	bf00      	nop
 800698a:	377c      	adds	r7, #124	; 0x7c
 800698c:	46bd      	mov	sp, r7
 800698e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006992:	bf00      	nop
 8006994:	40011000 	.word	0x40011000
 8006998:	40011400 	.word	0x40011400
 800699c:	51eb851f 	.word	0x51eb851f

080069a0 <__errno>:
 80069a0:	4b01      	ldr	r3, [pc, #4]	; (80069a8 <__errno+0x8>)
 80069a2:	6818      	ldr	r0, [r3, #0]
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	2000000c 	.word	0x2000000c

080069ac <__libc_init_array>:
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	4d0d      	ldr	r5, [pc, #52]	; (80069e4 <__libc_init_array+0x38>)
 80069b0:	4c0d      	ldr	r4, [pc, #52]	; (80069e8 <__libc_init_array+0x3c>)
 80069b2:	1b64      	subs	r4, r4, r5
 80069b4:	10a4      	asrs	r4, r4, #2
 80069b6:	2600      	movs	r6, #0
 80069b8:	42a6      	cmp	r6, r4
 80069ba:	d109      	bne.n	80069d0 <__libc_init_array+0x24>
 80069bc:	4d0b      	ldr	r5, [pc, #44]	; (80069ec <__libc_init_array+0x40>)
 80069be:	4c0c      	ldr	r4, [pc, #48]	; (80069f0 <__libc_init_array+0x44>)
 80069c0:	f000 fc4e 	bl	8007260 <_init>
 80069c4:	1b64      	subs	r4, r4, r5
 80069c6:	10a4      	asrs	r4, r4, #2
 80069c8:	2600      	movs	r6, #0
 80069ca:	42a6      	cmp	r6, r4
 80069cc:	d105      	bne.n	80069da <__libc_init_array+0x2e>
 80069ce:	bd70      	pop	{r4, r5, r6, pc}
 80069d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d4:	4798      	blx	r3
 80069d6:	3601      	adds	r6, #1
 80069d8:	e7ee      	b.n	80069b8 <__libc_init_array+0xc>
 80069da:	f855 3b04 	ldr.w	r3, [r5], #4
 80069de:	4798      	blx	r3
 80069e0:	3601      	adds	r6, #1
 80069e2:	e7f2      	b.n	80069ca <__libc_init_array+0x1e>
 80069e4:	080079ec 	.word	0x080079ec
 80069e8:	080079ec 	.word	0x080079ec
 80069ec:	080079ec 	.word	0x080079ec
 80069f0:	080079f0 	.word	0x080079f0

080069f4 <memset>:
 80069f4:	4402      	add	r2, r0
 80069f6:	4603      	mov	r3, r0
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d100      	bne.n	80069fe <memset+0xa>
 80069fc:	4770      	bx	lr
 80069fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006a02:	e7f9      	b.n	80069f8 <memset+0x4>

08006a04 <siprintf>:
 8006a04:	b40e      	push	{r1, r2, r3}
 8006a06:	b500      	push	{lr}
 8006a08:	b09c      	sub	sp, #112	; 0x70
 8006a0a:	ab1d      	add	r3, sp, #116	; 0x74
 8006a0c:	9002      	str	r0, [sp, #8]
 8006a0e:	9006      	str	r0, [sp, #24]
 8006a10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a14:	4809      	ldr	r0, [pc, #36]	; (8006a3c <siprintf+0x38>)
 8006a16:	9107      	str	r1, [sp, #28]
 8006a18:	9104      	str	r1, [sp, #16]
 8006a1a:	4909      	ldr	r1, [pc, #36]	; (8006a40 <siprintf+0x3c>)
 8006a1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a20:	9105      	str	r1, [sp, #20]
 8006a22:	6800      	ldr	r0, [r0, #0]
 8006a24:	9301      	str	r3, [sp, #4]
 8006a26:	a902      	add	r1, sp, #8
 8006a28:	f000 f868 	bl	8006afc <_svfiprintf_r>
 8006a2c:	9b02      	ldr	r3, [sp, #8]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	701a      	strb	r2, [r3, #0]
 8006a32:	b01c      	add	sp, #112	; 0x70
 8006a34:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a38:	b003      	add	sp, #12
 8006a3a:	4770      	bx	lr
 8006a3c:	2000000c 	.word	0x2000000c
 8006a40:	ffff0208 	.word	0xffff0208

08006a44 <__ssputs_r>:
 8006a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a48:	688e      	ldr	r6, [r1, #8]
 8006a4a:	429e      	cmp	r6, r3
 8006a4c:	4682      	mov	sl, r0
 8006a4e:	460c      	mov	r4, r1
 8006a50:	4690      	mov	r8, r2
 8006a52:	461f      	mov	r7, r3
 8006a54:	d838      	bhi.n	8006ac8 <__ssputs_r+0x84>
 8006a56:	898a      	ldrh	r2, [r1, #12]
 8006a58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a5c:	d032      	beq.n	8006ac4 <__ssputs_r+0x80>
 8006a5e:	6825      	ldr	r5, [r4, #0]
 8006a60:	6909      	ldr	r1, [r1, #16]
 8006a62:	eba5 0901 	sub.w	r9, r5, r1
 8006a66:	6965      	ldr	r5, [r4, #20]
 8006a68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a70:	3301      	adds	r3, #1
 8006a72:	444b      	add	r3, r9
 8006a74:	106d      	asrs	r5, r5, #1
 8006a76:	429d      	cmp	r5, r3
 8006a78:	bf38      	it	cc
 8006a7a:	461d      	movcc	r5, r3
 8006a7c:	0553      	lsls	r3, r2, #21
 8006a7e:	d531      	bpl.n	8006ae4 <__ssputs_r+0xa0>
 8006a80:	4629      	mov	r1, r5
 8006a82:	f000 fb47 	bl	8007114 <_malloc_r>
 8006a86:	4606      	mov	r6, r0
 8006a88:	b950      	cbnz	r0, 8006aa0 <__ssputs_r+0x5c>
 8006a8a:	230c      	movs	r3, #12
 8006a8c:	f8ca 3000 	str.w	r3, [sl]
 8006a90:	89a3      	ldrh	r3, [r4, #12]
 8006a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a96:	81a3      	strh	r3, [r4, #12]
 8006a98:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa0:	6921      	ldr	r1, [r4, #16]
 8006aa2:	464a      	mov	r2, r9
 8006aa4:	f000 fabe 	bl	8007024 <memcpy>
 8006aa8:	89a3      	ldrh	r3, [r4, #12]
 8006aaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab2:	81a3      	strh	r3, [r4, #12]
 8006ab4:	6126      	str	r6, [r4, #16]
 8006ab6:	6165      	str	r5, [r4, #20]
 8006ab8:	444e      	add	r6, r9
 8006aba:	eba5 0509 	sub.w	r5, r5, r9
 8006abe:	6026      	str	r6, [r4, #0]
 8006ac0:	60a5      	str	r5, [r4, #8]
 8006ac2:	463e      	mov	r6, r7
 8006ac4:	42be      	cmp	r6, r7
 8006ac6:	d900      	bls.n	8006aca <__ssputs_r+0x86>
 8006ac8:	463e      	mov	r6, r7
 8006aca:	4632      	mov	r2, r6
 8006acc:	6820      	ldr	r0, [r4, #0]
 8006ace:	4641      	mov	r1, r8
 8006ad0:	f000 fab6 	bl	8007040 <memmove>
 8006ad4:	68a3      	ldr	r3, [r4, #8]
 8006ad6:	6822      	ldr	r2, [r4, #0]
 8006ad8:	1b9b      	subs	r3, r3, r6
 8006ada:	4432      	add	r2, r6
 8006adc:	60a3      	str	r3, [r4, #8]
 8006ade:	6022      	str	r2, [r4, #0]
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	e7db      	b.n	8006a9c <__ssputs_r+0x58>
 8006ae4:	462a      	mov	r2, r5
 8006ae6:	f000 fb6f 	bl	80071c8 <_realloc_r>
 8006aea:	4606      	mov	r6, r0
 8006aec:	2800      	cmp	r0, #0
 8006aee:	d1e1      	bne.n	8006ab4 <__ssputs_r+0x70>
 8006af0:	6921      	ldr	r1, [r4, #16]
 8006af2:	4650      	mov	r0, sl
 8006af4:	f000 fabe 	bl	8007074 <_free_r>
 8006af8:	e7c7      	b.n	8006a8a <__ssputs_r+0x46>
	...

08006afc <_svfiprintf_r>:
 8006afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b00:	4698      	mov	r8, r3
 8006b02:	898b      	ldrh	r3, [r1, #12]
 8006b04:	061b      	lsls	r3, r3, #24
 8006b06:	b09d      	sub	sp, #116	; 0x74
 8006b08:	4607      	mov	r7, r0
 8006b0a:	460d      	mov	r5, r1
 8006b0c:	4614      	mov	r4, r2
 8006b0e:	d50e      	bpl.n	8006b2e <_svfiprintf_r+0x32>
 8006b10:	690b      	ldr	r3, [r1, #16]
 8006b12:	b963      	cbnz	r3, 8006b2e <_svfiprintf_r+0x32>
 8006b14:	2140      	movs	r1, #64	; 0x40
 8006b16:	f000 fafd 	bl	8007114 <_malloc_r>
 8006b1a:	6028      	str	r0, [r5, #0]
 8006b1c:	6128      	str	r0, [r5, #16]
 8006b1e:	b920      	cbnz	r0, 8006b2a <_svfiprintf_r+0x2e>
 8006b20:	230c      	movs	r3, #12
 8006b22:	603b      	str	r3, [r7, #0]
 8006b24:	f04f 30ff 	mov.w	r0, #4294967295
 8006b28:	e0d1      	b.n	8006cce <_svfiprintf_r+0x1d2>
 8006b2a:	2340      	movs	r3, #64	; 0x40
 8006b2c:	616b      	str	r3, [r5, #20]
 8006b2e:	2300      	movs	r3, #0
 8006b30:	9309      	str	r3, [sp, #36]	; 0x24
 8006b32:	2320      	movs	r3, #32
 8006b34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b38:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b3c:	2330      	movs	r3, #48	; 0x30
 8006b3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006ce8 <_svfiprintf_r+0x1ec>
 8006b42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b46:	f04f 0901 	mov.w	r9, #1
 8006b4a:	4623      	mov	r3, r4
 8006b4c:	469a      	mov	sl, r3
 8006b4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b52:	b10a      	cbz	r2, 8006b58 <_svfiprintf_r+0x5c>
 8006b54:	2a25      	cmp	r2, #37	; 0x25
 8006b56:	d1f9      	bne.n	8006b4c <_svfiprintf_r+0x50>
 8006b58:	ebba 0b04 	subs.w	fp, sl, r4
 8006b5c:	d00b      	beq.n	8006b76 <_svfiprintf_r+0x7a>
 8006b5e:	465b      	mov	r3, fp
 8006b60:	4622      	mov	r2, r4
 8006b62:	4629      	mov	r1, r5
 8006b64:	4638      	mov	r0, r7
 8006b66:	f7ff ff6d 	bl	8006a44 <__ssputs_r>
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	f000 80aa 	beq.w	8006cc4 <_svfiprintf_r+0x1c8>
 8006b70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b72:	445a      	add	r2, fp
 8006b74:	9209      	str	r2, [sp, #36]	; 0x24
 8006b76:	f89a 3000 	ldrb.w	r3, [sl]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 80a2 	beq.w	8006cc4 <_svfiprintf_r+0x1c8>
 8006b80:	2300      	movs	r3, #0
 8006b82:	f04f 32ff 	mov.w	r2, #4294967295
 8006b86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b8a:	f10a 0a01 	add.w	sl, sl, #1
 8006b8e:	9304      	str	r3, [sp, #16]
 8006b90:	9307      	str	r3, [sp, #28]
 8006b92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b96:	931a      	str	r3, [sp, #104]	; 0x68
 8006b98:	4654      	mov	r4, sl
 8006b9a:	2205      	movs	r2, #5
 8006b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ba0:	4851      	ldr	r0, [pc, #324]	; (8006ce8 <_svfiprintf_r+0x1ec>)
 8006ba2:	f7f9 fb1d 	bl	80001e0 <memchr>
 8006ba6:	9a04      	ldr	r2, [sp, #16]
 8006ba8:	b9d8      	cbnz	r0, 8006be2 <_svfiprintf_r+0xe6>
 8006baa:	06d0      	lsls	r0, r2, #27
 8006bac:	bf44      	itt	mi
 8006bae:	2320      	movmi	r3, #32
 8006bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bb4:	0711      	lsls	r1, r2, #28
 8006bb6:	bf44      	itt	mi
 8006bb8:	232b      	movmi	r3, #43	; 0x2b
 8006bba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8006bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8006bc4:	d015      	beq.n	8006bf2 <_svfiprintf_r+0xf6>
 8006bc6:	9a07      	ldr	r2, [sp, #28]
 8006bc8:	4654      	mov	r4, sl
 8006bca:	2000      	movs	r0, #0
 8006bcc:	f04f 0c0a 	mov.w	ip, #10
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bd6:	3b30      	subs	r3, #48	; 0x30
 8006bd8:	2b09      	cmp	r3, #9
 8006bda:	d94e      	bls.n	8006c7a <_svfiprintf_r+0x17e>
 8006bdc:	b1b0      	cbz	r0, 8006c0c <_svfiprintf_r+0x110>
 8006bde:	9207      	str	r2, [sp, #28]
 8006be0:	e014      	b.n	8006c0c <_svfiprintf_r+0x110>
 8006be2:	eba0 0308 	sub.w	r3, r0, r8
 8006be6:	fa09 f303 	lsl.w	r3, r9, r3
 8006bea:	4313      	orrs	r3, r2
 8006bec:	9304      	str	r3, [sp, #16]
 8006bee:	46a2      	mov	sl, r4
 8006bf0:	e7d2      	b.n	8006b98 <_svfiprintf_r+0x9c>
 8006bf2:	9b03      	ldr	r3, [sp, #12]
 8006bf4:	1d19      	adds	r1, r3, #4
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	9103      	str	r1, [sp, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	bfbb      	ittet	lt
 8006bfe:	425b      	neglt	r3, r3
 8006c00:	f042 0202 	orrlt.w	r2, r2, #2
 8006c04:	9307      	strge	r3, [sp, #28]
 8006c06:	9307      	strlt	r3, [sp, #28]
 8006c08:	bfb8      	it	lt
 8006c0a:	9204      	strlt	r2, [sp, #16]
 8006c0c:	7823      	ldrb	r3, [r4, #0]
 8006c0e:	2b2e      	cmp	r3, #46	; 0x2e
 8006c10:	d10c      	bne.n	8006c2c <_svfiprintf_r+0x130>
 8006c12:	7863      	ldrb	r3, [r4, #1]
 8006c14:	2b2a      	cmp	r3, #42	; 0x2a
 8006c16:	d135      	bne.n	8006c84 <_svfiprintf_r+0x188>
 8006c18:	9b03      	ldr	r3, [sp, #12]
 8006c1a:	1d1a      	adds	r2, r3, #4
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	9203      	str	r2, [sp, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	bfb8      	it	lt
 8006c24:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c28:	3402      	adds	r4, #2
 8006c2a:	9305      	str	r3, [sp, #20]
 8006c2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006cf8 <_svfiprintf_r+0x1fc>
 8006c30:	7821      	ldrb	r1, [r4, #0]
 8006c32:	2203      	movs	r2, #3
 8006c34:	4650      	mov	r0, sl
 8006c36:	f7f9 fad3 	bl	80001e0 <memchr>
 8006c3a:	b140      	cbz	r0, 8006c4e <_svfiprintf_r+0x152>
 8006c3c:	2340      	movs	r3, #64	; 0x40
 8006c3e:	eba0 000a 	sub.w	r0, r0, sl
 8006c42:	fa03 f000 	lsl.w	r0, r3, r0
 8006c46:	9b04      	ldr	r3, [sp, #16]
 8006c48:	4303      	orrs	r3, r0
 8006c4a:	3401      	adds	r4, #1
 8006c4c:	9304      	str	r3, [sp, #16]
 8006c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c52:	4826      	ldr	r0, [pc, #152]	; (8006cec <_svfiprintf_r+0x1f0>)
 8006c54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c58:	2206      	movs	r2, #6
 8006c5a:	f7f9 fac1 	bl	80001e0 <memchr>
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	d038      	beq.n	8006cd4 <_svfiprintf_r+0x1d8>
 8006c62:	4b23      	ldr	r3, [pc, #140]	; (8006cf0 <_svfiprintf_r+0x1f4>)
 8006c64:	bb1b      	cbnz	r3, 8006cae <_svfiprintf_r+0x1b2>
 8006c66:	9b03      	ldr	r3, [sp, #12]
 8006c68:	3307      	adds	r3, #7
 8006c6a:	f023 0307 	bic.w	r3, r3, #7
 8006c6e:	3308      	adds	r3, #8
 8006c70:	9303      	str	r3, [sp, #12]
 8006c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c74:	4433      	add	r3, r6
 8006c76:	9309      	str	r3, [sp, #36]	; 0x24
 8006c78:	e767      	b.n	8006b4a <_svfiprintf_r+0x4e>
 8006c7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c7e:	460c      	mov	r4, r1
 8006c80:	2001      	movs	r0, #1
 8006c82:	e7a5      	b.n	8006bd0 <_svfiprintf_r+0xd4>
 8006c84:	2300      	movs	r3, #0
 8006c86:	3401      	adds	r4, #1
 8006c88:	9305      	str	r3, [sp, #20]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	f04f 0c0a 	mov.w	ip, #10
 8006c90:	4620      	mov	r0, r4
 8006c92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c96:	3a30      	subs	r2, #48	; 0x30
 8006c98:	2a09      	cmp	r2, #9
 8006c9a:	d903      	bls.n	8006ca4 <_svfiprintf_r+0x1a8>
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d0c5      	beq.n	8006c2c <_svfiprintf_r+0x130>
 8006ca0:	9105      	str	r1, [sp, #20]
 8006ca2:	e7c3      	b.n	8006c2c <_svfiprintf_r+0x130>
 8006ca4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ca8:	4604      	mov	r4, r0
 8006caa:	2301      	movs	r3, #1
 8006cac:	e7f0      	b.n	8006c90 <_svfiprintf_r+0x194>
 8006cae:	ab03      	add	r3, sp, #12
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	462a      	mov	r2, r5
 8006cb4:	4b0f      	ldr	r3, [pc, #60]	; (8006cf4 <_svfiprintf_r+0x1f8>)
 8006cb6:	a904      	add	r1, sp, #16
 8006cb8:	4638      	mov	r0, r7
 8006cba:	f3af 8000 	nop.w
 8006cbe:	1c42      	adds	r2, r0, #1
 8006cc0:	4606      	mov	r6, r0
 8006cc2:	d1d6      	bne.n	8006c72 <_svfiprintf_r+0x176>
 8006cc4:	89ab      	ldrh	r3, [r5, #12]
 8006cc6:	065b      	lsls	r3, r3, #25
 8006cc8:	f53f af2c 	bmi.w	8006b24 <_svfiprintf_r+0x28>
 8006ccc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cce:	b01d      	add	sp, #116	; 0x74
 8006cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd4:	ab03      	add	r3, sp, #12
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	462a      	mov	r2, r5
 8006cda:	4b06      	ldr	r3, [pc, #24]	; (8006cf4 <_svfiprintf_r+0x1f8>)
 8006cdc:	a904      	add	r1, sp, #16
 8006cde:	4638      	mov	r0, r7
 8006ce0:	f000 f87a 	bl	8006dd8 <_printf_i>
 8006ce4:	e7eb      	b.n	8006cbe <_svfiprintf_r+0x1c2>
 8006ce6:	bf00      	nop
 8006ce8:	080079b0 	.word	0x080079b0
 8006cec:	080079ba 	.word	0x080079ba
 8006cf0:	00000000 	.word	0x00000000
 8006cf4:	08006a45 	.word	0x08006a45
 8006cf8:	080079b6 	.word	0x080079b6

08006cfc <_printf_common>:
 8006cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d00:	4616      	mov	r6, r2
 8006d02:	4699      	mov	r9, r3
 8006d04:	688a      	ldr	r2, [r1, #8]
 8006d06:	690b      	ldr	r3, [r1, #16]
 8006d08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	bfb8      	it	lt
 8006d10:	4613      	movlt	r3, r2
 8006d12:	6033      	str	r3, [r6, #0]
 8006d14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d18:	4607      	mov	r7, r0
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	b10a      	cbz	r2, 8006d22 <_printf_common+0x26>
 8006d1e:	3301      	adds	r3, #1
 8006d20:	6033      	str	r3, [r6, #0]
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	0699      	lsls	r1, r3, #26
 8006d26:	bf42      	ittt	mi
 8006d28:	6833      	ldrmi	r3, [r6, #0]
 8006d2a:	3302      	addmi	r3, #2
 8006d2c:	6033      	strmi	r3, [r6, #0]
 8006d2e:	6825      	ldr	r5, [r4, #0]
 8006d30:	f015 0506 	ands.w	r5, r5, #6
 8006d34:	d106      	bne.n	8006d44 <_printf_common+0x48>
 8006d36:	f104 0a19 	add.w	sl, r4, #25
 8006d3a:	68e3      	ldr	r3, [r4, #12]
 8006d3c:	6832      	ldr	r2, [r6, #0]
 8006d3e:	1a9b      	subs	r3, r3, r2
 8006d40:	42ab      	cmp	r3, r5
 8006d42:	dc26      	bgt.n	8006d92 <_printf_common+0x96>
 8006d44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d48:	1e13      	subs	r3, r2, #0
 8006d4a:	6822      	ldr	r2, [r4, #0]
 8006d4c:	bf18      	it	ne
 8006d4e:	2301      	movne	r3, #1
 8006d50:	0692      	lsls	r2, r2, #26
 8006d52:	d42b      	bmi.n	8006dac <_printf_common+0xb0>
 8006d54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d58:	4649      	mov	r1, r9
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	47c0      	blx	r8
 8006d5e:	3001      	adds	r0, #1
 8006d60:	d01e      	beq.n	8006da0 <_printf_common+0xa4>
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	68e5      	ldr	r5, [r4, #12]
 8006d66:	6832      	ldr	r2, [r6, #0]
 8006d68:	f003 0306 	and.w	r3, r3, #6
 8006d6c:	2b04      	cmp	r3, #4
 8006d6e:	bf08      	it	eq
 8006d70:	1aad      	subeq	r5, r5, r2
 8006d72:	68a3      	ldr	r3, [r4, #8]
 8006d74:	6922      	ldr	r2, [r4, #16]
 8006d76:	bf0c      	ite	eq
 8006d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d7c:	2500      	movne	r5, #0
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	bfc4      	itt	gt
 8006d82:	1a9b      	subgt	r3, r3, r2
 8006d84:	18ed      	addgt	r5, r5, r3
 8006d86:	2600      	movs	r6, #0
 8006d88:	341a      	adds	r4, #26
 8006d8a:	42b5      	cmp	r5, r6
 8006d8c:	d11a      	bne.n	8006dc4 <_printf_common+0xc8>
 8006d8e:	2000      	movs	r0, #0
 8006d90:	e008      	b.n	8006da4 <_printf_common+0xa8>
 8006d92:	2301      	movs	r3, #1
 8006d94:	4652      	mov	r2, sl
 8006d96:	4649      	mov	r1, r9
 8006d98:	4638      	mov	r0, r7
 8006d9a:	47c0      	blx	r8
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	d103      	bne.n	8006da8 <_printf_common+0xac>
 8006da0:	f04f 30ff 	mov.w	r0, #4294967295
 8006da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006da8:	3501      	adds	r5, #1
 8006daa:	e7c6      	b.n	8006d3a <_printf_common+0x3e>
 8006dac:	18e1      	adds	r1, r4, r3
 8006dae:	1c5a      	adds	r2, r3, #1
 8006db0:	2030      	movs	r0, #48	; 0x30
 8006db2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006db6:	4422      	add	r2, r4
 8006db8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dc0:	3302      	adds	r3, #2
 8006dc2:	e7c7      	b.n	8006d54 <_printf_common+0x58>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	4622      	mov	r2, r4
 8006dc8:	4649      	mov	r1, r9
 8006dca:	4638      	mov	r0, r7
 8006dcc:	47c0      	blx	r8
 8006dce:	3001      	adds	r0, #1
 8006dd0:	d0e6      	beq.n	8006da0 <_printf_common+0xa4>
 8006dd2:	3601      	adds	r6, #1
 8006dd4:	e7d9      	b.n	8006d8a <_printf_common+0x8e>
	...

08006dd8 <_printf_i>:
 8006dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ddc:	460c      	mov	r4, r1
 8006dde:	4691      	mov	r9, r2
 8006de0:	7e27      	ldrb	r7, [r4, #24]
 8006de2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006de4:	2f78      	cmp	r7, #120	; 0x78
 8006de6:	4680      	mov	r8, r0
 8006de8:	469a      	mov	sl, r3
 8006dea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dee:	d807      	bhi.n	8006e00 <_printf_i+0x28>
 8006df0:	2f62      	cmp	r7, #98	; 0x62
 8006df2:	d80a      	bhi.n	8006e0a <_printf_i+0x32>
 8006df4:	2f00      	cmp	r7, #0
 8006df6:	f000 80d8 	beq.w	8006faa <_printf_i+0x1d2>
 8006dfa:	2f58      	cmp	r7, #88	; 0x58
 8006dfc:	f000 80a3 	beq.w	8006f46 <_printf_i+0x16e>
 8006e00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e08:	e03a      	b.n	8006e80 <_printf_i+0xa8>
 8006e0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e0e:	2b15      	cmp	r3, #21
 8006e10:	d8f6      	bhi.n	8006e00 <_printf_i+0x28>
 8006e12:	a001      	add	r0, pc, #4	; (adr r0, 8006e18 <_printf_i+0x40>)
 8006e14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006e18:	08006e71 	.word	0x08006e71
 8006e1c:	08006e85 	.word	0x08006e85
 8006e20:	08006e01 	.word	0x08006e01
 8006e24:	08006e01 	.word	0x08006e01
 8006e28:	08006e01 	.word	0x08006e01
 8006e2c:	08006e01 	.word	0x08006e01
 8006e30:	08006e85 	.word	0x08006e85
 8006e34:	08006e01 	.word	0x08006e01
 8006e38:	08006e01 	.word	0x08006e01
 8006e3c:	08006e01 	.word	0x08006e01
 8006e40:	08006e01 	.word	0x08006e01
 8006e44:	08006f91 	.word	0x08006f91
 8006e48:	08006eb5 	.word	0x08006eb5
 8006e4c:	08006f73 	.word	0x08006f73
 8006e50:	08006e01 	.word	0x08006e01
 8006e54:	08006e01 	.word	0x08006e01
 8006e58:	08006fb3 	.word	0x08006fb3
 8006e5c:	08006e01 	.word	0x08006e01
 8006e60:	08006eb5 	.word	0x08006eb5
 8006e64:	08006e01 	.word	0x08006e01
 8006e68:	08006e01 	.word	0x08006e01
 8006e6c:	08006f7b 	.word	0x08006f7b
 8006e70:	680b      	ldr	r3, [r1, #0]
 8006e72:	1d1a      	adds	r2, r3, #4
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	600a      	str	r2, [r1, #0]
 8006e78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e80:	2301      	movs	r3, #1
 8006e82:	e0a3      	b.n	8006fcc <_printf_i+0x1f4>
 8006e84:	6825      	ldr	r5, [r4, #0]
 8006e86:	6808      	ldr	r0, [r1, #0]
 8006e88:	062e      	lsls	r6, r5, #24
 8006e8a:	f100 0304 	add.w	r3, r0, #4
 8006e8e:	d50a      	bpl.n	8006ea6 <_printf_i+0xce>
 8006e90:	6805      	ldr	r5, [r0, #0]
 8006e92:	600b      	str	r3, [r1, #0]
 8006e94:	2d00      	cmp	r5, #0
 8006e96:	da03      	bge.n	8006ea0 <_printf_i+0xc8>
 8006e98:	232d      	movs	r3, #45	; 0x2d
 8006e9a:	426d      	negs	r5, r5
 8006e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ea0:	485e      	ldr	r0, [pc, #376]	; (800701c <_printf_i+0x244>)
 8006ea2:	230a      	movs	r3, #10
 8006ea4:	e019      	b.n	8006eda <_printf_i+0x102>
 8006ea6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006eaa:	6805      	ldr	r5, [r0, #0]
 8006eac:	600b      	str	r3, [r1, #0]
 8006eae:	bf18      	it	ne
 8006eb0:	b22d      	sxthne	r5, r5
 8006eb2:	e7ef      	b.n	8006e94 <_printf_i+0xbc>
 8006eb4:	680b      	ldr	r3, [r1, #0]
 8006eb6:	6825      	ldr	r5, [r4, #0]
 8006eb8:	1d18      	adds	r0, r3, #4
 8006eba:	6008      	str	r0, [r1, #0]
 8006ebc:	0628      	lsls	r0, r5, #24
 8006ebe:	d501      	bpl.n	8006ec4 <_printf_i+0xec>
 8006ec0:	681d      	ldr	r5, [r3, #0]
 8006ec2:	e002      	b.n	8006eca <_printf_i+0xf2>
 8006ec4:	0669      	lsls	r1, r5, #25
 8006ec6:	d5fb      	bpl.n	8006ec0 <_printf_i+0xe8>
 8006ec8:	881d      	ldrh	r5, [r3, #0]
 8006eca:	4854      	ldr	r0, [pc, #336]	; (800701c <_printf_i+0x244>)
 8006ecc:	2f6f      	cmp	r7, #111	; 0x6f
 8006ece:	bf0c      	ite	eq
 8006ed0:	2308      	moveq	r3, #8
 8006ed2:	230a      	movne	r3, #10
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006eda:	6866      	ldr	r6, [r4, #4]
 8006edc:	60a6      	str	r6, [r4, #8]
 8006ede:	2e00      	cmp	r6, #0
 8006ee0:	bfa2      	ittt	ge
 8006ee2:	6821      	ldrge	r1, [r4, #0]
 8006ee4:	f021 0104 	bicge.w	r1, r1, #4
 8006ee8:	6021      	strge	r1, [r4, #0]
 8006eea:	b90d      	cbnz	r5, 8006ef0 <_printf_i+0x118>
 8006eec:	2e00      	cmp	r6, #0
 8006eee:	d04d      	beq.n	8006f8c <_printf_i+0x1b4>
 8006ef0:	4616      	mov	r6, r2
 8006ef2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ef6:	fb03 5711 	mls	r7, r3, r1, r5
 8006efa:	5dc7      	ldrb	r7, [r0, r7]
 8006efc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f00:	462f      	mov	r7, r5
 8006f02:	42bb      	cmp	r3, r7
 8006f04:	460d      	mov	r5, r1
 8006f06:	d9f4      	bls.n	8006ef2 <_printf_i+0x11a>
 8006f08:	2b08      	cmp	r3, #8
 8006f0a:	d10b      	bne.n	8006f24 <_printf_i+0x14c>
 8006f0c:	6823      	ldr	r3, [r4, #0]
 8006f0e:	07df      	lsls	r7, r3, #31
 8006f10:	d508      	bpl.n	8006f24 <_printf_i+0x14c>
 8006f12:	6923      	ldr	r3, [r4, #16]
 8006f14:	6861      	ldr	r1, [r4, #4]
 8006f16:	4299      	cmp	r1, r3
 8006f18:	bfde      	ittt	le
 8006f1a:	2330      	movle	r3, #48	; 0x30
 8006f1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f24:	1b92      	subs	r2, r2, r6
 8006f26:	6122      	str	r2, [r4, #16]
 8006f28:	f8cd a000 	str.w	sl, [sp]
 8006f2c:	464b      	mov	r3, r9
 8006f2e:	aa03      	add	r2, sp, #12
 8006f30:	4621      	mov	r1, r4
 8006f32:	4640      	mov	r0, r8
 8006f34:	f7ff fee2 	bl	8006cfc <_printf_common>
 8006f38:	3001      	adds	r0, #1
 8006f3a:	d14c      	bne.n	8006fd6 <_printf_i+0x1fe>
 8006f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f40:	b004      	add	sp, #16
 8006f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f46:	4835      	ldr	r0, [pc, #212]	; (800701c <_printf_i+0x244>)
 8006f48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f4c:	6823      	ldr	r3, [r4, #0]
 8006f4e:	680e      	ldr	r6, [r1, #0]
 8006f50:	061f      	lsls	r7, r3, #24
 8006f52:	f856 5b04 	ldr.w	r5, [r6], #4
 8006f56:	600e      	str	r6, [r1, #0]
 8006f58:	d514      	bpl.n	8006f84 <_printf_i+0x1ac>
 8006f5a:	07d9      	lsls	r1, r3, #31
 8006f5c:	bf44      	itt	mi
 8006f5e:	f043 0320 	orrmi.w	r3, r3, #32
 8006f62:	6023      	strmi	r3, [r4, #0]
 8006f64:	b91d      	cbnz	r5, 8006f6e <_printf_i+0x196>
 8006f66:	6823      	ldr	r3, [r4, #0]
 8006f68:	f023 0320 	bic.w	r3, r3, #32
 8006f6c:	6023      	str	r3, [r4, #0]
 8006f6e:	2310      	movs	r3, #16
 8006f70:	e7b0      	b.n	8006ed4 <_printf_i+0xfc>
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	f043 0320 	orr.w	r3, r3, #32
 8006f78:	6023      	str	r3, [r4, #0]
 8006f7a:	2378      	movs	r3, #120	; 0x78
 8006f7c:	4828      	ldr	r0, [pc, #160]	; (8007020 <_printf_i+0x248>)
 8006f7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f82:	e7e3      	b.n	8006f4c <_printf_i+0x174>
 8006f84:	065e      	lsls	r6, r3, #25
 8006f86:	bf48      	it	mi
 8006f88:	b2ad      	uxthmi	r5, r5
 8006f8a:	e7e6      	b.n	8006f5a <_printf_i+0x182>
 8006f8c:	4616      	mov	r6, r2
 8006f8e:	e7bb      	b.n	8006f08 <_printf_i+0x130>
 8006f90:	680b      	ldr	r3, [r1, #0]
 8006f92:	6826      	ldr	r6, [r4, #0]
 8006f94:	6960      	ldr	r0, [r4, #20]
 8006f96:	1d1d      	adds	r5, r3, #4
 8006f98:	600d      	str	r5, [r1, #0]
 8006f9a:	0635      	lsls	r5, r6, #24
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	d501      	bpl.n	8006fa4 <_printf_i+0x1cc>
 8006fa0:	6018      	str	r0, [r3, #0]
 8006fa2:	e002      	b.n	8006faa <_printf_i+0x1d2>
 8006fa4:	0671      	lsls	r1, r6, #25
 8006fa6:	d5fb      	bpl.n	8006fa0 <_printf_i+0x1c8>
 8006fa8:	8018      	strh	r0, [r3, #0]
 8006faa:	2300      	movs	r3, #0
 8006fac:	6123      	str	r3, [r4, #16]
 8006fae:	4616      	mov	r6, r2
 8006fb0:	e7ba      	b.n	8006f28 <_printf_i+0x150>
 8006fb2:	680b      	ldr	r3, [r1, #0]
 8006fb4:	1d1a      	adds	r2, r3, #4
 8006fb6:	600a      	str	r2, [r1, #0]
 8006fb8:	681e      	ldr	r6, [r3, #0]
 8006fba:	6862      	ldr	r2, [r4, #4]
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	f7f9 f90e 	bl	80001e0 <memchr>
 8006fc4:	b108      	cbz	r0, 8006fca <_printf_i+0x1f2>
 8006fc6:	1b80      	subs	r0, r0, r6
 8006fc8:	6060      	str	r0, [r4, #4]
 8006fca:	6863      	ldr	r3, [r4, #4]
 8006fcc:	6123      	str	r3, [r4, #16]
 8006fce:	2300      	movs	r3, #0
 8006fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fd4:	e7a8      	b.n	8006f28 <_printf_i+0x150>
 8006fd6:	6923      	ldr	r3, [r4, #16]
 8006fd8:	4632      	mov	r2, r6
 8006fda:	4649      	mov	r1, r9
 8006fdc:	4640      	mov	r0, r8
 8006fde:	47d0      	blx	sl
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	d0ab      	beq.n	8006f3c <_printf_i+0x164>
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	079b      	lsls	r3, r3, #30
 8006fe8:	d413      	bmi.n	8007012 <_printf_i+0x23a>
 8006fea:	68e0      	ldr	r0, [r4, #12]
 8006fec:	9b03      	ldr	r3, [sp, #12]
 8006fee:	4298      	cmp	r0, r3
 8006ff0:	bfb8      	it	lt
 8006ff2:	4618      	movlt	r0, r3
 8006ff4:	e7a4      	b.n	8006f40 <_printf_i+0x168>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	4632      	mov	r2, r6
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	4640      	mov	r0, r8
 8006ffe:	47d0      	blx	sl
 8007000:	3001      	adds	r0, #1
 8007002:	d09b      	beq.n	8006f3c <_printf_i+0x164>
 8007004:	3501      	adds	r5, #1
 8007006:	68e3      	ldr	r3, [r4, #12]
 8007008:	9903      	ldr	r1, [sp, #12]
 800700a:	1a5b      	subs	r3, r3, r1
 800700c:	42ab      	cmp	r3, r5
 800700e:	dcf2      	bgt.n	8006ff6 <_printf_i+0x21e>
 8007010:	e7eb      	b.n	8006fea <_printf_i+0x212>
 8007012:	2500      	movs	r5, #0
 8007014:	f104 0619 	add.w	r6, r4, #25
 8007018:	e7f5      	b.n	8007006 <_printf_i+0x22e>
 800701a:	bf00      	nop
 800701c:	080079c1 	.word	0x080079c1
 8007020:	080079d2 	.word	0x080079d2

08007024 <memcpy>:
 8007024:	440a      	add	r2, r1
 8007026:	4291      	cmp	r1, r2
 8007028:	f100 33ff 	add.w	r3, r0, #4294967295
 800702c:	d100      	bne.n	8007030 <memcpy+0xc>
 800702e:	4770      	bx	lr
 8007030:	b510      	push	{r4, lr}
 8007032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007036:	f803 4f01 	strb.w	r4, [r3, #1]!
 800703a:	4291      	cmp	r1, r2
 800703c:	d1f9      	bne.n	8007032 <memcpy+0xe>
 800703e:	bd10      	pop	{r4, pc}

08007040 <memmove>:
 8007040:	4288      	cmp	r0, r1
 8007042:	b510      	push	{r4, lr}
 8007044:	eb01 0402 	add.w	r4, r1, r2
 8007048:	d902      	bls.n	8007050 <memmove+0x10>
 800704a:	4284      	cmp	r4, r0
 800704c:	4623      	mov	r3, r4
 800704e:	d807      	bhi.n	8007060 <memmove+0x20>
 8007050:	1e43      	subs	r3, r0, #1
 8007052:	42a1      	cmp	r1, r4
 8007054:	d008      	beq.n	8007068 <memmove+0x28>
 8007056:	f811 2b01 	ldrb.w	r2, [r1], #1
 800705a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800705e:	e7f8      	b.n	8007052 <memmove+0x12>
 8007060:	4402      	add	r2, r0
 8007062:	4601      	mov	r1, r0
 8007064:	428a      	cmp	r2, r1
 8007066:	d100      	bne.n	800706a <memmove+0x2a>
 8007068:	bd10      	pop	{r4, pc}
 800706a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800706e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007072:	e7f7      	b.n	8007064 <memmove+0x24>

08007074 <_free_r>:
 8007074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007076:	2900      	cmp	r1, #0
 8007078:	d048      	beq.n	800710c <_free_r+0x98>
 800707a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800707e:	9001      	str	r0, [sp, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	f1a1 0404 	sub.w	r4, r1, #4
 8007086:	bfb8      	it	lt
 8007088:	18e4      	addlt	r4, r4, r3
 800708a:	f000 f8d3 	bl	8007234 <__malloc_lock>
 800708e:	4a20      	ldr	r2, [pc, #128]	; (8007110 <_free_r+0x9c>)
 8007090:	9801      	ldr	r0, [sp, #4]
 8007092:	6813      	ldr	r3, [r2, #0]
 8007094:	4615      	mov	r5, r2
 8007096:	b933      	cbnz	r3, 80070a6 <_free_r+0x32>
 8007098:	6063      	str	r3, [r4, #4]
 800709a:	6014      	str	r4, [r2, #0]
 800709c:	b003      	add	sp, #12
 800709e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070a2:	f000 b8cd 	b.w	8007240 <__malloc_unlock>
 80070a6:	42a3      	cmp	r3, r4
 80070a8:	d90b      	bls.n	80070c2 <_free_r+0x4e>
 80070aa:	6821      	ldr	r1, [r4, #0]
 80070ac:	1862      	adds	r2, r4, r1
 80070ae:	4293      	cmp	r3, r2
 80070b0:	bf04      	itt	eq
 80070b2:	681a      	ldreq	r2, [r3, #0]
 80070b4:	685b      	ldreq	r3, [r3, #4]
 80070b6:	6063      	str	r3, [r4, #4]
 80070b8:	bf04      	itt	eq
 80070ba:	1852      	addeq	r2, r2, r1
 80070bc:	6022      	streq	r2, [r4, #0]
 80070be:	602c      	str	r4, [r5, #0]
 80070c0:	e7ec      	b.n	800709c <_free_r+0x28>
 80070c2:	461a      	mov	r2, r3
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	b10b      	cbz	r3, 80070cc <_free_r+0x58>
 80070c8:	42a3      	cmp	r3, r4
 80070ca:	d9fa      	bls.n	80070c2 <_free_r+0x4e>
 80070cc:	6811      	ldr	r1, [r2, #0]
 80070ce:	1855      	adds	r5, r2, r1
 80070d0:	42a5      	cmp	r5, r4
 80070d2:	d10b      	bne.n	80070ec <_free_r+0x78>
 80070d4:	6824      	ldr	r4, [r4, #0]
 80070d6:	4421      	add	r1, r4
 80070d8:	1854      	adds	r4, r2, r1
 80070da:	42a3      	cmp	r3, r4
 80070dc:	6011      	str	r1, [r2, #0]
 80070de:	d1dd      	bne.n	800709c <_free_r+0x28>
 80070e0:	681c      	ldr	r4, [r3, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	6053      	str	r3, [r2, #4]
 80070e6:	4421      	add	r1, r4
 80070e8:	6011      	str	r1, [r2, #0]
 80070ea:	e7d7      	b.n	800709c <_free_r+0x28>
 80070ec:	d902      	bls.n	80070f4 <_free_r+0x80>
 80070ee:	230c      	movs	r3, #12
 80070f0:	6003      	str	r3, [r0, #0]
 80070f2:	e7d3      	b.n	800709c <_free_r+0x28>
 80070f4:	6825      	ldr	r5, [r4, #0]
 80070f6:	1961      	adds	r1, r4, r5
 80070f8:	428b      	cmp	r3, r1
 80070fa:	bf04      	itt	eq
 80070fc:	6819      	ldreq	r1, [r3, #0]
 80070fe:	685b      	ldreq	r3, [r3, #4]
 8007100:	6063      	str	r3, [r4, #4]
 8007102:	bf04      	itt	eq
 8007104:	1949      	addeq	r1, r1, r5
 8007106:	6021      	streq	r1, [r4, #0]
 8007108:	6054      	str	r4, [r2, #4]
 800710a:	e7c7      	b.n	800709c <_free_r+0x28>
 800710c:	b003      	add	sp, #12
 800710e:	bd30      	pop	{r4, r5, pc}
 8007110:	200008d0 	.word	0x200008d0

08007114 <_malloc_r>:
 8007114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007116:	1ccd      	adds	r5, r1, #3
 8007118:	f025 0503 	bic.w	r5, r5, #3
 800711c:	3508      	adds	r5, #8
 800711e:	2d0c      	cmp	r5, #12
 8007120:	bf38      	it	cc
 8007122:	250c      	movcc	r5, #12
 8007124:	2d00      	cmp	r5, #0
 8007126:	4606      	mov	r6, r0
 8007128:	db01      	blt.n	800712e <_malloc_r+0x1a>
 800712a:	42a9      	cmp	r1, r5
 800712c:	d903      	bls.n	8007136 <_malloc_r+0x22>
 800712e:	230c      	movs	r3, #12
 8007130:	6033      	str	r3, [r6, #0]
 8007132:	2000      	movs	r0, #0
 8007134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007136:	f000 f87d 	bl	8007234 <__malloc_lock>
 800713a:	4921      	ldr	r1, [pc, #132]	; (80071c0 <_malloc_r+0xac>)
 800713c:	680a      	ldr	r2, [r1, #0]
 800713e:	4614      	mov	r4, r2
 8007140:	b99c      	cbnz	r4, 800716a <_malloc_r+0x56>
 8007142:	4f20      	ldr	r7, [pc, #128]	; (80071c4 <_malloc_r+0xb0>)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	b923      	cbnz	r3, 8007152 <_malloc_r+0x3e>
 8007148:	4621      	mov	r1, r4
 800714a:	4630      	mov	r0, r6
 800714c:	f000 f862 	bl	8007214 <_sbrk_r>
 8007150:	6038      	str	r0, [r7, #0]
 8007152:	4629      	mov	r1, r5
 8007154:	4630      	mov	r0, r6
 8007156:	f000 f85d 	bl	8007214 <_sbrk_r>
 800715a:	1c43      	adds	r3, r0, #1
 800715c:	d123      	bne.n	80071a6 <_malloc_r+0x92>
 800715e:	230c      	movs	r3, #12
 8007160:	6033      	str	r3, [r6, #0]
 8007162:	4630      	mov	r0, r6
 8007164:	f000 f86c 	bl	8007240 <__malloc_unlock>
 8007168:	e7e3      	b.n	8007132 <_malloc_r+0x1e>
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	1b5b      	subs	r3, r3, r5
 800716e:	d417      	bmi.n	80071a0 <_malloc_r+0x8c>
 8007170:	2b0b      	cmp	r3, #11
 8007172:	d903      	bls.n	800717c <_malloc_r+0x68>
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	441c      	add	r4, r3
 8007178:	6025      	str	r5, [r4, #0]
 800717a:	e004      	b.n	8007186 <_malloc_r+0x72>
 800717c:	6863      	ldr	r3, [r4, #4]
 800717e:	42a2      	cmp	r2, r4
 8007180:	bf0c      	ite	eq
 8007182:	600b      	streq	r3, [r1, #0]
 8007184:	6053      	strne	r3, [r2, #4]
 8007186:	4630      	mov	r0, r6
 8007188:	f000 f85a 	bl	8007240 <__malloc_unlock>
 800718c:	f104 000b 	add.w	r0, r4, #11
 8007190:	1d23      	adds	r3, r4, #4
 8007192:	f020 0007 	bic.w	r0, r0, #7
 8007196:	1ac2      	subs	r2, r0, r3
 8007198:	d0cc      	beq.n	8007134 <_malloc_r+0x20>
 800719a:	1a1b      	subs	r3, r3, r0
 800719c:	50a3      	str	r3, [r4, r2]
 800719e:	e7c9      	b.n	8007134 <_malloc_r+0x20>
 80071a0:	4622      	mov	r2, r4
 80071a2:	6864      	ldr	r4, [r4, #4]
 80071a4:	e7cc      	b.n	8007140 <_malloc_r+0x2c>
 80071a6:	1cc4      	adds	r4, r0, #3
 80071a8:	f024 0403 	bic.w	r4, r4, #3
 80071ac:	42a0      	cmp	r0, r4
 80071ae:	d0e3      	beq.n	8007178 <_malloc_r+0x64>
 80071b0:	1a21      	subs	r1, r4, r0
 80071b2:	4630      	mov	r0, r6
 80071b4:	f000 f82e 	bl	8007214 <_sbrk_r>
 80071b8:	3001      	adds	r0, #1
 80071ba:	d1dd      	bne.n	8007178 <_malloc_r+0x64>
 80071bc:	e7cf      	b.n	800715e <_malloc_r+0x4a>
 80071be:	bf00      	nop
 80071c0:	200008d0 	.word	0x200008d0
 80071c4:	200008d4 	.word	0x200008d4

080071c8 <_realloc_r>:
 80071c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ca:	4607      	mov	r7, r0
 80071cc:	4614      	mov	r4, r2
 80071ce:	460e      	mov	r6, r1
 80071d0:	b921      	cbnz	r1, 80071dc <_realloc_r+0x14>
 80071d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80071d6:	4611      	mov	r1, r2
 80071d8:	f7ff bf9c 	b.w	8007114 <_malloc_r>
 80071dc:	b922      	cbnz	r2, 80071e8 <_realloc_r+0x20>
 80071de:	f7ff ff49 	bl	8007074 <_free_r>
 80071e2:	4625      	mov	r5, r4
 80071e4:	4628      	mov	r0, r5
 80071e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071e8:	f000 f830 	bl	800724c <_malloc_usable_size_r>
 80071ec:	42a0      	cmp	r0, r4
 80071ee:	d20f      	bcs.n	8007210 <_realloc_r+0x48>
 80071f0:	4621      	mov	r1, r4
 80071f2:	4638      	mov	r0, r7
 80071f4:	f7ff ff8e 	bl	8007114 <_malloc_r>
 80071f8:	4605      	mov	r5, r0
 80071fa:	2800      	cmp	r0, #0
 80071fc:	d0f2      	beq.n	80071e4 <_realloc_r+0x1c>
 80071fe:	4631      	mov	r1, r6
 8007200:	4622      	mov	r2, r4
 8007202:	f7ff ff0f 	bl	8007024 <memcpy>
 8007206:	4631      	mov	r1, r6
 8007208:	4638      	mov	r0, r7
 800720a:	f7ff ff33 	bl	8007074 <_free_r>
 800720e:	e7e9      	b.n	80071e4 <_realloc_r+0x1c>
 8007210:	4635      	mov	r5, r6
 8007212:	e7e7      	b.n	80071e4 <_realloc_r+0x1c>

08007214 <_sbrk_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	4d06      	ldr	r5, [pc, #24]	; (8007230 <_sbrk_r+0x1c>)
 8007218:	2300      	movs	r3, #0
 800721a:	4604      	mov	r4, r0
 800721c:	4608      	mov	r0, r1
 800721e:	602b      	str	r3, [r5, #0]
 8007220:	f7fb ffa0 	bl	8003164 <_sbrk>
 8007224:	1c43      	adds	r3, r0, #1
 8007226:	d102      	bne.n	800722e <_sbrk_r+0x1a>
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	b103      	cbz	r3, 800722e <_sbrk_r+0x1a>
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	bd38      	pop	{r3, r4, r5, pc}
 8007230:	20000dd8 	.word	0x20000dd8

08007234 <__malloc_lock>:
 8007234:	4801      	ldr	r0, [pc, #4]	; (800723c <__malloc_lock+0x8>)
 8007236:	f000 b811 	b.w	800725c <__retarget_lock_acquire_recursive>
 800723a:	bf00      	nop
 800723c:	20000de0 	.word	0x20000de0

08007240 <__malloc_unlock>:
 8007240:	4801      	ldr	r0, [pc, #4]	; (8007248 <__malloc_unlock+0x8>)
 8007242:	f000 b80c 	b.w	800725e <__retarget_lock_release_recursive>
 8007246:	bf00      	nop
 8007248:	20000de0 	.word	0x20000de0

0800724c <_malloc_usable_size_r>:
 800724c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007250:	1f18      	subs	r0, r3, #4
 8007252:	2b00      	cmp	r3, #0
 8007254:	bfbc      	itt	lt
 8007256:	580b      	ldrlt	r3, [r1, r0]
 8007258:	18c0      	addlt	r0, r0, r3
 800725a:	4770      	bx	lr

0800725c <__retarget_lock_acquire_recursive>:
 800725c:	4770      	bx	lr

0800725e <__retarget_lock_release_recursive>:
 800725e:	4770      	bx	lr

08007260 <_init>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	bf00      	nop
 8007264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007266:	bc08      	pop	{r3}
 8007268:	469e      	mov	lr, r3
 800726a:	4770      	bx	lr

0800726c <_fini>:
 800726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726e:	bf00      	nop
 8007270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007272:	bc08      	pop	{r3}
 8007274:	469e      	mov	lr, r3
 8007276:	4770      	bx	lr
