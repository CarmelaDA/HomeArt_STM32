
HomeArt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000076c  08007270  08007270  00017270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079dc  080079dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080079dc  080079dc  000179dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079e4  080079e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079e4  080079e4  000179e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079e8  080079e8  000179e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080079ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000d7c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000dec  20000dec  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000136e1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002829  00000000  00000000  00033781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  00035fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e18  00000000  00000000  00036e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a38  00000000  00000000  00037c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000124e3  00000000  00000000  0005b6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8b87  00000000  00000000  0006dbb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014673a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041bc  00000000  00000000  00146790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007258 	.word	0x08007258

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007258 	.word	0x08007258

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <ESP_clearBuffer>:
char *Terminate = "</body></html>";


/*****************************************************************************************************************************************/

void ESP_clearBuffer(void){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

	memset(buffer_app, 0, 60);
 800057c:	223c      	movs	r2, #60	; 0x3c
 800057e:	2100      	movs	r1, #0
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <ESP_clearBuffer+0x18>)
 8000582:	f006 fa33 	bl	80069ec <memset>
	buffer_index = 0;
 8000586:	4b03      	ldr	r3, [pc, #12]	; (8000594 <ESP_clearBuffer+0x1c>)
 8000588:	2200      	movs	r2, #0
 800058a:	801a      	strh	r2, [r3, #0]
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200008f8 	.word	0x200008f8
 8000594:	200009e2 	.word	0x200009e2

08000598 <ESP_Init>:


void ESP_Init(char *SSID, char *PASSWD){
 8000598:	b580      	push	{r7, lr}
 800059a:	b09a      	sub	sp, #104	; 0x68
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]

	ESP_clearBuffer();
 80005a2:	f7ff ffe9 	bl	8000578 <ESP_clearBuffer>
	char data[80];

	ringInit();
 80005a6:	f000 fc67 	bl	8000e78 <ringInit>

	HAL_Delay(1000);
 80005aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ae:	f002 feb9 	bl	8003324 <HAL_Delay>

	/********** AT **********/

	UART_send("AT\r\n", WiFi_UART);
 80005b2:	4974      	ldr	r1, [pc, #464]	; (8000784 <ESP_Init+0x1ec>)
 80005b4:	4874      	ldr	r0, [pc, #464]	; (8000788 <ESP_Init+0x1f0>)
 80005b6:	f000 fe1d 	bl	80011f4 <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 80005ba:	bf00      	nop
 80005bc:	4971      	ldr	r1, [pc, #452]	; (8000784 <ESP_Init+0x1ec>)
 80005be:	4873      	ldr	r0, [pc, #460]	; (800078c <ESP_Init+0x1f4>)
 80005c0:	f000 feae 	bl	8001320 <UART_waitFor>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f8      	beq.n	80005bc <ESP_Init+0x24>
	UART_send("AT  ---->  OK\n", PC_UART);
 80005ca:	4971      	ldr	r1, [pc, #452]	; (8000790 <ESP_Init+0x1f8>)
 80005cc:	4871      	ldr	r0, [pc, #452]	; (8000794 <ESP_Init+0x1fc>)
 80005ce:	f000 fe11 	bl	80011f4 <UART_send>


	HAL_Delay(2000);
 80005d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005d6:	f002 fea5 	bl	8003324 <HAL_Delay>


	/********** AT+RST **********/
	UART_send("AT+RST\r\n", WiFi_UART);
 80005da:	496a      	ldr	r1, [pc, #424]	; (8000784 <ESP_Init+0x1ec>)
 80005dc:	486e      	ldr	r0, [pc, #440]	; (8000798 <ESP_Init+0x200>)
 80005de:	f000 fe09 	bl	80011f4 <UART_send>
	UART_send("\nReseteando ", PC_UART);
 80005e2:	496b      	ldr	r1, [pc, #428]	; (8000790 <ESP_Init+0x1f8>)
 80005e4:	486d      	ldr	r0, [pc, #436]	; (800079c <ESP_Init+0x204>)
 80005e6:	f000 fe05 	bl	80011f4 <UART_send>

	for (int i=0; i<3; i++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	667b      	str	r3, [r7, #100]	; 0x64
 80005ee:	e00a      	b.n	8000606 <ESP_Init+0x6e>
	{
		UART_send(" . ", PC_UART);
 80005f0:	4967      	ldr	r1, [pc, #412]	; (8000790 <ESP_Init+0x1f8>)
 80005f2:	486b      	ldr	r0, [pc, #428]	; (80007a0 <ESP_Init+0x208>)
 80005f4:	f000 fdfe 	bl	80011f4 <UART_send>
		HAL_Delay(1500);
 80005f8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005fc:	f002 fe92 	bl	8003324 <HAL_Delay>
	for (int i=0; i<3; i++)
 8000600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000602:	3301      	adds	r3, #1
 8000604:	667b      	str	r3, [r7, #100]	; 0x64
 8000606:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000608:	2b02      	cmp	r3, #2
 800060a:	ddf1      	ble.n	80005f0 <ESP_Init+0x58>
	}


	/********** AT **********/
	UART_send("AT\r\n", WiFi_UART);
 800060c:	495d      	ldr	r1, [pc, #372]	; (8000784 <ESP_Init+0x1ec>)
 800060e:	485e      	ldr	r0, [pc, #376]	; (8000788 <ESP_Init+0x1f0>)
 8000610:	f000 fdf0 	bl	80011f4 <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 8000614:	bf00      	nop
 8000616:	495b      	ldr	r1, [pc, #364]	; (8000784 <ESP_Init+0x1ec>)
 8000618:	485c      	ldr	r0, [pc, #368]	; (800078c <ESP_Init+0x1f4>)
 800061a:	f000 fe81 	bl	8001320 <UART_waitFor>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d0f8      	beq.n	8000616 <ESP_Init+0x7e>
	UART_send("\n\nAT  ---->  OK\n\n", PC_UART);
 8000624:	495a      	ldr	r1, [pc, #360]	; (8000790 <ESP_Init+0x1f8>)
 8000626:	485f      	ldr	r0, [pc, #380]	; (80007a4 <ESP_Init+0x20c>)
 8000628:	f000 fde4 	bl	80011f4 <UART_send>


	HAL_Delay(2000);
 800062c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000630:	f002 fe78 	bl	8003324 <HAL_Delay>


	/********** AT+CWMODE=3 **********/
	UART_send("AT+CWMODE=3\r\n", WiFi_UART);
 8000634:	4953      	ldr	r1, [pc, #332]	; (8000784 <ESP_Init+0x1ec>)
 8000636:	485c      	ldr	r0, [pc, #368]	; (80007a8 <ESP_Init+0x210>)
 8000638:	f000 fddc 	bl	80011f4 <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 800063c:	bf00      	nop
 800063e:	4951      	ldr	r1, [pc, #324]	; (8000784 <ESP_Init+0x1ec>)
 8000640:	4852      	ldr	r0, [pc, #328]	; (800078c <ESP_Init+0x1f4>)
 8000642:	f000 fe6d 	bl	8001320 <UART_waitFor>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d0f8      	beq.n	800063e <ESP_Init+0xa6>
	UART_send("CW MODE  ---->  3\n\n", PC_UART);
 800064c:	4950      	ldr	r1, [pc, #320]	; (8000790 <ESP_Init+0x1f8>)
 800064e:	4857      	ldr	r0, [pc, #348]	; (80007ac <ESP_Init+0x214>)
 8000650:	f000 fdd0 	bl	80011f4 <UART_send>


	/********** AT+CWJAP="SSID","PASSWD" **********/
	UART_send("Conectando con la RED proporcionada ", PC_UART);
 8000654:	494e      	ldr	r1, [pc, #312]	; (8000790 <ESP_Init+0x1f8>)
 8000656:	4856      	ldr	r0, [pc, #344]	; (80007b0 <ESP_Init+0x218>)
 8000658:	f000 fdcc 	bl	80011f4 <UART_send>

	for (int i=0; i<3; i++)
 800065c:	2300      	movs	r3, #0
 800065e:	663b      	str	r3, [r7, #96]	; 0x60
 8000660:	e00a      	b.n	8000678 <ESP_Init+0xe0>
	{
		UART_send(" . ", PC_UART);
 8000662:	494b      	ldr	r1, [pc, #300]	; (8000790 <ESP_Init+0x1f8>)
 8000664:	484e      	ldr	r0, [pc, #312]	; (80007a0 <ESP_Init+0x208>)
 8000666:	f000 fdc5 	bl	80011f4 <UART_send>
		HAL_Delay(1500);
 800066a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800066e:	f002 fe59 	bl	8003324 <HAL_Delay>
	for (int i=0; i<3; i++)
 8000672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000674:	3301      	adds	r3, #1
 8000676:	663b      	str	r3, [r7, #96]	; 0x60
 8000678:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800067a:	2b02      	cmp	r3, #2
 800067c:	ddf1      	ble.n	8000662 <ESP_Init+0xca>
	}

	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 800067e:	f107 000c 	add.w	r0, r7, #12
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	494b      	ldr	r1, [pc, #300]	; (80007b4 <ESP_Init+0x21c>)
 8000688:	f006 f9b8 	bl	80069fc <siprintf>
	UART_send(data, WiFi_UART);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	493c      	ldr	r1, [pc, #240]	; (8000784 <ESP_Init+0x1ec>)
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fdae 	bl	80011f4 <UART_send>
	while (!(UART_waitFor("WIFI GOT IP\r\n\r\nOK\r\n", WiFi_UART)));
 8000698:	bf00      	nop
 800069a:	493a      	ldr	r1, [pc, #232]	; (8000784 <ESP_Init+0x1ec>)
 800069c:	4846      	ldr	r0, [pc, #280]	; (80007b8 <ESP_Init+0x220>)
 800069e:	f000 fe3f 	bl	8001320 <UART_waitFor>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d0f8      	beq.n	800069a <ESP_Init+0x102>
	sprintf (data, "\n\nConectado a  \"%s\"\n\n", SSID);
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	4943      	ldr	r1, [pc, #268]	; (80007bc <ESP_Init+0x224>)
 80006b0:	4618      	mov	r0, r3
 80006b2:	f006 f9a3 	bl	80069fc <siprintf>
	UART_send(data,PC_UART);
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	4935      	ldr	r1, [pc, #212]	; (8000790 <ESP_Init+0x1f8>)
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fd99 	bl	80011f4 <UART_send>
	//UART_send("AT+CIPSTA?\r\n", WiFi_UART);
	//sprintf (data, "AT+CIPSTA?\r\n");


	/********** AT+CIFSR **********/
	UART_send("AT+CIFSR\r\n", WiFi_UART);
 80006c2:	4930      	ldr	r1, [pc, #192]	; (8000784 <ESP_Init+0x1ec>)
 80006c4:	483e      	ldr	r0, [pc, #248]	; (80007c0 <ESP_Init+0x228>)
 80006c6:	f000 fd95 	bl	80011f4 <UART_send>
	while (!(UART_waitFor("CIFSR:STAIP,\"", WiFi_UART)));
 80006ca:	bf00      	nop
 80006cc:	492d      	ldr	r1, [pc, #180]	; (8000784 <ESP_Init+0x1ec>)
 80006ce:	483d      	ldr	r0, [pc, #244]	; (80007c4 <ESP_Init+0x22c>)
 80006d0:	f000 fe26 	bl	8001320 <UART_waitFor>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d0f8      	beq.n	80006cc <ESP_Init+0x134>
	while (!(UART_copyUpto("\"",buffer, WiFi_UART)));
 80006da:	bf00      	nop
 80006dc:	4a29      	ldr	r2, [pc, #164]	; (8000784 <ESP_Init+0x1ec>)
 80006de:	493a      	ldr	r1, [pc, #232]	; (80007c8 <ESP_Init+0x230>)
 80006e0:	483a      	ldr	r0, [pc, #232]	; (80007cc <ESP_Init+0x234>)
 80006e2:	f000 fd9f 	bl	8001224 <UART_copyUpto>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0f7      	beq.n	80006dc <ESP_Init+0x144>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 80006ec:	bf00      	nop
 80006ee:	4925      	ldr	r1, [pc, #148]	; (8000784 <ESP_Init+0x1ec>)
 80006f0:	4826      	ldr	r0, [pc, #152]	; (800078c <ESP_Init+0x1f4>)
 80006f2:	f000 fe15 	bl	8001320 <UART_waitFor>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d0f8      	beq.n	80006ee <ESP_Init+0x156>
	int len = strlen (buffer);
 80006fc:	4832      	ldr	r0, [pc, #200]	; (80007c8 <ESP_Init+0x230>)
 80006fe:	f7ff fd67 	bl	80001d0 <strlen>
 8000702:	4603      	mov	r3, r0
 8000704:	65fb      	str	r3, [r7, #92]	; 0x5c
	buffer[len-1] = '\0';
 8000706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000708:	3b01      	subs	r3, #1
 800070a:	4a2f      	ldr	r2, [pc, #188]	; (80007c8 <ESP_Init+0x230>)
 800070c:	2100      	movs	r1, #0
 800070e:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP :  %s\n\n", buffer);
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	4a2c      	ldr	r2, [pc, #176]	; (80007c8 <ESP_Init+0x230>)
 8000716:	492e      	ldr	r1, [pc, #184]	; (80007d0 <ESP_Init+0x238>)
 8000718:	4618      	mov	r0, r3
 800071a:	f006 f96f 	bl	80069fc <siprintf>
	UART_send(data, PC_UART);
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	491b      	ldr	r1, [pc, #108]	; (8000790 <ESP_Init+0x1f8>)
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fd65 	bl	80011f4 <UART_send>


	/********** AT+CIPMUX=1 **********/
	UART_send("AT+CIPMUX=1\r\n", WiFi_UART);
 800072a:	4916      	ldr	r1, [pc, #88]	; (8000784 <ESP_Init+0x1ec>)
 800072c:	4829      	ldr	r0, [pc, #164]	; (80007d4 <ESP_Init+0x23c>)
 800072e:	f000 fd61 	bl	80011f4 <UART_send>
	while (!(UART_waitFor("AT+CIPMUX=1\r\r\n\r\nOK\r\n", WiFi_UART)));
 8000732:	bf00      	nop
 8000734:	4913      	ldr	r1, [pc, #76]	; (8000784 <ESP_Init+0x1ec>)
 8000736:	4828      	ldr	r0, [pc, #160]	; (80007d8 <ESP_Init+0x240>)
 8000738:	f000 fdf2 	bl	8001320 <UART_waitFor>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0f8      	beq.n	8000734 <ESP_Init+0x19c>
	UART_send("CIPMUX  ---->  OK\n\n", PC_UART);
 8000742:	4913      	ldr	r1, [pc, #76]	; (8000790 <ESP_Init+0x1f8>)
 8000744:	4825      	ldr	r0, [pc, #148]	; (80007dc <ESP_Init+0x244>)
 8000746:	f000 fd55 	bl	80011f4 <UART_send>
	//while (!(UART_waitFor("OK\r\n", WiFi_UART)));
	//UART_send("CIPSTART  ---->  OK\n\n", PC_UART);


	/********** AT+CIPSERVER=1,80 **********/
	UART_send("AT+CIPSERVER=1,80\r\n", WiFi_UART);
 800074a:	490e      	ldr	r1, [pc, #56]	; (8000784 <ESP_Init+0x1ec>)
 800074c:	4824      	ldr	r0, [pc, #144]	; (80007e0 <ESP_Init+0x248>)
 800074e:	f000 fd51 	bl	80011f4 <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 8000752:	bf00      	nop
 8000754:	490b      	ldr	r1, [pc, #44]	; (8000784 <ESP_Init+0x1ec>)
 8000756:	480d      	ldr	r0, [pc, #52]	; (800078c <ESP_Init+0x1f4>)
 8000758:	f000 fde2 	bl	8001320 <UART_waitFor>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d0f8      	beq.n	8000754 <ESP_Init+0x1bc>
	UART_send("CIPSERVER  ---->  OK\n\n", PC_UART);
 8000762:	490b      	ldr	r1, [pc, #44]	; (8000790 <ESP_Init+0x1f8>)
 8000764:	481f      	ldr	r0, [pc, #124]	; (80007e4 <ESP_Init+0x24c>)
 8000766:	f000 fd45 	bl	80011f4 <UART_send>


	/********** FIN **********/
	UART_send("Conectado a la IP\n\n", PC_UART);
 800076a:	4909      	ldr	r1, [pc, #36]	; (8000790 <ESP_Init+0x1f8>)
 800076c:	481e      	ldr	r0, [pc, #120]	; (80007e8 <ESP_Init+0x250>)
 800076e:	f000 fd41 	bl	80011f4 <UART_send>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1); // CONNECTED
 8000772:	2201      	movs	r2, #1
 8000774:	2101      	movs	r1, #1
 8000776:	481d      	ldr	r0, [pc, #116]	; (80007ec <ESP_Init+0x254>)
 8000778:	f003 fd1c 	bl	80041b4 <HAL_GPIO_WritePin>
}
 800077c:	bf00      	nop
 800077e:	3768      	adds	r7, #104	; 0x68
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000d94 	.word	0x20000d94
 8000788:	08007684 	.word	0x08007684
 800078c:	0800768c 	.word	0x0800768c
 8000790:	20000d08 	.word	0x20000d08
 8000794:	08007694 	.word	0x08007694
 8000798:	080076a4 	.word	0x080076a4
 800079c:	080076b0 	.word	0x080076b0
 80007a0:	080076c0 	.word	0x080076c0
 80007a4:	080076c4 	.word	0x080076c4
 80007a8:	080076d8 	.word	0x080076d8
 80007ac:	080076e8 	.word	0x080076e8
 80007b0:	080076fc 	.word	0x080076fc
 80007b4:	08007724 	.word	0x08007724
 80007b8:	0800773c 	.word	0x0800773c
 80007bc:	08007750 	.word	0x08007750
 80007c0:	08007768 	.word	0x08007768
 80007c4:	08007774 	.word	0x08007774
 80007c8:	20000938 	.word	0x20000938
 80007cc:	08007784 	.word	0x08007784
 80007d0:	08007788 	.word	0x08007788
 80007d4:	08007794 	.word	0x08007794
 80007d8:	080077a4 	.word	0x080077a4
 80007dc:	080077bc 	.word	0x080077bc
 80007e0:	080077d0 	.word	0x080077d0
 80007e4:	080077e4 	.word	0x080077e4
 80007e8:	080077fc 	.word	0x080077fc
 80007ec:	40020800 	.word	0x40020800

080007f0 <ESP_messageHandler>:
	}
	return -1;
}


void ESP_messageHandler(void){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

	//__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);

	memset(textrc, 0, 100);
 80007f4:	2264      	movs	r2, #100	; 0x64
 80007f6:	2100      	movs	r1, #0
 80007f8:	48a7      	ldr	r0, [pc, #668]	; (8000a98 <ESP_messageHandler+0x2a8>)
 80007fa:	f006 f8f7 	bl	80069ec <memset>

	HAL_UART_Receive(&huart2, (uint8_t *)textrc, 100, 100); //(uint8_t *)
 80007fe:	2364      	movs	r3, #100	; 0x64
 8000800:	2264      	movs	r2, #100	; 0x64
 8000802:	49a5      	ldr	r1, [pc, #660]	; (8000a98 <ESP_messageHandler+0x2a8>)
 8000804:	48a5      	ldr	r0, [pc, #660]	; (8000a9c <ESP_messageHandler+0x2ac>)
 8000806:	f005 f99c 	bl	8005b42 <HAL_UART_Receive>

	HAL_UART_Transmit(&huart6, (uint8_t *)textrc, 100, HAL_MAX_DELAY);
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	2264      	movs	r2, #100	; 0x64
 8000810:	49a1      	ldr	r1, [pc, #644]	; (8000a98 <ESP_messageHandler+0x2a8>)
 8000812:	48a3      	ldr	r0, [pc, #652]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000814:	f005 f903 	bl	8005a1e <HAL_UART_Transmit>
	UART_send("\n", PC_UART);
 8000818:	49a1      	ldr	r1, [pc, #644]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 800081a:	48a2      	ldr	r0, [pc, #648]	; (8000aa4 <ESP_messageHandler+0x2b4>)
 800081c:	f000 fcea 	bl	80011f4 <UART_send>

	fragment[0] = textrc[25]; // Asignación de Fragmento
 8000820:	4b9d      	ldr	r3, [pc, #628]	; (8000a98 <ESP_messageHandler+0x2a8>)
 8000822:	7e5a      	ldrb	r2, [r3, #25]
 8000824:	4ba0      	ldr	r3, [pc, #640]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 8000826:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart6, (uint8_t *)fragment, 1, HAL_MAX_DELAY);
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	2201      	movs	r2, #1
 800082e:	499e      	ldr	r1, [pc, #632]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 8000830:	489b      	ldr	r0, [pc, #620]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000832:	f005 f8f4 	bl	8005a1e <HAL_UART_Transmit>
	UART_send("\n", PC_UART);
 8000836:	499a      	ldr	r1, [pc, #616]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000838:	489a      	ldr	r0, [pc, #616]	; (8000aa4 <ESP_messageHandler+0x2b4>)
 800083a:	f000 fcdb 	bl	80011f4 <UART_send>


	// SEGURIDAD
	if (fragment[0] == 's'){
 800083e:	4b9a      	ldr	r3, [pc, #616]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b73      	cmp	r3, #115	; 0x73
 8000844:	d10b      	bne.n	800085e <ESP_messageHandler+0x6e>
		UART_send("SEGURIDAD \n", PC_UART);
 8000846:	4996      	ldr	r1, [pc, #600]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000848:	4898      	ldr	r0, [pc, #608]	; (8000aac <ESP_messageHandler+0x2bc>)
 800084a:	f000 fcd3 	bl	80011f4 <UART_send>
		vSeg[0] = textrc[28]; // Alarma Interior
 800084e:	4b92      	ldr	r3, [pc, #584]	; (8000a98 <ESP_messageHandler+0x2a8>)
 8000850:	7f1a      	ldrb	r2, [r3, #28]
 8000852:	4b97      	ldr	r3, [pc, #604]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000854:	701a      	strb	r2, [r3, #0]
		vSeg[1] = textrc[31]; // Alarma Exterior
 8000856:	4b90      	ldr	r3, [pc, #576]	; (8000a98 <ESP_messageHandler+0x2a8>)
 8000858:	7fda      	ldrb	r2, [r3, #31]
 800085a:	4b95      	ldr	r3, [pc, #596]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 800085c:	705a      	strb	r2, [r3, #1]
	}

	// ILUMINACIÓN
	if (fragment[0] == 'i'){
 800085e:	4b92      	ldr	r3, [pc, #584]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b69      	cmp	r3, #105	; 0x69
 8000864:	f040 8230 	bne.w	8000cc8 <ESP_messageHandler+0x4d8>
		UART_send("ILUMINACION \n", PC_UART);
 8000868:	498d      	ldr	r1, [pc, #564]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 800086a:	4892      	ldr	r0, [pc, #584]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 800086c:	f000 fcc2 	bl	80011f4 <UART_send>
		vIlum[0] = textrc[28]; 	// Luz Sala
 8000870:	4b89      	ldr	r3, [pc, #548]	; (8000a98 <ESP_messageHandler+0x2a8>)
 8000872:	7f1a      	ldrb	r2, [r3, #28]
 8000874:	4b90      	ldr	r3, [pc, #576]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000876:	701a      	strb	r2, [r3, #0]
		vIlum[1] = textrc[31]; 	// Luz Comedor
 8000878:	4b87      	ldr	r3, [pc, #540]	; (8000a98 <ESP_messageHandler+0x2a8>)
 800087a:	7fda      	ldrb	r2, [r3, #31]
 800087c:	4b8e      	ldr	r3, [pc, #568]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 800087e:	705a      	strb	r2, [r3, #1]
		vIlum[2] = textrc[34]; 	// Luz Ambiente
 8000880:	4b85      	ldr	r3, [pc, #532]	; (8000a98 <ESP_messageHandler+0x2a8>)
 8000882:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000886:	4b8c      	ldr	r3, [pc, #560]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000888:	709a      	strb	r2, [r3, #2]
		vIlum[3] = textrc[37]; 	// Luz Recibidor
 800088a:	4b83      	ldr	r3, [pc, #524]	; (8000a98 <ESP_messageHandler+0x2a8>)
 800088c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000890:	4b89      	ldr	r3, [pc, #548]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000892:	70da      	strb	r2, [r3, #3]
		vIlum[4] = textrc[40]; 	// Luz Cocina
 8000894:	4b80      	ldr	r3, [pc, #512]	; (8000a98 <ESP_messageHandler+0x2a8>)
 8000896:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800089a:	4b87      	ldr	r3, [pc, #540]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 800089c:	711a      	strb	r2, [r3, #4]
		vIlum[5] = textrc[43]; 	// Luz Fregadero
 800089e:	4b7e      	ldr	r3, [pc, #504]	; (8000a98 <ESP_messageHandler+0x2a8>)
 80008a0:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80008a4:	4b84      	ldr	r3, [pc, #528]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 80008a6:	715a      	strb	r2, [r3, #5]
		vIlum[6] = textrc[46]; 	// Luz Baño
 80008a8:	4b7b      	ldr	r3, [pc, #492]	; (8000a98 <ESP_messageHandler+0x2a8>)
 80008aa:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80008ae:	4b82      	ldr	r3, [pc, #520]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 80008b0:	719a      	strb	r2, [r3, #6]
		vIlum[7] = textrc[49]; 	// Luz Espejo
 80008b2:	4b79      	ldr	r3, [pc, #484]	; (8000a98 <ESP_messageHandler+0x2a8>)
 80008b4:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80008b8:	4b7f      	ldr	r3, [pc, #508]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 80008ba:	71da      	strb	r2, [r3, #7]
		vIlum[8] = textrc[52]; 	// Luz Dormitorio
 80008bc:	4b76      	ldr	r3, [pc, #472]	; (8000a98 <ESP_messageHandler+0x2a8>)
 80008be:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80008c2:	4b7d      	ldr	r3, [pc, #500]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 80008c4:	721a      	strb	r2, [r3, #8]
		vIlum[9] = textrc[55]; 	// Luz Mesita Izq
 80008c6:	4b74      	ldr	r3, [pc, #464]	; (8000a98 <ESP_messageHandler+0x2a8>)
 80008c8:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80008cc:	4b7a      	ldr	r3, [pc, #488]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 80008ce:	725a      	strb	r2, [r3, #9]
		vIlum[10] = textrc[58]; // Luz Mesita Dch
 80008d0:	4b71      	ldr	r3, [pc, #452]	; (8000a98 <ESP_messageHandler+0x2a8>)
 80008d2:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80008d6:	4b78      	ldr	r3, [pc, #480]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 80008d8:	729a      	strb	r2, [r3, #10]
		vIlum[11] = textrc[61]; // Luz Oficina
 80008da:	4b6f      	ldr	r3, [pc, #444]	; (8000a98 <ESP_messageHandler+0x2a8>)
 80008dc:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80008e0:	4b75      	ldr	r3, [pc, #468]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 80008e2:	72da      	strb	r2, [r3, #11]
		vIlum[12] = textrc[64]; // Luz Gaming
 80008e4:	4b6c      	ldr	r3, [pc, #432]	; (8000a98 <ESP_messageHandler+0x2a8>)
 80008e6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80008ea:	4b73      	ldr	r3, [pc, #460]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 80008ec:	731a      	strb	r2, [r3, #12]
		vIlum[13] = textrc[67]; // Luz Rx100
 80008ee:	4b6a      	ldr	r3, [pc, #424]	; (8000a98 <ESP_messageHandler+0x2a8>)
 80008f0:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80008f4:	4b70      	ldr	r3, [pc, #448]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 80008f6:	735a      	strb	r2, [r3, #13]
		vIlum[14] = textrc[68]; // Luz Rx10
 80008f8:	4b67      	ldr	r3, [pc, #412]	; (8000a98 <ESP_messageHandler+0x2a8>)
 80008fa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80008fe:	4b6e      	ldr	r3, [pc, #440]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000900:	739a      	strb	r2, [r3, #14]
		vIlum[15] = textrc[69]; // Luz Rx1
 8000902:	4b65      	ldr	r3, [pc, #404]	; (8000a98 <ESP_messageHandler+0x2a8>)
 8000904:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8000908:	4b6b      	ldr	r3, [pc, #428]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 800090a:	73da      	strb	r2, [r3, #15]
		vIlum[16] = textrc[72]; // Luz Gx100
 800090c:	4b62      	ldr	r3, [pc, #392]	; (8000a98 <ESP_messageHandler+0x2a8>)
 800090e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8000912:	4b69      	ldr	r3, [pc, #420]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000914:	741a      	strb	r2, [r3, #16]
		vIlum[17] = textrc[73]; // Luz Gx10
 8000916:	4b60      	ldr	r3, [pc, #384]	; (8000a98 <ESP_messageHandler+0x2a8>)
 8000918:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800091c:	4b66      	ldr	r3, [pc, #408]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 800091e:	745a      	strb	r2, [r3, #17]
		vIlum[18] = textrc[74]; // Luz Gx1
 8000920:	4b5d      	ldr	r3, [pc, #372]	; (8000a98 <ESP_messageHandler+0x2a8>)
 8000922:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8000926:	4b64      	ldr	r3, [pc, #400]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000928:	749a      	strb	r2, [r3, #18]
		vIlum[19] = textrc[77]; // Luz Bx100
 800092a:	4b5b      	ldr	r3, [pc, #364]	; (8000a98 <ESP_messageHandler+0x2a8>)
 800092c:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8000930:	4b61      	ldr	r3, [pc, #388]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000932:	74da      	strb	r2, [r3, #19]
		vIlum[20] = textrc[78]; // Luz Bx10
 8000934:	4b58      	ldr	r3, [pc, #352]	; (8000a98 <ESP_messageHandler+0x2a8>)
 8000936:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 800093a:	4b5f      	ldr	r3, [pc, #380]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 800093c:	751a      	strb	r2, [r3, #20]
		vIlum[21] = textrc[79]; // Luz Bx1
 800093e:	4b56      	ldr	r3, [pc, #344]	; (8000a98 <ESP_messageHandler+0x2a8>)
 8000940:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8000944:	4b5c      	ldr	r3, [pc, #368]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000946:	755a      	strb	r2, [r3, #21]
		vIlum[22] = textrc[82]; // Luz Garaje
 8000948:	4b53      	ldr	r3, [pc, #332]	; (8000a98 <ESP_messageHandler+0x2a8>)
 800094a:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 800094e:	4b5a      	ldr	r3, [pc, #360]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000950:	759a      	strb	r2, [r3, #22]
		vIlum[23] = textrc[85]; // Luz Jardín
 8000952:	4b51      	ldr	r3, [pc, #324]	; (8000a98 <ESP_messageHandler+0x2a8>)
 8000954:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8000958:	4b57      	ldr	r3, [pc, #348]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 800095a:	75da      	strb	r2, [r3, #23]
		vIlum[24] = textrc[88]; // Luz Porche
 800095c:	4b4e      	ldr	r3, [pc, #312]	; (8000a98 <ESP_messageHandler+0x2a8>)
 800095e:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8000962:	4b55      	ldr	r3, [pc, #340]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000964:	761a      	strb	r2, [r3, #24]
		vIlum[25] = textrc[91]; // Luz Tendedero
 8000966:	4b4c      	ldr	r3, [pc, #304]	; (8000a98 <ESP_messageHandler+0x2a8>)
 8000968:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 800096c:	4b52      	ldr	r3, [pc, #328]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 800096e:	765a      	strb	r2, [r3, #25]


		if(vIlum[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, RESET);
 8000970:	4b51      	ldr	r3, [pc, #324]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b30      	cmp	r3, #48	; 0x30
 8000976:	d105      	bne.n	8000984 <ESP_messageHandler+0x194>
 8000978:	2200      	movs	r2, #0
 800097a:	2108      	movs	r1, #8
 800097c:	484f      	ldr	r0, [pc, #316]	; (8000abc <ESP_messageHandler+0x2cc>)
 800097e:	f003 fc19 	bl	80041b4 <HAL_GPIO_WritePin>
 8000982:	e008      	b.n	8000996 <ESP_messageHandler+0x1a6>
		else if(vIlum[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, SET);
 8000984:	4b4c      	ldr	r3, [pc, #304]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b31      	cmp	r3, #49	; 0x31
 800098a:	d104      	bne.n	8000996 <ESP_messageHandler+0x1a6>
 800098c:	2201      	movs	r2, #1
 800098e:	2108      	movs	r1, #8
 8000990:	484a      	ldr	r0, [pc, #296]	; (8000abc <ESP_messageHandler+0x2cc>)
 8000992:	f003 fc0f 	bl	80041b4 <HAL_GPIO_WritePin>

		if(vIlum[1] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET);
 8000996:	4b48      	ldr	r3, [pc, #288]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000998:	785b      	ldrb	r3, [r3, #1]
 800099a:	2b30      	cmp	r3, #48	; 0x30
 800099c:	d105      	bne.n	80009aa <ESP_messageHandler+0x1ba>
 800099e:	2200      	movs	r2, #0
 80009a0:	2102      	movs	r1, #2
 80009a2:	4846      	ldr	r0, [pc, #280]	; (8000abc <ESP_messageHandler+0x2cc>)
 80009a4:	f003 fc06 	bl	80041b4 <HAL_GPIO_WritePin>
 80009a8:	e008      	b.n	80009bc <ESP_messageHandler+0x1cc>
		else if(vIlum[1] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, SET);
 80009aa:	4b43      	ldr	r3, [pc, #268]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 80009ac:	785b      	ldrb	r3, [r3, #1]
 80009ae:	2b31      	cmp	r3, #49	; 0x31
 80009b0:	d104      	bne.n	80009bc <ESP_messageHandler+0x1cc>
 80009b2:	2201      	movs	r2, #1
 80009b4:	2102      	movs	r1, #2
 80009b6:	4841      	ldr	r0, [pc, #260]	; (8000abc <ESP_messageHandler+0x2cc>)
 80009b8:	f003 fbfc 	bl	80041b4 <HAL_GPIO_WritePin>

		if(vIlum[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, RESET);
 80009bc:	4b3e      	ldr	r3, [pc, #248]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 80009be:	789b      	ldrb	r3, [r3, #2]
 80009c0:	2b30      	cmp	r3, #48	; 0x30
 80009c2:	d105      	bne.n	80009d0 <ESP_messageHandler+0x1e0>
 80009c4:	2200      	movs	r2, #0
 80009c6:	2120      	movs	r1, #32
 80009c8:	483c      	ldr	r0, [pc, #240]	; (8000abc <ESP_messageHandler+0x2cc>)
 80009ca:	f003 fbf3 	bl	80041b4 <HAL_GPIO_WritePin>
 80009ce:	e008      	b.n	80009e2 <ESP_messageHandler+0x1f2>
		else if(vIlum[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, SET);
 80009d0:	4b39      	ldr	r3, [pc, #228]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 80009d2:	789b      	ldrb	r3, [r3, #2]
 80009d4:	2b31      	cmp	r3, #49	; 0x31
 80009d6:	d104      	bne.n	80009e2 <ESP_messageHandler+0x1f2>
 80009d8:	2201      	movs	r2, #1
 80009da:	2120      	movs	r1, #32
 80009dc:	4837      	ldr	r0, [pc, #220]	; (8000abc <ESP_messageHandler+0x2cc>)
 80009de:	f003 fbe9 	bl	80041b4 <HAL_GPIO_WritePin>

		if(vIlum[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET);
 80009e2:	4b35      	ldr	r3, [pc, #212]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 80009e4:	78db      	ldrb	r3, [r3, #3]
 80009e6:	2b30      	cmp	r3, #48	; 0x30
 80009e8:	d105      	bne.n	80009f6 <ESP_messageHandler+0x206>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2101      	movs	r1, #1
 80009ee:	4833      	ldr	r0, [pc, #204]	; (8000abc <ESP_messageHandler+0x2cc>)
 80009f0:	f003 fbe0 	bl	80041b4 <HAL_GPIO_WritePin>
 80009f4:	e008      	b.n	8000a08 <ESP_messageHandler+0x218>
		else if(vIlum[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 80009f6:	4b30      	ldr	r3, [pc, #192]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 80009f8:	78db      	ldrb	r3, [r3, #3]
 80009fa:	2b31      	cmp	r3, #49	; 0x31
 80009fc:	d104      	bne.n	8000a08 <ESP_messageHandler+0x218>
 80009fe:	2201      	movs	r2, #1
 8000a00:	2101      	movs	r1, #1
 8000a02:	482e      	ldr	r0, [pc, #184]	; (8000abc <ESP_messageHandler+0x2cc>)
 8000a04:	f003 fbd6 	bl	80041b4 <HAL_GPIO_WritePin>

		if(vIlum[4] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET);
 8000a08:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000a0a:	791b      	ldrb	r3, [r3, #4]
 8000a0c:	2b30      	cmp	r3, #48	; 0x30
 8000a0e:	d106      	bne.n	8000a1e <ESP_messageHandler+0x22e>
 8000a10:	2200      	movs	r2, #0
 8000a12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a16:	482a      	ldr	r0, [pc, #168]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a18:	f003 fbcc 	bl	80041b4 <HAL_GPIO_WritePin>
 8000a1c:	e009      	b.n	8000a32 <ESP_messageHandler+0x242>
		else if(vIlum[4] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 8000a1e:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000a20:	791b      	ldrb	r3, [r3, #4]
 8000a22:	2b31      	cmp	r3, #49	; 0x31
 8000a24:	d105      	bne.n	8000a32 <ESP_messageHandler+0x242>
 8000a26:	2201      	movs	r2, #1
 8000a28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a2c:	4824      	ldr	r0, [pc, #144]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a2e:	f003 fbc1 	bl	80041b4 <HAL_GPIO_WritePin>

		if(vIlum[5] == '0') HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET);
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000a34:	795b      	ldrb	r3, [r3, #5]
 8000a36:	2b30      	cmp	r3, #48	; 0x30
 8000a38:	d106      	bne.n	8000a48 <ESP_messageHandler+0x258>
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a40:	4820      	ldr	r0, [pc, #128]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 8000a42:	f003 fbb7 	bl	80041b4 <HAL_GPIO_WritePin>
 8000a46:	e009      	b.n	8000a5c <ESP_messageHandler+0x26c>
		else if(vIlum[5] == '1')HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 8000a48:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000a4a:	795b      	ldrb	r3, [r3, #5]
 8000a4c:	2b31      	cmp	r3, #49	; 0x31
 8000a4e:	d105      	bne.n	8000a5c <ESP_messageHandler+0x26c>
 8000a50:	2201      	movs	r2, #1
 8000a52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a56:	481b      	ldr	r0, [pc, #108]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 8000a58:	f003 fbac 	bl	80041b4 <HAL_GPIO_WritePin>

		if(vIlum[6] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, RESET);
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000a5e:	799b      	ldrb	r3, [r3, #6]
 8000a60:	2b30      	cmp	r3, #48	; 0x30
 8000a62:	d105      	bne.n	8000a70 <ESP_messageHandler+0x280>
 8000a64:	2200      	movs	r2, #0
 8000a66:	2140      	movs	r1, #64	; 0x40
 8000a68:	4814      	ldr	r0, [pc, #80]	; (8000abc <ESP_messageHandler+0x2cc>)
 8000a6a:	f003 fba3 	bl	80041b4 <HAL_GPIO_WritePin>
 8000a6e:	e008      	b.n	8000a82 <ESP_messageHandler+0x292>
		else if(vIlum[6] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, SET);
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000a72:	799b      	ldrb	r3, [r3, #6]
 8000a74:	2b31      	cmp	r3, #49	; 0x31
 8000a76:	d104      	bne.n	8000a82 <ESP_messageHandler+0x292>
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2140      	movs	r1, #64	; 0x40
 8000a7c:	480f      	ldr	r0, [pc, #60]	; (8000abc <ESP_messageHandler+0x2cc>)
 8000a7e:	f003 fb99 	bl	80041b4 <HAL_GPIO_WritePin>

		if(vIlum[7] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000a84:	79db      	ldrb	r3, [r3, #7]
 8000a86:	2b30      	cmp	r3, #48	; 0x30
 8000a88:	d120      	bne.n	8000acc <ESP_messageHandler+0x2dc>
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2108      	movs	r1, #8
 8000a8e:	480e      	ldr	r0, [pc, #56]	; (8000ac8 <ESP_messageHandler+0x2d8>)
 8000a90:	f003 fb90 	bl	80041b4 <HAL_GPIO_WritePin>
 8000a94:	e023      	b.n	8000ade <ESP_messageHandler+0x2ee>
 8000a96:	bf00      	nop
 8000a98:	20000970 	.word	0x20000970
 8000a9c:	20000d94 	.word	0x20000d94
 8000aa0:	20000d08 	.word	0x20000d08
 8000aa4:	08007878 	.word	0x08007878
 8000aa8:	20000968 	.word	0x20000968
 8000aac:	0800787c 	.word	0x0800787c
 8000ab0:	200009e0 	.word	0x200009e0
 8000ab4:	08007888 	.word	0x08007888
 8000ab8:	2000094c 	.word	0x2000094c
 8000abc:	40020c00 	.word	0x40020c00
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	40020000 	.word	0x40020000
 8000ac8:	40020400 	.word	0x40020400
		else if(vIlum[7] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8000acc:	4b71      	ldr	r3, [pc, #452]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000ace:	79db      	ldrb	r3, [r3, #7]
 8000ad0:	2b31      	cmp	r3, #49	; 0x31
 8000ad2:	d104      	bne.n	8000ade <ESP_messageHandler+0x2ee>
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2108      	movs	r1, #8
 8000ad8:	486f      	ldr	r0, [pc, #444]	; (8000c98 <ESP_messageHandler+0x4a8>)
 8000ada:	f003 fb6b 	bl	80041b4 <HAL_GPIO_WritePin>

		if(vIlum[8] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, RESET);
 8000ade:	4b6d      	ldr	r3, [pc, #436]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000ae0:	7a1b      	ldrb	r3, [r3, #8]
 8000ae2:	2b30      	cmp	r3, #48	; 0x30
 8000ae4:	d105      	bne.n	8000af2 <ESP_messageHandler+0x302>
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2180      	movs	r1, #128	; 0x80
 8000aea:	486c      	ldr	r0, [pc, #432]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000aec:	f003 fb62 	bl	80041b4 <HAL_GPIO_WritePin>
 8000af0:	e008      	b.n	8000b04 <ESP_messageHandler+0x314>
		else if(vIlum[8] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET);
 8000af2:	4b68      	ldr	r3, [pc, #416]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000af4:	7a1b      	ldrb	r3, [r3, #8]
 8000af6:	2b31      	cmp	r3, #49	; 0x31
 8000af8:	d104      	bne.n	8000b04 <ESP_messageHandler+0x314>
 8000afa:	2201      	movs	r2, #1
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	4867      	ldr	r0, [pc, #412]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000b00:	f003 fb58 	bl	80041b4 <HAL_GPIO_WritePin>

		if(vIlum[9] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000b04:	4b63      	ldr	r3, [pc, #396]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000b06:	7a5b      	ldrb	r3, [r3, #9]
 8000b08:	2b30      	cmp	r3, #48	; 0x30
 8000b0a:	d105      	bne.n	8000b18 <ESP_messageHandler+0x328>
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2110      	movs	r1, #16
 8000b10:	4861      	ldr	r0, [pc, #388]	; (8000c98 <ESP_messageHandler+0x4a8>)
 8000b12:	f003 fb4f 	bl	80041b4 <HAL_GPIO_WritePin>
 8000b16:	e008      	b.n	8000b2a <ESP_messageHandler+0x33a>
		else if(vIlum[9] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000b18:	4b5e      	ldr	r3, [pc, #376]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000b1a:	7a5b      	ldrb	r3, [r3, #9]
 8000b1c:	2b31      	cmp	r3, #49	; 0x31
 8000b1e:	d104      	bne.n	8000b2a <ESP_messageHandler+0x33a>
 8000b20:	2201      	movs	r2, #1
 8000b22:	2110      	movs	r1, #16
 8000b24:	485c      	ldr	r0, [pc, #368]	; (8000c98 <ESP_messageHandler+0x4a8>)
 8000b26:	f003 fb45 	bl	80041b4 <HAL_GPIO_WritePin>

		if(vIlum[10] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000b2a:	4b5a      	ldr	r3, [pc, #360]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000b2c:	7a9b      	ldrb	r3, [r3, #10]
 8000b2e:	2b30      	cmp	r3, #48	; 0x30
 8000b30:	d105      	bne.n	8000b3e <ESP_messageHandler+0x34e>
 8000b32:	2200      	movs	r2, #0
 8000b34:	2140      	movs	r1, #64	; 0x40
 8000b36:	4858      	ldr	r0, [pc, #352]	; (8000c98 <ESP_messageHandler+0x4a8>)
 8000b38:	f003 fb3c 	bl	80041b4 <HAL_GPIO_WritePin>
 8000b3c:	e008      	b.n	8000b50 <ESP_messageHandler+0x360>
		else if(vIlum[10] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8000b3e:	4b55      	ldr	r3, [pc, #340]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000b40:	7a9b      	ldrb	r3, [r3, #10]
 8000b42:	2b31      	cmp	r3, #49	; 0x31
 8000b44:	d104      	bne.n	8000b50 <ESP_messageHandler+0x360>
 8000b46:	2201      	movs	r2, #1
 8000b48:	2140      	movs	r1, #64	; 0x40
 8000b4a:	4853      	ldr	r0, [pc, #332]	; (8000c98 <ESP_messageHandler+0x4a8>)
 8000b4c:	f003 fb32 	bl	80041b4 <HAL_GPIO_WritePin>

		if(vIlum[11] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000b50:	4b50      	ldr	r3, [pc, #320]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000b52:	7adb      	ldrb	r3, [r3, #11]
 8000b54:	2b30      	cmp	r3, #48	; 0x30
 8000b56:	d105      	bne.n	8000b64 <ESP_messageHandler+0x374>
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2120      	movs	r1, #32
 8000b5c:	484e      	ldr	r0, [pc, #312]	; (8000c98 <ESP_messageHandler+0x4a8>)
 8000b5e:	f003 fb29 	bl	80041b4 <HAL_GPIO_WritePin>
 8000b62:	e008      	b.n	8000b76 <ESP_messageHandler+0x386>
		else if(vIlum[11] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000b64:	4b4b      	ldr	r3, [pc, #300]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000b66:	7adb      	ldrb	r3, [r3, #11]
 8000b68:	2b31      	cmp	r3, #49	; 0x31
 8000b6a:	d104      	bne.n	8000b76 <ESP_messageHandler+0x386>
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2120      	movs	r1, #32
 8000b70:	4849      	ldr	r0, [pc, #292]	; (8000c98 <ESP_messageHandler+0x4a8>)
 8000b72:	f003 fb1f 	bl	80041b4 <HAL_GPIO_WritePin>

		if(vIlum[12] == '0'){
 8000b76:	4b47      	ldr	r3, [pc, #284]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000b78:	7b1b      	ldrb	r3, [r3, #12]
 8000b7a:	2b30      	cmp	r3, #48	; 0x30
 8000b7c:	d10c      	bne.n	8000b98 <ESP_messageHandler+0x3a8>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000b7e:	4b48      	ldr	r3, [pc, #288]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2200      	movs	r2, #0
 8000b84:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000b86:	4b46      	ldr	r3, [pc, #280]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000b8e:	4b44      	ldr	r3, [pc, #272]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2200      	movs	r2, #0
 8000b94:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b96:	e036      	b.n	8000c06 <ESP_messageHandler+0x416>
		}
		else if(vIlum[12] == '1'){
 8000b98:	4b3e      	ldr	r3, [pc, #248]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000b9a:	7b1b      	ldrb	r3, [r3, #12]
 8000b9c:	2b31      	cmp	r3, #49	; 0x31
 8000b9e:	d132      	bne.n	8000c06 <ESP_messageHandler+0x416>

			//uint8_t r, g, b;

			r = rgb_value (vIlum[13],vIlum[14],vIlum[15]);
 8000ba0:	4b3c      	ldr	r3, [pc, #240]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000ba2:	7b5b      	ldrb	r3, [r3, #13]
 8000ba4:	4a3b      	ldr	r2, [pc, #236]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000ba6:	7b91      	ldrb	r1, [r2, #14]
 8000ba8:	4a3a      	ldr	r2, [pc, #232]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000baa:	7bd2      	ldrb	r2, [r2, #15]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 fcbd 	bl	800152c <rgb_value>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	4a3b      	ldr	r2, [pc, #236]	; (8000ca4 <ESP_messageHandler+0x4b4>)
 8000bb6:	6013      	str	r3, [r2, #0]
			g = rgb_value (vIlum[16],vIlum[17],vIlum[18]);
 8000bb8:	4b36      	ldr	r3, [pc, #216]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000bba:	7c1b      	ldrb	r3, [r3, #16]
 8000bbc:	4a35      	ldr	r2, [pc, #212]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000bbe:	7c51      	ldrb	r1, [r2, #17]
 8000bc0:	4a34      	ldr	r2, [pc, #208]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000bc2:	7c92      	ldrb	r2, [r2, #18]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 fcb1 	bl	800152c <rgb_value>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	4a36      	ldr	r2, [pc, #216]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000bce:	6013      	str	r3, [r2, #0]
			b = rgb_value (vIlum[19],vIlum[20],vIlum[21]);
 8000bd0:	4b30      	ldr	r3, [pc, #192]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000bd2:	7cdb      	ldrb	r3, [r3, #19]
 8000bd4:	4a2f      	ldr	r2, [pc, #188]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000bd6:	7d11      	ldrb	r1, [r2, #20]
 8000bd8:	4a2e      	ldr	r2, [pc, #184]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000bda:	7d52      	ldrb	r2, [r2, #21]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 fca5 	bl	800152c <rgb_value>
 8000be2:	4603      	mov	r3, r0
 8000be4:	4a31      	ldr	r2, [pc, #196]	; (8000cac <ESP_messageHandler+0x4bc>)
 8000be6:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, g); // PA8
 8000be8:	4b2f      	ldr	r3, [pc, #188]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b2c      	ldr	r3, [pc, #176]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, r); // PA9
 8000bf2:	4b2c      	ldr	r3, [pc, #176]	; (8000ca4 <ESP_messageHandler+0x4b4>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	4b2a      	ldr	r3, [pc, #168]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b); // PA10
 8000bfc:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <ESP_messageHandler+0x4bc>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		if(vIlum[22] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET);
 8000c06:	4b23      	ldr	r3, [pc, #140]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000c08:	7d9b      	ldrb	r3, [r3, #22]
 8000c0a:	2b30      	cmp	r3, #48	; 0x30
 8000c0c:	d106      	bne.n	8000c1c <ESP_messageHandler+0x42c>
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c14:	4826      	ldr	r0, [pc, #152]	; (8000cb0 <ESP_messageHandler+0x4c0>)
 8000c16:	f003 facd 	bl	80041b4 <HAL_GPIO_WritePin>
 8000c1a:	e009      	b.n	8000c30 <ESP_messageHandler+0x440>
		else if(vIlum[22] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 8000c1c:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000c1e:	7d9b      	ldrb	r3, [r3, #22]
 8000c20:	2b31      	cmp	r3, #49	; 0x31
 8000c22:	d105      	bne.n	8000c30 <ESP_messageHandler+0x440>
 8000c24:	2201      	movs	r2, #1
 8000c26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c2a:	4821      	ldr	r0, [pc, #132]	; (8000cb0 <ESP_messageHandler+0x4c0>)
 8000c2c:	f003 fac2 	bl	80041b4 <HAL_GPIO_WritePin>

		if(vIlum[23] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET);
 8000c30:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000c32:	7ddb      	ldrb	r3, [r3, #23]
 8000c34:	2b30      	cmp	r3, #48	; 0x30
 8000c36:	d105      	bne.n	8000c44 <ESP_messageHandler+0x454>
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2104      	movs	r1, #4
 8000c3c:	4817      	ldr	r0, [pc, #92]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c3e:	f003 fab9 	bl	80041b4 <HAL_GPIO_WritePin>
 8000c42:	e008      	b.n	8000c56 <ESP_messageHandler+0x466>
		else if(vIlum[23] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000c46:	7ddb      	ldrb	r3, [r3, #23]
 8000c48:	2b31      	cmp	r3, #49	; 0x31
 8000c4a:	d104      	bne.n	8000c56 <ESP_messageHandler+0x466>
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2104      	movs	r1, #4
 8000c50:	4812      	ldr	r0, [pc, #72]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c52:	f003 faaf 	bl	80041b4 <HAL_GPIO_WritePin>

		if(vIlum[24] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000c58:	7e1b      	ldrb	r3, [r3, #24]
 8000c5a:	2b30      	cmp	r3, #48	; 0x30
 8000c5c:	d105      	bne.n	8000c6a <ESP_messageHandler+0x47a>
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2110      	movs	r1, #16
 8000c62:	480e      	ldr	r0, [pc, #56]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c64:	f003 faa6 	bl	80041b4 <HAL_GPIO_WritePin>
 8000c68:	e008      	b.n	8000c7c <ESP_messageHandler+0x48c>
		else if(vIlum[24] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000c6c:	7e1b      	ldrb	r3, [r3, #24]
 8000c6e:	2b31      	cmp	r3, #49	; 0x31
 8000c70:	d104      	bne.n	8000c7c <ESP_messageHandler+0x48c>
 8000c72:	2201      	movs	r2, #1
 8000c74:	2110      	movs	r1, #16
 8000c76:	4809      	ldr	r0, [pc, #36]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c78:	f003 fa9c 	bl	80041b4 <HAL_GPIO_WritePin>

		if(vIlum[25] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <ESP_messageHandler+0x4a4>)
 8000c7e:	7e5b      	ldrb	r3, [r3, #25]
 8000c80:	2b30      	cmp	r3, #48	; 0x30
 8000c82:	d117      	bne.n	8000cb4 <ESP_messageHandler+0x4c4>
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c8a:	4809      	ldr	r0, [pc, #36]	; (8000cb0 <ESP_messageHandler+0x4c0>)
 8000c8c:	f003 fa92 	bl	80041b4 <HAL_GPIO_WritePin>
 8000c90:	e01a      	b.n	8000cc8 <ESP_messageHandler+0x4d8>
 8000c92:	bf00      	nop
 8000c94:	2000094c 	.word	0x2000094c
 8000c98:	40020400 	.word	0x40020400
 8000c9c:	40020c00 	.word	0x40020c00
 8000ca0:	20000c78 	.word	0x20000c78
 8000ca4:	200008ec 	.word	0x200008ec
 8000ca8:	200008e0 	.word	0x200008e0
 8000cac:	200008dc 	.word	0x200008dc
 8000cb0:	40020800 	.word	0x40020800
		else if(vIlum[25] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8000cb4:	4b60      	ldr	r3, [pc, #384]	; (8000e38 <ESP_messageHandler+0x648>)
 8000cb6:	7e5b      	ldrb	r3, [r3, #25]
 8000cb8:	2b31      	cmp	r3, #49	; 0x31
 8000cba:	d105      	bne.n	8000cc8 <ESP_messageHandler+0x4d8>
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc2:	485e      	ldr	r0, [pc, #376]	; (8000e3c <ESP_messageHandler+0x64c>)
 8000cc4:	f003 fa76 	bl	80041b4 <HAL_GPIO_WritePin>
	}

	// PUERTAS Y VENTANAS
	if (fragment[0] == 'p'){
 8000cc8:	4b5d      	ldr	r3, [pc, #372]	; (8000e40 <ESP_messageHandler+0x650>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b70      	cmp	r3, #112	; 0x70
 8000cce:	d107      	bne.n	8000ce0 <ESP_messageHandler+0x4f0>
		UART_send("PUERTAS Y VENTANAS (PUERTA PARCELA)\n", PC_UART);
 8000cd0:	495c      	ldr	r1, [pc, #368]	; (8000e44 <ESP_messageHandler+0x654>)
 8000cd2:	485d      	ldr	r0, [pc, #372]	; (8000e48 <ESP_messageHandler+0x658>)
 8000cd4:	f000 fa8e 	bl	80011f4 <UART_send>
		vVent[1] = textrc[28]; // Puerta Parcela
 8000cd8:	4b5c      	ldr	r3, [pc, #368]	; (8000e4c <ESP_messageHandler+0x65c>)
 8000cda:	7f1a      	ldrb	r2, [r3, #28]
 8000cdc:	4b5c      	ldr	r3, [pc, #368]	; (8000e50 <ESP_messageHandler+0x660>)
 8000cde:	705a      	strb	r2, [r3, #1]
	}
	if (fragment[0] == 'g'){
 8000ce0:	4b57      	ldr	r3, [pc, #348]	; (8000e40 <ESP_messageHandler+0x650>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b67      	cmp	r3, #103	; 0x67
 8000ce6:	d107      	bne.n	8000cf8 <ESP_messageHandler+0x508>
		UART_send("PUERTAS Y VENTANAS (PUERTA GARAJE)\n", PC_UART);
 8000ce8:	4956      	ldr	r1, [pc, #344]	; (8000e44 <ESP_messageHandler+0x654>)
 8000cea:	485a      	ldr	r0, [pc, #360]	; (8000e54 <ESP_messageHandler+0x664>)
 8000cec:	f000 fa82 	bl	80011f4 <UART_send>
		vVent[0] = textrc[31]; // Puerta Garaje
 8000cf0:	4b56      	ldr	r3, [pc, #344]	; (8000e4c <ESP_messageHandler+0x65c>)
 8000cf2:	7fda      	ldrb	r2, [r3, #31]
 8000cf4:	4b56      	ldr	r3, [pc, #344]	; (8000e50 <ESP_messageHandler+0x660>)
 8000cf6:	701a      	strb	r2, [r3, #0]
	}
	if (fragment[0] == 'l'){
 8000cf8:	4b51      	ldr	r3, [pc, #324]	; (8000e40 <ESP_messageHandler+0x650>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b6c      	cmp	r3, #108	; 0x6c
 8000cfe:	d108      	bne.n	8000d12 <ESP_messageHandler+0x522>
		UART_send("PUERTAS Y VENTANAS (VENTANA SALÓN)\n", PC_UART);
 8000d00:	4950      	ldr	r1, [pc, #320]	; (8000e44 <ESP_messageHandler+0x654>)
 8000d02:	4855      	ldr	r0, [pc, #340]	; (8000e58 <ESP_messageHandler+0x668>)
 8000d04:	f000 fa76 	bl	80011f4 <UART_send>
		vVent[2] = textrc[34]; // Ventana Salón
 8000d08:	4b50      	ldr	r3, [pc, #320]	; (8000e4c <ESP_messageHandler+0x65c>)
 8000d0a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000d0e:	4b50      	ldr	r3, [pc, #320]	; (8000e50 <ESP_messageHandler+0x660>)
 8000d10:	709a      	strb	r2, [r3, #2]
	}
	if (fragment[0] == 'd'){
 8000d12:	4b4b      	ldr	r3, [pc, #300]	; (8000e40 <ESP_messageHandler+0x650>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b64      	cmp	r3, #100	; 0x64
 8000d18:	d108      	bne.n	8000d2c <ESP_messageHandler+0x53c>
		UART_send("PUERTAS Y VENTANAS (VENTANA DORMITORIO)\n", PC_UART);
 8000d1a:	494a      	ldr	r1, [pc, #296]	; (8000e44 <ESP_messageHandler+0x654>)
 8000d1c:	484f      	ldr	r0, [pc, #316]	; (8000e5c <ESP_messageHandler+0x66c>)
 8000d1e:	f000 fa69 	bl	80011f4 <UART_send>
		vVent[3] = textrc[37]; // Ventana Dormitorio
 8000d22:	4b4a      	ldr	r3, [pc, #296]	; (8000e4c <ESP_messageHandler+0x65c>)
 8000d24:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000d28:	4b49      	ldr	r3, [pc, #292]	; (8000e50 <ESP_messageHandler+0x660>)
 8000d2a:	70da      	strb	r2, [r3, #3]
	}
	if (fragment[0] == 'o'){
 8000d2c:	4b44      	ldr	r3, [pc, #272]	; (8000e40 <ESP_messageHandler+0x650>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b6f      	cmp	r3, #111	; 0x6f
 8000d32:	d108      	bne.n	8000d46 <ESP_messageHandler+0x556>
		UART_send("PUERTAS Y VENTANAS (VENTANA OFICINA)\n", PC_UART);
 8000d34:	4943      	ldr	r1, [pc, #268]	; (8000e44 <ESP_messageHandler+0x654>)
 8000d36:	484a      	ldr	r0, [pc, #296]	; (8000e60 <ESP_messageHandler+0x670>)
 8000d38:	f000 fa5c 	bl	80011f4 <UART_send>
		vVent[4] = textrc[40]; // Ventana Oficina
 8000d3c:	4b43      	ldr	r3, [pc, #268]	; (8000e4c <ESP_messageHandler+0x65c>)
 8000d3e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000d42:	4b43      	ldr	r3, [pc, #268]	; (8000e50 <ESP_messageHandler+0x660>)
 8000d44:	711a      	strb	r2, [r3, #4]
	}

	// TIEMPO
	if (fragment[0] == 't'){
 8000d46:	4b3e      	ldr	r3, [pc, #248]	; (8000e40 <ESP_messageHandler+0x650>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b74      	cmp	r3, #116	; 0x74
 8000d4c:	d115      	bne.n	8000d7a <ESP_messageHandler+0x58a>
		UART_send("TIEMPO\n", PC_UART);
 8000d4e:	493d      	ldr	r1, [pc, #244]	; (8000e44 <ESP_messageHandler+0x654>)
 8000d50:	4844      	ldr	r0, [pc, #272]	; (8000e64 <ESP_messageHandler+0x674>)
 8000d52:	f000 fa4f 	bl	80011f4 <UART_send>
		vTemp[0] = textrc[28]; 	// Vent. Salón
 8000d56:	4b3d      	ldr	r3, [pc, #244]	; (8000e4c <ESP_messageHandler+0x65c>)
 8000d58:	7f1a      	ldrb	r2, [r3, #28]
 8000d5a:	4b43      	ldr	r3, [pc, #268]	; (8000e68 <ESP_messageHandler+0x678>)
 8000d5c:	701a      	strb	r2, [r3, #0]
		vTemp[1] = textrc[31]; 	// Vent. Dormitorio
 8000d5e:	4b3b      	ldr	r3, [pc, #236]	; (8000e4c <ESP_messageHandler+0x65c>)
 8000d60:	7fda      	ldrb	r2, [r3, #31]
 8000d62:	4b41      	ldr	r3, [pc, #260]	; (8000e68 <ESP_messageHandler+0x678>)
 8000d64:	705a      	strb	r2, [r3, #1]
		vTemp[2] = textrc[34]; 	// Vent. Oficina
 8000d66:	4b39      	ldr	r3, [pc, #228]	; (8000e4c <ESP_messageHandler+0x65c>)
 8000d68:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000d6c:	4b3e      	ldr	r3, [pc, #248]	; (8000e68 <ESP_messageHandler+0x678>)
 8000d6e:	709a      	strb	r2, [r3, #2]
		vTemp[4] = textrc[37]; 	// Calefacción
 8000d70:	4b36      	ldr	r3, [pc, #216]	; (8000e4c <ESP_messageHandler+0x65c>)
 8000d72:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000d76:	4b3c      	ldr	r3, [pc, #240]	; (8000e68 <ESP_messageHandler+0x678>)
 8000d78:	711a      	strb	r2, [r3, #4]
    }

	// EXTERIOR
	if (fragment[0] == 'e'){
 8000d7a:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <ESP_messageHandler+0x650>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b65      	cmp	r3, #101	; 0x65
 8000d80:	d157      	bne.n	8000e32 <ESP_messageHandler+0x642>
		UART_send("EXTERIOR\n", PC_UART);
 8000d82:	4930      	ldr	r1, [pc, #192]	; (8000e44 <ESP_messageHandler+0x654>)
 8000d84:	4839      	ldr	r0, [pc, #228]	; (8000e6c <ESP_messageHandler+0x67c>)
 8000d86:	f000 fa35 	bl	80011f4 <UART_send>
		vExt[0] = textrc[28]; 	// Toldo Tendedero
 8000d8a:	4b30      	ldr	r3, [pc, #192]	; (8000e4c <ESP_messageHandler+0x65c>)
 8000d8c:	7f1a      	ldrb	r2, [r3, #28]
 8000d8e:	4b38      	ldr	r3, [pc, #224]	; (8000e70 <ESP_messageHandler+0x680>)
 8000d90:	701a      	strb	r2, [r3, #0]
		vExt[1] = textrc[31]; 	// Luz Tendedero
 8000d92:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <ESP_messageHandler+0x65c>)
 8000d94:	7fda      	ldrb	r2, [r3, #31]
 8000d96:	4b36      	ldr	r3, [pc, #216]	; (8000e70 <ESP_messageHandler+0x680>)
 8000d98:	705a      	strb	r2, [r3, #1]
		vExt[2] = textrc[34]; 	// Luz Porche
 8000d9a:	4b2c      	ldr	r3, [pc, #176]	; (8000e4c <ESP_messageHandler+0x65c>)
 8000d9c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000da0:	4b33      	ldr	r3, [pc, #204]	; (8000e70 <ESP_messageHandler+0x680>)
 8000da2:	709a      	strb	r2, [r3, #2]
		vExt[3] = textrc[37]; 	// Luz Jardín
 8000da4:	4b29      	ldr	r3, [pc, #164]	; (8000e4c <ESP_messageHandler+0x65c>)
 8000da6:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000daa:	4b31      	ldr	r3, [pc, #196]	; (8000e70 <ESP_messageHandler+0x680>)
 8000dac:	70da      	strb	r2, [r3, #3]
		vExt[4] = textrc[40]; 	// Puerta Parcela
 8000dae:	4b27      	ldr	r3, [pc, #156]	; (8000e4c <ESP_messageHandler+0x65c>)
 8000db0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000db4:	4b2e      	ldr	r3, [pc, #184]	; (8000e70 <ESP_messageHandler+0x680>)
 8000db6:	711a      	strb	r2, [r3, #4]

		if(vExt[1] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET); // Luz Tendedero
 8000db8:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <ESP_messageHandler+0x680>)
 8000dba:	785b      	ldrb	r3, [r3, #1]
 8000dbc:	2b30      	cmp	r3, #48	; 0x30
 8000dbe:	d106      	bne.n	8000dce <ESP_messageHandler+0x5de>
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dc6:	481d      	ldr	r0, [pc, #116]	; (8000e3c <ESP_messageHandler+0x64c>)
 8000dc8:	f003 f9f4 	bl	80041b4 <HAL_GPIO_WritePin>
 8000dcc:	e009      	b.n	8000de2 <ESP_messageHandler+0x5f2>
		else if(vExt[1] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 8000dce:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <ESP_messageHandler+0x680>)
 8000dd0:	785b      	ldrb	r3, [r3, #1]
 8000dd2:	2b31      	cmp	r3, #49	; 0x31
 8000dd4:	d105      	bne.n	8000de2 <ESP_messageHandler+0x5f2>
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ddc:	4817      	ldr	r0, [pc, #92]	; (8000e3c <ESP_messageHandler+0x64c>)
 8000dde:	f003 f9e9 	bl	80041b4 <HAL_GPIO_WritePin>

		if(vExt[2] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET); // Luz Porche
 8000de2:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <ESP_messageHandler+0x680>)
 8000de4:	789b      	ldrb	r3, [r3, #2]
 8000de6:	2b30      	cmp	r3, #48	; 0x30
 8000de8:	d106      	bne.n	8000df8 <ESP_messageHandler+0x608>
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df0:	4812      	ldr	r0, [pc, #72]	; (8000e3c <ESP_messageHandler+0x64c>)
 8000df2:	f003 f9df 	bl	80041b4 <HAL_GPIO_WritePin>
 8000df6:	e009      	b.n	8000e0c <ESP_messageHandler+0x61c>
		else if(vExt[2] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 8000df8:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <ESP_messageHandler+0x680>)
 8000dfa:	789b      	ldrb	r3, [r3, #2]
 8000dfc:	2b31      	cmp	r3, #49	; 0x31
 8000dfe:	d105      	bne.n	8000e0c <ESP_messageHandler+0x61c>
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e06:	480d      	ldr	r0, [pc, #52]	; (8000e3c <ESP_messageHandler+0x64c>)
 8000e08:	f003 f9d4 	bl	80041b4 <HAL_GPIO_WritePin>

		if(vExt[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET); // Luz Jardín
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <ESP_messageHandler+0x680>)
 8000e0e:	78db      	ldrb	r3, [r3, #3]
 8000e10:	2b30      	cmp	r3, #48	; 0x30
 8000e12:	d105      	bne.n	8000e20 <ESP_messageHandler+0x630>
 8000e14:	2200      	movs	r2, #0
 8000e16:	2101      	movs	r1, #1
 8000e18:	4816      	ldr	r0, [pc, #88]	; (8000e74 <ESP_messageHandler+0x684>)
 8000e1a:	f003 f9cb 	bl	80041b4 <HAL_GPIO_WritePin>
 8000e1e:	e008      	b.n	8000e32 <ESP_messageHandler+0x642>
		else if(vExt[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <ESP_messageHandler+0x680>)
 8000e22:	78db      	ldrb	r3, [r3, #3]
 8000e24:	2b31      	cmp	r3, #49	; 0x31
 8000e26:	d104      	bne.n	8000e32 <ESP_messageHandler+0x642>
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	4811      	ldr	r0, [pc, #68]	; (8000e74 <ESP_messageHandler+0x684>)
 8000e2e:	f003 f9c1 	bl	80041b4 <HAL_GPIO_WritePin>
	// AJUSTES
	if (fragment[0] == 'a'){
	}

	//__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	2000094c 	.word	0x2000094c
 8000e3c:	40020800 	.word	0x40020800
 8000e40:	20000968 	.word	0x20000968
 8000e44:	20000d08 	.word	0x20000d08
 8000e48:	08007898 	.word	0x08007898
 8000e4c:	20000970 	.word	0x20000970
 8000e50:	200008e4 	.word	0x200008e4
 8000e54:	080078c0 	.word	0x080078c0
 8000e58:	080078e4 	.word	0x080078e4
 8000e5c:	0800790c 	.word	0x0800790c
 8000e60:	08007938 	.word	0x08007938
 8000e64:	08007960 	.word	0x08007960
 8000e68:	20000934 	.word	0x20000934
 8000e6c:	08007968 	.word	0x08007968
 8000e70:	200008f0 	.word	0x200008f0
 8000e74:	40020c00 	.word	0x40020c00

08000e78 <ringInit>:

void storeChar(unsigned char c, Ring_Buffer *buffer);


void ringInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
	_rx_buffer1 = &rx_buffer1;
 8000e7c:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <ringInit+0x68>)
 8000e7e:	4a19      	ldr	r2, [pc, #100]	; (8000ee4 <ringInit+0x6c>)
 8000e80:	601a      	str	r2, [r3, #0]
    _tx_buffer1 = &tx_buffer1;
 8000e82:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <ringInit+0x70>)
 8000e84:	4a19      	ldr	r2, [pc, #100]	; (8000eec <ringInit+0x74>)
 8000e86:	601a      	str	r2, [r3, #0]
    _rx_buffer2 = &rx_buffer2;
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <ringInit+0x78>)
 8000e8a:	4a1a      	ldr	r2, [pc, #104]	; (8000ef4 <ringInit+0x7c>)
 8000e8c:	601a      	str	r2, [r3, #0]
    _tx_buffer2 = &tx_buffer2;
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <ringInit+0x80>)
 8000e90:	4a1a      	ldr	r2, [pc, #104]	; (8000efc <ringInit+0x84>)
 8000e92:	601a      	str	r2, [r3, #0]

    /* Habilita la INTERRUPCIÓN por ERROR del UART (frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_ERR);
 8000e94:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <ringInit+0x88>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	695a      	ldr	r2, [r3, #20]
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <ringInit+0x88>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f042 0201 	orr.w	r2, r2, #1
 8000ea2:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_ERR);
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <ringInit+0x8c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	695a      	ldr	r2, [r3, #20]
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <ringInit+0x8c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f042 0201 	orr.w	r2, r2, #1
 8000eb2:	615a      	str	r2, [r3, #20]

    /* Habilita la INTERRUPCIÓN por REGISTRO DE DATA VACÍO */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_RXNE);
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <ringInit+0x88>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	68da      	ldr	r2, [r3, #12]
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <ringInit+0x88>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f042 0220 	orr.w	r2, r2, #32
 8000ec2:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_RXNE);
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <ringInit+0x8c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	68da      	ldr	r2, [r3, #12]
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <ringInit+0x8c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f042 0220 	orr.w	r2, r2, #32
 8000ed2:	60da      	str	r2, [r3, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	200009e8 	.word	0x200009e8
 8000ee4:	2000008c 	.word	0x2000008c
 8000ee8:	200009ec 	.word	0x200009ec
 8000eec:	20000294 	.word	0x20000294
 8000ef0:	200009f0 	.word	0x200009f0
 8000ef4:	2000049c 	.word	0x2000049c
 8000ef8:	200009e4 	.word	0x200009e4
 8000efc:	200006a4 	.word	0x200006a4
 8000f00:	20000d94 	.word	0x20000d94
 8000f04:	20000d08 	.word	0x20000d08

08000f08 <storeChar>:


void storeChar(unsigned char c, Ring_Buffer *buffer)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
    int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f20:	60fb      	str	r3, [r7, #12]

    // Si queremos almacenar lo recibido justo antes de TAIL, significando que HEAD avanzará hasta la posición de TAIL,
    // se provocará un desbordamiento (overflow) del BUFFER, y, por lo tanto, no se escribirá el caracter o ni avanzaremos HEAD.
    if(i != buffer->tail)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d009      	beq.n	8000f42 <storeChar+0x3a>
    {
    	buffer->buffer[buffer->head] = c;
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	79f9      	ldrb	r1, [r7, #7]
 8000f38:	54d1      	strb	r1, [r2, r3]
        buffer->head = i;
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }
}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <UART_peek>:
	}
}


int UART_peek(UART_HandleTypeDef *uart)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a1c      	ldr	r2, [pc, #112]	; (8000fcc <UART_peek+0x7c>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d114      	bne.n	8000f8a <UART_peek+0x3a>
	{
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <UART_peek+0x80>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000f68:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <UART_peek+0x80>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d102      	bne.n	8000f7a <UART_peek+0x2a>
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295
 8000f78:	e022      	b.n	8000fc0 <UART_peek+0x70>

		else return _rx_buffer1->buffer[_rx_buffer1->tail];
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <UART_peek+0x80>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <UART_peek+0x80>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000f86:	5cd3      	ldrb	r3, [r2, r3]
 8000f88:	e01a      	b.n	8000fc0 <UART_peek+0x70>
	}

	else if (uart == PC_UART)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a11      	ldr	r2, [pc, #68]	; (8000fd4 <UART_peek+0x84>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d114      	bne.n	8000fbc <UART_peek+0x6c>
	{
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <UART_peek+0x88>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <UART_peek+0x88>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d102      	bne.n	8000fac <UART_peek+0x5c>
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000faa:	e009      	b.n	8000fc0 <UART_peek+0x70>

		else return _rx_buffer2->buffer[_rx_buffer2->tail];
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <UART_peek+0x88>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <UART_peek+0x88>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000fb8:	5cd3      	ldrb	r3, [r2, r3]
 8000fba:	e001      	b.n	8000fc0 <UART_peek+0x70>
	}

	return -1;
 8000fbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	20000d94 	.word	0x20000d94
 8000fd0:	200009e8 	.word	0x200009e8
 8000fd4:	20000d08 	.word	0x20000d08
 8000fd8:	200009f0 	.word	0x200009f0

08000fdc <UART_read>:


int UART_read(UART_HandleTypeDef *uart)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a29      	ldr	r2, [pc, #164]	; (800108c <UART_read+0xb0>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d121      	bne.n	8001030 <UART_read+0x54>
	{
		// Si HEAD no está delante de TAIL, no tenemos ningún CARACTER
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 8000fec:	4b28      	ldr	r3, [pc, #160]	; (8001090 <UART_read+0xb4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000ff4:	4b26      	ldr	r3, [pc, #152]	; (8001090 <UART_read+0xb4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d102      	bne.n	8001006 <UART_read+0x2a>
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	e03c      	b.n	8001080 <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8001006:	4b22      	ldr	r3, [pc, #136]	; (8001090 <UART_read+0xb4>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <UART_read+0xb4>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001012:	5cd3      	ldrb	r3, [r2, r3]
 8001014:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8001016:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <UART_read+0xb4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <UART_read+0xb4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001028:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 800102c:	7bbb      	ldrb	r3, [r7, #14]
 800102e:	e027      	b.n	8001080 <UART_read+0xa4>
		}
	}

	else if (uart == PC_UART)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a18      	ldr	r2, [pc, #96]	; (8001094 <UART_read+0xb8>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d121      	bne.n	800107c <UART_read+0xa0>
	{
		// Si HEAD no está delante de TAIL, no tenemos ningún CARACTER
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <UART_read+0xbc>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <UART_read+0xbc>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001048:	429a      	cmp	r2, r3
 800104a:	d102      	bne.n	8001052 <UART_read+0x76>
 800104c:	f04f 33ff 	mov.w	r3, #4294967295
 8001050:	e016      	b.n	8001080 <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <UART_read+0xbc>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <UART_read+0xbc>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800105e:	5cd3      	ldrb	r3, [r2, r3]
 8001060:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8001062:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <UART_read+0xbc>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <UART_read+0xbc>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001074:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	e001      	b.n	8001080 <UART_read+0xa4>
		}
	}

	else return -1;
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001080:	4618      	mov	r0, r3
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	20000d94 	.word	0x20000d94
 8001090:	200009e8 	.word	0x200009e8
 8001094:	20000d08 	.word	0x20000d08
 8001098:	200009f0 	.word	0x200009f0

0800109c <UART_write>:


void UART_write(int c, UART_HandleTypeDef *uart)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
	if (c>=0)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	db54      	blt.n	8001156 <UART_write+0xba>
	{
		if (uart == WiFi_UART)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	4a2d      	ldr	r2, [pc, #180]	; (8001164 <UART_write+0xc8>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d126      	bne.n	8001102 <UART_write+0x66>
		{
			int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 80010b4:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <UART_write+0xcc>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010bc:	3301      	adds	r3, #1
 80010be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010c2:	60bb      	str	r3, [r7, #8]

			// Si el BUFFER de salida está lleno, sólo se puede esperar a la INTERRUPCIÓN que lo vacia */
		    while (i == _tx_buffer1->tail);
 80010c4:	bf00      	nop
 80010c6:	4b28      	ldr	r3, [pc, #160]	; (8001168 <UART_write+0xcc>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d0f8      	beq.n	80010c6 <UART_write+0x2a>

		   _tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <UART_write+0xcc>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <UART_write+0xcc>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	b2c9      	uxtb	r1, r1
 80010e4:	54d1      	strb	r1, [r2, r3]
		   _tx_buffer1->head = i;
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <UART_write+0xcc>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		   // Habilitar la INTERRUPCIÓN de TRANSMISIÓN del UART
		   __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_TXE);
 80010f0:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <UART_write+0xc8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68da      	ldr	r2, [r3, #12]
 80010f6:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <UART_write+0xc8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010fe:	60da      	str	r2, [r3, #12]

			// Habilitar la INTERRUPCIÓN de TRANSMISIÓN del UART
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
		}
	}
}
 8001100:	e029      	b.n	8001156 <UART_write+0xba>
		else if (uart == PC_UART)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	4a19      	ldr	r2, [pc, #100]	; (800116c <UART_write+0xd0>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d125      	bne.n	8001156 <UART_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <UART_write+0xd4>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001112:	3301      	adds	r3, #1
 8001114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001118:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 800111a:	bf00      	nop
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <UART_write+0xd4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	429a      	cmp	r2, r3
 8001128:	d0f8      	beq.n	800111c <UART_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <UART_write+0xd4>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <UART_write+0xd4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	b2c9      	uxtb	r1, r1
 800113a:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <UART_write+0xd4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <UART_write+0xd0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <UART_write+0xd0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001154:	60da      	str	r2, [r3, #12]
}
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000d94 	.word	0x20000d94
 8001168:	200009ec 	.word	0x200009ec
 800116c:	20000d08 	.word	0x20000d08
 8001170:	200009e4 	.word	0x200009e4

08001174 <UART_available>:


int UART_available(UART_HandleTypeDef *uart)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a19      	ldr	r2, [pc, #100]	; (80011e4 <UART_available+0x70>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d111      	bne.n	80011a8 <UART_available+0x34>
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <UART_available+0x74>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800118c:	b29a      	uxth	r2, r3
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <UART_available+0x74>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001196:	b29b      	uxth	r3, r3
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	b29b      	uxth	r3, r3
 800119c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011a6:	e017      	b.n	80011d8 <UART_available+0x64>

	else if (uart == PC_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a10      	ldr	r2, [pc, #64]	; (80011ec <UART_available+0x78>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d111      	bne.n	80011d4 <UART_available+0x60>
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <UART_available+0x7c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <UART_available+0x7c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011d2:	e001      	b.n	80011d8 <UART_available+0x64>

	return -1;
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	20000d94 	.word	0x20000d94
 80011e8:	200009e8 	.word	0x200009e8
 80011ec:	20000d08 	.word	0x20000d08
 80011f0:	200009f0 	.word	0x200009f0

080011f4 <UART_send>:
	return 1;
}


void UART_send (const char *s, UART_HandleTypeDef *uart)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
	while(*s!='\0') UART_write(*s++, uart);
 80011fe:	e007      	b.n	8001210 <UART_send+0x1c>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	6839      	ldr	r1, [r7, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff46 	bl	800109c <UART_write>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1f3      	bne.n	8001200 <UART_send+0xc>
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <UART_copyUpto>:
  while(*s) UART_write(*s++, uart);
}


int UART_copyUpto(char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f7fe ffcb 	bl	80001d0 <strlen>
 800123a:	4603      	mov	r3, r0
 800123c:	617b      	str	r3, [r7, #20]
	int indx = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	61bb      	str	r3, [r7, #24]

again:
	while (!UART_available(uart));
 8001242:	bf00      	nop
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff95 	bl	8001174 <UART_available>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f9      	beq.n	8001244 <UART_copyUpto+0x20>

	while (UART_peek(uart) != string[so_far])
 8001250:	e01f      	b.n	8001292 <UART_copyUpto+0x6e>
	{
		buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8001252:	4b32      	ldr	r3, [pc, #200]	; (800131c <UART_copyUpto+0xf8>)
 8001254:	6819      	ldr	r1, [r3, #0]
 8001256:	4b31      	ldr	r3, [pc, #196]	; (800131c <UART_copyUpto+0xf8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	68b8      	ldr	r0, [r7, #8]
 8001262:	4403      	add	r3, r0
 8001264:	5c8a      	ldrb	r2, [r1, r2]
 8001266:	701a      	strb	r2, [r3, #0]
		_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8001268:	4b2c      	ldr	r3, [pc, #176]	; (800131c <UART_copyUpto+0xf8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	4b2a      	ldr	r3, [pc, #168]	; (800131c <UART_copyUpto+0xf8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800127a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		indx++;
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	3301      	adds	r3, #1
 8001282:	61bb      	str	r3, [r7, #24]
		while (!UART_available(uart));
 8001284:	bf00      	nop
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ff74 	bl	8001174 <UART_available>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f9      	beq.n	8001286 <UART_copyUpto+0x62>
	while (UART_peek(uart) != string[so_far])
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fe5c 	bl	8000f50 <UART_peek>
 8001298:	4601      	mov	r1, r0
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	4413      	add	r3, r2
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	4299      	cmp	r1, r3
 80012a4:	d1d5      	bne.n	8001252 <UART_copyUpto+0x2e>

	}

	while (UART_peek(uart) == string [so_far])
 80012a6:	e01b      	b.n	80012e0 <UART_copyUpto+0xbc>
	{
		so_far++;
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	3301      	adds	r3, #1
 80012ac:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = UART_read(uart);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff fe94 	bl	8000fdc <UART_read>
 80012b4:	4601      	mov	r1, r0
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	1c5a      	adds	r2, r3, #1
 80012ba:	61ba      	str	r2, [r7, #24]
 80012bc:	461a      	mov	r2, r3
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	4413      	add	r3, r2
 80012c2:	b2ca      	uxtb	r2, r1
 80012c4:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 80012c6:	69fa      	ldr	r2, [r7, #28]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d101      	bne.n	80012d2 <UART_copyUpto+0xae>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e01f      	b.n	8001312 <UART_copyUpto+0xee>
		while (!UART_available(uart));
 80012d2:	bf00      	nop
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff4d 	bl	8001174 <UART_available>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f9      	beq.n	80012d4 <UART_copyUpto+0xb0>
	while (UART_peek(uart) == string [so_far])
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff fe35 	bl	8000f50 <UART_peek>
 80012e6:	4601      	mov	r1, r0
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	4413      	add	r3, r2
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4299      	cmp	r1, r3
 80012f2:	d0d9      	beq.n	80012a8 <UART_copyUpto+0x84>
	}

	if (so_far != len)
 80012f4:	69fa      	ldr	r2, [r7, #28]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d002      	beq.n	8001302 <UART_copyUpto+0xde>
	{
		so_far = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
		goto again;
 8001300:	e79f      	b.n	8001242 <UART_copyUpto+0x1e>
	}

	if (so_far == len) return 1;
 8001302:	69fa      	ldr	r2, [r7, #28]
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	429a      	cmp	r2, r3
 8001308:	d101      	bne.n	800130e <UART_copyUpto+0xea>
 800130a:	2301      	movs	r3, #1
 800130c:	e001      	b.n	8001312 <UART_copyUpto+0xee>

	else return -1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001312:	4618      	mov	r0, r3
 8001314:	3720      	adds	r7, #32
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200009e8 	.word	0x200009e8

08001320 <UART_waitFor>:


int UART_waitFor(char *string,UART_HandleTypeDef *uart)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
	int so_far =0;
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7fe ff4e 	bl	80001d0 <strlen>
 8001334:	4603      	mov	r3, r0
 8001336:	60bb      	str	r3, [r7, #8]

again_device:
	while (!UART_available(uart));
 8001338:	bf00      	nop
 800133a:	6838      	ldr	r0, [r7, #0]
 800133c:	f7ff ff1a 	bl	8001174 <UART_available>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f9      	beq.n	800133a <UART_waitFor+0x1a>

	if (UART_peek(uart) != string[so_far])
 8001346:	6838      	ldr	r0, [r7, #0]
 8001348:	f7ff fe02 	bl	8000f50 <UART_peek>
 800134c:	4601      	mov	r1, r0
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	4413      	add	r3, r2
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	4299      	cmp	r1, r3
 8001358:	d01e      	beq.n	8001398 <UART_waitFor+0x78>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 800135a:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <UART_waitFor+0xb4>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <UART_waitFor+0xb4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800136c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 8001370:	e7e2      	b.n	8001338 <UART_waitFor+0x18>

	}

	while (UART_peek(uart) == string [so_far])
	{
		so_far++;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3301      	adds	r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
		UART_read(uart);
 8001378:	6838      	ldr	r0, [r7, #0]
 800137a:	f7ff fe2f 	bl	8000fdc <UART_read>
		if (so_far == len) return 1;
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	429a      	cmp	r2, r3
 8001384:	d101      	bne.n	800138a <UART_waitFor+0x6a>
 8001386:	2301      	movs	r3, #1
 8001388:	e01f      	b.n	80013ca <UART_waitFor+0xaa>
		while (!UART_available(uart));
 800138a:	bf00      	nop
 800138c:	6838      	ldr	r0, [r7, #0]
 800138e:	f7ff fef1 	bl	8001174 <UART_available>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f9      	beq.n	800138c <UART_waitFor+0x6c>
	while (UART_peek(uart) == string [so_far])
 8001398:	6838      	ldr	r0, [r7, #0]
 800139a:	f7ff fdd9 	bl	8000f50 <UART_peek>
 800139e:	4601      	mov	r1, r0
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4299      	cmp	r1, r3
 80013aa:	d0e2      	beq.n	8001372 <UART_waitFor+0x52>
	}

	if (so_far != len)
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d002      	beq.n	80013ba <UART_waitFor+0x9a>
	{
		so_far = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
		goto again_device;
 80013b8:	e7be      	b.n	8001338 <UART_waitFor+0x18>
	}

	if (so_far == len) return 1;
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d101      	bne.n	80013c6 <UART_waitFor+0xa6>
 80013c2:	2301      	movs	r3, #1
 80013c4:	e001      	b.n	80013ca <UART_waitFor+0xaa>

	else return -1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200009e8 	.word	0x200009e8

080013d8 <UART_isr>:


void UART_isr(UART_HandleTypeDef *huart)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	613b      	str	r3, [r7, #16]

	/* Si DR (DATA REGISTER) no está vacío y RX INT está habilitado */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	f003 0320 	and.w	r3, r3, #32
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d023      	beq.n	8001442 <UART_isr+0x6a>
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	f003 0320 	and.w	r3, r3, #32
 8001400:	2b00      	cmp	r3, #0
 8001402:	d01e      	beq.n	8001442 <UART_isr+0x6a>
    	    	                USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	************************************************************************************************************/

		huart->Instance->SR;                   // Leer SR (STATUS REGISTER)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR; // Leer DR (DATA REGISTER)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	73fb      	strb	r3, [r7, #15]

        if (huart == WiFi_UART)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a3f      	ldr	r2, [pc, #252]	; (8001514 <UART_isr+0x13c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d107      	bne.n	800142a <UART_isr+0x52>
        {
        	storeChar(c, _rx_buffer1); // Almacena DATA en el BUFFER
 800141a:	4b3f      	ldr	r3, [pc, #252]	; (8001518 <UART_isr+0x140>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	4611      	mov	r1, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fd70 	bl	8000f08 <storeChar>
        else if (huart == PC_UART)
        {
        	storeChar(c, _rx_buffer2); // Almacena DATA en el BUFFER
        }

        return;
 8001428:	e06d      	b.n	8001506 <UART_isr+0x12e>
        else if (huart == PC_UART)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a3b      	ldr	r2, [pc, #236]	; (800151c <UART_isr+0x144>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d169      	bne.n	8001506 <UART_isr+0x12e>
        	storeChar(c, _rx_buffer2); // Almacena DATA en el BUFFER
 8001432:	4b3b      	ldr	r3, [pc, #236]	; (8001520 <UART_isr+0x148>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	4611      	mov	r1, r2
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fd64 	bl	8000f08 <storeChar>
        return;
 8001440:	e061      	b.n	8001506 <UART_isr+0x12e>
    }

    /* Si la INTERRUPCIÓN se produce por el TRANSMIT DATA REGISTER EMPTY */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001448:	2b00      	cmp	r3, #0
 800144a:	d05f      	beq.n	800150c <UART_isr+0x134>
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001452:	2b00      	cmp	r3, #0
 8001454:	d05a      	beq.n	800150c <UART_isr+0x134>
    {
    	if (huart == WiFi_UART)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a2e      	ldr	r2, [pc, #184]	; (8001514 <UART_isr+0x13c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d127      	bne.n	80014ae <UART_isr+0xd6>
    	{
    		if(tx_buffer1.head == tx_buffer1.tail)
 800145e:	4b31      	ldr	r3, [pc, #196]	; (8001524 <UART_isr+0x14c>)
 8001460:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001464:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <UART_isr+0x14c>)
 8001466:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800146a:	429a      	cmp	r2, r3
 800146c:	d108      	bne.n	8001480 <UART_isr+0xa8>
    	    {
    			// BUFFER vacío, inhabilitamos la INTERRUPCIÓN
    	        __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68da      	ldr	r2, [r3, #12]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800147c:	60da      	str	r2, [r3, #12]
        	     huart->Instance->DR = c;

        	}
        }

    	return;
 800147e:	e044      	b.n	800150a <UART_isr+0x132>
    			unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8001480:	4b28      	ldr	r3, [pc, #160]	; (8001524 <UART_isr+0x14c>)
 8001482:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001486:	4a27      	ldr	r2, [pc, #156]	; (8001524 <UART_isr+0x14c>)
 8001488:	5cd3      	ldrb	r3, [r2, r3]
 800148a:	737b      	strb	r3, [r7, #13]
    			tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 800148c:	4b25      	ldr	r3, [pc, #148]	; (8001524 <UART_isr+0x14c>)
 800148e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001492:	3301      	adds	r3, #1
 8001494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001498:	4a22      	ldr	r2, [pc, #136]	; (8001524 <UART_isr+0x14c>)
 800149a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    			huart->Instance->SR;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
    			huart->Instance->DR = c;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	7b7a      	ldrb	r2, [r7, #13]
 80014aa:	605a      	str	r2, [r3, #4]
    	return;
 80014ac:	e02d      	b.n	800150a <UART_isr+0x132>
    	else if (huart == PC_UART)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a1a      	ldr	r2, [pc, #104]	; (800151c <UART_isr+0x144>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d129      	bne.n	800150a <UART_isr+0x132>
    		if(tx_buffer2.head == tx_buffer2.tail)
 80014b6:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <UART_isr+0x150>)
 80014b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80014bc:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <UART_isr+0x150>)
 80014be:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d108      	bne.n	80014d8 <UART_isr+0x100>
        	    __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014d4:	60da      	str	r2, [r3, #12]
    	return;
 80014d6:	e018      	b.n	800150a <UART_isr+0x132>
        	    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <UART_isr+0x150>)
 80014da:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <UART_isr+0x150>)
 80014e0:	5cd3      	ldrb	r3, [r2, r3]
 80014e2:	73bb      	strb	r3, [r7, #14]
        	    tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <UART_isr+0x150>)
 80014e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80014ea:	3301      	adds	r3, #1
 80014ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014f0:	4a0d      	ldr	r2, [pc, #52]	; (8001528 <UART_isr+0x150>)
 80014f2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	     huart->Instance->SR;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
        	     huart->Instance->DR = c;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	7bba      	ldrb	r2, [r7, #14]
 8001502:	605a      	str	r2, [r3, #4]
    	return;
 8001504:	e001      	b.n	800150a <UART_isr+0x132>
        return;
 8001506:	bf00      	nop
 8001508:	e000      	b.n	800150c <UART_isr+0x134>
    	return;
 800150a:	bf00      	nop
    }
}
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000d94 	.word	0x20000d94
 8001518:	200009e8 	.word	0x200009e8
 800151c:	20000d08 	.word	0x20000d08
 8001520:	200009f0 	.word	0x200009f0
 8001524:	20000294 	.word	0x20000294
 8001528:	200006a4 	.word	0x200006a4

0800152c <rgb_value>:
 */


#include <action.h>

int rgb_value(char i, char j, char k){
 800152c:	b480      	push	{r7}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
 8001536:	460b      	mov	r3, r1
 8001538:	71bb      	strb	r3, [r7, #6]
 800153a:	4613      	mov	r3, r2
 800153c:	717b      	strb	r3, [r7, #5]

	int a, b, c;

	if(i == '0') a = 0;
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2b30      	cmp	r3, #48	; 0x30
 8001542:	d102      	bne.n	800154a <rgb_value+0x1e>
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	e00a      	b.n	8001560 <rgb_value+0x34>
	else if(i == '1') a = 100;
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2b31      	cmp	r3, #49	; 0x31
 800154e:	d102      	bne.n	8001556 <rgb_value+0x2a>
 8001550:	2364      	movs	r3, #100	; 0x64
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	e004      	b.n	8001560 <rgb_value+0x34>
	else if(i == '2') a = 200;
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	2b32      	cmp	r3, #50	; 0x32
 800155a:	d101      	bne.n	8001560 <rgb_value+0x34>
 800155c:	23c8      	movs	r3, #200	; 0xc8
 800155e:	617b      	str	r3, [r7, #20]

	if(j == '0') b = 0;
 8001560:	79bb      	ldrb	r3, [r7, #6]
 8001562:	2b30      	cmp	r3, #48	; 0x30
 8001564:	d102      	bne.n	800156c <rgb_value+0x40>
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	e034      	b.n	80015d6 <rgb_value+0xaa>
	else if(j == '1') b = 10;
 800156c:	79bb      	ldrb	r3, [r7, #6]
 800156e:	2b31      	cmp	r3, #49	; 0x31
 8001570:	d102      	bne.n	8001578 <rgb_value+0x4c>
 8001572:	230a      	movs	r3, #10
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	e02e      	b.n	80015d6 <rgb_value+0xaa>
	else if(j == '2') b = 20;
 8001578:	79bb      	ldrb	r3, [r7, #6]
 800157a:	2b32      	cmp	r3, #50	; 0x32
 800157c:	d102      	bne.n	8001584 <rgb_value+0x58>
 800157e:	2314      	movs	r3, #20
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	e028      	b.n	80015d6 <rgb_value+0xaa>
	else if(j == '3') b = 30;
 8001584:	79bb      	ldrb	r3, [r7, #6]
 8001586:	2b33      	cmp	r3, #51	; 0x33
 8001588:	d102      	bne.n	8001590 <rgb_value+0x64>
 800158a:	231e      	movs	r3, #30
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	e022      	b.n	80015d6 <rgb_value+0xaa>
	else if(j == '4') b = 40;
 8001590:	79bb      	ldrb	r3, [r7, #6]
 8001592:	2b34      	cmp	r3, #52	; 0x34
 8001594:	d102      	bne.n	800159c <rgb_value+0x70>
 8001596:	2328      	movs	r3, #40	; 0x28
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	e01c      	b.n	80015d6 <rgb_value+0xaa>
	else if(j == '5') b = 50;
 800159c:	79bb      	ldrb	r3, [r7, #6]
 800159e:	2b35      	cmp	r3, #53	; 0x35
 80015a0:	d102      	bne.n	80015a8 <rgb_value+0x7c>
 80015a2:	2332      	movs	r3, #50	; 0x32
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	e016      	b.n	80015d6 <rgb_value+0xaa>
	else if(j == '6') b = 60;
 80015a8:	79bb      	ldrb	r3, [r7, #6]
 80015aa:	2b36      	cmp	r3, #54	; 0x36
 80015ac:	d102      	bne.n	80015b4 <rgb_value+0x88>
 80015ae:	233c      	movs	r3, #60	; 0x3c
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	e010      	b.n	80015d6 <rgb_value+0xaa>
	else if(j == '7') b = 70;
 80015b4:	79bb      	ldrb	r3, [r7, #6]
 80015b6:	2b37      	cmp	r3, #55	; 0x37
 80015b8:	d102      	bne.n	80015c0 <rgb_value+0x94>
 80015ba:	2346      	movs	r3, #70	; 0x46
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	e00a      	b.n	80015d6 <rgb_value+0xaa>
	else if(j == '8') b = 80;
 80015c0:	79bb      	ldrb	r3, [r7, #6]
 80015c2:	2b38      	cmp	r3, #56	; 0x38
 80015c4:	d102      	bne.n	80015cc <rgb_value+0xa0>
 80015c6:	2350      	movs	r3, #80	; 0x50
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	e004      	b.n	80015d6 <rgb_value+0xaa>
	else if(j == '9') b = 90;
 80015cc:	79bb      	ldrb	r3, [r7, #6]
 80015ce:	2b39      	cmp	r3, #57	; 0x39
 80015d0:	d101      	bne.n	80015d6 <rgb_value+0xaa>
 80015d2:	235a      	movs	r3, #90	; 0x5a
 80015d4:	613b      	str	r3, [r7, #16]

	if(k == '0') c = 0;
 80015d6:	797b      	ldrb	r3, [r7, #5]
 80015d8:	2b30      	cmp	r3, #48	; 0x30
 80015da:	d102      	bne.n	80015e2 <rgb_value+0xb6>
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	e034      	b.n	800164c <rgb_value+0x120>
	else if(k == '1') c = 1;
 80015e2:	797b      	ldrb	r3, [r7, #5]
 80015e4:	2b31      	cmp	r3, #49	; 0x31
 80015e6:	d102      	bne.n	80015ee <rgb_value+0xc2>
 80015e8:	2301      	movs	r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	e02e      	b.n	800164c <rgb_value+0x120>
	else if(k == '2') c = 2;
 80015ee:	797b      	ldrb	r3, [r7, #5]
 80015f0:	2b32      	cmp	r3, #50	; 0x32
 80015f2:	d102      	bne.n	80015fa <rgb_value+0xce>
 80015f4:	2302      	movs	r3, #2
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	e028      	b.n	800164c <rgb_value+0x120>
	else if(k == '3') c = 3;
 80015fa:	797b      	ldrb	r3, [r7, #5]
 80015fc:	2b33      	cmp	r3, #51	; 0x33
 80015fe:	d102      	bne.n	8001606 <rgb_value+0xda>
 8001600:	2303      	movs	r3, #3
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	e022      	b.n	800164c <rgb_value+0x120>
	else if(k == '4') c = 4;
 8001606:	797b      	ldrb	r3, [r7, #5]
 8001608:	2b34      	cmp	r3, #52	; 0x34
 800160a:	d102      	bne.n	8001612 <rgb_value+0xe6>
 800160c:	2304      	movs	r3, #4
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	e01c      	b.n	800164c <rgb_value+0x120>
	else if(k == '5') c = 5;
 8001612:	797b      	ldrb	r3, [r7, #5]
 8001614:	2b35      	cmp	r3, #53	; 0x35
 8001616:	d102      	bne.n	800161e <rgb_value+0xf2>
 8001618:	2305      	movs	r3, #5
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	e016      	b.n	800164c <rgb_value+0x120>
	else if(k == '6') c = 6;
 800161e:	797b      	ldrb	r3, [r7, #5]
 8001620:	2b36      	cmp	r3, #54	; 0x36
 8001622:	d102      	bne.n	800162a <rgb_value+0xfe>
 8001624:	2306      	movs	r3, #6
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	e010      	b.n	800164c <rgb_value+0x120>
	else if(k == '7') c = 7;
 800162a:	797b      	ldrb	r3, [r7, #5]
 800162c:	2b37      	cmp	r3, #55	; 0x37
 800162e:	d102      	bne.n	8001636 <rgb_value+0x10a>
 8001630:	2307      	movs	r3, #7
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	e00a      	b.n	800164c <rgb_value+0x120>
	else if(k == '8') c = 8;
 8001636:	797b      	ldrb	r3, [r7, #5]
 8001638:	2b38      	cmp	r3, #56	; 0x38
 800163a:	d102      	bne.n	8001642 <rgb_value+0x116>
 800163c:	2308      	movs	r3, #8
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	e004      	b.n	800164c <rgb_value+0x120>
	else if(k == '9') c = 9;
 8001642:	797b      	ldrb	r3, [r7, #5]
 8001644:	2b39      	cmp	r3, #57	; 0x39
 8001646:	d101      	bne.n	800164c <rgb_value+0x120>
 8001648:	2309      	movs	r3, #9
 800164a:	60fb      	str	r3, [r7, #12]

	return a+b+c;
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	441a      	add	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4413      	add	r3, r2
}
 8001656:	4618      	mov	r0, r3
 8001658:	371c      	adds	r7, #28
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin==B_Timbre_Pin)
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d102      	bne.n	800167a <HAL_GPIO_EXTI_Callback+0x16>
	{
		timbre = 1;
 8001674:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <HAL_GPIO_EXTI_Callback+0x54>)
 8001676:	2201      	movs	r2, #1
 8001678:	601a      	str	r2, [r3, #0]
	}
    if (GPIO_Pin==B_Stop_Pin)
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	2b04      	cmp	r3, #4
 800167e:	d102      	bne.n	8001686 <HAL_GPIO_EXTI_Callback+0x22>
    {
    	stop = 1;
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_GPIO_EXTI_Callback+0x58>)
 8001682:	2201      	movs	r2, #1
 8001684:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin==S_Int_Pin)
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	2b08      	cmp	r3, #8
 800168a:	d102      	bne.n	8001692 <HAL_GPIO_EXTI_Callback+0x2e>
    {
        interior = 1;
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x5c>)
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin==S_Ext_Pin)
 8001692:	88fb      	ldrh	r3, [r7, #6]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d102      	bne.n	800169e <HAL_GPIO_EXTI_Callback+0x3a>
    {
        exterior = 1;
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_GPIO_EXTI_Callback+0x60>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin==Fin_Servo_Pin)
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	2b10      	cmp	r3, #16
 80016a2:	d102      	bne.n	80016aa <HAL_GPIO_EXTI_Callback+0x46>
    {
        fin = 1;
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <HAL_GPIO_EXTI_Callback+0x64>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	601a      	str	r2, [r3, #0]
    }
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	200008ac 	.word	0x200008ac
 80016bc:	200008b0 	.word	0x200008b0
 80016c0:	200008b4 	.word	0x200008b4
 80016c4:	200008b8 	.word	0x200008b8
 80016c8:	200008bc 	.word	0x200008bc

080016cc <debouncer>:

int debouncer(volatile int* button_int, GPIO_TypeDef* GPIO_port, uint16_t GPIO_number) // Control de los rebotes
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	4613      	mov	r3, r2
 80016d8:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count=0;
	static int counter=0;

	if (*button_int==1)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d13b      	bne.n	800175a <debouncer+0x8e>
	{
		if (button_count==0)
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <debouncer+0x98>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10b      	bne.n	8001702 <debouncer+0x36>
		{
			counter=HAL_GetTick();
 80016ea:	f001 fe0f 	bl	800330c <HAL_GetTick>
 80016ee:	4603      	mov	r3, r0
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <debouncer+0x9c>)
 80016f4:	601a      	str	r2, [r3, #0]
			button_count++;
 80016f6:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <debouncer+0x98>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4b19      	ldr	r3, [pc, #100]	; (8001764 <debouncer+0x98>)
 8001700:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick()-counter>=20)
 8001702:	f001 fe03 	bl	800330c <HAL_GetTick>
 8001706:	4603      	mov	r3, r0
 8001708:	4a17      	ldr	r2, [pc, #92]	; (8001768 <debouncer+0x9c>)
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	1a9b      	subs	r3, r3, r2
 800170e:	2b13      	cmp	r3, #19
 8001710:	d923      	bls.n	800175a <debouncer+0x8e>
		{
			counter=HAL_GetTick();
 8001712:	f001 fdfb 	bl	800330c <HAL_GetTick>
 8001716:	4603      	mov	r3, r0
 8001718:	461a      	mov	r2, r3
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <debouncer+0x9c>)
 800171c:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number)!=1)
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	4619      	mov	r1, r3
 8001722:	68b8      	ldr	r0, [r7, #8]
 8001724:	f002 fd2e 	bl	8004184 <HAL_GPIO_ReadPin>
 8001728:	4603      	mov	r3, r0
 800172a:	2b01      	cmp	r3, #1
 800172c:	d003      	beq.n	8001736 <debouncer+0x6a>
			{
				button_count=1;
 800172e:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <debouncer+0x98>)
 8001730:	2201      	movs	r2, #1
 8001732:	701a      	strb	r2, [r3, #0]
 8001734:	e005      	b.n	8001742 <debouncer+0x76>
			}
			else
			{
				button_count++;
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <debouncer+0x98>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	3301      	adds	r3, #1
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <debouncer+0x98>)
 8001740:	701a      	strb	r2, [r3, #0]
			}
			if (button_count==4 ) // Periodo antirebotes
 8001742:	4b08      	ldr	r3, [pc, #32]	; (8001764 <debouncer+0x98>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b04      	cmp	r3, #4
 8001748:	d107      	bne.n	800175a <debouncer+0x8e>
			{
				button_count=0;
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <debouncer+0x98>)
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
				*button_int=0;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
				return 1;
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <debouncer+0x90>
			}
		}
	}
	return 0;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200008ca 	.word	0x200008ca
 8001768:	200008cc 	.word	0x200008cc

0800176c <play_Timbre>:


void play_Timbre(void){
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0

	uint8_t tone;

	tone = 20;
 8001772:	2314      	movs	r3, #20
 8001774:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	005a      	lsls	r2, r3, #1
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <play_Timbre+0x68>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	461a      	mov	r2, r3
 8001786:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <play_Timbre+0x68>)
 8001788:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <play_Timbre+0x68>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	79fa      	ldrb	r2, [r7, #7]
 8001790:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(300);
 8001792:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001796:	f001 fdc5 	bl	8003324 <HAL_Delay>

	tone = 40;
 800179a:	2328      	movs	r3, #40	; 0x28
 800179c:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	005a      	lsls	r2, r3, #1
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <play_Timbre+0x68>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <play_Timbre+0x68>)
 80017b0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <play_Timbre+0x68>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	79fa      	ldrb	r2, [r7, #7]
 80017b8:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 80017ba:	f44f 7048 	mov.w	r0, #800	; 0x320
 80017be:	f001 fdb1 	bl	8003324 <HAL_Delay>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80017c2:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <play_Timbre+0x68>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2200      	movs	r2, #0
 80017c8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000a3c 	.word	0x20000a3c

080017d8 <play_Alarma>:


void play_Alarma(){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0

	uint8_t tone;

	for(tone = 40; tone >= 10; tone = tone-10){
 80017de:	2328      	movs	r3, #40	; 0x28
 80017e0:	71fb      	strb	r3, [r7, #7]
 80017e2:	e014      	b.n	800180e <play_Alarma+0x36>
		__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	005a      	lsls	r2, r3, #1
 80017e8:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <play_Alarma+0x48>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	461a      	mov	r2, r3
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <play_Alarma+0x48>)
 80017f6:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <play_Alarma+0x48>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	79fa      	ldrb	r2, [r7, #7]
 80017fe:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(300);
 8001800:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001804:	f001 fd8e 	bl	8003324 <HAL_Delay>
	for(tone = 40; tone >= 10; tone = tone-10){
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	3b0a      	subs	r3, #10
 800180c:	71fb      	strb	r3, [r7, #7]
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	2b09      	cmp	r3, #9
 8001812:	d8e7      	bhi.n	80017e4 <play_Alarma+0xc>
	}
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000a3c 	.word	0x20000a3c

08001824 <luces_automat>:

void luces_automat(int i){
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]

	if(i){
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d010      	beq.n	8001854 <luces_automat+0x30>
		//vIlum[23]='1';
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8001832:	2201      	movs	r2, #1
 8001834:	2104      	movs	r1, #4
 8001836:	4811      	ldr	r0, [pc, #68]	; (800187c <luces_automat+0x58>)
 8001838:	f002 fcbc 	bl	80041b4 <HAL_GPIO_WritePin>
		//vIlum[24]='1';
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 800183c:	2201      	movs	r2, #1
 800183e:	2110      	movs	r1, #16
 8001840:	480e      	ldr	r0, [pc, #56]	; (800187c <luces_automat+0x58>)
 8001842:	f002 fcb7 	bl	80041b4 <HAL_GPIO_WritePin>
		//vIlum[25]='1';
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8001846:	2201      	movs	r2, #1
 8001848:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800184c:	480c      	ldr	r0, [pc, #48]	; (8001880 <luces_automat+0x5c>)
 800184e:	f002 fcb1 	bl	80041b4 <HAL_GPIO_WritePin>
		//vIlum[24]='0';
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
		//vIlum[25]='0';
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
	}
}
 8001852:	e00f      	b.n	8001874 <luces_automat+0x50>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	2104      	movs	r1, #4
 8001858:	4808      	ldr	r0, [pc, #32]	; (800187c <luces_automat+0x58>)
 800185a:	f002 fcab 	bl	80041b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	2110      	movs	r1, #16
 8001862:	4806      	ldr	r0, [pc, #24]	; (800187c <luces_automat+0x58>)
 8001864:	f002 fca6 	bl	80041b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800186e:	4804      	ldr	r0, [pc, #16]	; (8001880 <luces_automat+0x5c>)
 8001870:	f002 fca0 	bl	80041b4 <HAL_GPIO_WritePin>
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40020c00 	.word	0x40020c00
 8001880:	40020800 	.word	0x40020800

08001884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001888:	f001 fcda 	bl	8003240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800188c:	f000 fa0e 	bl	8001cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001890:	f000 ff68 	bl	8002764 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001894:	f000 fee8 	bl	8002668 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001898:	f000 ff3a 	bl	8002710 <MX_USART6_UART_Init>
  MX_TIM5_Init();
 800189c:	f000 fdac 	bl	80023f8 <MX_TIM5_Init>
  MX_TIM1_Init();
 80018a0:	f000 fb64 	bl	8001f6c <MX_TIM1_Init>
  MX_TIM4_Init();
 80018a4:	f000 fd32 	bl	800230c <MX_TIM4_Init>
  MX_TIM2_Init();
 80018a8:	f000 fc18 	bl	80020dc <MX_TIM2_Init>
  MX_TIM3_Init();
 80018ac:	f000 fca2 	bl	80021f4 <MX_TIM3_Init>
  MX_TIM8_Init();
 80018b0:	f000 fe26 	bl	8002500 <MX_TIM8_Init>
  MX_TIM9_Init();
 80018b4:	f000 fe74 	bl	80025a0 <MX_TIM9_Init>
  MX_TIM6_Init();
 80018b8:	f000 fdec 	bl	8002494 <MX_TIM6_Init>
  MX_ADC1_Init();
 80018bc:	f000 fa60 	bl	8001d80 <MX_ADC1_Init>
  MX_ADC2_Init();
 80018c0:	f000 fab0 	bl	8001e24 <MX_ADC2_Init>
  MX_ADC3_Init();
 80018c4:	f000 fb00 	bl	8001ec8 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 80018c8:	f000 fef8 	bl	80026bc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // LED RGB Gaming
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80018cc:	2100      	movs	r1, #0
 80018ce:	48ab      	ldr	r0, [pc, #684]	; (8001b7c <main+0x2f8>)
 80018d0:	f003 fa28 	bl	8004d24 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80018d4:	2104      	movs	r1, #4
 80018d6:	48a9      	ldr	r0, [pc, #676]	; (8001b7c <main+0x2f8>)
 80018d8:	f003 fa24 	bl	8004d24 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80018dc:	2108      	movs	r1, #8
 80018de:	48a7      	ldr	r0, [pc, #668]	; (8001b7c <main+0x2f8>)
 80018e0:	f003 fa20 	bl	8004d24 <HAL_TIM_PWM_Start>
  // Servo Parcela
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80018e4:	2100      	movs	r1, #0
 80018e6:	48a6      	ldr	r0, [pc, #664]	; (8001b80 <main+0x2fc>)
 80018e8:	f003 fa1c 	bl	8004d24 <HAL_TIM_PWM_Start>
  // Servo Garaje
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80018ec:	2104      	movs	r1, #4
 80018ee:	48a4      	ldr	r0, [pc, #656]	; (8001b80 <main+0x2fc>)
 80018f0:	f003 fa18 	bl	8004d24 <HAL_TIM_PWM_Start>
  // Servo Tendedero
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80018f4:	2108      	movs	r1, #8
 80018f6:	48a2      	ldr	r0, [pc, #648]	; (8001b80 <main+0x2fc>)
 80018f8:	f003 fa14 	bl	8004d24 <HAL_TIM_PWM_Start>
  // Servo Salón
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80018fc:	210c      	movs	r1, #12
 80018fe:	48a1      	ldr	r0, [pc, #644]	; (8001b84 <main+0x300>)
 8001900:	f003 fa10 	bl	8004d24 <HAL_TIM_PWM_Start>
  // Servo Dormitorio
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001904:	2104      	movs	r1, #4
 8001906:	489f      	ldr	r0, [pc, #636]	; (8001b84 <main+0x300>)
 8001908:	f003 fa0c 	bl	8004d24 <HAL_TIM_PWM_Start>
  // Servo Oficina
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800190c:	2108      	movs	r1, #8
 800190e:	489d      	ldr	r0, [pc, #628]	; (8001b84 <main+0x300>)
 8001910:	f003 fa08 	bl	8004d24 <HAL_TIM_PWM_Start>
  // DC Salón
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8001914:	2100      	movs	r1, #0
 8001916:	489c      	ldr	r0, [pc, #624]	; (8001b88 <main+0x304>)
 8001918:	f003 fa04 	bl	8004d24 <HAL_TIM_PWM_Start>
  // Zumbador
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800191c:	2100      	movs	r1, #0
 800191e:	489b      	ldr	r0, [pc, #620]	; (8001b8c <main+0x308>)
 8001920:	f003 fa00 	bl	8004d24 <HAL_TIM_PWM_Start>

  /*----------- Útil para Sensor DHT11/22 -----------*/
  HAL_TIM_Base_Start(&htim6);
 8001924:	489a      	ldr	r0, [pc, #616]	; (8001b90 <main+0x30c>)
 8001926:	f003 f93b 	bl	8004ba0 <HAL_TIM_Base_Start>

  /*----------- Inicialización LDR & HW390 & Lluvia -----------*/
  HAL_ADC_Start(&hadc1); // LDR
 800192a:	489a      	ldr	r0, [pc, #616]	; (8001b94 <main+0x310>)
 800192c:	f001 fd62 	bl	80033f4 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2); // HW-390
 8001930:	4899      	ldr	r0, [pc, #612]	; (8001b98 <main+0x314>)
 8001932:	f001 fd5f 	bl	80033f4 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3); // Lluvia
 8001936:	4899      	ldr	r0, [pc, #612]	; (8001b9c <main+0x318>)
 8001938:	f001 fd5c 	bl	80033f4 <HAL_ADC_Start>

  //__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
  ESP_Init("iPhone Carmela","pistacho");
 800193c:	4998      	ldr	r1, [pc, #608]	; (8001ba0 <main+0x31c>)
 800193e:	4899      	ldr	r0, [pc, #612]	; (8001ba4 <main+0x320>)
 8001940:	f7fe fe2a 	bl	8000598 <ESP_Init>
  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	ESP_messageHandler();
 8001944:	f7fe ff54 	bl	80007f0 <ESP_messageHandler>

		// TIMBRE
		if (debouncer(&timbre, B_Timbre_GPIO_Port, B_Timbre_Pin)){
 8001948:	2201      	movs	r2, #1
 800194a:	4997      	ldr	r1, [pc, #604]	; (8001ba8 <main+0x324>)
 800194c:	4897      	ldr	r0, [pc, #604]	; (8001bac <main+0x328>)
 800194e:	f7ff febd 	bl	80016cc <debouncer>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <main+0xd8>
			play_Timbre();
 8001958:	f7ff ff08 	bl	800176c <play_Timbre>

		// STOP ALARMA
		// Conexión Wi-Fi

		// ALARMA
		if (debouncer(&interior, S_Int_GPIO_Port, S_Int_Pin)){
 800195c:	2208      	movs	r2, #8
 800195e:	4992      	ldr	r1, [pc, #584]	; (8001ba8 <main+0x324>)
 8001960:	4893      	ldr	r0, [pc, #588]	; (8001bb0 <main+0x32c>)
 8001962:	f7ff feb3 	bl	80016cc <debouncer>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <main+0xf4>
			if(vSeg[0] == '1') play_Alarma();
 800196c:	4b91      	ldr	r3, [pc, #580]	; (8001bb4 <main+0x330>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b31      	cmp	r3, #49	; 0x31
 8001972:	d101      	bne.n	8001978 <main+0xf4>
 8001974:	f7ff ff30 	bl	80017d8 <play_Alarma>
		}
		if (debouncer(&exterior, S_Ext_GPIO_Port, S_Ext_Pin)){
 8001978:	2202      	movs	r2, #2
 800197a:	498b      	ldr	r1, [pc, #556]	; (8001ba8 <main+0x324>)
 800197c:	488e      	ldr	r0, [pc, #568]	; (8001bb8 <main+0x334>)
 800197e:	f7ff fea5 	bl	80016cc <debouncer>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <main+0x110>
			if(vSeg[1] == '1') play_Alarma();
 8001988:	4b8a      	ldr	r3, [pc, #552]	; (8001bb4 <main+0x330>)
 800198a:	785b      	ldrb	r3, [r3, #1]
 800198c:	2b31      	cmp	r3, #49	; 0x31
 800198e:	d101      	bne.n	8001994 <main+0x110>
 8001990:	f7ff ff22 	bl	80017d8 <play_Alarma>
		}

		// PUERTA PARCELA (90)
		if(vVent[1]=='1' || vExt[4]=='1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89);
 8001994:	4b89      	ldr	r3, [pc, #548]	; (8001bbc <main+0x338>)
 8001996:	785b      	ldrb	r3, [r3, #1]
 8001998:	2b31      	cmp	r3, #49	; 0x31
 800199a:	d003      	beq.n	80019a4 <main+0x120>
 800199c:	4b88      	ldr	r3, [pc, #544]	; (8001bc0 <main+0x33c>)
 800199e:	791b      	ldrb	r3, [r3, #4]
 80019a0:	2b31      	cmp	r3, #49	; 0x31
 80019a2:	d103      	bne.n	80019ac <main+0x128>
 80019a4:	4b76      	ldr	r3, [pc, #472]	; (8001b80 <main+0x2fc>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2259      	movs	r2, #89	; 0x59
 80019aa:	635a      	str	r2, [r3, #52]	; 0x34
		if(vVent[1]=='0' || vExt[4]=='0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 92);
 80019ac:	4b83      	ldr	r3, [pc, #524]	; (8001bbc <main+0x338>)
 80019ae:	785b      	ldrb	r3, [r3, #1]
 80019b0:	2b30      	cmp	r3, #48	; 0x30
 80019b2:	d003      	beq.n	80019bc <main+0x138>
 80019b4:	4b82      	ldr	r3, [pc, #520]	; (8001bc0 <main+0x33c>)
 80019b6:	791b      	ldrb	r3, [r3, #4]
 80019b8:	2b30      	cmp	r3, #48	; 0x30
 80019ba:	d103      	bne.n	80019c4 <main+0x140>
 80019bc:	4b70      	ldr	r3, [pc, #448]	; (8001b80 <main+0x2fc>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	225c      	movs	r2, #92	; 0x5c
 80019c2:	635a      	str	r2, [r3, #52]	; 0x34

		// PUERTA GARAJE (90)
		if(vVent[0]=='1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 89); // más rápido a 30
 80019c4:	4b7d      	ldr	r3, [pc, #500]	; (8001bbc <main+0x338>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b31      	cmp	r3, #49	; 0x31
 80019ca:	d103      	bne.n	80019d4 <main+0x150>
 80019cc:	4b6c      	ldr	r3, [pc, #432]	; (8001b80 <main+0x2fc>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2259      	movs	r2, #89	; 0x59
 80019d2:	639a      	str	r2, [r3, #56]	; 0x38
		if(vVent[0]=='0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 92);
 80019d4:	4b79      	ldr	r3, [pc, #484]	; (8001bbc <main+0x338>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b30      	cmp	r3, #48	; 0x30
 80019da:	d103      	bne.n	80019e4 <main+0x160>
 80019dc:	4b68      	ldr	r3, [pc, #416]	; (8001b80 <main+0x2fc>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	225c      	movs	r2, #92	; 0x5c
 80019e2:	639a      	str	r2, [r3, #56]	; 0x38

		// TOLDO TENDEDERO (90)
		if(vExt[0]=='1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 89);
 80019e4:	4b76      	ldr	r3, [pc, #472]	; (8001bc0 <main+0x33c>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b31      	cmp	r3, #49	; 0x31
 80019ea:	d103      	bne.n	80019f4 <main+0x170>
 80019ec:	4b64      	ldr	r3, [pc, #400]	; (8001b80 <main+0x2fc>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2259      	movs	r2, #89	; 0x59
 80019f2:	63da      	str	r2, [r3, #60]	; 0x3c
		if(vExt[0]=='0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 92);
 80019f4:	4b72      	ldr	r3, [pc, #456]	; (8001bc0 <main+0x33c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b30      	cmp	r3, #48	; 0x30
 80019fa:	d103      	bne.n	8001a04 <main+0x180>
 80019fc:	4b60      	ldr	r3, [pc, #384]	; (8001b80 <main+0x2fc>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	225c      	movs	r2, #92	; 0x5c
 8001a02:	63da      	str	r2, [r3, #60]	; 0x3c

		// VENTANA SALÓN (96)
		if(vVent[2]=='1') {
 8001a04:	4b6d      	ldr	r3, [pc, #436]	; (8001bbc <main+0x338>)
 8001a06:	789b      	ldrb	r3, [r3, #2]
 8001a08:	2b31      	cmp	r3, #49	; 0x31
 8001a0a:	d10b      	bne.n	8001a24 <main+0x1a0>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 95);
 8001a0c:	4b5d      	ldr	r3, [pc, #372]	; (8001b84 <main+0x300>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	225f      	movs	r2, #95	; 0x5f
 8001a12:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(3000);
 8001a14:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a18:	f001 fc84 	bl	8003324 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 96);
 8001a1c:	4b59      	ldr	r3, [pc, #356]	; (8001b84 <main+0x300>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2260      	movs	r2, #96	; 0x60
 8001a22:	641a      	str	r2, [r3, #64]	; 0x40
		}
		if(vVent[2]=='0') {
 8001a24:	4b65      	ldr	r3, [pc, #404]	; (8001bbc <main+0x338>)
 8001a26:	789b      	ldrb	r3, [r3, #2]
 8001a28:	2b30      	cmp	r3, #48	; 0x30
 8001a2a:	d10b      	bne.n	8001a44 <main+0x1c0>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 97);
 8001a2c:	4b55      	ldr	r3, [pc, #340]	; (8001b84 <main+0x300>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2261      	movs	r2, #97	; 0x61
 8001a32:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(3000);
 8001a34:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a38:	f001 fc74 	bl	8003324 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 96);
 8001a3c:	4b51      	ldr	r3, [pc, #324]	; (8001b84 <main+0x300>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2260      	movs	r2, #96	; 0x60
 8001a42:	641a      	str	r2, [r3, #64]	; 0x40
		}
		vVent[2]='x';
 8001a44:	4b5d      	ldr	r3, [pc, #372]	; (8001bbc <main+0x338>)
 8001a46:	2278      	movs	r2, #120	; 0x78
 8001a48:	709a      	strb	r2, [r3, #2]

		// VENTANA DORMITORIO (171)
		if(vVent[3]=='1') {
 8001a4a:	4b5c      	ldr	r3, [pc, #368]	; (8001bbc <main+0x338>)
 8001a4c:	78db      	ldrb	r3, [r3, #3]
 8001a4e:	2b31      	cmp	r3, #49	; 0x31
 8001a50:	d10b      	bne.n	8001a6a <main+0x1e6>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 168);
 8001a52:	4b4c      	ldr	r3, [pc, #304]	; (8001b84 <main+0x300>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	22a8      	movs	r2, #168	; 0xa8
 8001a58:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(3000);
 8001a5a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a5e:	f001 fc61 	bl	8003324 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 170);
 8001a62:	4b48      	ldr	r3, [pc, #288]	; (8001b84 <main+0x300>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	22aa      	movs	r2, #170	; 0xaa
 8001a68:	639a      	str	r2, [r3, #56]	; 0x38
		}
		if(vVent[3]=='0') {
 8001a6a:	4b54      	ldr	r3, [pc, #336]	; (8001bbc <main+0x338>)
 8001a6c:	78db      	ldrb	r3, [r3, #3]
 8001a6e:	2b30      	cmp	r3, #48	; 0x30
 8001a70:	d10b      	bne.n	8001a8a <main+0x206>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 172);
 8001a72:	4b44      	ldr	r3, [pc, #272]	; (8001b84 <main+0x300>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	22ac      	movs	r2, #172	; 0xac
 8001a78:	639a      	str	r2, [r3, #56]	; 0x38

			HAL_Delay(3000);
 8001a7a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a7e:	f001 fc51 	bl	8003324 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 170);
 8001a82:	4b40      	ldr	r3, [pc, #256]	; (8001b84 <main+0x300>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	22aa      	movs	r2, #170	; 0xaa
 8001a88:	639a      	str	r2, [r3, #56]	; 0x38
		}
		vVent[3]='x';
 8001a8a:	4b4c      	ldr	r3, [pc, #304]	; (8001bbc <main+0x338>)
 8001a8c:	2278      	movs	r2, #120	; 0x78
 8001a8e:	70da      	strb	r2, [r3, #3]

		// VENTANA OFICINA
		if(vVent[4]=='1') {
 8001a90:	4b4a      	ldr	r3, [pc, #296]	; (8001bbc <main+0x338>)
 8001a92:	791b      	ldrb	r3, [r3, #4]
 8001a94:	2b31      	cmp	r3, #49	; 0x31
 8001a96:	d10b      	bne.n	8001ab0 <main+0x22c>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 45);
 8001a98:	4b3a      	ldr	r3, [pc, #232]	; (8001b84 <main+0x300>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	222d      	movs	r2, #45	; 0x2d
 8001a9e:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8001aa0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001aa4:	f001 fc3e 	bl	8003324 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 135);
 8001aa8:	4b36      	ldr	r3, [pc, #216]	; (8001b84 <main+0x300>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2287      	movs	r2, #135	; 0x87
 8001aae:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		if(vVent[4]=='0') {
 8001ab0:	4b42      	ldr	r3, [pc, #264]	; (8001bbc <main+0x338>)
 8001ab2:	791b      	ldrb	r3, [r3, #4]
 8001ab4:	2b30      	cmp	r3, #48	; 0x30
 8001ab6:	d10b      	bne.n	8001ad0 <main+0x24c>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 100);
 8001ab8:	4b32      	ldr	r3, [pc, #200]	; (8001b84 <main+0x300>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2264      	movs	r2, #100	; 0x64
 8001abe:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8001ac0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001ac4:	f001 fc2e 	bl	8003324 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 90);
 8001ac8:	4b2e      	ldr	r3, [pc, #184]	; (8001b84 <main+0x300>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	225a      	movs	r2, #90	; 0x5a
 8001ace:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		vVent[4]='x';
 8001ad0:	4b3a      	ldr	r3, [pc, #232]	; (8001bbc <main+0x338>)
 8001ad2:	2278      	movs	r2, #120	; 0x78
 8001ad4:	711a      	strb	r2, [r3, #4]

		// FINALES DE CARRERA
		if(debouncer(&fin, Fin_Servo_GPIO_Port, Fin_Servo_Pin)){
 8001ad6:	2210      	movs	r2, #16
 8001ad8:	4933      	ldr	r1, [pc, #204]	; (8001ba8 <main+0x324>)
 8001ada:	483a      	ldr	r0, [pc, #232]	; (8001bc4 <main+0x340>)
 8001adc:	f7ff fdf6 	bl	80016cc <debouncer>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d017      	beq.n	8001b16 <main+0x292>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 90); // S_Parcela
 8001ae6:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <main+0x2fc>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	225a      	movs	r2, #90	; 0x5a
 8001aec:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 90); // S_Garaje
 8001aee:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <main+0x2fc>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	225a      	movs	r2, #90	; 0x5a
 8001af4:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90); // S_Tendedero
 8001af6:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <main+0x2fc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	225a      	movs	r2, #90	; 0x5a
 8001afc:	63da      	str	r2, [r3, #60]	; 0x3c
			vVent[0]='x'; // S_Parcela
 8001afe:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <main+0x338>)
 8001b00:	2278      	movs	r2, #120	; 0x78
 8001b02:	701a      	strb	r2, [r3, #0]
			vExt[4]='x'; // S_Parcela
 8001b04:	4b2e      	ldr	r3, [pc, #184]	; (8001bc0 <main+0x33c>)
 8001b06:	2278      	movs	r2, #120	; 0x78
 8001b08:	711a      	strb	r2, [r3, #4]
			vVent[1]='x'; // S_Garaje
 8001b0a:	4b2c      	ldr	r3, [pc, #176]	; (8001bbc <main+0x338>)
 8001b0c:	2278      	movs	r2, #120	; 0x78
 8001b0e:	705a      	strb	r2, [r3, #1]
			vExt[0]='x'; // S_Tendedero
 8001b10:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <main+0x33c>)
 8001b12:	2278      	movs	r2, #120	; 0x78
 8001b14:	701a      	strb	r2, [r3, #0]
		}

		// VENTILADOR SALÓN
		if(vTemp[0]=='1') {
 8001b16:	4b2c      	ldr	r3, [pc, #176]	; (8001bc8 <main+0x344>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b31      	cmp	r3, #49	; 0x31
 8001b1c:	d10e      	bne.n	8001b3c <main+0x2b8>
			__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 1000);
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <main+0x304>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b26:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	2110      	movs	r1, #16
 8001b2c:	4827      	ldr	r0, [pc, #156]	; (8001bcc <main+0x348>)
 8001b2e:	f002 fb41 	bl	80041b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,GPIO_PIN_RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2120      	movs	r1, #32
 8001b36:	4825      	ldr	r0, [pc, #148]	; (8001bcc <main+0x348>)
 8001b38:	f002 fb3c 	bl	80041b4 <HAL_GPIO_WritePin>
		}
		if(vTemp[0]=='0') {
 8001b3c:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <main+0x344>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b30      	cmp	r3, #48	; 0x30
 8001b42:	d10d      	bne.n	8001b60 <main+0x2dc>
			__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 8001b44:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <main+0x304>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2110      	movs	r1, #16
 8001b50:	481e      	ldr	r0, [pc, #120]	; (8001bcc <main+0x348>)
 8001b52:	f002 fb2f 	bl	80041b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,GPIO_PIN_RESET);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2120      	movs	r1, #32
 8001b5a:	481c      	ldr	r0, [pc, #112]	; (8001bcc <main+0x348>)
 8001b5c:	f002 fb2a 	bl	80041b4 <HAL_GPIO_WritePin>
		}

		/*----------- Lectura Sensores -----------*/
		// LDR

		if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8001b60:	f04f 31ff 	mov.w	r1, #4294967295
 8001b64:	480b      	ldr	r0, [pc, #44]	; (8001b94 <main+0x310>)
 8001b66:	f001 fd17 	bl	8003598 <HAL_ADC_PollForConversion>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d132      	bne.n	8001bd6 <main+0x352>
			LDR_valor = HAL_ADC_GetValue(&hadc1);
 8001b70:	4808      	ldr	r0, [pc, #32]	; (8001b94 <main+0x310>)
 8001b72:	f001 fd9c 	bl	80036ae <HAL_ADC_GetValue>
 8001b76:	4603      	mov	r3, r0
 8001b78:	e02a      	b.n	8001bd0 <main+0x34c>
 8001b7a:	bf00      	nop
 8001b7c:	20000c78 	.word	0x20000c78
 8001b80:	20000d4c 	.word	0x20000d4c
 8001b84:	20000b58 	.word	0x20000b58
 8001b88:	20000cc0 	.word	0x20000cc0
 8001b8c:	20000a3c 	.word	0x20000a3c
 8001b90:	20000c30 	.word	0x20000c30
 8001b94:	20000ba0 	.word	0x20000ba0
 8001b98:	20000ac8 	.word	0x20000ac8
 8001b9c:	20000be8 	.word	0x20000be8
 8001ba0:	08007974 	.word	0x08007974
 8001ba4:	08007980 	.word	0x08007980
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	200008ac 	.word	0x200008ac
 8001bb0:	200008b4 	.word	0x200008b4
 8001bb4:	200009e0 	.word	0x200009e0
 8001bb8:	200008b8 	.word	0x200008b8
 8001bbc:	200008e4 	.word	0x200008e4
 8001bc0:	200008f0 	.word	0x200008f0
 8001bc4:	200008bc 	.word	0x200008bc
 8001bc8:	20000934 	.word	0x20000934
 8001bcc:	40020800 	.word	0x40020800
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	4b2d      	ldr	r3, [pc, #180]	; (8001c88 <main+0x404>)
 8001bd4:	801a      	strh	r2, [r3, #0]

		if(LDR_valor<90) {
 8001bd6:	4b2c      	ldr	r3, [pc, #176]	; (8001c88 <main+0x404>)
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	2b59      	cmp	r3, #89	; 0x59
 8001bdc:	d808      	bhi.n	8001bf0 <main+0x36c>
			luces_automat(1);
 8001bde:	2001      	movs	r0, #1
 8001be0:	f7ff fe20 	bl	8001824 <luces_automat>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001be4:	2201      	movs	r2, #1
 8001be6:	2120      	movs	r1, #32
 8001be8:	4828      	ldr	r0, [pc, #160]	; (8001c8c <main+0x408>)
 8001bea:	f002 fae3 	bl	80041b4 <HAL_GPIO_WritePin>
 8001bee:	e007      	b.n	8001c00 <main+0x37c>
		}
		else {
			luces_automat(0);
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f7ff fe17 	bl	8001824 <luces_automat>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2120      	movs	r1, #32
 8001bfa:	4824      	ldr	r0, [pc, #144]	; (8001c8c <main+0x408>)
 8001bfc:	f002 fada 	bl	80041b4 <HAL_GPIO_WritePin>
		}

		// HW-390

		if(HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK)
 8001c00:	f04f 31ff 	mov.w	r1, #4294967295
 8001c04:	4822      	ldr	r0, [pc, #136]	; (8001c90 <main+0x40c>)
 8001c06:	f001 fcc7 	bl	8003598 <HAL_ADC_PollForConversion>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d106      	bne.n	8001c1e <main+0x39a>
			Higro_lectura = HAL_ADC_GetValue(&hadc2);
 8001c10:	481f      	ldr	r0, [pc, #124]	; (8001c90 <main+0x40c>)
 8001c12:	f001 fd4c 	bl	80036ae <HAL_ADC_GetValue>
 8001c16:	4603      	mov	r3, r0
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <main+0x410>)
 8001c1c:	801a      	strh	r2, [r3, #0]

		Higro_real = 100 - ((100*Higro_lectura)/255);
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <main+0x410>)
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	2364      	movs	r3, #100	; 0x64
 8001c26:	fb03 f302 	mul.w	r3, r3, r2
 8001c2a:	4a1b      	ldr	r2, [pc, #108]	; (8001c98 <main+0x414>)
 8001c2c:	fb82 1203 	smull	r1, r2, r2, r3
 8001c30:	441a      	add	r2, r3
 8001c32:	11d2      	asrs	r2, r2, #7
 8001c34:	17db      	asrs	r3, r3, #31
 8001c36:	1a9b      	subs	r3, r3, r2
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	3364      	adds	r3, #100	; 0x64
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <main+0x418>)
 8001c40:	801a      	strh	r2, [r3, #0]

		// Lluvia

		if(HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY) == HAL_OK)
 8001c42:	f04f 31ff 	mov.w	r1, #4294967295
 8001c46:	4816      	ldr	r0, [pc, #88]	; (8001ca0 <main+0x41c>)
 8001c48:	f001 fca6 	bl	8003598 <HAL_ADC_PollForConversion>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d106      	bne.n	8001c60 <main+0x3dc>
			Lluvia_lectura = HAL_ADC_GetValue(&hadc3);
 8001c52:	4813      	ldr	r0, [pc, #76]	; (8001ca0 <main+0x41c>)
 8001c54:	f001 fd2b 	bl	80036ae <HAL_ADC_GetValue>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <main+0x420>)
 8001c5e:	801a      	strh	r2, [r3, #0]

		Lluvia_real = 100 - ((100*Lluvia_lectura)/255);
 8001c60:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <main+0x420>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	2364      	movs	r3, #100	; 0x64
 8001c68:	fb03 f302 	mul.w	r3, r3, r2
 8001c6c:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <main+0x414>)
 8001c6e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c72:	441a      	add	r2, r3
 8001c74:	11d2      	asrs	r2, r2, #7
 8001c76:	17db      	asrs	r3, r3, #31
 8001c78:	1a9b      	subs	r3, r3, r2
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	3364      	adds	r3, #100	; 0x64
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <main+0x424>)
 8001c82:	801a      	strh	r2, [r3, #0]
	  	ESP_messageHandler();
 8001c84:	e65e      	b.n	8001944 <main+0xc0>
 8001c86:	bf00      	nop
 8001c88:	200008c0 	.word	0x200008c0
 8001c8c:	40020000 	.word	0x40020000
 8001c90:	20000ac8 	.word	0x20000ac8
 8001c94:	200008c2 	.word	0x200008c2
 8001c98:	80808081 	.word	0x80808081
 8001c9c:	200008c4 	.word	0x200008c4
 8001ca0:	20000be8 	.word	0x20000be8
 8001ca4:	200008c6 	.word	0x200008c6
 8001ca8:	200008c8 	.word	0x200008c8

08001cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b094      	sub	sp, #80	; 0x50
 8001cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cb2:	f107 0320 	add.w	r3, r7, #32
 8001cb6:	2230      	movs	r2, #48	; 0x30
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f004 fe96 	bl	80069ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cc0:	f107 030c 	add.w	r3, r7, #12
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <SystemClock_Config+0xcc>)
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	4a27      	ldr	r2, [pc, #156]	; (8001d78 <SystemClock_Config+0xcc>)
 8001cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cde:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce0:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <SystemClock_Config+0xcc>)
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cec:	2300      	movs	r3, #0
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <SystemClock_Config+0xd0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a21      	ldr	r2, [pc, #132]	; (8001d7c <SystemClock_Config+0xd0>)
 8001cf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <SystemClock_Config+0xd0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d12:	2302      	movs	r3, #2
 8001d14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d1c:	2304      	movs	r3, #4
 8001d1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001d20:	2332      	movs	r3, #50	; 0x32
 8001d22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d24:	2302      	movs	r3, #2
 8001d26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d28:	2307      	movs	r3, #7
 8001d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d2c:	f107 0320 	add.w	r3, r7, #32
 8001d30:	4618      	mov	r0, r3
 8001d32:	f002 fa71 	bl	8004218 <HAL_RCC_OscConfig>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d3c:	f000 fe22 	bl	8002984 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d40:	230f      	movs	r3, #15
 8001d42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d44:	2302      	movs	r3, #2
 8001d46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d58:	f107 030c 	add.w	r3, r7, #12
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f002 fcd2 	bl	8004708 <HAL_RCC_ClockConfig>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d6a:	f000 fe0b 	bl	8002984 <Error_Handler>
  }
}
 8001d6e:	bf00      	nop
 8001d70:	3750      	adds	r7, #80	; 0x50
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40007000 	.word	0x40007000

08001d80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d86:	463b      	mov	r3, r7
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d92:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <MX_ADC1_Init+0x98>)
 8001d94:	4a21      	ldr	r2, [pc, #132]	; (8001e1c <MX_ADC1_Init+0x9c>)
 8001d96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d98:	4b1f      	ldr	r3, [pc, #124]	; (8001e18 <MX_ADC1_Init+0x98>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001d9e:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <MX_ADC1_Init+0x98>)
 8001da0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001da6:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <MX_ADC1_Init+0x98>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001dac:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <MX_ADC1_Init+0x98>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001db2:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <MX_ADC1_Init+0x98>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dba:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <MX_ADC1_Init+0x98>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dc0:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <MX_ADC1_Init+0x98>)
 8001dc2:	4a17      	ldr	r2, [pc, #92]	; (8001e20 <MX_ADC1_Init+0xa0>)
 8001dc4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dc6:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <MX_ADC1_Init+0x98>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <MX_ADC1_Init+0x98>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001dd2:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <MX_ADC1_Init+0x98>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001dda:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <MX_ADC1_Init+0x98>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001de0:	480d      	ldr	r0, [pc, #52]	; (8001e18 <MX_ADC1_Init+0x98>)
 8001de2:	f001 fac3 	bl	800336c <HAL_ADC_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001dec:	f000 fdca 	bl	8002984 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001df0:	2304      	movs	r3, #4
 8001df2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001df4:	2301      	movs	r3, #1
 8001df6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001df8:	2307      	movs	r3, #7
 8001dfa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dfc:	463b      	mov	r3, r7
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	; (8001e18 <MX_ADC1_Init+0x98>)
 8001e02:	f001 fc61 	bl	80036c8 <HAL_ADC_ConfigChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e0c:	f000 fdba 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e10:	bf00      	nop
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000ba0 	.word	0x20000ba0
 8001e1c:	40012000 	.word	0x40012000
 8001e20:	0f000001 	.word	0x0f000001

08001e24 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e2a:	463b      	mov	r3, r7
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001e36:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <MX_ADC2_Init+0x98>)
 8001e38:	4a21      	ldr	r2, [pc, #132]	; (8001ec0 <MX_ADC2_Init+0x9c>)
 8001e3a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001e3c:	4b1f      	ldr	r3, [pc, #124]	; (8001ebc <MX_ADC2_Init+0x98>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8001e42:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <MX_ADC2_Init+0x98>)
 8001e44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e48:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001e4a:	4b1c      	ldr	r3, [pc, #112]	; (8001ebc <MX_ADC2_Init+0x98>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001e50:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <MX_ADC2_Init+0x98>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e56:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <MX_ADC2_Init+0x98>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e5e:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <MX_ADC2_Init+0x98>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e64:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <MX_ADC2_Init+0x98>)
 8001e66:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <MX_ADC2_Init+0xa0>)
 8001e68:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e6a:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <MX_ADC2_Init+0x98>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <MX_ADC2_Init+0x98>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <MX_ADC2_Init+0x98>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <MX_ADC2_Init+0x98>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e84:	480d      	ldr	r0, [pc, #52]	; (8001ebc <MX_ADC2_Init+0x98>)
 8001e86:	f001 fa71 	bl	800336c <HAL_ADC_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001e90:	f000 fd78 	bl	8002984 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001e94:	2308      	movs	r3, #8
 8001e96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001e9c:	2307      	movs	r3, #7
 8001e9e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ea0:	463b      	mov	r3, r7
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4805      	ldr	r0, [pc, #20]	; (8001ebc <MX_ADC2_Init+0x98>)
 8001ea6:	f001 fc0f 	bl	80036c8 <HAL_ADC_ConfigChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001eb0:	f000 fd68 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000ac8 	.word	0x20000ac8
 8001ec0:	40012100 	.word	0x40012100
 8001ec4:	0f000001 	.word	0x0f000001

08001ec8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ece:	463b      	mov	r3, r7
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001eda:	4b21      	ldr	r3, [pc, #132]	; (8001f60 <MX_ADC3_Init+0x98>)
 8001edc:	4a21      	ldr	r2, [pc, #132]	; (8001f64 <MX_ADC3_Init+0x9c>)
 8001ede:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <MX_ADC3_Init+0x98>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <MX_ADC3_Init+0x98>)
 8001ee8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eec:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001eee:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <MX_ADC3_Init+0x98>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <MX_ADC3_Init+0x98>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001efa:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <MX_ADC3_Init+0x98>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f02:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <MX_ADC3_Init+0x98>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f08:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <MX_ADC3_Init+0x98>)
 8001f0a:	4a17      	ldr	r2, [pc, #92]	; (8001f68 <MX_ADC3_Init+0xa0>)
 8001f0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f0e:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <MX_ADC3_Init+0x98>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <MX_ADC3_Init+0x98>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <MX_ADC3_Init+0x98>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <MX_ADC3_Init+0x98>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001f28:	480d      	ldr	r0, [pc, #52]	; (8001f60 <MX_ADC3_Init+0x98>)
 8001f2a:	f001 fa1f 	bl	800336c <HAL_ADC_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001f34:	f000 fd26 	bl	8002984 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001f38:	230b      	movs	r3, #11
 8001f3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001f40:	2307      	movs	r3, #7
 8001f42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001f44:	463b      	mov	r3, r7
 8001f46:	4619      	mov	r1, r3
 8001f48:	4805      	ldr	r0, [pc, #20]	; (8001f60 <MX_ADC3_Init+0x98>)
 8001f4a:	f001 fbbd 	bl	80036c8 <HAL_ADC_ConfigChannel>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001f54:	f000 fd16 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001f58:	bf00      	nop
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000be8 	.word	0x20000be8
 8001f64:	40012200 	.word	0x40012200
 8001f68:	0f000001 	.word	0x0f000001

08001f6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b096      	sub	sp, #88	; 0x58
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]
 8001f98:	611a      	str	r2, [r3, #16]
 8001f9a:	615a      	str	r2, [r3, #20]
 8001f9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f004 fd21 	bl	80069ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001faa:	4b4a      	ldr	r3, [pc, #296]	; (80020d4 <MX_TIM1_Init+0x168>)
 8001fac:	4a4a      	ldr	r2, [pc, #296]	; (80020d8 <MX_TIM1_Init+0x16c>)
 8001fae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8001fb0:	4b48      	ldr	r3, [pc, #288]	; (80020d4 <MX_TIM1_Init+0x168>)
 8001fb2:	225f      	movs	r2, #95	; 0x5f
 8001fb4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb6:	4b47      	ldr	r3, [pc, #284]	; (80020d4 <MX_TIM1_Init+0x168>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 8001fbc:	4b45      	ldr	r3, [pc, #276]	; (80020d4 <MX_TIM1_Init+0x168>)
 8001fbe:	22fe      	movs	r2, #254	; 0xfe
 8001fc0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc2:	4b44      	ldr	r3, [pc, #272]	; (80020d4 <MX_TIM1_Init+0x168>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fc8:	4b42      	ldr	r3, [pc, #264]	; (80020d4 <MX_TIM1_Init+0x168>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fce:	4b41      	ldr	r3, [pc, #260]	; (80020d4 <MX_TIM1_Init+0x168>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fd4:	483f      	ldr	r0, [pc, #252]	; (80020d4 <MX_TIM1_Init+0x168>)
 8001fd6:	f002 fd93 	bl	8004b00 <HAL_TIM_Base_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001fe0:	f000 fcd0 	bl	8002984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4838      	ldr	r0, [pc, #224]	; (80020d4 <MX_TIM1_Init+0x168>)
 8001ff2:	f003 f821 	bl	8005038 <HAL_TIM_ConfigClockSource>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001ffc:	f000 fcc2 	bl	8002984 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002000:	4834      	ldr	r0, [pc, #208]	; (80020d4 <MX_TIM1_Init+0x168>)
 8002002:	f002 fe35 	bl	8004c70 <HAL_TIM_PWM_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800200c:	f000 fcba 	bl	8002984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002010:	2300      	movs	r3, #0
 8002012:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002018:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800201c:	4619      	mov	r1, r3
 800201e:	482d      	ldr	r0, [pc, #180]	; (80020d4 <MX_TIM1_Init+0x168>)
 8002020:	f003 fbe2 	bl	80057e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800202a:	f000 fcab 	bl	8002984 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800202e:	2360      	movs	r3, #96	; 0x60
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002036:	2300      	movs	r3, #0
 8002038:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800203a:	2300      	movs	r3, #0
 800203c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002042:	2300      	movs	r3, #0
 8002044:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002046:	2300      	movs	r3, #0
 8002048:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800204a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800204e:	2200      	movs	r2, #0
 8002050:	4619      	mov	r1, r3
 8002052:	4820      	ldr	r0, [pc, #128]	; (80020d4 <MX_TIM1_Init+0x168>)
 8002054:	f002 ff2e 	bl	8004eb4 <HAL_TIM_PWM_ConfigChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800205e:	f000 fc91 	bl	8002984 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002066:	2204      	movs	r2, #4
 8002068:	4619      	mov	r1, r3
 800206a:	481a      	ldr	r0, [pc, #104]	; (80020d4 <MX_TIM1_Init+0x168>)
 800206c:	f002 ff22 	bl	8004eb4 <HAL_TIM_PWM_ConfigChannel>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002076:	f000 fc85 	bl	8002984 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800207a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207e:	2208      	movs	r2, #8
 8002080:	4619      	mov	r1, r3
 8002082:	4814      	ldr	r0, [pc, #80]	; (80020d4 <MX_TIM1_Init+0x168>)
 8002084:	f002 ff16 	bl	8004eb4 <HAL_TIM_PWM_ConfigChannel>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800208e:	f000 fc79 	bl	8002984 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020b0:	1d3b      	adds	r3, r7, #4
 80020b2:	4619      	mov	r1, r3
 80020b4:	4807      	ldr	r0, [pc, #28]	; (80020d4 <MX_TIM1_Init+0x168>)
 80020b6:	f003 fc13 	bl	80058e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80020c0:	f000 fc60 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020c4:	4803      	ldr	r0, [pc, #12]	; (80020d4 <MX_TIM1_Init+0x168>)
 80020c6:	f000 fded 	bl	8002ca4 <HAL_TIM_MspPostInit>

}
 80020ca:	bf00      	nop
 80020cc:	3758      	adds	r7, #88	; 0x58
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000c78 	.word	0x20000c78
 80020d8:	40010000 	.word	0x40010000

080020dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08e      	sub	sp, #56	; 0x38
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	609a      	str	r2, [r3, #8]
 80020ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f0:	f107 0320 	add.w	r3, r7, #32
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020fa:	1d3b      	adds	r3, r7, #4
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
 8002108:	615a      	str	r2, [r3, #20]
 800210a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800210c:	4b38      	ldr	r3, [pc, #224]	; (80021f0 <MX_TIM2_Init+0x114>)
 800210e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002112:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8002114:	4b36      	ldr	r3, [pc, #216]	; (80021f0 <MX_TIM2_Init+0x114>)
 8002116:	225f      	movs	r2, #95	; 0x5f
 8002118:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211a:	4b35      	ldr	r3, [pc, #212]	; (80021f0 <MX_TIM2_Init+0x114>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8002120:	4b33      	ldr	r3, [pc, #204]	; (80021f0 <MX_TIM2_Init+0x114>)
 8002122:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002126:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002128:	4b31      	ldr	r3, [pc, #196]	; (80021f0 <MX_TIM2_Init+0x114>)
 800212a:	2200      	movs	r2, #0
 800212c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212e:	4b30      	ldr	r3, [pc, #192]	; (80021f0 <MX_TIM2_Init+0x114>)
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002134:	482e      	ldr	r0, [pc, #184]	; (80021f0 <MX_TIM2_Init+0x114>)
 8002136:	f002 fce3 	bl	8004b00 <HAL_TIM_Base_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002140:	f000 fc20 	bl	8002984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002148:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800214a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800214e:	4619      	mov	r1, r3
 8002150:	4827      	ldr	r0, [pc, #156]	; (80021f0 <MX_TIM2_Init+0x114>)
 8002152:	f002 ff71 	bl	8005038 <HAL_TIM_ConfigClockSource>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800215c:	f000 fc12 	bl	8002984 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002160:	4823      	ldr	r0, [pc, #140]	; (80021f0 <MX_TIM2_Init+0x114>)
 8002162:	f002 fd85 	bl	8004c70 <HAL_TIM_PWM_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800216c:	f000 fc0a 	bl	8002984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002170:	2300      	movs	r3, #0
 8002172:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002178:	f107 0320 	add.w	r3, r7, #32
 800217c:	4619      	mov	r1, r3
 800217e:	481c      	ldr	r0, [pc, #112]	; (80021f0 <MX_TIM2_Init+0x114>)
 8002180:	f003 fb32 	bl	80057e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800218a:	f000 fbfb 	bl	8002984 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800218e:	2360      	movs	r3, #96	; 0x60
 8002190:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	2200      	movs	r2, #0
 80021a2:	4619      	mov	r1, r3
 80021a4:	4812      	ldr	r0, [pc, #72]	; (80021f0 <MX_TIM2_Init+0x114>)
 80021a6:	f002 fe85 	bl	8004eb4 <HAL_TIM_PWM_ConfigChannel>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80021b0:	f000 fbe8 	bl	8002984 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021b4:	1d3b      	adds	r3, r7, #4
 80021b6:	2204      	movs	r2, #4
 80021b8:	4619      	mov	r1, r3
 80021ba:	480d      	ldr	r0, [pc, #52]	; (80021f0 <MX_TIM2_Init+0x114>)
 80021bc:	f002 fe7a 	bl	8004eb4 <HAL_TIM_PWM_ConfigChannel>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80021c6:	f000 fbdd 	bl	8002984 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	2208      	movs	r2, #8
 80021ce:	4619      	mov	r1, r3
 80021d0:	4807      	ldr	r0, [pc, #28]	; (80021f0 <MX_TIM2_Init+0x114>)
 80021d2:	f002 fe6f 	bl	8004eb4 <HAL_TIM_PWM_ConfigChannel>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80021dc:	f000 fbd2 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021e0:	4803      	ldr	r0, [pc, #12]	; (80021f0 <MX_TIM2_Init+0x114>)
 80021e2:	f000 fd5f 	bl	8002ca4 <HAL_TIM_MspPostInit>

}
 80021e6:	bf00      	nop
 80021e8:	3738      	adds	r7, #56	; 0x38
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000d4c 	.word	0x20000d4c

080021f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08e      	sub	sp, #56	; 0x38
 80021f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	609a      	str	r2, [r3, #8]
 8002206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002208:	f107 0320 	add.w	r3, r7, #32
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
 8002220:	615a      	str	r2, [r3, #20]
 8002222:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002224:	4b37      	ldr	r3, [pc, #220]	; (8002304 <MX_TIM3_Init+0x110>)
 8002226:	4a38      	ldr	r2, [pc, #224]	; (8002308 <MX_TIM3_Init+0x114>)
 8002228:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 800222a:	4b36      	ldr	r3, [pc, #216]	; (8002304 <MX_TIM3_Init+0x110>)
 800222c:	225f      	movs	r2, #95	; 0x5f
 800222e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002230:	4b34      	ldr	r3, [pc, #208]	; (8002304 <MX_TIM3_Init+0x110>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8002236:	4b33      	ldr	r3, [pc, #204]	; (8002304 <MX_TIM3_Init+0x110>)
 8002238:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800223c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800223e:	4b31      	ldr	r3, [pc, #196]	; (8002304 <MX_TIM3_Init+0x110>)
 8002240:	2200      	movs	r2, #0
 8002242:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002244:	4b2f      	ldr	r3, [pc, #188]	; (8002304 <MX_TIM3_Init+0x110>)
 8002246:	2200      	movs	r2, #0
 8002248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800224a:	482e      	ldr	r0, [pc, #184]	; (8002304 <MX_TIM3_Init+0x110>)
 800224c:	f002 fc58 	bl	8004b00 <HAL_TIM_Base_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002256:	f000 fb95 	bl	8002984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800225a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002260:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002264:	4619      	mov	r1, r3
 8002266:	4827      	ldr	r0, [pc, #156]	; (8002304 <MX_TIM3_Init+0x110>)
 8002268:	f002 fee6 	bl	8005038 <HAL_TIM_ConfigClockSource>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002272:	f000 fb87 	bl	8002984 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002276:	4823      	ldr	r0, [pc, #140]	; (8002304 <MX_TIM3_Init+0x110>)
 8002278:	f002 fcfa 	bl	8004c70 <HAL_TIM_PWM_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002282:	f000 fb7f 	bl	8002984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002286:	2300      	movs	r3, #0
 8002288:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800228e:	f107 0320 	add.w	r3, r7, #32
 8002292:	4619      	mov	r1, r3
 8002294:	481b      	ldr	r0, [pc, #108]	; (8002304 <MX_TIM3_Init+0x110>)
 8002296:	f003 faa7 	bl	80057e8 <HAL_TIMEx_MasterConfigSynchronization>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80022a0:	f000 fb70 	bl	8002984 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022a4:	2360      	movs	r3, #96	; 0x60
 80022a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022ac:	2300      	movs	r3, #0
 80022ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	2204      	movs	r2, #4
 80022b8:	4619      	mov	r1, r3
 80022ba:	4812      	ldr	r0, [pc, #72]	; (8002304 <MX_TIM3_Init+0x110>)
 80022bc:	f002 fdfa 	bl	8004eb4 <HAL_TIM_PWM_ConfigChannel>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80022c6:	f000 fb5d 	bl	8002984 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	2208      	movs	r2, #8
 80022ce:	4619      	mov	r1, r3
 80022d0:	480c      	ldr	r0, [pc, #48]	; (8002304 <MX_TIM3_Init+0x110>)
 80022d2:	f002 fdef 	bl	8004eb4 <HAL_TIM_PWM_ConfigChannel>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80022dc:	f000 fb52 	bl	8002984 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	220c      	movs	r2, #12
 80022e4:	4619      	mov	r1, r3
 80022e6:	4807      	ldr	r0, [pc, #28]	; (8002304 <MX_TIM3_Init+0x110>)
 80022e8:	f002 fde4 	bl	8004eb4 <HAL_TIM_PWM_ConfigChannel>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80022f2:	f000 fb47 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022f6:	4803      	ldr	r0, [pc, #12]	; (8002304 <MX_TIM3_Init+0x110>)
 80022f8:	f000 fcd4 	bl	8002ca4 <HAL_TIM_MspPostInit>

}
 80022fc:	bf00      	nop
 80022fe:	3738      	adds	r7, #56	; 0x38
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000b58 	.word	0x20000b58
 8002308:	40000400 	.word	0x40000400

0800230c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08e      	sub	sp, #56	; 0x38
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	609a      	str	r2, [r3, #8]
 800231e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002320:	f107 0320 	add.w	r3, r7, #32
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
 8002338:	615a      	str	r2, [r3, #20]
 800233a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800233c:	4b2c      	ldr	r3, [pc, #176]	; (80023f0 <MX_TIM4_Init+0xe4>)
 800233e:	4a2d      	ldr	r2, [pc, #180]	; (80023f4 <MX_TIM4_Init+0xe8>)
 8002340:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 8002342:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <MX_TIM4_Init+0xe4>)
 8002344:	225f      	movs	r2, #95	; 0x5f
 8002346:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002348:	4b29      	ldr	r3, [pc, #164]	; (80023f0 <MX_TIM4_Init+0xe4>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20;
 800234e:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <MX_TIM4_Init+0xe4>)
 8002350:	2214      	movs	r2, #20
 8002352:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002354:	4b26      	ldr	r3, [pc, #152]	; (80023f0 <MX_TIM4_Init+0xe4>)
 8002356:	2200      	movs	r2, #0
 8002358:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800235a:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <MX_TIM4_Init+0xe4>)
 800235c:	2200      	movs	r2, #0
 800235e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002360:	4823      	ldr	r0, [pc, #140]	; (80023f0 <MX_TIM4_Init+0xe4>)
 8002362:	f002 fbcd 	bl	8004b00 <HAL_TIM_Base_Init>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800236c:	f000 fb0a 	bl	8002984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002374:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800237a:	4619      	mov	r1, r3
 800237c:	481c      	ldr	r0, [pc, #112]	; (80023f0 <MX_TIM4_Init+0xe4>)
 800237e:	f002 fe5b 	bl	8005038 <HAL_TIM_ConfigClockSource>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002388:	f000 fafc 	bl	8002984 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800238c:	4818      	ldr	r0, [pc, #96]	; (80023f0 <MX_TIM4_Init+0xe4>)
 800238e:	f002 fc6f 	bl	8004c70 <HAL_TIM_PWM_Init>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002398:	f000 faf4 	bl	8002984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800239c:	2300      	movs	r3, #0
 800239e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023a4:	f107 0320 	add.w	r3, r7, #32
 80023a8:	4619      	mov	r1, r3
 80023aa:	4811      	ldr	r0, [pc, #68]	; (80023f0 <MX_TIM4_Init+0xe4>)
 80023ac:	f003 fa1c 	bl	80057e8 <HAL_TIMEx_MasterConfigSynchronization>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80023b6:	f000 fae5 	bl	8002984 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ba:	2360      	movs	r3, #96	; 0x60
 80023bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	2200      	movs	r2, #0
 80023ce:	4619      	mov	r1, r3
 80023d0:	4807      	ldr	r0, [pc, #28]	; (80023f0 <MX_TIM4_Init+0xe4>)
 80023d2:	f002 fd6f 	bl	8004eb4 <HAL_TIM_PWM_ConfigChannel>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80023dc:	f000 fad2 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80023e0:	4803      	ldr	r0, [pc, #12]	; (80023f0 <MX_TIM4_Init+0xe4>)
 80023e2:	f000 fc5f 	bl	8002ca4 <HAL_TIM_MspPostInit>

}
 80023e6:	bf00      	nop
 80023e8:	3738      	adds	r7, #56	; 0x38
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000a3c 	.word	0x20000a3c
 80023f4:	40000800 	.word	0x40000800

080023f8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023fe:	f107 0308 	add.w	r3, r7, #8
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	609a      	str	r2, [r3, #8]
 800240a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800240c:	463b      	mov	r3, r7
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002414:	4b1d      	ldr	r3, [pc, #116]	; (800248c <MX_TIM5_Init+0x94>)
 8002416:	4a1e      	ldr	r2, [pc, #120]	; (8002490 <MX_TIM5_Init+0x98>)
 8002418:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 96-1;
 800241a:	4b1c      	ldr	r3, [pc, #112]	; (800248c <MX_TIM5_Init+0x94>)
 800241c:	225f      	movs	r2, #95	; 0x5f
 800241e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002420:	4b1a      	ldr	r3, [pc, #104]	; (800248c <MX_TIM5_Init+0x94>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 8002426:	4b19      	ldr	r3, [pc, #100]	; (800248c <MX_TIM5_Init+0x94>)
 8002428:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800242c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800242e:	4b17      	ldr	r3, [pc, #92]	; (800248c <MX_TIM5_Init+0x94>)
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002434:	4b15      	ldr	r3, [pc, #84]	; (800248c <MX_TIM5_Init+0x94>)
 8002436:	2200      	movs	r2, #0
 8002438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800243a:	4814      	ldr	r0, [pc, #80]	; (800248c <MX_TIM5_Init+0x94>)
 800243c:	f002 fb60 	bl	8004b00 <HAL_TIM_Base_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002446:	f000 fa9d 	bl	8002984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800244a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800244e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002450:	f107 0308 	add.w	r3, r7, #8
 8002454:	4619      	mov	r1, r3
 8002456:	480d      	ldr	r0, [pc, #52]	; (800248c <MX_TIM5_Init+0x94>)
 8002458:	f002 fdee 	bl	8005038 <HAL_TIM_ConfigClockSource>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002462:	f000 fa8f 	bl	8002984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800246a:	2300      	movs	r3, #0
 800246c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800246e:	463b      	mov	r3, r7
 8002470:	4619      	mov	r1, r3
 8002472:	4806      	ldr	r0, [pc, #24]	; (800248c <MX_TIM5_Init+0x94>)
 8002474:	f003 f9b8 	bl	80057e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800247e:	f000 fa81 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002482:	bf00      	nop
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000b10 	.word	0x20000b10
 8002490:	40000c00 	.word	0x40000c00

08002494 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800249a:	463b      	mov	r3, r7
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <MX_TIM6_Init+0x64>)
 80024a4:	4a15      	ldr	r2, [pc, #84]	; (80024fc <MX_TIM6_Init+0x68>)
 80024a6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 80024a8:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <MX_TIM6_Init+0x64>)
 80024aa:	2231      	movs	r2, #49	; 0x31
 80024ac:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ae:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <MX_TIM6_Init+0x64>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 80024b4:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <MX_TIM6_Init+0x64>)
 80024b6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80024ba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024bc:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <MX_TIM6_Init+0x64>)
 80024be:	2200      	movs	r2, #0
 80024c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80024c2:	480d      	ldr	r0, [pc, #52]	; (80024f8 <MX_TIM6_Init+0x64>)
 80024c4:	f002 fb1c 	bl	8004b00 <HAL_TIM_Base_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80024ce:	f000 fa59 	bl	8002984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d2:	2300      	movs	r3, #0
 80024d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80024da:	463b      	mov	r3, r7
 80024dc:	4619      	mov	r1, r3
 80024de:	4806      	ldr	r0, [pc, #24]	; (80024f8 <MX_TIM6_Init+0x64>)
 80024e0:	f003 f982 	bl	80057e8 <HAL_TIMEx_MasterConfigSynchronization>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80024ea:	f000 fa4b 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000c30 	.word	0x20000c30
 80024fc:	40001000 	.word	0x40001000

08002500 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002506:	f107 0308 	add.w	r3, r7, #8
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	605a      	str	r2, [r3, #4]
 8002510:	609a      	str	r2, [r3, #8]
 8002512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002514:	463b      	mov	r3, r7
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800251c:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <MX_TIM8_Init+0x98>)
 800251e:	4a1f      	ldr	r2, [pc, #124]	; (800259c <MX_TIM8_Init+0x9c>)
 8002520:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002522:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <MX_TIM8_Init+0x98>)
 8002524:	2200      	movs	r2, #0
 8002526:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002528:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <MX_TIM8_Init+0x98>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800252e:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <MX_TIM8_Init+0x98>)
 8002530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002534:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002536:	4b18      	ldr	r3, [pc, #96]	; (8002598 <MX_TIM8_Init+0x98>)
 8002538:	2200      	movs	r2, #0
 800253a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800253c:	4b16      	ldr	r3, [pc, #88]	; (8002598 <MX_TIM8_Init+0x98>)
 800253e:	2200      	movs	r2, #0
 8002540:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <MX_TIM8_Init+0x98>)
 8002544:	2200      	movs	r2, #0
 8002546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002548:	4813      	ldr	r0, [pc, #76]	; (8002598 <MX_TIM8_Init+0x98>)
 800254a:	f002 fad9 	bl	8004b00 <HAL_TIM_Base_Init>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8002554:	f000 fa16 	bl	8002984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800255c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800255e:	f107 0308 	add.w	r3, r7, #8
 8002562:	4619      	mov	r1, r3
 8002564:	480c      	ldr	r0, [pc, #48]	; (8002598 <MX_TIM8_Init+0x98>)
 8002566:	f002 fd67 	bl	8005038 <HAL_TIM_ConfigClockSource>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8002570:	f000 fa08 	bl	8002984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002574:	2300      	movs	r3, #0
 8002576:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800257c:	463b      	mov	r3, r7
 800257e:	4619      	mov	r1, r3
 8002580:	4805      	ldr	r0, [pc, #20]	; (8002598 <MX_TIM8_Init+0x98>)
 8002582:	f003 f931 	bl	80057e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800258c:	f000 f9fa 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002590:	bf00      	nop
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	200009f4 	.word	0x200009f4
 800259c:	40010400 	.word	0x40010400

080025a0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08c      	sub	sp, #48	; 0x30
 80025a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025a6:	f107 0320 	add.w	r3, r7, #32
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	605a      	str	r2, [r3, #4]
 80025b0:	609a      	str	r2, [r3, #8]
 80025b2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025b4:	1d3b      	adds	r3, r7, #4
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	60da      	str	r2, [r3, #12]
 80025c0:	611a      	str	r2, [r3, #16]
 80025c2:	615a      	str	r2, [r3, #20]
 80025c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80025c6:	4b26      	ldr	r3, [pc, #152]	; (8002660 <MX_TIM9_Init+0xc0>)
 80025c8:	4a26      	ldr	r2, [pc, #152]	; (8002664 <MX_TIM9_Init+0xc4>)
 80025ca:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 500-1;
 80025cc:	4b24      	ldr	r3, [pc, #144]	; (8002660 <MX_TIM9_Init+0xc0>)
 80025ce:	f240 12f3 	movw	r2, #499	; 0x1f3
 80025d2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d4:	4b22      	ldr	r3, [pc, #136]	; (8002660 <MX_TIM9_Init+0xc0>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2000-1;
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <MX_TIM9_Init+0xc0>)
 80025dc:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80025e0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e2:	4b1f      	ldr	r3, [pc, #124]	; (8002660 <MX_TIM9_Init+0xc0>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e8:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <MX_TIM9_Init+0xc0>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80025ee:	481c      	ldr	r0, [pc, #112]	; (8002660 <MX_TIM9_Init+0xc0>)
 80025f0:	f002 fa86 	bl	8004b00 <HAL_TIM_Base_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 80025fa:	f000 f9c3 	bl	8002984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002602:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002604:	f107 0320 	add.w	r3, r7, #32
 8002608:	4619      	mov	r1, r3
 800260a:	4815      	ldr	r0, [pc, #84]	; (8002660 <MX_TIM9_Init+0xc0>)
 800260c:	f002 fd14 	bl	8005038 <HAL_TIM_ConfigClockSource>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 8002616:	f000 f9b5 	bl	8002984 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800261a:	4811      	ldr	r0, [pc, #68]	; (8002660 <MX_TIM9_Init+0xc0>)
 800261c:	f002 fb28 	bl	8004c70 <HAL_TIM_PWM_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8002626:	f000 f9ad 	bl	8002984 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800262a:	2360      	movs	r3, #96	; 0x60
 800262c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800263a:	1d3b      	adds	r3, r7, #4
 800263c:	2200      	movs	r2, #0
 800263e:	4619      	mov	r1, r3
 8002640:	4807      	ldr	r0, [pc, #28]	; (8002660 <MX_TIM9_Init+0xc0>)
 8002642:	f002 fc37 	bl	8004eb4 <HAL_TIM_PWM_ConfigChannel>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 800264c:	f000 f99a 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002650:	4803      	ldr	r0, [pc, #12]	; (8002660 <MX_TIM9_Init+0xc0>)
 8002652:	f000 fb27 	bl	8002ca4 <HAL_TIM_MspPostInit>

}
 8002656:	bf00      	nop
 8002658:	3730      	adds	r7, #48	; 0x30
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000cc0 	.word	0x20000cc0
 8002664:	40014000 	.word	0x40014000

08002668 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <MX_USART2_UART_Init+0x4c>)
 800266e:	4a12      	ldr	r2, [pc, #72]	; (80026b8 <MX_USART2_UART_Init+0x50>)
 8002670:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <MX_USART2_UART_Init+0x4c>)
 8002674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002678:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800267a:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <MX_USART2_UART_Init+0x4c>)
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002680:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <MX_USART2_UART_Init+0x4c>)
 8002682:	2200      	movs	r2, #0
 8002684:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002686:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <MX_USART2_UART_Init+0x4c>)
 8002688:	2200      	movs	r2, #0
 800268a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800268c:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <MX_USART2_UART_Init+0x4c>)
 800268e:	220c      	movs	r2, #12
 8002690:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002692:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <MX_USART2_UART_Init+0x4c>)
 8002694:	2200      	movs	r2, #0
 8002696:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <MX_USART2_UART_Init+0x4c>)
 800269a:	2200      	movs	r2, #0
 800269c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800269e:	4805      	ldr	r0, [pc, #20]	; (80026b4 <MX_USART2_UART_Init+0x4c>)
 80026a0:	f003 f970 	bl	8005984 <HAL_UART_Init>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026aa:	f000 f96b 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000d94 	.word	0x20000d94
 80026b8:	40004400 	.word	0x40004400

080026bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <MX_USART3_UART_Init+0x4c>)
 80026c2:	4a12      	ldr	r2, [pc, #72]	; (800270c <MX_USART3_UART_Init+0x50>)
 80026c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <MX_USART3_UART_Init+0x4c>)
 80026c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026ce:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <MX_USART3_UART_Init+0x4c>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <MX_USART3_UART_Init+0x4c>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <MX_USART3_UART_Init+0x4c>)
 80026dc:	2200      	movs	r2, #0
 80026de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026e0:	4b09      	ldr	r3, [pc, #36]	; (8002708 <MX_USART3_UART_Init+0x4c>)
 80026e2:	220c      	movs	r2, #12
 80026e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <MX_USART3_UART_Init+0x4c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <MX_USART3_UART_Init+0x4c>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026f2:	4805      	ldr	r0, [pc, #20]	; (8002708 <MX_USART3_UART_Init+0x4c>)
 80026f4:	f003 f946 	bl	8005984 <HAL_UART_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80026fe:	f000 f941 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000a84 	.word	0x20000a84
 800270c:	40004800 	.word	0x40004800

08002710 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <MX_USART6_UART_Init+0x4c>)
 8002716:	4a12      	ldr	r2, [pc, #72]	; (8002760 <MX_USART6_UART_Init+0x50>)
 8002718:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800271a:	4b10      	ldr	r3, [pc, #64]	; (800275c <MX_USART6_UART_Init+0x4c>)
 800271c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002720:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002722:	4b0e      	ldr	r3, [pc, #56]	; (800275c <MX_USART6_UART_Init+0x4c>)
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <MX_USART6_UART_Init+0x4c>)
 800272a:	2200      	movs	r2, #0
 800272c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <MX_USART6_UART_Init+0x4c>)
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <MX_USART6_UART_Init+0x4c>)
 8002736:	220c      	movs	r2, #12
 8002738:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800273a:	4b08      	ldr	r3, [pc, #32]	; (800275c <MX_USART6_UART_Init+0x4c>)
 800273c:	2200      	movs	r2, #0
 800273e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <MX_USART6_UART_Init+0x4c>)
 8002742:	2200      	movs	r2, #0
 8002744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002746:	4805      	ldr	r0, [pc, #20]	; (800275c <MX_USART6_UART_Init+0x4c>)
 8002748:	f003 f91c 	bl	8005984 <HAL_UART_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002752:	f000 f917 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000d08 	.word	0x20000d08
 8002760:	40011400 	.word	0x40011400

08002764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08c      	sub	sp, #48	; 0x30
 8002768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276a:	f107 031c 	add.w	r3, r7, #28
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	60da      	str	r2, [r3, #12]
 8002778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	61bb      	str	r3, [r7, #24]
 800277e:	4b7b      	ldr	r3, [pc, #492]	; (800296c <MX_GPIO_Init+0x208>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	4a7a      	ldr	r2, [pc, #488]	; (800296c <MX_GPIO_Init+0x208>)
 8002784:	f043 0310 	orr.w	r3, r3, #16
 8002788:	6313      	str	r3, [r2, #48]	; 0x30
 800278a:	4b78      	ldr	r3, [pc, #480]	; (800296c <MX_GPIO_Init+0x208>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f003 0310 	and.w	r3, r3, #16
 8002792:	61bb      	str	r3, [r7, #24]
 8002794:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	4b74      	ldr	r3, [pc, #464]	; (800296c <MX_GPIO_Init+0x208>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a73      	ldr	r2, [pc, #460]	; (800296c <MX_GPIO_Init+0x208>)
 80027a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
 80027a6:	4b71      	ldr	r3, [pc, #452]	; (800296c <MX_GPIO_Init+0x208>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	4b6d      	ldr	r3, [pc, #436]	; (800296c <MX_GPIO_Init+0x208>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a6c      	ldr	r2, [pc, #432]	; (800296c <MX_GPIO_Init+0x208>)
 80027bc:	f043 0304 	orr.w	r3, r3, #4
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b6a      	ldr	r3, [pc, #424]	; (800296c <MX_GPIO_Init+0x208>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	4b66      	ldr	r3, [pc, #408]	; (800296c <MX_GPIO_Init+0x208>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4a65      	ldr	r2, [pc, #404]	; (800296c <MX_GPIO_Init+0x208>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4b63      	ldr	r3, [pc, #396]	; (800296c <MX_GPIO_Init+0x208>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	4b5f      	ldr	r3, [pc, #380]	; (800296c <MX_GPIO_Init+0x208>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4a5e      	ldr	r2, [pc, #376]	; (800296c <MX_GPIO_Init+0x208>)
 80027f4:	f043 0302 	orr.w	r3, r3, #2
 80027f8:	6313      	str	r3, [r2, #48]	; 0x30
 80027fa:	4b5c      	ldr	r3, [pc, #368]	; (800296c <MX_GPIO_Init+0x208>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	607b      	str	r3, [r7, #4]
 800280a:	4b58      	ldr	r3, [pc, #352]	; (800296c <MX_GPIO_Init+0x208>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a57      	ldr	r2, [pc, #348]	; (800296c <MX_GPIO_Init+0x208>)
 8002810:	f043 0308 	orr.w	r3, r3, #8
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b55      	ldr	r3, [pc, #340]	; (800296c <MX_GPIO_Init+0x208>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WiFi_OK_Pin|DC_Salon_1_Pin|DC_Salon_2_Pin|L_Cocina_Pin
 8002822:	2200      	movs	r2, #0
 8002824:	f641 4131 	movw	r1, #7217	; 0x1c31
 8002828:	4851      	ldr	r0, [pc, #324]	; (8002970 <MX_GPIO_Init+0x20c>)
 800282a:	f001 fcc3 	bl	80041b4 <HAL_GPIO_WritePin>
                          |L_Garaje_Pin|L_Tendedero_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDR_Testigo_Pin|L_Fregadero_Pin, GPIO_PIN_RESET);
 800282e:	2200      	movs	r2, #0
 8002830:	f248 0120 	movw	r1, #32800	; 0x8020
 8002834:	484f      	ldr	r0, [pc, #316]	; (8002974 <MX_GPIO_Init+0x210>)
 8002836:	f001 fcbd 	bl	80041b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DHT11_Pin|DHT22_Pin, GPIO_PIN_RESET);
 800283a:	2200      	movs	r2, #0
 800283c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8002840:	484d      	ldr	r0, [pc, #308]	; (8002978 <MX_GPIO_Init+0x214>)
 8002842:	f001 fcb7 	bl	80041b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Riego_Pin|Peltier_Pin|L_Espejo_Pin|L_Izquierda_Pin
 8002846:	2200      	movs	r2, #0
 8002848:	f24a 0178 	movw	r1, #41080	; 0xa078
 800284c:	484b      	ldr	r0, [pc, #300]	; (800297c <MX_GPIO_Init+0x218>)
 800284e:	f001 fcb1 	bl	80041b4 <HAL_GPIO_WritePin>
                          |L_Oficina_Pin|L_Derecha_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, L_Recibidor_Pin|L_Comedor_Pin|L_Jardin_Pin|L_Sala_Pin
 8002852:	2200      	movs	r2, #0
 8002854:	21ff      	movs	r1, #255	; 0xff
 8002856:	484a      	ldr	r0, [pc, #296]	; (8002980 <MX_GPIO_Init+0x21c>)
 8002858:	f001 fcac 	bl	80041b4 <HAL_GPIO_WritePin>
                          |L_Porche_Pin|L_Ambiente_Pin|L_Bano_Pin|L_Dormitorio_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : B_Stop_Pin Fin_Servo_Pin */
  GPIO_InitStruct.Pin = B_Stop_Pin|Fin_Servo_Pin;
 800285c:	2314      	movs	r3, #20
 800285e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002860:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002866:	2300      	movs	r3, #0
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800286a:	f107 031c 	add.w	r3, r7, #28
 800286e:	4619      	mov	r1, r3
 8002870:	4841      	ldr	r0, [pc, #260]	; (8002978 <MX_GPIO_Init+0x214>)
 8002872:	f001 faeb 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : S_Int_Pin B_Timbre_Pin S_Ext_Pin */
  GPIO_InitStruct.Pin = S_Int_Pin|B_Timbre_Pin|S_Ext_Pin;
 8002876:	230b      	movs	r3, #11
 8002878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800287a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800287e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002880:	2301      	movs	r3, #1
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002884:	f107 031c 	add.w	r3, r7, #28
 8002888:	4619      	mov	r1, r3
 800288a:	483b      	ldr	r0, [pc, #236]	; (8002978 <MX_GPIO_Init+0x214>)
 800288c:	f001 fade 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : WiFi_OK_Pin DC_Salon_1_Pin DC_Salon_2_Pin L_Cocina_Pin
                           L_Garaje_Pin L_Tendedero_Pin */
  GPIO_InitStruct.Pin = WiFi_OK_Pin|DC_Salon_1_Pin|DC_Salon_2_Pin|L_Cocina_Pin
 8002890:	f641 4331 	movw	r3, #7217	; 0x1c31
 8002894:	61fb      	str	r3, [r7, #28]
                          |L_Garaje_Pin|L_Tendedero_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002896:	2301      	movs	r3, #1
 8002898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289e:	2300      	movs	r3, #0
 80028a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028a2:	f107 031c 	add.w	r3, r7, #28
 80028a6:	4619      	mov	r1, r3
 80028a8:	4831      	ldr	r0, [pc, #196]	; (8002970 <MX_GPIO_Init+0x20c>)
 80028aa:	f001 facf 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LDR_Testigo_Pin L_Fregadero_Pin */
  GPIO_InitStruct.Pin = LDR_Testigo_Pin|L_Fregadero_Pin;
 80028ae:	f248 0320 	movw	r3, #32800	; 0x8020
 80028b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b4:	2301      	movs	r3, #1
 80028b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028bc:	2300      	movs	r3, #0
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c0:	f107 031c 	add.w	r3, r7, #28
 80028c4:	4619      	mov	r1, r3
 80028c6:	482b      	ldr	r0, [pc, #172]	; (8002974 <MX_GPIO_Init+0x210>)
 80028c8:	f001 fac0 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT11_Pin DHT22_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin|DHT22_Pin;
 80028cc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80028d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d2:	2301      	movs	r3, #1
 80028d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028da:	2300      	movs	r3, #0
 80028dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028de:	f107 031c 	add.w	r3, r7, #28
 80028e2:	4619      	mov	r1, r3
 80028e4:	4824      	ldr	r0, [pc, #144]	; (8002978 <MX_GPIO_Init+0x214>)
 80028e6:	f001 fab1 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : Riego_Pin Peltier_Pin L_Espejo_Pin L_Izquierda_Pin
                           L_Oficina_Pin L_Derecha_Pin */
  GPIO_InitStruct.Pin = Riego_Pin|Peltier_Pin|L_Espejo_Pin|L_Izquierda_Pin
 80028ea:	f24a 0378 	movw	r3, #41080	; 0xa078
 80028ee:	61fb      	str	r3, [r7, #28]
                          |L_Oficina_Pin|L_Derecha_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f0:	2301      	movs	r3, #1
 80028f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f8:	2300      	movs	r3, #0
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028fc:	f107 031c 	add.w	r3, r7, #28
 8002900:	4619      	mov	r1, r3
 8002902:	481e      	ldr	r0, [pc, #120]	; (800297c <MX_GPIO_Init+0x218>)
 8002904:	f001 faa2 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : L_Recibidor_Pin L_Comedor_Pin L_Jardin_Pin L_Sala_Pin
                           L_Porche_Pin L_Ambiente_Pin L_Bano_Pin L_Dormitorio_Pin */
  GPIO_InitStruct.Pin = L_Recibidor_Pin|L_Comedor_Pin|L_Jardin_Pin|L_Sala_Pin
 8002908:	23ff      	movs	r3, #255	; 0xff
 800290a:	61fb      	str	r3, [r7, #28]
                          |L_Porche_Pin|L_Ambiente_Pin|L_Bano_Pin|L_Dormitorio_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800290c:	2301      	movs	r3, #1
 800290e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002914:	2300      	movs	r3, #0
 8002916:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002918:	f107 031c 	add.w	r3, r7, #28
 800291c:	4619      	mov	r1, r3
 800291e:	4818      	ldr	r0, [pc, #96]	; (8002980 <MX_GPIO_Init+0x21c>)
 8002920:	f001 fa94 	bl	8003e4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002924:	2200      	movs	r2, #0
 8002926:	2100      	movs	r1, #0
 8002928:	2006      	movs	r0, #6
 800292a:	f001 f9c6 	bl	8003cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800292e:	2006      	movs	r0, #6
 8002930:	f001 f9df 	bl	8003cf2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002934:	2200      	movs	r2, #0
 8002936:	2100      	movs	r1, #0
 8002938:	2007      	movs	r0, #7
 800293a:	f001 f9be 	bl	8003cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800293e:	2007      	movs	r0, #7
 8002940:	f001 f9d7 	bl	8003cf2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002944:	2200      	movs	r2, #0
 8002946:	2100      	movs	r1, #0
 8002948:	2009      	movs	r0, #9
 800294a:	f001 f9b6 	bl	8003cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800294e:	2009      	movs	r0, #9
 8002950:	f001 f9cf 	bl	8003cf2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002954:	2200      	movs	r2, #0
 8002956:	2100      	movs	r1, #0
 8002958:	200a      	movs	r0, #10
 800295a:	f001 f9ae 	bl	8003cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800295e:	200a      	movs	r0, #10
 8002960:	f001 f9c7 	bl	8003cf2 <HAL_NVIC_EnableIRQ>

}
 8002964:	bf00      	nop
 8002966:	3730      	adds	r7, #48	; 0x30
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40023800 	.word	0x40023800
 8002970:	40020800 	.word	0x40020800
 8002974:	40020000 	.word	0x40020000
 8002978:	40021000 	.word	0x40021000
 800297c:	40020400 	.word	0x40020400
 8002980:	40020c00 	.word	0x40020c00

08002984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002988:	b672      	cpsid	i
}
 800298a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800298c:	e7fe      	b.n	800298c <Error_Handler+0x8>
	...

08002990 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	607b      	str	r3, [r7, #4]
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <HAL_MspInit+0x4c>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	4a0f      	ldr	r2, [pc, #60]	; (80029dc <HAL_MspInit+0x4c>)
 80029a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a4:	6453      	str	r3, [r2, #68]	; 0x44
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <HAL_MspInit+0x4c>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ae:	607b      	str	r3, [r7, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	603b      	str	r3, [r7, #0]
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_MspInit+0x4c>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	4a08      	ldr	r2, [pc, #32]	; (80029dc <HAL_MspInit+0x4c>)
 80029bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c0:	6413      	str	r3, [r2, #64]	; 0x40
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_MspInit+0x4c>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80029ce:	2007      	movs	r0, #7
 80029d0:	f001 f968 	bl	8003ca4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029d4:	bf00      	nop
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40023800 	.word	0x40023800

080029e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08e      	sub	sp, #56	; 0x38
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a45      	ldr	r2, [pc, #276]	; (8002b14 <HAL_ADC_MspInit+0x134>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d128      	bne.n	8002a54 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	623b      	str	r3, [r7, #32]
 8002a06:	4b44      	ldr	r3, [pc, #272]	; (8002b18 <HAL_ADC_MspInit+0x138>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	4a43      	ldr	r2, [pc, #268]	; (8002b18 <HAL_ADC_MspInit+0x138>)
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a10:	6453      	str	r3, [r2, #68]	; 0x44
 8002a12:	4b41      	ldr	r3, [pc, #260]	; (8002b18 <HAL_ADC_MspInit+0x138>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1a:	623b      	str	r3, [r7, #32]
 8002a1c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
 8002a22:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <HAL_ADC_MspInit+0x138>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	4a3c      	ldr	r2, [pc, #240]	; (8002b18 <HAL_ADC_MspInit+0x138>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2e:	4b3a      	ldr	r3, [pc, #232]	; (8002b18 <HAL_ADC_MspInit+0x138>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	61fb      	str	r3, [r7, #28]
 8002a38:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = LDR_Pin;
 8002a3a:	2310      	movs	r3, #16
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 8002a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4833      	ldr	r0, [pc, #204]	; (8002b1c <HAL_ADC_MspInit+0x13c>)
 8002a4e:	f001 f9fd 	bl	8003e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002a52:	e05a      	b.n	8002b0a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a31      	ldr	r2, [pc, #196]	; (8002b20 <HAL_ADC_MspInit+0x140>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d128      	bne.n	8002ab0 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	4b2d      	ldr	r3, [pc, #180]	; (8002b18 <HAL_ADC_MspInit+0x138>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	4a2c      	ldr	r2, [pc, #176]	; (8002b18 <HAL_ADC_MspInit+0x138>)
 8002a68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6e:	4b2a      	ldr	r3, [pc, #168]	; (8002b18 <HAL_ADC_MspInit+0x138>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a76:	61bb      	str	r3, [r7, #24]
 8002a78:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	4b26      	ldr	r3, [pc, #152]	; (8002b18 <HAL_ADC_MspInit+0x138>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	4a25      	ldr	r2, [pc, #148]	; (8002b18 <HAL_ADC_MspInit+0x138>)
 8002a84:	f043 0302 	orr.w	r3, r3, #2
 8002a88:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8a:	4b23      	ldr	r3, [pc, #140]	; (8002b18 <HAL_ADC_MspInit+0x138>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = HW_390_Pin;
 8002a96:	2301      	movs	r3, #1
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HW_390_GPIO_Port, &GPIO_InitStruct);
 8002aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	481e      	ldr	r0, [pc, #120]	; (8002b24 <HAL_ADC_MspInit+0x144>)
 8002aaa:	f001 f9cf 	bl	8003e4c <HAL_GPIO_Init>
}
 8002aae:	e02c      	b.n	8002b0a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a1c      	ldr	r2, [pc, #112]	; (8002b28 <HAL_ADC_MspInit+0x148>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d127      	bne.n	8002b0a <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <HAL_ADC_MspInit+0x138>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	4a15      	ldr	r2, [pc, #84]	; (8002b18 <HAL_ADC_MspInit+0x138>)
 8002ac4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aca:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <HAL_ADC_MspInit+0x138>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <HAL_ADC_MspInit+0x138>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	4a0e      	ldr	r2, [pc, #56]	; (8002b18 <HAL_ADC_MspInit+0x138>)
 8002ae0:	f043 0304 	orr.w	r3, r3, #4
 8002ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <HAL_ADC_MspInit+0x138>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Lluvia_Pin;
 8002af2:	2302      	movs	r3, #2
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002af6:	2303      	movs	r3, #3
 8002af8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Lluvia_GPIO_Port, &GPIO_InitStruct);
 8002afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b02:	4619      	mov	r1, r3
 8002b04:	4809      	ldr	r0, [pc, #36]	; (8002b2c <HAL_ADC_MspInit+0x14c>)
 8002b06:	f001 f9a1 	bl	8003e4c <HAL_GPIO_Init>
}
 8002b0a:	bf00      	nop
 8002b0c:	3738      	adds	r7, #56	; 0x38
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40012000 	.word	0x40012000
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40020000 	.word	0x40020000
 8002b20:	40012100 	.word	0x40012100
 8002b24:	40020400 	.word	0x40020400
 8002b28:	40012200 	.word	0x40012200
 8002b2c:	40020800 	.word	0x40020800

08002b30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b08b      	sub	sp, #44	; 0x2c
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a51      	ldr	r2, [pc, #324]	; (8002c84 <HAL_TIM_Base_MspInit+0x154>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d10e      	bne.n	8002b60 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
 8002b46:	4b50      	ldr	r3, [pc, #320]	; (8002c88 <HAL_TIM_Base_MspInit+0x158>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	4a4f      	ldr	r2, [pc, #316]	; (8002c88 <HAL_TIM_Base_MspInit+0x158>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6453      	str	r3, [r2, #68]	; 0x44
 8002b52:	4b4d      	ldr	r3, [pc, #308]	; (8002c88 <HAL_TIM_Base_MspInit+0x158>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002b5e:	e08a      	b.n	8002c76 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b68:	d10e      	bne.n	8002b88 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	623b      	str	r3, [r7, #32]
 8002b6e:	4b46      	ldr	r3, [pc, #280]	; (8002c88 <HAL_TIM_Base_MspInit+0x158>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	4a45      	ldr	r2, [pc, #276]	; (8002c88 <HAL_TIM_Base_MspInit+0x158>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7a:	4b43      	ldr	r3, [pc, #268]	; (8002c88 <HAL_TIM_Base_MspInit+0x158>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	623b      	str	r3, [r7, #32]
 8002b84:	6a3b      	ldr	r3, [r7, #32]
}
 8002b86:	e076      	b.n	8002c76 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM3)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a3f      	ldr	r2, [pc, #252]	; (8002c8c <HAL_TIM_Base_MspInit+0x15c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d10e      	bne.n	8002bb0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	4b3c      	ldr	r3, [pc, #240]	; (8002c88 <HAL_TIM_Base_MspInit+0x158>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	4a3b      	ldr	r2, [pc, #236]	; (8002c88 <HAL_TIM_Base_MspInit+0x158>)
 8002b9c:	f043 0302 	orr.w	r3, r3, #2
 8002ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba2:	4b39      	ldr	r3, [pc, #228]	; (8002c88 <HAL_TIM_Base_MspInit+0x158>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	61fb      	str	r3, [r7, #28]
 8002bac:	69fb      	ldr	r3, [r7, #28]
}
 8002bae:	e062      	b.n	8002c76 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM4)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a36      	ldr	r2, [pc, #216]	; (8002c90 <HAL_TIM_Base_MspInit+0x160>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d10e      	bne.n	8002bd8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61bb      	str	r3, [r7, #24]
 8002bbe:	4b32      	ldr	r3, [pc, #200]	; (8002c88 <HAL_TIM_Base_MspInit+0x158>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	4a31      	ldr	r2, [pc, #196]	; (8002c88 <HAL_TIM_Base_MspInit+0x158>)
 8002bc4:	f043 0304 	orr.w	r3, r3, #4
 8002bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bca:	4b2f      	ldr	r3, [pc, #188]	; (8002c88 <HAL_TIM_Base_MspInit+0x158>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	61bb      	str	r3, [r7, #24]
 8002bd4:	69bb      	ldr	r3, [r7, #24]
}
 8002bd6:	e04e      	b.n	8002c76 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM5)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a2d      	ldr	r2, [pc, #180]	; (8002c94 <HAL_TIM_Base_MspInit+0x164>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d10e      	bne.n	8002c00 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	4b28      	ldr	r3, [pc, #160]	; (8002c88 <HAL_TIM_Base_MspInit+0x158>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	4a27      	ldr	r2, [pc, #156]	; (8002c88 <HAL_TIM_Base_MspInit+0x158>)
 8002bec:	f043 0308 	orr.w	r3, r3, #8
 8002bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf2:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <HAL_TIM_Base_MspInit+0x158>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	697b      	ldr	r3, [r7, #20]
}
 8002bfe:	e03a      	b.n	8002c76 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM6)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a24      	ldr	r2, [pc, #144]	; (8002c98 <HAL_TIM_Base_MspInit+0x168>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d10e      	bne.n	8002c28 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	4b1e      	ldr	r3, [pc, #120]	; (8002c88 <HAL_TIM_Base_MspInit+0x158>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	4a1d      	ldr	r2, [pc, #116]	; (8002c88 <HAL_TIM_Base_MspInit+0x158>)
 8002c14:	f043 0310 	orr.w	r3, r3, #16
 8002c18:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1a:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <HAL_TIM_Base_MspInit+0x158>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f003 0310 	and.w	r3, r3, #16
 8002c22:	613b      	str	r3, [r7, #16]
 8002c24:	693b      	ldr	r3, [r7, #16]
}
 8002c26:	e026      	b.n	8002c76 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM8)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1b      	ldr	r2, [pc, #108]	; (8002c9c <HAL_TIM_Base_MspInit+0x16c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d10e      	bne.n	8002c50 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <HAL_TIM_Base_MspInit+0x158>)
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	4a13      	ldr	r2, [pc, #76]	; (8002c88 <HAL_TIM_Base_MspInit+0x158>)
 8002c3c:	f043 0302 	orr.w	r3, r3, #2
 8002c40:	6453      	str	r3, [r2, #68]	; 0x44
 8002c42:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <HAL_TIM_Base_MspInit+0x158>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
}
 8002c4e:	e012      	b.n	8002c76 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM9)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a12      	ldr	r2, [pc, #72]	; (8002ca0 <HAL_TIM_Base_MspInit+0x170>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d10d      	bne.n	8002c76 <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <HAL_TIM_Base_MspInit+0x158>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	4a09      	ldr	r2, [pc, #36]	; (8002c88 <HAL_TIM_Base_MspInit+0x158>)
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c68:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6a:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <HAL_TIM_Base_MspInit+0x158>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
}
 8002c76:	bf00      	nop
 8002c78:	372c      	adds	r7, #44	; 0x2c
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40010000 	.word	0x40010000
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40000400 	.word	0x40000400
 8002c90:	40000800 	.word	0x40000800
 8002c94:	40000c00 	.word	0x40000c00
 8002c98:	40001000 	.word	0x40001000
 8002c9c:	40010400 	.word	0x40010400
 8002ca0:	40014000 	.word	0x40014000

08002ca4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08e      	sub	sp, #56	; 0x38
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a7a      	ldr	r2, [pc, #488]	; (8002eac <HAL_TIM_MspPostInit+0x208>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d11f      	bne.n	8002d06 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	623b      	str	r3, [r7, #32]
 8002cca:	4b79      	ldr	r3, [pc, #484]	; (8002eb0 <HAL_TIM_MspPostInit+0x20c>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	4a78      	ldr	r2, [pc, #480]	; (8002eb0 <HAL_TIM_MspPostInit+0x20c>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd6:	4b76      	ldr	r3, [pc, #472]	; (8002eb0 <HAL_TIM_MspPostInit+0x20c>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	623b      	str	r3, [r7, #32]
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = L_GamingG_Pin|L_GamingR_Pin|L_GamingB_Pin;
 8002ce2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	486d      	ldr	r0, [pc, #436]	; (8002eb4 <HAL_TIM_MspPostInit+0x210>)
 8002d00:	f001 f8a4 	bl	8003e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002d04:	e0cd      	b.n	8002ea2 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM2)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0e:	d13d      	bne.n	8002d8c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d10:	2300      	movs	r3, #0
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	4b66      	ldr	r3, [pc, #408]	; (8002eb0 <HAL_TIM_MspPostInit+0x20c>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	4a65      	ldr	r2, [pc, #404]	; (8002eb0 <HAL_TIM_MspPostInit+0x20c>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d20:	4b63      	ldr	r3, [pc, #396]	; (8002eb0 <HAL_TIM_MspPostInit+0x20c>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61bb      	str	r3, [r7, #24]
 8002d30:	4b5f      	ldr	r3, [pc, #380]	; (8002eb0 <HAL_TIM_MspPostInit+0x20c>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	4a5e      	ldr	r2, [pc, #376]	; (8002eb0 <HAL_TIM_MspPostInit+0x20c>)
 8002d36:	f043 0302 	orr.w	r3, r3, #2
 8002d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3c:	4b5c      	ldr	r3, [pc, #368]	; (8002eb0 <HAL_TIM_MspPostInit+0x20c>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	61bb      	str	r3, [r7, #24]
 8002d46:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = S_Parcela_Pin|S_Garaje_Pin;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d54:	2300      	movs	r3, #0
 8002d56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d60:	4619      	mov	r1, r3
 8002d62:	4854      	ldr	r0, [pc, #336]	; (8002eb4 <HAL_TIM_MspPostInit+0x210>)
 8002d64:	f001 f872 	bl	8003e4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S_Tendedero_Pin;
 8002d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6e:	2302      	movs	r3, #2
 8002d70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d76:	2300      	movs	r3, #0
 8002d78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(S_Tendedero_GPIO_Port, &GPIO_InitStruct);
 8002d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d82:	4619      	mov	r1, r3
 8002d84:	484c      	ldr	r0, [pc, #304]	; (8002eb8 <HAL_TIM_MspPostInit+0x214>)
 8002d86:	f001 f861 	bl	8003e4c <HAL_GPIO_Init>
}
 8002d8a:	e08a      	b.n	8002ea2 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM3)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a4a      	ldr	r2, [pc, #296]	; (8002ebc <HAL_TIM_MspPostInit+0x218>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d13d      	bne.n	8002e12 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	4b45      	ldr	r3, [pc, #276]	; (8002eb0 <HAL_TIM_MspPostInit+0x20c>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	4a44      	ldr	r2, [pc, #272]	; (8002eb0 <HAL_TIM_MspPostInit+0x20c>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	6313      	str	r3, [r2, #48]	; 0x30
 8002da6:	4b42      	ldr	r3, [pc, #264]	; (8002eb0 <HAL_TIM_MspPostInit+0x20c>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	4b3e      	ldr	r3, [pc, #248]	; (8002eb0 <HAL_TIM_MspPostInit+0x20c>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	4a3d      	ldr	r2, [pc, #244]	; (8002eb0 <HAL_TIM_MspPostInit+0x20c>)
 8002dbc:	f043 0304 	orr.w	r3, r3, #4
 8002dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc2:	4b3b      	ldr	r3, [pc, #236]	; (8002eb0 <HAL_TIM_MspPostInit+0x20c>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = S_Dormitorio_Pin;
 8002dce:	2380      	movs	r3, #128	; 0x80
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002dde:	2302      	movs	r3, #2
 8002de0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(S_Dormitorio_GPIO_Port, &GPIO_InitStruct);
 8002de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de6:	4619      	mov	r1, r3
 8002de8:	4832      	ldr	r0, [pc, #200]	; (8002eb4 <HAL_TIM_MspPostInit+0x210>)
 8002dea:	f001 f82f 	bl	8003e4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S_Oficina_Pin|S_Salon_Pin;
 8002dee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df4:	2302      	movs	r3, #2
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e00:	2302      	movs	r3, #2
 8002e02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e08:	4619      	mov	r1, r3
 8002e0a:	482d      	ldr	r0, [pc, #180]	; (8002ec0 <HAL_TIM_MspPostInit+0x21c>)
 8002e0c:	f001 f81e 	bl	8003e4c <HAL_GPIO_Init>
}
 8002e10:	e047      	b.n	8002ea2 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM4)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a2b      	ldr	r2, [pc, #172]	; (8002ec4 <HAL_TIM_MspPostInit+0x220>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d11f      	bne.n	8002e5c <HAL_TIM_MspPostInit+0x1b8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	4b23      	ldr	r3, [pc, #140]	; (8002eb0 <HAL_TIM_MspPostInit+0x20c>)
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	4a22      	ldr	r2, [pc, #136]	; (8002eb0 <HAL_TIM_MspPostInit+0x20c>)
 8002e26:	f043 0308 	orr.w	r3, r3, #8
 8002e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2c:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <HAL_TIM_MspPostInit+0x20c>)
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Z_Timbre_Pin;
 8002e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e46:	2300      	movs	r3, #0
 8002e48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Z_Timbre_GPIO_Port, &GPIO_InitStruct);
 8002e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e52:	4619      	mov	r1, r3
 8002e54:	481c      	ldr	r0, [pc, #112]	; (8002ec8 <HAL_TIM_MspPostInit+0x224>)
 8002e56:	f000 fff9 	bl	8003e4c <HAL_GPIO_Init>
}
 8002e5a:	e022      	b.n	8002ea2 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM9)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a1a      	ldr	r2, [pc, #104]	; (8002ecc <HAL_TIM_MspPostInit+0x228>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d11d      	bne.n	8002ea2 <HAL_TIM_MspPostInit+0x1fe>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <HAL_TIM_MspPostInit+0x20c>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	4a10      	ldr	r2, [pc, #64]	; (8002eb0 <HAL_TIM_MspPostInit+0x20c>)
 8002e70:	f043 0310 	orr.w	r3, r3, #16
 8002e74:	6313      	str	r3, [r2, #48]	; 0x30
 8002e76:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <HAL_TIM_MspPostInit+0x20c>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	60bb      	str	r3, [r7, #8]
 8002e80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e82:	2320      	movs	r3, #32
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e86:	2302      	movs	r3, #2
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002e92:	2303      	movs	r3, #3
 8002e94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	480c      	ldr	r0, [pc, #48]	; (8002ed0 <HAL_TIM_MspPostInit+0x22c>)
 8002e9e:	f000 ffd5 	bl	8003e4c <HAL_GPIO_Init>
}
 8002ea2:	bf00      	nop
 8002ea4:	3738      	adds	r7, #56	; 0x38
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40010000 	.word	0x40010000
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40020000 	.word	0x40020000
 8002eb8:	40020400 	.word	0x40020400
 8002ebc:	40000400 	.word	0x40000400
 8002ec0:	40020800 	.word	0x40020800
 8002ec4:	40000800 	.word	0x40000800
 8002ec8:	40020c00 	.word	0x40020c00
 8002ecc:	40014000 	.word	0x40014000
 8002ed0:	40021000 	.word	0x40021000

08002ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08e      	sub	sp, #56	; 0x38
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	605a      	str	r2, [r3, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	60da      	str	r2, [r3, #12]
 8002eea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a63      	ldr	r2, [pc, #396]	; (8003080 <HAL_UART_MspInit+0x1ac>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d134      	bne.n	8002f60 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	623b      	str	r3, [r7, #32]
 8002efa:	4b62      	ldr	r3, [pc, #392]	; (8003084 <HAL_UART_MspInit+0x1b0>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	4a61      	ldr	r2, [pc, #388]	; (8003084 <HAL_UART_MspInit+0x1b0>)
 8002f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f04:	6413      	str	r3, [r2, #64]	; 0x40
 8002f06:	4b5f      	ldr	r3, [pc, #380]	; (8003084 <HAL_UART_MspInit+0x1b0>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	623b      	str	r3, [r7, #32]
 8002f10:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	4b5b      	ldr	r3, [pc, #364]	; (8003084 <HAL_UART_MspInit+0x1b0>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	4a5a      	ldr	r2, [pc, #360]	; (8003084 <HAL_UART_MspInit+0x1b0>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	6313      	str	r3, [r2, #48]	; 0x30
 8002f22:	4b58      	ldr	r3, [pc, #352]	; (8003084 <HAL_UART_MspInit+0x1b0>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	61fb      	str	r3, [r7, #28]
 8002f2c:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f2e:	230c      	movs	r3, #12
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f32:	2302      	movs	r3, #2
 8002f34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f3e:	2307      	movs	r3, #7
 8002f40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f46:	4619      	mov	r1, r3
 8002f48:	484f      	ldr	r0, [pc, #316]	; (8003088 <HAL_UART_MspInit+0x1b4>)
 8002f4a:	f000 ff7f 	bl	8003e4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2100      	movs	r1, #0
 8002f52:	2026      	movs	r0, #38	; 0x26
 8002f54:	f000 feb1 	bl	8003cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f58:	2026      	movs	r0, #38	; 0x26
 8002f5a:	f000 feca 	bl	8003cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002f5e:	e08a      	b.n	8003076 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART3)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a49      	ldr	r2, [pc, #292]	; (800308c <HAL_UART_MspInit+0x1b8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d14c      	bne.n	8003004 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61bb      	str	r3, [r7, #24]
 8002f6e:	4b45      	ldr	r3, [pc, #276]	; (8003084 <HAL_UART_MspInit+0x1b0>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	4a44      	ldr	r2, [pc, #272]	; (8003084 <HAL_UART_MspInit+0x1b0>)
 8002f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f78:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7a:	4b42      	ldr	r3, [pc, #264]	; (8003084 <HAL_UART_MspInit+0x1b0>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f82:	61bb      	str	r3, [r7, #24]
 8002f84:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	4b3e      	ldr	r3, [pc, #248]	; (8003084 <HAL_UART_MspInit+0x1b0>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	4a3d      	ldr	r2, [pc, #244]	; (8003084 <HAL_UART_MspInit+0x1b0>)
 8002f90:	f043 0302 	orr.w	r3, r3, #2
 8002f94:	6313      	str	r3, [r2, #48]	; 0x30
 8002f96:	4b3b      	ldr	r3, [pc, #236]	; (8003084 <HAL_UART_MspInit+0x1b0>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	4b37      	ldr	r3, [pc, #220]	; (8003084 <HAL_UART_MspInit+0x1b0>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	4a36      	ldr	r2, [pc, #216]	; (8003084 <HAL_UART_MspInit+0x1b0>)
 8002fac:	f043 0308 	orr.w	r3, r3, #8
 8002fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb2:	4b34      	ldr	r3, [pc, #208]	; (8003084 <HAL_UART_MspInit+0x1b0>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002fbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fd0:	2307      	movs	r3, #7
 8002fd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd8:	4619      	mov	r1, r3
 8002fda:	482d      	ldr	r0, [pc, #180]	; (8003090 <HAL_UART_MspInit+0x1bc>)
 8002fdc:	f000 ff36 	bl	8003e4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002fe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ff2:	2307      	movs	r3, #7
 8002ff4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4825      	ldr	r0, [pc, #148]	; (8003094 <HAL_UART_MspInit+0x1c0>)
 8002ffe:	f000 ff25 	bl	8003e4c <HAL_GPIO_Init>
}
 8003002:	e038      	b.n	8003076 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART6)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a23      	ldr	r2, [pc, #140]	; (8003098 <HAL_UART_MspInit+0x1c4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d133      	bne.n	8003076 <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <HAL_UART_MspInit+0x1b0>)
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	4a1b      	ldr	r2, [pc, #108]	; (8003084 <HAL_UART_MspInit+0x1b0>)
 8003018:	f043 0320 	orr.w	r3, r3, #32
 800301c:	6453      	str	r3, [r2, #68]	; 0x44
 800301e:	4b19      	ldr	r3, [pc, #100]	; (8003084 <HAL_UART_MspInit+0x1b0>)
 8003020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	4b15      	ldr	r3, [pc, #84]	; (8003084 <HAL_UART_MspInit+0x1b0>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	4a14      	ldr	r2, [pc, #80]	; (8003084 <HAL_UART_MspInit+0x1b0>)
 8003034:	f043 0304 	orr.w	r3, r3, #4
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
 800303a:	4b12      	ldr	r3, [pc, #72]	; (8003084 <HAL_UART_MspInit+0x1b0>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	60bb      	str	r3, [r7, #8]
 8003044:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003046:	23c0      	movs	r3, #192	; 0xc0
 8003048:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304a:	2302      	movs	r3, #2
 800304c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304e:	2300      	movs	r3, #0
 8003050:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003052:	2303      	movs	r3, #3
 8003054:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003056:	2308      	movs	r3, #8
 8003058:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800305a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800305e:	4619      	mov	r1, r3
 8003060:	480e      	ldr	r0, [pc, #56]	; (800309c <HAL_UART_MspInit+0x1c8>)
 8003062:	f000 fef3 	bl	8003e4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003066:	2200      	movs	r2, #0
 8003068:	2100      	movs	r1, #0
 800306a:	2047      	movs	r0, #71	; 0x47
 800306c:	f000 fe25 	bl	8003cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003070:	2047      	movs	r0, #71	; 0x47
 8003072:	f000 fe3e 	bl	8003cf2 <HAL_NVIC_EnableIRQ>
}
 8003076:	bf00      	nop
 8003078:	3738      	adds	r7, #56	; 0x38
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40004400 	.word	0x40004400
 8003084:	40023800 	.word	0x40023800
 8003088:	40020000 	.word	0x40020000
 800308c:	40004800 	.word	0x40004800
 8003090:	40020400 	.word	0x40020400
 8003094:	40020c00 	.word	0x40020c00
 8003098:	40011400 	.word	0x40011400
 800309c:	40020800 	.word	0x40020800

080030a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030a4:	e7fe      	b.n	80030a4 <NMI_Handler+0x4>

080030a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030a6:	b480      	push	{r7}
 80030a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030aa:	e7fe      	b.n	80030aa <HardFault_Handler+0x4>

080030ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030b0:	e7fe      	b.n	80030b0 <MemManage_Handler+0x4>

080030b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030b2:	b480      	push	{r7}
 80030b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030b6:	e7fe      	b.n	80030b6 <BusFault_Handler+0x4>

080030b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030bc:	e7fe      	b.n	80030bc <UsageFault_Handler+0x4>

080030be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030be:	b480      	push	{r7}
 80030c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030da:	b480      	push	{r7}
 80030dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030de:	bf00      	nop
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030ec:	f000 f8fa 	bl	80032e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030f0:	bf00      	nop
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80030f8:	2001      	movs	r0, #1
 80030fa:	f001 f875 	bl	80041e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}

08003102 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003106:	2002      	movs	r0, #2
 8003108:	f001 f86e 	bl	80041e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800310c:	bf00      	nop
 800310e:	bd80      	pop	{r7, pc}

08003110 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003114:	2008      	movs	r0, #8
 8003116:	f001 f867 	bl	80041e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}

0800311e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003122:	2010      	movs	r0, #16
 8003124:	f001 f860 	bl	80041e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}

0800312c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UART_isr(&huart2);
 8003130:	4803      	ldr	r0, [pc, #12]	; (8003140 <USART2_IRQHandler+0x14>)
 8003132:	f7fe f951 	bl	80013d8 <UART_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003136:	4802      	ldr	r0, [pc, #8]	; (8003140 <USART2_IRQHandler+0x14>)
 8003138:	f002 fda6 	bl	8005c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800313c:	bf00      	nop
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20000d94 	.word	0x20000d94

08003144 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	UART_isr(&huart6);
 8003148:	4803      	ldr	r0, [pc, #12]	; (8003158 <USART6_IRQHandler+0x14>)
 800314a:	f7fe f945 	bl	80013d8 <UART_isr>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800314e:	4802      	ldr	r0, [pc, #8]	; (8003158 <USART6_IRQHandler+0x14>)
 8003150:	f002 fd9a 	bl	8005c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003154:	bf00      	nop
 8003156:	bd80      	pop	{r7, pc}
 8003158:	20000d08 	.word	0x20000d08

0800315c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003164:	4a14      	ldr	r2, [pc, #80]	; (80031b8 <_sbrk+0x5c>)
 8003166:	4b15      	ldr	r3, [pc, #84]	; (80031bc <_sbrk+0x60>)
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003170:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <_sbrk+0x64>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d102      	bne.n	800317e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003178:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <_sbrk+0x64>)
 800317a:	4a12      	ldr	r2, [pc, #72]	; (80031c4 <_sbrk+0x68>)
 800317c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800317e:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <_sbrk+0x64>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4413      	add	r3, r2
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	429a      	cmp	r2, r3
 800318a:	d207      	bcs.n	800319c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800318c:	f003 fc04 	bl	8006998 <__errno>
 8003190:	4603      	mov	r3, r0
 8003192:	220c      	movs	r2, #12
 8003194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003196:	f04f 33ff 	mov.w	r3, #4294967295
 800319a:	e009      	b.n	80031b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800319c:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <_sbrk+0x64>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031a2:	4b07      	ldr	r3, [pc, #28]	; (80031c0 <_sbrk+0x64>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4413      	add	r3, r2
 80031aa:	4a05      	ldr	r2, [pc, #20]	; (80031c0 <_sbrk+0x64>)
 80031ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ae:	68fb      	ldr	r3, [r7, #12]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20020000 	.word	0x20020000
 80031bc:	00000400 	.word	0x00000400
 80031c0:	200008d0 	.word	0x200008d0
 80031c4:	20000df0 	.word	0x20000df0

080031c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031cc:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <SystemInit+0x20>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d2:	4a05      	ldr	r2, [pc, #20]	; (80031e8 <SystemInit+0x20>)
 80031d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031dc:	bf00      	nop
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80031ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003224 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031f0:	480d      	ldr	r0, [pc, #52]	; (8003228 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031f2:	490e      	ldr	r1, [pc, #56]	; (800322c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031f4:	4a0e      	ldr	r2, [pc, #56]	; (8003230 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031f8:	e002      	b.n	8003200 <LoopCopyDataInit>

080031fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031fe:	3304      	adds	r3, #4

08003200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003204:	d3f9      	bcc.n	80031fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003206:	4a0b      	ldr	r2, [pc, #44]	; (8003234 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003208:	4c0b      	ldr	r4, [pc, #44]	; (8003238 <LoopFillZerobss+0x26>)
  movs r3, #0
 800320a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800320c:	e001      	b.n	8003212 <LoopFillZerobss>

0800320e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800320e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003210:	3204      	adds	r2, #4

08003212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003214:	d3fb      	bcc.n	800320e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003216:	f7ff ffd7 	bl	80031c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800321a:	f003 fbc3 	bl	80069a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800321e:	f7fe fb31 	bl	8001884 <main>
  bx  lr    
 8003222:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003224:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800322c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003230:	080079ec 	.word	0x080079ec
  ldr r2, =_sbss
 8003234:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003238:	20000dec 	.word	0x20000dec

0800323c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800323c:	e7fe      	b.n	800323c <ADC_IRQHandler>
	...

08003240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003244:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <HAL_Init+0x40>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a0d      	ldr	r2, [pc, #52]	; (8003280 <HAL_Init+0x40>)
 800324a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800324e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003250:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <HAL_Init+0x40>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0a      	ldr	r2, [pc, #40]	; (8003280 <HAL_Init+0x40>)
 8003256:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800325a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800325c:	4b08      	ldr	r3, [pc, #32]	; (8003280 <HAL_Init+0x40>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a07      	ldr	r2, [pc, #28]	; (8003280 <HAL_Init+0x40>)
 8003262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003266:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003268:	2003      	movs	r0, #3
 800326a:	f000 fd1b 	bl	8003ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800326e:	2000      	movs	r0, #0
 8003270:	f000 f808 	bl	8003284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003274:	f7ff fb8c 	bl	8002990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40023c00 	.word	0x40023c00

08003284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800328c:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <HAL_InitTick+0x54>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	4b12      	ldr	r3, [pc, #72]	; (80032dc <HAL_InitTick+0x58>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	4619      	mov	r1, r3
 8003296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800329a:	fbb3 f3f1 	udiv	r3, r3, r1
 800329e:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fd33 	bl	8003d0e <HAL_SYSTICK_Config>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e00e      	b.n	80032d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b0f      	cmp	r3, #15
 80032b6:	d80a      	bhi.n	80032ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032b8:	2200      	movs	r2, #0
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	f04f 30ff 	mov.w	r0, #4294967295
 80032c0:	f000 fcfb 	bl	8003cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032c4:	4a06      	ldr	r2, [pc, #24]	; (80032e0 <HAL_InitTick+0x5c>)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	e000      	b.n	80032d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	20000000 	.word	0x20000000
 80032dc:	20000008 	.word	0x20000008
 80032e0:	20000004 	.word	0x20000004

080032e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_IncTick+0x20>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	461a      	mov	r2, r3
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <HAL_IncTick+0x24>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4413      	add	r3, r2
 80032f4:	4a04      	ldr	r2, [pc, #16]	; (8003308 <HAL_IncTick+0x24>)
 80032f6:	6013      	str	r3, [r2, #0]
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	20000008 	.word	0x20000008
 8003308:	20000dd8 	.word	0x20000dd8

0800330c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return uwTick;
 8003310:	4b03      	ldr	r3, [pc, #12]	; (8003320 <HAL_GetTick+0x14>)
 8003312:	681b      	ldr	r3, [r3, #0]
}
 8003314:	4618      	mov	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20000dd8 	.word	0x20000dd8

08003324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800332c:	f7ff ffee 	bl	800330c <HAL_GetTick>
 8003330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d005      	beq.n	800334a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800333e:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <HAL_Delay+0x44>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4413      	add	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800334a:	bf00      	nop
 800334c:	f7ff ffde 	bl	800330c <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	429a      	cmp	r2, r3
 800335a:	d8f7      	bhi.n	800334c <HAL_Delay+0x28>
  {
  }
}
 800335c:	bf00      	nop
 800335e:	bf00      	nop
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20000008 	.word	0x20000008

0800336c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e033      	b.n	80033ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	d109      	bne.n	800339e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff fb28 	bl	80029e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f003 0310 	and.w	r3, r3, #16
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d118      	bne.n	80033dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033b2:	f023 0302 	bic.w	r3, r3, #2
 80033b6:	f043 0202 	orr.w	r2, r3, #2
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 faa4 	bl	800390c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f023 0303 	bic.w	r3, r3, #3
 80033d2:	f043 0201 	orr.w	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	641a      	str	r2, [r3, #64]	; 0x40
 80033da:	e001      	b.n	80033e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_ADC_Start+0x1a>
 800340a:	2302      	movs	r3, #2
 800340c:	e0b2      	b.n	8003574 <HAL_ADC_Start+0x180>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b01      	cmp	r3, #1
 8003422:	d018      	beq.n	8003456 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003434:	4b52      	ldr	r3, [pc, #328]	; (8003580 <HAL_ADC_Start+0x18c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a52      	ldr	r2, [pc, #328]	; (8003584 <HAL_ADC_Start+0x190>)
 800343a:	fba2 2303 	umull	r2, r3, r2, r3
 800343e:	0c9a      	lsrs	r2, r3, #18
 8003440:	4613      	mov	r3, r2
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	4413      	add	r3, r2
 8003446:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003448:	e002      	b.n	8003450 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	3b01      	subs	r3, #1
 800344e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f9      	bne.n	800344a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b01      	cmp	r3, #1
 8003462:	d17a      	bne.n	800355a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800346c:	f023 0301 	bic.w	r3, r3, #1
 8003470:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003482:	2b00      	cmp	r3, #0
 8003484:	d007      	beq.n	8003496 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800348e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800349e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a2:	d106      	bne.n	80034b2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a8:	f023 0206 	bic.w	r2, r3, #6
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	645a      	str	r2, [r3, #68]	; 0x44
 80034b0:	e002      	b.n	80034b8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034c0:	4b31      	ldr	r3, [pc, #196]	; (8003588 <HAL_ADC_Start+0x194>)
 80034c2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80034cc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f003 031f 	and.w	r3, r3, #31
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d12a      	bne.n	8003530 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a2b      	ldr	r2, [pc, #172]	; (800358c <HAL_ADC_Start+0x198>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d015      	beq.n	8003510 <HAL_ADC_Start+0x11c>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a29      	ldr	r2, [pc, #164]	; (8003590 <HAL_ADC_Start+0x19c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d105      	bne.n	80034fa <HAL_ADC_Start+0x106>
 80034ee:	4b26      	ldr	r3, [pc, #152]	; (8003588 <HAL_ADC_Start+0x194>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a25      	ldr	r2, [pc, #148]	; (8003594 <HAL_ADC_Start+0x1a0>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d136      	bne.n	8003572 <HAL_ADC_Start+0x17e>
 8003504:	4b20      	ldr	r3, [pc, #128]	; (8003588 <HAL_ADC_Start+0x194>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0310 	and.w	r3, r3, #16
 800350c:	2b00      	cmp	r3, #0
 800350e:	d130      	bne.n	8003572 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d129      	bne.n	8003572 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800352c:	609a      	str	r2, [r3, #8]
 800352e:	e020      	b.n	8003572 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a15      	ldr	r2, [pc, #84]	; (800358c <HAL_ADC_Start+0x198>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d11b      	bne.n	8003572 <HAL_ADC_Start+0x17e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d114      	bne.n	8003572 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	e00b      	b.n	8003572 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f043 0210 	orr.w	r2, r3, #16
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	f043 0201 	orr.w	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	20000000 	.word	0x20000000
 8003584:	431bde83 	.word	0x431bde83
 8003588:	40012300 	.word	0x40012300
 800358c:	40012000 	.word	0x40012000
 8003590:	40012100 	.word	0x40012100
 8003594:	40012200 	.word	0x40012200

08003598 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b4:	d113      	bne.n	80035de <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80035c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c4:	d10b      	bne.n	80035de <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	f043 0220 	orr.w	r2, r3, #32
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e063      	b.n	80036a6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80035de:	f7ff fe95 	bl	800330c <HAL_GetTick>
 80035e2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80035e4:	e021      	b.n	800362a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ec:	d01d      	beq.n	800362a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d007      	beq.n	8003604 <HAL_ADC_PollForConversion+0x6c>
 80035f4:	f7ff fe8a 	bl	800330c <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d212      	bcs.n	800362a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b02      	cmp	r3, #2
 8003610:	d00b      	beq.n	800362a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f043 0204 	orr.w	r2, r3, #4
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e03d      	b.n	80036a6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b02      	cmp	r3, #2
 8003636:	d1d6      	bne.n	80035e6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f06f 0212 	mvn.w	r2, #18
 8003640:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d123      	bne.n	80036a4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003660:	2b00      	cmp	r3, #0
 8003662:	d11f      	bne.n	80036a4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800366e:	2b00      	cmp	r3, #0
 8003670:	d006      	beq.n	8003680 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800367c:	2b00      	cmp	r3, #0
 800367e:	d111      	bne.n	80036a4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d105      	bne.n	80036a4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	f043 0201 	orr.w	r2, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80036bc:	4618      	mov	r0, r3
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x1c>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e105      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x228>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b09      	cmp	r3, #9
 80036f2:	d925      	bls.n	8003740 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68d9      	ldr	r1, [r3, #12]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	4613      	mov	r3, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	4413      	add	r3, r2
 8003708:	3b1e      	subs	r3, #30
 800370a:	2207      	movs	r2, #7
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43da      	mvns	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	400a      	ands	r2, r1
 8003718:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68d9      	ldr	r1, [r3, #12]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	b29b      	uxth	r3, r3
 800372a:	4618      	mov	r0, r3
 800372c:	4603      	mov	r3, r0
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4403      	add	r3, r0
 8003732:	3b1e      	subs	r3, #30
 8003734:	409a      	lsls	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	e022      	b.n	8003786 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6919      	ldr	r1, [r3, #16]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	b29b      	uxth	r3, r3
 800374c:	461a      	mov	r2, r3
 800374e:	4613      	mov	r3, r2
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4413      	add	r3, r2
 8003754:	2207      	movs	r2, #7
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43da      	mvns	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	400a      	ands	r2, r1
 8003762:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6919      	ldr	r1, [r3, #16]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	b29b      	uxth	r3, r3
 8003774:	4618      	mov	r0, r3
 8003776:	4603      	mov	r3, r0
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	4403      	add	r3, r0
 800377c:	409a      	lsls	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b06      	cmp	r3, #6
 800378c:	d824      	bhi.n	80037d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	3b05      	subs	r3, #5
 80037a0:	221f      	movs	r2, #31
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43da      	mvns	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	400a      	ands	r2, r1
 80037ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	4618      	mov	r0, r3
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	3b05      	subs	r3, #5
 80037ca:	fa00 f203 	lsl.w	r2, r0, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	635a      	str	r2, [r3, #52]	; 0x34
 80037d6:	e04c      	b.n	8003872 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b0c      	cmp	r3, #12
 80037de:	d824      	bhi.n	800382a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	3b23      	subs	r3, #35	; 0x23
 80037f2:	221f      	movs	r2, #31
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	43da      	mvns	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	400a      	ands	r2, r1
 8003800:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	b29b      	uxth	r3, r3
 800380e:	4618      	mov	r0, r3
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	3b23      	subs	r3, #35	; 0x23
 800381c:	fa00 f203 	lsl.w	r2, r0, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
 8003828:	e023      	b.n	8003872 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	3b41      	subs	r3, #65	; 0x41
 800383c:	221f      	movs	r2, #31
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43da      	mvns	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	400a      	ands	r2, r1
 800384a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	b29b      	uxth	r3, r3
 8003858:	4618      	mov	r0, r3
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	3b41      	subs	r3, #65	; 0x41
 8003866:	fa00 f203 	lsl.w	r2, r0, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003872:	4b22      	ldr	r3, [pc, #136]	; (80038fc <HAL_ADC_ConfigChannel+0x234>)
 8003874:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a21      	ldr	r2, [pc, #132]	; (8003900 <HAL_ADC_ConfigChannel+0x238>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d109      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x1cc>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b12      	cmp	r3, #18
 8003886:	d105      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a19      	ldr	r2, [pc, #100]	; (8003900 <HAL_ADC_ConfigChannel+0x238>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d123      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x21e>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b10      	cmp	r3, #16
 80038a4:	d003      	beq.n	80038ae <HAL_ADC_ConfigChannel+0x1e6>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b11      	cmp	r3, #17
 80038ac:	d11b      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b10      	cmp	r3, #16
 80038c0:	d111      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038c2:	4b10      	ldr	r3, [pc, #64]	; (8003904 <HAL_ADC_ConfigChannel+0x23c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a10      	ldr	r2, [pc, #64]	; (8003908 <HAL_ADC_ConfigChannel+0x240>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	0c9a      	lsrs	r2, r3, #18
 80038ce:	4613      	mov	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038d8:	e002      	b.n	80038e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	3b01      	subs	r3, #1
 80038de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f9      	bne.n	80038da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	40012300 	.word	0x40012300
 8003900:	40012000 	.word	0x40012000
 8003904:	20000000 	.word	0x20000000
 8003908:	431bde83 	.word	0x431bde83

0800390c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003914:	4b79      	ldr	r3, [pc, #484]	; (8003afc <ADC_Init+0x1f0>)
 8003916:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	431a      	orrs	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003940:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6859      	ldr	r1, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	021a      	lsls	r2, r3, #8
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003964:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6859      	ldr	r1, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003986:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6899      	ldr	r1, [r3, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	4a58      	ldr	r2, [pc, #352]	; (8003b00 <ADC_Init+0x1f4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d022      	beq.n	80039ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6899      	ldr	r1, [r3, #8]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6899      	ldr	r1, [r3, #8]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	609a      	str	r2, [r3, #8]
 80039e8:	e00f      	b.n	8003a0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0202 	bic.w	r2, r2, #2
 8003a18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6899      	ldr	r1, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	7e1b      	ldrb	r3, [r3, #24]
 8003a24:	005a      	lsls	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01b      	beq.n	8003a70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6859      	ldr	r1, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	3b01      	subs	r3, #1
 8003a64:	035a      	lsls	r2, r3, #13
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	e007      	b.n	8003a80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	051a      	lsls	r2, r3, #20
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ab4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6899      	ldr	r1, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ac2:	025a      	lsls	r2, r3, #9
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ada:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6899      	ldr	r1, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	029a      	lsls	r2, r3, #10
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	609a      	str	r2, [r3, #8]
}
 8003af0:	bf00      	nop
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	40012300 	.word	0x40012300
 8003b00:	0f000001 	.word	0x0f000001

08003b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <__NVIC_SetPriorityGrouping+0x44>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b20:	4013      	ands	r3, r2
 8003b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b36:	4a04      	ldr	r2, [pc, #16]	; (8003b48 <__NVIC_SetPriorityGrouping+0x44>)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	60d3      	str	r3, [r2, #12]
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	e000ed00 	.word	0xe000ed00

08003b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b50:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <__NVIC_GetPriorityGrouping+0x18>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	0a1b      	lsrs	r3, r3, #8
 8003b56:	f003 0307 	and.w	r3, r3, #7
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	e000ed00 	.word	0xe000ed00

08003b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	db0b      	blt.n	8003b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	f003 021f 	and.w	r2, r3, #31
 8003b80:	4907      	ldr	r1, [pc, #28]	; (8003ba0 <__NVIC_EnableIRQ+0x38>)
 8003b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	2001      	movs	r0, #1
 8003b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	e000e100 	.word	0xe000e100

08003ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	4603      	mov	r3, r0
 8003bac:	6039      	str	r1, [r7, #0]
 8003bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	db0a      	blt.n	8003bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	490c      	ldr	r1, [pc, #48]	; (8003bf0 <__NVIC_SetPriority+0x4c>)
 8003bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc2:	0112      	lsls	r2, r2, #4
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bcc:	e00a      	b.n	8003be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	4908      	ldr	r1, [pc, #32]	; (8003bf4 <__NVIC_SetPriority+0x50>)
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	3b04      	subs	r3, #4
 8003bdc:	0112      	lsls	r2, r2, #4
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	440b      	add	r3, r1
 8003be2:	761a      	strb	r2, [r3, #24]
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	e000e100 	.word	0xe000e100
 8003bf4:	e000ed00 	.word	0xe000ed00

08003bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b089      	sub	sp, #36	; 0x24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f1c3 0307 	rsb	r3, r3, #7
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	bf28      	it	cs
 8003c16:	2304      	movcs	r3, #4
 8003c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	2b06      	cmp	r3, #6
 8003c20:	d902      	bls.n	8003c28 <NVIC_EncodePriority+0x30>
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	3b03      	subs	r3, #3
 8003c26:	e000      	b.n	8003c2a <NVIC_EncodePriority+0x32>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	43da      	mvns	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	401a      	ands	r2, r3
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c40:	f04f 31ff 	mov.w	r1, #4294967295
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4a:	43d9      	mvns	r1, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c50:	4313      	orrs	r3, r2
         );
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3724      	adds	r7, #36	; 0x24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
	...

08003c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c70:	d301      	bcc.n	8003c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c72:	2301      	movs	r3, #1
 8003c74:	e00f      	b.n	8003c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c76:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <SysTick_Config+0x40>)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c7e:	210f      	movs	r1, #15
 8003c80:	f04f 30ff 	mov.w	r0, #4294967295
 8003c84:	f7ff ff8e 	bl	8003ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c88:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <SysTick_Config+0x40>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c8e:	4b04      	ldr	r3, [pc, #16]	; (8003ca0 <SysTick_Config+0x40>)
 8003c90:	2207      	movs	r2, #7
 8003c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	e000e010 	.word	0xe000e010

08003ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff ff29 	bl	8003b04 <__NVIC_SetPriorityGrouping>
}
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b086      	sub	sp, #24
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
 8003cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ccc:	f7ff ff3e 	bl	8003b4c <__NVIC_GetPriorityGrouping>
 8003cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	68b9      	ldr	r1, [r7, #8]
 8003cd6:	6978      	ldr	r0, [r7, #20]
 8003cd8:	f7ff ff8e 	bl	8003bf8 <NVIC_EncodePriority>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff ff5d 	bl	8003ba4 <__NVIC_SetPriority>
}
 8003cea:	bf00      	nop
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff ff31 	bl	8003b68 <__NVIC_EnableIRQ>
}
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff ffa2 	bl	8003c60 <SysTick_Config>
 8003d1c:	4603      	mov	r3, r0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d32:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d34:	f7ff faea 	bl	800330c <HAL_GetTick>
 8003d38:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d008      	beq.n	8003d58 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2280      	movs	r2, #128	; 0x80
 8003d4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e052      	b.n	8003dfe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0216 	bic.w	r2, r2, #22
 8003d66:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695a      	ldr	r2, [r3, #20]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d76:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d103      	bne.n	8003d88 <HAL_DMA_Abort+0x62>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d007      	beq.n	8003d98 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0208 	bic.w	r2, r2, #8
 8003d96:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0201 	bic.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003da8:	e013      	b.n	8003dd2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003daa:	f7ff faaf 	bl	800330c <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b05      	cmp	r3, #5
 8003db6:	d90c      	bls.n	8003dd2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2203      	movs	r2, #3
 8003dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e015      	b.n	8003dfe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e4      	bne.n	8003daa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de4:	223f      	movs	r2, #63	; 0x3f
 8003de6:	409a      	lsls	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d004      	beq.n	8003e24 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2280      	movs	r2, #128	; 0x80
 8003e1e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e00c      	b.n	8003e3e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2205      	movs	r2, #5
 8003e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0201 	bic.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
	...

08003e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b089      	sub	sp, #36	; 0x24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
 8003e66:	e16b      	b.n	8004140 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e68:	2201      	movs	r2, #1
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	f040 815a 	bne.w	800413a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d005      	beq.n	8003e9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d130      	bne.n	8003f00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	43db      	mvns	r3, r3
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	f003 0201 	and.w	r2, r3, #1
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d017      	beq.n	8003f3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	2203      	movs	r2, #3
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4013      	ands	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d123      	bne.n	8003f90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	08da      	lsrs	r2, r3, #3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3208      	adds	r2, #8
 8003f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	220f      	movs	r2, #15
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	08da      	lsrs	r2, r3, #3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3208      	adds	r2, #8
 8003f8a:	69b9      	ldr	r1, [r7, #24]
 8003f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 0203 	and.w	r2, r3, #3
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 80b4 	beq.w	800413a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	4b60      	ldr	r3, [pc, #384]	; (8004158 <HAL_GPIO_Init+0x30c>)
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	4a5f      	ldr	r2, [pc, #380]	; (8004158 <HAL_GPIO_Init+0x30c>)
 8003fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8003fe2:	4b5d      	ldr	r3, [pc, #372]	; (8004158 <HAL_GPIO_Init+0x30c>)
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fee:	4a5b      	ldr	r2, [pc, #364]	; (800415c <HAL_GPIO_Init+0x310>)
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	089b      	lsrs	r3, r3, #2
 8003ff4:	3302      	adds	r3, #2
 8003ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f003 0303 	and.w	r3, r3, #3
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	220f      	movs	r2, #15
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	43db      	mvns	r3, r3
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	4013      	ands	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a52      	ldr	r2, [pc, #328]	; (8004160 <HAL_GPIO_Init+0x314>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d02b      	beq.n	8004072 <HAL_GPIO_Init+0x226>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a51      	ldr	r2, [pc, #324]	; (8004164 <HAL_GPIO_Init+0x318>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d025      	beq.n	800406e <HAL_GPIO_Init+0x222>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a50      	ldr	r2, [pc, #320]	; (8004168 <HAL_GPIO_Init+0x31c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d01f      	beq.n	800406a <HAL_GPIO_Init+0x21e>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a4f      	ldr	r2, [pc, #316]	; (800416c <HAL_GPIO_Init+0x320>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d019      	beq.n	8004066 <HAL_GPIO_Init+0x21a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a4e      	ldr	r2, [pc, #312]	; (8004170 <HAL_GPIO_Init+0x324>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d013      	beq.n	8004062 <HAL_GPIO_Init+0x216>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a4d      	ldr	r2, [pc, #308]	; (8004174 <HAL_GPIO_Init+0x328>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d00d      	beq.n	800405e <HAL_GPIO_Init+0x212>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a4c      	ldr	r2, [pc, #304]	; (8004178 <HAL_GPIO_Init+0x32c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d007      	beq.n	800405a <HAL_GPIO_Init+0x20e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a4b      	ldr	r2, [pc, #300]	; (800417c <HAL_GPIO_Init+0x330>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d101      	bne.n	8004056 <HAL_GPIO_Init+0x20a>
 8004052:	2307      	movs	r3, #7
 8004054:	e00e      	b.n	8004074 <HAL_GPIO_Init+0x228>
 8004056:	2308      	movs	r3, #8
 8004058:	e00c      	b.n	8004074 <HAL_GPIO_Init+0x228>
 800405a:	2306      	movs	r3, #6
 800405c:	e00a      	b.n	8004074 <HAL_GPIO_Init+0x228>
 800405e:	2305      	movs	r3, #5
 8004060:	e008      	b.n	8004074 <HAL_GPIO_Init+0x228>
 8004062:	2304      	movs	r3, #4
 8004064:	e006      	b.n	8004074 <HAL_GPIO_Init+0x228>
 8004066:	2303      	movs	r3, #3
 8004068:	e004      	b.n	8004074 <HAL_GPIO_Init+0x228>
 800406a:	2302      	movs	r3, #2
 800406c:	e002      	b.n	8004074 <HAL_GPIO_Init+0x228>
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <HAL_GPIO_Init+0x228>
 8004072:	2300      	movs	r3, #0
 8004074:	69fa      	ldr	r2, [r7, #28]
 8004076:	f002 0203 	and.w	r2, r2, #3
 800407a:	0092      	lsls	r2, r2, #2
 800407c:	4093      	lsls	r3, r2
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4313      	orrs	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004084:	4935      	ldr	r1, [pc, #212]	; (800415c <HAL_GPIO_Init+0x310>)
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	089b      	lsrs	r3, r3, #2
 800408a:	3302      	adds	r3, #2
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004092:	4b3b      	ldr	r3, [pc, #236]	; (8004180 <HAL_GPIO_Init+0x334>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	43db      	mvns	r3, r3
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	4013      	ands	r3, r2
 80040a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040b6:	4a32      	ldr	r2, [pc, #200]	; (8004180 <HAL_GPIO_Init+0x334>)
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040bc:	4b30      	ldr	r3, [pc, #192]	; (8004180 <HAL_GPIO_Init+0x334>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	43db      	mvns	r3, r3
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	4013      	ands	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	4313      	orrs	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040e0:	4a27      	ldr	r2, [pc, #156]	; (8004180 <HAL_GPIO_Init+0x334>)
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040e6:	4b26      	ldr	r3, [pc, #152]	; (8004180 <HAL_GPIO_Init+0x334>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	43db      	mvns	r3, r3
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	4013      	ands	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800410a:	4a1d      	ldr	r2, [pc, #116]	; (8004180 <HAL_GPIO_Init+0x334>)
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004110:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <HAL_GPIO_Init+0x334>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	43db      	mvns	r3, r3
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4013      	ands	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004134:	4a12      	ldr	r2, [pc, #72]	; (8004180 <HAL_GPIO_Init+0x334>)
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	3301      	adds	r3, #1
 800413e:	61fb      	str	r3, [r7, #28]
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	2b0f      	cmp	r3, #15
 8004144:	f67f ae90 	bls.w	8003e68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004148:	bf00      	nop
 800414a:	bf00      	nop
 800414c:	3724      	adds	r7, #36	; 0x24
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40023800 	.word	0x40023800
 800415c:	40013800 	.word	0x40013800
 8004160:	40020000 	.word	0x40020000
 8004164:	40020400 	.word	0x40020400
 8004168:	40020800 	.word	0x40020800
 800416c:	40020c00 	.word	0x40020c00
 8004170:	40021000 	.word	0x40021000
 8004174:	40021400 	.word	0x40021400
 8004178:	40021800 	.word	0x40021800
 800417c:	40021c00 	.word	0x40021c00
 8004180:	40013c00 	.word	0x40013c00

08004184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	887b      	ldrh	r3, [r7, #2]
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
 80041a0:	e001      	b.n	80041a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041a2:	2300      	movs	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	807b      	strh	r3, [r7, #2]
 80041c0:	4613      	mov	r3, r2
 80041c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041c4:	787b      	ldrb	r3, [r7, #1]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041ca:	887a      	ldrh	r2, [r7, #2]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041d0:	e003      	b.n	80041da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041d2:	887b      	ldrh	r3, [r7, #2]
 80041d4:	041a      	lsls	r2, r3, #16
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	619a      	str	r2, [r3, #24]
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
	...

080041e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80041f2:	4b08      	ldr	r3, [pc, #32]	; (8004214 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041f4:	695a      	ldr	r2, [r3, #20]
 80041f6:	88fb      	ldrh	r3, [r7, #6]
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d006      	beq.n	800420c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041fe:	4a05      	ldr	r2, [pc, #20]	; (8004214 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004200:	88fb      	ldrh	r3, [r7, #6]
 8004202:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004204:	88fb      	ldrh	r3, [r7, #6]
 8004206:	4618      	mov	r0, r3
 8004208:	f7fd fa2c 	bl	8001664 <HAL_GPIO_EXTI_Callback>
  }
}
 800420c:	bf00      	nop
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40013c00 	.word	0x40013c00

08004218 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e264      	b.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d075      	beq.n	8004322 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004236:	4ba3      	ldr	r3, [pc, #652]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
 800423e:	2b04      	cmp	r3, #4
 8004240:	d00c      	beq.n	800425c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004242:	4ba0      	ldr	r3, [pc, #640]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800424a:	2b08      	cmp	r3, #8
 800424c:	d112      	bne.n	8004274 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800424e:	4b9d      	ldr	r3, [pc, #628]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800425a:	d10b      	bne.n	8004274 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800425c:	4b99      	ldr	r3, [pc, #612]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d05b      	beq.n	8004320 <HAL_RCC_OscConfig+0x108>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d157      	bne.n	8004320 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e23f      	b.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800427c:	d106      	bne.n	800428c <HAL_RCC_OscConfig+0x74>
 800427e:	4b91      	ldr	r3, [pc, #580]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a90      	ldr	r2, [pc, #576]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 8004284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	e01d      	b.n	80042c8 <HAL_RCC_OscConfig+0xb0>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004294:	d10c      	bne.n	80042b0 <HAL_RCC_OscConfig+0x98>
 8004296:	4b8b      	ldr	r3, [pc, #556]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a8a      	ldr	r2, [pc, #552]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 800429c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	4b88      	ldr	r3, [pc, #544]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a87      	ldr	r2, [pc, #540]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 80042a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	e00b      	b.n	80042c8 <HAL_RCC_OscConfig+0xb0>
 80042b0:	4b84      	ldr	r3, [pc, #528]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a83      	ldr	r2, [pc, #524]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 80042b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ba:	6013      	str	r3, [r2, #0]
 80042bc:	4b81      	ldr	r3, [pc, #516]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a80      	ldr	r2, [pc, #512]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 80042c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d013      	beq.n	80042f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d0:	f7ff f81c 	bl	800330c <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042d8:	f7ff f818 	bl	800330c <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b64      	cmp	r3, #100	; 0x64
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e204      	b.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ea:	4b76      	ldr	r3, [pc, #472]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f0      	beq.n	80042d8 <HAL_RCC_OscConfig+0xc0>
 80042f6:	e014      	b.n	8004322 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f8:	f7ff f808 	bl	800330c <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004300:	f7ff f804 	bl	800330c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b64      	cmp	r3, #100	; 0x64
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e1f0      	b.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004312:	4b6c      	ldr	r3, [pc, #432]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f0      	bne.n	8004300 <HAL_RCC_OscConfig+0xe8>
 800431e:	e000      	b.n	8004322 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d063      	beq.n	80043f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800432e:	4b65      	ldr	r3, [pc, #404]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 030c 	and.w	r3, r3, #12
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00b      	beq.n	8004352 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800433a:	4b62      	ldr	r3, [pc, #392]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004342:	2b08      	cmp	r3, #8
 8004344:	d11c      	bne.n	8004380 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004346:	4b5f      	ldr	r3, [pc, #380]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d116      	bne.n	8004380 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004352:	4b5c      	ldr	r3, [pc, #368]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <HAL_RCC_OscConfig+0x152>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d001      	beq.n	800436a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e1c4      	b.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436a:	4b56      	ldr	r3, [pc, #344]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	4952      	ldr	r1, [pc, #328]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 800437a:	4313      	orrs	r3, r2
 800437c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800437e:	e03a      	b.n	80043f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d020      	beq.n	80043ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004388:	4b4f      	ldr	r3, [pc, #316]	; (80044c8 <HAL_RCC_OscConfig+0x2b0>)
 800438a:	2201      	movs	r2, #1
 800438c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438e:	f7fe ffbd 	bl	800330c <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004396:	f7fe ffb9 	bl	800330c <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e1a5      	b.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a8:	4b46      	ldr	r3, [pc, #280]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0f0      	beq.n	8004396 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b4:	4b43      	ldr	r3, [pc, #268]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	4940      	ldr	r1, [pc, #256]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	600b      	str	r3, [r1, #0]
 80043c8:	e015      	b.n	80043f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ca:	4b3f      	ldr	r3, [pc, #252]	; (80044c8 <HAL_RCC_OscConfig+0x2b0>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d0:	f7fe ff9c 	bl	800330c <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043d8:	f7fe ff98 	bl	800330c <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e184      	b.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ea:	4b36      	ldr	r3, [pc, #216]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f0      	bne.n	80043d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d030      	beq.n	8004464 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d016      	beq.n	8004438 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800440a:	4b30      	ldr	r3, [pc, #192]	; (80044cc <HAL_RCC_OscConfig+0x2b4>)
 800440c:	2201      	movs	r2, #1
 800440e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004410:	f7fe ff7c 	bl	800330c <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004418:	f7fe ff78 	bl	800330c <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e164      	b.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800442a:	4b26      	ldr	r3, [pc, #152]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 800442c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0x200>
 8004436:	e015      	b.n	8004464 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004438:	4b24      	ldr	r3, [pc, #144]	; (80044cc <HAL_RCC_OscConfig+0x2b4>)
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800443e:	f7fe ff65 	bl	800330c <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004446:	f7fe ff61 	bl	800330c <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e14d      	b.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004458:	4b1a      	ldr	r3, [pc, #104]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 800445a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1f0      	bne.n	8004446 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80a0 	beq.w	80045b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004472:	2300      	movs	r3, #0
 8004474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004476:	4b13      	ldr	r3, [pc, #76]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10f      	bne.n	80044a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	4a0e      	ldr	r2, [pc, #56]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 800448c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004490:	6413      	str	r3, [r2, #64]	; 0x40
 8004492:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <HAL_RCC_OscConfig+0x2ac>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449a:	60bb      	str	r3, [r7, #8]
 800449c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449e:	2301      	movs	r3, #1
 80044a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a2:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <HAL_RCC_OscConfig+0x2b8>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d121      	bne.n	80044f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ae:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <HAL_RCC_OscConfig+0x2b8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a07      	ldr	r2, [pc, #28]	; (80044d0 <HAL_RCC_OscConfig+0x2b8>)
 80044b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ba:	f7fe ff27 	bl	800330c <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c0:	e011      	b.n	80044e6 <HAL_RCC_OscConfig+0x2ce>
 80044c2:	bf00      	nop
 80044c4:	40023800 	.word	0x40023800
 80044c8:	42470000 	.word	0x42470000
 80044cc:	42470e80 	.word	0x42470e80
 80044d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d4:	f7fe ff1a 	bl	800330c <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e106      	b.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e6:	4b85      	ldr	r3, [pc, #532]	; (80046fc <HAL_RCC_OscConfig+0x4e4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0f0      	beq.n	80044d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d106      	bne.n	8004508 <HAL_RCC_OscConfig+0x2f0>
 80044fa:	4b81      	ldr	r3, [pc, #516]	; (8004700 <HAL_RCC_OscConfig+0x4e8>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fe:	4a80      	ldr	r2, [pc, #512]	; (8004700 <HAL_RCC_OscConfig+0x4e8>)
 8004500:	f043 0301 	orr.w	r3, r3, #1
 8004504:	6713      	str	r3, [r2, #112]	; 0x70
 8004506:	e01c      	b.n	8004542 <HAL_RCC_OscConfig+0x32a>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b05      	cmp	r3, #5
 800450e:	d10c      	bne.n	800452a <HAL_RCC_OscConfig+0x312>
 8004510:	4b7b      	ldr	r3, [pc, #492]	; (8004700 <HAL_RCC_OscConfig+0x4e8>)
 8004512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004514:	4a7a      	ldr	r2, [pc, #488]	; (8004700 <HAL_RCC_OscConfig+0x4e8>)
 8004516:	f043 0304 	orr.w	r3, r3, #4
 800451a:	6713      	str	r3, [r2, #112]	; 0x70
 800451c:	4b78      	ldr	r3, [pc, #480]	; (8004700 <HAL_RCC_OscConfig+0x4e8>)
 800451e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004520:	4a77      	ldr	r2, [pc, #476]	; (8004700 <HAL_RCC_OscConfig+0x4e8>)
 8004522:	f043 0301 	orr.w	r3, r3, #1
 8004526:	6713      	str	r3, [r2, #112]	; 0x70
 8004528:	e00b      	b.n	8004542 <HAL_RCC_OscConfig+0x32a>
 800452a:	4b75      	ldr	r3, [pc, #468]	; (8004700 <HAL_RCC_OscConfig+0x4e8>)
 800452c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452e:	4a74      	ldr	r2, [pc, #464]	; (8004700 <HAL_RCC_OscConfig+0x4e8>)
 8004530:	f023 0301 	bic.w	r3, r3, #1
 8004534:	6713      	str	r3, [r2, #112]	; 0x70
 8004536:	4b72      	ldr	r3, [pc, #456]	; (8004700 <HAL_RCC_OscConfig+0x4e8>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	4a71      	ldr	r2, [pc, #452]	; (8004700 <HAL_RCC_OscConfig+0x4e8>)
 800453c:	f023 0304 	bic.w	r3, r3, #4
 8004540:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d015      	beq.n	8004576 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454a:	f7fe fedf 	bl	800330c <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004550:	e00a      	b.n	8004568 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004552:	f7fe fedb 	bl	800330c <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004560:	4293      	cmp	r3, r2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e0c5      	b.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004568:	4b65      	ldr	r3, [pc, #404]	; (8004700 <HAL_RCC_OscConfig+0x4e8>)
 800456a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0ee      	beq.n	8004552 <HAL_RCC_OscConfig+0x33a>
 8004574:	e014      	b.n	80045a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004576:	f7fe fec9 	bl	800330c <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800457c:	e00a      	b.n	8004594 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800457e:	f7fe fec5 	bl	800330c <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	f241 3288 	movw	r2, #5000	; 0x1388
 800458c:	4293      	cmp	r3, r2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e0af      	b.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004594:	4b5a      	ldr	r3, [pc, #360]	; (8004700 <HAL_RCC_OscConfig+0x4e8>)
 8004596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1ee      	bne.n	800457e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045a0:	7dfb      	ldrb	r3, [r7, #23]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d105      	bne.n	80045b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a6:	4b56      	ldr	r3, [pc, #344]	; (8004700 <HAL_RCC_OscConfig+0x4e8>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	4a55      	ldr	r2, [pc, #340]	; (8004700 <HAL_RCC_OscConfig+0x4e8>)
 80045ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 809b 	beq.w	80046f2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045bc:	4b50      	ldr	r3, [pc, #320]	; (8004700 <HAL_RCC_OscConfig+0x4e8>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 030c 	and.w	r3, r3, #12
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d05c      	beq.n	8004682 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d141      	bne.n	8004654 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d0:	4b4c      	ldr	r3, [pc, #304]	; (8004704 <HAL_RCC_OscConfig+0x4ec>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d6:	f7fe fe99 	bl	800330c <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045de:	f7fe fe95 	bl	800330c <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e081      	b.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f0:	4b43      	ldr	r3, [pc, #268]	; (8004700 <HAL_RCC_OscConfig+0x4e8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1f0      	bne.n	80045de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69da      	ldr	r2, [r3, #28]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	019b      	lsls	r3, r3, #6
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004612:	085b      	lsrs	r3, r3, #1
 8004614:	3b01      	subs	r3, #1
 8004616:	041b      	lsls	r3, r3, #16
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461e:	061b      	lsls	r3, r3, #24
 8004620:	4937      	ldr	r1, [pc, #220]	; (8004700 <HAL_RCC_OscConfig+0x4e8>)
 8004622:	4313      	orrs	r3, r2
 8004624:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004626:	4b37      	ldr	r3, [pc, #220]	; (8004704 <HAL_RCC_OscConfig+0x4ec>)
 8004628:	2201      	movs	r2, #1
 800462a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462c:	f7fe fe6e 	bl	800330c <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004634:	f7fe fe6a 	bl	800330c <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e056      	b.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004646:	4b2e      	ldr	r3, [pc, #184]	; (8004700 <HAL_RCC_OscConfig+0x4e8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0x41c>
 8004652:	e04e      	b.n	80046f2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004654:	4b2b      	ldr	r3, [pc, #172]	; (8004704 <HAL_RCC_OscConfig+0x4ec>)
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465a:	f7fe fe57 	bl	800330c <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004662:	f7fe fe53 	bl	800330c <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e03f      	b.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004674:	4b22      	ldr	r3, [pc, #136]	; (8004700 <HAL_RCC_OscConfig+0x4e8>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1f0      	bne.n	8004662 <HAL_RCC_OscConfig+0x44a>
 8004680:	e037      	b.n	80046f2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e032      	b.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800468e:	4b1c      	ldr	r3, [pc, #112]	; (8004700 <HAL_RCC_OscConfig+0x4e8>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d028      	beq.n	80046ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d121      	bne.n	80046ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d11a      	bne.n	80046ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046be:	4013      	ands	r3, r2
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046c4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d111      	bne.n	80046ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d4:	085b      	lsrs	r3, r3, #1
 80046d6:	3b01      	subs	r3, #1
 80046d8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046da:	429a      	cmp	r2, r3
 80046dc:	d107      	bne.n	80046ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d001      	beq.n	80046f2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40007000 	.word	0x40007000
 8004700:	40023800 	.word	0x40023800
 8004704:	42470060 	.word	0x42470060

08004708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e0cc      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800471c:	4b68      	ldr	r3, [pc, #416]	; (80048c0 <HAL_RCC_ClockConfig+0x1b8>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d90c      	bls.n	8004744 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800472a:	4b65      	ldr	r3, [pc, #404]	; (80048c0 <HAL_RCC_ClockConfig+0x1b8>)
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004732:	4b63      	ldr	r3, [pc, #396]	; (80048c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	429a      	cmp	r2, r3
 800473e:	d001      	beq.n	8004744 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0b8      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d020      	beq.n	8004792 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800475c:	4b59      	ldr	r3, [pc, #356]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	4a58      	ldr	r2, [pc, #352]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004766:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004774:	4b53      	ldr	r3, [pc, #332]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	4a52      	ldr	r2, [pc, #328]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800477e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004780:	4b50      	ldr	r3, [pc, #320]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	494d      	ldr	r1, [pc, #308]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	4313      	orrs	r3, r2
 8004790:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d044      	beq.n	8004828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d107      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a6:	4b47      	ldr	r3, [pc, #284]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d119      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e07f      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d003      	beq.n	80047c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	d107      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c6:	4b3f      	ldr	r3, [pc, #252]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d109      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e06f      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d6:	4b3b      	ldr	r3, [pc, #236]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e067      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047e6:	4b37      	ldr	r3, [pc, #220]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f023 0203 	bic.w	r2, r3, #3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	4934      	ldr	r1, [pc, #208]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047f8:	f7fe fd88 	bl	800330c <HAL_GetTick>
 80047fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fe:	e00a      	b.n	8004816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004800:	f7fe fd84 	bl	800330c <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	f241 3288 	movw	r2, #5000	; 0x1388
 800480e:	4293      	cmp	r3, r2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e04f      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004816:	4b2b      	ldr	r3, [pc, #172]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 020c 	and.w	r2, r3, #12
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	429a      	cmp	r2, r3
 8004826:	d1eb      	bne.n	8004800 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004828:	4b25      	ldr	r3, [pc, #148]	; (80048c0 <HAL_RCC_ClockConfig+0x1b8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d20c      	bcs.n	8004850 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004836:	4b22      	ldr	r3, [pc, #136]	; (80048c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800483e:	4b20      	ldr	r3, [pc, #128]	; (80048c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d001      	beq.n	8004850 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e032      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d008      	beq.n	800486e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800485c:	4b19      	ldr	r3, [pc, #100]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4916      	ldr	r1, [pc, #88]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	4313      	orrs	r3, r2
 800486c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800487a:	4b12      	ldr	r3, [pc, #72]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	490e      	ldr	r1, [pc, #56]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	4313      	orrs	r3, r2
 800488c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800488e:	f000 f821 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 8004892:	4602      	mov	r2, r0
 8004894:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	091b      	lsrs	r3, r3, #4
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	490a      	ldr	r1, [pc, #40]	; (80048c8 <HAL_RCC_ClockConfig+0x1c0>)
 80048a0:	5ccb      	ldrb	r3, [r1, r3]
 80048a2:	fa22 f303 	lsr.w	r3, r2, r3
 80048a6:	4a09      	ldr	r2, [pc, #36]	; (80048cc <HAL_RCC_ClockConfig+0x1c4>)
 80048a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048aa:	4b09      	ldr	r3, [pc, #36]	; (80048d0 <HAL_RCC_ClockConfig+0x1c8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fe fce8 	bl	8003284 <HAL_InitTick>

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	40023c00 	.word	0x40023c00
 80048c4:	40023800 	.word	0x40023800
 80048c8:	08007990 	.word	0x08007990
 80048cc:	20000000 	.word	0x20000000
 80048d0:	20000004 	.word	0x20000004

080048d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80048d8:	b084      	sub	sp, #16
 80048da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	607b      	str	r3, [r7, #4]
 80048e0:	2300      	movs	r3, #0
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	2300      	movs	r3, #0
 80048e6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048ec:	4b67      	ldr	r3, [pc, #412]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 030c 	and.w	r3, r3, #12
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d00d      	beq.n	8004914 <HAL_RCC_GetSysClockFreq+0x40>
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	f200 80bd 	bhi.w	8004a78 <HAL_RCC_GetSysClockFreq+0x1a4>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <HAL_RCC_GetSysClockFreq+0x34>
 8004902:	2b04      	cmp	r3, #4
 8004904:	d003      	beq.n	800490e <HAL_RCC_GetSysClockFreq+0x3a>
 8004906:	e0b7      	b.n	8004a78 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004908:	4b61      	ldr	r3, [pc, #388]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800490a:	60bb      	str	r3, [r7, #8]
       break;
 800490c:	e0b7      	b.n	8004a7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800490e:	4b61      	ldr	r3, [pc, #388]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004910:	60bb      	str	r3, [r7, #8]
      break;
 8004912:	e0b4      	b.n	8004a7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004914:	4b5d      	ldr	r3, [pc, #372]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800491c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800491e:	4b5b      	ldr	r3, [pc, #364]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d04d      	beq.n	80049c6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800492a:	4b58      	ldr	r3, [pc, #352]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	099b      	lsrs	r3, r3, #6
 8004930:	461a      	mov	r2, r3
 8004932:	f04f 0300 	mov.w	r3, #0
 8004936:	f240 10ff 	movw	r0, #511	; 0x1ff
 800493a:	f04f 0100 	mov.w	r1, #0
 800493e:	ea02 0800 	and.w	r8, r2, r0
 8004942:	ea03 0901 	and.w	r9, r3, r1
 8004946:	4640      	mov	r0, r8
 8004948:	4649      	mov	r1, r9
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	014b      	lsls	r3, r1, #5
 8004954:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004958:	0142      	lsls	r2, r0, #5
 800495a:	4610      	mov	r0, r2
 800495c:	4619      	mov	r1, r3
 800495e:	ebb0 0008 	subs.w	r0, r0, r8
 8004962:	eb61 0109 	sbc.w	r1, r1, r9
 8004966:	f04f 0200 	mov.w	r2, #0
 800496a:	f04f 0300 	mov.w	r3, #0
 800496e:	018b      	lsls	r3, r1, #6
 8004970:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004974:	0182      	lsls	r2, r0, #6
 8004976:	1a12      	subs	r2, r2, r0
 8004978:	eb63 0301 	sbc.w	r3, r3, r1
 800497c:	f04f 0000 	mov.w	r0, #0
 8004980:	f04f 0100 	mov.w	r1, #0
 8004984:	00d9      	lsls	r1, r3, #3
 8004986:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800498a:	00d0      	lsls	r0, r2, #3
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	eb12 0208 	adds.w	r2, r2, r8
 8004994:	eb43 0309 	adc.w	r3, r3, r9
 8004998:	f04f 0000 	mov.w	r0, #0
 800499c:	f04f 0100 	mov.w	r1, #0
 80049a0:	0259      	lsls	r1, r3, #9
 80049a2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80049a6:	0250      	lsls	r0, r2, #9
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4610      	mov	r0, r2
 80049ae:	4619      	mov	r1, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	461a      	mov	r2, r3
 80049b4:	f04f 0300 	mov.w	r3, #0
 80049b8:	f7fb fc62 	bl	8000280 <__aeabi_uldivmod>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4613      	mov	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	e04a      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049c6:	4b31      	ldr	r3, [pc, #196]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	099b      	lsrs	r3, r3, #6
 80049cc:	461a      	mov	r2, r3
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049d6:	f04f 0100 	mov.w	r1, #0
 80049da:	ea02 0400 	and.w	r4, r2, r0
 80049de:	ea03 0501 	and.w	r5, r3, r1
 80049e2:	4620      	mov	r0, r4
 80049e4:	4629      	mov	r1, r5
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	014b      	lsls	r3, r1, #5
 80049f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049f4:	0142      	lsls	r2, r0, #5
 80049f6:	4610      	mov	r0, r2
 80049f8:	4619      	mov	r1, r3
 80049fa:	1b00      	subs	r0, r0, r4
 80049fc:	eb61 0105 	sbc.w	r1, r1, r5
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	018b      	lsls	r3, r1, #6
 8004a0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a0e:	0182      	lsls	r2, r0, #6
 8004a10:	1a12      	subs	r2, r2, r0
 8004a12:	eb63 0301 	sbc.w	r3, r3, r1
 8004a16:	f04f 0000 	mov.w	r0, #0
 8004a1a:	f04f 0100 	mov.w	r1, #0
 8004a1e:	00d9      	lsls	r1, r3, #3
 8004a20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a24:	00d0      	lsls	r0, r2, #3
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	1912      	adds	r2, r2, r4
 8004a2c:	eb45 0303 	adc.w	r3, r5, r3
 8004a30:	f04f 0000 	mov.w	r0, #0
 8004a34:	f04f 0100 	mov.w	r1, #0
 8004a38:	0299      	lsls	r1, r3, #10
 8004a3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a3e:	0290      	lsls	r0, r2, #10
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4610      	mov	r0, r2
 8004a46:	4619      	mov	r1, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	f7fb fc16 	bl	8000280 <__aeabi_uldivmod>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4613      	mov	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a5c:	4b0b      	ldr	r3, [pc, #44]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	0c1b      	lsrs	r3, r3, #16
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	3301      	adds	r3, #1
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a74:	60bb      	str	r3, [r7, #8]
      break;
 8004a76:	e002      	b.n	8004a7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a78:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a7a:	60bb      	str	r3, [r7, #8]
      break;
 8004a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a7e:	68bb      	ldr	r3, [r7, #8]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40023800 	.word	0x40023800
 8004a90:	00f42400 	.word	0x00f42400
 8004a94:	007a1200 	.word	0x007a1200

08004a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a9c:	4b03      	ldr	r3, [pc, #12]	; (8004aac <HAL_RCC_GetHCLKFreq+0x14>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	20000000 	.word	0x20000000

08004ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ab4:	f7ff fff0 	bl	8004a98 <HAL_RCC_GetHCLKFreq>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	0a9b      	lsrs	r3, r3, #10
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	4903      	ldr	r1, [pc, #12]	; (8004ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ac6:	5ccb      	ldrb	r3, [r1, r3]
 8004ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	080079a0 	.word	0x080079a0

08004ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004adc:	f7ff ffdc 	bl	8004a98 <HAL_RCC_GetHCLKFreq>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	0b5b      	lsrs	r3, r3, #13
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	4903      	ldr	r1, [pc, #12]	; (8004afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aee:	5ccb      	ldrb	r3, [r1, r3]
 8004af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40023800 	.word	0x40023800
 8004afc:	080079a0 	.word	0x080079a0

08004b00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e041      	b.n	8004b96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fe f802 	bl	8002b30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4610      	mov	r0, r2
 8004b40:	f000 fb42 	bl	80051c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
	...

08004ba0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d001      	beq.n	8004bb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e046      	b.n	8004c46 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a23      	ldr	r2, [pc, #140]	; (8004c54 <HAL_TIM_Base_Start+0xb4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d022      	beq.n	8004c10 <HAL_TIM_Base_Start+0x70>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd2:	d01d      	beq.n	8004c10 <HAL_TIM_Base_Start+0x70>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a1f      	ldr	r2, [pc, #124]	; (8004c58 <HAL_TIM_Base_Start+0xb8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d018      	beq.n	8004c10 <HAL_TIM_Base_Start+0x70>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a1e      	ldr	r2, [pc, #120]	; (8004c5c <HAL_TIM_Base_Start+0xbc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d013      	beq.n	8004c10 <HAL_TIM_Base_Start+0x70>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a1c      	ldr	r2, [pc, #112]	; (8004c60 <HAL_TIM_Base_Start+0xc0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00e      	beq.n	8004c10 <HAL_TIM_Base_Start+0x70>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a1b      	ldr	r2, [pc, #108]	; (8004c64 <HAL_TIM_Base_Start+0xc4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d009      	beq.n	8004c10 <HAL_TIM_Base_Start+0x70>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a19      	ldr	r2, [pc, #100]	; (8004c68 <HAL_TIM_Base_Start+0xc8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d004      	beq.n	8004c10 <HAL_TIM_Base_Start+0x70>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a18      	ldr	r2, [pc, #96]	; (8004c6c <HAL_TIM_Base_Start+0xcc>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d111      	bne.n	8004c34 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b06      	cmp	r3, #6
 8004c20:	d010      	beq.n	8004c44 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f042 0201 	orr.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c32:	e007      	b.n	8004c44 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0201 	orr.w	r2, r2, #1
 8004c42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40010000 	.word	0x40010000
 8004c58:	40000400 	.word	0x40000400
 8004c5c:	40000800 	.word	0x40000800
 8004c60:	40000c00 	.word	0x40000c00
 8004c64:	40010400 	.word	0x40010400
 8004c68:	40014000 	.word	0x40014000
 8004c6c:	40001800 	.word	0x40001800

08004c70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e041      	b.n	8004d06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f839 	bl	8004d0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3304      	adds	r3, #4
 8004cac:	4619      	mov	r1, r3
 8004cae:	4610      	mov	r0, r2
 8004cb0:	f000 fa8a 	bl	80051c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
	...

08004d24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d109      	bne.n	8004d48 <HAL_TIM_PWM_Start+0x24>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	bf14      	ite	ne
 8004d40:	2301      	movne	r3, #1
 8004d42:	2300      	moveq	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	e022      	b.n	8004d8e <HAL_TIM_PWM_Start+0x6a>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d109      	bne.n	8004d62 <HAL_TIM_PWM_Start+0x3e>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	bf14      	ite	ne
 8004d5a:	2301      	movne	r3, #1
 8004d5c:	2300      	moveq	r3, #0
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	e015      	b.n	8004d8e <HAL_TIM_PWM_Start+0x6a>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d109      	bne.n	8004d7c <HAL_TIM_PWM_Start+0x58>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	bf14      	ite	ne
 8004d74:	2301      	movne	r3, #1
 8004d76:	2300      	moveq	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	e008      	b.n	8004d8e <HAL_TIM_PWM_Start+0x6a>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	bf14      	ite	ne
 8004d88:	2301      	movne	r3, #1
 8004d8a:	2300      	moveq	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e07c      	b.n	8004e90 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d104      	bne.n	8004da6 <HAL_TIM_PWM_Start+0x82>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004da4:	e013      	b.n	8004dce <HAL_TIM_PWM_Start+0xaa>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d104      	bne.n	8004db6 <HAL_TIM_PWM_Start+0x92>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004db4:	e00b      	b.n	8004dce <HAL_TIM_PWM_Start+0xaa>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d104      	bne.n	8004dc6 <HAL_TIM_PWM_Start+0xa2>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dc4:	e003      	b.n	8004dce <HAL_TIM_PWM_Start+0xaa>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2202      	movs	r2, #2
 8004dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	6839      	ldr	r1, [r7, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fce0 	bl	800579c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a2d      	ldr	r2, [pc, #180]	; (8004e98 <HAL_TIM_PWM_Start+0x174>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d004      	beq.n	8004df0 <HAL_TIM_PWM_Start+0xcc>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a2c      	ldr	r2, [pc, #176]	; (8004e9c <HAL_TIM_PWM_Start+0x178>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d101      	bne.n	8004df4 <HAL_TIM_PWM_Start+0xd0>
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <HAL_TIM_PWM_Start+0xd2>
 8004df4:	2300      	movs	r3, #0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d007      	beq.n	8004e0a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a22      	ldr	r2, [pc, #136]	; (8004e98 <HAL_TIM_PWM_Start+0x174>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d022      	beq.n	8004e5a <HAL_TIM_PWM_Start+0x136>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1c:	d01d      	beq.n	8004e5a <HAL_TIM_PWM_Start+0x136>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a1f      	ldr	r2, [pc, #124]	; (8004ea0 <HAL_TIM_PWM_Start+0x17c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d018      	beq.n	8004e5a <HAL_TIM_PWM_Start+0x136>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a1d      	ldr	r2, [pc, #116]	; (8004ea4 <HAL_TIM_PWM_Start+0x180>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d013      	beq.n	8004e5a <HAL_TIM_PWM_Start+0x136>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a1c      	ldr	r2, [pc, #112]	; (8004ea8 <HAL_TIM_PWM_Start+0x184>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d00e      	beq.n	8004e5a <HAL_TIM_PWM_Start+0x136>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a16      	ldr	r2, [pc, #88]	; (8004e9c <HAL_TIM_PWM_Start+0x178>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d009      	beq.n	8004e5a <HAL_TIM_PWM_Start+0x136>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a18      	ldr	r2, [pc, #96]	; (8004eac <HAL_TIM_PWM_Start+0x188>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d004      	beq.n	8004e5a <HAL_TIM_PWM_Start+0x136>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a16      	ldr	r2, [pc, #88]	; (8004eb0 <HAL_TIM_PWM_Start+0x18c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d111      	bne.n	8004e7e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2b06      	cmp	r3, #6
 8004e6a:	d010      	beq.n	8004e8e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0201 	orr.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7c:	e007      	b.n	8004e8e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f042 0201 	orr.w	r2, r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40010000 	.word	0x40010000
 8004e9c:	40010400 	.word	0x40010400
 8004ea0:	40000400 	.word	0x40000400
 8004ea4:	40000800 	.word	0x40000800
 8004ea8:	40000c00 	.word	0x40000c00
 8004eac:	40014000 	.word	0x40014000
 8004eb0:	40001800 	.word	0x40001800

08004eb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e0ae      	b.n	8005030 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b0c      	cmp	r3, #12
 8004ede:	f200 809f 	bhi.w	8005020 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ee2:	a201      	add	r2, pc, #4	; (adr r2, 8004ee8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee8:	08004f1d 	.word	0x08004f1d
 8004eec:	08005021 	.word	0x08005021
 8004ef0:	08005021 	.word	0x08005021
 8004ef4:	08005021 	.word	0x08005021
 8004ef8:	08004f5d 	.word	0x08004f5d
 8004efc:	08005021 	.word	0x08005021
 8004f00:	08005021 	.word	0x08005021
 8004f04:	08005021 	.word	0x08005021
 8004f08:	08004f9f 	.word	0x08004f9f
 8004f0c:	08005021 	.word	0x08005021
 8004f10:	08005021 	.word	0x08005021
 8004f14:	08005021 	.word	0x08005021
 8004f18:	08004fdf 	.word	0x08004fdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68b9      	ldr	r1, [r7, #8]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 f9f0 	bl	8005308 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699a      	ldr	r2, [r3, #24]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0208 	orr.w	r2, r2, #8
 8004f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699a      	ldr	r2, [r3, #24]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0204 	bic.w	r2, r2, #4
 8004f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6999      	ldr	r1, [r3, #24]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	691a      	ldr	r2, [r3, #16]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	619a      	str	r2, [r3, #24]
      break;
 8004f5a:	e064      	b.n	8005026 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68b9      	ldr	r1, [r7, #8]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fa40 	bl	80053e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699a      	ldr	r2, [r3, #24]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6999      	ldr	r1, [r3, #24]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	021a      	lsls	r2, r3, #8
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	619a      	str	r2, [r3, #24]
      break;
 8004f9c:	e043      	b.n	8005026 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 fa95 	bl	80054d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69da      	ldr	r2, [r3, #28]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f042 0208 	orr.w	r2, r2, #8
 8004fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69da      	ldr	r2, [r3, #28]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 0204 	bic.w	r2, r2, #4
 8004fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69d9      	ldr	r1, [r3, #28]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	691a      	ldr	r2, [r3, #16]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	61da      	str	r2, [r3, #28]
      break;
 8004fdc:	e023      	b.n	8005026 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68b9      	ldr	r1, [r7, #8]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fae9 	bl	80055bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69da      	ldr	r2, [r3, #28]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69da      	ldr	r2, [r3, #28]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69d9      	ldr	r1, [r3, #28]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	021a      	lsls	r2, r3, #8
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	61da      	str	r2, [r3, #28]
      break;
 800501e:	e002      	b.n	8005026 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	75fb      	strb	r3, [r7, #23]
      break;
 8005024:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800502e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800504c:	2b01      	cmp	r3, #1
 800504e:	d101      	bne.n	8005054 <HAL_TIM_ConfigClockSource+0x1c>
 8005050:	2302      	movs	r3, #2
 8005052:	e0b4      	b.n	80051be <HAL_TIM_ConfigClockSource+0x186>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005072:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800507a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800508c:	d03e      	beq.n	800510c <HAL_TIM_ConfigClockSource+0xd4>
 800508e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005092:	f200 8087 	bhi.w	80051a4 <HAL_TIM_ConfigClockSource+0x16c>
 8005096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800509a:	f000 8086 	beq.w	80051aa <HAL_TIM_ConfigClockSource+0x172>
 800509e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a2:	d87f      	bhi.n	80051a4 <HAL_TIM_ConfigClockSource+0x16c>
 80050a4:	2b70      	cmp	r3, #112	; 0x70
 80050a6:	d01a      	beq.n	80050de <HAL_TIM_ConfigClockSource+0xa6>
 80050a8:	2b70      	cmp	r3, #112	; 0x70
 80050aa:	d87b      	bhi.n	80051a4 <HAL_TIM_ConfigClockSource+0x16c>
 80050ac:	2b60      	cmp	r3, #96	; 0x60
 80050ae:	d050      	beq.n	8005152 <HAL_TIM_ConfigClockSource+0x11a>
 80050b0:	2b60      	cmp	r3, #96	; 0x60
 80050b2:	d877      	bhi.n	80051a4 <HAL_TIM_ConfigClockSource+0x16c>
 80050b4:	2b50      	cmp	r3, #80	; 0x50
 80050b6:	d03c      	beq.n	8005132 <HAL_TIM_ConfigClockSource+0xfa>
 80050b8:	2b50      	cmp	r3, #80	; 0x50
 80050ba:	d873      	bhi.n	80051a4 <HAL_TIM_ConfigClockSource+0x16c>
 80050bc:	2b40      	cmp	r3, #64	; 0x40
 80050be:	d058      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0x13a>
 80050c0:	2b40      	cmp	r3, #64	; 0x40
 80050c2:	d86f      	bhi.n	80051a4 <HAL_TIM_ConfigClockSource+0x16c>
 80050c4:	2b30      	cmp	r3, #48	; 0x30
 80050c6:	d064      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0x15a>
 80050c8:	2b30      	cmp	r3, #48	; 0x30
 80050ca:	d86b      	bhi.n	80051a4 <HAL_TIM_ConfigClockSource+0x16c>
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	d060      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0x15a>
 80050d0:	2b20      	cmp	r3, #32
 80050d2:	d867      	bhi.n	80051a4 <HAL_TIM_ConfigClockSource+0x16c>
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d05c      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0x15a>
 80050d8:	2b10      	cmp	r3, #16
 80050da:	d05a      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0x15a>
 80050dc:	e062      	b.n	80051a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	6899      	ldr	r1, [r3, #8]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f000 fb35 	bl	800575c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005100:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	609a      	str	r2, [r3, #8]
      break;
 800510a:	e04f      	b.n	80051ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6818      	ldr	r0, [r3, #0]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	6899      	ldr	r1, [r3, #8]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f000 fb1e 	bl	800575c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800512e:	609a      	str	r2, [r3, #8]
      break;
 8005130:	e03c      	b.n	80051ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	6859      	ldr	r1, [r3, #4]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	461a      	mov	r2, r3
 8005140:	f000 fa92 	bl	8005668 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2150      	movs	r1, #80	; 0x50
 800514a:	4618      	mov	r0, r3
 800514c:	f000 faeb 	bl	8005726 <TIM_ITRx_SetConfig>
      break;
 8005150:	e02c      	b.n	80051ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6818      	ldr	r0, [r3, #0]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	6859      	ldr	r1, [r3, #4]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	461a      	mov	r2, r3
 8005160:	f000 fab1 	bl	80056c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2160      	movs	r1, #96	; 0x60
 800516a:	4618      	mov	r0, r3
 800516c:	f000 fadb 	bl	8005726 <TIM_ITRx_SetConfig>
      break;
 8005170:	e01c      	b.n	80051ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6818      	ldr	r0, [r3, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	6859      	ldr	r1, [r3, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	461a      	mov	r2, r3
 8005180:	f000 fa72 	bl	8005668 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2140      	movs	r1, #64	; 0x40
 800518a:	4618      	mov	r0, r3
 800518c:	f000 facb 	bl	8005726 <TIM_ITRx_SetConfig>
      break;
 8005190:	e00c      	b.n	80051ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4619      	mov	r1, r3
 800519c:	4610      	mov	r0, r2
 800519e:	f000 fac2 	bl	8005726 <TIM_ITRx_SetConfig>
      break;
 80051a2:	e003      	b.n	80051ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	73fb      	strb	r3, [r7, #15]
      break;
 80051a8:	e000      	b.n	80051ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
	...

080051c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a40      	ldr	r2, [pc, #256]	; (80052dc <TIM_Base_SetConfig+0x114>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d013      	beq.n	8005208 <TIM_Base_SetConfig+0x40>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e6:	d00f      	beq.n	8005208 <TIM_Base_SetConfig+0x40>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a3d      	ldr	r2, [pc, #244]	; (80052e0 <TIM_Base_SetConfig+0x118>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00b      	beq.n	8005208 <TIM_Base_SetConfig+0x40>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a3c      	ldr	r2, [pc, #240]	; (80052e4 <TIM_Base_SetConfig+0x11c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d007      	beq.n	8005208 <TIM_Base_SetConfig+0x40>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a3b      	ldr	r2, [pc, #236]	; (80052e8 <TIM_Base_SetConfig+0x120>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d003      	beq.n	8005208 <TIM_Base_SetConfig+0x40>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a3a      	ldr	r2, [pc, #232]	; (80052ec <TIM_Base_SetConfig+0x124>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d108      	bne.n	800521a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a2f      	ldr	r2, [pc, #188]	; (80052dc <TIM_Base_SetConfig+0x114>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d02b      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005228:	d027      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a2c      	ldr	r2, [pc, #176]	; (80052e0 <TIM_Base_SetConfig+0x118>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d023      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a2b      	ldr	r2, [pc, #172]	; (80052e4 <TIM_Base_SetConfig+0x11c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d01f      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a2a      	ldr	r2, [pc, #168]	; (80052e8 <TIM_Base_SetConfig+0x120>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d01b      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a29      	ldr	r2, [pc, #164]	; (80052ec <TIM_Base_SetConfig+0x124>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d017      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a28      	ldr	r2, [pc, #160]	; (80052f0 <TIM_Base_SetConfig+0x128>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d013      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a27      	ldr	r2, [pc, #156]	; (80052f4 <TIM_Base_SetConfig+0x12c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00f      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a26      	ldr	r2, [pc, #152]	; (80052f8 <TIM_Base_SetConfig+0x130>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00b      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a25      	ldr	r2, [pc, #148]	; (80052fc <TIM_Base_SetConfig+0x134>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d007      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a24      	ldr	r2, [pc, #144]	; (8005300 <TIM_Base_SetConfig+0x138>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d003      	beq.n	800527a <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a23      	ldr	r2, [pc, #140]	; (8005304 <TIM_Base_SetConfig+0x13c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d108      	bne.n	800528c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4313      	orrs	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a0a      	ldr	r2, [pc, #40]	; (80052dc <TIM_Base_SetConfig+0x114>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_Base_SetConfig+0xf8>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a0c      	ldr	r2, [pc, #48]	; (80052ec <TIM_Base_SetConfig+0x124>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d103      	bne.n	80052c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	615a      	str	r2, [r3, #20]
}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40010000 	.word	0x40010000
 80052e0:	40000400 	.word	0x40000400
 80052e4:	40000800 	.word	0x40000800
 80052e8:	40000c00 	.word	0x40000c00
 80052ec:	40010400 	.word	0x40010400
 80052f0:	40014000 	.word	0x40014000
 80052f4:	40014400 	.word	0x40014400
 80052f8:	40014800 	.word	0x40014800
 80052fc:	40001800 	.word	0x40001800
 8005300:	40001c00 	.word	0x40001c00
 8005304:	40002000 	.word	0x40002000

08005308 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	f023 0201 	bic.w	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 0303 	bic.w	r3, r3, #3
 800533e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f023 0302 	bic.w	r3, r3, #2
 8005350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	4313      	orrs	r3, r2
 800535a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a20      	ldr	r2, [pc, #128]	; (80053e0 <TIM_OC1_SetConfig+0xd8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d003      	beq.n	800536c <TIM_OC1_SetConfig+0x64>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a1f      	ldr	r2, [pc, #124]	; (80053e4 <TIM_OC1_SetConfig+0xdc>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d10c      	bne.n	8005386 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f023 0308 	bic.w	r3, r3, #8
 8005372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f023 0304 	bic.w	r3, r3, #4
 8005384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a15      	ldr	r2, [pc, #84]	; (80053e0 <TIM_OC1_SetConfig+0xd8>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d003      	beq.n	8005396 <TIM_OC1_SetConfig+0x8e>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a14      	ldr	r2, [pc, #80]	; (80053e4 <TIM_OC1_SetConfig+0xdc>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d111      	bne.n	80053ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800539c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	621a      	str	r2, [r3, #32]
}
 80053d4:	bf00      	nop
 80053d6:	371c      	adds	r7, #28
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	40010000 	.word	0x40010000
 80053e4:	40010400 	.word	0x40010400

080053e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f023 0210 	bic.w	r2, r3, #16
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800541e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	021b      	lsls	r3, r3, #8
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4313      	orrs	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f023 0320 	bic.w	r3, r3, #32
 8005432:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a22      	ldr	r2, [pc, #136]	; (80054cc <TIM_OC2_SetConfig+0xe4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d003      	beq.n	8005450 <TIM_OC2_SetConfig+0x68>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a21      	ldr	r2, [pc, #132]	; (80054d0 <TIM_OC2_SetConfig+0xe8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d10d      	bne.n	800546c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	4313      	orrs	r3, r2
 8005462:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800546a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a17      	ldr	r2, [pc, #92]	; (80054cc <TIM_OC2_SetConfig+0xe4>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d003      	beq.n	800547c <TIM_OC2_SetConfig+0x94>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a16      	ldr	r2, [pc, #88]	; (80054d0 <TIM_OC2_SetConfig+0xe8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d113      	bne.n	80054a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005482:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800548a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	621a      	str	r2, [r3, #32]
}
 80054be:	bf00      	nop
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	40010000 	.word	0x40010000
 80054d0:	40010400 	.word	0x40010400

080054d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0303 	bic.w	r3, r3, #3
 800550a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800551c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	021b      	lsls	r3, r3, #8
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	4313      	orrs	r3, r2
 8005528:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a21      	ldr	r2, [pc, #132]	; (80055b4 <TIM_OC3_SetConfig+0xe0>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d003      	beq.n	800553a <TIM_OC3_SetConfig+0x66>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a20      	ldr	r2, [pc, #128]	; (80055b8 <TIM_OC3_SetConfig+0xe4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d10d      	bne.n	8005556 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	021b      	lsls	r3, r3, #8
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	4313      	orrs	r3, r2
 800554c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a16      	ldr	r2, [pc, #88]	; (80055b4 <TIM_OC3_SetConfig+0xe0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d003      	beq.n	8005566 <TIM_OC3_SetConfig+0x92>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a15      	ldr	r2, [pc, #84]	; (80055b8 <TIM_OC3_SetConfig+0xe4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d113      	bne.n	800558e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800556c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	621a      	str	r2, [r3, #32]
}
 80055a8:	bf00      	nop
 80055aa:	371c      	adds	r7, #28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	40010000 	.word	0x40010000
 80055b8:	40010400 	.word	0x40010400

080055bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	021b      	lsls	r3, r3, #8
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005606:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	031b      	lsls	r3, r3, #12
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a12      	ldr	r2, [pc, #72]	; (8005660 <TIM_OC4_SetConfig+0xa4>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d003      	beq.n	8005624 <TIM_OC4_SetConfig+0x68>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a11      	ldr	r2, [pc, #68]	; (8005664 <TIM_OC4_SetConfig+0xa8>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d109      	bne.n	8005638 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800562a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	019b      	lsls	r3, r3, #6
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	4313      	orrs	r3, r2
 8005636:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	621a      	str	r2, [r3, #32]
}
 8005652:	bf00      	nop
 8005654:	371c      	adds	r7, #28
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40010000 	.word	0x40010000
 8005664:	40010400 	.word	0x40010400

08005668 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	f023 0201 	bic.w	r2, r3, #1
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	4313      	orrs	r3, r2
 800569c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f023 030a 	bic.w	r3, r3, #10
 80056a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	621a      	str	r2, [r3, #32]
}
 80056ba:	bf00      	nop
 80056bc:	371c      	adds	r7, #28
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b087      	sub	sp, #28
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	f023 0210 	bic.w	r2, r3, #16
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	031b      	lsls	r3, r3, #12
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005702:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	4313      	orrs	r3, r2
 800570c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	621a      	str	r2, [r3, #32]
}
 800571a:	bf00      	nop
 800571c:	371c      	adds	r7, #28
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005726:	b480      	push	{r7}
 8005728:	b085      	sub	sp, #20
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	f043 0307 	orr.w	r3, r3, #7
 8005748:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	609a      	str	r2, [r3, #8]
}
 8005750:	bf00      	nop
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
 8005768:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005776:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	021a      	lsls	r2, r3, #8
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	431a      	orrs	r2, r3
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4313      	orrs	r3, r2
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	4313      	orrs	r3, r2
 8005788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	609a      	str	r2, [r3, #8]
}
 8005790:	bf00      	nop
 8005792:	371c      	adds	r7, #28
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800579c:	b480      	push	{r7}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f003 031f 	and.w	r3, r3, #31
 80057ae:	2201      	movs	r2, #1
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a1a      	ldr	r2, [r3, #32]
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	43db      	mvns	r3, r3
 80057be:	401a      	ands	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6a1a      	ldr	r2, [r3, #32]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f003 031f 	and.w	r3, r3, #31
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	fa01 f303 	lsl.w	r3, r1, r3
 80057d4:	431a      	orrs	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	621a      	str	r2, [r3, #32]
}
 80057da:	bf00      	nop
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
	...

080057e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d101      	bne.n	8005800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057fc:	2302      	movs	r3, #2
 80057fe:	e05a      	b.n	80058b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a21      	ldr	r2, [pc, #132]	; (80058c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d022      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584c:	d01d      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a1d      	ldr	r2, [pc, #116]	; (80058c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d018      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1b      	ldr	r2, [pc, #108]	; (80058cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d013      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a1a      	ldr	r2, [pc, #104]	; (80058d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00e      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a18      	ldr	r2, [pc, #96]	; (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d009      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a17      	ldr	r2, [pc, #92]	; (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d004      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a15      	ldr	r2, [pc, #84]	; (80058dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d10c      	bne.n	80058a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005890:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	4313      	orrs	r3, r2
 800589a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	40010000 	.word	0x40010000
 80058c8:	40000400 	.word	0x40000400
 80058cc:	40000800 	.word	0x40000800
 80058d0:	40000c00 	.word	0x40000c00
 80058d4:	40010400 	.word	0x40010400
 80058d8:	40014000 	.word	0x40014000
 80058dc:	40001800 	.word	0x40001800

080058e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e03d      	b.n	8005978 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	4313      	orrs	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	4313      	orrs	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4313      	orrs	r3, r2
 800593a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e03f      	b.n	8005a16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fd fa92 	bl	8002ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2224      	movs	r2, #36	; 0x24
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68da      	ldr	r2, [r3, #12]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fe1d 	bl	8006608 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	691a      	ldr	r2, [r3, #16]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	695a      	ldr	r2, [r3, #20]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2220      	movs	r2, #32
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b08a      	sub	sp, #40	; 0x28
 8005a22:	af02      	add	r7, sp, #8
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	603b      	str	r3, [r7, #0]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	d17c      	bne.n	8005b38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <HAL_UART_Transmit+0x2c>
 8005a44:	88fb      	ldrh	r3, [r7, #6]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e075      	b.n	8005b3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d101      	bne.n	8005a5c <HAL_UART_Transmit+0x3e>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	e06e      	b.n	8005b3a <HAL_UART_Transmit+0x11c>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2221      	movs	r2, #33	; 0x21
 8005a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a72:	f7fd fc4b 	bl	800330c <HAL_GetTick>
 8005a76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	88fa      	ldrh	r2, [r7, #6]
 8005a7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	88fa      	ldrh	r2, [r7, #6]
 8005a82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8c:	d108      	bne.n	8005aa0 <HAL_UART_Transmit+0x82>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d104      	bne.n	8005aa0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	61bb      	str	r3, [r7, #24]
 8005a9e:	e003      	b.n	8005aa8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ab0:	e02a      	b.n	8005b08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	2180      	movs	r1, #128	; 0x80
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 fb9b 	bl	80061f8 <UART_WaitOnFlagUntilTimeout>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e036      	b.n	8005b3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10b      	bne.n	8005aea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ae0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	3302      	adds	r3, #2
 8005ae6:	61bb      	str	r3, [r7, #24]
 8005ae8:	e007      	b.n	8005afa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	781a      	ldrb	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	3301      	adds	r3, #1
 8005af8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	3b01      	subs	r3, #1
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1cf      	bne.n	8005ab2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	2140      	movs	r1, #64	; 0x40
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 fb6b 	bl	80061f8 <UART_WaitOnFlagUntilTimeout>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e006      	b.n	8005b3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b34:	2300      	movs	r3, #0
 8005b36:	e000      	b.n	8005b3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b38:	2302      	movs	r3, #2
  }
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3720      	adds	r7, #32
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b08a      	sub	sp, #40	; 0x28
 8005b46:	af02      	add	r7, sp, #8
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	603b      	str	r3, [r7, #0]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b52:	2300      	movs	r3, #0
 8005b54:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b20      	cmp	r3, #32
 8005b60:	f040 808c 	bne.w	8005c7c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <HAL_UART_Receive+0x2e>
 8005b6a:	88fb      	ldrh	r3, [r7, #6]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e084      	b.n	8005c7e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d101      	bne.n	8005b82 <HAL_UART_Receive+0x40>
 8005b7e:	2302      	movs	r3, #2
 8005b80:	e07d      	b.n	8005c7e <HAL_UART_Receive+0x13c>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2222      	movs	r2, #34	; 0x22
 8005b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b9e:	f7fd fbb5 	bl	800330c <HAL_GetTick>
 8005ba2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	88fa      	ldrh	r2, [r7, #6]
 8005ba8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	88fa      	ldrh	r2, [r7, #6]
 8005bae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb8:	d108      	bne.n	8005bcc <HAL_UART_Receive+0x8a>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d104      	bne.n	8005bcc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	61bb      	str	r3, [r7, #24]
 8005bca:	e003      	b.n	8005bd4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005bdc:	e043      	b.n	8005c66 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2200      	movs	r2, #0
 8005be6:	2120      	movs	r1, #32
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 fb05 	bl	80061f8 <UART_WaitOnFlagUntilTimeout>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e042      	b.n	8005c7e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10c      	bne.n	8005c18 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	3302      	adds	r3, #2
 8005c14:	61bb      	str	r3, [r7, #24]
 8005c16:	e01f      	b.n	8005c58 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c20:	d007      	beq.n	8005c32 <HAL_UART_Receive+0xf0>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10a      	bne.n	8005c40 <HAL_UART_Receive+0xfe>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d106      	bne.n	8005c40 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	701a      	strb	r2, [r3, #0]
 8005c3e:	e008      	b.n	8005c52 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	3301      	adds	r3, #1
 8005c56:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1b6      	bne.n	8005bde <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	e000      	b.n	8005c7e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005c7c:	2302      	movs	r3, #2
  }
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3720      	adds	r7, #32
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
	...

08005c88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b0ba      	sub	sp, #232	; 0xe8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005cc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10f      	bne.n	8005cee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d009      	beq.n	8005cee <HAL_UART_IRQHandler+0x66>
 8005cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fbd3 	bl	8006492 <UART_Receive_IT>
      return;
 8005cec:	e256      	b.n	800619c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005cee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 80de 	beq.w	8005eb4 <HAL_UART_IRQHandler+0x22c>
 8005cf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d106      	bne.n	8005d12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 80d1 	beq.w	8005eb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00b      	beq.n	8005d36 <HAL_UART_IRQHandler+0xae>
 8005d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d005      	beq.n	8005d36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	f043 0201 	orr.w	r2, r3, #1
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d3a:	f003 0304 	and.w	r3, r3, #4
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00b      	beq.n	8005d5a <HAL_UART_IRQHandler+0xd2>
 8005d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d005      	beq.n	8005d5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d52:	f043 0202 	orr.w	r2, r3, #2
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00b      	beq.n	8005d7e <HAL_UART_IRQHandler+0xf6>
 8005d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d005      	beq.n	8005d7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	f043 0204 	orr.w	r2, r3, #4
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d82:	f003 0308 	and.w	r3, r3, #8
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d011      	beq.n	8005dae <HAL_UART_IRQHandler+0x126>
 8005d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d105      	bne.n	8005da2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d005      	beq.n	8005dae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	f043 0208 	orr.w	r2, r3, #8
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 81ed 	beq.w	8006192 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dbc:	f003 0320 	and.w	r3, r3, #32
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d008      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x14e>
 8005dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc8:	f003 0320 	and.w	r3, r3, #32
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fb5e 	bl	8006492 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de0:	2b40      	cmp	r3, #64	; 0x40
 8005de2:	bf0c      	ite	eq
 8005de4:	2301      	moveq	r3, #1
 8005de6:	2300      	movne	r3, #0
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	f003 0308 	and.w	r3, r3, #8
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d103      	bne.n	8005e02 <HAL_UART_IRQHandler+0x17a>
 8005dfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d04f      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fa66 	bl	80062d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e12:	2b40      	cmp	r3, #64	; 0x40
 8005e14:	d141      	bne.n	8005e9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3314      	adds	r3, #20
 8005e1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e24:	e853 3f00 	ldrex	r3, [r3]
 8005e28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3314      	adds	r3, #20
 8005e3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e52:	e841 2300 	strex	r3, r2, [r1]
 8005e56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1d9      	bne.n	8005e16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d013      	beq.n	8005e92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6e:	4a7d      	ldr	r2, [pc, #500]	; (8006064 <HAL_UART_IRQHandler+0x3dc>)
 8005e70:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fd ffc5 	bl	8003e06 <HAL_DMA_Abort_IT>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d016      	beq.n	8005eb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e90:	e00e      	b.n	8005eb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f99a 	bl	80061cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e98:	e00a      	b.n	8005eb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f996 	bl	80061cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea0:	e006      	b.n	8005eb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f992 	bl	80061cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005eae:	e170      	b.n	8006192 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb0:	bf00      	nop
    return;
 8005eb2:	e16e      	b.n	8006192 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	f040 814a 	bne.w	8006152 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec2:	f003 0310 	and.w	r3, r3, #16
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 8143 	beq.w	8006152 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ed0:	f003 0310 	and.w	r3, r3, #16
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 813c 	beq.w	8006152 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005eda:	2300      	movs	r3, #0
 8005edc:	60bb      	str	r3, [r7, #8]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	60bb      	str	r3, [r7, #8]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	60bb      	str	r3, [r7, #8]
 8005eee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efa:	2b40      	cmp	r3, #64	; 0x40
 8005efc:	f040 80b4 	bne.w	8006068 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 8140 	beq.w	8006196 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	f080 8139 	bcs.w	8006196 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f2a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f36:	f000 8088 	beq.w	800604a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	330c      	adds	r3, #12
 8005f40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	330c      	adds	r3, #12
 8005f62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005f66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f76:	e841 2300 	strex	r3, r2, [r1]
 8005f7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1d9      	bne.n	8005f3a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3314      	adds	r3, #20
 8005f8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f90:	e853 3f00 	ldrex	r3, [r3]
 8005f94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f98:	f023 0301 	bic.w	r3, r3, #1
 8005f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3314      	adds	r3, #20
 8005fa6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005faa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005fae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005fb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005fbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e1      	bne.n	8005f86 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3314      	adds	r3, #20
 8005fc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fcc:	e853 3f00 	ldrex	r3, [r3]
 8005fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005fd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3314      	adds	r3, #20
 8005fe2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005fe6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005fe8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005fec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ff4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e3      	bne.n	8005fc2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	330c      	adds	r3, #12
 800600e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006012:	e853 3f00 	ldrex	r3, [r3]
 8006016:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800601a:	f023 0310 	bic.w	r3, r3, #16
 800601e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	330c      	adds	r3, #12
 8006028:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800602c:	65ba      	str	r2, [r7, #88]	; 0x58
 800602e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006032:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800603a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e3      	bne.n	8006008 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006044:	4618      	mov	r0, r3
 8006046:	f7fd fe6e 	bl	8003d26 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006052:	b29b      	uxth	r3, r3
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	b29b      	uxth	r3, r3
 8006058:	4619      	mov	r1, r3
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f8c0 	bl	80061e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006060:	e099      	b.n	8006196 <HAL_UART_IRQHandler+0x50e>
 8006062:	bf00      	nop
 8006064:	0800639b 	.word	0x0800639b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006070:	b29b      	uxth	r3, r3
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800607c:	b29b      	uxth	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 808b 	beq.w	800619a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 8086 	beq.w	800619a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	330c      	adds	r3, #12
 8006094:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006098:	e853 3f00 	ldrex	r3, [r3]
 800609c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800609e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	330c      	adds	r3, #12
 80060ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80060b2:	647a      	str	r2, [r7, #68]	; 0x44
 80060b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e3      	bne.n	800608e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3314      	adds	r3, #20
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	e853 3f00 	ldrex	r3, [r3]
 80060d4:	623b      	str	r3, [r7, #32]
   return(result);
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	f023 0301 	bic.w	r3, r3, #1
 80060dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3314      	adds	r3, #20
 80060e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80060ea:	633a      	str	r2, [r7, #48]	; 0x30
 80060ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060f2:	e841 2300 	strex	r3, r2, [r1]
 80060f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e3      	bne.n	80060c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2220      	movs	r2, #32
 8006102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	330c      	adds	r3, #12
 8006112:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	60fb      	str	r3, [r7, #12]
   return(result);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f023 0310 	bic.w	r3, r3, #16
 8006122:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	330c      	adds	r3, #12
 800612c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006130:	61fa      	str	r2, [r7, #28]
 8006132:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	69b9      	ldr	r1, [r7, #24]
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	617b      	str	r3, [r7, #20]
   return(result);
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e3      	bne.n	800610c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006144:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006148:	4619      	mov	r1, r3
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f848 	bl	80061e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006150:	e023      	b.n	800619a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800615a:	2b00      	cmp	r3, #0
 800615c:	d009      	beq.n	8006172 <HAL_UART_IRQHandler+0x4ea>
 800615e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f929 	bl	80063c2 <UART_Transmit_IT>
    return;
 8006170:	e014      	b.n	800619c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00e      	beq.n	800619c <HAL_UART_IRQHandler+0x514>
 800617e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006186:	2b00      	cmp	r3, #0
 8006188:	d008      	beq.n	800619c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f969 	bl	8006462 <UART_EndTransmit_IT>
    return;
 8006190:	e004      	b.n	800619c <HAL_UART_IRQHandler+0x514>
    return;
 8006192:	bf00      	nop
 8006194:	e002      	b.n	800619c <HAL_UART_IRQHandler+0x514>
      return;
 8006196:	bf00      	nop
 8006198:	e000      	b.n	800619c <HAL_UART_IRQHandler+0x514>
      return;
 800619a:	bf00      	nop
  }
}
 800619c:	37e8      	adds	r7, #232	; 0xe8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop

080061a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b090      	sub	sp, #64	; 0x40
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	603b      	str	r3, [r7, #0]
 8006204:	4613      	mov	r3, r2
 8006206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006208:	e050      	b.n	80062ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800620a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800620c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006210:	d04c      	beq.n	80062ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006214:	2b00      	cmp	r3, #0
 8006216:	d007      	beq.n	8006228 <UART_WaitOnFlagUntilTimeout+0x30>
 8006218:	f7fd f878 	bl	800330c <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006224:	429a      	cmp	r2, r3
 8006226:	d241      	bcs.n	80062ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	330c      	adds	r3, #12
 800622e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006232:	e853 3f00 	ldrex	r3, [r3]
 8006236:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800623e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	330c      	adds	r3, #12
 8006246:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006248:	637a      	str	r2, [r7, #52]	; 0x34
 800624a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800624e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006250:	e841 2300 	strex	r3, r2, [r1]
 8006254:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1e5      	bne.n	8006228 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3314      	adds	r3, #20
 8006262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	e853 3f00 	ldrex	r3, [r3]
 800626a:	613b      	str	r3, [r7, #16]
   return(result);
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	f023 0301 	bic.w	r3, r3, #1
 8006272:	63bb      	str	r3, [r7, #56]	; 0x38
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	3314      	adds	r3, #20
 800627a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800627c:	623a      	str	r2, [r7, #32]
 800627e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006280:	69f9      	ldr	r1, [r7, #28]
 8006282:	6a3a      	ldr	r2, [r7, #32]
 8006284:	e841 2300 	strex	r3, r2, [r1]
 8006288:	61bb      	str	r3, [r7, #24]
   return(result);
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1e5      	bne.n	800625c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2220      	movs	r2, #32
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2220      	movs	r2, #32
 800629c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e00f      	b.n	80062cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	4013      	ands	r3, r2
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	bf0c      	ite	eq
 80062bc:	2301      	moveq	r3, #1
 80062be:	2300      	movne	r3, #0
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	461a      	mov	r2, r3
 80062c4:	79fb      	ldrb	r3, [r7, #7]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d09f      	beq.n	800620a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3740      	adds	r7, #64	; 0x40
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b095      	sub	sp, #84	; 0x54
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	330c      	adds	r3, #12
 80062e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e6:	e853 3f00 	ldrex	r3, [r3]
 80062ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	330c      	adds	r3, #12
 80062fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062fc:	643a      	str	r2, [r7, #64]	; 0x40
 80062fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006300:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006302:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006304:	e841 2300 	strex	r3, r2, [r1]
 8006308:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800630a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1e5      	bne.n	80062dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3314      	adds	r3, #20
 8006316:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	e853 3f00 	ldrex	r3, [r3]
 800631e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	f023 0301 	bic.w	r3, r3, #1
 8006326:	64bb      	str	r3, [r7, #72]	; 0x48
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	3314      	adds	r3, #20
 800632e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006330:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006332:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006334:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006338:	e841 2300 	strex	r3, r2, [r1]
 800633c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1e5      	bne.n	8006310 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006348:	2b01      	cmp	r3, #1
 800634a:	d119      	bne.n	8006380 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	330c      	adds	r3, #12
 8006352:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	e853 3f00 	ldrex	r3, [r3]
 800635a:	60bb      	str	r3, [r7, #8]
   return(result);
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f023 0310 	bic.w	r3, r3, #16
 8006362:	647b      	str	r3, [r7, #68]	; 0x44
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	330c      	adds	r3, #12
 800636a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800636c:	61ba      	str	r2, [r7, #24]
 800636e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006370:	6979      	ldr	r1, [r7, #20]
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	e841 2300 	strex	r3, r2, [r1]
 8006378:	613b      	str	r3, [r7, #16]
   return(result);
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1e5      	bne.n	800634c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2220      	movs	r2, #32
 8006384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800638e:	bf00      	nop
 8006390:	3754      	adds	r7, #84	; 0x54
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b084      	sub	sp, #16
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f7ff ff09 	bl	80061cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063ba:	bf00      	nop
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b085      	sub	sp, #20
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b21      	cmp	r3, #33	; 0x21
 80063d4:	d13e      	bne.n	8006454 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063de:	d114      	bne.n	800640a <UART_Transmit_IT+0x48>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d110      	bne.n	800640a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a1b      	ldr	r3, [r3, #32]
 80063ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	881b      	ldrh	r3, [r3, #0]
 80063f2:	461a      	mov	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	1c9a      	adds	r2, r3, #2
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	621a      	str	r2, [r3, #32]
 8006408:	e008      	b.n	800641c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	1c59      	adds	r1, r3, #1
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	6211      	str	r1, [r2, #32]
 8006414:	781a      	ldrb	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006420:	b29b      	uxth	r3, r3
 8006422:	3b01      	subs	r3, #1
 8006424:	b29b      	uxth	r3, r3
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	4619      	mov	r1, r3
 800642a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10f      	bne.n	8006450 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68da      	ldr	r2, [r3, #12]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800643e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68da      	ldr	r2, [r3, #12]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800644e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	e000      	b.n	8006456 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006454:	2302      	movs	r3, #2
  }
}
 8006456:	4618      	mov	r0, r3
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b082      	sub	sp, #8
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68da      	ldr	r2, [r3, #12]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006478:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2220      	movs	r2, #32
 800647e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7ff fe8e 	bl	80061a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b08c      	sub	sp, #48	; 0x30
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b22      	cmp	r3, #34	; 0x22
 80064a4:	f040 80ab 	bne.w	80065fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b0:	d117      	bne.n	80064e2 <UART_Receive_IT+0x50>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d113      	bne.n	80064e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80064ba:	2300      	movs	r3, #0
 80064bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064da:	1c9a      	adds	r2, r3, #2
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	629a      	str	r2, [r3, #40]	; 0x28
 80064e0:	e026      	b.n	8006530 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80064e8:	2300      	movs	r3, #0
 80064ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064f4:	d007      	beq.n	8006506 <UART_Receive_IT+0x74>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10a      	bne.n	8006514 <UART_Receive_IT+0x82>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d106      	bne.n	8006514 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	b2da      	uxtb	r2, r3
 800650e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006510:	701a      	strb	r2, [r3, #0]
 8006512:	e008      	b.n	8006526 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	b2db      	uxtb	r3, r3
 800651c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006520:	b2da      	uxtb	r2, r3
 8006522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006524:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652a:	1c5a      	adds	r2, r3, #1
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006534:	b29b      	uxth	r3, r3
 8006536:	3b01      	subs	r3, #1
 8006538:	b29b      	uxth	r3, r3
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	4619      	mov	r1, r3
 800653e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006540:	2b00      	cmp	r3, #0
 8006542:	d15a      	bne.n	80065fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68da      	ldr	r2, [r3, #12]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0220 	bic.w	r2, r2, #32
 8006552:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68da      	ldr	r2, [r3, #12]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006562:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	695a      	ldr	r2, [r3, #20]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 0201 	bic.w	r2, r2, #1
 8006572:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2220      	movs	r2, #32
 8006578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006580:	2b01      	cmp	r3, #1
 8006582:	d135      	bne.n	80065f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	330c      	adds	r3, #12
 8006590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	e853 3f00 	ldrex	r3, [r3]
 8006598:	613b      	str	r3, [r7, #16]
   return(result);
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f023 0310 	bic.w	r3, r3, #16
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	330c      	adds	r3, #12
 80065a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065aa:	623a      	str	r2, [r7, #32]
 80065ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ae:	69f9      	ldr	r1, [r7, #28]
 80065b0:	6a3a      	ldr	r2, [r7, #32]
 80065b2:	e841 2300 	strex	r3, r2, [r1]
 80065b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1e5      	bne.n	800658a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0310 	and.w	r3, r3, #16
 80065c8:	2b10      	cmp	r3, #16
 80065ca:	d10a      	bne.n	80065e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065cc:	2300      	movs	r3, #0
 80065ce:	60fb      	str	r3, [r7, #12]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065e6:	4619      	mov	r1, r3
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7ff fdf9 	bl	80061e0 <HAL_UARTEx_RxEventCallback>
 80065ee:	e002      	b.n	80065f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff fde1 	bl	80061b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	e002      	b.n	8006600 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80065fa:	2300      	movs	r3, #0
 80065fc:	e000      	b.n	8006600 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80065fe:	2302      	movs	r3, #2
  }
}
 8006600:	4618      	mov	r0, r3
 8006602:	3730      	adds	r7, #48	; 0x30
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660c:	b09f      	sub	sp, #124	; 0x7c
 800660e:	af00      	add	r7, sp, #0
 8006610:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800661c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800661e:	68d9      	ldr	r1, [r3, #12]
 8006620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	ea40 0301 	orr.w	r3, r0, r1
 8006628:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800662a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800662c:	689a      	ldr	r2, [r3, #8]
 800662e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	431a      	orrs	r2, r3
 8006634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	431a      	orrs	r2, r3
 800663a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	4313      	orrs	r3, r2
 8006640:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800664c:	f021 010c 	bic.w	r1, r1, #12
 8006650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006656:	430b      	orrs	r3, r1
 8006658:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800665a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006666:	6999      	ldr	r1, [r3, #24]
 8006668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	ea40 0301 	orr.w	r3, r0, r1
 8006670:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	4bc5      	ldr	r3, [pc, #788]	; (800698c <UART_SetConfig+0x384>)
 8006678:	429a      	cmp	r2, r3
 800667a:	d004      	beq.n	8006686 <UART_SetConfig+0x7e>
 800667c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	4bc3      	ldr	r3, [pc, #780]	; (8006990 <UART_SetConfig+0x388>)
 8006682:	429a      	cmp	r2, r3
 8006684:	d103      	bne.n	800668e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006686:	f7fe fa27 	bl	8004ad8 <HAL_RCC_GetPCLK2Freq>
 800668a:	6778      	str	r0, [r7, #116]	; 0x74
 800668c:	e002      	b.n	8006694 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800668e:	f7fe fa0f 	bl	8004ab0 <HAL_RCC_GetPCLK1Freq>
 8006692:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006696:	69db      	ldr	r3, [r3, #28]
 8006698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800669c:	f040 80b6 	bne.w	800680c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066a2:	461c      	mov	r4, r3
 80066a4:	f04f 0500 	mov.w	r5, #0
 80066a8:	4622      	mov	r2, r4
 80066aa:	462b      	mov	r3, r5
 80066ac:	1891      	adds	r1, r2, r2
 80066ae:	6439      	str	r1, [r7, #64]	; 0x40
 80066b0:	415b      	adcs	r3, r3
 80066b2:	647b      	str	r3, [r7, #68]	; 0x44
 80066b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066b8:	1912      	adds	r2, r2, r4
 80066ba:	eb45 0303 	adc.w	r3, r5, r3
 80066be:	f04f 0000 	mov.w	r0, #0
 80066c2:	f04f 0100 	mov.w	r1, #0
 80066c6:	00d9      	lsls	r1, r3, #3
 80066c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066cc:	00d0      	lsls	r0, r2, #3
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	1911      	adds	r1, r2, r4
 80066d4:	6639      	str	r1, [r7, #96]	; 0x60
 80066d6:	416b      	adcs	r3, r5
 80066d8:	667b      	str	r3, [r7, #100]	; 0x64
 80066da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	461a      	mov	r2, r3
 80066e0:	f04f 0300 	mov.w	r3, #0
 80066e4:	1891      	adds	r1, r2, r2
 80066e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80066e8:	415b      	adcs	r3, r3
 80066ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80066f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80066f4:	f7f9 fdc4 	bl	8000280 <__aeabi_uldivmod>
 80066f8:	4602      	mov	r2, r0
 80066fa:	460b      	mov	r3, r1
 80066fc:	4ba5      	ldr	r3, [pc, #660]	; (8006994 <UART_SetConfig+0x38c>)
 80066fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006702:	095b      	lsrs	r3, r3, #5
 8006704:	011e      	lsls	r6, r3, #4
 8006706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006708:	461c      	mov	r4, r3
 800670a:	f04f 0500 	mov.w	r5, #0
 800670e:	4622      	mov	r2, r4
 8006710:	462b      	mov	r3, r5
 8006712:	1891      	adds	r1, r2, r2
 8006714:	6339      	str	r1, [r7, #48]	; 0x30
 8006716:	415b      	adcs	r3, r3
 8006718:	637b      	str	r3, [r7, #52]	; 0x34
 800671a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800671e:	1912      	adds	r2, r2, r4
 8006720:	eb45 0303 	adc.w	r3, r5, r3
 8006724:	f04f 0000 	mov.w	r0, #0
 8006728:	f04f 0100 	mov.w	r1, #0
 800672c:	00d9      	lsls	r1, r3, #3
 800672e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006732:	00d0      	lsls	r0, r2, #3
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	1911      	adds	r1, r2, r4
 800673a:	65b9      	str	r1, [r7, #88]	; 0x58
 800673c:	416b      	adcs	r3, r5
 800673e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	461a      	mov	r2, r3
 8006746:	f04f 0300 	mov.w	r3, #0
 800674a:	1891      	adds	r1, r2, r2
 800674c:	62b9      	str	r1, [r7, #40]	; 0x28
 800674e:	415b      	adcs	r3, r3
 8006750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006752:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006756:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800675a:	f7f9 fd91 	bl	8000280 <__aeabi_uldivmod>
 800675e:	4602      	mov	r2, r0
 8006760:	460b      	mov	r3, r1
 8006762:	4b8c      	ldr	r3, [pc, #560]	; (8006994 <UART_SetConfig+0x38c>)
 8006764:	fba3 1302 	umull	r1, r3, r3, r2
 8006768:	095b      	lsrs	r3, r3, #5
 800676a:	2164      	movs	r1, #100	; 0x64
 800676c:	fb01 f303 	mul.w	r3, r1, r3
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	3332      	adds	r3, #50	; 0x32
 8006776:	4a87      	ldr	r2, [pc, #540]	; (8006994 <UART_SetConfig+0x38c>)
 8006778:	fba2 2303 	umull	r2, r3, r2, r3
 800677c:	095b      	lsrs	r3, r3, #5
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006784:	441e      	add	r6, r3
 8006786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006788:	4618      	mov	r0, r3
 800678a:	f04f 0100 	mov.w	r1, #0
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	1894      	adds	r4, r2, r2
 8006794:	623c      	str	r4, [r7, #32]
 8006796:	415b      	adcs	r3, r3
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
 800679a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800679e:	1812      	adds	r2, r2, r0
 80067a0:	eb41 0303 	adc.w	r3, r1, r3
 80067a4:	f04f 0400 	mov.w	r4, #0
 80067a8:	f04f 0500 	mov.w	r5, #0
 80067ac:	00dd      	lsls	r5, r3, #3
 80067ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80067b2:	00d4      	lsls	r4, r2, #3
 80067b4:	4622      	mov	r2, r4
 80067b6:	462b      	mov	r3, r5
 80067b8:	1814      	adds	r4, r2, r0
 80067ba:	653c      	str	r4, [r7, #80]	; 0x50
 80067bc:	414b      	adcs	r3, r1
 80067be:	657b      	str	r3, [r7, #84]	; 0x54
 80067c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	461a      	mov	r2, r3
 80067c6:	f04f 0300 	mov.w	r3, #0
 80067ca:	1891      	adds	r1, r2, r2
 80067cc:	61b9      	str	r1, [r7, #24]
 80067ce:	415b      	adcs	r3, r3
 80067d0:	61fb      	str	r3, [r7, #28]
 80067d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80067da:	f7f9 fd51 	bl	8000280 <__aeabi_uldivmod>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	4b6c      	ldr	r3, [pc, #432]	; (8006994 <UART_SetConfig+0x38c>)
 80067e4:	fba3 1302 	umull	r1, r3, r3, r2
 80067e8:	095b      	lsrs	r3, r3, #5
 80067ea:	2164      	movs	r1, #100	; 0x64
 80067ec:	fb01 f303 	mul.w	r3, r1, r3
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	00db      	lsls	r3, r3, #3
 80067f4:	3332      	adds	r3, #50	; 0x32
 80067f6:	4a67      	ldr	r2, [pc, #412]	; (8006994 <UART_SetConfig+0x38c>)
 80067f8:	fba2 2303 	umull	r2, r3, r2, r3
 80067fc:	095b      	lsrs	r3, r3, #5
 80067fe:	f003 0207 	and.w	r2, r3, #7
 8006802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4432      	add	r2, r6
 8006808:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800680a:	e0b9      	b.n	8006980 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800680c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800680e:	461c      	mov	r4, r3
 8006810:	f04f 0500 	mov.w	r5, #0
 8006814:	4622      	mov	r2, r4
 8006816:	462b      	mov	r3, r5
 8006818:	1891      	adds	r1, r2, r2
 800681a:	6139      	str	r1, [r7, #16]
 800681c:	415b      	adcs	r3, r3
 800681e:	617b      	str	r3, [r7, #20]
 8006820:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006824:	1912      	adds	r2, r2, r4
 8006826:	eb45 0303 	adc.w	r3, r5, r3
 800682a:	f04f 0000 	mov.w	r0, #0
 800682e:	f04f 0100 	mov.w	r1, #0
 8006832:	00d9      	lsls	r1, r3, #3
 8006834:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006838:	00d0      	lsls	r0, r2, #3
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	eb12 0804 	adds.w	r8, r2, r4
 8006842:	eb43 0905 	adc.w	r9, r3, r5
 8006846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	4618      	mov	r0, r3
 800684c:	f04f 0100 	mov.w	r1, #0
 8006850:	f04f 0200 	mov.w	r2, #0
 8006854:	f04f 0300 	mov.w	r3, #0
 8006858:	008b      	lsls	r3, r1, #2
 800685a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800685e:	0082      	lsls	r2, r0, #2
 8006860:	4640      	mov	r0, r8
 8006862:	4649      	mov	r1, r9
 8006864:	f7f9 fd0c 	bl	8000280 <__aeabi_uldivmod>
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	4b49      	ldr	r3, [pc, #292]	; (8006994 <UART_SetConfig+0x38c>)
 800686e:	fba3 2302 	umull	r2, r3, r3, r2
 8006872:	095b      	lsrs	r3, r3, #5
 8006874:	011e      	lsls	r6, r3, #4
 8006876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006878:	4618      	mov	r0, r3
 800687a:	f04f 0100 	mov.w	r1, #0
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	1894      	adds	r4, r2, r2
 8006884:	60bc      	str	r4, [r7, #8]
 8006886:	415b      	adcs	r3, r3
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800688e:	1812      	adds	r2, r2, r0
 8006890:	eb41 0303 	adc.w	r3, r1, r3
 8006894:	f04f 0400 	mov.w	r4, #0
 8006898:	f04f 0500 	mov.w	r5, #0
 800689c:	00dd      	lsls	r5, r3, #3
 800689e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80068a2:	00d4      	lsls	r4, r2, #3
 80068a4:	4622      	mov	r2, r4
 80068a6:	462b      	mov	r3, r5
 80068a8:	1814      	adds	r4, r2, r0
 80068aa:	64bc      	str	r4, [r7, #72]	; 0x48
 80068ac:	414b      	adcs	r3, r1
 80068ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f04f 0100 	mov.w	r1, #0
 80068ba:	f04f 0200 	mov.w	r2, #0
 80068be:	f04f 0300 	mov.w	r3, #0
 80068c2:	008b      	lsls	r3, r1, #2
 80068c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80068c8:	0082      	lsls	r2, r0, #2
 80068ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80068ce:	f7f9 fcd7 	bl	8000280 <__aeabi_uldivmod>
 80068d2:	4602      	mov	r2, r0
 80068d4:	460b      	mov	r3, r1
 80068d6:	4b2f      	ldr	r3, [pc, #188]	; (8006994 <UART_SetConfig+0x38c>)
 80068d8:	fba3 1302 	umull	r1, r3, r3, r2
 80068dc:	095b      	lsrs	r3, r3, #5
 80068de:	2164      	movs	r1, #100	; 0x64
 80068e0:	fb01 f303 	mul.w	r3, r1, r3
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	011b      	lsls	r3, r3, #4
 80068e8:	3332      	adds	r3, #50	; 0x32
 80068ea:	4a2a      	ldr	r2, [pc, #168]	; (8006994 <UART_SetConfig+0x38c>)
 80068ec:	fba2 2303 	umull	r2, r3, r2, r3
 80068f0:	095b      	lsrs	r3, r3, #5
 80068f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068f6:	441e      	add	r6, r3
 80068f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068fa:	4618      	mov	r0, r3
 80068fc:	f04f 0100 	mov.w	r1, #0
 8006900:	4602      	mov	r2, r0
 8006902:	460b      	mov	r3, r1
 8006904:	1894      	adds	r4, r2, r2
 8006906:	603c      	str	r4, [r7, #0]
 8006908:	415b      	adcs	r3, r3
 800690a:	607b      	str	r3, [r7, #4]
 800690c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006910:	1812      	adds	r2, r2, r0
 8006912:	eb41 0303 	adc.w	r3, r1, r3
 8006916:	f04f 0400 	mov.w	r4, #0
 800691a:	f04f 0500 	mov.w	r5, #0
 800691e:	00dd      	lsls	r5, r3, #3
 8006920:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006924:	00d4      	lsls	r4, r2, #3
 8006926:	4622      	mov	r2, r4
 8006928:	462b      	mov	r3, r5
 800692a:	eb12 0a00 	adds.w	sl, r2, r0
 800692e:	eb43 0b01 	adc.w	fp, r3, r1
 8006932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	4618      	mov	r0, r3
 8006938:	f04f 0100 	mov.w	r1, #0
 800693c:	f04f 0200 	mov.w	r2, #0
 8006940:	f04f 0300 	mov.w	r3, #0
 8006944:	008b      	lsls	r3, r1, #2
 8006946:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800694a:	0082      	lsls	r2, r0, #2
 800694c:	4650      	mov	r0, sl
 800694e:	4659      	mov	r1, fp
 8006950:	f7f9 fc96 	bl	8000280 <__aeabi_uldivmod>
 8006954:	4602      	mov	r2, r0
 8006956:	460b      	mov	r3, r1
 8006958:	4b0e      	ldr	r3, [pc, #56]	; (8006994 <UART_SetConfig+0x38c>)
 800695a:	fba3 1302 	umull	r1, r3, r3, r2
 800695e:	095b      	lsrs	r3, r3, #5
 8006960:	2164      	movs	r1, #100	; 0x64
 8006962:	fb01 f303 	mul.w	r3, r1, r3
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	011b      	lsls	r3, r3, #4
 800696a:	3332      	adds	r3, #50	; 0x32
 800696c:	4a09      	ldr	r2, [pc, #36]	; (8006994 <UART_SetConfig+0x38c>)
 800696e:	fba2 2303 	umull	r2, r3, r2, r3
 8006972:	095b      	lsrs	r3, r3, #5
 8006974:	f003 020f 	and.w	r2, r3, #15
 8006978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4432      	add	r2, r6
 800697e:	609a      	str	r2, [r3, #8]
}
 8006980:	bf00      	nop
 8006982:	377c      	adds	r7, #124	; 0x7c
 8006984:	46bd      	mov	sp, r7
 8006986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800698a:	bf00      	nop
 800698c:	40011000 	.word	0x40011000
 8006990:	40011400 	.word	0x40011400
 8006994:	51eb851f 	.word	0x51eb851f

08006998 <__errno>:
 8006998:	4b01      	ldr	r3, [pc, #4]	; (80069a0 <__errno+0x8>)
 800699a:	6818      	ldr	r0, [r3, #0]
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	2000000c 	.word	0x2000000c

080069a4 <__libc_init_array>:
 80069a4:	b570      	push	{r4, r5, r6, lr}
 80069a6:	4d0d      	ldr	r5, [pc, #52]	; (80069dc <__libc_init_array+0x38>)
 80069a8:	4c0d      	ldr	r4, [pc, #52]	; (80069e0 <__libc_init_array+0x3c>)
 80069aa:	1b64      	subs	r4, r4, r5
 80069ac:	10a4      	asrs	r4, r4, #2
 80069ae:	2600      	movs	r6, #0
 80069b0:	42a6      	cmp	r6, r4
 80069b2:	d109      	bne.n	80069c8 <__libc_init_array+0x24>
 80069b4:	4d0b      	ldr	r5, [pc, #44]	; (80069e4 <__libc_init_array+0x40>)
 80069b6:	4c0c      	ldr	r4, [pc, #48]	; (80069e8 <__libc_init_array+0x44>)
 80069b8:	f000 fc4e 	bl	8007258 <_init>
 80069bc:	1b64      	subs	r4, r4, r5
 80069be:	10a4      	asrs	r4, r4, #2
 80069c0:	2600      	movs	r6, #0
 80069c2:	42a6      	cmp	r6, r4
 80069c4:	d105      	bne.n	80069d2 <__libc_init_array+0x2e>
 80069c6:	bd70      	pop	{r4, r5, r6, pc}
 80069c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069cc:	4798      	blx	r3
 80069ce:	3601      	adds	r6, #1
 80069d0:	e7ee      	b.n	80069b0 <__libc_init_array+0xc>
 80069d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d6:	4798      	blx	r3
 80069d8:	3601      	adds	r6, #1
 80069da:	e7f2      	b.n	80069c2 <__libc_init_array+0x1e>
 80069dc:	080079e4 	.word	0x080079e4
 80069e0:	080079e4 	.word	0x080079e4
 80069e4:	080079e4 	.word	0x080079e4
 80069e8:	080079e8 	.word	0x080079e8

080069ec <memset>:
 80069ec:	4402      	add	r2, r0
 80069ee:	4603      	mov	r3, r0
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d100      	bne.n	80069f6 <memset+0xa>
 80069f4:	4770      	bx	lr
 80069f6:	f803 1b01 	strb.w	r1, [r3], #1
 80069fa:	e7f9      	b.n	80069f0 <memset+0x4>

080069fc <siprintf>:
 80069fc:	b40e      	push	{r1, r2, r3}
 80069fe:	b500      	push	{lr}
 8006a00:	b09c      	sub	sp, #112	; 0x70
 8006a02:	ab1d      	add	r3, sp, #116	; 0x74
 8006a04:	9002      	str	r0, [sp, #8]
 8006a06:	9006      	str	r0, [sp, #24]
 8006a08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a0c:	4809      	ldr	r0, [pc, #36]	; (8006a34 <siprintf+0x38>)
 8006a0e:	9107      	str	r1, [sp, #28]
 8006a10:	9104      	str	r1, [sp, #16]
 8006a12:	4909      	ldr	r1, [pc, #36]	; (8006a38 <siprintf+0x3c>)
 8006a14:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a18:	9105      	str	r1, [sp, #20]
 8006a1a:	6800      	ldr	r0, [r0, #0]
 8006a1c:	9301      	str	r3, [sp, #4]
 8006a1e:	a902      	add	r1, sp, #8
 8006a20:	f000 f868 	bl	8006af4 <_svfiprintf_r>
 8006a24:	9b02      	ldr	r3, [sp, #8]
 8006a26:	2200      	movs	r2, #0
 8006a28:	701a      	strb	r2, [r3, #0]
 8006a2a:	b01c      	add	sp, #112	; 0x70
 8006a2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a30:	b003      	add	sp, #12
 8006a32:	4770      	bx	lr
 8006a34:	2000000c 	.word	0x2000000c
 8006a38:	ffff0208 	.word	0xffff0208

08006a3c <__ssputs_r>:
 8006a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a40:	688e      	ldr	r6, [r1, #8]
 8006a42:	429e      	cmp	r6, r3
 8006a44:	4682      	mov	sl, r0
 8006a46:	460c      	mov	r4, r1
 8006a48:	4690      	mov	r8, r2
 8006a4a:	461f      	mov	r7, r3
 8006a4c:	d838      	bhi.n	8006ac0 <__ssputs_r+0x84>
 8006a4e:	898a      	ldrh	r2, [r1, #12]
 8006a50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a54:	d032      	beq.n	8006abc <__ssputs_r+0x80>
 8006a56:	6825      	ldr	r5, [r4, #0]
 8006a58:	6909      	ldr	r1, [r1, #16]
 8006a5a:	eba5 0901 	sub.w	r9, r5, r1
 8006a5e:	6965      	ldr	r5, [r4, #20]
 8006a60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a68:	3301      	adds	r3, #1
 8006a6a:	444b      	add	r3, r9
 8006a6c:	106d      	asrs	r5, r5, #1
 8006a6e:	429d      	cmp	r5, r3
 8006a70:	bf38      	it	cc
 8006a72:	461d      	movcc	r5, r3
 8006a74:	0553      	lsls	r3, r2, #21
 8006a76:	d531      	bpl.n	8006adc <__ssputs_r+0xa0>
 8006a78:	4629      	mov	r1, r5
 8006a7a:	f000 fb47 	bl	800710c <_malloc_r>
 8006a7e:	4606      	mov	r6, r0
 8006a80:	b950      	cbnz	r0, 8006a98 <__ssputs_r+0x5c>
 8006a82:	230c      	movs	r3, #12
 8006a84:	f8ca 3000 	str.w	r3, [sl]
 8006a88:	89a3      	ldrh	r3, [r4, #12]
 8006a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a8e:	81a3      	strh	r3, [r4, #12]
 8006a90:	f04f 30ff 	mov.w	r0, #4294967295
 8006a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a98:	6921      	ldr	r1, [r4, #16]
 8006a9a:	464a      	mov	r2, r9
 8006a9c:	f000 fabe 	bl	800701c <memcpy>
 8006aa0:	89a3      	ldrh	r3, [r4, #12]
 8006aa2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aaa:	81a3      	strh	r3, [r4, #12]
 8006aac:	6126      	str	r6, [r4, #16]
 8006aae:	6165      	str	r5, [r4, #20]
 8006ab0:	444e      	add	r6, r9
 8006ab2:	eba5 0509 	sub.w	r5, r5, r9
 8006ab6:	6026      	str	r6, [r4, #0]
 8006ab8:	60a5      	str	r5, [r4, #8]
 8006aba:	463e      	mov	r6, r7
 8006abc:	42be      	cmp	r6, r7
 8006abe:	d900      	bls.n	8006ac2 <__ssputs_r+0x86>
 8006ac0:	463e      	mov	r6, r7
 8006ac2:	4632      	mov	r2, r6
 8006ac4:	6820      	ldr	r0, [r4, #0]
 8006ac6:	4641      	mov	r1, r8
 8006ac8:	f000 fab6 	bl	8007038 <memmove>
 8006acc:	68a3      	ldr	r3, [r4, #8]
 8006ace:	6822      	ldr	r2, [r4, #0]
 8006ad0:	1b9b      	subs	r3, r3, r6
 8006ad2:	4432      	add	r2, r6
 8006ad4:	60a3      	str	r3, [r4, #8]
 8006ad6:	6022      	str	r2, [r4, #0]
 8006ad8:	2000      	movs	r0, #0
 8006ada:	e7db      	b.n	8006a94 <__ssputs_r+0x58>
 8006adc:	462a      	mov	r2, r5
 8006ade:	f000 fb6f 	bl	80071c0 <_realloc_r>
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d1e1      	bne.n	8006aac <__ssputs_r+0x70>
 8006ae8:	6921      	ldr	r1, [r4, #16]
 8006aea:	4650      	mov	r0, sl
 8006aec:	f000 fabe 	bl	800706c <_free_r>
 8006af0:	e7c7      	b.n	8006a82 <__ssputs_r+0x46>
	...

08006af4 <_svfiprintf_r>:
 8006af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af8:	4698      	mov	r8, r3
 8006afa:	898b      	ldrh	r3, [r1, #12]
 8006afc:	061b      	lsls	r3, r3, #24
 8006afe:	b09d      	sub	sp, #116	; 0x74
 8006b00:	4607      	mov	r7, r0
 8006b02:	460d      	mov	r5, r1
 8006b04:	4614      	mov	r4, r2
 8006b06:	d50e      	bpl.n	8006b26 <_svfiprintf_r+0x32>
 8006b08:	690b      	ldr	r3, [r1, #16]
 8006b0a:	b963      	cbnz	r3, 8006b26 <_svfiprintf_r+0x32>
 8006b0c:	2140      	movs	r1, #64	; 0x40
 8006b0e:	f000 fafd 	bl	800710c <_malloc_r>
 8006b12:	6028      	str	r0, [r5, #0]
 8006b14:	6128      	str	r0, [r5, #16]
 8006b16:	b920      	cbnz	r0, 8006b22 <_svfiprintf_r+0x2e>
 8006b18:	230c      	movs	r3, #12
 8006b1a:	603b      	str	r3, [r7, #0]
 8006b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b20:	e0d1      	b.n	8006cc6 <_svfiprintf_r+0x1d2>
 8006b22:	2340      	movs	r3, #64	; 0x40
 8006b24:	616b      	str	r3, [r5, #20]
 8006b26:	2300      	movs	r3, #0
 8006b28:	9309      	str	r3, [sp, #36]	; 0x24
 8006b2a:	2320      	movs	r3, #32
 8006b2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b30:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b34:	2330      	movs	r3, #48	; 0x30
 8006b36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006ce0 <_svfiprintf_r+0x1ec>
 8006b3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b3e:	f04f 0901 	mov.w	r9, #1
 8006b42:	4623      	mov	r3, r4
 8006b44:	469a      	mov	sl, r3
 8006b46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b4a:	b10a      	cbz	r2, 8006b50 <_svfiprintf_r+0x5c>
 8006b4c:	2a25      	cmp	r2, #37	; 0x25
 8006b4e:	d1f9      	bne.n	8006b44 <_svfiprintf_r+0x50>
 8006b50:	ebba 0b04 	subs.w	fp, sl, r4
 8006b54:	d00b      	beq.n	8006b6e <_svfiprintf_r+0x7a>
 8006b56:	465b      	mov	r3, fp
 8006b58:	4622      	mov	r2, r4
 8006b5a:	4629      	mov	r1, r5
 8006b5c:	4638      	mov	r0, r7
 8006b5e:	f7ff ff6d 	bl	8006a3c <__ssputs_r>
 8006b62:	3001      	adds	r0, #1
 8006b64:	f000 80aa 	beq.w	8006cbc <_svfiprintf_r+0x1c8>
 8006b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b6a:	445a      	add	r2, fp
 8006b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 80a2 	beq.w	8006cbc <_svfiprintf_r+0x1c8>
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b82:	f10a 0a01 	add.w	sl, sl, #1
 8006b86:	9304      	str	r3, [sp, #16]
 8006b88:	9307      	str	r3, [sp, #28]
 8006b8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b8e:	931a      	str	r3, [sp, #104]	; 0x68
 8006b90:	4654      	mov	r4, sl
 8006b92:	2205      	movs	r2, #5
 8006b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b98:	4851      	ldr	r0, [pc, #324]	; (8006ce0 <_svfiprintf_r+0x1ec>)
 8006b9a:	f7f9 fb21 	bl	80001e0 <memchr>
 8006b9e:	9a04      	ldr	r2, [sp, #16]
 8006ba0:	b9d8      	cbnz	r0, 8006bda <_svfiprintf_r+0xe6>
 8006ba2:	06d0      	lsls	r0, r2, #27
 8006ba4:	bf44      	itt	mi
 8006ba6:	2320      	movmi	r3, #32
 8006ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bac:	0711      	lsls	r1, r2, #28
 8006bae:	bf44      	itt	mi
 8006bb0:	232b      	movmi	r3, #43	; 0x2b
 8006bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8006bba:	2b2a      	cmp	r3, #42	; 0x2a
 8006bbc:	d015      	beq.n	8006bea <_svfiprintf_r+0xf6>
 8006bbe:	9a07      	ldr	r2, [sp, #28]
 8006bc0:	4654      	mov	r4, sl
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	f04f 0c0a 	mov.w	ip, #10
 8006bc8:	4621      	mov	r1, r4
 8006bca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bce:	3b30      	subs	r3, #48	; 0x30
 8006bd0:	2b09      	cmp	r3, #9
 8006bd2:	d94e      	bls.n	8006c72 <_svfiprintf_r+0x17e>
 8006bd4:	b1b0      	cbz	r0, 8006c04 <_svfiprintf_r+0x110>
 8006bd6:	9207      	str	r2, [sp, #28]
 8006bd8:	e014      	b.n	8006c04 <_svfiprintf_r+0x110>
 8006bda:	eba0 0308 	sub.w	r3, r0, r8
 8006bde:	fa09 f303 	lsl.w	r3, r9, r3
 8006be2:	4313      	orrs	r3, r2
 8006be4:	9304      	str	r3, [sp, #16]
 8006be6:	46a2      	mov	sl, r4
 8006be8:	e7d2      	b.n	8006b90 <_svfiprintf_r+0x9c>
 8006bea:	9b03      	ldr	r3, [sp, #12]
 8006bec:	1d19      	adds	r1, r3, #4
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	9103      	str	r1, [sp, #12]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	bfbb      	ittet	lt
 8006bf6:	425b      	neglt	r3, r3
 8006bf8:	f042 0202 	orrlt.w	r2, r2, #2
 8006bfc:	9307      	strge	r3, [sp, #28]
 8006bfe:	9307      	strlt	r3, [sp, #28]
 8006c00:	bfb8      	it	lt
 8006c02:	9204      	strlt	r2, [sp, #16]
 8006c04:	7823      	ldrb	r3, [r4, #0]
 8006c06:	2b2e      	cmp	r3, #46	; 0x2e
 8006c08:	d10c      	bne.n	8006c24 <_svfiprintf_r+0x130>
 8006c0a:	7863      	ldrb	r3, [r4, #1]
 8006c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8006c0e:	d135      	bne.n	8006c7c <_svfiprintf_r+0x188>
 8006c10:	9b03      	ldr	r3, [sp, #12]
 8006c12:	1d1a      	adds	r2, r3, #4
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	9203      	str	r2, [sp, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	bfb8      	it	lt
 8006c1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c20:	3402      	adds	r4, #2
 8006c22:	9305      	str	r3, [sp, #20]
 8006c24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006cf0 <_svfiprintf_r+0x1fc>
 8006c28:	7821      	ldrb	r1, [r4, #0]
 8006c2a:	2203      	movs	r2, #3
 8006c2c:	4650      	mov	r0, sl
 8006c2e:	f7f9 fad7 	bl	80001e0 <memchr>
 8006c32:	b140      	cbz	r0, 8006c46 <_svfiprintf_r+0x152>
 8006c34:	2340      	movs	r3, #64	; 0x40
 8006c36:	eba0 000a 	sub.w	r0, r0, sl
 8006c3a:	fa03 f000 	lsl.w	r0, r3, r0
 8006c3e:	9b04      	ldr	r3, [sp, #16]
 8006c40:	4303      	orrs	r3, r0
 8006c42:	3401      	adds	r4, #1
 8006c44:	9304      	str	r3, [sp, #16]
 8006c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c4a:	4826      	ldr	r0, [pc, #152]	; (8006ce4 <_svfiprintf_r+0x1f0>)
 8006c4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c50:	2206      	movs	r2, #6
 8006c52:	f7f9 fac5 	bl	80001e0 <memchr>
 8006c56:	2800      	cmp	r0, #0
 8006c58:	d038      	beq.n	8006ccc <_svfiprintf_r+0x1d8>
 8006c5a:	4b23      	ldr	r3, [pc, #140]	; (8006ce8 <_svfiprintf_r+0x1f4>)
 8006c5c:	bb1b      	cbnz	r3, 8006ca6 <_svfiprintf_r+0x1b2>
 8006c5e:	9b03      	ldr	r3, [sp, #12]
 8006c60:	3307      	adds	r3, #7
 8006c62:	f023 0307 	bic.w	r3, r3, #7
 8006c66:	3308      	adds	r3, #8
 8006c68:	9303      	str	r3, [sp, #12]
 8006c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c6c:	4433      	add	r3, r6
 8006c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c70:	e767      	b.n	8006b42 <_svfiprintf_r+0x4e>
 8006c72:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c76:	460c      	mov	r4, r1
 8006c78:	2001      	movs	r0, #1
 8006c7a:	e7a5      	b.n	8006bc8 <_svfiprintf_r+0xd4>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	3401      	adds	r4, #1
 8006c80:	9305      	str	r3, [sp, #20]
 8006c82:	4619      	mov	r1, r3
 8006c84:	f04f 0c0a 	mov.w	ip, #10
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c8e:	3a30      	subs	r2, #48	; 0x30
 8006c90:	2a09      	cmp	r2, #9
 8006c92:	d903      	bls.n	8006c9c <_svfiprintf_r+0x1a8>
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d0c5      	beq.n	8006c24 <_svfiprintf_r+0x130>
 8006c98:	9105      	str	r1, [sp, #20]
 8006c9a:	e7c3      	b.n	8006c24 <_svfiprintf_r+0x130>
 8006c9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ca0:	4604      	mov	r4, r0
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e7f0      	b.n	8006c88 <_svfiprintf_r+0x194>
 8006ca6:	ab03      	add	r3, sp, #12
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	462a      	mov	r2, r5
 8006cac:	4b0f      	ldr	r3, [pc, #60]	; (8006cec <_svfiprintf_r+0x1f8>)
 8006cae:	a904      	add	r1, sp, #16
 8006cb0:	4638      	mov	r0, r7
 8006cb2:	f3af 8000 	nop.w
 8006cb6:	1c42      	adds	r2, r0, #1
 8006cb8:	4606      	mov	r6, r0
 8006cba:	d1d6      	bne.n	8006c6a <_svfiprintf_r+0x176>
 8006cbc:	89ab      	ldrh	r3, [r5, #12]
 8006cbe:	065b      	lsls	r3, r3, #25
 8006cc0:	f53f af2c 	bmi.w	8006b1c <_svfiprintf_r+0x28>
 8006cc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cc6:	b01d      	add	sp, #116	; 0x74
 8006cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ccc:	ab03      	add	r3, sp, #12
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	462a      	mov	r2, r5
 8006cd2:	4b06      	ldr	r3, [pc, #24]	; (8006cec <_svfiprintf_r+0x1f8>)
 8006cd4:	a904      	add	r1, sp, #16
 8006cd6:	4638      	mov	r0, r7
 8006cd8:	f000 f87a 	bl	8006dd0 <_printf_i>
 8006cdc:	e7eb      	b.n	8006cb6 <_svfiprintf_r+0x1c2>
 8006cde:	bf00      	nop
 8006ce0:	080079a8 	.word	0x080079a8
 8006ce4:	080079b2 	.word	0x080079b2
 8006ce8:	00000000 	.word	0x00000000
 8006cec:	08006a3d 	.word	0x08006a3d
 8006cf0:	080079ae 	.word	0x080079ae

08006cf4 <_printf_common>:
 8006cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf8:	4616      	mov	r6, r2
 8006cfa:	4699      	mov	r9, r3
 8006cfc:	688a      	ldr	r2, [r1, #8]
 8006cfe:	690b      	ldr	r3, [r1, #16]
 8006d00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d04:	4293      	cmp	r3, r2
 8006d06:	bfb8      	it	lt
 8006d08:	4613      	movlt	r3, r2
 8006d0a:	6033      	str	r3, [r6, #0]
 8006d0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d10:	4607      	mov	r7, r0
 8006d12:	460c      	mov	r4, r1
 8006d14:	b10a      	cbz	r2, 8006d1a <_printf_common+0x26>
 8006d16:	3301      	adds	r3, #1
 8006d18:	6033      	str	r3, [r6, #0]
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	0699      	lsls	r1, r3, #26
 8006d1e:	bf42      	ittt	mi
 8006d20:	6833      	ldrmi	r3, [r6, #0]
 8006d22:	3302      	addmi	r3, #2
 8006d24:	6033      	strmi	r3, [r6, #0]
 8006d26:	6825      	ldr	r5, [r4, #0]
 8006d28:	f015 0506 	ands.w	r5, r5, #6
 8006d2c:	d106      	bne.n	8006d3c <_printf_common+0x48>
 8006d2e:	f104 0a19 	add.w	sl, r4, #25
 8006d32:	68e3      	ldr	r3, [r4, #12]
 8006d34:	6832      	ldr	r2, [r6, #0]
 8006d36:	1a9b      	subs	r3, r3, r2
 8006d38:	42ab      	cmp	r3, r5
 8006d3a:	dc26      	bgt.n	8006d8a <_printf_common+0x96>
 8006d3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d40:	1e13      	subs	r3, r2, #0
 8006d42:	6822      	ldr	r2, [r4, #0]
 8006d44:	bf18      	it	ne
 8006d46:	2301      	movne	r3, #1
 8006d48:	0692      	lsls	r2, r2, #26
 8006d4a:	d42b      	bmi.n	8006da4 <_printf_common+0xb0>
 8006d4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d50:	4649      	mov	r1, r9
 8006d52:	4638      	mov	r0, r7
 8006d54:	47c0      	blx	r8
 8006d56:	3001      	adds	r0, #1
 8006d58:	d01e      	beq.n	8006d98 <_printf_common+0xa4>
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	68e5      	ldr	r5, [r4, #12]
 8006d5e:	6832      	ldr	r2, [r6, #0]
 8006d60:	f003 0306 	and.w	r3, r3, #6
 8006d64:	2b04      	cmp	r3, #4
 8006d66:	bf08      	it	eq
 8006d68:	1aad      	subeq	r5, r5, r2
 8006d6a:	68a3      	ldr	r3, [r4, #8]
 8006d6c:	6922      	ldr	r2, [r4, #16]
 8006d6e:	bf0c      	ite	eq
 8006d70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d74:	2500      	movne	r5, #0
 8006d76:	4293      	cmp	r3, r2
 8006d78:	bfc4      	itt	gt
 8006d7a:	1a9b      	subgt	r3, r3, r2
 8006d7c:	18ed      	addgt	r5, r5, r3
 8006d7e:	2600      	movs	r6, #0
 8006d80:	341a      	adds	r4, #26
 8006d82:	42b5      	cmp	r5, r6
 8006d84:	d11a      	bne.n	8006dbc <_printf_common+0xc8>
 8006d86:	2000      	movs	r0, #0
 8006d88:	e008      	b.n	8006d9c <_printf_common+0xa8>
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	4652      	mov	r2, sl
 8006d8e:	4649      	mov	r1, r9
 8006d90:	4638      	mov	r0, r7
 8006d92:	47c0      	blx	r8
 8006d94:	3001      	adds	r0, #1
 8006d96:	d103      	bne.n	8006da0 <_printf_common+0xac>
 8006d98:	f04f 30ff 	mov.w	r0, #4294967295
 8006d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006da0:	3501      	adds	r5, #1
 8006da2:	e7c6      	b.n	8006d32 <_printf_common+0x3e>
 8006da4:	18e1      	adds	r1, r4, r3
 8006da6:	1c5a      	adds	r2, r3, #1
 8006da8:	2030      	movs	r0, #48	; 0x30
 8006daa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dae:	4422      	add	r2, r4
 8006db0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006db4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006db8:	3302      	adds	r3, #2
 8006dba:	e7c7      	b.n	8006d4c <_printf_common+0x58>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	4622      	mov	r2, r4
 8006dc0:	4649      	mov	r1, r9
 8006dc2:	4638      	mov	r0, r7
 8006dc4:	47c0      	blx	r8
 8006dc6:	3001      	adds	r0, #1
 8006dc8:	d0e6      	beq.n	8006d98 <_printf_common+0xa4>
 8006dca:	3601      	adds	r6, #1
 8006dcc:	e7d9      	b.n	8006d82 <_printf_common+0x8e>
	...

08006dd0 <_printf_i>:
 8006dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd4:	460c      	mov	r4, r1
 8006dd6:	4691      	mov	r9, r2
 8006dd8:	7e27      	ldrb	r7, [r4, #24]
 8006dda:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006ddc:	2f78      	cmp	r7, #120	; 0x78
 8006dde:	4680      	mov	r8, r0
 8006de0:	469a      	mov	sl, r3
 8006de2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006de6:	d807      	bhi.n	8006df8 <_printf_i+0x28>
 8006de8:	2f62      	cmp	r7, #98	; 0x62
 8006dea:	d80a      	bhi.n	8006e02 <_printf_i+0x32>
 8006dec:	2f00      	cmp	r7, #0
 8006dee:	f000 80d8 	beq.w	8006fa2 <_printf_i+0x1d2>
 8006df2:	2f58      	cmp	r7, #88	; 0x58
 8006df4:	f000 80a3 	beq.w	8006f3e <_printf_i+0x16e>
 8006df8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006dfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e00:	e03a      	b.n	8006e78 <_printf_i+0xa8>
 8006e02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e06:	2b15      	cmp	r3, #21
 8006e08:	d8f6      	bhi.n	8006df8 <_printf_i+0x28>
 8006e0a:	a001      	add	r0, pc, #4	; (adr r0, 8006e10 <_printf_i+0x40>)
 8006e0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006e10:	08006e69 	.word	0x08006e69
 8006e14:	08006e7d 	.word	0x08006e7d
 8006e18:	08006df9 	.word	0x08006df9
 8006e1c:	08006df9 	.word	0x08006df9
 8006e20:	08006df9 	.word	0x08006df9
 8006e24:	08006df9 	.word	0x08006df9
 8006e28:	08006e7d 	.word	0x08006e7d
 8006e2c:	08006df9 	.word	0x08006df9
 8006e30:	08006df9 	.word	0x08006df9
 8006e34:	08006df9 	.word	0x08006df9
 8006e38:	08006df9 	.word	0x08006df9
 8006e3c:	08006f89 	.word	0x08006f89
 8006e40:	08006ead 	.word	0x08006ead
 8006e44:	08006f6b 	.word	0x08006f6b
 8006e48:	08006df9 	.word	0x08006df9
 8006e4c:	08006df9 	.word	0x08006df9
 8006e50:	08006fab 	.word	0x08006fab
 8006e54:	08006df9 	.word	0x08006df9
 8006e58:	08006ead 	.word	0x08006ead
 8006e5c:	08006df9 	.word	0x08006df9
 8006e60:	08006df9 	.word	0x08006df9
 8006e64:	08006f73 	.word	0x08006f73
 8006e68:	680b      	ldr	r3, [r1, #0]
 8006e6a:	1d1a      	adds	r2, r3, #4
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	600a      	str	r2, [r1, #0]
 8006e70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e0a3      	b.n	8006fc4 <_printf_i+0x1f4>
 8006e7c:	6825      	ldr	r5, [r4, #0]
 8006e7e:	6808      	ldr	r0, [r1, #0]
 8006e80:	062e      	lsls	r6, r5, #24
 8006e82:	f100 0304 	add.w	r3, r0, #4
 8006e86:	d50a      	bpl.n	8006e9e <_printf_i+0xce>
 8006e88:	6805      	ldr	r5, [r0, #0]
 8006e8a:	600b      	str	r3, [r1, #0]
 8006e8c:	2d00      	cmp	r5, #0
 8006e8e:	da03      	bge.n	8006e98 <_printf_i+0xc8>
 8006e90:	232d      	movs	r3, #45	; 0x2d
 8006e92:	426d      	negs	r5, r5
 8006e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e98:	485e      	ldr	r0, [pc, #376]	; (8007014 <_printf_i+0x244>)
 8006e9a:	230a      	movs	r3, #10
 8006e9c:	e019      	b.n	8006ed2 <_printf_i+0x102>
 8006e9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006ea2:	6805      	ldr	r5, [r0, #0]
 8006ea4:	600b      	str	r3, [r1, #0]
 8006ea6:	bf18      	it	ne
 8006ea8:	b22d      	sxthne	r5, r5
 8006eaa:	e7ef      	b.n	8006e8c <_printf_i+0xbc>
 8006eac:	680b      	ldr	r3, [r1, #0]
 8006eae:	6825      	ldr	r5, [r4, #0]
 8006eb0:	1d18      	adds	r0, r3, #4
 8006eb2:	6008      	str	r0, [r1, #0]
 8006eb4:	0628      	lsls	r0, r5, #24
 8006eb6:	d501      	bpl.n	8006ebc <_printf_i+0xec>
 8006eb8:	681d      	ldr	r5, [r3, #0]
 8006eba:	e002      	b.n	8006ec2 <_printf_i+0xf2>
 8006ebc:	0669      	lsls	r1, r5, #25
 8006ebe:	d5fb      	bpl.n	8006eb8 <_printf_i+0xe8>
 8006ec0:	881d      	ldrh	r5, [r3, #0]
 8006ec2:	4854      	ldr	r0, [pc, #336]	; (8007014 <_printf_i+0x244>)
 8006ec4:	2f6f      	cmp	r7, #111	; 0x6f
 8006ec6:	bf0c      	ite	eq
 8006ec8:	2308      	moveq	r3, #8
 8006eca:	230a      	movne	r3, #10
 8006ecc:	2100      	movs	r1, #0
 8006ece:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ed2:	6866      	ldr	r6, [r4, #4]
 8006ed4:	60a6      	str	r6, [r4, #8]
 8006ed6:	2e00      	cmp	r6, #0
 8006ed8:	bfa2      	ittt	ge
 8006eda:	6821      	ldrge	r1, [r4, #0]
 8006edc:	f021 0104 	bicge.w	r1, r1, #4
 8006ee0:	6021      	strge	r1, [r4, #0]
 8006ee2:	b90d      	cbnz	r5, 8006ee8 <_printf_i+0x118>
 8006ee4:	2e00      	cmp	r6, #0
 8006ee6:	d04d      	beq.n	8006f84 <_printf_i+0x1b4>
 8006ee8:	4616      	mov	r6, r2
 8006eea:	fbb5 f1f3 	udiv	r1, r5, r3
 8006eee:	fb03 5711 	mls	r7, r3, r1, r5
 8006ef2:	5dc7      	ldrb	r7, [r0, r7]
 8006ef4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ef8:	462f      	mov	r7, r5
 8006efa:	42bb      	cmp	r3, r7
 8006efc:	460d      	mov	r5, r1
 8006efe:	d9f4      	bls.n	8006eea <_printf_i+0x11a>
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d10b      	bne.n	8006f1c <_printf_i+0x14c>
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	07df      	lsls	r7, r3, #31
 8006f08:	d508      	bpl.n	8006f1c <_printf_i+0x14c>
 8006f0a:	6923      	ldr	r3, [r4, #16]
 8006f0c:	6861      	ldr	r1, [r4, #4]
 8006f0e:	4299      	cmp	r1, r3
 8006f10:	bfde      	ittt	le
 8006f12:	2330      	movle	r3, #48	; 0x30
 8006f14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f1c:	1b92      	subs	r2, r2, r6
 8006f1e:	6122      	str	r2, [r4, #16]
 8006f20:	f8cd a000 	str.w	sl, [sp]
 8006f24:	464b      	mov	r3, r9
 8006f26:	aa03      	add	r2, sp, #12
 8006f28:	4621      	mov	r1, r4
 8006f2a:	4640      	mov	r0, r8
 8006f2c:	f7ff fee2 	bl	8006cf4 <_printf_common>
 8006f30:	3001      	adds	r0, #1
 8006f32:	d14c      	bne.n	8006fce <_printf_i+0x1fe>
 8006f34:	f04f 30ff 	mov.w	r0, #4294967295
 8006f38:	b004      	add	sp, #16
 8006f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f3e:	4835      	ldr	r0, [pc, #212]	; (8007014 <_printf_i+0x244>)
 8006f40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f44:	6823      	ldr	r3, [r4, #0]
 8006f46:	680e      	ldr	r6, [r1, #0]
 8006f48:	061f      	lsls	r7, r3, #24
 8006f4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8006f4e:	600e      	str	r6, [r1, #0]
 8006f50:	d514      	bpl.n	8006f7c <_printf_i+0x1ac>
 8006f52:	07d9      	lsls	r1, r3, #31
 8006f54:	bf44      	itt	mi
 8006f56:	f043 0320 	orrmi.w	r3, r3, #32
 8006f5a:	6023      	strmi	r3, [r4, #0]
 8006f5c:	b91d      	cbnz	r5, 8006f66 <_printf_i+0x196>
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	f023 0320 	bic.w	r3, r3, #32
 8006f64:	6023      	str	r3, [r4, #0]
 8006f66:	2310      	movs	r3, #16
 8006f68:	e7b0      	b.n	8006ecc <_printf_i+0xfc>
 8006f6a:	6823      	ldr	r3, [r4, #0]
 8006f6c:	f043 0320 	orr.w	r3, r3, #32
 8006f70:	6023      	str	r3, [r4, #0]
 8006f72:	2378      	movs	r3, #120	; 0x78
 8006f74:	4828      	ldr	r0, [pc, #160]	; (8007018 <_printf_i+0x248>)
 8006f76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f7a:	e7e3      	b.n	8006f44 <_printf_i+0x174>
 8006f7c:	065e      	lsls	r6, r3, #25
 8006f7e:	bf48      	it	mi
 8006f80:	b2ad      	uxthmi	r5, r5
 8006f82:	e7e6      	b.n	8006f52 <_printf_i+0x182>
 8006f84:	4616      	mov	r6, r2
 8006f86:	e7bb      	b.n	8006f00 <_printf_i+0x130>
 8006f88:	680b      	ldr	r3, [r1, #0]
 8006f8a:	6826      	ldr	r6, [r4, #0]
 8006f8c:	6960      	ldr	r0, [r4, #20]
 8006f8e:	1d1d      	adds	r5, r3, #4
 8006f90:	600d      	str	r5, [r1, #0]
 8006f92:	0635      	lsls	r5, r6, #24
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	d501      	bpl.n	8006f9c <_printf_i+0x1cc>
 8006f98:	6018      	str	r0, [r3, #0]
 8006f9a:	e002      	b.n	8006fa2 <_printf_i+0x1d2>
 8006f9c:	0671      	lsls	r1, r6, #25
 8006f9e:	d5fb      	bpl.n	8006f98 <_printf_i+0x1c8>
 8006fa0:	8018      	strh	r0, [r3, #0]
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	6123      	str	r3, [r4, #16]
 8006fa6:	4616      	mov	r6, r2
 8006fa8:	e7ba      	b.n	8006f20 <_printf_i+0x150>
 8006faa:	680b      	ldr	r3, [r1, #0]
 8006fac:	1d1a      	adds	r2, r3, #4
 8006fae:	600a      	str	r2, [r1, #0]
 8006fb0:	681e      	ldr	r6, [r3, #0]
 8006fb2:	6862      	ldr	r2, [r4, #4]
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	f7f9 f912 	bl	80001e0 <memchr>
 8006fbc:	b108      	cbz	r0, 8006fc2 <_printf_i+0x1f2>
 8006fbe:	1b80      	subs	r0, r0, r6
 8006fc0:	6060      	str	r0, [r4, #4]
 8006fc2:	6863      	ldr	r3, [r4, #4]
 8006fc4:	6123      	str	r3, [r4, #16]
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fcc:	e7a8      	b.n	8006f20 <_printf_i+0x150>
 8006fce:	6923      	ldr	r3, [r4, #16]
 8006fd0:	4632      	mov	r2, r6
 8006fd2:	4649      	mov	r1, r9
 8006fd4:	4640      	mov	r0, r8
 8006fd6:	47d0      	blx	sl
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d0ab      	beq.n	8006f34 <_printf_i+0x164>
 8006fdc:	6823      	ldr	r3, [r4, #0]
 8006fde:	079b      	lsls	r3, r3, #30
 8006fe0:	d413      	bmi.n	800700a <_printf_i+0x23a>
 8006fe2:	68e0      	ldr	r0, [r4, #12]
 8006fe4:	9b03      	ldr	r3, [sp, #12]
 8006fe6:	4298      	cmp	r0, r3
 8006fe8:	bfb8      	it	lt
 8006fea:	4618      	movlt	r0, r3
 8006fec:	e7a4      	b.n	8006f38 <_printf_i+0x168>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	4632      	mov	r2, r6
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	4640      	mov	r0, r8
 8006ff6:	47d0      	blx	sl
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	d09b      	beq.n	8006f34 <_printf_i+0x164>
 8006ffc:	3501      	adds	r5, #1
 8006ffe:	68e3      	ldr	r3, [r4, #12]
 8007000:	9903      	ldr	r1, [sp, #12]
 8007002:	1a5b      	subs	r3, r3, r1
 8007004:	42ab      	cmp	r3, r5
 8007006:	dcf2      	bgt.n	8006fee <_printf_i+0x21e>
 8007008:	e7eb      	b.n	8006fe2 <_printf_i+0x212>
 800700a:	2500      	movs	r5, #0
 800700c:	f104 0619 	add.w	r6, r4, #25
 8007010:	e7f5      	b.n	8006ffe <_printf_i+0x22e>
 8007012:	bf00      	nop
 8007014:	080079b9 	.word	0x080079b9
 8007018:	080079ca 	.word	0x080079ca

0800701c <memcpy>:
 800701c:	440a      	add	r2, r1
 800701e:	4291      	cmp	r1, r2
 8007020:	f100 33ff 	add.w	r3, r0, #4294967295
 8007024:	d100      	bne.n	8007028 <memcpy+0xc>
 8007026:	4770      	bx	lr
 8007028:	b510      	push	{r4, lr}
 800702a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800702e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007032:	4291      	cmp	r1, r2
 8007034:	d1f9      	bne.n	800702a <memcpy+0xe>
 8007036:	bd10      	pop	{r4, pc}

08007038 <memmove>:
 8007038:	4288      	cmp	r0, r1
 800703a:	b510      	push	{r4, lr}
 800703c:	eb01 0402 	add.w	r4, r1, r2
 8007040:	d902      	bls.n	8007048 <memmove+0x10>
 8007042:	4284      	cmp	r4, r0
 8007044:	4623      	mov	r3, r4
 8007046:	d807      	bhi.n	8007058 <memmove+0x20>
 8007048:	1e43      	subs	r3, r0, #1
 800704a:	42a1      	cmp	r1, r4
 800704c:	d008      	beq.n	8007060 <memmove+0x28>
 800704e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007052:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007056:	e7f8      	b.n	800704a <memmove+0x12>
 8007058:	4402      	add	r2, r0
 800705a:	4601      	mov	r1, r0
 800705c:	428a      	cmp	r2, r1
 800705e:	d100      	bne.n	8007062 <memmove+0x2a>
 8007060:	bd10      	pop	{r4, pc}
 8007062:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007066:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800706a:	e7f7      	b.n	800705c <memmove+0x24>

0800706c <_free_r>:
 800706c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800706e:	2900      	cmp	r1, #0
 8007070:	d048      	beq.n	8007104 <_free_r+0x98>
 8007072:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007076:	9001      	str	r0, [sp, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	f1a1 0404 	sub.w	r4, r1, #4
 800707e:	bfb8      	it	lt
 8007080:	18e4      	addlt	r4, r4, r3
 8007082:	f000 f8d3 	bl	800722c <__malloc_lock>
 8007086:	4a20      	ldr	r2, [pc, #128]	; (8007108 <_free_r+0x9c>)
 8007088:	9801      	ldr	r0, [sp, #4]
 800708a:	6813      	ldr	r3, [r2, #0]
 800708c:	4615      	mov	r5, r2
 800708e:	b933      	cbnz	r3, 800709e <_free_r+0x32>
 8007090:	6063      	str	r3, [r4, #4]
 8007092:	6014      	str	r4, [r2, #0]
 8007094:	b003      	add	sp, #12
 8007096:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800709a:	f000 b8cd 	b.w	8007238 <__malloc_unlock>
 800709e:	42a3      	cmp	r3, r4
 80070a0:	d90b      	bls.n	80070ba <_free_r+0x4e>
 80070a2:	6821      	ldr	r1, [r4, #0]
 80070a4:	1862      	adds	r2, r4, r1
 80070a6:	4293      	cmp	r3, r2
 80070a8:	bf04      	itt	eq
 80070aa:	681a      	ldreq	r2, [r3, #0]
 80070ac:	685b      	ldreq	r3, [r3, #4]
 80070ae:	6063      	str	r3, [r4, #4]
 80070b0:	bf04      	itt	eq
 80070b2:	1852      	addeq	r2, r2, r1
 80070b4:	6022      	streq	r2, [r4, #0]
 80070b6:	602c      	str	r4, [r5, #0]
 80070b8:	e7ec      	b.n	8007094 <_free_r+0x28>
 80070ba:	461a      	mov	r2, r3
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	b10b      	cbz	r3, 80070c4 <_free_r+0x58>
 80070c0:	42a3      	cmp	r3, r4
 80070c2:	d9fa      	bls.n	80070ba <_free_r+0x4e>
 80070c4:	6811      	ldr	r1, [r2, #0]
 80070c6:	1855      	adds	r5, r2, r1
 80070c8:	42a5      	cmp	r5, r4
 80070ca:	d10b      	bne.n	80070e4 <_free_r+0x78>
 80070cc:	6824      	ldr	r4, [r4, #0]
 80070ce:	4421      	add	r1, r4
 80070d0:	1854      	adds	r4, r2, r1
 80070d2:	42a3      	cmp	r3, r4
 80070d4:	6011      	str	r1, [r2, #0]
 80070d6:	d1dd      	bne.n	8007094 <_free_r+0x28>
 80070d8:	681c      	ldr	r4, [r3, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	6053      	str	r3, [r2, #4]
 80070de:	4421      	add	r1, r4
 80070e0:	6011      	str	r1, [r2, #0]
 80070e2:	e7d7      	b.n	8007094 <_free_r+0x28>
 80070e4:	d902      	bls.n	80070ec <_free_r+0x80>
 80070e6:	230c      	movs	r3, #12
 80070e8:	6003      	str	r3, [r0, #0]
 80070ea:	e7d3      	b.n	8007094 <_free_r+0x28>
 80070ec:	6825      	ldr	r5, [r4, #0]
 80070ee:	1961      	adds	r1, r4, r5
 80070f0:	428b      	cmp	r3, r1
 80070f2:	bf04      	itt	eq
 80070f4:	6819      	ldreq	r1, [r3, #0]
 80070f6:	685b      	ldreq	r3, [r3, #4]
 80070f8:	6063      	str	r3, [r4, #4]
 80070fa:	bf04      	itt	eq
 80070fc:	1949      	addeq	r1, r1, r5
 80070fe:	6021      	streq	r1, [r4, #0]
 8007100:	6054      	str	r4, [r2, #4]
 8007102:	e7c7      	b.n	8007094 <_free_r+0x28>
 8007104:	b003      	add	sp, #12
 8007106:	bd30      	pop	{r4, r5, pc}
 8007108:	200008d4 	.word	0x200008d4

0800710c <_malloc_r>:
 800710c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710e:	1ccd      	adds	r5, r1, #3
 8007110:	f025 0503 	bic.w	r5, r5, #3
 8007114:	3508      	adds	r5, #8
 8007116:	2d0c      	cmp	r5, #12
 8007118:	bf38      	it	cc
 800711a:	250c      	movcc	r5, #12
 800711c:	2d00      	cmp	r5, #0
 800711e:	4606      	mov	r6, r0
 8007120:	db01      	blt.n	8007126 <_malloc_r+0x1a>
 8007122:	42a9      	cmp	r1, r5
 8007124:	d903      	bls.n	800712e <_malloc_r+0x22>
 8007126:	230c      	movs	r3, #12
 8007128:	6033      	str	r3, [r6, #0]
 800712a:	2000      	movs	r0, #0
 800712c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800712e:	f000 f87d 	bl	800722c <__malloc_lock>
 8007132:	4921      	ldr	r1, [pc, #132]	; (80071b8 <_malloc_r+0xac>)
 8007134:	680a      	ldr	r2, [r1, #0]
 8007136:	4614      	mov	r4, r2
 8007138:	b99c      	cbnz	r4, 8007162 <_malloc_r+0x56>
 800713a:	4f20      	ldr	r7, [pc, #128]	; (80071bc <_malloc_r+0xb0>)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	b923      	cbnz	r3, 800714a <_malloc_r+0x3e>
 8007140:	4621      	mov	r1, r4
 8007142:	4630      	mov	r0, r6
 8007144:	f000 f862 	bl	800720c <_sbrk_r>
 8007148:	6038      	str	r0, [r7, #0]
 800714a:	4629      	mov	r1, r5
 800714c:	4630      	mov	r0, r6
 800714e:	f000 f85d 	bl	800720c <_sbrk_r>
 8007152:	1c43      	adds	r3, r0, #1
 8007154:	d123      	bne.n	800719e <_malloc_r+0x92>
 8007156:	230c      	movs	r3, #12
 8007158:	6033      	str	r3, [r6, #0]
 800715a:	4630      	mov	r0, r6
 800715c:	f000 f86c 	bl	8007238 <__malloc_unlock>
 8007160:	e7e3      	b.n	800712a <_malloc_r+0x1e>
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	1b5b      	subs	r3, r3, r5
 8007166:	d417      	bmi.n	8007198 <_malloc_r+0x8c>
 8007168:	2b0b      	cmp	r3, #11
 800716a:	d903      	bls.n	8007174 <_malloc_r+0x68>
 800716c:	6023      	str	r3, [r4, #0]
 800716e:	441c      	add	r4, r3
 8007170:	6025      	str	r5, [r4, #0]
 8007172:	e004      	b.n	800717e <_malloc_r+0x72>
 8007174:	6863      	ldr	r3, [r4, #4]
 8007176:	42a2      	cmp	r2, r4
 8007178:	bf0c      	ite	eq
 800717a:	600b      	streq	r3, [r1, #0]
 800717c:	6053      	strne	r3, [r2, #4]
 800717e:	4630      	mov	r0, r6
 8007180:	f000 f85a 	bl	8007238 <__malloc_unlock>
 8007184:	f104 000b 	add.w	r0, r4, #11
 8007188:	1d23      	adds	r3, r4, #4
 800718a:	f020 0007 	bic.w	r0, r0, #7
 800718e:	1ac2      	subs	r2, r0, r3
 8007190:	d0cc      	beq.n	800712c <_malloc_r+0x20>
 8007192:	1a1b      	subs	r3, r3, r0
 8007194:	50a3      	str	r3, [r4, r2]
 8007196:	e7c9      	b.n	800712c <_malloc_r+0x20>
 8007198:	4622      	mov	r2, r4
 800719a:	6864      	ldr	r4, [r4, #4]
 800719c:	e7cc      	b.n	8007138 <_malloc_r+0x2c>
 800719e:	1cc4      	adds	r4, r0, #3
 80071a0:	f024 0403 	bic.w	r4, r4, #3
 80071a4:	42a0      	cmp	r0, r4
 80071a6:	d0e3      	beq.n	8007170 <_malloc_r+0x64>
 80071a8:	1a21      	subs	r1, r4, r0
 80071aa:	4630      	mov	r0, r6
 80071ac:	f000 f82e 	bl	800720c <_sbrk_r>
 80071b0:	3001      	adds	r0, #1
 80071b2:	d1dd      	bne.n	8007170 <_malloc_r+0x64>
 80071b4:	e7cf      	b.n	8007156 <_malloc_r+0x4a>
 80071b6:	bf00      	nop
 80071b8:	200008d4 	.word	0x200008d4
 80071bc:	200008d8 	.word	0x200008d8

080071c0 <_realloc_r>:
 80071c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c2:	4607      	mov	r7, r0
 80071c4:	4614      	mov	r4, r2
 80071c6:	460e      	mov	r6, r1
 80071c8:	b921      	cbnz	r1, 80071d4 <_realloc_r+0x14>
 80071ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80071ce:	4611      	mov	r1, r2
 80071d0:	f7ff bf9c 	b.w	800710c <_malloc_r>
 80071d4:	b922      	cbnz	r2, 80071e0 <_realloc_r+0x20>
 80071d6:	f7ff ff49 	bl	800706c <_free_r>
 80071da:	4625      	mov	r5, r4
 80071dc:	4628      	mov	r0, r5
 80071de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071e0:	f000 f830 	bl	8007244 <_malloc_usable_size_r>
 80071e4:	42a0      	cmp	r0, r4
 80071e6:	d20f      	bcs.n	8007208 <_realloc_r+0x48>
 80071e8:	4621      	mov	r1, r4
 80071ea:	4638      	mov	r0, r7
 80071ec:	f7ff ff8e 	bl	800710c <_malloc_r>
 80071f0:	4605      	mov	r5, r0
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d0f2      	beq.n	80071dc <_realloc_r+0x1c>
 80071f6:	4631      	mov	r1, r6
 80071f8:	4622      	mov	r2, r4
 80071fa:	f7ff ff0f 	bl	800701c <memcpy>
 80071fe:	4631      	mov	r1, r6
 8007200:	4638      	mov	r0, r7
 8007202:	f7ff ff33 	bl	800706c <_free_r>
 8007206:	e7e9      	b.n	80071dc <_realloc_r+0x1c>
 8007208:	4635      	mov	r5, r6
 800720a:	e7e7      	b.n	80071dc <_realloc_r+0x1c>

0800720c <_sbrk_r>:
 800720c:	b538      	push	{r3, r4, r5, lr}
 800720e:	4d06      	ldr	r5, [pc, #24]	; (8007228 <_sbrk_r+0x1c>)
 8007210:	2300      	movs	r3, #0
 8007212:	4604      	mov	r4, r0
 8007214:	4608      	mov	r0, r1
 8007216:	602b      	str	r3, [r5, #0]
 8007218:	f7fb ffa0 	bl	800315c <_sbrk>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	d102      	bne.n	8007226 <_sbrk_r+0x1a>
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	b103      	cbz	r3, 8007226 <_sbrk_r+0x1a>
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	bd38      	pop	{r3, r4, r5, pc}
 8007228:	20000ddc 	.word	0x20000ddc

0800722c <__malloc_lock>:
 800722c:	4801      	ldr	r0, [pc, #4]	; (8007234 <__malloc_lock+0x8>)
 800722e:	f000 b811 	b.w	8007254 <__retarget_lock_acquire_recursive>
 8007232:	bf00      	nop
 8007234:	20000de4 	.word	0x20000de4

08007238 <__malloc_unlock>:
 8007238:	4801      	ldr	r0, [pc, #4]	; (8007240 <__malloc_unlock+0x8>)
 800723a:	f000 b80c 	b.w	8007256 <__retarget_lock_release_recursive>
 800723e:	bf00      	nop
 8007240:	20000de4 	.word	0x20000de4

08007244 <_malloc_usable_size_r>:
 8007244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007248:	1f18      	subs	r0, r3, #4
 800724a:	2b00      	cmp	r3, #0
 800724c:	bfbc      	itt	lt
 800724e:	580b      	ldrlt	r3, [r1, r0]
 8007250:	18c0      	addlt	r0, r0, r3
 8007252:	4770      	bx	lr

08007254 <__retarget_lock_acquire_recursive>:
 8007254:	4770      	bx	lr

08007256 <__retarget_lock_release_recursive>:
 8007256:	4770      	bx	lr

08007258 <_init>:
 8007258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725a:	bf00      	nop
 800725c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800725e:	bc08      	pop	{r3}
 8007260:	469e      	mov	lr, r3
 8007262:	4770      	bx	lr

08007264 <_fini>:
 8007264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007266:	bf00      	nop
 8007268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800726a:	bc08      	pop	{r3}
 800726c:	469e      	mov	lr, r3
 800726e:	4770      	bx	lr
