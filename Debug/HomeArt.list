
HomeArt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008994  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000880  08008b24  08008b24  00018b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093a4  080093a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080093a4  080093a4  000193a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093ac  080093ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093ac  080093ac  000193ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093b0  080093b0  000193b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080093b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000dfc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000e6c  20000e6c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016cf9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003211  00000000  00000000  00036d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc8  00000000  00000000  00039fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ec0  00000000  00000000  0003af78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024656  00000000  00000000  0003be38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b4d  00000000  00000000  0006048e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8e61  00000000  00000000  00075fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014ee3c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004560  00000000  00000000  0014ee90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b0c 	.word	0x08008b0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008b0c 	.word	0x08008b0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468c      	mov	ip, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8083 	bne.w	8000c02 <__udivmoddi4+0x116>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d947      	bls.n	8000b92 <__udivmoddi4+0xa6>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b142      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	f1c2 0020 	rsb	r0, r2, #32
 8000b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b10:	4091      	lsls	r1, r2
 8000b12:	4097      	lsls	r7, r2
 8000b14:	ea40 0c01 	orr.w	ip, r0, r1
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbbc f6f8 	udiv	r6, ip, r8
 8000b24:	fa1f fe87 	uxth.w	lr, r7
 8000b28:	fb08 c116 	mls	r1, r8, r6, ip
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb06 f10e 	mul.w	r1, r6, lr
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b3e:	f080 8119 	bcs.w	8000d74 <__udivmoddi4+0x288>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8116 	bls.w	8000d74 <__udivmoddi4+0x288>
 8000b48:	3e02      	subs	r6, #2
 8000b4a:	443b      	add	r3, r7
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3310 	mls	r3, r8, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8105 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f240 8102 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b74:	3802      	subs	r0, #2
 8000b76:	443c      	add	r4, r7
 8000b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	2600      	movs	r6, #0
 8000b82:	b11d      	cbz	r5, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	b902      	cbnz	r2, 8000b96 <__udivmoddi4+0xaa>
 8000b94:	deff      	udf	#255	; 0xff
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d150      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000b9e:	1bcb      	subs	r3, r1, r7
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	2601      	movs	r6, #1
 8000baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0xe2>
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	f200 80e9 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1ac9      	subs	r1, r1, r3
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x10c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x10a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80d9 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e7bf      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <__udivmoddi4+0x282>
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c12:	4630      	mov	r0, r6
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f683 	clz	r6, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x1cc>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b8 	bhi.w	8000d9c <__udivmoddi4+0x2b0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0a8      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f603 	lsr.w	r6, r0, r3
 8000c48:	4097      	lsls	r7, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c52:	40d9      	lsrs	r1, r3
 8000c54:	4330      	orrs	r0, r6
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb06 f108 	mul.w	r1, r6, r8
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x19c>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c7a:	f080 808d 	bcs.w	8000d98 <__udivmoddi4+0x2ac>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 808a 	bls.w	8000d98 <__udivmoddi4+0x2ac>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b281      	uxth	r1, r0
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb00 f308 	mul.w	r3, r0, r8
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca6:	d273      	bcs.n	8000d90 <__udivmoddi4+0x2a4>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d971      	bls.n	8000d90 <__udivmoddi4+0x2a4>
 8000cac:	3802      	subs	r0, #2
 8000cae:	4439      	add	r1, r7
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cb6:	e778      	b.n	8000baa <__udivmoddi4+0xbe>
 8000cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cca:	fa01 f306 	lsl.w	r3, r1, r6
 8000cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fa1f f884 	uxth.w	r8, r4
 8000ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cea:	fb09 fa08 	mul.w	sl, r9, r8
 8000cee:	458a      	cmp	sl, r1
 8000cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x220>
 8000cfa:	1861      	adds	r1, r4, r1
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d00:	d248      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d02:	458a      	cmp	sl, r1
 8000d04:	d946      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4421      	add	r1, r4
 8000d0c:	eba1 010a 	sub.w	r1, r1, sl
 8000d10:	b2bf      	uxth	r7, r7
 8000d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45b8      	cmp	r8, r7
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x24a>
 8000d26:	19e7      	adds	r7, r4, r7
 8000d28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2c:	d22e      	bcs.n	8000d8c <__udivmoddi4+0x2a0>
 8000d2e:	45b8      	cmp	r8, r7
 8000d30:	d92c      	bls.n	8000d8c <__udivmoddi4+0x2a0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4427      	add	r7, r4
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba7 0708 	sub.w	r7, r7, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454f      	cmp	r7, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	4649      	mov	r1, r9
 8000d48:	d31a      	bcc.n	8000d80 <__udivmoddi4+0x294>
 8000d4a:	d017      	beq.n	8000d7c <__udivmoddi4+0x290>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x27a>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb67 0701 	sbc.w	r7, r7, r1
 8000d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d5a:	40f2      	lsrs	r2, r6
 8000d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d60:	40f7      	lsrs	r7, r6
 8000d62:	e9c5 2700 	strd	r2, r7, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e70b      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fd      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d7c:	4543      	cmp	r3, r8
 8000d7e:	d2e5      	bcs.n	8000d4c <__udivmoddi4+0x260>
 8000d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d84:	eb69 0104 	sbc.w	r1, r9, r4
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7df      	b.n	8000d4c <__udivmoddi4+0x260>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e7d2      	b.n	8000d36 <__udivmoddi4+0x24a>
 8000d90:	4660      	mov	r0, ip
 8000d92:	e78d      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d94:	4681      	mov	r9, r0
 8000d96:	e7b9      	b.n	8000d0c <__udivmoddi4+0x220>
 8000d98:	4666      	mov	r6, ip
 8000d9a:	e775      	b.n	8000c88 <__udivmoddi4+0x19c>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	e74a      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	4439      	add	r1, r7
 8000da6:	e713      	b.n	8000bd0 <__udivmoddi4+0xe4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	e724      	b.n	8000bf8 <__udivmoddi4+0x10c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <DHT22_Set_Pin_Output>:

uint8_t RH_byte1, RH_byte2, Temp_byte1, Temp_byte2;
uint16_t SUM, RH, TEMP;
uint16_t DHT22_presence = 0;

void DHT22_Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	807b      	strh	r3, [r7, #2]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000dd0:	887b      	ldrh	r3, [r7, #2]
 8000dd2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	4619      	mov	r1, r3
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f004 fc8c 	bl	8005700 <HAL_GPIO_Init>
}
 8000de8:	bf00      	nop
 8000dea:	3720      	adds	r7, #32
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <DHT22_Set_Pin_Input>:

void DHT22_Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	807b      	strh	r3, [r7, #2]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000e0c:	887b      	ldrh	r3, [r7, #2]
 8000e0e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e10:	2300      	movs	r3, #0
 8000e12:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP; // cambiar a PULLUP si no funciona así
 8000e14:	2301      	movs	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f004 fc6e 	bl	8005700 <HAL_GPIO_Init>
}
 8000e24:	bf00      	nop
 8000e26:	3720      	adds	r7, #32
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <DHT22_Start>:

void DHT22_Start(void){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0

	DHT22_Set_Pin_Output(DHT22_PORT, DHT22_PIN); // set the pin as output
 8000e30:	2180      	movs	r1, #128	; 0x80
 8000e32:	4811      	ldr	r0, [pc, #68]	; (8000e78 <DHT22_Start+0x4c>)
 8000e34:	f7ff ffbe 	bl	8000db4 <DHT22_Set_Pin_Output>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin low
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2180      	movs	r1, #128	; 0x80
 8000e3c:	480e      	ldr	r0, [pc, #56]	; (8000e78 <DHT22_Start+0x4c>)
 8000e3e:	f004 fe13 	bl	8005a68 <HAL_GPIO_WritePin>
	HAL_Delay(1200);   // wait for > 1ms
 8000e42:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000e46:	f003 fec7 	bl	8004bd8 <HAL_Delay>
	HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2180      	movs	r1, #128	; 0x80
 8000e4e:	480a      	ldr	r0, [pc, #40]	; (8000e78 <DHT22_Start+0x4c>)
 8000e50:	f004 fe0a 	bl	8005a68 <HAL_GPIO_WritePin>
	delay(18000);
 8000e54:	f244 6050 	movw	r0, #18000	; 0x4650
 8000e58:	f002 f890 	bl	8002f7c <delay>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2180      	movs	r1, #128	; 0x80
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <DHT22_Start+0x4c>)
 8000e62:	f004 fe01 	bl	8005a68 <HAL_GPIO_WritePin>
	delay (30);   // wait for 30us
 8000e66:	201e      	movs	r0, #30
 8000e68:	f002 f888 	bl	8002f7c <delay>

	DHT22_Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8000e6c:	2180      	movs	r1, #128	; 0x80
 8000e6e:	4802      	ldr	r0, [pc, #8]	; (8000e78 <DHT22_Start+0x4c>)
 8000e70:	f7ff ffbe 	bl	8000df0 <DHT22_Set_Pin_Input>
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40021000 	.word	0x40021000

08000e7c <DHT22_Check_Response>:

uint8_t DHT22_Check_Response(void){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0

	DHT22_Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	4815      	ldr	r0, [pc, #84]	; (8000edc <DHT22_Check_Response+0x60>)
 8000e86:	f7ff ffb3 	bl	8000df0 <DHT22_Set_Pin_Input>
	uint8_t Response = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	71fb      	strb	r3, [r7, #7]
	delay (40);  // wait for 40us
 8000e8e:	2028      	movs	r0, #40	; 0x28
 8000e90:	f002 f874 	bl	8002f7c <delay>
	if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) // if the pin is low
 8000e94:	2180      	movs	r1, #128	; 0x80
 8000e96:	4811      	ldr	r0, [pc, #68]	; (8000edc <DHT22_Check_Response+0x60>)
 8000e98:	f004 fdce 	bl	8005a38 <HAL_GPIO_ReadPin>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10e      	bne.n	8000ec0 <DHT22_Check_Response+0x44>
	{
		delay (80);   // wait for 80us
 8000ea2:	2050      	movs	r0, #80	; 0x50
 8000ea4:	f002 f86a 	bl	8002f7c <delay>

		if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;  // if the pin is high, response is ok
 8000ea8:	2180      	movs	r1, #128	; 0x80
 8000eaa:	480c      	ldr	r0, [pc, #48]	; (8000edc <DHT22_Check_Response+0x60>)
 8000eac:	f004 fdc4 	bl	8005a38 <HAL_GPIO_ReadPin>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <DHT22_Check_Response+0x40>
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	71fb      	strb	r3, [r7, #7]
 8000eba:	e001      	b.n	8000ec0 <DHT22_Check_Response+0x44>
		else Response = -1;
 8000ebc:	23ff      	movs	r3, #255	; 0xff
 8000ebe:	71fb      	strb	r3, [r7, #7]
	}

	while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go low
 8000ec0:	bf00      	nop
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <DHT22_Check_Response+0x60>)
 8000ec6:	f004 fdb7 	bl	8005a38 <HAL_GPIO_ReadPin>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1f8      	bne.n	8000ec2 <DHT22_Check_Response+0x46>
	return Response;
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000

08000ee0 <DHT22_Read>:

uint8_t DHT22_Read(void){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0

	uint8_t i,j;
	for (j=0;j<8;j++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	71bb      	strb	r3, [r7, #6]
 8000eea:	e037      	b.n	8000f5c <DHT22_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go high
 8000eec:	bf00      	nop
 8000eee:	2180      	movs	r1, #128	; 0x80
 8000ef0:	481e      	ldr	r0, [pc, #120]	; (8000f6c <DHT22_Read+0x8c>)
 8000ef2:	f004 fda1 	bl	8005a38 <HAL_GPIO_ReadPin>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d0f8      	beq.n	8000eee <DHT22_Read+0xe>
		delay (40);   // wait for 40 us
 8000efc:	2028      	movs	r0, #40	; 0x28
 8000efe:	f002 f83d 	bl	8002f7c <delay>

		if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8000f02:	2180      	movs	r1, #128	; 0x80
 8000f04:	4819      	ldr	r0, [pc, #100]	; (8000f6c <DHT22_Read+0x8c>)
 8000f06:	f004 fd97 	bl	8005a38 <HAL_GPIO_ReadPin>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d10e      	bne.n	8000f2e <DHT22_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	2201      	movs	r2, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	b25a      	sxtb	r2, r3
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	4013      	ands	r3, r2
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	71fb      	strb	r3, [r7, #7]
 8000f2c:	e00b      	b.n	8000f46 <DHT22_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
 8000f30:	f1c3 0307 	rsb	r3, r3, #7
 8000f34:	2201      	movs	r2, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	b25a      	sxtb	r2, r3
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));  // wait for the pin to go low
 8000f46:	bf00      	nop
 8000f48:	2180      	movs	r1, #128	; 0x80
 8000f4a:	4808      	ldr	r0, [pc, #32]	; (8000f6c <DHT22_Read+0x8c>)
 8000f4c:	f004 fd74 	bl	8005a38 <HAL_GPIO_ReadPin>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f8      	bne.n	8000f48 <DHT22_Read+0x68>
	for (j=0;j<8;j++)
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	71bb      	strb	r3, [r7, #6]
 8000f5c:	79bb      	ldrb	r3, [r7, #6]
 8000f5e:	2b07      	cmp	r3, #7
 8000f60:	d9c4      	bls.n	8000eec <DHT22_Read+0xc>
	}

	return i;
 8000f62:	79fb      	ldrb	r3, [r7, #7]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40021000 	.word	0x40021000

08000f70 <DHT22_getData>:

void DHT22_getData(DHT22_DataTypedef *DHT_Data){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

	  DHT22_Start();
 8000f78:	f7ff ff58 	bl	8000e2c <DHT22_Start>
	  DHT22_presence = DHT22_Check_Response();
 8000f7c:	f7ff ff7e 	bl	8000e7c <DHT22_Check_Response>
 8000f80:	4603      	mov	r3, r0
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	4b30      	ldr	r3, [pc, #192]	; (8001048 <DHT22_getData+0xd8>)
 8000f86:	801a      	strh	r2, [r3, #0]

	  RH_byte1 = DHT22_Read();
 8000f88:	f7ff ffaa 	bl	8000ee0 <DHT22_Read>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b2e      	ldr	r3, [pc, #184]	; (800104c <DHT22_getData+0xdc>)
 8000f92:	701a      	strb	r2, [r3, #0]
	  RH_byte2 = DHT22_Read();
 8000f94:	f7ff ffa4 	bl	8000ee0 <DHT22_Read>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <DHT22_getData+0xe0>)
 8000f9e:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT22_Read();
 8000fa0:	f7ff ff9e 	bl	8000ee0 <DHT22_Read>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b2a      	ldr	r3, [pc, #168]	; (8001054 <DHT22_getData+0xe4>)
 8000faa:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT22_Read();
 8000fac:	f7ff ff98 	bl	8000ee0 <DHT22_Read>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b28      	ldr	r3, [pc, #160]	; (8001058 <DHT22_getData+0xe8>)
 8000fb6:	701a      	strb	r2, [r3, #0]

	  SUM = DHT22_Read();
 8000fb8:	f7ff ff92 	bl	8000ee0 <DHT22_Read>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	4b26      	ldr	r3, [pc, #152]	; (800105c <DHT22_getData+0xec>)
 8000fc2:	801a      	strh	r2, [r3, #0]

	  RH = ((RH_byte1<<8)|RH_byte2);
 8000fc4:	4b21      	ldr	r3, [pc, #132]	; (800104c <DHT22_getData+0xdc>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	4b20      	ldr	r3, [pc, #128]	; (8001050 <DHT22_getData+0xe0>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	4b21      	ldr	r3, [pc, #132]	; (8001060 <DHT22_getData+0xf0>)
 8000fda:	801a      	strh	r2, [r3, #0]
	  TEMP = ((Temp_byte1<<8)|Temp_byte2);
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <DHT22_getData+0xe4>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	021b      	lsls	r3, r3, #8
 8000fe2:	b21a      	sxth	r2, r3
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <DHT22_getData+0xe8>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <DHT22_getData+0xf4>)
 8000ff2:	801a      	strh	r2, [r3, #0]

	  DHT_Data->Temperature = (float) (TEMP/10.0);
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <DHT22_getData+0xf4>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fa93 	bl	8000524 <__aeabi_i2d>
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <DHT22_getData+0xf8>)
 8001004:	f7ff fc22 	bl	800084c <__aeabi_ddiv>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f7ff fd04 	bl	8000a1c <__aeabi_d2f>
 8001014:	4602      	mov	r2, r0
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	601a      	str	r2, [r3, #0]
	  DHT_Data->Humidity = (float) (RH/10.0);
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <DHT22_getData+0xf0>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fa80 	bl	8000524 <__aeabi_i2d>
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <DHT22_getData+0xf8>)
 800102a:	f7ff fc0f 	bl	800084c <__aeabi_ddiv>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f7ff fcf1 	bl	8000a1c <__aeabi_d2f>
 800103a:	4602      	mov	r2, r0
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	605a      	str	r2, [r3, #4]
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2000008c 	.word	0x2000008c
 800104c:	20000905 	.word	0x20000905
 8001050:	20000909 	.word	0x20000909
 8001054:	20000904 	.word	0x20000904
 8001058:	20000908 	.word	0x20000908
 800105c:	20000906 	.word	0x20000906
 8001060:	20000900 	.word	0x20000900
 8001064:	20000902 	.word	0x20000902
 8001068:	40240000 	.word	0x40240000

0800106c <ESP_clearBuffer>:
char *Terminate = "</body></html>";


/*****************************************************************************************************************************************/

void ESP_clearBuffer(void){
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0

	memset(buffer_app, 0, 60);
 8001070:	223c      	movs	r2, #60	; 0x3c
 8001072:	2100      	movs	r1, #0
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <ESP_clearBuffer+0x18>)
 8001076:	f007 f913 	bl	80082a0 <memset>
	buffer_index = 0;
 800107a:	4b03      	ldr	r3, [pc, #12]	; (8001088 <ESP_clearBuffer+0x1c>)
 800107c:	2200      	movs	r2, #0
 800107e:	801a      	strh	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000930 	.word	0x20000930
 8001088:	20000a52 	.word	0x20000a52

0800108c <ESP_Init>:


void ESP_Init(char *SSID, char *PASSWD){
 800108c:	b580      	push	{r7, lr}
 800108e:	b09a      	sub	sp, #104	; 0x68
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]

	ESP_clearBuffer();
 8001096:	f7ff ffe9 	bl	800106c <ESP_clearBuffer>
	char data[80];

	ringInit();
 800109a:	f001 fb3d 	bl	8002718 <ringInit>

	HAL_Delay(1000);
 800109e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010a2:	f003 fd99 	bl	8004bd8 <HAL_Delay>

	/********** AT **********/

	UART_send("AT\r\n", WiFi_UART);
 80010a6:	4974      	ldr	r1, [pc, #464]	; (8001278 <ESP_Init+0x1ec>)
 80010a8:	4874      	ldr	r0, [pc, #464]	; (800127c <ESP_Init+0x1f0>)
 80010aa:	f001 fcf3 	bl	8002a94 <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 80010ae:	bf00      	nop
 80010b0:	4971      	ldr	r1, [pc, #452]	; (8001278 <ESP_Init+0x1ec>)
 80010b2:	4873      	ldr	r0, [pc, #460]	; (8001280 <ESP_Init+0x1f4>)
 80010b4:	f001 fd84 	bl	8002bc0 <UART_waitFor>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f8      	beq.n	80010b0 <ESP_Init+0x24>
	UART_send("AT  ---->  OK\n", PC_UART);
 80010be:	4971      	ldr	r1, [pc, #452]	; (8001284 <ESP_Init+0x1f8>)
 80010c0:	4871      	ldr	r0, [pc, #452]	; (8001288 <ESP_Init+0x1fc>)
 80010c2:	f001 fce7 	bl	8002a94 <UART_send>


	HAL_Delay(2000);
 80010c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010ca:	f003 fd85 	bl	8004bd8 <HAL_Delay>


	/********** AT+RST **********/
	UART_send("AT+RST\r\n", WiFi_UART);
 80010ce:	496a      	ldr	r1, [pc, #424]	; (8001278 <ESP_Init+0x1ec>)
 80010d0:	486e      	ldr	r0, [pc, #440]	; (800128c <ESP_Init+0x200>)
 80010d2:	f001 fcdf 	bl	8002a94 <UART_send>
	UART_send("\nReseteando ", PC_UART);
 80010d6:	496b      	ldr	r1, [pc, #428]	; (8001284 <ESP_Init+0x1f8>)
 80010d8:	486d      	ldr	r0, [pc, #436]	; (8001290 <ESP_Init+0x204>)
 80010da:	f001 fcdb 	bl	8002a94 <UART_send>

	for (int i=0; i<3; i++)
 80010de:	2300      	movs	r3, #0
 80010e0:	667b      	str	r3, [r7, #100]	; 0x64
 80010e2:	e00a      	b.n	80010fa <ESP_Init+0x6e>
	{
		UART_send(" . ", PC_UART);
 80010e4:	4967      	ldr	r1, [pc, #412]	; (8001284 <ESP_Init+0x1f8>)
 80010e6:	486b      	ldr	r0, [pc, #428]	; (8001294 <ESP_Init+0x208>)
 80010e8:	f001 fcd4 	bl	8002a94 <UART_send>
		HAL_Delay(1500);
 80010ec:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80010f0:	f003 fd72 	bl	8004bd8 <HAL_Delay>
	for (int i=0; i<3; i++)
 80010f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010f6:	3301      	adds	r3, #1
 80010f8:	667b      	str	r3, [r7, #100]	; 0x64
 80010fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	ddf1      	ble.n	80010e4 <ESP_Init+0x58>
	}


	/********** AT **********/
	UART_send("AT\r\n", WiFi_UART);
 8001100:	495d      	ldr	r1, [pc, #372]	; (8001278 <ESP_Init+0x1ec>)
 8001102:	485e      	ldr	r0, [pc, #376]	; (800127c <ESP_Init+0x1f0>)
 8001104:	f001 fcc6 	bl	8002a94 <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 8001108:	bf00      	nop
 800110a:	495b      	ldr	r1, [pc, #364]	; (8001278 <ESP_Init+0x1ec>)
 800110c:	485c      	ldr	r0, [pc, #368]	; (8001280 <ESP_Init+0x1f4>)
 800110e:	f001 fd57 	bl	8002bc0 <UART_waitFor>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0f8      	beq.n	800110a <ESP_Init+0x7e>
	UART_send("\n\nAT  ---->  OK\n\n", PC_UART);
 8001118:	495a      	ldr	r1, [pc, #360]	; (8001284 <ESP_Init+0x1f8>)
 800111a:	485f      	ldr	r0, [pc, #380]	; (8001298 <ESP_Init+0x20c>)
 800111c:	f001 fcba 	bl	8002a94 <UART_send>


	HAL_Delay(2000);
 8001120:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001124:	f003 fd58 	bl	8004bd8 <HAL_Delay>


	/********** AT+CWMODE=3 **********/
	UART_send("AT+CWMODE=3\r\n", WiFi_UART);
 8001128:	4953      	ldr	r1, [pc, #332]	; (8001278 <ESP_Init+0x1ec>)
 800112a:	485c      	ldr	r0, [pc, #368]	; (800129c <ESP_Init+0x210>)
 800112c:	f001 fcb2 	bl	8002a94 <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 8001130:	bf00      	nop
 8001132:	4951      	ldr	r1, [pc, #324]	; (8001278 <ESP_Init+0x1ec>)
 8001134:	4852      	ldr	r0, [pc, #328]	; (8001280 <ESP_Init+0x1f4>)
 8001136:	f001 fd43 	bl	8002bc0 <UART_waitFor>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0f8      	beq.n	8001132 <ESP_Init+0xa6>
	UART_send("CW MODE  ---->  3\n\n", PC_UART);
 8001140:	4950      	ldr	r1, [pc, #320]	; (8001284 <ESP_Init+0x1f8>)
 8001142:	4857      	ldr	r0, [pc, #348]	; (80012a0 <ESP_Init+0x214>)
 8001144:	f001 fca6 	bl	8002a94 <UART_send>


	/********** AT+CWJAP="SSID","PASSWD" **********/
	UART_send("Conectando con la RED proporcionada ", PC_UART);
 8001148:	494e      	ldr	r1, [pc, #312]	; (8001284 <ESP_Init+0x1f8>)
 800114a:	4856      	ldr	r0, [pc, #344]	; (80012a4 <ESP_Init+0x218>)
 800114c:	f001 fca2 	bl	8002a94 <UART_send>

	for (int i=0; i<3; i++)
 8001150:	2300      	movs	r3, #0
 8001152:	663b      	str	r3, [r7, #96]	; 0x60
 8001154:	e00a      	b.n	800116c <ESP_Init+0xe0>
	{
		UART_send(" . ", PC_UART);
 8001156:	494b      	ldr	r1, [pc, #300]	; (8001284 <ESP_Init+0x1f8>)
 8001158:	484e      	ldr	r0, [pc, #312]	; (8001294 <ESP_Init+0x208>)
 800115a:	f001 fc9b 	bl	8002a94 <UART_send>
		HAL_Delay(1500);
 800115e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001162:	f003 fd39 	bl	8004bd8 <HAL_Delay>
	for (int i=0; i<3; i++)
 8001166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001168:	3301      	adds	r3, #1
 800116a:	663b      	str	r3, [r7, #96]	; 0x60
 800116c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800116e:	2b02      	cmp	r3, #2
 8001170:	ddf1      	ble.n	8001156 <ESP_Init+0xca>
	}

	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8001172:	f107 000c 	add.w	r0, r7, #12
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	494b      	ldr	r1, [pc, #300]	; (80012a8 <ESP_Init+0x21c>)
 800117c:	f007 f898 	bl	80082b0 <siprintf>
	UART_send(data, WiFi_UART);
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	493c      	ldr	r1, [pc, #240]	; (8001278 <ESP_Init+0x1ec>)
 8001186:	4618      	mov	r0, r3
 8001188:	f001 fc84 	bl	8002a94 <UART_send>
	while (!(UART_waitFor("WIFI GOT IP\r\n\r\nOK\r\n", WiFi_UART)));
 800118c:	bf00      	nop
 800118e:	493a      	ldr	r1, [pc, #232]	; (8001278 <ESP_Init+0x1ec>)
 8001190:	4846      	ldr	r0, [pc, #280]	; (80012ac <ESP_Init+0x220>)
 8001192:	f001 fd15 	bl	8002bc0 <UART_waitFor>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f8      	beq.n	800118e <ESP_Init+0x102>
	sprintf (data, "\n\nConectado a  \"%s\"\n\n", SSID);
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	4943      	ldr	r1, [pc, #268]	; (80012b0 <ESP_Init+0x224>)
 80011a4:	4618      	mov	r0, r3
 80011a6:	f007 f883 	bl	80082b0 <siprintf>
	UART_send(data,PC_UART);
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	4935      	ldr	r1, [pc, #212]	; (8001284 <ESP_Init+0x1f8>)
 80011b0:	4618      	mov	r0, r3
 80011b2:	f001 fc6f 	bl	8002a94 <UART_send>
	//UART_send("AT+CIPSTA?\r\n", WiFi_UART);
	//sprintf (data, "AT+CIPSTA?\r\n");


	/********** AT+CIFSR **********/
	UART_send("AT+CIFSR\r\n", WiFi_UART);
 80011b6:	4930      	ldr	r1, [pc, #192]	; (8001278 <ESP_Init+0x1ec>)
 80011b8:	483e      	ldr	r0, [pc, #248]	; (80012b4 <ESP_Init+0x228>)
 80011ba:	f001 fc6b 	bl	8002a94 <UART_send>
	while (!(UART_waitFor("CIFSR:STAIP,\"", WiFi_UART)));
 80011be:	bf00      	nop
 80011c0:	492d      	ldr	r1, [pc, #180]	; (8001278 <ESP_Init+0x1ec>)
 80011c2:	483d      	ldr	r0, [pc, #244]	; (80012b8 <ESP_Init+0x22c>)
 80011c4:	f001 fcfc 	bl	8002bc0 <UART_waitFor>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f8      	beq.n	80011c0 <ESP_Init+0x134>
	while (!(UART_copyUpto("\"",buffer, WiFi_UART)));
 80011ce:	bf00      	nop
 80011d0:	4a29      	ldr	r2, [pc, #164]	; (8001278 <ESP_Init+0x1ec>)
 80011d2:	493a      	ldr	r1, [pc, #232]	; (80012bc <ESP_Init+0x230>)
 80011d4:	483a      	ldr	r0, [pc, #232]	; (80012c0 <ESP_Init+0x234>)
 80011d6:	f001 fc75 	bl	8002ac4 <UART_copyUpto>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f7      	beq.n	80011d0 <ESP_Init+0x144>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 80011e0:	bf00      	nop
 80011e2:	4925      	ldr	r1, [pc, #148]	; (8001278 <ESP_Init+0x1ec>)
 80011e4:	4826      	ldr	r0, [pc, #152]	; (8001280 <ESP_Init+0x1f4>)
 80011e6:	f001 fceb 	bl	8002bc0 <UART_waitFor>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f8      	beq.n	80011e2 <ESP_Init+0x156>
	int len = strlen (buffer);
 80011f0:	4832      	ldr	r0, [pc, #200]	; (80012bc <ESP_Init+0x230>)
 80011f2:	f7fe ffed 	bl	80001d0 <strlen>
 80011f6:	4603      	mov	r3, r0
 80011f8:	65fb      	str	r3, [r7, #92]	; 0x5c
	buffer[len-1] = '\0';
 80011fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011fc:	3b01      	subs	r3, #1
 80011fe:	4a2f      	ldr	r2, [pc, #188]	; (80012bc <ESP_Init+0x230>)
 8001200:	2100      	movs	r1, #0
 8001202:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP :  %s\n\n", buffer);
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	4a2c      	ldr	r2, [pc, #176]	; (80012bc <ESP_Init+0x230>)
 800120a:	492e      	ldr	r1, [pc, #184]	; (80012c4 <ESP_Init+0x238>)
 800120c:	4618      	mov	r0, r3
 800120e:	f007 f84f 	bl	80082b0 <siprintf>
	UART_send(data, PC_UART);
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	491b      	ldr	r1, [pc, #108]	; (8001284 <ESP_Init+0x1f8>)
 8001218:	4618      	mov	r0, r3
 800121a:	f001 fc3b 	bl	8002a94 <UART_send>


	/********** AT+CIPMUX=1 **********/
	UART_send("AT+CIPMUX=1\r\n", WiFi_UART);
 800121e:	4916      	ldr	r1, [pc, #88]	; (8001278 <ESP_Init+0x1ec>)
 8001220:	4829      	ldr	r0, [pc, #164]	; (80012c8 <ESP_Init+0x23c>)
 8001222:	f001 fc37 	bl	8002a94 <UART_send>
	while (!(UART_waitFor("AT+CIPMUX=1\r\r\n\r\nOK\r\n", WiFi_UART)));
 8001226:	bf00      	nop
 8001228:	4913      	ldr	r1, [pc, #76]	; (8001278 <ESP_Init+0x1ec>)
 800122a:	4828      	ldr	r0, [pc, #160]	; (80012cc <ESP_Init+0x240>)
 800122c:	f001 fcc8 	bl	8002bc0 <UART_waitFor>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f8      	beq.n	8001228 <ESP_Init+0x19c>
	UART_send("CIPMUX  ---->  OK\n\n", PC_UART);
 8001236:	4913      	ldr	r1, [pc, #76]	; (8001284 <ESP_Init+0x1f8>)
 8001238:	4825      	ldr	r0, [pc, #148]	; (80012d0 <ESP_Init+0x244>)
 800123a:	f001 fc2b 	bl	8002a94 <UART_send>
	//while (!(UART_waitFor("OK\r\n", WiFi_UART)));
	//UART_send("CIPSTART  ---->  OK\n\n", PC_UART);


	/********** AT+CIPSERVER=1,80 **********/
	UART_send("AT+CIPSERVER=1,80\r\n", WiFi_UART);
 800123e:	490e      	ldr	r1, [pc, #56]	; (8001278 <ESP_Init+0x1ec>)
 8001240:	4824      	ldr	r0, [pc, #144]	; (80012d4 <ESP_Init+0x248>)
 8001242:	f001 fc27 	bl	8002a94 <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 8001246:	bf00      	nop
 8001248:	490b      	ldr	r1, [pc, #44]	; (8001278 <ESP_Init+0x1ec>)
 800124a:	480d      	ldr	r0, [pc, #52]	; (8001280 <ESP_Init+0x1f4>)
 800124c:	f001 fcb8 	bl	8002bc0 <UART_waitFor>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0f8      	beq.n	8001248 <ESP_Init+0x1bc>
	UART_send("CIPSERVER  ---->  OK\n\n", PC_UART);
 8001256:	490b      	ldr	r1, [pc, #44]	; (8001284 <ESP_Init+0x1f8>)
 8001258:	481f      	ldr	r0, [pc, #124]	; (80012d8 <ESP_Init+0x24c>)
 800125a:	f001 fc1b 	bl	8002a94 <UART_send>


	/********** FIN **********/
	UART_send("Conectado a la IP\n\n", PC_UART);
 800125e:	4909      	ldr	r1, [pc, #36]	; (8001284 <ESP_Init+0x1f8>)
 8001260:	481e      	ldr	r0, [pc, #120]	; (80012dc <ESP_Init+0x250>)
 8001262:	f001 fc17 	bl	8002a94 <UART_send>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1); // CONNECTED
 8001266:	2201      	movs	r2, #1
 8001268:	2101      	movs	r1, #1
 800126a:	481d      	ldr	r0, [pc, #116]	; (80012e0 <ESP_Init+0x254>)
 800126c:	f004 fbfc 	bl	8005a68 <HAL_GPIO_WritePin>
}
 8001270:	bf00      	nop
 8001272:	3768      	adds	r7, #104	; 0x68
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000e0c 	.word	0x20000e0c
 800127c:	08008f38 	.word	0x08008f38
 8001280:	08008f40 	.word	0x08008f40
 8001284:	20000d80 	.word	0x20000d80
 8001288:	08008f48 	.word	0x08008f48
 800128c:	08008f58 	.word	0x08008f58
 8001290:	08008f64 	.word	0x08008f64
 8001294:	08008f74 	.word	0x08008f74
 8001298:	08008f78 	.word	0x08008f78
 800129c:	08008f8c 	.word	0x08008f8c
 80012a0:	08008f9c 	.word	0x08008f9c
 80012a4:	08008fb0 	.word	0x08008fb0
 80012a8:	08008fd8 	.word	0x08008fd8
 80012ac:	08008ff0 	.word	0x08008ff0
 80012b0:	08009004 	.word	0x08009004
 80012b4:	0800901c 	.word	0x0800901c
 80012b8:	08009028 	.word	0x08009028
 80012bc:	20000988 	.word	0x20000988
 80012c0:	08009038 	.word	0x08009038
 80012c4:	0800903c 	.word	0x0800903c
 80012c8:	08009048 	.word	0x08009048
 80012cc:	08009058 	.word	0x08009058
 80012d0:	08009070 	.word	0x08009070
 80012d4:	08009084 	.word	0x08009084
 80012d8:	08009098 	.word	0x08009098
 80012dc:	080090b0 	.word	0x080090b0
 80012e0:	40020800 	.word	0x40020800

080012e4 <ESP_messageHandler>:
	}
	return -1;
}


void ESP_messageHandler(void){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0

	//__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);

	memset(textrc, 0, 100);
 80012e8:	2264      	movs	r2, #100	; 0x64
 80012ea:	2100      	movs	r1, #0
 80012ec:	48a2      	ldr	r0, [pc, #648]	; (8001578 <ESP_messageHandler+0x294>)
 80012ee:	f006 ffd7 	bl	80082a0 <memset>

	HAL_UART_Receive(&huart2, (uint8_t *)textrc, 100, 100); //(uint8_t *)
 80012f2:	2364      	movs	r3, #100	; 0x64
 80012f4:	2264      	movs	r2, #100	; 0x64
 80012f6:	49a0      	ldr	r1, [pc, #640]	; (8001578 <ESP_messageHandler+0x294>)
 80012f8:	48a0      	ldr	r0, [pc, #640]	; (800157c <ESP_messageHandler+0x298>)
 80012fa:	f006 f87c 	bl	80073f6 <HAL_UART_Receive>

	HAL_UART_Transmit(&huart6, (uint8_t *)textrc, 100, HAL_MAX_DELAY);
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	2264      	movs	r2, #100	; 0x64
 8001304:	499c      	ldr	r1, [pc, #624]	; (8001578 <ESP_messageHandler+0x294>)
 8001306:	489e      	ldr	r0, [pc, #632]	; (8001580 <ESP_messageHandler+0x29c>)
 8001308:	f005 ffe3 	bl	80072d2 <HAL_UART_Transmit>
	UART_send("\n", PC_UART);
 800130c:	499c      	ldr	r1, [pc, #624]	; (8001580 <ESP_messageHandler+0x29c>)
 800130e:	489d      	ldr	r0, [pc, #628]	; (8001584 <ESP_messageHandler+0x2a0>)
 8001310:	f001 fbc0 	bl	8002a94 <UART_send>

	fragment[0] = textrc[25]; // Asignación de Fragmento
 8001314:	4b98      	ldr	r3, [pc, #608]	; (8001578 <ESP_messageHandler+0x294>)
 8001316:	7e5a      	ldrb	r2, [r3, #25]
 8001318:	4b9b      	ldr	r3, [pc, #620]	; (8001588 <ESP_messageHandler+0x2a4>)
 800131a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart6, (uint8_t *)fragment, 1, HAL_MAX_DELAY);
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
 8001320:	2201      	movs	r2, #1
 8001322:	4999      	ldr	r1, [pc, #612]	; (8001588 <ESP_messageHandler+0x2a4>)
 8001324:	4896      	ldr	r0, [pc, #600]	; (8001580 <ESP_messageHandler+0x29c>)
 8001326:	f005 ffd4 	bl	80072d2 <HAL_UART_Transmit>
	UART_send("\n", PC_UART);
 800132a:	4995      	ldr	r1, [pc, #596]	; (8001580 <ESP_messageHandler+0x29c>)
 800132c:	4895      	ldr	r0, [pc, #596]	; (8001584 <ESP_messageHandler+0x2a0>)
 800132e:	f001 fbb1 	bl	8002a94 <UART_send>


	// SENSORES DHT22
	actSensor = 0;
 8001332:	4b96      	ldr	r3, [pc, #600]	; (800158c <ESP_messageHandler+0x2a8>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]

	if(textrc[27] == '[') actSensor = 1;
 8001338:	4b8f      	ldr	r3, [pc, #572]	; (8001578 <ESP_messageHandler+0x294>)
 800133a:	7edb      	ldrb	r3, [r3, #27]
 800133c:	2b5b      	cmp	r3, #91	; 0x5b
 800133e:	d102      	bne.n	8001346 <ESP_messageHandler+0x62>
 8001340:	4b92      	ldr	r3, [pc, #584]	; (800158c <ESP_messageHandler+0x2a8>)
 8001342:	2201      	movs	r2, #1
 8001344:	601a      	str	r2, [r3, #0]

	// SEGURIDAD
	if (fragment[0] == 's'){
 8001346:	4b90      	ldr	r3, [pc, #576]	; (8001588 <ESP_messageHandler+0x2a4>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b73      	cmp	r3, #115	; 0x73
 800134c:	d10b      	bne.n	8001366 <ESP_messageHandler+0x82>
		UART_send("SEGURIDAD \n", PC_UART);
 800134e:	498c      	ldr	r1, [pc, #560]	; (8001580 <ESP_messageHandler+0x29c>)
 8001350:	488f      	ldr	r0, [pc, #572]	; (8001590 <ESP_messageHandler+0x2ac>)
 8001352:	f001 fb9f 	bl	8002a94 <UART_send>
		vSeg[0] = textrc[28]; // Alarma Interior
 8001356:	4b88      	ldr	r3, [pc, #544]	; (8001578 <ESP_messageHandler+0x294>)
 8001358:	7f1a      	ldrb	r2, [r3, #28]
 800135a:	4b8e      	ldr	r3, [pc, #568]	; (8001594 <ESP_messageHandler+0x2b0>)
 800135c:	701a      	strb	r2, [r3, #0]
		vSeg[1] = textrc[31]; // Alarma Exterior
 800135e:	4b86      	ldr	r3, [pc, #536]	; (8001578 <ESP_messageHandler+0x294>)
 8001360:	7fda      	ldrb	r2, [r3, #31]
 8001362:	4b8c      	ldr	r3, [pc, #560]	; (8001594 <ESP_messageHandler+0x2b0>)
 8001364:	705a      	strb	r2, [r3, #1]
	}

	// ILUMINACIÓN
	if (fragment[0] == 'i'){
 8001366:	4b88      	ldr	r3, [pc, #544]	; (8001588 <ESP_messageHandler+0x2a4>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b69      	cmp	r3, #105	; 0x69
 800136c:	f040 82c9 	bne.w	8001902 <ESP_messageHandler+0x61e>
		UART_send("ILUMINACION \n", PC_UART);
 8001370:	4983      	ldr	r1, [pc, #524]	; (8001580 <ESP_messageHandler+0x29c>)
 8001372:	4889      	ldr	r0, [pc, #548]	; (8001598 <ESP_messageHandler+0x2b4>)
 8001374:	f001 fb8e 	bl	8002a94 <UART_send>
		vIlum[0] = textrc[28]; 	// Luz Sala
 8001378:	4b7f      	ldr	r3, [pc, #508]	; (8001578 <ESP_messageHandler+0x294>)
 800137a:	7f1a      	ldrb	r2, [r3, #28]
 800137c:	4b87      	ldr	r3, [pc, #540]	; (800159c <ESP_messageHandler+0x2b8>)
 800137e:	701a      	strb	r2, [r3, #0]
		vIlum[1] = textrc[31]; 	// Luz Comedor
 8001380:	4b7d      	ldr	r3, [pc, #500]	; (8001578 <ESP_messageHandler+0x294>)
 8001382:	7fda      	ldrb	r2, [r3, #31]
 8001384:	4b85      	ldr	r3, [pc, #532]	; (800159c <ESP_messageHandler+0x2b8>)
 8001386:	705a      	strb	r2, [r3, #1]
		vIlum[2] = textrc[34]; 	// Luz Ambiente
 8001388:	4b7b      	ldr	r3, [pc, #492]	; (8001578 <ESP_messageHandler+0x294>)
 800138a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800138e:	4b83      	ldr	r3, [pc, #524]	; (800159c <ESP_messageHandler+0x2b8>)
 8001390:	709a      	strb	r2, [r3, #2]
		vIlum[3] = textrc[37]; 	// Luz Recibidor
 8001392:	4b79      	ldr	r3, [pc, #484]	; (8001578 <ESP_messageHandler+0x294>)
 8001394:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001398:	4b80      	ldr	r3, [pc, #512]	; (800159c <ESP_messageHandler+0x2b8>)
 800139a:	70da      	strb	r2, [r3, #3]
		vIlum[4] = textrc[40]; 	// Luz Cocina
 800139c:	4b76      	ldr	r3, [pc, #472]	; (8001578 <ESP_messageHandler+0x294>)
 800139e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80013a2:	4b7e      	ldr	r3, [pc, #504]	; (800159c <ESP_messageHandler+0x2b8>)
 80013a4:	711a      	strb	r2, [r3, #4]
		vIlum[5] = textrc[43]; 	// Luz Fregadero
 80013a6:	4b74      	ldr	r3, [pc, #464]	; (8001578 <ESP_messageHandler+0x294>)
 80013a8:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80013ac:	4b7b      	ldr	r3, [pc, #492]	; (800159c <ESP_messageHandler+0x2b8>)
 80013ae:	715a      	strb	r2, [r3, #5]
		vIlum[6] = textrc[46]; 	// Luz Baño
 80013b0:	4b71      	ldr	r3, [pc, #452]	; (8001578 <ESP_messageHandler+0x294>)
 80013b2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80013b6:	4b79      	ldr	r3, [pc, #484]	; (800159c <ESP_messageHandler+0x2b8>)
 80013b8:	719a      	strb	r2, [r3, #6]
		vIlum[7] = textrc[49]; 	// Luz Espejo
 80013ba:	4b6f      	ldr	r3, [pc, #444]	; (8001578 <ESP_messageHandler+0x294>)
 80013bc:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80013c0:	4b76      	ldr	r3, [pc, #472]	; (800159c <ESP_messageHandler+0x2b8>)
 80013c2:	71da      	strb	r2, [r3, #7]
		vIlum[8] = textrc[52]; 	// Luz Dormitorio
 80013c4:	4b6c      	ldr	r3, [pc, #432]	; (8001578 <ESP_messageHandler+0x294>)
 80013c6:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80013ca:	4b74      	ldr	r3, [pc, #464]	; (800159c <ESP_messageHandler+0x2b8>)
 80013cc:	721a      	strb	r2, [r3, #8]
		vIlum[9] = textrc[55]; 	// Luz Mesita Izq
 80013ce:	4b6a      	ldr	r3, [pc, #424]	; (8001578 <ESP_messageHandler+0x294>)
 80013d0:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80013d4:	4b71      	ldr	r3, [pc, #452]	; (800159c <ESP_messageHandler+0x2b8>)
 80013d6:	725a      	strb	r2, [r3, #9]
		vIlum[10] = textrc[58]; // Luz Mesita Dch
 80013d8:	4b67      	ldr	r3, [pc, #412]	; (8001578 <ESP_messageHandler+0x294>)
 80013da:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80013de:	4b6f      	ldr	r3, [pc, #444]	; (800159c <ESP_messageHandler+0x2b8>)
 80013e0:	729a      	strb	r2, [r3, #10]
		vIlum[11] = textrc[61]; // Luz Oficina
 80013e2:	4b65      	ldr	r3, [pc, #404]	; (8001578 <ESP_messageHandler+0x294>)
 80013e4:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80013e8:	4b6c      	ldr	r3, [pc, #432]	; (800159c <ESP_messageHandler+0x2b8>)
 80013ea:	72da      	strb	r2, [r3, #11]
		vIlum[12] = textrc[64]; // Luz Gaming
 80013ec:	4b62      	ldr	r3, [pc, #392]	; (8001578 <ESP_messageHandler+0x294>)
 80013ee:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80013f2:	4b6a      	ldr	r3, [pc, #424]	; (800159c <ESP_messageHandler+0x2b8>)
 80013f4:	731a      	strb	r2, [r3, #12]
		vIlum[13] = textrc[67]; // Luz Rx100
 80013f6:	4b60      	ldr	r3, [pc, #384]	; (8001578 <ESP_messageHandler+0x294>)
 80013f8:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80013fc:	4b67      	ldr	r3, [pc, #412]	; (800159c <ESP_messageHandler+0x2b8>)
 80013fe:	735a      	strb	r2, [r3, #13]
		vIlum[14] = textrc[68]; // Luz Rx10
 8001400:	4b5d      	ldr	r3, [pc, #372]	; (8001578 <ESP_messageHandler+0x294>)
 8001402:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8001406:	4b65      	ldr	r3, [pc, #404]	; (800159c <ESP_messageHandler+0x2b8>)
 8001408:	739a      	strb	r2, [r3, #14]
		vIlum[15] = textrc[69]; // Luz Rx1
 800140a:	4b5b      	ldr	r3, [pc, #364]	; (8001578 <ESP_messageHandler+0x294>)
 800140c:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8001410:	4b62      	ldr	r3, [pc, #392]	; (800159c <ESP_messageHandler+0x2b8>)
 8001412:	73da      	strb	r2, [r3, #15]
		vIlum[16] = textrc[72]; // Luz Gx100
 8001414:	4b58      	ldr	r3, [pc, #352]	; (8001578 <ESP_messageHandler+0x294>)
 8001416:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800141a:	4b60      	ldr	r3, [pc, #384]	; (800159c <ESP_messageHandler+0x2b8>)
 800141c:	741a      	strb	r2, [r3, #16]
		vIlum[17] = textrc[73]; // Luz Gx10
 800141e:	4b56      	ldr	r3, [pc, #344]	; (8001578 <ESP_messageHandler+0x294>)
 8001420:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8001424:	4b5d      	ldr	r3, [pc, #372]	; (800159c <ESP_messageHandler+0x2b8>)
 8001426:	745a      	strb	r2, [r3, #17]
		vIlum[18] = textrc[74]; // Luz Gx1
 8001428:	4b53      	ldr	r3, [pc, #332]	; (8001578 <ESP_messageHandler+0x294>)
 800142a:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 800142e:	4b5b      	ldr	r3, [pc, #364]	; (800159c <ESP_messageHandler+0x2b8>)
 8001430:	749a      	strb	r2, [r3, #18]
		vIlum[19] = textrc[77]; // Luz Bx100
 8001432:	4b51      	ldr	r3, [pc, #324]	; (8001578 <ESP_messageHandler+0x294>)
 8001434:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8001438:	4b58      	ldr	r3, [pc, #352]	; (800159c <ESP_messageHandler+0x2b8>)
 800143a:	74da      	strb	r2, [r3, #19]
		vIlum[20] = textrc[78]; // Luz Bx10
 800143c:	4b4e      	ldr	r3, [pc, #312]	; (8001578 <ESP_messageHandler+0x294>)
 800143e:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8001442:	4b56      	ldr	r3, [pc, #344]	; (800159c <ESP_messageHandler+0x2b8>)
 8001444:	751a      	strb	r2, [r3, #20]
		vIlum[21] = textrc[79]; // Luz Bx1
 8001446:	4b4c      	ldr	r3, [pc, #304]	; (8001578 <ESP_messageHandler+0x294>)
 8001448:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 800144c:	4b53      	ldr	r3, [pc, #332]	; (800159c <ESP_messageHandler+0x2b8>)
 800144e:	755a      	strb	r2, [r3, #21]
		vIlum[22] = textrc[82]; // Luz Garaje
 8001450:	4b49      	ldr	r3, [pc, #292]	; (8001578 <ESP_messageHandler+0x294>)
 8001452:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8001456:	4b51      	ldr	r3, [pc, #324]	; (800159c <ESP_messageHandler+0x2b8>)
 8001458:	759a      	strb	r2, [r3, #22]
		vIlum[23] = textrc[85]; // Luz Jardín
 800145a:	4b47      	ldr	r3, [pc, #284]	; (8001578 <ESP_messageHandler+0x294>)
 800145c:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8001460:	4b4e      	ldr	r3, [pc, #312]	; (800159c <ESP_messageHandler+0x2b8>)
 8001462:	75da      	strb	r2, [r3, #23]
		vIlum[24] = textrc[88]; // Luz Porche
 8001464:	4b44      	ldr	r3, [pc, #272]	; (8001578 <ESP_messageHandler+0x294>)
 8001466:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800146a:	4b4c      	ldr	r3, [pc, #304]	; (800159c <ESP_messageHandler+0x2b8>)
 800146c:	761a      	strb	r2, [r3, #24]
		vIlum[25] = textrc[91]; // Luz Tendedero
 800146e:	4b42      	ldr	r3, [pc, #264]	; (8001578 <ESP_messageHandler+0x294>)
 8001470:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 8001474:	4b49      	ldr	r3, [pc, #292]	; (800159c <ESP_messageHandler+0x2b8>)
 8001476:	765a      	strb	r2, [r3, #25]
		vIlum[26] = textrc[94]; // Automático
 8001478:	4b3f      	ldr	r3, [pc, #252]	; (8001578 <ESP_messageHandler+0x294>)
 800147a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 800147e:	4b47      	ldr	r3, [pc, #284]	; (800159c <ESP_messageHandler+0x2b8>)
 8001480:	769a      	strb	r2, [r3, #26]


		if(vIlum[0] == '0' || vSal[1] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, RESET); // Luz Sala
 8001482:	4b46      	ldr	r3, [pc, #280]	; (800159c <ESP_messageHandler+0x2b8>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b30      	cmp	r3, #48	; 0x30
 8001488:	d003      	beq.n	8001492 <ESP_messageHandler+0x1ae>
 800148a:	4b45      	ldr	r3, [pc, #276]	; (80015a0 <ESP_messageHandler+0x2bc>)
 800148c:	785b      	ldrb	r3, [r3, #1]
 800148e:	2b30      	cmp	r3, #48	; 0x30
 8001490:	d105      	bne.n	800149e <ESP_messageHandler+0x1ba>
 8001492:	2200      	movs	r2, #0
 8001494:	2108      	movs	r1, #8
 8001496:	4843      	ldr	r0, [pc, #268]	; (80015a4 <ESP_messageHandler+0x2c0>)
 8001498:	f004 fae6 	bl	8005a68 <HAL_GPIO_WritePin>
 800149c:	e00c      	b.n	80014b8 <ESP_messageHandler+0x1d4>
		else if(vIlum[0] == '1' || vSal[1] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, SET);
 800149e:	4b3f      	ldr	r3, [pc, #252]	; (800159c <ESP_messageHandler+0x2b8>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b31      	cmp	r3, #49	; 0x31
 80014a4:	d003      	beq.n	80014ae <ESP_messageHandler+0x1ca>
 80014a6:	4b3e      	ldr	r3, [pc, #248]	; (80015a0 <ESP_messageHandler+0x2bc>)
 80014a8:	785b      	ldrb	r3, [r3, #1]
 80014aa:	2b31      	cmp	r3, #49	; 0x31
 80014ac:	d104      	bne.n	80014b8 <ESP_messageHandler+0x1d4>
 80014ae:	2201      	movs	r2, #1
 80014b0:	2108      	movs	r1, #8
 80014b2:	483c      	ldr	r0, [pc, #240]	; (80015a4 <ESP_messageHandler+0x2c0>)
 80014b4:	f004 fad8 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[1] == '0' || vSal[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET); // Luz Comedor
 80014b8:	4b38      	ldr	r3, [pc, #224]	; (800159c <ESP_messageHandler+0x2b8>)
 80014ba:	785b      	ldrb	r3, [r3, #1]
 80014bc:	2b30      	cmp	r3, #48	; 0x30
 80014be:	d003      	beq.n	80014c8 <ESP_messageHandler+0x1e4>
 80014c0:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <ESP_messageHandler+0x2bc>)
 80014c2:	789b      	ldrb	r3, [r3, #2]
 80014c4:	2b30      	cmp	r3, #48	; 0x30
 80014c6:	d105      	bne.n	80014d4 <ESP_messageHandler+0x1f0>
 80014c8:	2200      	movs	r2, #0
 80014ca:	2102      	movs	r1, #2
 80014cc:	4835      	ldr	r0, [pc, #212]	; (80015a4 <ESP_messageHandler+0x2c0>)
 80014ce:	f004 facb 	bl	8005a68 <HAL_GPIO_WritePin>
 80014d2:	e00c      	b.n	80014ee <ESP_messageHandler+0x20a>
		else if(vIlum[1] == '1'|| vSal[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, SET);
 80014d4:	4b31      	ldr	r3, [pc, #196]	; (800159c <ESP_messageHandler+0x2b8>)
 80014d6:	785b      	ldrb	r3, [r3, #1]
 80014d8:	2b31      	cmp	r3, #49	; 0x31
 80014da:	d003      	beq.n	80014e4 <ESP_messageHandler+0x200>
 80014dc:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <ESP_messageHandler+0x2bc>)
 80014de:	789b      	ldrb	r3, [r3, #2]
 80014e0:	2b31      	cmp	r3, #49	; 0x31
 80014e2:	d104      	bne.n	80014ee <ESP_messageHandler+0x20a>
 80014e4:	2201      	movs	r2, #1
 80014e6:	2102      	movs	r1, #2
 80014e8:	482e      	ldr	r0, [pc, #184]	; (80015a4 <ESP_messageHandler+0x2c0>)
 80014ea:	f004 fabd 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[2] == '0' || vSal[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, RESET); // Luz Ambiente
 80014ee:	4b2b      	ldr	r3, [pc, #172]	; (800159c <ESP_messageHandler+0x2b8>)
 80014f0:	789b      	ldrb	r3, [r3, #2]
 80014f2:	2b30      	cmp	r3, #48	; 0x30
 80014f4:	d003      	beq.n	80014fe <ESP_messageHandler+0x21a>
 80014f6:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <ESP_messageHandler+0x2bc>)
 80014f8:	78db      	ldrb	r3, [r3, #3]
 80014fa:	2b30      	cmp	r3, #48	; 0x30
 80014fc:	d105      	bne.n	800150a <ESP_messageHandler+0x226>
 80014fe:	2200      	movs	r2, #0
 8001500:	2120      	movs	r1, #32
 8001502:	4828      	ldr	r0, [pc, #160]	; (80015a4 <ESP_messageHandler+0x2c0>)
 8001504:	f004 fab0 	bl	8005a68 <HAL_GPIO_WritePin>
 8001508:	e00c      	b.n	8001524 <ESP_messageHandler+0x240>
		else if(vIlum[2] == '1' || vSal[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, SET);
 800150a:	4b24      	ldr	r3, [pc, #144]	; (800159c <ESP_messageHandler+0x2b8>)
 800150c:	789b      	ldrb	r3, [r3, #2]
 800150e:	2b31      	cmp	r3, #49	; 0x31
 8001510:	d003      	beq.n	800151a <ESP_messageHandler+0x236>
 8001512:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <ESP_messageHandler+0x2bc>)
 8001514:	78db      	ldrb	r3, [r3, #3]
 8001516:	2b31      	cmp	r3, #49	; 0x31
 8001518:	d104      	bne.n	8001524 <ESP_messageHandler+0x240>
 800151a:	2201      	movs	r2, #1
 800151c:	2120      	movs	r1, #32
 800151e:	4821      	ldr	r0, [pc, #132]	; (80015a4 <ESP_messageHandler+0x2c0>)
 8001520:	f004 faa2 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[3] == '0' || vSal[4] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET); // Luz Recibidor
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <ESP_messageHandler+0x2b8>)
 8001526:	78db      	ldrb	r3, [r3, #3]
 8001528:	2b30      	cmp	r3, #48	; 0x30
 800152a:	d003      	beq.n	8001534 <ESP_messageHandler+0x250>
 800152c:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <ESP_messageHandler+0x2bc>)
 800152e:	791b      	ldrb	r3, [r3, #4]
 8001530:	2b30      	cmp	r3, #48	; 0x30
 8001532:	d105      	bne.n	8001540 <ESP_messageHandler+0x25c>
 8001534:	2200      	movs	r2, #0
 8001536:	2101      	movs	r1, #1
 8001538:	481a      	ldr	r0, [pc, #104]	; (80015a4 <ESP_messageHandler+0x2c0>)
 800153a:	f004 fa95 	bl	8005a68 <HAL_GPIO_WritePin>
 800153e:	e00c      	b.n	800155a <ESP_messageHandler+0x276>
		else if(vIlum[3] == '1' || vSal[4] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 8001540:	4b16      	ldr	r3, [pc, #88]	; (800159c <ESP_messageHandler+0x2b8>)
 8001542:	78db      	ldrb	r3, [r3, #3]
 8001544:	2b31      	cmp	r3, #49	; 0x31
 8001546:	d003      	beq.n	8001550 <ESP_messageHandler+0x26c>
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <ESP_messageHandler+0x2bc>)
 800154a:	791b      	ldrb	r3, [r3, #4]
 800154c:	2b31      	cmp	r3, #49	; 0x31
 800154e:	d104      	bne.n	800155a <ESP_messageHandler+0x276>
 8001550:	2201      	movs	r2, #1
 8001552:	2101      	movs	r1, #1
 8001554:	4813      	ldr	r0, [pc, #76]	; (80015a4 <ESP_messageHandler+0x2c0>)
 8001556:	f004 fa87 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[4] == '0' || vCoc[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET); // Luz Cocina
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <ESP_messageHandler+0x2b8>)
 800155c:	791b      	ldrb	r3, [r3, #4]
 800155e:	2b30      	cmp	r3, #48	; 0x30
 8001560:	d003      	beq.n	800156a <ESP_messageHandler+0x286>
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <ESP_messageHandler+0x2c4>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b30      	cmp	r3, #48	; 0x30
 8001568:	d122      	bne.n	80015b0 <ESP_messageHandler+0x2cc>
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001570:	480e      	ldr	r0, [pc, #56]	; (80015ac <ESP_messageHandler+0x2c8>)
 8001572:	f004 fa79 	bl	8005a68 <HAL_GPIO_WritePin>
 8001576:	e029      	b.n	80015cc <ESP_messageHandler+0x2e8>
 8001578:	200009d4 	.word	0x200009d4
 800157c:	20000e0c 	.word	0x20000e0c
 8001580:	20000d80 	.word	0x20000d80
 8001584:	0800912c 	.word	0x0800912c
 8001588:	200009b8 	.word	0x200009b8
 800158c:	20000a4c 	.word	0x20000a4c
 8001590:	08009130 	.word	0x08009130
 8001594:	20000a50 	.word	0x20000a50
 8001598:	0800913c 	.word	0x0800913c
 800159c:	2000099c 	.word	0x2000099c
 80015a0:	20000a44 	.word	0x20000a44
 80015a4:	40020c00 	.word	0x40020c00
 80015a8:	2000090c 	.word	0x2000090c
 80015ac:	40020800 	.word	0x40020800
		else if(vIlum[4] == '1' || vCoc[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 80015b0:	4b95      	ldr	r3, [pc, #596]	; (8001808 <ESP_messageHandler+0x524>)
 80015b2:	791b      	ldrb	r3, [r3, #4]
 80015b4:	2b31      	cmp	r3, #49	; 0x31
 80015b6:	d003      	beq.n	80015c0 <ESP_messageHandler+0x2dc>
 80015b8:	4b94      	ldr	r3, [pc, #592]	; (800180c <ESP_messageHandler+0x528>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b31      	cmp	r3, #49	; 0x31
 80015be:	d105      	bne.n	80015cc <ESP_messageHandler+0x2e8>
 80015c0:	2201      	movs	r2, #1
 80015c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015c6:	4892      	ldr	r0, [pc, #584]	; (8001810 <ESP_messageHandler+0x52c>)
 80015c8:	f004 fa4e 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[5] == '0' || vCoc[1] == '0') HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET); // Luz Fregadero
 80015cc:	4b8e      	ldr	r3, [pc, #568]	; (8001808 <ESP_messageHandler+0x524>)
 80015ce:	795b      	ldrb	r3, [r3, #5]
 80015d0:	2b30      	cmp	r3, #48	; 0x30
 80015d2:	d003      	beq.n	80015dc <ESP_messageHandler+0x2f8>
 80015d4:	4b8d      	ldr	r3, [pc, #564]	; (800180c <ESP_messageHandler+0x528>)
 80015d6:	785b      	ldrb	r3, [r3, #1]
 80015d8:	2b30      	cmp	r3, #48	; 0x30
 80015da:	d106      	bne.n	80015ea <ESP_messageHandler+0x306>
 80015dc:	2200      	movs	r2, #0
 80015de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015e2:	488c      	ldr	r0, [pc, #560]	; (8001814 <ESP_messageHandler+0x530>)
 80015e4:	f004 fa40 	bl	8005a68 <HAL_GPIO_WritePin>
 80015e8:	e00d      	b.n	8001606 <ESP_messageHandler+0x322>
		else if(vIlum[5] == '1' || vCoc[1] == '1')HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 80015ea:	4b87      	ldr	r3, [pc, #540]	; (8001808 <ESP_messageHandler+0x524>)
 80015ec:	795b      	ldrb	r3, [r3, #5]
 80015ee:	2b31      	cmp	r3, #49	; 0x31
 80015f0:	d003      	beq.n	80015fa <ESP_messageHandler+0x316>
 80015f2:	4b86      	ldr	r3, [pc, #536]	; (800180c <ESP_messageHandler+0x528>)
 80015f4:	785b      	ldrb	r3, [r3, #1]
 80015f6:	2b31      	cmp	r3, #49	; 0x31
 80015f8:	d105      	bne.n	8001606 <ESP_messageHandler+0x322>
 80015fa:	2201      	movs	r2, #1
 80015fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001600:	4884      	ldr	r0, [pc, #528]	; (8001814 <ESP_messageHandler+0x530>)
 8001602:	f004 fa31 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[6] == '0' || vBan[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, RESET); // Luz Baño
 8001606:	4b80      	ldr	r3, [pc, #512]	; (8001808 <ESP_messageHandler+0x524>)
 8001608:	799b      	ldrb	r3, [r3, #6]
 800160a:	2b30      	cmp	r3, #48	; 0x30
 800160c:	d003      	beq.n	8001616 <ESP_messageHandler+0x332>
 800160e:	4b82      	ldr	r3, [pc, #520]	; (8001818 <ESP_messageHandler+0x534>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b30      	cmp	r3, #48	; 0x30
 8001614:	d105      	bne.n	8001622 <ESP_messageHandler+0x33e>
 8001616:	2200      	movs	r2, #0
 8001618:	2140      	movs	r1, #64	; 0x40
 800161a:	4880      	ldr	r0, [pc, #512]	; (800181c <ESP_messageHandler+0x538>)
 800161c:	f004 fa24 	bl	8005a68 <HAL_GPIO_WritePin>
 8001620:	e00c      	b.n	800163c <ESP_messageHandler+0x358>
		else if(vIlum[6] == '1' || vBan[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, SET);
 8001622:	4b79      	ldr	r3, [pc, #484]	; (8001808 <ESP_messageHandler+0x524>)
 8001624:	799b      	ldrb	r3, [r3, #6]
 8001626:	2b31      	cmp	r3, #49	; 0x31
 8001628:	d003      	beq.n	8001632 <ESP_messageHandler+0x34e>
 800162a:	4b7b      	ldr	r3, [pc, #492]	; (8001818 <ESP_messageHandler+0x534>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b31      	cmp	r3, #49	; 0x31
 8001630:	d104      	bne.n	800163c <ESP_messageHandler+0x358>
 8001632:	2201      	movs	r2, #1
 8001634:	2140      	movs	r1, #64	; 0x40
 8001636:	4879      	ldr	r0, [pc, #484]	; (800181c <ESP_messageHandler+0x538>)
 8001638:	f004 fa16 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[7] == '0' || vBan[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET); // Luz Espejo
 800163c:	4b72      	ldr	r3, [pc, #456]	; (8001808 <ESP_messageHandler+0x524>)
 800163e:	79db      	ldrb	r3, [r3, #7]
 8001640:	2b30      	cmp	r3, #48	; 0x30
 8001642:	d003      	beq.n	800164c <ESP_messageHandler+0x368>
 8001644:	4b74      	ldr	r3, [pc, #464]	; (8001818 <ESP_messageHandler+0x534>)
 8001646:	785b      	ldrb	r3, [r3, #1]
 8001648:	2b30      	cmp	r3, #48	; 0x30
 800164a:	d105      	bne.n	8001658 <ESP_messageHandler+0x374>
 800164c:	2200      	movs	r2, #0
 800164e:	2108      	movs	r1, #8
 8001650:	4873      	ldr	r0, [pc, #460]	; (8001820 <ESP_messageHandler+0x53c>)
 8001652:	f004 fa09 	bl	8005a68 <HAL_GPIO_WritePin>
 8001656:	e00c      	b.n	8001672 <ESP_messageHandler+0x38e>
		else if(vIlum[7] == '1' || vBan[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8001658:	4b6b      	ldr	r3, [pc, #428]	; (8001808 <ESP_messageHandler+0x524>)
 800165a:	79db      	ldrb	r3, [r3, #7]
 800165c:	2b31      	cmp	r3, #49	; 0x31
 800165e:	d003      	beq.n	8001668 <ESP_messageHandler+0x384>
 8001660:	4b6d      	ldr	r3, [pc, #436]	; (8001818 <ESP_messageHandler+0x534>)
 8001662:	785b      	ldrb	r3, [r3, #1]
 8001664:	2b31      	cmp	r3, #49	; 0x31
 8001666:	d104      	bne.n	8001672 <ESP_messageHandler+0x38e>
 8001668:	2201      	movs	r2, #1
 800166a:	2108      	movs	r1, #8
 800166c:	486c      	ldr	r0, [pc, #432]	; (8001820 <ESP_messageHandler+0x53c>)
 800166e:	f004 f9fb 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[8] == '0' || vDor[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, RESET); // Luz Dormitorio
 8001672:	4b65      	ldr	r3, [pc, #404]	; (8001808 <ESP_messageHandler+0x524>)
 8001674:	7a1b      	ldrb	r3, [r3, #8]
 8001676:	2b30      	cmp	r3, #48	; 0x30
 8001678:	d003      	beq.n	8001682 <ESP_messageHandler+0x39e>
 800167a:	4b6a      	ldr	r3, [pc, #424]	; (8001824 <ESP_messageHandler+0x540>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b30      	cmp	r3, #48	; 0x30
 8001680:	d105      	bne.n	800168e <ESP_messageHandler+0x3aa>
 8001682:	2200      	movs	r2, #0
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	4865      	ldr	r0, [pc, #404]	; (800181c <ESP_messageHandler+0x538>)
 8001688:	f004 f9ee 	bl	8005a68 <HAL_GPIO_WritePin>
 800168c:	e00c      	b.n	80016a8 <ESP_messageHandler+0x3c4>
		else if(vIlum[8] == '1' || vDor[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET);
 800168e:	4b5e      	ldr	r3, [pc, #376]	; (8001808 <ESP_messageHandler+0x524>)
 8001690:	7a1b      	ldrb	r3, [r3, #8]
 8001692:	2b31      	cmp	r3, #49	; 0x31
 8001694:	d003      	beq.n	800169e <ESP_messageHandler+0x3ba>
 8001696:	4b63      	ldr	r3, [pc, #396]	; (8001824 <ESP_messageHandler+0x540>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b31      	cmp	r3, #49	; 0x31
 800169c:	d104      	bne.n	80016a8 <ESP_messageHandler+0x3c4>
 800169e:	2201      	movs	r2, #1
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	485e      	ldr	r0, [pc, #376]	; (800181c <ESP_messageHandler+0x538>)
 80016a4:	f004 f9e0 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[9] == '0' || vDor[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET); // Luz Mesita Izq
 80016a8:	4b57      	ldr	r3, [pc, #348]	; (8001808 <ESP_messageHandler+0x524>)
 80016aa:	7a5b      	ldrb	r3, [r3, #9]
 80016ac:	2b30      	cmp	r3, #48	; 0x30
 80016ae:	d003      	beq.n	80016b8 <ESP_messageHandler+0x3d4>
 80016b0:	4b5c      	ldr	r3, [pc, #368]	; (8001824 <ESP_messageHandler+0x540>)
 80016b2:	785b      	ldrb	r3, [r3, #1]
 80016b4:	2b30      	cmp	r3, #48	; 0x30
 80016b6:	d105      	bne.n	80016c4 <ESP_messageHandler+0x3e0>
 80016b8:	2200      	movs	r2, #0
 80016ba:	2110      	movs	r1, #16
 80016bc:	4858      	ldr	r0, [pc, #352]	; (8001820 <ESP_messageHandler+0x53c>)
 80016be:	f004 f9d3 	bl	8005a68 <HAL_GPIO_WritePin>
 80016c2:	e00c      	b.n	80016de <ESP_messageHandler+0x3fa>
		else if(vIlum[9] == '1' || vDor[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80016c4:	4b50      	ldr	r3, [pc, #320]	; (8001808 <ESP_messageHandler+0x524>)
 80016c6:	7a5b      	ldrb	r3, [r3, #9]
 80016c8:	2b31      	cmp	r3, #49	; 0x31
 80016ca:	d003      	beq.n	80016d4 <ESP_messageHandler+0x3f0>
 80016cc:	4b55      	ldr	r3, [pc, #340]	; (8001824 <ESP_messageHandler+0x540>)
 80016ce:	785b      	ldrb	r3, [r3, #1]
 80016d0:	2b31      	cmp	r3, #49	; 0x31
 80016d2:	d104      	bne.n	80016de <ESP_messageHandler+0x3fa>
 80016d4:	2201      	movs	r2, #1
 80016d6:	2110      	movs	r1, #16
 80016d8:	4851      	ldr	r0, [pc, #324]	; (8001820 <ESP_messageHandler+0x53c>)
 80016da:	f004 f9c5 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[10] == '0' || vDor[2] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET); // Luz Mesita Dch
 80016de:	4b4a      	ldr	r3, [pc, #296]	; (8001808 <ESP_messageHandler+0x524>)
 80016e0:	7a9b      	ldrb	r3, [r3, #10]
 80016e2:	2b30      	cmp	r3, #48	; 0x30
 80016e4:	d003      	beq.n	80016ee <ESP_messageHandler+0x40a>
 80016e6:	4b4f      	ldr	r3, [pc, #316]	; (8001824 <ESP_messageHandler+0x540>)
 80016e8:	789b      	ldrb	r3, [r3, #2]
 80016ea:	2b30      	cmp	r3, #48	; 0x30
 80016ec:	d105      	bne.n	80016fa <ESP_messageHandler+0x416>
 80016ee:	2200      	movs	r2, #0
 80016f0:	2140      	movs	r1, #64	; 0x40
 80016f2:	484b      	ldr	r0, [pc, #300]	; (8001820 <ESP_messageHandler+0x53c>)
 80016f4:	f004 f9b8 	bl	8005a68 <HAL_GPIO_WritePin>
 80016f8:	e00c      	b.n	8001714 <ESP_messageHandler+0x430>
		else if(vIlum[10] == '1' || vDor[2] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 80016fa:	4b43      	ldr	r3, [pc, #268]	; (8001808 <ESP_messageHandler+0x524>)
 80016fc:	7a9b      	ldrb	r3, [r3, #10]
 80016fe:	2b31      	cmp	r3, #49	; 0x31
 8001700:	d003      	beq.n	800170a <ESP_messageHandler+0x426>
 8001702:	4b48      	ldr	r3, [pc, #288]	; (8001824 <ESP_messageHandler+0x540>)
 8001704:	789b      	ldrb	r3, [r3, #2]
 8001706:	2b31      	cmp	r3, #49	; 0x31
 8001708:	d104      	bne.n	8001714 <ESP_messageHandler+0x430>
 800170a:	2201      	movs	r2, #1
 800170c:	2140      	movs	r1, #64	; 0x40
 800170e:	4844      	ldr	r0, [pc, #272]	; (8001820 <ESP_messageHandler+0x53c>)
 8001710:	f004 f9aa 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[11] == '0' || vOfi[0] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET); // Luz Oficina
 8001714:	4b3c      	ldr	r3, [pc, #240]	; (8001808 <ESP_messageHandler+0x524>)
 8001716:	7adb      	ldrb	r3, [r3, #11]
 8001718:	2b30      	cmp	r3, #48	; 0x30
 800171a:	d003      	beq.n	8001724 <ESP_messageHandler+0x440>
 800171c:	4b42      	ldr	r3, [pc, #264]	; (8001828 <ESP_messageHandler+0x544>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b30      	cmp	r3, #48	; 0x30
 8001722:	d105      	bne.n	8001730 <ESP_messageHandler+0x44c>
 8001724:	2200      	movs	r2, #0
 8001726:	2120      	movs	r1, #32
 8001728:	483d      	ldr	r0, [pc, #244]	; (8001820 <ESP_messageHandler+0x53c>)
 800172a:	f004 f99d 	bl	8005a68 <HAL_GPIO_WritePin>
 800172e:	e00c      	b.n	800174a <ESP_messageHandler+0x466>
		else if(vIlum[11] == '1' || vOfi[0] == '1') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001730:	4b35      	ldr	r3, [pc, #212]	; (8001808 <ESP_messageHandler+0x524>)
 8001732:	7adb      	ldrb	r3, [r3, #11]
 8001734:	2b31      	cmp	r3, #49	; 0x31
 8001736:	d003      	beq.n	8001740 <ESP_messageHandler+0x45c>
 8001738:	4b3b      	ldr	r3, [pc, #236]	; (8001828 <ESP_messageHandler+0x544>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b31      	cmp	r3, #49	; 0x31
 800173e:	d104      	bne.n	800174a <ESP_messageHandler+0x466>
 8001740:	2201      	movs	r2, #1
 8001742:	2120      	movs	r1, #32
 8001744:	4836      	ldr	r0, [pc, #216]	; (8001820 <ESP_messageHandler+0x53c>)
 8001746:	f004 f98f 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[12] == '0' || vOfi[1] == '0'){ // Luz Gaming
 800174a:	4b2f      	ldr	r3, [pc, #188]	; (8001808 <ESP_messageHandler+0x524>)
 800174c:	7b1b      	ldrb	r3, [r3, #12]
 800174e:	2b30      	cmp	r3, #48	; 0x30
 8001750:	d003      	beq.n	800175a <ESP_messageHandler+0x476>
 8001752:	4b35      	ldr	r3, [pc, #212]	; (8001828 <ESP_messageHandler+0x544>)
 8001754:	785b      	ldrb	r3, [r3, #1]
 8001756:	2b30      	cmp	r3, #48	; 0x30
 8001758:	d10c      	bne.n	8001774 <ESP_messageHandler+0x490>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800175a:	4b34      	ldr	r3, [pc, #208]	; (800182c <ESP_messageHandler+0x548>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2200      	movs	r2, #0
 8001760:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001762:	4b32      	ldr	r3, [pc, #200]	; (800182c <ESP_messageHandler+0x548>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2200      	movs	r2, #0
 8001768:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800176a:	4b30      	ldr	r3, [pc, #192]	; (800182c <ESP_messageHandler+0x548>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2200      	movs	r2, #0
 8001770:	63da      	str	r2, [r3, #60]	; 0x3c
 8001772:	e03a      	b.n	80017ea <ESP_messageHandler+0x506>
		}
		else if(vIlum[12] == '1' || vOfi[1] == '1'){
 8001774:	4b24      	ldr	r3, [pc, #144]	; (8001808 <ESP_messageHandler+0x524>)
 8001776:	7b1b      	ldrb	r3, [r3, #12]
 8001778:	2b31      	cmp	r3, #49	; 0x31
 800177a:	d003      	beq.n	8001784 <ESP_messageHandler+0x4a0>
 800177c:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <ESP_messageHandler+0x544>)
 800177e:	785b      	ldrb	r3, [r3, #1]
 8001780:	2b31      	cmp	r3, #49	; 0x31
 8001782:	d132      	bne.n	80017ea <ESP_messageHandler+0x506>

			//uint8_t r, g, b;

			r = rgb_value (vIlum[13],vIlum[14],vIlum[15]);
 8001784:	4b20      	ldr	r3, [pc, #128]	; (8001808 <ESP_messageHandler+0x524>)
 8001786:	7b5b      	ldrb	r3, [r3, #13]
 8001788:	4a1f      	ldr	r2, [pc, #124]	; (8001808 <ESP_messageHandler+0x524>)
 800178a:	7b91      	ldrb	r1, [r2, #14]
 800178c:	4a1e      	ldr	r2, [pc, #120]	; (8001808 <ESP_messageHandler+0x524>)
 800178e:	7bd2      	ldrb	r2, [r2, #15]
 8001790:	4618      	mov	r0, r3
 8001792:	f000 fd9f 	bl	80022d4 <rgb_value>
 8001796:	4603      	mov	r3, r0
 8001798:	4a25      	ldr	r2, [pc, #148]	; (8001830 <ESP_messageHandler+0x54c>)
 800179a:	6013      	str	r3, [r2, #0]
			g = rgb_value (vIlum[16],vIlum[17],vIlum[18]);
 800179c:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <ESP_messageHandler+0x524>)
 800179e:	7c1b      	ldrb	r3, [r3, #16]
 80017a0:	4a19      	ldr	r2, [pc, #100]	; (8001808 <ESP_messageHandler+0x524>)
 80017a2:	7c51      	ldrb	r1, [r2, #17]
 80017a4:	4a18      	ldr	r2, [pc, #96]	; (8001808 <ESP_messageHandler+0x524>)
 80017a6:	7c92      	ldrb	r2, [r2, #18]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 fd93 	bl	80022d4 <rgb_value>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4a20      	ldr	r2, [pc, #128]	; (8001834 <ESP_messageHandler+0x550>)
 80017b2:	6013      	str	r3, [r2, #0]
			b = rgb_value (vIlum[19],vIlum[20],vIlum[21]);
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <ESP_messageHandler+0x524>)
 80017b6:	7cdb      	ldrb	r3, [r3, #19]
 80017b8:	4a13      	ldr	r2, [pc, #76]	; (8001808 <ESP_messageHandler+0x524>)
 80017ba:	7d11      	ldrb	r1, [r2, #20]
 80017bc:	4a12      	ldr	r2, [pc, #72]	; (8001808 <ESP_messageHandler+0x524>)
 80017be:	7d52      	ldrb	r2, [r2, #21]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 fd87 	bl	80022d4 <rgb_value>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4a1b      	ldr	r2, [pc, #108]	; (8001838 <ESP_messageHandler+0x554>)
 80017ca:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, g); // PA8
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <ESP_messageHandler+0x550>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b16      	ldr	r3, [pc, #88]	; (800182c <ESP_messageHandler+0x548>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, r); // PA9
 80017d6:	4b16      	ldr	r3, [pc, #88]	; (8001830 <ESP_messageHandler+0x54c>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4b14      	ldr	r3, [pc, #80]	; (800182c <ESP_messageHandler+0x548>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b); // PA10
 80017e0:	4b15      	ldr	r3, [pc, #84]	; (8001838 <ESP_messageHandler+0x554>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <ESP_messageHandler+0x548>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		if(vIlum[22] == '0' || vGar[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET); // Luz Garaje
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <ESP_messageHandler+0x524>)
 80017ec:	7d9b      	ldrb	r3, [r3, #22]
 80017ee:	2b30      	cmp	r3, #48	; 0x30
 80017f0:	d003      	beq.n	80017fa <ESP_messageHandler+0x516>
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <ESP_messageHandler+0x558>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b30      	cmp	r3, #48	; 0x30
 80017f8:	d122      	bne.n	8001840 <ESP_messageHandler+0x55c>
 80017fa:	2200      	movs	r2, #0
 80017fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001800:	4803      	ldr	r0, [pc, #12]	; (8001810 <ESP_messageHandler+0x52c>)
 8001802:	f004 f931 	bl	8005a68 <HAL_GPIO_WritePin>
 8001806:	e029      	b.n	800185c <ESP_messageHandler+0x578>
 8001808:	2000099c 	.word	0x2000099c
 800180c:	2000090c 	.word	0x2000090c
 8001810:	40020800 	.word	0x40020800
 8001814:	40020000 	.word	0x40020000
 8001818:	20000984 	.word	0x20000984
 800181c:	40020c00 	.word	0x40020c00
 8001820:	40020400 	.word	0x40020400
 8001824:	20000910 	.word	0x20000910
 8001828:	20000978 	.word	0x20000978
 800182c:	20000cf0 	.word	0x20000cf0
 8001830:	20000924 	.word	0x20000924
 8001834:	20000918 	.word	0x20000918
 8001838:	20000914 	.word	0x20000914
 800183c:	2000096c 	.word	0x2000096c
		else if(vIlum[22] == '1' || vGar[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 8001840:	4b9c      	ldr	r3, [pc, #624]	; (8001ab4 <ESP_messageHandler+0x7d0>)
 8001842:	7d9b      	ldrb	r3, [r3, #22]
 8001844:	2b31      	cmp	r3, #49	; 0x31
 8001846:	d003      	beq.n	8001850 <ESP_messageHandler+0x56c>
 8001848:	4b9b      	ldr	r3, [pc, #620]	; (8001ab8 <ESP_messageHandler+0x7d4>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b31      	cmp	r3, #49	; 0x31
 800184e:	d105      	bne.n	800185c <ESP_messageHandler+0x578>
 8001850:	2201      	movs	r2, #1
 8001852:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001856:	4899      	ldr	r0, [pc, #612]	; (8001abc <ESP_messageHandler+0x7d8>)
 8001858:	f004 f906 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[23] == '0' || vExt[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET); // Luz Jardín
 800185c:	4b95      	ldr	r3, [pc, #596]	; (8001ab4 <ESP_messageHandler+0x7d0>)
 800185e:	7ddb      	ldrb	r3, [r3, #23]
 8001860:	2b30      	cmp	r3, #48	; 0x30
 8001862:	d003      	beq.n	800186c <ESP_messageHandler+0x588>
 8001864:	4b96      	ldr	r3, [pc, #600]	; (8001ac0 <ESP_messageHandler+0x7dc>)
 8001866:	78db      	ldrb	r3, [r3, #3]
 8001868:	2b30      	cmp	r3, #48	; 0x30
 800186a:	d105      	bne.n	8001878 <ESP_messageHandler+0x594>
 800186c:	2200      	movs	r2, #0
 800186e:	2104      	movs	r1, #4
 8001870:	4894      	ldr	r0, [pc, #592]	; (8001ac4 <ESP_messageHandler+0x7e0>)
 8001872:	f004 f8f9 	bl	8005a68 <HAL_GPIO_WritePin>
 8001876:	e00c      	b.n	8001892 <ESP_messageHandler+0x5ae>
		else if(vIlum[23] == '1' || vExt[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8001878:	4b8e      	ldr	r3, [pc, #568]	; (8001ab4 <ESP_messageHandler+0x7d0>)
 800187a:	7ddb      	ldrb	r3, [r3, #23]
 800187c:	2b31      	cmp	r3, #49	; 0x31
 800187e:	d003      	beq.n	8001888 <ESP_messageHandler+0x5a4>
 8001880:	4b8f      	ldr	r3, [pc, #572]	; (8001ac0 <ESP_messageHandler+0x7dc>)
 8001882:	78db      	ldrb	r3, [r3, #3]
 8001884:	2b31      	cmp	r3, #49	; 0x31
 8001886:	d104      	bne.n	8001892 <ESP_messageHandler+0x5ae>
 8001888:	2201      	movs	r2, #1
 800188a:	2104      	movs	r1, #4
 800188c:	488d      	ldr	r0, [pc, #564]	; (8001ac4 <ESP_messageHandler+0x7e0>)
 800188e:	f004 f8eb 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[24] == '0' || vExt[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET); // Luz Porche
 8001892:	4b88      	ldr	r3, [pc, #544]	; (8001ab4 <ESP_messageHandler+0x7d0>)
 8001894:	7e1b      	ldrb	r3, [r3, #24]
 8001896:	2b30      	cmp	r3, #48	; 0x30
 8001898:	d003      	beq.n	80018a2 <ESP_messageHandler+0x5be>
 800189a:	4b89      	ldr	r3, [pc, #548]	; (8001ac0 <ESP_messageHandler+0x7dc>)
 800189c:	789b      	ldrb	r3, [r3, #2]
 800189e:	2b30      	cmp	r3, #48	; 0x30
 80018a0:	d105      	bne.n	80018ae <ESP_messageHandler+0x5ca>
 80018a2:	2200      	movs	r2, #0
 80018a4:	2110      	movs	r1, #16
 80018a6:	4887      	ldr	r0, [pc, #540]	; (8001ac4 <ESP_messageHandler+0x7e0>)
 80018a8:	f004 f8de 	bl	8005a68 <HAL_GPIO_WritePin>
 80018ac:	e00c      	b.n	80018c8 <ESP_messageHandler+0x5e4>
		else if(vIlum[24] == '1' || vExt[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 80018ae:	4b81      	ldr	r3, [pc, #516]	; (8001ab4 <ESP_messageHandler+0x7d0>)
 80018b0:	7e1b      	ldrb	r3, [r3, #24]
 80018b2:	2b31      	cmp	r3, #49	; 0x31
 80018b4:	d003      	beq.n	80018be <ESP_messageHandler+0x5da>
 80018b6:	4b82      	ldr	r3, [pc, #520]	; (8001ac0 <ESP_messageHandler+0x7dc>)
 80018b8:	789b      	ldrb	r3, [r3, #2]
 80018ba:	2b31      	cmp	r3, #49	; 0x31
 80018bc:	d104      	bne.n	80018c8 <ESP_messageHandler+0x5e4>
 80018be:	2201      	movs	r2, #1
 80018c0:	2110      	movs	r1, #16
 80018c2:	4880      	ldr	r0, [pc, #512]	; (8001ac4 <ESP_messageHandler+0x7e0>)
 80018c4:	f004 f8d0 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[25] == '0' || vExt[1] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET); // Luz Tendedero
 80018c8:	4b7a      	ldr	r3, [pc, #488]	; (8001ab4 <ESP_messageHandler+0x7d0>)
 80018ca:	7e5b      	ldrb	r3, [r3, #25]
 80018cc:	2b30      	cmp	r3, #48	; 0x30
 80018ce:	d003      	beq.n	80018d8 <ESP_messageHandler+0x5f4>
 80018d0:	4b7b      	ldr	r3, [pc, #492]	; (8001ac0 <ESP_messageHandler+0x7dc>)
 80018d2:	785b      	ldrb	r3, [r3, #1]
 80018d4:	2b30      	cmp	r3, #48	; 0x30
 80018d6:	d106      	bne.n	80018e6 <ESP_messageHandler+0x602>
 80018d8:	2200      	movs	r2, #0
 80018da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018de:	4877      	ldr	r0, [pc, #476]	; (8001abc <ESP_messageHandler+0x7d8>)
 80018e0:	f004 f8c2 	bl	8005a68 <HAL_GPIO_WritePin>
 80018e4:	e00d      	b.n	8001902 <ESP_messageHandler+0x61e>
		else if(vIlum[25] == '1' || vExt[1] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 80018e6:	4b73      	ldr	r3, [pc, #460]	; (8001ab4 <ESP_messageHandler+0x7d0>)
 80018e8:	7e5b      	ldrb	r3, [r3, #25]
 80018ea:	2b31      	cmp	r3, #49	; 0x31
 80018ec:	d003      	beq.n	80018f6 <ESP_messageHandler+0x612>
 80018ee:	4b74      	ldr	r3, [pc, #464]	; (8001ac0 <ESP_messageHandler+0x7dc>)
 80018f0:	785b      	ldrb	r3, [r3, #1]
 80018f2:	2b31      	cmp	r3, #49	; 0x31
 80018f4:	d105      	bne.n	8001902 <ESP_messageHandler+0x61e>
 80018f6:	2201      	movs	r2, #1
 80018f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018fc:	486f      	ldr	r0, [pc, #444]	; (8001abc <ESP_messageHandler+0x7d8>)
 80018fe:	f004 f8b3 	bl	8005a68 <HAL_GPIO_WritePin>
	}

	// PUERTAS Y VENTANAS
	if (fragment[0] == 'p'){
 8001902:	4b71      	ldr	r3, [pc, #452]	; (8001ac8 <ESP_messageHandler+0x7e4>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b70      	cmp	r3, #112	; 0x70
 8001908:	d107      	bne.n	800191a <ESP_messageHandler+0x636>
		UART_send("PUERTAS Y VENTANAS (PUERTA PARCELA)\n", PC_UART);
 800190a:	4970      	ldr	r1, [pc, #448]	; (8001acc <ESP_messageHandler+0x7e8>)
 800190c:	4870      	ldr	r0, [pc, #448]	; (8001ad0 <ESP_messageHandler+0x7ec>)
 800190e:	f001 f8c1 	bl	8002a94 <UART_send>
		vVent[0] = textrc[28]; // P. Parcela
 8001912:	4b70      	ldr	r3, [pc, #448]	; (8001ad4 <ESP_messageHandler+0x7f0>)
 8001914:	7f1a      	ldrb	r2, [r3, #28]
 8001916:	4b70      	ldr	r3, [pc, #448]	; (8001ad8 <ESP_messageHandler+0x7f4>)
 8001918:	701a      	strb	r2, [r3, #0]
	}
	if (fragment[0] == 'g'){
 800191a:	4b6b      	ldr	r3, [pc, #428]	; (8001ac8 <ESP_messageHandler+0x7e4>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b67      	cmp	r3, #103	; 0x67
 8001920:	d107      	bne.n	8001932 <ESP_messageHandler+0x64e>
		UART_send("PUERTAS Y VENTANAS (PUERTA GARAJE)\n", PC_UART);
 8001922:	496a      	ldr	r1, [pc, #424]	; (8001acc <ESP_messageHandler+0x7e8>)
 8001924:	486d      	ldr	r0, [pc, #436]	; (8001adc <ESP_messageHandler+0x7f8>)
 8001926:	f001 f8b5 	bl	8002a94 <UART_send>
		vVent[1] = textrc[31]; // P. Garaje
 800192a:	4b6a      	ldr	r3, [pc, #424]	; (8001ad4 <ESP_messageHandler+0x7f0>)
 800192c:	7fda      	ldrb	r2, [r3, #31]
 800192e:	4b6a      	ldr	r3, [pc, #424]	; (8001ad8 <ESP_messageHandler+0x7f4>)
 8001930:	705a      	strb	r2, [r3, #1]
	}
	if (fragment[0] == 'l'){
 8001932:	4b65      	ldr	r3, [pc, #404]	; (8001ac8 <ESP_messageHandler+0x7e4>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b6c      	cmp	r3, #108	; 0x6c
 8001938:	d108      	bne.n	800194c <ESP_messageHandler+0x668>
		UART_send("PUERTAS Y VENTANAS (VENTANA SALÓN)\n", PC_UART);
 800193a:	4964      	ldr	r1, [pc, #400]	; (8001acc <ESP_messageHandler+0x7e8>)
 800193c:	4868      	ldr	r0, [pc, #416]	; (8001ae0 <ESP_messageHandler+0x7fc>)
 800193e:	f001 f8a9 	bl	8002a94 <UART_send>
		vVent[2] = textrc[34]; // V. Salón
 8001942:	4b64      	ldr	r3, [pc, #400]	; (8001ad4 <ESP_messageHandler+0x7f0>)
 8001944:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001948:	4b63      	ldr	r3, [pc, #396]	; (8001ad8 <ESP_messageHandler+0x7f4>)
 800194a:	709a      	strb	r2, [r3, #2]
	}
	if (fragment[0] == 'd'){
 800194c:	4b5e      	ldr	r3, [pc, #376]	; (8001ac8 <ESP_messageHandler+0x7e4>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b64      	cmp	r3, #100	; 0x64
 8001952:	d108      	bne.n	8001966 <ESP_messageHandler+0x682>
		UART_send("PUERTAS Y VENTANAS (VENTANA DORMITORIO)\n", PC_UART);
 8001954:	495d      	ldr	r1, [pc, #372]	; (8001acc <ESP_messageHandler+0x7e8>)
 8001956:	4863      	ldr	r0, [pc, #396]	; (8001ae4 <ESP_messageHandler+0x800>)
 8001958:	f001 f89c 	bl	8002a94 <UART_send>
		vVent[3] = textrc[37]; // V. Dormitorio
 800195c:	4b5d      	ldr	r3, [pc, #372]	; (8001ad4 <ESP_messageHandler+0x7f0>)
 800195e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001962:	4b5d      	ldr	r3, [pc, #372]	; (8001ad8 <ESP_messageHandler+0x7f4>)
 8001964:	70da      	strb	r2, [r3, #3]
	}
	if (fragment[0] == 'o'){
 8001966:	4b58      	ldr	r3, [pc, #352]	; (8001ac8 <ESP_messageHandler+0x7e4>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b6f      	cmp	r3, #111	; 0x6f
 800196c:	d108      	bne.n	8001980 <ESP_messageHandler+0x69c>
		UART_send("PUERTAS Y VENTANAS (VENTANA OFICINA)\n", PC_UART);
 800196e:	4957      	ldr	r1, [pc, #348]	; (8001acc <ESP_messageHandler+0x7e8>)
 8001970:	485d      	ldr	r0, [pc, #372]	; (8001ae8 <ESP_messageHandler+0x804>)
 8001972:	f001 f88f 	bl	8002a94 <UART_send>
		vVent[4] = textrc[40]; // V. Oficina
 8001976:	4b57      	ldr	r3, [pc, #348]	; (8001ad4 <ESP_messageHandler+0x7f0>)
 8001978:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800197c:	4b56      	ldr	r3, [pc, #344]	; (8001ad8 <ESP_messageHandler+0x7f4>)
 800197e:	711a      	strb	r2, [r3, #4]
	}

	// TIEMPO
	if (fragment[0] == 't'){
 8001980:	4b51      	ldr	r3, [pc, #324]	; (8001ac8 <ESP_messageHandler+0x7e4>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b74      	cmp	r3, #116	; 0x74
 8001986:	d133      	bne.n	80019f0 <ESP_messageHandler+0x70c>
		UART_send("TIEMPO\n", PC_UART);
 8001988:	4950      	ldr	r1, [pc, #320]	; (8001acc <ESP_messageHandler+0x7e8>)
 800198a:	4858      	ldr	r0, [pc, #352]	; (8001aec <ESP_messageHandler+0x808>)
 800198c:	f001 f882 	bl	8002a94 <UART_send>
		vTemp[0] = textrc[28]; 	// Vent. Salón
 8001990:	4b50      	ldr	r3, [pc, #320]	; (8001ad4 <ESP_messageHandler+0x7f0>)
 8001992:	7f1a      	ldrb	r2, [r3, #28]
 8001994:	4b56      	ldr	r3, [pc, #344]	; (8001af0 <ESP_messageHandler+0x80c>)
 8001996:	701a      	strb	r2, [r3, #0]
		vTemp[1] = textrc[31]; 	// Vent. Dormitorio
 8001998:	4b4e      	ldr	r3, [pc, #312]	; (8001ad4 <ESP_messageHandler+0x7f0>)
 800199a:	7fda      	ldrb	r2, [r3, #31]
 800199c:	4b54      	ldr	r3, [pc, #336]	; (8001af0 <ESP_messageHandler+0x80c>)
 800199e:	705a      	strb	r2, [r3, #1]
		vTemp[2] = textrc[34]; 	// Vent. Oficina
 80019a0:	4b4c      	ldr	r3, [pc, #304]	; (8001ad4 <ESP_messageHandler+0x7f0>)
 80019a2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80019a6:	4b52      	ldr	r3, [pc, #328]	; (8001af0 <ESP_messageHandler+0x80c>)
 80019a8:	709a      	strb	r2, [r3, #2]
		vTemp[3] = textrc[37]; 	// Calefacción
 80019aa:	4b4a      	ldr	r3, [pc, #296]	; (8001ad4 <ESP_messageHandler+0x7f0>)
 80019ac:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80019b0:	4b4f      	ldr	r3, [pc, #316]	; (8001af0 <ESP_messageHandler+0x80c>)
 80019b2:	70da      	strb	r2, [r3, #3]
		vTemp[4] = textrc[40]; 	// Automático
 80019b4:	4b47      	ldr	r3, [pc, #284]	; (8001ad4 <ESP_messageHandler+0x7f0>)
 80019b6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80019ba:	4b4d      	ldr	r3, [pc, #308]	; (8001af0 <ESP_messageHandler+0x80c>)
 80019bc:	711a      	strb	r2, [r3, #4]

		if(vTemp[4] == '0'){
 80019be:	4b4c      	ldr	r3, [pc, #304]	; (8001af0 <ESP_messageHandler+0x80c>)
 80019c0:	791b      	ldrb	r3, [r3, #4]
 80019c2:	2b30      	cmp	r3, #48	; 0x30
 80019c4:	d114      	bne.n	80019f0 <ESP_messageHandler+0x70c>
			if(vTemp[3] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET); // Calefacción
 80019c6:	4b4a      	ldr	r3, [pc, #296]	; (8001af0 <ESP_messageHandler+0x80c>)
 80019c8:	78db      	ldrb	r3, [r3, #3]
 80019ca:	2b30      	cmp	r3, #48	; 0x30
 80019cc:	d106      	bne.n	80019dc <ESP_messageHandler+0x6f8>
 80019ce:	2200      	movs	r2, #0
 80019d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d4:	4847      	ldr	r0, [pc, #284]	; (8001af4 <ESP_messageHandler+0x810>)
 80019d6:	f004 f847 	bl	8005a68 <HAL_GPIO_WritePin>
 80019da:	e009      	b.n	80019f0 <ESP_messageHandler+0x70c>
			else if(vTemp[3] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 80019dc:	4b44      	ldr	r3, [pc, #272]	; (8001af0 <ESP_messageHandler+0x80c>)
 80019de:	78db      	ldrb	r3, [r3, #3]
 80019e0:	2b31      	cmp	r3, #49	; 0x31
 80019e2:	d105      	bne.n	80019f0 <ESP_messageHandler+0x70c>
 80019e4:	2201      	movs	r2, #1
 80019e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019ea:	4842      	ldr	r0, [pc, #264]	; (8001af4 <ESP_messageHandler+0x810>)
 80019ec:	f004 f83c 	bl	8005a68 <HAL_GPIO_WritePin>
		}
    }

	// EXTERIOR
	if (fragment[0] == 'e'){
 80019f0:	4b35      	ldr	r3, [pc, #212]	; (8001ac8 <ESP_messageHandler+0x7e4>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b65      	cmp	r3, #101	; 0x65
 80019f6:	f040 808e 	bne.w	8001b16 <ESP_messageHandler+0x832>
		UART_send("LUCES (EXTERIOR)\n", PC_UART);
 80019fa:	4934      	ldr	r1, [pc, #208]	; (8001acc <ESP_messageHandler+0x7e8>)
 80019fc:	483e      	ldr	r0, [pc, #248]	; (8001af8 <ESP_messageHandler+0x814>)
 80019fe:	f001 f849 	bl	8002a94 <UART_send>
		//vExt[0] = textrc[28]; 	// Toldo Tendedero
		vExt[1] = textrc[31]; 	// Luz Tendedero
 8001a02:	4b34      	ldr	r3, [pc, #208]	; (8001ad4 <ESP_messageHandler+0x7f0>)
 8001a04:	7fda      	ldrb	r2, [r3, #31]
 8001a06:	4b2e      	ldr	r3, [pc, #184]	; (8001ac0 <ESP_messageHandler+0x7dc>)
 8001a08:	705a      	strb	r2, [r3, #1]
		vExt[2] = textrc[34]; 	// Luz Porche
 8001a0a:	4b32      	ldr	r3, [pc, #200]	; (8001ad4 <ESP_messageHandler+0x7f0>)
 8001a0c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001a10:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <ESP_messageHandler+0x7dc>)
 8001a12:	709a      	strb	r2, [r3, #2]
		vExt[3] = textrc[37]; 	// Luz Jardín
 8001a14:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <ESP_messageHandler+0x7f0>)
 8001a16:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001a1a:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <ESP_messageHandler+0x7dc>)
 8001a1c:	70da      	strb	r2, [r3, #3]
		//vExt[4] = textrc[40]; 	// Puerta Parcela
		vExt[5] = textrc[43]; // Automático
 8001a1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <ESP_messageHandler+0x7f0>)
 8001a20:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8001a24:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <ESP_messageHandler+0x7dc>)
 8001a26:	715a      	strb	r2, [r3, #5]

		if(vIlum[25] == '0' || vExt[1] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET); // Luz Tendedero
 8001a28:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <ESP_messageHandler+0x7d0>)
 8001a2a:	7e5b      	ldrb	r3, [r3, #25]
 8001a2c:	2b30      	cmp	r3, #48	; 0x30
 8001a2e:	d003      	beq.n	8001a38 <ESP_messageHandler+0x754>
 8001a30:	4b23      	ldr	r3, [pc, #140]	; (8001ac0 <ESP_messageHandler+0x7dc>)
 8001a32:	785b      	ldrb	r3, [r3, #1]
 8001a34:	2b30      	cmp	r3, #48	; 0x30
 8001a36:	d106      	bne.n	8001a46 <ESP_messageHandler+0x762>
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a3e:	481f      	ldr	r0, [pc, #124]	; (8001abc <ESP_messageHandler+0x7d8>)
 8001a40:	f004 f812 	bl	8005a68 <HAL_GPIO_WritePin>
 8001a44:	e00d      	b.n	8001a62 <ESP_messageHandler+0x77e>
		else if(vIlum[25] == '1' || vExt[1] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8001a46:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <ESP_messageHandler+0x7d0>)
 8001a48:	7e5b      	ldrb	r3, [r3, #25]
 8001a4a:	2b31      	cmp	r3, #49	; 0x31
 8001a4c:	d003      	beq.n	8001a56 <ESP_messageHandler+0x772>
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <ESP_messageHandler+0x7dc>)
 8001a50:	785b      	ldrb	r3, [r3, #1]
 8001a52:	2b31      	cmp	r3, #49	; 0x31
 8001a54:	d105      	bne.n	8001a62 <ESP_messageHandler+0x77e>
 8001a56:	2201      	movs	r2, #1
 8001a58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a5c:	4817      	ldr	r0, [pc, #92]	; (8001abc <ESP_messageHandler+0x7d8>)
 8001a5e:	f004 f803 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[24] == '0' || vExt[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET); // Luz Porche
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <ESP_messageHandler+0x7d0>)
 8001a64:	7e1b      	ldrb	r3, [r3, #24]
 8001a66:	2b30      	cmp	r3, #48	; 0x30
 8001a68:	d003      	beq.n	8001a72 <ESP_messageHandler+0x78e>
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <ESP_messageHandler+0x7dc>)
 8001a6c:	789b      	ldrb	r3, [r3, #2]
 8001a6e:	2b30      	cmp	r3, #48	; 0x30
 8001a70:	d105      	bne.n	8001a7e <ESP_messageHandler+0x79a>
 8001a72:	2200      	movs	r2, #0
 8001a74:	2110      	movs	r1, #16
 8001a76:	4813      	ldr	r0, [pc, #76]	; (8001ac4 <ESP_messageHandler+0x7e0>)
 8001a78:	f003 fff6 	bl	8005a68 <HAL_GPIO_WritePin>
 8001a7c:	e00c      	b.n	8001a98 <ESP_messageHandler+0x7b4>
		else if(vIlum[24] == '1' || vExt[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <ESP_messageHandler+0x7d0>)
 8001a80:	7e1b      	ldrb	r3, [r3, #24]
 8001a82:	2b31      	cmp	r3, #49	; 0x31
 8001a84:	d003      	beq.n	8001a8e <ESP_messageHandler+0x7aa>
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <ESP_messageHandler+0x7dc>)
 8001a88:	789b      	ldrb	r3, [r3, #2]
 8001a8a:	2b31      	cmp	r3, #49	; 0x31
 8001a8c:	d104      	bne.n	8001a98 <ESP_messageHandler+0x7b4>
 8001a8e:	2201      	movs	r2, #1
 8001a90:	2110      	movs	r1, #16
 8001a92:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <ESP_messageHandler+0x7e0>)
 8001a94:	f003 ffe8 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[23] == '0' || vExt[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET); // Luz Jardín
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <ESP_messageHandler+0x7d0>)
 8001a9a:	7ddb      	ldrb	r3, [r3, #23]
 8001a9c:	2b30      	cmp	r3, #48	; 0x30
 8001a9e:	d003      	beq.n	8001aa8 <ESP_messageHandler+0x7c4>
 8001aa0:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <ESP_messageHandler+0x7dc>)
 8001aa2:	78db      	ldrb	r3, [r3, #3]
 8001aa4:	2b30      	cmp	r3, #48	; 0x30
 8001aa6:	d129      	bne.n	8001afc <ESP_messageHandler+0x818>
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2104      	movs	r1, #4
 8001aac:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <ESP_messageHandler+0x7e0>)
 8001aae:	f003 ffdb 	bl	8005a68 <HAL_GPIO_WritePin>
 8001ab2:	e030      	b.n	8001b16 <ESP_messageHandler+0x832>
 8001ab4:	2000099c 	.word	0x2000099c
 8001ab8:	2000096c 	.word	0x2000096c
 8001abc:	40020800 	.word	0x40020800
 8001ac0:	20000928 	.word	0x20000928
 8001ac4:	40020c00 	.word	0x40020c00
 8001ac8:	200009b8 	.word	0x200009b8
 8001acc:	20000d80 	.word	0x20000d80
 8001ad0:	0800914c 	.word	0x0800914c
 8001ad4:	200009d4 	.word	0x200009d4
 8001ad8:	2000091c 	.word	0x2000091c
 8001adc:	08009174 	.word	0x08009174
 8001ae0:	08009198 	.word	0x08009198
 8001ae4:	080091c0 	.word	0x080091c0
 8001ae8:	080091ec 	.word	0x080091ec
 8001aec:	08009214 	.word	0x08009214
 8001af0:	20000970 	.word	0x20000970
 8001af4:	40020400 	.word	0x40020400
 8001af8:	0800921c 	.word	0x0800921c
		else if(vIlum[23] == '1' || vExt[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8001afc:	4b9c      	ldr	r3, [pc, #624]	; (8001d70 <ESP_messageHandler+0xa8c>)
 8001afe:	7ddb      	ldrb	r3, [r3, #23]
 8001b00:	2b31      	cmp	r3, #49	; 0x31
 8001b02:	d003      	beq.n	8001b0c <ESP_messageHandler+0x828>
 8001b04:	4b9b      	ldr	r3, [pc, #620]	; (8001d74 <ESP_messageHandler+0xa90>)
 8001b06:	78db      	ldrb	r3, [r3, #3]
 8001b08:	2b31      	cmp	r3, #49	; 0x31
 8001b0a:	d104      	bne.n	8001b16 <ESP_messageHandler+0x832>
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	2104      	movs	r1, #4
 8001b10:	4899      	ldr	r0, [pc, #612]	; (8001d78 <ESP_messageHandler+0xa94>)
 8001b12:	f003 ffa9 	bl	8005a68 <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'P'){
 8001b16:	4b99      	ldr	r3, [pc, #612]	; (8001d7c <ESP_messageHandler+0xa98>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b50      	cmp	r3, #80	; 0x50
 8001b1c:	d108      	bne.n	8001b30 <ESP_messageHandler+0x84c>
		UART_send("PARCELA (EXTERIOR)\n", PC_UART);
 8001b1e:	4998      	ldr	r1, [pc, #608]	; (8001d80 <ESP_messageHandler+0xa9c>)
 8001b20:	4898      	ldr	r0, [pc, #608]	; (8001d84 <ESP_messageHandler+0xaa0>)
 8001b22:	f000 ffb7 	bl	8002a94 <UART_send>
		//vExt[0] = textrc[28]; 	// Toldo Tendedero
		//vExt[1] = textrc[31]; 	// Luz Tendedero
		//vExt[2] = textrc[34]; 	// Luz Porche
		//vExt[3] = textrc[37]; 	// Luz Jardín
		vExt[4] = textrc[40]; 	// Puerta Parcela
 8001b26:	4b98      	ldr	r3, [pc, #608]	; (8001d88 <ESP_messageHandler+0xaa4>)
 8001b28:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001b2c:	4b91      	ldr	r3, [pc, #580]	; (8001d74 <ESP_messageHandler+0xa90>)
 8001b2e:	711a      	strb	r2, [r3, #4]
	}

	if (fragment[0] == 'R'){
 8001b30:	4b92      	ldr	r3, [pc, #584]	; (8001d7c <ESP_messageHandler+0xa98>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b52      	cmp	r3, #82	; 0x52
 8001b36:	d107      	bne.n	8001b48 <ESP_messageHandler+0x864>
		UART_send("TENDEDERO (EXTERIOR)\n", PC_UART);
 8001b38:	4991      	ldr	r1, [pc, #580]	; (8001d80 <ESP_messageHandler+0xa9c>)
 8001b3a:	4894      	ldr	r0, [pc, #592]	; (8001d8c <ESP_messageHandler+0xaa8>)
 8001b3c:	f000 ffaa 	bl	8002a94 <UART_send>
		vExt[0] = textrc[28]; 	// Toldo Tendedero
 8001b40:	4b91      	ldr	r3, [pc, #580]	; (8001d88 <ESP_messageHandler+0xaa4>)
 8001b42:	7f1a      	ldrb	r2, [r3, #28]
 8001b44:	4b8b      	ldr	r3, [pc, #556]	; (8001d74 <ESP_messageHandler+0xa90>)
 8001b46:	701a      	strb	r2, [r3, #0]
		//vExt[3] = textrc[37]; 	// Luz Jardín
		//vExt[4] = textrc[40]; 	// Puerta Parcela
	}

	// SALÓN
	if (fragment[0] == 'n'){
 8001b48:	4b8c      	ldr	r3, [pc, #560]	; (8001d7c <ESP_messageHandler+0xa98>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b6e      	cmp	r3, #110	; 0x6e
 8001b4e:	f040 809a 	bne.w	8001c86 <ESP_messageHandler+0x9a2>
		UART_send("SALON \n", PC_UART);
 8001b52:	498b      	ldr	r1, [pc, #556]	; (8001d80 <ESP_messageHandler+0xa9c>)
 8001b54:	488e      	ldr	r0, [pc, #568]	; (8001d90 <ESP_messageHandler+0xaac>)
 8001b56:	f000 ff9d 	bl	8002a94 <UART_send>
		vSal[0] = textrc[28]; 	// Televisión
 8001b5a:	4b8b      	ldr	r3, [pc, #556]	; (8001d88 <ESP_messageHandler+0xaa4>)
 8001b5c:	7f1a      	ldrb	r2, [r3, #28]
 8001b5e:	4b8d      	ldr	r3, [pc, #564]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001b60:	701a      	strb	r2, [r3, #0]
		vSal[1] = textrc[31]; 	// Luz Sala
 8001b62:	4b89      	ldr	r3, [pc, #548]	; (8001d88 <ESP_messageHandler+0xaa4>)
 8001b64:	7fda      	ldrb	r2, [r3, #31]
 8001b66:	4b8b      	ldr	r3, [pc, #556]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001b68:	705a      	strb	r2, [r3, #1]
		vSal[2] = textrc[34]; 	// Luz Comedor
 8001b6a:	4b87      	ldr	r3, [pc, #540]	; (8001d88 <ESP_messageHandler+0xaa4>)
 8001b6c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001b70:	4b88      	ldr	r3, [pc, #544]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001b72:	709a      	strb	r2, [r3, #2]
		vSal[3] = textrc[37]; 	// Luz Ambiente
 8001b74:	4b84      	ldr	r3, [pc, #528]	; (8001d88 <ESP_messageHandler+0xaa4>)
 8001b76:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001b7a:	4b86      	ldr	r3, [pc, #536]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001b7c:	70da      	strb	r2, [r3, #3]
		vSal[4] = textrc[40]; 	// Luz Recibidor
 8001b7e:	4b82      	ldr	r3, [pc, #520]	; (8001d88 <ESP_messageHandler+0xaa4>)
 8001b80:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001b84:	4b83      	ldr	r3, [pc, #524]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001b86:	711a      	strb	r2, [r3, #4]
		//vSal[5] = textrc[43]; 	// V. Salón

		if(vSal[0] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET); // Televisión
 8001b88:	4b82      	ldr	r3, [pc, #520]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b30      	cmp	r3, #48	; 0x30
 8001b8e:	d105      	bne.n	8001b9c <ESP_messageHandler+0x8b8>
 8001b90:	2200      	movs	r2, #0
 8001b92:	2180      	movs	r1, #128	; 0x80
 8001b94:	4880      	ldr	r0, [pc, #512]	; (8001d98 <ESP_messageHandler+0xab4>)
 8001b96:	f003 ff67 	bl	8005a68 <HAL_GPIO_WritePin>
 8001b9a:	e008      	b.n	8001bae <ESP_messageHandler+0x8ca>
		else if(vSal[0] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 8001b9c:	4b7d      	ldr	r3, [pc, #500]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b31      	cmp	r3, #49	; 0x31
 8001ba2:	d104      	bne.n	8001bae <ESP_messageHandler+0x8ca>
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	2180      	movs	r1, #128	; 0x80
 8001ba8:	487b      	ldr	r0, [pc, #492]	; (8001d98 <ESP_messageHandler+0xab4>)
 8001baa:	f003 ff5d 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[0] == '0' || vSal[1] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, RESET); // Luz Sala
 8001bae:	4b70      	ldr	r3, [pc, #448]	; (8001d70 <ESP_messageHandler+0xa8c>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b30      	cmp	r3, #48	; 0x30
 8001bb4:	d003      	beq.n	8001bbe <ESP_messageHandler+0x8da>
 8001bb6:	4b77      	ldr	r3, [pc, #476]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001bb8:	785b      	ldrb	r3, [r3, #1]
 8001bba:	2b30      	cmp	r3, #48	; 0x30
 8001bbc:	d105      	bne.n	8001bca <ESP_messageHandler+0x8e6>
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2108      	movs	r1, #8
 8001bc2:	486d      	ldr	r0, [pc, #436]	; (8001d78 <ESP_messageHandler+0xa94>)
 8001bc4:	f003 ff50 	bl	8005a68 <HAL_GPIO_WritePin>
 8001bc8:	e00c      	b.n	8001be4 <ESP_messageHandler+0x900>
		else if(vIlum[0] == '1' || vSal[1] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, SET);
 8001bca:	4b69      	ldr	r3, [pc, #420]	; (8001d70 <ESP_messageHandler+0xa8c>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b31      	cmp	r3, #49	; 0x31
 8001bd0:	d003      	beq.n	8001bda <ESP_messageHandler+0x8f6>
 8001bd2:	4b70      	ldr	r3, [pc, #448]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001bd4:	785b      	ldrb	r3, [r3, #1]
 8001bd6:	2b31      	cmp	r3, #49	; 0x31
 8001bd8:	d104      	bne.n	8001be4 <ESP_messageHandler+0x900>
 8001bda:	2201      	movs	r2, #1
 8001bdc:	2108      	movs	r1, #8
 8001bde:	4866      	ldr	r0, [pc, #408]	; (8001d78 <ESP_messageHandler+0xa94>)
 8001be0:	f003 ff42 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[1] == '0' || vSal[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET); // Luz Comedor
 8001be4:	4b62      	ldr	r3, [pc, #392]	; (8001d70 <ESP_messageHandler+0xa8c>)
 8001be6:	785b      	ldrb	r3, [r3, #1]
 8001be8:	2b30      	cmp	r3, #48	; 0x30
 8001bea:	d003      	beq.n	8001bf4 <ESP_messageHandler+0x910>
 8001bec:	4b69      	ldr	r3, [pc, #420]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001bee:	789b      	ldrb	r3, [r3, #2]
 8001bf0:	2b30      	cmp	r3, #48	; 0x30
 8001bf2:	d105      	bne.n	8001c00 <ESP_messageHandler+0x91c>
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2102      	movs	r1, #2
 8001bf8:	485f      	ldr	r0, [pc, #380]	; (8001d78 <ESP_messageHandler+0xa94>)
 8001bfa:	f003 ff35 	bl	8005a68 <HAL_GPIO_WritePin>
 8001bfe:	e00c      	b.n	8001c1a <ESP_messageHandler+0x936>
		else if(vIlum[1] == '1' || vSal[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, SET);
 8001c00:	4b5b      	ldr	r3, [pc, #364]	; (8001d70 <ESP_messageHandler+0xa8c>)
 8001c02:	785b      	ldrb	r3, [r3, #1]
 8001c04:	2b31      	cmp	r3, #49	; 0x31
 8001c06:	d003      	beq.n	8001c10 <ESP_messageHandler+0x92c>
 8001c08:	4b62      	ldr	r3, [pc, #392]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001c0a:	789b      	ldrb	r3, [r3, #2]
 8001c0c:	2b31      	cmp	r3, #49	; 0x31
 8001c0e:	d104      	bne.n	8001c1a <ESP_messageHandler+0x936>
 8001c10:	2201      	movs	r2, #1
 8001c12:	2102      	movs	r1, #2
 8001c14:	4858      	ldr	r0, [pc, #352]	; (8001d78 <ESP_messageHandler+0xa94>)
 8001c16:	f003 ff27 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[2] == '0' || vSal[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, RESET); // Luz Ambiente
 8001c1a:	4b55      	ldr	r3, [pc, #340]	; (8001d70 <ESP_messageHandler+0xa8c>)
 8001c1c:	789b      	ldrb	r3, [r3, #2]
 8001c1e:	2b30      	cmp	r3, #48	; 0x30
 8001c20:	d003      	beq.n	8001c2a <ESP_messageHandler+0x946>
 8001c22:	4b5c      	ldr	r3, [pc, #368]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001c24:	78db      	ldrb	r3, [r3, #3]
 8001c26:	2b30      	cmp	r3, #48	; 0x30
 8001c28:	d105      	bne.n	8001c36 <ESP_messageHandler+0x952>
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2120      	movs	r1, #32
 8001c2e:	4852      	ldr	r0, [pc, #328]	; (8001d78 <ESP_messageHandler+0xa94>)
 8001c30:	f003 ff1a 	bl	8005a68 <HAL_GPIO_WritePin>
 8001c34:	e00c      	b.n	8001c50 <ESP_messageHandler+0x96c>
		else if(vIlum[2] == '1' || vSal[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, SET);
 8001c36:	4b4e      	ldr	r3, [pc, #312]	; (8001d70 <ESP_messageHandler+0xa8c>)
 8001c38:	789b      	ldrb	r3, [r3, #2]
 8001c3a:	2b31      	cmp	r3, #49	; 0x31
 8001c3c:	d003      	beq.n	8001c46 <ESP_messageHandler+0x962>
 8001c3e:	4b55      	ldr	r3, [pc, #340]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001c40:	78db      	ldrb	r3, [r3, #3]
 8001c42:	2b31      	cmp	r3, #49	; 0x31
 8001c44:	d104      	bne.n	8001c50 <ESP_messageHandler+0x96c>
 8001c46:	2201      	movs	r2, #1
 8001c48:	2120      	movs	r1, #32
 8001c4a:	484b      	ldr	r0, [pc, #300]	; (8001d78 <ESP_messageHandler+0xa94>)
 8001c4c:	f003 ff0c 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[3] == '0' || vSal[4] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET); // Luz Recibidor
 8001c50:	4b47      	ldr	r3, [pc, #284]	; (8001d70 <ESP_messageHandler+0xa8c>)
 8001c52:	78db      	ldrb	r3, [r3, #3]
 8001c54:	2b30      	cmp	r3, #48	; 0x30
 8001c56:	d003      	beq.n	8001c60 <ESP_messageHandler+0x97c>
 8001c58:	4b4e      	ldr	r3, [pc, #312]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001c5a:	791b      	ldrb	r3, [r3, #4]
 8001c5c:	2b30      	cmp	r3, #48	; 0x30
 8001c5e:	d105      	bne.n	8001c6c <ESP_messageHandler+0x988>
 8001c60:	2200      	movs	r2, #0
 8001c62:	2101      	movs	r1, #1
 8001c64:	4844      	ldr	r0, [pc, #272]	; (8001d78 <ESP_messageHandler+0xa94>)
 8001c66:	f003 feff 	bl	8005a68 <HAL_GPIO_WritePin>
 8001c6a:	e00c      	b.n	8001c86 <ESP_messageHandler+0x9a2>
		else if(vIlum[3] == '1' || vSal[4] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 8001c6c:	4b40      	ldr	r3, [pc, #256]	; (8001d70 <ESP_messageHandler+0xa8c>)
 8001c6e:	78db      	ldrb	r3, [r3, #3]
 8001c70:	2b31      	cmp	r3, #49	; 0x31
 8001c72:	d003      	beq.n	8001c7c <ESP_messageHandler+0x998>
 8001c74:	4b47      	ldr	r3, [pc, #284]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001c76:	791b      	ldrb	r3, [r3, #4]
 8001c78:	2b31      	cmp	r3, #49	; 0x31
 8001c7a:	d104      	bne.n	8001c86 <ESP_messageHandler+0x9a2>
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	2101      	movs	r1, #1
 8001c80:	483d      	ldr	r0, [pc, #244]	; (8001d78 <ESP_messageHandler+0xa94>)
 8001c82:	f003 fef1 	bl	8005a68 <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'N'){
 8001c86:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <ESP_messageHandler+0xa98>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b4e      	cmp	r3, #78	; 0x4e
 8001c8c:	d108      	bne.n	8001ca0 <ESP_messageHandler+0x9bc>
			UART_send("V. SALON (SALON) \n", PC_UART);
 8001c8e:	493c      	ldr	r1, [pc, #240]	; (8001d80 <ESP_messageHandler+0xa9c>)
 8001c90:	4842      	ldr	r0, [pc, #264]	; (8001d9c <ESP_messageHandler+0xab8>)
 8001c92:	f000 feff 	bl	8002a94 <UART_send>
			//vSal[0] = textrc[28]; 	// Televisión
			//vSal[1] = textrc[31]; 	// Luz Sala
			//vSal[2] = textrc[34]; 	// Luz Comedor
			//vSal[3] = textrc[37]; 	// Luz Ambiente
			//vSal[4] = textrc[40]; 	// Luz Recibidor
			vSal[5] = textrc[43]; 	// V. Salón
 8001c96:	4b3c      	ldr	r3, [pc, #240]	; (8001d88 <ESP_messageHandler+0xaa4>)
 8001c98:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8001c9c:	4b3d      	ldr	r3, [pc, #244]	; (8001d94 <ESP_messageHandler+0xab0>)
 8001c9e:	715a      	strb	r2, [r3, #5]
	}

	// COCINA
	if (fragment[0] == 'c'){
 8001ca0:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <ESP_messageHandler+0xa98>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b63      	cmp	r3, #99	; 0x63
 8001ca6:	d145      	bne.n	8001d34 <ESP_messageHandler+0xa50>
		UART_send("COCINA \n", PC_UART);
 8001ca8:	4935      	ldr	r1, [pc, #212]	; (8001d80 <ESP_messageHandler+0xa9c>)
 8001caa:	483d      	ldr	r0, [pc, #244]	; (8001da0 <ESP_messageHandler+0xabc>)
 8001cac:	f000 fef2 	bl	8002a94 <UART_send>
		vCoc[0] = textrc[28]; 	// Luz Cocina
 8001cb0:	4b35      	ldr	r3, [pc, #212]	; (8001d88 <ESP_messageHandler+0xaa4>)
 8001cb2:	7f1a      	ldrb	r2, [r3, #28]
 8001cb4:	4b3b      	ldr	r3, [pc, #236]	; (8001da4 <ESP_messageHandler+0xac0>)
 8001cb6:	701a      	strb	r2, [r3, #0]
		vCoc[1] = textrc[31]; 	// Luz Fregadero
 8001cb8:	4b33      	ldr	r3, [pc, #204]	; (8001d88 <ESP_messageHandler+0xaa4>)
 8001cba:	7fda      	ldrb	r2, [r3, #31]
 8001cbc:	4b39      	ldr	r3, [pc, #228]	; (8001da4 <ESP_messageHandler+0xac0>)
 8001cbe:	705a      	strb	r2, [r3, #1]

		if(vIlum[4] == '0' || vCoc[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET); // Luz Cocina
 8001cc0:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <ESP_messageHandler+0xa8c>)
 8001cc2:	791b      	ldrb	r3, [r3, #4]
 8001cc4:	2b30      	cmp	r3, #48	; 0x30
 8001cc6:	d003      	beq.n	8001cd0 <ESP_messageHandler+0x9ec>
 8001cc8:	4b36      	ldr	r3, [pc, #216]	; (8001da4 <ESP_messageHandler+0xac0>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b30      	cmp	r3, #48	; 0x30
 8001cce:	d106      	bne.n	8001cde <ESP_messageHandler+0x9fa>
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cd6:	4834      	ldr	r0, [pc, #208]	; (8001da8 <ESP_messageHandler+0xac4>)
 8001cd8:	f003 fec6 	bl	8005a68 <HAL_GPIO_WritePin>
 8001cdc:	e00d      	b.n	8001cfa <ESP_messageHandler+0xa16>
		else if(vIlum[4] == '1' || vCoc[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 8001cde:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <ESP_messageHandler+0xa8c>)
 8001ce0:	791b      	ldrb	r3, [r3, #4]
 8001ce2:	2b31      	cmp	r3, #49	; 0x31
 8001ce4:	d003      	beq.n	8001cee <ESP_messageHandler+0xa0a>
 8001ce6:	4b2f      	ldr	r3, [pc, #188]	; (8001da4 <ESP_messageHandler+0xac0>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b31      	cmp	r3, #49	; 0x31
 8001cec:	d105      	bne.n	8001cfa <ESP_messageHandler+0xa16>
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cf4:	482c      	ldr	r0, [pc, #176]	; (8001da8 <ESP_messageHandler+0xac4>)
 8001cf6:	f003 feb7 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[5] == '0' || vCoc[1] == '0') HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET); // Luz Fregadero
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <ESP_messageHandler+0xa8c>)
 8001cfc:	795b      	ldrb	r3, [r3, #5]
 8001cfe:	2b30      	cmp	r3, #48	; 0x30
 8001d00:	d003      	beq.n	8001d0a <ESP_messageHandler+0xa26>
 8001d02:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <ESP_messageHandler+0xac0>)
 8001d04:	785b      	ldrb	r3, [r3, #1]
 8001d06:	2b30      	cmp	r3, #48	; 0x30
 8001d08:	d106      	bne.n	8001d18 <ESP_messageHandler+0xa34>
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d10:	4826      	ldr	r0, [pc, #152]	; (8001dac <ESP_messageHandler+0xac8>)
 8001d12:	f003 fea9 	bl	8005a68 <HAL_GPIO_WritePin>
 8001d16:	e00d      	b.n	8001d34 <ESP_messageHandler+0xa50>
		else if(vIlum[5] == '1' || vCoc[1] == '1')HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 8001d18:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <ESP_messageHandler+0xa8c>)
 8001d1a:	795b      	ldrb	r3, [r3, #5]
 8001d1c:	2b31      	cmp	r3, #49	; 0x31
 8001d1e:	d003      	beq.n	8001d28 <ESP_messageHandler+0xa44>
 8001d20:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <ESP_messageHandler+0xac0>)
 8001d22:	785b      	ldrb	r3, [r3, #1]
 8001d24:	2b31      	cmp	r3, #49	; 0x31
 8001d26:	d105      	bne.n	8001d34 <ESP_messageHandler+0xa50>
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d2e:	481f      	ldr	r0, [pc, #124]	; (8001dac <ESP_messageHandler+0xac8>)
 8001d30:	f003 fe9a 	bl	8005a68 <HAL_GPIO_WritePin>
	}

	// BAÑO
	if (fragment[0] == 'b'){
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <ESP_messageHandler+0xa98>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b62      	cmp	r3, #98	; 0x62
 8001d3a:	d165      	bne.n	8001e08 <ESP_messageHandler+0xb24>
		UART_send("BAÑO \n", PC_UART);
 8001d3c:	4910      	ldr	r1, [pc, #64]	; (8001d80 <ESP_messageHandler+0xa9c>)
 8001d3e:	481c      	ldr	r0, [pc, #112]	; (8001db0 <ESP_messageHandler+0xacc>)
 8001d40:	f000 fea8 	bl	8002a94 <UART_send>
		vBan[0] = textrc[28]; 	// Luz Baño
 8001d44:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <ESP_messageHandler+0xaa4>)
 8001d46:	7f1a      	ldrb	r2, [r3, #28]
 8001d48:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <ESP_messageHandler+0xad0>)
 8001d4a:	701a      	strb	r2, [r3, #0]
		vBan[1] = textrc[31]; 	// Luz Espejo
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <ESP_messageHandler+0xaa4>)
 8001d4e:	7fda      	ldrb	r2, [r3, #31]
 8001d50:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <ESP_messageHandler+0xad0>)
 8001d52:	705a      	strb	r2, [r3, #1]

		if(vIlum[6] == '0' || vBan[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, RESET); // Luz Baño
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <ESP_messageHandler+0xa8c>)
 8001d56:	799b      	ldrb	r3, [r3, #6]
 8001d58:	2b30      	cmp	r3, #48	; 0x30
 8001d5a:	d003      	beq.n	8001d64 <ESP_messageHandler+0xa80>
 8001d5c:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <ESP_messageHandler+0xad0>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b30      	cmp	r3, #48	; 0x30
 8001d62:	d129      	bne.n	8001db8 <ESP_messageHandler+0xad4>
 8001d64:	2200      	movs	r2, #0
 8001d66:	2140      	movs	r1, #64	; 0x40
 8001d68:	4803      	ldr	r0, [pc, #12]	; (8001d78 <ESP_messageHandler+0xa94>)
 8001d6a:	f003 fe7d 	bl	8005a68 <HAL_GPIO_WritePin>
 8001d6e:	e030      	b.n	8001dd2 <ESP_messageHandler+0xaee>
 8001d70:	2000099c 	.word	0x2000099c
 8001d74:	20000928 	.word	0x20000928
 8001d78:	40020c00 	.word	0x40020c00
 8001d7c:	200009b8 	.word	0x200009b8
 8001d80:	20000d80 	.word	0x20000d80
 8001d84:	08009230 	.word	0x08009230
 8001d88:	200009d4 	.word	0x200009d4
 8001d8c:	08009244 	.word	0x08009244
 8001d90:	0800925c 	.word	0x0800925c
 8001d94:	20000a44 	.word	0x20000a44
 8001d98:	40020400 	.word	0x40020400
 8001d9c:	08009264 	.word	0x08009264
 8001da0:	08009278 	.word	0x08009278
 8001da4:	2000090c 	.word	0x2000090c
 8001da8:	40020800 	.word	0x40020800
 8001dac:	40020000 	.word	0x40020000
 8001db0:	08009284 	.word	0x08009284
 8001db4:	20000984 	.word	0x20000984
		else if(vIlum[6] == '1' || vBan[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, SET);
 8001db8:	4b84      	ldr	r3, [pc, #528]	; (8001fcc <ESP_messageHandler+0xce8>)
 8001dba:	799b      	ldrb	r3, [r3, #6]
 8001dbc:	2b31      	cmp	r3, #49	; 0x31
 8001dbe:	d003      	beq.n	8001dc8 <ESP_messageHandler+0xae4>
 8001dc0:	4b83      	ldr	r3, [pc, #524]	; (8001fd0 <ESP_messageHandler+0xcec>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b31      	cmp	r3, #49	; 0x31
 8001dc6:	d104      	bne.n	8001dd2 <ESP_messageHandler+0xaee>
 8001dc8:	2201      	movs	r2, #1
 8001dca:	2140      	movs	r1, #64	; 0x40
 8001dcc:	4881      	ldr	r0, [pc, #516]	; (8001fd4 <ESP_messageHandler+0xcf0>)
 8001dce:	f003 fe4b 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[7] == '0' || vBan[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET); // Luz Espejo
 8001dd2:	4b7e      	ldr	r3, [pc, #504]	; (8001fcc <ESP_messageHandler+0xce8>)
 8001dd4:	79db      	ldrb	r3, [r3, #7]
 8001dd6:	2b30      	cmp	r3, #48	; 0x30
 8001dd8:	d003      	beq.n	8001de2 <ESP_messageHandler+0xafe>
 8001dda:	4b7d      	ldr	r3, [pc, #500]	; (8001fd0 <ESP_messageHandler+0xcec>)
 8001ddc:	785b      	ldrb	r3, [r3, #1]
 8001dde:	2b30      	cmp	r3, #48	; 0x30
 8001de0:	d105      	bne.n	8001dee <ESP_messageHandler+0xb0a>
 8001de2:	2200      	movs	r2, #0
 8001de4:	2108      	movs	r1, #8
 8001de6:	487c      	ldr	r0, [pc, #496]	; (8001fd8 <ESP_messageHandler+0xcf4>)
 8001de8:	f003 fe3e 	bl	8005a68 <HAL_GPIO_WritePin>
 8001dec:	e00c      	b.n	8001e08 <ESP_messageHandler+0xb24>
		else if(vIlum[7] == '1' || vBan[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8001dee:	4b77      	ldr	r3, [pc, #476]	; (8001fcc <ESP_messageHandler+0xce8>)
 8001df0:	79db      	ldrb	r3, [r3, #7]
 8001df2:	2b31      	cmp	r3, #49	; 0x31
 8001df4:	d003      	beq.n	8001dfe <ESP_messageHandler+0xb1a>
 8001df6:	4b76      	ldr	r3, [pc, #472]	; (8001fd0 <ESP_messageHandler+0xcec>)
 8001df8:	785b      	ldrb	r3, [r3, #1]
 8001dfa:	2b31      	cmp	r3, #49	; 0x31
 8001dfc:	d104      	bne.n	8001e08 <ESP_messageHandler+0xb24>
 8001dfe:	2201      	movs	r2, #1
 8001e00:	2108      	movs	r1, #8
 8001e02:	4875      	ldr	r0, [pc, #468]	; (8001fd8 <ESP_messageHandler+0xcf4>)
 8001e04:	f003 fe30 	bl	8005a68 <HAL_GPIO_WritePin>
	}

	// DORMITORIO
	if (fragment[0] == 'r'){
 8001e08:	4b74      	ldr	r3, [pc, #464]	; (8001fdc <ESP_messageHandler+0xcf8>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b72      	cmp	r3, #114	; 0x72
 8001e0e:	d161      	bne.n	8001ed4 <ESP_messageHandler+0xbf0>
		UART_send("LUCES (DORMITORIO) \n", PC_UART);
 8001e10:	4973      	ldr	r1, [pc, #460]	; (8001fe0 <ESP_messageHandler+0xcfc>)
 8001e12:	4874      	ldr	r0, [pc, #464]	; (8001fe4 <ESP_messageHandler+0xd00>)
 8001e14:	f000 fe3e 	bl	8002a94 <UART_send>
		vDor[0] = textrc[28]; 	// Luz Dormitorio
 8001e18:	4b73      	ldr	r3, [pc, #460]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001e1a:	7f1a      	ldrb	r2, [r3, #28]
 8001e1c:	4b73      	ldr	r3, [pc, #460]	; (8001fec <ESP_messageHandler+0xd08>)
 8001e1e:	701a      	strb	r2, [r3, #0]
		vDor[1] = textrc[31]; 	// Luz Mesita Izq
 8001e20:	4b71      	ldr	r3, [pc, #452]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001e22:	7fda      	ldrb	r2, [r3, #31]
 8001e24:	4b71      	ldr	r3, [pc, #452]	; (8001fec <ESP_messageHandler+0xd08>)
 8001e26:	705a      	strb	r2, [r3, #1]
		vDor[2] = textrc[34]; 	// Luz Mesita Dch
 8001e28:	4b6f      	ldr	r3, [pc, #444]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001e2a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001e2e:	4b6f      	ldr	r3, [pc, #444]	; (8001fec <ESP_messageHandler+0xd08>)
 8001e30:	709a      	strb	r2, [r3, #2]
		//vDor[3] = textrc[37]; 	// V. Dormitorio

		if(vIlum[8] == '0' || vDor[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, RESET); // Luz Dormitorio
 8001e32:	4b66      	ldr	r3, [pc, #408]	; (8001fcc <ESP_messageHandler+0xce8>)
 8001e34:	7a1b      	ldrb	r3, [r3, #8]
 8001e36:	2b30      	cmp	r3, #48	; 0x30
 8001e38:	d003      	beq.n	8001e42 <ESP_messageHandler+0xb5e>
 8001e3a:	4b6c      	ldr	r3, [pc, #432]	; (8001fec <ESP_messageHandler+0xd08>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b30      	cmp	r3, #48	; 0x30
 8001e40:	d105      	bne.n	8001e4e <ESP_messageHandler+0xb6a>
 8001e42:	2200      	movs	r2, #0
 8001e44:	2180      	movs	r1, #128	; 0x80
 8001e46:	4863      	ldr	r0, [pc, #396]	; (8001fd4 <ESP_messageHandler+0xcf0>)
 8001e48:	f003 fe0e 	bl	8005a68 <HAL_GPIO_WritePin>
 8001e4c:	e00c      	b.n	8001e68 <ESP_messageHandler+0xb84>
		else if(vIlum[8] == '1' || vDor[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET);
 8001e4e:	4b5f      	ldr	r3, [pc, #380]	; (8001fcc <ESP_messageHandler+0xce8>)
 8001e50:	7a1b      	ldrb	r3, [r3, #8]
 8001e52:	2b31      	cmp	r3, #49	; 0x31
 8001e54:	d003      	beq.n	8001e5e <ESP_messageHandler+0xb7a>
 8001e56:	4b65      	ldr	r3, [pc, #404]	; (8001fec <ESP_messageHandler+0xd08>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b31      	cmp	r3, #49	; 0x31
 8001e5c:	d104      	bne.n	8001e68 <ESP_messageHandler+0xb84>
 8001e5e:	2201      	movs	r2, #1
 8001e60:	2180      	movs	r1, #128	; 0x80
 8001e62:	485c      	ldr	r0, [pc, #368]	; (8001fd4 <ESP_messageHandler+0xcf0>)
 8001e64:	f003 fe00 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[9] == '0' || vDor[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET); // Luz Mesita Izq
 8001e68:	4b58      	ldr	r3, [pc, #352]	; (8001fcc <ESP_messageHandler+0xce8>)
 8001e6a:	7a5b      	ldrb	r3, [r3, #9]
 8001e6c:	2b30      	cmp	r3, #48	; 0x30
 8001e6e:	d003      	beq.n	8001e78 <ESP_messageHandler+0xb94>
 8001e70:	4b5e      	ldr	r3, [pc, #376]	; (8001fec <ESP_messageHandler+0xd08>)
 8001e72:	785b      	ldrb	r3, [r3, #1]
 8001e74:	2b30      	cmp	r3, #48	; 0x30
 8001e76:	d105      	bne.n	8001e84 <ESP_messageHandler+0xba0>
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2110      	movs	r1, #16
 8001e7c:	4856      	ldr	r0, [pc, #344]	; (8001fd8 <ESP_messageHandler+0xcf4>)
 8001e7e:	f003 fdf3 	bl	8005a68 <HAL_GPIO_WritePin>
 8001e82:	e00c      	b.n	8001e9e <ESP_messageHandler+0xbba>
		else if(vIlum[9] == '1' || vDor[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001e84:	4b51      	ldr	r3, [pc, #324]	; (8001fcc <ESP_messageHandler+0xce8>)
 8001e86:	7a5b      	ldrb	r3, [r3, #9]
 8001e88:	2b31      	cmp	r3, #49	; 0x31
 8001e8a:	d003      	beq.n	8001e94 <ESP_messageHandler+0xbb0>
 8001e8c:	4b57      	ldr	r3, [pc, #348]	; (8001fec <ESP_messageHandler+0xd08>)
 8001e8e:	785b      	ldrb	r3, [r3, #1]
 8001e90:	2b31      	cmp	r3, #49	; 0x31
 8001e92:	d104      	bne.n	8001e9e <ESP_messageHandler+0xbba>
 8001e94:	2201      	movs	r2, #1
 8001e96:	2110      	movs	r1, #16
 8001e98:	484f      	ldr	r0, [pc, #316]	; (8001fd8 <ESP_messageHandler+0xcf4>)
 8001e9a:	f003 fde5 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[10] == '0' || vDor[2] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET); // Luz Mesita Dch
 8001e9e:	4b4b      	ldr	r3, [pc, #300]	; (8001fcc <ESP_messageHandler+0xce8>)
 8001ea0:	7a9b      	ldrb	r3, [r3, #10]
 8001ea2:	2b30      	cmp	r3, #48	; 0x30
 8001ea4:	d003      	beq.n	8001eae <ESP_messageHandler+0xbca>
 8001ea6:	4b51      	ldr	r3, [pc, #324]	; (8001fec <ESP_messageHandler+0xd08>)
 8001ea8:	789b      	ldrb	r3, [r3, #2]
 8001eaa:	2b30      	cmp	r3, #48	; 0x30
 8001eac:	d105      	bne.n	8001eba <ESP_messageHandler+0xbd6>
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2140      	movs	r1, #64	; 0x40
 8001eb2:	4849      	ldr	r0, [pc, #292]	; (8001fd8 <ESP_messageHandler+0xcf4>)
 8001eb4:	f003 fdd8 	bl	8005a68 <HAL_GPIO_WritePin>
 8001eb8:	e00c      	b.n	8001ed4 <ESP_messageHandler+0xbf0>
		else if(vIlum[10] == '1' || vDor[2] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8001eba:	4b44      	ldr	r3, [pc, #272]	; (8001fcc <ESP_messageHandler+0xce8>)
 8001ebc:	7a9b      	ldrb	r3, [r3, #10]
 8001ebe:	2b31      	cmp	r3, #49	; 0x31
 8001ec0:	d003      	beq.n	8001eca <ESP_messageHandler+0xbe6>
 8001ec2:	4b4a      	ldr	r3, [pc, #296]	; (8001fec <ESP_messageHandler+0xd08>)
 8001ec4:	789b      	ldrb	r3, [r3, #2]
 8001ec6:	2b31      	cmp	r3, #49	; 0x31
 8001ec8:	d104      	bne.n	8001ed4 <ESP_messageHandler+0xbf0>
 8001eca:	2201      	movs	r2, #1
 8001ecc:	2140      	movs	r1, #64	; 0x40
 8001ece:	4842      	ldr	r0, [pc, #264]	; (8001fd8 <ESP_messageHandler+0xcf4>)
 8001ed0:	f003 fdca 	bl	8005a68 <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'D'){
 8001ed4:	4b41      	ldr	r3, [pc, #260]	; (8001fdc <ESP_messageHandler+0xcf8>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b44      	cmp	r3, #68	; 0x44
 8001eda:	d108      	bne.n	8001eee <ESP_messageHandler+0xc0a>
		UART_send("V. DORMITORIO (DORMITORIO) \n", PC_UART);
 8001edc:	4940      	ldr	r1, [pc, #256]	; (8001fe0 <ESP_messageHandler+0xcfc>)
 8001ede:	4844      	ldr	r0, [pc, #272]	; (8001ff0 <ESP_messageHandler+0xd0c>)
 8001ee0:	f000 fdd8 	bl	8002a94 <UART_send>
		//vDor[0] = textrc[28]; 	// Luz Dormitorio
		//vDor[1] = textrc[31]; 	// Luz Mesita Izq
		//vDor[2] = textrc[34]; 	// Luz Mesita Dch
		vDor[3] = textrc[37]; 	// V. Dormitorio
 8001ee4:	4b40      	ldr	r3, [pc, #256]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001ee6:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001eea:	4b40      	ldr	r3, [pc, #256]	; (8001fec <ESP_messageHandler+0xd08>)
 8001eec:	70da      	strb	r2, [r3, #3]
	}

	// OFICINA
	if (fragment[0] == 'f'){
 8001eee:	4b3b      	ldr	r3, [pc, #236]	; (8001fdc <ESP_messageHandler+0xcf8>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b66      	cmp	r3, #102	; 0x66
 8001ef4:	f040 80bf 	bne.w	8002076 <ESP_messageHandler+0xd92>
		UART_send("LUCES (OFICINA) \n", PC_UART);
 8001ef8:	4939      	ldr	r1, [pc, #228]	; (8001fe0 <ESP_messageHandler+0xcfc>)
 8001efa:	483e      	ldr	r0, [pc, #248]	; (8001ff4 <ESP_messageHandler+0xd10>)
 8001efc:	f000 fdca 	bl	8002a94 <UART_send>
		vOfi[0] = textrc[28]; // Luz Oficina
 8001f00:	4b39      	ldr	r3, [pc, #228]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001f02:	7f1a      	ldrb	r2, [r3, #28]
 8001f04:	4b3c      	ldr	r3, [pc, #240]	; (8001ff8 <ESP_messageHandler+0xd14>)
 8001f06:	701a      	strb	r2, [r3, #0]
		vOfi[1] = textrc[31]; // Luz Gaming
 8001f08:	4b37      	ldr	r3, [pc, #220]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001f0a:	7fda      	ldrb	r2, [r3, #31]
 8001f0c:	4b3a      	ldr	r3, [pc, #232]	; (8001ff8 <ESP_messageHandler+0xd14>)
 8001f0e:	705a      	strb	r2, [r3, #1]
		vOfi[2] = textrc[34]; // Luz Rx100
 8001f10:	4b35      	ldr	r3, [pc, #212]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001f12:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001f16:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <ESP_messageHandler+0xd14>)
 8001f18:	709a      	strb	r2, [r3, #2]
		vOfi[3] = textrc[35]; // Luz Rx10
 8001f1a:	4b33      	ldr	r3, [pc, #204]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001f1c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8001f20:	4b35      	ldr	r3, [pc, #212]	; (8001ff8 <ESP_messageHandler+0xd14>)
 8001f22:	70da      	strb	r2, [r3, #3]
		vOfi[4] = textrc[36]; // Luz Rx1
 8001f24:	4b30      	ldr	r3, [pc, #192]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001f26:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8001f2a:	4b33      	ldr	r3, [pc, #204]	; (8001ff8 <ESP_messageHandler+0xd14>)
 8001f2c:	711a      	strb	r2, [r3, #4]
		vOfi[5] = textrc[39]; // Luz Gx100
 8001f2e:	4b2e      	ldr	r3, [pc, #184]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001f30:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8001f34:	4b30      	ldr	r3, [pc, #192]	; (8001ff8 <ESP_messageHandler+0xd14>)
 8001f36:	715a      	strb	r2, [r3, #5]
		vOfi[6] = textrc[40]; // Luz Gx10
 8001f38:	4b2b      	ldr	r3, [pc, #172]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001f3a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001f3e:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <ESP_messageHandler+0xd14>)
 8001f40:	719a      	strb	r2, [r3, #6]
		vOfi[7] = textrc[41]; // Luz Gx1
 8001f42:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001f44:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001f48:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <ESP_messageHandler+0xd14>)
 8001f4a:	71da      	strb	r2, [r3, #7]
		vOfi[8] = textrc[44]; // Luz Bx100
 8001f4c:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001f4e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001f52:	4b29      	ldr	r3, [pc, #164]	; (8001ff8 <ESP_messageHandler+0xd14>)
 8001f54:	721a      	strb	r2, [r3, #8]
		vOfi[9] = textrc[45]; // Luz Bx10
 8001f56:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001f58:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8001f5c:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <ESP_messageHandler+0xd14>)
 8001f5e:	725a      	strb	r2, [r3, #9]
		vOfi[10] = textrc[46]; // Luz Bx1
 8001f60:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <ESP_messageHandler+0xd04>)
 8001f62:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8001f66:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <ESP_messageHandler+0xd14>)
 8001f68:	729a      	strb	r2, [r3, #10]
		//vOfi[11] = textrc[49]; // V. Oficina

		if(vIlum[11] == '0' || vOfi[0] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET); // Luz Oficina
 8001f6a:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <ESP_messageHandler+0xce8>)
 8001f6c:	7adb      	ldrb	r3, [r3, #11]
 8001f6e:	2b30      	cmp	r3, #48	; 0x30
 8001f70:	d003      	beq.n	8001f7a <ESP_messageHandler+0xc96>
 8001f72:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <ESP_messageHandler+0xd14>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b30      	cmp	r3, #48	; 0x30
 8001f78:	d105      	bne.n	8001f86 <ESP_messageHandler+0xca2>
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2120      	movs	r1, #32
 8001f7e:	4816      	ldr	r0, [pc, #88]	; (8001fd8 <ESP_messageHandler+0xcf4>)
 8001f80:	f003 fd72 	bl	8005a68 <HAL_GPIO_WritePin>
 8001f84:	e00c      	b.n	8001fa0 <ESP_messageHandler+0xcbc>
		else if(vIlum[11] == '1' || vOfi[0] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001f86:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <ESP_messageHandler+0xce8>)
 8001f88:	7adb      	ldrb	r3, [r3, #11]
 8001f8a:	2b31      	cmp	r3, #49	; 0x31
 8001f8c:	d003      	beq.n	8001f96 <ESP_messageHandler+0xcb2>
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <ESP_messageHandler+0xd14>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b31      	cmp	r3, #49	; 0x31
 8001f94:	d104      	bne.n	8001fa0 <ESP_messageHandler+0xcbc>
 8001f96:	2201      	movs	r2, #1
 8001f98:	2120      	movs	r1, #32
 8001f9a:	480f      	ldr	r0, [pc, #60]	; (8001fd8 <ESP_messageHandler+0xcf4>)
 8001f9c:	f003 fd64 	bl	8005a68 <HAL_GPIO_WritePin>

		if(vIlum[12] == '0' || vOfi[1] == '0'){
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <ESP_messageHandler+0xce8>)
 8001fa2:	7b1b      	ldrb	r3, [r3, #12]
 8001fa4:	2b30      	cmp	r3, #48	; 0x30
 8001fa6:	d003      	beq.n	8001fb0 <ESP_messageHandler+0xccc>
 8001fa8:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <ESP_messageHandler+0xd14>)
 8001faa:	785b      	ldrb	r3, [r3, #1]
 8001fac:	2b30      	cmp	r3, #48	; 0x30
 8001fae:	d127      	bne.n	8002000 <ESP_messageHandler+0xd1c>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001fb0:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <ESP_messageHandler+0xd18>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001fb8:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <ESP_messageHandler+0xd18>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <ESP_messageHandler+0xd18>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fc8:	e055      	b.n	8002076 <ESP_messageHandler+0xd92>
 8001fca:	bf00      	nop
 8001fcc:	2000099c 	.word	0x2000099c
 8001fd0:	20000984 	.word	0x20000984
 8001fd4:	40020c00 	.word	0x40020c00
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	200009b8 	.word	0x200009b8
 8001fe0:	20000d80 	.word	0x20000d80
 8001fe4:	0800928c 	.word	0x0800928c
 8001fe8:	200009d4 	.word	0x200009d4
 8001fec:	20000910 	.word	0x20000910
 8001ff0:	080092a4 	.word	0x080092a4
 8001ff4:	080092c4 	.word	0x080092c4
 8001ff8:	20000978 	.word	0x20000978
 8001ffc:	20000cf0 	.word	0x20000cf0
		}
		else if(vIlum[12] == '1' || vOfi[1] == '1'){ // Luz Gaming
 8002000:	4b71      	ldr	r3, [pc, #452]	; (80021c8 <ESP_messageHandler+0xee4>)
 8002002:	7b1b      	ldrb	r3, [r3, #12]
 8002004:	2b31      	cmp	r3, #49	; 0x31
 8002006:	d003      	beq.n	8002010 <ESP_messageHandler+0xd2c>
 8002008:	4b70      	ldr	r3, [pc, #448]	; (80021cc <ESP_messageHandler+0xee8>)
 800200a:	785b      	ldrb	r3, [r3, #1]
 800200c:	2b31      	cmp	r3, #49	; 0x31
 800200e:	d132      	bne.n	8002076 <ESP_messageHandler+0xd92>

			//uint8_t r, g, b;

			r = rgb_value(vOfi[2],vOfi[3],vOfi[4]);
 8002010:	4b6e      	ldr	r3, [pc, #440]	; (80021cc <ESP_messageHandler+0xee8>)
 8002012:	789b      	ldrb	r3, [r3, #2]
 8002014:	4a6d      	ldr	r2, [pc, #436]	; (80021cc <ESP_messageHandler+0xee8>)
 8002016:	78d1      	ldrb	r1, [r2, #3]
 8002018:	4a6c      	ldr	r2, [pc, #432]	; (80021cc <ESP_messageHandler+0xee8>)
 800201a:	7912      	ldrb	r2, [r2, #4]
 800201c:	4618      	mov	r0, r3
 800201e:	f000 f959 	bl	80022d4 <rgb_value>
 8002022:	4603      	mov	r3, r0
 8002024:	4a6a      	ldr	r2, [pc, #424]	; (80021d0 <ESP_messageHandler+0xeec>)
 8002026:	6013      	str	r3, [r2, #0]
			g = rgb_value(vOfi[5],vOfi[6],vOfi[7]);
 8002028:	4b68      	ldr	r3, [pc, #416]	; (80021cc <ESP_messageHandler+0xee8>)
 800202a:	795b      	ldrb	r3, [r3, #5]
 800202c:	4a67      	ldr	r2, [pc, #412]	; (80021cc <ESP_messageHandler+0xee8>)
 800202e:	7991      	ldrb	r1, [r2, #6]
 8002030:	4a66      	ldr	r2, [pc, #408]	; (80021cc <ESP_messageHandler+0xee8>)
 8002032:	79d2      	ldrb	r2, [r2, #7]
 8002034:	4618      	mov	r0, r3
 8002036:	f000 f94d 	bl	80022d4 <rgb_value>
 800203a:	4603      	mov	r3, r0
 800203c:	4a65      	ldr	r2, [pc, #404]	; (80021d4 <ESP_messageHandler+0xef0>)
 800203e:	6013      	str	r3, [r2, #0]
			b = rgb_value(vOfi[8],vOfi[9],vOfi[10]);
 8002040:	4b62      	ldr	r3, [pc, #392]	; (80021cc <ESP_messageHandler+0xee8>)
 8002042:	7a1b      	ldrb	r3, [r3, #8]
 8002044:	4a61      	ldr	r2, [pc, #388]	; (80021cc <ESP_messageHandler+0xee8>)
 8002046:	7a51      	ldrb	r1, [r2, #9]
 8002048:	4a60      	ldr	r2, [pc, #384]	; (80021cc <ESP_messageHandler+0xee8>)
 800204a:	7a92      	ldrb	r2, [r2, #10]
 800204c:	4618      	mov	r0, r3
 800204e:	f000 f941 	bl	80022d4 <rgb_value>
 8002052:	4603      	mov	r3, r0
 8002054:	4a60      	ldr	r2, [pc, #384]	; (80021d8 <ESP_messageHandler+0xef4>)
 8002056:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, g); // PA8
 8002058:	4b5e      	ldr	r3, [pc, #376]	; (80021d4 <ESP_messageHandler+0xef0>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b5f      	ldr	r3, [pc, #380]	; (80021dc <ESP_messageHandler+0xef8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, r); // PA9
 8002062:	4b5b      	ldr	r3, [pc, #364]	; (80021d0 <ESP_messageHandler+0xeec>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4b5d      	ldr	r3, [pc, #372]	; (80021dc <ESP_messageHandler+0xef8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b); // PA10
 800206c:	4b5a      	ldr	r3, [pc, #360]	; (80021d8 <ESP_messageHandler+0xef4>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b5a      	ldr	r3, [pc, #360]	; (80021dc <ESP_messageHandler+0xef8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}

	if (fragment[0] == 'F'){
 8002076:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <ESP_messageHandler+0xefc>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b46      	cmp	r3, #70	; 0x46
 800207c:	d108      	bne.n	8002090 <ESP_messageHandler+0xdac>
		UART_send("V. OFICINA (OFICINA) \n", PC_UART);
 800207e:	4959      	ldr	r1, [pc, #356]	; (80021e4 <ESP_messageHandler+0xf00>)
 8002080:	4859      	ldr	r0, [pc, #356]	; (80021e8 <ESP_messageHandler+0xf04>)
 8002082:	f000 fd07 	bl	8002a94 <UART_send>
		//vOfi[6] = textrc[40]; // Luz Gx10
		//vOfi[7] = textrc[41]; // Luz Gx1
		//vOfi[8] = textrc[44]; // Luz Bx100
		//vOfi[9] = textrc[45]; // Luz Bx10
		//vOfi[10] = textrc[46]; // Luz Bx1
		vOfi[11] = textrc[49]; // V. Oficina
 8002086:	4b59      	ldr	r3, [pc, #356]	; (80021ec <ESP_messageHandler+0xf08>)
 8002088:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800208c:	4b4f      	ldr	r3, [pc, #316]	; (80021cc <ESP_messageHandler+0xee8>)
 800208e:	72da      	strb	r2, [r3, #11]
	}

	// GARAJE
	if (fragment[0] == 'j'){
 8002090:	4b53      	ldr	r3, [pc, #332]	; (80021e0 <ESP_messageHandler+0xefc>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b6a      	cmp	r3, #106	; 0x6a
 8002096:	d124      	bne.n	80020e2 <ESP_messageHandler+0xdfe>
		UART_send("LUZ GARAJE (GARAJE) \n", PC_UART);
 8002098:	4952      	ldr	r1, [pc, #328]	; (80021e4 <ESP_messageHandler+0xf00>)
 800209a:	4855      	ldr	r0, [pc, #340]	; (80021f0 <ESP_messageHandler+0xf0c>)
 800209c:	f000 fcfa 	bl	8002a94 <UART_send>
		vGar[0] = textrc[28]; // Luz Garaje
 80020a0:	4b52      	ldr	r3, [pc, #328]	; (80021ec <ESP_messageHandler+0xf08>)
 80020a2:	7f1a      	ldrb	r2, [r3, #28]
 80020a4:	4b53      	ldr	r3, [pc, #332]	; (80021f4 <ESP_messageHandler+0xf10>)
 80020a6:	701a      	strb	r2, [r3, #0]
		//vGar[1] = textrc[31]; // P. Garaje

		if(vIlum[22] == '0' || vGar[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET); // Luz Garaje
 80020a8:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <ESP_messageHandler+0xee4>)
 80020aa:	7d9b      	ldrb	r3, [r3, #22]
 80020ac:	2b30      	cmp	r3, #48	; 0x30
 80020ae:	d003      	beq.n	80020b8 <ESP_messageHandler+0xdd4>
 80020b0:	4b50      	ldr	r3, [pc, #320]	; (80021f4 <ESP_messageHandler+0xf10>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b30      	cmp	r3, #48	; 0x30
 80020b6:	d106      	bne.n	80020c6 <ESP_messageHandler+0xde2>
 80020b8:	2200      	movs	r2, #0
 80020ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020be:	484e      	ldr	r0, [pc, #312]	; (80021f8 <ESP_messageHandler+0xf14>)
 80020c0:	f003 fcd2 	bl	8005a68 <HAL_GPIO_WritePin>
 80020c4:	e00d      	b.n	80020e2 <ESP_messageHandler+0xdfe>
		else if(vIlum[22] == '1' || vGar[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 80020c6:	4b40      	ldr	r3, [pc, #256]	; (80021c8 <ESP_messageHandler+0xee4>)
 80020c8:	7d9b      	ldrb	r3, [r3, #22]
 80020ca:	2b31      	cmp	r3, #49	; 0x31
 80020cc:	d003      	beq.n	80020d6 <ESP_messageHandler+0xdf2>
 80020ce:	4b49      	ldr	r3, [pc, #292]	; (80021f4 <ESP_messageHandler+0xf10>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b31      	cmp	r3, #49	; 0x31
 80020d4:	d105      	bne.n	80020e2 <ESP_messageHandler+0xdfe>
 80020d6:	2201      	movs	r2, #1
 80020d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020dc:	4846      	ldr	r0, [pc, #280]	; (80021f8 <ESP_messageHandler+0xf14>)
 80020de:	f003 fcc3 	bl	8005a68 <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'J'){
 80020e2:	4b3f      	ldr	r3, [pc, #252]	; (80021e0 <ESP_messageHandler+0xefc>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b4a      	cmp	r3, #74	; 0x4a
 80020e8:	d107      	bne.n	80020fa <ESP_messageHandler+0xe16>
		UART_send("P. GARAJE (GARAJE) \n", PC_UART);
 80020ea:	493e      	ldr	r1, [pc, #248]	; (80021e4 <ESP_messageHandler+0xf00>)
 80020ec:	4843      	ldr	r0, [pc, #268]	; (80021fc <ESP_messageHandler+0xf18>)
 80020ee:	f000 fcd1 	bl	8002a94 <UART_send>
		//vGar[0] = textrc[28]; // Luz Garaje
		vGar[1] = textrc[31]; // P. Garaje
 80020f2:	4b3e      	ldr	r3, [pc, #248]	; (80021ec <ESP_messageHandler+0xf08>)
 80020f4:	7fda      	ldrb	r2, [r3, #31]
 80020f6:	4b3f      	ldr	r3, [pc, #252]	; (80021f4 <ESP_messageHandler+0xf10>)
 80020f8:	705a      	strb	r2, [r3, #1]
	}

	// HUERTO
	if (fragment[0] == 'h'){
 80020fa:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <ESP_messageHandler+0xefc>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b68      	cmp	r3, #104	; 0x68
 8002100:	d10b      	bne.n	800211a <ESP_messageHandler+0xe36>
		UART_send("RIEGO HUERTO \n", PC_UART);
 8002102:	4938      	ldr	r1, [pc, #224]	; (80021e4 <ESP_messageHandler+0xf00>)
 8002104:	483e      	ldr	r0, [pc, #248]	; (8002200 <ESP_messageHandler+0xf1c>)
 8002106:	f000 fcc5 	bl	8002a94 <UART_send>
		vHuer[0] = textrc[28]; // Riego
 800210a:	4b38      	ldr	r3, [pc, #224]	; (80021ec <ESP_messageHandler+0xf08>)
 800210c:	7f1a      	ldrb	r2, [r3, #28]
 800210e:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <ESP_messageHandler+0xf20>)
 8002110:	701a      	strb	r2, [r3, #0]
		vHuer[1] = textrc[31]; // Automático
 8002112:	4b36      	ldr	r3, [pc, #216]	; (80021ec <ESP_messageHandler+0xf08>)
 8002114:	7fda      	ldrb	r2, [r3, #31]
 8002116:	4b3b      	ldr	r3, [pc, #236]	; (8002204 <ESP_messageHandler+0xf20>)
 8002118:	705a      	strb	r2, [r3, #1]
			else if(vHuer[0] == '1') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
		}*/
	}

	// AJUSTES
	if (fragment[0] == 'a'){
 800211a:	4b31      	ldr	r3, [pc, #196]	; (80021e0 <ESP_messageHandler+0xefc>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b61      	cmp	r3, #97	; 0x61
 8002120:	d150      	bne.n	80021c4 <ESP_messageHandler+0xee0>
		UART_send("AJUSTES \n", PC_UART);
 8002122:	4930      	ldr	r1, [pc, #192]	; (80021e4 <ESP_messageHandler+0xf00>)
 8002124:	4838      	ldr	r0, [pc, #224]	; (8002208 <ESP_messageHandler+0xf24>)
 8002126:	f000 fcb5 	bl	8002a94 <UART_send>
		vAj[0] = textrc[28]; 	// Vent. Enc. x 10
 800212a:	4b30      	ldr	r3, [pc, #192]	; (80021ec <ESP_messageHandler+0xf08>)
 800212c:	7f1a      	ldrb	r2, [r3, #28]
 800212e:	4b37      	ldr	r3, [pc, #220]	; (800220c <ESP_messageHandler+0xf28>)
 8002130:	701a      	strb	r2, [r3, #0]
		vAj[1] = textrc[29]; 	// Vent. Enc. x 1
 8002132:	4b2e      	ldr	r3, [pc, #184]	; (80021ec <ESP_messageHandler+0xf08>)
 8002134:	7f5a      	ldrb	r2, [r3, #29]
 8002136:	4b35      	ldr	r3, [pc, #212]	; (800220c <ESP_messageHandler+0xf28>)
 8002138:	705a      	strb	r2, [r3, #1]
		vAj[2] = textrc[31]; 	// Vent. Enc. x 0.1
 800213a:	4b2c      	ldr	r3, [pc, #176]	; (80021ec <ESP_messageHandler+0xf08>)
 800213c:	7fda      	ldrb	r2, [r3, #31]
 800213e:	4b33      	ldr	r3, [pc, #204]	; (800220c <ESP_messageHandler+0xf28>)
 8002140:	709a      	strb	r2, [r3, #2]
		vAj[3] = textrc[34]; 	// Vent. Apa. x 10
 8002142:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <ESP_messageHandler+0xf08>)
 8002144:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002148:	4b30      	ldr	r3, [pc, #192]	; (800220c <ESP_messageHandler+0xf28>)
 800214a:	70da      	strb	r2, [r3, #3]
		vAj[4] = textrc[35]; 	// Vent. Apa. x 1
 800214c:	4b27      	ldr	r3, [pc, #156]	; (80021ec <ESP_messageHandler+0xf08>)
 800214e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8002152:	4b2e      	ldr	r3, [pc, #184]	; (800220c <ESP_messageHandler+0xf28>)
 8002154:	711a      	strb	r2, [r3, #4]
		vAj[5] = textrc[37]; 	// Vent. Apa. x 0.1
 8002156:	4b25      	ldr	r3, [pc, #148]	; (80021ec <ESP_messageHandler+0xf08>)
 8002158:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800215c:	4b2b      	ldr	r3, [pc, #172]	; (800220c <ESP_messageHandler+0xf28>)
 800215e:	715a      	strb	r2, [r3, #5]
		vAj[6] = textrc[40]; 	// Calef. Enc. x 10
 8002160:	4b22      	ldr	r3, [pc, #136]	; (80021ec <ESP_messageHandler+0xf08>)
 8002162:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8002166:	4b29      	ldr	r3, [pc, #164]	; (800220c <ESP_messageHandler+0xf28>)
 8002168:	719a      	strb	r2, [r3, #6]
		vAj[7] = textrc[41]; 	// Calef. Enc. x 1
 800216a:	4b20      	ldr	r3, [pc, #128]	; (80021ec <ESP_messageHandler+0xf08>)
 800216c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8002170:	4b26      	ldr	r3, [pc, #152]	; (800220c <ESP_messageHandler+0xf28>)
 8002172:	71da      	strb	r2, [r3, #7]
		vAj[8] = textrc[43]; 	// Calef. Enc. x 0.1
 8002174:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <ESP_messageHandler+0xf08>)
 8002176:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800217a:	4b24      	ldr	r3, [pc, #144]	; (800220c <ESP_messageHandler+0xf28>)
 800217c:	721a      	strb	r2, [r3, #8]
		vAj[9] = textrc[46]; 	// Calef. Apa. x 10
 800217e:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <ESP_messageHandler+0xf08>)
 8002180:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8002184:	4b21      	ldr	r3, [pc, #132]	; (800220c <ESP_messageHandler+0xf28>)
 8002186:	725a      	strb	r2, [r3, #9]
		vAj[10] = textrc[47]; 	// Calef. Apa. x 1
 8002188:	4b18      	ldr	r3, [pc, #96]	; (80021ec <ESP_messageHandler+0xf08>)
 800218a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800218e:	4b1f      	ldr	r3, [pc, #124]	; (800220c <ESP_messageHandler+0xf28>)
 8002190:	729a      	strb	r2, [r3, #10]
		vAj[11] = textrc[49]; 	// Calef. Apa. x 0.1
 8002192:	4b16      	ldr	r3, [pc, #88]	; (80021ec <ESP_messageHandler+0xf08>)
 8002194:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8002198:	4b1c      	ldr	r3, [pc, #112]	; (800220c <ESP_messageHandler+0xf28>)
 800219a:	72da      	strb	r2, [r3, #11]
		vAj[12] = textrc[52]; 	// RH Mínimo x 10
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <ESP_messageHandler+0xf08>)
 800219e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80021a2:	4b1a      	ldr	r3, [pc, #104]	; (800220c <ESP_messageHandler+0xf28>)
 80021a4:	731a      	strb	r2, [r3, #12]
		vAj[13] = textrc[53]; 	// RH Mínimo x 1
 80021a6:	4b11      	ldr	r3, [pc, #68]	; (80021ec <ESP_messageHandler+0xf08>)
 80021a8:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80021ac:	4b17      	ldr	r3, [pc, #92]	; (800220c <ESP_messageHandler+0xf28>)
 80021ae:	735a      	strb	r2, [r3, #13]
		vAj[14] = textrc[56]; 	// RH Máximo x 10
 80021b0:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <ESP_messageHandler+0xf08>)
 80021b2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <ESP_messageHandler+0xf28>)
 80021b8:	739a      	strb	r2, [r3, #14]
		vAj[15] = textrc[57]; 	// RH Máximo x 1
 80021ba:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <ESP_messageHandler+0xf08>)
 80021bc:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <ESP_messageHandler+0xf28>)
 80021c2:	73da      	strb	r2, [r3, #15]
	}

	//__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	2000099c 	.word	0x2000099c
 80021cc:	20000978 	.word	0x20000978
 80021d0:	20000924 	.word	0x20000924
 80021d4:	20000918 	.word	0x20000918
 80021d8:	20000914 	.word	0x20000914
 80021dc:	20000cf0 	.word	0x20000cf0
 80021e0:	200009b8 	.word	0x200009b8
 80021e4:	20000d80 	.word	0x20000d80
 80021e8:	080092d8 	.word	0x080092d8
 80021ec:	200009d4 	.word	0x200009d4
 80021f0:	080092f0 	.word	0x080092f0
 80021f4:	2000096c 	.word	0x2000096c
 80021f8:	40020800 	.word	0x40020800
 80021fc:	08009308 	.word	0x08009308
 8002200:	08009320 	.word	0x08009320
 8002204:	200009c0 	.word	0x200009c0
 8002208:	08009330 	.word	0x08009330
 800220c:	200009c4 	.word	0x200009c4

08002210 <ldr>:


#include <LDR.h>
#include "ESP8266_HAL.h"

void ldr(uint16_t valor){
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	80fb      	strh	r3, [r7, #6]


	if (vIlum[26] == '1' || vExt[5] == '1'){
 800221a:	4b2a      	ldr	r3, [pc, #168]	; (80022c4 <ldr+0xb4>)
 800221c:	7e9b      	ldrb	r3, [r3, #26]
 800221e:	2b31      	cmp	r3, #49	; 0x31
 8002220:	d003      	beq.n	800222a <ldr+0x1a>
 8002222:	4b29      	ldr	r3, [pc, #164]	; (80022c8 <ldr+0xb8>)
 8002224:	795b      	ldrb	r3, [r3, #5]
 8002226:	2b31      	cmp	r3, #49	; 0x31
 8002228:	d147      	bne.n	80022ba <ldr+0xaa>

		if(valor<90) {
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	2b59      	cmp	r3, #89	; 0x59
 800222e:	d822      	bhi.n	8002276 <ldr+0x66>
			vIlum[23] = 'x';	// Jardín
 8002230:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <ldr+0xb4>)
 8002232:	2278      	movs	r2, #120	; 0x78
 8002234:	75da      	strb	r2, [r3, #23]
			vExt[3] = 'x';
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <ldr+0xb8>)
 8002238:	2278      	movs	r2, #120	; 0x78
 800223a:	70da      	strb	r2, [r3, #3]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 800223c:	2201      	movs	r2, #1
 800223e:	2104      	movs	r1, #4
 8002240:	4822      	ldr	r0, [pc, #136]	; (80022cc <ldr+0xbc>)
 8002242:	f003 fc11 	bl	8005a68 <HAL_GPIO_WritePin>
			vIlum[24] = 'x';	// Porche
 8002246:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <ldr+0xb4>)
 8002248:	2278      	movs	r2, #120	; 0x78
 800224a:	761a      	strb	r2, [r3, #24]
			vExt[2] = 'x';
 800224c:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <ldr+0xb8>)
 800224e:	2278      	movs	r2, #120	; 0x78
 8002250:	709a      	strb	r2, [r3, #2]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 8002252:	2201      	movs	r2, #1
 8002254:	2110      	movs	r1, #16
 8002256:	481d      	ldr	r0, [pc, #116]	; (80022cc <ldr+0xbc>)
 8002258:	f003 fc06 	bl	8005a68 <HAL_GPIO_WritePin>
			vIlum[25] = 'x';	// Tendedero
 800225c:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <ldr+0xb4>)
 800225e:	2278      	movs	r2, #120	; 0x78
 8002260:	765a      	strb	r2, [r3, #25]
			vExt[1] = 'x';
 8002262:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <ldr+0xb8>)
 8002264:	2278      	movs	r2, #120	; 0x78
 8002266:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8002268:	2201      	movs	r2, #1
 800226a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800226e:	4818      	ldr	r0, [pc, #96]	; (80022d0 <ldr+0xc0>)
 8002270:	f003 fbfa 	bl	8005a68 <HAL_GPIO_WritePin>
			vIlum[25] = 'x';	// Tendedero
			vExt[1] = 'x';
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
		}
	}
}
 8002274:	e021      	b.n	80022ba <ldr+0xaa>
			vIlum[23] = 'x';	// Jardín
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <ldr+0xb4>)
 8002278:	2278      	movs	r2, #120	; 0x78
 800227a:	75da      	strb	r2, [r3, #23]
			vExt[3] = 'x';
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <ldr+0xb8>)
 800227e:	2278      	movs	r2, #120	; 0x78
 8002280:	70da      	strb	r2, [r3, #3]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET);
 8002282:	2200      	movs	r2, #0
 8002284:	2104      	movs	r1, #4
 8002286:	4811      	ldr	r0, [pc, #68]	; (80022cc <ldr+0xbc>)
 8002288:	f003 fbee 	bl	8005a68 <HAL_GPIO_WritePin>
			vIlum[24] = 'x';	// Porche
 800228c:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <ldr+0xb4>)
 800228e:	2278      	movs	r2, #120	; 0x78
 8002290:	761a      	strb	r2, [r3, #24]
			vExt[2] = 'x';
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <ldr+0xb8>)
 8002294:	2278      	movs	r2, #120	; 0x78
 8002296:	709a      	strb	r2, [r3, #2]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
 8002298:	2200      	movs	r2, #0
 800229a:	2110      	movs	r1, #16
 800229c:	480b      	ldr	r0, [pc, #44]	; (80022cc <ldr+0xbc>)
 800229e:	f003 fbe3 	bl	8005a68 <HAL_GPIO_WritePin>
			vIlum[25] = 'x';	// Tendedero
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <ldr+0xb4>)
 80022a4:	2278      	movs	r2, #120	; 0x78
 80022a6:	765a      	strb	r2, [r3, #25]
			vExt[1] = 'x';
 80022a8:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <ldr+0xb8>)
 80022aa:	2278      	movs	r2, #120	; 0x78
 80022ac:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 80022ae:	2200      	movs	r2, #0
 80022b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022b4:	4806      	ldr	r0, [pc, #24]	; (80022d0 <ldr+0xc0>)
 80022b6:	f003 fbd7 	bl	8005a68 <HAL_GPIO_WritePin>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	2000099c 	.word	0x2000099c
 80022c8:	20000928 	.word	0x20000928
 80022cc:	40020c00 	.word	0x40020c00
 80022d0:	40020800 	.word	0x40020800

080022d4 <rgb_value>:
 */


#include <RGB.h>

int rgb_value(char i, char j, char k){
 80022d4:	b480      	push	{r7}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	71fb      	strb	r3, [r7, #7]
 80022de:	460b      	mov	r3, r1
 80022e0:	71bb      	strb	r3, [r7, #6]
 80022e2:	4613      	mov	r3, r2
 80022e4:	717b      	strb	r3, [r7, #5]

	int a, b, c;

	if(i == '0') a = 0;
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	2b30      	cmp	r3, #48	; 0x30
 80022ea:	d102      	bne.n	80022f2 <rgb_value+0x1e>
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	e00a      	b.n	8002308 <rgb_value+0x34>
	else if(i == '1') a = 100;
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	2b31      	cmp	r3, #49	; 0x31
 80022f6:	d102      	bne.n	80022fe <rgb_value+0x2a>
 80022f8:	2364      	movs	r3, #100	; 0x64
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	e004      	b.n	8002308 <rgb_value+0x34>
	else if(i == '2') a = 200;
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	2b32      	cmp	r3, #50	; 0x32
 8002302:	d101      	bne.n	8002308 <rgb_value+0x34>
 8002304:	23c8      	movs	r3, #200	; 0xc8
 8002306:	617b      	str	r3, [r7, #20]

	if(j == '0') b = 0;
 8002308:	79bb      	ldrb	r3, [r7, #6]
 800230a:	2b30      	cmp	r3, #48	; 0x30
 800230c:	d102      	bne.n	8002314 <rgb_value+0x40>
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	e034      	b.n	800237e <rgb_value+0xaa>
	else if(j == '1') b = 10;
 8002314:	79bb      	ldrb	r3, [r7, #6]
 8002316:	2b31      	cmp	r3, #49	; 0x31
 8002318:	d102      	bne.n	8002320 <rgb_value+0x4c>
 800231a:	230a      	movs	r3, #10
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	e02e      	b.n	800237e <rgb_value+0xaa>
	else if(j == '2') b = 20;
 8002320:	79bb      	ldrb	r3, [r7, #6]
 8002322:	2b32      	cmp	r3, #50	; 0x32
 8002324:	d102      	bne.n	800232c <rgb_value+0x58>
 8002326:	2314      	movs	r3, #20
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	e028      	b.n	800237e <rgb_value+0xaa>
	else if(j == '3') b = 30;
 800232c:	79bb      	ldrb	r3, [r7, #6]
 800232e:	2b33      	cmp	r3, #51	; 0x33
 8002330:	d102      	bne.n	8002338 <rgb_value+0x64>
 8002332:	231e      	movs	r3, #30
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	e022      	b.n	800237e <rgb_value+0xaa>
	else if(j == '4') b = 40;
 8002338:	79bb      	ldrb	r3, [r7, #6]
 800233a:	2b34      	cmp	r3, #52	; 0x34
 800233c:	d102      	bne.n	8002344 <rgb_value+0x70>
 800233e:	2328      	movs	r3, #40	; 0x28
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	e01c      	b.n	800237e <rgb_value+0xaa>
	else if(j == '5') b = 50;
 8002344:	79bb      	ldrb	r3, [r7, #6]
 8002346:	2b35      	cmp	r3, #53	; 0x35
 8002348:	d102      	bne.n	8002350 <rgb_value+0x7c>
 800234a:	2332      	movs	r3, #50	; 0x32
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	e016      	b.n	800237e <rgb_value+0xaa>
	else if(j == '6') b = 60;
 8002350:	79bb      	ldrb	r3, [r7, #6]
 8002352:	2b36      	cmp	r3, #54	; 0x36
 8002354:	d102      	bne.n	800235c <rgb_value+0x88>
 8002356:	233c      	movs	r3, #60	; 0x3c
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	e010      	b.n	800237e <rgb_value+0xaa>
	else if(j == '7') b = 70;
 800235c:	79bb      	ldrb	r3, [r7, #6]
 800235e:	2b37      	cmp	r3, #55	; 0x37
 8002360:	d102      	bne.n	8002368 <rgb_value+0x94>
 8002362:	2346      	movs	r3, #70	; 0x46
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	e00a      	b.n	800237e <rgb_value+0xaa>
	else if(j == '8') b = 80;
 8002368:	79bb      	ldrb	r3, [r7, #6]
 800236a:	2b38      	cmp	r3, #56	; 0x38
 800236c:	d102      	bne.n	8002374 <rgb_value+0xa0>
 800236e:	2350      	movs	r3, #80	; 0x50
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	e004      	b.n	800237e <rgb_value+0xaa>
	else if(j == '9') b = 90;
 8002374:	79bb      	ldrb	r3, [r7, #6]
 8002376:	2b39      	cmp	r3, #57	; 0x39
 8002378:	d101      	bne.n	800237e <rgb_value+0xaa>
 800237a:	235a      	movs	r3, #90	; 0x5a
 800237c:	613b      	str	r3, [r7, #16]

	if(k == '0') c = 0;
 800237e:	797b      	ldrb	r3, [r7, #5]
 8002380:	2b30      	cmp	r3, #48	; 0x30
 8002382:	d102      	bne.n	800238a <rgb_value+0xb6>
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	e034      	b.n	80023f4 <rgb_value+0x120>
	else if(k == '1') c = 1;
 800238a:	797b      	ldrb	r3, [r7, #5]
 800238c:	2b31      	cmp	r3, #49	; 0x31
 800238e:	d102      	bne.n	8002396 <rgb_value+0xc2>
 8002390:	2301      	movs	r3, #1
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	e02e      	b.n	80023f4 <rgb_value+0x120>
	else if(k == '2') c = 2;
 8002396:	797b      	ldrb	r3, [r7, #5]
 8002398:	2b32      	cmp	r3, #50	; 0x32
 800239a:	d102      	bne.n	80023a2 <rgb_value+0xce>
 800239c:	2302      	movs	r3, #2
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	e028      	b.n	80023f4 <rgb_value+0x120>
	else if(k == '3') c = 3;
 80023a2:	797b      	ldrb	r3, [r7, #5]
 80023a4:	2b33      	cmp	r3, #51	; 0x33
 80023a6:	d102      	bne.n	80023ae <rgb_value+0xda>
 80023a8:	2303      	movs	r3, #3
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	e022      	b.n	80023f4 <rgb_value+0x120>
	else if(k == '4') c = 4;
 80023ae:	797b      	ldrb	r3, [r7, #5]
 80023b0:	2b34      	cmp	r3, #52	; 0x34
 80023b2:	d102      	bne.n	80023ba <rgb_value+0xe6>
 80023b4:	2304      	movs	r3, #4
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	e01c      	b.n	80023f4 <rgb_value+0x120>
	else if(k == '5') c = 5;
 80023ba:	797b      	ldrb	r3, [r7, #5]
 80023bc:	2b35      	cmp	r3, #53	; 0x35
 80023be:	d102      	bne.n	80023c6 <rgb_value+0xf2>
 80023c0:	2305      	movs	r3, #5
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	e016      	b.n	80023f4 <rgb_value+0x120>
	else if(k == '6') c = 6;
 80023c6:	797b      	ldrb	r3, [r7, #5]
 80023c8:	2b36      	cmp	r3, #54	; 0x36
 80023ca:	d102      	bne.n	80023d2 <rgb_value+0xfe>
 80023cc:	2306      	movs	r3, #6
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	e010      	b.n	80023f4 <rgb_value+0x120>
	else if(k == '7') c = 7;
 80023d2:	797b      	ldrb	r3, [r7, #5]
 80023d4:	2b37      	cmp	r3, #55	; 0x37
 80023d6:	d102      	bne.n	80023de <rgb_value+0x10a>
 80023d8:	2307      	movs	r3, #7
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	e00a      	b.n	80023f4 <rgb_value+0x120>
	else if(k == '8') c = 8;
 80023de:	797b      	ldrb	r3, [r7, #5]
 80023e0:	2b38      	cmp	r3, #56	; 0x38
 80023e2:	d102      	bne.n	80023ea <rgb_value+0x116>
 80023e4:	2308      	movs	r3, #8
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	e004      	b.n	80023f4 <rgb_value+0x120>
	else if(k == '9') c = 9;
 80023ea:	797b      	ldrb	r3, [r7, #5]
 80023ec:	2b39      	cmp	r3, #57	; 0x39
 80023ee:	d101      	bne.n	80023f4 <rgb_value+0x120>
 80023f0:	2309      	movs	r3, #9
 80023f2:	60fb      	str	r3, [r7, #12]

	return a+b+c;
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	441a      	add	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4413      	add	r3, r2
}
 80023fe:	4618      	mov	r0, r3
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <rh_value>:
 */


#include <RH.h>

int rh_value(char i, char j){
 800240a:	b480      	push	{r7}
 800240c:	b085      	sub	sp, #20
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	460a      	mov	r2, r1
 8002414:	71fb      	strb	r3, [r7, #7]
 8002416:	4613      	mov	r3, r2
 8002418:	71bb      	strb	r3, [r7, #6]

	int a, b;

	if(i == '0') a = 0;
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	2b30      	cmp	r3, #48	; 0x30
 800241e:	d102      	bne.n	8002426 <rh_value+0x1c>
 8002420:	2300      	movs	r3, #0
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	e034      	b.n	8002490 <rh_value+0x86>
	else if(i == '1') a = 10;
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	2b31      	cmp	r3, #49	; 0x31
 800242a:	d102      	bne.n	8002432 <rh_value+0x28>
 800242c:	230a      	movs	r3, #10
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	e02e      	b.n	8002490 <rh_value+0x86>
	else if(i == '2') a = 20;
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	2b32      	cmp	r3, #50	; 0x32
 8002436:	d102      	bne.n	800243e <rh_value+0x34>
 8002438:	2314      	movs	r3, #20
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	e028      	b.n	8002490 <rh_value+0x86>
	else if(i == '3') a = 30;
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	2b33      	cmp	r3, #51	; 0x33
 8002442:	d102      	bne.n	800244a <rh_value+0x40>
 8002444:	231e      	movs	r3, #30
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	e022      	b.n	8002490 <rh_value+0x86>
	else if(i == '4') a = 40;
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	2b34      	cmp	r3, #52	; 0x34
 800244e:	d102      	bne.n	8002456 <rh_value+0x4c>
 8002450:	2328      	movs	r3, #40	; 0x28
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	e01c      	b.n	8002490 <rh_value+0x86>
	else if(i == '5') a = 50;
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	2b35      	cmp	r3, #53	; 0x35
 800245a:	d102      	bne.n	8002462 <rh_value+0x58>
 800245c:	2332      	movs	r3, #50	; 0x32
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	e016      	b.n	8002490 <rh_value+0x86>
	else if(i == '6') a = 60;
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	2b36      	cmp	r3, #54	; 0x36
 8002466:	d102      	bne.n	800246e <rh_value+0x64>
 8002468:	233c      	movs	r3, #60	; 0x3c
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	e010      	b.n	8002490 <rh_value+0x86>
	else if(i == '7') a = 70;
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	2b37      	cmp	r3, #55	; 0x37
 8002472:	d102      	bne.n	800247a <rh_value+0x70>
 8002474:	2346      	movs	r3, #70	; 0x46
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	e00a      	b.n	8002490 <rh_value+0x86>
	else if(i == '8') a = 80;
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	2b38      	cmp	r3, #56	; 0x38
 800247e:	d102      	bne.n	8002486 <rh_value+0x7c>
 8002480:	2350      	movs	r3, #80	; 0x50
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	e004      	b.n	8002490 <rh_value+0x86>
	else if(i == '9') a = 90;
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	2b39      	cmp	r3, #57	; 0x39
 800248a:	d101      	bne.n	8002490 <rh_value+0x86>
 800248c:	235a      	movs	r3, #90	; 0x5a
 800248e:	60fb      	str	r3, [r7, #12]


	if(j == '0') b = 0;
 8002490:	79bb      	ldrb	r3, [r7, #6]
 8002492:	2b30      	cmp	r3, #48	; 0x30
 8002494:	d102      	bne.n	800249c <rh_value+0x92>
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	e034      	b.n	8002506 <rh_value+0xfc>
	else if(j == '1') b = 1;
 800249c:	79bb      	ldrb	r3, [r7, #6]
 800249e:	2b31      	cmp	r3, #49	; 0x31
 80024a0:	d102      	bne.n	80024a8 <rh_value+0x9e>
 80024a2:	2301      	movs	r3, #1
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	e02e      	b.n	8002506 <rh_value+0xfc>
	else if(j == '2') b = 2;
 80024a8:	79bb      	ldrb	r3, [r7, #6]
 80024aa:	2b32      	cmp	r3, #50	; 0x32
 80024ac:	d102      	bne.n	80024b4 <rh_value+0xaa>
 80024ae:	2302      	movs	r3, #2
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	e028      	b.n	8002506 <rh_value+0xfc>
	else if(j == '3') b = 3;
 80024b4:	79bb      	ldrb	r3, [r7, #6]
 80024b6:	2b33      	cmp	r3, #51	; 0x33
 80024b8:	d102      	bne.n	80024c0 <rh_value+0xb6>
 80024ba:	2303      	movs	r3, #3
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	e022      	b.n	8002506 <rh_value+0xfc>
	else if(j == '4') b = 4;
 80024c0:	79bb      	ldrb	r3, [r7, #6]
 80024c2:	2b34      	cmp	r3, #52	; 0x34
 80024c4:	d102      	bne.n	80024cc <rh_value+0xc2>
 80024c6:	2304      	movs	r3, #4
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	e01c      	b.n	8002506 <rh_value+0xfc>
	else if(j == '5') b = 5;
 80024cc:	79bb      	ldrb	r3, [r7, #6]
 80024ce:	2b35      	cmp	r3, #53	; 0x35
 80024d0:	d102      	bne.n	80024d8 <rh_value+0xce>
 80024d2:	2305      	movs	r3, #5
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	e016      	b.n	8002506 <rh_value+0xfc>
	else if(j == '6') b = 6;
 80024d8:	79bb      	ldrb	r3, [r7, #6]
 80024da:	2b36      	cmp	r3, #54	; 0x36
 80024dc:	d102      	bne.n	80024e4 <rh_value+0xda>
 80024de:	2306      	movs	r3, #6
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	e010      	b.n	8002506 <rh_value+0xfc>
	else if(j == '7') b = 7;
 80024e4:	79bb      	ldrb	r3, [r7, #6]
 80024e6:	2b37      	cmp	r3, #55	; 0x37
 80024e8:	d102      	bne.n	80024f0 <rh_value+0xe6>
 80024ea:	2307      	movs	r3, #7
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	e00a      	b.n	8002506 <rh_value+0xfc>
	else if(j == '8') b = 8;
 80024f0:	79bb      	ldrb	r3, [r7, #6]
 80024f2:	2b38      	cmp	r3, #56	; 0x38
 80024f4:	d102      	bne.n	80024fc <rh_value+0xf2>
 80024f6:	2308      	movs	r3, #8
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	e004      	b.n	8002506 <rh_value+0xfc>
	else if(j == '9') b = 9;
 80024fc:	79bb      	ldrb	r3, [r7, #6]
 80024fe:	2b39      	cmp	r3, #57	; 0x39
 8002500:	d101      	bne.n	8002506 <rh_value+0xfc>
 8002502:	2309      	movs	r3, #9
 8002504:	60bb      	str	r3, [r7, #8]

	return a+b;
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	4413      	add	r3, r2
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <temp_value>:
 */


#include <Temperatura.h>

float temp_value(char i, char j, char k){
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	71fb      	strb	r3, [r7, #7]
 8002522:	460b      	mov	r3, r1
 8002524:	71bb      	strb	r3, [r7, #6]
 8002526:	4613      	mov	r3, r2
 8002528:	717b      	strb	r3, [r7, #5]

	float a, b, c;

	if(i == '0') a = 0;
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	2b30      	cmp	r3, #48	; 0x30
 800252e:	d103      	bne.n	8002538 <temp_value+0x20>
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	e034      	b.n	80025a2 <temp_value+0x8a>
	else if(i == '1') a = 10;
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	2b31      	cmp	r3, #49	; 0x31
 800253c:	d102      	bne.n	8002544 <temp_value+0x2c>
 800253e:	4b60      	ldr	r3, [pc, #384]	; (80026c0 <temp_value+0x1a8>)
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	e02e      	b.n	80025a2 <temp_value+0x8a>
	else if(i == '2') a = 20;
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	2b32      	cmp	r3, #50	; 0x32
 8002548:	d102      	bne.n	8002550 <temp_value+0x38>
 800254a:	4b5e      	ldr	r3, [pc, #376]	; (80026c4 <temp_value+0x1ac>)
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	e028      	b.n	80025a2 <temp_value+0x8a>
	else if(i == '3') a = 30;
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	2b33      	cmp	r3, #51	; 0x33
 8002554:	d102      	bne.n	800255c <temp_value+0x44>
 8002556:	4b5c      	ldr	r3, [pc, #368]	; (80026c8 <temp_value+0x1b0>)
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	e022      	b.n	80025a2 <temp_value+0x8a>
	else if(i == '4') a = 40;
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	2b34      	cmp	r3, #52	; 0x34
 8002560:	d102      	bne.n	8002568 <temp_value+0x50>
 8002562:	4b5a      	ldr	r3, [pc, #360]	; (80026cc <temp_value+0x1b4>)
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	e01c      	b.n	80025a2 <temp_value+0x8a>
	else if(i == '5') a = 50;
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	2b35      	cmp	r3, #53	; 0x35
 800256c:	d102      	bne.n	8002574 <temp_value+0x5c>
 800256e:	4b58      	ldr	r3, [pc, #352]	; (80026d0 <temp_value+0x1b8>)
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	e016      	b.n	80025a2 <temp_value+0x8a>
	else if(i == '6') a = 60;
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	2b36      	cmp	r3, #54	; 0x36
 8002578:	d102      	bne.n	8002580 <temp_value+0x68>
 800257a:	4b56      	ldr	r3, [pc, #344]	; (80026d4 <temp_value+0x1bc>)
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	e010      	b.n	80025a2 <temp_value+0x8a>
	else if(i == '7') a = 70;
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	2b37      	cmp	r3, #55	; 0x37
 8002584:	d102      	bne.n	800258c <temp_value+0x74>
 8002586:	4b54      	ldr	r3, [pc, #336]	; (80026d8 <temp_value+0x1c0>)
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	e00a      	b.n	80025a2 <temp_value+0x8a>
	else if(i == '8') a = 80;
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	2b38      	cmp	r3, #56	; 0x38
 8002590:	d102      	bne.n	8002598 <temp_value+0x80>
 8002592:	4b52      	ldr	r3, [pc, #328]	; (80026dc <temp_value+0x1c4>)
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	e004      	b.n	80025a2 <temp_value+0x8a>
	else if(i == '9') a = 90;
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	2b39      	cmp	r3, #57	; 0x39
 800259c:	d101      	bne.n	80025a2 <temp_value+0x8a>
 800259e:	4b50      	ldr	r3, [pc, #320]	; (80026e0 <temp_value+0x1c8>)
 80025a0:	617b      	str	r3, [r7, #20]


	if(j == '0') b = 0;
 80025a2:	79bb      	ldrb	r3, [r7, #6]
 80025a4:	2b30      	cmp	r3, #48	; 0x30
 80025a6:	d103      	bne.n	80025b0 <temp_value+0x98>
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	e038      	b.n	8002622 <temp_value+0x10a>
	else if(j == '1') b = 1;
 80025b0:	79bb      	ldrb	r3, [r7, #6]
 80025b2:	2b31      	cmp	r3, #49	; 0x31
 80025b4:	d103      	bne.n	80025be <temp_value+0xa6>
 80025b6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	e031      	b.n	8002622 <temp_value+0x10a>
	else if(j == '2') b = 2;
 80025be:	79bb      	ldrb	r3, [r7, #6]
 80025c0:	2b32      	cmp	r3, #50	; 0x32
 80025c2:	d103      	bne.n	80025cc <temp_value+0xb4>
 80025c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	e02a      	b.n	8002622 <temp_value+0x10a>
	else if(j == '3') b = 3;
 80025cc:	79bb      	ldrb	r3, [r7, #6]
 80025ce:	2b33      	cmp	r3, #51	; 0x33
 80025d0:	d102      	bne.n	80025d8 <temp_value+0xc0>
 80025d2:	4b44      	ldr	r3, [pc, #272]	; (80026e4 <temp_value+0x1cc>)
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	e024      	b.n	8002622 <temp_value+0x10a>
	else if(j == '4') b = 4;
 80025d8:	79bb      	ldrb	r3, [r7, #6]
 80025da:	2b34      	cmp	r3, #52	; 0x34
 80025dc:	d103      	bne.n	80025e6 <temp_value+0xce>
 80025de:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	e01d      	b.n	8002622 <temp_value+0x10a>
	else if(j == '5') b = 5;
 80025e6:	79bb      	ldrb	r3, [r7, #6]
 80025e8:	2b35      	cmp	r3, #53	; 0x35
 80025ea:	d102      	bne.n	80025f2 <temp_value+0xda>
 80025ec:	4b3e      	ldr	r3, [pc, #248]	; (80026e8 <temp_value+0x1d0>)
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	e017      	b.n	8002622 <temp_value+0x10a>
	else if(j == '6') b = 6;
 80025f2:	79bb      	ldrb	r3, [r7, #6]
 80025f4:	2b36      	cmp	r3, #54	; 0x36
 80025f6:	d102      	bne.n	80025fe <temp_value+0xe6>
 80025f8:	4b3c      	ldr	r3, [pc, #240]	; (80026ec <temp_value+0x1d4>)
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	e011      	b.n	8002622 <temp_value+0x10a>
	else if(j == '7') b = 7;
 80025fe:	79bb      	ldrb	r3, [r7, #6]
 8002600:	2b37      	cmp	r3, #55	; 0x37
 8002602:	d102      	bne.n	800260a <temp_value+0xf2>
 8002604:	4b3a      	ldr	r3, [pc, #232]	; (80026f0 <temp_value+0x1d8>)
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	e00b      	b.n	8002622 <temp_value+0x10a>
	else if(j == '8') b = 8;
 800260a:	79bb      	ldrb	r3, [r7, #6]
 800260c:	2b38      	cmp	r3, #56	; 0x38
 800260e:	d103      	bne.n	8002618 <temp_value+0x100>
 8002610:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	e004      	b.n	8002622 <temp_value+0x10a>
	else if(j == '9') b = 9;
 8002618:	79bb      	ldrb	r3, [r7, #6]
 800261a:	2b39      	cmp	r3, #57	; 0x39
 800261c:	d101      	bne.n	8002622 <temp_value+0x10a>
 800261e:	4b35      	ldr	r3, [pc, #212]	; (80026f4 <temp_value+0x1dc>)
 8002620:	613b      	str	r3, [r7, #16]

	if(k == '0') c = 0;
 8002622:	797b      	ldrb	r3, [r7, #5]
 8002624:	2b30      	cmp	r3, #48	; 0x30
 8002626:	d103      	bne.n	8002630 <temp_value+0x118>
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	e035      	b.n	800269c <temp_value+0x184>
	else if(k == '1') c = 0.1;
 8002630:	797b      	ldrb	r3, [r7, #5]
 8002632:	2b31      	cmp	r3, #49	; 0x31
 8002634:	d102      	bne.n	800263c <temp_value+0x124>
 8002636:	4b30      	ldr	r3, [pc, #192]	; (80026f8 <temp_value+0x1e0>)
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	e02f      	b.n	800269c <temp_value+0x184>
	else if(k == '2') c = 0.2;
 800263c:	797b      	ldrb	r3, [r7, #5]
 800263e:	2b32      	cmp	r3, #50	; 0x32
 8002640:	d102      	bne.n	8002648 <temp_value+0x130>
 8002642:	4b2e      	ldr	r3, [pc, #184]	; (80026fc <temp_value+0x1e4>)
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	e029      	b.n	800269c <temp_value+0x184>
	else if(k == '3') c = 0.3;
 8002648:	797b      	ldrb	r3, [r7, #5]
 800264a:	2b33      	cmp	r3, #51	; 0x33
 800264c:	d102      	bne.n	8002654 <temp_value+0x13c>
 800264e:	4b2c      	ldr	r3, [pc, #176]	; (8002700 <temp_value+0x1e8>)
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	e023      	b.n	800269c <temp_value+0x184>
	else if(k == '4') c = 0.4;
 8002654:	797b      	ldrb	r3, [r7, #5]
 8002656:	2b34      	cmp	r3, #52	; 0x34
 8002658:	d102      	bne.n	8002660 <temp_value+0x148>
 800265a:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <temp_value+0x1ec>)
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	e01d      	b.n	800269c <temp_value+0x184>
	else if(k == '5') c = 0.5;
 8002660:	797b      	ldrb	r3, [r7, #5]
 8002662:	2b35      	cmp	r3, #53	; 0x35
 8002664:	d103      	bne.n	800266e <temp_value+0x156>
 8002666:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	e016      	b.n	800269c <temp_value+0x184>
	else if(k == '6') c = 0.6;
 800266e:	797b      	ldrb	r3, [r7, #5]
 8002670:	2b36      	cmp	r3, #54	; 0x36
 8002672:	d102      	bne.n	800267a <temp_value+0x162>
 8002674:	4b24      	ldr	r3, [pc, #144]	; (8002708 <temp_value+0x1f0>)
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	e010      	b.n	800269c <temp_value+0x184>
	else if(k == '7') c = 0.7;
 800267a:	797b      	ldrb	r3, [r7, #5]
 800267c:	2b37      	cmp	r3, #55	; 0x37
 800267e:	d102      	bne.n	8002686 <temp_value+0x16e>
 8002680:	4b22      	ldr	r3, [pc, #136]	; (800270c <temp_value+0x1f4>)
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	e00a      	b.n	800269c <temp_value+0x184>
	else if(k == '8') c = 0.8;
 8002686:	797b      	ldrb	r3, [r7, #5]
 8002688:	2b38      	cmp	r3, #56	; 0x38
 800268a:	d102      	bne.n	8002692 <temp_value+0x17a>
 800268c:	4b20      	ldr	r3, [pc, #128]	; (8002710 <temp_value+0x1f8>)
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	e004      	b.n	800269c <temp_value+0x184>
	else if(k == '9') c = 0.9;
 8002692:	797b      	ldrb	r3, [r7, #5]
 8002694:	2b39      	cmp	r3, #57	; 0x39
 8002696:	d101      	bne.n	800269c <temp_value+0x184>
 8002698:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <temp_value+0x1fc>)
 800269a:	60fb      	str	r3, [r7, #12]

	return a+b+c;
 800269c:	ed97 7a05 	vldr	s14, [r7, #20]
 80026a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80026a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80026ac:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80026b0:	eeb0 0a67 	vmov.f32	s0, s15
 80026b4:	371c      	adds	r7, #28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	41200000 	.word	0x41200000
 80026c4:	41a00000 	.word	0x41a00000
 80026c8:	41f00000 	.word	0x41f00000
 80026cc:	42200000 	.word	0x42200000
 80026d0:	42480000 	.word	0x42480000
 80026d4:	42700000 	.word	0x42700000
 80026d8:	428c0000 	.word	0x428c0000
 80026dc:	42a00000 	.word	0x42a00000
 80026e0:	42b40000 	.word	0x42b40000
 80026e4:	40400000 	.word	0x40400000
 80026e8:	40a00000 	.word	0x40a00000
 80026ec:	40c00000 	.word	0x40c00000
 80026f0:	40e00000 	.word	0x40e00000
 80026f4:	41100000 	.word	0x41100000
 80026f8:	3dcccccd 	.word	0x3dcccccd
 80026fc:	3e4ccccd 	.word	0x3e4ccccd
 8002700:	3e99999a 	.word	0x3e99999a
 8002704:	3ecccccd 	.word	0x3ecccccd
 8002708:	3f19999a 	.word	0x3f19999a
 800270c:	3f333333 	.word	0x3f333333
 8002710:	3f4ccccd 	.word	0x3f4ccccd
 8002714:	3f666666 	.word	0x3f666666

08002718 <ringInit>:

void storeChar(unsigned char c, Ring_Buffer *buffer);


void ringInit(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
	_rx_buffer1 = &rx_buffer1;
 800271c:	4b18      	ldr	r3, [pc, #96]	; (8002780 <ringInit+0x68>)
 800271e:	4a19      	ldr	r2, [pc, #100]	; (8002784 <ringInit+0x6c>)
 8002720:	601a      	str	r2, [r3, #0]
    _tx_buffer1 = &tx_buffer1;
 8002722:	4b19      	ldr	r3, [pc, #100]	; (8002788 <ringInit+0x70>)
 8002724:	4a19      	ldr	r2, [pc, #100]	; (800278c <ringInit+0x74>)
 8002726:	601a      	str	r2, [r3, #0]
    _rx_buffer2 = &rx_buffer2;
 8002728:	4b19      	ldr	r3, [pc, #100]	; (8002790 <ringInit+0x78>)
 800272a:	4a1a      	ldr	r2, [pc, #104]	; (8002794 <ringInit+0x7c>)
 800272c:	601a      	str	r2, [r3, #0]
    _tx_buffer2 = &tx_buffer2;
 800272e:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <ringInit+0x80>)
 8002730:	4a1a      	ldr	r2, [pc, #104]	; (800279c <ringInit+0x84>)
 8002732:	601a      	str	r2, [r3, #0]

    /* Habilita la INTERRUPCIÓN por ERROR del UART (frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_ERR);
 8002734:	4b1a      	ldr	r3, [pc, #104]	; (80027a0 <ringInit+0x88>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <ringInit+0x88>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_ERR);
 8002744:	4b17      	ldr	r3, [pc, #92]	; (80027a4 <ringInit+0x8c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	4b16      	ldr	r3, [pc, #88]	; (80027a4 <ringInit+0x8c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	615a      	str	r2, [r3, #20]

    /* Habilita la INTERRUPCIÓN por REGISTRO DE DATA VACÍO */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_RXNE);
 8002754:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <ringInit+0x88>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <ringInit+0x88>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0220 	orr.w	r2, r2, #32
 8002762:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_RXNE);
 8002764:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <ringInit+0x8c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <ringInit+0x8c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0220 	orr.w	r2, r2, #32
 8002772:	60da      	str	r2, [r3, #12]
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20000a58 	.word	0x20000a58
 8002784:	20000090 	.word	0x20000090
 8002788:	20000a5c 	.word	0x20000a5c
 800278c:	20000298 	.word	0x20000298
 8002790:	20000a60 	.word	0x20000a60
 8002794:	200004a0 	.word	0x200004a0
 8002798:	20000a54 	.word	0x20000a54
 800279c:	200006a8 	.word	0x200006a8
 80027a0:	20000e0c 	.word	0x20000e0c
 80027a4:	20000d80 	.word	0x20000d80

080027a8 <storeChar>:


void storeChar(unsigned char c, Ring_Buffer *buffer)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	6039      	str	r1, [r7, #0]
 80027b2:	71fb      	strb	r3, [r7, #7]
    int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027ba:	3301      	adds	r3, #1
 80027bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c0:	60fb      	str	r3, [r7, #12]

    // Si queremos almacenar lo recibido justo antes de TAIL, significando que HEAD avanzará hasta la posición de TAIL,
    // se provocará un desbordamiento (overflow) del BUFFER, y, por lo tanto, no se escribirá el caracter o ni avanzaremos HEAD.
    if(i != buffer->tail)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d009      	beq.n	80027e2 <storeChar+0x3a>
    {
    	buffer->buffer[buffer->head] = c;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	79f9      	ldrb	r1, [r7, #7]
 80027d8:	54d1      	strb	r1, [r2, r3]
        buffer->head = i;
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }
}
 80027e2:	bf00      	nop
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
	...

080027f0 <UART_peek>:
	}
}


int UART_peek(UART_HandleTypeDef *uart)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a1c      	ldr	r2, [pc, #112]	; (800286c <UART_peek+0x7c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d114      	bne.n	800282a <UART_peek+0x3a>
	{
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 8002800:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <UART_peek+0x80>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002808:	4b19      	ldr	r3, [pc, #100]	; (8002870 <UART_peek+0x80>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002810:	429a      	cmp	r2, r3
 8002812:	d102      	bne.n	800281a <UART_peek+0x2a>
 8002814:	f04f 33ff 	mov.w	r3, #4294967295
 8002818:	e022      	b.n	8002860 <UART_peek+0x70>

		else return _rx_buffer1->buffer[_rx_buffer1->tail];
 800281a:	4b15      	ldr	r3, [pc, #84]	; (8002870 <UART_peek+0x80>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	4b14      	ldr	r3, [pc, #80]	; (8002870 <UART_peek+0x80>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002826:	5cd3      	ldrb	r3, [r2, r3]
 8002828:	e01a      	b.n	8002860 <UART_peek+0x70>
	}

	else if (uart == PC_UART)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a11      	ldr	r2, [pc, #68]	; (8002874 <UART_peek+0x84>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d114      	bne.n	800285c <UART_peek+0x6c>
	{
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 8002832:	4b11      	ldr	r3, [pc, #68]	; (8002878 <UART_peek+0x88>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800283a:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <UART_peek+0x88>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002842:	429a      	cmp	r2, r3
 8002844:	d102      	bne.n	800284c <UART_peek+0x5c>
 8002846:	f04f 33ff 	mov.w	r3, #4294967295
 800284a:	e009      	b.n	8002860 <UART_peek+0x70>

		else return _rx_buffer2->buffer[_rx_buffer2->tail];
 800284c:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <UART_peek+0x88>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <UART_peek+0x88>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002858:	5cd3      	ldrb	r3, [r2, r3]
 800285a:	e001      	b.n	8002860 <UART_peek+0x70>
	}

	return -1;
 800285c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	20000e0c 	.word	0x20000e0c
 8002870:	20000a58 	.word	0x20000a58
 8002874:	20000d80 	.word	0x20000d80
 8002878:	20000a60 	.word	0x20000a60

0800287c <UART_read>:


int UART_read(UART_HandleTypeDef *uart)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a29      	ldr	r2, [pc, #164]	; (800292c <UART_read+0xb0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d121      	bne.n	80028d0 <UART_read+0x54>
	{
		// Si HEAD no está delante de TAIL, no tenemos ningún CARACTER
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 800288c:	4b28      	ldr	r3, [pc, #160]	; (8002930 <UART_read+0xb4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002894:	4b26      	ldr	r3, [pc, #152]	; (8002930 <UART_read+0xb4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800289c:	429a      	cmp	r2, r3
 800289e:	d102      	bne.n	80028a6 <UART_read+0x2a>
 80028a0:	f04f 33ff 	mov.w	r3, #4294967295
 80028a4:	e03c      	b.n	8002920 <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 80028a6:	4b22      	ldr	r3, [pc, #136]	; (8002930 <UART_read+0xb4>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4b21      	ldr	r3, [pc, #132]	; (8002930 <UART_read+0xb4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028b2:	5cd3      	ldrb	r3, [r2, r3]
 80028b4:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 80028b6:	4b1e      	ldr	r3, [pc, #120]	; (8002930 <UART_read+0xb4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <UART_read+0xb4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 80028cc:	7bbb      	ldrb	r3, [r7, #14]
 80028ce:	e027      	b.n	8002920 <UART_read+0xa4>
		}
	}

	else if (uart == PC_UART)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a18      	ldr	r2, [pc, #96]	; (8002934 <UART_read+0xb8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d121      	bne.n	800291c <UART_read+0xa0>
	{
		// Si HEAD no está delante de TAIL, no tenemos ningún CARACTER
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 80028d8:	4b17      	ldr	r3, [pc, #92]	; (8002938 <UART_read+0xbc>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80028e0:	4b15      	ldr	r3, [pc, #84]	; (8002938 <UART_read+0xbc>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d102      	bne.n	80028f2 <UART_read+0x76>
 80028ec:	f04f 33ff 	mov.w	r3, #4294967295
 80028f0:	e016      	b.n	8002920 <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <UART_read+0xbc>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	4b10      	ldr	r3, [pc, #64]	; (8002938 <UART_read+0xbc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028fe:	5cd3      	ldrb	r3, [r2, r3]
 8002900:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8002902:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <UART_read+0xbc>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <UART_read+0xbc>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002914:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	e001      	b.n	8002920 <UART_read+0xa4>
		}
	}

	else return -1;
 800291c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002920:	4618      	mov	r0, r3
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	20000e0c 	.word	0x20000e0c
 8002930:	20000a58 	.word	0x20000a58
 8002934:	20000d80 	.word	0x20000d80
 8002938:	20000a60 	.word	0x20000a60

0800293c <UART_write>:


void UART_write(int c, UART_HandleTypeDef *uart)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	db54      	blt.n	80029f6 <UART_write+0xba>
	{
		if (uart == WiFi_UART)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	4a2d      	ldr	r2, [pc, #180]	; (8002a04 <UART_write+0xc8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d126      	bne.n	80029a2 <UART_write+0x66>
		{
			int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8002954:	4b2c      	ldr	r3, [pc, #176]	; (8002a08 <UART_write+0xcc>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800295c:	3301      	adds	r3, #1
 800295e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002962:	60bb      	str	r3, [r7, #8]

			// Si el BUFFER de salida está lleno, sólo se puede esperar a la INTERRUPCIÓN que lo vacia */
		    while (i == _tx_buffer1->tail);
 8002964:	bf00      	nop
 8002966:	4b28      	ldr	r3, [pc, #160]	; (8002a08 <UART_write+0xcc>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	429a      	cmp	r2, r3
 8002972:	d0f8      	beq.n	8002966 <UART_write+0x2a>

		   _tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8002974:	4b24      	ldr	r3, [pc, #144]	; (8002a08 <UART_write+0xcc>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4b23      	ldr	r3, [pc, #140]	; (8002a08 <UART_write+0xcc>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	b2c9      	uxtb	r1, r1
 8002984:	54d1      	strb	r1, [r2, r3]
		   _tx_buffer1->head = i;
 8002986:	4b20      	ldr	r3, [pc, #128]	; (8002a08 <UART_write+0xcc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		   // Habilitar la INTERRUPCIÓN de TRANSMISIÓN del UART
		   __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_TXE);
 8002990:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <UART_write+0xc8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <UART_write+0xc8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800299e:	60da      	str	r2, [r3, #12]

			// Habilitar la INTERRUPCIÓN de TRANSMISIÓN del UART
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
		}
	}
}
 80029a0:	e029      	b.n	80029f6 <UART_write+0xba>
		else if (uart == PC_UART)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	4a19      	ldr	r2, [pc, #100]	; (8002a0c <UART_write+0xd0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d125      	bne.n	80029f6 <UART_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 80029aa:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <UART_write+0xd4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029b2:	3301      	adds	r3, #1
 80029b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b8:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 80029ba:	bf00      	nop
 80029bc:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <UART_write+0xd4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d0f8      	beq.n	80029bc <UART_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 80029ca:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <UART_write+0xd4>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <UART_write+0xd4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	b2c9      	uxtb	r1, r1
 80029da:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <UART_write+0xd4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
 80029e6:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <UART_write+0xd0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <UART_write+0xd0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029f4:	60da      	str	r2, [r3, #12]
}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000e0c 	.word	0x20000e0c
 8002a08:	20000a5c 	.word	0x20000a5c
 8002a0c:	20000d80 	.word	0x20000d80
 8002a10:	20000a54 	.word	0x20000a54

08002a14 <UART_available>:


int UART_available(UART_HandleTypeDef *uart)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a19      	ldr	r2, [pc, #100]	; (8002a84 <UART_available+0x70>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d111      	bne.n	8002a48 <UART_available+0x34>
 8002a24:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <UART_available+0x74>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <UART_available+0x74>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a46:	e017      	b.n	8002a78 <UART_available+0x64>

	else if (uart == PC_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a10      	ldr	r2, [pc, #64]	; (8002a8c <UART_available+0x78>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d111      	bne.n	8002a74 <UART_available+0x60>
 8002a50:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <UART_available+0x7c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <UART_available+0x7c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a72:	e001      	b.n	8002a78 <UART_available+0x64>

	return -1;
 8002a74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	20000e0c 	.word	0x20000e0c
 8002a88:	20000a58 	.word	0x20000a58
 8002a8c:	20000d80 	.word	0x20000d80
 8002a90:	20000a60 	.word	0x20000a60

08002a94 <UART_send>:
	return 1;
}


void UART_send (const char *s, UART_HandleTypeDef *uart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
	while(*s!='\0') UART_write(*s++, uart);
 8002a9e:	e007      	b.n	8002ab0 <UART_send+0x1c>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	6839      	ldr	r1, [r7, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff ff46 	bl	800293c <UART_write>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1f3      	bne.n	8002aa0 <UART_send+0xc>
}
 8002ab8:	bf00      	nop
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <UART_copyUpto>:
  while(*s) UART_write(*s++, uart);
}


int UART_copyUpto(char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f7fd fb7b 	bl	80001d0 <strlen>
 8002ada:	4603      	mov	r3, r0
 8002adc:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61bb      	str	r3, [r7, #24]

again:
	while (!UART_available(uart));
 8002ae2:	bf00      	nop
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff ff95 	bl	8002a14 <UART_available>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0f9      	beq.n	8002ae4 <UART_copyUpto+0x20>

	while (UART_peek(uart) != string[so_far])
 8002af0:	e01f      	b.n	8002b32 <UART_copyUpto+0x6e>
	{
		buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8002af2:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <UART_copyUpto+0xf8>)
 8002af4:	6819      	ldr	r1, [r3, #0]
 8002af6:	4b31      	ldr	r3, [pc, #196]	; (8002bbc <UART_copyUpto+0xf8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	68b8      	ldr	r0, [r7, #8]
 8002b02:	4403      	add	r3, r0
 8002b04:	5c8a      	ldrb	r2, [r1, r2]
 8002b06:	701a      	strb	r2, [r3, #0]
		_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8002b08:	4b2c      	ldr	r3, [pc, #176]	; (8002bbc <UART_copyUpto+0xf8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	4b2a      	ldr	r3, [pc, #168]	; (8002bbc <UART_copyUpto+0xf8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b1a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		indx++;
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	3301      	adds	r3, #1
 8002b22:	61bb      	str	r3, [r7, #24]
		while (!UART_available(uart));
 8002b24:	bf00      	nop
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7ff ff74 	bl	8002a14 <UART_available>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f9      	beq.n	8002b26 <UART_copyUpto+0x62>
	while (UART_peek(uart) != string[so_far])
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff fe5c 	bl	80027f0 <UART_peek>
 8002b38:	4601      	mov	r1, r0
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4413      	add	r3, r2
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	4299      	cmp	r1, r3
 8002b44:	d1d5      	bne.n	8002af2 <UART_copyUpto+0x2e>

	}

	while (UART_peek(uart) == string [so_far])
 8002b46:	e01b      	b.n	8002b80 <UART_copyUpto+0xbc>
	{
		so_far++;
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = UART_read(uart);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff fe94 	bl	800287c <UART_read>
 8002b54:	4601      	mov	r1, r0
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	61ba      	str	r2, [r7, #24]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	4413      	add	r3, r2
 8002b62:	b2ca      	uxtb	r2, r1
 8002b64:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d101      	bne.n	8002b72 <UART_copyUpto+0xae>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e01f      	b.n	8002bb2 <UART_copyUpto+0xee>
		while (!UART_available(uart));
 8002b72:	bf00      	nop
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff ff4d 	bl	8002a14 <UART_available>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f9      	beq.n	8002b74 <UART_copyUpto+0xb0>
	while (UART_peek(uart) == string [so_far])
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff fe35 	bl	80027f0 <UART_peek>
 8002b86:	4601      	mov	r1, r0
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	4299      	cmp	r1, r3
 8002b92:	d0d9      	beq.n	8002b48 <UART_copyUpto+0x84>
	}

	if (so_far != len)
 8002b94:	69fa      	ldr	r2, [r7, #28]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d002      	beq.n	8002ba2 <UART_copyUpto+0xde>
	{
		so_far = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61fb      	str	r3, [r7, #28]
		goto again;
 8002ba0:	e79f      	b.n	8002ae2 <UART_copyUpto+0x1e>
	}

	if (so_far == len) return 1;
 8002ba2:	69fa      	ldr	r2, [r7, #28]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d101      	bne.n	8002bae <UART_copyUpto+0xea>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e001      	b.n	8002bb2 <UART_copyUpto+0xee>

	else return -1;
 8002bae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3720      	adds	r7, #32
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000a58 	.word	0x20000a58

08002bc0 <UART_waitFor>:


int UART_waitFor(char *string,UART_HandleTypeDef *uart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7fd fafe 	bl	80001d0 <strlen>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	60bb      	str	r3, [r7, #8]

again_device:
	while (!UART_available(uart));
 8002bd8:	bf00      	nop
 8002bda:	6838      	ldr	r0, [r7, #0]
 8002bdc:	f7ff ff1a 	bl	8002a14 <UART_available>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f9      	beq.n	8002bda <UART_waitFor+0x1a>

	if (UART_peek(uart) != string[so_far])
 8002be6:	6838      	ldr	r0, [r7, #0]
 8002be8:	f7ff fe02 	bl	80027f0 <UART_peek>
 8002bec:	4601      	mov	r1, r0
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	4299      	cmp	r1, r3
 8002bf8:	d01e      	beq.n	8002c38 <UART_waitFor+0x78>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 8002bfa:	4b1e      	ldr	r3, [pc, #120]	; (8002c74 <UART_waitFor+0xb4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <UART_waitFor+0xb4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 8002c10:	e7e2      	b.n	8002bd8 <UART_waitFor+0x18>

	}

	while (UART_peek(uart) == string [so_far])
	{
		so_far++;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	3301      	adds	r3, #1
 8002c16:	60fb      	str	r3, [r7, #12]
		UART_read(uart);
 8002c18:	6838      	ldr	r0, [r7, #0]
 8002c1a:	f7ff fe2f 	bl	800287c <UART_read>
		if (so_far == len) return 1;
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d101      	bne.n	8002c2a <UART_waitFor+0x6a>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e01f      	b.n	8002c6a <UART_waitFor+0xaa>
		while (!UART_available(uart));
 8002c2a:	bf00      	nop
 8002c2c:	6838      	ldr	r0, [r7, #0]
 8002c2e:	f7ff fef1 	bl	8002a14 <UART_available>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f9      	beq.n	8002c2c <UART_waitFor+0x6c>
	while (UART_peek(uart) == string [so_far])
 8002c38:	6838      	ldr	r0, [r7, #0]
 8002c3a:	f7ff fdd9 	bl	80027f0 <UART_peek>
 8002c3e:	4601      	mov	r1, r0
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	4413      	add	r3, r2
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	4299      	cmp	r1, r3
 8002c4a:	d0e2      	beq.n	8002c12 <UART_waitFor+0x52>
	}

	if (so_far != len)
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d002      	beq.n	8002c5a <UART_waitFor+0x9a>
	{
		so_far = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	60fb      	str	r3, [r7, #12]
		goto again_device;
 8002c58:	e7be      	b.n	8002bd8 <UART_waitFor+0x18>
	}

	if (so_far == len) return 1;
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d101      	bne.n	8002c66 <UART_waitFor+0xa6>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e001      	b.n	8002c6a <UART_waitFor+0xaa>

	else return -1;
 8002c66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000a58 	.word	0x20000a58

08002c78 <UART_isr>:


void UART_isr(UART_HandleTypeDef *huart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	613b      	str	r3, [r7, #16]

	/* Si DR (DATA REGISTER) no está vacío y RX INT está habilitado */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d023      	beq.n	8002ce2 <UART_isr+0x6a>
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d01e      	beq.n	8002ce2 <UART_isr+0x6a>
    	    	                USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	************************************************************************************************************/

		huart->Instance->SR;                   // Leer SR (STATUS REGISTER)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR; // Leer DR (DATA REGISTER)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	73fb      	strb	r3, [r7, #15]

        if (huart == WiFi_UART)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a3f      	ldr	r2, [pc, #252]	; (8002db4 <UART_isr+0x13c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d107      	bne.n	8002cca <UART_isr+0x52>
        {
        	storeChar(c, _rx_buffer1); // Almacena DATA en el BUFFER
 8002cba:	4b3f      	ldr	r3, [pc, #252]	; (8002db8 <UART_isr+0x140>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fd70 	bl	80027a8 <storeChar>
        else if (huart == PC_UART)
        {
        	storeChar(c, _rx_buffer2); // Almacena DATA en el BUFFER
        }

        return;
 8002cc8:	e06d      	b.n	8002da6 <UART_isr+0x12e>
        else if (huart == PC_UART)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a3b      	ldr	r2, [pc, #236]	; (8002dbc <UART_isr+0x144>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d169      	bne.n	8002da6 <UART_isr+0x12e>
        	storeChar(c, _rx_buffer2); // Almacena DATA en el BUFFER
 8002cd2:	4b3b      	ldr	r3, [pc, #236]	; (8002dc0 <UART_isr+0x148>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fd64 	bl	80027a8 <storeChar>
        return;
 8002ce0:	e061      	b.n	8002da6 <UART_isr+0x12e>
    }

    /* Si la INTERRUPCIÓN se produce por el TRANSMIT DATA REGISTER EMPTY */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d05f      	beq.n	8002dac <UART_isr+0x134>
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d05a      	beq.n	8002dac <UART_isr+0x134>
    {
    	if (huart == WiFi_UART)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a2e      	ldr	r2, [pc, #184]	; (8002db4 <UART_isr+0x13c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d127      	bne.n	8002d4e <UART_isr+0xd6>
    	{
    		if(tx_buffer1.head == tx_buffer1.tail)
 8002cfe:	4b31      	ldr	r3, [pc, #196]	; (8002dc4 <UART_isr+0x14c>)
 8002d00:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002d04:	4b2f      	ldr	r3, [pc, #188]	; (8002dc4 <UART_isr+0x14c>)
 8002d06:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d108      	bne.n	8002d20 <UART_isr+0xa8>
    	    {
    			// BUFFER vacío, inhabilitamos la INTERRUPCIÓN
    	        __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d1c:	60da      	str	r2, [r3, #12]
        	     huart->Instance->DR = c;

        	}
        }

    	return;
 8002d1e:	e044      	b.n	8002daa <UART_isr+0x132>
    			unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8002d20:	4b28      	ldr	r3, [pc, #160]	; (8002dc4 <UART_isr+0x14c>)
 8002d22:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002d26:	4a27      	ldr	r2, [pc, #156]	; (8002dc4 <UART_isr+0x14c>)
 8002d28:	5cd3      	ldrb	r3, [r2, r3]
 8002d2a:	737b      	strb	r3, [r7, #13]
    			tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8002d2c:	4b25      	ldr	r3, [pc, #148]	; (8002dc4 <UART_isr+0x14c>)
 8002d2e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002d32:	3301      	adds	r3, #1
 8002d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d38:	4a22      	ldr	r2, [pc, #136]	; (8002dc4 <UART_isr+0x14c>)
 8002d3a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    			huart->Instance->SR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
    			huart->Instance->DR = c;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	7b7a      	ldrb	r2, [r7, #13]
 8002d4a:	605a      	str	r2, [r3, #4]
    	return;
 8002d4c:	e02d      	b.n	8002daa <UART_isr+0x132>
    	else if (huart == PC_UART)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a1a      	ldr	r2, [pc, #104]	; (8002dbc <UART_isr+0x144>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d129      	bne.n	8002daa <UART_isr+0x132>
    		if(tx_buffer2.head == tx_buffer2.tail)
 8002d56:	4b1c      	ldr	r3, [pc, #112]	; (8002dc8 <UART_isr+0x150>)
 8002d58:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002d5c:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <UART_isr+0x150>)
 8002d5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d108      	bne.n	8002d78 <UART_isr+0x100>
        	    __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d74:	60da      	str	r2, [r3, #12]
    	return;
 8002d76:	e018      	b.n	8002daa <UART_isr+0x132>
        	    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8002d78:	4b13      	ldr	r3, [pc, #76]	; (8002dc8 <UART_isr+0x150>)
 8002d7a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002d7e:	4a12      	ldr	r2, [pc, #72]	; (8002dc8 <UART_isr+0x150>)
 8002d80:	5cd3      	ldrb	r3, [r2, r3]
 8002d82:	73bb      	strb	r3, [r7, #14]
        	    tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8002d84:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <UART_isr+0x150>)
 8002d86:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d90:	4a0d      	ldr	r2, [pc, #52]	; (8002dc8 <UART_isr+0x150>)
 8002d92:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	     huart->Instance->SR;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
        	     huart->Instance->DR = c;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	7bba      	ldrb	r2, [r7, #14]
 8002da2:	605a      	str	r2, [r3, #4]
    	return;
 8002da4:	e001      	b.n	8002daa <UART_isr+0x132>
        return;
 8002da6:	bf00      	nop
 8002da8:	e000      	b.n	8002dac <UART_isr+0x134>
    	return;
 8002daa:	bf00      	nop
    }
}
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20000e0c 	.word	0x20000e0c
 8002db8:	20000a58 	.word	0x20000a58
 8002dbc:	20000d80 	.word	0x20000d80
 8002dc0:	20000a60 	.word	0x20000a60
 8002dc4:	20000298 	.word	0x20000298
 8002dc8:	200006a8 	.word	0x200006a8

08002dcc <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin==B_Timbre_Pin)
 8002dd6:	88fb      	ldrh	r3, [r7, #6]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d102      	bne.n	8002de2 <HAL_GPIO_EXTI_Callback+0x16>
	{
		timbre = 1;
 8002ddc:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <HAL_GPIO_EXTI_Callback+0x48>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	601a      	str	r2, [r3, #0]
	}
    if (GPIO_Pin==B_Stop_Pin)
 8002de2:	88fb      	ldrh	r3, [r7, #6]
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d102      	bne.n	8002dee <HAL_GPIO_EXTI_Callback+0x22>
    {
    	stop = 1;
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin==S_Int_Pin)
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d102      	bne.n	8002dfa <HAL_GPIO_EXTI_Callback+0x2e>
    {
        interior = 1;
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_GPIO_EXTI_Callback+0x50>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin==S_Ext_Pin)
 8002dfa:	88fb      	ldrh	r3, [r7, #6]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d102      	bne.n	8002e06 <HAL_GPIO_EXTI_Callback+0x3a>
    {
        exterior = 1;
 8002e00:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <HAL_GPIO_EXTI_Callback+0x54>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	601a      	str	r2, [r3, #0]
    }
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	200008b0 	.word	0x200008b0
 8002e18:	200008b4 	.word	0x200008b4
 8002e1c:	200008b8 	.word	0x200008b8
 8002e20:	200008bc 	.word	0x200008bc

08002e24 <debouncer>:

int debouncer(volatile int* button_int, GPIO_TypeDef* GPIO_port, uint16_t GPIO_number) // Control de los rebotes
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count=0;
	static int counter=0;

	if (*button_int==1)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d13b      	bne.n	8002eb2 <debouncer+0x8e>
	{
		if (button_count==0)
 8002e3a:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <debouncer+0x98>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10b      	bne.n	8002e5a <debouncer+0x36>
		{
			counter=HAL_GetTick();
 8002e42:	f001 febd 	bl	8004bc0 <HAL_GetTick>
 8002e46:	4603      	mov	r3, r0
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <debouncer+0x9c>)
 8002e4c:	601a      	str	r2, [r3, #0]
			button_count++;
 8002e4e:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <debouncer+0x98>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	3301      	adds	r3, #1
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <debouncer+0x98>)
 8002e58:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick()-counter>=20)
 8002e5a:	f001 feb1 	bl	8004bc0 <HAL_GetTick>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	4a17      	ldr	r2, [pc, #92]	; (8002ec0 <debouncer+0x9c>)
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	2b13      	cmp	r3, #19
 8002e68:	d923      	bls.n	8002eb2 <debouncer+0x8e>
		{
			counter=HAL_GetTick();
 8002e6a:	f001 fea9 	bl	8004bc0 <HAL_GetTick>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	461a      	mov	r2, r3
 8002e72:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <debouncer+0x9c>)
 8002e74:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number)!=1)
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	4619      	mov	r1, r3
 8002e7a:	68b8      	ldr	r0, [r7, #8]
 8002e7c:	f002 fddc 	bl	8005a38 <HAL_GPIO_ReadPin>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d003      	beq.n	8002e8e <debouncer+0x6a>
			{
				button_count=1;
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <debouncer+0x98>)
 8002e88:	2201      	movs	r2, #1
 8002e8a:	701a      	strb	r2, [r3, #0]
 8002e8c:	e005      	b.n	8002e9a <debouncer+0x76>
			}
			else
			{
				button_count++;
 8002e8e:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <debouncer+0x98>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	3301      	adds	r3, #1
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <debouncer+0x98>)
 8002e98:	701a      	strb	r2, [r3, #0]
			}
			if (button_count==4 ) // Periodo antirebotes
 8002e9a:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <debouncer+0x98>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d107      	bne.n	8002eb2 <debouncer+0x8e>
			{
				button_count=0;
 8002ea2:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <debouncer+0x98>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
				*button_int=0;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
				return 1;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <debouncer+0x90>
			}
		}
	}
	return 0;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	200008ec 	.word	0x200008ec
 8002ec0:	200008f0 	.word	0x200008f0

08002ec4 <play_Timbre>:


void play_Timbre(void){
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0

	uint8_t tone;

	tone = 25;
 8002eca:	2319      	movs	r3, #25
 8002ecc:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	005a      	lsls	r2, r3, #1
 8002ed2:	4b16      	ldr	r3, [pc, #88]	; (8002f2c <play_Timbre+0x68>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	461a      	mov	r2, r3
 8002ede:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <play_Timbre+0x68>)
 8002ee0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 8002ee2:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <play_Timbre+0x68>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	79fa      	ldrb	r2, [r7, #7]
 8002ee8:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(300);
 8002eea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002eee:	f001 fe73 	bl	8004bd8 <HAL_Delay>

	tone = 40;
 8002ef2:	2328      	movs	r3, #40	; 0x28
 8002ef4:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	005a      	lsls	r2, r3, #1
 8002efa:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <play_Timbre+0x68>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <play_Timbre+0x68>)
 8002f08:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 8002f0a:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <play_Timbre+0x68>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	79fa      	ldrb	r2, [r7, #7]
 8002f10:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 8002f12:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002f16:	f001 fe5f 	bl	8004bd8 <HAL_Delay>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8002f1a:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <play_Timbre+0x68>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20000aac 	.word	0x20000aac

08002f30 <play_Alarma>:


void play_Alarma(){
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0

	uint8_t tone;

	for(tone = 40; tone >= 10; tone = tone-10){
 8002f36:	2328      	movs	r3, #40	; 0x28
 8002f38:	71fb      	strb	r3, [r7, #7]
 8002f3a:	e014      	b.n	8002f66 <play_Alarma+0x36>
		__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	005a      	lsls	r2, r3, #1
 8002f40:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <play_Alarma+0x48>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <play_Alarma+0x48>)
 8002f4e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 8002f50:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <play_Alarma+0x48>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	79fa      	ldrb	r2, [r7, #7]
 8002f56:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(300);
 8002f58:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002f5c:	f001 fe3c 	bl	8004bd8 <HAL_Delay>
	for(tone = 40; tone >= 10; tone = tone-10){
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	3b0a      	subs	r3, #10
 8002f64:	71fb      	strb	r3, [r7, #7]
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	2b09      	cmp	r3, #9
 8002f6a:	d8e7      	bhi.n	8002f3c <play_Alarma+0xc>
	}
}
 8002f6c:	bf00      	nop
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000aac 	.word	0x20000aac

08002f7c <delay>:
	}
}


/*----------- Delay en Microsegundos -----------*/
void delay(uint16_t time){
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim6,0);
 8002f86:	4b09      	ldr	r3, [pc, #36]	; (8002fac <delay+0x30>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim6))<time);
 8002f8e:	bf00      	nop
 8002f90:	4b06      	ldr	r3, [pc, #24]	; (8002fac <delay+0x30>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f96:	88fb      	ldrh	r3, [r7, #6]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d3f9      	bcc.n	8002f90 <delay+0x14>
}
 8002f9c:	bf00      	nop
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	20000ca8 	.word	0x20000ca8

08002fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fb4:	f001 fd9e 	bl	8004af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fb8:	f000 fb06 	bl	80035c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fbc:	f001 f838 	bl	8004030 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002fc0:	f000 ffb8 	bl	8003f34 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8002fc4:	f001 f80a 	bl	8003fdc <MX_USART6_UART_Init>
  MX_TIM5_Init();
 8002fc8:	f000 fe7c 	bl	8003cc4 <MX_TIM5_Init>
  MX_TIM1_Init();
 8002fcc:	f000 fc5c 	bl	8003888 <MX_TIM1_Init>
  MX_TIM4_Init();
 8002fd0:	f000 fe2c 	bl	8003c2c <MX_TIM4_Init>
  MX_TIM2_Init();
 8002fd4:	f000 fd10 	bl	80039f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002fd8:	f000 fd9a 	bl	8003b10 <MX_TIM3_Init>
  MX_TIM8_Init();
 8002fdc:	f000 fef6 	bl	8003dcc <MX_TIM8_Init>
  MX_TIM9_Init();
 8002fe0:	f000 ff44 	bl	8003e6c <MX_TIM9_Init>
  MX_TIM6_Init();
 8002fe4:	f000 febc 	bl	8003d60 <MX_TIM6_Init>
  MX_ADC1_Init();
 8002fe8:	f000 fb58 	bl	800369c <MX_ADC1_Init>
  MX_ADC2_Init();
 8002fec:	f000 fba8 	bl	8003740 <MX_ADC2_Init>
  MX_ADC3_Init();
 8002ff0:	f000 fbf8 	bl	80037e4 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8002ff4:	f000 ffc8 	bl	8003f88 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // LED RGB Gaming
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	48a8      	ldr	r0, [pc, #672]	; (800329c <main+0x2ec>)
 8002ffc:	f003 faec 	bl	80065d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003000:	2104      	movs	r1, #4
 8003002:	48a6      	ldr	r0, [pc, #664]	; (800329c <main+0x2ec>)
 8003004:	f003 fae8 	bl	80065d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003008:	2108      	movs	r1, #8
 800300a:	48a4      	ldr	r0, [pc, #656]	; (800329c <main+0x2ec>)
 800300c:	f003 fae4 	bl	80065d8 <HAL_TIM_PWM_Start>
  // Servo Parcela
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003010:	2100      	movs	r1, #0
 8003012:	48a3      	ldr	r0, [pc, #652]	; (80032a0 <main+0x2f0>)
 8003014:	f003 fae0 	bl	80065d8 <HAL_TIM_PWM_Start>
  // Servo Garaje
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8003018:	2104      	movs	r1, #4
 800301a:	48a1      	ldr	r0, [pc, #644]	; (80032a0 <main+0x2f0>)
 800301c:	f003 fadc 	bl	80065d8 <HAL_TIM_PWM_Start>
  // Servo Tendedero
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8003020:	2108      	movs	r1, #8
 8003022:	489f      	ldr	r0, [pc, #636]	; (80032a0 <main+0x2f0>)
 8003024:	f003 fad8 	bl	80065d8 <HAL_TIM_PWM_Start>
  // Servo Salón
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003028:	210c      	movs	r1, #12
 800302a:	489e      	ldr	r0, [pc, #632]	; (80032a4 <main+0x2f4>)
 800302c:	f003 fad4 	bl	80065d8 <HAL_TIM_PWM_Start>
  // Servo Dormitorio
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003030:	2104      	movs	r1, #4
 8003032:	489c      	ldr	r0, [pc, #624]	; (80032a4 <main+0x2f4>)
 8003034:	f003 fad0 	bl	80065d8 <HAL_TIM_PWM_Start>
  // Servo Oficina
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003038:	2108      	movs	r1, #8
 800303a:	489a      	ldr	r0, [pc, #616]	; (80032a4 <main+0x2f4>)
 800303c:	f003 facc 	bl	80065d8 <HAL_TIM_PWM_Start>
  // DC Salón
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8003040:	2100      	movs	r1, #0
 8003042:	4899      	ldr	r0, [pc, #612]	; (80032a8 <main+0x2f8>)
 8003044:	f003 fac8 	bl	80065d8 <HAL_TIM_PWM_Start>
  // Zumbador
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003048:	2100      	movs	r1, #0
 800304a:	4898      	ldr	r0, [pc, #608]	; (80032ac <main+0x2fc>)
 800304c:	f003 fac4 	bl	80065d8 <HAL_TIM_PWM_Start>

  /*----------- Útil para Sensor DHT11/22 -----------*/
  HAL_TIM_Base_Start(&htim6);
 8003050:	4897      	ldr	r0, [pc, #604]	; (80032b0 <main+0x300>)
 8003052:	f003 f9ff 	bl	8006454 <HAL_TIM_Base_Start>

  /*----------- Inicialización LDR & HW390 & Lluvia -----------*/
  HAL_ADC_Start(&hadc1); // LDR
 8003056:	4897      	ldr	r0, [pc, #604]	; (80032b4 <main+0x304>)
 8003058:	f001 fe26 	bl	8004ca8 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2); // HW-390
 800305c:	4896      	ldr	r0, [pc, #600]	; (80032b8 <main+0x308>)
 800305e:	f001 fe23 	bl	8004ca8 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3); // Lluvia
 8003062:	4896      	ldr	r0, [pc, #600]	; (80032bc <main+0x30c>)
 8003064:	f001 fe20 	bl	8004ca8 <HAL_ADC_Start>

  //__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
  ESP_Init("iPhone Carmela","pistacho");
 8003068:	4995      	ldr	r1, [pc, #596]	; (80032c0 <main+0x310>)
 800306a:	4896      	ldr	r0, [pc, #600]	; (80032c4 <main+0x314>)
 800306c:	f7fe f80e 	bl	800108c <ESP_Init>
  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	ESP_messageHandler();
 8003070:	f7fe f938 	bl	80012e4 <ESP_messageHandler>

		// TIMBRE
		if (debouncer(&timbre, B_Timbre_GPIO_Port, B_Timbre_Pin)){
 8003074:	2201      	movs	r2, #1
 8003076:	4994      	ldr	r1, [pc, #592]	; (80032c8 <main+0x318>)
 8003078:	4894      	ldr	r0, [pc, #592]	; (80032cc <main+0x31c>)
 800307a:	f7ff fed3 	bl	8002e24 <debouncer>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <main+0xd8>

			play_Timbre();
 8003084:	f7ff ff1e 	bl	8002ec4 <play_Timbre>

		// STOP ALARMA
		// Conexión Wi-Fi

		// ALARMA
		if (debouncer(&interior, S_Int_GPIO_Port, S_Int_Pin)){
 8003088:	2208      	movs	r2, #8
 800308a:	498f      	ldr	r1, [pc, #572]	; (80032c8 <main+0x318>)
 800308c:	4890      	ldr	r0, [pc, #576]	; (80032d0 <main+0x320>)
 800308e:	f7ff fec9 	bl	8002e24 <debouncer>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <main+0xf4>
			if(vSeg[0] == '1') play_Alarma();
 8003098:	4b8e      	ldr	r3, [pc, #568]	; (80032d4 <main+0x324>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b31      	cmp	r3, #49	; 0x31
 800309e:	d101      	bne.n	80030a4 <main+0xf4>
 80030a0:	f7ff ff46 	bl	8002f30 <play_Alarma>
		}
		if (debouncer(&exterior, S_Ext_GPIO_Port, S_Ext_Pin)){
 80030a4:	2202      	movs	r2, #2
 80030a6:	4988      	ldr	r1, [pc, #544]	; (80032c8 <main+0x318>)
 80030a8:	488b      	ldr	r0, [pc, #556]	; (80032d8 <main+0x328>)
 80030aa:	f7ff febb 	bl	8002e24 <debouncer>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <main+0x110>
			if(vSeg[1] == '1') play_Alarma();
 80030b4:	4b87      	ldr	r3, [pc, #540]	; (80032d4 <main+0x324>)
 80030b6:	785b      	ldrb	r3, [r3, #1]
 80030b8:	2b31      	cmp	r3, #49	; 0x31
 80030ba:	d101      	bne.n	80030c0 <main+0x110>
 80030bc:	f7ff ff38 	bl	8002f30 <play_Alarma>
		}

		// PUERTA PARCELA (90)
		if(vVent[0]=='1' || vExt[4]=='1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 92);
 80030c0:	4b86      	ldr	r3, [pc, #536]	; (80032dc <main+0x32c>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b31      	cmp	r3, #49	; 0x31
 80030c6:	d003      	beq.n	80030d0 <main+0x120>
 80030c8:	4b85      	ldr	r3, [pc, #532]	; (80032e0 <main+0x330>)
 80030ca:	791b      	ldrb	r3, [r3, #4]
 80030cc:	2b31      	cmp	r3, #49	; 0x31
 80030ce:	d103      	bne.n	80030d8 <main+0x128>
 80030d0:	4b73      	ldr	r3, [pc, #460]	; (80032a0 <main+0x2f0>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	225c      	movs	r2, #92	; 0x5c
 80030d6:	635a      	str	r2, [r3, #52]	; 0x34
		if(vVent[0]=='0' || vExt[4]=='0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89);
 80030d8:	4b80      	ldr	r3, [pc, #512]	; (80032dc <main+0x32c>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b30      	cmp	r3, #48	; 0x30
 80030de:	d003      	beq.n	80030e8 <main+0x138>
 80030e0:	4b7f      	ldr	r3, [pc, #508]	; (80032e0 <main+0x330>)
 80030e2:	791b      	ldrb	r3, [r3, #4]
 80030e4:	2b30      	cmp	r3, #48	; 0x30
 80030e6:	d103      	bne.n	80030f0 <main+0x140>
 80030e8:	4b6d      	ldr	r3, [pc, #436]	; (80032a0 <main+0x2f0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2259      	movs	r2, #89	; 0x59
 80030ee:	635a      	str	r2, [r3, #52]	; 0x34

		// PUERTA GARAJE (90)
		if(vVent[1]=='1' || vGar[1] == '1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 91); // más rápido a 30
 80030f0:	4b7a      	ldr	r3, [pc, #488]	; (80032dc <main+0x32c>)
 80030f2:	785b      	ldrb	r3, [r3, #1]
 80030f4:	2b31      	cmp	r3, #49	; 0x31
 80030f6:	d003      	beq.n	8003100 <main+0x150>
 80030f8:	4b7a      	ldr	r3, [pc, #488]	; (80032e4 <main+0x334>)
 80030fa:	785b      	ldrb	r3, [r3, #1]
 80030fc:	2b31      	cmp	r3, #49	; 0x31
 80030fe:	d103      	bne.n	8003108 <main+0x158>
 8003100:	4b67      	ldr	r3, [pc, #412]	; (80032a0 <main+0x2f0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	225b      	movs	r2, #91	; 0x5b
 8003106:	639a      	str	r2, [r3, #56]	; 0x38
		if(vVent[1]=='0' || vGar[1] == '0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 89);
 8003108:	4b74      	ldr	r3, [pc, #464]	; (80032dc <main+0x32c>)
 800310a:	785b      	ldrb	r3, [r3, #1]
 800310c:	2b30      	cmp	r3, #48	; 0x30
 800310e:	d003      	beq.n	8003118 <main+0x168>
 8003110:	4b74      	ldr	r3, [pc, #464]	; (80032e4 <main+0x334>)
 8003112:	785b      	ldrb	r3, [r3, #1]
 8003114:	2b30      	cmp	r3, #48	; 0x30
 8003116:	d103      	bne.n	8003120 <main+0x170>
 8003118:	4b61      	ldr	r3, [pc, #388]	; (80032a0 <main+0x2f0>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2259      	movs	r2, #89	; 0x59
 800311e:	639a      	str	r2, [r3, #56]	; 0x38

		// TOLDO TENDEDERO (90)
		if(vExt[0]=='1'){
 8003120:	4b6f      	ldr	r3, [pc, #444]	; (80032e0 <main+0x330>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b31      	cmp	r3, #49	; 0x31
 8003126:	d10b      	bne.n	8003140 <main+0x190>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 91);
 8003128:	4b5d      	ldr	r3, [pc, #372]	; (80032a0 <main+0x2f0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	225b      	movs	r2, #91	; 0x5b
 800312e:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8003130:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003134:	f001 fd50 	bl	8004bd8 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90);
 8003138:	4b59      	ldr	r3, [pc, #356]	; (80032a0 <main+0x2f0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	225a      	movs	r2, #90	; 0x5a
 800313e:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		if(vExt[0]=='0'){
 8003140:	4b67      	ldr	r3, [pc, #412]	; (80032e0 <main+0x330>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b30      	cmp	r3, #48	; 0x30
 8003146:	d10b      	bne.n	8003160 <main+0x1b0>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 88);
 8003148:	4b55      	ldr	r3, [pc, #340]	; (80032a0 <main+0x2f0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2258      	movs	r2, #88	; 0x58
 800314e:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8003150:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003154:	f001 fd40 	bl	8004bd8 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90);
 8003158:	4b51      	ldr	r3, [pc, #324]	; (80032a0 <main+0x2f0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	225a      	movs	r2, #90	; 0x5a
 800315e:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		vExt[0]='x';
 8003160:	4b5f      	ldr	r3, [pc, #380]	; (80032e0 <main+0x330>)
 8003162:	2278      	movs	r2, #120	; 0x78
 8003164:	701a      	strb	r2, [r3, #0]

		// VENTANA SALÓN (90)
		if(vVent[2]=='1' || vSal[5]=='1') {
 8003166:	4b5d      	ldr	r3, [pc, #372]	; (80032dc <main+0x32c>)
 8003168:	789b      	ldrb	r3, [r3, #2]
 800316a:	2b31      	cmp	r3, #49	; 0x31
 800316c:	d003      	beq.n	8003176 <main+0x1c6>
 800316e:	4b5e      	ldr	r3, [pc, #376]	; (80032e8 <main+0x338>)
 8003170:	795b      	ldrb	r3, [r3, #5]
 8003172:	2b31      	cmp	r3, #49	; 0x31
 8003174:	d10b      	bne.n	800318e <main+0x1de>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 91);
 8003176:	4b4b      	ldr	r3, [pc, #300]	; (80032a4 <main+0x2f4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	225b      	movs	r2, #91	; 0x5b
 800317c:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(3000);
 800317e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003182:	f001 fd29 	bl	8004bd8 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 90);
 8003186:	4b47      	ldr	r3, [pc, #284]	; (80032a4 <main+0x2f4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	225a      	movs	r2, #90	; 0x5a
 800318c:	641a      	str	r2, [r3, #64]	; 0x40
		}
		if(vVent[2]=='0'|| vSal[5]=='0') {
 800318e:	4b53      	ldr	r3, [pc, #332]	; (80032dc <main+0x32c>)
 8003190:	789b      	ldrb	r3, [r3, #2]
 8003192:	2b30      	cmp	r3, #48	; 0x30
 8003194:	d003      	beq.n	800319e <main+0x1ee>
 8003196:	4b54      	ldr	r3, [pc, #336]	; (80032e8 <main+0x338>)
 8003198:	795b      	ldrb	r3, [r3, #5]
 800319a:	2b30      	cmp	r3, #48	; 0x30
 800319c:	d10b      	bne.n	80031b6 <main+0x206>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 89);
 800319e:	4b41      	ldr	r3, [pc, #260]	; (80032a4 <main+0x2f4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2259      	movs	r2, #89	; 0x59
 80031a4:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(3000);
 80031a6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80031aa:	f001 fd15 	bl	8004bd8 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 90);
 80031ae:	4b3d      	ldr	r3, [pc, #244]	; (80032a4 <main+0x2f4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	225a      	movs	r2, #90	; 0x5a
 80031b4:	641a      	str	r2, [r3, #64]	; 0x40
		}
		vVent[2]='x';
 80031b6:	4b49      	ldr	r3, [pc, #292]	; (80032dc <main+0x32c>)
 80031b8:	2278      	movs	r2, #120	; 0x78
 80031ba:	709a      	strb	r2, [r3, #2]
		vSal[5]='x';
 80031bc:	4b4a      	ldr	r3, [pc, #296]	; (80032e8 <main+0x338>)
 80031be:	2278      	movs	r2, #120	; 0x78
 80031c0:	715a      	strb	r2, [r3, #5]

		// VENTANA DORMITORIO (90)
		if(vVent[3]=='1' || vDor[3]=='1') {
 80031c2:	4b46      	ldr	r3, [pc, #280]	; (80032dc <main+0x32c>)
 80031c4:	78db      	ldrb	r3, [r3, #3]
 80031c6:	2b31      	cmp	r3, #49	; 0x31
 80031c8:	d003      	beq.n	80031d2 <main+0x222>
 80031ca:	4b48      	ldr	r3, [pc, #288]	; (80032ec <main+0x33c>)
 80031cc:	78db      	ldrb	r3, [r3, #3]
 80031ce:	2b31      	cmp	r3, #49	; 0x31
 80031d0:	d10b      	bne.n	80031ea <main+0x23a>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 92);
 80031d2:	4b34      	ldr	r3, [pc, #208]	; (80032a4 <main+0x2f4>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	225c      	movs	r2, #92	; 0x5c
 80031d8:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(3000);
 80031da:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80031de:	f001 fcfb 	bl	8004bd8 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 90);
 80031e2:	4b30      	ldr	r3, [pc, #192]	; (80032a4 <main+0x2f4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	225a      	movs	r2, #90	; 0x5a
 80031e8:	639a      	str	r2, [r3, #56]	; 0x38
		}
		if(vVent[3]=='0' || vDor[3]=='0') {
 80031ea:	4b3c      	ldr	r3, [pc, #240]	; (80032dc <main+0x32c>)
 80031ec:	78db      	ldrb	r3, [r3, #3]
 80031ee:	2b30      	cmp	r3, #48	; 0x30
 80031f0:	d003      	beq.n	80031fa <main+0x24a>
 80031f2:	4b3e      	ldr	r3, [pc, #248]	; (80032ec <main+0x33c>)
 80031f4:	78db      	ldrb	r3, [r3, #3]
 80031f6:	2b30      	cmp	r3, #48	; 0x30
 80031f8:	d10b      	bne.n	8003212 <main+0x262>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 89);
 80031fa:	4b2a      	ldr	r3, [pc, #168]	; (80032a4 <main+0x2f4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2259      	movs	r2, #89	; 0x59
 8003200:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(3000);
 8003202:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003206:	f001 fce7 	bl	8004bd8 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 90);
 800320a:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <main+0x2f4>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	225a      	movs	r2, #90	; 0x5a
 8003210:	639a      	str	r2, [r3, #56]	; 0x38
		}
		vVent[3]='x';
 8003212:	4b32      	ldr	r3, [pc, #200]	; (80032dc <main+0x32c>)
 8003214:	2278      	movs	r2, #120	; 0x78
 8003216:	70da      	strb	r2, [r3, #3]
		vDor[3]='x';
 8003218:	4b34      	ldr	r3, [pc, #208]	; (80032ec <main+0x33c>)
 800321a:	2278      	movs	r2, #120	; 0x78
 800321c:	70da      	strb	r2, [r3, #3]

		// VENTANA OFICINA (90)
		if(vVent[4]=='1' || vOfi[11]=='1') {
 800321e:	4b2f      	ldr	r3, [pc, #188]	; (80032dc <main+0x32c>)
 8003220:	791b      	ldrb	r3, [r3, #4]
 8003222:	2b31      	cmp	r3, #49	; 0x31
 8003224:	d003      	beq.n	800322e <main+0x27e>
 8003226:	4b32      	ldr	r3, [pc, #200]	; (80032f0 <main+0x340>)
 8003228:	7adb      	ldrb	r3, [r3, #11]
 800322a:	2b31      	cmp	r3, #49	; 0x31
 800322c:	d10b      	bne.n	8003246 <main+0x296>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 91);
 800322e:	4b1d      	ldr	r3, [pc, #116]	; (80032a4 <main+0x2f4>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	225b      	movs	r2, #91	; 0x5b
 8003234:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8003236:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800323a:	f001 fccd 	bl	8004bd8 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 90);
 800323e:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <main+0x2f4>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	225a      	movs	r2, #90	; 0x5a
 8003244:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		if(vVent[4]=='0' || vOfi[11]=='0') {
 8003246:	4b25      	ldr	r3, [pc, #148]	; (80032dc <main+0x32c>)
 8003248:	791b      	ldrb	r3, [r3, #4]
 800324a:	2b30      	cmp	r3, #48	; 0x30
 800324c:	d003      	beq.n	8003256 <main+0x2a6>
 800324e:	4b28      	ldr	r3, [pc, #160]	; (80032f0 <main+0x340>)
 8003250:	7adb      	ldrb	r3, [r3, #11]
 8003252:	2b30      	cmp	r3, #48	; 0x30
 8003254:	d10b      	bne.n	800326e <main+0x2be>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 88);
 8003256:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <main+0x2f4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2258      	movs	r2, #88	; 0x58
 800325c:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 800325e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003262:	f001 fcb9 	bl	8004bd8 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 90);
 8003266:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <main+0x2f4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	225a      	movs	r2, #90	; 0x5a
 800326c:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		vVent[4]='x';
 800326e:	4b1b      	ldr	r3, [pc, #108]	; (80032dc <main+0x32c>)
 8003270:	2278      	movs	r2, #120	; 0x78
 8003272:	711a      	strb	r2, [r3, #4]
		vOfi[11]='x';
 8003274:	4b1e      	ldr	r3, [pc, #120]	; (80032f0 <main+0x340>)
 8003276:	2278      	movs	r2, #120	; 0x78
 8003278:	72da      	strb	r2, [r3, #11]
			vVent[0]='x'; // S_Parcela
			vExt[4]='x'; // S_Parcela
		}*/

		// FINAL DE CARRERA GARAJE
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == 0){
 800327a:	2110      	movs	r1, #16
 800327c:	4812      	ldr	r0, [pc, #72]	; (80032c8 <main+0x318>)
 800327e:	f002 fbdb 	bl	8005a38 <HAL_GPIO_ReadPin>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d157      	bne.n	8003338 <main+0x388>

			if (vVent[1]=='1' || vGar[1]=='1'){
 8003288:	4b14      	ldr	r3, [pc, #80]	; (80032dc <main+0x32c>)
 800328a:	785b      	ldrb	r3, [r3, #1]
 800328c:	2b31      	cmp	r3, #49	; 0x31
 800328e:	d031      	beq.n	80032f4 <main+0x344>
 8003290:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <main+0x334>)
 8003292:	785b      	ldrb	r3, [r3, #1]
 8003294:	2b31      	cmp	r3, #49	; 0x31
 8003296:	d135      	bne.n	8003304 <main+0x354>
 8003298:	e02c      	b.n	80032f4 <main+0x344>
 800329a:	bf00      	nop
 800329c:	20000cf0 	.word	0x20000cf0
 80032a0:	20000dc4 	.word	0x20000dc4
 80032a4:	20000bd0 	.word	0x20000bd0
 80032a8:	20000d38 	.word	0x20000d38
 80032ac:	20000aac 	.word	0x20000aac
 80032b0:	20000ca8 	.word	0x20000ca8
 80032b4:	20000c18 	.word	0x20000c18
 80032b8:	20000b38 	.word	0x20000b38
 80032bc:	20000c60 	.word	0x20000c60
 80032c0:	0800933c 	.word	0x0800933c
 80032c4:	08009348 	.word	0x08009348
 80032c8:	40021000 	.word	0x40021000
 80032cc:	200008b0 	.word	0x200008b0
 80032d0:	200008b8 	.word	0x200008b8
 80032d4:	20000a50 	.word	0x20000a50
 80032d8:	200008bc 	.word	0x200008bc
 80032dc:	2000091c 	.word	0x2000091c
 80032e0:	20000928 	.word	0x20000928
 80032e4:	2000096c 	.word	0x2000096c
 80032e8:	20000a44 	.word	0x20000a44
 80032ec:	20000910 	.word	0x20000910
 80032f0:	20000978 	.word	0x20000978
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 89); // S_Garaje
 80032f4:	4b99      	ldr	r3, [pc, #612]	; (800355c <main+0x5ac>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2259      	movs	r2, #89	; 0x59
 80032fa:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(1000);
 80032fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003300:	f001 fc6a 	bl	8004bd8 <HAL_Delay>
			}
			if (vVent[1]=='0' || vGar[1]=='0'){
 8003304:	4b96      	ldr	r3, [pc, #600]	; (8003560 <main+0x5b0>)
 8003306:	785b      	ldrb	r3, [r3, #1]
 8003308:	2b30      	cmp	r3, #48	; 0x30
 800330a:	d003      	beq.n	8003314 <main+0x364>
 800330c:	4b95      	ldr	r3, [pc, #596]	; (8003564 <main+0x5b4>)
 800330e:	785b      	ldrb	r3, [r3, #1]
 8003310:	2b30      	cmp	r3, #48	; 0x30
 8003312:	d107      	bne.n	8003324 <main+0x374>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 91); // S_Garaje
 8003314:	4b91      	ldr	r3, [pc, #580]	; (800355c <main+0x5ac>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	225b      	movs	r2, #91	; 0x5b
 800331a:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(1000);
 800331c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003320:	f001 fc5a 	bl	8004bd8 <HAL_Delay>
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 90); // S_Garaje
 8003324:	4b8d      	ldr	r3, [pc, #564]	; (800355c <main+0x5ac>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	225a      	movs	r2, #90	; 0x5a
 800332a:	639a      	str	r2, [r3, #56]	; 0x38
			vVent[1]='x'; // S_Garaje
 800332c:	4b8c      	ldr	r3, [pc, #560]	; (8003560 <main+0x5b0>)
 800332e:	2278      	movs	r2, #120	; 0x78
 8003330:	705a      	strb	r2, [r3, #1]
			vGar[1]='x'; // S_Garaje
 8003332:	4b8c      	ldr	r3, [pc, #560]	; (8003564 <main+0x5b4>)
 8003334:	2278      	movs	r2, #120	; 0x78
 8003336:	705a      	strb	r2, [r3, #1]
		}

		// VENTILADOR SALÓN
		if(vTemp[0]=='1') {
 8003338:	4b8b      	ldr	r3, [pc, #556]	; (8003568 <main+0x5b8>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b31      	cmp	r3, #49	; 0x31
 800333e:	d10e      	bne.n	800335e <main+0x3ae>
			__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 1000);
 8003340:	4b8a      	ldr	r3, [pc, #552]	; (800356c <main+0x5bc>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003348:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
 800334a:	2201      	movs	r2, #1
 800334c:	2110      	movs	r1, #16
 800334e:	4888      	ldr	r0, [pc, #544]	; (8003570 <main+0x5c0>)
 8003350:	f002 fb8a 	bl	8005a68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,GPIO_PIN_RESET);
 8003354:	2200      	movs	r2, #0
 8003356:	2120      	movs	r1, #32
 8003358:	4885      	ldr	r0, [pc, #532]	; (8003570 <main+0x5c0>)
 800335a:	f002 fb85 	bl	8005a68 <HAL_GPIO_WritePin>
		}
		if(vTemp[0]=='0') {
 800335e:	4b82      	ldr	r3, [pc, #520]	; (8003568 <main+0x5b8>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b30      	cmp	r3, #48	; 0x30
 8003364:	d10d      	bne.n	8003382 <main+0x3d2>
			__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 8003366:	4b81      	ldr	r3, [pc, #516]	; (800356c <main+0x5bc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2200      	movs	r2, #0
 800336c:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_RESET);
 800336e:	2200      	movs	r2, #0
 8003370:	2110      	movs	r1, #16
 8003372:	487f      	ldr	r0, [pc, #508]	; (8003570 <main+0x5c0>)
 8003374:	f002 fb78 	bl	8005a68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,GPIO_PIN_RESET);
 8003378:	2200      	movs	r2, #0
 800337a:	2120      	movs	r1, #32
 800337c:	487c      	ldr	r0, [pc, #496]	; (8003570 <main+0x5c0>)
 800337e:	f002 fb73 	bl	8005a68 <HAL_GPIO_WritePin>
		}

		// VALORES DE CONFIGURACIÓN

		v_enc = temp_value(vAj[0], vAj[1], vAj[2]);
 8003382:	4b7c      	ldr	r3, [pc, #496]	; (8003574 <main+0x5c4>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	4a7b      	ldr	r2, [pc, #492]	; (8003574 <main+0x5c4>)
 8003388:	7851      	ldrb	r1, [r2, #1]
 800338a:	4a7a      	ldr	r2, [pc, #488]	; (8003574 <main+0x5c4>)
 800338c:	7892      	ldrb	r2, [r2, #2]
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff f8c2 	bl	8002518 <temp_value>
 8003394:	eef0 7a40 	vmov.f32	s15, s0
 8003398:	4b77      	ldr	r3, [pc, #476]	; (8003578 <main+0x5c8>)
 800339a:	edc3 7a00 	vstr	s15, [r3]
		v_apa = temp_value(vAj[3], vAj[4], vAj[5]);
 800339e:	4b75      	ldr	r3, [pc, #468]	; (8003574 <main+0x5c4>)
 80033a0:	78db      	ldrb	r3, [r3, #3]
 80033a2:	4a74      	ldr	r2, [pc, #464]	; (8003574 <main+0x5c4>)
 80033a4:	7911      	ldrb	r1, [r2, #4]
 80033a6:	4a73      	ldr	r2, [pc, #460]	; (8003574 <main+0x5c4>)
 80033a8:	7952      	ldrb	r2, [r2, #5]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff f8b4 	bl	8002518 <temp_value>
 80033b0:	eef0 7a40 	vmov.f32	s15, s0
 80033b4:	4b71      	ldr	r3, [pc, #452]	; (800357c <main+0x5cc>)
 80033b6:	edc3 7a00 	vstr	s15, [r3]
		c_enc = temp_value(vAj[6], vAj[7], vAj[8]);
 80033ba:	4b6e      	ldr	r3, [pc, #440]	; (8003574 <main+0x5c4>)
 80033bc:	799b      	ldrb	r3, [r3, #6]
 80033be:	4a6d      	ldr	r2, [pc, #436]	; (8003574 <main+0x5c4>)
 80033c0:	79d1      	ldrb	r1, [r2, #7]
 80033c2:	4a6c      	ldr	r2, [pc, #432]	; (8003574 <main+0x5c4>)
 80033c4:	7a12      	ldrb	r2, [r2, #8]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff f8a6 	bl	8002518 <temp_value>
 80033cc:	eef0 7a40 	vmov.f32	s15, s0
 80033d0:	4b6b      	ldr	r3, [pc, #428]	; (8003580 <main+0x5d0>)
 80033d2:	edc3 7a00 	vstr	s15, [r3]
		c_apa = temp_value(vAj[9], vAj[10], vAj[11]);
 80033d6:	4b67      	ldr	r3, [pc, #412]	; (8003574 <main+0x5c4>)
 80033d8:	7a5b      	ldrb	r3, [r3, #9]
 80033da:	4a66      	ldr	r2, [pc, #408]	; (8003574 <main+0x5c4>)
 80033dc:	7a91      	ldrb	r1, [r2, #10]
 80033de:	4a65      	ldr	r2, [pc, #404]	; (8003574 <main+0x5c4>)
 80033e0:	7ad2      	ldrb	r2, [r2, #11]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff f898 	bl	8002518 <temp_value>
 80033e8:	eef0 7a40 	vmov.f32	s15, s0
 80033ec:	4b65      	ldr	r3, [pc, #404]	; (8003584 <main+0x5d4>)
 80033ee:	edc3 7a00 	vstr	s15, [r3]

		rh_min = rh_value(vAj[12], vAj[13]);
 80033f2:	4b60      	ldr	r3, [pc, #384]	; (8003574 <main+0x5c4>)
 80033f4:	7b1b      	ldrb	r3, [r3, #12]
 80033f6:	4a5f      	ldr	r2, [pc, #380]	; (8003574 <main+0x5c4>)
 80033f8:	7b52      	ldrb	r2, [r2, #13]
 80033fa:	4611      	mov	r1, r2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff f804 	bl	800240a <rh_value>
 8003402:	4603      	mov	r3, r0
 8003404:	4a60      	ldr	r2, [pc, #384]	; (8003588 <main+0x5d8>)
 8003406:	6013      	str	r3, [r2, #0]
		rh_max = rh_value(vAj[14], vAj[15]);
 8003408:	4b5a      	ldr	r3, [pc, #360]	; (8003574 <main+0x5c4>)
 800340a:	7b9b      	ldrb	r3, [r3, #14]
 800340c:	4a59      	ldr	r2, [pc, #356]	; (8003574 <main+0x5c4>)
 800340e:	7bd2      	ldrb	r2, [r2, #15]
 8003410:	4611      	mov	r1, r2
 8003412:	4618      	mov	r0, r3
 8003414:	f7fe fff9 	bl	800240a <rh_value>
 8003418:	4603      	mov	r3, r0
 800341a:	4a5c      	ldr	r2, [pc, #368]	; (800358c <main+0x5dc>)
 800341c:	6013      	str	r3, [r2, #0]

		/*----------- Lectura Sensores -----------*/

		// LDR
		if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 800341e:	f04f 31ff 	mov.w	r1, #4294967295
 8003422:	485b      	ldr	r0, [pc, #364]	; (8003590 <main+0x5e0>)
 8003424:	f001 fd12 	bl	8004e4c <HAL_ADC_PollForConversion>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <main+0x48c>
			LDR_valor = HAL_ADC_GetValue(&hadc1);
 800342e:	4858      	ldr	r0, [pc, #352]	; (8003590 <main+0x5e0>)
 8003430:	f001 fd97 	bl	8004f62 <HAL_ADC_GetValue>
 8003434:	4603      	mov	r3, r0
 8003436:	b29a      	uxth	r2, r3
 8003438:	4b56      	ldr	r3, [pc, #344]	; (8003594 <main+0x5e4>)
 800343a:	801a      	strh	r2, [r3, #0]

		ldr(LDR_valor);
 800343c:	4b55      	ldr	r3, [pc, #340]	; (8003594 <main+0x5e4>)
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f7fe fee5 	bl	8002210 <ldr>

		// Lluvia
		if(HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY) == HAL_OK)
 8003446:	f04f 31ff 	mov.w	r1, #4294967295
 800344a:	4853      	ldr	r0, [pc, #332]	; (8003598 <main+0x5e8>)
 800344c:	f001 fcfe 	bl	8004e4c <HAL_ADC_PollForConversion>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <main+0x4b4>
			Lluvia_lectura = HAL_ADC_GetValue(&hadc3);
 8003456:	4850      	ldr	r0, [pc, #320]	; (8003598 <main+0x5e8>)
 8003458:	f001 fd83 	bl	8004f62 <HAL_ADC_GetValue>
 800345c:	4603      	mov	r3, r0
 800345e:	b29a      	uxth	r2, r3
 8003460:	4b4e      	ldr	r3, [pc, #312]	; (800359c <main+0x5ec>)
 8003462:	801a      	strh	r2, [r3, #0]

		Lluvia_real = 100 - ((100*Lluvia_lectura)/255);
 8003464:	4b4d      	ldr	r3, [pc, #308]	; (800359c <main+0x5ec>)
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	461a      	mov	r2, r3
 800346a:	2364      	movs	r3, #100	; 0x64
 800346c:	fb03 f302 	mul.w	r3, r3, r2
 8003470:	4a4b      	ldr	r2, [pc, #300]	; (80035a0 <main+0x5f0>)
 8003472:	fb82 1203 	smull	r1, r2, r2, r3
 8003476:	441a      	add	r2, r3
 8003478:	11d2      	asrs	r2, r2, #7
 800347a:	17db      	asrs	r3, r3, #31
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	b29b      	uxth	r3, r3
 8003480:	3364      	adds	r3, #100	; 0x64
 8003482:	b29a      	uxth	r2, r3
 8003484:	4b47      	ldr	r3, [pc, #284]	; (80035a4 <main+0x5f4>)
 8003486:	801a      	strh	r2, [r3, #0]

		// HW-390
		if(HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK)
 8003488:	f04f 31ff 	mov.w	r1, #4294967295
 800348c:	4846      	ldr	r0, [pc, #280]	; (80035a8 <main+0x5f8>)
 800348e:	f001 fcdd 	bl	8004e4c <HAL_ADC_PollForConversion>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d106      	bne.n	80034a6 <main+0x4f6>
			Higro_lectura = HAL_ADC_GetValue(&hadc2);
 8003498:	4843      	ldr	r0, [pc, #268]	; (80035a8 <main+0x5f8>)
 800349a:	f001 fd62 	bl	8004f62 <HAL_ADC_GetValue>
 800349e:	4603      	mov	r3, r0
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	4b42      	ldr	r3, [pc, #264]	; (80035ac <main+0x5fc>)
 80034a4:	801a      	strh	r2, [r3, #0]

		Higro_real = 100 - ((100*Higro_lectura)/255);
 80034a6:	4b41      	ldr	r3, [pc, #260]	; (80035ac <main+0x5fc>)
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	2364      	movs	r3, #100	; 0x64
 80034ae:	fb03 f302 	mul.w	r3, r3, r2
 80034b2:	4a3b      	ldr	r2, [pc, #236]	; (80035a0 <main+0x5f0>)
 80034b4:	fb82 1203 	smull	r1, r2, r2, r3
 80034b8:	441a      	add	r2, r3
 80034ba:	11d2      	asrs	r2, r2, #7
 80034bc:	17db      	asrs	r3, r3, #31
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3364      	adds	r3, #100	; 0x64
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	4b3a      	ldr	r3, [pc, #232]	; (80035b0 <main+0x600>)
 80034c8:	801a      	strh	r2, [r3, #0]
			}
			else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET); // Riego
		}*/

		//DHT22
		if(actSensor == 1){
 80034ca:	4b3a      	ldr	r3, [pc, #232]	; (80035b4 <main+0x604>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d10a      	bne.n	80034e8 <main+0x538>
			/*DHT11_getData(&DHT11);
		  	TempAireExt = DHT11.Temperature;
		  	HumeAireExt = DHT11.Humidity;*/

		  	// DHT22 Interior
		  	DHT22_getData(&DHT22);
 80034d2:	4839      	ldr	r0, [pc, #228]	; (80035b8 <main+0x608>)
 80034d4:	f7fd fd4c 	bl	8000f70 <DHT22_getData>
		  	TempAireInt = DHT22.Temperature;
 80034d8:	4b37      	ldr	r3, [pc, #220]	; (80035b8 <main+0x608>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a37      	ldr	r2, [pc, #220]	; (80035bc <main+0x60c>)
 80034de:	6013      	str	r3, [r2, #0]
		  	HumeAireInt = DHT22.Humidity;
 80034e0:	4b35      	ldr	r3, [pc, #212]	; (80035b8 <main+0x608>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	4a36      	ldr	r2, [pc, #216]	; (80035c0 <main+0x610>)
 80034e6:	6013      	str	r3, [r2, #0]
		}

		if(vTemp[4] == '1'){
 80034e8:	4b1f      	ldr	r3, [pc, #124]	; (8003568 <main+0x5b8>)
 80034ea:	791b      	ldrb	r3, [r3, #4]
 80034ec:	2b31      	cmp	r3, #49	; 0x31
 80034ee:	f47f adbf 	bne.w	8003070 <main+0xc0>
			// Si está apagado y no llega al mínimo o está encendido y no llega al máximo
			if (((!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) && (TempAireInt<c_enc)) || ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) && (TempAireInt<c_apa))){
 80034f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034f6:	4833      	ldr	r0, [pc, #204]	; (80035c4 <main+0x614>)
 80034f8:	f002 fa9e 	bl	8005a38 <HAL_GPIO_ReadPin>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10a      	bne.n	8003518 <main+0x568>
 8003502:	4b2e      	ldr	r3, [pc, #184]	; (80035bc <main+0x60c>)
 8003504:	ed93 7a00 	vldr	s14, [r3]
 8003508:	4b1d      	ldr	r3, [pc, #116]	; (8003580 <main+0x5d0>)
 800350a:	edd3 7a00 	vldr	s15, [r3]
 800350e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003516:	d412      	bmi.n	800353e <main+0x58e>
 8003518:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800351c:	4829      	ldr	r0, [pc, #164]	; (80035c4 <main+0x614>)
 800351e:	f002 fa8b 	bl	8005a38 <HAL_GPIO_ReadPin>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d011      	beq.n	800354c <main+0x59c>
 8003528:	4b24      	ldr	r3, [pc, #144]	; (80035bc <main+0x60c>)
 800352a:	ed93 7a00 	vldr	s14, [r3]
 800352e:	4b15      	ldr	r3, [pc, #84]	; (8003584 <main+0x5d4>)
 8003530:	edd3 7a00 	vldr	s15, [r3]
 8003534:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800353c:	d506      	bpl.n	800354c <main+0x59c>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET); // Calefacción
 800353e:	2201      	movs	r2, #1
 8003540:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003544:	481f      	ldr	r0, [pc, #124]	; (80035c4 <main+0x614>)
 8003546:	f002 fa8f 	bl	8005a68 <HAL_GPIO_WritePin>
 800354a:	e005      	b.n	8003558 <main+0x5a8>
			}
			else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET); // Calefacción
 800354c:	2200      	movs	r2, #0
 800354e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003552:	481c      	ldr	r0, [pc, #112]	; (80035c4 <main+0x614>)
 8003554:	f002 fa88 	bl	8005a68 <HAL_GPIO_WritePin>
	  	ESP_messageHandler();
 8003558:	e58a      	b.n	8003070 <main+0xc0>
 800355a:	bf00      	nop
 800355c:	20000dc4 	.word	0x20000dc4
 8003560:	2000091c 	.word	0x2000091c
 8003564:	2000096c 	.word	0x2000096c
 8003568:	20000970 	.word	0x20000970
 800356c:	20000d38 	.word	0x20000d38
 8003570:	40020800 	.word	0x40020800
 8003574:	200009c4 	.word	0x200009c4
 8003578:	200008c0 	.word	0x200008c0
 800357c:	200008c4 	.word	0x200008c4
 8003580:	200008c8 	.word	0x200008c8
 8003584:	200008cc 	.word	0x200008cc
 8003588:	200008d0 	.word	0x200008d0
 800358c:	200008d4 	.word	0x200008d4
 8003590:	20000c18 	.word	0x20000c18
 8003594:	200008d8 	.word	0x200008d8
 8003598:	20000c60 	.word	0x20000c60
 800359c:	200008de 	.word	0x200008de
 80035a0:	80808081 	.word	0x80808081
 80035a4:	200008e0 	.word	0x200008e0
 80035a8:	20000b38 	.word	0x20000b38
 80035ac:	200008da 	.word	0x200008da
 80035b0:	200008dc 	.word	0x200008dc
 80035b4:	20000a4c 	.word	0x20000a4c
 80035b8:	20000e50 	.word	0x20000e50
 80035bc:	200008e4 	.word	0x200008e4
 80035c0:	200008e8 	.word	0x200008e8
 80035c4:	40020400 	.word	0x40020400

080035c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b094      	sub	sp, #80	; 0x50
 80035cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035ce:	f107 0320 	add.w	r3, r7, #32
 80035d2:	2230      	movs	r2, #48	; 0x30
 80035d4:	2100      	movs	r1, #0
 80035d6:	4618      	mov	r0, r3
 80035d8:	f004 fe62 	bl	80082a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035dc:	f107 030c 	add.w	r3, r7, #12
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	609a      	str	r2, [r3, #8]
 80035e8:	60da      	str	r2, [r3, #12]
 80035ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ec:	2300      	movs	r3, #0
 80035ee:	60bb      	str	r3, [r7, #8]
 80035f0:	4b28      	ldr	r3, [pc, #160]	; (8003694 <SystemClock_Config+0xcc>)
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	4a27      	ldr	r2, [pc, #156]	; (8003694 <SystemClock_Config+0xcc>)
 80035f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fa:	6413      	str	r3, [r2, #64]	; 0x40
 80035fc:	4b25      	ldr	r3, [pc, #148]	; (8003694 <SystemClock_Config+0xcc>)
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003608:	2300      	movs	r3, #0
 800360a:	607b      	str	r3, [r7, #4]
 800360c:	4b22      	ldr	r3, [pc, #136]	; (8003698 <SystemClock_Config+0xd0>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a21      	ldr	r2, [pc, #132]	; (8003698 <SystemClock_Config+0xd0>)
 8003612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	4b1f      	ldr	r3, [pc, #124]	; (8003698 <SystemClock_Config+0xd0>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003620:	607b      	str	r3, [r7, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003624:	2301      	movs	r3, #1
 8003626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800362e:	2302      	movs	r3, #2
 8003630:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003632:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003638:	2304      	movs	r3, #4
 800363a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800363c:	2332      	movs	r3, #50	; 0x32
 800363e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003640:	2302      	movs	r3, #2
 8003642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003644:	2307      	movs	r3, #7
 8003646:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003648:	f107 0320 	add.w	r3, r7, #32
 800364c:	4618      	mov	r0, r3
 800364e:	f002 fa3d 	bl	8005acc <HAL_RCC_OscConfig>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003658:	f000 fe10 	bl	800427c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800365c:	230f      	movs	r3, #15
 800365e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003660:	2302      	movs	r3, #2
 8003662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800366c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800366e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003672:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003674:	f107 030c 	add.w	r3, r7, #12
 8003678:	2101      	movs	r1, #1
 800367a:	4618      	mov	r0, r3
 800367c:	f002 fc9e 	bl	8005fbc <HAL_RCC_ClockConfig>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003686:	f000 fdf9 	bl	800427c <Error_Handler>
  }
}
 800368a:	bf00      	nop
 800368c:	3750      	adds	r7, #80	; 0x50
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40023800 	.word	0x40023800
 8003698:	40007000 	.word	0x40007000

0800369c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80036a2:	463b      	mov	r3, r7
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	609a      	str	r2, [r3, #8]
 80036ac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80036ae:	4b21      	ldr	r3, [pc, #132]	; (8003734 <MX_ADC1_Init+0x98>)
 80036b0:	4a21      	ldr	r2, [pc, #132]	; (8003738 <MX_ADC1_Init+0x9c>)
 80036b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80036b4:	4b1f      	ldr	r3, [pc, #124]	; (8003734 <MX_ADC1_Init+0x98>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80036ba:	4b1e      	ldr	r3, [pc, #120]	; (8003734 <MX_ADC1_Init+0x98>)
 80036bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80036c2:	4b1c      	ldr	r3, [pc, #112]	; (8003734 <MX_ADC1_Init+0x98>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80036c8:	4b1a      	ldr	r3, [pc, #104]	; (8003734 <MX_ADC1_Init+0x98>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80036ce:	4b19      	ldr	r3, [pc, #100]	; (8003734 <MX_ADC1_Init+0x98>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036d6:	4b17      	ldr	r3, [pc, #92]	; (8003734 <MX_ADC1_Init+0x98>)
 80036d8:	2200      	movs	r2, #0
 80036da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036dc:	4b15      	ldr	r3, [pc, #84]	; (8003734 <MX_ADC1_Init+0x98>)
 80036de:	4a17      	ldr	r2, [pc, #92]	; (800373c <MX_ADC1_Init+0xa0>)
 80036e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036e2:	4b14      	ldr	r3, [pc, #80]	; (8003734 <MX_ADC1_Init+0x98>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80036e8:	4b12      	ldr	r3, [pc, #72]	; (8003734 <MX_ADC1_Init+0x98>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80036ee:	4b11      	ldr	r3, [pc, #68]	; (8003734 <MX_ADC1_Init+0x98>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80036f6:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <MX_ADC1_Init+0x98>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80036fc:	480d      	ldr	r0, [pc, #52]	; (8003734 <MX_ADC1_Init+0x98>)
 80036fe:	f001 fa8f 	bl	8004c20 <HAL_ADC_Init>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003708:	f000 fdb8 	bl	800427c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800370c:	2304      	movs	r3, #4
 800370e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003710:	2301      	movs	r3, #1
 8003712:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003714:	2307      	movs	r3, #7
 8003716:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003718:	463b      	mov	r3, r7
 800371a:	4619      	mov	r1, r3
 800371c:	4805      	ldr	r0, [pc, #20]	; (8003734 <MX_ADC1_Init+0x98>)
 800371e:	f001 fc2d 	bl	8004f7c <HAL_ADC_ConfigChannel>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003728:	f000 fda8 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800372c:	bf00      	nop
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	20000c18 	.word	0x20000c18
 8003738:	40012000 	.word	0x40012000
 800373c:	0f000001 	.word	0x0f000001

08003740 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003746:	463b      	mov	r3, r7
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003752:	4b21      	ldr	r3, [pc, #132]	; (80037d8 <MX_ADC2_Init+0x98>)
 8003754:	4a21      	ldr	r2, [pc, #132]	; (80037dc <MX_ADC2_Init+0x9c>)
 8003756:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003758:	4b1f      	ldr	r3, [pc, #124]	; (80037d8 <MX_ADC2_Init+0x98>)
 800375a:	2200      	movs	r2, #0
 800375c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 800375e:	4b1e      	ldr	r3, [pc, #120]	; (80037d8 <MX_ADC2_Init+0x98>)
 8003760:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003764:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8003766:	4b1c      	ldr	r3, [pc, #112]	; (80037d8 <MX_ADC2_Init+0x98>)
 8003768:	2200      	movs	r2, #0
 800376a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800376c:	4b1a      	ldr	r3, [pc, #104]	; (80037d8 <MX_ADC2_Init+0x98>)
 800376e:	2201      	movs	r2, #1
 8003770:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003772:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <MX_ADC2_Init+0x98>)
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800377a:	4b17      	ldr	r3, [pc, #92]	; (80037d8 <MX_ADC2_Init+0x98>)
 800377c:	2200      	movs	r2, #0
 800377e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003780:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <MX_ADC2_Init+0x98>)
 8003782:	4a17      	ldr	r2, [pc, #92]	; (80037e0 <MX_ADC2_Init+0xa0>)
 8003784:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003786:	4b14      	ldr	r3, [pc, #80]	; (80037d8 <MX_ADC2_Init+0x98>)
 8003788:	2200      	movs	r2, #0
 800378a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800378c:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <MX_ADC2_Init+0x98>)
 800378e:	2201      	movs	r2, #1
 8003790:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003792:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <MX_ADC2_Init+0x98>)
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800379a:	4b0f      	ldr	r3, [pc, #60]	; (80037d8 <MX_ADC2_Init+0x98>)
 800379c:	2200      	movs	r2, #0
 800379e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80037a0:	480d      	ldr	r0, [pc, #52]	; (80037d8 <MX_ADC2_Init+0x98>)
 80037a2:	f001 fa3d 	bl	8004c20 <HAL_ADC_Init>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80037ac:	f000 fd66 	bl	800427c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80037b0:	2308      	movs	r3, #8
 80037b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80037b4:	2301      	movs	r3, #1
 80037b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80037b8:	2307      	movs	r3, #7
 80037ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80037bc:	463b      	mov	r3, r7
 80037be:	4619      	mov	r1, r3
 80037c0:	4805      	ldr	r0, [pc, #20]	; (80037d8 <MX_ADC2_Init+0x98>)
 80037c2:	f001 fbdb 	bl	8004f7c <HAL_ADC_ConfigChannel>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80037cc:	f000 fd56 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80037d0:	bf00      	nop
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20000b38 	.word	0x20000b38
 80037dc:	40012100 	.word	0x40012100
 80037e0:	0f000001 	.word	0x0f000001

080037e4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80037ea:	463b      	mov	r3, r7
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	609a      	str	r2, [r3, #8]
 80037f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80037f6:	4b21      	ldr	r3, [pc, #132]	; (800387c <MX_ADC3_Init+0x98>)
 80037f8:	4a21      	ldr	r2, [pc, #132]	; (8003880 <MX_ADC3_Init+0x9c>)
 80037fa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80037fc:	4b1f      	ldr	r3, [pc, #124]	; (800387c <MX_ADC3_Init+0x98>)
 80037fe:	2200      	movs	r2, #0
 8003800:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 8003802:	4b1e      	ldr	r3, [pc, #120]	; (800387c <MX_ADC3_Init+0x98>)
 8003804:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003808:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800380a:	4b1c      	ldr	r3, [pc, #112]	; (800387c <MX_ADC3_Init+0x98>)
 800380c:	2200      	movs	r2, #0
 800380e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8003810:	4b1a      	ldr	r3, [pc, #104]	; (800387c <MX_ADC3_Init+0x98>)
 8003812:	2201      	movs	r2, #1
 8003814:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003816:	4b19      	ldr	r3, [pc, #100]	; (800387c <MX_ADC3_Init+0x98>)
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800381e:	4b17      	ldr	r3, [pc, #92]	; (800387c <MX_ADC3_Init+0x98>)
 8003820:	2200      	movs	r2, #0
 8003822:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003824:	4b15      	ldr	r3, [pc, #84]	; (800387c <MX_ADC3_Init+0x98>)
 8003826:	4a17      	ldr	r2, [pc, #92]	; (8003884 <MX_ADC3_Init+0xa0>)
 8003828:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800382a:	4b14      	ldr	r3, [pc, #80]	; (800387c <MX_ADC3_Init+0x98>)
 800382c:	2200      	movs	r2, #0
 800382e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8003830:	4b12      	ldr	r3, [pc, #72]	; (800387c <MX_ADC3_Init+0x98>)
 8003832:	2201      	movs	r2, #1
 8003834:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8003836:	4b11      	ldr	r3, [pc, #68]	; (800387c <MX_ADC3_Init+0x98>)
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800383e:	4b0f      	ldr	r3, [pc, #60]	; (800387c <MX_ADC3_Init+0x98>)
 8003840:	2200      	movs	r2, #0
 8003842:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003844:	480d      	ldr	r0, [pc, #52]	; (800387c <MX_ADC3_Init+0x98>)
 8003846:	f001 f9eb 	bl	8004c20 <HAL_ADC_Init>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8003850:	f000 fd14 	bl	800427c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003854:	230b      	movs	r3, #11
 8003856:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003858:	2301      	movs	r3, #1
 800385a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800385c:	2307      	movs	r3, #7
 800385e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003860:	463b      	mov	r3, r7
 8003862:	4619      	mov	r1, r3
 8003864:	4805      	ldr	r0, [pc, #20]	; (800387c <MX_ADC3_Init+0x98>)
 8003866:	f001 fb89 	bl	8004f7c <HAL_ADC_ConfigChannel>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8003870:	f000 fd04 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8003874:	bf00      	nop
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	20000c60 	.word	0x20000c60
 8003880:	40012200 	.word	0x40012200
 8003884:	0f000001 	.word	0x0f000001

08003888 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b096      	sub	sp, #88	; 0x58
 800388c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800388e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	605a      	str	r2, [r3, #4]
 8003898:	609a      	str	r2, [r3, #8]
 800389a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800389c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	609a      	str	r2, [r3, #8]
 80038b2:	60da      	str	r2, [r3, #12]
 80038b4:	611a      	str	r2, [r3, #16]
 80038b6:	615a      	str	r2, [r3, #20]
 80038b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80038ba:	1d3b      	adds	r3, r7, #4
 80038bc:	2220      	movs	r2, #32
 80038be:	2100      	movs	r1, #0
 80038c0:	4618      	mov	r0, r3
 80038c2:	f004 fced 	bl	80082a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80038c6:	4b4a      	ldr	r3, [pc, #296]	; (80039f0 <MX_TIM1_Init+0x168>)
 80038c8:	4a4a      	ldr	r2, [pc, #296]	; (80039f4 <MX_TIM1_Init+0x16c>)
 80038ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 80038cc:	4b48      	ldr	r3, [pc, #288]	; (80039f0 <MX_TIM1_Init+0x168>)
 80038ce:	225f      	movs	r2, #95	; 0x5f
 80038d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038d2:	4b47      	ldr	r3, [pc, #284]	; (80039f0 <MX_TIM1_Init+0x168>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 80038d8:	4b45      	ldr	r3, [pc, #276]	; (80039f0 <MX_TIM1_Init+0x168>)
 80038da:	22fe      	movs	r2, #254	; 0xfe
 80038dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038de:	4b44      	ldr	r3, [pc, #272]	; (80039f0 <MX_TIM1_Init+0x168>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80038e4:	4b42      	ldr	r3, [pc, #264]	; (80039f0 <MX_TIM1_Init+0x168>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038ea:	4b41      	ldr	r3, [pc, #260]	; (80039f0 <MX_TIM1_Init+0x168>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80038f0:	483f      	ldr	r0, [pc, #252]	; (80039f0 <MX_TIM1_Init+0x168>)
 80038f2:	f002 fd5f 	bl	80063b4 <HAL_TIM_Base_Init>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80038fc:	f000 fcbe 	bl	800427c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003904:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003906:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800390a:	4619      	mov	r1, r3
 800390c:	4838      	ldr	r0, [pc, #224]	; (80039f0 <MX_TIM1_Init+0x168>)
 800390e:	f002 ffed 	bl	80068ec <HAL_TIM_ConfigClockSource>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003918:	f000 fcb0 	bl	800427c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800391c:	4834      	ldr	r0, [pc, #208]	; (80039f0 <MX_TIM1_Init+0x168>)
 800391e:	f002 fe01 	bl	8006524 <HAL_TIM_PWM_Init>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003928:	f000 fca8 	bl	800427c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800392c:	2300      	movs	r3, #0
 800392e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003930:	2300      	movs	r3, #0
 8003932:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003934:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003938:	4619      	mov	r1, r3
 800393a:	482d      	ldr	r0, [pc, #180]	; (80039f0 <MX_TIM1_Init+0x168>)
 800393c:	f003 fbae 	bl	800709c <HAL_TIMEx_MasterConfigSynchronization>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8003946:	f000 fc99 	bl	800427c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800394a:	2360      	movs	r3, #96	; 0x60
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003952:	2300      	movs	r3, #0
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003956:	2300      	movs	r3, #0
 8003958:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800395a:	2300      	movs	r3, #0
 800395c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800395e:	2300      	movs	r3, #0
 8003960:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003962:	2300      	movs	r3, #0
 8003964:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800396a:	2200      	movs	r2, #0
 800396c:	4619      	mov	r1, r3
 800396e:	4820      	ldr	r0, [pc, #128]	; (80039f0 <MX_TIM1_Init+0x168>)
 8003970:	f002 fefa 	bl	8006768 <HAL_TIM_PWM_ConfigChannel>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800397a:	f000 fc7f 	bl	800427c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800397e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003982:	2204      	movs	r2, #4
 8003984:	4619      	mov	r1, r3
 8003986:	481a      	ldr	r0, [pc, #104]	; (80039f0 <MX_TIM1_Init+0x168>)
 8003988:	f002 feee 	bl	8006768 <HAL_TIM_PWM_ConfigChannel>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8003992:	f000 fc73 	bl	800427c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800399a:	2208      	movs	r2, #8
 800399c:	4619      	mov	r1, r3
 800399e:	4814      	ldr	r0, [pc, #80]	; (80039f0 <MX_TIM1_Init+0x168>)
 80039a0:	f002 fee2 	bl	8006768 <HAL_TIM_PWM_ConfigChannel>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80039aa:	f000 fc67 	bl	800427c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80039ae:	2300      	movs	r3, #0
 80039b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80039ba:	2300      	movs	r3, #0
 80039bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80039c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80039c8:	2300      	movs	r3, #0
 80039ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80039cc:	1d3b      	adds	r3, r7, #4
 80039ce:	4619      	mov	r1, r3
 80039d0:	4807      	ldr	r0, [pc, #28]	; (80039f0 <MX_TIM1_Init+0x168>)
 80039d2:	f003 fbdf 	bl	8007194 <HAL_TIMEx_ConfigBreakDeadTime>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80039dc:	f000 fc4e 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80039e0:	4803      	ldr	r0, [pc, #12]	; (80039f0 <MX_TIM1_Init+0x168>)
 80039e2:	f000 fddb 	bl	800459c <HAL_TIM_MspPostInit>

}
 80039e6:	bf00      	nop
 80039e8:	3758      	adds	r7, #88	; 0x58
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000cf0 	.word	0x20000cf0
 80039f4:	40010000 	.word	0x40010000

080039f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08e      	sub	sp, #56	; 0x38
 80039fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	605a      	str	r2, [r3, #4]
 8003a08:	609a      	str	r2, [r3, #8]
 8003a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a0c:	f107 0320 	add.w	r3, r7, #32
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a16:	1d3b      	adds	r3, r7, #4
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	605a      	str	r2, [r3, #4]
 8003a1e:	609a      	str	r2, [r3, #8]
 8003a20:	60da      	str	r2, [r3, #12]
 8003a22:	611a      	str	r2, [r3, #16]
 8003a24:	615a      	str	r2, [r3, #20]
 8003a26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a28:	4b38      	ldr	r3, [pc, #224]	; (8003b0c <MX_TIM2_Init+0x114>)
 8003a2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 500-1;
 8003a30:	4b36      	ldr	r3, [pc, #216]	; (8003b0c <MX_TIM2_Init+0x114>)
 8003a32:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003a36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a38:	4b34      	ldr	r3, [pc, #208]	; (8003b0c <MX_TIM2_Init+0x114>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8003a3e:	4b33      	ldr	r3, [pc, #204]	; (8003b0c <MX_TIM2_Init+0x114>)
 8003a40:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003a44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a46:	4b31      	ldr	r3, [pc, #196]	; (8003b0c <MX_TIM2_Init+0x114>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a4c:	4b2f      	ldr	r3, [pc, #188]	; (8003b0c <MX_TIM2_Init+0x114>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a52:	482e      	ldr	r0, [pc, #184]	; (8003b0c <MX_TIM2_Init+0x114>)
 8003a54:	f002 fcae 	bl	80063b4 <HAL_TIM_Base_Init>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003a5e:	f000 fc0d 	bl	800427c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4827      	ldr	r0, [pc, #156]	; (8003b0c <MX_TIM2_Init+0x114>)
 8003a70:	f002 ff3c 	bl	80068ec <HAL_TIM_ConfigClockSource>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003a7a:	f000 fbff 	bl	800427c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003a7e:	4823      	ldr	r0, [pc, #140]	; (8003b0c <MX_TIM2_Init+0x114>)
 8003a80:	f002 fd50 	bl	8006524 <HAL_TIM_PWM_Init>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003a8a:	f000 fbf7 	bl	800427c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a92:	2300      	movs	r3, #0
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a96:	f107 0320 	add.w	r3, r7, #32
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	481b      	ldr	r0, [pc, #108]	; (8003b0c <MX_TIM2_Init+0x114>)
 8003a9e:	f003 fafd 	bl	800709c <HAL_TIMEx_MasterConfigSynchronization>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003aa8:	f000 fbe8 	bl	800427c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003aac:	2360      	movs	r3, #96	; 0x60
 8003aae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003abc:	1d3b      	adds	r3, r7, #4
 8003abe:	2200      	movs	r2, #0
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4812      	ldr	r0, [pc, #72]	; (8003b0c <MX_TIM2_Init+0x114>)
 8003ac4:	f002 fe50 	bl	8006768 <HAL_TIM_PWM_ConfigChannel>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003ace:	f000 fbd5 	bl	800427c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ad2:	1d3b      	adds	r3, r7, #4
 8003ad4:	2204      	movs	r2, #4
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	480c      	ldr	r0, [pc, #48]	; (8003b0c <MX_TIM2_Init+0x114>)
 8003ada:	f002 fe45 	bl	8006768 <HAL_TIM_PWM_ConfigChannel>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8003ae4:	f000 fbca 	bl	800427c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ae8:	1d3b      	adds	r3, r7, #4
 8003aea:	2208      	movs	r2, #8
 8003aec:	4619      	mov	r1, r3
 8003aee:	4807      	ldr	r0, [pc, #28]	; (8003b0c <MX_TIM2_Init+0x114>)
 8003af0:	f002 fe3a 	bl	8006768 <HAL_TIM_PWM_ConfigChannel>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8003afa:	f000 fbbf 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003afe:	4803      	ldr	r0, [pc, #12]	; (8003b0c <MX_TIM2_Init+0x114>)
 8003b00:	f000 fd4c 	bl	800459c <HAL_TIM_MspPostInit>

}
 8003b04:	bf00      	nop
 8003b06:	3738      	adds	r7, #56	; 0x38
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	20000dc4 	.word	0x20000dc4

08003b10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08e      	sub	sp, #56	; 0x38
 8003b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	605a      	str	r2, [r3, #4]
 8003b20:	609a      	str	r2, [r3, #8]
 8003b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b24:	f107 0320 	add.w	r3, r7, #32
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b2e:	1d3b      	adds	r3, r7, #4
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	605a      	str	r2, [r3, #4]
 8003b36:	609a      	str	r2, [r3, #8]
 8003b38:	60da      	str	r2, [r3, #12]
 8003b3a:	611a      	str	r2, [r3, #16]
 8003b3c:	615a      	str	r2, [r3, #20]
 8003b3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003b40:	4b38      	ldr	r3, [pc, #224]	; (8003c24 <MX_TIM3_Init+0x114>)
 8003b42:	4a39      	ldr	r2, [pc, #228]	; (8003c28 <MX_TIM3_Init+0x118>)
 8003b44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 8003b46:	4b37      	ldr	r3, [pc, #220]	; (8003c24 <MX_TIM3_Init+0x114>)
 8003b48:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003b4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b4e:	4b35      	ldr	r3, [pc, #212]	; (8003c24 <MX_TIM3_Init+0x114>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8003b54:	4b33      	ldr	r3, [pc, #204]	; (8003c24 <MX_TIM3_Init+0x114>)
 8003b56:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003b5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b5c:	4b31      	ldr	r3, [pc, #196]	; (8003c24 <MX_TIM3_Init+0x114>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b62:	4b30      	ldr	r3, [pc, #192]	; (8003c24 <MX_TIM3_Init+0x114>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003b68:	482e      	ldr	r0, [pc, #184]	; (8003c24 <MX_TIM3_Init+0x114>)
 8003b6a:	f002 fc23 	bl	80063b4 <HAL_TIM_Base_Init>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003b74:	f000 fb82 	bl	800427c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003b7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b82:	4619      	mov	r1, r3
 8003b84:	4827      	ldr	r0, [pc, #156]	; (8003c24 <MX_TIM3_Init+0x114>)
 8003b86:	f002 feb1 	bl	80068ec <HAL_TIM_ConfigClockSource>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003b90:	f000 fb74 	bl	800427c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003b94:	4823      	ldr	r0, [pc, #140]	; (8003c24 <MX_TIM3_Init+0x114>)
 8003b96:	f002 fcc5 	bl	8006524 <HAL_TIM_PWM_Init>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003ba0:	f000 fb6c 	bl	800427c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003bac:	f107 0320 	add.w	r3, r7, #32
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	481c      	ldr	r0, [pc, #112]	; (8003c24 <MX_TIM3_Init+0x114>)
 8003bb4:	f003 fa72 	bl	800709c <HAL_TIMEx_MasterConfigSynchronization>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003bbe:	f000 fb5d 	bl	800427c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bc2:	2360      	movs	r3, #96	; 0x60
 8003bc4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003bd2:	1d3b      	adds	r3, r7, #4
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4812      	ldr	r0, [pc, #72]	; (8003c24 <MX_TIM3_Init+0x114>)
 8003bda:	f002 fdc5 	bl	8006768 <HAL_TIM_PWM_ConfigChannel>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003be4:	f000 fb4a 	bl	800427c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003be8:	1d3b      	adds	r3, r7, #4
 8003bea:	2208      	movs	r2, #8
 8003bec:	4619      	mov	r1, r3
 8003bee:	480d      	ldr	r0, [pc, #52]	; (8003c24 <MX_TIM3_Init+0x114>)
 8003bf0:	f002 fdba 	bl	8006768 <HAL_TIM_PWM_ConfigChannel>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003bfa:	f000 fb3f 	bl	800427c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003bfe:	1d3b      	adds	r3, r7, #4
 8003c00:	220c      	movs	r2, #12
 8003c02:	4619      	mov	r1, r3
 8003c04:	4807      	ldr	r0, [pc, #28]	; (8003c24 <MX_TIM3_Init+0x114>)
 8003c06:	f002 fdaf 	bl	8006768 <HAL_TIM_PWM_ConfigChannel>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8003c10:	f000 fb34 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003c14:	4803      	ldr	r0, [pc, #12]	; (8003c24 <MX_TIM3_Init+0x114>)
 8003c16:	f000 fcc1 	bl	800459c <HAL_TIM_MspPostInit>

}
 8003c1a:	bf00      	nop
 8003c1c:	3738      	adds	r7, #56	; 0x38
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20000bd0 	.word	0x20000bd0
 8003c28:	40000400 	.word	0x40000400

08003c2c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c32:	f107 0308 	add.w	r3, r7, #8
 8003c36:	2200      	movs	r2, #0
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	605a      	str	r2, [r3, #4]
 8003c3c:	609a      	str	r2, [r3, #8]
 8003c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c40:	463b      	mov	r3, r7
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003c48:	4b1c      	ldr	r3, [pc, #112]	; (8003cbc <MX_TIM4_Init+0x90>)
 8003c4a:	4a1d      	ldr	r2, [pc, #116]	; (8003cc0 <MX_TIM4_Init+0x94>)
 8003c4c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 8003c4e:	4b1b      	ldr	r3, [pc, #108]	; (8003cbc <MX_TIM4_Init+0x90>)
 8003c50:	225f      	movs	r2, #95	; 0x5f
 8003c52:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c54:	4b19      	ldr	r3, [pc, #100]	; (8003cbc <MX_TIM4_Init+0x90>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20;
 8003c5a:	4b18      	ldr	r3, [pc, #96]	; (8003cbc <MX_TIM4_Init+0x90>)
 8003c5c:	2214      	movs	r2, #20
 8003c5e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c60:	4b16      	ldr	r3, [pc, #88]	; (8003cbc <MX_TIM4_Init+0x90>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c66:	4b15      	ldr	r3, [pc, #84]	; (8003cbc <MX_TIM4_Init+0x90>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003c6c:	4813      	ldr	r0, [pc, #76]	; (8003cbc <MX_TIM4_Init+0x90>)
 8003c6e:	f002 fba1 	bl	80063b4 <HAL_TIM_Base_Init>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8003c78:	f000 fb00 	bl	800427c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003c82:	f107 0308 	add.w	r3, r7, #8
 8003c86:	4619      	mov	r1, r3
 8003c88:	480c      	ldr	r0, [pc, #48]	; (8003cbc <MX_TIM4_Init+0x90>)
 8003c8a:	f002 fe2f 	bl	80068ec <HAL_TIM_ConfigClockSource>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8003c94:	f000 faf2 	bl	800427c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003ca0:	463b      	mov	r3, r7
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4805      	ldr	r0, [pc, #20]	; (8003cbc <MX_TIM4_Init+0x90>)
 8003ca6:	f003 f9f9 	bl	800709c <HAL_TIMEx_MasterConfigSynchronization>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8003cb0:	f000 fae4 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003cb4:	bf00      	nop
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	20000aac 	.word	0x20000aac
 8003cc0:	40000800 	.word	0x40000800

08003cc4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cca:	f107 0308 	add.w	r3, r7, #8
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	605a      	str	r2, [r3, #4]
 8003cd4:	609a      	str	r2, [r3, #8]
 8003cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cd8:	463b      	mov	r3, r7
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003ce0:	4b1d      	ldr	r3, [pc, #116]	; (8003d58 <MX_TIM5_Init+0x94>)
 8003ce2:	4a1e      	ldr	r2, [pc, #120]	; (8003d5c <MX_TIM5_Init+0x98>)
 8003ce4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 96-1;
 8003ce6:	4b1c      	ldr	r3, [pc, #112]	; (8003d58 <MX_TIM5_Init+0x94>)
 8003ce8:	225f      	movs	r2, #95	; 0x5f
 8003cea:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cec:	4b1a      	ldr	r3, [pc, #104]	; (8003d58 <MX_TIM5_Init+0x94>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 8003cf2:	4b19      	ldr	r3, [pc, #100]	; (8003d58 <MX_TIM5_Init+0x94>)
 8003cf4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003cf8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cfa:	4b17      	ldr	r3, [pc, #92]	; (8003d58 <MX_TIM5_Init+0x94>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d00:	4b15      	ldr	r3, [pc, #84]	; (8003d58 <MX_TIM5_Init+0x94>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003d06:	4814      	ldr	r0, [pc, #80]	; (8003d58 <MX_TIM5_Init+0x94>)
 8003d08:	f002 fb54 	bl	80063b4 <HAL_TIM_Base_Init>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8003d12:	f000 fab3 	bl	800427c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003d1c:	f107 0308 	add.w	r3, r7, #8
 8003d20:	4619      	mov	r1, r3
 8003d22:	480d      	ldr	r0, [pc, #52]	; (8003d58 <MX_TIM5_Init+0x94>)
 8003d24:	f002 fde2 	bl	80068ec <HAL_TIM_ConfigClockSource>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003d2e:	f000 faa5 	bl	800427c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d32:	2300      	movs	r3, #0
 8003d34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d36:	2300      	movs	r3, #0
 8003d38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003d3a:	463b      	mov	r3, r7
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4806      	ldr	r0, [pc, #24]	; (8003d58 <MX_TIM5_Init+0x94>)
 8003d40:	f003 f9ac 	bl	800709c <HAL_TIMEx_MasterConfigSynchronization>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003d4a:	f000 fa97 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003d4e:	bf00      	nop
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000b88 	.word	0x20000b88
 8003d5c:	40000c00 	.word	0x40000c00

08003d60 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d66:	463b      	mov	r3, r7
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003d6e:	4b15      	ldr	r3, [pc, #84]	; (8003dc4 <MX_TIM6_Init+0x64>)
 8003d70:	4a15      	ldr	r2, [pc, #84]	; (8003dc8 <MX_TIM6_Init+0x68>)
 8003d72:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8003d74:	4b13      	ldr	r3, [pc, #76]	; (8003dc4 <MX_TIM6_Init+0x64>)
 8003d76:	2231      	movs	r2, #49	; 0x31
 8003d78:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d7a:	4b12      	ldr	r3, [pc, #72]	; (8003dc4 <MX_TIM6_Init+0x64>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8003d80:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <MX_TIM6_Init+0x64>)
 8003d82:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003d86:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d88:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <MX_TIM6_Init+0x64>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003d8e:	480d      	ldr	r0, [pc, #52]	; (8003dc4 <MX_TIM6_Init+0x64>)
 8003d90:	f002 fb10 	bl	80063b4 <HAL_TIM_Base_Init>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003d9a:	f000 fa6f 	bl	800427c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003da2:	2300      	movs	r3, #0
 8003da4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003da6:	463b      	mov	r3, r7
 8003da8:	4619      	mov	r1, r3
 8003daa:	4806      	ldr	r0, [pc, #24]	; (8003dc4 <MX_TIM6_Init+0x64>)
 8003dac:	f003 f976 	bl	800709c <HAL_TIMEx_MasterConfigSynchronization>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003db6:	f000 fa61 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000ca8 	.word	0x20000ca8
 8003dc8:	40001000 	.word	0x40001000

08003dcc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dd2:	f107 0308 	add.w	r3, r7, #8
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	605a      	str	r2, [r3, #4]
 8003ddc:	609a      	str	r2, [r3, #8]
 8003dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003de0:	463b      	mov	r3, r7
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003de8:	4b1e      	ldr	r3, [pc, #120]	; (8003e64 <MX_TIM8_Init+0x98>)
 8003dea:	4a1f      	ldr	r2, [pc, #124]	; (8003e68 <MX_TIM8_Init+0x9c>)
 8003dec:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003dee:	4b1d      	ldr	r3, [pc, #116]	; (8003e64 <MX_TIM8_Init+0x98>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003df4:	4b1b      	ldr	r3, [pc, #108]	; (8003e64 <MX_TIM8_Init+0x98>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003dfa:	4b1a      	ldr	r3, [pc, #104]	; (8003e64 <MX_TIM8_Init+0x98>)
 8003dfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e00:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e02:	4b18      	ldr	r3, [pc, #96]	; (8003e64 <MX_TIM8_Init+0x98>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003e08:	4b16      	ldr	r3, [pc, #88]	; (8003e64 <MX_TIM8_Init+0x98>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e0e:	4b15      	ldr	r3, [pc, #84]	; (8003e64 <MX_TIM8_Init+0x98>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003e14:	4813      	ldr	r0, [pc, #76]	; (8003e64 <MX_TIM8_Init+0x98>)
 8003e16:	f002 facd 	bl	80063b4 <HAL_TIM_Base_Init>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8003e20:	f000 fa2c 	bl	800427c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003e2a:	f107 0308 	add.w	r3, r7, #8
 8003e2e:	4619      	mov	r1, r3
 8003e30:	480c      	ldr	r0, [pc, #48]	; (8003e64 <MX_TIM8_Init+0x98>)
 8003e32:	f002 fd5b 	bl	80068ec <HAL_TIM_ConfigClockSource>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8003e3c:	f000 fa1e 	bl	800427c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e40:	2300      	movs	r3, #0
 8003e42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e44:	2300      	movs	r3, #0
 8003e46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003e48:	463b      	mov	r3, r7
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4805      	ldr	r0, [pc, #20]	; (8003e64 <MX_TIM8_Init+0x98>)
 8003e4e:	f003 f925 	bl	800709c <HAL_TIMEx_MasterConfigSynchronization>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8003e58:	f000 fa10 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003e5c:	bf00      	nop
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20000a64 	.word	0x20000a64
 8003e68:	40010400 	.word	0x40010400

08003e6c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08c      	sub	sp, #48	; 0x30
 8003e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e72:	f107 0320 	add.w	r3, r7, #32
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	605a      	str	r2, [r3, #4]
 8003e7c:	609a      	str	r2, [r3, #8]
 8003e7e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e80:	1d3b      	adds	r3, r7, #4
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	605a      	str	r2, [r3, #4]
 8003e88:	609a      	str	r2, [r3, #8]
 8003e8a:	60da      	str	r2, [r3, #12]
 8003e8c:	611a      	str	r2, [r3, #16]
 8003e8e:	615a      	str	r2, [r3, #20]
 8003e90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003e92:	4b26      	ldr	r3, [pc, #152]	; (8003f2c <MX_TIM9_Init+0xc0>)
 8003e94:	4a26      	ldr	r2, [pc, #152]	; (8003f30 <MX_TIM9_Init+0xc4>)
 8003e96:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 500-1;
 8003e98:	4b24      	ldr	r3, [pc, #144]	; (8003f2c <MX_TIM9_Init+0xc0>)
 8003e9a:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003e9e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ea0:	4b22      	ldr	r3, [pc, #136]	; (8003f2c <MX_TIM9_Init+0xc0>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2000-1;
 8003ea6:	4b21      	ldr	r3, [pc, #132]	; (8003f2c <MX_TIM9_Init+0xc0>)
 8003ea8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003eac:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eae:	4b1f      	ldr	r3, [pc, #124]	; (8003f2c <MX_TIM9_Init+0xc0>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003eb4:	4b1d      	ldr	r3, [pc, #116]	; (8003f2c <MX_TIM9_Init+0xc0>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003eba:	481c      	ldr	r0, [pc, #112]	; (8003f2c <MX_TIM9_Init+0xc0>)
 8003ebc:	f002 fa7a 	bl	80063b4 <HAL_TIM_Base_Init>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 8003ec6:	f000 f9d9 	bl	800427c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ece:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003ed0:	f107 0320 	add.w	r3, r7, #32
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4815      	ldr	r0, [pc, #84]	; (8003f2c <MX_TIM9_Init+0xc0>)
 8003ed8:	f002 fd08 	bl	80068ec <HAL_TIM_ConfigClockSource>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 8003ee2:	f000 f9cb 	bl	800427c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8003ee6:	4811      	ldr	r0, [pc, #68]	; (8003f2c <MX_TIM9_Init+0xc0>)
 8003ee8:	f002 fb1c 	bl	8006524 <HAL_TIM_PWM_Init>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8003ef2:	f000 f9c3 	bl	800427c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ef6:	2360      	movs	r3, #96	; 0x60
 8003ef8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f06:	1d3b      	adds	r3, r7, #4
 8003f08:	2200      	movs	r2, #0
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4807      	ldr	r0, [pc, #28]	; (8003f2c <MX_TIM9_Init+0xc0>)
 8003f0e:	f002 fc2b 	bl	8006768 <HAL_TIM_PWM_ConfigChannel>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8003f18:	f000 f9b0 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003f1c:	4803      	ldr	r0, [pc, #12]	; (8003f2c <MX_TIM9_Init+0xc0>)
 8003f1e:	f000 fb3d 	bl	800459c <HAL_TIM_MspPostInit>

}
 8003f22:	bf00      	nop
 8003f24:	3730      	adds	r7, #48	; 0x30
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000d38 	.word	0x20000d38
 8003f30:	40014000 	.word	0x40014000

08003f34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003f38:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <MX_USART2_UART_Init+0x4c>)
 8003f3a:	4a12      	ldr	r2, [pc, #72]	; (8003f84 <MX_USART2_UART_Init+0x50>)
 8003f3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f3e:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <MX_USART2_UART_Init+0x4c>)
 8003f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f46:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <MX_USART2_UART_Init+0x4c>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f4c:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <MX_USART2_UART_Init+0x4c>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f52:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <MX_USART2_UART_Init+0x4c>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <MX_USART2_UART_Init+0x4c>)
 8003f5a:	220c      	movs	r2, #12
 8003f5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f5e:	4b08      	ldr	r3, [pc, #32]	; (8003f80 <MX_USART2_UART_Init+0x4c>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f64:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <MX_USART2_UART_Init+0x4c>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f6a:	4805      	ldr	r0, [pc, #20]	; (8003f80 <MX_USART2_UART_Init+0x4c>)
 8003f6c:	f003 f964 	bl	8007238 <HAL_UART_Init>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003f76:	f000 f981 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003f7a:	bf00      	nop
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000e0c 	.word	0x20000e0c
 8003f84:	40004400 	.word	0x40004400

08003f88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003f8c:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <MX_USART3_UART_Init+0x4c>)
 8003f8e:	4a12      	ldr	r2, [pc, #72]	; (8003fd8 <MX_USART3_UART_Init+0x50>)
 8003f90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003f92:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <MX_USART3_UART_Init+0x4c>)
 8003f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003f9a:	4b0e      	ldr	r3, [pc, #56]	; (8003fd4 <MX_USART3_UART_Init+0x4c>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003fa0:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <MX_USART3_UART_Init+0x4c>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003fa6:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <MX_USART3_UART_Init+0x4c>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003fac:	4b09      	ldr	r3, [pc, #36]	; (8003fd4 <MX_USART3_UART_Init+0x4c>)
 8003fae:	220c      	movs	r2, #12
 8003fb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fb2:	4b08      	ldr	r3, [pc, #32]	; (8003fd4 <MX_USART3_UART_Init+0x4c>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fb8:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <MX_USART3_UART_Init+0x4c>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003fbe:	4805      	ldr	r0, [pc, #20]	; (8003fd4 <MX_USART3_UART_Init+0x4c>)
 8003fc0:	f003 f93a 	bl	8007238 <HAL_UART_Init>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003fca:	f000 f957 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003fce:	bf00      	nop
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20000af4 	.word	0x20000af4
 8003fd8:	40004800 	.word	0x40004800

08003fdc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003fe0:	4b11      	ldr	r3, [pc, #68]	; (8004028 <MX_USART6_UART_Init+0x4c>)
 8003fe2:	4a12      	ldr	r2, [pc, #72]	; (800402c <MX_USART6_UART_Init+0x50>)
 8003fe4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003fe6:	4b10      	ldr	r3, [pc, #64]	; (8004028 <MX_USART6_UART_Init+0x4c>)
 8003fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003fec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003fee:	4b0e      	ldr	r3, [pc, #56]	; (8004028 <MX_USART6_UART_Init+0x4c>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003ff4:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <MX_USART6_UART_Init+0x4c>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <MX_USART6_UART_Init+0x4c>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004000:	4b09      	ldr	r3, [pc, #36]	; (8004028 <MX_USART6_UART_Init+0x4c>)
 8004002:	220c      	movs	r2, #12
 8004004:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004006:	4b08      	ldr	r3, [pc, #32]	; (8004028 <MX_USART6_UART_Init+0x4c>)
 8004008:	2200      	movs	r2, #0
 800400a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800400c:	4b06      	ldr	r3, [pc, #24]	; (8004028 <MX_USART6_UART_Init+0x4c>)
 800400e:	2200      	movs	r2, #0
 8004010:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004012:	4805      	ldr	r0, [pc, #20]	; (8004028 <MX_USART6_UART_Init+0x4c>)
 8004014:	f003 f910 	bl	8007238 <HAL_UART_Init>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800401e:	f000 f92d 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004022:	bf00      	nop
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20000d80 	.word	0x20000d80
 800402c:	40011400 	.word	0x40011400

08004030 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08c      	sub	sp, #48	; 0x30
 8004034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004036:	f107 031c 	add.w	r3, r7, #28
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	605a      	str	r2, [r3, #4]
 8004040:	609a      	str	r2, [r3, #8]
 8004042:	60da      	str	r2, [r3, #12]
 8004044:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	61bb      	str	r3, [r7, #24]
 800404a:	4b86      	ldr	r3, [pc, #536]	; (8004264 <MX_GPIO_Init+0x234>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	4a85      	ldr	r2, [pc, #532]	; (8004264 <MX_GPIO_Init+0x234>)
 8004050:	f043 0310 	orr.w	r3, r3, #16
 8004054:	6313      	str	r3, [r2, #48]	; 0x30
 8004056:	4b83      	ldr	r3, [pc, #524]	; (8004264 <MX_GPIO_Init+0x234>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	f003 0310 	and.w	r3, r3, #16
 800405e:	61bb      	str	r3, [r7, #24]
 8004060:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	4b7f      	ldr	r3, [pc, #508]	; (8004264 <MX_GPIO_Init+0x234>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	4a7e      	ldr	r2, [pc, #504]	; (8004264 <MX_GPIO_Init+0x234>)
 800406c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004070:	6313      	str	r3, [r2, #48]	; 0x30
 8004072:	4b7c      	ldr	r3, [pc, #496]	; (8004264 <MX_GPIO_Init+0x234>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800407e:	2300      	movs	r3, #0
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	4b78      	ldr	r3, [pc, #480]	; (8004264 <MX_GPIO_Init+0x234>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	4a77      	ldr	r2, [pc, #476]	; (8004264 <MX_GPIO_Init+0x234>)
 8004088:	f043 0304 	orr.w	r3, r3, #4
 800408c:	6313      	str	r3, [r2, #48]	; 0x30
 800408e:	4b75      	ldr	r3, [pc, #468]	; (8004264 <MX_GPIO_Init+0x234>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	4b71      	ldr	r3, [pc, #452]	; (8004264 <MX_GPIO_Init+0x234>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	4a70      	ldr	r2, [pc, #448]	; (8004264 <MX_GPIO_Init+0x234>)
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	6313      	str	r3, [r2, #48]	; 0x30
 80040aa:	4b6e      	ldr	r3, [pc, #440]	; (8004264 <MX_GPIO_Init+0x234>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	4b6a      	ldr	r3, [pc, #424]	; (8004264 <MX_GPIO_Init+0x234>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	4a69      	ldr	r2, [pc, #420]	; (8004264 <MX_GPIO_Init+0x234>)
 80040c0:	f043 0302 	orr.w	r3, r3, #2
 80040c4:	6313      	str	r3, [r2, #48]	; 0x30
 80040c6:	4b67      	ldr	r3, [pc, #412]	; (8004264 <MX_GPIO_Init+0x234>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	60bb      	str	r3, [r7, #8]
 80040d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80040d2:	2300      	movs	r3, #0
 80040d4:	607b      	str	r3, [r7, #4]
 80040d6:	4b63      	ldr	r3, [pc, #396]	; (8004264 <MX_GPIO_Init+0x234>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	4a62      	ldr	r2, [pc, #392]	; (8004264 <MX_GPIO_Init+0x234>)
 80040dc:	f043 0308 	orr.w	r3, r3, #8
 80040e0:	6313      	str	r3, [r2, #48]	; 0x30
 80040e2:	4b60      	ldr	r3, [pc, #384]	; (8004264 <MX_GPIO_Init+0x234>)
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	607b      	str	r3, [r7, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WiFi_OK_Pin|DC_Salon_1_Pin|DC_Salon_2_Pin|L_Cocina_Pin
 80040ee:	2200      	movs	r2, #0
 80040f0:	f641 4131 	movw	r1, #7217	; 0x1c31
 80040f4:	485c      	ldr	r0, [pc, #368]	; (8004268 <MX_GPIO_Init+0x238>)
 80040f6:	f001 fcb7 	bl	8005a68 <HAL_GPIO_WritePin>
                          |L_Garaje_Pin|L_Tendedero_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DHT22_Pin|DHT11_Pin, GPIO_PIN_RESET);
 80040fa:	2200      	movs	r2, #0
 80040fc:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8004100:	485a      	ldr	r0, [pc, #360]	; (800426c <MX_GPIO_Init+0x23c>)
 8004102:	f001 fcb1 	bl	8005a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Riego_Pin|Peltier_Pin|L_Espejo_Pin|L_Izquierda_Pin
 8004106:	2200      	movs	r2, #0
 8004108:	f24a 01f8 	movw	r1, #41208	; 0xa0f8
 800410c:	4858      	ldr	r0, [pc, #352]	; (8004270 <MX_GPIO_Init+0x240>)
 800410e:	f001 fcab 	bl	8005a68 <HAL_GPIO_WritePin>
                          |L_Oficina_Pin|L_Derecha_Pin|L_TV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L_Fregadero_GPIO_Port, L_Fregadero_Pin, GPIO_PIN_RESET);
 8004112:	2200      	movs	r2, #0
 8004114:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004118:	4856      	ldr	r0, [pc, #344]	; (8004274 <MX_GPIO_Init+0x244>)
 800411a:	f001 fca5 	bl	8005a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, L_Recibidor_Pin|L_Comedor_Pin|L_Jardin_Pin|L_Sala_Pin
 800411e:	2200      	movs	r2, #0
 8004120:	21ff      	movs	r1, #255	; 0xff
 8004122:	4855      	ldr	r0, [pc, #340]	; (8004278 <MX_GPIO_Init+0x248>)
 8004124:	f001 fca0 	bl	8005a68 <HAL_GPIO_WritePin>
                          |L_Porche_Pin|L_Ambiente_Pin|L_Bano_Pin|L_Dormitorio_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : B_Stop_Pin Fin_Garaje_Pin */
  GPIO_InitStruct.Pin = B_Stop_Pin|Fin_Garaje_Pin;
 8004128:	2344      	movs	r3, #68	; 0x44
 800412a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800412c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004130:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004132:	2300      	movs	r3, #0
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004136:	f107 031c 	add.w	r3, r7, #28
 800413a:	4619      	mov	r1, r3
 800413c:	484b      	ldr	r0, [pc, #300]	; (800426c <MX_GPIO_Init+0x23c>)
 800413e:	f001 fadf 	bl	8005700 <HAL_GPIO_Init>

  /*Configure GPIO pins : S_Int_Pin Fin_Parcela_Pin S_Ext_Pin */
  GPIO_InitStruct.Pin = S_Int_Pin|Fin_Parcela_Pin|S_Ext_Pin;
 8004142:	231a      	movs	r3, #26
 8004144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004146:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800414a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800414c:	2301      	movs	r3, #1
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004150:	f107 031c 	add.w	r3, r7, #28
 8004154:	4619      	mov	r1, r3
 8004156:	4845      	ldr	r0, [pc, #276]	; (800426c <MX_GPIO_Init+0x23c>)
 8004158:	f001 fad2 	bl	8005700 <HAL_GPIO_Init>

  /*Configure GPIO pins : WiFi_OK_Pin DC_Salon_1_Pin DC_Salon_2_Pin L_Cocina_Pin
                           L_Garaje_Pin L_Tendedero_Pin */
  GPIO_InitStruct.Pin = WiFi_OK_Pin|DC_Salon_1_Pin|DC_Salon_2_Pin|L_Cocina_Pin
 800415c:	f641 4331 	movw	r3, #7217	; 0x1c31
 8004160:	61fb      	str	r3, [r7, #28]
                          |L_Garaje_Pin|L_Tendedero_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004162:	2301      	movs	r3, #1
 8004164:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004166:	2300      	movs	r3, #0
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800416a:	2300      	movs	r3, #0
 800416c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800416e:	f107 031c 	add.w	r3, r7, #28
 8004172:	4619      	mov	r1, r3
 8004174:	483c      	ldr	r0, [pc, #240]	; (8004268 <MX_GPIO_Init+0x238>)
 8004176:	f001 fac3 	bl	8005700 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT22_Pin DHT11_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin|DHT11_Pin;
 800417a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800417e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004180:	2301      	movs	r3, #1
 8004182:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004184:	2300      	movs	r3, #0
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004188:	2300      	movs	r3, #0
 800418a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800418c:	f107 031c 	add.w	r3, r7, #28
 8004190:	4619      	mov	r1, r3
 8004192:	4836      	ldr	r0, [pc, #216]	; (800426c <MX_GPIO_Init+0x23c>)
 8004194:	f001 fab4 	bl	8005700 <HAL_GPIO_Init>

  /*Configure GPIO pins : Riego_Pin Peltier_Pin L_Espejo_Pin L_Izquierda_Pin
                           L_Oficina_Pin L_Derecha_Pin L_TV_Pin */
  GPIO_InitStruct.Pin = Riego_Pin|Peltier_Pin|L_Espejo_Pin|L_Izquierda_Pin
 8004198:	f24a 03f8 	movw	r3, #41208	; 0xa0f8
 800419c:	61fb      	str	r3, [r7, #28]
                          |L_Oficina_Pin|L_Derecha_Pin|L_TV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800419e:	2301      	movs	r3, #1
 80041a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a2:	2300      	movs	r3, #0
 80041a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041a6:	2300      	movs	r3, #0
 80041a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041aa:	f107 031c 	add.w	r3, r7, #28
 80041ae:	4619      	mov	r1, r3
 80041b0:	482f      	ldr	r0, [pc, #188]	; (8004270 <MX_GPIO_Init+0x240>)
 80041b2:	f001 faa5 	bl	8005700 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_Fregadero_Pin */
  GPIO_InitStruct.Pin = L_Fregadero_Pin;
 80041b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041bc:	2301      	movs	r3, #1
 80041be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c4:	2300      	movs	r3, #0
 80041c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(L_Fregadero_GPIO_Port, &GPIO_InitStruct);
 80041c8:	f107 031c 	add.w	r3, r7, #28
 80041cc:	4619      	mov	r1, r3
 80041ce:	4829      	ldr	r0, [pc, #164]	; (8004274 <MX_GPIO_Init+0x244>)
 80041d0:	f001 fa96 	bl	8005700 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_Recibidor_Pin L_Comedor_Pin L_Jardin_Pin L_Sala_Pin
                           L_Porche_Pin L_Ambiente_Pin L_Bano_Pin L_Dormitorio_Pin */
  GPIO_InitStruct.Pin = L_Recibidor_Pin|L_Comedor_Pin|L_Jardin_Pin|L_Sala_Pin
 80041d4:	23ff      	movs	r3, #255	; 0xff
 80041d6:	61fb      	str	r3, [r7, #28]
                          |L_Porche_Pin|L_Ambiente_Pin|L_Bano_Pin|L_Dormitorio_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041d8:	2301      	movs	r3, #1
 80041da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041dc:	2300      	movs	r3, #0
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041e0:	2300      	movs	r3, #0
 80041e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041e4:	f107 031c 	add.w	r3, r7, #28
 80041e8:	4619      	mov	r1, r3
 80041ea:	4823      	ldr	r0, [pc, #140]	; (8004278 <MX_GPIO_Init+0x248>)
 80041ec:	f001 fa88 	bl	8005700 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_Timbre_Pin */
  GPIO_InitStruct.Pin = B_Timbre_Pin;
 80041f0:	2301      	movs	r3, #1
 80041f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80041f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80041f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80041fa:	2302      	movs	r3, #2
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B_Timbre_GPIO_Port, &GPIO_InitStruct);
 80041fe:	f107 031c 	add.w	r3, r7, #28
 8004202:	4619      	mov	r1, r3
 8004204:	4819      	ldr	r0, [pc, #100]	; (800426c <MX_GPIO_Init+0x23c>)
 8004206:	f001 fa7b 	bl	8005700 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800420a:	2200      	movs	r2, #0
 800420c:	2100      	movs	r1, #0
 800420e:	2006      	movs	r0, #6
 8004210:	f001 f9ad 	bl	800556e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004214:	2006      	movs	r0, #6
 8004216:	f001 f9c6 	bl	80055a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800421a:	2200      	movs	r2, #0
 800421c:	2100      	movs	r1, #0
 800421e:	2007      	movs	r0, #7
 8004220:	f001 f9a5 	bl	800556e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004224:	2007      	movs	r0, #7
 8004226:	f001 f9be 	bl	80055a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800422a:	2200      	movs	r2, #0
 800422c:	2100      	movs	r1, #0
 800422e:	2009      	movs	r0, #9
 8004230:	f001 f99d 	bl	800556e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004234:	2009      	movs	r0, #9
 8004236:	f001 f9b6 	bl	80055a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800423a:	2200      	movs	r2, #0
 800423c:	2100      	movs	r1, #0
 800423e:	200a      	movs	r0, #10
 8004240:	f001 f995 	bl	800556e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004244:	200a      	movs	r0, #10
 8004246:	f001 f9ae 	bl	80055a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800424a:	2200      	movs	r2, #0
 800424c:	2100      	movs	r1, #0
 800424e:	2017      	movs	r0, #23
 8004250:	f001 f98d 	bl	800556e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004254:	2017      	movs	r0, #23
 8004256:	f001 f9a6 	bl	80055a6 <HAL_NVIC_EnableIRQ>

}
 800425a:	bf00      	nop
 800425c:	3730      	adds	r7, #48	; 0x30
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40023800 	.word	0x40023800
 8004268:	40020800 	.word	0x40020800
 800426c:	40021000 	.word	0x40021000
 8004270:	40020400 	.word	0x40020400
 8004274:	40020000 	.word	0x40020000
 8004278:	40020c00 	.word	0x40020c00

0800427c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004280:	b672      	cpsid	i
}
 8004282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004284:	e7fe      	b.n	8004284 <Error_Handler+0x8>
	...

08004288 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800428e:	2300      	movs	r3, #0
 8004290:	607b      	str	r3, [r7, #4]
 8004292:	4b10      	ldr	r3, [pc, #64]	; (80042d4 <HAL_MspInit+0x4c>)
 8004294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004296:	4a0f      	ldr	r2, [pc, #60]	; (80042d4 <HAL_MspInit+0x4c>)
 8004298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800429c:	6453      	str	r3, [r2, #68]	; 0x44
 800429e:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <HAL_MspInit+0x4c>)
 80042a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a6:	607b      	str	r3, [r7, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042aa:	2300      	movs	r3, #0
 80042ac:	603b      	str	r3, [r7, #0]
 80042ae:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <HAL_MspInit+0x4c>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	4a08      	ldr	r2, [pc, #32]	; (80042d4 <HAL_MspInit+0x4c>)
 80042b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b8:	6413      	str	r3, [r2, #64]	; 0x40
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <HAL_MspInit+0x4c>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80042c6:	2007      	movs	r0, #7
 80042c8:	f001 f946 	bl	8005558 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042cc:	bf00      	nop
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40023800 	.word	0x40023800

080042d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08e      	sub	sp, #56	; 0x38
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	605a      	str	r2, [r3, #4]
 80042ea:	609a      	str	r2, [r3, #8]
 80042ec:	60da      	str	r2, [r3, #12]
 80042ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a45      	ldr	r2, [pc, #276]	; (800440c <HAL_ADC_MspInit+0x134>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d128      	bne.n	800434c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80042fa:	2300      	movs	r3, #0
 80042fc:	623b      	str	r3, [r7, #32]
 80042fe:	4b44      	ldr	r3, [pc, #272]	; (8004410 <HAL_ADC_MspInit+0x138>)
 8004300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004302:	4a43      	ldr	r2, [pc, #268]	; (8004410 <HAL_ADC_MspInit+0x138>)
 8004304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004308:	6453      	str	r3, [r2, #68]	; 0x44
 800430a:	4b41      	ldr	r3, [pc, #260]	; (8004410 <HAL_ADC_MspInit+0x138>)
 800430c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004312:	623b      	str	r3, [r7, #32]
 8004314:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004316:	2300      	movs	r3, #0
 8004318:	61fb      	str	r3, [r7, #28]
 800431a:	4b3d      	ldr	r3, [pc, #244]	; (8004410 <HAL_ADC_MspInit+0x138>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	4a3c      	ldr	r2, [pc, #240]	; (8004410 <HAL_ADC_MspInit+0x138>)
 8004320:	f043 0301 	orr.w	r3, r3, #1
 8004324:	6313      	str	r3, [r2, #48]	; 0x30
 8004326:	4b3a      	ldr	r3, [pc, #232]	; (8004410 <HAL_ADC_MspInit+0x138>)
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	61fb      	str	r3, [r7, #28]
 8004330:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = LDR_Pin;
 8004332:	2310      	movs	r3, #16
 8004334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004336:	2303      	movs	r3, #3
 8004338:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433a:	2300      	movs	r3, #0
 800433c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 800433e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004342:	4619      	mov	r1, r3
 8004344:	4833      	ldr	r0, [pc, #204]	; (8004414 <HAL_ADC_MspInit+0x13c>)
 8004346:	f001 f9db 	bl	8005700 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800434a:	e05a      	b.n	8004402 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a31      	ldr	r2, [pc, #196]	; (8004418 <HAL_ADC_MspInit+0x140>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d128      	bne.n	80043a8 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004356:	2300      	movs	r3, #0
 8004358:	61bb      	str	r3, [r7, #24]
 800435a:	4b2d      	ldr	r3, [pc, #180]	; (8004410 <HAL_ADC_MspInit+0x138>)
 800435c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435e:	4a2c      	ldr	r2, [pc, #176]	; (8004410 <HAL_ADC_MspInit+0x138>)
 8004360:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004364:	6453      	str	r3, [r2, #68]	; 0x44
 8004366:	4b2a      	ldr	r3, [pc, #168]	; (8004410 <HAL_ADC_MspInit+0x138>)
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800436e:	61bb      	str	r3, [r7, #24]
 8004370:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	4b26      	ldr	r3, [pc, #152]	; (8004410 <HAL_ADC_MspInit+0x138>)
 8004378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437a:	4a25      	ldr	r2, [pc, #148]	; (8004410 <HAL_ADC_MspInit+0x138>)
 800437c:	f043 0302 	orr.w	r3, r3, #2
 8004380:	6313      	str	r3, [r2, #48]	; 0x30
 8004382:	4b23      	ldr	r3, [pc, #140]	; (8004410 <HAL_ADC_MspInit+0x138>)
 8004384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = HW_390_Pin;
 800438e:	2301      	movs	r3, #1
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004392:	2303      	movs	r3, #3
 8004394:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004396:	2300      	movs	r3, #0
 8004398:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HW_390_GPIO_Port, &GPIO_InitStruct);
 800439a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800439e:	4619      	mov	r1, r3
 80043a0:	481e      	ldr	r0, [pc, #120]	; (800441c <HAL_ADC_MspInit+0x144>)
 80043a2:	f001 f9ad 	bl	8005700 <HAL_GPIO_Init>
}
 80043a6:	e02c      	b.n	8004402 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1c      	ldr	r2, [pc, #112]	; (8004420 <HAL_ADC_MspInit+0x148>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d127      	bne.n	8004402 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80043b2:	2300      	movs	r3, #0
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	4b16      	ldr	r3, [pc, #88]	; (8004410 <HAL_ADC_MspInit+0x138>)
 80043b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ba:	4a15      	ldr	r2, [pc, #84]	; (8004410 <HAL_ADC_MspInit+0x138>)
 80043bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043c0:	6453      	str	r3, [r2, #68]	; 0x44
 80043c2:	4b13      	ldr	r3, [pc, #76]	; (8004410 <HAL_ADC_MspInit+0x138>)
 80043c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ca:	613b      	str	r3, [r7, #16]
 80043cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043ce:	2300      	movs	r3, #0
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <HAL_ADC_MspInit+0x138>)
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	4a0e      	ldr	r2, [pc, #56]	; (8004410 <HAL_ADC_MspInit+0x138>)
 80043d8:	f043 0304 	orr.w	r3, r3, #4
 80043dc:	6313      	str	r3, [r2, #48]	; 0x30
 80043de:	4b0c      	ldr	r3, [pc, #48]	; (8004410 <HAL_ADC_MspInit+0x138>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Lluvia_Pin;
 80043ea:	2302      	movs	r3, #2
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043ee:	2303      	movs	r3, #3
 80043f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Lluvia_GPIO_Port, &GPIO_InitStruct);
 80043f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043fa:	4619      	mov	r1, r3
 80043fc:	4809      	ldr	r0, [pc, #36]	; (8004424 <HAL_ADC_MspInit+0x14c>)
 80043fe:	f001 f97f 	bl	8005700 <HAL_GPIO_Init>
}
 8004402:	bf00      	nop
 8004404:	3738      	adds	r7, #56	; 0x38
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40012000 	.word	0x40012000
 8004410:	40023800 	.word	0x40023800
 8004414:	40020000 	.word	0x40020000
 8004418:	40012100 	.word	0x40012100
 800441c:	40020400 	.word	0x40020400
 8004420:	40012200 	.word	0x40012200
 8004424:	40020800 	.word	0x40020800

08004428 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004428:	b480      	push	{r7}
 800442a:	b08b      	sub	sp, #44	; 0x2c
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a51      	ldr	r2, [pc, #324]	; (800457c <HAL_TIM_Base_MspInit+0x154>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d10e      	bne.n	8004458 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
 800443e:	4b50      	ldr	r3, [pc, #320]	; (8004580 <HAL_TIM_Base_MspInit+0x158>)
 8004440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004442:	4a4f      	ldr	r2, [pc, #316]	; (8004580 <HAL_TIM_Base_MspInit+0x158>)
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	6453      	str	r3, [r2, #68]	; 0x44
 800444a:	4b4d      	ldr	r3, [pc, #308]	; (8004580 <HAL_TIM_Base_MspInit+0x158>)
 800444c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8004456:	e08a      	b.n	800456e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM2)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004460:	d10e      	bne.n	8004480 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	623b      	str	r3, [r7, #32]
 8004466:	4b46      	ldr	r3, [pc, #280]	; (8004580 <HAL_TIM_Base_MspInit+0x158>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	4a45      	ldr	r2, [pc, #276]	; (8004580 <HAL_TIM_Base_MspInit+0x158>)
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	6413      	str	r3, [r2, #64]	; 0x40
 8004472:	4b43      	ldr	r3, [pc, #268]	; (8004580 <HAL_TIM_Base_MspInit+0x158>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	623b      	str	r3, [r7, #32]
 800447c:	6a3b      	ldr	r3, [r7, #32]
}
 800447e:	e076      	b.n	800456e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM3)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a3f      	ldr	r2, [pc, #252]	; (8004584 <HAL_TIM_Base_MspInit+0x15c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d10e      	bne.n	80044a8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800448a:	2300      	movs	r3, #0
 800448c:	61fb      	str	r3, [r7, #28]
 800448e:	4b3c      	ldr	r3, [pc, #240]	; (8004580 <HAL_TIM_Base_MspInit+0x158>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	4a3b      	ldr	r2, [pc, #236]	; (8004580 <HAL_TIM_Base_MspInit+0x158>)
 8004494:	f043 0302 	orr.w	r3, r3, #2
 8004498:	6413      	str	r3, [r2, #64]	; 0x40
 800449a:	4b39      	ldr	r3, [pc, #228]	; (8004580 <HAL_TIM_Base_MspInit+0x158>)
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	61fb      	str	r3, [r7, #28]
 80044a4:	69fb      	ldr	r3, [r7, #28]
}
 80044a6:	e062      	b.n	800456e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM4)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a36      	ldr	r2, [pc, #216]	; (8004588 <HAL_TIM_Base_MspInit+0x160>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d10e      	bne.n	80044d0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	61bb      	str	r3, [r7, #24]
 80044b6:	4b32      	ldr	r3, [pc, #200]	; (8004580 <HAL_TIM_Base_MspInit+0x158>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	4a31      	ldr	r2, [pc, #196]	; (8004580 <HAL_TIM_Base_MspInit+0x158>)
 80044bc:	f043 0304 	orr.w	r3, r3, #4
 80044c0:	6413      	str	r3, [r2, #64]	; 0x40
 80044c2:	4b2f      	ldr	r3, [pc, #188]	; (8004580 <HAL_TIM_Base_MspInit+0x158>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	61bb      	str	r3, [r7, #24]
 80044cc:	69bb      	ldr	r3, [r7, #24]
}
 80044ce:	e04e      	b.n	800456e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM5)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a2d      	ldr	r2, [pc, #180]	; (800458c <HAL_TIM_Base_MspInit+0x164>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d10e      	bne.n	80044f8 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	4b28      	ldr	r3, [pc, #160]	; (8004580 <HAL_TIM_Base_MspInit+0x158>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	4a27      	ldr	r2, [pc, #156]	; (8004580 <HAL_TIM_Base_MspInit+0x158>)
 80044e4:	f043 0308 	orr.w	r3, r3, #8
 80044e8:	6413      	str	r3, [r2, #64]	; 0x40
 80044ea:	4b25      	ldr	r3, [pc, #148]	; (8004580 <HAL_TIM_Base_MspInit+0x158>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	697b      	ldr	r3, [r7, #20]
}
 80044f6:	e03a      	b.n	800456e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM6)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a24      	ldr	r2, [pc, #144]	; (8004590 <HAL_TIM_Base_MspInit+0x168>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d10e      	bne.n	8004520 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004502:	2300      	movs	r3, #0
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	4b1e      	ldr	r3, [pc, #120]	; (8004580 <HAL_TIM_Base_MspInit+0x158>)
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	4a1d      	ldr	r2, [pc, #116]	; (8004580 <HAL_TIM_Base_MspInit+0x158>)
 800450c:	f043 0310 	orr.w	r3, r3, #16
 8004510:	6413      	str	r3, [r2, #64]	; 0x40
 8004512:	4b1b      	ldr	r3, [pc, #108]	; (8004580 <HAL_TIM_Base_MspInit+0x158>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f003 0310 	and.w	r3, r3, #16
 800451a:	613b      	str	r3, [r7, #16]
 800451c:	693b      	ldr	r3, [r7, #16]
}
 800451e:	e026      	b.n	800456e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM8)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a1b      	ldr	r2, [pc, #108]	; (8004594 <HAL_TIM_Base_MspInit+0x16c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d10e      	bne.n	8004548 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800452a:	2300      	movs	r3, #0
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	4b14      	ldr	r3, [pc, #80]	; (8004580 <HAL_TIM_Base_MspInit+0x158>)
 8004530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004532:	4a13      	ldr	r2, [pc, #76]	; (8004580 <HAL_TIM_Base_MspInit+0x158>)
 8004534:	f043 0302 	orr.w	r3, r3, #2
 8004538:	6453      	str	r3, [r2, #68]	; 0x44
 800453a:	4b11      	ldr	r3, [pc, #68]	; (8004580 <HAL_TIM_Base_MspInit+0x158>)
 800453c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	68fb      	ldr	r3, [r7, #12]
}
 8004546:	e012      	b.n	800456e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM9)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a12      	ldr	r2, [pc, #72]	; (8004598 <HAL_TIM_Base_MspInit+0x170>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d10d      	bne.n	800456e <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004552:	2300      	movs	r3, #0
 8004554:	60bb      	str	r3, [r7, #8]
 8004556:	4b0a      	ldr	r3, [pc, #40]	; (8004580 <HAL_TIM_Base_MspInit+0x158>)
 8004558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455a:	4a09      	ldr	r2, [pc, #36]	; (8004580 <HAL_TIM_Base_MspInit+0x158>)
 800455c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004560:	6453      	str	r3, [r2, #68]	; 0x44
 8004562:	4b07      	ldr	r3, [pc, #28]	; (8004580 <HAL_TIM_Base_MspInit+0x158>)
 8004564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800456a:	60bb      	str	r3, [r7, #8]
 800456c:	68bb      	ldr	r3, [r7, #8]
}
 800456e:	bf00      	nop
 8004570:	372c      	adds	r7, #44	; 0x2c
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40010000 	.word	0x40010000
 8004580:	40023800 	.word	0x40023800
 8004584:	40000400 	.word	0x40000400
 8004588:	40000800 	.word	0x40000800
 800458c:	40000c00 	.word	0x40000c00
 8004590:	40001000 	.word	0x40001000
 8004594:	40010400 	.word	0x40010400
 8004598:	40014000 	.word	0x40014000

0800459c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08e      	sub	sp, #56	; 0x38
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	605a      	str	r2, [r3, #4]
 80045ae:	609a      	str	r2, [r3, #8]
 80045b0:	60da      	str	r2, [r3, #12]
 80045b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a67      	ldr	r2, [pc, #412]	; (8004758 <HAL_TIM_MspPostInit+0x1bc>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d11f      	bne.n	80045fe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045be:	2300      	movs	r3, #0
 80045c0:	623b      	str	r3, [r7, #32]
 80045c2:	4b66      	ldr	r3, [pc, #408]	; (800475c <HAL_TIM_MspPostInit+0x1c0>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	4a65      	ldr	r2, [pc, #404]	; (800475c <HAL_TIM_MspPostInit+0x1c0>)
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	6313      	str	r3, [r2, #48]	; 0x30
 80045ce:	4b63      	ldr	r3, [pc, #396]	; (800475c <HAL_TIM_MspPostInit+0x1c0>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	623b      	str	r3, [r7, #32]
 80045d8:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = L_GamingG_Pin|L_GamingR_Pin|L_GamingB_Pin;
 80045da:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80045de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e0:	2302      	movs	r3, #2
 80045e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e4:	2300      	movs	r3, #0
 80045e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045e8:	2300      	movs	r3, #0
 80045ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80045ec:	2301      	movs	r3, #1
 80045ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045f4:	4619      	mov	r1, r3
 80045f6:	485a      	ldr	r0, [pc, #360]	; (8004760 <HAL_TIM_MspPostInit+0x1c4>)
 80045f8:	f001 f882 	bl	8005700 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80045fc:	e0a8      	b.n	8004750 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM2)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004606:	d13d      	bne.n	8004684 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004608:	2300      	movs	r3, #0
 800460a:	61fb      	str	r3, [r7, #28]
 800460c:	4b53      	ldr	r3, [pc, #332]	; (800475c <HAL_TIM_MspPostInit+0x1c0>)
 800460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004610:	4a52      	ldr	r2, [pc, #328]	; (800475c <HAL_TIM_MspPostInit+0x1c0>)
 8004612:	f043 0301 	orr.w	r3, r3, #1
 8004616:	6313      	str	r3, [r2, #48]	; 0x30
 8004618:	4b50      	ldr	r3, [pc, #320]	; (800475c <HAL_TIM_MspPostInit+0x1c0>)
 800461a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	61fb      	str	r3, [r7, #28]
 8004622:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004624:	2300      	movs	r3, #0
 8004626:	61bb      	str	r3, [r7, #24]
 8004628:	4b4c      	ldr	r3, [pc, #304]	; (800475c <HAL_TIM_MspPostInit+0x1c0>)
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	4a4b      	ldr	r2, [pc, #300]	; (800475c <HAL_TIM_MspPostInit+0x1c0>)
 800462e:	f043 0302 	orr.w	r3, r3, #2
 8004632:	6313      	str	r3, [r2, #48]	; 0x30
 8004634:	4b49      	ldr	r3, [pc, #292]	; (800475c <HAL_TIM_MspPostInit+0x1c0>)
 8004636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	61bb      	str	r3, [r7, #24]
 800463e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = S_Parcela_Pin|S_Garaje_Pin;
 8004640:	2303      	movs	r3, #3
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004644:	2302      	movs	r3, #2
 8004646:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004648:	2300      	movs	r3, #0
 800464a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800464c:	2300      	movs	r3, #0
 800464e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004650:	2301      	movs	r3, #1
 8004652:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004658:	4619      	mov	r1, r3
 800465a:	4841      	ldr	r0, [pc, #260]	; (8004760 <HAL_TIM_MspPostInit+0x1c4>)
 800465c:	f001 f850 	bl	8005700 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S_Tendedero_Pin;
 8004660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004666:	2302      	movs	r3, #2
 8004668:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800466a:	2300      	movs	r3, #0
 800466c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800466e:	2300      	movs	r3, #0
 8004670:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004672:	2301      	movs	r3, #1
 8004674:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(S_Tendedero_GPIO_Port, &GPIO_InitStruct);
 8004676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800467a:	4619      	mov	r1, r3
 800467c:	4839      	ldr	r0, [pc, #228]	; (8004764 <HAL_TIM_MspPostInit+0x1c8>)
 800467e:	f001 f83f 	bl	8005700 <HAL_GPIO_Init>
}
 8004682:	e065      	b.n	8004750 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM3)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a37      	ldr	r2, [pc, #220]	; (8004768 <HAL_TIM_MspPostInit+0x1cc>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d13d      	bne.n	800470a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	4b32      	ldr	r3, [pc, #200]	; (800475c <HAL_TIM_MspPostInit+0x1c0>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	4a31      	ldr	r2, [pc, #196]	; (800475c <HAL_TIM_MspPostInit+0x1c0>)
 8004698:	f043 0301 	orr.w	r3, r3, #1
 800469c:	6313      	str	r3, [r2, #48]	; 0x30
 800469e:	4b2f      	ldr	r3, [pc, #188]	; (800475c <HAL_TIM_MspPostInit+0x1c0>)
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046aa:	2300      	movs	r3, #0
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	4b2b      	ldr	r3, [pc, #172]	; (800475c <HAL_TIM_MspPostInit+0x1c0>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	4a2a      	ldr	r2, [pc, #168]	; (800475c <HAL_TIM_MspPostInit+0x1c0>)
 80046b4:	f043 0304 	orr.w	r3, r3, #4
 80046b8:	6313      	str	r3, [r2, #48]	; 0x30
 80046ba:	4b28      	ldr	r3, [pc, #160]	; (800475c <HAL_TIM_MspPostInit+0x1c0>)
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	f003 0304 	and.w	r3, r3, #4
 80046c2:	613b      	str	r3, [r7, #16]
 80046c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = S_Dormitorio_Pin;
 80046c6:	2380      	movs	r3, #128	; 0x80
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ca:	2302      	movs	r3, #2
 80046cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046d2:	2300      	movs	r3, #0
 80046d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80046d6:	2302      	movs	r3, #2
 80046d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(S_Dormitorio_GPIO_Port, &GPIO_InitStruct);
 80046da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046de:	4619      	mov	r1, r3
 80046e0:	481f      	ldr	r0, [pc, #124]	; (8004760 <HAL_TIM_MspPostInit+0x1c4>)
 80046e2:	f001 f80d 	bl	8005700 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S_Oficina_Pin|S_Salon_Pin;
 80046e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80046ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ec:	2302      	movs	r3, #2
 80046ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046f4:	2300      	movs	r3, #0
 80046f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80046f8:	2302      	movs	r3, #2
 80046fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004700:	4619      	mov	r1, r3
 8004702:	481a      	ldr	r0, [pc, #104]	; (800476c <HAL_TIM_MspPostInit+0x1d0>)
 8004704:	f000 fffc 	bl	8005700 <HAL_GPIO_Init>
}
 8004708:	e022      	b.n	8004750 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM9)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a18      	ldr	r2, [pc, #96]	; (8004770 <HAL_TIM_MspPostInit+0x1d4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d11d      	bne.n	8004750 <HAL_TIM_MspPostInit+0x1b4>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004714:	2300      	movs	r3, #0
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	4b10      	ldr	r3, [pc, #64]	; (800475c <HAL_TIM_MspPostInit+0x1c0>)
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	4a0f      	ldr	r2, [pc, #60]	; (800475c <HAL_TIM_MspPostInit+0x1c0>)
 800471e:	f043 0310 	orr.w	r3, r3, #16
 8004722:	6313      	str	r3, [r2, #48]	; 0x30
 8004724:	4b0d      	ldr	r3, [pc, #52]	; (800475c <HAL_TIM_MspPostInit+0x1c0>)
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	f003 0310 	and.w	r3, r3, #16
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004730:	2320      	movs	r3, #32
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004734:	2302      	movs	r3, #2
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004738:	2300      	movs	r3, #0
 800473a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800473c:	2300      	movs	r3, #0
 800473e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8004740:	2303      	movs	r3, #3
 8004742:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004748:	4619      	mov	r1, r3
 800474a:	480a      	ldr	r0, [pc, #40]	; (8004774 <HAL_TIM_MspPostInit+0x1d8>)
 800474c:	f000 ffd8 	bl	8005700 <HAL_GPIO_Init>
}
 8004750:	bf00      	nop
 8004752:	3738      	adds	r7, #56	; 0x38
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40010000 	.word	0x40010000
 800475c:	40023800 	.word	0x40023800
 8004760:	40020000 	.word	0x40020000
 8004764:	40020400 	.word	0x40020400
 8004768:	40000400 	.word	0x40000400
 800476c:	40020800 	.word	0x40020800
 8004770:	40014000 	.word	0x40014000
 8004774:	40021000 	.word	0x40021000

08004778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b08e      	sub	sp, #56	; 0x38
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	605a      	str	r2, [r3, #4]
 800478a:	609a      	str	r2, [r3, #8]
 800478c:	60da      	str	r2, [r3, #12]
 800478e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a63      	ldr	r2, [pc, #396]	; (8004924 <HAL_UART_MspInit+0x1ac>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d134      	bne.n	8004804 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800479a:	2300      	movs	r3, #0
 800479c:	623b      	str	r3, [r7, #32]
 800479e:	4b62      	ldr	r3, [pc, #392]	; (8004928 <HAL_UART_MspInit+0x1b0>)
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	4a61      	ldr	r2, [pc, #388]	; (8004928 <HAL_UART_MspInit+0x1b0>)
 80047a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a8:	6413      	str	r3, [r2, #64]	; 0x40
 80047aa:	4b5f      	ldr	r3, [pc, #380]	; (8004928 <HAL_UART_MspInit+0x1b0>)
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b2:	623b      	str	r3, [r7, #32]
 80047b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047b6:	2300      	movs	r3, #0
 80047b8:	61fb      	str	r3, [r7, #28]
 80047ba:	4b5b      	ldr	r3, [pc, #364]	; (8004928 <HAL_UART_MspInit+0x1b0>)
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	4a5a      	ldr	r2, [pc, #360]	; (8004928 <HAL_UART_MspInit+0x1b0>)
 80047c0:	f043 0301 	orr.w	r3, r3, #1
 80047c4:	6313      	str	r3, [r2, #48]	; 0x30
 80047c6:	4b58      	ldr	r3, [pc, #352]	; (8004928 <HAL_UART_MspInit+0x1b0>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	61fb      	str	r3, [r7, #28]
 80047d0:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80047d2:	230c      	movs	r3, #12
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d6:	2302      	movs	r3, #2
 80047d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047da:	2300      	movs	r3, #0
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047de:	2303      	movs	r3, #3
 80047e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80047e2:	2307      	movs	r3, #7
 80047e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047ea:	4619      	mov	r1, r3
 80047ec:	484f      	ldr	r0, [pc, #316]	; (800492c <HAL_UART_MspInit+0x1b4>)
 80047ee:	f000 ff87 	bl	8005700 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80047f2:	2200      	movs	r2, #0
 80047f4:	2100      	movs	r1, #0
 80047f6:	2026      	movs	r0, #38	; 0x26
 80047f8:	f000 feb9 	bl	800556e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80047fc:	2026      	movs	r0, #38	; 0x26
 80047fe:	f000 fed2 	bl	80055a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004802:	e08a      	b.n	800491a <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART3)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a49      	ldr	r2, [pc, #292]	; (8004930 <HAL_UART_MspInit+0x1b8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d14c      	bne.n	80048a8 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART3_CLK_ENABLE();
 800480e:	2300      	movs	r3, #0
 8004810:	61bb      	str	r3, [r7, #24]
 8004812:	4b45      	ldr	r3, [pc, #276]	; (8004928 <HAL_UART_MspInit+0x1b0>)
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	4a44      	ldr	r2, [pc, #272]	; (8004928 <HAL_UART_MspInit+0x1b0>)
 8004818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800481c:	6413      	str	r3, [r2, #64]	; 0x40
 800481e:	4b42      	ldr	r3, [pc, #264]	; (8004928 <HAL_UART_MspInit+0x1b0>)
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004826:	61bb      	str	r3, [r7, #24]
 8004828:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800482a:	2300      	movs	r3, #0
 800482c:	617b      	str	r3, [r7, #20]
 800482e:	4b3e      	ldr	r3, [pc, #248]	; (8004928 <HAL_UART_MspInit+0x1b0>)
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	4a3d      	ldr	r2, [pc, #244]	; (8004928 <HAL_UART_MspInit+0x1b0>)
 8004834:	f043 0302 	orr.w	r3, r3, #2
 8004838:	6313      	str	r3, [r2, #48]	; 0x30
 800483a:	4b3b      	ldr	r3, [pc, #236]	; (8004928 <HAL_UART_MspInit+0x1b0>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004846:	2300      	movs	r3, #0
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	4b37      	ldr	r3, [pc, #220]	; (8004928 <HAL_UART_MspInit+0x1b0>)
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	4a36      	ldr	r2, [pc, #216]	; (8004928 <HAL_UART_MspInit+0x1b0>)
 8004850:	f043 0308 	orr.w	r3, r3, #8
 8004854:	6313      	str	r3, [r2, #48]	; 0x30
 8004856:	4b34      	ldr	r3, [pc, #208]	; (8004928 <HAL_UART_MspInit+0x1b0>)
 8004858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004862:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004866:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004868:	2302      	movs	r3, #2
 800486a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486c:	2300      	movs	r3, #0
 800486e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004870:	2303      	movs	r3, #3
 8004872:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004874:	2307      	movs	r3, #7
 8004876:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800487c:	4619      	mov	r1, r3
 800487e:	482d      	ldr	r0, [pc, #180]	; (8004934 <HAL_UART_MspInit+0x1bc>)
 8004880:	f000 ff3e 	bl	8005700 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004884:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004888:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800488a:	2302      	movs	r3, #2
 800488c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488e:	2300      	movs	r3, #0
 8004890:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004892:	2303      	movs	r3, #3
 8004894:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004896:	2307      	movs	r3, #7
 8004898:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800489a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800489e:	4619      	mov	r1, r3
 80048a0:	4825      	ldr	r0, [pc, #148]	; (8004938 <HAL_UART_MspInit+0x1c0>)
 80048a2:	f000 ff2d 	bl	8005700 <HAL_GPIO_Init>
}
 80048a6:	e038      	b.n	800491a <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART6)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a23      	ldr	r2, [pc, #140]	; (800493c <HAL_UART_MspInit+0x1c4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d133      	bne.n	800491a <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80048b2:	2300      	movs	r3, #0
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	4b1c      	ldr	r3, [pc, #112]	; (8004928 <HAL_UART_MspInit+0x1b0>)
 80048b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ba:	4a1b      	ldr	r2, [pc, #108]	; (8004928 <HAL_UART_MspInit+0x1b0>)
 80048bc:	f043 0320 	orr.w	r3, r3, #32
 80048c0:	6453      	str	r3, [r2, #68]	; 0x44
 80048c2:	4b19      	ldr	r3, [pc, #100]	; (8004928 <HAL_UART_MspInit+0x1b0>)
 80048c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048ce:	2300      	movs	r3, #0
 80048d0:	60bb      	str	r3, [r7, #8]
 80048d2:	4b15      	ldr	r3, [pc, #84]	; (8004928 <HAL_UART_MspInit+0x1b0>)
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	4a14      	ldr	r2, [pc, #80]	; (8004928 <HAL_UART_MspInit+0x1b0>)
 80048d8:	f043 0304 	orr.w	r3, r3, #4
 80048dc:	6313      	str	r3, [r2, #48]	; 0x30
 80048de:	4b12      	ldr	r3, [pc, #72]	; (8004928 <HAL_UART_MspInit+0x1b0>)
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	60bb      	str	r3, [r7, #8]
 80048e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80048ea:	23c0      	movs	r3, #192	; 0xc0
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ee:	2302      	movs	r3, #2
 80048f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048f6:	2303      	movs	r3, #3
 80048f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80048fa:	2308      	movs	r3, #8
 80048fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004902:	4619      	mov	r1, r3
 8004904:	480e      	ldr	r0, [pc, #56]	; (8004940 <HAL_UART_MspInit+0x1c8>)
 8004906:	f000 fefb 	bl	8005700 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800490a:	2200      	movs	r2, #0
 800490c:	2100      	movs	r1, #0
 800490e:	2047      	movs	r0, #71	; 0x47
 8004910:	f000 fe2d 	bl	800556e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004914:	2047      	movs	r0, #71	; 0x47
 8004916:	f000 fe46 	bl	80055a6 <HAL_NVIC_EnableIRQ>
}
 800491a:	bf00      	nop
 800491c:	3738      	adds	r7, #56	; 0x38
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	40004400 	.word	0x40004400
 8004928:	40023800 	.word	0x40023800
 800492c:	40020000 	.word	0x40020000
 8004930:	40004800 	.word	0x40004800
 8004934:	40020400 	.word	0x40020400
 8004938:	40020c00 	.word	0x40020c00
 800493c:	40011400 	.word	0x40011400
 8004940:	40020800 	.word	0x40020800

08004944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004948:	e7fe      	b.n	8004948 <NMI_Handler+0x4>

0800494a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800494a:	b480      	push	{r7}
 800494c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800494e:	e7fe      	b.n	800494e <HardFault_Handler+0x4>

08004950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004954:	e7fe      	b.n	8004954 <MemManage_Handler+0x4>

08004956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004956:	b480      	push	{r7}
 8004958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800495a:	e7fe      	b.n	800495a <BusFault_Handler+0x4>

0800495c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004960:	e7fe      	b.n	8004960 <UsageFault_Handler+0x4>

08004962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004962:	b480      	push	{r7}
 8004964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004966:	bf00      	nop
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004974:	bf00      	nop
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800497e:	b480      	push	{r7}
 8004980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004982:	bf00      	nop
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004990:	f000 f902 	bl	8004b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004994:	bf00      	nop
 8004996:	bd80      	pop	{r7, pc}

08004998 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800499c:	2001      	movs	r0, #1
 800499e:	f001 f87d 	bl	8005a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80049a2:	bf00      	nop
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80049aa:	2002      	movs	r0, #2
 80049ac:	f001 f876 	bl	8005a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80049b0:	bf00      	nop
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80049b8:	2008      	movs	r0, #8
 80049ba:	f001 f86f 	bl	8005a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80049be:	bf00      	nop
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80049c6:	2010      	movs	r0, #16
 80049c8:	f001 f868 	bl	8005a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80049cc:	bf00      	nop
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80049d4:	2040      	movs	r0, #64	; 0x40
 80049d6:	f001 f861 	bl	8005a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80049da:	bf00      	nop
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UART_isr(&huart2);
 80049e4:	4803      	ldr	r0, [pc, #12]	; (80049f4 <USART2_IRQHandler+0x14>)
 80049e6:	f7fe f947 	bl	8002c78 <UART_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80049ea:	4802      	ldr	r0, [pc, #8]	; (80049f4 <USART2_IRQHandler+0x14>)
 80049ec:	f002 fda6 	bl	800753c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80049f0:	bf00      	nop
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	20000e0c 	.word	0x20000e0c

080049f8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	UART_isr(&huart6);
 80049fc:	4803      	ldr	r0, [pc, #12]	; (8004a0c <USART6_IRQHandler+0x14>)
 80049fe:	f7fe f93b 	bl	8002c78 <UART_isr>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004a02:	4802      	ldr	r0, [pc, #8]	; (8004a0c <USART6_IRQHandler+0x14>)
 8004a04:	f002 fd9a 	bl	800753c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004a08:	bf00      	nop
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	20000d80 	.word	0x20000d80

08004a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a18:	4a14      	ldr	r2, [pc, #80]	; (8004a6c <_sbrk+0x5c>)
 8004a1a:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <_sbrk+0x60>)
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a24:	4b13      	ldr	r3, [pc, #76]	; (8004a74 <_sbrk+0x64>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d102      	bne.n	8004a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a2c:	4b11      	ldr	r3, [pc, #68]	; (8004a74 <_sbrk+0x64>)
 8004a2e:	4a12      	ldr	r2, [pc, #72]	; (8004a78 <_sbrk+0x68>)
 8004a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a32:	4b10      	ldr	r3, [pc, #64]	; (8004a74 <_sbrk+0x64>)
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4413      	add	r3, r2
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d207      	bcs.n	8004a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a40:	f003 fc04 	bl	800824c <__errno>
 8004a44:	4603      	mov	r3, r0
 8004a46:	220c      	movs	r2, #12
 8004a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a4e:	e009      	b.n	8004a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a50:	4b08      	ldr	r3, [pc, #32]	; (8004a74 <_sbrk+0x64>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a56:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <_sbrk+0x64>)
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	4a05      	ldr	r2, [pc, #20]	; (8004a74 <_sbrk+0x64>)
 8004a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a62:	68fb      	ldr	r3, [r7, #12]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	20020000 	.word	0x20020000
 8004a70:	00000400 	.word	0x00000400
 8004a74:	200008f4 	.word	0x200008f4
 8004a78:	20000e70 	.word	0x20000e70

08004a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a80:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <SystemInit+0x20>)
 8004a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a86:	4a05      	ldr	r2, [pc, #20]	; (8004a9c <SystemInit+0x20>)
 8004a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a90:	bf00      	nop
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	e000ed00 	.word	0xe000ed00

08004aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ad8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004aa4:	480d      	ldr	r0, [pc, #52]	; (8004adc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004aa6:	490e      	ldr	r1, [pc, #56]	; (8004ae0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004aa8:	4a0e      	ldr	r2, [pc, #56]	; (8004ae4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004aac:	e002      	b.n	8004ab4 <LoopCopyDataInit>

08004aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ab2:	3304      	adds	r3, #4

08004ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ab8:	d3f9      	bcc.n	8004aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004aba:	4a0b      	ldr	r2, [pc, #44]	; (8004ae8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004abc:	4c0b      	ldr	r4, [pc, #44]	; (8004aec <LoopFillZerobss+0x26>)
  movs r3, #0
 8004abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ac0:	e001      	b.n	8004ac6 <LoopFillZerobss>

08004ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ac4:	3204      	adds	r2, #4

08004ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ac8:	d3fb      	bcc.n	8004ac2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004aca:	f7ff ffd7 	bl	8004a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ace:	f003 fbc3 	bl	8008258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ad2:	f7fe fa6d 	bl	8002fb0 <main>
  bx  lr    
 8004ad6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004ad8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ae0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8004ae4:	080093b4 	.word	0x080093b4
  ldr r2, =_sbss
 8004ae8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004aec:	20000e6c 	.word	0x20000e6c

08004af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004af0:	e7fe      	b.n	8004af0 <ADC_IRQHandler>
	...

08004af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004af8:	4b0e      	ldr	r3, [pc, #56]	; (8004b34 <HAL_Init+0x40>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a0d      	ldr	r2, [pc, #52]	; (8004b34 <HAL_Init+0x40>)
 8004afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b04:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <HAL_Init+0x40>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a0a      	ldr	r2, [pc, #40]	; (8004b34 <HAL_Init+0x40>)
 8004b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b10:	4b08      	ldr	r3, [pc, #32]	; (8004b34 <HAL_Init+0x40>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a07      	ldr	r2, [pc, #28]	; (8004b34 <HAL_Init+0x40>)
 8004b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b1c:	2003      	movs	r0, #3
 8004b1e:	f000 fd1b 	bl	8005558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b22:	2000      	movs	r0, #0
 8004b24:	f000 f808 	bl	8004b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b28:	f7ff fbae 	bl	8004288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40023c00 	.word	0x40023c00

08004b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b40:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <HAL_InitTick+0x54>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	4b12      	ldr	r3, [pc, #72]	; (8004b90 <HAL_InitTick+0x58>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	4619      	mov	r1, r3
 8004b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fd33 	bl	80055c2 <HAL_SYSTICK_Config>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e00e      	b.n	8004b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b0f      	cmp	r3, #15
 8004b6a:	d80a      	bhi.n	8004b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	6879      	ldr	r1, [r7, #4]
 8004b70:	f04f 30ff 	mov.w	r0, #4294967295
 8004b74:	f000 fcfb 	bl	800556e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b78:	4a06      	ldr	r2, [pc, #24]	; (8004b94 <HAL_InitTick+0x5c>)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	e000      	b.n	8004b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	20000000 	.word	0x20000000
 8004b90:	20000008 	.word	0x20000008
 8004b94:	20000004 	.word	0x20000004

08004b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b9c:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <HAL_IncTick+0x20>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <HAL_IncTick+0x24>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	4a04      	ldr	r2, [pc, #16]	; (8004bbc <HAL_IncTick+0x24>)
 8004baa:	6013      	str	r3, [r2, #0]
}
 8004bac:	bf00      	nop
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	20000008 	.word	0x20000008
 8004bbc:	20000e58 	.word	0x20000e58

08004bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8004bc4:	4b03      	ldr	r3, [pc, #12]	; (8004bd4 <HAL_GetTick+0x14>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20000e58 	.word	0x20000e58

08004bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004be0:	f7ff ffee 	bl	8004bc0 <HAL_GetTick>
 8004be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf0:	d005      	beq.n	8004bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <HAL_Delay+0x44>)
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004bfe:	bf00      	nop
 8004c00:	f7ff ffde 	bl	8004bc0 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d8f7      	bhi.n	8004c00 <HAL_Delay+0x28>
  {
  }
}
 8004c10:	bf00      	nop
 8004c12:	bf00      	nop
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000008 	.word	0x20000008

08004c20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e033      	b.n	8004c9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d109      	bne.n	8004c52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7ff fb4a 	bl	80042d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	f003 0310 	and.w	r3, r3, #16
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d118      	bne.n	8004c90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c66:	f023 0302 	bic.w	r3, r3, #2
 8004c6a:	f043 0202 	orr.w	r2, r3, #2
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 faa4 	bl	80051c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	f023 0303 	bic.w	r3, r3, #3
 8004c86:	f043 0201 	orr.w	r2, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	641a      	str	r2, [r3, #64]	; 0x40
 8004c8e:	e001      	b.n	8004c94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
	...

08004ca8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d101      	bne.n	8004cc2 <HAL_ADC_Start+0x1a>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	e0b2      	b.n	8004e28 <HAL_ADC_Start+0x180>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d018      	beq.n	8004d0a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004ce8:	4b52      	ldr	r3, [pc, #328]	; (8004e34 <HAL_ADC_Start+0x18c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a52      	ldr	r2, [pc, #328]	; (8004e38 <HAL_ADC_Start+0x190>)
 8004cee:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf2:	0c9a      	lsrs	r2, r3, #18
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	4413      	add	r3, r2
 8004cfa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004cfc:	e002      	b.n	8004d04 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f9      	bne.n	8004cfe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d17a      	bne.n	8004e0e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004d20:	f023 0301 	bic.w	r3, r3, #1
 8004d24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d007      	beq.n	8004d4a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d56:	d106      	bne.n	8004d66 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5c:	f023 0206 	bic.w	r2, r3, #6
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	645a      	str	r2, [r3, #68]	; 0x44
 8004d64:	e002      	b.n	8004d6c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d74:	4b31      	ldr	r3, [pc, #196]	; (8004e3c <HAL_ADC_Start+0x194>)
 8004d76:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004d80:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f003 031f 	and.w	r3, r3, #31
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d12a      	bne.n	8004de4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a2b      	ldr	r2, [pc, #172]	; (8004e40 <HAL_ADC_Start+0x198>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d015      	beq.n	8004dc4 <HAL_ADC_Start+0x11c>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a29      	ldr	r2, [pc, #164]	; (8004e44 <HAL_ADC_Start+0x19c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d105      	bne.n	8004dae <HAL_ADC_Start+0x106>
 8004da2:	4b26      	ldr	r3, [pc, #152]	; (8004e3c <HAL_ADC_Start+0x194>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f003 031f 	and.w	r3, r3, #31
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a25      	ldr	r2, [pc, #148]	; (8004e48 <HAL_ADC_Start+0x1a0>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d136      	bne.n	8004e26 <HAL_ADC_Start+0x17e>
 8004db8:	4b20      	ldr	r3, [pc, #128]	; (8004e3c <HAL_ADC_Start+0x194>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f003 0310 	and.w	r3, r3, #16
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d130      	bne.n	8004e26 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d129      	bne.n	8004e26 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004de0:	609a      	str	r2, [r3, #8]
 8004de2:	e020      	b.n	8004e26 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a15      	ldr	r2, [pc, #84]	; (8004e40 <HAL_ADC_Start+0x198>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d11b      	bne.n	8004e26 <HAL_ADC_Start+0x17e>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d114      	bne.n	8004e26 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e0a:	609a      	str	r2, [r3, #8]
 8004e0c:	e00b      	b.n	8004e26 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	f043 0210 	orr.w	r2, r3, #16
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1e:	f043 0201 	orr.w	r2, r3, #1
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	20000000 	.word	0x20000000
 8004e38:	431bde83 	.word	0x431bde83
 8004e3c:	40012300 	.word	0x40012300
 8004e40:	40012000 	.word	0x40012000
 8004e44:	40012100 	.word	0x40012100
 8004e48:	40012200 	.word	0x40012200

08004e4c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e68:	d113      	bne.n	8004e92 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e78:	d10b      	bne.n	8004e92 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	f043 0220 	orr.w	r2, r3, #32
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e063      	b.n	8004f5a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004e92:	f7ff fe95 	bl	8004bc0 <HAL_GetTick>
 8004e96:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004e98:	e021      	b.n	8004ede <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea0:	d01d      	beq.n	8004ede <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d007      	beq.n	8004eb8 <HAL_ADC_PollForConversion+0x6c>
 8004ea8:	f7ff fe8a 	bl	8004bc0 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d212      	bcs.n	8004ede <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d00b      	beq.n	8004ede <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f043 0204 	orr.w	r2, r3, #4
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e03d      	b.n	8004f5a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d1d6      	bne.n	8004e9a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0212 	mvn.w	r2, #18
 8004ef4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d123      	bne.n	8004f58 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d11f      	bne.n	8004f58 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d006      	beq.n	8004f34 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d111      	bne.n	8004f58 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d105      	bne.n	8004f58 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	f043 0201 	orr.w	r2, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_ADC_ConfigChannel+0x1c>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e105      	b.n	80051a4 <HAL_ADC_ConfigChannel+0x228>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b09      	cmp	r3, #9
 8004fa6:	d925      	bls.n	8004ff4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68d9      	ldr	r1, [r3, #12]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	4413      	add	r3, r2
 8004fbc:	3b1e      	subs	r3, #30
 8004fbe:	2207      	movs	r2, #7
 8004fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc4:	43da      	mvns	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	400a      	ands	r2, r1
 8004fcc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68d9      	ldr	r1, [r3, #12]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	4618      	mov	r0, r3
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	4403      	add	r3, r0
 8004fe6:	3b1e      	subs	r3, #30
 8004fe8:	409a      	lsls	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	60da      	str	r2, [r3, #12]
 8004ff2:	e022      	b.n	800503a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6919      	ldr	r1, [r3, #16]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	461a      	mov	r2, r3
 8005002:	4613      	mov	r3, r2
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	4413      	add	r3, r2
 8005008:	2207      	movs	r2, #7
 800500a:	fa02 f303 	lsl.w	r3, r2, r3
 800500e:	43da      	mvns	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	400a      	ands	r2, r1
 8005016:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6919      	ldr	r1, [r3, #16]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	b29b      	uxth	r3, r3
 8005028:	4618      	mov	r0, r3
 800502a:	4603      	mov	r3, r0
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	4403      	add	r3, r0
 8005030:	409a      	lsls	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b06      	cmp	r3, #6
 8005040:	d824      	bhi.n	800508c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	4613      	mov	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	3b05      	subs	r3, #5
 8005054:	221f      	movs	r2, #31
 8005056:	fa02 f303 	lsl.w	r3, r2, r3
 800505a:	43da      	mvns	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	400a      	ands	r2, r1
 8005062:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	b29b      	uxth	r3, r3
 8005070:	4618      	mov	r0, r3
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	4613      	mov	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	3b05      	subs	r3, #5
 800507e:	fa00 f203 	lsl.w	r2, r0, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	635a      	str	r2, [r3, #52]	; 0x34
 800508a:	e04c      	b.n	8005126 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2b0c      	cmp	r3, #12
 8005092:	d824      	bhi.n	80050de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	4613      	mov	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	3b23      	subs	r3, #35	; 0x23
 80050a6:	221f      	movs	r2, #31
 80050a8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ac:	43da      	mvns	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	400a      	ands	r2, r1
 80050b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	4618      	mov	r0, r3
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	4613      	mov	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	3b23      	subs	r3, #35	; 0x23
 80050d0:	fa00 f203 	lsl.w	r2, r0, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	631a      	str	r2, [r3, #48]	; 0x30
 80050dc:	e023      	b.n	8005126 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	4613      	mov	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	3b41      	subs	r3, #65	; 0x41
 80050f0:	221f      	movs	r2, #31
 80050f2:	fa02 f303 	lsl.w	r3, r2, r3
 80050f6:	43da      	mvns	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	400a      	ands	r2, r1
 80050fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	b29b      	uxth	r3, r3
 800510c:	4618      	mov	r0, r3
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	4613      	mov	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	3b41      	subs	r3, #65	; 0x41
 800511a:	fa00 f203 	lsl.w	r2, r0, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005126:	4b22      	ldr	r3, [pc, #136]	; (80051b0 <HAL_ADC_ConfigChannel+0x234>)
 8005128:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a21      	ldr	r2, [pc, #132]	; (80051b4 <HAL_ADC_ConfigChannel+0x238>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d109      	bne.n	8005148 <HAL_ADC_ConfigChannel+0x1cc>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b12      	cmp	r3, #18
 800513a:	d105      	bne.n	8005148 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a19      	ldr	r2, [pc, #100]	; (80051b4 <HAL_ADC_ConfigChannel+0x238>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d123      	bne.n	800519a <HAL_ADC_ConfigChannel+0x21e>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b10      	cmp	r3, #16
 8005158:	d003      	beq.n	8005162 <HAL_ADC_ConfigChannel+0x1e6>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b11      	cmp	r3, #17
 8005160:	d11b      	bne.n	800519a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b10      	cmp	r3, #16
 8005174:	d111      	bne.n	800519a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005176:	4b10      	ldr	r3, [pc, #64]	; (80051b8 <HAL_ADC_ConfigChannel+0x23c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a10      	ldr	r2, [pc, #64]	; (80051bc <HAL_ADC_ConfigChannel+0x240>)
 800517c:	fba2 2303 	umull	r2, r3, r2, r3
 8005180:	0c9a      	lsrs	r2, r3, #18
 8005182:	4613      	mov	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800518c:	e002      	b.n	8005194 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	3b01      	subs	r3, #1
 8005192:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1f9      	bne.n	800518e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	40012300 	.word	0x40012300
 80051b4:	40012000 	.word	0x40012000
 80051b8:	20000000 	.word	0x20000000
 80051bc:	431bde83 	.word	0x431bde83

080051c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051c8:	4b79      	ldr	r3, [pc, #484]	; (80053b0 <ADC_Init+0x1f0>)
 80051ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	431a      	orrs	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6859      	ldr	r1, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	021a      	lsls	r2, r3, #8
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005218:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6859      	ldr	r1, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800523a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6899      	ldr	r1, [r3, #8]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68da      	ldr	r2, [r3, #12]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005252:	4a58      	ldr	r2, [pc, #352]	; (80053b4 <ADC_Init+0x1f4>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d022      	beq.n	800529e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689a      	ldr	r2, [r3, #8]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005266:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6899      	ldr	r1, [r3, #8]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005288:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6899      	ldr	r1, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	609a      	str	r2, [r3, #8]
 800529c:	e00f      	b.n	80052be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80052bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0202 	bic.w	r2, r2, #2
 80052cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6899      	ldr	r1, [r3, #8]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	7e1b      	ldrb	r3, [r3, #24]
 80052d8:	005a      	lsls	r2, r3, #1
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01b      	beq.n	8005324 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800530a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6859      	ldr	r1, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	3b01      	subs	r3, #1
 8005318:	035a      	lsls	r2, r3, #13
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]
 8005322:	e007      	b.n	8005334 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005332:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005342:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	3b01      	subs	r3, #1
 8005350:	051a      	lsls	r2, r3, #20
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005368:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6899      	ldr	r1, [r3, #8]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005376:	025a      	lsls	r2, r3, #9
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800538e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6899      	ldr	r1, [r3, #8]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	029a      	lsls	r2, r3, #10
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	609a      	str	r2, [r3, #8]
}
 80053a4:	bf00      	nop
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	40012300 	.word	0x40012300
 80053b4:	0f000001 	.word	0x0f000001

080053b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053c8:	4b0c      	ldr	r3, [pc, #48]	; (80053fc <__NVIC_SetPriorityGrouping+0x44>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053d4:	4013      	ands	r3, r2
 80053d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053ea:	4a04      	ldr	r2, [pc, #16]	; (80053fc <__NVIC_SetPriorityGrouping+0x44>)
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	60d3      	str	r3, [r2, #12]
}
 80053f0:	bf00      	nop
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	e000ed00 	.word	0xe000ed00

08005400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005404:	4b04      	ldr	r3, [pc, #16]	; (8005418 <__NVIC_GetPriorityGrouping+0x18>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	0a1b      	lsrs	r3, r3, #8
 800540a:	f003 0307 	and.w	r3, r3, #7
}
 800540e:	4618      	mov	r0, r3
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	e000ed00 	.word	0xe000ed00

0800541c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	4603      	mov	r3, r0
 8005424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800542a:	2b00      	cmp	r3, #0
 800542c:	db0b      	blt.n	8005446 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800542e:	79fb      	ldrb	r3, [r7, #7]
 8005430:	f003 021f 	and.w	r2, r3, #31
 8005434:	4907      	ldr	r1, [pc, #28]	; (8005454 <__NVIC_EnableIRQ+0x38>)
 8005436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	2001      	movs	r0, #1
 800543e:	fa00 f202 	lsl.w	r2, r0, r2
 8005442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	e000e100 	.word	0xe000e100

08005458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	4603      	mov	r3, r0
 8005460:	6039      	str	r1, [r7, #0]
 8005462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005468:	2b00      	cmp	r3, #0
 800546a:	db0a      	blt.n	8005482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	b2da      	uxtb	r2, r3
 8005470:	490c      	ldr	r1, [pc, #48]	; (80054a4 <__NVIC_SetPriority+0x4c>)
 8005472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005476:	0112      	lsls	r2, r2, #4
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	440b      	add	r3, r1
 800547c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005480:	e00a      	b.n	8005498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	b2da      	uxtb	r2, r3
 8005486:	4908      	ldr	r1, [pc, #32]	; (80054a8 <__NVIC_SetPriority+0x50>)
 8005488:	79fb      	ldrb	r3, [r7, #7]
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	3b04      	subs	r3, #4
 8005490:	0112      	lsls	r2, r2, #4
 8005492:	b2d2      	uxtb	r2, r2
 8005494:	440b      	add	r3, r1
 8005496:	761a      	strb	r2, [r3, #24]
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	e000e100 	.word	0xe000e100
 80054a8:	e000ed00 	.word	0xe000ed00

080054ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b089      	sub	sp, #36	; 0x24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	f1c3 0307 	rsb	r3, r3, #7
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	bf28      	it	cs
 80054ca:	2304      	movcs	r3, #4
 80054cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	3304      	adds	r3, #4
 80054d2:	2b06      	cmp	r3, #6
 80054d4:	d902      	bls.n	80054dc <NVIC_EncodePriority+0x30>
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	3b03      	subs	r3, #3
 80054da:	e000      	b.n	80054de <NVIC_EncodePriority+0x32>
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054e0:	f04f 32ff 	mov.w	r2, #4294967295
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ea:	43da      	mvns	r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	401a      	ands	r2, r3
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054f4:	f04f 31ff 	mov.w	r1, #4294967295
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	fa01 f303 	lsl.w	r3, r1, r3
 80054fe:	43d9      	mvns	r1, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005504:	4313      	orrs	r3, r2
         );
}
 8005506:	4618      	mov	r0, r3
 8005508:	3724      	adds	r7, #36	; 0x24
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
	...

08005514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3b01      	subs	r3, #1
 8005520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005524:	d301      	bcc.n	800552a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005526:	2301      	movs	r3, #1
 8005528:	e00f      	b.n	800554a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800552a:	4a0a      	ldr	r2, [pc, #40]	; (8005554 <SysTick_Config+0x40>)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3b01      	subs	r3, #1
 8005530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005532:	210f      	movs	r1, #15
 8005534:	f04f 30ff 	mov.w	r0, #4294967295
 8005538:	f7ff ff8e 	bl	8005458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800553c:	4b05      	ldr	r3, [pc, #20]	; (8005554 <SysTick_Config+0x40>)
 800553e:	2200      	movs	r2, #0
 8005540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005542:	4b04      	ldr	r3, [pc, #16]	; (8005554 <SysTick_Config+0x40>)
 8005544:	2207      	movs	r2, #7
 8005546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	e000e010 	.word	0xe000e010

08005558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7ff ff29 	bl	80053b8 <__NVIC_SetPriorityGrouping>
}
 8005566:	bf00      	nop
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800556e:	b580      	push	{r7, lr}
 8005570:	b086      	sub	sp, #24
 8005572:	af00      	add	r7, sp, #0
 8005574:	4603      	mov	r3, r0
 8005576:	60b9      	str	r1, [r7, #8]
 8005578:	607a      	str	r2, [r7, #4]
 800557a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005580:	f7ff ff3e 	bl	8005400 <__NVIC_GetPriorityGrouping>
 8005584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	68b9      	ldr	r1, [r7, #8]
 800558a:	6978      	ldr	r0, [r7, #20]
 800558c:	f7ff ff8e 	bl	80054ac <NVIC_EncodePriority>
 8005590:	4602      	mov	r2, r0
 8005592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005596:	4611      	mov	r1, r2
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff ff5d 	bl	8005458 <__NVIC_SetPriority>
}
 800559e:	bf00      	nop
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b082      	sub	sp, #8
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	4603      	mov	r3, r0
 80055ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7ff ff31 	bl	800541c <__NVIC_EnableIRQ>
}
 80055ba:	bf00      	nop
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b082      	sub	sp, #8
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff ffa2 	bl	8005514 <SysTick_Config>
 80055d0:	4603      	mov	r3, r0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b084      	sub	sp, #16
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80055e8:	f7ff faea 	bl	8004bc0 <HAL_GetTick>
 80055ec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d008      	beq.n	800560c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2280      	movs	r2, #128	; 0x80
 80055fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e052      	b.n	80056b2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0216 	bic.w	r2, r2, #22
 800561a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695a      	ldr	r2, [r3, #20]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800562a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	d103      	bne.n	800563c <HAL_DMA_Abort+0x62>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005638:	2b00      	cmp	r3, #0
 800563a:	d007      	beq.n	800564c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0208 	bic.w	r2, r2, #8
 800564a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0201 	bic.w	r2, r2, #1
 800565a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800565c:	e013      	b.n	8005686 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800565e:	f7ff faaf 	bl	8004bc0 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b05      	cmp	r3, #5
 800566a:	d90c      	bls.n	8005686 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2220      	movs	r2, #32
 8005670:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2203      	movs	r2, #3
 8005676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e015      	b.n	80056b2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1e4      	bne.n	800565e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005698:	223f      	movs	r2, #63	; 0x3f
 800569a:	409a      	lsls	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b083      	sub	sp, #12
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d004      	beq.n	80056d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2280      	movs	r2, #128	; 0x80
 80056d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e00c      	b.n	80056f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2205      	movs	r2, #5
 80056dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0201 	bic.w	r2, r2, #1
 80056ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
	...

08005700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005700:	b480      	push	{r7}
 8005702:	b089      	sub	sp, #36	; 0x24
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800570a:	2300      	movs	r3, #0
 800570c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800570e:	2300      	movs	r3, #0
 8005710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005712:	2300      	movs	r3, #0
 8005714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005716:	2300      	movs	r3, #0
 8005718:	61fb      	str	r3, [r7, #28]
 800571a:	e16b      	b.n	80059f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800571c:	2201      	movs	r2, #1
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	fa02 f303 	lsl.w	r3, r2, r3
 8005724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4013      	ands	r3, r2
 800572e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	429a      	cmp	r2, r3
 8005736:	f040 815a 	bne.w	80059ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f003 0303 	and.w	r3, r3, #3
 8005742:	2b01      	cmp	r3, #1
 8005744:	d005      	beq.n	8005752 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800574e:	2b02      	cmp	r3, #2
 8005750:	d130      	bne.n	80057b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	005b      	lsls	r3, r3, #1
 800575c:	2203      	movs	r2, #3
 800575e:	fa02 f303 	lsl.w	r3, r2, r3
 8005762:	43db      	mvns	r3, r3
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	4013      	ands	r3, r2
 8005768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	fa02 f303 	lsl.w	r3, r2, r3
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	4313      	orrs	r3, r2
 800577a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005788:	2201      	movs	r2, #1
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	43db      	mvns	r3, r3
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	4013      	ands	r3, r2
 8005796:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	091b      	lsrs	r3, r3, #4
 800579e:	f003 0201 	and.w	r2, r3, #1
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f003 0303 	and.w	r3, r3, #3
 80057bc:	2b03      	cmp	r3, #3
 80057be:	d017      	beq.n	80057f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	2203      	movs	r2, #3
 80057cc:	fa02 f303 	lsl.w	r3, r2, r3
 80057d0:	43db      	mvns	r3, r3
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	4013      	ands	r3, r2
 80057d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	fa02 f303 	lsl.w	r3, r2, r3
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f003 0303 	and.w	r3, r3, #3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d123      	bne.n	8005844 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	08da      	lsrs	r2, r3, #3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3208      	adds	r2, #8
 8005804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005808:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	220f      	movs	r2, #15
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	43db      	mvns	r3, r3
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	4013      	ands	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	691a      	ldr	r2, [r3, #16]
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	4313      	orrs	r3, r2
 8005834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	08da      	lsrs	r2, r3, #3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	3208      	adds	r2, #8
 800583e:	69b9      	ldr	r1, [r7, #24]
 8005840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	2203      	movs	r2, #3
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	43db      	mvns	r3, r3
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	4013      	ands	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f003 0203 	and.w	r2, r3, #3
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	fa02 f303 	lsl.w	r3, r2, r3
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	4313      	orrs	r3, r2
 8005870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 80b4 	beq.w	80059ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005886:	2300      	movs	r3, #0
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	4b60      	ldr	r3, [pc, #384]	; (8005a0c <HAL_GPIO_Init+0x30c>)
 800588c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588e:	4a5f      	ldr	r2, [pc, #380]	; (8005a0c <HAL_GPIO_Init+0x30c>)
 8005890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005894:	6453      	str	r3, [r2, #68]	; 0x44
 8005896:	4b5d      	ldr	r3, [pc, #372]	; (8005a0c <HAL_GPIO_Init+0x30c>)
 8005898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058a2:	4a5b      	ldr	r2, [pc, #364]	; (8005a10 <HAL_GPIO_Init+0x310>)
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	089b      	lsrs	r3, r3, #2
 80058a8:	3302      	adds	r3, #2
 80058aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	220f      	movs	r2, #15
 80058ba:	fa02 f303 	lsl.w	r3, r2, r3
 80058be:	43db      	mvns	r3, r3
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	4013      	ands	r3, r2
 80058c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a52      	ldr	r2, [pc, #328]	; (8005a14 <HAL_GPIO_Init+0x314>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d02b      	beq.n	8005926 <HAL_GPIO_Init+0x226>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a51      	ldr	r2, [pc, #324]	; (8005a18 <HAL_GPIO_Init+0x318>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d025      	beq.n	8005922 <HAL_GPIO_Init+0x222>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a50      	ldr	r2, [pc, #320]	; (8005a1c <HAL_GPIO_Init+0x31c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d01f      	beq.n	800591e <HAL_GPIO_Init+0x21e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a4f      	ldr	r2, [pc, #316]	; (8005a20 <HAL_GPIO_Init+0x320>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d019      	beq.n	800591a <HAL_GPIO_Init+0x21a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a4e      	ldr	r2, [pc, #312]	; (8005a24 <HAL_GPIO_Init+0x324>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d013      	beq.n	8005916 <HAL_GPIO_Init+0x216>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a4d      	ldr	r2, [pc, #308]	; (8005a28 <HAL_GPIO_Init+0x328>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00d      	beq.n	8005912 <HAL_GPIO_Init+0x212>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a4c      	ldr	r2, [pc, #304]	; (8005a2c <HAL_GPIO_Init+0x32c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d007      	beq.n	800590e <HAL_GPIO_Init+0x20e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a4b      	ldr	r2, [pc, #300]	; (8005a30 <HAL_GPIO_Init+0x330>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d101      	bne.n	800590a <HAL_GPIO_Init+0x20a>
 8005906:	2307      	movs	r3, #7
 8005908:	e00e      	b.n	8005928 <HAL_GPIO_Init+0x228>
 800590a:	2308      	movs	r3, #8
 800590c:	e00c      	b.n	8005928 <HAL_GPIO_Init+0x228>
 800590e:	2306      	movs	r3, #6
 8005910:	e00a      	b.n	8005928 <HAL_GPIO_Init+0x228>
 8005912:	2305      	movs	r3, #5
 8005914:	e008      	b.n	8005928 <HAL_GPIO_Init+0x228>
 8005916:	2304      	movs	r3, #4
 8005918:	e006      	b.n	8005928 <HAL_GPIO_Init+0x228>
 800591a:	2303      	movs	r3, #3
 800591c:	e004      	b.n	8005928 <HAL_GPIO_Init+0x228>
 800591e:	2302      	movs	r3, #2
 8005920:	e002      	b.n	8005928 <HAL_GPIO_Init+0x228>
 8005922:	2301      	movs	r3, #1
 8005924:	e000      	b.n	8005928 <HAL_GPIO_Init+0x228>
 8005926:	2300      	movs	r3, #0
 8005928:	69fa      	ldr	r2, [r7, #28]
 800592a:	f002 0203 	and.w	r2, r2, #3
 800592e:	0092      	lsls	r2, r2, #2
 8005930:	4093      	lsls	r3, r2
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	4313      	orrs	r3, r2
 8005936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005938:	4935      	ldr	r1, [pc, #212]	; (8005a10 <HAL_GPIO_Init+0x310>)
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	089b      	lsrs	r3, r3, #2
 800593e:	3302      	adds	r3, #2
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005946:	4b3b      	ldr	r3, [pc, #236]	; (8005a34 <HAL_GPIO_Init+0x334>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	43db      	mvns	r3, r3
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	4013      	ands	r3, r2
 8005954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	4313      	orrs	r3, r2
 8005968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800596a:	4a32      	ldr	r2, [pc, #200]	; (8005a34 <HAL_GPIO_Init+0x334>)
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005970:	4b30      	ldr	r3, [pc, #192]	; (8005a34 <HAL_GPIO_Init+0x334>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	43db      	mvns	r3, r3
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	4013      	ands	r3, r2
 800597e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	4313      	orrs	r3, r2
 8005992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005994:	4a27      	ldr	r2, [pc, #156]	; (8005a34 <HAL_GPIO_Init+0x334>)
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800599a:	4b26      	ldr	r3, [pc, #152]	; (8005a34 <HAL_GPIO_Init+0x334>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	43db      	mvns	r3, r3
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	4013      	ands	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059be:	4a1d      	ldr	r2, [pc, #116]	; (8005a34 <HAL_GPIO_Init+0x334>)
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059c4:	4b1b      	ldr	r3, [pc, #108]	; (8005a34 <HAL_GPIO_Init+0x334>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	43db      	mvns	r3, r3
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	4013      	ands	r3, r2
 80059d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d003      	beq.n	80059e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059e8:	4a12      	ldr	r2, [pc, #72]	; (8005a34 <HAL_GPIO_Init+0x334>)
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	3301      	adds	r3, #1
 80059f2:	61fb      	str	r3, [r7, #28]
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	2b0f      	cmp	r3, #15
 80059f8:	f67f ae90 	bls.w	800571c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80059fc:	bf00      	nop
 80059fe:	bf00      	nop
 8005a00:	3724      	adds	r7, #36	; 0x24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	40013800 	.word	0x40013800
 8005a14:	40020000 	.word	0x40020000
 8005a18:	40020400 	.word	0x40020400
 8005a1c:	40020800 	.word	0x40020800
 8005a20:	40020c00 	.word	0x40020c00
 8005a24:	40021000 	.word	0x40021000
 8005a28:	40021400 	.word	0x40021400
 8005a2c:	40021800 	.word	0x40021800
 8005a30:	40021c00 	.word	0x40021c00
 8005a34:	40013c00 	.word	0x40013c00

08005a38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	460b      	mov	r3, r1
 8005a42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	691a      	ldr	r2, [r3, #16]
 8005a48:	887b      	ldrh	r3, [r7, #2]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a50:	2301      	movs	r3, #1
 8005a52:	73fb      	strb	r3, [r7, #15]
 8005a54:	e001      	b.n	8005a5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a56:	2300      	movs	r3, #0
 8005a58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	807b      	strh	r3, [r7, #2]
 8005a74:	4613      	mov	r3, r2
 8005a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a78:	787b      	ldrb	r3, [r7, #1]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a7e:	887a      	ldrh	r2, [r7, #2]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a84:	e003      	b.n	8005a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a86:	887b      	ldrh	r3, [r7, #2]
 8005a88:	041a      	lsls	r2, r3, #16
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	619a      	str	r2, [r3, #24]
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
	...

08005a9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005aa6:	4b08      	ldr	r3, [pc, #32]	; (8005ac8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005aa8:	695a      	ldr	r2, [r3, #20]
 8005aaa:	88fb      	ldrh	r3, [r7, #6]
 8005aac:	4013      	ands	r3, r2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d006      	beq.n	8005ac0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ab2:	4a05      	ldr	r2, [pc, #20]	; (8005ac8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ab4:	88fb      	ldrh	r3, [r7, #6]
 8005ab6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ab8:	88fb      	ldrh	r3, [r7, #6]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fd f986 	bl	8002dcc <HAL_GPIO_EXTI_Callback>
  }
}
 8005ac0:	bf00      	nop
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	40013c00 	.word	0x40013c00

08005acc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e264      	b.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d075      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005aea:	4ba3      	ldr	r3, [pc, #652]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 030c 	and.w	r3, r3, #12
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d00c      	beq.n	8005b10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005af6:	4ba0      	ldr	r3, [pc, #640]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005afe:	2b08      	cmp	r3, #8
 8005b00:	d112      	bne.n	8005b28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b02:	4b9d      	ldr	r3, [pc, #628]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b0e:	d10b      	bne.n	8005b28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b10:	4b99      	ldr	r3, [pc, #612]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d05b      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x108>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d157      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e23f      	b.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b30:	d106      	bne.n	8005b40 <HAL_RCC_OscConfig+0x74>
 8005b32:	4b91      	ldr	r3, [pc, #580]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a90      	ldr	r2, [pc, #576]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	e01d      	b.n	8005b7c <HAL_RCC_OscConfig+0xb0>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b48:	d10c      	bne.n	8005b64 <HAL_RCC_OscConfig+0x98>
 8005b4a:	4b8b      	ldr	r3, [pc, #556]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a8a      	ldr	r2, [pc, #552]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b54:	6013      	str	r3, [r2, #0]
 8005b56:	4b88      	ldr	r3, [pc, #544]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a87      	ldr	r2, [pc, #540]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	e00b      	b.n	8005b7c <HAL_RCC_OscConfig+0xb0>
 8005b64:	4b84      	ldr	r3, [pc, #528]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a83      	ldr	r2, [pc, #524]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b6e:	6013      	str	r3, [r2, #0]
 8005b70:	4b81      	ldr	r3, [pc, #516]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a80      	ldr	r2, [pc, #512]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d013      	beq.n	8005bac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b84:	f7ff f81c 	bl	8004bc0 <HAL_GetTick>
 8005b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b8c:	f7ff f818 	bl	8004bc0 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b64      	cmp	r3, #100	; 0x64
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e204      	b.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b9e:	4b76      	ldr	r3, [pc, #472]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0f0      	beq.n	8005b8c <HAL_RCC_OscConfig+0xc0>
 8005baa:	e014      	b.n	8005bd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bac:	f7ff f808 	bl	8004bc0 <HAL_GetTick>
 8005bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bb4:	f7ff f804 	bl	8004bc0 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b64      	cmp	r3, #100	; 0x64
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e1f0      	b.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bc6:	4b6c      	ldr	r3, [pc, #432]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1f0      	bne.n	8005bb4 <HAL_RCC_OscConfig+0xe8>
 8005bd2:	e000      	b.n	8005bd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d063      	beq.n	8005caa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005be2:	4b65      	ldr	r3, [pc, #404]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 030c 	and.w	r3, r3, #12
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00b      	beq.n	8005c06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bee:	4b62      	ldr	r3, [pc, #392]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bf6:	2b08      	cmp	r3, #8
 8005bf8:	d11c      	bne.n	8005c34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bfa:	4b5f      	ldr	r3, [pc, #380]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d116      	bne.n	8005c34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c06:	4b5c      	ldr	r3, [pc, #368]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d005      	beq.n	8005c1e <HAL_RCC_OscConfig+0x152>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d001      	beq.n	8005c1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e1c4      	b.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c1e:	4b56      	ldr	r3, [pc, #344]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	4952      	ldr	r1, [pc, #328]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c32:	e03a      	b.n	8005caa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d020      	beq.n	8005c7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c3c:	4b4f      	ldr	r3, [pc, #316]	; (8005d7c <HAL_RCC_OscConfig+0x2b0>)
 8005c3e:	2201      	movs	r2, #1
 8005c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c42:	f7fe ffbd 	bl	8004bc0 <HAL_GetTick>
 8005c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c48:	e008      	b.n	8005c5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c4a:	f7fe ffb9 	bl	8004bc0 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d901      	bls.n	8005c5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e1a5      	b.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c5c:	4b46      	ldr	r3, [pc, #280]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d0f0      	beq.n	8005c4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c68:	4b43      	ldr	r3, [pc, #268]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	4940      	ldr	r1, [pc, #256]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	600b      	str	r3, [r1, #0]
 8005c7c:	e015      	b.n	8005caa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c7e:	4b3f      	ldr	r3, [pc, #252]	; (8005d7c <HAL_RCC_OscConfig+0x2b0>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c84:	f7fe ff9c 	bl	8004bc0 <HAL_GetTick>
 8005c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c8a:	e008      	b.n	8005c9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c8c:	f7fe ff98 	bl	8004bc0 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e184      	b.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c9e:	4b36      	ldr	r3, [pc, #216]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1f0      	bne.n	8005c8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0308 	and.w	r3, r3, #8
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d030      	beq.n	8005d18 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d016      	beq.n	8005cec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cbe:	4b30      	ldr	r3, [pc, #192]	; (8005d80 <HAL_RCC_OscConfig+0x2b4>)
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc4:	f7fe ff7c 	bl	8004bc0 <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ccc:	f7fe ff78 	bl	8004bc0 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e164      	b.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cde:	4b26      	ldr	r3, [pc, #152]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f0      	beq.n	8005ccc <HAL_RCC_OscConfig+0x200>
 8005cea:	e015      	b.n	8005d18 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cec:	4b24      	ldr	r3, [pc, #144]	; (8005d80 <HAL_RCC_OscConfig+0x2b4>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cf2:	f7fe ff65 	bl	8004bc0 <HAL_GetTick>
 8005cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cf8:	e008      	b.n	8005d0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cfa:	f7fe ff61 	bl	8004bc0 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d901      	bls.n	8005d0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e14d      	b.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d0c:	4b1a      	ldr	r3, [pc, #104]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1f0      	bne.n	8005cfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 80a0 	beq.w	8005e66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d26:	2300      	movs	r3, #0
 8005d28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d2a:	4b13      	ldr	r3, [pc, #76]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10f      	bne.n	8005d56 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d36:	2300      	movs	r3, #0
 8005d38:	60bb      	str	r3, [r7, #8]
 8005d3a:	4b0f      	ldr	r3, [pc, #60]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3e:	4a0e      	ldr	r2, [pc, #56]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d44:	6413      	str	r3, [r2, #64]	; 0x40
 8005d46:	4b0c      	ldr	r3, [pc, #48]	; (8005d78 <HAL_RCC_OscConfig+0x2ac>)
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d4e:	60bb      	str	r3, [r7, #8]
 8005d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d52:	2301      	movs	r3, #1
 8005d54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d56:	4b0b      	ldr	r3, [pc, #44]	; (8005d84 <HAL_RCC_OscConfig+0x2b8>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d121      	bne.n	8005da6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d62:	4b08      	ldr	r3, [pc, #32]	; (8005d84 <HAL_RCC_OscConfig+0x2b8>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a07      	ldr	r2, [pc, #28]	; (8005d84 <HAL_RCC_OscConfig+0x2b8>)
 8005d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d6e:	f7fe ff27 	bl	8004bc0 <HAL_GetTick>
 8005d72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d74:	e011      	b.n	8005d9a <HAL_RCC_OscConfig+0x2ce>
 8005d76:	bf00      	nop
 8005d78:	40023800 	.word	0x40023800
 8005d7c:	42470000 	.word	0x42470000
 8005d80:	42470e80 	.word	0x42470e80
 8005d84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d88:	f7fe ff1a 	bl	8004bc0 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e106      	b.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d9a:	4b85      	ldr	r3, [pc, #532]	; (8005fb0 <HAL_RCC_OscConfig+0x4e4>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0f0      	beq.n	8005d88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d106      	bne.n	8005dbc <HAL_RCC_OscConfig+0x2f0>
 8005dae:	4b81      	ldr	r3, [pc, #516]	; (8005fb4 <HAL_RCC_OscConfig+0x4e8>)
 8005db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db2:	4a80      	ldr	r2, [pc, #512]	; (8005fb4 <HAL_RCC_OscConfig+0x4e8>)
 8005db4:	f043 0301 	orr.w	r3, r3, #1
 8005db8:	6713      	str	r3, [r2, #112]	; 0x70
 8005dba:	e01c      	b.n	8005df6 <HAL_RCC_OscConfig+0x32a>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	2b05      	cmp	r3, #5
 8005dc2:	d10c      	bne.n	8005dde <HAL_RCC_OscConfig+0x312>
 8005dc4:	4b7b      	ldr	r3, [pc, #492]	; (8005fb4 <HAL_RCC_OscConfig+0x4e8>)
 8005dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc8:	4a7a      	ldr	r2, [pc, #488]	; (8005fb4 <HAL_RCC_OscConfig+0x4e8>)
 8005dca:	f043 0304 	orr.w	r3, r3, #4
 8005dce:	6713      	str	r3, [r2, #112]	; 0x70
 8005dd0:	4b78      	ldr	r3, [pc, #480]	; (8005fb4 <HAL_RCC_OscConfig+0x4e8>)
 8005dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd4:	4a77      	ldr	r2, [pc, #476]	; (8005fb4 <HAL_RCC_OscConfig+0x4e8>)
 8005dd6:	f043 0301 	orr.w	r3, r3, #1
 8005dda:	6713      	str	r3, [r2, #112]	; 0x70
 8005ddc:	e00b      	b.n	8005df6 <HAL_RCC_OscConfig+0x32a>
 8005dde:	4b75      	ldr	r3, [pc, #468]	; (8005fb4 <HAL_RCC_OscConfig+0x4e8>)
 8005de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de2:	4a74      	ldr	r2, [pc, #464]	; (8005fb4 <HAL_RCC_OscConfig+0x4e8>)
 8005de4:	f023 0301 	bic.w	r3, r3, #1
 8005de8:	6713      	str	r3, [r2, #112]	; 0x70
 8005dea:	4b72      	ldr	r3, [pc, #456]	; (8005fb4 <HAL_RCC_OscConfig+0x4e8>)
 8005dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dee:	4a71      	ldr	r2, [pc, #452]	; (8005fb4 <HAL_RCC_OscConfig+0x4e8>)
 8005df0:	f023 0304 	bic.w	r3, r3, #4
 8005df4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d015      	beq.n	8005e2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dfe:	f7fe fedf 	bl	8004bc0 <HAL_GetTick>
 8005e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e04:	e00a      	b.n	8005e1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e06:	f7fe fedb 	bl	8004bc0 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d901      	bls.n	8005e1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e0c5      	b.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e1c:	4b65      	ldr	r3, [pc, #404]	; (8005fb4 <HAL_RCC_OscConfig+0x4e8>)
 8005e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d0ee      	beq.n	8005e06 <HAL_RCC_OscConfig+0x33a>
 8005e28:	e014      	b.n	8005e54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e2a:	f7fe fec9 	bl	8004bc0 <HAL_GetTick>
 8005e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e30:	e00a      	b.n	8005e48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e32:	f7fe fec5 	bl	8004bc0 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d901      	bls.n	8005e48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e0af      	b.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e48:	4b5a      	ldr	r3, [pc, #360]	; (8005fb4 <HAL_RCC_OscConfig+0x4e8>)
 8005e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1ee      	bne.n	8005e32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e54:	7dfb      	ldrb	r3, [r7, #23]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d105      	bne.n	8005e66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e5a:	4b56      	ldr	r3, [pc, #344]	; (8005fb4 <HAL_RCC_OscConfig+0x4e8>)
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	4a55      	ldr	r2, [pc, #340]	; (8005fb4 <HAL_RCC_OscConfig+0x4e8>)
 8005e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 809b 	beq.w	8005fa6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e70:	4b50      	ldr	r3, [pc, #320]	; (8005fb4 <HAL_RCC_OscConfig+0x4e8>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f003 030c 	and.w	r3, r3, #12
 8005e78:	2b08      	cmp	r3, #8
 8005e7a:	d05c      	beq.n	8005f36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d141      	bne.n	8005f08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e84:	4b4c      	ldr	r3, [pc, #304]	; (8005fb8 <HAL_RCC_OscConfig+0x4ec>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e8a:	f7fe fe99 	bl	8004bc0 <HAL_GetTick>
 8005e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e90:	e008      	b.n	8005ea4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e92:	f7fe fe95 	bl	8004bc0 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e081      	b.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ea4:	4b43      	ldr	r3, [pc, #268]	; (8005fb4 <HAL_RCC_OscConfig+0x4e8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1f0      	bne.n	8005e92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	69da      	ldr	r2, [r3, #28]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebe:	019b      	lsls	r3, r3, #6
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec6:	085b      	lsrs	r3, r3, #1
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	041b      	lsls	r3, r3, #16
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed2:	061b      	lsls	r3, r3, #24
 8005ed4:	4937      	ldr	r1, [pc, #220]	; (8005fb4 <HAL_RCC_OscConfig+0x4e8>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eda:	4b37      	ldr	r3, [pc, #220]	; (8005fb8 <HAL_RCC_OscConfig+0x4ec>)
 8005edc:	2201      	movs	r2, #1
 8005ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee0:	f7fe fe6e 	bl	8004bc0 <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ee8:	f7fe fe6a 	bl	8004bc0 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e056      	b.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005efa:	4b2e      	ldr	r3, [pc, #184]	; (8005fb4 <HAL_RCC_OscConfig+0x4e8>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0f0      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x41c>
 8005f06:	e04e      	b.n	8005fa6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f08:	4b2b      	ldr	r3, [pc, #172]	; (8005fb8 <HAL_RCC_OscConfig+0x4ec>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f0e:	f7fe fe57 	bl	8004bc0 <HAL_GetTick>
 8005f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f14:	e008      	b.n	8005f28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f16:	f7fe fe53 	bl	8004bc0 <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d901      	bls.n	8005f28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e03f      	b.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f28:	4b22      	ldr	r3, [pc, #136]	; (8005fb4 <HAL_RCC_OscConfig+0x4e8>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1f0      	bne.n	8005f16 <HAL_RCC_OscConfig+0x44a>
 8005f34:	e037      	b.n	8005fa6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d101      	bne.n	8005f42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e032      	b.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f42:	4b1c      	ldr	r3, [pc, #112]	; (8005fb4 <HAL_RCC_OscConfig+0x4e8>)
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d028      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d121      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d11a      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f72:	4013      	ands	r3, r2
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f78:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d111      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f88:	085b      	lsrs	r3, r3, #1
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d107      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d001      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e000      	b.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3718      	adds	r7, #24
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	40007000 	.word	0x40007000
 8005fb4:	40023800 	.word	0x40023800
 8005fb8:	42470060 	.word	0x42470060

08005fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e0cc      	b.n	800616a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fd0:	4b68      	ldr	r3, [pc, #416]	; (8006174 <HAL_RCC_ClockConfig+0x1b8>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d90c      	bls.n	8005ff8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fde:	4b65      	ldr	r3, [pc, #404]	; (8006174 <HAL_RCC_ClockConfig+0x1b8>)
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe6:	4b63      	ldr	r3, [pc, #396]	; (8006174 <HAL_RCC_ClockConfig+0x1b8>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d001      	beq.n	8005ff8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e0b8      	b.n	800616a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d020      	beq.n	8006046 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006010:	4b59      	ldr	r3, [pc, #356]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	4a58      	ldr	r2, [pc, #352]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 8006016:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800601a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0308 	and.w	r3, r3, #8
 8006024:	2b00      	cmp	r3, #0
 8006026:	d005      	beq.n	8006034 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006028:	4b53      	ldr	r3, [pc, #332]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	4a52      	ldr	r2, [pc, #328]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800602e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006032:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006034:	4b50      	ldr	r3, [pc, #320]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	494d      	ldr	r1, [pc, #308]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 8006042:	4313      	orrs	r3, r2
 8006044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b00      	cmp	r3, #0
 8006050:	d044      	beq.n	80060dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d107      	bne.n	800606a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800605a:	4b47      	ldr	r3, [pc, #284]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d119      	bne.n	800609a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e07f      	b.n	800616a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2b02      	cmp	r3, #2
 8006070:	d003      	beq.n	800607a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006076:	2b03      	cmp	r3, #3
 8006078:	d107      	bne.n	800608a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800607a:	4b3f      	ldr	r3, [pc, #252]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d109      	bne.n	800609a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e06f      	b.n	800616a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800608a:	4b3b      	ldr	r3, [pc, #236]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e067      	b.n	800616a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800609a:	4b37      	ldr	r3, [pc, #220]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f023 0203 	bic.w	r2, r3, #3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	4934      	ldr	r1, [pc, #208]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060ac:	f7fe fd88 	bl	8004bc0 <HAL_GetTick>
 80060b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060b2:	e00a      	b.n	80060ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060b4:	f7fe fd84 	bl	8004bc0 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e04f      	b.n	800616a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ca:	4b2b      	ldr	r3, [pc, #172]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 020c 	and.w	r2, r3, #12
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	429a      	cmp	r2, r3
 80060da:	d1eb      	bne.n	80060b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060dc:	4b25      	ldr	r3, [pc, #148]	; (8006174 <HAL_RCC_ClockConfig+0x1b8>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0307 	and.w	r3, r3, #7
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d20c      	bcs.n	8006104 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ea:	4b22      	ldr	r3, [pc, #136]	; (8006174 <HAL_RCC_ClockConfig+0x1b8>)
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	b2d2      	uxtb	r2, r2
 80060f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060f2:	4b20      	ldr	r3, [pc, #128]	; (8006174 <HAL_RCC_ClockConfig+0x1b8>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0307 	and.w	r3, r3, #7
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d001      	beq.n	8006104 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e032      	b.n	800616a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b00      	cmp	r3, #0
 800610e:	d008      	beq.n	8006122 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006110:	4b19      	ldr	r3, [pc, #100]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	4916      	ldr	r1, [pc, #88]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800611e:	4313      	orrs	r3, r2
 8006120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0308 	and.w	r3, r3, #8
 800612a:	2b00      	cmp	r3, #0
 800612c:	d009      	beq.n	8006142 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800612e:	4b12      	ldr	r3, [pc, #72]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	490e      	ldr	r1, [pc, #56]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800613e:	4313      	orrs	r3, r2
 8006140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006142:	f000 f821 	bl	8006188 <HAL_RCC_GetSysClockFreq>
 8006146:	4602      	mov	r2, r0
 8006148:	4b0b      	ldr	r3, [pc, #44]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	091b      	lsrs	r3, r3, #4
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	490a      	ldr	r1, [pc, #40]	; (800617c <HAL_RCC_ClockConfig+0x1c0>)
 8006154:	5ccb      	ldrb	r3, [r1, r3]
 8006156:	fa22 f303 	lsr.w	r3, r2, r3
 800615a:	4a09      	ldr	r2, [pc, #36]	; (8006180 <HAL_RCC_ClockConfig+0x1c4>)
 800615c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800615e:	4b09      	ldr	r3, [pc, #36]	; (8006184 <HAL_RCC_ClockConfig+0x1c8>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4618      	mov	r0, r3
 8006164:	f7fe fce8 	bl	8004b38 <HAL_InitTick>

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	40023c00 	.word	0x40023c00
 8006178:	40023800 	.word	0x40023800
 800617c:	08009358 	.word	0x08009358
 8006180:	20000000 	.word	0x20000000
 8006184:	20000004 	.word	0x20000004

08006188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006188:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800618c:	b084      	sub	sp, #16
 800618e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	607b      	str	r3, [r7, #4]
 8006194:	2300      	movs	r3, #0
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	2300      	movs	r3, #0
 800619a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061a0:	4b67      	ldr	r3, [pc, #412]	; (8006340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f003 030c 	and.w	r3, r3, #12
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d00d      	beq.n	80061c8 <HAL_RCC_GetSysClockFreq+0x40>
 80061ac:	2b08      	cmp	r3, #8
 80061ae:	f200 80bd 	bhi.w	800632c <HAL_RCC_GetSysClockFreq+0x1a4>
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <HAL_RCC_GetSysClockFreq+0x34>
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d003      	beq.n	80061c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80061ba:	e0b7      	b.n	800632c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061bc:	4b61      	ldr	r3, [pc, #388]	; (8006344 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80061be:	60bb      	str	r3, [r7, #8]
       break;
 80061c0:	e0b7      	b.n	8006332 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061c2:	4b61      	ldr	r3, [pc, #388]	; (8006348 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80061c4:	60bb      	str	r3, [r7, #8]
      break;
 80061c6:	e0b4      	b.n	8006332 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061c8:	4b5d      	ldr	r3, [pc, #372]	; (8006340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061d2:	4b5b      	ldr	r3, [pc, #364]	; (8006340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d04d      	beq.n	800627a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061de:	4b58      	ldr	r3, [pc, #352]	; (8006340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	099b      	lsrs	r3, r3, #6
 80061e4:	461a      	mov	r2, r3
 80061e6:	f04f 0300 	mov.w	r3, #0
 80061ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80061ee:	f04f 0100 	mov.w	r1, #0
 80061f2:	ea02 0800 	and.w	r8, r2, r0
 80061f6:	ea03 0901 	and.w	r9, r3, r1
 80061fa:	4640      	mov	r0, r8
 80061fc:	4649      	mov	r1, r9
 80061fe:	f04f 0200 	mov.w	r2, #0
 8006202:	f04f 0300 	mov.w	r3, #0
 8006206:	014b      	lsls	r3, r1, #5
 8006208:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800620c:	0142      	lsls	r2, r0, #5
 800620e:	4610      	mov	r0, r2
 8006210:	4619      	mov	r1, r3
 8006212:	ebb0 0008 	subs.w	r0, r0, r8
 8006216:	eb61 0109 	sbc.w	r1, r1, r9
 800621a:	f04f 0200 	mov.w	r2, #0
 800621e:	f04f 0300 	mov.w	r3, #0
 8006222:	018b      	lsls	r3, r1, #6
 8006224:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006228:	0182      	lsls	r2, r0, #6
 800622a:	1a12      	subs	r2, r2, r0
 800622c:	eb63 0301 	sbc.w	r3, r3, r1
 8006230:	f04f 0000 	mov.w	r0, #0
 8006234:	f04f 0100 	mov.w	r1, #0
 8006238:	00d9      	lsls	r1, r3, #3
 800623a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800623e:	00d0      	lsls	r0, r2, #3
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	eb12 0208 	adds.w	r2, r2, r8
 8006248:	eb43 0309 	adc.w	r3, r3, r9
 800624c:	f04f 0000 	mov.w	r0, #0
 8006250:	f04f 0100 	mov.w	r1, #0
 8006254:	0259      	lsls	r1, r3, #9
 8006256:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800625a:	0250      	lsls	r0, r2, #9
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4610      	mov	r0, r2
 8006262:	4619      	mov	r1, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	461a      	mov	r2, r3
 8006268:	f04f 0300 	mov.w	r3, #0
 800626c:	f7fa fc26 	bl	8000abc <__aeabi_uldivmod>
 8006270:	4602      	mov	r2, r0
 8006272:	460b      	mov	r3, r1
 8006274:	4613      	mov	r3, r2
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	e04a      	b.n	8006310 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800627a:	4b31      	ldr	r3, [pc, #196]	; (8006340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	099b      	lsrs	r3, r3, #6
 8006280:	461a      	mov	r2, r3
 8006282:	f04f 0300 	mov.w	r3, #0
 8006286:	f240 10ff 	movw	r0, #511	; 0x1ff
 800628a:	f04f 0100 	mov.w	r1, #0
 800628e:	ea02 0400 	and.w	r4, r2, r0
 8006292:	ea03 0501 	and.w	r5, r3, r1
 8006296:	4620      	mov	r0, r4
 8006298:	4629      	mov	r1, r5
 800629a:	f04f 0200 	mov.w	r2, #0
 800629e:	f04f 0300 	mov.w	r3, #0
 80062a2:	014b      	lsls	r3, r1, #5
 80062a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80062a8:	0142      	lsls	r2, r0, #5
 80062aa:	4610      	mov	r0, r2
 80062ac:	4619      	mov	r1, r3
 80062ae:	1b00      	subs	r0, r0, r4
 80062b0:	eb61 0105 	sbc.w	r1, r1, r5
 80062b4:	f04f 0200 	mov.w	r2, #0
 80062b8:	f04f 0300 	mov.w	r3, #0
 80062bc:	018b      	lsls	r3, r1, #6
 80062be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80062c2:	0182      	lsls	r2, r0, #6
 80062c4:	1a12      	subs	r2, r2, r0
 80062c6:	eb63 0301 	sbc.w	r3, r3, r1
 80062ca:	f04f 0000 	mov.w	r0, #0
 80062ce:	f04f 0100 	mov.w	r1, #0
 80062d2:	00d9      	lsls	r1, r3, #3
 80062d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062d8:	00d0      	lsls	r0, r2, #3
 80062da:	4602      	mov	r2, r0
 80062dc:	460b      	mov	r3, r1
 80062de:	1912      	adds	r2, r2, r4
 80062e0:	eb45 0303 	adc.w	r3, r5, r3
 80062e4:	f04f 0000 	mov.w	r0, #0
 80062e8:	f04f 0100 	mov.w	r1, #0
 80062ec:	0299      	lsls	r1, r3, #10
 80062ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80062f2:	0290      	lsls	r0, r2, #10
 80062f4:	4602      	mov	r2, r0
 80062f6:	460b      	mov	r3, r1
 80062f8:	4610      	mov	r0, r2
 80062fa:	4619      	mov	r1, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	461a      	mov	r2, r3
 8006300:	f04f 0300 	mov.w	r3, #0
 8006304:	f7fa fbda 	bl	8000abc <__aeabi_uldivmod>
 8006308:	4602      	mov	r2, r0
 800630a:	460b      	mov	r3, r1
 800630c:	4613      	mov	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006310:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	0c1b      	lsrs	r3, r3, #16
 8006316:	f003 0303 	and.w	r3, r3, #3
 800631a:	3301      	adds	r3, #1
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	fbb2 f3f3 	udiv	r3, r2, r3
 8006328:	60bb      	str	r3, [r7, #8]
      break;
 800632a:	e002      	b.n	8006332 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800632c:	4b05      	ldr	r3, [pc, #20]	; (8006344 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800632e:	60bb      	str	r3, [r7, #8]
      break;
 8006330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006332:	68bb      	ldr	r3, [r7, #8]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800633e:	bf00      	nop
 8006340:	40023800 	.word	0x40023800
 8006344:	00f42400 	.word	0x00f42400
 8006348:	007a1200 	.word	0x007a1200

0800634c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800634c:	b480      	push	{r7}
 800634e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006350:	4b03      	ldr	r3, [pc, #12]	; (8006360 <HAL_RCC_GetHCLKFreq+0x14>)
 8006352:	681b      	ldr	r3, [r3, #0]
}
 8006354:	4618      	mov	r0, r3
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	20000000 	.word	0x20000000

08006364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006368:	f7ff fff0 	bl	800634c <HAL_RCC_GetHCLKFreq>
 800636c:	4602      	mov	r2, r0
 800636e:	4b05      	ldr	r3, [pc, #20]	; (8006384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	0a9b      	lsrs	r3, r3, #10
 8006374:	f003 0307 	and.w	r3, r3, #7
 8006378:	4903      	ldr	r1, [pc, #12]	; (8006388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800637a:	5ccb      	ldrb	r3, [r1, r3]
 800637c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006380:	4618      	mov	r0, r3
 8006382:	bd80      	pop	{r7, pc}
 8006384:	40023800 	.word	0x40023800
 8006388:	08009368 	.word	0x08009368

0800638c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006390:	f7ff ffdc 	bl	800634c <HAL_RCC_GetHCLKFreq>
 8006394:	4602      	mov	r2, r0
 8006396:	4b05      	ldr	r3, [pc, #20]	; (80063ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	0b5b      	lsrs	r3, r3, #13
 800639c:	f003 0307 	and.w	r3, r3, #7
 80063a0:	4903      	ldr	r1, [pc, #12]	; (80063b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063a2:	5ccb      	ldrb	r3, [r1, r3]
 80063a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	40023800 	.word	0x40023800
 80063b0:	08009368 	.word	0x08009368

080063b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e041      	b.n	800644a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d106      	bne.n	80063e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7fe f824 	bl	8004428 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2202      	movs	r2, #2
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	3304      	adds	r3, #4
 80063f0:	4619      	mov	r1, r3
 80063f2:	4610      	mov	r0, r2
 80063f4:	f000 fb42 	bl	8006a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
	...

08006454 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b01      	cmp	r3, #1
 8006466:	d001      	beq.n	800646c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e046      	b.n	80064fa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a23      	ldr	r2, [pc, #140]	; (8006508 <HAL_TIM_Base_Start+0xb4>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d022      	beq.n	80064c4 <HAL_TIM_Base_Start+0x70>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006486:	d01d      	beq.n	80064c4 <HAL_TIM_Base_Start+0x70>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a1f      	ldr	r2, [pc, #124]	; (800650c <HAL_TIM_Base_Start+0xb8>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d018      	beq.n	80064c4 <HAL_TIM_Base_Start+0x70>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a1e      	ldr	r2, [pc, #120]	; (8006510 <HAL_TIM_Base_Start+0xbc>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d013      	beq.n	80064c4 <HAL_TIM_Base_Start+0x70>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a1c      	ldr	r2, [pc, #112]	; (8006514 <HAL_TIM_Base_Start+0xc0>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d00e      	beq.n	80064c4 <HAL_TIM_Base_Start+0x70>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a1b      	ldr	r2, [pc, #108]	; (8006518 <HAL_TIM_Base_Start+0xc4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d009      	beq.n	80064c4 <HAL_TIM_Base_Start+0x70>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a19      	ldr	r2, [pc, #100]	; (800651c <HAL_TIM_Base_Start+0xc8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d004      	beq.n	80064c4 <HAL_TIM_Base_Start+0x70>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a18      	ldr	r2, [pc, #96]	; (8006520 <HAL_TIM_Base_Start+0xcc>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d111      	bne.n	80064e8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f003 0307 	and.w	r3, r3, #7
 80064ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2b06      	cmp	r3, #6
 80064d4:	d010      	beq.n	80064f8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f042 0201 	orr.w	r2, r2, #1
 80064e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064e6:	e007      	b.n	80064f8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 0201 	orr.w	r2, r2, #1
 80064f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	40010000 	.word	0x40010000
 800650c:	40000400 	.word	0x40000400
 8006510:	40000800 	.word	0x40000800
 8006514:	40000c00 	.word	0x40000c00
 8006518:	40010400 	.word	0x40010400
 800651c:	40014000 	.word	0x40014000
 8006520:	40001800 	.word	0x40001800

08006524 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e041      	b.n	80065ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d106      	bne.n	8006550 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f839 	bl	80065c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2202      	movs	r2, #2
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	3304      	adds	r3, #4
 8006560:	4619      	mov	r1, r3
 8006562:	4610      	mov	r0, r2
 8006564:	f000 fa8a 	bl	8006a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b083      	sub	sp, #12
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80065ca:	bf00      	nop
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
	...

080065d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d109      	bne.n	80065fc <HAL_TIM_PWM_Start+0x24>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	bf14      	ite	ne
 80065f4:	2301      	movne	r3, #1
 80065f6:	2300      	moveq	r3, #0
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	e022      	b.n	8006642 <HAL_TIM_PWM_Start+0x6a>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d109      	bne.n	8006616 <HAL_TIM_PWM_Start+0x3e>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b01      	cmp	r3, #1
 800660c:	bf14      	ite	ne
 800660e:	2301      	movne	r3, #1
 8006610:	2300      	moveq	r3, #0
 8006612:	b2db      	uxtb	r3, r3
 8006614:	e015      	b.n	8006642 <HAL_TIM_PWM_Start+0x6a>
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b08      	cmp	r3, #8
 800661a:	d109      	bne.n	8006630 <HAL_TIM_PWM_Start+0x58>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b01      	cmp	r3, #1
 8006626:	bf14      	ite	ne
 8006628:	2301      	movne	r3, #1
 800662a:	2300      	moveq	r3, #0
 800662c:	b2db      	uxtb	r3, r3
 800662e:	e008      	b.n	8006642 <HAL_TIM_PWM_Start+0x6a>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b01      	cmp	r3, #1
 800663a:	bf14      	ite	ne
 800663c:	2301      	movne	r3, #1
 800663e:	2300      	moveq	r3, #0
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e07c      	b.n	8006744 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d104      	bne.n	800665a <HAL_TIM_PWM_Start+0x82>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006658:	e013      	b.n	8006682 <HAL_TIM_PWM_Start+0xaa>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b04      	cmp	r3, #4
 800665e:	d104      	bne.n	800666a <HAL_TIM_PWM_Start+0x92>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006668:	e00b      	b.n	8006682 <HAL_TIM_PWM_Start+0xaa>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b08      	cmp	r3, #8
 800666e:	d104      	bne.n	800667a <HAL_TIM_PWM_Start+0xa2>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006678:	e003      	b.n	8006682 <HAL_TIM_PWM_Start+0xaa>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2202      	movs	r2, #2
 800667e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2201      	movs	r2, #1
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	4618      	mov	r0, r3
 800668c:	f000 fce0 	bl	8007050 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a2d      	ldr	r2, [pc, #180]	; (800674c <HAL_TIM_PWM_Start+0x174>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d004      	beq.n	80066a4 <HAL_TIM_PWM_Start+0xcc>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a2c      	ldr	r2, [pc, #176]	; (8006750 <HAL_TIM_PWM_Start+0x178>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d101      	bne.n	80066a8 <HAL_TIM_PWM_Start+0xd0>
 80066a4:	2301      	movs	r3, #1
 80066a6:	e000      	b.n	80066aa <HAL_TIM_PWM_Start+0xd2>
 80066a8:	2300      	movs	r3, #0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d007      	beq.n	80066be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a22      	ldr	r2, [pc, #136]	; (800674c <HAL_TIM_PWM_Start+0x174>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d022      	beq.n	800670e <HAL_TIM_PWM_Start+0x136>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066d0:	d01d      	beq.n	800670e <HAL_TIM_PWM_Start+0x136>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a1f      	ldr	r2, [pc, #124]	; (8006754 <HAL_TIM_PWM_Start+0x17c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d018      	beq.n	800670e <HAL_TIM_PWM_Start+0x136>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a1d      	ldr	r2, [pc, #116]	; (8006758 <HAL_TIM_PWM_Start+0x180>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d013      	beq.n	800670e <HAL_TIM_PWM_Start+0x136>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a1c      	ldr	r2, [pc, #112]	; (800675c <HAL_TIM_PWM_Start+0x184>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d00e      	beq.n	800670e <HAL_TIM_PWM_Start+0x136>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a16      	ldr	r2, [pc, #88]	; (8006750 <HAL_TIM_PWM_Start+0x178>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d009      	beq.n	800670e <HAL_TIM_PWM_Start+0x136>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a18      	ldr	r2, [pc, #96]	; (8006760 <HAL_TIM_PWM_Start+0x188>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d004      	beq.n	800670e <HAL_TIM_PWM_Start+0x136>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a16      	ldr	r2, [pc, #88]	; (8006764 <HAL_TIM_PWM_Start+0x18c>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d111      	bne.n	8006732 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2b06      	cmp	r3, #6
 800671e:	d010      	beq.n	8006742 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0201 	orr.w	r2, r2, #1
 800672e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006730:	e007      	b.n	8006742 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f042 0201 	orr.w	r2, r2, #1
 8006740:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	40010000 	.word	0x40010000
 8006750:	40010400 	.word	0x40010400
 8006754:	40000400 	.word	0x40000400
 8006758:	40000800 	.word	0x40000800
 800675c:	40000c00 	.word	0x40000c00
 8006760:	40014000 	.word	0x40014000
 8006764:	40001800 	.word	0x40001800

08006768 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006774:	2300      	movs	r3, #0
 8006776:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800677e:	2b01      	cmp	r3, #1
 8006780:	d101      	bne.n	8006786 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006782:	2302      	movs	r3, #2
 8006784:	e0ae      	b.n	80068e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2b0c      	cmp	r3, #12
 8006792:	f200 809f 	bhi.w	80068d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006796:	a201      	add	r2, pc, #4	; (adr r2, 800679c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679c:	080067d1 	.word	0x080067d1
 80067a0:	080068d5 	.word	0x080068d5
 80067a4:	080068d5 	.word	0x080068d5
 80067a8:	080068d5 	.word	0x080068d5
 80067ac:	08006811 	.word	0x08006811
 80067b0:	080068d5 	.word	0x080068d5
 80067b4:	080068d5 	.word	0x080068d5
 80067b8:	080068d5 	.word	0x080068d5
 80067bc:	08006853 	.word	0x08006853
 80067c0:	080068d5 	.word	0x080068d5
 80067c4:	080068d5 	.word	0x080068d5
 80067c8:	080068d5 	.word	0x080068d5
 80067cc:	08006893 	.word	0x08006893
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68b9      	ldr	r1, [r7, #8]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 f9f0 	bl	8006bbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	699a      	ldr	r2, [r3, #24]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f042 0208 	orr.w	r2, r2, #8
 80067ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	699a      	ldr	r2, [r3, #24]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 0204 	bic.w	r2, r2, #4
 80067fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6999      	ldr	r1, [r3, #24]
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	691a      	ldr	r2, [r3, #16]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	619a      	str	r2, [r3, #24]
      break;
 800680e:	e064      	b.n	80068da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68b9      	ldr	r1, [r7, #8]
 8006816:	4618      	mov	r0, r3
 8006818:	f000 fa40 	bl	8006c9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	699a      	ldr	r2, [r3, #24]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800682a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	699a      	ldr	r2, [r3, #24]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800683a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6999      	ldr	r1, [r3, #24]
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	021a      	lsls	r2, r3, #8
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	619a      	str	r2, [r3, #24]
      break;
 8006850:	e043      	b.n	80068da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68b9      	ldr	r1, [r7, #8]
 8006858:	4618      	mov	r0, r3
 800685a:	f000 fa95 	bl	8006d88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	69da      	ldr	r2, [r3, #28]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f042 0208 	orr.w	r2, r2, #8
 800686c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69da      	ldr	r2, [r3, #28]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0204 	bic.w	r2, r2, #4
 800687c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	69d9      	ldr	r1, [r3, #28]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	691a      	ldr	r2, [r3, #16]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	430a      	orrs	r2, r1
 800688e:	61da      	str	r2, [r3, #28]
      break;
 8006890:	e023      	b.n	80068da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68b9      	ldr	r1, [r7, #8]
 8006898:	4618      	mov	r0, r3
 800689a:	f000 fae9 	bl	8006e70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	69da      	ldr	r2, [r3, #28]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	69da      	ldr	r2, [r3, #28]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	69d9      	ldr	r1, [r3, #28]
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	021a      	lsls	r2, r3, #8
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	61da      	str	r2, [r3, #28]
      break;
 80068d2:	e002      	b.n	80068da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	75fb      	strb	r3, [r7, #23]
      break;
 80068d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006900:	2b01      	cmp	r3, #1
 8006902:	d101      	bne.n	8006908 <HAL_TIM_ConfigClockSource+0x1c>
 8006904:	2302      	movs	r3, #2
 8006906:	e0b4      	b.n	8006a72 <HAL_TIM_ConfigClockSource+0x186>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2202      	movs	r2, #2
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800692e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006940:	d03e      	beq.n	80069c0 <HAL_TIM_ConfigClockSource+0xd4>
 8006942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006946:	f200 8087 	bhi.w	8006a58 <HAL_TIM_ConfigClockSource+0x16c>
 800694a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800694e:	f000 8086 	beq.w	8006a5e <HAL_TIM_ConfigClockSource+0x172>
 8006952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006956:	d87f      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x16c>
 8006958:	2b70      	cmp	r3, #112	; 0x70
 800695a:	d01a      	beq.n	8006992 <HAL_TIM_ConfigClockSource+0xa6>
 800695c:	2b70      	cmp	r3, #112	; 0x70
 800695e:	d87b      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x16c>
 8006960:	2b60      	cmp	r3, #96	; 0x60
 8006962:	d050      	beq.n	8006a06 <HAL_TIM_ConfigClockSource+0x11a>
 8006964:	2b60      	cmp	r3, #96	; 0x60
 8006966:	d877      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x16c>
 8006968:	2b50      	cmp	r3, #80	; 0x50
 800696a:	d03c      	beq.n	80069e6 <HAL_TIM_ConfigClockSource+0xfa>
 800696c:	2b50      	cmp	r3, #80	; 0x50
 800696e:	d873      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x16c>
 8006970:	2b40      	cmp	r3, #64	; 0x40
 8006972:	d058      	beq.n	8006a26 <HAL_TIM_ConfigClockSource+0x13a>
 8006974:	2b40      	cmp	r3, #64	; 0x40
 8006976:	d86f      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x16c>
 8006978:	2b30      	cmp	r3, #48	; 0x30
 800697a:	d064      	beq.n	8006a46 <HAL_TIM_ConfigClockSource+0x15a>
 800697c:	2b30      	cmp	r3, #48	; 0x30
 800697e:	d86b      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x16c>
 8006980:	2b20      	cmp	r3, #32
 8006982:	d060      	beq.n	8006a46 <HAL_TIM_ConfigClockSource+0x15a>
 8006984:	2b20      	cmp	r3, #32
 8006986:	d867      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x16c>
 8006988:	2b00      	cmp	r3, #0
 800698a:	d05c      	beq.n	8006a46 <HAL_TIM_ConfigClockSource+0x15a>
 800698c:	2b10      	cmp	r3, #16
 800698e:	d05a      	beq.n	8006a46 <HAL_TIM_ConfigClockSource+0x15a>
 8006990:	e062      	b.n	8006a58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6818      	ldr	r0, [r3, #0]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	6899      	ldr	r1, [r3, #8]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f000 fb35 	bl	8007010 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	609a      	str	r2, [r3, #8]
      break;
 80069be:	e04f      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6818      	ldr	r0, [r3, #0]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	6899      	ldr	r1, [r3, #8]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	f000 fb1e 	bl	8007010 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689a      	ldr	r2, [r3, #8]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069e2:	609a      	str	r2, [r3, #8]
      break;
 80069e4:	e03c      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6818      	ldr	r0, [r3, #0]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	6859      	ldr	r1, [r3, #4]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	461a      	mov	r2, r3
 80069f4:	f000 fa92 	bl	8006f1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2150      	movs	r1, #80	; 0x50
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 faeb 	bl	8006fda <TIM_ITRx_SetConfig>
      break;
 8006a04:	e02c      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6818      	ldr	r0, [r3, #0]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	6859      	ldr	r1, [r3, #4]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	461a      	mov	r2, r3
 8006a14:	f000 fab1 	bl	8006f7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2160      	movs	r1, #96	; 0x60
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fadb 	bl	8006fda <TIM_ITRx_SetConfig>
      break;
 8006a24:	e01c      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6818      	ldr	r0, [r3, #0]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	6859      	ldr	r1, [r3, #4]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	461a      	mov	r2, r3
 8006a34:	f000 fa72 	bl	8006f1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2140      	movs	r1, #64	; 0x40
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 facb 	bl	8006fda <TIM_ITRx_SetConfig>
      break;
 8006a44:	e00c      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4610      	mov	r0, r2
 8006a52:	f000 fac2 	bl	8006fda <TIM_ITRx_SetConfig>
      break;
 8006a56:	e003      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a5c:	e000      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
	...

08006a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a40      	ldr	r2, [pc, #256]	; (8006b90 <TIM_Base_SetConfig+0x114>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d013      	beq.n	8006abc <TIM_Base_SetConfig+0x40>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a9a:	d00f      	beq.n	8006abc <TIM_Base_SetConfig+0x40>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a3d      	ldr	r2, [pc, #244]	; (8006b94 <TIM_Base_SetConfig+0x118>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d00b      	beq.n	8006abc <TIM_Base_SetConfig+0x40>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a3c      	ldr	r2, [pc, #240]	; (8006b98 <TIM_Base_SetConfig+0x11c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d007      	beq.n	8006abc <TIM_Base_SetConfig+0x40>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a3b      	ldr	r2, [pc, #236]	; (8006b9c <TIM_Base_SetConfig+0x120>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d003      	beq.n	8006abc <TIM_Base_SetConfig+0x40>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a3a      	ldr	r2, [pc, #232]	; (8006ba0 <TIM_Base_SetConfig+0x124>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d108      	bne.n	8006ace <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a2f      	ldr	r2, [pc, #188]	; (8006b90 <TIM_Base_SetConfig+0x114>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d02b      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006adc:	d027      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a2c      	ldr	r2, [pc, #176]	; (8006b94 <TIM_Base_SetConfig+0x118>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d023      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a2b      	ldr	r2, [pc, #172]	; (8006b98 <TIM_Base_SetConfig+0x11c>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d01f      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a2a      	ldr	r2, [pc, #168]	; (8006b9c <TIM_Base_SetConfig+0x120>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d01b      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a29      	ldr	r2, [pc, #164]	; (8006ba0 <TIM_Base_SetConfig+0x124>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d017      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a28      	ldr	r2, [pc, #160]	; (8006ba4 <TIM_Base_SetConfig+0x128>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d013      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a27      	ldr	r2, [pc, #156]	; (8006ba8 <TIM_Base_SetConfig+0x12c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d00f      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a26      	ldr	r2, [pc, #152]	; (8006bac <TIM_Base_SetConfig+0x130>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d00b      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a25      	ldr	r2, [pc, #148]	; (8006bb0 <TIM_Base_SetConfig+0x134>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d007      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a24      	ldr	r2, [pc, #144]	; (8006bb4 <TIM_Base_SetConfig+0x138>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d003      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a23      	ldr	r2, [pc, #140]	; (8006bb8 <TIM_Base_SetConfig+0x13c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d108      	bne.n	8006b40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a0a      	ldr	r2, [pc, #40]	; (8006b90 <TIM_Base_SetConfig+0x114>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d003      	beq.n	8006b74 <TIM_Base_SetConfig+0xf8>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a0c      	ldr	r2, [pc, #48]	; (8006ba0 <TIM_Base_SetConfig+0x124>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d103      	bne.n	8006b7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	691a      	ldr	r2, [r3, #16]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	615a      	str	r2, [r3, #20]
}
 8006b82:	bf00      	nop
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	40010000 	.word	0x40010000
 8006b94:	40000400 	.word	0x40000400
 8006b98:	40000800 	.word	0x40000800
 8006b9c:	40000c00 	.word	0x40000c00
 8006ba0:	40010400 	.word	0x40010400
 8006ba4:	40014000 	.word	0x40014000
 8006ba8:	40014400 	.word	0x40014400
 8006bac:	40014800 	.word	0x40014800
 8006bb0:	40001800 	.word	0x40001800
 8006bb4:	40001c00 	.word	0x40001c00
 8006bb8:	40002000 	.word	0x40002000

08006bbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	f023 0201 	bic.w	r2, r3, #1
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0303 	bic.w	r3, r3, #3
 8006bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f023 0302 	bic.w	r3, r3, #2
 8006c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a20      	ldr	r2, [pc, #128]	; (8006c94 <TIM_OC1_SetConfig+0xd8>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d003      	beq.n	8006c20 <TIM_OC1_SetConfig+0x64>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a1f      	ldr	r2, [pc, #124]	; (8006c98 <TIM_OC1_SetConfig+0xdc>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d10c      	bne.n	8006c3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f023 0308 	bic.w	r3, r3, #8
 8006c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f023 0304 	bic.w	r3, r3, #4
 8006c38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a15      	ldr	r2, [pc, #84]	; (8006c94 <TIM_OC1_SetConfig+0xd8>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d003      	beq.n	8006c4a <TIM_OC1_SetConfig+0x8e>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a14      	ldr	r2, [pc, #80]	; (8006c98 <TIM_OC1_SetConfig+0xdc>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d111      	bne.n	8006c6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	621a      	str	r2, [r3, #32]
}
 8006c88:	bf00      	nop
 8006c8a:	371c      	adds	r7, #28
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	40010000 	.word	0x40010000
 8006c98:	40010400 	.word	0x40010400

08006c9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	f023 0210 	bic.w	r2, r3, #16
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	021b      	lsls	r3, r3, #8
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	f023 0320 	bic.w	r3, r3, #32
 8006ce6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	011b      	lsls	r3, r3, #4
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a22      	ldr	r2, [pc, #136]	; (8006d80 <TIM_OC2_SetConfig+0xe4>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d003      	beq.n	8006d04 <TIM_OC2_SetConfig+0x68>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a21      	ldr	r2, [pc, #132]	; (8006d84 <TIM_OC2_SetConfig+0xe8>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d10d      	bne.n	8006d20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	011b      	lsls	r3, r3, #4
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a17      	ldr	r2, [pc, #92]	; (8006d80 <TIM_OC2_SetConfig+0xe4>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d003      	beq.n	8006d30 <TIM_OC2_SetConfig+0x94>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a16      	ldr	r2, [pc, #88]	; (8006d84 <TIM_OC2_SetConfig+0xe8>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d113      	bne.n	8006d58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	621a      	str	r2, [r3, #32]
}
 8006d72:	bf00      	nop
 8006d74:	371c      	adds	r7, #28
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	40010000 	.word	0x40010000
 8006d84:	40010400 	.word	0x40010400

08006d88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 0303 	bic.w	r3, r3, #3
 8006dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	021b      	lsls	r3, r3, #8
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a21      	ldr	r2, [pc, #132]	; (8006e68 <TIM_OC3_SetConfig+0xe0>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d003      	beq.n	8006dee <TIM_OC3_SetConfig+0x66>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a20      	ldr	r2, [pc, #128]	; (8006e6c <TIM_OC3_SetConfig+0xe4>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d10d      	bne.n	8006e0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006df4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	021b      	lsls	r3, r3, #8
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a16      	ldr	r2, [pc, #88]	; (8006e68 <TIM_OC3_SetConfig+0xe0>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d003      	beq.n	8006e1a <TIM_OC3_SetConfig+0x92>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a15      	ldr	r2, [pc, #84]	; (8006e6c <TIM_OC3_SetConfig+0xe4>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d113      	bne.n	8006e42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	011b      	lsls	r3, r3, #4
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	011b      	lsls	r3, r3, #4
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	621a      	str	r2, [r3, #32]
}
 8006e5c:	bf00      	nop
 8006e5e:	371c      	adds	r7, #28
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	40010000 	.word	0x40010000
 8006e6c:	40010400 	.word	0x40010400

08006e70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	021b      	lsls	r3, r3, #8
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006eba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	031b      	lsls	r3, r3, #12
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a12      	ldr	r2, [pc, #72]	; (8006f14 <TIM_OC4_SetConfig+0xa4>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d003      	beq.n	8006ed8 <TIM_OC4_SetConfig+0x68>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a11      	ldr	r2, [pc, #68]	; (8006f18 <TIM_OC4_SetConfig+0xa8>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d109      	bne.n	8006eec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ede:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	019b      	lsls	r3, r3, #6
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	621a      	str	r2, [r3, #32]
}
 8006f06:	bf00      	nop
 8006f08:	371c      	adds	r7, #28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	40010000 	.word	0x40010000
 8006f18:	40010400 	.word	0x40010400

08006f1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6a1b      	ldr	r3, [r3, #32]
 8006f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	f023 0201 	bic.w	r2, r3, #1
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	011b      	lsls	r3, r3, #4
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f023 030a 	bic.w	r3, r3, #10
 8006f58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	621a      	str	r2, [r3, #32]
}
 8006f6e:	bf00      	nop
 8006f70:	371c      	adds	r7, #28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b087      	sub	sp, #28
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	60f8      	str	r0, [r7, #12]
 8006f82:	60b9      	str	r1, [r7, #8]
 8006f84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	f023 0210 	bic.w	r2, r3, #16
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a1b      	ldr	r3, [r3, #32]
 8006f9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	031b      	lsls	r3, r3, #12
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	011b      	lsls	r3, r3, #4
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	621a      	str	r2, [r3, #32]
}
 8006fce:	bf00      	nop
 8006fd0:	371c      	adds	r7, #28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b085      	sub	sp, #20
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	f043 0307 	orr.w	r3, r3, #7
 8006ffc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	609a      	str	r2, [r3, #8]
}
 8007004:	bf00      	nop
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
 800701c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800702a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	021a      	lsls	r2, r3, #8
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	431a      	orrs	r2, r3
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	4313      	orrs	r3, r2
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	4313      	orrs	r3, r2
 800703c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	609a      	str	r2, [r3, #8]
}
 8007044:	bf00      	nop
 8007046:	371c      	adds	r7, #28
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f003 031f 	and.w	r3, r3, #31
 8007062:	2201      	movs	r2, #1
 8007064:	fa02 f303 	lsl.w	r3, r2, r3
 8007068:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6a1a      	ldr	r2, [r3, #32]
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	43db      	mvns	r3, r3
 8007072:	401a      	ands	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6a1a      	ldr	r2, [r3, #32]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f003 031f 	and.w	r3, r3, #31
 8007082:	6879      	ldr	r1, [r7, #4]
 8007084:	fa01 f303 	lsl.w	r3, r1, r3
 8007088:	431a      	orrs	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	621a      	str	r2, [r3, #32]
}
 800708e:	bf00      	nop
 8007090:	371c      	adds	r7, #28
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
	...

0800709c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d101      	bne.n	80070b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070b0:	2302      	movs	r3, #2
 80070b2:	e05a      	b.n	800716a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2202      	movs	r2, #2
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a21      	ldr	r2, [pc, #132]	; (8007178 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d022      	beq.n	800713e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007100:	d01d      	beq.n	800713e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a1d      	ldr	r2, [pc, #116]	; (800717c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d018      	beq.n	800713e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a1b      	ldr	r2, [pc, #108]	; (8007180 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d013      	beq.n	800713e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a1a      	ldr	r2, [pc, #104]	; (8007184 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d00e      	beq.n	800713e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a18      	ldr	r2, [pc, #96]	; (8007188 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d009      	beq.n	800713e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a17      	ldr	r2, [pc, #92]	; (800718c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d004      	beq.n	800713e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a15      	ldr	r2, [pc, #84]	; (8007190 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d10c      	bne.n	8007158 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007144:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	4313      	orrs	r3, r2
 800714e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	40010000 	.word	0x40010000
 800717c:	40000400 	.word	0x40000400
 8007180:	40000800 	.word	0x40000800
 8007184:	40000c00 	.word	0x40000c00
 8007188:	40010400 	.word	0x40010400
 800718c:	40014000 	.word	0x40014000
 8007190:	40001800 	.word	0x40001800

08007194 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800719e:	2300      	movs	r3, #0
 80071a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d101      	bne.n	80071b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80071ac:	2302      	movs	r3, #2
 80071ae:	e03d      	b.n	800722c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	4313      	orrs	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	4313      	orrs	r3, r2
 800720a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	4313      	orrs	r3, r2
 8007218:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e03f      	b.n	80072ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d106      	bne.n	8007264 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7fd fa8a 	bl	8004778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2224      	movs	r2, #36	; 0x24
 8007268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68da      	ldr	r2, [r3, #12]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800727a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fe1d 	bl	8007ebc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	691a      	ldr	r2, [r3, #16]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007290:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	695a      	ldr	r2, [r3, #20]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2220      	movs	r2, #32
 80072bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2220      	movs	r2, #32
 80072c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b08a      	sub	sp, #40	; 0x28
 80072d6:	af02      	add	r7, sp, #8
 80072d8:	60f8      	str	r0, [r7, #12]
 80072da:	60b9      	str	r1, [r7, #8]
 80072dc:	603b      	str	r3, [r7, #0]
 80072de:	4613      	mov	r3, r2
 80072e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80072e2:	2300      	movs	r3, #0
 80072e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b20      	cmp	r3, #32
 80072f0:	d17c      	bne.n	80073ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d002      	beq.n	80072fe <HAL_UART_Transmit+0x2c>
 80072f8:	88fb      	ldrh	r3, [r7, #6]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e075      	b.n	80073ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007308:	2b01      	cmp	r3, #1
 800730a:	d101      	bne.n	8007310 <HAL_UART_Transmit+0x3e>
 800730c:	2302      	movs	r3, #2
 800730e:	e06e      	b.n	80073ee <HAL_UART_Transmit+0x11c>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2221      	movs	r2, #33	; 0x21
 8007322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007326:	f7fd fc4b 	bl	8004bc0 <HAL_GetTick>
 800732a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	88fa      	ldrh	r2, [r7, #6]
 8007330:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	88fa      	ldrh	r2, [r7, #6]
 8007336:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007340:	d108      	bne.n	8007354 <HAL_UART_Transmit+0x82>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d104      	bne.n	8007354 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800734a:	2300      	movs	r3, #0
 800734c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	61bb      	str	r3, [r7, #24]
 8007352:	e003      	b.n	800735c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007358:	2300      	movs	r3, #0
 800735a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007364:	e02a      	b.n	80073bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2200      	movs	r2, #0
 800736e:	2180      	movs	r1, #128	; 0x80
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 fb9b 	bl	8007aac <UART_WaitOnFlagUntilTimeout>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e036      	b.n	80073ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10b      	bne.n	800739e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007394:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	3302      	adds	r3, #2
 800739a:	61bb      	str	r3, [r7, #24]
 800739c:	e007      	b.n	80073ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	781a      	ldrb	r2, [r3, #0]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	3301      	adds	r3, #1
 80073ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	3b01      	subs	r3, #1
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1cf      	bne.n	8007366 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	2200      	movs	r2, #0
 80073ce:	2140      	movs	r1, #64	; 0x40
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 fb6b 	bl	8007aac <UART_WaitOnFlagUntilTimeout>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e006      	b.n	80073ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2220      	movs	r2, #32
 80073e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	e000      	b.n	80073ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80073ec:	2302      	movs	r3, #2
  }
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3720      	adds	r7, #32
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b08a      	sub	sp, #40	; 0x28
 80073fa:	af02      	add	r7, sp, #8
 80073fc:	60f8      	str	r0, [r7, #12]
 80073fe:	60b9      	str	r1, [r7, #8]
 8007400:	603b      	str	r3, [r7, #0]
 8007402:	4613      	mov	r3, r2
 8007404:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b20      	cmp	r3, #32
 8007414:	f040 808c 	bne.w	8007530 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <HAL_UART_Receive+0x2e>
 800741e:	88fb      	ldrh	r3, [r7, #6]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e084      	b.n	8007532 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800742e:	2b01      	cmp	r3, #1
 8007430:	d101      	bne.n	8007436 <HAL_UART_Receive+0x40>
 8007432:	2302      	movs	r3, #2
 8007434:	e07d      	b.n	8007532 <HAL_UART_Receive+0x13c>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2201      	movs	r2, #1
 800743a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2222      	movs	r2, #34	; 0x22
 8007448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007452:	f7fd fbb5 	bl	8004bc0 <HAL_GetTick>
 8007456:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	88fa      	ldrh	r2, [r7, #6]
 800745c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	88fa      	ldrh	r2, [r7, #6]
 8007462:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800746c:	d108      	bne.n	8007480 <HAL_UART_Receive+0x8a>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d104      	bne.n	8007480 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007476:	2300      	movs	r3, #0
 8007478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	61bb      	str	r3, [r7, #24]
 800747e:	e003      	b.n	8007488 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007484:	2300      	movs	r3, #0
 8007486:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007490:	e043      	b.n	800751a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2200      	movs	r2, #0
 800749a:	2120      	movs	r1, #32
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f000 fb05 	bl	8007aac <UART_WaitOnFlagUntilTimeout>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e042      	b.n	8007532 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10c      	bne.n	80074cc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074be:	b29a      	uxth	r2, r3
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	3302      	adds	r3, #2
 80074c8:	61bb      	str	r3, [r7, #24]
 80074ca:	e01f      	b.n	800750c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074d4:	d007      	beq.n	80074e6 <HAL_UART_Receive+0xf0>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10a      	bne.n	80074f4 <HAL_UART_Receive+0xfe>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d106      	bne.n	80074f4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	b2da      	uxtb	r2, r3
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	701a      	strb	r2, [r3, #0]
 80074f2:	e008      	b.n	8007506 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007500:	b2da      	uxtb	r2, r3
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	3301      	adds	r3, #1
 800750a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007510:	b29b      	uxth	r3, r3
 8007512:	3b01      	subs	r3, #1
 8007514:	b29a      	uxth	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800751e:	b29b      	uxth	r3, r3
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1b6      	bne.n	8007492 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2220      	movs	r2, #32
 8007528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	e000      	b.n	8007532 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007530:	2302      	movs	r3, #2
  }
}
 8007532:	4618      	mov	r0, r3
 8007534:	3720      	adds	r7, #32
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b0ba      	sub	sp, #232	; 0xe8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007562:	2300      	movs	r3, #0
 8007564:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007568:	2300      	movs	r3, #0
 800756a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800756e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007572:	f003 030f 	and.w	r3, r3, #15
 8007576:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800757a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10f      	bne.n	80075a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007586:	f003 0320 	and.w	r3, r3, #32
 800758a:	2b00      	cmp	r3, #0
 800758c:	d009      	beq.n	80075a2 <HAL_UART_IRQHandler+0x66>
 800758e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007592:	f003 0320 	and.w	r3, r3, #32
 8007596:	2b00      	cmp	r3, #0
 8007598:	d003      	beq.n	80075a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fbd3 	bl	8007d46 <UART_Receive_IT>
      return;
 80075a0:	e256      	b.n	8007a50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80075a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 80de 	beq.w	8007768 <HAL_UART_IRQHandler+0x22c>
 80075ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075b0:	f003 0301 	and.w	r3, r3, #1
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d106      	bne.n	80075c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80075b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f000 80d1 	beq.w	8007768 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80075c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00b      	beq.n	80075ea <HAL_UART_IRQHandler+0xae>
 80075d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d005      	beq.n	80075ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e2:	f043 0201 	orr.w	r2, r3, #1
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ee:	f003 0304 	and.w	r3, r3, #4
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00b      	beq.n	800760e <HAL_UART_IRQHandler+0xd2>
 80075f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d005      	beq.n	800760e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	f043 0202 	orr.w	r2, r3, #2
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800760e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007612:	f003 0302 	and.w	r3, r3, #2
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00b      	beq.n	8007632 <HAL_UART_IRQHandler+0xf6>
 800761a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d005      	beq.n	8007632 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762a:	f043 0204 	orr.w	r2, r3, #4
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007636:	f003 0308 	and.w	r3, r3, #8
 800763a:	2b00      	cmp	r3, #0
 800763c:	d011      	beq.n	8007662 <HAL_UART_IRQHandler+0x126>
 800763e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007642:	f003 0320 	and.w	r3, r3, #32
 8007646:	2b00      	cmp	r3, #0
 8007648:	d105      	bne.n	8007656 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800764a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	2b00      	cmp	r3, #0
 8007654:	d005      	beq.n	8007662 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765a:	f043 0208 	orr.w	r2, r3, #8
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 81ed 	beq.w	8007a46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800766c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007670:	f003 0320 	and.w	r3, r3, #32
 8007674:	2b00      	cmp	r3, #0
 8007676:	d008      	beq.n	800768a <HAL_UART_IRQHandler+0x14e>
 8007678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800767c:	f003 0320 	and.w	r3, r3, #32
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fb5e 	bl	8007d46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007694:	2b40      	cmp	r3, #64	; 0x40
 8007696:	bf0c      	ite	eq
 8007698:	2301      	moveq	r3, #1
 800769a:	2300      	movne	r3, #0
 800769c:	b2db      	uxtb	r3, r3
 800769e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a6:	f003 0308 	and.w	r3, r3, #8
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d103      	bne.n	80076b6 <HAL_UART_IRQHandler+0x17a>
 80076ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d04f      	beq.n	8007756 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fa66 	bl	8007b88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c6:	2b40      	cmp	r3, #64	; 0x40
 80076c8:	d141      	bne.n	800774e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3314      	adds	r3, #20
 80076d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076d8:	e853 3f00 	ldrex	r3, [r3]
 80076dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	3314      	adds	r3, #20
 80076f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80076fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007702:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007706:	e841 2300 	strex	r3, r2, [r1]
 800770a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800770e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1d9      	bne.n	80076ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771a:	2b00      	cmp	r3, #0
 800771c:	d013      	beq.n	8007746 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007722:	4a7d      	ldr	r2, [pc, #500]	; (8007918 <HAL_UART_IRQHandler+0x3dc>)
 8007724:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772a:	4618      	mov	r0, r3
 800772c:	f7fd ffc5 	bl	80056ba <HAL_DMA_Abort_IT>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d016      	beq.n	8007764 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007740:	4610      	mov	r0, r2
 8007742:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007744:	e00e      	b.n	8007764 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f99a 	bl	8007a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800774c:	e00a      	b.n	8007764 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f996 	bl	8007a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007754:	e006      	b.n	8007764 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f992 	bl	8007a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007762:	e170      	b.n	8007a46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007764:	bf00      	nop
    return;
 8007766:	e16e      	b.n	8007a46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776c:	2b01      	cmp	r3, #1
 800776e:	f040 814a 	bne.w	8007a06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007776:	f003 0310 	and.w	r3, r3, #16
 800777a:	2b00      	cmp	r3, #0
 800777c:	f000 8143 	beq.w	8007a06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007784:	f003 0310 	and.w	r3, r3, #16
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 813c 	beq.w	8007a06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800778e:	2300      	movs	r3, #0
 8007790:	60bb      	str	r3, [r7, #8]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	60bb      	str	r3, [r7, #8]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	60bb      	str	r3, [r7, #8]
 80077a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ae:	2b40      	cmp	r3, #64	; 0x40
 80077b0:	f040 80b4 	bne.w	800791c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 8140 	beq.w	8007a4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077d2:	429a      	cmp	r2, r3
 80077d4:	f080 8139 	bcs.w	8007a4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ea:	f000 8088 	beq.w	80078fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	330c      	adds	r3, #12
 80077f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077fc:	e853 3f00 	ldrex	r3, [r3]
 8007800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007804:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800780c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	330c      	adds	r3, #12
 8007816:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800781a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800781e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007822:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007826:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800782a:	e841 2300 	strex	r3, r2, [r1]
 800782e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007832:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1d9      	bne.n	80077ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3314      	adds	r3, #20
 8007840:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007842:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007844:	e853 3f00 	ldrex	r3, [r3]
 8007848:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800784a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800784c:	f023 0301 	bic.w	r3, r3, #1
 8007850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3314      	adds	r3, #20
 800785a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800785e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007862:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007866:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800786a:	e841 2300 	strex	r3, r2, [r1]
 800786e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1e1      	bne.n	800783a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3314      	adds	r3, #20
 800787c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007880:	e853 3f00 	ldrex	r3, [r3]
 8007884:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800788c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3314      	adds	r3, #20
 8007896:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800789a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800789c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078a2:	e841 2300 	strex	r3, r2, [r1]
 80078a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1e3      	bne.n	8007876 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2220      	movs	r2, #32
 80078b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	330c      	adds	r3, #12
 80078c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078c6:	e853 3f00 	ldrex	r3, [r3]
 80078ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078ce:	f023 0310 	bic.w	r3, r3, #16
 80078d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	330c      	adds	r3, #12
 80078dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80078e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80078e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078e8:	e841 2300 	strex	r3, r2, [r1]
 80078ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1e3      	bne.n	80078bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fd fe6e 	bl	80055da <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007906:	b29b      	uxth	r3, r3
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	b29b      	uxth	r3, r3
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f8c0 	bl	8007a94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007914:	e099      	b.n	8007a4a <HAL_UART_IRQHandler+0x50e>
 8007916:	bf00      	nop
 8007918:	08007c4f 	.word	0x08007c4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007924:	b29b      	uxth	r3, r3
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007930:	b29b      	uxth	r3, r3
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 808b 	beq.w	8007a4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007938:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 8086 	beq.w	8007a4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	330c      	adds	r3, #12
 8007948:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794c:	e853 3f00 	ldrex	r3, [r3]
 8007950:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007954:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007958:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	330c      	adds	r3, #12
 8007962:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007966:	647a      	str	r2, [r7, #68]	; 0x44
 8007968:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800796c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800796e:	e841 2300 	strex	r3, r2, [r1]
 8007972:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1e3      	bne.n	8007942 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3314      	adds	r3, #20
 8007980:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	e853 3f00 	ldrex	r3, [r3]
 8007988:	623b      	str	r3, [r7, #32]
   return(result);
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	f023 0301 	bic.w	r3, r3, #1
 8007990:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3314      	adds	r3, #20
 800799a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800799e:	633a      	str	r2, [r7, #48]	; 0x30
 80079a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a6:	e841 2300 	strex	r3, r2, [r1]
 80079aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1e3      	bne.n	800797a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2220      	movs	r2, #32
 80079b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	330c      	adds	r3, #12
 80079c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	e853 3f00 	ldrex	r3, [r3]
 80079ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f023 0310 	bic.w	r3, r3, #16
 80079d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	330c      	adds	r3, #12
 80079e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80079e4:	61fa      	str	r2, [r7, #28]
 80079e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e8:	69b9      	ldr	r1, [r7, #24]
 80079ea:	69fa      	ldr	r2, [r7, #28]
 80079ec:	e841 2300 	strex	r3, r2, [r1]
 80079f0:	617b      	str	r3, [r7, #20]
   return(result);
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1e3      	bne.n	80079c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079fc:	4619      	mov	r1, r3
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f848 	bl	8007a94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a04:	e023      	b.n	8007a4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d009      	beq.n	8007a26 <HAL_UART_IRQHandler+0x4ea>
 8007a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f929 	bl	8007c76 <UART_Transmit_IT>
    return;
 8007a24:	e014      	b.n	8007a50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00e      	beq.n	8007a50 <HAL_UART_IRQHandler+0x514>
 8007a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d008      	beq.n	8007a50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f969 	bl	8007d16 <UART_EndTransmit_IT>
    return;
 8007a44:	e004      	b.n	8007a50 <HAL_UART_IRQHandler+0x514>
    return;
 8007a46:	bf00      	nop
 8007a48:	e002      	b.n	8007a50 <HAL_UART_IRQHandler+0x514>
      return;
 8007a4a:	bf00      	nop
 8007a4c:	e000      	b.n	8007a50 <HAL_UART_IRQHandler+0x514>
      return;
 8007a4e:	bf00      	nop
  }
}
 8007a50:	37e8      	adds	r7, #232	; 0xe8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop

08007a58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b090      	sub	sp, #64	; 0x40
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	603b      	str	r3, [r7, #0]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007abc:	e050      	b.n	8007b60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac4:	d04c      	beq.n	8007b60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d007      	beq.n	8007adc <UART_WaitOnFlagUntilTimeout+0x30>
 8007acc:	f7fd f878 	bl	8004bc0 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d241      	bcs.n	8007b60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	330c      	adds	r3, #12
 8007ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae6:	e853 3f00 	ldrex	r3, [r3]
 8007aea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	330c      	adds	r3, #12
 8007afa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007afc:	637a      	str	r2, [r7, #52]	; 0x34
 8007afe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b04:	e841 2300 	strex	r3, r2, [r1]
 8007b08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1e5      	bne.n	8007adc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	3314      	adds	r3, #20
 8007b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	e853 3f00 	ldrex	r3, [r3]
 8007b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f023 0301 	bic.w	r3, r3, #1
 8007b26:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3314      	adds	r3, #20
 8007b2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b30:	623a      	str	r2, [r7, #32]
 8007b32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b34:	69f9      	ldr	r1, [r7, #28]
 8007b36:	6a3a      	ldr	r2, [r7, #32]
 8007b38:	e841 2300 	strex	r3, r2, [r1]
 8007b3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1e5      	bne.n	8007b10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2220      	movs	r2, #32
 8007b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e00f      	b.n	8007b80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	4013      	ands	r3, r2
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	bf0c      	ite	eq
 8007b70:	2301      	moveq	r3, #1
 8007b72:	2300      	movne	r3, #0
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	461a      	mov	r2, r3
 8007b78:	79fb      	ldrb	r3, [r7, #7]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d09f      	beq.n	8007abe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3740      	adds	r7, #64	; 0x40
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b095      	sub	sp, #84	; 0x54
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	330c      	adds	r3, #12
 8007b96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b9a:	e853 3f00 	ldrex	r3, [r3]
 8007b9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	330c      	adds	r3, #12
 8007bae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bb0:	643a      	str	r2, [r7, #64]	; 0x40
 8007bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bb8:	e841 2300 	strex	r3, r2, [r1]
 8007bbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1e5      	bne.n	8007b90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	3314      	adds	r3, #20
 8007bca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bcc:	6a3b      	ldr	r3, [r7, #32]
 8007bce:	e853 3f00 	ldrex	r3, [r3]
 8007bd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	f023 0301 	bic.w	r3, r3, #1
 8007bda:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	3314      	adds	r3, #20
 8007be2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007be4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007be6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bec:	e841 2300 	strex	r3, r2, [r1]
 8007bf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1e5      	bne.n	8007bc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d119      	bne.n	8007c34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	330c      	adds	r3, #12
 8007c06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	e853 3f00 	ldrex	r3, [r3]
 8007c0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f023 0310 	bic.w	r3, r3, #16
 8007c16:	647b      	str	r3, [r7, #68]	; 0x44
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	330c      	adds	r3, #12
 8007c1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c20:	61ba      	str	r2, [r7, #24]
 8007c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c24:	6979      	ldr	r1, [r7, #20]
 8007c26:	69ba      	ldr	r2, [r7, #24]
 8007c28:	e841 2300 	strex	r3, r2, [r1]
 8007c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1e5      	bne.n	8007c00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2220      	movs	r2, #32
 8007c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007c42:	bf00      	nop
 8007c44:	3754      	adds	r7, #84	; 0x54
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b084      	sub	sp, #16
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f7ff ff09 	bl	8007a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c6e:	bf00      	nop
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b085      	sub	sp, #20
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b21      	cmp	r3, #33	; 0x21
 8007c88:	d13e      	bne.n	8007d08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c92:	d114      	bne.n	8007cbe <UART_Transmit_IT+0x48>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d110      	bne.n	8007cbe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a1b      	ldr	r3, [r3, #32]
 8007ca0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	881b      	ldrh	r3, [r3, #0]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cb0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	1c9a      	adds	r2, r3, #2
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	621a      	str	r2, [r3, #32]
 8007cbc:	e008      	b.n	8007cd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	1c59      	adds	r1, r3, #1
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	6211      	str	r1, [r2, #32]
 8007cc8:	781a      	ldrb	r2, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	4619      	mov	r1, r3
 8007cde:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10f      	bne.n	8007d04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68da      	ldr	r2, [r3, #12]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cf2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68da      	ldr	r2, [r3, #12]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	e000      	b.n	8007d0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007d08:	2302      	movs	r3, #2
  }
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3714      	adds	r7, #20
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b082      	sub	sp, #8
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68da      	ldr	r2, [r3, #12]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2220      	movs	r2, #32
 8007d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7ff fe8e 	bl	8007a58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b08c      	sub	sp, #48	; 0x30
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b22      	cmp	r3, #34	; 0x22
 8007d58:	f040 80ab 	bne.w	8007eb2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d64:	d117      	bne.n	8007d96 <UART_Receive_IT+0x50>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d113      	bne.n	8007d96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8e:	1c9a      	adds	r2, r3, #2
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	629a      	str	r2, [r3, #40]	; 0x28
 8007d94:	e026      	b.n	8007de4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007da8:	d007      	beq.n	8007dba <UART_Receive_IT+0x74>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10a      	bne.n	8007dc8 <UART_Receive_IT+0x82>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d106      	bne.n	8007dc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	b2da      	uxtb	r2, r3
 8007dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc4:	701a      	strb	r2, [r3, #0]
 8007dc6:	e008      	b.n	8007dda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	3b01      	subs	r3, #1
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	4619      	mov	r1, r3
 8007df2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d15a      	bne.n	8007eae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68da      	ldr	r2, [r3, #12]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f022 0220 	bic.w	r2, r2, #32
 8007e06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68da      	ldr	r2, [r3, #12]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	695a      	ldr	r2, [r3, #20]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f022 0201 	bic.w	r2, r2, #1
 8007e26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2220      	movs	r2, #32
 8007e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d135      	bne.n	8007ea4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	330c      	adds	r3, #12
 8007e44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	e853 3f00 	ldrex	r3, [r3]
 8007e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	f023 0310 	bic.w	r3, r3, #16
 8007e54:	627b      	str	r3, [r7, #36]	; 0x24
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	330c      	adds	r3, #12
 8007e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e5e:	623a      	str	r2, [r7, #32]
 8007e60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e62:	69f9      	ldr	r1, [r7, #28]
 8007e64:	6a3a      	ldr	r2, [r7, #32]
 8007e66:	e841 2300 	strex	r3, r2, [r1]
 8007e6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1e5      	bne.n	8007e3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0310 	and.w	r3, r3, #16
 8007e7c:	2b10      	cmp	r3, #16
 8007e7e:	d10a      	bne.n	8007e96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e80:	2300      	movs	r3, #0
 8007e82:	60fb      	str	r3, [r7, #12]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	60fb      	str	r3, [r7, #12]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	60fb      	str	r3, [r7, #12]
 8007e94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7ff fdf9 	bl	8007a94 <HAL_UARTEx_RxEventCallback>
 8007ea2:	e002      	b.n	8007eaa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7ff fde1 	bl	8007a6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	e002      	b.n	8007eb4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	e000      	b.n	8007eb4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007eb2:	2302      	movs	r3, #2
  }
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3730      	adds	r7, #48	; 0x30
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec0:	b09f      	sub	sp, #124	; 0x7c
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ed2:	68d9      	ldr	r1, [r3, #12]
 8007ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	ea40 0301 	orr.w	r3, r0, r1
 8007edc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ee0:	689a      	ldr	r2, [r3, #8]
 8007ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eea:	695b      	ldr	r3, [r3, #20]
 8007eec:	431a      	orrs	r2, r3
 8007eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ef0:	69db      	ldr	r3, [r3, #28]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007f00:	f021 010c 	bic.w	r1, r1, #12
 8007f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f0a:	430b      	orrs	r3, r1
 8007f0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	695b      	ldr	r3, [r3, #20]
 8007f14:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f1a:	6999      	ldr	r1, [r3, #24]
 8007f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	ea40 0301 	orr.w	r3, r0, r1
 8007f24:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	4bc5      	ldr	r3, [pc, #788]	; (8008240 <UART_SetConfig+0x384>)
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d004      	beq.n	8007f3a <UART_SetConfig+0x7e>
 8007f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	4bc3      	ldr	r3, [pc, #780]	; (8008244 <UART_SetConfig+0x388>)
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d103      	bne.n	8007f42 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f3a:	f7fe fa27 	bl	800638c <HAL_RCC_GetPCLK2Freq>
 8007f3e:	6778      	str	r0, [r7, #116]	; 0x74
 8007f40:	e002      	b.n	8007f48 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f42:	f7fe fa0f 	bl	8006364 <HAL_RCC_GetPCLK1Freq>
 8007f46:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f4a:	69db      	ldr	r3, [r3, #28]
 8007f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f50:	f040 80b6 	bne.w	80080c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f56:	461c      	mov	r4, r3
 8007f58:	f04f 0500 	mov.w	r5, #0
 8007f5c:	4622      	mov	r2, r4
 8007f5e:	462b      	mov	r3, r5
 8007f60:	1891      	adds	r1, r2, r2
 8007f62:	6439      	str	r1, [r7, #64]	; 0x40
 8007f64:	415b      	adcs	r3, r3
 8007f66:	647b      	str	r3, [r7, #68]	; 0x44
 8007f68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f6c:	1912      	adds	r2, r2, r4
 8007f6e:	eb45 0303 	adc.w	r3, r5, r3
 8007f72:	f04f 0000 	mov.w	r0, #0
 8007f76:	f04f 0100 	mov.w	r1, #0
 8007f7a:	00d9      	lsls	r1, r3, #3
 8007f7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f80:	00d0      	lsls	r0, r2, #3
 8007f82:	4602      	mov	r2, r0
 8007f84:	460b      	mov	r3, r1
 8007f86:	1911      	adds	r1, r2, r4
 8007f88:	6639      	str	r1, [r7, #96]	; 0x60
 8007f8a:	416b      	adcs	r3, r5
 8007f8c:	667b      	str	r3, [r7, #100]	; 0x64
 8007f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	461a      	mov	r2, r3
 8007f94:	f04f 0300 	mov.w	r3, #0
 8007f98:	1891      	adds	r1, r2, r2
 8007f9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f9c:	415b      	adcs	r3, r3
 8007f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007fa4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007fa8:	f7f8 fd88 	bl	8000abc <__aeabi_uldivmod>
 8007fac:	4602      	mov	r2, r0
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4ba5      	ldr	r3, [pc, #660]	; (8008248 <UART_SetConfig+0x38c>)
 8007fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8007fb6:	095b      	lsrs	r3, r3, #5
 8007fb8:	011e      	lsls	r6, r3, #4
 8007fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fbc:	461c      	mov	r4, r3
 8007fbe:	f04f 0500 	mov.w	r5, #0
 8007fc2:	4622      	mov	r2, r4
 8007fc4:	462b      	mov	r3, r5
 8007fc6:	1891      	adds	r1, r2, r2
 8007fc8:	6339      	str	r1, [r7, #48]	; 0x30
 8007fca:	415b      	adcs	r3, r3
 8007fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8007fce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007fd2:	1912      	adds	r2, r2, r4
 8007fd4:	eb45 0303 	adc.w	r3, r5, r3
 8007fd8:	f04f 0000 	mov.w	r0, #0
 8007fdc:	f04f 0100 	mov.w	r1, #0
 8007fe0:	00d9      	lsls	r1, r3, #3
 8007fe2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007fe6:	00d0      	lsls	r0, r2, #3
 8007fe8:	4602      	mov	r2, r0
 8007fea:	460b      	mov	r3, r1
 8007fec:	1911      	adds	r1, r2, r4
 8007fee:	65b9      	str	r1, [r7, #88]	; 0x58
 8007ff0:	416b      	adcs	r3, r5
 8007ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	f04f 0300 	mov.w	r3, #0
 8007ffe:	1891      	adds	r1, r2, r2
 8008000:	62b9      	str	r1, [r7, #40]	; 0x28
 8008002:	415b      	adcs	r3, r3
 8008004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008006:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800800a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800800e:	f7f8 fd55 	bl	8000abc <__aeabi_uldivmod>
 8008012:	4602      	mov	r2, r0
 8008014:	460b      	mov	r3, r1
 8008016:	4b8c      	ldr	r3, [pc, #560]	; (8008248 <UART_SetConfig+0x38c>)
 8008018:	fba3 1302 	umull	r1, r3, r3, r2
 800801c:	095b      	lsrs	r3, r3, #5
 800801e:	2164      	movs	r1, #100	; 0x64
 8008020:	fb01 f303 	mul.w	r3, r1, r3
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	00db      	lsls	r3, r3, #3
 8008028:	3332      	adds	r3, #50	; 0x32
 800802a:	4a87      	ldr	r2, [pc, #540]	; (8008248 <UART_SetConfig+0x38c>)
 800802c:	fba2 2303 	umull	r2, r3, r2, r3
 8008030:	095b      	lsrs	r3, r3, #5
 8008032:	005b      	lsls	r3, r3, #1
 8008034:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008038:	441e      	add	r6, r3
 800803a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800803c:	4618      	mov	r0, r3
 800803e:	f04f 0100 	mov.w	r1, #0
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	1894      	adds	r4, r2, r2
 8008048:	623c      	str	r4, [r7, #32]
 800804a:	415b      	adcs	r3, r3
 800804c:	627b      	str	r3, [r7, #36]	; 0x24
 800804e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008052:	1812      	adds	r2, r2, r0
 8008054:	eb41 0303 	adc.w	r3, r1, r3
 8008058:	f04f 0400 	mov.w	r4, #0
 800805c:	f04f 0500 	mov.w	r5, #0
 8008060:	00dd      	lsls	r5, r3, #3
 8008062:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008066:	00d4      	lsls	r4, r2, #3
 8008068:	4622      	mov	r2, r4
 800806a:	462b      	mov	r3, r5
 800806c:	1814      	adds	r4, r2, r0
 800806e:	653c      	str	r4, [r7, #80]	; 0x50
 8008070:	414b      	adcs	r3, r1
 8008072:	657b      	str	r3, [r7, #84]	; 0x54
 8008074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	461a      	mov	r2, r3
 800807a:	f04f 0300 	mov.w	r3, #0
 800807e:	1891      	adds	r1, r2, r2
 8008080:	61b9      	str	r1, [r7, #24]
 8008082:	415b      	adcs	r3, r3
 8008084:	61fb      	str	r3, [r7, #28]
 8008086:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800808a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800808e:	f7f8 fd15 	bl	8000abc <__aeabi_uldivmod>
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	4b6c      	ldr	r3, [pc, #432]	; (8008248 <UART_SetConfig+0x38c>)
 8008098:	fba3 1302 	umull	r1, r3, r3, r2
 800809c:	095b      	lsrs	r3, r3, #5
 800809e:	2164      	movs	r1, #100	; 0x64
 80080a0:	fb01 f303 	mul.w	r3, r1, r3
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	00db      	lsls	r3, r3, #3
 80080a8:	3332      	adds	r3, #50	; 0x32
 80080aa:	4a67      	ldr	r2, [pc, #412]	; (8008248 <UART_SetConfig+0x38c>)
 80080ac:	fba2 2303 	umull	r2, r3, r2, r3
 80080b0:	095b      	lsrs	r3, r3, #5
 80080b2:	f003 0207 	and.w	r2, r3, #7
 80080b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4432      	add	r2, r6
 80080bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80080be:	e0b9      	b.n	8008234 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080c2:	461c      	mov	r4, r3
 80080c4:	f04f 0500 	mov.w	r5, #0
 80080c8:	4622      	mov	r2, r4
 80080ca:	462b      	mov	r3, r5
 80080cc:	1891      	adds	r1, r2, r2
 80080ce:	6139      	str	r1, [r7, #16]
 80080d0:	415b      	adcs	r3, r3
 80080d2:	617b      	str	r3, [r7, #20]
 80080d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80080d8:	1912      	adds	r2, r2, r4
 80080da:	eb45 0303 	adc.w	r3, r5, r3
 80080de:	f04f 0000 	mov.w	r0, #0
 80080e2:	f04f 0100 	mov.w	r1, #0
 80080e6:	00d9      	lsls	r1, r3, #3
 80080e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80080ec:	00d0      	lsls	r0, r2, #3
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	eb12 0804 	adds.w	r8, r2, r4
 80080f6:	eb43 0905 	adc.w	r9, r3, r5
 80080fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	4618      	mov	r0, r3
 8008100:	f04f 0100 	mov.w	r1, #0
 8008104:	f04f 0200 	mov.w	r2, #0
 8008108:	f04f 0300 	mov.w	r3, #0
 800810c:	008b      	lsls	r3, r1, #2
 800810e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008112:	0082      	lsls	r2, r0, #2
 8008114:	4640      	mov	r0, r8
 8008116:	4649      	mov	r1, r9
 8008118:	f7f8 fcd0 	bl	8000abc <__aeabi_uldivmod>
 800811c:	4602      	mov	r2, r0
 800811e:	460b      	mov	r3, r1
 8008120:	4b49      	ldr	r3, [pc, #292]	; (8008248 <UART_SetConfig+0x38c>)
 8008122:	fba3 2302 	umull	r2, r3, r3, r2
 8008126:	095b      	lsrs	r3, r3, #5
 8008128:	011e      	lsls	r6, r3, #4
 800812a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800812c:	4618      	mov	r0, r3
 800812e:	f04f 0100 	mov.w	r1, #0
 8008132:	4602      	mov	r2, r0
 8008134:	460b      	mov	r3, r1
 8008136:	1894      	adds	r4, r2, r2
 8008138:	60bc      	str	r4, [r7, #8]
 800813a:	415b      	adcs	r3, r3
 800813c:	60fb      	str	r3, [r7, #12]
 800813e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008142:	1812      	adds	r2, r2, r0
 8008144:	eb41 0303 	adc.w	r3, r1, r3
 8008148:	f04f 0400 	mov.w	r4, #0
 800814c:	f04f 0500 	mov.w	r5, #0
 8008150:	00dd      	lsls	r5, r3, #3
 8008152:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008156:	00d4      	lsls	r4, r2, #3
 8008158:	4622      	mov	r2, r4
 800815a:	462b      	mov	r3, r5
 800815c:	1814      	adds	r4, r2, r0
 800815e:	64bc      	str	r4, [r7, #72]	; 0x48
 8008160:	414b      	adcs	r3, r1
 8008162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	4618      	mov	r0, r3
 800816a:	f04f 0100 	mov.w	r1, #0
 800816e:	f04f 0200 	mov.w	r2, #0
 8008172:	f04f 0300 	mov.w	r3, #0
 8008176:	008b      	lsls	r3, r1, #2
 8008178:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800817c:	0082      	lsls	r2, r0, #2
 800817e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008182:	f7f8 fc9b 	bl	8000abc <__aeabi_uldivmod>
 8008186:	4602      	mov	r2, r0
 8008188:	460b      	mov	r3, r1
 800818a:	4b2f      	ldr	r3, [pc, #188]	; (8008248 <UART_SetConfig+0x38c>)
 800818c:	fba3 1302 	umull	r1, r3, r3, r2
 8008190:	095b      	lsrs	r3, r3, #5
 8008192:	2164      	movs	r1, #100	; 0x64
 8008194:	fb01 f303 	mul.w	r3, r1, r3
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	011b      	lsls	r3, r3, #4
 800819c:	3332      	adds	r3, #50	; 0x32
 800819e:	4a2a      	ldr	r2, [pc, #168]	; (8008248 <UART_SetConfig+0x38c>)
 80081a0:	fba2 2303 	umull	r2, r3, r2, r3
 80081a4:	095b      	lsrs	r3, r3, #5
 80081a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081aa:	441e      	add	r6, r3
 80081ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081ae:	4618      	mov	r0, r3
 80081b0:	f04f 0100 	mov.w	r1, #0
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
 80081b8:	1894      	adds	r4, r2, r2
 80081ba:	603c      	str	r4, [r7, #0]
 80081bc:	415b      	adcs	r3, r3
 80081be:	607b      	str	r3, [r7, #4]
 80081c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081c4:	1812      	adds	r2, r2, r0
 80081c6:	eb41 0303 	adc.w	r3, r1, r3
 80081ca:	f04f 0400 	mov.w	r4, #0
 80081ce:	f04f 0500 	mov.w	r5, #0
 80081d2:	00dd      	lsls	r5, r3, #3
 80081d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80081d8:	00d4      	lsls	r4, r2, #3
 80081da:	4622      	mov	r2, r4
 80081dc:	462b      	mov	r3, r5
 80081de:	eb12 0a00 	adds.w	sl, r2, r0
 80081e2:	eb43 0b01 	adc.w	fp, r3, r1
 80081e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f04f 0100 	mov.w	r1, #0
 80081f0:	f04f 0200 	mov.w	r2, #0
 80081f4:	f04f 0300 	mov.w	r3, #0
 80081f8:	008b      	lsls	r3, r1, #2
 80081fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80081fe:	0082      	lsls	r2, r0, #2
 8008200:	4650      	mov	r0, sl
 8008202:	4659      	mov	r1, fp
 8008204:	f7f8 fc5a 	bl	8000abc <__aeabi_uldivmod>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	4b0e      	ldr	r3, [pc, #56]	; (8008248 <UART_SetConfig+0x38c>)
 800820e:	fba3 1302 	umull	r1, r3, r3, r2
 8008212:	095b      	lsrs	r3, r3, #5
 8008214:	2164      	movs	r1, #100	; 0x64
 8008216:	fb01 f303 	mul.w	r3, r1, r3
 800821a:	1ad3      	subs	r3, r2, r3
 800821c:	011b      	lsls	r3, r3, #4
 800821e:	3332      	adds	r3, #50	; 0x32
 8008220:	4a09      	ldr	r2, [pc, #36]	; (8008248 <UART_SetConfig+0x38c>)
 8008222:	fba2 2303 	umull	r2, r3, r2, r3
 8008226:	095b      	lsrs	r3, r3, #5
 8008228:	f003 020f 	and.w	r2, r3, #15
 800822c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4432      	add	r2, r6
 8008232:	609a      	str	r2, [r3, #8]
}
 8008234:	bf00      	nop
 8008236:	377c      	adds	r7, #124	; 0x7c
 8008238:	46bd      	mov	sp, r7
 800823a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823e:	bf00      	nop
 8008240:	40011000 	.word	0x40011000
 8008244:	40011400 	.word	0x40011400
 8008248:	51eb851f 	.word	0x51eb851f

0800824c <__errno>:
 800824c:	4b01      	ldr	r3, [pc, #4]	; (8008254 <__errno+0x8>)
 800824e:	6818      	ldr	r0, [r3, #0]
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	2000000c 	.word	0x2000000c

08008258 <__libc_init_array>:
 8008258:	b570      	push	{r4, r5, r6, lr}
 800825a:	4d0d      	ldr	r5, [pc, #52]	; (8008290 <__libc_init_array+0x38>)
 800825c:	4c0d      	ldr	r4, [pc, #52]	; (8008294 <__libc_init_array+0x3c>)
 800825e:	1b64      	subs	r4, r4, r5
 8008260:	10a4      	asrs	r4, r4, #2
 8008262:	2600      	movs	r6, #0
 8008264:	42a6      	cmp	r6, r4
 8008266:	d109      	bne.n	800827c <__libc_init_array+0x24>
 8008268:	4d0b      	ldr	r5, [pc, #44]	; (8008298 <__libc_init_array+0x40>)
 800826a:	4c0c      	ldr	r4, [pc, #48]	; (800829c <__libc_init_array+0x44>)
 800826c:	f000 fc4e 	bl	8008b0c <_init>
 8008270:	1b64      	subs	r4, r4, r5
 8008272:	10a4      	asrs	r4, r4, #2
 8008274:	2600      	movs	r6, #0
 8008276:	42a6      	cmp	r6, r4
 8008278:	d105      	bne.n	8008286 <__libc_init_array+0x2e>
 800827a:	bd70      	pop	{r4, r5, r6, pc}
 800827c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008280:	4798      	blx	r3
 8008282:	3601      	adds	r6, #1
 8008284:	e7ee      	b.n	8008264 <__libc_init_array+0xc>
 8008286:	f855 3b04 	ldr.w	r3, [r5], #4
 800828a:	4798      	blx	r3
 800828c:	3601      	adds	r6, #1
 800828e:	e7f2      	b.n	8008276 <__libc_init_array+0x1e>
 8008290:	080093ac 	.word	0x080093ac
 8008294:	080093ac 	.word	0x080093ac
 8008298:	080093ac 	.word	0x080093ac
 800829c:	080093b0 	.word	0x080093b0

080082a0 <memset>:
 80082a0:	4402      	add	r2, r0
 80082a2:	4603      	mov	r3, r0
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d100      	bne.n	80082aa <memset+0xa>
 80082a8:	4770      	bx	lr
 80082aa:	f803 1b01 	strb.w	r1, [r3], #1
 80082ae:	e7f9      	b.n	80082a4 <memset+0x4>

080082b0 <siprintf>:
 80082b0:	b40e      	push	{r1, r2, r3}
 80082b2:	b500      	push	{lr}
 80082b4:	b09c      	sub	sp, #112	; 0x70
 80082b6:	ab1d      	add	r3, sp, #116	; 0x74
 80082b8:	9002      	str	r0, [sp, #8]
 80082ba:	9006      	str	r0, [sp, #24]
 80082bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082c0:	4809      	ldr	r0, [pc, #36]	; (80082e8 <siprintf+0x38>)
 80082c2:	9107      	str	r1, [sp, #28]
 80082c4:	9104      	str	r1, [sp, #16]
 80082c6:	4909      	ldr	r1, [pc, #36]	; (80082ec <siprintf+0x3c>)
 80082c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80082cc:	9105      	str	r1, [sp, #20]
 80082ce:	6800      	ldr	r0, [r0, #0]
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	a902      	add	r1, sp, #8
 80082d4:	f000 f868 	bl	80083a8 <_svfiprintf_r>
 80082d8:	9b02      	ldr	r3, [sp, #8]
 80082da:	2200      	movs	r2, #0
 80082dc:	701a      	strb	r2, [r3, #0]
 80082de:	b01c      	add	sp, #112	; 0x70
 80082e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80082e4:	b003      	add	sp, #12
 80082e6:	4770      	bx	lr
 80082e8:	2000000c 	.word	0x2000000c
 80082ec:	ffff0208 	.word	0xffff0208

080082f0 <__ssputs_r>:
 80082f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f4:	688e      	ldr	r6, [r1, #8]
 80082f6:	429e      	cmp	r6, r3
 80082f8:	4682      	mov	sl, r0
 80082fa:	460c      	mov	r4, r1
 80082fc:	4690      	mov	r8, r2
 80082fe:	461f      	mov	r7, r3
 8008300:	d838      	bhi.n	8008374 <__ssputs_r+0x84>
 8008302:	898a      	ldrh	r2, [r1, #12]
 8008304:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008308:	d032      	beq.n	8008370 <__ssputs_r+0x80>
 800830a:	6825      	ldr	r5, [r4, #0]
 800830c:	6909      	ldr	r1, [r1, #16]
 800830e:	eba5 0901 	sub.w	r9, r5, r1
 8008312:	6965      	ldr	r5, [r4, #20]
 8008314:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008318:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800831c:	3301      	adds	r3, #1
 800831e:	444b      	add	r3, r9
 8008320:	106d      	asrs	r5, r5, #1
 8008322:	429d      	cmp	r5, r3
 8008324:	bf38      	it	cc
 8008326:	461d      	movcc	r5, r3
 8008328:	0553      	lsls	r3, r2, #21
 800832a:	d531      	bpl.n	8008390 <__ssputs_r+0xa0>
 800832c:	4629      	mov	r1, r5
 800832e:	f000 fb47 	bl	80089c0 <_malloc_r>
 8008332:	4606      	mov	r6, r0
 8008334:	b950      	cbnz	r0, 800834c <__ssputs_r+0x5c>
 8008336:	230c      	movs	r3, #12
 8008338:	f8ca 3000 	str.w	r3, [sl]
 800833c:	89a3      	ldrh	r3, [r4, #12]
 800833e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008342:	81a3      	strh	r3, [r4, #12]
 8008344:	f04f 30ff 	mov.w	r0, #4294967295
 8008348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800834c:	6921      	ldr	r1, [r4, #16]
 800834e:	464a      	mov	r2, r9
 8008350:	f000 fabe 	bl	80088d0 <memcpy>
 8008354:	89a3      	ldrh	r3, [r4, #12]
 8008356:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800835a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800835e:	81a3      	strh	r3, [r4, #12]
 8008360:	6126      	str	r6, [r4, #16]
 8008362:	6165      	str	r5, [r4, #20]
 8008364:	444e      	add	r6, r9
 8008366:	eba5 0509 	sub.w	r5, r5, r9
 800836a:	6026      	str	r6, [r4, #0]
 800836c:	60a5      	str	r5, [r4, #8]
 800836e:	463e      	mov	r6, r7
 8008370:	42be      	cmp	r6, r7
 8008372:	d900      	bls.n	8008376 <__ssputs_r+0x86>
 8008374:	463e      	mov	r6, r7
 8008376:	4632      	mov	r2, r6
 8008378:	6820      	ldr	r0, [r4, #0]
 800837a:	4641      	mov	r1, r8
 800837c:	f000 fab6 	bl	80088ec <memmove>
 8008380:	68a3      	ldr	r3, [r4, #8]
 8008382:	6822      	ldr	r2, [r4, #0]
 8008384:	1b9b      	subs	r3, r3, r6
 8008386:	4432      	add	r2, r6
 8008388:	60a3      	str	r3, [r4, #8]
 800838a:	6022      	str	r2, [r4, #0]
 800838c:	2000      	movs	r0, #0
 800838e:	e7db      	b.n	8008348 <__ssputs_r+0x58>
 8008390:	462a      	mov	r2, r5
 8008392:	f000 fb6f 	bl	8008a74 <_realloc_r>
 8008396:	4606      	mov	r6, r0
 8008398:	2800      	cmp	r0, #0
 800839a:	d1e1      	bne.n	8008360 <__ssputs_r+0x70>
 800839c:	6921      	ldr	r1, [r4, #16]
 800839e:	4650      	mov	r0, sl
 80083a0:	f000 fabe 	bl	8008920 <_free_r>
 80083a4:	e7c7      	b.n	8008336 <__ssputs_r+0x46>
	...

080083a8 <_svfiprintf_r>:
 80083a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ac:	4698      	mov	r8, r3
 80083ae:	898b      	ldrh	r3, [r1, #12]
 80083b0:	061b      	lsls	r3, r3, #24
 80083b2:	b09d      	sub	sp, #116	; 0x74
 80083b4:	4607      	mov	r7, r0
 80083b6:	460d      	mov	r5, r1
 80083b8:	4614      	mov	r4, r2
 80083ba:	d50e      	bpl.n	80083da <_svfiprintf_r+0x32>
 80083bc:	690b      	ldr	r3, [r1, #16]
 80083be:	b963      	cbnz	r3, 80083da <_svfiprintf_r+0x32>
 80083c0:	2140      	movs	r1, #64	; 0x40
 80083c2:	f000 fafd 	bl	80089c0 <_malloc_r>
 80083c6:	6028      	str	r0, [r5, #0]
 80083c8:	6128      	str	r0, [r5, #16]
 80083ca:	b920      	cbnz	r0, 80083d6 <_svfiprintf_r+0x2e>
 80083cc:	230c      	movs	r3, #12
 80083ce:	603b      	str	r3, [r7, #0]
 80083d0:	f04f 30ff 	mov.w	r0, #4294967295
 80083d4:	e0d1      	b.n	800857a <_svfiprintf_r+0x1d2>
 80083d6:	2340      	movs	r3, #64	; 0x40
 80083d8:	616b      	str	r3, [r5, #20]
 80083da:	2300      	movs	r3, #0
 80083dc:	9309      	str	r3, [sp, #36]	; 0x24
 80083de:	2320      	movs	r3, #32
 80083e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80083e8:	2330      	movs	r3, #48	; 0x30
 80083ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008594 <_svfiprintf_r+0x1ec>
 80083ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083f2:	f04f 0901 	mov.w	r9, #1
 80083f6:	4623      	mov	r3, r4
 80083f8:	469a      	mov	sl, r3
 80083fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083fe:	b10a      	cbz	r2, 8008404 <_svfiprintf_r+0x5c>
 8008400:	2a25      	cmp	r2, #37	; 0x25
 8008402:	d1f9      	bne.n	80083f8 <_svfiprintf_r+0x50>
 8008404:	ebba 0b04 	subs.w	fp, sl, r4
 8008408:	d00b      	beq.n	8008422 <_svfiprintf_r+0x7a>
 800840a:	465b      	mov	r3, fp
 800840c:	4622      	mov	r2, r4
 800840e:	4629      	mov	r1, r5
 8008410:	4638      	mov	r0, r7
 8008412:	f7ff ff6d 	bl	80082f0 <__ssputs_r>
 8008416:	3001      	adds	r0, #1
 8008418:	f000 80aa 	beq.w	8008570 <_svfiprintf_r+0x1c8>
 800841c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800841e:	445a      	add	r2, fp
 8008420:	9209      	str	r2, [sp, #36]	; 0x24
 8008422:	f89a 3000 	ldrb.w	r3, [sl]
 8008426:	2b00      	cmp	r3, #0
 8008428:	f000 80a2 	beq.w	8008570 <_svfiprintf_r+0x1c8>
 800842c:	2300      	movs	r3, #0
 800842e:	f04f 32ff 	mov.w	r2, #4294967295
 8008432:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008436:	f10a 0a01 	add.w	sl, sl, #1
 800843a:	9304      	str	r3, [sp, #16]
 800843c:	9307      	str	r3, [sp, #28]
 800843e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008442:	931a      	str	r3, [sp, #104]	; 0x68
 8008444:	4654      	mov	r4, sl
 8008446:	2205      	movs	r2, #5
 8008448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800844c:	4851      	ldr	r0, [pc, #324]	; (8008594 <_svfiprintf_r+0x1ec>)
 800844e:	f7f7 fec7 	bl	80001e0 <memchr>
 8008452:	9a04      	ldr	r2, [sp, #16]
 8008454:	b9d8      	cbnz	r0, 800848e <_svfiprintf_r+0xe6>
 8008456:	06d0      	lsls	r0, r2, #27
 8008458:	bf44      	itt	mi
 800845a:	2320      	movmi	r3, #32
 800845c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008460:	0711      	lsls	r1, r2, #28
 8008462:	bf44      	itt	mi
 8008464:	232b      	movmi	r3, #43	; 0x2b
 8008466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800846a:	f89a 3000 	ldrb.w	r3, [sl]
 800846e:	2b2a      	cmp	r3, #42	; 0x2a
 8008470:	d015      	beq.n	800849e <_svfiprintf_r+0xf6>
 8008472:	9a07      	ldr	r2, [sp, #28]
 8008474:	4654      	mov	r4, sl
 8008476:	2000      	movs	r0, #0
 8008478:	f04f 0c0a 	mov.w	ip, #10
 800847c:	4621      	mov	r1, r4
 800847e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008482:	3b30      	subs	r3, #48	; 0x30
 8008484:	2b09      	cmp	r3, #9
 8008486:	d94e      	bls.n	8008526 <_svfiprintf_r+0x17e>
 8008488:	b1b0      	cbz	r0, 80084b8 <_svfiprintf_r+0x110>
 800848a:	9207      	str	r2, [sp, #28]
 800848c:	e014      	b.n	80084b8 <_svfiprintf_r+0x110>
 800848e:	eba0 0308 	sub.w	r3, r0, r8
 8008492:	fa09 f303 	lsl.w	r3, r9, r3
 8008496:	4313      	orrs	r3, r2
 8008498:	9304      	str	r3, [sp, #16]
 800849a:	46a2      	mov	sl, r4
 800849c:	e7d2      	b.n	8008444 <_svfiprintf_r+0x9c>
 800849e:	9b03      	ldr	r3, [sp, #12]
 80084a0:	1d19      	adds	r1, r3, #4
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	9103      	str	r1, [sp, #12]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	bfbb      	ittet	lt
 80084aa:	425b      	neglt	r3, r3
 80084ac:	f042 0202 	orrlt.w	r2, r2, #2
 80084b0:	9307      	strge	r3, [sp, #28]
 80084b2:	9307      	strlt	r3, [sp, #28]
 80084b4:	bfb8      	it	lt
 80084b6:	9204      	strlt	r2, [sp, #16]
 80084b8:	7823      	ldrb	r3, [r4, #0]
 80084ba:	2b2e      	cmp	r3, #46	; 0x2e
 80084bc:	d10c      	bne.n	80084d8 <_svfiprintf_r+0x130>
 80084be:	7863      	ldrb	r3, [r4, #1]
 80084c0:	2b2a      	cmp	r3, #42	; 0x2a
 80084c2:	d135      	bne.n	8008530 <_svfiprintf_r+0x188>
 80084c4:	9b03      	ldr	r3, [sp, #12]
 80084c6:	1d1a      	adds	r2, r3, #4
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	9203      	str	r2, [sp, #12]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	bfb8      	it	lt
 80084d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80084d4:	3402      	adds	r4, #2
 80084d6:	9305      	str	r3, [sp, #20]
 80084d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80085a4 <_svfiprintf_r+0x1fc>
 80084dc:	7821      	ldrb	r1, [r4, #0]
 80084de:	2203      	movs	r2, #3
 80084e0:	4650      	mov	r0, sl
 80084e2:	f7f7 fe7d 	bl	80001e0 <memchr>
 80084e6:	b140      	cbz	r0, 80084fa <_svfiprintf_r+0x152>
 80084e8:	2340      	movs	r3, #64	; 0x40
 80084ea:	eba0 000a 	sub.w	r0, r0, sl
 80084ee:	fa03 f000 	lsl.w	r0, r3, r0
 80084f2:	9b04      	ldr	r3, [sp, #16]
 80084f4:	4303      	orrs	r3, r0
 80084f6:	3401      	adds	r4, #1
 80084f8:	9304      	str	r3, [sp, #16]
 80084fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084fe:	4826      	ldr	r0, [pc, #152]	; (8008598 <_svfiprintf_r+0x1f0>)
 8008500:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008504:	2206      	movs	r2, #6
 8008506:	f7f7 fe6b 	bl	80001e0 <memchr>
 800850a:	2800      	cmp	r0, #0
 800850c:	d038      	beq.n	8008580 <_svfiprintf_r+0x1d8>
 800850e:	4b23      	ldr	r3, [pc, #140]	; (800859c <_svfiprintf_r+0x1f4>)
 8008510:	bb1b      	cbnz	r3, 800855a <_svfiprintf_r+0x1b2>
 8008512:	9b03      	ldr	r3, [sp, #12]
 8008514:	3307      	adds	r3, #7
 8008516:	f023 0307 	bic.w	r3, r3, #7
 800851a:	3308      	adds	r3, #8
 800851c:	9303      	str	r3, [sp, #12]
 800851e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008520:	4433      	add	r3, r6
 8008522:	9309      	str	r3, [sp, #36]	; 0x24
 8008524:	e767      	b.n	80083f6 <_svfiprintf_r+0x4e>
 8008526:	fb0c 3202 	mla	r2, ip, r2, r3
 800852a:	460c      	mov	r4, r1
 800852c:	2001      	movs	r0, #1
 800852e:	e7a5      	b.n	800847c <_svfiprintf_r+0xd4>
 8008530:	2300      	movs	r3, #0
 8008532:	3401      	adds	r4, #1
 8008534:	9305      	str	r3, [sp, #20]
 8008536:	4619      	mov	r1, r3
 8008538:	f04f 0c0a 	mov.w	ip, #10
 800853c:	4620      	mov	r0, r4
 800853e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008542:	3a30      	subs	r2, #48	; 0x30
 8008544:	2a09      	cmp	r2, #9
 8008546:	d903      	bls.n	8008550 <_svfiprintf_r+0x1a8>
 8008548:	2b00      	cmp	r3, #0
 800854a:	d0c5      	beq.n	80084d8 <_svfiprintf_r+0x130>
 800854c:	9105      	str	r1, [sp, #20]
 800854e:	e7c3      	b.n	80084d8 <_svfiprintf_r+0x130>
 8008550:	fb0c 2101 	mla	r1, ip, r1, r2
 8008554:	4604      	mov	r4, r0
 8008556:	2301      	movs	r3, #1
 8008558:	e7f0      	b.n	800853c <_svfiprintf_r+0x194>
 800855a:	ab03      	add	r3, sp, #12
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	462a      	mov	r2, r5
 8008560:	4b0f      	ldr	r3, [pc, #60]	; (80085a0 <_svfiprintf_r+0x1f8>)
 8008562:	a904      	add	r1, sp, #16
 8008564:	4638      	mov	r0, r7
 8008566:	f3af 8000 	nop.w
 800856a:	1c42      	adds	r2, r0, #1
 800856c:	4606      	mov	r6, r0
 800856e:	d1d6      	bne.n	800851e <_svfiprintf_r+0x176>
 8008570:	89ab      	ldrh	r3, [r5, #12]
 8008572:	065b      	lsls	r3, r3, #25
 8008574:	f53f af2c 	bmi.w	80083d0 <_svfiprintf_r+0x28>
 8008578:	9809      	ldr	r0, [sp, #36]	; 0x24
 800857a:	b01d      	add	sp, #116	; 0x74
 800857c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008580:	ab03      	add	r3, sp, #12
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	462a      	mov	r2, r5
 8008586:	4b06      	ldr	r3, [pc, #24]	; (80085a0 <_svfiprintf_r+0x1f8>)
 8008588:	a904      	add	r1, sp, #16
 800858a:	4638      	mov	r0, r7
 800858c:	f000 f87a 	bl	8008684 <_printf_i>
 8008590:	e7eb      	b.n	800856a <_svfiprintf_r+0x1c2>
 8008592:	bf00      	nop
 8008594:	08009370 	.word	0x08009370
 8008598:	0800937a 	.word	0x0800937a
 800859c:	00000000 	.word	0x00000000
 80085a0:	080082f1 	.word	0x080082f1
 80085a4:	08009376 	.word	0x08009376

080085a8 <_printf_common>:
 80085a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085ac:	4616      	mov	r6, r2
 80085ae:	4699      	mov	r9, r3
 80085b0:	688a      	ldr	r2, [r1, #8]
 80085b2:	690b      	ldr	r3, [r1, #16]
 80085b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085b8:	4293      	cmp	r3, r2
 80085ba:	bfb8      	it	lt
 80085bc:	4613      	movlt	r3, r2
 80085be:	6033      	str	r3, [r6, #0]
 80085c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085c4:	4607      	mov	r7, r0
 80085c6:	460c      	mov	r4, r1
 80085c8:	b10a      	cbz	r2, 80085ce <_printf_common+0x26>
 80085ca:	3301      	adds	r3, #1
 80085cc:	6033      	str	r3, [r6, #0]
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	0699      	lsls	r1, r3, #26
 80085d2:	bf42      	ittt	mi
 80085d4:	6833      	ldrmi	r3, [r6, #0]
 80085d6:	3302      	addmi	r3, #2
 80085d8:	6033      	strmi	r3, [r6, #0]
 80085da:	6825      	ldr	r5, [r4, #0]
 80085dc:	f015 0506 	ands.w	r5, r5, #6
 80085e0:	d106      	bne.n	80085f0 <_printf_common+0x48>
 80085e2:	f104 0a19 	add.w	sl, r4, #25
 80085e6:	68e3      	ldr	r3, [r4, #12]
 80085e8:	6832      	ldr	r2, [r6, #0]
 80085ea:	1a9b      	subs	r3, r3, r2
 80085ec:	42ab      	cmp	r3, r5
 80085ee:	dc26      	bgt.n	800863e <_printf_common+0x96>
 80085f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085f4:	1e13      	subs	r3, r2, #0
 80085f6:	6822      	ldr	r2, [r4, #0]
 80085f8:	bf18      	it	ne
 80085fa:	2301      	movne	r3, #1
 80085fc:	0692      	lsls	r2, r2, #26
 80085fe:	d42b      	bmi.n	8008658 <_printf_common+0xb0>
 8008600:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008604:	4649      	mov	r1, r9
 8008606:	4638      	mov	r0, r7
 8008608:	47c0      	blx	r8
 800860a:	3001      	adds	r0, #1
 800860c:	d01e      	beq.n	800864c <_printf_common+0xa4>
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	68e5      	ldr	r5, [r4, #12]
 8008612:	6832      	ldr	r2, [r6, #0]
 8008614:	f003 0306 	and.w	r3, r3, #6
 8008618:	2b04      	cmp	r3, #4
 800861a:	bf08      	it	eq
 800861c:	1aad      	subeq	r5, r5, r2
 800861e:	68a3      	ldr	r3, [r4, #8]
 8008620:	6922      	ldr	r2, [r4, #16]
 8008622:	bf0c      	ite	eq
 8008624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008628:	2500      	movne	r5, #0
 800862a:	4293      	cmp	r3, r2
 800862c:	bfc4      	itt	gt
 800862e:	1a9b      	subgt	r3, r3, r2
 8008630:	18ed      	addgt	r5, r5, r3
 8008632:	2600      	movs	r6, #0
 8008634:	341a      	adds	r4, #26
 8008636:	42b5      	cmp	r5, r6
 8008638:	d11a      	bne.n	8008670 <_printf_common+0xc8>
 800863a:	2000      	movs	r0, #0
 800863c:	e008      	b.n	8008650 <_printf_common+0xa8>
 800863e:	2301      	movs	r3, #1
 8008640:	4652      	mov	r2, sl
 8008642:	4649      	mov	r1, r9
 8008644:	4638      	mov	r0, r7
 8008646:	47c0      	blx	r8
 8008648:	3001      	adds	r0, #1
 800864a:	d103      	bne.n	8008654 <_printf_common+0xac>
 800864c:	f04f 30ff 	mov.w	r0, #4294967295
 8008650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008654:	3501      	adds	r5, #1
 8008656:	e7c6      	b.n	80085e6 <_printf_common+0x3e>
 8008658:	18e1      	adds	r1, r4, r3
 800865a:	1c5a      	adds	r2, r3, #1
 800865c:	2030      	movs	r0, #48	; 0x30
 800865e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008662:	4422      	add	r2, r4
 8008664:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008668:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800866c:	3302      	adds	r3, #2
 800866e:	e7c7      	b.n	8008600 <_printf_common+0x58>
 8008670:	2301      	movs	r3, #1
 8008672:	4622      	mov	r2, r4
 8008674:	4649      	mov	r1, r9
 8008676:	4638      	mov	r0, r7
 8008678:	47c0      	blx	r8
 800867a:	3001      	adds	r0, #1
 800867c:	d0e6      	beq.n	800864c <_printf_common+0xa4>
 800867e:	3601      	adds	r6, #1
 8008680:	e7d9      	b.n	8008636 <_printf_common+0x8e>
	...

08008684 <_printf_i>:
 8008684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008688:	460c      	mov	r4, r1
 800868a:	4691      	mov	r9, r2
 800868c:	7e27      	ldrb	r7, [r4, #24]
 800868e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008690:	2f78      	cmp	r7, #120	; 0x78
 8008692:	4680      	mov	r8, r0
 8008694:	469a      	mov	sl, r3
 8008696:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800869a:	d807      	bhi.n	80086ac <_printf_i+0x28>
 800869c:	2f62      	cmp	r7, #98	; 0x62
 800869e:	d80a      	bhi.n	80086b6 <_printf_i+0x32>
 80086a0:	2f00      	cmp	r7, #0
 80086a2:	f000 80d8 	beq.w	8008856 <_printf_i+0x1d2>
 80086a6:	2f58      	cmp	r7, #88	; 0x58
 80086a8:	f000 80a3 	beq.w	80087f2 <_printf_i+0x16e>
 80086ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80086b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086b4:	e03a      	b.n	800872c <_printf_i+0xa8>
 80086b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086ba:	2b15      	cmp	r3, #21
 80086bc:	d8f6      	bhi.n	80086ac <_printf_i+0x28>
 80086be:	a001      	add	r0, pc, #4	; (adr r0, 80086c4 <_printf_i+0x40>)
 80086c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80086c4:	0800871d 	.word	0x0800871d
 80086c8:	08008731 	.word	0x08008731
 80086cc:	080086ad 	.word	0x080086ad
 80086d0:	080086ad 	.word	0x080086ad
 80086d4:	080086ad 	.word	0x080086ad
 80086d8:	080086ad 	.word	0x080086ad
 80086dc:	08008731 	.word	0x08008731
 80086e0:	080086ad 	.word	0x080086ad
 80086e4:	080086ad 	.word	0x080086ad
 80086e8:	080086ad 	.word	0x080086ad
 80086ec:	080086ad 	.word	0x080086ad
 80086f0:	0800883d 	.word	0x0800883d
 80086f4:	08008761 	.word	0x08008761
 80086f8:	0800881f 	.word	0x0800881f
 80086fc:	080086ad 	.word	0x080086ad
 8008700:	080086ad 	.word	0x080086ad
 8008704:	0800885f 	.word	0x0800885f
 8008708:	080086ad 	.word	0x080086ad
 800870c:	08008761 	.word	0x08008761
 8008710:	080086ad 	.word	0x080086ad
 8008714:	080086ad 	.word	0x080086ad
 8008718:	08008827 	.word	0x08008827
 800871c:	680b      	ldr	r3, [r1, #0]
 800871e:	1d1a      	adds	r2, r3, #4
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	600a      	str	r2, [r1, #0]
 8008724:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800872c:	2301      	movs	r3, #1
 800872e:	e0a3      	b.n	8008878 <_printf_i+0x1f4>
 8008730:	6825      	ldr	r5, [r4, #0]
 8008732:	6808      	ldr	r0, [r1, #0]
 8008734:	062e      	lsls	r6, r5, #24
 8008736:	f100 0304 	add.w	r3, r0, #4
 800873a:	d50a      	bpl.n	8008752 <_printf_i+0xce>
 800873c:	6805      	ldr	r5, [r0, #0]
 800873e:	600b      	str	r3, [r1, #0]
 8008740:	2d00      	cmp	r5, #0
 8008742:	da03      	bge.n	800874c <_printf_i+0xc8>
 8008744:	232d      	movs	r3, #45	; 0x2d
 8008746:	426d      	negs	r5, r5
 8008748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800874c:	485e      	ldr	r0, [pc, #376]	; (80088c8 <_printf_i+0x244>)
 800874e:	230a      	movs	r3, #10
 8008750:	e019      	b.n	8008786 <_printf_i+0x102>
 8008752:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008756:	6805      	ldr	r5, [r0, #0]
 8008758:	600b      	str	r3, [r1, #0]
 800875a:	bf18      	it	ne
 800875c:	b22d      	sxthne	r5, r5
 800875e:	e7ef      	b.n	8008740 <_printf_i+0xbc>
 8008760:	680b      	ldr	r3, [r1, #0]
 8008762:	6825      	ldr	r5, [r4, #0]
 8008764:	1d18      	adds	r0, r3, #4
 8008766:	6008      	str	r0, [r1, #0]
 8008768:	0628      	lsls	r0, r5, #24
 800876a:	d501      	bpl.n	8008770 <_printf_i+0xec>
 800876c:	681d      	ldr	r5, [r3, #0]
 800876e:	e002      	b.n	8008776 <_printf_i+0xf2>
 8008770:	0669      	lsls	r1, r5, #25
 8008772:	d5fb      	bpl.n	800876c <_printf_i+0xe8>
 8008774:	881d      	ldrh	r5, [r3, #0]
 8008776:	4854      	ldr	r0, [pc, #336]	; (80088c8 <_printf_i+0x244>)
 8008778:	2f6f      	cmp	r7, #111	; 0x6f
 800877a:	bf0c      	ite	eq
 800877c:	2308      	moveq	r3, #8
 800877e:	230a      	movne	r3, #10
 8008780:	2100      	movs	r1, #0
 8008782:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008786:	6866      	ldr	r6, [r4, #4]
 8008788:	60a6      	str	r6, [r4, #8]
 800878a:	2e00      	cmp	r6, #0
 800878c:	bfa2      	ittt	ge
 800878e:	6821      	ldrge	r1, [r4, #0]
 8008790:	f021 0104 	bicge.w	r1, r1, #4
 8008794:	6021      	strge	r1, [r4, #0]
 8008796:	b90d      	cbnz	r5, 800879c <_printf_i+0x118>
 8008798:	2e00      	cmp	r6, #0
 800879a:	d04d      	beq.n	8008838 <_printf_i+0x1b4>
 800879c:	4616      	mov	r6, r2
 800879e:	fbb5 f1f3 	udiv	r1, r5, r3
 80087a2:	fb03 5711 	mls	r7, r3, r1, r5
 80087a6:	5dc7      	ldrb	r7, [r0, r7]
 80087a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80087ac:	462f      	mov	r7, r5
 80087ae:	42bb      	cmp	r3, r7
 80087b0:	460d      	mov	r5, r1
 80087b2:	d9f4      	bls.n	800879e <_printf_i+0x11a>
 80087b4:	2b08      	cmp	r3, #8
 80087b6:	d10b      	bne.n	80087d0 <_printf_i+0x14c>
 80087b8:	6823      	ldr	r3, [r4, #0]
 80087ba:	07df      	lsls	r7, r3, #31
 80087bc:	d508      	bpl.n	80087d0 <_printf_i+0x14c>
 80087be:	6923      	ldr	r3, [r4, #16]
 80087c0:	6861      	ldr	r1, [r4, #4]
 80087c2:	4299      	cmp	r1, r3
 80087c4:	bfde      	ittt	le
 80087c6:	2330      	movle	r3, #48	; 0x30
 80087c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80087cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80087d0:	1b92      	subs	r2, r2, r6
 80087d2:	6122      	str	r2, [r4, #16]
 80087d4:	f8cd a000 	str.w	sl, [sp]
 80087d8:	464b      	mov	r3, r9
 80087da:	aa03      	add	r2, sp, #12
 80087dc:	4621      	mov	r1, r4
 80087de:	4640      	mov	r0, r8
 80087e0:	f7ff fee2 	bl	80085a8 <_printf_common>
 80087e4:	3001      	adds	r0, #1
 80087e6:	d14c      	bne.n	8008882 <_printf_i+0x1fe>
 80087e8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ec:	b004      	add	sp, #16
 80087ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f2:	4835      	ldr	r0, [pc, #212]	; (80088c8 <_printf_i+0x244>)
 80087f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80087f8:	6823      	ldr	r3, [r4, #0]
 80087fa:	680e      	ldr	r6, [r1, #0]
 80087fc:	061f      	lsls	r7, r3, #24
 80087fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8008802:	600e      	str	r6, [r1, #0]
 8008804:	d514      	bpl.n	8008830 <_printf_i+0x1ac>
 8008806:	07d9      	lsls	r1, r3, #31
 8008808:	bf44      	itt	mi
 800880a:	f043 0320 	orrmi.w	r3, r3, #32
 800880e:	6023      	strmi	r3, [r4, #0]
 8008810:	b91d      	cbnz	r5, 800881a <_printf_i+0x196>
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	f023 0320 	bic.w	r3, r3, #32
 8008818:	6023      	str	r3, [r4, #0]
 800881a:	2310      	movs	r3, #16
 800881c:	e7b0      	b.n	8008780 <_printf_i+0xfc>
 800881e:	6823      	ldr	r3, [r4, #0]
 8008820:	f043 0320 	orr.w	r3, r3, #32
 8008824:	6023      	str	r3, [r4, #0]
 8008826:	2378      	movs	r3, #120	; 0x78
 8008828:	4828      	ldr	r0, [pc, #160]	; (80088cc <_printf_i+0x248>)
 800882a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800882e:	e7e3      	b.n	80087f8 <_printf_i+0x174>
 8008830:	065e      	lsls	r6, r3, #25
 8008832:	bf48      	it	mi
 8008834:	b2ad      	uxthmi	r5, r5
 8008836:	e7e6      	b.n	8008806 <_printf_i+0x182>
 8008838:	4616      	mov	r6, r2
 800883a:	e7bb      	b.n	80087b4 <_printf_i+0x130>
 800883c:	680b      	ldr	r3, [r1, #0]
 800883e:	6826      	ldr	r6, [r4, #0]
 8008840:	6960      	ldr	r0, [r4, #20]
 8008842:	1d1d      	adds	r5, r3, #4
 8008844:	600d      	str	r5, [r1, #0]
 8008846:	0635      	lsls	r5, r6, #24
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	d501      	bpl.n	8008850 <_printf_i+0x1cc>
 800884c:	6018      	str	r0, [r3, #0]
 800884e:	e002      	b.n	8008856 <_printf_i+0x1d2>
 8008850:	0671      	lsls	r1, r6, #25
 8008852:	d5fb      	bpl.n	800884c <_printf_i+0x1c8>
 8008854:	8018      	strh	r0, [r3, #0]
 8008856:	2300      	movs	r3, #0
 8008858:	6123      	str	r3, [r4, #16]
 800885a:	4616      	mov	r6, r2
 800885c:	e7ba      	b.n	80087d4 <_printf_i+0x150>
 800885e:	680b      	ldr	r3, [r1, #0]
 8008860:	1d1a      	adds	r2, r3, #4
 8008862:	600a      	str	r2, [r1, #0]
 8008864:	681e      	ldr	r6, [r3, #0]
 8008866:	6862      	ldr	r2, [r4, #4]
 8008868:	2100      	movs	r1, #0
 800886a:	4630      	mov	r0, r6
 800886c:	f7f7 fcb8 	bl	80001e0 <memchr>
 8008870:	b108      	cbz	r0, 8008876 <_printf_i+0x1f2>
 8008872:	1b80      	subs	r0, r0, r6
 8008874:	6060      	str	r0, [r4, #4]
 8008876:	6863      	ldr	r3, [r4, #4]
 8008878:	6123      	str	r3, [r4, #16]
 800887a:	2300      	movs	r3, #0
 800887c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008880:	e7a8      	b.n	80087d4 <_printf_i+0x150>
 8008882:	6923      	ldr	r3, [r4, #16]
 8008884:	4632      	mov	r2, r6
 8008886:	4649      	mov	r1, r9
 8008888:	4640      	mov	r0, r8
 800888a:	47d0      	blx	sl
 800888c:	3001      	adds	r0, #1
 800888e:	d0ab      	beq.n	80087e8 <_printf_i+0x164>
 8008890:	6823      	ldr	r3, [r4, #0]
 8008892:	079b      	lsls	r3, r3, #30
 8008894:	d413      	bmi.n	80088be <_printf_i+0x23a>
 8008896:	68e0      	ldr	r0, [r4, #12]
 8008898:	9b03      	ldr	r3, [sp, #12]
 800889a:	4298      	cmp	r0, r3
 800889c:	bfb8      	it	lt
 800889e:	4618      	movlt	r0, r3
 80088a0:	e7a4      	b.n	80087ec <_printf_i+0x168>
 80088a2:	2301      	movs	r3, #1
 80088a4:	4632      	mov	r2, r6
 80088a6:	4649      	mov	r1, r9
 80088a8:	4640      	mov	r0, r8
 80088aa:	47d0      	blx	sl
 80088ac:	3001      	adds	r0, #1
 80088ae:	d09b      	beq.n	80087e8 <_printf_i+0x164>
 80088b0:	3501      	adds	r5, #1
 80088b2:	68e3      	ldr	r3, [r4, #12]
 80088b4:	9903      	ldr	r1, [sp, #12]
 80088b6:	1a5b      	subs	r3, r3, r1
 80088b8:	42ab      	cmp	r3, r5
 80088ba:	dcf2      	bgt.n	80088a2 <_printf_i+0x21e>
 80088bc:	e7eb      	b.n	8008896 <_printf_i+0x212>
 80088be:	2500      	movs	r5, #0
 80088c0:	f104 0619 	add.w	r6, r4, #25
 80088c4:	e7f5      	b.n	80088b2 <_printf_i+0x22e>
 80088c6:	bf00      	nop
 80088c8:	08009381 	.word	0x08009381
 80088cc:	08009392 	.word	0x08009392

080088d0 <memcpy>:
 80088d0:	440a      	add	r2, r1
 80088d2:	4291      	cmp	r1, r2
 80088d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80088d8:	d100      	bne.n	80088dc <memcpy+0xc>
 80088da:	4770      	bx	lr
 80088dc:	b510      	push	{r4, lr}
 80088de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088e6:	4291      	cmp	r1, r2
 80088e8:	d1f9      	bne.n	80088de <memcpy+0xe>
 80088ea:	bd10      	pop	{r4, pc}

080088ec <memmove>:
 80088ec:	4288      	cmp	r0, r1
 80088ee:	b510      	push	{r4, lr}
 80088f0:	eb01 0402 	add.w	r4, r1, r2
 80088f4:	d902      	bls.n	80088fc <memmove+0x10>
 80088f6:	4284      	cmp	r4, r0
 80088f8:	4623      	mov	r3, r4
 80088fa:	d807      	bhi.n	800890c <memmove+0x20>
 80088fc:	1e43      	subs	r3, r0, #1
 80088fe:	42a1      	cmp	r1, r4
 8008900:	d008      	beq.n	8008914 <memmove+0x28>
 8008902:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008906:	f803 2f01 	strb.w	r2, [r3, #1]!
 800890a:	e7f8      	b.n	80088fe <memmove+0x12>
 800890c:	4402      	add	r2, r0
 800890e:	4601      	mov	r1, r0
 8008910:	428a      	cmp	r2, r1
 8008912:	d100      	bne.n	8008916 <memmove+0x2a>
 8008914:	bd10      	pop	{r4, pc}
 8008916:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800891a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800891e:	e7f7      	b.n	8008910 <memmove+0x24>

08008920 <_free_r>:
 8008920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008922:	2900      	cmp	r1, #0
 8008924:	d048      	beq.n	80089b8 <_free_r+0x98>
 8008926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800892a:	9001      	str	r0, [sp, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	f1a1 0404 	sub.w	r4, r1, #4
 8008932:	bfb8      	it	lt
 8008934:	18e4      	addlt	r4, r4, r3
 8008936:	f000 f8d3 	bl	8008ae0 <__malloc_lock>
 800893a:	4a20      	ldr	r2, [pc, #128]	; (80089bc <_free_r+0x9c>)
 800893c:	9801      	ldr	r0, [sp, #4]
 800893e:	6813      	ldr	r3, [r2, #0]
 8008940:	4615      	mov	r5, r2
 8008942:	b933      	cbnz	r3, 8008952 <_free_r+0x32>
 8008944:	6063      	str	r3, [r4, #4]
 8008946:	6014      	str	r4, [r2, #0]
 8008948:	b003      	add	sp, #12
 800894a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800894e:	f000 b8cd 	b.w	8008aec <__malloc_unlock>
 8008952:	42a3      	cmp	r3, r4
 8008954:	d90b      	bls.n	800896e <_free_r+0x4e>
 8008956:	6821      	ldr	r1, [r4, #0]
 8008958:	1862      	adds	r2, r4, r1
 800895a:	4293      	cmp	r3, r2
 800895c:	bf04      	itt	eq
 800895e:	681a      	ldreq	r2, [r3, #0]
 8008960:	685b      	ldreq	r3, [r3, #4]
 8008962:	6063      	str	r3, [r4, #4]
 8008964:	bf04      	itt	eq
 8008966:	1852      	addeq	r2, r2, r1
 8008968:	6022      	streq	r2, [r4, #0]
 800896a:	602c      	str	r4, [r5, #0]
 800896c:	e7ec      	b.n	8008948 <_free_r+0x28>
 800896e:	461a      	mov	r2, r3
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	b10b      	cbz	r3, 8008978 <_free_r+0x58>
 8008974:	42a3      	cmp	r3, r4
 8008976:	d9fa      	bls.n	800896e <_free_r+0x4e>
 8008978:	6811      	ldr	r1, [r2, #0]
 800897a:	1855      	adds	r5, r2, r1
 800897c:	42a5      	cmp	r5, r4
 800897e:	d10b      	bne.n	8008998 <_free_r+0x78>
 8008980:	6824      	ldr	r4, [r4, #0]
 8008982:	4421      	add	r1, r4
 8008984:	1854      	adds	r4, r2, r1
 8008986:	42a3      	cmp	r3, r4
 8008988:	6011      	str	r1, [r2, #0]
 800898a:	d1dd      	bne.n	8008948 <_free_r+0x28>
 800898c:	681c      	ldr	r4, [r3, #0]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	6053      	str	r3, [r2, #4]
 8008992:	4421      	add	r1, r4
 8008994:	6011      	str	r1, [r2, #0]
 8008996:	e7d7      	b.n	8008948 <_free_r+0x28>
 8008998:	d902      	bls.n	80089a0 <_free_r+0x80>
 800899a:	230c      	movs	r3, #12
 800899c:	6003      	str	r3, [r0, #0]
 800899e:	e7d3      	b.n	8008948 <_free_r+0x28>
 80089a0:	6825      	ldr	r5, [r4, #0]
 80089a2:	1961      	adds	r1, r4, r5
 80089a4:	428b      	cmp	r3, r1
 80089a6:	bf04      	itt	eq
 80089a8:	6819      	ldreq	r1, [r3, #0]
 80089aa:	685b      	ldreq	r3, [r3, #4]
 80089ac:	6063      	str	r3, [r4, #4]
 80089ae:	bf04      	itt	eq
 80089b0:	1949      	addeq	r1, r1, r5
 80089b2:	6021      	streq	r1, [r4, #0]
 80089b4:	6054      	str	r4, [r2, #4]
 80089b6:	e7c7      	b.n	8008948 <_free_r+0x28>
 80089b8:	b003      	add	sp, #12
 80089ba:	bd30      	pop	{r4, r5, pc}
 80089bc:	200008f8 	.word	0x200008f8

080089c0 <_malloc_r>:
 80089c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c2:	1ccd      	adds	r5, r1, #3
 80089c4:	f025 0503 	bic.w	r5, r5, #3
 80089c8:	3508      	adds	r5, #8
 80089ca:	2d0c      	cmp	r5, #12
 80089cc:	bf38      	it	cc
 80089ce:	250c      	movcc	r5, #12
 80089d0:	2d00      	cmp	r5, #0
 80089d2:	4606      	mov	r6, r0
 80089d4:	db01      	blt.n	80089da <_malloc_r+0x1a>
 80089d6:	42a9      	cmp	r1, r5
 80089d8:	d903      	bls.n	80089e2 <_malloc_r+0x22>
 80089da:	230c      	movs	r3, #12
 80089dc:	6033      	str	r3, [r6, #0]
 80089de:	2000      	movs	r0, #0
 80089e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089e2:	f000 f87d 	bl	8008ae0 <__malloc_lock>
 80089e6:	4921      	ldr	r1, [pc, #132]	; (8008a6c <_malloc_r+0xac>)
 80089e8:	680a      	ldr	r2, [r1, #0]
 80089ea:	4614      	mov	r4, r2
 80089ec:	b99c      	cbnz	r4, 8008a16 <_malloc_r+0x56>
 80089ee:	4f20      	ldr	r7, [pc, #128]	; (8008a70 <_malloc_r+0xb0>)
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	b923      	cbnz	r3, 80089fe <_malloc_r+0x3e>
 80089f4:	4621      	mov	r1, r4
 80089f6:	4630      	mov	r0, r6
 80089f8:	f000 f862 	bl	8008ac0 <_sbrk_r>
 80089fc:	6038      	str	r0, [r7, #0]
 80089fe:	4629      	mov	r1, r5
 8008a00:	4630      	mov	r0, r6
 8008a02:	f000 f85d 	bl	8008ac0 <_sbrk_r>
 8008a06:	1c43      	adds	r3, r0, #1
 8008a08:	d123      	bne.n	8008a52 <_malloc_r+0x92>
 8008a0a:	230c      	movs	r3, #12
 8008a0c:	6033      	str	r3, [r6, #0]
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f000 f86c 	bl	8008aec <__malloc_unlock>
 8008a14:	e7e3      	b.n	80089de <_malloc_r+0x1e>
 8008a16:	6823      	ldr	r3, [r4, #0]
 8008a18:	1b5b      	subs	r3, r3, r5
 8008a1a:	d417      	bmi.n	8008a4c <_malloc_r+0x8c>
 8008a1c:	2b0b      	cmp	r3, #11
 8008a1e:	d903      	bls.n	8008a28 <_malloc_r+0x68>
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	441c      	add	r4, r3
 8008a24:	6025      	str	r5, [r4, #0]
 8008a26:	e004      	b.n	8008a32 <_malloc_r+0x72>
 8008a28:	6863      	ldr	r3, [r4, #4]
 8008a2a:	42a2      	cmp	r2, r4
 8008a2c:	bf0c      	ite	eq
 8008a2e:	600b      	streq	r3, [r1, #0]
 8008a30:	6053      	strne	r3, [r2, #4]
 8008a32:	4630      	mov	r0, r6
 8008a34:	f000 f85a 	bl	8008aec <__malloc_unlock>
 8008a38:	f104 000b 	add.w	r0, r4, #11
 8008a3c:	1d23      	adds	r3, r4, #4
 8008a3e:	f020 0007 	bic.w	r0, r0, #7
 8008a42:	1ac2      	subs	r2, r0, r3
 8008a44:	d0cc      	beq.n	80089e0 <_malloc_r+0x20>
 8008a46:	1a1b      	subs	r3, r3, r0
 8008a48:	50a3      	str	r3, [r4, r2]
 8008a4a:	e7c9      	b.n	80089e0 <_malloc_r+0x20>
 8008a4c:	4622      	mov	r2, r4
 8008a4e:	6864      	ldr	r4, [r4, #4]
 8008a50:	e7cc      	b.n	80089ec <_malloc_r+0x2c>
 8008a52:	1cc4      	adds	r4, r0, #3
 8008a54:	f024 0403 	bic.w	r4, r4, #3
 8008a58:	42a0      	cmp	r0, r4
 8008a5a:	d0e3      	beq.n	8008a24 <_malloc_r+0x64>
 8008a5c:	1a21      	subs	r1, r4, r0
 8008a5e:	4630      	mov	r0, r6
 8008a60:	f000 f82e 	bl	8008ac0 <_sbrk_r>
 8008a64:	3001      	adds	r0, #1
 8008a66:	d1dd      	bne.n	8008a24 <_malloc_r+0x64>
 8008a68:	e7cf      	b.n	8008a0a <_malloc_r+0x4a>
 8008a6a:	bf00      	nop
 8008a6c:	200008f8 	.word	0x200008f8
 8008a70:	200008fc 	.word	0x200008fc

08008a74 <_realloc_r>:
 8008a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a76:	4607      	mov	r7, r0
 8008a78:	4614      	mov	r4, r2
 8008a7a:	460e      	mov	r6, r1
 8008a7c:	b921      	cbnz	r1, 8008a88 <_realloc_r+0x14>
 8008a7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a82:	4611      	mov	r1, r2
 8008a84:	f7ff bf9c 	b.w	80089c0 <_malloc_r>
 8008a88:	b922      	cbnz	r2, 8008a94 <_realloc_r+0x20>
 8008a8a:	f7ff ff49 	bl	8008920 <_free_r>
 8008a8e:	4625      	mov	r5, r4
 8008a90:	4628      	mov	r0, r5
 8008a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a94:	f000 f830 	bl	8008af8 <_malloc_usable_size_r>
 8008a98:	42a0      	cmp	r0, r4
 8008a9a:	d20f      	bcs.n	8008abc <_realloc_r+0x48>
 8008a9c:	4621      	mov	r1, r4
 8008a9e:	4638      	mov	r0, r7
 8008aa0:	f7ff ff8e 	bl	80089c0 <_malloc_r>
 8008aa4:	4605      	mov	r5, r0
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	d0f2      	beq.n	8008a90 <_realloc_r+0x1c>
 8008aaa:	4631      	mov	r1, r6
 8008aac:	4622      	mov	r2, r4
 8008aae:	f7ff ff0f 	bl	80088d0 <memcpy>
 8008ab2:	4631      	mov	r1, r6
 8008ab4:	4638      	mov	r0, r7
 8008ab6:	f7ff ff33 	bl	8008920 <_free_r>
 8008aba:	e7e9      	b.n	8008a90 <_realloc_r+0x1c>
 8008abc:	4635      	mov	r5, r6
 8008abe:	e7e7      	b.n	8008a90 <_realloc_r+0x1c>

08008ac0 <_sbrk_r>:
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	4d06      	ldr	r5, [pc, #24]	; (8008adc <_sbrk_r+0x1c>)
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	4608      	mov	r0, r1
 8008aca:	602b      	str	r3, [r5, #0]
 8008acc:	f7fb ffa0 	bl	8004a10 <_sbrk>
 8008ad0:	1c43      	adds	r3, r0, #1
 8008ad2:	d102      	bne.n	8008ada <_sbrk_r+0x1a>
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	b103      	cbz	r3, 8008ada <_sbrk_r+0x1a>
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
 8008adc:	20000e5c 	.word	0x20000e5c

08008ae0 <__malloc_lock>:
 8008ae0:	4801      	ldr	r0, [pc, #4]	; (8008ae8 <__malloc_lock+0x8>)
 8008ae2:	f000 b811 	b.w	8008b08 <__retarget_lock_acquire_recursive>
 8008ae6:	bf00      	nop
 8008ae8:	20000e64 	.word	0x20000e64

08008aec <__malloc_unlock>:
 8008aec:	4801      	ldr	r0, [pc, #4]	; (8008af4 <__malloc_unlock+0x8>)
 8008aee:	f000 b80c 	b.w	8008b0a <__retarget_lock_release_recursive>
 8008af2:	bf00      	nop
 8008af4:	20000e64 	.word	0x20000e64

08008af8 <_malloc_usable_size_r>:
 8008af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008afc:	1f18      	subs	r0, r3, #4
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	bfbc      	itt	lt
 8008b02:	580b      	ldrlt	r3, [r1, r0]
 8008b04:	18c0      	addlt	r0, r0, r3
 8008b06:	4770      	bx	lr

08008b08 <__retarget_lock_acquire_recursive>:
 8008b08:	4770      	bx	lr

08008b0a <__retarget_lock_release_recursive>:
 8008b0a:	4770      	bx	lr

08008b0c <_init>:
 8008b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0e:	bf00      	nop
 8008b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b12:	bc08      	pop	{r3}
 8008b14:	469e      	mov	lr, r3
 8008b16:	4770      	bx	lr

08008b18 <_fini>:
 8008b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1a:	bf00      	nop
 8008b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b1e:	bc08      	pop	{r3}
 8008b20:	469e      	mov	lr, r3
 8008b22:	4770      	bx	lr
