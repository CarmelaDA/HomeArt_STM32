
HomeArt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000076c  08007288  08007288  00017288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079f4  080079f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080079f4  080079f4  000179f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079fc  080079fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079fc  080079fc  000179fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a00  08007a00  00017a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000d7c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000dec  20000dec  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014b6c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a84  00000000  00000000  00034c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef0  00000000  00000000  00037690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e28  00000000  00000000  00038580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c0f  00000000  00000000  000393a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012f31  00000000  00000000  0005cfb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8b5f  00000000  00000000  0006fee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00148a47  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041f0  00000000  00000000  00148a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007270 	.word	0x08007270

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007270 	.word	0x08007270

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <ESP_clearBuffer>:
char *Terminate = "</body></html>";


/*****************************************************************************************************************************************/

void ESP_clearBuffer(void){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

	memset(buffer_app, 0, 60);
 800057c:	223c      	movs	r2, #60	; 0x3c
 800057e:	2100      	movs	r1, #0
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <ESP_clearBuffer+0x18>)
 8000582:	f006 fa3f 	bl	8006a04 <memset>
	buffer_index = 0;
 8000586:	4b03      	ldr	r3, [pc, #12]	; (8000594 <ESP_clearBuffer+0x1c>)
 8000588:	2200      	movs	r2, #0
 800058a:	801a      	strh	r2, [r3, #0]
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200008f8 	.word	0x200008f8
 8000594:	200009e2 	.word	0x200009e2

08000598 <ESP_Init>:


void ESP_Init(char *SSID, char *PASSWD){
 8000598:	b580      	push	{r7, lr}
 800059a:	b09a      	sub	sp, #104	; 0x68
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]

	ESP_clearBuffer();
 80005a2:	f7ff ffe9 	bl	8000578 <ESP_clearBuffer>
	char data[80];

	ringInit();
 80005a6:	f000 fd51 	bl	800104c <ringInit>

	HAL_Delay(1000);
 80005aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ae:	f002 fec5 	bl	800333c <HAL_Delay>

	/********** AT **********/

	UART_send("AT\r\n", WiFi_UART);
 80005b2:	4974      	ldr	r1, [pc, #464]	; (8000784 <ESP_Init+0x1ec>)
 80005b4:	4874      	ldr	r0, [pc, #464]	; (8000788 <ESP_Init+0x1f0>)
 80005b6:	f000 ff07 	bl	80013c8 <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 80005ba:	bf00      	nop
 80005bc:	4971      	ldr	r1, [pc, #452]	; (8000784 <ESP_Init+0x1ec>)
 80005be:	4873      	ldr	r0, [pc, #460]	; (800078c <ESP_Init+0x1f4>)
 80005c0:	f000 ff98 	bl	80014f4 <UART_waitFor>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f8      	beq.n	80005bc <ESP_Init+0x24>
	UART_send("AT  ---->  OK\n", PC_UART);
 80005ca:	4971      	ldr	r1, [pc, #452]	; (8000790 <ESP_Init+0x1f8>)
 80005cc:	4871      	ldr	r0, [pc, #452]	; (8000794 <ESP_Init+0x1fc>)
 80005ce:	f000 fefb 	bl	80013c8 <UART_send>


	HAL_Delay(2000);
 80005d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005d6:	f002 feb1 	bl	800333c <HAL_Delay>


	/********** AT+RST **********/
	UART_send("AT+RST\r\n", WiFi_UART);
 80005da:	496a      	ldr	r1, [pc, #424]	; (8000784 <ESP_Init+0x1ec>)
 80005dc:	486e      	ldr	r0, [pc, #440]	; (8000798 <ESP_Init+0x200>)
 80005de:	f000 fef3 	bl	80013c8 <UART_send>
	UART_send("\nReseteando ", PC_UART);
 80005e2:	496b      	ldr	r1, [pc, #428]	; (8000790 <ESP_Init+0x1f8>)
 80005e4:	486d      	ldr	r0, [pc, #436]	; (800079c <ESP_Init+0x204>)
 80005e6:	f000 feef 	bl	80013c8 <UART_send>

	for (int i=0; i<3; i++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	667b      	str	r3, [r7, #100]	; 0x64
 80005ee:	e00a      	b.n	8000606 <ESP_Init+0x6e>
	{
		UART_send(" . ", PC_UART);
 80005f0:	4967      	ldr	r1, [pc, #412]	; (8000790 <ESP_Init+0x1f8>)
 80005f2:	486b      	ldr	r0, [pc, #428]	; (80007a0 <ESP_Init+0x208>)
 80005f4:	f000 fee8 	bl	80013c8 <UART_send>
		HAL_Delay(1500);
 80005f8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005fc:	f002 fe9e 	bl	800333c <HAL_Delay>
	for (int i=0; i<3; i++)
 8000600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000602:	3301      	adds	r3, #1
 8000604:	667b      	str	r3, [r7, #100]	; 0x64
 8000606:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000608:	2b02      	cmp	r3, #2
 800060a:	ddf1      	ble.n	80005f0 <ESP_Init+0x58>
	}


	/********** AT **********/
	UART_send("AT\r\n", WiFi_UART);
 800060c:	495d      	ldr	r1, [pc, #372]	; (8000784 <ESP_Init+0x1ec>)
 800060e:	485e      	ldr	r0, [pc, #376]	; (8000788 <ESP_Init+0x1f0>)
 8000610:	f000 feda 	bl	80013c8 <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 8000614:	bf00      	nop
 8000616:	495b      	ldr	r1, [pc, #364]	; (8000784 <ESP_Init+0x1ec>)
 8000618:	485c      	ldr	r0, [pc, #368]	; (800078c <ESP_Init+0x1f4>)
 800061a:	f000 ff6b 	bl	80014f4 <UART_waitFor>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d0f8      	beq.n	8000616 <ESP_Init+0x7e>
	UART_send("\n\nAT  ---->  OK\n\n", PC_UART);
 8000624:	495a      	ldr	r1, [pc, #360]	; (8000790 <ESP_Init+0x1f8>)
 8000626:	485f      	ldr	r0, [pc, #380]	; (80007a4 <ESP_Init+0x20c>)
 8000628:	f000 fece 	bl	80013c8 <UART_send>


	HAL_Delay(2000);
 800062c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000630:	f002 fe84 	bl	800333c <HAL_Delay>


	/********** AT+CWMODE=3 **********/
	UART_send("AT+CWMODE=3\r\n", WiFi_UART);
 8000634:	4953      	ldr	r1, [pc, #332]	; (8000784 <ESP_Init+0x1ec>)
 8000636:	485c      	ldr	r0, [pc, #368]	; (80007a8 <ESP_Init+0x210>)
 8000638:	f000 fec6 	bl	80013c8 <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 800063c:	bf00      	nop
 800063e:	4951      	ldr	r1, [pc, #324]	; (8000784 <ESP_Init+0x1ec>)
 8000640:	4852      	ldr	r0, [pc, #328]	; (800078c <ESP_Init+0x1f4>)
 8000642:	f000 ff57 	bl	80014f4 <UART_waitFor>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d0f8      	beq.n	800063e <ESP_Init+0xa6>
	UART_send("CW MODE  ---->  3\n\n", PC_UART);
 800064c:	4950      	ldr	r1, [pc, #320]	; (8000790 <ESP_Init+0x1f8>)
 800064e:	4857      	ldr	r0, [pc, #348]	; (80007ac <ESP_Init+0x214>)
 8000650:	f000 feba 	bl	80013c8 <UART_send>


	/********** AT+CWJAP="SSID","PASSWD" **********/
	UART_send("Conectando con la RED proporcionada ", PC_UART);
 8000654:	494e      	ldr	r1, [pc, #312]	; (8000790 <ESP_Init+0x1f8>)
 8000656:	4856      	ldr	r0, [pc, #344]	; (80007b0 <ESP_Init+0x218>)
 8000658:	f000 feb6 	bl	80013c8 <UART_send>

	for (int i=0; i<3; i++)
 800065c:	2300      	movs	r3, #0
 800065e:	663b      	str	r3, [r7, #96]	; 0x60
 8000660:	e00a      	b.n	8000678 <ESP_Init+0xe0>
	{
		UART_send(" . ", PC_UART);
 8000662:	494b      	ldr	r1, [pc, #300]	; (8000790 <ESP_Init+0x1f8>)
 8000664:	484e      	ldr	r0, [pc, #312]	; (80007a0 <ESP_Init+0x208>)
 8000666:	f000 feaf 	bl	80013c8 <UART_send>
		HAL_Delay(1500);
 800066a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800066e:	f002 fe65 	bl	800333c <HAL_Delay>
	for (int i=0; i<3; i++)
 8000672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000674:	3301      	adds	r3, #1
 8000676:	663b      	str	r3, [r7, #96]	; 0x60
 8000678:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800067a:	2b02      	cmp	r3, #2
 800067c:	ddf1      	ble.n	8000662 <ESP_Init+0xca>
	}

	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 800067e:	f107 000c 	add.w	r0, r7, #12
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	494b      	ldr	r1, [pc, #300]	; (80007b4 <ESP_Init+0x21c>)
 8000688:	f006 f9c4 	bl	8006a14 <siprintf>
	UART_send(data, WiFi_UART);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	493c      	ldr	r1, [pc, #240]	; (8000784 <ESP_Init+0x1ec>)
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fe98 	bl	80013c8 <UART_send>
	while (!(UART_waitFor("WIFI GOT IP\r\n\r\nOK\r\n", WiFi_UART)));
 8000698:	bf00      	nop
 800069a:	493a      	ldr	r1, [pc, #232]	; (8000784 <ESP_Init+0x1ec>)
 800069c:	4846      	ldr	r0, [pc, #280]	; (80007b8 <ESP_Init+0x220>)
 800069e:	f000 ff29 	bl	80014f4 <UART_waitFor>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d0f8      	beq.n	800069a <ESP_Init+0x102>
	sprintf (data, "\n\nConectado a  \"%s\"\n\n", SSID);
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	4943      	ldr	r1, [pc, #268]	; (80007bc <ESP_Init+0x224>)
 80006b0:	4618      	mov	r0, r3
 80006b2:	f006 f9af 	bl	8006a14 <siprintf>
	UART_send(data,PC_UART);
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	4935      	ldr	r1, [pc, #212]	; (8000790 <ESP_Init+0x1f8>)
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fe83 	bl	80013c8 <UART_send>
	//UART_send("AT+CIPSTA?\r\n", WiFi_UART);
	//sprintf (data, "AT+CIPSTA?\r\n");


	/********** AT+CIFSR **********/
	UART_send("AT+CIFSR\r\n", WiFi_UART);
 80006c2:	4930      	ldr	r1, [pc, #192]	; (8000784 <ESP_Init+0x1ec>)
 80006c4:	483e      	ldr	r0, [pc, #248]	; (80007c0 <ESP_Init+0x228>)
 80006c6:	f000 fe7f 	bl	80013c8 <UART_send>
	while (!(UART_waitFor("CIFSR:STAIP,\"", WiFi_UART)));
 80006ca:	bf00      	nop
 80006cc:	492d      	ldr	r1, [pc, #180]	; (8000784 <ESP_Init+0x1ec>)
 80006ce:	483d      	ldr	r0, [pc, #244]	; (80007c4 <ESP_Init+0x22c>)
 80006d0:	f000 ff10 	bl	80014f4 <UART_waitFor>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d0f8      	beq.n	80006cc <ESP_Init+0x134>
	while (!(UART_copyUpto("\"",buffer, WiFi_UART)));
 80006da:	bf00      	nop
 80006dc:	4a29      	ldr	r2, [pc, #164]	; (8000784 <ESP_Init+0x1ec>)
 80006de:	493a      	ldr	r1, [pc, #232]	; (80007c8 <ESP_Init+0x230>)
 80006e0:	483a      	ldr	r0, [pc, #232]	; (80007cc <ESP_Init+0x234>)
 80006e2:	f000 fe89 	bl	80013f8 <UART_copyUpto>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0f7      	beq.n	80006dc <ESP_Init+0x144>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 80006ec:	bf00      	nop
 80006ee:	4925      	ldr	r1, [pc, #148]	; (8000784 <ESP_Init+0x1ec>)
 80006f0:	4826      	ldr	r0, [pc, #152]	; (800078c <ESP_Init+0x1f4>)
 80006f2:	f000 feff 	bl	80014f4 <UART_waitFor>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d0f8      	beq.n	80006ee <ESP_Init+0x156>
	int len = strlen (buffer);
 80006fc:	4832      	ldr	r0, [pc, #200]	; (80007c8 <ESP_Init+0x230>)
 80006fe:	f7ff fd67 	bl	80001d0 <strlen>
 8000702:	4603      	mov	r3, r0
 8000704:	65fb      	str	r3, [r7, #92]	; 0x5c
	buffer[len-1] = '\0';
 8000706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000708:	3b01      	subs	r3, #1
 800070a:	4a2f      	ldr	r2, [pc, #188]	; (80007c8 <ESP_Init+0x230>)
 800070c:	2100      	movs	r1, #0
 800070e:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP :  %s\n\n", buffer);
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	4a2c      	ldr	r2, [pc, #176]	; (80007c8 <ESP_Init+0x230>)
 8000716:	492e      	ldr	r1, [pc, #184]	; (80007d0 <ESP_Init+0x238>)
 8000718:	4618      	mov	r0, r3
 800071a:	f006 f97b 	bl	8006a14 <siprintf>
	UART_send(data, PC_UART);
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	491b      	ldr	r1, [pc, #108]	; (8000790 <ESP_Init+0x1f8>)
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fe4f 	bl	80013c8 <UART_send>


	/********** AT+CIPMUX=1 **********/
	UART_send("AT+CIPMUX=1\r\n", WiFi_UART);
 800072a:	4916      	ldr	r1, [pc, #88]	; (8000784 <ESP_Init+0x1ec>)
 800072c:	4829      	ldr	r0, [pc, #164]	; (80007d4 <ESP_Init+0x23c>)
 800072e:	f000 fe4b 	bl	80013c8 <UART_send>
	while (!(UART_waitFor("AT+CIPMUX=1\r\r\n\r\nOK\r\n", WiFi_UART)));
 8000732:	bf00      	nop
 8000734:	4913      	ldr	r1, [pc, #76]	; (8000784 <ESP_Init+0x1ec>)
 8000736:	4828      	ldr	r0, [pc, #160]	; (80007d8 <ESP_Init+0x240>)
 8000738:	f000 fedc 	bl	80014f4 <UART_waitFor>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0f8      	beq.n	8000734 <ESP_Init+0x19c>
	UART_send("CIPMUX  ---->  OK\n\n", PC_UART);
 8000742:	4913      	ldr	r1, [pc, #76]	; (8000790 <ESP_Init+0x1f8>)
 8000744:	4825      	ldr	r0, [pc, #148]	; (80007dc <ESP_Init+0x244>)
 8000746:	f000 fe3f 	bl	80013c8 <UART_send>
	//while (!(UART_waitFor("OK\r\n", WiFi_UART)));
	//UART_send("CIPSTART  ---->  OK\n\n", PC_UART);


	/********** AT+CIPSERVER=1,80 **********/
	UART_send("AT+CIPSERVER=1,80\r\n", WiFi_UART);
 800074a:	490e      	ldr	r1, [pc, #56]	; (8000784 <ESP_Init+0x1ec>)
 800074c:	4824      	ldr	r0, [pc, #144]	; (80007e0 <ESP_Init+0x248>)
 800074e:	f000 fe3b 	bl	80013c8 <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 8000752:	bf00      	nop
 8000754:	490b      	ldr	r1, [pc, #44]	; (8000784 <ESP_Init+0x1ec>)
 8000756:	480d      	ldr	r0, [pc, #52]	; (800078c <ESP_Init+0x1f4>)
 8000758:	f000 fecc 	bl	80014f4 <UART_waitFor>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d0f8      	beq.n	8000754 <ESP_Init+0x1bc>
	UART_send("CIPSERVER  ---->  OK\n\n", PC_UART);
 8000762:	490b      	ldr	r1, [pc, #44]	; (8000790 <ESP_Init+0x1f8>)
 8000764:	481f      	ldr	r0, [pc, #124]	; (80007e4 <ESP_Init+0x24c>)
 8000766:	f000 fe2f 	bl	80013c8 <UART_send>


	/********** FIN **********/
	UART_send("Conectado a la IP\n\n", PC_UART);
 800076a:	4909      	ldr	r1, [pc, #36]	; (8000790 <ESP_Init+0x1f8>)
 800076c:	481e      	ldr	r0, [pc, #120]	; (80007e8 <ESP_Init+0x250>)
 800076e:	f000 fe2b 	bl	80013c8 <UART_send>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1); // CONNECTED
 8000772:	2201      	movs	r2, #1
 8000774:	2101      	movs	r1, #1
 8000776:	481d      	ldr	r0, [pc, #116]	; (80007ec <ESP_Init+0x254>)
 8000778:	f003 fd28 	bl	80041cc <HAL_GPIO_WritePin>
}
 800077c:	bf00      	nop
 800077e:	3768      	adds	r7, #104	; 0x68
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000d94 	.word	0x20000d94
 8000788:	0800769c 	.word	0x0800769c
 800078c:	080076a4 	.word	0x080076a4
 8000790:	20000d08 	.word	0x20000d08
 8000794:	080076ac 	.word	0x080076ac
 8000798:	080076bc 	.word	0x080076bc
 800079c:	080076c8 	.word	0x080076c8
 80007a0:	080076d8 	.word	0x080076d8
 80007a4:	080076dc 	.word	0x080076dc
 80007a8:	080076f0 	.word	0x080076f0
 80007ac:	08007700 	.word	0x08007700
 80007b0:	08007714 	.word	0x08007714
 80007b4:	0800773c 	.word	0x0800773c
 80007b8:	08007754 	.word	0x08007754
 80007bc:	08007768 	.word	0x08007768
 80007c0:	08007780 	.word	0x08007780
 80007c4:	0800778c 	.word	0x0800778c
 80007c8:	20000938 	.word	0x20000938
 80007cc:	0800779c 	.word	0x0800779c
 80007d0:	080077a0 	.word	0x080077a0
 80007d4:	080077ac 	.word	0x080077ac
 80007d8:	080077bc 	.word	0x080077bc
 80007dc:	080077d4 	.word	0x080077d4
 80007e0:	080077e8 	.word	0x080077e8
 80007e4:	080077fc 	.word	0x080077fc
 80007e8:	08007814 	.word	0x08007814
 80007ec:	40020800 	.word	0x40020800

080007f0 <ESP_messageHandler>:
	}
	return -1;
}


void ESP_messageHandler(void){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

	//__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);

	memset(textrc, 0, 100);
 80007f4:	2264      	movs	r2, #100	; 0x64
 80007f6:	2100      	movs	r1, #0
 80007f8:	48a9      	ldr	r0, [pc, #676]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80007fa:	f006 f903 	bl	8006a04 <memset>

	HAL_UART_Receive(&huart2, (uint8_t *)textrc, 100, 100); //(uint8_t *)
 80007fe:	2364      	movs	r3, #100	; 0x64
 8000800:	2264      	movs	r2, #100	; 0x64
 8000802:	49a7      	ldr	r1, [pc, #668]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000804:	48a7      	ldr	r0, [pc, #668]	; (8000aa4 <ESP_messageHandler+0x2b4>)
 8000806:	f005 f9a8 	bl	8005b5a <HAL_UART_Receive>

	HAL_UART_Transmit(&huart6, (uint8_t *)textrc, 100, HAL_MAX_DELAY);
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	2264      	movs	r2, #100	; 0x64
 8000810:	49a3      	ldr	r1, [pc, #652]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000812:	48a5      	ldr	r0, [pc, #660]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 8000814:	f005 f90f 	bl	8005a36 <HAL_UART_Transmit>
	UART_send("\n", PC_UART);
 8000818:	49a3      	ldr	r1, [pc, #652]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 800081a:	48a4      	ldr	r0, [pc, #656]	; (8000aac <ESP_messageHandler+0x2bc>)
 800081c:	f000 fdd4 	bl	80013c8 <UART_send>

	fragment[0] = textrc[25]; // Asignación de Fragmento
 8000820:	4b9f      	ldr	r3, [pc, #636]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000822:	7e5a      	ldrb	r2, [r3, #25]
 8000824:	4ba2      	ldr	r3, [pc, #648]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000826:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart6, (uint8_t *)fragment, 1, HAL_MAX_DELAY);
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	2201      	movs	r2, #1
 800082e:	49a0      	ldr	r1, [pc, #640]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000830:	489d      	ldr	r0, [pc, #628]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 8000832:	f005 f900 	bl	8005a36 <HAL_UART_Transmit>
	UART_send("\n", PC_UART);
 8000836:	499c      	ldr	r1, [pc, #624]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 8000838:	489c      	ldr	r0, [pc, #624]	; (8000aac <ESP_messageHandler+0x2bc>)
 800083a:	f000 fdc5 	bl	80013c8 <UART_send>


	// SEGURIDAD
	if (fragment[0] == 's'){
 800083e:	4b9c      	ldr	r3, [pc, #624]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b73      	cmp	r3, #115	; 0x73
 8000844:	d10b      	bne.n	800085e <ESP_messageHandler+0x6e>
		UART_send("SEGURIDAD \n", PC_UART);
 8000846:	4998      	ldr	r1, [pc, #608]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 8000848:	489a      	ldr	r0, [pc, #616]	; (8000ab4 <ESP_messageHandler+0x2c4>)
 800084a:	f000 fdbd 	bl	80013c8 <UART_send>
		vSeg[0] = textrc[28]; // Alarma Interior
 800084e:	4b94      	ldr	r3, [pc, #592]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000850:	7f1a      	ldrb	r2, [r3, #28]
 8000852:	4b99      	ldr	r3, [pc, #612]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 8000854:	701a      	strb	r2, [r3, #0]
		vSeg[1] = textrc[31]; // Alarma Exterior
 8000856:	4b92      	ldr	r3, [pc, #584]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000858:	7fda      	ldrb	r2, [r3, #31]
 800085a:	4b97      	ldr	r3, [pc, #604]	; (8000ab8 <ESP_messageHandler+0x2c8>)
 800085c:	705a      	strb	r2, [r3, #1]
	}

	// ILUMINACIÓN
	if (fragment[0] == 'i'){
 800085e:	4b94      	ldr	r3, [pc, #592]	; (8000ab0 <ESP_messageHandler+0x2c0>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b69      	cmp	r3, #105	; 0x69
 8000864:	f040 8234 	bne.w	8000cd0 <ESP_messageHandler+0x4e0>
		UART_send("ILUMINACION \n", PC_UART);
 8000868:	498f      	ldr	r1, [pc, #572]	; (8000aa8 <ESP_messageHandler+0x2b8>)
 800086a:	4894      	ldr	r0, [pc, #592]	; (8000abc <ESP_messageHandler+0x2cc>)
 800086c:	f000 fdac 	bl	80013c8 <UART_send>
		vIlum[0] = textrc[28]; 	// Luz Sala
 8000870:	4b8b      	ldr	r3, [pc, #556]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000872:	7f1a      	ldrb	r2, [r3, #28]
 8000874:	4b92      	ldr	r3, [pc, #584]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000876:	701a      	strb	r2, [r3, #0]
		vIlum[1] = textrc[31]; 	// Luz Comedor
 8000878:	4b89      	ldr	r3, [pc, #548]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 800087a:	7fda      	ldrb	r2, [r3, #31]
 800087c:	4b90      	ldr	r3, [pc, #576]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800087e:	705a      	strb	r2, [r3, #1]
		vIlum[2] = textrc[34]; 	// Luz Ambiente
 8000880:	4b87      	ldr	r3, [pc, #540]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000882:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000886:	4b8e      	ldr	r3, [pc, #568]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000888:	709a      	strb	r2, [r3, #2]
		vIlum[3] = textrc[37]; 	// Luz Recibidor
 800088a:	4b85      	ldr	r3, [pc, #532]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 800088c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000890:	4b8b      	ldr	r3, [pc, #556]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000892:	70da      	strb	r2, [r3, #3]
		vIlum[4] = textrc[40]; 	// Luz Cocina
 8000894:	4b82      	ldr	r3, [pc, #520]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000896:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800089a:	4b89      	ldr	r3, [pc, #548]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800089c:	711a      	strb	r2, [r3, #4]
		vIlum[5] = textrc[43]; 	// Luz Fregadero
 800089e:	4b80      	ldr	r3, [pc, #512]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008a0:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80008a4:	4b86      	ldr	r3, [pc, #536]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008a6:	715a      	strb	r2, [r3, #5]
		vIlum[6] = textrc[46]; 	// Luz Baño
 80008a8:	4b7d      	ldr	r3, [pc, #500]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008aa:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80008ae:	4b84      	ldr	r3, [pc, #528]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008b0:	719a      	strb	r2, [r3, #6]
		vIlum[7] = textrc[49]; 	// Luz Espejo
 80008b2:	4b7b      	ldr	r3, [pc, #492]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008b4:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80008b8:	4b81      	ldr	r3, [pc, #516]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008ba:	71da      	strb	r2, [r3, #7]
		vIlum[8] = textrc[52]; 	// Luz Dormitorio
 80008bc:	4b78      	ldr	r3, [pc, #480]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008be:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80008c2:	4b7f      	ldr	r3, [pc, #508]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008c4:	721a      	strb	r2, [r3, #8]
		vIlum[9] = textrc[55]; 	// Luz Mesita Izq
 80008c6:	4b76      	ldr	r3, [pc, #472]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008c8:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80008cc:	4b7c      	ldr	r3, [pc, #496]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008ce:	725a      	strb	r2, [r3, #9]
		vIlum[10] = textrc[58]; // Luz Mesita Dch
 80008d0:	4b73      	ldr	r3, [pc, #460]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008d2:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80008d6:	4b7a      	ldr	r3, [pc, #488]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008d8:	729a      	strb	r2, [r3, #10]
		vIlum[11] = textrc[61]; // Luz Oficina
 80008da:	4b71      	ldr	r3, [pc, #452]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008dc:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80008e0:	4b77      	ldr	r3, [pc, #476]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008e2:	72da      	strb	r2, [r3, #11]
		vIlum[12] = textrc[64]; // Luz Gaming
 80008e4:	4b6e      	ldr	r3, [pc, #440]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008e6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80008ea:	4b75      	ldr	r3, [pc, #468]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008ec:	731a      	strb	r2, [r3, #12]
		vIlum[13] = textrc[67]; // Luz Rx100
 80008ee:	4b6c      	ldr	r3, [pc, #432]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008f0:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80008f4:	4b72      	ldr	r3, [pc, #456]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80008f6:	735a      	strb	r2, [r3, #13]
		vIlum[14] = textrc[68]; // Luz Rx10
 80008f8:	4b69      	ldr	r3, [pc, #420]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 80008fa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80008fe:	4b70      	ldr	r3, [pc, #448]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000900:	739a      	strb	r2, [r3, #14]
		vIlum[15] = textrc[69]; // Luz Rx1
 8000902:	4b67      	ldr	r3, [pc, #412]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000904:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8000908:	4b6d      	ldr	r3, [pc, #436]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800090a:	73da      	strb	r2, [r3, #15]
		vIlum[16] = textrc[72]; // Luz Gx100
 800090c:	4b64      	ldr	r3, [pc, #400]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 800090e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8000912:	4b6b      	ldr	r3, [pc, #428]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000914:	741a      	strb	r2, [r3, #16]
		vIlum[17] = textrc[73]; // Luz Gx10
 8000916:	4b62      	ldr	r3, [pc, #392]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000918:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800091c:	4b68      	ldr	r3, [pc, #416]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800091e:	745a      	strb	r2, [r3, #17]
		vIlum[18] = textrc[74]; // Luz Gx1
 8000920:	4b5f      	ldr	r3, [pc, #380]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000922:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8000926:	4b66      	ldr	r3, [pc, #408]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000928:	749a      	strb	r2, [r3, #18]
		vIlum[19] = textrc[77]; // Luz Bx100
 800092a:	4b5d      	ldr	r3, [pc, #372]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 800092c:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8000930:	4b63      	ldr	r3, [pc, #396]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000932:	74da      	strb	r2, [r3, #19]
		vIlum[20] = textrc[78]; // Luz Bx10
 8000934:	4b5a      	ldr	r3, [pc, #360]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000936:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 800093a:	4b61      	ldr	r3, [pc, #388]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800093c:	751a      	strb	r2, [r3, #20]
		vIlum[21] = textrc[79]; // Luz Bx1
 800093e:	4b58      	ldr	r3, [pc, #352]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000940:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8000944:	4b5e      	ldr	r3, [pc, #376]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000946:	755a      	strb	r2, [r3, #21]
		vIlum[22] = textrc[82]; // Luz Garaje
 8000948:	4b55      	ldr	r3, [pc, #340]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 800094a:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 800094e:	4b5c      	ldr	r3, [pc, #368]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000950:	759a      	strb	r2, [r3, #22]
		vIlum[23] = textrc[85]; // Luz Jardín
 8000952:	4b53      	ldr	r3, [pc, #332]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000954:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8000958:	4b59      	ldr	r3, [pc, #356]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800095a:	75da      	strb	r2, [r3, #23]
		vIlum[24] = textrc[88]; // Luz Porche
 800095c:	4b50      	ldr	r3, [pc, #320]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 800095e:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8000962:	4b57      	ldr	r3, [pc, #348]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000964:	761a      	strb	r2, [r3, #24]
		vIlum[25] = textrc[91]; // Luz Tendedero
 8000966:	4b4e      	ldr	r3, [pc, #312]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000968:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 800096c:	4b54      	ldr	r3, [pc, #336]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800096e:	765a      	strb	r2, [r3, #25]
		vIlum[26] = textrc[94]; // Automático
 8000970:	4b4b      	ldr	r3, [pc, #300]	; (8000aa0 <ESP_messageHandler+0x2b0>)
 8000972:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 8000976:	4b52      	ldr	r3, [pc, #328]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000978:	769a      	strb	r2, [r3, #26]


		if(vIlum[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, RESET);
 800097a:	4b51      	ldr	r3, [pc, #324]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b30      	cmp	r3, #48	; 0x30
 8000980:	d105      	bne.n	800098e <ESP_messageHandler+0x19e>
 8000982:	2200      	movs	r2, #0
 8000984:	2108      	movs	r1, #8
 8000986:	484f      	ldr	r0, [pc, #316]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 8000988:	f003 fc20 	bl	80041cc <HAL_GPIO_WritePin>
 800098c:	e008      	b.n	80009a0 <ESP_messageHandler+0x1b0>
		else if(vIlum[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, SET);
 800098e:	4b4c      	ldr	r3, [pc, #304]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b31      	cmp	r3, #49	; 0x31
 8000994:	d104      	bne.n	80009a0 <ESP_messageHandler+0x1b0>
 8000996:	2201      	movs	r2, #1
 8000998:	2108      	movs	r1, #8
 800099a:	484a      	ldr	r0, [pc, #296]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 800099c:	f003 fc16 	bl	80041cc <HAL_GPIO_WritePin>

		if(vIlum[1] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET);
 80009a0:	4b47      	ldr	r3, [pc, #284]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80009a2:	785b      	ldrb	r3, [r3, #1]
 80009a4:	2b30      	cmp	r3, #48	; 0x30
 80009a6:	d105      	bne.n	80009b4 <ESP_messageHandler+0x1c4>
 80009a8:	2200      	movs	r2, #0
 80009aa:	2102      	movs	r1, #2
 80009ac:	4845      	ldr	r0, [pc, #276]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 80009ae:	f003 fc0d 	bl	80041cc <HAL_GPIO_WritePin>
 80009b2:	e008      	b.n	80009c6 <ESP_messageHandler+0x1d6>
		else if(vIlum[1] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, SET);
 80009b4:	4b42      	ldr	r3, [pc, #264]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80009b6:	785b      	ldrb	r3, [r3, #1]
 80009b8:	2b31      	cmp	r3, #49	; 0x31
 80009ba:	d104      	bne.n	80009c6 <ESP_messageHandler+0x1d6>
 80009bc:	2201      	movs	r2, #1
 80009be:	2102      	movs	r1, #2
 80009c0:	4840      	ldr	r0, [pc, #256]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 80009c2:	f003 fc03 	bl	80041cc <HAL_GPIO_WritePin>

		if(vIlum[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, RESET);
 80009c6:	4b3e      	ldr	r3, [pc, #248]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80009c8:	789b      	ldrb	r3, [r3, #2]
 80009ca:	2b30      	cmp	r3, #48	; 0x30
 80009cc:	d105      	bne.n	80009da <ESP_messageHandler+0x1ea>
 80009ce:	2200      	movs	r2, #0
 80009d0:	2120      	movs	r1, #32
 80009d2:	483c      	ldr	r0, [pc, #240]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 80009d4:	f003 fbfa 	bl	80041cc <HAL_GPIO_WritePin>
 80009d8:	e008      	b.n	80009ec <ESP_messageHandler+0x1fc>
		else if(vIlum[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, SET);
 80009da:	4b39      	ldr	r3, [pc, #228]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80009dc:	789b      	ldrb	r3, [r3, #2]
 80009de:	2b31      	cmp	r3, #49	; 0x31
 80009e0:	d104      	bne.n	80009ec <ESP_messageHandler+0x1fc>
 80009e2:	2201      	movs	r2, #1
 80009e4:	2120      	movs	r1, #32
 80009e6:	4837      	ldr	r0, [pc, #220]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 80009e8:	f003 fbf0 	bl	80041cc <HAL_GPIO_WritePin>

		if(vIlum[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET);
 80009ec:	4b34      	ldr	r3, [pc, #208]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 80009ee:	78db      	ldrb	r3, [r3, #3]
 80009f0:	2b30      	cmp	r3, #48	; 0x30
 80009f2:	d105      	bne.n	8000a00 <ESP_messageHandler+0x210>
 80009f4:	2200      	movs	r2, #0
 80009f6:	2101      	movs	r1, #1
 80009f8:	4832      	ldr	r0, [pc, #200]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 80009fa:	f003 fbe7 	bl	80041cc <HAL_GPIO_WritePin>
 80009fe:	e008      	b.n	8000a12 <ESP_messageHandler+0x222>
		else if(vIlum[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 8000a00:	4b2f      	ldr	r3, [pc, #188]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a02:	78db      	ldrb	r3, [r3, #3]
 8000a04:	2b31      	cmp	r3, #49	; 0x31
 8000a06:	d104      	bne.n	8000a12 <ESP_messageHandler+0x222>
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	482d      	ldr	r0, [pc, #180]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 8000a0e:	f003 fbdd 	bl	80041cc <HAL_GPIO_WritePin>

		if(vIlum[4] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET);
 8000a12:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a14:	791b      	ldrb	r3, [r3, #4]
 8000a16:	2b30      	cmp	r3, #48	; 0x30
 8000a18:	d106      	bne.n	8000a28 <ESP_messageHandler+0x238>
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a20:	4829      	ldr	r0, [pc, #164]	; (8000ac8 <ESP_messageHandler+0x2d8>)
 8000a22:	f003 fbd3 	bl	80041cc <HAL_GPIO_WritePin>
 8000a26:	e009      	b.n	8000a3c <ESP_messageHandler+0x24c>
		else if(vIlum[4] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 8000a28:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a2a:	791b      	ldrb	r3, [r3, #4]
 8000a2c:	2b31      	cmp	r3, #49	; 0x31
 8000a2e:	d105      	bne.n	8000a3c <ESP_messageHandler+0x24c>
 8000a30:	2201      	movs	r2, #1
 8000a32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a36:	4824      	ldr	r0, [pc, #144]	; (8000ac8 <ESP_messageHandler+0x2d8>)
 8000a38:	f003 fbc8 	bl	80041cc <HAL_GPIO_WritePin>

		if(vIlum[5] == '0') HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET);
 8000a3c:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a3e:	795b      	ldrb	r3, [r3, #5]
 8000a40:	2b30      	cmp	r3, #48	; 0x30
 8000a42:	d106      	bne.n	8000a52 <ESP_messageHandler+0x262>
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a4a:	4820      	ldr	r0, [pc, #128]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000a4c:	f003 fbbe 	bl	80041cc <HAL_GPIO_WritePin>
 8000a50:	e009      	b.n	8000a66 <ESP_messageHandler+0x276>
		else if(vIlum[5] == '1')HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 8000a52:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a54:	795b      	ldrb	r3, [r3, #5]
 8000a56:	2b31      	cmp	r3, #49	; 0x31
 8000a58:	d105      	bne.n	8000a66 <ESP_messageHandler+0x276>
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a60:	481a      	ldr	r0, [pc, #104]	; (8000acc <ESP_messageHandler+0x2dc>)
 8000a62:	f003 fbb3 	bl	80041cc <HAL_GPIO_WritePin>

		if(vIlum[6] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, RESET);
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a68:	799b      	ldrb	r3, [r3, #6]
 8000a6a:	2b30      	cmp	r3, #48	; 0x30
 8000a6c:	d105      	bne.n	8000a7a <ESP_messageHandler+0x28a>
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2140      	movs	r1, #64	; 0x40
 8000a72:	4814      	ldr	r0, [pc, #80]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 8000a74:	f003 fbaa 	bl	80041cc <HAL_GPIO_WritePin>
 8000a78:	e008      	b.n	8000a8c <ESP_messageHandler+0x29c>
		else if(vIlum[6] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, SET);
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a7c:	799b      	ldrb	r3, [r3, #6]
 8000a7e:	2b31      	cmp	r3, #49	; 0x31
 8000a80:	d104      	bne.n	8000a8c <ESP_messageHandler+0x29c>
 8000a82:	2201      	movs	r2, #1
 8000a84:	2140      	movs	r1, #64	; 0x40
 8000a86:	480f      	ldr	r0, [pc, #60]	; (8000ac4 <ESP_messageHandler+0x2d4>)
 8000a88:	f003 fba0 	bl	80041cc <HAL_GPIO_WritePin>

		if(vIlum[7] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <ESP_messageHandler+0x2d0>)
 8000a8e:	79db      	ldrb	r3, [r3, #7]
 8000a90:	2b30      	cmp	r3, #48	; 0x30
 8000a92:	d11f      	bne.n	8000ad4 <ESP_messageHandler+0x2e4>
 8000a94:	2200      	movs	r2, #0
 8000a96:	2108      	movs	r1, #8
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <ESP_messageHandler+0x2e0>)
 8000a9a:	f003 fb97 	bl	80041cc <HAL_GPIO_WritePin>
 8000a9e:	e022      	b.n	8000ae6 <ESP_messageHandler+0x2f6>
 8000aa0:	20000970 	.word	0x20000970
 8000aa4:	20000d94 	.word	0x20000d94
 8000aa8:	20000d08 	.word	0x20000d08
 8000aac:	08007890 	.word	0x08007890
 8000ab0:	20000968 	.word	0x20000968
 8000ab4:	08007894 	.word	0x08007894
 8000ab8:	200009e0 	.word	0x200009e0
 8000abc:	080078a0 	.word	0x080078a0
 8000ac0:	2000094c 	.word	0x2000094c
 8000ac4:	40020c00 	.word	0x40020c00
 8000ac8:	40020800 	.word	0x40020800
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40020400 	.word	0x40020400
		else if(vIlum[7] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8000ad4:	4b71      	ldr	r3, [pc, #452]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000ad6:	79db      	ldrb	r3, [r3, #7]
 8000ad8:	2b31      	cmp	r3, #49	; 0x31
 8000ada:	d104      	bne.n	8000ae6 <ESP_messageHandler+0x2f6>
 8000adc:	2201      	movs	r2, #1
 8000ade:	2108      	movs	r1, #8
 8000ae0:	486f      	ldr	r0, [pc, #444]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000ae2:	f003 fb73 	bl	80041cc <HAL_GPIO_WritePin>

		if(vIlum[8] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, RESET);
 8000ae6:	4b6d      	ldr	r3, [pc, #436]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000ae8:	7a1b      	ldrb	r3, [r3, #8]
 8000aea:	2b30      	cmp	r3, #48	; 0x30
 8000aec:	d105      	bne.n	8000afa <ESP_messageHandler+0x30a>
 8000aee:	2200      	movs	r2, #0
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	486c      	ldr	r0, [pc, #432]	; (8000ca4 <ESP_messageHandler+0x4b4>)
 8000af4:	f003 fb6a 	bl	80041cc <HAL_GPIO_WritePin>
 8000af8:	e008      	b.n	8000b0c <ESP_messageHandler+0x31c>
		else if(vIlum[8] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET);
 8000afa:	4b68      	ldr	r3, [pc, #416]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000afc:	7a1b      	ldrb	r3, [r3, #8]
 8000afe:	2b31      	cmp	r3, #49	; 0x31
 8000b00:	d104      	bne.n	8000b0c <ESP_messageHandler+0x31c>
 8000b02:	2201      	movs	r2, #1
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	4867      	ldr	r0, [pc, #412]	; (8000ca4 <ESP_messageHandler+0x4b4>)
 8000b08:	f003 fb60 	bl	80041cc <HAL_GPIO_WritePin>

		if(vIlum[9] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000b0c:	4b63      	ldr	r3, [pc, #396]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000b0e:	7a5b      	ldrb	r3, [r3, #9]
 8000b10:	2b30      	cmp	r3, #48	; 0x30
 8000b12:	d105      	bne.n	8000b20 <ESP_messageHandler+0x330>
 8000b14:	2200      	movs	r2, #0
 8000b16:	2110      	movs	r1, #16
 8000b18:	4861      	ldr	r0, [pc, #388]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000b1a:	f003 fb57 	bl	80041cc <HAL_GPIO_WritePin>
 8000b1e:	e008      	b.n	8000b32 <ESP_messageHandler+0x342>
		else if(vIlum[9] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000b20:	4b5e      	ldr	r3, [pc, #376]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000b22:	7a5b      	ldrb	r3, [r3, #9]
 8000b24:	2b31      	cmp	r3, #49	; 0x31
 8000b26:	d104      	bne.n	8000b32 <ESP_messageHandler+0x342>
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2110      	movs	r1, #16
 8000b2c:	485c      	ldr	r0, [pc, #368]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000b2e:	f003 fb4d 	bl	80041cc <HAL_GPIO_WritePin>

		if(vIlum[10] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000b32:	4b5a      	ldr	r3, [pc, #360]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000b34:	7a9b      	ldrb	r3, [r3, #10]
 8000b36:	2b30      	cmp	r3, #48	; 0x30
 8000b38:	d105      	bne.n	8000b46 <ESP_messageHandler+0x356>
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2140      	movs	r1, #64	; 0x40
 8000b3e:	4858      	ldr	r0, [pc, #352]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000b40:	f003 fb44 	bl	80041cc <HAL_GPIO_WritePin>
 8000b44:	e008      	b.n	8000b58 <ESP_messageHandler+0x368>
		else if(vIlum[10] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8000b46:	4b55      	ldr	r3, [pc, #340]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000b48:	7a9b      	ldrb	r3, [r3, #10]
 8000b4a:	2b31      	cmp	r3, #49	; 0x31
 8000b4c:	d104      	bne.n	8000b58 <ESP_messageHandler+0x368>
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2140      	movs	r1, #64	; 0x40
 8000b52:	4853      	ldr	r0, [pc, #332]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000b54:	f003 fb3a 	bl	80041cc <HAL_GPIO_WritePin>

		if(vIlum[11] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000b58:	4b50      	ldr	r3, [pc, #320]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000b5a:	7adb      	ldrb	r3, [r3, #11]
 8000b5c:	2b30      	cmp	r3, #48	; 0x30
 8000b5e:	d105      	bne.n	8000b6c <ESP_messageHandler+0x37c>
 8000b60:	2200      	movs	r2, #0
 8000b62:	2120      	movs	r1, #32
 8000b64:	484e      	ldr	r0, [pc, #312]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000b66:	f003 fb31 	bl	80041cc <HAL_GPIO_WritePin>
 8000b6a:	e008      	b.n	8000b7e <ESP_messageHandler+0x38e>
		else if(vIlum[11] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000b6c:	4b4b      	ldr	r3, [pc, #300]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000b6e:	7adb      	ldrb	r3, [r3, #11]
 8000b70:	2b31      	cmp	r3, #49	; 0x31
 8000b72:	d104      	bne.n	8000b7e <ESP_messageHandler+0x38e>
 8000b74:	2201      	movs	r2, #1
 8000b76:	2120      	movs	r1, #32
 8000b78:	4849      	ldr	r0, [pc, #292]	; (8000ca0 <ESP_messageHandler+0x4b0>)
 8000b7a:	f003 fb27 	bl	80041cc <HAL_GPIO_WritePin>

		if(vIlum[12] == '0'){
 8000b7e:	4b47      	ldr	r3, [pc, #284]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000b80:	7b1b      	ldrb	r3, [r3, #12]
 8000b82:	2b30      	cmp	r3, #48	; 0x30
 8000b84:	d10c      	bne.n	8000ba0 <ESP_messageHandler+0x3b0>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000b86:	4b48      	ldr	r3, [pc, #288]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000b8e:	4b46      	ldr	r3, [pc, #280]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2200      	movs	r2, #0
 8000b94:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000b96:	4b44      	ldr	r3, [pc, #272]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b9e:	e036      	b.n	8000c0e <ESP_messageHandler+0x41e>
		}
		else if(vIlum[12] == '1'){
 8000ba0:	4b3e      	ldr	r3, [pc, #248]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000ba2:	7b1b      	ldrb	r3, [r3, #12]
 8000ba4:	2b31      	cmp	r3, #49	; 0x31
 8000ba6:	d132      	bne.n	8000c0e <ESP_messageHandler+0x41e>

			//uint8_t r, g, b;

			r = rgb_value (vIlum[13],vIlum[14],vIlum[15]);
 8000ba8:	4b3c      	ldr	r3, [pc, #240]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000baa:	7b5b      	ldrb	r3, [r3, #13]
 8000bac:	4a3b      	ldr	r2, [pc, #236]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000bae:	7b91      	ldrb	r1, [r2, #14]
 8000bb0:	4a3a      	ldr	r2, [pc, #232]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000bb2:	7bd2      	ldrb	r2, [r2, #15]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 f9ad 	bl	8000f14 <rgb_value>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	4a3b      	ldr	r2, [pc, #236]	; (8000cac <ESP_messageHandler+0x4bc>)
 8000bbe:	6013      	str	r3, [r2, #0]
			g = rgb_value (vIlum[16],vIlum[17],vIlum[18]);
 8000bc0:	4b36      	ldr	r3, [pc, #216]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000bc2:	7c1b      	ldrb	r3, [r3, #16]
 8000bc4:	4a35      	ldr	r2, [pc, #212]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000bc6:	7c51      	ldrb	r1, [r2, #17]
 8000bc8:	4a34      	ldr	r2, [pc, #208]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000bca:	7c92      	ldrb	r2, [r2, #18]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f9a1 	bl	8000f14 <rgb_value>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4a36      	ldr	r2, [pc, #216]	; (8000cb0 <ESP_messageHandler+0x4c0>)
 8000bd6:	6013      	str	r3, [r2, #0]
			b = rgb_value (vIlum[19],vIlum[20],vIlum[21]);
 8000bd8:	4b30      	ldr	r3, [pc, #192]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000bda:	7cdb      	ldrb	r3, [r3, #19]
 8000bdc:	4a2f      	ldr	r2, [pc, #188]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000bde:	7d11      	ldrb	r1, [r2, #20]
 8000be0:	4a2e      	ldr	r2, [pc, #184]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000be2:	7d52      	ldrb	r2, [r2, #21]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 f995 	bl	8000f14 <rgb_value>
 8000bea:	4603      	mov	r3, r0
 8000bec:	4a31      	ldr	r2, [pc, #196]	; (8000cb4 <ESP_messageHandler+0x4c4>)
 8000bee:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, g); // PA8
 8000bf0:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <ESP_messageHandler+0x4c0>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b2c      	ldr	r3, [pc, #176]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, r); // PA9
 8000bfa:	4b2c      	ldr	r3, [pc, #176]	; (8000cac <ESP_messageHandler+0x4bc>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b); // PA10
 8000c04:	4b2b      	ldr	r3, [pc, #172]	; (8000cb4 <ESP_messageHandler+0x4c4>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <ESP_messageHandler+0x4b8>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		if(vIlum[22] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET);
 8000c0e:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c10:	7d9b      	ldrb	r3, [r3, #22]
 8000c12:	2b30      	cmp	r3, #48	; 0x30
 8000c14:	d106      	bne.n	8000c24 <ESP_messageHandler+0x434>
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c1c:	4826      	ldr	r0, [pc, #152]	; (8000cb8 <ESP_messageHandler+0x4c8>)
 8000c1e:	f003 fad5 	bl	80041cc <HAL_GPIO_WritePin>
 8000c22:	e009      	b.n	8000c38 <ESP_messageHandler+0x448>
		else if(vIlum[22] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c26:	7d9b      	ldrb	r3, [r3, #22]
 8000c28:	2b31      	cmp	r3, #49	; 0x31
 8000c2a:	d105      	bne.n	8000c38 <ESP_messageHandler+0x448>
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c32:	4821      	ldr	r0, [pc, #132]	; (8000cb8 <ESP_messageHandler+0x4c8>)
 8000c34:	f003 faca 	bl	80041cc <HAL_GPIO_WritePin>

		if(vIlum[23] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET);
 8000c38:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c3a:	7ddb      	ldrb	r3, [r3, #23]
 8000c3c:	2b30      	cmp	r3, #48	; 0x30
 8000c3e:	d105      	bne.n	8000c4c <ESP_messageHandler+0x45c>
 8000c40:	2200      	movs	r2, #0
 8000c42:	2104      	movs	r1, #4
 8000c44:	4817      	ldr	r0, [pc, #92]	; (8000ca4 <ESP_messageHandler+0x4b4>)
 8000c46:	f003 fac1 	bl	80041cc <HAL_GPIO_WritePin>
 8000c4a:	e008      	b.n	8000c5e <ESP_messageHandler+0x46e>
		else if(vIlum[23] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c4e:	7ddb      	ldrb	r3, [r3, #23]
 8000c50:	2b31      	cmp	r3, #49	; 0x31
 8000c52:	d104      	bne.n	8000c5e <ESP_messageHandler+0x46e>
 8000c54:	2201      	movs	r2, #1
 8000c56:	2104      	movs	r1, #4
 8000c58:	4812      	ldr	r0, [pc, #72]	; (8000ca4 <ESP_messageHandler+0x4b4>)
 8000c5a:	f003 fab7 	bl	80041cc <HAL_GPIO_WritePin>

		if(vIlum[24] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c60:	7e1b      	ldrb	r3, [r3, #24]
 8000c62:	2b30      	cmp	r3, #48	; 0x30
 8000c64:	d105      	bne.n	8000c72 <ESP_messageHandler+0x482>
 8000c66:	2200      	movs	r2, #0
 8000c68:	2110      	movs	r1, #16
 8000c6a:	480e      	ldr	r0, [pc, #56]	; (8000ca4 <ESP_messageHandler+0x4b4>)
 8000c6c:	f003 faae 	bl	80041cc <HAL_GPIO_WritePin>
 8000c70:	e008      	b.n	8000c84 <ESP_messageHandler+0x494>
		else if(vIlum[24] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c74:	7e1b      	ldrb	r3, [r3, #24]
 8000c76:	2b31      	cmp	r3, #49	; 0x31
 8000c78:	d104      	bne.n	8000c84 <ESP_messageHandler+0x494>
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2110      	movs	r1, #16
 8000c7e:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <ESP_messageHandler+0x4b4>)
 8000c80:	f003 faa4 	bl	80041cc <HAL_GPIO_WritePin>

		if(vIlum[25] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <ESP_messageHandler+0x4ac>)
 8000c86:	7e5b      	ldrb	r3, [r3, #25]
 8000c88:	2b30      	cmp	r3, #48	; 0x30
 8000c8a:	d117      	bne.n	8000cbc <ESP_messageHandler+0x4cc>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c92:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <ESP_messageHandler+0x4c8>)
 8000c94:	f003 fa9a 	bl	80041cc <HAL_GPIO_WritePin>
 8000c98:	e01a      	b.n	8000cd0 <ESP_messageHandler+0x4e0>
 8000c9a:	bf00      	nop
 8000c9c:	2000094c 	.word	0x2000094c
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	40020c00 	.word	0x40020c00
 8000ca8:	20000c78 	.word	0x20000c78
 8000cac:	200008ec 	.word	0x200008ec
 8000cb0:	200008e0 	.word	0x200008e0
 8000cb4:	200008dc 	.word	0x200008dc
 8000cb8:	40020800 	.word	0x40020800
		else if(vIlum[25] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8000cbc:	4b60      	ldr	r3, [pc, #384]	; (8000e40 <ESP_messageHandler+0x650>)
 8000cbe:	7e5b      	ldrb	r3, [r3, #25]
 8000cc0:	2b31      	cmp	r3, #49	; 0x31
 8000cc2:	d105      	bne.n	8000cd0 <ESP_messageHandler+0x4e0>
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cca:	485e      	ldr	r0, [pc, #376]	; (8000e44 <ESP_messageHandler+0x654>)
 8000ccc:	f003 fa7e 	bl	80041cc <HAL_GPIO_WritePin>
	}

	// PUERTAS Y VENTANAS
	if (fragment[0] == 'p'){
 8000cd0:	4b5d      	ldr	r3, [pc, #372]	; (8000e48 <ESP_messageHandler+0x658>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b70      	cmp	r3, #112	; 0x70
 8000cd6:	d107      	bne.n	8000ce8 <ESP_messageHandler+0x4f8>
		UART_send("PUERTAS Y VENTANAS (PUERTA PARCELA)\n", PC_UART);
 8000cd8:	495c      	ldr	r1, [pc, #368]	; (8000e4c <ESP_messageHandler+0x65c>)
 8000cda:	485d      	ldr	r0, [pc, #372]	; (8000e50 <ESP_messageHandler+0x660>)
 8000cdc:	f000 fb74 	bl	80013c8 <UART_send>
		vVent[1] = textrc[28]; // Puerta Parcela
 8000ce0:	4b5c      	ldr	r3, [pc, #368]	; (8000e54 <ESP_messageHandler+0x664>)
 8000ce2:	7f1a      	ldrb	r2, [r3, #28]
 8000ce4:	4b5c      	ldr	r3, [pc, #368]	; (8000e58 <ESP_messageHandler+0x668>)
 8000ce6:	705a      	strb	r2, [r3, #1]
	}
	if (fragment[0] == 'g'){
 8000ce8:	4b57      	ldr	r3, [pc, #348]	; (8000e48 <ESP_messageHandler+0x658>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b67      	cmp	r3, #103	; 0x67
 8000cee:	d107      	bne.n	8000d00 <ESP_messageHandler+0x510>
		UART_send("PUERTAS Y VENTANAS (PUERTA GARAJE)\n", PC_UART);
 8000cf0:	4956      	ldr	r1, [pc, #344]	; (8000e4c <ESP_messageHandler+0x65c>)
 8000cf2:	485a      	ldr	r0, [pc, #360]	; (8000e5c <ESP_messageHandler+0x66c>)
 8000cf4:	f000 fb68 	bl	80013c8 <UART_send>
		vVent[0] = textrc[31]; // Puerta Garaje
 8000cf8:	4b56      	ldr	r3, [pc, #344]	; (8000e54 <ESP_messageHandler+0x664>)
 8000cfa:	7fda      	ldrb	r2, [r3, #31]
 8000cfc:	4b56      	ldr	r3, [pc, #344]	; (8000e58 <ESP_messageHandler+0x668>)
 8000cfe:	701a      	strb	r2, [r3, #0]
	}
	if (fragment[0] == 'l'){
 8000d00:	4b51      	ldr	r3, [pc, #324]	; (8000e48 <ESP_messageHandler+0x658>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b6c      	cmp	r3, #108	; 0x6c
 8000d06:	d108      	bne.n	8000d1a <ESP_messageHandler+0x52a>
		UART_send("PUERTAS Y VENTANAS (VENTANA SALÓN)\n", PC_UART);
 8000d08:	4950      	ldr	r1, [pc, #320]	; (8000e4c <ESP_messageHandler+0x65c>)
 8000d0a:	4855      	ldr	r0, [pc, #340]	; (8000e60 <ESP_messageHandler+0x670>)
 8000d0c:	f000 fb5c 	bl	80013c8 <UART_send>
		vVent[2] = textrc[34]; // Ventana Salón
 8000d10:	4b50      	ldr	r3, [pc, #320]	; (8000e54 <ESP_messageHandler+0x664>)
 8000d12:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000d16:	4b50      	ldr	r3, [pc, #320]	; (8000e58 <ESP_messageHandler+0x668>)
 8000d18:	709a      	strb	r2, [r3, #2]
	}
	if (fragment[0] == 'd'){
 8000d1a:	4b4b      	ldr	r3, [pc, #300]	; (8000e48 <ESP_messageHandler+0x658>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b64      	cmp	r3, #100	; 0x64
 8000d20:	d108      	bne.n	8000d34 <ESP_messageHandler+0x544>
		UART_send("PUERTAS Y VENTANAS (VENTANA DORMITORIO)\n", PC_UART);
 8000d22:	494a      	ldr	r1, [pc, #296]	; (8000e4c <ESP_messageHandler+0x65c>)
 8000d24:	484f      	ldr	r0, [pc, #316]	; (8000e64 <ESP_messageHandler+0x674>)
 8000d26:	f000 fb4f 	bl	80013c8 <UART_send>
		vVent[3] = textrc[37]; // Ventana Dormitorio
 8000d2a:	4b4a      	ldr	r3, [pc, #296]	; (8000e54 <ESP_messageHandler+0x664>)
 8000d2c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000d30:	4b49      	ldr	r3, [pc, #292]	; (8000e58 <ESP_messageHandler+0x668>)
 8000d32:	70da      	strb	r2, [r3, #3]
	}
	if (fragment[0] == 'o'){
 8000d34:	4b44      	ldr	r3, [pc, #272]	; (8000e48 <ESP_messageHandler+0x658>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b6f      	cmp	r3, #111	; 0x6f
 8000d3a:	d108      	bne.n	8000d4e <ESP_messageHandler+0x55e>
		UART_send("PUERTAS Y VENTANAS (VENTANA OFICINA)\n", PC_UART);
 8000d3c:	4943      	ldr	r1, [pc, #268]	; (8000e4c <ESP_messageHandler+0x65c>)
 8000d3e:	484a      	ldr	r0, [pc, #296]	; (8000e68 <ESP_messageHandler+0x678>)
 8000d40:	f000 fb42 	bl	80013c8 <UART_send>
		vVent[4] = textrc[40]; // Ventana Oficina
 8000d44:	4b43      	ldr	r3, [pc, #268]	; (8000e54 <ESP_messageHandler+0x664>)
 8000d46:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000d4a:	4b43      	ldr	r3, [pc, #268]	; (8000e58 <ESP_messageHandler+0x668>)
 8000d4c:	711a      	strb	r2, [r3, #4]
	}

	// TIEMPO
	if (fragment[0] == 't'){
 8000d4e:	4b3e      	ldr	r3, [pc, #248]	; (8000e48 <ESP_messageHandler+0x658>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b74      	cmp	r3, #116	; 0x74
 8000d54:	d115      	bne.n	8000d82 <ESP_messageHandler+0x592>
		UART_send("TIEMPO\n", PC_UART);
 8000d56:	493d      	ldr	r1, [pc, #244]	; (8000e4c <ESP_messageHandler+0x65c>)
 8000d58:	4844      	ldr	r0, [pc, #272]	; (8000e6c <ESP_messageHandler+0x67c>)
 8000d5a:	f000 fb35 	bl	80013c8 <UART_send>
		vTemp[0] = textrc[28]; 	// Vent. Salón
 8000d5e:	4b3d      	ldr	r3, [pc, #244]	; (8000e54 <ESP_messageHandler+0x664>)
 8000d60:	7f1a      	ldrb	r2, [r3, #28]
 8000d62:	4b43      	ldr	r3, [pc, #268]	; (8000e70 <ESP_messageHandler+0x680>)
 8000d64:	701a      	strb	r2, [r3, #0]
		vTemp[1] = textrc[31]; 	// Vent. Dormitorio
 8000d66:	4b3b      	ldr	r3, [pc, #236]	; (8000e54 <ESP_messageHandler+0x664>)
 8000d68:	7fda      	ldrb	r2, [r3, #31]
 8000d6a:	4b41      	ldr	r3, [pc, #260]	; (8000e70 <ESP_messageHandler+0x680>)
 8000d6c:	705a      	strb	r2, [r3, #1]
		vTemp[2] = textrc[34]; 	// Vent. Oficina
 8000d6e:	4b39      	ldr	r3, [pc, #228]	; (8000e54 <ESP_messageHandler+0x664>)
 8000d70:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000d74:	4b3e      	ldr	r3, [pc, #248]	; (8000e70 <ESP_messageHandler+0x680>)
 8000d76:	709a      	strb	r2, [r3, #2]
		vTemp[4] = textrc[37]; 	// Calefacción
 8000d78:	4b36      	ldr	r3, [pc, #216]	; (8000e54 <ESP_messageHandler+0x664>)
 8000d7a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000d7e:	4b3c      	ldr	r3, [pc, #240]	; (8000e70 <ESP_messageHandler+0x680>)
 8000d80:	711a      	strb	r2, [r3, #4]
    }

	// EXTERIOR
	if (fragment[0] == 'e'){
 8000d82:	4b31      	ldr	r3, [pc, #196]	; (8000e48 <ESP_messageHandler+0x658>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b65      	cmp	r3, #101	; 0x65
 8000d88:	d157      	bne.n	8000e3a <ESP_messageHandler+0x64a>
		UART_send("EXTERIOR\n", PC_UART);
 8000d8a:	4930      	ldr	r1, [pc, #192]	; (8000e4c <ESP_messageHandler+0x65c>)
 8000d8c:	4839      	ldr	r0, [pc, #228]	; (8000e74 <ESP_messageHandler+0x684>)
 8000d8e:	f000 fb1b 	bl	80013c8 <UART_send>
		vExt[0] = textrc[28]; 	// Toldo Tendedero
 8000d92:	4b30      	ldr	r3, [pc, #192]	; (8000e54 <ESP_messageHandler+0x664>)
 8000d94:	7f1a      	ldrb	r2, [r3, #28]
 8000d96:	4b38      	ldr	r3, [pc, #224]	; (8000e78 <ESP_messageHandler+0x688>)
 8000d98:	701a      	strb	r2, [r3, #0]
		vExt[1] = textrc[31]; 	// Luz Tendedero
 8000d9a:	4b2e      	ldr	r3, [pc, #184]	; (8000e54 <ESP_messageHandler+0x664>)
 8000d9c:	7fda      	ldrb	r2, [r3, #31]
 8000d9e:	4b36      	ldr	r3, [pc, #216]	; (8000e78 <ESP_messageHandler+0x688>)
 8000da0:	705a      	strb	r2, [r3, #1]
		vExt[2] = textrc[34]; 	// Luz Porche
 8000da2:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <ESP_messageHandler+0x664>)
 8000da4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000da8:	4b33      	ldr	r3, [pc, #204]	; (8000e78 <ESP_messageHandler+0x688>)
 8000daa:	709a      	strb	r2, [r3, #2]
		vExt[3] = textrc[37]; 	// Luz Jardín
 8000dac:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <ESP_messageHandler+0x664>)
 8000dae:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000db2:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <ESP_messageHandler+0x688>)
 8000db4:	70da      	strb	r2, [r3, #3]
		vExt[4] = textrc[40]; 	// Puerta Parcela
 8000db6:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <ESP_messageHandler+0x664>)
 8000db8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000dbc:	4b2e      	ldr	r3, [pc, #184]	; (8000e78 <ESP_messageHandler+0x688>)
 8000dbe:	711a      	strb	r2, [r3, #4]

		if(vExt[1] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET); // Luz Tendedero
 8000dc0:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <ESP_messageHandler+0x688>)
 8000dc2:	785b      	ldrb	r3, [r3, #1]
 8000dc4:	2b30      	cmp	r3, #48	; 0x30
 8000dc6:	d106      	bne.n	8000dd6 <ESP_messageHandler+0x5e6>
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dce:	481d      	ldr	r0, [pc, #116]	; (8000e44 <ESP_messageHandler+0x654>)
 8000dd0:	f003 f9fc 	bl	80041cc <HAL_GPIO_WritePin>
 8000dd4:	e009      	b.n	8000dea <ESP_messageHandler+0x5fa>
		else if(vExt[1] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 8000dd6:	4b28      	ldr	r3, [pc, #160]	; (8000e78 <ESP_messageHandler+0x688>)
 8000dd8:	785b      	ldrb	r3, [r3, #1]
 8000dda:	2b31      	cmp	r3, #49	; 0x31
 8000ddc:	d105      	bne.n	8000dea <ESP_messageHandler+0x5fa>
 8000dde:	2201      	movs	r2, #1
 8000de0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de4:	4817      	ldr	r0, [pc, #92]	; (8000e44 <ESP_messageHandler+0x654>)
 8000de6:	f003 f9f1 	bl	80041cc <HAL_GPIO_WritePin>

		if(vExt[2] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET); // Luz Porche
 8000dea:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <ESP_messageHandler+0x688>)
 8000dec:	789b      	ldrb	r3, [r3, #2]
 8000dee:	2b30      	cmp	r3, #48	; 0x30
 8000df0:	d106      	bne.n	8000e00 <ESP_messageHandler+0x610>
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df8:	4812      	ldr	r0, [pc, #72]	; (8000e44 <ESP_messageHandler+0x654>)
 8000dfa:	f003 f9e7 	bl	80041cc <HAL_GPIO_WritePin>
 8000dfe:	e009      	b.n	8000e14 <ESP_messageHandler+0x624>
		else if(vExt[2] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 8000e00:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <ESP_messageHandler+0x688>)
 8000e02:	789b      	ldrb	r3, [r3, #2]
 8000e04:	2b31      	cmp	r3, #49	; 0x31
 8000e06:	d105      	bne.n	8000e14 <ESP_messageHandler+0x624>
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e0e:	480d      	ldr	r0, [pc, #52]	; (8000e44 <ESP_messageHandler+0x654>)
 8000e10:	f003 f9dc 	bl	80041cc <HAL_GPIO_WritePin>

		if(vExt[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET); // Luz Jardín
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <ESP_messageHandler+0x688>)
 8000e16:	78db      	ldrb	r3, [r3, #3]
 8000e18:	2b30      	cmp	r3, #48	; 0x30
 8000e1a:	d105      	bne.n	8000e28 <ESP_messageHandler+0x638>
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4816      	ldr	r0, [pc, #88]	; (8000e7c <ESP_messageHandler+0x68c>)
 8000e22:	f003 f9d3 	bl	80041cc <HAL_GPIO_WritePin>
 8000e26:	e008      	b.n	8000e3a <ESP_messageHandler+0x64a>
		else if(vExt[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <ESP_messageHandler+0x688>)
 8000e2a:	78db      	ldrb	r3, [r3, #3]
 8000e2c:	2b31      	cmp	r3, #49	; 0x31
 8000e2e:	d104      	bne.n	8000e3a <ESP_messageHandler+0x64a>
 8000e30:	2201      	movs	r2, #1
 8000e32:	2101      	movs	r1, #1
 8000e34:	4811      	ldr	r0, [pc, #68]	; (8000e7c <ESP_messageHandler+0x68c>)
 8000e36:	f003 f9c9 	bl	80041cc <HAL_GPIO_WritePin>
	// AJUSTES
	if (fragment[0] == 'a'){
	}

	//__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	2000094c 	.word	0x2000094c
 8000e44:	40020800 	.word	0x40020800
 8000e48:	20000968 	.word	0x20000968
 8000e4c:	20000d08 	.word	0x20000d08
 8000e50:	080078b0 	.word	0x080078b0
 8000e54:	20000970 	.word	0x20000970
 8000e58:	200008e4 	.word	0x200008e4
 8000e5c:	080078d8 	.word	0x080078d8
 8000e60:	080078fc 	.word	0x080078fc
 8000e64:	08007924 	.word	0x08007924
 8000e68:	08007950 	.word	0x08007950
 8000e6c:	08007978 	.word	0x08007978
 8000e70:	20000934 	.word	0x20000934
 8000e74:	08007980 	.word	0x08007980
 8000e78:	200008f0 	.word	0x200008f0
 8000e7c:	40020c00 	.word	0x40020c00

08000e80 <ldr>:


#include <LDR.h>
#include "ESP8266_HAL.h"

void ldr(uint16_t valor){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	80fb      	strh	r3, [r7, #6]


	if (vIlum[26] == '1'){
 8000e8a:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <ldr+0x88>)
 8000e8c:	7e9b      	ldrb	r3, [r3, #26]
 8000e8e:	2b31      	cmp	r3, #49	; 0x31
 8000e90:	d135      	bne.n	8000efe <ldr+0x7e>

		if(valor<90) {
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	2b59      	cmp	r3, #89	; 0x59
 8000e96:	d819      	bhi.n	8000ecc <ldr+0x4c>
			vIlum[23] = 'x';	// Jardín
 8000e98:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <ldr+0x88>)
 8000e9a:	2278      	movs	r2, #120	; 0x78
 8000e9c:	75da      	strb	r2, [r3, #23]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2104      	movs	r1, #4
 8000ea2:	481a      	ldr	r0, [pc, #104]	; (8000f0c <ldr+0x8c>)
 8000ea4:	f003 f992 	bl	80041cc <HAL_GPIO_WritePin>
			vIlum[24] = 'x';	// Porche
 8000ea8:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <ldr+0x88>)
 8000eaa:	2278      	movs	r2, #120	; 0x78
 8000eac:	761a      	strb	r2, [r3, #24]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2110      	movs	r1, #16
 8000eb2:	4816      	ldr	r0, [pc, #88]	; (8000f0c <ldr+0x8c>)
 8000eb4:	f003 f98a 	bl	80041cc <HAL_GPIO_WritePin>
			vIlum[25] = 'x';	// Tendedero
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <ldr+0x88>)
 8000eba:	2278      	movs	r2, #120	; 0x78
 8000ebc:	765a      	strb	r2, [r3, #25]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec4:	4812      	ldr	r0, [pc, #72]	; (8000f10 <ldr+0x90>)
 8000ec6:	f003 f981 	bl	80041cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
			vIlum[25] = 'x';	// Tendedero
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
		}
	}
}
 8000eca:	e018      	b.n	8000efe <ldr+0x7e>
			vIlum[23] = 'x';	// Jardín
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <ldr+0x88>)
 8000ece:	2278      	movs	r2, #120	; 0x78
 8000ed0:	75da      	strb	r2, [r3, #23]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2104      	movs	r1, #4
 8000ed6:	480d      	ldr	r0, [pc, #52]	; (8000f0c <ldr+0x8c>)
 8000ed8:	f003 f978 	bl	80041cc <HAL_GPIO_WritePin>
			vIlum[24] = 'x';	// Porche
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <ldr+0x88>)
 8000ede:	2278      	movs	r2, #120	; 0x78
 8000ee0:	761a      	strb	r2, [r3, #24]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2110      	movs	r1, #16
 8000ee6:	4809      	ldr	r0, [pc, #36]	; (8000f0c <ldr+0x8c>)
 8000ee8:	f003 f970 	bl	80041cc <HAL_GPIO_WritePin>
			vIlum[25] = 'x';	// Tendedero
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <ldr+0x88>)
 8000eee:	2278      	movs	r2, #120	; 0x78
 8000ef0:	765a      	strb	r2, [r3, #25]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef8:	4805      	ldr	r0, [pc, #20]	; (8000f10 <ldr+0x90>)
 8000efa:	f003 f967 	bl	80041cc <HAL_GPIO_WritePin>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	2000094c 	.word	0x2000094c
 8000f0c:	40020c00 	.word	0x40020c00
 8000f10:	40020800 	.word	0x40020800

08000f14 <rgb_value>:
 */


#include <RGB.h>

int rgb_value(char i, char j, char k){
 8000f14:	b480      	push	{r7}
 8000f16:	b087      	sub	sp, #28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	71bb      	strb	r3, [r7, #6]
 8000f22:	4613      	mov	r3, r2
 8000f24:	717b      	strb	r3, [r7, #5]

	int a, b, c;

	if(i == '0') a = 0;
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	2b30      	cmp	r3, #48	; 0x30
 8000f2a:	d102      	bne.n	8000f32 <rgb_value+0x1e>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	e00a      	b.n	8000f48 <rgb_value+0x34>
	else if(i == '1') a = 100;
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2b31      	cmp	r3, #49	; 0x31
 8000f36:	d102      	bne.n	8000f3e <rgb_value+0x2a>
 8000f38:	2364      	movs	r3, #100	; 0x64
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	e004      	b.n	8000f48 <rgb_value+0x34>
	else if(i == '2') a = 200;
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2b32      	cmp	r3, #50	; 0x32
 8000f42:	d101      	bne.n	8000f48 <rgb_value+0x34>
 8000f44:	23c8      	movs	r3, #200	; 0xc8
 8000f46:	617b      	str	r3, [r7, #20]

	if(j == '0') b = 0;
 8000f48:	79bb      	ldrb	r3, [r7, #6]
 8000f4a:	2b30      	cmp	r3, #48	; 0x30
 8000f4c:	d102      	bne.n	8000f54 <rgb_value+0x40>
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	e034      	b.n	8000fbe <rgb_value+0xaa>
	else if(j == '1') b = 10;
 8000f54:	79bb      	ldrb	r3, [r7, #6]
 8000f56:	2b31      	cmp	r3, #49	; 0x31
 8000f58:	d102      	bne.n	8000f60 <rgb_value+0x4c>
 8000f5a:	230a      	movs	r3, #10
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	e02e      	b.n	8000fbe <rgb_value+0xaa>
	else if(j == '2') b = 20;
 8000f60:	79bb      	ldrb	r3, [r7, #6]
 8000f62:	2b32      	cmp	r3, #50	; 0x32
 8000f64:	d102      	bne.n	8000f6c <rgb_value+0x58>
 8000f66:	2314      	movs	r3, #20
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	e028      	b.n	8000fbe <rgb_value+0xaa>
	else if(j == '3') b = 30;
 8000f6c:	79bb      	ldrb	r3, [r7, #6]
 8000f6e:	2b33      	cmp	r3, #51	; 0x33
 8000f70:	d102      	bne.n	8000f78 <rgb_value+0x64>
 8000f72:	231e      	movs	r3, #30
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	e022      	b.n	8000fbe <rgb_value+0xaa>
	else if(j == '4') b = 40;
 8000f78:	79bb      	ldrb	r3, [r7, #6]
 8000f7a:	2b34      	cmp	r3, #52	; 0x34
 8000f7c:	d102      	bne.n	8000f84 <rgb_value+0x70>
 8000f7e:	2328      	movs	r3, #40	; 0x28
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	e01c      	b.n	8000fbe <rgb_value+0xaa>
	else if(j == '5') b = 50;
 8000f84:	79bb      	ldrb	r3, [r7, #6]
 8000f86:	2b35      	cmp	r3, #53	; 0x35
 8000f88:	d102      	bne.n	8000f90 <rgb_value+0x7c>
 8000f8a:	2332      	movs	r3, #50	; 0x32
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	e016      	b.n	8000fbe <rgb_value+0xaa>
	else if(j == '6') b = 60;
 8000f90:	79bb      	ldrb	r3, [r7, #6]
 8000f92:	2b36      	cmp	r3, #54	; 0x36
 8000f94:	d102      	bne.n	8000f9c <rgb_value+0x88>
 8000f96:	233c      	movs	r3, #60	; 0x3c
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	e010      	b.n	8000fbe <rgb_value+0xaa>
	else if(j == '7') b = 70;
 8000f9c:	79bb      	ldrb	r3, [r7, #6]
 8000f9e:	2b37      	cmp	r3, #55	; 0x37
 8000fa0:	d102      	bne.n	8000fa8 <rgb_value+0x94>
 8000fa2:	2346      	movs	r3, #70	; 0x46
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	e00a      	b.n	8000fbe <rgb_value+0xaa>
	else if(j == '8') b = 80;
 8000fa8:	79bb      	ldrb	r3, [r7, #6]
 8000faa:	2b38      	cmp	r3, #56	; 0x38
 8000fac:	d102      	bne.n	8000fb4 <rgb_value+0xa0>
 8000fae:	2350      	movs	r3, #80	; 0x50
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	e004      	b.n	8000fbe <rgb_value+0xaa>
	else if(j == '9') b = 90;
 8000fb4:	79bb      	ldrb	r3, [r7, #6]
 8000fb6:	2b39      	cmp	r3, #57	; 0x39
 8000fb8:	d101      	bne.n	8000fbe <rgb_value+0xaa>
 8000fba:	235a      	movs	r3, #90	; 0x5a
 8000fbc:	613b      	str	r3, [r7, #16]

	if(k == '0') c = 0;
 8000fbe:	797b      	ldrb	r3, [r7, #5]
 8000fc0:	2b30      	cmp	r3, #48	; 0x30
 8000fc2:	d102      	bne.n	8000fca <rgb_value+0xb6>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	e034      	b.n	8001034 <rgb_value+0x120>
	else if(k == '1') c = 1;
 8000fca:	797b      	ldrb	r3, [r7, #5]
 8000fcc:	2b31      	cmp	r3, #49	; 0x31
 8000fce:	d102      	bne.n	8000fd6 <rgb_value+0xc2>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	e02e      	b.n	8001034 <rgb_value+0x120>
	else if(k == '2') c = 2;
 8000fd6:	797b      	ldrb	r3, [r7, #5]
 8000fd8:	2b32      	cmp	r3, #50	; 0x32
 8000fda:	d102      	bne.n	8000fe2 <rgb_value+0xce>
 8000fdc:	2302      	movs	r3, #2
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	e028      	b.n	8001034 <rgb_value+0x120>
	else if(k == '3') c = 3;
 8000fe2:	797b      	ldrb	r3, [r7, #5]
 8000fe4:	2b33      	cmp	r3, #51	; 0x33
 8000fe6:	d102      	bne.n	8000fee <rgb_value+0xda>
 8000fe8:	2303      	movs	r3, #3
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	e022      	b.n	8001034 <rgb_value+0x120>
	else if(k == '4') c = 4;
 8000fee:	797b      	ldrb	r3, [r7, #5]
 8000ff0:	2b34      	cmp	r3, #52	; 0x34
 8000ff2:	d102      	bne.n	8000ffa <rgb_value+0xe6>
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	e01c      	b.n	8001034 <rgb_value+0x120>
	else if(k == '5') c = 5;
 8000ffa:	797b      	ldrb	r3, [r7, #5]
 8000ffc:	2b35      	cmp	r3, #53	; 0x35
 8000ffe:	d102      	bne.n	8001006 <rgb_value+0xf2>
 8001000:	2305      	movs	r3, #5
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	e016      	b.n	8001034 <rgb_value+0x120>
	else if(k == '6') c = 6;
 8001006:	797b      	ldrb	r3, [r7, #5]
 8001008:	2b36      	cmp	r3, #54	; 0x36
 800100a:	d102      	bne.n	8001012 <rgb_value+0xfe>
 800100c:	2306      	movs	r3, #6
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	e010      	b.n	8001034 <rgb_value+0x120>
	else if(k == '7') c = 7;
 8001012:	797b      	ldrb	r3, [r7, #5]
 8001014:	2b37      	cmp	r3, #55	; 0x37
 8001016:	d102      	bne.n	800101e <rgb_value+0x10a>
 8001018:	2307      	movs	r3, #7
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	e00a      	b.n	8001034 <rgb_value+0x120>
	else if(k == '8') c = 8;
 800101e:	797b      	ldrb	r3, [r7, #5]
 8001020:	2b38      	cmp	r3, #56	; 0x38
 8001022:	d102      	bne.n	800102a <rgb_value+0x116>
 8001024:	2308      	movs	r3, #8
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	e004      	b.n	8001034 <rgb_value+0x120>
	else if(k == '9') c = 9;
 800102a:	797b      	ldrb	r3, [r7, #5]
 800102c:	2b39      	cmp	r3, #57	; 0x39
 800102e:	d101      	bne.n	8001034 <rgb_value+0x120>
 8001030:	2309      	movs	r3, #9
 8001032:	60fb      	str	r3, [r7, #12]

	return a+b+c;
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	441a      	add	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
}
 800103e:	4618      	mov	r0, r3
 8001040:	371c      	adds	r7, #28
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <ringInit>:

void storeChar(unsigned char c, Ring_Buffer *buffer);


void ringInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
	_rx_buffer1 = &rx_buffer1;
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <ringInit+0x68>)
 8001052:	4a19      	ldr	r2, [pc, #100]	; (80010b8 <ringInit+0x6c>)
 8001054:	601a      	str	r2, [r3, #0]
    _tx_buffer1 = &tx_buffer1;
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <ringInit+0x70>)
 8001058:	4a19      	ldr	r2, [pc, #100]	; (80010c0 <ringInit+0x74>)
 800105a:	601a      	str	r2, [r3, #0]
    _rx_buffer2 = &rx_buffer2;
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <ringInit+0x78>)
 800105e:	4a1a      	ldr	r2, [pc, #104]	; (80010c8 <ringInit+0x7c>)
 8001060:	601a      	str	r2, [r3, #0]
    _tx_buffer2 = &tx_buffer2;
 8001062:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <ringInit+0x80>)
 8001064:	4a1a      	ldr	r2, [pc, #104]	; (80010d0 <ringInit+0x84>)
 8001066:	601a      	str	r2, [r3, #0]

    /* Habilita la INTERRUPCIÓN por ERROR del UART (frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_ERR);
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <ringInit+0x88>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	695a      	ldr	r2, [r3, #20]
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <ringInit+0x88>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f042 0201 	orr.w	r2, r2, #1
 8001076:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_ERR);
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <ringInit+0x8c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	695a      	ldr	r2, [r3, #20]
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <ringInit+0x8c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f042 0201 	orr.w	r2, r2, #1
 8001086:	615a      	str	r2, [r3, #20]

    /* Habilita la INTERRUPCIÓN por REGISTRO DE DATA VACÍO */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_RXNE);
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <ringInit+0x88>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	68da      	ldr	r2, [r3, #12]
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <ringInit+0x88>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 0220 	orr.w	r2, r2, #32
 8001096:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_RXNE);
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <ringInit+0x8c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <ringInit+0x8c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f042 0220 	orr.w	r2, r2, #32
 80010a6:	60da      	str	r2, [r3, #12]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	200009e8 	.word	0x200009e8
 80010b8:	2000008c 	.word	0x2000008c
 80010bc:	200009ec 	.word	0x200009ec
 80010c0:	20000294 	.word	0x20000294
 80010c4:	200009f0 	.word	0x200009f0
 80010c8:	2000049c 	.word	0x2000049c
 80010cc:	200009e4 	.word	0x200009e4
 80010d0:	200006a4 	.word	0x200006a4
 80010d4:	20000d94 	.word	0x20000d94
 80010d8:	20000d08 	.word	0x20000d08

080010dc <storeChar>:


void storeChar(unsigned char c, Ring_Buffer *buffer)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	71fb      	strb	r3, [r7, #7]
    int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010ee:	3301      	adds	r3, #1
 80010f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010f4:	60fb      	str	r3, [r7, #12]

    // Si queremos almacenar lo recibido justo antes de TAIL, significando que HEAD avanzará hasta la posición de TAIL,
    // se provocará un desbordamiento (overflow) del BUFFER, y, por lo tanto, no se escribirá el caracter o ni avanzaremos HEAD.
    if(i != buffer->tail)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d009      	beq.n	8001116 <storeChar+0x3a>
    {
    	buffer->buffer[buffer->head] = c;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	79f9      	ldrb	r1, [r7, #7]
 800110c:	54d1      	strb	r1, [r2, r3]
        buffer->head = i;
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }
}
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <UART_peek>:
	}
}


int UART_peek(UART_HandleTypeDef *uart)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a1c      	ldr	r2, [pc, #112]	; (80011a0 <UART_peek+0x7c>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d114      	bne.n	800115e <UART_peek+0x3a>
	{
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <UART_peek+0x80>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800113c:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <UART_peek+0x80>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001144:	429a      	cmp	r2, r3
 8001146:	d102      	bne.n	800114e <UART_peek+0x2a>
 8001148:	f04f 33ff 	mov.w	r3, #4294967295
 800114c:	e022      	b.n	8001194 <UART_peek+0x70>

		else return _rx_buffer1->buffer[_rx_buffer1->tail];
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <UART_peek+0x80>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <UART_peek+0x80>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800115a:	5cd3      	ldrb	r3, [r2, r3]
 800115c:	e01a      	b.n	8001194 <UART_peek+0x70>
	}

	else if (uart == PC_UART)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a11      	ldr	r2, [pc, #68]	; (80011a8 <UART_peek+0x84>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d114      	bne.n	8001190 <UART_peek+0x6c>
	{
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <UART_peek+0x88>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <UART_peek+0x88>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001176:	429a      	cmp	r2, r3
 8001178:	d102      	bne.n	8001180 <UART_peek+0x5c>
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	e009      	b.n	8001194 <UART_peek+0x70>

		else return _rx_buffer2->buffer[_rx_buffer2->tail];
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <UART_peek+0x88>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <UART_peek+0x88>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800118c:	5cd3      	ldrb	r3, [r2, r3]
 800118e:	e001      	b.n	8001194 <UART_peek+0x70>
	}

	return -1;
 8001190:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	20000d94 	.word	0x20000d94
 80011a4:	200009e8 	.word	0x200009e8
 80011a8:	20000d08 	.word	0x20000d08
 80011ac:	200009f0 	.word	0x200009f0

080011b0 <UART_read>:


int UART_read(UART_HandleTypeDef *uart)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a29      	ldr	r2, [pc, #164]	; (8001260 <UART_read+0xb0>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d121      	bne.n	8001204 <UART_read+0x54>
	{
		// Si HEAD no está delante de TAIL, no tenemos ningún CARACTER
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 80011c0:	4b28      	ldr	r3, [pc, #160]	; (8001264 <UART_read+0xb4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80011c8:	4b26      	ldr	r3, [pc, #152]	; (8001264 <UART_read+0xb4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d102      	bne.n	80011da <UART_read+0x2a>
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
 80011d8:	e03c      	b.n	8001254 <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 80011da:	4b22      	ldr	r3, [pc, #136]	; (8001264 <UART_read+0xb4>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <UART_read+0xb4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011e6:	5cd3      	ldrb	r3, [r2, r3]
 80011e8:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 80011ea:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <UART_read+0xb4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <UART_read+0xb4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8001200:	7bbb      	ldrb	r3, [r7, #14]
 8001202:	e027      	b.n	8001254 <UART_read+0xa4>
		}
	}

	else if (uart == PC_UART)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a18      	ldr	r2, [pc, #96]	; (8001268 <UART_read+0xb8>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d121      	bne.n	8001250 <UART_read+0xa0>
	{
		// Si HEAD no está delante de TAIL, no tenemos ningún CARACTER
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <UART_read+0xbc>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <UART_read+0xbc>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800121c:	429a      	cmp	r2, r3
 800121e:	d102      	bne.n	8001226 <UART_read+0x76>
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	e016      	b.n	8001254 <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <UART_read+0xbc>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <UART_read+0xbc>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001232:	5cd3      	ldrb	r3, [r2, r3]
 8001234:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <UART_read+0xbc>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <UART_read+0xbc>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001248:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	e001      	b.n	8001254 <UART_read+0xa4>
		}
	}

	else return -1;
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	20000d94 	.word	0x20000d94
 8001264:	200009e8 	.word	0x200009e8
 8001268:	20000d08 	.word	0x20000d08
 800126c:	200009f0 	.word	0x200009f0

08001270 <UART_write>:


void UART_write(int c, UART_HandleTypeDef *uart)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
	if (c>=0)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db54      	blt.n	800132a <UART_write+0xba>
	{
		if (uart == WiFi_UART)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	4a2d      	ldr	r2, [pc, #180]	; (8001338 <UART_write+0xc8>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d126      	bne.n	80012d6 <UART_write+0x66>
		{
			int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8001288:	4b2c      	ldr	r3, [pc, #176]	; (800133c <UART_write+0xcc>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001290:	3301      	adds	r3, #1
 8001292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001296:	60bb      	str	r3, [r7, #8]

			// Si el BUFFER de salida está lleno, sólo se puede esperar a la INTERRUPCIÓN que lo vacia */
		    while (i == _tx_buffer1->tail);
 8001298:	bf00      	nop
 800129a:	4b28      	ldr	r3, [pc, #160]	; (800133c <UART_write+0xcc>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d0f8      	beq.n	800129a <UART_write+0x2a>

		   _tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 80012a8:	4b24      	ldr	r3, [pc, #144]	; (800133c <UART_write+0xcc>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b23      	ldr	r3, [pc, #140]	; (800133c <UART_write+0xcc>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	b2c9      	uxtb	r1, r1
 80012b8:	54d1      	strb	r1, [r2, r3]
		   _tx_buffer1->head = i;
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <UART_write+0xcc>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		   // Habilitar la INTERRUPCIÓN de TRANSMISIÓN del UART
		   __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_TXE);
 80012c4:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <UART_write+0xc8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <UART_write+0xc8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012d2:	60da      	str	r2, [r3, #12]

			// Habilitar la INTERRUPCIÓN de TRANSMISIÓN del UART
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
		}
	}
}
 80012d4:	e029      	b.n	800132a <UART_write+0xba>
		else if (uart == PC_UART)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	4a19      	ldr	r2, [pc, #100]	; (8001340 <UART_write+0xd0>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d125      	bne.n	800132a <UART_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 80012de:	4b19      	ldr	r3, [pc, #100]	; (8001344 <UART_write+0xd4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012e6:	3301      	adds	r3, #1
 80012e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012ec:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 80012ee:	bf00      	nop
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <UART_write+0xd4>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d0f8      	beq.n	80012f0 <UART_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <UART_write+0xd4>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <UART_write+0xd4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	b2c9      	uxtb	r1, r1
 800130e:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <UART_write+0xd4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <UART_write+0xd0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68da      	ldr	r2, [r3, #12]
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <UART_write+0xd0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001328:	60da      	str	r2, [r3, #12]
}
 800132a:	bf00      	nop
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000d94 	.word	0x20000d94
 800133c:	200009ec 	.word	0x200009ec
 8001340:	20000d08 	.word	0x20000d08
 8001344:	200009e4 	.word	0x200009e4

08001348 <UART_available>:


int UART_available(UART_HandleTypeDef *uart)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	if (uart == WiFi_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a19      	ldr	r2, [pc, #100]	; (80013b8 <UART_available+0x70>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d111      	bne.n	800137c <UART_available+0x34>
 8001358:	4b18      	ldr	r3, [pc, #96]	; (80013bc <UART_available+0x74>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001360:	b29a      	uxth	r2, r3
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <UART_available+0x74>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800136a:	b29b      	uxth	r3, r3
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	b29b      	uxth	r3, r3
 8001370:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001374:	b29b      	uxth	r3, r3
 8001376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800137a:	e017      	b.n	80013ac <UART_available+0x64>

	else if (uart == PC_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <UART_available+0x78>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d111      	bne.n	80013a8 <UART_available+0x60>
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <UART_available+0x7c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800138c:	b29a      	uxth	r2, r3
 800138e:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <UART_available+0x7c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001396:	b29b      	uxth	r3, r3
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	b29b      	uxth	r3, r3
 800139c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013a6:	e001      	b.n	80013ac <UART_available+0x64>

	return -1;
 80013a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	20000d94 	.word	0x20000d94
 80013bc:	200009e8 	.word	0x200009e8
 80013c0:	20000d08 	.word	0x20000d08
 80013c4:	200009f0 	.word	0x200009f0

080013c8 <UART_send>:
	return 1;
}


void UART_send (const char *s, UART_HandleTypeDef *uart)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
	while(*s!='\0') UART_write(*s++, uart);
 80013d2:	e007      	b.n	80013e4 <UART_send+0x1c>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	6839      	ldr	r1, [r7, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff46 	bl	8001270 <UART_write>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f3      	bne.n	80013d4 <UART_send+0xc>
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <UART_copyUpto>:
  while(*s) UART_write(*s++, uart);
}


int UART_copyUpto(char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f7fe fee1 	bl	80001d0 <strlen>
 800140e:	4603      	mov	r3, r0
 8001410:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]

again:
	while (!UART_available(uart));
 8001416:	bf00      	nop
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff95 	bl	8001348 <UART_available>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f9      	beq.n	8001418 <UART_copyUpto+0x20>

	while (UART_peek(uart) != string[so_far])
 8001424:	e01f      	b.n	8001466 <UART_copyUpto+0x6e>
	{
		buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8001426:	4b32      	ldr	r3, [pc, #200]	; (80014f0 <UART_copyUpto+0xf8>)
 8001428:	6819      	ldr	r1, [r3, #0]
 800142a:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <UART_copyUpto+0xf8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	68b8      	ldr	r0, [r7, #8]
 8001436:	4403      	add	r3, r0
 8001438:	5c8a      	ldrb	r2, [r1, r2]
 800143a:	701a      	strb	r2, [r3, #0]
		_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 800143c:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <UART_copyUpto+0xf8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <UART_copyUpto+0xf8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800144e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		indx++;
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	3301      	adds	r3, #1
 8001456:	61bb      	str	r3, [r7, #24]
		while (!UART_available(uart));
 8001458:	bf00      	nop
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ff74 	bl	8001348 <UART_available>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f9      	beq.n	800145a <UART_copyUpto+0x62>
	while (UART_peek(uart) != string[so_far])
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fe5c 	bl	8001124 <UART_peek>
 800146c:	4601      	mov	r1, r0
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	4413      	add	r3, r2
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	4299      	cmp	r1, r3
 8001478:	d1d5      	bne.n	8001426 <UART_copyUpto+0x2e>

	}

	while (UART_peek(uart) == string [so_far])
 800147a:	e01b      	b.n	80014b4 <UART_copyUpto+0xbc>
	{
		so_far++;
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	3301      	adds	r3, #1
 8001480:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = UART_read(uart);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fe94 	bl	80011b0 <UART_read>
 8001488:	4601      	mov	r1, r0
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	1c5a      	adds	r2, r3, #1
 800148e:	61ba      	str	r2, [r7, #24]
 8001490:	461a      	mov	r2, r3
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	4413      	add	r3, r2
 8001496:	b2ca      	uxtb	r2, r1
 8001498:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 800149a:	69fa      	ldr	r2, [r7, #28]
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d101      	bne.n	80014a6 <UART_copyUpto+0xae>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e01f      	b.n	80014e6 <UART_copyUpto+0xee>
		while (!UART_available(uart));
 80014a6:	bf00      	nop
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff4d 	bl	8001348 <UART_available>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f9      	beq.n	80014a8 <UART_copyUpto+0xb0>
	while (UART_peek(uart) == string [so_far])
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff fe35 	bl	8001124 <UART_peek>
 80014ba:	4601      	mov	r1, r0
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	4413      	add	r3, r2
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4299      	cmp	r1, r3
 80014c6:	d0d9      	beq.n	800147c <UART_copyUpto+0x84>
	}

	if (so_far != len)
 80014c8:	69fa      	ldr	r2, [r7, #28]
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d002      	beq.n	80014d6 <UART_copyUpto+0xde>
	{
		so_far = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
		goto again;
 80014d4:	e79f      	b.n	8001416 <UART_copyUpto+0x1e>
	}

	if (so_far == len) return 1;
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d101      	bne.n	80014e2 <UART_copyUpto+0xea>
 80014de:	2301      	movs	r3, #1
 80014e0:	e001      	b.n	80014e6 <UART_copyUpto+0xee>

	else return -1;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3720      	adds	r7, #32
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200009e8 	.word	0x200009e8

080014f4 <UART_waitFor>:


int UART_waitFor(char *string,UART_HandleTypeDef *uart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
	int so_far =0;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7fe fe64 	bl	80001d0 <strlen>
 8001508:	4603      	mov	r3, r0
 800150a:	60bb      	str	r3, [r7, #8]

again_device:
	while (!UART_available(uart));
 800150c:	bf00      	nop
 800150e:	6838      	ldr	r0, [r7, #0]
 8001510:	f7ff ff1a 	bl	8001348 <UART_available>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f9      	beq.n	800150e <UART_waitFor+0x1a>

	if (UART_peek(uart) != string[so_far])
 800151a:	6838      	ldr	r0, [r7, #0]
 800151c:	f7ff fe02 	bl	8001124 <UART_peek>
 8001520:	4601      	mov	r1, r0
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	4413      	add	r3, r2
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	4299      	cmp	r1, r3
 800152c:	d01e      	beq.n	800156c <UART_waitFor+0x78>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 800152e:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <UART_waitFor+0xb4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <UART_waitFor+0xb4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001540:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 8001544:	e7e2      	b.n	800150c <UART_waitFor+0x18>

	}

	while (UART_peek(uart) == string [so_far])
	{
		so_far++;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	3301      	adds	r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
		UART_read(uart);
 800154c:	6838      	ldr	r0, [r7, #0]
 800154e:	f7ff fe2f 	bl	80011b0 <UART_read>
		if (so_far == len) return 1;
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	429a      	cmp	r2, r3
 8001558:	d101      	bne.n	800155e <UART_waitFor+0x6a>
 800155a:	2301      	movs	r3, #1
 800155c:	e01f      	b.n	800159e <UART_waitFor+0xaa>
		while (!UART_available(uart));
 800155e:	bf00      	nop
 8001560:	6838      	ldr	r0, [r7, #0]
 8001562:	f7ff fef1 	bl	8001348 <UART_available>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f9      	beq.n	8001560 <UART_waitFor+0x6c>
	while (UART_peek(uart) == string [so_far])
 800156c:	6838      	ldr	r0, [r7, #0]
 800156e:	f7ff fdd9 	bl	8001124 <UART_peek>
 8001572:	4601      	mov	r1, r0
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4299      	cmp	r1, r3
 800157e:	d0e2      	beq.n	8001546 <UART_waitFor+0x52>
	}

	if (so_far != len)
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	429a      	cmp	r2, r3
 8001586:	d002      	beq.n	800158e <UART_waitFor+0x9a>
	{
		so_far = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
		goto again_device;
 800158c:	e7be      	b.n	800150c <UART_waitFor+0x18>
	}

	if (so_far == len) return 1;
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	429a      	cmp	r2, r3
 8001594:	d101      	bne.n	800159a <UART_waitFor+0xa6>
 8001596:	2301      	movs	r3, #1
 8001598:	e001      	b.n	800159e <UART_waitFor+0xaa>

	else return -1;
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200009e8 	.word	0x200009e8

080015ac <UART_isr>:


void UART_isr(UART_HandleTypeDef *huart)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	613b      	str	r3, [r7, #16]

	/* Si DR (DATA REGISTER) no está vacío y RX INT está habilitado */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f003 0320 	and.w	r3, r3, #32
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d023      	beq.n	8001616 <UART_isr+0x6a>
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	f003 0320 	and.w	r3, r3, #32
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d01e      	beq.n	8001616 <UART_isr+0x6a>
    	    	                USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	************************************************************************************************************/

		huart->Instance->SR;                   // Leer SR (STATUS REGISTER)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR; // Leer DR (DATA REGISTER)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	73fb      	strb	r3, [r7, #15]

        if (huart == WiFi_UART)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a3f      	ldr	r2, [pc, #252]	; (80016e8 <UART_isr+0x13c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d107      	bne.n	80015fe <UART_isr+0x52>
        {
        	storeChar(c, _rx_buffer1); // Almacena DATA en el BUFFER
 80015ee:	4b3f      	ldr	r3, [pc, #252]	; (80016ec <UART_isr+0x140>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fd70 	bl	80010dc <storeChar>
        else if (huart == PC_UART)
        {
        	storeChar(c, _rx_buffer2); // Almacena DATA en el BUFFER
        }

        return;
 80015fc:	e06d      	b.n	80016da <UART_isr+0x12e>
        else if (huart == PC_UART)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a3b      	ldr	r2, [pc, #236]	; (80016f0 <UART_isr+0x144>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d169      	bne.n	80016da <UART_isr+0x12e>
        	storeChar(c, _rx_buffer2); // Almacena DATA en el BUFFER
 8001606:	4b3b      	ldr	r3, [pc, #236]	; (80016f4 <UART_isr+0x148>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	4611      	mov	r1, r2
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fd64 	bl	80010dc <storeChar>
        return;
 8001614:	e061      	b.n	80016da <UART_isr+0x12e>
    }

    /* Si la INTERRUPCIÓN se produce por el TRANSMIT DATA REGISTER EMPTY */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161c:	2b00      	cmp	r3, #0
 800161e:	d05f      	beq.n	80016e0 <UART_isr+0x134>
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001626:	2b00      	cmp	r3, #0
 8001628:	d05a      	beq.n	80016e0 <UART_isr+0x134>
    {
    	if (huart == WiFi_UART)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a2e      	ldr	r2, [pc, #184]	; (80016e8 <UART_isr+0x13c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d127      	bne.n	8001682 <UART_isr+0xd6>
    	{
    		if(tx_buffer1.head == tx_buffer1.tail)
 8001632:	4b31      	ldr	r3, [pc, #196]	; (80016f8 <UART_isr+0x14c>)
 8001634:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001638:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <UART_isr+0x14c>)
 800163a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800163e:	429a      	cmp	r2, r3
 8001640:	d108      	bne.n	8001654 <UART_isr+0xa8>
    	    {
    			// BUFFER vacío, inhabilitamos la INTERRUPCIÓN
    	        __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001650:	60da      	str	r2, [r3, #12]
        	     huart->Instance->DR = c;

        	}
        }

    	return;
 8001652:	e044      	b.n	80016de <UART_isr+0x132>
    			unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8001654:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <UART_isr+0x14c>)
 8001656:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800165a:	4a27      	ldr	r2, [pc, #156]	; (80016f8 <UART_isr+0x14c>)
 800165c:	5cd3      	ldrb	r3, [r2, r3]
 800165e:	737b      	strb	r3, [r7, #13]
    			tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8001660:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <UART_isr+0x14c>)
 8001662:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001666:	3301      	adds	r3, #1
 8001668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800166c:	4a22      	ldr	r2, [pc, #136]	; (80016f8 <UART_isr+0x14c>)
 800166e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    			huart->Instance->SR;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
    			huart->Instance->DR = c;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	7b7a      	ldrb	r2, [r7, #13]
 800167e:	605a      	str	r2, [r3, #4]
    	return;
 8001680:	e02d      	b.n	80016de <UART_isr+0x132>
    	else if (huart == PC_UART)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a1a      	ldr	r2, [pc, #104]	; (80016f0 <UART_isr+0x144>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d129      	bne.n	80016de <UART_isr+0x132>
    		if(tx_buffer2.head == tx_buffer2.tail)
 800168a:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <UART_isr+0x150>)
 800168c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001690:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <UART_isr+0x150>)
 8001692:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001696:	429a      	cmp	r2, r3
 8001698:	d108      	bne.n	80016ac <UART_isr+0x100>
        	    __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016a8:	60da      	str	r2, [r3, #12]
    	return;
 80016aa:	e018      	b.n	80016de <UART_isr+0x132>
        	    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <UART_isr+0x150>)
 80016ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80016b2:	4a12      	ldr	r2, [pc, #72]	; (80016fc <UART_isr+0x150>)
 80016b4:	5cd3      	ldrb	r3, [r2, r3]
 80016b6:	73bb      	strb	r3, [r7, #14]
        	    tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <UART_isr+0x150>)
 80016ba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80016be:	3301      	adds	r3, #1
 80016c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016c4:	4a0d      	ldr	r2, [pc, #52]	; (80016fc <UART_isr+0x150>)
 80016c6:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	     huart->Instance->SR;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
        	     huart->Instance->DR = c;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	7bba      	ldrb	r2, [r7, #14]
 80016d6:	605a      	str	r2, [r3, #4]
    	return;
 80016d8:	e001      	b.n	80016de <UART_isr+0x132>
        return;
 80016da:	bf00      	nop
 80016dc:	e000      	b.n	80016e0 <UART_isr+0x134>
    	return;
 80016de:	bf00      	nop
    }
}
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000d94 	.word	0x20000d94
 80016ec:	200009e8 	.word	0x200009e8
 80016f0:	20000d08 	.word	0x20000d08
 80016f4:	200009f0 	.word	0x200009f0
 80016f8:	20000294 	.word	0x20000294
 80016fc:	200006a4 	.word	0x200006a4

08001700 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin==B_Timbre_Pin)
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d102      	bne.n	8001716 <HAL_GPIO_EXTI_Callback+0x16>
	{
		timbre = 1;
 8001710:	4b10      	ldr	r3, [pc, #64]	; (8001754 <HAL_GPIO_EXTI_Callback+0x54>)
 8001712:	2201      	movs	r2, #1
 8001714:	601a      	str	r2, [r3, #0]
	}
    if (GPIO_Pin==B_Stop_Pin)
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	2b04      	cmp	r3, #4
 800171a:	d102      	bne.n	8001722 <HAL_GPIO_EXTI_Callback+0x22>
    {
    	stop = 1;
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_GPIO_EXTI_Callback+0x58>)
 800171e:	2201      	movs	r2, #1
 8001720:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin==S_Int_Pin)
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	2b08      	cmp	r3, #8
 8001726:	d102      	bne.n	800172e <HAL_GPIO_EXTI_Callback+0x2e>
    {
        interior = 1;
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <HAL_GPIO_EXTI_Callback+0x5c>)
 800172a:	2201      	movs	r2, #1
 800172c:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin==S_Ext_Pin)
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d102      	bne.n	800173a <HAL_GPIO_EXTI_Callback+0x3a>
    {
        exterior = 1;
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_GPIO_EXTI_Callback+0x60>)
 8001736:	2201      	movs	r2, #1
 8001738:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin==Fin_Servo_Pin)
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	2b10      	cmp	r3, #16
 800173e:	d102      	bne.n	8001746 <HAL_GPIO_EXTI_Callback+0x46>
    {
        fin = 1;
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_GPIO_EXTI_Callback+0x64>)
 8001742:	2201      	movs	r2, #1
 8001744:	601a      	str	r2, [r3, #0]
    }
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	200008ac 	.word	0x200008ac
 8001758:	200008b0 	.word	0x200008b0
 800175c:	200008b4 	.word	0x200008b4
 8001760:	200008b8 	.word	0x200008b8
 8001764:	200008bc 	.word	0x200008bc

08001768 <debouncer>:

int debouncer(volatile int* button_int, GPIO_TypeDef* GPIO_port, uint16_t GPIO_number) // Control de los rebotes
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	4613      	mov	r3, r2
 8001774:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count=0;
	static int counter=0;

	if (*button_int==1)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d13b      	bne.n	80017f6 <debouncer+0x8e>
	{
		if (button_count==0)
 800177e:	4b20      	ldr	r3, [pc, #128]	; (8001800 <debouncer+0x98>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10b      	bne.n	800179e <debouncer+0x36>
		{
			counter=HAL_GetTick();
 8001786:	f001 fdcd 	bl	8003324 <HAL_GetTick>
 800178a:	4603      	mov	r3, r0
 800178c:	461a      	mov	r2, r3
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <debouncer+0x9c>)
 8001790:	601a      	str	r2, [r3, #0]
			button_count++;
 8001792:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <debouncer+0x98>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	3301      	adds	r3, #1
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4b19      	ldr	r3, [pc, #100]	; (8001800 <debouncer+0x98>)
 800179c:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick()-counter>=20)
 800179e:	f001 fdc1 	bl	8003324 <HAL_GetTick>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4a17      	ldr	r2, [pc, #92]	; (8001804 <debouncer+0x9c>)
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	1a9b      	subs	r3, r3, r2
 80017aa:	2b13      	cmp	r3, #19
 80017ac:	d923      	bls.n	80017f6 <debouncer+0x8e>
		{
			counter=HAL_GetTick();
 80017ae:	f001 fdb9 	bl	8003324 <HAL_GetTick>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <debouncer+0x9c>)
 80017b8:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number)!=1)
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	4619      	mov	r1, r3
 80017be:	68b8      	ldr	r0, [r7, #8]
 80017c0:	f002 fcec 	bl	800419c <HAL_GPIO_ReadPin>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d003      	beq.n	80017d2 <debouncer+0x6a>
			{
				button_count=1;
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <debouncer+0x98>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	701a      	strb	r2, [r3, #0]
 80017d0:	e005      	b.n	80017de <debouncer+0x76>
			}
			else
			{
				button_count++;
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <debouncer+0x98>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	3301      	adds	r3, #1
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <debouncer+0x98>)
 80017dc:	701a      	strb	r2, [r3, #0]
			}
			if (button_count==4 ) // Periodo antirebotes
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <debouncer+0x98>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d107      	bne.n	80017f6 <debouncer+0x8e>
			{
				button_count=0;
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <debouncer+0x98>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
				*button_int=0;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
				return 1;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <debouncer+0x90>
			}
		}
	}
	return 0;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	200008ca 	.word	0x200008ca
 8001804:	200008cc 	.word	0x200008cc

08001808 <play_Timbre>:


void play_Timbre(void){
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0

	uint8_t tone;

	tone = 20;
 800180e:	2314      	movs	r3, #20
 8001810:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	005a      	lsls	r2, r3, #1
 8001816:	4b16      	ldr	r3, [pc, #88]	; (8001870 <play_Timbre+0x68>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	62da      	str	r2, [r3, #44]	; 0x2c
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	461a      	mov	r2, r3
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <play_Timbre+0x68>)
 8001824:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <play_Timbre+0x68>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	79fa      	ldrb	r2, [r7, #7]
 800182c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(300);
 800182e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001832:	f001 fd83 	bl	800333c <HAL_Delay>

	tone = 40;
 8001836:	2328      	movs	r3, #40	; 0x28
 8001838:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	005a      	lsls	r2, r3, #1
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <play_Timbre+0x68>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	62da      	str	r2, [r3, #44]	; 0x2c
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	461a      	mov	r2, r3
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <play_Timbre+0x68>)
 800184c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <play_Timbre+0x68>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	79fa      	ldrb	r2, [r7, #7]
 8001854:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 8001856:	f44f 7048 	mov.w	r0, #800	; 0x320
 800185a:	f001 fd6f 	bl	800333c <HAL_Delay>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 800185e:	4b04      	ldr	r3, [pc, #16]	; (8001870 <play_Timbre+0x68>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2200      	movs	r2, #0
 8001864:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000a3c 	.word	0x20000a3c

08001874 <play_Alarma>:


void play_Alarma(){
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0

	uint8_t tone;

	for(tone = 40; tone >= 10; tone = tone-10){
 800187a:	2328      	movs	r3, #40	; 0x28
 800187c:	71fb      	strb	r3, [r7, #7]
 800187e:	e014      	b.n	80018aa <play_Alarma+0x36>
		__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	005a      	lsls	r2, r3, #1
 8001884:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <play_Alarma+0x48>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	461a      	mov	r2, r3
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <play_Alarma+0x48>)
 8001892:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <play_Alarma+0x48>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	79fa      	ldrb	r2, [r7, #7]
 800189a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(300);
 800189c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80018a0:	f001 fd4c 	bl	800333c <HAL_Delay>
	for(tone = 40; tone >= 10; tone = tone-10){
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	3b0a      	subs	r3, #10
 80018a8:	71fb      	strb	r3, [r7, #7]
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	2b09      	cmp	r3, #9
 80018ae:	d8e7      	bhi.n	8001880 <play_Alarma+0xc>
	}
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000a3c 	.word	0x20000a3c

080018c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018c4:	f001 fcc8 	bl	8003258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018c8:	f000 f9fc 	bl	8001cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018cc:	f000 ff56 	bl	800277c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018d0:	f000 fed6 	bl	8002680 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80018d4:	f000 ff28 	bl	8002728 <MX_USART6_UART_Init>
  MX_TIM5_Init();
 80018d8:	f000 fd9a 	bl	8002410 <MX_TIM5_Init>
  MX_TIM1_Init();
 80018dc:	f000 fb52 	bl	8001f84 <MX_TIM1_Init>
  MX_TIM4_Init();
 80018e0:	f000 fd20 	bl	8002324 <MX_TIM4_Init>
  MX_TIM2_Init();
 80018e4:	f000 fc06 	bl	80020f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80018e8:	f000 fc90 	bl	800220c <MX_TIM3_Init>
  MX_TIM8_Init();
 80018ec:	f000 fe14 	bl	8002518 <MX_TIM8_Init>
  MX_TIM9_Init();
 80018f0:	f000 fe62 	bl	80025b8 <MX_TIM9_Init>
  MX_TIM6_Init();
 80018f4:	f000 fdda 	bl	80024ac <MX_TIM6_Init>
  MX_ADC1_Init();
 80018f8:	f000 fa4e 	bl	8001d98 <MX_ADC1_Init>
  MX_ADC2_Init();
 80018fc:	f000 fa9e 	bl	8001e3c <MX_ADC2_Init>
  MX_ADC3_Init();
 8001900:	f000 faee 	bl	8001ee0 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8001904:	f000 fee6 	bl	80026d4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // LED RGB Gaming
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001908:	2100      	movs	r1, #0
 800190a:	48ab      	ldr	r0, [pc, #684]	; (8001bb8 <main+0x2f8>)
 800190c:	f003 fa16 	bl	8004d3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001910:	2104      	movs	r1, #4
 8001912:	48a9      	ldr	r0, [pc, #676]	; (8001bb8 <main+0x2f8>)
 8001914:	f003 fa12 	bl	8004d3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001918:	2108      	movs	r1, #8
 800191a:	48a7      	ldr	r0, [pc, #668]	; (8001bb8 <main+0x2f8>)
 800191c:	f003 fa0e 	bl	8004d3c <HAL_TIM_PWM_Start>
  // Servo Parcela
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001920:	2100      	movs	r1, #0
 8001922:	48a6      	ldr	r0, [pc, #664]	; (8001bbc <main+0x2fc>)
 8001924:	f003 fa0a 	bl	8004d3c <HAL_TIM_PWM_Start>
  // Servo Garaje
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001928:	2104      	movs	r1, #4
 800192a:	48a4      	ldr	r0, [pc, #656]	; (8001bbc <main+0x2fc>)
 800192c:	f003 fa06 	bl	8004d3c <HAL_TIM_PWM_Start>
  // Servo Tendedero
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001930:	2108      	movs	r1, #8
 8001932:	48a2      	ldr	r0, [pc, #648]	; (8001bbc <main+0x2fc>)
 8001934:	f003 fa02 	bl	8004d3c <HAL_TIM_PWM_Start>
  // Servo Salón
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001938:	210c      	movs	r1, #12
 800193a:	48a1      	ldr	r0, [pc, #644]	; (8001bc0 <main+0x300>)
 800193c:	f003 f9fe 	bl	8004d3c <HAL_TIM_PWM_Start>
  // Servo Dormitorio
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001940:	2104      	movs	r1, #4
 8001942:	489f      	ldr	r0, [pc, #636]	; (8001bc0 <main+0x300>)
 8001944:	f003 f9fa 	bl	8004d3c <HAL_TIM_PWM_Start>
  // Servo Oficina
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001948:	2108      	movs	r1, #8
 800194a:	489d      	ldr	r0, [pc, #628]	; (8001bc0 <main+0x300>)
 800194c:	f003 f9f6 	bl	8004d3c <HAL_TIM_PWM_Start>
  // DC Salón
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8001950:	2100      	movs	r1, #0
 8001952:	489c      	ldr	r0, [pc, #624]	; (8001bc4 <main+0x304>)
 8001954:	f003 f9f2 	bl	8004d3c <HAL_TIM_PWM_Start>
  // Zumbador
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001958:	2100      	movs	r1, #0
 800195a:	489b      	ldr	r0, [pc, #620]	; (8001bc8 <main+0x308>)
 800195c:	f003 f9ee 	bl	8004d3c <HAL_TIM_PWM_Start>

  /*----------- Útil para Sensor DHT11/22 -----------*/
  HAL_TIM_Base_Start(&htim6);
 8001960:	489a      	ldr	r0, [pc, #616]	; (8001bcc <main+0x30c>)
 8001962:	f003 f929 	bl	8004bb8 <HAL_TIM_Base_Start>

  /*----------- Inicialización LDR & HW390 & Lluvia -----------*/
  HAL_ADC_Start(&hadc1); // LDR
 8001966:	489a      	ldr	r0, [pc, #616]	; (8001bd0 <main+0x310>)
 8001968:	f001 fd50 	bl	800340c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2); // HW-390
 800196c:	4899      	ldr	r0, [pc, #612]	; (8001bd4 <main+0x314>)
 800196e:	f001 fd4d 	bl	800340c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3); // Lluvia
 8001972:	4899      	ldr	r0, [pc, #612]	; (8001bd8 <main+0x318>)
 8001974:	f001 fd4a 	bl	800340c <HAL_ADC_Start>

  //__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
  ESP_Init("iPhone Carmela","pistacho");
 8001978:	4998      	ldr	r1, [pc, #608]	; (8001bdc <main+0x31c>)
 800197a:	4899      	ldr	r0, [pc, #612]	; (8001be0 <main+0x320>)
 800197c:	f7fe fe0c 	bl	8000598 <ESP_Init>
  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	ESP_messageHandler();
 8001980:	f7fe ff36 	bl	80007f0 <ESP_messageHandler>

		// TIMBRE
		if (debouncer(&timbre, B_Timbre_GPIO_Port, B_Timbre_Pin)){
 8001984:	2201      	movs	r2, #1
 8001986:	4997      	ldr	r1, [pc, #604]	; (8001be4 <main+0x324>)
 8001988:	4897      	ldr	r0, [pc, #604]	; (8001be8 <main+0x328>)
 800198a:	f7ff feed 	bl	8001768 <debouncer>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <main+0xd8>
			play_Timbre();
 8001994:	f7ff ff38 	bl	8001808 <play_Timbre>

		// STOP ALARMA
		// Conexión Wi-Fi

		// ALARMA
		if (debouncer(&interior, S_Int_GPIO_Port, S_Int_Pin)){
 8001998:	2208      	movs	r2, #8
 800199a:	4992      	ldr	r1, [pc, #584]	; (8001be4 <main+0x324>)
 800199c:	4893      	ldr	r0, [pc, #588]	; (8001bec <main+0x32c>)
 800199e:	f7ff fee3 	bl	8001768 <debouncer>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <main+0xf4>
			if(vSeg[0] == '1') play_Alarma();
 80019a8:	4b91      	ldr	r3, [pc, #580]	; (8001bf0 <main+0x330>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b31      	cmp	r3, #49	; 0x31
 80019ae:	d101      	bne.n	80019b4 <main+0xf4>
 80019b0:	f7ff ff60 	bl	8001874 <play_Alarma>
		}
		if (debouncer(&exterior, S_Ext_GPIO_Port, S_Ext_Pin)){
 80019b4:	2202      	movs	r2, #2
 80019b6:	498b      	ldr	r1, [pc, #556]	; (8001be4 <main+0x324>)
 80019b8:	488e      	ldr	r0, [pc, #568]	; (8001bf4 <main+0x334>)
 80019ba:	f7ff fed5 	bl	8001768 <debouncer>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <main+0x110>
			if(vSeg[1] == '1') play_Alarma();
 80019c4:	4b8a      	ldr	r3, [pc, #552]	; (8001bf0 <main+0x330>)
 80019c6:	785b      	ldrb	r3, [r3, #1]
 80019c8:	2b31      	cmp	r3, #49	; 0x31
 80019ca:	d101      	bne.n	80019d0 <main+0x110>
 80019cc:	f7ff ff52 	bl	8001874 <play_Alarma>
		}

		// PUERTA PARCELA (90)
		if(vVent[1]=='1' || vExt[4]=='1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89);
 80019d0:	4b89      	ldr	r3, [pc, #548]	; (8001bf8 <main+0x338>)
 80019d2:	785b      	ldrb	r3, [r3, #1]
 80019d4:	2b31      	cmp	r3, #49	; 0x31
 80019d6:	d003      	beq.n	80019e0 <main+0x120>
 80019d8:	4b88      	ldr	r3, [pc, #544]	; (8001bfc <main+0x33c>)
 80019da:	791b      	ldrb	r3, [r3, #4]
 80019dc:	2b31      	cmp	r3, #49	; 0x31
 80019de:	d103      	bne.n	80019e8 <main+0x128>
 80019e0:	4b76      	ldr	r3, [pc, #472]	; (8001bbc <main+0x2fc>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2259      	movs	r2, #89	; 0x59
 80019e6:	635a      	str	r2, [r3, #52]	; 0x34
		if(vVent[1]=='0' || vExt[4]=='0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 92);
 80019e8:	4b83      	ldr	r3, [pc, #524]	; (8001bf8 <main+0x338>)
 80019ea:	785b      	ldrb	r3, [r3, #1]
 80019ec:	2b30      	cmp	r3, #48	; 0x30
 80019ee:	d003      	beq.n	80019f8 <main+0x138>
 80019f0:	4b82      	ldr	r3, [pc, #520]	; (8001bfc <main+0x33c>)
 80019f2:	791b      	ldrb	r3, [r3, #4]
 80019f4:	2b30      	cmp	r3, #48	; 0x30
 80019f6:	d103      	bne.n	8001a00 <main+0x140>
 80019f8:	4b70      	ldr	r3, [pc, #448]	; (8001bbc <main+0x2fc>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	225c      	movs	r2, #92	; 0x5c
 80019fe:	635a      	str	r2, [r3, #52]	; 0x34

		// PUERTA GARAJE (90)
		if(vVent[0]=='1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 89); // más rápido a 30
 8001a00:	4b7d      	ldr	r3, [pc, #500]	; (8001bf8 <main+0x338>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b31      	cmp	r3, #49	; 0x31
 8001a06:	d103      	bne.n	8001a10 <main+0x150>
 8001a08:	4b6c      	ldr	r3, [pc, #432]	; (8001bbc <main+0x2fc>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2259      	movs	r2, #89	; 0x59
 8001a0e:	639a      	str	r2, [r3, #56]	; 0x38
		if(vVent[0]=='0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 92);
 8001a10:	4b79      	ldr	r3, [pc, #484]	; (8001bf8 <main+0x338>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b30      	cmp	r3, #48	; 0x30
 8001a16:	d103      	bne.n	8001a20 <main+0x160>
 8001a18:	4b68      	ldr	r3, [pc, #416]	; (8001bbc <main+0x2fc>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	225c      	movs	r2, #92	; 0x5c
 8001a1e:	639a      	str	r2, [r3, #56]	; 0x38

		// TOLDO TENDEDERO (90)
		if(vExt[0]=='1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 89);
 8001a20:	4b76      	ldr	r3, [pc, #472]	; (8001bfc <main+0x33c>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b31      	cmp	r3, #49	; 0x31
 8001a26:	d103      	bne.n	8001a30 <main+0x170>
 8001a28:	4b64      	ldr	r3, [pc, #400]	; (8001bbc <main+0x2fc>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2259      	movs	r2, #89	; 0x59
 8001a2e:	63da      	str	r2, [r3, #60]	; 0x3c
		if(vExt[0]=='0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 92);
 8001a30:	4b72      	ldr	r3, [pc, #456]	; (8001bfc <main+0x33c>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b30      	cmp	r3, #48	; 0x30
 8001a36:	d103      	bne.n	8001a40 <main+0x180>
 8001a38:	4b60      	ldr	r3, [pc, #384]	; (8001bbc <main+0x2fc>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	225c      	movs	r2, #92	; 0x5c
 8001a3e:	63da      	str	r2, [r3, #60]	; 0x3c

		// VENTANA SALÓN (96)
		if(vVent[2]=='1') {
 8001a40:	4b6d      	ldr	r3, [pc, #436]	; (8001bf8 <main+0x338>)
 8001a42:	789b      	ldrb	r3, [r3, #2]
 8001a44:	2b31      	cmp	r3, #49	; 0x31
 8001a46:	d10b      	bne.n	8001a60 <main+0x1a0>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 95);
 8001a48:	4b5d      	ldr	r3, [pc, #372]	; (8001bc0 <main+0x300>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	225f      	movs	r2, #95	; 0x5f
 8001a4e:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(3000);
 8001a50:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a54:	f001 fc72 	bl	800333c <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 96);
 8001a58:	4b59      	ldr	r3, [pc, #356]	; (8001bc0 <main+0x300>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2260      	movs	r2, #96	; 0x60
 8001a5e:	641a      	str	r2, [r3, #64]	; 0x40
		}
		if(vVent[2]=='0') {
 8001a60:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <main+0x338>)
 8001a62:	789b      	ldrb	r3, [r3, #2]
 8001a64:	2b30      	cmp	r3, #48	; 0x30
 8001a66:	d10b      	bne.n	8001a80 <main+0x1c0>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 97);
 8001a68:	4b55      	ldr	r3, [pc, #340]	; (8001bc0 <main+0x300>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2261      	movs	r2, #97	; 0x61
 8001a6e:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(3000);
 8001a70:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a74:	f001 fc62 	bl	800333c <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 96);
 8001a78:	4b51      	ldr	r3, [pc, #324]	; (8001bc0 <main+0x300>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2260      	movs	r2, #96	; 0x60
 8001a7e:	641a      	str	r2, [r3, #64]	; 0x40
		}
		vVent[2]='x';
 8001a80:	4b5d      	ldr	r3, [pc, #372]	; (8001bf8 <main+0x338>)
 8001a82:	2278      	movs	r2, #120	; 0x78
 8001a84:	709a      	strb	r2, [r3, #2]

		// VENTANA DORMITORIO (171)
		if(vVent[3]=='1') {
 8001a86:	4b5c      	ldr	r3, [pc, #368]	; (8001bf8 <main+0x338>)
 8001a88:	78db      	ldrb	r3, [r3, #3]
 8001a8a:	2b31      	cmp	r3, #49	; 0x31
 8001a8c:	d10b      	bne.n	8001aa6 <main+0x1e6>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 168);
 8001a8e:	4b4c      	ldr	r3, [pc, #304]	; (8001bc0 <main+0x300>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	22a8      	movs	r2, #168	; 0xa8
 8001a94:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(3000);
 8001a96:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a9a:	f001 fc4f 	bl	800333c <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 170);
 8001a9e:	4b48      	ldr	r3, [pc, #288]	; (8001bc0 <main+0x300>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	22aa      	movs	r2, #170	; 0xaa
 8001aa4:	639a      	str	r2, [r3, #56]	; 0x38
		}
		if(vVent[3]=='0') {
 8001aa6:	4b54      	ldr	r3, [pc, #336]	; (8001bf8 <main+0x338>)
 8001aa8:	78db      	ldrb	r3, [r3, #3]
 8001aaa:	2b30      	cmp	r3, #48	; 0x30
 8001aac:	d10b      	bne.n	8001ac6 <main+0x206>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 172);
 8001aae:	4b44      	ldr	r3, [pc, #272]	; (8001bc0 <main+0x300>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	22ac      	movs	r2, #172	; 0xac
 8001ab4:	639a      	str	r2, [r3, #56]	; 0x38

			HAL_Delay(3000);
 8001ab6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001aba:	f001 fc3f 	bl	800333c <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 170);
 8001abe:	4b40      	ldr	r3, [pc, #256]	; (8001bc0 <main+0x300>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	22aa      	movs	r2, #170	; 0xaa
 8001ac4:	639a      	str	r2, [r3, #56]	; 0x38
		}
		vVent[3]='x';
 8001ac6:	4b4c      	ldr	r3, [pc, #304]	; (8001bf8 <main+0x338>)
 8001ac8:	2278      	movs	r2, #120	; 0x78
 8001aca:	70da      	strb	r2, [r3, #3]

		// VENTANA OFICINA
		if(vVent[4]=='1') {
 8001acc:	4b4a      	ldr	r3, [pc, #296]	; (8001bf8 <main+0x338>)
 8001ace:	791b      	ldrb	r3, [r3, #4]
 8001ad0:	2b31      	cmp	r3, #49	; 0x31
 8001ad2:	d10b      	bne.n	8001aec <main+0x22c>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 45);
 8001ad4:	4b3a      	ldr	r3, [pc, #232]	; (8001bc0 <main+0x300>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	222d      	movs	r2, #45	; 0x2d
 8001ada:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8001adc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001ae0:	f001 fc2c 	bl	800333c <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 135);
 8001ae4:	4b36      	ldr	r3, [pc, #216]	; (8001bc0 <main+0x300>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2287      	movs	r2, #135	; 0x87
 8001aea:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		if(vVent[4]=='0') {
 8001aec:	4b42      	ldr	r3, [pc, #264]	; (8001bf8 <main+0x338>)
 8001aee:	791b      	ldrb	r3, [r3, #4]
 8001af0:	2b30      	cmp	r3, #48	; 0x30
 8001af2:	d10b      	bne.n	8001b0c <main+0x24c>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 100);
 8001af4:	4b32      	ldr	r3, [pc, #200]	; (8001bc0 <main+0x300>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2264      	movs	r2, #100	; 0x64
 8001afa:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8001afc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001b00:	f001 fc1c 	bl	800333c <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 90);
 8001b04:	4b2e      	ldr	r3, [pc, #184]	; (8001bc0 <main+0x300>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	225a      	movs	r2, #90	; 0x5a
 8001b0a:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		vVent[4]='x';
 8001b0c:	4b3a      	ldr	r3, [pc, #232]	; (8001bf8 <main+0x338>)
 8001b0e:	2278      	movs	r2, #120	; 0x78
 8001b10:	711a      	strb	r2, [r3, #4]

		// FINALES DE CARRERA
		if(debouncer(&fin, Fin_Servo_GPIO_Port, Fin_Servo_Pin)){
 8001b12:	2210      	movs	r2, #16
 8001b14:	4933      	ldr	r1, [pc, #204]	; (8001be4 <main+0x324>)
 8001b16:	483a      	ldr	r0, [pc, #232]	; (8001c00 <main+0x340>)
 8001b18:	f7ff fe26 	bl	8001768 <debouncer>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d017      	beq.n	8001b52 <main+0x292>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 90); // S_Parcela
 8001b22:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <main+0x2fc>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	225a      	movs	r2, #90	; 0x5a
 8001b28:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 90); // S_Garaje
 8001b2a:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <main+0x2fc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	225a      	movs	r2, #90	; 0x5a
 8001b30:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90); // S_Tendedero
 8001b32:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <main+0x2fc>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	225a      	movs	r2, #90	; 0x5a
 8001b38:	63da      	str	r2, [r3, #60]	; 0x3c
			vVent[0]='x'; // S_Parcela
 8001b3a:	4b2f      	ldr	r3, [pc, #188]	; (8001bf8 <main+0x338>)
 8001b3c:	2278      	movs	r2, #120	; 0x78
 8001b3e:	701a      	strb	r2, [r3, #0]
			vExt[4]='x'; // S_Parcela
 8001b40:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <main+0x33c>)
 8001b42:	2278      	movs	r2, #120	; 0x78
 8001b44:	711a      	strb	r2, [r3, #4]
			vVent[1]='x'; // S_Garaje
 8001b46:	4b2c      	ldr	r3, [pc, #176]	; (8001bf8 <main+0x338>)
 8001b48:	2278      	movs	r2, #120	; 0x78
 8001b4a:	705a      	strb	r2, [r3, #1]
			vExt[0]='x'; // S_Tendedero
 8001b4c:	4b2b      	ldr	r3, [pc, #172]	; (8001bfc <main+0x33c>)
 8001b4e:	2278      	movs	r2, #120	; 0x78
 8001b50:	701a      	strb	r2, [r3, #0]
		}

		// VENTILADOR SALÓN
		if(vTemp[0]=='1') {
 8001b52:	4b2c      	ldr	r3, [pc, #176]	; (8001c04 <main+0x344>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b31      	cmp	r3, #49	; 0x31
 8001b58:	d10e      	bne.n	8001b78 <main+0x2b8>
			__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 1000);
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <main+0x304>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b62:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
 8001b64:	2201      	movs	r2, #1
 8001b66:	2110      	movs	r1, #16
 8001b68:	4827      	ldr	r0, [pc, #156]	; (8001c08 <main+0x348>)
 8001b6a:	f002 fb2f 	bl	80041cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,GPIO_PIN_RESET);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2120      	movs	r1, #32
 8001b72:	4825      	ldr	r0, [pc, #148]	; (8001c08 <main+0x348>)
 8001b74:	f002 fb2a 	bl	80041cc <HAL_GPIO_WritePin>
		}
		if(vTemp[0]=='0') {
 8001b78:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <main+0x344>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b30      	cmp	r3, #48	; 0x30
 8001b7e:	d10d      	bne.n	8001b9c <main+0x2dc>
			__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 8001b80:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <main+0x304>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2200      	movs	r2, #0
 8001b86:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_RESET);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2110      	movs	r1, #16
 8001b8c:	481e      	ldr	r0, [pc, #120]	; (8001c08 <main+0x348>)
 8001b8e:	f002 fb1d 	bl	80041cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,GPIO_PIN_RESET);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2120      	movs	r1, #32
 8001b96:	481c      	ldr	r0, [pc, #112]	; (8001c08 <main+0x348>)
 8001b98:	f002 fb18 	bl	80041cc <HAL_GPIO_WritePin>
		}

		/*----------- Lectura Sensores -----------*/
		// LDR

		if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	480b      	ldr	r0, [pc, #44]	; (8001bd0 <main+0x310>)
 8001ba2:	f001 fd05 	bl	80035b0 <HAL_ADC_PollForConversion>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d132      	bne.n	8001c12 <main+0x352>
			LDR_valor = HAL_ADC_GetValue(&hadc1);
 8001bac:	4808      	ldr	r0, [pc, #32]	; (8001bd0 <main+0x310>)
 8001bae:	f001 fd8a 	bl	80036c6 <HAL_ADC_GetValue>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	e02a      	b.n	8001c0c <main+0x34c>
 8001bb6:	bf00      	nop
 8001bb8:	20000c78 	.word	0x20000c78
 8001bbc:	20000d4c 	.word	0x20000d4c
 8001bc0:	20000b58 	.word	0x20000b58
 8001bc4:	20000cc0 	.word	0x20000cc0
 8001bc8:	20000a3c 	.word	0x20000a3c
 8001bcc:	20000c30 	.word	0x20000c30
 8001bd0:	20000ba0 	.word	0x20000ba0
 8001bd4:	20000ac8 	.word	0x20000ac8
 8001bd8:	20000be8 	.word	0x20000be8
 8001bdc:	0800798c 	.word	0x0800798c
 8001be0:	08007998 	.word	0x08007998
 8001be4:	40021000 	.word	0x40021000
 8001be8:	200008ac 	.word	0x200008ac
 8001bec:	200008b4 	.word	0x200008b4
 8001bf0:	200009e0 	.word	0x200009e0
 8001bf4:	200008b8 	.word	0x200008b8
 8001bf8:	200008e4 	.word	0x200008e4
 8001bfc:	200008f0 	.word	0x200008f0
 8001c00:	200008bc 	.word	0x200008bc
 8001c04:	20000934 	.word	0x20000934
 8001c08:	40020800 	.word	0x40020800
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <main+0x3e4>)
 8001c10:	801a      	strh	r2, [r3, #0]
				//vIlum[24] = '0';	// Porche
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);	// Tendedero
			}
		}*/

		ldr(LDR_valor);
 8001c12:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <main+0x3e4>)
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff f932 	bl	8000e80 <ldr>

		// HW-390

		if(HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK)
 8001c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c20:	4821      	ldr	r0, [pc, #132]	; (8001ca8 <main+0x3e8>)
 8001c22:	f001 fcc5 	bl	80035b0 <HAL_ADC_PollForConversion>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d106      	bne.n	8001c3a <main+0x37a>
			Higro_lectura = HAL_ADC_GetValue(&hadc2);
 8001c2c:	481e      	ldr	r0, [pc, #120]	; (8001ca8 <main+0x3e8>)
 8001c2e:	f001 fd4a 	bl	80036c6 <HAL_ADC_GetValue>
 8001c32:	4603      	mov	r3, r0
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <main+0x3ec>)
 8001c38:	801a      	strh	r2, [r3, #0]

		Higro_real = 100 - ((100*Higro_lectura)/255);
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <main+0x3ec>)
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	2364      	movs	r3, #100	; 0x64
 8001c42:	fb03 f302 	mul.w	r3, r3, r2
 8001c46:	4a1a      	ldr	r2, [pc, #104]	; (8001cb0 <main+0x3f0>)
 8001c48:	fb82 1203 	smull	r1, r2, r2, r3
 8001c4c:	441a      	add	r2, r3
 8001c4e:	11d2      	asrs	r2, r2, #7
 8001c50:	17db      	asrs	r3, r3, #31
 8001c52:	1a9b      	subs	r3, r3, r2
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	3364      	adds	r3, #100	; 0x64
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <main+0x3f4>)
 8001c5c:	801a      	strh	r2, [r3, #0]

		// Lluvia

		if(HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY) == HAL_OK)
 8001c5e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c62:	4815      	ldr	r0, [pc, #84]	; (8001cb8 <main+0x3f8>)
 8001c64:	f001 fca4 	bl	80035b0 <HAL_ADC_PollForConversion>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d106      	bne.n	8001c7c <main+0x3bc>
			Lluvia_lectura = HAL_ADC_GetValue(&hadc3);
 8001c6e:	4812      	ldr	r0, [pc, #72]	; (8001cb8 <main+0x3f8>)
 8001c70:	f001 fd29 	bl	80036c6 <HAL_ADC_GetValue>
 8001c74:	4603      	mov	r3, r0
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <main+0x3fc>)
 8001c7a:	801a      	strh	r2, [r3, #0]

		Lluvia_real = 100 - ((100*Lluvia_lectura)/255);
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <main+0x3fc>)
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	2364      	movs	r3, #100	; 0x64
 8001c84:	fb03 f302 	mul.w	r3, r3, r2
 8001c88:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <main+0x3f0>)
 8001c8a:	fb82 1203 	smull	r1, r2, r2, r3
 8001c8e:	441a      	add	r2, r3
 8001c90:	11d2      	asrs	r2, r2, #7
 8001c92:	17db      	asrs	r3, r3, #31
 8001c94:	1a9b      	subs	r3, r3, r2
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	3364      	adds	r3, #100	; 0x64
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <main+0x400>)
 8001c9e:	801a      	strh	r2, [r3, #0]
  while (1){
 8001ca0:	e66e      	b.n	8001980 <main+0xc0>
 8001ca2:	bf00      	nop
 8001ca4:	200008c0 	.word	0x200008c0
 8001ca8:	20000ac8 	.word	0x20000ac8
 8001cac:	200008c2 	.word	0x200008c2
 8001cb0:	80808081 	.word	0x80808081
 8001cb4:	200008c4 	.word	0x200008c4
 8001cb8:	20000be8 	.word	0x20000be8
 8001cbc:	200008c6 	.word	0x200008c6
 8001cc0:	200008c8 	.word	0x200008c8

08001cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b094      	sub	sp, #80	; 0x50
 8001cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cca:	f107 0320 	add.w	r3, r7, #32
 8001cce:	2230      	movs	r2, #48	; 0x30
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f004 fe96 	bl	8006a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <SystemClock_Config+0xcc>)
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	4a27      	ldr	r2, [pc, #156]	; (8001d90 <SystemClock_Config+0xcc>)
 8001cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf8:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <SystemClock_Config+0xcc>)
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d04:	2300      	movs	r3, #0
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	4b22      	ldr	r3, [pc, #136]	; (8001d94 <SystemClock_Config+0xd0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a21      	ldr	r2, [pc, #132]	; (8001d94 <SystemClock_Config+0xd0>)
 8001d0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <SystemClock_Config+0xd0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d20:	2301      	movs	r3, #1
 8001d22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d34:	2304      	movs	r3, #4
 8001d36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001d38:	2332      	movs	r3, #50	; 0x32
 8001d3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d40:	2307      	movs	r3, #7
 8001d42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d44:	f107 0320 	add.w	r3, r7, #32
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f002 fa71 	bl	8004230 <HAL_RCC_OscConfig>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d54:	f000 fe22 	bl	800299c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d58:	230f      	movs	r3, #15
 8001d5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	2101      	movs	r1, #1
 8001d76:	4618      	mov	r0, r3
 8001d78:	f002 fcd2 	bl	8004720 <HAL_RCC_ClockConfig>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d82:	f000 fe0b 	bl	800299c <Error_Handler>
  }
}
 8001d86:	bf00      	nop
 8001d88:	3750      	adds	r7, #80	; 0x50
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40007000 	.word	0x40007000

08001d98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d9e:	463b      	mov	r3, r7
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001daa:	4b21      	ldr	r3, [pc, #132]	; (8001e30 <MX_ADC1_Init+0x98>)
 8001dac:	4a21      	ldr	r2, [pc, #132]	; (8001e34 <MX_ADC1_Init+0x9c>)
 8001dae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001db0:	4b1f      	ldr	r3, [pc, #124]	; (8001e30 <MX_ADC1_Init+0x98>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001db6:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <MX_ADC1_Init+0x98>)
 8001db8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dbc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001dbe:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <MX_ADC1_Init+0x98>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <MX_ADC1_Init+0x98>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dca:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <MX_ADC1_Init+0x98>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dd2:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <MX_ADC1_Init+0x98>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dd8:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <MX_ADC1_Init+0x98>)
 8001dda:	4a17      	ldr	r2, [pc, #92]	; (8001e38 <MX_ADC1_Init+0xa0>)
 8001ddc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dde:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <MX_ADC1_Init+0x98>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <MX_ADC1_Init+0x98>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <MX_ADC1_Init+0x98>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <MX_ADC1_Init+0x98>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001df8:	480d      	ldr	r0, [pc, #52]	; (8001e30 <MX_ADC1_Init+0x98>)
 8001dfa:	f001 fac3 	bl	8003384 <HAL_ADC_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e04:	f000 fdca 	bl	800299c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001e08:	2304      	movs	r3, #4
 8001e0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001e10:	2307      	movs	r3, #7
 8001e12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e14:	463b      	mov	r3, r7
 8001e16:	4619      	mov	r1, r3
 8001e18:	4805      	ldr	r0, [pc, #20]	; (8001e30 <MX_ADC1_Init+0x98>)
 8001e1a:	f001 fc61 	bl	80036e0 <HAL_ADC_ConfigChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e24:	f000 fdba 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000ba0 	.word	0x20000ba0
 8001e34:	40012000 	.word	0x40012000
 8001e38:	0f000001 	.word	0x0f000001

08001e3c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e42:	463b      	mov	r3, r7
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001e4e:	4b21      	ldr	r3, [pc, #132]	; (8001ed4 <MX_ADC2_Init+0x98>)
 8001e50:	4a21      	ldr	r2, [pc, #132]	; (8001ed8 <MX_ADC2_Init+0x9c>)
 8001e52:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001e54:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <MX_ADC2_Init+0x98>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <MX_ADC2_Init+0x98>)
 8001e5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e60:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001e62:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <MX_ADC2_Init+0x98>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001e68:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <MX_ADC2_Init+0x98>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e6e:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <MX_ADC2_Init+0x98>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <MX_ADC2_Init+0x98>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e7c:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <MX_ADC2_Init+0x98>)
 8001e7e:	4a17      	ldr	r2, [pc, #92]	; (8001edc <MX_ADC2_Init+0xa0>)
 8001e80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e82:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <MX_ADC2_Init+0x98>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <MX_ADC2_Init+0x98>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001e8e:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <MX_ADC2_Init+0x98>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001e96:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <MX_ADC2_Init+0x98>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e9c:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <MX_ADC2_Init+0x98>)
 8001e9e:	f001 fa71 	bl	8003384 <HAL_ADC_Init>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001ea8:	f000 fd78 	bl	800299c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001eac:	2308      	movs	r3, #8
 8001eae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001eb4:	2307      	movs	r3, #7
 8001eb6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001eb8:	463b      	mov	r3, r7
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <MX_ADC2_Init+0x98>)
 8001ebe:	f001 fc0f 	bl	80036e0 <HAL_ADC_ConfigChannel>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001ec8:	f000 fd68 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000ac8 	.word	0x20000ac8
 8001ed8:	40012100 	.word	0x40012100
 8001edc:	0f000001 	.word	0x0f000001

08001ee0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ee6:	463b      	mov	r3, r7
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001ef2:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <MX_ADC3_Init+0x98>)
 8001ef4:	4a21      	ldr	r2, [pc, #132]	; (8001f7c <MX_ADC3_Init+0x9c>)
 8001ef6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <MX_ADC3_Init+0x98>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 8001efe:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <MX_ADC3_Init+0x98>)
 8001f00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f04:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001f06:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <MX_ADC3_Init+0x98>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001f0c:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <MX_ADC3_Init+0x98>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001f12:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <MX_ADC3_Init+0x98>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f1a:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <MX_ADC3_Init+0x98>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f20:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <MX_ADC3_Init+0x98>)
 8001f22:	4a17      	ldr	r2, [pc, #92]	; (8001f80 <MX_ADC3_Init+0xa0>)
 8001f24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f26:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <MX_ADC3_Init+0x98>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <MX_ADC3_Init+0x98>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001f32:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <MX_ADC3_Init+0x98>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <MX_ADC3_Init+0x98>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001f40:	480d      	ldr	r0, [pc, #52]	; (8001f78 <MX_ADC3_Init+0x98>)
 8001f42:	f001 fa1f 	bl	8003384 <HAL_ADC_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001f4c:	f000 fd26 	bl	800299c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001f50:	230b      	movs	r3, #11
 8001f52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f54:	2301      	movs	r3, #1
 8001f56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001f58:	2307      	movs	r3, #7
 8001f5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001f5c:	463b      	mov	r3, r7
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4805      	ldr	r0, [pc, #20]	; (8001f78 <MX_ADC3_Init+0x98>)
 8001f62:	f001 fbbd 	bl	80036e0 <HAL_ADC_ConfigChannel>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001f6c:	f000 fd16 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000be8 	.word	0x20000be8
 8001f7c:	40012200 	.word	0x40012200
 8001f80:	0f000001 	.word	0x0f000001

08001f84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b096      	sub	sp, #88	; 0x58
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
 8001fb0:	611a      	str	r2, [r3, #16]
 8001fb2:	615a      	str	r2, [r3, #20]
 8001fb4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	2220      	movs	r2, #32
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f004 fd21 	bl	8006a04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fc2:	4b4a      	ldr	r3, [pc, #296]	; (80020ec <MX_TIM1_Init+0x168>)
 8001fc4:	4a4a      	ldr	r2, [pc, #296]	; (80020f0 <MX_TIM1_Init+0x16c>)
 8001fc6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8001fc8:	4b48      	ldr	r3, [pc, #288]	; (80020ec <MX_TIM1_Init+0x168>)
 8001fca:	225f      	movs	r2, #95	; 0x5f
 8001fcc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fce:	4b47      	ldr	r3, [pc, #284]	; (80020ec <MX_TIM1_Init+0x168>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 8001fd4:	4b45      	ldr	r3, [pc, #276]	; (80020ec <MX_TIM1_Init+0x168>)
 8001fd6:	22fe      	movs	r2, #254	; 0xfe
 8001fd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fda:	4b44      	ldr	r3, [pc, #272]	; (80020ec <MX_TIM1_Init+0x168>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fe0:	4b42      	ldr	r3, [pc, #264]	; (80020ec <MX_TIM1_Init+0x168>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe6:	4b41      	ldr	r3, [pc, #260]	; (80020ec <MX_TIM1_Init+0x168>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fec:	483f      	ldr	r0, [pc, #252]	; (80020ec <MX_TIM1_Init+0x168>)
 8001fee:	f002 fd93 	bl	8004b18 <HAL_TIM_Base_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001ff8:	f000 fcd0 	bl	800299c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002000:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002002:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002006:	4619      	mov	r1, r3
 8002008:	4838      	ldr	r0, [pc, #224]	; (80020ec <MX_TIM1_Init+0x168>)
 800200a:	f003 f821 	bl	8005050 <HAL_TIM_ConfigClockSource>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002014:	f000 fcc2 	bl	800299c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002018:	4834      	ldr	r0, [pc, #208]	; (80020ec <MX_TIM1_Init+0x168>)
 800201a:	f002 fe35 	bl	8004c88 <HAL_TIM_PWM_Init>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002024:	f000 fcba 	bl	800299c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002028:	2300      	movs	r3, #0
 800202a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002030:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002034:	4619      	mov	r1, r3
 8002036:	482d      	ldr	r0, [pc, #180]	; (80020ec <MX_TIM1_Init+0x168>)
 8002038:	f003 fbe2 	bl	8005800 <HAL_TIMEx_MasterConfigSynchronization>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002042:	f000 fcab 	bl	800299c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002046:	2360      	movs	r3, #96	; 0x60
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800204e:	2300      	movs	r3, #0
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002052:	2300      	movs	r3, #0
 8002054:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002066:	2200      	movs	r2, #0
 8002068:	4619      	mov	r1, r3
 800206a:	4820      	ldr	r0, [pc, #128]	; (80020ec <MX_TIM1_Init+0x168>)
 800206c:	f002 ff2e 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002076:	f000 fc91 	bl	800299c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800207a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207e:	2204      	movs	r2, #4
 8002080:	4619      	mov	r1, r3
 8002082:	481a      	ldr	r0, [pc, #104]	; (80020ec <MX_TIM1_Init+0x168>)
 8002084:	f002 ff22 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800208e:	f000 fc85 	bl	800299c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002096:	2208      	movs	r2, #8
 8002098:	4619      	mov	r1, r3
 800209a:	4814      	ldr	r0, [pc, #80]	; (80020ec <MX_TIM1_Init+0x168>)
 800209c:	f002 ff16 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80020a6:	f000 fc79 	bl	800299c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020aa:	2300      	movs	r3, #0
 80020ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	4619      	mov	r1, r3
 80020cc:	4807      	ldr	r0, [pc, #28]	; (80020ec <MX_TIM1_Init+0x168>)
 80020ce:	f003 fc13 	bl	80058f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80020d8:	f000 fc60 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020dc:	4803      	ldr	r0, [pc, #12]	; (80020ec <MX_TIM1_Init+0x168>)
 80020de:	f000 fded 	bl	8002cbc <HAL_TIM_MspPostInit>

}
 80020e2:	bf00      	nop
 80020e4:	3758      	adds	r7, #88	; 0x58
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000c78 	.word	0x20000c78
 80020f0:	40010000 	.word	0x40010000

080020f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08e      	sub	sp, #56	; 0x38
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002108:	f107 0320 	add.w	r3, r7, #32
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
 8002120:	615a      	str	r2, [r3, #20]
 8002122:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002124:	4b38      	ldr	r3, [pc, #224]	; (8002208 <MX_TIM2_Init+0x114>)
 8002126:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800212a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 800212c:	4b36      	ldr	r3, [pc, #216]	; (8002208 <MX_TIM2_Init+0x114>)
 800212e:	225f      	movs	r2, #95	; 0x5f
 8002130:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002132:	4b35      	ldr	r3, [pc, #212]	; (8002208 <MX_TIM2_Init+0x114>)
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8002138:	4b33      	ldr	r3, [pc, #204]	; (8002208 <MX_TIM2_Init+0x114>)
 800213a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800213e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002140:	4b31      	ldr	r3, [pc, #196]	; (8002208 <MX_TIM2_Init+0x114>)
 8002142:	2200      	movs	r2, #0
 8002144:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002146:	4b30      	ldr	r3, [pc, #192]	; (8002208 <MX_TIM2_Init+0x114>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800214c:	482e      	ldr	r0, [pc, #184]	; (8002208 <MX_TIM2_Init+0x114>)
 800214e:	f002 fce3 	bl	8004b18 <HAL_TIM_Base_Init>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002158:	f000 fc20 	bl	800299c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800215c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002160:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002166:	4619      	mov	r1, r3
 8002168:	4827      	ldr	r0, [pc, #156]	; (8002208 <MX_TIM2_Init+0x114>)
 800216a:	f002 ff71 	bl	8005050 <HAL_TIM_ConfigClockSource>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002174:	f000 fc12 	bl	800299c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002178:	4823      	ldr	r0, [pc, #140]	; (8002208 <MX_TIM2_Init+0x114>)
 800217a:	f002 fd85 	bl	8004c88 <HAL_TIM_PWM_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002184:	f000 fc0a 	bl	800299c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002188:	2300      	movs	r3, #0
 800218a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800218c:	2300      	movs	r3, #0
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002190:	f107 0320 	add.w	r3, r7, #32
 8002194:	4619      	mov	r1, r3
 8002196:	481c      	ldr	r0, [pc, #112]	; (8002208 <MX_TIM2_Init+0x114>)
 8002198:	f003 fb32 	bl	8005800 <HAL_TIMEx_MasterConfigSynchronization>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80021a2:	f000 fbfb 	bl	800299c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021a6:	2360      	movs	r3, #96	; 0x60
 80021a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	2200      	movs	r2, #0
 80021ba:	4619      	mov	r1, r3
 80021bc:	4812      	ldr	r0, [pc, #72]	; (8002208 <MX_TIM2_Init+0x114>)
 80021be:	f002 fe85 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80021c8:	f000 fbe8 	bl	800299c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021cc:	1d3b      	adds	r3, r7, #4
 80021ce:	2204      	movs	r2, #4
 80021d0:	4619      	mov	r1, r3
 80021d2:	480d      	ldr	r0, [pc, #52]	; (8002208 <MX_TIM2_Init+0x114>)
 80021d4:	f002 fe7a 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80021de:	f000 fbdd 	bl	800299c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	2208      	movs	r2, #8
 80021e6:	4619      	mov	r1, r3
 80021e8:	4807      	ldr	r0, [pc, #28]	; (8002208 <MX_TIM2_Init+0x114>)
 80021ea:	f002 fe6f 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80021f4:	f000 fbd2 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021f8:	4803      	ldr	r0, [pc, #12]	; (8002208 <MX_TIM2_Init+0x114>)
 80021fa:	f000 fd5f 	bl	8002cbc <HAL_TIM_MspPostInit>

}
 80021fe:	bf00      	nop
 8002200:	3738      	adds	r7, #56	; 0x38
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000d4c 	.word	0x20000d4c

0800220c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08e      	sub	sp, #56	; 0x38
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	609a      	str	r2, [r3, #8]
 800221e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002220:	f107 0320 	add.w	r3, r7, #32
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800222a:	1d3b      	adds	r3, r7, #4
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
 8002238:	615a      	str	r2, [r3, #20]
 800223a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800223c:	4b37      	ldr	r3, [pc, #220]	; (800231c <MX_TIM3_Init+0x110>)
 800223e:	4a38      	ldr	r2, [pc, #224]	; (8002320 <MX_TIM3_Init+0x114>)
 8002240:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 8002242:	4b36      	ldr	r3, [pc, #216]	; (800231c <MX_TIM3_Init+0x110>)
 8002244:	225f      	movs	r2, #95	; 0x5f
 8002246:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002248:	4b34      	ldr	r3, [pc, #208]	; (800231c <MX_TIM3_Init+0x110>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 800224e:	4b33      	ldr	r3, [pc, #204]	; (800231c <MX_TIM3_Init+0x110>)
 8002250:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002254:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002256:	4b31      	ldr	r3, [pc, #196]	; (800231c <MX_TIM3_Init+0x110>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800225c:	4b2f      	ldr	r3, [pc, #188]	; (800231c <MX_TIM3_Init+0x110>)
 800225e:	2200      	movs	r2, #0
 8002260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002262:	482e      	ldr	r0, [pc, #184]	; (800231c <MX_TIM3_Init+0x110>)
 8002264:	f002 fc58 	bl	8004b18 <HAL_TIM_Base_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800226e:	f000 fb95 	bl	800299c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002278:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800227c:	4619      	mov	r1, r3
 800227e:	4827      	ldr	r0, [pc, #156]	; (800231c <MX_TIM3_Init+0x110>)
 8002280:	f002 fee6 	bl	8005050 <HAL_TIM_ConfigClockSource>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800228a:	f000 fb87 	bl	800299c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800228e:	4823      	ldr	r0, [pc, #140]	; (800231c <MX_TIM3_Init+0x110>)
 8002290:	f002 fcfa 	bl	8004c88 <HAL_TIM_PWM_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800229a:	f000 fb7f 	bl	800299c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800229e:	2300      	movs	r3, #0
 80022a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a2:	2300      	movs	r3, #0
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022a6:	f107 0320 	add.w	r3, r7, #32
 80022aa:	4619      	mov	r1, r3
 80022ac:	481b      	ldr	r0, [pc, #108]	; (800231c <MX_TIM3_Init+0x110>)
 80022ae:	f003 faa7 	bl	8005800 <HAL_TIMEx_MasterConfigSynchronization>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80022b8:	f000 fb70 	bl	800299c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022bc:	2360      	movs	r3, #96	; 0x60
 80022be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022cc:	1d3b      	adds	r3, r7, #4
 80022ce:	2204      	movs	r2, #4
 80022d0:	4619      	mov	r1, r3
 80022d2:	4812      	ldr	r0, [pc, #72]	; (800231c <MX_TIM3_Init+0x110>)
 80022d4:	f002 fdfa 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80022de:	f000 fb5d 	bl	800299c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	2208      	movs	r2, #8
 80022e6:	4619      	mov	r1, r3
 80022e8:	480c      	ldr	r0, [pc, #48]	; (800231c <MX_TIM3_Init+0x110>)
 80022ea:	f002 fdef 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80022f4:	f000 fb52 	bl	800299c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022f8:	1d3b      	adds	r3, r7, #4
 80022fa:	220c      	movs	r2, #12
 80022fc:	4619      	mov	r1, r3
 80022fe:	4807      	ldr	r0, [pc, #28]	; (800231c <MX_TIM3_Init+0x110>)
 8002300:	f002 fde4 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800230a:	f000 fb47 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800230e:	4803      	ldr	r0, [pc, #12]	; (800231c <MX_TIM3_Init+0x110>)
 8002310:	f000 fcd4 	bl	8002cbc <HAL_TIM_MspPostInit>

}
 8002314:	bf00      	nop
 8002316:	3738      	adds	r7, #56	; 0x38
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000b58 	.word	0x20000b58
 8002320:	40000400 	.word	0x40000400

08002324 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08e      	sub	sp, #56	; 0x38
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800232a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002338:	f107 0320 	add.w	r3, r7, #32
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002342:	1d3b      	adds	r3, r7, #4
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]
 8002350:	615a      	str	r2, [r3, #20]
 8002352:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002354:	4b2c      	ldr	r3, [pc, #176]	; (8002408 <MX_TIM4_Init+0xe4>)
 8002356:	4a2d      	ldr	r2, [pc, #180]	; (800240c <MX_TIM4_Init+0xe8>)
 8002358:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 800235a:	4b2b      	ldr	r3, [pc, #172]	; (8002408 <MX_TIM4_Init+0xe4>)
 800235c:	225f      	movs	r2, #95	; 0x5f
 800235e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002360:	4b29      	ldr	r3, [pc, #164]	; (8002408 <MX_TIM4_Init+0xe4>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20;
 8002366:	4b28      	ldr	r3, [pc, #160]	; (8002408 <MX_TIM4_Init+0xe4>)
 8002368:	2214      	movs	r2, #20
 800236a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800236c:	4b26      	ldr	r3, [pc, #152]	; (8002408 <MX_TIM4_Init+0xe4>)
 800236e:	2200      	movs	r2, #0
 8002370:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002372:	4b25      	ldr	r3, [pc, #148]	; (8002408 <MX_TIM4_Init+0xe4>)
 8002374:	2200      	movs	r2, #0
 8002376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002378:	4823      	ldr	r0, [pc, #140]	; (8002408 <MX_TIM4_Init+0xe4>)
 800237a:	f002 fbcd 	bl	8004b18 <HAL_TIM_Base_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002384:	f000 fb0a 	bl	800299c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800238c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800238e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002392:	4619      	mov	r1, r3
 8002394:	481c      	ldr	r0, [pc, #112]	; (8002408 <MX_TIM4_Init+0xe4>)
 8002396:	f002 fe5b 	bl	8005050 <HAL_TIM_ConfigClockSource>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80023a0:	f000 fafc 	bl	800299c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80023a4:	4818      	ldr	r0, [pc, #96]	; (8002408 <MX_TIM4_Init+0xe4>)
 80023a6:	f002 fc6f 	bl	8004c88 <HAL_TIM_PWM_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80023b0:	f000 faf4 	bl	800299c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b4:	2300      	movs	r3, #0
 80023b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023bc:	f107 0320 	add.w	r3, r7, #32
 80023c0:	4619      	mov	r1, r3
 80023c2:	4811      	ldr	r0, [pc, #68]	; (8002408 <MX_TIM4_Init+0xe4>)
 80023c4:	f003 fa1c 	bl	8005800 <HAL_TIMEx_MasterConfigSynchronization>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80023ce:	f000 fae5 	bl	800299c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023d2:	2360      	movs	r3, #96	; 0x60
 80023d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	2200      	movs	r2, #0
 80023e6:	4619      	mov	r1, r3
 80023e8:	4807      	ldr	r0, [pc, #28]	; (8002408 <MX_TIM4_Init+0xe4>)
 80023ea:	f002 fd6f 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80023f4:	f000 fad2 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80023f8:	4803      	ldr	r0, [pc, #12]	; (8002408 <MX_TIM4_Init+0xe4>)
 80023fa:	f000 fc5f 	bl	8002cbc <HAL_TIM_MspPostInit>

}
 80023fe:	bf00      	nop
 8002400:	3738      	adds	r7, #56	; 0x38
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000a3c 	.word	0x20000a3c
 800240c:	40000800 	.word	0x40000800

08002410 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002416:	f107 0308 	add.w	r3, r7, #8
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	605a      	str	r2, [r3, #4]
 8002420:	609a      	str	r2, [r3, #8]
 8002422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002424:	463b      	mov	r3, r7
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800242c:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <MX_TIM5_Init+0x94>)
 800242e:	4a1e      	ldr	r2, [pc, #120]	; (80024a8 <MX_TIM5_Init+0x98>)
 8002430:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 96-1;
 8002432:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <MX_TIM5_Init+0x94>)
 8002434:	225f      	movs	r2, #95	; 0x5f
 8002436:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002438:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <MX_TIM5_Init+0x94>)
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 800243e:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <MX_TIM5_Init+0x94>)
 8002440:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002444:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002446:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <MX_TIM5_Init+0x94>)
 8002448:	2200      	movs	r2, #0
 800244a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800244c:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <MX_TIM5_Init+0x94>)
 800244e:	2200      	movs	r2, #0
 8002450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002452:	4814      	ldr	r0, [pc, #80]	; (80024a4 <MX_TIM5_Init+0x94>)
 8002454:	f002 fb60 	bl	8004b18 <HAL_TIM_Base_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800245e:	f000 fa9d 	bl	800299c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002466:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002468:	f107 0308 	add.w	r3, r7, #8
 800246c:	4619      	mov	r1, r3
 800246e:	480d      	ldr	r0, [pc, #52]	; (80024a4 <MX_TIM5_Init+0x94>)
 8002470:	f002 fdee 	bl	8005050 <HAL_TIM_ConfigClockSource>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800247a:	f000 fa8f 	bl	800299c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800247e:	2300      	movs	r3, #0
 8002480:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002482:	2300      	movs	r3, #0
 8002484:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002486:	463b      	mov	r3, r7
 8002488:	4619      	mov	r1, r3
 800248a:	4806      	ldr	r0, [pc, #24]	; (80024a4 <MX_TIM5_Init+0x94>)
 800248c:	f003 f9b8 	bl	8005800 <HAL_TIMEx_MasterConfigSynchronization>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002496:	f000 fa81 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800249a:	bf00      	nop
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000b10 	.word	0x20000b10
 80024a8:	40000c00 	.word	0x40000c00

080024ac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b2:	463b      	mov	r3, r7
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <MX_TIM6_Init+0x64>)
 80024bc:	4a15      	ldr	r2, [pc, #84]	; (8002514 <MX_TIM6_Init+0x68>)
 80024be:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 80024c0:	4b13      	ldr	r3, [pc, #76]	; (8002510 <MX_TIM6_Init+0x64>)
 80024c2:	2231      	movs	r2, #49	; 0x31
 80024c4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c6:	4b12      	ldr	r3, [pc, #72]	; (8002510 <MX_TIM6_Init+0x64>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 80024cc:	4b10      	ldr	r3, [pc, #64]	; (8002510 <MX_TIM6_Init+0x64>)
 80024ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80024d2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <MX_TIM6_Init+0x64>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80024da:	480d      	ldr	r0, [pc, #52]	; (8002510 <MX_TIM6_Init+0x64>)
 80024dc:	f002 fb1c 	bl	8004b18 <HAL_TIM_Base_Init>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80024e6:	f000 fa59 	bl	800299c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80024f2:	463b      	mov	r3, r7
 80024f4:	4619      	mov	r1, r3
 80024f6:	4806      	ldr	r0, [pc, #24]	; (8002510 <MX_TIM6_Init+0x64>)
 80024f8:	f003 f982 	bl	8005800 <HAL_TIMEx_MasterConfigSynchronization>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002502:	f000 fa4b 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000c30 	.word	0x20000c30
 8002514:	40001000 	.word	0x40001000

08002518 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800251e:	f107 0308 	add.w	r3, r7, #8
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800252c:	463b      	mov	r3, r7
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002534:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <MX_TIM8_Init+0x98>)
 8002536:	4a1f      	ldr	r2, [pc, #124]	; (80025b4 <MX_TIM8_Init+0x9c>)
 8002538:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800253a:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <MX_TIM8_Init+0x98>)
 800253c:	2200      	movs	r2, #0
 800253e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002540:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <MX_TIM8_Init+0x98>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002546:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <MX_TIM8_Init+0x98>)
 8002548:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800254c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800254e:	4b18      	ldr	r3, [pc, #96]	; (80025b0 <MX_TIM8_Init+0x98>)
 8002550:	2200      	movs	r2, #0
 8002552:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002554:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <MX_TIM8_Init+0x98>)
 8002556:	2200      	movs	r2, #0
 8002558:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <MX_TIM8_Init+0x98>)
 800255c:	2200      	movs	r2, #0
 800255e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002560:	4813      	ldr	r0, [pc, #76]	; (80025b0 <MX_TIM8_Init+0x98>)
 8002562:	f002 fad9 	bl	8004b18 <HAL_TIM_Base_Init>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 800256c:	f000 fa16 	bl	800299c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002574:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002576:	f107 0308 	add.w	r3, r7, #8
 800257a:	4619      	mov	r1, r3
 800257c:	480c      	ldr	r0, [pc, #48]	; (80025b0 <MX_TIM8_Init+0x98>)
 800257e:	f002 fd67 	bl	8005050 <HAL_TIM_ConfigClockSource>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8002588:	f000 fa08 	bl	800299c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800258c:	2300      	movs	r3, #0
 800258e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002590:	2300      	movs	r3, #0
 8002592:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002594:	463b      	mov	r3, r7
 8002596:	4619      	mov	r1, r3
 8002598:	4805      	ldr	r0, [pc, #20]	; (80025b0 <MX_TIM8_Init+0x98>)
 800259a:	f003 f931 	bl	8005800 <HAL_TIMEx_MasterConfigSynchronization>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80025a4:	f000 f9fa 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80025a8:	bf00      	nop
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	200009f4 	.word	0x200009f4
 80025b4:	40010400 	.word	0x40010400

080025b8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08c      	sub	sp, #48	; 0x30
 80025bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025be:	f107 0320 	add.w	r3, r7, #32
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025cc:	1d3b      	adds	r3, r7, #4
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	60da      	str	r2, [r3, #12]
 80025d8:	611a      	str	r2, [r3, #16]
 80025da:	615a      	str	r2, [r3, #20]
 80025dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80025de:	4b26      	ldr	r3, [pc, #152]	; (8002678 <MX_TIM9_Init+0xc0>)
 80025e0:	4a26      	ldr	r2, [pc, #152]	; (800267c <MX_TIM9_Init+0xc4>)
 80025e2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 500-1;
 80025e4:	4b24      	ldr	r3, [pc, #144]	; (8002678 <MX_TIM9_Init+0xc0>)
 80025e6:	f240 12f3 	movw	r2, #499	; 0x1f3
 80025ea:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ec:	4b22      	ldr	r3, [pc, #136]	; (8002678 <MX_TIM9_Init+0xc0>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2000-1;
 80025f2:	4b21      	ldr	r3, [pc, #132]	; (8002678 <MX_TIM9_Init+0xc0>)
 80025f4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80025f8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025fa:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <MX_TIM9_Init+0xc0>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002600:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <MX_TIM9_Init+0xc0>)
 8002602:	2200      	movs	r2, #0
 8002604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002606:	481c      	ldr	r0, [pc, #112]	; (8002678 <MX_TIM9_Init+0xc0>)
 8002608:	f002 fa86 	bl	8004b18 <HAL_TIM_Base_Init>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 8002612:	f000 f9c3 	bl	800299c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800261a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800261c:	f107 0320 	add.w	r3, r7, #32
 8002620:	4619      	mov	r1, r3
 8002622:	4815      	ldr	r0, [pc, #84]	; (8002678 <MX_TIM9_Init+0xc0>)
 8002624:	f002 fd14 	bl	8005050 <HAL_TIM_ConfigClockSource>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 800262e:	f000 f9b5 	bl	800299c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002632:	4811      	ldr	r0, [pc, #68]	; (8002678 <MX_TIM9_Init+0xc0>)
 8002634:	f002 fb28 	bl	8004c88 <HAL_TIM_PWM_Init>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 800263e:	f000 f9ad 	bl	800299c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002642:	2360      	movs	r3, #96	; 0x60
 8002644:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002652:	1d3b      	adds	r3, r7, #4
 8002654:	2200      	movs	r2, #0
 8002656:	4619      	mov	r1, r3
 8002658:	4807      	ldr	r0, [pc, #28]	; (8002678 <MX_TIM9_Init+0xc0>)
 800265a:	f002 fc37 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8002664:	f000 f99a 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002668:	4803      	ldr	r0, [pc, #12]	; (8002678 <MX_TIM9_Init+0xc0>)
 800266a:	f000 fb27 	bl	8002cbc <HAL_TIM_MspPostInit>

}
 800266e:	bf00      	nop
 8002670:	3730      	adds	r7, #48	; 0x30
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000cc0 	.word	0x20000cc0
 800267c:	40014000 	.word	0x40014000

08002680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002684:	4b11      	ldr	r3, [pc, #68]	; (80026cc <MX_USART2_UART_Init+0x4c>)
 8002686:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <MX_USART2_UART_Init+0x50>)
 8002688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800268a:	4b10      	ldr	r3, [pc, #64]	; (80026cc <MX_USART2_UART_Init+0x4c>)
 800268c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <MX_USART2_UART_Init+0x4c>)
 8002694:	2200      	movs	r2, #0
 8002696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <MX_USART2_UART_Init+0x4c>)
 800269a:	2200      	movs	r2, #0
 800269c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800269e:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <MX_USART2_UART_Init+0x4c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026a4:	4b09      	ldr	r3, [pc, #36]	; (80026cc <MX_USART2_UART_Init+0x4c>)
 80026a6:	220c      	movs	r2, #12
 80026a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026aa:	4b08      	ldr	r3, [pc, #32]	; (80026cc <MX_USART2_UART_Init+0x4c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <MX_USART2_UART_Init+0x4c>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026b6:	4805      	ldr	r0, [pc, #20]	; (80026cc <MX_USART2_UART_Init+0x4c>)
 80026b8:	f003 f970 	bl	800599c <HAL_UART_Init>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026c2:	f000 f96b 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000d94 	.word	0x20000d94
 80026d0:	40004400 	.word	0x40004400

080026d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026d8:	4b11      	ldr	r3, [pc, #68]	; (8002720 <MX_USART3_UART_Init+0x4c>)
 80026da:	4a12      	ldr	r2, [pc, #72]	; (8002724 <MX_USART3_UART_Init+0x50>)
 80026dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026de:	4b10      	ldr	r3, [pc, #64]	; (8002720 <MX_USART3_UART_Init+0x4c>)
 80026e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026e6:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <MX_USART3_UART_Init+0x4c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <MX_USART3_UART_Init+0x4c>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <MX_USART3_UART_Init+0x4c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026f8:	4b09      	ldr	r3, [pc, #36]	; (8002720 <MX_USART3_UART_Init+0x4c>)
 80026fa:	220c      	movs	r2, #12
 80026fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <MX_USART3_UART_Init+0x4c>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <MX_USART3_UART_Init+0x4c>)
 8002706:	2200      	movs	r2, #0
 8002708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800270a:	4805      	ldr	r0, [pc, #20]	; (8002720 <MX_USART3_UART_Init+0x4c>)
 800270c:	f003 f946 	bl	800599c <HAL_UART_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002716:	f000 f941 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000a84 	.word	0x20000a84
 8002724:	40004800 	.word	0x40004800

08002728 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800272c:	4b11      	ldr	r3, [pc, #68]	; (8002774 <MX_USART6_UART_Init+0x4c>)
 800272e:	4a12      	ldr	r2, [pc, #72]	; (8002778 <MX_USART6_UART_Init+0x50>)
 8002730:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <MX_USART6_UART_Init+0x4c>)
 8002734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002738:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800273a:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <MX_USART6_UART_Init+0x4c>)
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <MX_USART6_UART_Init+0x4c>)
 8002742:	2200      	movs	r2, #0
 8002744:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002746:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <MX_USART6_UART_Init+0x4c>)
 8002748:	2200      	movs	r2, #0
 800274a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800274c:	4b09      	ldr	r3, [pc, #36]	; (8002774 <MX_USART6_UART_Init+0x4c>)
 800274e:	220c      	movs	r2, #12
 8002750:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002752:	4b08      	ldr	r3, [pc, #32]	; (8002774 <MX_USART6_UART_Init+0x4c>)
 8002754:	2200      	movs	r2, #0
 8002756:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <MX_USART6_UART_Init+0x4c>)
 800275a:	2200      	movs	r2, #0
 800275c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800275e:	4805      	ldr	r0, [pc, #20]	; (8002774 <MX_USART6_UART_Init+0x4c>)
 8002760:	f003 f91c 	bl	800599c <HAL_UART_Init>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800276a:	f000 f917 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000d08 	.word	0x20000d08
 8002778:	40011400 	.word	0x40011400

0800277c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08c      	sub	sp, #48	; 0x30
 8002780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002782:	f107 031c 	add.w	r3, r7, #28
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	605a      	str	r2, [r3, #4]
 800278c:	609a      	str	r2, [r3, #8]
 800278e:	60da      	str	r2, [r3, #12]
 8002790:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	4b7b      	ldr	r3, [pc, #492]	; (8002984 <MX_GPIO_Init+0x208>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a7a      	ldr	r2, [pc, #488]	; (8002984 <MX_GPIO_Init+0x208>)
 800279c:	f043 0310 	orr.w	r3, r3, #16
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b78      	ldr	r3, [pc, #480]	; (8002984 <MX_GPIO_Init+0x208>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	61bb      	str	r3, [r7, #24]
 80027ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	4b74      	ldr	r3, [pc, #464]	; (8002984 <MX_GPIO_Init+0x208>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	4a73      	ldr	r2, [pc, #460]	; (8002984 <MX_GPIO_Init+0x208>)
 80027b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027bc:	6313      	str	r3, [r2, #48]	; 0x30
 80027be:	4b71      	ldr	r3, [pc, #452]	; (8002984 <MX_GPIO_Init+0x208>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	4b6d      	ldr	r3, [pc, #436]	; (8002984 <MX_GPIO_Init+0x208>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	4a6c      	ldr	r2, [pc, #432]	; (8002984 <MX_GPIO_Init+0x208>)
 80027d4:	f043 0304 	orr.w	r3, r3, #4
 80027d8:	6313      	str	r3, [r2, #48]	; 0x30
 80027da:	4b6a      	ldr	r3, [pc, #424]	; (8002984 <MX_GPIO_Init+0x208>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	4b66      	ldr	r3, [pc, #408]	; (8002984 <MX_GPIO_Init+0x208>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a65      	ldr	r2, [pc, #404]	; (8002984 <MX_GPIO_Init+0x208>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b63      	ldr	r3, [pc, #396]	; (8002984 <MX_GPIO_Init+0x208>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	4b5f      	ldr	r3, [pc, #380]	; (8002984 <MX_GPIO_Init+0x208>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a5e      	ldr	r2, [pc, #376]	; (8002984 <MX_GPIO_Init+0x208>)
 800280c:	f043 0302 	orr.w	r3, r3, #2
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b5c      	ldr	r3, [pc, #368]	; (8002984 <MX_GPIO_Init+0x208>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	4b58      	ldr	r3, [pc, #352]	; (8002984 <MX_GPIO_Init+0x208>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a57      	ldr	r2, [pc, #348]	; (8002984 <MX_GPIO_Init+0x208>)
 8002828:	f043 0308 	orr.w	r3, r3, #8
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b55      	ldr	r3, [pc, #340]	; (8002984 <MX_GPIO_Init+0x208>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WiFi_OK_Pin|DC_Salon_1_Pin|DC_Salon_2_Pin|L_Cocina_Pin
 800283a:	2200      	movs	r2, #0
 800283c:	f641 4131 	movw	r1, #7217	; 0x1c31
 8002840:	4851      	ldr	r0, [pc, #324]	; (8002988 <MX_GPIO_Init+0x20c>)
 8002842:	f001 fcc3 	bl	80041cc <HAL_GPIO_WritePin>
                          |L_Garaje_Pin|L_Tendedero_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DHT22_Pin|DHT11_Pin, GPIO_PIN_RESET);
 8002846:	2200      	movs	r2, #0
 8002848:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800284c:	484f      	ldr	r0, [pc, #316]	; (800298c <MX_GPIO_Init+0x210>)
 800284e:	f001 fcbd 	bl	80041cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Riego_Pin|Peltier_Pin|L_Espejo_Pin|L_Izquierda_Pin
 8002852:	2200      	movs	r2, #0
 8002854:	f24a 0178 	movw	r1, #41080	; 0xa078
 8002858:	484d      	ldr	r0, [pc, #308]	; (8002990 <MX_GPIO_Init+0x214>)
 800285a:	f001 fcb7 	bl	80041cc <HAL_GPIO_WritePin>
                          |L_Oficina_Pin|L_Derecha_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L_Fregadero_GPIO_Port, L_Fregadero_Pin, GPIO_PIN_RESET);
 800285e:	2200      	movs	r2, #0
 8002860:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002864:	484b      	ldr	r0, [pc, #300]	; (8002994 <MX_GPIO_Init+0x218>)
 8002866:	f001 fcb1 	bl	80041cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, L_Recibidor_Pin|L_Comedor_Pin|L_Jardin_Pin|L_Sala_Pin
 800286a:	2200      	movs	r2, #0
 800286c:	21ff      	movs	r1, #255	; 0xff
 800286e:	484a      	ldr	r0, [pc, #296]	; (8002998 <MX_GPIO_Init+0x21c>)
 8002870:	f001 fcac 	bl	80041cc <HAL_GPIO_WritePin>
                          |L_Porche_Pin|L_Ambiente_Pin|L_Bano_Pin|L_Dormitorio_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : B_Stop_Pin Fin_Servo_Pin */
  GPIO_InitStruct.Pin = B_Stop_Pin|Fin_Servo_Pin;
 8002874:	2314      	movs	r3, #20
 8002876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002878:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800287c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002882:	f107 031c 	add.w	r3, r7, #28
 8002886:	4619      	mov	r1, r3
 8002888:	4840      	ldr	r0, [pc, #256]	; (800298c <MX_GPIO_Init+0x210>)
 800288a:	f001 faeb 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : S_Int_Pin B_Timbre_Pin S_Ext_Pin */
  GPIO_InitStruct.Pin = S_Int_Pin|B_Timbre_Pin|S_Ext_Pin;
 800288e:	230b      	movs	r3, #11
 8002890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002892:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002898:	2301      	movs	r3, #1
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800289c:	f107 031c 	add.w	r3, r7, #28
 80028a0:	4619      	mov	r1, r3
 80028a2:	483a      	ldr	r0, [pc, #232]	; (800298c <MX_GPIO_Init+0x210>)
 80028a4:	f001 fade 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : WiFi_OK_Pin DC_Salon_1_Pin DC_Salon_2_Pin L_Cocina_Pin
                           L_Garaje_Pin L_Tendedero_Pin */
  GPIO_InitStruct.Pin = WiFi_OK_Pin|DC_Salon_1_Pin|DC_Salon_2_Pin|L_Cocina_Pin
 80028a8:	f641 4331 	movw	r3, #7217	; 0x1c31
 80028ac:	61fb      	str	r3, [r7, #28]
                          |L_Garaje_Pin|L_Tendedero_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ae:	2301      	movs	r3, #1
 80028b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b6:	2300      	movs	r3, #0
 80028b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ba:	f107 031c 	add.w	r3, r7, #28
 80028be:	4619      	mov	r1, r3
 80028c0:	4831      	ldr	r0, [pc, #196]	; (8002988 <MX_GPIO_Init+0x20c>)
 80028c2:	f001 facf 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT22_Pin DHT11_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin|DHT11_Pin;
 80028c6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80028ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028cc:	2301      	movs	r3, #1
 80028ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d4:	2300      	movs	r3, #0
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028d8:	f107 031c 	add.w	r3, r7, #28
 80028dc:	4619      	mov	r1, r3
 80028de:	482b      	ldr	r0, [pc, #172]	; (800298c <MX_GPIO_Init+0x210>)
 80028e0:	f001 fac0 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Riego_Pin Peltier_Pin L_Espejo_Pin L_Izquierda_Pin
                           L_Oficina_Pin L_Derecha_Pin */
  GPIO_InitStruct.Pin = Riego_Pin|Peltier_Pin|L_Espejo_Pin|L_Izquierda_Pin
 80028e4:	f24a 0378 	movw	r3, #41080	; 0xa078
 80028e8:	61fb      	str	r3, [r7, #28]
                          |L_Oficina_Pin|L_Derecha_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ea:	2301      	movs	r3, #1
 80028ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f2:	2300      	movs	r3, #0
 80028f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f6:	f107 031c 	add.w	r3, r7, #28
 80028fa:	4619      	mov	r1, r3
 80028fc:	4824      	ldr	r0, [pc, #144]	; (8002990 <MX_GPIO_Init+0x214>)
 80028fe:	f001 fab1 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_Fregadero_Pin */
  GPIO_InitStruct.Pin = L_Fregadero_Pin;
 8002902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002908:	2301      	movs	r3, #1
 800290a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002910:	2300      	movs	r3, #0
 8002912:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(L_Fregadero_GPIO_Port, &GPIO_InitStruct);
 8002914:	f107 031c 	add.w	r3, r7, #28
 8002918:	4619      	mov	r1, r3
 800291a:	481e      	ldr	r0, [pc, #120]	; (8002994 <MX_GPIO_Init+0x218>)
 800291c:	f001 faa2 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_Recibidor_Pin L_Comedor_Pin L_Jardin_Pin L_Sala_Pin
                           L_Porche_Pin L_Ambiente_Pin L_Bano_Pin L_Dormitorio_Pin */
  GPIO_InitStruct.Pin = L_Recibidor_Pin|L_Comedor_Pin|L_Jardin_Pin|L_Sala_Pin
 8002920:	23ff      	movs	r3, #255	; 0xff
 8002922:	61fb      	str	r3, [r7, #28]
                          |L_Porche_Pin|L_Ambiente_Pin|L_Bano_Pin|L_Dormitorio_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002924:	2301      	movs	r3, #1
 8002926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292c:	2300      	movs	r3, #0
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002930:	f107 031c 	add.w	r3, r7, #28
 8002934:	4619      	mov	r1, r3
 8002936:	4818      	ldr	r0, [pc, #96]	; (8002998 <MX_GPIO_Init+0x21c>)
 8002938:	f001 fa94 	bl	8003e64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800293c:	2200      	movs	r2, #0
 800293e:	2100      	movs	r1, #0
 8002940:	2006      	movs	r0, #6
 8002942:	f001 f9c6 	bl	8003cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002946:	2006      	movs	r0, #6
 8002948:	f001 f9df 	bl	8003d0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800294c:	2200      	movs	r2, #0
 800294e:	2100      	movs	r1, #0
 8002950:	2007      	movs	r0, #7
 8002952:	f001 f9be 	bl	8003cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002956:	2007      	movs	r0, #7
 8002958:	f001 f9d7 	bl	8003d0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800295c:	2200      	movs	r2, #0
 800295e:	2100      	movs	r1, #0
 8002960:	2009      	movs	r0, #9
 8002962:	f001 f9b6 	bl	8003cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002966:	2009      	movs	r0, #9
 8002968:	f001 f9cf 	bl	8003d0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800296c:	2200      	movs	r2, #0
 800296e:	2100      	movs	r1, #0
 8002970:	200a      	movs	r0, #10
 8002972:	f001 f9ae 	bl	8003cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002976:	200a      	movs	r0, #10
 8002978:	f001 f9c7 	bl	8003d0a <HAL_NVIC_EnableIRQ>

}
 800297c:	bf00      	nop
 800297e:	3730      	adds	r7, #48	; 0x30
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40023800 	.word	0x40023800
 8002988:	40020800 	.word	0x40020800
 800298c:	40021000 	.word	0x40021000
 8002990:	40020400 	.word	0x40020400
 8002994:	40020000 	.word	0x40020000
 8002998:	40020c00 	.word	0x40020c00

0800299c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029a0:	b672      	cpsid	i
}
 80029a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029a4:	e7fe      	b.n	80029a4 <Error_Handler+0x8>
	...

080029a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]
 80029b2:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <HAL_MspInit+0x4c>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	4a0f      	ldr	r2, [pc, #60]	; (80029f4 <HAL_MspInit+0x4c>)
 80029b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029bc:	6453      	str	r3, [r2, #68]	; 0x44
 80029be:	4b0d      	ldr	r3, [pc, #52]	; (80029f4 <HAL_MspInit+0x4c>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c6:	607b      	str	r3, [r7, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	603b      	str	r3, [r7, #0]
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <HAL_MspInit+0x4c>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	4a08      	ldr	r2, [pc, #32]	; (80029f4 <HAL_MspInit+0x4c>)
 80029d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d8:	6413      	str	r3, [r2, #64]	; 0x40
 80029da:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <HAL_MspInit+0x4c>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80029e6:	2007      	movs	r0, #7
 80029e8:	f001 f968 	bl	8003cbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40023800 	.word	0x40023800

080029f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08e      	sub	sp, #56	; 0x38
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a45      	ldr	r2, [pc, #276]	; (8002b2c <HAL_ADC_MspInit+0x134>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d128      	bne.n	8002a6c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	623b      	str	r3, [r7, #32]
 8002a1e:	4b44      	ldr	r3, [pc, #272]	; (8002b30 <HAL_ADC_MspInit+0x138>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	4a43      	ldr	r2, [pc, #268]	; (8002b30 <HAL_ADC_MspInit+0x138>)
 8002a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a28:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2a:	4b41      	ldr	r3, [pc, #260]	; (8002b30 <HAL_ADC_MspInit+0x138>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a32:	623b      	str	r3, [r7, #32]
 8002a34:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	4b3d      	ldr	r3, [pc, #244]	; (8002b30 <HAL_ADC_MspInit+0x138>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	4a3c      	ldr	r2, [pc, #240]	; (8002b30 <HAL_ADC_MspInit+0x138>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6313      	str	r3, [r2, #48]	; 0x30
 8002a46:	4b3a      	ldr	r3, [pc, #232]	; (8002b30 <HAL_ADC_MspInit+0x138>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	61fb      	str	r3, [r7, #28]
 8002a50:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = LDR_Pin;
 8002a52:	2310      	movs	r3, #16
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a56:	2303      	movs	r3, #3
 8002a58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 8002a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a62:	4619      	mov	r1, r3
 8002a64:	4833      	ldr	r0, [pc, #204]	; (8002b34 <HAL_ADC_MspInit+0x13c>)
 8002a66:	f001 f9fd 	bl	8003e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002a6a:	e05a      	b.n	8002b22 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a31      	ldr	r2, [pc, #196]	; (8002b38 <HAL_ADC_MspInit+0x140>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d128      	bne.n	8002ac8 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	61bb      	str	r3, [r7, #24]
 8002a7a:	4b2d      	ldr	r3, [pc, #180]	; (8002b30 <HAL_ADC_MspInit+0x138>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	4a2c      	ldr	r2, [pc, #176]	; (8002b30 <HAL_ADC_MspInit+0x138>)
 8002a80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a84:	6453      	str	r3, [r2, #68]	; 0x44
 8002a86:	4b2a      	ldr	r3, [pc, #168]	; (8002b30 <HAL_ADC_MspInit+0x138>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a8e:	61bb      	str	r3, [r7, #24]
 8002a90:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	4b26      	ldr	r3, [pc, #152]	; (8002b30 <HAL_ADC_MspInit+0x138>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	4a25      	ldr	r2, [pc, #148]	; (8002b30 <HAL_ADC_MspInit+0x138>)
 8002a9c:	f043 0302 	orr.w	r3, r3, #2
 8002aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa2:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <HAL_ADC_MspInit+0x138>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = HW_390_Pin;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HW_390_GPIO_Port, &GPIO_InitStruct);
 8002aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002abe:	4619      	mov	r1, r3
 8002ac0:	481e      	ldr	r0, [pc, #120]	; (8002b3c <HAL_ADC_MspInit+0x144>)
 8002ac2:	f001 f9cf 	bl	8003e64 <HAL_GPIO_Init>
}
 8002ac6:	e02c      	b.n	8002b22 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a1c      	ldr	r2, [pc, #112]	; (8002b40 <HAL_ADC_MspInit+0x148>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d127      	bne.n	8002b22 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <HAL_ADC_MspInit+0x138>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	4a15      	ldr	r2, [pc, #84]	; (8002b30 <HAL_ADC_MspInit+0x138>)
 8002adc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ae2:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <HAL_ADC_MspInit+0x138>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <HAL_ADC_MspInit+0x138>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	4a0e      	ldr	r2, [pc, #56]	; (8002b30 <HAL_ADC_MspInit+0x138>)
 8002af8:	f043 0304 	orr.w	r3, r3, #4
 8002afc:	6313      	str	r3, [r2, #48]	; 0x30
 8002afe:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <HAL_ADC_MspInit+0x138>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Lluvia_Pin;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Lluvia_GPIO_Port, &GPIO_InitStruct);
 8002b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4809      	ldr	r0, [pc, #36]	; (8002b44 <HAL_ADC_MspInit+0x14c>)
 8002b1e:	f001 f9a1 	bl	8003e64 <HAL_GPIO_Init>
}
 8002b22:	bf00      	nop
 8002b24:	3738      	adds	r7, #56	; 0x38
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40012000 	.word	0x40012000
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40020000 	.word	0x40020000
 8002b38:	40012100 	.word	0x40012100
 8002b3c:	40020400 	.word	0x40020400
 8002b40:	40012200 	.word	0x40012200
 8002b44:	40020800 	.word	0x40020800

08002b48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b08b      	sub	sp, #44	; 0x2c
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a51      	ldr	r2, [pc, #324]	; (8002c9c <HAL_TIM_Base_MspInit+0x154>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d10e      	bne.n	8002b78 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5e:	4b50      	ldr	r3, [pc, #320]	; (8002ca0 <HAL_TIM_Base_MspInit+0x158>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	4a4f      	ldr	r2, [pc, #316]	; (8002ca0 <HAL_TIM_Base_MspInit+0x158>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	6453      	str	r3, [r2, #68]	; 0x44
 8002b6a:	4b4d      	ldr	r3, [pc, #308]	; (8002ca0 <HAL_TIM_Base_MspInit+0x158>)
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	627b      	str	r3, [r7, #36]	; 0x24
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002b76:	e08a      	b.n	8002c8e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM2)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b80:	d10e      	bne.n	8002ba0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	623b      	str	r3, [r7, #32]
 8002b86:	4b46      	ldr	r3, [pc, #280]	; (8002ca0 <HAL_TIM_Base_MspInit+0x158>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	4a45      	ldr	r2, [pc, #276]	; (8002ca0 <HAL_TIM_Base_MspInit+0x158>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	6413      	str	r3, [r2, #64]	; 0x40
 8002b92:	4b43      	ldr	r3, [pc, #268]	; (8002ca0 <HAL_TIM_Base_MspInit+0x158>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	623b      	str	r3, [r7, #32]
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
}
 8002b9e:	e076      	b.n	8002c8e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM3)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a3f      	ldr	r2, [pc, #252]	; (8002ca4 <HAL_TIM_Base_MspInit+0x15c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d10e      	bne.n	8002bc8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	4b3c      	ldr	r3, [pc, #240]	; (8002ca0 <HAL_TIM_Base_MspInit+0x158>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	4a3b      	ldr	r2, [pc, #236]	; (8002ca0 <HAL_TIM_Base_MspInit+0x158>)
 8002bb4:	f043 0302 	orr.w	r3, r3, #2
 8002bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bba:	4b39      	ldr	r3, [pc, #228]	; (8002ca0 <HAL_TIM_Base_MspInit+0x158>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	61fb      	str	r3, [r7, #28]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
}
 8002bc6:	e062      	b.n	8002c8e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM4)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a36      	ldr	r2, [pc, #216]	; (8002ca8 <HAL_TIM_Base_MspInit+0x160>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d10e      	bne.n	8002bf0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
 8002bd6:	4b32      	ldr	r3, [pc, #200]	; (8002ca0 <HAL_TIM_Base_MspInit+0x158>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	4a31      	ldr	r2, [pc, #196]	; (8002ca0 <HAL_TIM_Base_MspInit+0x158>)
 8002bdc:	f043 0304 	orr.w	r3, r3, #4
 8002be0:	6413      	str	r3, [r2, #64]	; 0x40
 8002be2:	4b2f      	ldr	r3, [pc, #188]	; (8002ca0 <HAL_TIM_Base_MspInit+0x158>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	61bb      	str	r3, [r7, #24]
 8002bec:	69bb      	ldr	r3, [r7, #24]
}
 8002bee:	e04e      	b.n	8002c8e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM5)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a2d      	ldr	r2, [pc, #180]	; (8002cac <HAL_TIM_Base_MspInit+0x164>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d10e      	bne.n	8002c18 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	4b28      	ldr	r3, [pc, #160]	; (8002ca0 <HAL_TIM_Base_MspInit+0x158>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	4a27      	ldr	r2, [pc, #156]	; (8002ca0 <HAL_TIM_Base_MspInit+0x158>)
 8002c04:	f043 0308 	orr.w	r3, r3, #8
 8002c08:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0a:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <HAL_TIM_Base_MspInit+0x158>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	697b      	ldr	r3, [r7, #20]
}
 8002c16:	e03a      	b.n	8002c8e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM6)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a24      	ldr	r2, [pc, #144]	; (8002cb0 <HAL_TIM_Base_MspInit+0x168>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10e      	bne.n	8002c40 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <HAL_TIM_Base_MspInit+0x158>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	4a1d      	ldr	r2, [pc, #116]	; (8002ca0 <HAL_TIM_Base_MspInit+0x158>)
 8002c2c:	f043 0310 	orr.w	r3, r3, #16
 8002c30:	6413      	str	r3, [r2, #64]	; 0x40
 8002c32:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_TIM_Base_MspInit+0x158>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	693b      	ldr	r3, [r7, #16]
}
 8002c3e:	e026      	b.n	8002c8e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM8)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a1b      	ldr	r2, [pc, #108]	; (8002cb4 <HAL_TIM_Base_MspInit+0x16c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d10e      	bne.n	8002c68 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <HAL_TIM_Base_MspInit+0x158>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	4a13      	ldr	r2, [pc, #76]	; (8002ca0 <HAL_TIM_Base_MspInit+0x158>)
 8002c54:	f043 0302 	orr.w	r3, r3, #2
 8002c58:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5a:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <HAL_TIM_Base_MspInit+0x158>)
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
}
 8002c66:	e012      	b.n	8002c8e <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM9)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a12      	ldr	r2, [pc, #72]	; (8002cb8 <HAL_TIM_Base_MspInit+0x170>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d10d      	bne.n	8002c8e <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_TIM_Base_MspInit+0x158>)
 8002c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7a:	4a09      	ldr	r2, [pc, #36]	; (8002ca0 <HAL_TIM_Base_MspInit+0x158>)
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c80:	6453      	str	r3, [r2, #68]	; 0x44
 8002c82:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <HAL_TIM_Base_MspInit+0x158>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
}
 8002c8e:	bf00      	nop
 8002c90:	372c      	adds	r7, #44	; 0x2c
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40010000 	.word	0x40010000
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40000400 	.word	0x40000400
 8002ca8:	40000800 	.word	0x40000800
 8002cac:	40000c00 	.word	0x40000c00
 8002cb0:	40001000 	.word	0x40001000
 8002cb4:	40010400 	.word	0x40010400
 8002cb8:	40014000 	.word	0x40014000

08002cbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08e      	sub	sp, #56	; 0x38
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
 8002cd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a7a      	ldr	r2, [pc, #488]	; (8002ec4 <HAL_TIM_MspPostInit+0x208>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d11f      	bne.n	8002d1e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	623b      	str	r3, [r7, #32]
 8002ce2:	4b79      	ldr	r3, [pc, #484]	; (8002ec8 <HAL_TIM_MspPostInit+0x20c>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	4a78      	ldr	r2, [pc, #480]	; (8002ec8 <HAL_TIM_MspPostInit+0x20c>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6313      	str	r3, [r2, #48]	; 0x30
 8002cee:	4b76      	ldr	r3, [pc, #472]	; (8002ec8 <HAL_TIM_MspPostInit+0x20c>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	623b      	str	r3, [r7, #32]
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = L_GamingG_Pin|L_GamingR_Pin|L_GamingB_Pin;
 8002cfa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d00:	2302      	movs	r3, #2
 8002d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d14:	4619      	mov	r1, r3
 8002d16:	486d      	ldr	r0, [pc, #436]	; (8002ecc <HAL_TIM_MspPostInit+0x210>)
 8002d18:	f001 f8a4 	bl	8003e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002d1c:	e0cd      	b.n	8002eba <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM2)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d26:	d13d      	bne.n	8002da4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61fb      	str	r3, [r7, #28]
 8002d2c:	4b66      	ldr	r3, [pc, #408]	; (8002ec8 <HAL_TIM_MspPostInit+0x20c>)
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	4a65      	ldr	r2, [pc, #404]	; (8002ec8 <HAL_TIM_MspPostInit+0x20c>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6313      	str	r3, [r2, #48]	; 0x30
 8002d38:	4b63      	ldr	r3, [pc, #396]	; (8002ec8 <HAL_TIM_MspPostInit+0x20c>)
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	61fb      	str	r3, [r7, #28]
 8002d42:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d44:	2300      	movs	r3, #0
 8002d46:	61bb      	str	r3, [r7, #24]
 8002d48:	4b5f      	ldr	r3, [pc, #380]	; (8002ec8 <HAL_TIM_MspPostInit+0x20c>)
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	4a5e      	ldr	r2, [pc, #376]	; (8002ec8 <HAL_TIM_MspPostInit+0x20c>)
 8002d4e:	f043 0302 	orr.w	r3, r3, #2
 8002d52:	6313      	str	r3, [r2, #48]	; 0x30
 8002d54:	4b5c      	ldr	r3, [pc, #368]	; (8002ec8 <HAL_TIM_MspPostInit+0x20c>)
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	61bb      	str	r3, [r7, #24]
 8002d5e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = S_Parcela_Pin|S_Garaje_Pin;
 8002d60:	2303      	movs	r3, #3
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	2302      	movs	r3, #2
 8002d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d70:	2301      	movs	r3, #1
 8002d72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4854      	ldr	r0, [pc, #336]	; (8002ecc <HAL_TIM_MspPostInit+0x210>)
 8002d7c:	f001 f872 	bl	8003e64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S_Tendedero_Pin;
 8002d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d86:	2302      	movs	r3, #2
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d92:	2301      	movs	r3, #1
 8002d94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(S_Tendedero_GPIO_Port, &GPIO_InitStruct);
 8002d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	484c      	ldr	r0, [pc, #304]	; (8002ed0 <HAL_TIM_MspPostInit+0x214>)
 8002d9e:	f001 f861 	bl	8003e64 <HAL_GPIO_Init>
}
 8002da2:	e08a      	b.n	8002eba <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM3)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a4a      	ldr	r2, [pc, #296]	; (8002ed4 <HAL_TIM_MspPostInit+0x218>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d13d      	bne.n	8002e2a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	4b45      	ldr	r3, [pc, #276]	; (8002ec8 <HAL_TIM_MspPostInit+0x20c>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4a44      	ldr	r2, [pc, #272]	; (8002ec8 <HAL_TIM_MspPostInit+0x20c>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbe:	4b42      	ldr	r3, [pc, #264]	; (8002ec8 <HAL_TIM_MspPostInit+0x20c>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	4b3e      	ldr	r3, [pc, #248]	; (8002ec8 <HAL_TIM_MspPostInit+0x20c>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	4a3d      	ldr	r2, [pc, #244]	; (8002ec8 <HAL_TIM_MspPostInit+0x20c>)
 8002dd4:	f043 0304 	orr.w	r3, r3, #4
 8002dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dda:	4b3b      	ldr	r3, [pc, #236]	; (8002ec8 <HAL_TIM_MspPostInit+0x20c>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = S_Dormitorio_Pin;
 8002de6:	2380      	movs	r3, #128	; 0x80
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dea:	2302      	movs	r3, #2
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df2:	2300      	movs	r3, #0
 8002df4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002df6:	2302      	movs	r3, #2
 8002df8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(S_Dormitorio_GPIO_Port, &GPIO_InitStruct);
 8002dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4832      	ldr	r0, [pc, #200]	; (8002ecc <HAL_TIM_MspPostInit+0x210>)
 8002e02:	f001 f82f 	bl	8003e64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S_Oficina_Pin|S_Salon_Pin;
 8002e06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e10:	2300      	movs	r3, #0
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e14:	2300      	movs	r3, #0
 8002e16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e20:	4619      	mov	r1, r3
 8002e22:	482d      	ldr	r0, [pc, #180]	; (8002ed8 <HAL_TIM_MspPostInit+0x21c>)
 8002e24:	f001 f81e 	bl	8003e64 <HAL_GPIO_Init>
}
 8002e28:	e047      	b.n	8002eba <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM4)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a2b      	ldr	r2, [pc, #172]	; (8002edc <HAL_TIM_MspPostInit+0x220>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d11f      	bne.n	8002e74 <HAL_TIM_MspPostInit+0x1b8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <HAL_TIM_MspPostInit+0x20c>)
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	4a22      	ldr	r2, [pc, #136]	; (8002ec8 <HAL_TIM_MspPostInit+0x20c>)
 8002e3e:	f043 0308 	orr.w	r3, r3, #8
 8002e42:	6313      	str	r3, [r2, #48]	; 0x30
 8002e44:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <HAL_TIM_MspPostInit+0x20c>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Z_Timbre_Pin;
 8002e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e56:	2302      	movs	r3, #2
 8002e58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e62:	2302      	movs	r3, #2
 8002e64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Z_Timbre_GPIO_Port, &GPIO_InitStruct);
 8002e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	481c      	ldr	r0, [pc, #112]	; (8002ee0 <HAL_TIM_MspPostInit+0x224>)
 8002e6e:	f000 fff9 	bl	8003e64 <HAL_GPIO_Init>
}
 8002e72:	e022      	b.n	8002eba <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM9)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a1a      	ldr	r2, [pc, #104]	; (8002ee4 <HAL_TIM_MspPostInit+0x228>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d11d      	bne.n	8002eba <HAL_TIM_MspPostInit+0x1fe>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <HAL_TIM_MspPostInit+0x20c>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a10      	ldr	r2, [pc, #64]	; (8002ec8 <HAL_TIM_MspPostInit+0x20c>)
 8002e88:	f043 0310 	orr.w	r3, r3, #16
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <HAL_TIM_MspPostInit+0x20c>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e9a:	2320      	movs	r3, #32
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	480c      	ldr	r0, [pc, #48]	; (8002ee8 <HAL_TIM_MspPostInit+0x22c>)
 8002eb6:	f000 ffd5 	bl	8003e64 <HAL_GPIO_Init>
}
 8002eba:	bf00      	nop
 8002ebc:	3738      	adds	r7, #56	; 0x38
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40010000 	.word	0x40010000
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40020000 	.word	0x40020000
 8002ed0:	40020400 	.word	0x40020400
 8002ed4:	40000400 	.word	0x40000400
 8002ed8:	40020800 	.word	0x40020800
 8002edc:	40000800 	.word	0x40000800
 8002ee0:	40020c00 	.word	0x40020c00
 8002ee4:	40014000 	.word	0x40014000
 8002ee8:	40021000 	.word	0x40021000

08002eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08e      	sub	sp, #56	; 0x38
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a63      	ldr	r2, [pc, #396]	; (8003098 <HAL_UART_MspInit+0x1ac>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d134      	bne.n	8002f78 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	623b      	str	r3, [r7, #32]
 8002f12:	4b62      	ldr	r3, [pc, #392]	; (800309c <HAL_UART_MspInit+0x1b0>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	4a61      	ldr	r2, [pc, #388]	; (800309c <HAL_UART_MspInit+0x1b0>)
 8002f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1e:	4b5f      	ldr	r3, [pc, #380]	; (800309c <HAL_UART_MspInit+0x1b0>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	623b      	str	r3, [r7, #32]
 8002f28:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	4b5b      	ldr	r3, [pc, #364]	; (800309c <HAL_UART_MspInit+0x1b0>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	4a5a      	ldr	r2, [pc, #360]	; (800309c <HAL_UART_MspInit+0x1b0>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3a:	4b58      	ldr	r3, [pc, #352]	; (800309c <HAL_UART_MspInit+0x1b0>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	61fb      	str	r3, [r7, #28]
 8002f44:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f46:	230c      	movs	r3, #12
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f52:	2303      	movs	r3, #3
 8002f54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f56:	2307      	movs	r3, #7
 8002f58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f5e:	4619      	mov	r1, r3
 8002f60:	484f      	ldr	r0, [pc, #316]	; (80030a0 <HAL_UART_MspInit+0x1b4>)
 8002f62:	f000 ff7f 	bl	8003e64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f66:	2200      	movs	r2, #0
 8002f68:	2100      	movs	r1, #0
 8002f6a:	2026      	movs	r0, #38	; 0x26
 8002f6c:	f000 feb1 	bl	8003cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f70:	2026      	movs	r0, #38	; 0x26
 8002f72:	f000 feca 	bl	8003d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002f76:	e08a      	b.n	800308e <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART3)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a49      	ldr	r2, [pc, #292]	; (80030a4 <HAL_UART_MspInit+0x1b8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d14c      	bne.n	800301c <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	4b45      	ldr	r3, [pc, #276]	; (800309c <HAL_UART_MspInit+0x1b0>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	4a44      	ldr	r2, [pc, #272]	; (800309c <HAL_UART_MspInit+0x1b0>)
 8002f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f90:	6413      	str	r3, [r2, #64]	; 0x40
 8002f92:	4b42      	ldr	r3, [pc, #264]	; (800309c <HAL_UART_MspInit+0x1b0>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f9a:	61bb      	str	r3, [r7, #24]
 8002f9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	4b3e      	ldr	r3, [pc, #248]	; (800309c <HAL_UART_MspInit+0x1b0>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	4a3d      	ldr	r2, [pc, #244]	; (800309c <HAL_UART_MspInit+0x1b0>)
 8002fa8:	f043 0302 	orr.w	r3, r3, #2
 8002fac:	6313      	str	r3, [r2, #48]	; 0x30
 8002fae:	4b3b      	ldr	r3, [pc, #236]	; (800309c <HAL_UART_MspInit+0x1b0>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	4b37      	ldr	r3, [pc, #220]	; (800309c <HAL_UART_MspInit+0x1b0>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	4a36      	ldr	r2, [pc, #216]	; (800309c <HAL_UART_MspInit+0x1b0>)
 8002fc4:	f043 0308 	orr.w	r3, r3, #8
 8002fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fca:	4b34      	ldr	r3, [pc, #208]	; (800309c <HAL_UART_MspInit+0x1b0>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	613b      	str	r3, [r7, #16]
 8002fd4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002fd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fe8:	2307      	movs	r3, #7
 8002fea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	482d      	ldr	r0, [pc, #180]	; (80030a8 <HAL_UART_MspInit+0x1bc>)
 8002ff4:	f000 ff36 	bl	8003e64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ff8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffe:	2302      	movs	r3, #2
 8003000:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003002:	2300      	movs	r3, #0
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003006:	2303      	movs	r3, #3
 8003008:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800300a:	2307      	movs	r3, #7
 800300c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800300e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003012:	4619      	mov	r1, r3
 8003014:	4825      	ldr	r0, [pc, #148]	; (80030ac <HAL_UART_MspInit+0x1c0>)
 8003016:	f000 ff25 	bl	8003e64 <HAL_GPIO_Init>
}
 800301a:	e038      	b.n	800308e <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART6)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a23      	ldr	r2, [pc, #140]	; (80030b0 <HAL_UART_MspInit+0x1c4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d133      	bne.n	800308e <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	4b1c      	ldr	r3, [pc, #112]	; (800309c <HAL_UART_MspInit+0x1b0>)
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	4a1b      	ldr	r2, [pc, #108]	; (800309c <HAL_UART_MspInit+0x1b0>)
 8003030:	f043 0320 	orr.w	r3, r3, #32
 8003034:	6453      	str	r3, [r2, #68]	; 0x44
 8003036:	4b19      	ldr	r3, [pc, #100]	; (800309c <HAL_UART_MspInit+0x1b0>)
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	4b15      	ldr	r3, [pc, #84]	; (800309c <HAL_UART_MspInit+0x1b0>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	4a14      	ldr	r2, [pc, #80]	; (800309c <HAL_UART_MspInit+0x1b0>)
 800304c:	f043 0304 	orr.w	r3, r3, #4
 8003050:	6313      	str	r3, [r2, #48]	; 0x30
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_UART_MspInit+0x1b0>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800305e:	23c0      	movs	r3, #192	; 0xc0
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003062:	2302      	movs	r3, #2
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003066:	2300      	movs	r3, #0
 8003068:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306a:	2303      	movs	r3, #3
 800306c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800306e:	2308      	movs	r3, #8
 8003070:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003076:	4619      	mov	r1, r3
 8003078:	480e      	ldr	r0, [pc, #56]	; (80030b4 <HAL_UART_MspInit+0x1c8>)
 800307a:	f000 fef3 	bl	8003e64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800307e:	2200      	movs	r2, #0
 8003080:	2100      	movs	r1, #0
 8003082:	2047      	movs	r0, #71	; 0x47
 8003084:	f000 fe25 	bl	8003cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003088:	2047      	movs	r0, #71	; 0x47
 800308a:	f000 fe3e 	bl	8003d0a <HAL_NVIC_EnableIRQ>
}
 800308e:	bf00      	nop
 8003090:	3738      	adds	r7, #56	; 0x38
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40004400 	.word	0x40004400
 800309c:	40023800 	.word	0x40023800
 80030a0:	40020000 	.word	0x40020000
 80030a4:	40004800 	.word	0x40004800
 80030a8:	40020400 	.word	0x40020400
 80030ac:	40020c00 	.word	0x40020c00
 80030b0:	40011400 	.word	0x40011400
 80030b4:	40020800 	.word	0x40020800

080030b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030bc:	e7fe      	b.n	80030bc <NMI_Handler+0x4>

080030be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030be:	b480      	push	{r7}
 80030c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030c2:	e7fe      	b.n	80030c2 <HardFault_Handler+0x4>

080030c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030c8:	e7fe      	b.n	80030c8 <MemManage_Handler+0x4>

080030ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ca:	b480      	push	{r7}
 80030cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030ce:	e7fe      	b.n	80030ce <BusFault_Handler+0x4>

080030d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030d4:	e7fe      	b.n	80030d4 <UsageFault_Handler+0x4>

080030d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030d6:	b480      	push	{r7}
 80030d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030f2:	b480      	push	{r7}
 80030f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030f6:	bf00      	nop
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003104:	f000 f8fa 	bl	80032fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003108:	bf00      	nop
 800310a:	bd80      	pop	{r7, pc}

0800310c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003110:	2001      	movs	r0, #1
 8003112:	f001 f875 	bl	8004200 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}

0800311a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800311e:	2002      	movs	r0, #2
 8003120:	f001 f86e 	bl	8004200 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003124:	bf00      	nop
 8003126:	bd80      	pop	{r7, pc}

08003128 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800312c:	2008      	movs	r0, #8
 800312e:	f001 f867 	bl	8004200 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003132:	bf00      	nop
 8003134:	bd80      	pop	{r7, pc}

08003136 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800313a:	2010      	movs	r0, #16
 800313c:	f001 f860 	bl	8004200 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003140:	bf00      	nop
 8003142:	bd80      	pop	{r7, pc}

08003144 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UART_isr(&huart2);
 8003148:	4803      	ldr	r0, [pc, #12]	; (8003158 <USART2_IRQHandler+0x14>)
 800314a:	f7fe fa2f 	bl	80015ac <UART_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800314e:	4802      	ldr	r0, [pc, #8]	; (8003158 <USART2_IRQHandler+0x14>)
 8003150:	f002 fda6 	bl	8005ca0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003154:	bf00      	nop
 8003156:	bd80      	pop	{r7, pc}
 8003158:	20000d94 	.word	0x20000d94

0800315c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	UART_isr(&huart6);
 8003160:	4803      	ldr	r0, [pc, #12]	; (8003170 <USART6_IRQHandler+0x14>)
 8003162:	f7fe fa23 	bl	80015ac <UART_isr>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003166:	4802      	ldr	r0, [pc, #8]	; (8003170 <USART6_IRQHandler+0x14>)
 8003168:	f002 fd9a 	bl	8005ca0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800316c:	bf00      	nop
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000d08 	.word	0x20000d08

08003174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800317c:	4a14      	ldr	r2, [pc, #80]	; (80031d0 <_sbrk+0x5c>)
 800317e:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <_sbrk+0x60>)
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003188:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <_sbrk+0x64>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d102      	bne.n	8003196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003190:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <_sbrk+0x64>)
 8003192:	4a12      	ldr	r2, [pc, #72]	; (80031dc <_sbrk+0x68>)
 8003194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <_sbrk+0x64>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4413      	add	r3, r2
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d207      	bcs.n	80031b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031a4:	f003 fc04 	bl	80069b0 <__errno>
 80031a8:	4603      	mov	r3, r0
 80031aa:	220c      	movs	r2, #12
 80031ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031ae:	f04f 33ff 	mov.w	r3, #4294967295
 80031b2:	e009      	b.n	80031c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031b4:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <_sbrk+0x64>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031ba:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <_sbrk+0x64>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4413      	add	r3, r2
 80031c2:	4a05      	ldr	r2, [pc, #20]	; (80031d8 <_sbrk+0x64>)
 80031c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031c6:	68fb      	ldr	r3, [r7, #12]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	20020000 	.word	0x20020000
 80031d4:	00000400 	.word	0x00000400
 80031d8:	200008d0 	.word	0x200008d0
 80031dc:	20000df0 	.word	0x20000df0

080031e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <SystemInit+0x20>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ea:	4a05      	ldr	r2, [pc, #20]	; (8003200 <SystemInit+0x20>)
 80031ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800323c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003208:	480d      	ldr	r0, [pc, #52]	; (8003240 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800320a:	490e      	ldr	r1, [pc, #56]	; (8003244 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800320c:	4a0e      	ldr	r2, [pc, #56]	; (8003248 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800320e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003210:	e002      	b.n	8003218 <LoopCopyDataInit>

08003212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003216:	3304      	adds	r3, #4

08003218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800321a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800321c:	d3f9      	bcc.n	8003212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800321e:	4a0b      	ldr	r2, [pc, #44]	; (800324c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003220:	4c0b      	ldr	r4, [pc, #44]	; (8003250 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003224:	e001      	b.n	800322a <LoopFillZerobss>

08003226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003228:	3204      	adds	r2, #4

0800322a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800322a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800322c:	d3fb      	bcc.n	8003226 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800322e:	f7ff ffd7 	bl	80031e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003232:	f003 fbc3 	bl	80069bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003236:	f7fe fb43 	bl	80018c0 <main>
  bx  lr    
 800323a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800323c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003244:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003248:	08007a04 	.word	0x08007a04
  ldr r2, =_sbss
 800324c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003250:	20000dec 	.word	0x20000dec

08003254 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003254:	e7fe      	b.n	8003254 <ADC_IRQHandler>
	...

08003258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800325c:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <HAL_Init+0x40>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0d      	ldr	r2, [pc, #52]	; (8003298 <HAL_Init+0x40>)
 8003262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003266:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003268:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_Init+0x40>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <HAL_Init+0x40>)
 800326e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003272:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003274:	4b08      	ldr	r3, [pc, #32]	; (8003298 <HAL_Init+0x40>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a07      	ldr	r2, [pc, #28]	; (8003298 <HAL_Init+0x40>)
 800327a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800327e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003280:	2003      	movs	r0, #3
 8003282:	f000 fd1b 	bl	8003cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003286:	2000      	movs	r0, #0
 8003288:	f000 f808 	bl	800329c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800328c:	f7ff fb8c 	bl	80029a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40023c00 	.word	0x40023c00

0800329c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032a4:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <HAL_InitTick+0x54>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <HAL_InitTick+0x58>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	4619      	mov	r1, r3
 80032ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fd33 	bl	8003d26 <HAL_SYSTICK_Config>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e00e      	b.n	80032e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b0f      	cmp	r3, #15
 80032ce:	d80a      	bhi.n	80032e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032d0:	2200      	movs	r2, #0
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	f04f 30ff 	mov.w	r0, #4294967295
 80032d8:	f000 fcfb 	bl	8003cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032dc:	4a06      	ldr	r2, [pc, #24]	; (80032f8 <HAL_InitTick+0x5c>)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	e000      	b.n	80032e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20000000 	.word	0x20000000
 80032f4:	20000008 	.word	0x20000008
 80032f8:	20000004 	.word	0x20000004

080032fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003300:	4b06      	ldr	r3, [pc, #24]	; (800331c <HAL_IncTick+0x20>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <HAL_IncTick+0x24>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4413      	add	r3, r2
 800330c:	4a04      	ldr	r2, [pc, #16]	; (8003320 <HAL_IncTick+0x24>)
 800330e:	6013      	str	r3, [r2, #0]
}
 8003310:	bf00      	nop
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	20000008 	.word	0x20000008
 8003320:	20000dd8 	.word	0x20000dd8

08003324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  return uwTick;
 8003328:	4b03      	ldr	r3, [pc, #12]	; (8003338 <HAL_GetTick+0x14>)
 800332a:	681b      	ldr	r3, [r3, #0]
}
 800332c:	4618      	mov	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	20000dd8 	.word	0x20000dd8

0800333c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003344:	f7ff ffee 	bl	8003324 <HAL_GetTick>
 8003348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003354:	d005      	beq.n	8003362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003356:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <HAL_Delay+0x44>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4413      	add	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003362:	bf00      	nop
 8003364:	f7ff ffde 	bl	8003324 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	429a      	cmp	r2, r3
 8003372:	d8f7      	bhi.n	8003364 <HAL_Delay+0x28>
  {
  }
}
 8003374:	bf00      	nop
 8003376:	bf00      	nop
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000008 	.word	0x20000008

08003384 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e033      	b.n	8003402 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d109      	bne.n	80033b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff fb28 	bl	80029f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d118      	bne.n	80033f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033ca:	f023 0302 	bic.w	r3, r3, #2
 80033ce:	f043 0202 	orr.w	r2, r3, #2
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 faa4 	bl	8003924 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f023 0303 	bic.w	r3, r3, #3
 80033ea:	f043 0201 	orr.w	r2, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	641a      	str	r2, [r3, #64]	; 0x40
 80033f2:	e001      	b.n	80033f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003400:	7bfb      	ldrb	r3, [r7, #15]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_ADC_Start+0x1a>
 8003422:	2302      	movs	r3, #2
 8003424:	e0b2      	b.n	800358c <HAL_ADC_Start+0x180>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b01      	cmp	r3, #1
 800343a:	d018      	beq.n	800346e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800344c:	4b52      	ldr	r3, [pc, #328]	; (8003598 <HAL_ADC_Start+0x18c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a52      	ldr	r2, [pc, #328]	; (800359c <HAL_ADC_Start+0x190>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	0c9a      	lsrs	r2, r3, #18
 8003458:	4613      	mov	r3, r2
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	4413      	add	r3, r2
 800345e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003460:	e002      	b.n	8003468 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	3b01      	subs	r3, #1
 8003466:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f9      	bne.n	8003462 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b01      	cmp	r3, #1
 800347a:	d17a      	bne.n	8003572 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003484:	f023 0301 	bic.w	r3, r3, #1
 8003488:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349a:	2b00      	cmp	r3, #0
 800349c:	d007      	beq.n	80034ae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ba:	d106      	bne.n	80034ca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c0:	f023 0206 	bic.w	r2, r3, #6
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	645a      	str	r2, [r3, #68]	; 0x44
 80034c8:	e002      	b.n	80034d0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034d8:	4b31      	ldr	r3, [pc, #196]	; (80035a0 <HAL_ADC_Start+0x194>)
 80034da:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80034e4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 031f 	and.w	r3, r3, #31
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d12a      	bne.n	8003548 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a2b      	ldr	r2, [pc, #172]	; (80035a4 <HAL_ADC_Start+0x198>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d015      	beq.n	8003528 <HAL_ADC_Start+0x11c>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a29      	ldr	r2, [pc, #164]	; (80035a8 <HAL_ADC_Start+0x19c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d105      	bne.n	8003512 <HAL_ADC_Start+0x106>
 8003506:	4b26      	ldr	r3, [pc, #152]	; (80035a0 <HAL_ADC_Start+0x194>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f003 031f 	and.w	r3, r3, #31
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a25      	ldr	r2, [pc, #148]	; (80035ac <HAL_ADC_Start+0x1a0>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d136      	bne.n	800358a <HAL_ADC_Start+0x17e>
 800351c:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <HAL_ADC_Start+0x194>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 0310 	and.w	r3, r3, #16
 8003524:	2b00      	cmp	r3, #0
 8003526:	d130      	bne.n	800358a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d129      	bne.n	800358a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003544:	609a      	str	r2, [r3, #8]
 8003546:	e020      	b.n	800358a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a15      	ldr	r2, [pc, #84]	; (80035a4 <HAL_ADC_Start+0x198>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d11b      	bne.n	800358a <HAL_ADC_Start+0x17e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d114      	bne.n	800358a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	e00b      	b.n	800358a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f043 0210 	orr.w	r2, r3, #16
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	f043 0201 	orr.w	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	20000000 	.word	0x20000000
 800359c:	431bde83 	.word	0x431bde83
 80035a0:	40012300 	.word	0x40012300
 80035a4:	40012000 	.word	0x40012000
 80035a8:	40012100 	.word	0x40012100
 80035ac:	40012200 	.word	0x40012200

080035b0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035cc:	d113      	bne.n	80035f6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80035d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035dc:	d10b      	bne.n	80035f6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f043 0220 	orr.w	r2, r3, #32
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e063      	b.n	80036be <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80035f6:	f7ff fe95 	bl	8003324 <HAL_GetTick>
 80035fa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80035fc:	e021      	b.n	8003642 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003604:	d01d      	beq.n	8003642 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d007      	beq.n	800361c <HAL_ADC_PollForConversion+0x6c>
 800360c:	f7ff fe8a 	bl	8003324 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d212      	bcs.n	8003642 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b02      	cmp	r3, #2
 8003628:	d00b      	beq.n	8003642 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f043 0204 	orr.w	r2, r3, #4
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e03d      	b.n	80036be <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b02      	cmp	r3, #2
 800364e:	d1d6      	bne.n	80035fe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 0212 	mvn.w	r2, #18
 8003658:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d123      	bne.n	80036bc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003678:	2b00      	cmp	r3, #0
 800367a:	d11f      	bne.n	80036bc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003686:	2b00      	cmp	r3, #0
 8003688:	d006      	beq.n	8003698 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003694:	2b00      	cmp	r3, #0
 8003696:	d111      	bne.n	80036bc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d105      	bne.n	80036bc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	f043 0201 	orr.w	r2, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x1c>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e105      	b.n	8003908 <HAL_ADC_ConfigChannel+0x228>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b09      	cmp	r3, #9
 800370a:	d925      	bls.n	8003758 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68d9      	ldr	r1, [r3, #12]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	b29b      	uxth	r3, r3
 8003718:	461a      	mov	r2, r3
 800371a:	4613      	mov	r3, r2
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	4413      	add	r3, r2
 8003720:	3b1e      	subs	r3, #30
 8003722:	2207      	movs	r2, #7
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	43da      	mvns	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	400a      	ands	r2, r1
 8003730:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68d9      	ldr	r1, [r3, #12]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	b29b      	uxth	r3, r3
 8003742:	4618      	mov	r0, r3
 8003744:	4603      	mov	r3, r0
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	4403      	add	r3, r0
 800374a:	3b1e      	subs	r3, #30
 800374c:	409a      	lsls	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	60da      	str	r2, [r3, #12]
 8003756:	e022      	b.n	800379e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6919      	ldr	r1, [r3, #16]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	b29b      	uxth	r3, r3
 8003764:	461a      	mov	r2, r3
 8003766:	4613      	mov	r3, r2
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	4413      	add	r3, r2
 800376c:	2207      	movs	r2, #7
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43da      	mvns	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	400a      	ands	r2, r1
 800377a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6919      	ldr	r1, [r3, #16]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	b29b      	uxth	r3, r3
 800378c:	4618      	mov	r0, r3
 800378e:	4603      	mov	r3, r0
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	4403      	add	r3, r0
 8003794:	409a      	lsls	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b06      	cmp	r3, #6
 80037a4:	d824      	bhi.n	80037f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	3b05      	subs	r3, #5
 80037b8:	221f      	movs	r2, #31
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43da      	mvns	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	400a      	ands	r2, r1
 80037c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	4618      	mov	r0, r3
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	3b05      	subs	r3, #5
 80037e2:	fa00 f203 	lsl.w	r2, r0, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	635a      	str	r2, [r3, #52]	; 0x34
 80037ee:	e04c      	b.n	800388a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b0c      	cmp	r3, #12
 80037f6:	d824      	bhi.n	8003842 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	3b23      	subs	r3, #35	; 0x23
 800380a:	221f      	movs	r2, #31
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43da      	mvns	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	400a      	ands	r2, r1
 8003818:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	b29b      	uxth	r3, r3
 8003826:	4618      	mov	r0, r3
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	3b23      	subs	r3, #35	; 0x23
 8003834:	fa00 f203 	lsl.w	r2, r0, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
 8003840:	e023      	b.n	800388a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	3b41      	subs	r3, #65	; 0x41
 8003854:	221f      	movs	r2, #31
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	43da      	mvns	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	400a      	ands	r2, r1
 8003862:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	b29b      	uxth	r3, r3
 8003870:	4618      	mov	r0, r3
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	3b41      	subs	r3, #65	; 0x41
 800387e:	fa00 f203 	lsl.w	r2, r0, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800388a:	4b22      	ldr	r3, [pc, #136]	; (8003914 <HAL_ADC_ConfigChannel+0x234>)
 800388c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a21      	ldr	r2, [pc, #132]	; (8003918 <HAL_ADC_ConfigChannel+0x238>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d109      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x1cc>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b12      	cmp	r3, #18
 800389e:	d105      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a19      	ldr	r2, [pc, #100]	; (8003918 <HAL_ADC_ConfigChannel+0x238>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d123      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x21e>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b10      	cmp	r3, #16
 80038bc:	d003      	beq.n	80038c6 <HAL_ADC_ConfigChannel+0x1e6>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b11      	cmp	r3, #17
 80038c4:	d11b      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b10      	cmp	r3, #16
 80038d8:	d111      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038da:	4b10      	ldr	r3, [pc, #64]	; (800391c <HAL_ADC_ConfigChannel+0x23c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a10      	ldr	r2, [pc, #64]	; (8003920 <HAL_ADC_ConfigChannel+0x240>)
 80038e0:	fba2 2303 	umull	r2, r3, r2, r3
 80038e4:	0c9a      	lsrs	r2, r3, #18
 80038e6:	4613      	mov	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038f0:	e002      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	3b01      	subs	r3, #1
 80038f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f9      	bne.n	80038f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	40012300 	.word	0x40012300
 8003918:	40012000 	.word	0x40012000
 800391c:	20000000 	.word	0x20000000
 8003920:	431bde83 	.word	0x431bde83

08003924 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800392c:	4b79      	ldr	r3, [pc, #484]	; (8003b14 <ADC_Init+0x1f0>)
 800392e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	431a      	orrs	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003958:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6859      	ldr	r1, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	021a      	lsls	r2, r3, #8
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800397c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6859      	ldr	r1, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800399e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6899      	ldr	r1, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	4a58      	ldr	r2, [pc, #352]	; (8003b18 <ADC_Init+0x1f4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d022      	beq.n	8003a02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6899      	ldr	r1, [r3, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6899      	ldr	r1, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	609a      	str	r2, [r3, #8]
 8003a00:	e00f      	b.n	8003a22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0202 	bic.w	r2, r2, #2
 8003a30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6899      	ldr	r1, [r3, #8]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	7e1b      	ldrb	r3, [r3, #24]
 8003a3c:	005a      	lsls	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d01b      	beq.n	8003a88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6859      	ldr	r1, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	035a      	lsls	r2, r3, #13
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	605a      	str	r2, [r3, #4]
 8003a86:	e007      	b.n	8003a98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	051a      	lsls	r2, r3, #20
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003acc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6899      	ldr	r1, [r3, #8]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ada:	025a      	lsls	r2, r3, #9
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6899      	ldr	r1, [r3, #8]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	029a      	lsls	r2, r3, #10
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	609a      	str	r2, [r3, #8]
}
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	40012300 	.word	0x40012300
 8003b18:	0f000001 	.word	0x0f000001

08003b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b2c:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <__NVIC_SetPriorityGrouping+0x44>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b38:	4013      	ands	r3, r2
 8003b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b4e:	4a04      	ldr	r2, [pc, #16]	; (8003b60 <__NVIC_SetPriorityGrouping+0x44>)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	60d3      	str	r3, [r2, #12]
}
 8003b54:	bf00      	nop
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	e000ed00 	.word	0xe000ed00

08003b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b68:	4b04      	ldr	r3, [pc, #16]	; (8003b7c <__NVIC_GetPriorityGrouping+0x18>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	0a1b      	lsrs	r3, r3, #8
 8003b6e:	f003 0307 	and.w	r3, r3, #7
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	e000ed00 	.word	0xe000ed00

08003b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	db0b      	blt.n	8003baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	f003 021f 	and.w	r2, r3, #31
 8003b98:	4907      	ldr	r1, [pc, #28]	; (8003bb8 <__NVIC_EnableIRQ+0x38>)
 8003b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	2001      	movs	r0, #1
 8003ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	e000e100 	.word	0xe000e100

08003bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	6039      	str	r1, [r7, #0]
 8003bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	db0a      	blt.n	8003be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	490c      	ldr	r1, [pc, #48]	; (8003c08 <__NVIC_SetPriority+0x4c>)
 8003bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bda:	0112      	lsls	r2, r2, #4
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	440b      	add	r3, r1
 8003be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003be4:	e00a      	b.n	8003bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	4908      	ldr	r1, [pc, #32]	; (8003c0c <__NVIC_SetPriority+0x50>)
 8003bec:	79fb      	ldrb	r3, [r7, #7]
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	3b04      	subs	r3, #4
 8003bf4:	0112      	lsls	r2, r2, #4
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	761a      	strb	r2, [r3, #24]
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	e000e100 	.word	0xe000e100
 8003c0c:	e000ed00 	.word	0xe000ed00

08003c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b089      	sub	sp, #36	; 0x24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f1c3 0307 	rsb	r3, r3, #7
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	bf28      	it	cs
 8003c2e:	2304      	movcs	r3, #4
 8003c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	3304      	adds	r3, #4
 8003c36:	2b06      	cmp	r3, #6
 8003c38:	d902      	bls.n	8003c40 <NVIC_EncodePriority+0x30>
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	3b03      	subs	r3, #3
 8003c3e:	e000      	b.n	8003c42 <NVIC_EncodePriority+0x32>
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c44:	f04f 32ff 	mov.w	r2, #4294967295
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	43da      	mvns	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	401a      	ands	r2, r3
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c58:	f04f 31ff 	mov.w	r1, #4294967295
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c62:	43d9      	mvns	r1, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c68:	4313      	orrs	r3, r2
         );
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3724      	adds	r7, #36	; 0x24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c88:	d301      	bcc.n	8003c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e00f      	b.n	8003cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c8e:	4a0a      	ldr	r2, [pc, #40]	; (8003cb8 <SysTick_Config+0x40>)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c96:	210f      	movs	r1, #15
 8003c98:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9c:	f7ff ff8e 	bl	8003bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <SysTick_Config+0x40>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ca6:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <SysTick_Config+0x40>)
 8003ca8:	2207      	movs	r2, #7
 8003caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	e000e010 	.word	0xe000e010

08003cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff ff29 	bl	8003b1c <__NVIC_SetPriorityGrouping>
}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b086      	sub	sp, #24
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	4603      	mov	r3, r0
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	607a      	str	r2, [r7, #4]
 8003cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ce4:	f7ff ff3e 	bl	8003b64 <__NVIC_GetPriorityGrouping>
 8003ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	68b9      	ldr	r1, [r7, #8]
 8003cee:	6978      	ldr	r0, [r7, #20]
 8003cf0:	f7ff ff8e 	bl	8003c10 <NVIC_EncodePriority>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff ff5d 	bl	8003bbc <__NVIC_SetPriority>
}
 8003d02:	bf00      	nop
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	4603      	mov	r3, r0
 8003d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff ff31 	bl	8003b80 <__NVIC_EnableIRQ>
}
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff ffa2 	bl	8003c78 <SysTick_Config>
 8003d34:	4603      	mov	r3, r0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d4c:	f7ff faea 	bl	8003324 <HAL_GetTick>
 8003d50:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d008      	beq.n	8003d70 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2280      	movs	r2, #128	; 0x80
 8003d62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e052      	b.n	8003e16 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0216 	bic.w	r2, r2, #22
 8003d7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695a      	ldr	r2, [r3, #20]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d8e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d103      	bne.n	8003da0 <HAL_DMA_Abort+0x62>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d007      	beq.n	8003db0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0208 	bic.w	r2, r2, #8
 8003dae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0201 	bic.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dc0:	e013      	b.n	8003dea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dc2:	f7ff faaf 	bl	8003324 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b05      	cmp	r3, #5
 8003dce:	d90c      	bls.n	8003dea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2203      	movs	r2, #3
 8003dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e015      	b.n	8003e16 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e4      	bne.n	8003dc2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfc:	223f      	movs	r2, #63	; 0x3f
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d004      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2280      	movs	r2, #128	; 0x80
 8003e36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e00c      	b.n	8003e56 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2205      	movs	r2, #5
 8003e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0201 	bic.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b089      	sub	sp, #36	; 0x24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
 8003e7e:	e16b      	b.n	8004158 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e80:	2201      	movs	r2, #1
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4013      	ands	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	f040 815a 	bne.w	8004152 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d005      	beq.n	8003eb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d130      	bne.n	8003f18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003eec:	2201      	movs	r2, #1
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	091b      	lsrs	r3, r3, #4
 8003f02:	f003 0201 	and.w	r2, r3, #1
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f003 0303 	and.w	r3, r3, #3
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	d017      	beq.n	8003f54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	2203      	movs	r2, #3
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	43db      	mvns	r3, r3
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f003 0303 	and.w	r3, r3, #3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d123      	bne.n	8003fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	08da      	lsrs	r2, r3, #3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3208      	adds	r2, #8
 8003f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	220f      	movs	r2, #15
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	08da      	lsrs	r2, r3, #3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3208      	adds	r2, #8
 8003fa2:	69b9      	ldr	r1, [r7, #24]
 8003fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	2203      	movs	r2, #3
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f003 0203 	and.w	r2, r3, #3
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 80b4 	beq.w	8004152 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fea:	2300      	movs	r3, #0
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	4b60      	ldr	r3, [pc, #384]	; (8004170 <HAL_GPIO_Init+0x30c>)
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	4a5f      	ldr	r2, [pc, #380]	; (8004170 <HAL_GPIO_Init+0x30c>)
 8003ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8003ffa:	4b5d      	ldr	r3, [pc, #372]	; (8004170 <HAL_GPIO_Init+0x30c>)
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004006:	4a5b      	ldr	r2, [pc, #364]	; (8004174 <HAL_GPIO_Init+0x310>)
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	089b      	lsrs	r3, r3, #2
 800400c:	3302      	adds	r3, #2
 800400e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	220f      	movs	r2, #15
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	43db      	mvns	r3, r3
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	4013      	ands	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a52      	ldr	r2, [pc, #328]	; (8004178 <HAL_GPIO_Init+0x314>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d02b      	beq.n	800408a <HAL_GPIO_Init+0x226>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a51      	ldr	r2, [pc, #324]	; (800417c <HAL_GPIO_Init+0x318>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d025      	beq.n	8004086 <HAL_GPIO_Init+0x222>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a50      	ldr	r2, [pc, #320]	; (8004180 <HAL_GPIO_Init+0x31c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d01f      	beq.n	8004082 <HAL_GPIO_Init+0x21e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a4f      	ldr	r2, [pc, #316]	; (8004184 <HAL_GPIO_Init+0x320>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d019      	beq.n	800407e <HAL_GPIO_Init+0x21a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a4e      	ldr	r2, [pc, #312]	; (8004188 <HAL_GPIO_Init+0x324>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d013      	beq.n	800407a <HAL_GPIO_Init+0x216>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a4d      	ldr	r2, [pc, #308]	; (800418c <HAL_GPIO_Init+0x328>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00d      	beq.n	8004076 <HAL_GPIO_Init+0x212>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a4c      	ldr	r2, [pc, #304]	; (8004190 <HAL_GPIO_Init+0x32c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d007      	beq.n	8004072 <HAL_GPIO_Init+0x20e>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a4b      	ldr	r2, [pc, #300]	; (8004194 <HAL_GPIO_Init+0x330>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d101      	bne.n	800406e <HAL_GPIO_Init+0x20a>
 800406a:	2307      	movs	r3, #7
 800406c:	e00e      	b.n	800408c <HAL_GPIO_Init+0x228>
 800406e:	2308      	movs	r3, #8
 8004070:	e00c      	b.n	800408c <HAL_GPIO_Init+0x228>
 8004072:	2306      	movs	r3, #6
 8004074:	e00a      	b.n	800408c <HAL_GPIO_Init+0x228>
 8004076:	2305      	movs	r3, #5
 8004078:	e008      	b.n	800408c <HAL_GPIO_Init+0x228>
 800407a:	2304      	movs	r3, #4
 800407c:	e006      	b.n	800408c <HAL_GPIO_Init+0x228>
 800407e:	2303      	movs	r3, #3
 8004080:	e004      	b.n	800408c <HAL_GPIO_Init+0x228>
 8004082:	2302      	movs	r3, #2
 8004084:	e002      	b.n	800408c <HAL_GPIO_Init+0x228>
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <HAL_GPIO_Init+0x228>
 800408a:	2300      	movs	r3, #0
 800408c:	69fa      	ldr	r2, [r7, #28]
 800408e:	f002 0203 	and.w	r2, r2, #3
 8004092:	0092      	lsls	r2, r2, #2
 8004094:	4093      	lsls	r3, r2
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	4313      	orrs	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800409c:	4935      	ldr	r1, [pc, #212]	; (8004174 <HAL_GPIO_Init+0x310>)
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	089b      	lsrs	r3, r3, #2
 80040a2:	3302      	adds	r3, #2
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040aa:	4b3b      	ldr	r3, [pc, #236]	; (8004198 <HAL_GPIO_Init+0x334>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	43db      	mvns	r3, r3
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4013      	ands	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040ce:	4a32      	ldr	r2, [pc, #200]	; (8004198 <HAL_GPIO_Init+0x334>)
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040d4:	4b30      	ldr	r3, [pc, #192]	; (8004198 <HAL_GPIO_Init+0x334>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	43db      	mvns	r3, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4013      	ands	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040f8:	4a27      	ldr	r2, [pc, #156]	; (8004198 <HAL_GPIO_Init+0x334>)
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040fe:	4b26      	ldr	r3, [pc, #152]	; (8004198 <HAL_GPIO_Init+0x334>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	43db      	mvns	r3, r3
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	4013      	ands	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004122:	4a1d      	ldr	r2, [pc, #116]	; (8004198 <HAL_GPIO_Init+0x334>)
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004128:	4b1b      	ldr	r3, [pc, #108]	; (8004198 <HAL_GPIO_Init+0x334>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	43db      	mvns	r3, r3
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4013      	ands	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d003      	beq.n	800414c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800414c:	4a12      	ldr	r2, [pc, #72]	; (8004198 <HAL_GPIO_Init+0x334>)
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	3301      	adds	r3, #1
 8004156:	61fb      	str	r3, [r7, #28]
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	2b0f      	cmp	r3, #15
 800415c:	f67f ae90 	bls.w	8003e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004160:	bf00      	nop
 8004162:	bf00      	nop
 8004164:	3724      	adds	r7, #36	; 0x24
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40023800 	.word	0x40023800
 8004174:	40013800 	.word	0x40013800
 8004178:	40020000 	.word	0x40020000
 800417c:	40020400 	.word	0x40020400
 8004180:	40020800 	.word	0x40020800
 8004184:	40020c00 	.word	0x40020c00
 8004188:	40021000 	.word	0x40021000
 800418c:	40021400 	.word	0x40021400
 8004190:	40021800 	.word	0x40021800
 8004194:	40021c00 	.word	0x40021c00
 8004198:	40013c00 	.word	0x40013c00

0800419c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	887b      	ldrh	r3, [r7, #2]
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
 80041b8:	e001      	b.n	80041be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041ba:	2300      	movs	r3, #0
 80041bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041be:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	807b      	strh	r3, [r7, #2]
 80041d8:	4613      	mov	r3, r2
 80041da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041dc:	787b      	ldrb	r3, [r7, #1]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041e2:	887a      	ldrh	r2, [r7, #2]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041e8:	e003      	b.n	80041f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041ea:	887b      	ldrh	r3, [r7, #2]
 80041ec:	041a      	lsls	r2, r3, #16
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	619a      	str	r2, [r3, #24]
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	4603      	mov	r3, r0
 8004208:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800420a:	4b08      	ldr	r3, [pc, #32]	; (800422c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800420c:	695a      	ldr	r2, [r3, #20]
 800420e:	88fb      	ldrh	r3, [r7, #6]
 8004210:	4013      	ands	r3, r2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d006      	beq.n	8004224 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004216:	4a05      	ldr	r2, [pc, #20]	; (800422c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004218:	88fb      	ldrh	r3, [r7, #6]
 800421a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800421c:	88fb      	ldrh	r3, [r7, #6]
 800421e:	4618      	mov	r0, r3
 8004220:	f7fd fa6e 	bl	8001700 <HAL_GPIO_EXTI_Callback>
  }
}
 8004224:	bf00      	nop
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40013c00 	.word	0x40013c00

08004230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e264      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d075      	beq.n	800433a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800424e:	4ba3      	ldr	r3, [pc, #652]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 030c 	and.w	r3, r3, #12
 8004256:	2b04      	cmp	r3, #4
 8004258:	d00c      	beq.n	8004274 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800425a:	4ba0      	ldr	r3, [pc, #640]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004262:	2b08      	cmp	r3, #8
 8004264:	d112      	bne.n	800428c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004266:	4b9d      	ldr	r3, [pc, #628]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800426e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004272:	d10b      	bne.n	800428c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004274:	4b99      	ldr	r3, [pc, #612]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d05b      	beq.n	8004338 <HAL_RCC_OscConfig+0x108>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d157      	bne.n	8004338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e23f      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004294:	d106      	bne.n	80042a4 <HAL_RCC_OscConfig+0x74>
 8004296:	4b91      	ldr	r3, [pc, #580]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a90      	ldr	r2, [pc, #576]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 800429c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	e01d      	b.n	80042e0 <HAL_RCC_OscConfig+0xb0>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042ac:	d10c      	bne.n	80042c8 <HAL_RCC_OscConfig+0x98>
 80042ae:	4b8b      	ldr	r3, [pc, #556]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a8a      	ldr	r2, [pc, #552]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80042b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	4b88      	ldr	r3, [pc, #544]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a87      	ldr	r2, [pc, #540]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	e00b      	b.n	80042e0 <HAL_RCC_OscConfig+0xb0>
 80042c8:	4b84      	ldr	r3, [pc, #528]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a83      	ldr	r2, [pc, #524]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80042ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d2:	6013      	str	r3, [r2, #0]
 80042d4:	4b81      	ldr	r3, [pc, #516]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a80      	ldr	r2, [pc, #512]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80042da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d013      	beq.n	8004310 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e8:	f7ff f81c 	bl	8003324 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042f0:	f7ff f818 	bl	8003324 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	; 0x64
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e204      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004302:	4b76      	ldr	r3, [pc, #472]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0xc0>
 800430e:	e014      	b.n	800433a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004310:	f7ff f808 	bl	8003324 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004318:	f7ff f804 	bl	8003324 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b64      	cmp	r3, #100	; 0x64
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e1f0      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800432a:	4b6c      	ldr	r3, [pc, #432]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f0      	bne.n	8004318 <HAL_RCC_OscConfig+0xe8>
 8004336:	e000      	b.n	800433a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d063      	beq.n	800440e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004346:	4b65      	ldr	r3, [pc, #404]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 030c 	and.w	r3, r3, #12
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00b      	beq.n	800436a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004352:	4b62      	ldr	r3, [pc, #392]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800435a:	2b08      	cmp	r3, #8
 800435c:	d11c      	bne.n	8004398 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800435e:	4b5f      	ldr	r3, [pc, #380]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d116      	bne.n	8004398 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800436a:	4b5c      	ldr	r3, [pc, #368]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <HAL_RCC_OscConfig+0x152>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d001      	beq.n	8004382 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e1c4      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004382:	4b56      	ldr	r3, [pc, #344]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	4952      	ldr	r1, [pc, #328]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004392:	4313      	orrs	r3, r2
 8004394:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004396:	e03a      	b.n	800440e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d020      	beq.n	80043e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043a0:	4b4f      	ldr	r3, [pc, #316]	; (80044e0 <HAL_RCC_OscConfig+0x2b0>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a6:	f7fe ffbd 	bl	8003324 <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ac:	e008      	b.n	80043c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ae:	f7fe ffb9 	bl	8003324 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e1a5      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c0:	4b46      	ldr	r3, [pc, #280]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0f0      	beq.n	80043ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043cc:	4b43      	ldr	r3, [pc, #268]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	4940      	ldr	r1, [pc, #256]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	600b      	str	r3, [r1, #0]
 80043e0:	e015      	b.n	800440e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043e2:	4b3f      	ldr	r3, [pc, #252]	; (80044e0 <HAL_RCC_OscConfig+0x2b0>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fe ff9c 	bl	8003324 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043f0:	f7fe ff98 	bl	8003324 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e184      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004402:	4b36      	ldr	r3, [pc, #216]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d030      	beq.n	800447c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d016      	beq.n	8004450 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004422:	4b30      	ldr	r3, [pc, #192]	; (80044e4 <HAL_RCC_OscConfig+0x2b4>)
 8004424:	2201      	movs	r2, #1
 8004426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004428:	f7fe ff7c 	bl	8003324 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004430:	f7fe ff78 	bl	8003324 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e164      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004442:	4b26      	ldr	r3, [pc, #152]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0x200>
 800444e:	e015      	b.n	800447c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004450:	4b24      	ldr	r3, [pc, #144]	; (80044e4 <HAL_RCC_OscConfig+0x2b4>)
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004456:	f7fe ff65 	bl	8003324 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800445e:	f7fe ff61 	bl	8003324 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e14d      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004470:	4b1a      	ldr	r3, [pc, #104]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f0      	bne.n	800445e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 80a0 	beq.w	80045ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800448a:	2300      	movs	r3, #0
 800448c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800448e:	4b13      	ldr	r3, [pc, #76]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10f      	bne.n	80044ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800449a:	2300      	movs	r3, #0
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	4a0e      	ldr	r2, [pc, #56]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80044a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a8:	6413      	str	r3, [r2, #64]	; 0x40
 80044aa:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b2:	60bb      	str	r3, [r7, #8]
 80044b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044b6:	2301      	movs	r3, #1
 80044b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <HAL_RCC_OscConfig+0x2b8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d121      	bne.n	800450a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044c6:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <HAL_RCC_OscConfig+0x2b8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a07      	ldr	r2, [pc, #28]	; (80044e8 <HAL_RCC_OscConfig+0x2b8>)
 80044cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044d2:	f7fe ff27 	bl	8003324 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d8:	e011      	b.n	80044fe <HAL_RCC_OscConfig+0x2ce>
 80044da:	bf00      	nop
 80044dc:	40023800 	.word	0x40023800
 80044e0:	42470000 	.word	0x42470000
 80044e4:	42470e80 	.word	0x42470e80
 80044e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ec:	f7fe ff1a 	bl	8003324 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e106      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fe:	4b85      	ldr	r3, [pc, #532]	; (8004714 <HAL_RCC_OscConfig+0x4e4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d106      	bne.n	8004520 <HAL_RCC_OscConfig+0x2f0>
 8004512:	4b81      	ldr	r3, [pc, #516]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004516:	4a80      	ldr	r2, [pc, #512]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004518:	f043 0301 	orr.w	r3, r3, #1
 800451c:	6713      	str	r3, [r2, #112]	; 0x70
 800451e:	e01c      	b.n	800455a <HAL_RCC_OscConfig+0x32a>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b05      	cmp	r3, #5
 8004526:	d10c      	bne.n	8004542 <HAL_RCC_OscConfig+0x312>
 8004528:	4b7b      	ldr	r3, [pc, #492]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	4a7a      	ldr	r2, [pc, #488]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 800452e:	f043 0304 	orr.w	r3, r3, #4
 8004532:	6713      	str	r3, [r2, #112]	; 0x70
 8004534:	4b78      	ldr	r3, [pc, #480]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004538:	4a77      	ldr	r2, [pc, #476]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 800453a:	f043 0301 	orr.w	r3, r3, #1
 800453e:	6713      	str	r3, [r2, #112]	; 0x70
 8004540:	e00b      	b.n	800455a <HAL_RCC_OscConfig+0x32a>
 8004542:	4b75      	ldr	r3, [pc, #468]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	4a74      	ldr	r2, [pc, #464]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004548:	f023 0301 	bic.w	r3, r3, #1
 800454c:	6713      	str	r3, [r2, #112]	; 0x70
 800454e:	4b72      	ldr	r3, [pc, #456]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004552:	4a71      	ldr	r2, [pc, #452]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004554:	f023 0304 	bic.w	r3, r3, #4
 8004558:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d015      	beq.n	800458e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004562:	f7fe fedf 	bl	8003324 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004568:	e00a      	b.n	8004580 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800456a:	f7fe fedb 	bl	8003324 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f241 3288 	movw	r2, #5000	; 0x1388
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e0c5      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004580:	4b65      	ldr	r3, [pc, #404]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0ee      	beq.n	800456a <HAL_RCC_OscConfig+0x33a>
 800458c:	e014      	b.n	80045b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458e:	f7fe fec9 	bl	8003324 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004594:	e00a      	b.n	80045ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004596:	f7fe fec5 	bl	8003324 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e0af      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ac:	4b5a      	ldr	r3, [pc, #360]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 80045ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1ee      	bne.n	8004596 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045b8:	7dfb      	ldrb	r3, [r7, #23]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d105      	bne.n	80045ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045be:	4b56      	ldr	r3, [pc, #344]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	4a55      	ldr	r2, [pc, #340]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 80045c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 809b 	beq.w	800470a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045d4:	4b50      	ldr	r3, [pc, #320]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 030c 	and.w	r3, r3, #12
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d05c      	beq.n	800469a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d141      	bne.n	800466c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e8:	4b4c      	ldr	r3, [pc, #304]	; (800471c <HAL_RCC_OscConfig+0x4ec>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ee:	f7fe fe99 	bl	8003324 <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f6:	f7fe fe95 	bl	8003324 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e081      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004608:	4b43      	ldr	r3, [pc, #268]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f0      	bne.n	80045f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	431a      	orrs	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	019b      	lsls	r3, r3, #6
 8004624:	431a      	orrs	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462a:	085b      	lsrs	r3, r3, #1
 800462c:	3b01      	subs	r3, #1
 800462e:	041b      	lsls	r3, r3, #16
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004636:	061b      	lsls	r3, r3, #24
 8004638:	4937      	ldr	r1, [pc, #220]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 800463a:	4313      	orrs	r3, r2
 800463c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800463e:	4b37      	ldr	r3, [pc, #220]	; (800471c <HAL_RCC_OscConfig+0x4ec>)
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fe fe6e 	bl	8003324 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464c:	f7fe fe6a 	bl	8003324 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e056      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465e:	4b2e      	ldr	r3, [pc, #184]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <HAL_RCC_OscConfig+0x41c>
 800466a:	e04e      	b.n	800470a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466c:	4b2b      	ldr	r3, [pc, #172]	; (800471c <HAL_RCC_OscConfig+0x4ec>)
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004672:	f7fe fe57 	bl	8003324 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800467a:	f7fe fe53 	bl	8003324 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e03f      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468c:	4b22      	ldr	r3, [pc, #136]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1f0      	bne.n	800467a <HAL_RCC_OscConfig+0x44a>
 8004698:	e037      	b.n	800470a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e032      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046a6:	4b1c      	ldr	r3, [pc, #112]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d028      	beq.n	8004706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046be:	429a      	cmp	r2, r3
 80046c0:	d121      	bne.n	8004706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d11a      	bne.n	8004706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046d6:	4013      	ands	r3, r2
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046de:	4293      	cmp	r3, r2
 80046e0:	d111      	bne.n	8004706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ec:	085b      	lsrs	r3, r3, #1
 80046ee:	3b01      	subs	r3, #1
 80046f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d107      	bne.n	8004706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004702:	429a      	cmp	r2, r3
 8004704:	d001      	beq.n	800470a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40007000 	.word	0x40007000
 8004718:	40023800 	.word	0x40023800
 800471c:	42470060 	.word	0x42470060

08004720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0cc      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004734:	4b68      	ldr	r3, [pc, #416]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d90c      	bls.n	800475c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004742:	4b65      	ldr	r3, [pc, #404]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800474a:	4b63      	ldr	r3, [pc, #396]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d001      	beq.n	800475c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0b8      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d020      	beq.n	80047aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004774:	4b59      	ldr	r3, [pc, #356]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	4a58      	ldr	r2, [pc, #352]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800477e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800478c:	4b53      	ldr	r3, [pc, #332]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	4a52      	ldr	r2, [pc, #328]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004798:	4b50      	ldr	r3, [pc, #320]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	494d      	ldr	r1, [pc, #308]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d044      	beq.n	8004840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d107      	bne.n	80047ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047be:	4b47      	ldr	r3, [pc, #284]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d119      	bne.n	80047fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e07f      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d003      	beq.n	80047de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047da:	2b03      	cmp	r3, #3
 80047dc:	d107      	bne.n	80047ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047de:	4b3f      	ldr	r3, [pc, #252]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d109      	bne.n	80047fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e06f      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ee:	4b3b      	ldr	r3, [pc, #236]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e067      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047fe:	4b37      	ldr	r3, [pc, #220]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f023 0203 	bic.w	r2, r3, #3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	4934      	ldr	r1, [pc, #208]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 800480c:	4313      	orrs	r3, r2
 800480e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004810:	f7fe fd88 	bl	8003324 <HAL_GetTick>
 8004814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004816:	e00a      	b.n	800482e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004818:	f7fe fd84 	bl	8003324 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	f241 3288 	movw	r2, #5000	; 0x1388
 8004826:	4293      	cmp	r3, r2
 8004828:	d901      	bls.n	800482e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e04f      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482e:	4b2b      	ldr	r3, [pc, #172]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 020c 	and.w	r2, r3, #12
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	429a      	cmp	r2, r3
 800483e:	d1eb      	bne.n	8004818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004840:	4b25      	ldr	r3, [pc, #148]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d20c      	bcs.n	8004868 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484e:	4b22      	ldr	r3, [pc, #136]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	4b20      	ldr	r3, [pc, #128]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d001      	beq.n	8004868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e032      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d008      	beq.n	8004886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004874:	4b19      	ldr	r3, [pc, #100]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4916      	ldr	r1, [pc, #88]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	4313      	orrs	r3, r2
 8004884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d009      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004892:	4b12      	ldr	r3, [pc, #72]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	490e      	ldr	r1, [pc, #56]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048a6:	f000 f821 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 80048aa:	4602      	mov	r2, r0
 80048ac:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	490a      	ldr	r1, [pc, #40]	; (80048e0 <HAL_RCC_ClockConfig+0x1c0>)
 80048b8:	5ccb      	ldrb	r3, [r1, r3]
 80048ba:	fa22 f303 	lsr.w	r3, r2, r3
 80048be:	4a09      	ldr	r2, [pc, #36]	; (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 80048c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048c2:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fe fce8 	bl	800329c <HAL_InitTick>

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40023c00 	.word	0x40023c00
 80048dc:	40023800 	.word	0x40023800
 80048e0:	080079a8 	.word	0x080079a8
 80048e4:	20000000 	.word	0x20000000
 80048e8:	20000004 	.word	0x20000004

080048ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	607b      	str	r3, [r7, #4]
 80048f8:	2300      	movs	r3, #0
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	2300      	movs	r3, #0
 80048fe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004904:	4b67      	ldr	r3, [pc, #412]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f003 030c 	and.w	r3, r3, #12
 800490c:	2b08      	cmp	r3, #8
 800490e:	d00d      	beq.n	800492c <HAL_RCC_GetSysClockFreq+0x40>
 8004910:	2b08      	cmp	r3, #8
 8004912:	f200 80bd 	bhi.w	8004a90 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <HAL_RCC_GetSysClockFreq+0x34>
 800491a:	2b04      	cmp	r3, #4
 800491c:	d003      	beq.n	8004926 <HAL_RCC_GetSysClockFreq+0x3a>
 800491e:	e0b7      	b.n	8004a90 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004920:	4b61      	ldr	r3, [pc, #388]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004922:	60bb      	str	r3, [r7, #8]
       break;
 8004924:	e0b7      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004926:	4b61      	ldr	r3, [pc, #388]	; (8004aac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004928:	60bb      	str	r3, [r7, #8]
      break;
 800492a:	e0b4      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800492c:	4b5d      	ldr	r3, [pc, #372]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004934:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004936:	4b5b      	ldr	r3, [pc, #364]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d04d      	beq.n	80049de <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004942:	4b58      	ldr	r3, [pc, #352]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	099b      	lsrs	r3, r3, #6
 8004948:	461a      	mov	r2, r3
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004952:	f04f 0100 	mov.w	r1, #0
 8004956:	ea02 0800 	and.w	r8, r2, r0
 800495a:	ea03 0901 	and.w	r9, r3, r1
 800495e:	4640      	mov	r0, r8
 8004960:	4649      	mov	r1, r9
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	014b      	lsls	r3, r1, #5
 800496c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004970:	0142      	lsls	r2, r0, #5
 8004972:	4610      	mov	r0, r2
 8004974:	4619      	mov	r1, r3
 8004976:	ebb0 0008 	subs.w	r0, r0, r8
 800497a:	eb61 0109 	sbc.w	r1, r1, r9
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	018b      	lsls	r3, r1, #6
 8004988:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800498c:	0182      	lsls	r2, r0, #6
 800498e:	1a12      	subs	r2, r2, r0
 8004990:	eb63 0301 	sbc.w	r3, r3, r1
 8004994:	f04f 0000 	mov.w	r0, #0
 8004998:	f04f 0100 	mov.w	r1, #0
 800499c:	00d9      	lsls	r1, r3, #3
 800499e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049a2:	00d0      	lsls	r0, r2, #3
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	eb12 0208 	adds.w	r2, r2, r8
 80049ac:	eb43 0309 	adc.w	r3, r3, r9
 80049b0:	f04f 0000 	mov.w	r0, #0
 80049b4:	f04f 0100 	mov.w	r1, #0
 80049b8:	0259      	lsls	r1, r3, #9
 80049ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80049be:	0250      	lsls	r0, r2, #9
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4610      	mov	r0, r2
 80049c6:	4619      	mov	r1, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	461a      	mov	r2, r3
 80049cc:	f04f 0300 	mov.w	r3, #0
 80049d0:	f7fb fc56 	bl	8000280 <__aeabi_uldivmod>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4613      	mov	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	e04a      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049de:	4b31      	ldr	r3, [pc, #196]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	099b      	lsrs	r3, r3, #6
 80049e4:	461a      	mov	r2, r3
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049ee:	f04f 0100 	mov.w	r1, #0
 80049f2:	ea02 0400 	and.w	r4, r2, r0
 80049f6:	ea03 0501 	and.w	r5, r3, r1
 80049fa:	4620      	mov	r0, r4
 80049fc:	4629      	mov	r1, r5
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	014b      	lsls	r3, r1, #5
 8004a08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a0c:	0142      	lsls	r2, r0, #5
 8004a0e:	4610      	mov	r0, r2
 8004a10:	4619      	mov	r1, r3
 8004a12:	1b00      	subs	r0, r0, r4
 8004a14:	eb61 0105 	sbc.w	r1, r1, r5
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	018b      	lsls	r3, r1, #6
 8004a22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a26:	0182      	lsls	r2, r0, #6
 8004a28:	1a12      	subs	r2, r2, r0
 8004a2a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a2e:	f04f 0000 	mov.w	r0, #0
 8004a32:	f04f 0100 	mov.w	r1, #0
 8004a36:	00d9      	lsls	r1, r3, #3
 8004a38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a3c:	00d0      	lsls	r0, r2, #3
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	1912      	adds	r2, r2, r4
 8004a44:	eb45 0303 	adc.w	r3, r5, r3
 8004a48:	f04f 0000 	mov.w	r0, #0
 8004a4c:	f04f 0100 	mov.w	r1, #0
 8004a50:	0299      	lsls	r1, r3, #10
 8004a52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a56:	0290      	lsls	r0, r2, #10
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	4619      	mov	r1, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	461a      	mov	r2, r3
 8004a64:	f04f 0300 	mov.w	r3, #0
 8004a68:	f7fb fc0a 	bl	8000280 <__aeabi_uldivmod>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4613      	mov	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a74:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	0c1b      	lsrs	r3, r3, #16
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	3301      	adds	r3, #1
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8c:	60bb      	str	r3, [r7, #8]
      break;
 8004a8e:	e002      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a92:	60bb      	str	r3, [r7, #8]
      break;
 8004a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a96:	68bb      	ldr	r3, [r7, #8]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	00f42400 	.word	0x00f42400
 8004aac:	007a1200 	.word	0x007a1200

08004ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ab4:	4b03      	ldr	r3, [pc, #12]	; (8004ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	20000000 	.word	0x20000000

08004ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004acc:	f7ff fff0 	bl	8004ab0 <HAL_RCC_GetHCLKFreq>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	0a9b      	lsrs	r3, r3, #10
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	4903      	ldr	r1, [pc, #12]	; (8004aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ade:	5ccb      	ldrb	r3, [r1, r3]
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	080079b8 	.word	0x080079b8

08004af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004af4:	f7ff ffdc 	bl	8004ab0 <HAL_RCC_GetHCLKFreq>
 8004af8:	4602      	mov	r2, r0
 8004afa:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	0b5b      	lsrs	r3, r3, #13
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	4903      	ldr	r1, [pc, #12]	; (8004b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b06:	5ccb      	ldrb	r3, [r1, r3]
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40023800 	.word	0x40023800
 8004b14:	080079b8 	.word	0x080079b8

08004b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e041      	b.n	8004bae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fe f802 	bl	8002b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3304      	adds	r3, #4
 8004b54:	4619      	mov	r1, r3
 8004b56:	4610      	mov	r0, r2
 8004b58:	f000 fb42 	bl	80051e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
	...

08004bb8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d001      	beq.n	8004bd0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e046      	b.n	8004c5e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a23      	ldr	r2, [pc, #140]	; (8004c6c <HAL_TIM_Base_Start+0xb4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d022      	beq.n	8004c28 <HAL_TIM_Base_Start+0x70>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bea:	d01d      	beq.n	8004c28 <HAL_TIM_Base_Start+0x70>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a1f      	ldr	r2, [pc, #124]	; (8004c70 <HAL_TIM_Base_Start+0xb8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d018      	beq.n	8004c28 <HAL_TIM_Base_Start+0x70>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1e      	ldr	r2, [pc, #120]	; (8004c74 <HAL_TIM_Base_Start+0xbc>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d013      	beq.n	8004c28 <HAL_TIM_Base_Start+0x70>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a1c      	ldr	r2, [pc, #112]	; (8004c78 <HAL_TIM_Base_Start+0xc0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00e      	beq.n	8004c28 <HAL_TIM_Base_Start+0x70>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a1b      	ldr	r2, [pc, #108]	; (8004c7c <HAL_TIM_Base_Start+0xc4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d009      	beq.n	8004c28 <HAL_TIM_Base_Start+0x70>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a19      	ldr	r2, [pc, #100]	; (8004c80 <HAL_TIM_Base_Start+0xc8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d004      	beq.n	8004c28 <HAL_TIM_Base_Start+0x70>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a18      	ldr	r2, [pc, #96]	; (8004c84 <HAL_TIM_Base_Start+0xcc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d111      	bne.n	8004c4c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b06      	cmp	r3, #6
 8004c38:	d010      	beq.n	8004c5c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0201 	orr.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4a:	e007      	b.n	8004c5c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40010000 	.word	0x40010000
 8004c70:	40000400 	.word	0x40000400
 8004c74:	40000800 	.word	0x40000800
 8004c78:	40000c00 	.word	0x40000c00
 8004c7c:	40010400 	.word	0x40010400
 8004c80:	40014000 	.word	0x40014000
 8004c84:	40001800 	.word	0x40001800

08004c88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e041      	b.n	8004d1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f839 	bl	8004d26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	f000 fa8a 	bl	80051e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
	...

08004d3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d109      	bne.n	8004d60 <HAL_TIM_PWM_Start+0x24>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	bf14      	ite	ne
 8004d58:	2301      	movne	r3, #1
 8004d5a:	2300      	moveq	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	e022      	b.n	8004da6 <HAL_TIM_PWM_Start+0x6a>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d109      	bne.n	8004d7a <HAL_TIM_PWM_Start+0x3e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	bf14      	ite	ne
 8004d72:	2301      	movne	r3, #1
 8004d74:	2300      	moveq	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	e015      	b.n	8004da6 <HAL_TIM_PWM_Start+0x6a>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d109      	bne.n	8004d94 <HAL_TIM_PWM_Start+0x58>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	bf14      	ite	ne
 8004d8c:	2301      	movne	r3, #1
 8004d8e:	2300      	moveq	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	e008      	b.n	8004da6 <HAL_TIM_PWM_Start+0x6a>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	bf14      	ite	ne
 8004da0:	2301      	movne	r3, #1
 8004da2:	2300      	moveq	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e07c      	b.n	8004ea8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d104      	bne.n	8004dbe <HAL_TIM_PWM_Start+0x82>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dbc:	e013      	b.n	8004de6 <HAL_TIM_PWM_Start+0xaa>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d104      	bne.n	8004dce <HAL_TIM_PWM_Start+0x92>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dcc:	e00b      	b.n	8004de6 <HAL_TIM_PWM_Start+0xaa>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d104      	bne.n	8004dde <HAL_TIM_PWM_Start+0xa2>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ddc:	e003      	b.n	8004de6 <HAL_TIM_PWM_Start+0xaa>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2202      	movs	r2, #2
 8004de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2201      	movs	r2, #1
 8004dec:	6839      	ldr	r1, [r7, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 fce0 	bl	80057b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a2d      	ldr	r2, [pc, #180]	; (8004eb0 <HAL_TIM_PWM_Start+0x174>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d004      	beq.n	8004e08 <HAL_TIM_PWM_Start+0xcc>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a2c      	ldr	r2, [pc, #176]	; (8004eb4 <HAL_TIM_PWM_Start+0x178>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d101      	bne.n	8004e0c <HAL_TIM_PWM_Start+0xd0>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e000      	b.n	8004e0e <HAL_TIM_PWM_Start+0xd2>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d007      	beq.n	8004e22 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a22      	ldr	r2, [pc, #136]	; (8004eb0 <HAL_TIM_PWM_Start+0x174>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d022      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x136>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e34:	d01d      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x136>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a1f      	ldr	r2, [pc, #124]	; (8004eb8 <HAL_TIM_PWM_Start+0x17c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d018      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x136>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a1d      	ldr	r2, [pc, #116]	; (8004ebc <HAL_TIM_PWM_Start+0x180>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d013      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x136>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a1c      	ldr	r2, [pc, #112]	; (8004ec0 <HAL_TIM_PWM_Start+0x184>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d00e      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x136>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a16      	ldr	r2, [pc, #88]	; (8004eb4 <HAL_TIM_PWM_Start+0x178>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d009      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x136>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a18      	ldr	r2, [pc, #96]	; (8004ec4 <HAL_TIM_PWM_Start+0x188>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d004      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x136>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a16      	ldr	r2, [pc, #88]	; (8004ec8 <HAL_TIM_PWM_Start+0x18c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d111      	bne.n	8004e96 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b06      	cmp	r3, #6
 8004e82:	d010      	beq.n	8004ea6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0201 	orr.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e94:	e007      	b.n	8004ea6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f042 0201 	orr.w	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40010000 	.word	0x40010000
 8004eb4:	40010400 	.word	0x40010400
 8004eb8:	40000400 	.word	0x40000400
 8004ebc:	40000800 	.word	0x40000800
 8004ec0:	40000c00 	.word	0x40000c00
 8004ec4:	40014000 	.word	0x40014000
 8004ec8:	40001800 	.word	0x40001800

08004ecc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e0ae      	b.n	8005048 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b0c      	cmp	r3, #12
 8004ef6:	f200 809f 	bhi.w	8005038 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004efa:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f35 	.word	0x08004f35
 8004f04:	08005039 	.word	0x08005039
 8004f08:	08005039 	.word	0x08005039
 8004f0c:	08005039 	.word	0x08005039
 8004f10:	08004f75 	.word	0x08004f75
 8004f14:	08005039 	.word	0x08005039
 8004f18:	08005039 	.word	0x08005039
 8004f1c:	08005039 	.word	0x08005039
 8004f20:	08004fb7 	.word	0x08004fb7
 8004f24:	08005039 	.word	0x08005039
 8004f28:	08005039 	.word	0x08005039
 8004f2c:	08005039 	.word	0x08005039
 8004f30:	08004ff7 	.word	0x08004ff7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 f9f0 	bl	8005320 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0208 	orr.w	r2, r2, #8
 8004f4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0204 	bic.w	r2, r2, #4
 8004f5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6999      	ldr	r1, [r3, #24]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	619a      	str	r2, [r3, #24]
      break;
 8004f72:	e064      	b.n	800503e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68b9      	ldr	r1, [r7, #8]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fa40 	bl	8005400 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6999      	ldr	r1, [r3, #24]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	021a      	lsls	r2, r3, #8
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	619a      	str	r2, [r3, #24]
      break;
 8004fb4:	e043      	b.n	800503e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fa95 	bl	80054ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69da      	ldr	r2, [r3, #28]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0208 	orr.w	r2, r2, #8
 8004fd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69da      	ldr	r2, [r3, #28]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0204 	bic.w	r2, r2, #4
 8004fe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69d9      	ldr	r1, [r3, #28]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	61da      	str	r2, [r3, #28]
      break;
 8004ff4:	e023      	b.n	800503e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68b9      	ldr	r1, [r7, #8]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 fae9 	bl	80055d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69da      	ldr	r2, [r3, #28]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69d9      	ldr	r1, [r3, #28]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	021a      	lsls	r2, r3, #8
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	61da      	str	r2, [r3, #28]
      break;
 8005036:	e002      	b.n	800503e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	75fb      	strb	r3, [r7, #23]
      break;
 800503c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005046:	7dfb      	ldrb	r3, [r7, #23]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005064:	2b01      	cmp	r3, #1
 8005066:	d101      	bne.n	800506c <HAL_TIM_ConfigClockSource+0x1c>
 8005068:	2302      	movs	r3, #2
 800506a:	e0b4      	b.n	80051d6 <HAL_TIM_ConfigClockSource+0x186>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800508a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005092:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a4:	d03e      	beq.n	8005124 <HAL_TIM_ConfigClockSource+0xd4>
 80050a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050aa:	f200 8087 	bhi.w	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b2:	f000 8086 	beq.w	80051c2 <HAL_TIM_ConfigClockSource+0x172>
 80050b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ba:	d87f      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050bc:	2b70      	cmp	r3, #112	; 0x70
 80050be:	d01a      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0xa6>
 80050c0:	2b70      	cmp	r3, #112	; 0x70
 80050c2:	d87b      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050c4:	2b60      	cmp	r3, #96	; 0x60
 80050c6:	d050      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x11a>
 80050c8:	2b60      	cmp	r3, #96	; 0x60
 80050ca:	d877      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050cc:	2b50      	cmp	r3, #80	; 0x50
 80050ce:	d03c      	beq.n	800514a <HAL_TIM_ConfigClockSource+0xfa>
 80050d0:	2b50      	cmp	r3, #80	; 0x50
 80050d2:	d873      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050d4:	2b40      	cmp	r3, #64	; 0x40
 80050d6:	d058      	beq.n	800518a <HAL_TIM_ConfigClockSource+0x13a>
 80050d8:	2b40      	cmp	r3, #64	; 0x40
 80050da:	d86f      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050dc:	2b30      	cmp	r3, #48	; 0x30
 80050de:	d064      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x15a>
 80050e0:	2b30      	cmp	r3, #48	; 0x30
 80050e2:	d86b      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	d060      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x15a>
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d867      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d05c      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x15a>
 80050f0:	2b10      	cmp	r3, #16
 80050f2:	d05a      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x15a>
 80050f4:	e062      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6818      	ldr	r0, [r3, #0]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	6899      	ldr	r1, [r3, #8]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f000 fb35 	bl	8005774 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005118:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	609a      	str	r2, [r3, #8]
      break;
 8005122:	e04f      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6818      	ldr	r0, [r3, #0]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	6899      	ldr	r1, [r3, #8]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f000 fb1e 	bl	8005774 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005146:	609a      	str	r2, [r3, #8]
      break;
 8005148:	e03c      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6818      	ldr	r0, [r3, #0]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	6859      	ldr	r1, [r3, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	461a      	mov	r2, r3
 8005158:	f000 fa92 	bl	8005680 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2150      	movs	r1, #80	; 0x50
 8005162:	4618      	mov	r0, r3
 8005164:	f000 faeb 	bl	800573e <TIM_ITRx_SetConfig>
      break;
 8005168:	e02c      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6818      	ldr	r0, [r3, #0]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	6859      	ldr	r1, [r3, #4]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	461a      	mov	r2, r3
 8005178:	f000 fab1 	bl	80056de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2160      	movs	r1, #96	; 0x60
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fadb 	bl	800573e <TIM_ITRx_SetConfig>
      break;
 8005188:	e01c      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6859      	ldr	r1, [r3, #4]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	461a      	mov	r2, r3
 8005198:	f000 fa72 	bl	8005680 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2140      	movs	r1, #64	; 0x40
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 facb 	bl	800573e <TIM_ITRx_SetConfig>
      break;
 80051a8:	e00c      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4619      	mov	r1, r3
 80051b4:	4610      	mov	r0, r2
 80051b6:	f000 fac2 	bl	800573e <TIM_ITRx_SetConfig>
      break;
 80051ba:	e003      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	73fb      	strb	r3, [r7, #15]
      break;
 80051c0:	e000      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a40      	ldr	r2, [pc, #256]	; (80052f4 <TIM_Base_SetConfig+0x114>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d013      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051fe:	d00f      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a3d      	ldr	r2, [pc, #244]	; (80052f8 <TIM_Base_SetConfig+0x118>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00b      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a3c      	ldr	r2, [pc, #240]	; (80052fc <TIM_Base_SetConfig+0x11c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d007      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a3b      	ldr	r2, [pc, #236]	; (8005300 <TIM_Base_SetConfig+0x120>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d003      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a3a      	ldr	r2, [pc, #232]	; (8005304 <TIM_Base_SetConfig+0x124>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d108      	bne.n	8005232 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a2f      	ldr	r2, [pc, #188]	; (80052f4 <TIM_Base_SetConfig+0x114>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d02b      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005240:	d027      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a2c      	ldr	r2, [pc, #176]	; (80052f8 <TIM_Base_SetConfig+0x118>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d023      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a2b      	ldr	r2, [pc, #172]	; (80052fc <TIM_Base_SetConfig+0x11c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d01f      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a2a      	ldr	r2, [pc, #168]	; (8005300 <TIM_Base_SetConfig+0x120>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d01b      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a29      	ldr	r2, [pc, #164]	; (8005304 <TIM_Base_SetConfig+0x124>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d017      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a28      	ldr	r2, [pc, #160]	; (8005308 <TIM_Base_SetConfig+0x128>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d013      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a27      	ldr	r2, [pc, #156]	; (800530c <TIM_Base_SetConfig+0x12c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00f      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a26      	ldr	r2, [pc, #152]	; (8005310 <TIM_Base_SetConfig+0x130>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00b      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a25      	ldr	r2, [pc, #148]	; (8005314 <TIM_Base_SetConfig+0x134>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d007      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a24      	ldr	r2, [pc, #144]	; (8005318 <TIM_Base_SetConfig+0x138>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d003      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a23      	ldr	r2, [pc, #140]	; (800531c <TIM_Base_SetConfig+0x13c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d108      	bne.n	80052a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a0a      	ldr	r2, [pc, #40]	; (80052f4 <TIM_Base_SetConfig+0x114>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d003      	beq.n	80052d8 <TIM_Base_SetConfig+0xf8>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a0c      	ldr	r2, [pc, #48]	; (8005304 <TIM_Base_SetConfig+0x124>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d103      	bne.n	80052e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	691a      	ldr	r2, [r3, #16]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	615a      	str	r2, [r3, #20]
}
 80052e6:	bf00      	nop
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	40010000 	.word	0x40010000
 80052f8:	40000400 	.word	0x40000400
 80052fc:	40000800 	.word	0x40000800
 8005300:	40000c00 	.word	0x40000c00
 8005304:	40010400 	.word	0x40010400
 8005308:	40014000 	.word	0x40014000
 800530c:	40014400 	.word	0x40014400
 8005310:	40014800 	.word	0x40014800
 8005314:	40001800 	.word	0x40001800
 8005318:	40001c00 	.word	0x40001c00
 800531c:	40002000 	.word	0x40002000

08005320 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	f023 0201 	bic.w	r2, r3, #1
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0303 	bic.w	r3, r3, #3
 8005356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f023 0302 	bic.w	r3, r3, #2
 8005368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	4313      	orrs	r3, r2
 8005372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a20      	ldr	r2, [pc, #128]	; (80053f8 <TIM_OC1_SetConfig+0xd8>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d003      	beq.n	8005384 <TIM_OC1_SetConfig+0x64>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a1f      	ldr	r2, [pc, #124]	; (80053fc <TIM_OC1_SetConfig+0xdc>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d10c      	bne.n	800539e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f023 0308 	bic.w	r3, r3, #8
 800538a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	4313      	orrs	r3, r2
 8005394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f023 0304 	bic.w	r3, r3, #4
 800539c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a15      	ldr	r2, [pc, #84]	; (80053f8 <TIM_OC1_SetConfig+0xd8>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d003      	beq.n	80053ae <TIM_OC1_SetConfig+0x8e>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a14      	ldr	r2, [pc, #80]	; (80053fc <TIM_OC1_SetConfig+0xdc>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d111      	bne.n	80053d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	621a      	str	r2, [r3, #32]
}
 80053ec:	bf00      	nop
 80053ee:	371c      	adds	r7, #28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	40010000 	.word	0x40010000
 80053fc:	40010400 	.word	0x40010400

08005400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f023 0210 	bic.w	r2, r3, #16
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f023 0320 	bic.w	r3, r3, #32
 800544a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a22      	ldr	r2, [pc, #136]	; (80054e4 <TIM_OC2_SetConfig+0xe4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d003      	beq.n	8005468 <TIM_OC2_SetConfig+0x68>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a21      	ldr	r2, [pc, #132]	; (80054e8 <TIM_OC2_SetConfig+0xe8>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d10d      	bne.n	8005484 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800546e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4313      	orrs	r3, r2
 800547a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005482:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a17      	ldr	r2, [pc, #92]	; (80054e4 <TIM_OC2_SetConfig+0xe4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d003      	beq.n	8005494 <TIM_OC2_SetConfig+0x94>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a16      	ldr	r2, [pc, #88]	; (80054e8 <TIM_OC2_SetConfig+0xe8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d113      	bne.n	80054bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800549a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	621a      	str	r2, [r3, #32]
}
 80054d6:	bf00      	nop
 80054d8:	371c      	adds	r7, #28
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	40010000 	.word	0x40010000
 80054e8:	40010400 	.word	0x40010400

080054ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 0303 	bic.w	r3, r3, #3
 8005522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	021b      	lsls	r3, r3, #8
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	4313      	orrs	r3, r2
 8005540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a21      	ldr	r2, [pc, #132]	; (80055cc <TIM_OC3_SetConfig+0xe0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d003      	beq.n	8005552 <TIM_OC3_SetConfig+0x66>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a20      	ldr	r2, [pc, #128]	; (80055d0 <TIM_OC3_SetConfig+0xe4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d10d      	bne.n	800556e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005558:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	021b      	lsls	r3, r3, #8
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	4313      	orrs	r3, r2
 8005564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800556c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a16      	ldr	r2, [pc, #88]	; (80055cc <TIM_OC3_SetConfig+0xe0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d003      	beq.n	800557e <TIM_OC3_SetConfig+0x92>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a15      	ldr	r2, [pc, #84]	; (80055d0 <TIM_OC3_SetConfig+0xe4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d113      	bne.n	80055a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800558c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4313      	orrs	r3, r2
 8005598:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	621a      	str	r2, [r3, #32]
}
 80055c0:	bf00      	nop
 80055c2:	371c      	adds	r7, #28
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	40010000 	.word	0x40010000
 80055d0:	40010400 	.word	0x40010400

080055d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800560a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	021b      	lsls	r3, r3, #8
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	4313      	orrs	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800561e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	031b      	lsls	r3, r3, #12
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a12      	ldr	r2, [pc, #72]	; (8005678 <TIM_OC4_SetConfig+0xa4>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d003      	beq.n	800563c <TIM_OC4_SetConfig+0x68>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a11      	ldr	r2, [pc, #68]	; (800567c <TIM_OC4_SetConfig+0xa8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d109      	bne.n	8005650 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005642:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	019b      	lsls	r3, r3, #6
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	4313      	orrs	r3, r2
 800564e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	621a      	str	r2, [r3, #32]
}
 800566a:	bf00      	nop
 800566c:	371c      	adds	r7, #28
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40010000 	.word	0x40010000
 800567c:	40010400 	.word	0x40010400

08005680 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	f023 0201 	bic.w	r2, r3, #1
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	011b      	lsls	r3, r3, #4
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f023 030a 	bic.w	r3, r3, #10
 80056bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	621a      	str	r2, [r3, #32]
}
 80056d2:	bf00      	nop
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056de:	b480      	push	{r7}
 80056e0:	b087      	sub	sp, #28
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	60b9      	str	r1, [r7, #8]
 80056e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	f023 0210 	bic.w	r2, r3, #16
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005708:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	031b      	lsls	r3, r3, #12
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	4313      	orrs	r3, r2
 8005712:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800571a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	621a      	str	r2, [r3, #32]
}
 8005732:	bf00      	nop
 8005734:	371c      	adds	r7, #28
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800573e:	b480      	push	{r7}
 8005740:	b085      	sub	sp, #20
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	f043 0307 	orr.w	r3, r3, #7
 8005760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	609a      	str	r2, [r3, #8]
}
 8005768:	bf00      	nop
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800578e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	021a      	lsls	r2, r3, #8
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	431a      	orrs	r2, r3
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	4313      	orrs	r3, r2
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	609a      	str	r2, [r3, #8]
}
 80057a8:	bf00      	nop
 80057aa:	371c      	adds	r7, #28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f003 031f 	and.w	r3, r3, #31
 80057c6:	2201      	movs	r2, #1
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a1a      	ldr	r2, [r3, #32]
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	43db      	mvns	r3, r3
 80057d6:	401a      	ands	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a1a      	ldr	r2, [r3, #32]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f003 031f 	and.w	r3, r3, #31
 80057e6:	6879      	ldr	r1, [r7, #4]
 80057e8:	fa01 f303 	lsl.w	r3, r1, r3
 80057ec:	431a      	orrs	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	621a      	str	r2, [r3, #32]
}
 80057f2:	bf00      	nop
 80057f4:	371c      	adds	r7, #28
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
	...

08005800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005814:	2302      	movs	r3, #2
 8005816:	e05a      	b.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a21      	ldr	r2, [pc, #132]	; (80058dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d022      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005864:	d01d      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a1d      	ldr	r2, [pc, #116]	; (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d018      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a1b      	ldr	r2, [pc, #108]	; (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d013      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a1a      	ldr	r2, [pc, #104]	; (80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d00e      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a18      	ldr	r2, [pc, #96]	; (80058ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d009      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a17      	ldr	r2, [pc, #92]	; (80058f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d004      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a15      	ldr	r2, [pc, #84]	; (80058f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d10c      	bne.n	80058bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40010000 	.word	0x40010000
 80058e0:	40000400 	.word	0x40000400
 80058e4:	40000800 	.word	0x40000800
 80058e8:	40000c00 	.word	0x40000c00
 80058ec:	40010400 	.word	0x40010400
 80058f0:	40014000 	.word	0x40014000
 80058f4:	40001800 	.word	0x40001800

080058f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800590c:	2b01      	cmp	r3, #1
 800590e:	d101      	bne.n	8005914 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005910:	2302      	movs	r3, #2
 8005912:	e03d      	b.n	8005990 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	4313      	orrs	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e03f      	b.n	8005a2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d106      	bne.n	80059c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7fd fa92 	bl	8002eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2224      	movs	r2, #36	; 0x24
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 fe1d 	bl	8006620 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	691a      	ldr	r2, [r3, #16]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	695a      	ldr	r2, [r3, #20]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b08a      	sub	sp, #40	; 0x28
 8005a3a:	af02      	add	r7, sp, #8
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	603b      	str	r3, [r7, #0]
 8005a42:	4613      	mov	r3, r2
 8005a44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a46:	2300      	movs	r3, #0
 8005a48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	d17c      	bne.n	8005b50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <HAL_UART_Transmit+0x2c>
 8005a5c:	88fb      	ldrh	r3, [r7, #6]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e075      	b.n	8005b52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_UART_Transmit+0x3e>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e06e      	b.n	8005b52 <HAL_UART_Transmit+0x11c>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2221      	movs	r2, #33	; 0x21
 8005a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a8a:	f7fd fc4b 	bl	8003324 <HAL_GetTick>
 8005a8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	88fa      	ldrh	r2, [r7, #6]
 8005a94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	88fa      	ldrh	r2, [r7, #6]
 8005a9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa4:	d108      	bne.n	8005ab8 <HAL_UART_Transmit+0x82>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d104      	bne.n	8005ab8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	61bb      	str	r3, [r7, #24]
 8005ab6:	e003      	b.n	8005ac0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005abc:	2300      	movs	r3, #0
 8005abe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ac8:	e02a      	b.n	8005b20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	2180      	movs	r1, #128	; 0x80
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 fb9b 	bl	8006210 <UART_WaitOnFlagUntilTimeout>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e036      	b.n	8005b52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10b      	bne.n	8005b02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	461a      	mov	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005af8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	3302      	adds	r3, #2
 8005afe:	61bb      	str	r3, [r7, #24]
 8005b00:	e007      	b.n	8005b12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	781a      	ldrb	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1cf      	bne.n	8005aca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2200      	movs	r2, #0
 8005b32:	2140      	movs	r1, #64	; 0x40
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 fb6b 	bl	8006210 <UART_WaitOnFlagUntilTimeout>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e006      	b.n	8005b52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	e000      	b.n	8005b52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b50:	2302      	movs	r3, #2
  }
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3720      	adds	r7, #32
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b08a      	sub	sp, #40	; 0x28
 8005b5e:	af02      	add	r7, sp, #8
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	603b      	str	r3, [r7, #0]
 8005b66:	4613      	mov	r3, r2
 8005b68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b20      	cmp	r3, #32
 8005b78:	f040 808c 	bne.w	8005c94 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d002      	beq.n	8005b88 <HAL_UART_Receive+0x2e>
 8005b82:	88fb      	ldrh	r3, [r7, #6]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e084      	b.n	8005c96 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d101      	bne.n	8005b9a <HAL_UART_Receive+0x40>
 8005b96:	2302      	movs	r3, #2
 8005b98:	e07d      	b.n	8005c96 <HAL_UART_Receive+0x13c>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2222      	movs	r2, #34	; 0x22
 8005bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bb6:	f7fd fbb5 	bl	8003324 <HAL_GetTick>
 8005bba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	88fa      	ldrh	r2, [r7, #6]
 8005bc0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	88fa      	ldrh	r2, [r7, #6]
 8005bc6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd0:	d108      	bne.n	8005be4 <HAL_UART_Receive+0x8a>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d104      	bne.n	8005be4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	61bb      	str	r3, [r7, #24]
 8005be2:	e003      	b.n	8005bec <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005be8:	2300      	movs	r3, #0
 8005bea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005bf4:	e043      	b.n	8005c7e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2120      	movs	r1, #32
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 fb05 	bl	8006210 <UART_WaitOnFlagUntilTimeout>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e042      	b.n	8005c96 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10c      	bne.n	8005c30 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	3302      	adds	r3, #2
 8005c2c:	61bb      	str	r3, [r7, #24]
 8005c2e:	e01f      	b.n	8005c70 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c38:	d007      	beq.n	8005c4a <HAL_UART_Receive+0xf0>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10a      	bne.n	8005c58 <HAL_UART_Receive+0xfe>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d106      	bne.n	8005c58 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	701a      	strb	r2, [r3, #0]
 8005c56:	e008      	b.n	8005c6a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	3b01      	subs	r3, #1
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1b6      	bne.n	8005bf6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	e000      	b.n	8005c96 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005c94:	2302      	movs	r3, #2
  }
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3720      	adds	r7, #32
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
	...

08005ca0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b0ba      	sub	sp, #232	; 0xe8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005cde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10f      	bne.n	8005d06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d009      	beq.n	8005d06 <HAL_UART_IRQHandler+0x66>
 8005cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cf6:	f003 0320 	and.w	r3, r3, #32
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fbd3 	bl	80064aa <UART_Receive_IT>
      return;
 8005d04:	e256      	b.n	80061b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 80de 	beq.w	8005ecc <HAL_UART_IRQHandler+0x22c>
 8005d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d106      	bne.n	8005d2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 80d1 	beq.w	8005ecc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00b      	beq.n	8005d4e <HAL_UART_IRQHandler+0xae>
 8005d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d005      	beq.n	8005d4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	f043 0201 	orr.w	r2, r3, #1
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d52:	f003 0304 	and.w	r3, r3, #4
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00b      	beq.n	8005d72 <HAL_UART_IRQHandler+0xd2>
 8005d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d005      	beq.n	8005d72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	f043 0202 	orr.w	r2, r3, #2
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00b      	beq.n	8005d96 <HAL_UART_IRQHandler+0xf6>
 8005d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d005      	beq.n	8005d96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	f043 0204 	orr.w	r2, r3, #4
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d9a:	f003 0308 	and.w	r3, r3, #8
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d011      	beq.n	8005dc6 <HAL_UART_IRQHandler+0x126>
 8005da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005da6:	f003 0320 	and.w	r3, r3, #32
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d105      	bne.n	8005dba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d005      	beq.n	8005dc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	f043 0208 	orr.w	r2, r3, #8
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 81ed 	beq.w	80061aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd4:	f003 0320 	and.w	r3, r3, #32
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d008      	beq.n	8005dee <HAL_UART_IRQHandler+0x14e>
 8005ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de0:	f003 0320 	and.w	r3, r3, #32
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fb5e 	bl	80064aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df8:	2b40      	cmp	r3, #64	; 0x40
 8005dfa:	bf0c      	ite	eq
 8005dfc:	2301      	moveq	r3, #1
 8005dfe:	2300      	movne	r3, #0
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	f003 0308 	and.w	r3, r3, #8
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d103      	bne.n	8005e1a <HAL_UART_IRQHandler+0x17a>
 8005e12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d04f      	beq.n	8005eba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fa66 	bl	80062ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2a:	2b40      	cmp	r3, #64	; 0x40
 8005e2c:	d141      	bne.n	8005eb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3314      	adds	r3, #20
 8005e34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e3c:	e853 3f00 	ldrex	r3, [r3]
 8005e40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3314      	adds	r3, #20
 8005e56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e6a:	e841 2300 	strex	r3, r2, [r1]
 8005e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1d9      	bne.n	8005e2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d013      	beq.n	8005eaa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e86:	4a7d      	ldr	r2, [pc, #500]	; (800607c <HAL_UART_IRQHandler+0x3dc>)
 8005e88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fd ffc5 	bl	8003e1e <HAL_DMA_Abort_IT>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d016      	beq.n	8005ec8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ea4:	4610      	mov	r0, r2
 8005ea6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea8:	e00e      	b.n	8005ec8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f99a 	bl	80061e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb0:	e00a      	b.n	8005ec8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f996 	bl	80061e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb8:	e006      	b.n	8005ec8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f992 	bl	80061e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ec6:	e170      	b.n	80061aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec8:	bf00      	nop
    return;
 8005eca:	e16e      	b.n	80061aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	f040 814a 	bne.w	800616a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eda:	f003 0310 	and.w	r3, r3, #16
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 8143 	beq.w	800616a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ee8:	f003 0310 	and.w	r3, r3, #16
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 813c 	beq.w	800616a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60bb      	str	r3, [r7, #8]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	60bb      	str	r3, [r7, #8]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	60bb      	str	r3, [r7, #8]
 8005f06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f12:	2b40      	cmp	r3, #64	; 0x40
 8005f14:	f040 80b4 	bne.w	8006080 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 8140 	beq.w	80061ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f36:	429a      	cmp	r2, r3
 8005f38:	f080 8139 	bcs.w	80061ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f4e:	f000 8088 	beq.w	8006062 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	330c      	adds	r3, #12
 8005f58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f60:	e853 3f00 	ldrex	r3, [r3]
 8005f64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	330c      	adds	r3, #12
 8005f7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005f7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f8e:	e841 2300 	strex	r3, r2, [r1]
 8005f92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1d9      	bne.n	8005f52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3314      	adds	r3, #20
 8005fa4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005fae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fb0:	f023 0301 	bic.w	r3, r3, #1
 8005fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3314      	adds	r3, #20
 8005fbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005fc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005fc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005fca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005fce:	e841 2300 	strex	r3, r2, [r1]
 8005fd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005fd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1e1      	bne.n	8005f9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	3314      	adds	r3, #20
 8005fe0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3314      	adds	r3, #20
 8005ffa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ffe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006000:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006002:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006004:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006006:	e841 2300 	strex	r3, r2, [r1]
 800600a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800600c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1e3      	bne.n	8005fda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2220      	movs	r2, #32
 8006016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	330c      	adds	r3, #12
 8006026:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800602a:	e853 3f00 	ldrex	r3, [r3]
 800602e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006032:	f023 0310 	bic.w	r3, r3, #16
 8006036:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	330c      	adds	r3, #12
 8006040:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006044:	65ba      	str	r2, [r7, #88]	; 0x58
 8006046:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800604a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800604c:	e841 2300 	strex	r3, r2, [r1]
 8006050:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1e3      	bne.n	8006020 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	4618      	mov	r0, r3
 800605e:	f7fd fe6e 	bl	8003d3e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800606a:	b29b      	uxth	r3, r3
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	b29b      	uxth	r3, r3
 8006070:	4619      	mov	r1, r3
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f8c0 	bl	80061f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006078:	e099      	b.n	80061ae <HAL_UART_IRQHandler+0x50e>
 800607a:	bf00      	nop
 800607c:	080063b3 	.word	0x080063b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006088:	b29b      	uxth	r3, r3
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006094:	b29b      	uxth	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 808b 	beq.w	80061b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800609c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 8086 	beq.w	80061b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	330c      	adds	r3, #12
 80060ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	330c      	adds	r3, #12
 80060c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80060ca:	647a      	str	r2, [r7, #68]	; 0x44
 80060cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060d2:	e841 2300 	strex	r3, r2, [r1]
 80060d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1e3      	bne.n	80060a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3314      	adds	r3, #20
 80060e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	623b      	str	r3, [r7, #32]
   return(result);
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	f023 0301 	bic.w	r3, r3, #1
 80060f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	3314      	adds	r3, #20
 80060fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006102:	633a      	str	r2, [r7, #48]	; 0x30
 8006104:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006106:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800610a:	e841 2300 	strex	r3, r2, [r1]
 800610e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1e3      	bne.n	80060de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2220      	movs	r2, #32
 800611a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	330c      	adds	r3, #12
 800612a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	e853 3f00 	ldrex	r3, [r3]
 8006132:	60fb      	str	r3, [r7, #12]
   return(result);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 0310 	bic.w	r3, r3, #16
 800613a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	330c      	adds	r3, #12
 8006144:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006148:	61fa      	str	r2, [r7, #28]
 800614a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614c:	69b9      	ldr	r1, [r7, #24]
 800614e:	69fa      	ldr	r2, [r7, #28]
 8006150:	e841 2300 	strex	r3, r2, [r1]
 8006154:	617b      	str	r3, [r7, #20]
   return(result);
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1e3      	bne.n	8006124 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800615c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006160:	4619      	mov	r1, r3
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f848 	bl	80061f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006168:	e023      	b.n	80061b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800616a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800616e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006172:	2b00      	cmp	r3, #0
 8006174:	d009      	beq.n	800618a <HAL_UART_IRQHandler+0x4ea>
 8006176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800617a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800617e:	2b00      	cmp	r3, #0
 8006180:	d003      	beq.n	800618a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f929 	bl	80063da <UART_Transmit_IT>
    return;
 8006188:	e014      	b.n	80061b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800618a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800618e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00e      	beq.n	80061b4 <HAL_UART_IRQHandler+0x514>
 8006196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800619a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d008      	beq.n	80061b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f969 	bl	800647a <UART_EndTransmit_IT>
    return;
 80061a8:	e004      	b.n	80061b4 <HAL_UART_IRQHandler+0x514>
    return;
 80061aa:	bf00      	nop
 80061ac:	e002      	b.n	80061b4 <HAL_UART_IRQHandler+0x514>
      return;
 80061ae:	bf00      	nop
 80061b0:	e000      	b.n	80061b4 <HAL_UART_IRQHandler+0x514>
      return;
 80061b2:	bf00      	nop
  }
}
 80061b4:	37e8      	adds	r7, #232	; 0xe8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop

080061bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	460b      	mov	r3, r1
 8006202:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b090      	sub	sp, #64	; 0x40
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	603b      	str	r3, [r7, #0]
 800621c:	4613      	mov	r3, r2
 800621e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006220:	e050      	b.n	80062c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006228:	d04c      	beq.n	80062c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800622a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800622c:	2b00      	cmp	r3, #0
 800622e:	d007      	beq.n	8006240 <UART_WaitOnFlagUntilTimeout+0x30>
 8006230:	f7fd f878 	bl	8003324 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800623c:	429a      	cmp	r2, r3
 800623e:	d241      	bcs.n	80062c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	330c      	adds	r3, #12
 8006246:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624a:	e853 3f00 	ldrex	r3, [r3]
 800624e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006256:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	330c      	adds	r3, #12
 800625e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006260:	637a      	str	r2, [r7, #52]	; 0x34
 8006262:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006264:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006268:	e841 2300 	strex	r3, r2, [r1]
 800626c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800626e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1e5      	bne.n	8006240 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	3314      	adds	r3, #20
 800627a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	e853 3f00 	ldrex	r3, [r3]
 8006282:	613b      	str	r3, [r7, #16]
   return(result);
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f023 0301 	bic.w	r3, r3, #1
 800628a:	63bb      	str	r3, [r7, #56]	; 0x38
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3314      	adds	r3, #20
 8006292:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006294:	623a      	str	r2, [r7, #32]
 8006296:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006298:	69f9      	ldr	r1, [r7, #28]
 800629a:	6a3a      	ldr	r2, [r7, #32]
 800629c:	e841 2300 	strex	r3, r2, [r1]
 80062a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1e5      	bne.n	8006274 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2220      	movs	r2, #32
 80062b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e00f      	b.n	80062e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	4013      	ands	r3, r2
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	bf0c      	ite	eq
 80062d4:	2301      	moveq	r3, #1
 80062d6:	2300      	movne	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	461a      	mov	r2, r3
 80062dc:	79fb      	ldrb	r3, [r7, #7]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d09f      	beq.n	8006222 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3740      	adds	r7, #64	; 0x40
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b095      	sub	sp, #84	; 0x54
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	330c      	adds	r3, #12
 80062fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062fe:	e853 3f00 	ldrex	r3, [r3]
 8006302:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006306:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800630a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	330c      	adds	r3, #12
 8006312:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006314:	643a      	str	r2, [r7, #64]	; 0x40
 8006316:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006318:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800631a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800631c:	e841 2300 	strex	r3, r2, [r1]
 8006320:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1e5      	bne.n	80062f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	3314      	adds	r3, #20
 800632e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	e853 3f00 	ldrex	r3, [r3]
 8006336:	61fb      	str	r3, [r7, #28]
   return(result);
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	f023 0301 	bic.w	r3, r3, #1
 800633e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3314      	adds	r3, #20
 8006346:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006348:	62fa      	str	r2, [r7, #44]	; 0x2c
 800634a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800634e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006350:	e841 2300 	strex	r3, r2, [r1]
 8006354:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1e5      	bne.n	8006328 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006360:	2b01      	cmp	r3, #1
 8006362:	d119      	bne.n	8006398 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	330c      	adds	r3, #12
 800636a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	e853 3f00 	ldrex	r3, [r3]
 8006372:	60bb      	str	r3, [r7, #8]
   return(result);
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	f023 0310 	bic.w	r3, r3, #16
 800637a:	647b      	str	r3, [r7, #68]	; 0x44
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	330c      	adds	r3, #12
 8006382:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006384:	61ba      	str	r2, [r7, #24]
 8006386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006388:	6979      	ldr	r1, [r7, #20]
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	e841 2300 	strex	r3, r2, [r1]
 8006390:	613b      	str	r3, [r7, #16]
   return(result);
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1e5      	bne.n	8006364 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2220      	movs	r2, #32
 800639c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80063a6:	bf00      	nop
 80063a8:	3754      	adds	r7, #84	; 0x54
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b084      	sub	sp, #16
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f7ff ff09 	bl	80061e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063d2:	bf00      	nop
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063da:	b480      	push	{r7}
 80063dc:	b085      	sub	sp, #20
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b21      	cmp	r3, #33	; 0x21
 80063ec:	d13e      	bne.n	800646c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f6:	d114      	bne.n	8006422 <UART_Transmit_IT+0x48>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d110      	bne.n	8006422 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	881b      	ldrh	r3, [r3, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006414:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	1c9a      	adds	r2, r3, #2
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	621a      	str	r2, [r3, #32]
 8006420:	e008      	b.n	8006434 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	1c59      	adds	r1, r3, #1
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6211      	str	r1, [r2, #32]
 800642c:	781a      	ldrb	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006438:	b29b      	uxth	r3, r3
 800643a:	3b01      	subs	r3, #1
 800643c:	b29b      	uxth	r3, r3
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	4619      	mov	r1, r3
 8006442:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10f      	bne.n	8006468 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68da      	ldr	r2, [r3, #12]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006456:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68da      	ldr	r2, [r3, #12]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006466:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006468:	2300      	movs	r3, #0
 800646a:	e000      	b.n	800646e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800646c:	2302      	movs	r3, #2
  }
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b082      	sub	sp, #8
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68da      	ldr	r2, [r3, #12]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006490:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2220      	movs	r2, #32
 8006496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7ff fe8e 	bl	80061bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b08c      	sub	sp, #48	; 0x30
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b22      	cmp	r3, #34	; 0x22
 80064bc:	f040 80ab 	bne.w	8006616 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064c8:	d117      	bne.n	80064fa <UART_Receive_IT+0x50>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d113      	bne.n	80064fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80064d2:	2300      	movs	r3, #0
 80064d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f2:	1c9a      	adds	r2, r3, #2
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	629a      	str	r2, [r3, #40]	; 0x28
 80064f8:	e026      	b.n	8006548 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006500:	2300      	movs	r3, #0
 8006502:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800650c:	d007      	beq.n	800651e <UART_Receive_IT+0x74>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10a      	bne.n	800652c <UART_Receive_IT+0x82>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d106      	bne.n	800652c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	b2da      	uxtb	r2, r3
 8006526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006528:	701a      	strb	r2, [r3, #0]
 800652a:	e008      	b.n	800653e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	b2db      	uxtb	r3, r3
 8006534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006538:	b2da      	uxtb	r2, r3
 800653a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800654c:	b29b      	uxth	r3, r3
 800654e:	3b01      	subs	r3, #1
 8006550:	b29b      	uxth	r3, r3
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	4619      	mov	r1, r3
 8006556:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006558:	2b00      	cmp	r3, #0
 800655a:	d15a      	bne.n	8006612 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68da      	ldr	r2, [r3, #12]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f022 0220 	bic.w	r2, r2, #32
 800656a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800657a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	695a      	ldr	r2, [r3, #20]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0201 	bic.w	r2, r2, #1
 800658a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2220      	movs	r2, #32
 8006590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006598:	2b01      	cmp	r3, #1
 800659a:	d135      	bne.n	8006608 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	330c      	adds	r3, #12
 80065a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	e853 3f00 	ldrex	r3, [r3]
 80065b0:	613b      	str	r3, [r7, #16]
   return(result);
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	f023 0310 	bic.w	r3, r3, #16
 80065b8:	627b      	str	r3, [r7, #36]	; 0x24
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	330c      	adds	r3, #12
 80065c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065c2:	623a      	str	r2, [r7, #32]
 80065c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c6:	69f9      	ldr	r1, [r7, #28]
 80065c8:	6a3a      	ldr	r2, [r7, #32]
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1e5      	bne.n	80065a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0310 	and.w	r3, r3, #16
 80065e0:	2b10      	cmp	r3, #16
 80065e2:	d10a      	bne.n	80065fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065e4:	2300      	movs	r3, #0
 80065e6:	60fb      	str	r3, [r7, #12]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	60fb      	str	r3, [r7, #12]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065fe:	4619      	mov	r1, r3
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7ff fdf9 	bl	80061f8 <HAL_UARTEx_RxEventCallback>
 8006606:	e002      	b.n	800660e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f7ff fde1 	bl	80061d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	e002      	b.n	8006618 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	e000      	b.n	8006618 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006616:	2302      	movs	r3, #2
  }
}
 8006618:	4618      	mov	r0, r3
 800661a:	3730      	adds	r7, #48	; 0x30
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006624:	b09f      	sub	sp, #124	; 0x7c
 8006626:	af00      	add	r7, sp, #0
 8006628:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800662a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006636:	68d9      	ldr	r1, [r3, #12]
 8006638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	ea40 0301 	orr.w	r3, r0, r1
 8006640:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006644:	689a      	ldr	r2, [r3, #8]
 8006646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	431a      	orrs	r2, r3
 800664c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	431a      	orrs	r2, r3
 8006652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	4313      	orrs	r3, r2
 8006658:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800665a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006664:	f021 010c 	bic.w	r1, r1, #12
 8006668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800666e:	430b      	orrs	r3, r1
 8006670:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800667c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800667e:	6999      	ldr	r1, [r3, #24]
 8006680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	ea40 0301 	orr.w	r3, r0, r1
 8006688:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800668a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	4bc5      	ldr	r3, [pc, #788]	; (80069a4 <UART_SetConfig+0x384>)
 8006690:	429a      	cmp	r2, r3
 8006692:	d004      	beq.n	800669e <UART_SetConfig+0x7e>
 8006694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	4bc3      	ldr	r3, [pc, #780]	; (80069a8 <UART_SetConfig+0x388>)
 800669a:	429a      	cmp	r2, r3
 800669c:	d103      	bne.n	80066a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800669e:	f7fe fa27 	bl	8004af0 <HAL_RCC_GetPCLK2Freq>
 80066a2:	6778      	str	r0, [r7, #116]	; 0x74
 80066a4:	e002      	b.n	80066ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066a6:	f7fe fa0f 	bl	8004ac8 <HAL_RCC_GetPCLK1Freq>
 80066aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066b4:	f040 80b6 	bne.w	8006824 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066ba:	461c      	mov	r4, r3
 80066bc:	f04f 0500 	mov.w	r5, #0
 80066c0:	4622      	mov	r2, r4
 80066c2:	462b      	mov	r3, r5
 80066c4:	1891      	adds	r1, r2, r2
 80066c6:	6439      	str	r1, [r7, #64]	; 0x40
 80066c8:	415b      	adcs	r3, r3
 80066ca:	647b      	str	r3, [r7, #68]	; 0x44
 80066cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066d0:	1912      	adds	r2, r2, r4
 80066d2:	eb45 0303 	adc.w	r3, r5, r3
 80066d6:	f04f 0000 	mov.w	r0, #0
 80066da:	f04f 0100 	mov.w	r1, #0
 80066de:	00d9      	lsls	r1, r3, #3
 80066e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066e4:	00d0      	lsls	r0, r2, #3
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	1911      	adds	r1, r2, r4
 80066ec:	6639      	str	r1, [r7, #96]	; 0x60
 80066ee:	416b      	adcs	r3, r5
 80066f0:	667b      	str	r3, [r7, #100]	; 0x64
 80066f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	461a      	mov	r2, r3
 80066f8:	f04f 0300 	mov.w	r3, #0
 80066fc:	1891      	adds	r1, r2, r2
 80066fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8006700:	415b      	adcs	r3, r3
 8006702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006704:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006708:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800670c:	f7f9 fdb8 	bl	8000280 <__aeabi_uldivmod>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	4ba5      	ldr	r3, [pc, #660]	; (80069ac <UART_SetConfig+0x38c>)
 8006716:	fba3 2302 	umull	r2, r3, r3, r2
 800671a:	095b      	lsrs	r3, r3, #5
 800671c:	011e      	lsls	r6, r3, #4
 800671e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006720:	461c      	mov	r4, r3
 8006722:	f04f 0500 	mov.w	r5, #0
 8006726:	4622      	mov	r2, r4
 8006728:	462b      	mov	r3, r5
 800672a:	1891      	adds	r1, r2, r2
 800672c:	6339      	str	r1, [r7, #48]	; 0x30
 800672e:	415b      	adcs	r3, r3
 8006730:	637b      	str	r3, [r7, #52]	; 0x34
 8006732:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006736:	1912      	adds	r2, r2, r4
 8006738:	eb45 0303 	adc.w	r3, r5, r3
 800673c:	f04f 0000 	mov.w	r0, #0
 8006740:	f04f 0100 	mov.w	r1, #0
 8006744:	00d9      	lsls	r1, r3, #3
 8006746:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800674a:	00d0      	lsls	r0, r2, #3
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	1911      	adds	r1, r2, r4
 8006752:	65b9      	str	r1, [r7, #88]	; 0x58
 8006754:	416b      	adcs	r3, r5
 8006756:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	461a      	mov	r2, r3
 800675e:	f04f 0300 	mov.w	r3, #0
 8006762:	1891      	adds	r1, r2, r2
 8006764:	62b9      	str	r1, [r7, #40]	; 0x28
 8006766:	415b      	adcs	r3, r3
 8006768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800676a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800676e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006772:	f7f9 fd85 	bl	8000280 <__aeabi_uldivmod>
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	4b8c      	ldr	r3, [pc, #560]	; (80069ac <UART_SetConfig+0x38c>)
 800677c:	fba3 1302 	umull	r1, r3, r3, r2
 8006780:	095b      	lsrs	r3, r3, #5
 8006782:	2164      	movs	r1, #100	; 0x64
 8006784:	fb01 f303 	mul.w	r3, r1, r3
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	00db      	lsls	r3, r3, #3
 800678c:	3332      	adds	r3, #50	; 0x32
 800678e:	4a87      	ldr	r2, [pc, #540]	; (80069ac <UART_SetConfig+0x38c>)
 8006790:	fba2 2303 	umull	r2, r3, r2, r3
 8006794:	095b      	lsrs	r3, r3, #5
 8006796:	005b      	lsls	r3, r3, #1
 8006798:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800679c:	441e      	add	r6, r3
 800679e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067a0:	4618      	mov	r0, r3
 80067a2:	f04f 0100 	mov.w	r1, #0
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	1894      	adds	r4, r2, r2
 80067ac:	623c      	str	r4, [r7, #32]
 80067ae:	415b      	adcs	r3, r3
 80067b0:	627b      	str	r3, [r7, #36]	; 0x24
 80067b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067b6:	1812      	adds	r2, r2, r0
 80067b8:	eb41 0303 	adc.w	r3, r1, r3
 80067bc:	f04f 0400 	mov.w	r4, #0
 80067c0:	f04f 0500 	mov.w	r5, #0
 80067c4:	00dd      	lsls	r5, r3, #3
 80067c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80067ca:	00d4      	lsls	r4, r2, #3
 80067cc:	4622      	mov	r2, r4
 80067ce:	462b      	mov	r3, r5
 80067d0:	1814      	adds	r4, r2, r0
 80067d2:	653c      	str	r4, [r7, #80]	; 0x50
 80067d4:	414b      	adcs	r3, r1
 80067d6:	657b      	str	r3, [r7, #84]	; 0x54
 80067d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	461a      	mov	r2, r3
 80067de:	f04f 0300 	mov.w	r3, #0
 80067e2:	1891      	adds	r1, r2, r2
 80067e4:	61b9      	str	r1, [r7, #24]
 80067e6:	415b      	adcs	r3, r3
 80067e8:	61fb      	str	r3, [r7, #28]
 80067ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80067f2:	f7f9 fd45 	bl	8000280 <__aeabi_uldivmod>
 80067f6:	4602      	mov	r2, r0
 80067f8:	460b      	mov	r3, r1
 80067fa:	4b6c      	ldr	r3, [pc, #432]	; (80069ac <UART_SetConfig+0x38c>)
 80067fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006800:	095b      	lsrs	r3, r3, #5
 8006802:	2164      	movs	r1, #100	; 0x64
 8006804:	fb01 f303 	mul.w	r3, r1, r3
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	00db      	lsls	r3, r3, #3
 800680c:	3332      	adds	r3, #50	; 0x32
 800680e:	4a67      	ldr	r2, [pc, #412]	; (80069ac <UART_SetConfig+0x38c>)
 8006810:	fba2 2303 	umull	r2, r3, r2, r3
 8006814:	095b      	lsrs	r3, r3, #5
 8006816:	f003 0207 	and.w	r2, r3, #7
 800681a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4432      	add	r2, r6
 8006820:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006822:	e0b9      	b.n	8006998 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006824:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006826:	461c      	mov	r4, r3
 8006828:	f04f 0500 	mov.w	r5, #0
 800682c:	4622      	mov	r2, r4
 800682e:	462b      	mov	r3, r5
 8006830:	1891      	adds	r1, r2, r2
 8006832:	6139      	str	r1, [r7, #16]
 8006834:	415b      	adcs	r3, r3
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800683c:	1912      	adds	r2, r2, r4
 800683e:	eb45 0303 	adc.w	r3, r5, r3
 8006842:	f04f 0000 	mov.w	r0, #0
 8006846:	f04f 0100 	mov.w	r1, #0
 800684a:	00d9      	lsls	r1, r3, #3
 800684c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006850:	00d0      	lsls	r0, r2, #3
 8006852:	4602      	mov	r2, r0
 8006854:	460b      	mov	r3, r1
 8006856:	eb12 0804 	adds.w	r8, r2, r4
 800685a:	eb43 0905 	adc.w	r9, r3, r5
 800685e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	4618      	mov	r0, r3
 8006864:	f04f 0100 	mov.w	r1, #0
 8006868:	f04f 0200 	mov.w	r2, #0
 800686c:	f04f 0300 	mov.w	r3, #0
 8006870:	008b      	lsls	r3, r1, #2
 8006872:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006876:	0082      	lsls	r2, r0, #2
 8006878:	4640      	mov	r0, r8
 800687a:	4649      	mov	r1, r9
 800687c:	f7f9 fd00 	bl	8000280 <__aeabi_uldivmod>
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	4b49      	ldr	r3, [pc, #292]	; (80069ac <UART_SetConfig+0x38c>)
 8006886:	fba3 2302 	umull	r2, r3, r3, r2
 800688a:	095b      	lsrs	r3, r3, #5
 800688c:	011e      	lsls	r6, r3, #4
 800688e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006890:	4618      	mov	r0, r3
 8006892:	f04f 0100 	mov.w	r1, #0
 8006896:	4602      	mov	r2, r0
 8006898:	460b      	mov	r3, r1
 800689a:	1894      	adds	r4, r2, r2
 800689c:	60bc      	str	r4, [r7, #8]
 800689e:	415b      	adcs	r3, r3
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068a6:	1812      	adds	r2, r2, r0
 80068a8:	eb41 0303 	adc.w	r3, r1, r3
 80068ac:	f04f 0400 	mov.w	r4, #0
 80068b0:	f04f 0500 	mov.w	r5, #0
 80068b4:	00dd      	lsls	r5, r3, #3
 80068b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80068ba:	00d4      	lsls	r4, r2, #3
 80068bc:	4622      	mov	r2, r4
 80068be:	462b      	mov	r3, r5
 80068c0:	1814      	adds	r4, r2, r0
 80068c2:	64bc      	str	r4, [r7, #72]	; 0x48
 80068c4:	414b      	adcs	r3, r1
 80068c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f04f 0100 	mov.w	r1, #0
 80068d2:	f04f 0200 	mov.w	r2, #0
 80068d6:	f04f 0300 	mov.w	r3, #0
 80068da:	008b      	lsls	r3, r1, #2
 80068dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80068e0:	0082      	lsls	r2, r0, #2
 80068e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80068e6:	f7f9 fccb 	bl	8000280 <__aeabi_uldivmod>
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	4b2f      	ldr	r3, [pc, #188]	; (80069ac <UART_SetConfig+0x38c>)
 80068f0:	fba3 1302 	umull	r1, r3, r3, r2
 80068f4:	095b      	lsrs	r3, r3, #5
 80068f6:	2164      	movs	r1, #100	; 0x64
 80068f8:	fb01 f303 	mul.w	r3, r1, r3
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	011b      	lsls	r3, r3, #4
 8006900:	3332      	adds	r3, #50	; 0x32
 8006902:	4a2a      	ldr	r2, [pc, #168]	; (80069ac <UART_SetConfig+0x38c>)
 8006904:	fba2 2303 	umull	r2, r3, r2, r3
 8006908:	095b      	lsrs	r3, r3, #5
 800690a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800690e:	441e      	add	r6, r3
 8006910:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006912:	4618      	mov	r0, r3
 8006914:	f04f 0100 	mov.w	r1, #0
 8006918:	4602      	mov	r2, r0
 800691a:	460b      	mov	r3, r1
 800691c:	1894      	adds	r4, r2, r2
 800691e:	603c      	str	r4, [r7, #0]
 8006920:	415b      	adcs	r3, r3
 8006922:	607b      	str	r3, [r7, #4]
 8006924:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006928:	1812      	adds	r2, r2, r0
 800692a:	eb41 0303 	adc.w	r3, r1, r3
 800692e:	f04f 0400 	mov.w	r4, #0
 8006932:	f04f 0500 	mov.w	r5, #0
 8006936:	00dd      	lsls	r5, r3, #3
 8006938:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800693c:	00d4      	lsls	r4, r2, #3
 800693e:	4622      	mov	r2, r4
 8006940:	462b      	mov	r3, r5
 8006942:	eb12 0a00 	adds.w	sl, r2, r0
 8006946:	eb43 0b01 	adc.w	fp, r3, r1
 800694a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	4618      	mov	r0, r3
 8006950:	f04f 0100 	mov.w	r1, #0
 8006954:	f04f 0200 	mov.w	r2, #0
 8006958:	f04f 0300 	mov.w	r3, #0
 800695c:	008b      	lsls	r3, r1, #2
 800695e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006962:	0082      	lsls	r2, r0, #2
 8006964:	4650      	mov	r0, sl
 8006966:	4659      	mov	r1, fp
 8006968:	f7f9 fc8a 	bl	8000280 <__aeabi_uldivmod>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	4b0e      	ldr	r3, [pc, #56]	; (80069ac <UART_SetConfig+0x38c>)
 8006972:	fba3 1302 	umull	r1, r3, r3, r2
 8006976:	095b      	lsrs	r3, r3, #5
 8006978:	2164      	movs	r1, #100	; 0x64
 800697a:	fb01 f303 	mul.w	r3, r1, r3
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	011b      	lsls	r3, r3, #4
 8006982:	3332      	adds	r3, #50	; 0x32
 8006984:	4a09      	ldr	r2, [pc, #36]	; (80069ac <UART_SetConfig+0x38c>)
 8006986:	fba2 2303 	umull	r2, r3, r2, r3
 800698a:	095b      	lsrs	r3, r3, #5
 800698c:	f003 020f 	and.w	r2, r3, #15
 8006990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4432      	add	r2, r6
 8006996:	609a      	str	r2, [r3, #8]
}
 8006998:	bf00      	nop
 800699a:	377c      	adds	r7, #124	; 0x7c
 800699c:	46bd      	mov	sp, r7
 800699e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a2:	bf00      	nop
 80069a4:	40011000 	.word	0x40011000
 80069a8:	40011400 	.word	0x40011400
 80069ac:	51eb851f 	.word	0x51eb851f

080069b0 <__errno>:
 80069b0:	4b01      	ldr	r3, [pc, #4]	; (80069b8 <__errno+0x8>)
 80069b2:	6818      	ldr	r0, [r3, #0]
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	2000000c 	.word	0x2000000c

080069bc <__libc_init_array>:
 80069bc:	b570      	push	{r4, r5, r6, lr}
 80069be:	4d0d      	ldr	r5, [pc, #52]	; (80069f4 <__libc_init_array+0x38>)
 80069c0:	4c0d      	ldr	r4, [pc, #52]	; (80069f8 <__libc_init_array+0x3c>)
 80069c2:	1b64      	subs	r4, r4, r5
 80069c4:	10a4      	asrs	r4, r4, #2
 80069c6:	2600      	movs	r6, #0
 80069c8:	42a6      	cmp	r6, r4
 80069ca:	d109      	bne.n	80069e0 <__libc_init_array+0x24>
 80069cc:	4d0b      	ldr	r5, [pc, #44]	; (80069fc <__libc_init_array+0x40>)
 80069ce:	4c0c      	ldr	r4, [pc, #48]	; (8006a00 <__libc_init_array+0x44>)
 80069d0:	f000 fc4e 	bl	8007270 <_init>
 80069d4:	1b64      	subs	r4, r4, r5
 80069d6:	10a4      	asrs	r4, r4, #2
 80069d8:	2600      	movs	r6, #0
 80069da:	42a6      	cmp	r6, r4
 80069dc:	d105      	bne.n	80069ea <__libc_init_array+0x2e>
 80069de:	bd70      	pop	{r4, r5, r6, pc}
 80069e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069e4:	4798      	blx	r3
 80069e6:	3601      	adds	r6, #1
 80069e8:	e7ee      	b.n	80069c8 <__libc_init_array+0xc>
 80069ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ee:	4798      	blx	r3
 80069f0:	3601      	adds	r6, #1
 80069f2:	e7f2      	b.n	80069da <__libc_init_array+0x1e>
 80069f4:	080079fc 	.word	0x080079fc
 80069f8:	080079fc 	.word	0x080079fc
 80069fc:	080079fc 	.word	0x080079fc
 8006a00:	08007a00 	.word	0x08007a00

08006a04 <memset>:
 8006a04:	4402      	add	r2, r0
 8006a06:	4603      	mov	r3, r0
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d100      	bne.n	8006a0e <memset+0xa>
 8006a0c:	4770      	bx	lr
 8006a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a12:	e7f9      	b.n	8006a08 <memset+0x4>

08006a14 <siprintf>:
 8006a14:	b40e      	push	{r1, r2, r3}
 8006a16:	b500      	push	{lr}
 8006a18:	b09c      	sub	sp, #112	; 0x70
 8006a1a:	ab1d      	add	r3, sp, #116	; 0x74
 8006a1c:	9002      	str	r0, [sp, #8]
 8006a1e:	9006      	str	r0, [sp, #24]
 8006a20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a24:	4809      	ldr	r0, [pc, #36]	; (8006a4c <siprintf+0x38>)
 8006a26:	9107      	str	r1, [sp, #28]
 8006a28:	9104      	str	r1, [sp, #16]
 8006a2a:	4909      	ldr	r1, [pc, #36]	; (8006a50 <siprintf+0x3c>)
 8006a2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a30:	9105      	str	r1, [sp, #20]
 8006a32:	6800      	ldr	r0, [r0, #0]
 8006a34:	9301      	str	r3, [sp, #4]
 8006a36:	a902      	add	r1, sp, #8
 8006a38:	f000 f868 	bl	8006b0c <_svfiprintf_r>
 8006a3c:	9b02      	ldr	r3, [sp, #8]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	b01c      	add	sp, #112	; 0x70
 8006a44:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a48:	b003      	add	sp, #12
 8006a4a:	4770      	bx	lr
 8006a4c:	2000000c 	.word	0x2000000c
 8006a50:	ffff0208 	.word	0xffff0208

08006a54 <__ssputs_r>:
 8006a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a58:	688e      	ldr	r6, [r1, #8]
 8006a5a:	429e      	cmp	r6, r3
 8006a5c:	4682      	mov	sl, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	4690      	mov	r8, r2
 8006a62:	461f      	mov	r7, r3
 8006a64:	d838      	bhi.n	8006ad8 <__ssputs_r+0x84>
 8006a66:	898a      	ldrh	r2, [r1, #12]
 8006a68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a6c:	d032      	beq.n	8006ad4 <__ssputs_r+0x80>
 8006a6e:	6825      	ldr	r5, [r4, #0]
 8006a70:	6909      	ldr	r1, [r1, #16]
 8006a72:	eba5 0901 	sub.w	r9, r5, r1
 8006a76:	6965      	ldr	r5, [r4, #20]
 8006a78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a80:	3301      	adds	r3, #1
 8006a82:	444b      	add	r3, r9
 8006a84:	106d      	asrs	r5, r5, #1
 8006a86:	429d      	cmp	r5, r3
 8006a88:	bf38      	it	cc
 8006a8a:	461d      	movcc	r5, r3
 8006a8c:	0553      	lsls	r3, r2, #21
 8006a8e:	d531      	bpl.n	8006af4 <__ssputs_r+0xa0>
 8006a90:	4629      	mov	r1, r5
 8006a92:	f000 fb47 	bl	8007124 <_malloc_r>
 8006a96:	4606      	mov	r6, r0
 8006a98:	b950      	cbnz	r0, 8006ab0 <__ssputs_r+0x5c>
 8006a9a:	230c      	movs	r3, #12
 8006a9c:	f8ca 3000 	str.w	r3, [sl]
 8006aa0:	89a3      	ldrh	r3, [r4, #12]
 8006aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aa6:	81a3      	strh	r3, [r4, #12]
 8006aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8006aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab0:	6921      	ldr	r1, [r4, #16]
 8006ab2:	464a      	mov	r2, r9
 8006ab4:	f000 fabe 	bl	8007034 <memcpy>
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac2:	81a3      	strh	r3, [r4, #12]
 8006ac4:	6126      	str	r6, [r4, #16]
 8006ac6:	6165      	str	r5, [r4, #20]
 8006ac8:	444e      	add	r6, r9
 8006aca:	eba5 0509 	sub.w	r5, r5, r9
 8006ace:	6026      	str	r6, [r4, #0]
 8006ad0:	60a5      	str	r5, [r4, #8]
 8006ad2:	463e      	mov	r6, r7
 8006ad4:	42be      	cmp	r6, r7
 8006ad6:	d900      	bls.n	8006ada <__ssputs_r+0x86>
 8006ad8:	463e      	mov	r6, r7
 8006ada:	4632      	mov	r2, r6
 8006adc:	6820      	ldr	r0, [r4, #0]
 8006ade:	4641      	mov	r1, r8
 8006ae0:	f000 fab6 	bl	8007050 <memmove>
 8006ae4:	68a3      	ldr	r3, [r4, #8]
 8006ae6:	6822      	ldr	r2, [r4, #0]
 8006ae8:	1b9b      	subs	r3, r3, r6
 8006aea:	4432      	add	r2, r6
 8006aec:	60a3      	str	r3, [r4, #8]
 8006aee:	6022      	str	r2, [r4, #0]
 8006af0:	2000      	movs	r0, #0
 8006af2:	e7db      	b.n	8006aac <__ssputs_r+0x58>
 8006af4:	462a      	mov	r2, r5
 8006af6:	f000 fb6f 	bl	80071d8 <_realloc_r>
 8006afa:	4606      	mov	r6, r0
 8006afc:	2800      	cmp	r0, #0
 8006afe:	d1e1      	bne.n	8006ac4 <__ssputs_r+0x70>
 8006b00:	6921      	ldr	r1, [r4, #16]
 8006b02:	4650      	mov	r0, sl
 8006b04:	f000 fabe 	bl	8007084 <_free_r>
 8006b08:	e7c7      	b.n	8006a9a <__ssputs_r+0x46>
	...

08006b0c <_svfiprintf_r>:
 8006b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b10:	4698      	mov	r8, r3
 8006b12:	898b      	ldrh	r3, [r1, #12]
 8006b14:	061b      	lsls	r3, r3, #24
 8006b16:	b09d      	sub	sp, #116	; 0x74
 8006b18:	4607      	mov	r7, r0
 8006b1a:	460d      	mov	r5, r1
 8006b1c:	4614      	mov	r4, r2
 8006b1e:	d50e      	bpl.n	8006b3e <_svfiprintf_r+0x32>
 8006b20:	690b      	ldr	r3, [r1, #16]
 8006b22:	b963      	cbnz	r3, 8006b3e <_svfiprintf_r+0x32>
 8006b24:	2140      	movs	r1, #64	; 0x40
 8006b26:	f000 fafd 	bl	8007124 <_malloc_r>
 8006b2a:	6028      	str	r0, [r5, #0]
 8006b2c:	6128      	str	r0, [r5, #16]
 8006b2e:	b920      	cbnz	r0, 8006b3a <_svfiprintf_r+0x2e>
 8006b30:	230c      	movs	r3, #12
 8006b32:	603b      	str	r3, [r7, #0]
 8006b34:	f04f 30ff 	mov.w	r0, #4294967295
 8006b38:	e0d1      	b.n	8006cde <_svfiprintf_r+0x1d2>
 8006b3a:	2340      	movs	r3, #64	; 0x40
 8006b3c:	616b      	str	r3, [r5, #20]
 8006b3e:	2300      	movs	r3, #0
 8006b40:	9309      	str	r3, [sp, #36]	; 0x24
 8006b42:	2320      	movs	r3, #32
 8006b44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b48:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b4c:	2330      	movs	r3, #48	; 0x30
 8006b4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006cf8 <_svfiprintf_r+0x1ec>
 8006b52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b56:	f04f 0901 	mov.w	r9, #1
 8006b5a:	4623      	mov	r3, r4
 8006b5c:	469a      	mov	sl, r3
 8006b5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b62:	b10a      	cbz	r2, 8006b68 <_svfiprintf_r+0x5c>
 8006b64:	2a25      	cmp	r2, #37	; 0x25
 8006b66:	d1f9      	bne.n	8006b5c <_svfiprintf_r+0x50>
 8006b68:	ebba 0b04 	subs.w	fp, sl, r4
 8006b6c:	d00b      	beq.n	8006b86 <_svfiprintf_r+0x7a>
 8006b6e:	465b      	mov	r3, fp
 8006b70:	4622      	mov	r2, r4
 8006b72:	4629      	mov	r1, r5
 8006b74:	4638      	mov	r0, r7
 8006b76:	f7ff ff6d 	bl	8006a54 <__ssputs_r>
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	f000 80aa 	beq.w	8006cd4 <_svfiprintf_r+0x1c8>
 8006b80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b82:	445a      	add	r2, fp
 8006b84:	9209      	str	r2, [sp, #36]	; 0x24
 8006b86:	f89a 3000 	ldrb.w	r3, [sl]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f000 80a2 	beq.w	8006cd4 <_svfiprintf_r+0x1c8>
 8006b90:	2300      	movs	r3, #0
 8006b92:	f04f 32ff 	mov.w	r2, #4294967295
 8006b96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b9a:	f10a 0a01 	add.w	sl, sl, #1
 8006b9e:	9304      	str	r3, [sp, #16]
 8006ba0:	9307      	str	r3, [sp, #28]
 8006ba2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ba6:	931a      	str	r3, [sp, #104]	; 0x68
 8006ba8:	4654      	mov	r4, sl
 8006baa:	2205      	movs	r2, #5
 8006bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bb0:	4851      	ldr	r0, [pc, #324]	; (8006cf8 <_svfiprintf_r+0x1ec>)
 8006bb2:	f7f9 fb15 	bl	80001e0 <memchr>
 8006bb6:	9a04      	ldr	r2, [sp, #16]
 8006bb8:	b9d8      	cbnz	r0, 8006bf2 <_svfiprintf_r+0xe6>
 8006bba:	06d0      	lsls	r0, r2, #27
 8006bbc:	bf44      	itt	mi
 8006bbe:	2320      	movmi	r3, #32
 8006bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bc4:	0711      	lsls	r1, r2, #28
 8006bc6:	bf44      	itt	mi
 8006bc8:	232b      	movmi	r3, #43	; 0x2b
 8006bca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bce:	f89a 3000 	ldrb.w	r3, [sl]
 8006bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8006bd4:	d015      	beq.n	8006c02 <_svfiprintf_r+0xf6>
 8006bd6:	9a07      	ldr	r2, [sp, #28]
 8006bd8:	4654      	mov	r4, sl
 8006bda:	2000      	movs	r0, #0
 8006bdc:	f04f 0c0a 	mov.w	ip, #10
 8006be0:	4621      	mov	r1, r4
 8006be2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006be6:	3b30      	subs	r3, #48	; 0x30
 8006be8:	2b09      	cmp	r3, #9
 8006bea:	d94e      	bls.n	8006c8a <_svfiprintf_r+0x17e>
 8006bec:	b1b0      	cbz	r0, 8006c1c <_svfiprintf_r+0x110>
 8006bee:	9207      	str	r2, [sp, #28]
 8006bf0:	e014      	b.n	8006c1c <_svfiprintf_r+0x110>
 8006bf2:	eba0 0308 	sub.w	r3, r0, r8
 8006bf6:	fa09 f303 	lsl.w	r3, r9, r3
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	9304      	str	r3, [sp, #16]
 8006bfe:	46a2      	mov	sl, r4
 8006c00:	e7d2      	b.n	8006ba8 <_svfiprintf_r+0x9c>
 8006c02:	9b03      	ldr	r3, [sp, #12]
 8006c04:	1d19      	adds	r1, r3, #4
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	9103      	str	r1, [sp, #12]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	bfbb      	ittet	lt
 8006c0e:	425b      	neglt	r3, r3
 8006c10:	f042 0202 	orrlt.w	r2, r2, #2
 8006c14:	9307      	strge	r3, [sp, #28]
 8006c16:	9307      	strlt	r3, [sp, #28]
 8006c18:	bfb8      	it	lt
 8006c1a:	9204      	strlt	r2, [sp, #16]
 8006c1c:	7823      	ldrb	r3, [r4, #0]
 8006c1e:	2b2e      	cmp	r3, #46	; 0x2e
 8006c20:	d10c      	bne.n	8006c3c <_svfiprintf_r+0x130>
 8006c22:	7863      	ldrb	r3, [r4, #1]
 8006c24:	2b2a      	cmp	r3, #42	; 0x2a
 8006c26:	d135      	bne.n	8006c94 <_svfiprintf_r+0x188>
 8006c28:	9b03      	ldr	r3, [sp, #12]
 8006c2a:	1d1a      	adds	r2, r3, #4
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	9203      	str	r2, [sp, #12]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	bfb8      	it	lt
 8006c34:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c38:	3402      	adds	r4, #2
 8006c3a:	9305      	str	r3, [sp, #20]
 8006c3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006d08 <_svfiprintf_r+0x1fc>
 8006c40:	7821      	ldrb	r1, [r4, #0]
 8006c42:	2203      	movs	r2, #3
 8006c44:	4650      	mov	r0, sl
 8006c46:	f7f9 facb 	bl	80001e0 <memchr>
 8006c4a:	b140      	cbz	r0, 8006c5e <_svfiprintf_r+0x152>
 8006c4c:	2340      	movs	r3, #64	; 0x40
 8006c4e:	eba0 000a 	sub.w	r0, r0, sl
 8006c52:	fa03 f000 	lsl.w	r0, r3, r0
 8006c56:	9b04      	ldr	r3, [sp, #16]
 8006c58:	4303      	orrs	r3, r0
 8006c5a:	3401      	adds	r4, #1
 8006c5c:	9304      	str	r3, [sp, #16]
 8006c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c62:	4826      	ldr	r0, [pc, #152]	; (8006cfc <_svfiprintf_r+0x1f0>)
 8006c64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c68:	2206      	movs	r2, #6
 8006c6a:	f7f9 fab9 	bl	80001e0 <memchr>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d038      	beq.n	8006ce4 <_svfiprintf_r+0x1d8>
 8006c72:	4b23      	ldr	r3, [pc, #140]	; (8006d00 <_svfiprintf_r+0x1f4>)
 8006c74:	bb1b      	cbnz	r3, 8006cbe <_svfiprintf_r+0x1b2>
 8006c76:	9b03      	ldr	r3, [sp, #12]
 8006c78:	3307      	adds	r3, #7
 8006c7a:	f023 0307 	bic.w	r3, r3, #7
 8006c7e:	3308      	adds	r3, #8
 8006c80:	9303      	str	r3, [sp, #12]
 8006c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c84:	4433      	add	r3, r6
 8006c86:	9309      	str	r3, [sp, #36]	; 0x24
 8006c88:	e767      	b.n	8006b5a <_svfiprintf_r+0x4e>
 8006c8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c8e:	460c      	mov	r4, r1
 8006c90:	2001      	movs	r0, #1
 8006c92:	e7a5      	b.n	8006be0 <_svfiprintf_r+0xd4>
 8006c94:	2300      	movs	r3, #0
 8006c96:	3401      	adds	r4, #1
 8006c98:	9305      	str	r3, [sp, #20]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	f04f 0c0a 	mov.w	ip, #10
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ca6:	3a30      	subs	r2, #48	; 0x30
 8006ca8:	2a09      	cmp	r2, #9
 8006caa:	d903      	bls.n	8006cb4 <_svfiprintf_r+0x1a8>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d0c5      	beq.n	8006c3c <_svfiprintf_r+0x130>
 8006cb0:	9105      	str	r1, [sp, #20]
 8006cb2:	e7c3      	b.n	8006c3c <_svfiprintf_r+0x130>
 8006cb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cb8:	4604      	mov	r4, r0
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e7f0      	b.n	8006ca0 <_svfiprintf_r+0x194>
 8006cbe:	ab03      	add	r3, sp, #12
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	462a      	mov	r2, r5
 8006cc4:	4b0f      	ldr	r3, [pc, #60]	; (8006d04 <_svfiprintf_r+0x1f8>)
 8006cc6:	a904      	add	r1, sp, #16
 8006cc8:	4638      	mov	r0, r7
 8006cca:	f3af 8000 	nop.w
 8006cce:	1c42      	adds	r2, r0, #1
 8006cd0:	4606      	mov	r6, r0
 8006cd2:	d1d6      	bne.n	8006c82 <_svfiprintf_r+0x176>
 8006cd4:	89ab      	ldrh	r3, [r5, #12]
 8006cd6:	065b      	lsls	r3, r3, #25
 8006cd8:	f53f af2c 	bmi.w	8006b34 <_svfiprintf_r+0x28>
 8006cdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cde:	b01d      	add	sp, #116	; 0x74
 8006ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce4:	ab03      	add	r3, sp, #12
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	462a      	mov	r2, r5
 8006cea:	4b06      	ldr	r3, [pc, #24]	; (8006d04 <_svfiprintf_r+0x1f8>)
 8006cec:	a904      	add	r1, sp, #16
 8006cee:	4638      	mov	r0, r7
 8006cf0:	f000 f87a 	bl	8006de8 <_printf_i>
 8006cf4:	e7eb      	b.n	8006cce <_svfiprintf_r+0x1c2>
 8006cf6:	bf00      	nop
 8006cf8:	080079c0 	.word	0x080079c0
 8006cfc:	080079ca 	.word	0x080079ca
 8006d00:	00000000 	.word	0x00000000
 8006d04:	08006a55 	.word	0x08006a55
 8006d08:	080079c6 	.word	0x080079c6

08006d0c <_printf_common>:
 8006d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d10:	4616      	mov	r6, r2
 8006d12:	4699      	mov	r9, r3
 8006d14:	688a      	ldr	r2, [r1, #8]
 8006d16:	690b      	ldr	r3, [r1, #16]
 8006d18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	bfb8      	it	lt
 8006d20:	4613      	movlt	r3, r2
 8006d22:	6033      	str	r3, [r6, #0]
 8006d24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d28:	4607      	mov	r7, r0
 8006d2a:	460c      	mov	r4, r1
 8006d2c:	b10a      	cbz	r2, 8006d32 <_printf_common+0x26>
 8006d2e:	3301      	adds	r3, #1
 8006d30:	6033      	str	r3, [r6, #0]
 8006d32:	6823      	ldr	r3, [r4, #0]
 8006d34:	0699      	lsls	r1, r3, #26
 8006d36:	bf42      	ittt	mi
 8006d38:	6833      	ldrmi	r3, [r6, #0]
 8006d3a:	3302      	addmi	r3, #2
 8006d3c:	6033      	strmi	r3, [r6, #0]
 8006d3e:	6825      	ldr	r5, [r4, #0]
 8006d40:	f015 0506 	ands.w	r5, r5, #6
 8006d44:	d106      	bne.n	8006d54 <_printf_common+0x48>
 8006d46:	f104 0a19 	add.w	sl, r4, #25
 8006d4a:	68e3      	ldr	r3, [r4, #12]
 8006d4c:	6832      	ldr	r2, [r6, #0]
 8006d4e:	1a9b      	subs	r3, r3, r2
 8006d50:	42ab      	cmp	r3, r5
 8006d52:	dc26      	bgt.n	8006da2 <_printf_common+0x96>
 8006d54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d58:	1e13      	subs	r3, r2, #0
 8006d5a:	6822      	ldr	r2, [r4, #0]
 8006d5c:	bf18      	it	ne
 8006d5e:	2301      	movne	r3, #1
 8006d60:	0692      	lsls	r2, r2, #26
 8006d62:	d42b      	bmi.n	8006dbc <_printf_common+0xb0>
 8006d64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d68:	4649      	mov	r1, r9
 8006d6a:	4638      	mov	r0, r7
 8006d6c:	47c0      	blx	r8
 8006d6e:	3001      	adds	r0, #1
 8006d70:	d01e      	beq.n	8006db0 <_printf_common+0xa4>
 8006d72:	6823      	ldr	r3, [r4, #0]
 8006d74:	68e5      	ldr	r5, [r4, #12]
 8006d76:	6832      	ldr	r2, [r6, #0]
 8006d78:	f003 0306 	and.w	r3, r3, #6
 8006d7c:	2b04      	cmp	r3, #4
 8006d7e:	bf08      	it	eq
 8006d80:	1aad      	subeq	r5, r5, r2
 8006d82:	68a3      	ldr	r3, [r4, #8]
 8006d84:	6922      	ldr	r2, [r4, #16]
 8006d86:	bf0c      	ite	eq
 8006d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d8c:	2500      	movne	r5, #0
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	bfc4      	itt	gt
 8006d92:	1a9b      	subgt	r3, r3, r2
 8006d94:	18ed      	addgt	r5, r5, r3
 8006d96:	2600      	movs	r6, #0
 8006d98:	341a      	adds	r4, #26
 8006d9a:	42b5      	cmp	r5, r6
 8006d9c:	d11a      	bne.n	8006dd4 <_printf_common+0xc8>
 8006d9e:	2000      	movs	r0, #0
 8006da0:	e008      	b.n	8006db4 <_printf_common+0xa8>
 8006da2:	2301      	movs	r3, #1
 8006da4:	4652      	mov	r2, sl
 8006da6:	4649      	mov	r1, r9
 8006da8:	4638      	mov	r0, r7
 8006daa:	47c0      	blx	r8
 8006dac:	3001      	adds	r0, #1
 8006dae:	d103      	bne.n	8006db8 <_printf_common+0xac>
 8006db0:	f04f 30ff 	mov.w	r0, #4294967295
 8006db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006db8:	3501      	adds	r5, #1
 8006dba:	e7c6      	b.n	8006d4a <_printf_common+0x3e>
 8006dbc:	18e1      	adds	r1, r4, r3
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	2030      	movs	r0, #48	; 0x30
 8006dc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dc6:	4422      	add	r2, r4
 8006dc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dd0:	3302      	adds	r3, #2
 8006dd2:	e7c7      	b.n	8006d64 <_printf_common+0x58>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	4622      	mov	r2, r4
 8006dd8:	4649      	mov	r1, r9
 8006dda:	4638      	mov	r0, r7
 8006ddc:	47c0      	blx	r8
 8006dde:	3001      	adds	r0, #1
 8006de0:	d0e6      	beq.n	8006db0 <_printf_common+0xa4>
 8006de2:	3601      	adds	r6, #1
 8006de4:	e7d9      	b.n	8006d9a <_printf_common+0x8e>
	...

08006de8 <_printf_i>:
 8006de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dec:	460c      	mov	r4, r1
 8006dee:	4691      	mov	r9, r2
 8006df0:	7e27      	ldrb	r7, [r4, #24]
 8006df2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006df4:	2f78      	cmp	r7, #120	; 0x78
 8006df6:	4680      	mov	r8, r0
 8006df8:	469a      	mov	sl, r3
 8006dfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dfe:	d807      	bhi.n	8006e10 <_printf_i+0x28>
 8006e00:	2f62      	cmp	r7, #98	; 0x62
 8006e02:	d80a      	bhi.n	8006e1a <_printf_i+0x32>
 8006e04:	2f00      	cmp	r7, #0
 8006e06:	f000 80d8 	beq.w	8006fba <_printf_i+0x1d2>
 8006e0a:	2f58      	cmp	r7, #88	; 0x58
 8006e0c:	f000 80a3 	beq.w	8006f56 <_printf_i+0x16e>
 8006e10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e18:	e03a      	b.n	8006e90 <_printf_i+0xa8>
 8006e1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e1e:	2b15      	cmp	r3, #21
 8006e20:	d8f6      	bhi.n	8006e10 <_printf_i+0x28>
 8006e22:	a001      	add	r0, pc, #4	; (adr r0, 8006e28 <_printf_i+0x40>)
 8006e24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006e28:	08006e81 	.word	0x08006e81
 8006e2c:	08006e95 	.word	0x08006e95
 8006e30:	08006e11 	.word	0x08006e11
 8006e34:	08006e11 	.word	0x08006e11
 8006e38:	08006e11 	.word	0x08006e11
 8006e3c:	08006e11 	.word	0x08006e11
 8006e40:	08006e95 	.word	0x08006e95
 8006e44:	08006e11 	.word	0x08006e11
 8006e48:	08006e11 	.word	0x08006e11
 8006e4c:	08006e11 	.word	0x08006e11
 8006e50:	08006e11 	.word	0x08006e11
 8006e54:	08006fa1 	.word	0x08006fa1
 8006e58:	08006ec5 	.word	0x08006ec5
 8006e5c:	08006f83 	.word	0x08006f83
 8006e60:	08006e11 	.word	0x08006e11
 8006e64:	08006e11 	.word	0x08006e11
 8006e68:	08006fc3 	.word	0x08006fc3
 8006e6c:	08006e11 	.word	0x08006e11
 8006e70:	08006ec5 	.word	0x08006ec5
 8006e74:	08006e11 	.word	0x08006e11
 8006e78:	08006e11 	.word	0x08006e11
 8006e7c:	08006f8b 	.word	0x08006f8b
 8006e80:	680b      	ldr	r3, [r1, #0]
 8006e82:	1d1a      	adds	r2, r3, #4
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	600a      	str	r2, [r1, #0]
 8006e88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e90:	2301      	movs	r3, #1
 8006e92:	e0a3      	b.n	8006fdc <_printf_i+0x1f4>
 8006e94:	6825      	ldr	r5, [r4, #0]
 8006e96:	6808      	ldr	r0, [r1, #0]
 8006e98:	062e      	lsls	r6, r5, #24
 8006e9a:	f100 0304 	add.w	r3, r0, #4
 8006e9e:	d50a      	bpl.n	8006eb6 <_printf_i+0xce>
 8006ea0:	6805      	ldr	r5, [r0, #0]
 8006ea2:	600b      	str	r3, [r1, #0]
 8006ea4:	2d00      	cmp	r5, #0
 8006ea6:	da03      	bge.n	8006eb0 <_printf_i+0xc8>
 8006ea8:	232d      	movs	r3, #45	; 0x2d
 8006eaa:	426d      	negs	r5, r5
 8006eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eb0:	485e      	ldr	r0, [pc, #376]	; (800702c <_printf_i+0x244>)
 8006eb2:	230a      	movs	r3, #10
 8006eb4:	e019      	b.n	8006eea <_printf_i+0x102>
 8006eb6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006eba:	6805      	ldr	r5, [r0, #0]
 8006ebc:	600b      	str	r3, [r1, #0]
 8006ebe:	bf18      	it	ne
 8006ec0:	b22d      	sxthne	r5, r5
 8006ec2:	e7ef      	b.n	8006ea4 <_printf_i+0xbc>
 8006ec4:	680b      	ldr	r3, [r1, #0]
 8006ec6:	6825      	ldr	r5, [r4, #0]
 8006ec8:	1d18      	adds	r0, r3, #4
 8006eca:	6008      	str	r0, [r1, #0]
 8006ecc:	0628      	lsls	r0, r5, #24
 8006ece:	d501      	bpl.n	8006ed4 <_printf_i+0xec>
 8006ed0:	681d      	ldr	r5, [r3, #0]
 8006ed2:	e002      	b.n	8006eda <_printf_i+0xf2>
 8006ed4:	0669      	lsls	r1, r5, #25
 8006ed6:	d5fb      	bpl.n	8006ed0 <_printf_i+0xe8>
 8006ed8:	881d      	ldrh	r5, [r3, #0]
 8006eda:	4854      	ldr	r0, [pc, #336]	; (800702c <_printf_i+0x244>)
 8006edc:	2f6f      	cmp	r7, #111	; 0x6f
 8006ede:	bf0c      	ite	eq
 8006ee0:	2308      	moveq	r3, #8
 8006ee2:	230a      	movne	r3, #10
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006eea:	6866      	ldr	r6, [r4, #4]
 8006eec:	60a6      	str	r6, [r4, #8]
 8006eee:	2e00      	cmp	r6, #0
 8006ef0:	bfa2      	ittt	ge
 8006ef2:	6821      	ldrge	r1, [r4, #0]
 8006ef4:	f021 0104 	bicge.w	r1, r1, #4
 8006ef8:	6021      	strge	r1, [r4, #0]
 8006efa:	b90d      	cbnz	r5, 8006f00 <_printf_i+0x118>
 8006efc:	2e00      	cmp	r6, #0
 8006efe:	d04d      	beq.n	8006f9c <_printf_i+0x1b4>
 8006f00:	4616      	mov	r6, r2
 8006f02:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f06:	fb03 5711 	mls	r7, r3, r1, r5
 8006f0a:	5dc7      	ldrb	r7, [r0, r7]
 8006f0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f10:	462f      	mov	r7, r5
 8006f12:	42bb      	cmp	r3, r7
 8006f14:	460d      	mov	r5, r1
 8006f16:	d9f4      	bls.n	8006f02 <_printf_i+0x11a>
 8006f18:	2b08      	cmp	r3, #8
 8006f1a:	d10b      	bne.n	8006f34 <_printf_i+0x14c>
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	07df      	lsls	r7, r3, #31
 8006f20:	d508      	bpl.n	8006f34 <_printf_i+0x14c>
 8006f22:	6923      	ldr	r3, [r4, #16]
 8006f24:	6861      	ldr	r1, [r4, #4]
 8006f26:	4299      	cmp	r1, r3
 8006f28:	bfde      	ittt	le
 8006f2a:	2330      	movle	r3, #48	; 0x30
 8006f2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f34:	1b92      	subs	r2, r2, r6
 8006f36:	6122      	str	r2, [r4, #16]
 8006f38:	f8cd a000 	str.w	sl, [sp]
 8006f3c:	464b      	mov	r3, r9
 8006f3e:	aa03      	add	r2, sp, #12
 8006f40:	4621      	mov	r1, r4
 8006f42:	4640      	mov	r0, r8
 8006f44:	f7ff fee2 	bl	8006d0c <_printf_common>
 8006f48:	3001      	adds	r0, #1
 8006f4a:	d14c      	bne.n	8006fe6 <_printf_i+0x1fe>
 8006f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f50:	b004      	add	sp, #16
 8006f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f56:	4835      	ldr	r0, [pc, #212]	; (800702c <_printf_i+0x244>)
 8006f58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	680e      	ldr	r6, [r1, #0]
 8006f60:	061f      	lsls	r7, r3, #24
 8006f62:	f856 5b04 	ldr.w	r5, [r6], #4
 8006f66:	600e      	str	r6, [r1, #0]
 8006f68:	d514      	bpl.n	8006f94 <_printf_i+0x1ac>
 8006f6a:	07d9      	lsls	r1, r3, #31
 8006f6c:	bf44      	itt	mi
 8006f6e:	f043 0320 	orrmi.w	r3, r3, #32
 8006f72:	6023      	strmi	r3, [r4, #0]
 8006f74:	b91d      	cbnz	r5, 8006f7e <_printf_i+0x196>
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	f023 0320 	bic.w	r3, r3, #32
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	2310      	movs	r3, #16
 8006f80:	e7b0      	b.n	8006ee4 <_printf_i+0xfc>
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	f043 0320 	orr.w	r3, r3, #32
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	2378      	movs	r3, #120	; 0x78
 8006f8c:	4828      	ldr	r0, [pc, #160]	; (8007030 <_printf_i+0x248>)
 8006f8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f92:	e7e3      	b.n	8006f5c <_printf_i+0x174>
 8006f94:	065e      	lsls	r6, r3, #25
 8006f96:	bf48      	it	mi
 8006f98:	b2ad      	uxthmi	r5, r5
 8006f9a:	e7e6      	b.n	8006f6a <_printf_i+0x182>
 8006f9c:	4616      	mov	r6, r2
 8006f9e:	e7bb      	b.n	8006f18 <_printf_i+0x130>
 8006fa0:	680b      	ldr	r3, [r1, #0]
 8006fa2:	6826      	ldr	r6, [r4, #0]
 8006fa4:	6960      	ldr	r0, [r4, #20]
 8006fa6:	1d1d      	adds	r5, r3, #4
 8006fa8:	600d      	str	r5, [r1, #0]
 8006faa:	0635      	lsls	r5, r6, #24
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	d501      	bpl.n	8006fb4 <_printf_i+0x1cc>
 8006fb0:	6018      	str	r0, [r3, #0]
 8006fb2:	e002      	b.n	8006fba <_printf_i+0x1d2>
 8006fb4:	0671      	lsls	r1, r6, #25
 8006fb6:	d5fb      	bpl.n	8006fb0 <_printf_i+0x1c8>
 8006fb8:	8018      	strh	r0, [r3, #0]
 8006fba:	2300      	movs	r3, #0
 8006fbc:	6123      	str	r3, [r4, #16]
 8006fbe:	4616      	mov	r6, r2
 8006fc0:	e7ba      	b.n	8006f38 <_printf_i+0x150>
 8006fc2:	680b      	ldr	r3, [r1, #0]
 8006fc4:	1d1a      	adds	r2, r3, #4
 8006fc6:	600a      	str	r2, [r1, #0]
 8006fc8:	681e      	ldr	r6, [r3, #0]
 8006fca:	6862      	ldr	r2, [r4, #4]
 8006fcc:	2100      	movs	r1, #0
 8006fce:	4630      	mov	r0, r6
 8006fd0:	f7f9 f906 	bl	80001e0 <memchr>
 8006fd4:	b108      	cbz	r0, 8006fda <_printf_i+0x1f2>
 8006fd6:	1b80      	subs	r0, r0, r6
 8006fd8:	6060      	str	r0, [r4, #4]
 8006fda:	6863      	ldr	r3, [r4, #4]
 8006fdc:	6123      	str	r3, [r4, #16]
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fe4:	e7a8      	b.n	8006f38 <_printf_i+0x150>
 8006fe6:	6923      	ldr	r3, [r4, #16]
 8006fe8:	4632      	mov	r2, r6
 8006fea:	4649      	mov	r1, r9
 8006fec:	4640      	mov	r0, r8
 8006fee:	47d0      	blx	sl
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	d0ab      	beq.n	8006f4c <_printf_i+0x164>
 8006ff4:	6823      	ldr	r3, [r4, #0]
 8006ff6:	079b      	lsls	r3, r3, #30
 8006ff8:	d413      	bmi.n	8007022 <_printf_i+0x23a>
 8006ffa:	68e0      	ldr	r0, [r4, #12]
 8006ffc:	9b03      	ldr	r3, [sp, #12]
 8006ffe:	4298      	cmp	r0, r3
 8007000:	bfb8      	it	lt
 8007002:	4618      	movlt	r0, r3
 8007004:	e7a4      	b.n	8006f50 <_printf_i+0x168>
 8007006:	2301      	movs	r3, #1
 8007008:	4632      	mov	r2, r6
 800700a:	4649      	mov	r1, r9
 800700c:	4640      	mov	r0, r8
 800700e:	47d0      	blx	sl
 8007010:	3001      	adds	r0, #1
 8007012:	d09b      	beq.n	8006f4c <_printf_i+0x164>
 8007014:	3501      	adds	r5, #1
 8007016:	68e3      	ldr	r3, [r4, #12]
 8007018:	9903      	ldr	r1, [sp, #12]
 800701a:	1a5b      	subs	r3, r3, r1
 800701c:	42ab      	cmp	r3, r5
 800701e:	dcf2      	bgt.n	8007006 <_printf_i+0x21e>
 8007020:	e7eb      	b.n	8006ffa <_printf_i+0x212>
 8007022:	2500      	movs	r5, #0
 8007024:	f104 0619 	add.w	r6, r4, #25
 8007028:	e7f5      	b.n	8007016 <_printf_i+0x22e>
 800702a:	bf00      	nop
 800702c:	080079d1 	.word	0x080079d1
 8007030:	080079e2 	.word	0x080079e2

08007034 <memcpy>:
 8007034:	440a      	add	r2, r1
 8007036:	4291      	cmp	r1, r2
 8007038:	f100 33ff 	add.w	r3, r0, #4294967295
 800703c:	d100      	bne.n	8007040 <memcpy+0xc>
 800703e:	4770      	bx	lr
 8007040:	b510      	push	{r4, lr}
 8007042:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007046:	f803 4f01 	strb.w	r4, [r3, #1]!
 800704a:	4291      	cmp	r1, r2
 800704c:	d1f9      	bne.n	8007042 <memcpy+0xe>
 800704e:	bd10      	pop	{r4, pc}

08007050 <memmove>:
 8007050:	4288      	cmp	r0, r1
 8007052:	b510      	push	{r4, lr}
 8007054:	eb01 0402 	add.w	r4, r1, r2
 8007058:	d902      	bls.n	8007060 <memmove+0x10>
 800705a:	4284      	cmp	r4, r0
 800705c:	4623      	mov	r3, r4
 800705e:	d807      	bhi.n	8007070 <memmove+0x20>
 8007060:	1e43      	subs	r3, r0, #1
 8007062:	42a1      	cmp	r1, r4
 8007064:	d008      	beq.n	8007078 <memmove+0x28>
 8007066:	f811 2b01 	ldrb.w	r2, [r1], #1
 800706a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800706e:	e7f8      	b.n	8007062 <memmove+0x12>
 8007070:	4402      	add	r2, r0
 8007072:	4601      	mov	r1, r0
 8007074:	428a      	cmp	r2, r1
 8007076:	d100      	bne.n	800707a <memmove+0x2a>
 8007078:	bd10      	pop	{r4, pc}
 800707a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800707e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007082:	e7f7      	b.n	8007074 <memmove+0x24>

08007084 <_free_r>:
 8007084:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007086:	2900      	cmp	r1, #0
 8007088:	d048      	beq.n	800711c <_free_r+0x98>
 800708a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800708e:	9001      	str	r0, [sp, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	f1a1 0404 	sub.w	r4, r1, #4
 8007096:	bfb8      	it	lt
 8007098:	18e4      	addlt	r4, r4, r3
 800709a:	f000 f8d3 	bl	8007244 <__malloc_lock>
 800709e:	4a20      	ldr	r2, [pc, #128]	; (8007120 <_free_r+0x9c>)
 80070a0:	9801      	ldr	r0, [sp, #4]
 80070a2:	6813      	ldr	r3, [r2, #0]
 80070a4:	4615      	mov	r5, r2
 80070a6:	b933      	cbnz	r3, 80070b6 <_free_r+0x32>
 80070a8:	6063      	str	r3, [r4, #4]
 80070aa:	6014      	str	r4, [r2, #0]
 80070ac:	b003      	add	sp, #12
 80070ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070b2:	f000 b8cd 	b.w	8007250 <__malloc_unlock>
 80070b6:	42a3      	cmp	r3, r4
 80070b8:	d90b      	bls.n	80070d2 <_free_r+0x4e>
 80070ba:	6821      	ldr	r1, [r4, #0]
 80070bc:	1862      	adds	r2, r4, r1
 80070be:	4293      	cmp	r3, r2
 80070c0:	bf04      	itt	eq
 80070c2:	681a      	ldreq	r2, [r3, #0]
 80070c4:	685b      	ldreq	r3, [r3, #4]
 80070c6:	6063      	str	r3, [r4, #4]
 80070c8:	bf04      	itt	eq
 80070ca:	1852      	addeq	r2, r2, r1
 80070cc:	6022      	streq	r2, [r4, #0]
 80070ce:	602c      	str	r4, [r5, #0]
 80070d0:	e7ec      	b.n	80070ac <_free_r+0x28>
 80070d2:	461a      	mov	r2, r3
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	b10b      	cbz	r3, 80070dc <_free_r+0x58>
 80070d8:	42a3      	cmp	r3, r4
 80070da:	d9fa      	bls.n	80070d2 <_free_r+0x4e>
 80070dc:	6811      	ldr	r1, [r2, #0]
 80070de:	1855      	adds	r5, r2, r1
 80070e0:	42a5      	cmp	r5, r4
 80070e2:	d10b      	bne.n	80070fc <_free_r+0x78>
 80070e4:	6824      	ldr	r4, [r4, #0]
 80070e6:	4421      	add	r1, r4
 80070e8:	1854      	adds	r4, r2, r1
 80070ea:	42a3      	cmp	r3, r4
 80070ec:	6011      	str	r1, [r2, #0]
 80070ee:	d1dd      	bne.n	80070ac <_free_r+0x28>
 80070f0:	681c      	ldr	r4, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	6053      	str	r3, [r2, #4]
 80070f6:	4421      	add	r1, r4
 80070f8:	6011      	str	r1, [r2, #0]
 80070fa:	e7d7      	b.n	80070ac <_free_r+0x28>
 80070fc:	d902      	bls.n	8007104 <_free_r+0x80>
 80070fe:	230c      	movs	r3, #12
 8007100:	6003      	str	r3, [r0, #0]
 8007102:	e7d3      	b.n	80070ac <_free_r+0x28>
 8007104:	6825      	ldr	r5, [r4, #0]
 8007106:	1961      	adds	r1, r4, r5
 8007108:	428b      	cmp	r3, r1
 800710a:	bf04      	itt	eq
 800710c:	6819      	ldreq	r1, [r3, #0]
 800710e:	685b      	ldreq	r3, [r3, #4]
 8007110:	6063      	str	r3, [r4, #4]
 8007112:	bf04      	itt	eq
 8007114:	1949      	addeq	r1, r1, r5
 8007116:	6021      	streq	r1, [r4, #0]
 8007118:	6054      	str	r4, [r2, #4]
 800711a:	e7c7      	b.n	80070ac <_free_r+0x28>
 800711c:	b003      	add	sp, #12
 800711e:	bd30      	pop	{r4, r5, pc}
 8007120:	200008d4 	.word	0x200008d4

08007124 <_malloc_r>:
 8007124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007126:	1ccd      	adds	r5, r1, #3
 8007128:	f025 0503 	bic.w	r5, r5, #3
 800712c:	3508      	adds	r5, #8
 800712e:	2d0c      	cmp	r5, #12
 8007130:	bf38      	it	cc
 8007132:	250c      	movcc	r5, #12
 8007134:	2d00      	cmp	r5, #0
 8007136:	4606      	mov	r6, r0
 8007138:	db01      	blt.n	800713e <_malloc_r+0x1a>
 800713a:	42a9      	cmp	r1, r5
 800713c:	d903      	bls.n	8007146 <_malloc_r+0x22>
 800713e:	230c      	movs	r3, #12
 8007140:	6033      	str	r3, [r6, #0]
 8007142:	2000      	movs	r0, #0
 8007144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007146:	f000 f87d 	bl	8007244 <__malloc_lock>
 800714a:	4921      	ldr	r1, [pc, #132]	; (80071d0 <_malloc_r+0xac>)
 800714c:	680a      	ldr	r2, [r1, #0]
 800714e:	4614      	mov	r4, r2
 8007150:	b99c      	cbnz	r4, 800717a <_malloc_r+0x56>
 8007152:	4f20      	ldr	r7, [pc, #128]	; (80071d4 <_malloc_r+0xb0>)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	b923      	cbnz	r3, 8007162 <_malloc_r+0x3e>
 8007158:	4621      	mov	r1, r4
 800715a:	4630      	mov	r0, r6
 800715c:	f000 f862 	bl	8007224 <_sbrk_r>
 8007160:	6038      	str	r0, [r7, #0]
 8007162:	4629      	mov	r1, r5
 8007164:	4630      	mov	r0, r6
 8007166:	f000 f85d 	bl	8007224 <_sbrk_r>
 800716a:	1c43      	adds	r3, r0, #1
 800716c:	d123      	bne.n	80071b6 <_malloc_r+0x92>
 800716e:	230c      	movs	r3, #12
 8007170:	6033      	str	r3, [r6, #0]
 8007172:	4630      	mov	r0, r6
 8007174:	f000 f86c 	bl	8007250 <__malloc_unlock>
 8007178:	e7e3      	b.n	8007142 <_malloc_r+0x1e>
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	1b5b      	subs	r3, r3, r5
 800717e:	d417      	bmi.n	80071b0 <_malloc_r+0x8c>
 8007180:	2b0b      	cmp	r3, #11
 8007182:	d903      	bls.n	800718c <_malloc_r+0x68>
 8007184:	6023      	str	r3, [r4, #0]
 8007186:	441c      	add	r4, r3
 8007188:	6025      	str	r5, [r4, #0]
 800718a:	e004      	b.n	8007196 <_malloc_r+0x72>
 800718c:	6863      	ldr	r3, [r4, #4]
 800718e:	42a2      	cmp	r2, r4
 8007190:	bf0c      	ite	eq
 8007192:	600b      	streq	r3, [r1, #0]
 8007194:	6053      	strne	r3, [r2, #4]
 8007196:	4630      	mov	r0, r6
 8007198:	f000 f85a 	bl	8007250 <__malloc_unlock>
 800719c:	f104 000b 	add.w	r0, r4, #11
 80071a0:	1d23      	adds	r3, r4, #4
 80071a2:	f020 0007 	bic.w	r0, r0, #7
 80071a6:	1ac2      	subs	r2, r0, r3
 80071a8:	d0cc      	beq.n	8007144 <_malloc_r+0x20>
 80071aa:	1a1b      	subs	r3, r3, r0
 80071ac:	50a3      	str	r3, [r4, r2]
 80071ae:	e7c9      	b.n	8007144 <_malloc_r+0x20>
 80071b0:	4622      	mov	r2, r4
 80071b2:	6864      	ldr	r4, [r4, #4]
 80071b4:	e7cc      	b.n	8007150 <_malloc_r+0x2c>
 80071b6:	1cc4      	adds	r4, r0, #3
 80071b8:	f024 0403 	bic.w	r4, r4, #3
 80071bc:	42a0      	cmp	r0, r4
 80071be:	d0e3      	beq.n	8007188 <_malloc_r+0x64>
 80071c0:	1a21      	subs	r1, r4, r0
 80071c2:	4630      	mov	r0, r6
 80071c4:	f000 f82e 	bl	8007224 <_sbrk_r>
 80071c8:	3001      	adds	r0, #1
 80071ca:	d1dd      	bne.n	8007188 <_malloc_r+0x64>
 80071cc:	e7cf      	b.n	800716e <_malloc_r+0x4a>
 80071ce:	bf00      	nop
 80071d0:	200008d4 	.word	0x200008d4
 80071d4:	200008d8 	.word	0x200008d8

080071d8 <_realloc_r>:
 80071d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071da:	4607      	mov	r7, r0
 80071dc:	4614      	mov	r4, r2
 80071de:	460e      	mov	r6, r1
 80071e0:	b921      	cbnz	r1, 80071ec <_realloc_r+0x14>
 80071e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80071e6:	4611      	mov	r1, r2
 80071e8:	f7ff bf9c 	b.w	8007124 <_malloc_r>
 80071ec:	b922      	cbnz	r2, 80071f8 <_realloc_r+0x20>
 80071ee:	f7ff ff49 	bl	8007084 <_free_r>
 80071f2:	4625      	mov	r5, r4
 80071f4:	4628      	mov	r0, r5
 80071f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071f8:	f000 f830 	bl	800725c <_malloc_usable_size_r>
 80071fc:	42a0      	cmp	r0, r4
 80071fe:	d20f      	bcs.n	8007220 <_realloc_r+0x48>
 8007200:	4621      	mov	r1, r4
 8007202:	4638      	mov	r0, r7
 8007204:	f7ff ff8e 	bl	8007124 <_malloc_r>
 8007208:	4605      	mov	r5, r0
 800720a:	2800      	cmp	r0, #0
 800720c:	d0f2      	beq.n	80071f4 <_realloc_r+0x1c>
 800720e:	4631      	mov	r1, r6
 8007210:	4622      	mov	r2, r4
 8007212:	f7ff ff0f 	bl	8007034 <memcpy>
 8007216:	4631      	mov	r1, r6
 8007218:	4638      	mov	r0, r7
 800721a:	f7ff ff33 	bl	8007084 <_free_r>
 800721e:	e7e9      	b.n	80071f4 <_realloc_r+0x1c>
 8007220:	4635      	mov	r5, r6
 8007222:	e7e7      	b.n	80071f4 <_realloc_r+0x1c>

08007224 <_sbrk_r>:
 8007224:	b538      	push	{r3, r4, r5, lr}
 8007226:	4d06      	ldr	r5, [pc, #24]	; (8007240 <_sbrk_r+0x1c>)
 8007228:	2300      	movs	r3, #0
 800722a:	4604      	mov	r4, r0
 800722c:	4608      	mov	r0, r1
 800722e:	602b      	str	r3, [r5, #0]
 8007230:	f7fb ffa0 	bl	8003174 <_sbrk>
 8007234:	1c43      	adds	r3, r0, #1
 8007236:	d102      	bne.n	800723e <_sbrk_r+0x1a>
 8007238:	682b      	ldr	r3, [r5, #0]
 800723a:	b103      	cbz	r3, 800723e <_sbrk_r+0x1a>
 800723c:	6023      	str	r3, [r4, #0]
 800723e:	bd38      	pop	{r3, r4, r5, pc}
 8007240:	20000ddc 	.word	0x20000ddc

08007244 <__malloc_lock>:
 8007244:	4801      	ldr	r0, [pc, #4]	; (800724c <__malloc_lock+0x8>)
 8007246:	f000 b811 	b.w	800726c <__retarget_lock_acquire_recursive>
 800724a:	bf00      	nop
 800724c:	20000de4 	.word	0x20000de4

08007250 <__malloc_unlock>:
 8007250:	4801      	ldr	r0, [pc, #4]	; (8007258 <__malloc_unlock+0x8>)
 8007252:	f000 b80c 	b.w	800726e <__retarget_lock_release_recursive>
 8007256:	bf00      	nop
 8007258:	20000de4 	.word	0x20000de4

0800725c <_malloc_usable_size_r>:
 800725c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007260:	1f18      	subs	r0, r3, #4
 8007262:	2b00      	cmp	r3, #0
 8007264:	bfbc      	itt	lt
 8007266:	580b      	ldrlt	r3, [r1, r0]
 8007268:	18c0      	addlt	r0, r0, r3
 800726a:	4770      	bx	lr

0800726c <__retarget_lock_acquire_recursive>:
 800726c:	4770      	bx	lr

0800726e <__retarget_lock_release_recursive>:
 800726e:	4770      	bx	lr

08007270 <_init>:
 8007270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007272:	bf00      	nop
 8007274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007276:	bc08      	pop	{r3}
 8007278:	469e      	mov	lr, r3
 800727a:	4770      	bx	lr

0800727c <_fini>:
 800727c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727e:	bf00      	nop
 8007280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007282:	bc08      	pop	{r3}
 8007284:	469e      	mov	lr, r3
 8007286:	4770      	bx	lr
