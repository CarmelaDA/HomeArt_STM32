
HomeArt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e34  0800a354  0800a354  0001a354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d188  0800d188  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800d188  0800d188  0001d188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d190  0800d190  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d190  0800d190  0001d190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d194  0800d194  0001d194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800d198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00001058  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200010c8  200010c8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001edf9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e04  00000000  00000000  0003ee99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  00042ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001260  00000000  00000000  00044030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025be4  00000000  00000000  00045290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c555  00000000  00000000  0006ae74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbd23  00000000  00000000  000873c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001630ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000563c  00000000  00000000  00163140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a33c 	.word	0x0800a33c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800a33c 	.word	0x0800a33c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468c      	mov	ip, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8083 	bne.w	8000c02 <__udivmoddi4+0x116>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d947      	bls.n	8000b92 <__udivmoddi4+0xa6>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b142      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	f1c2 0020 	rsb	r0, r2, #32
 8000b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b10:	4091      	lsls	r1, r2
 8000b12:	4097      	lsls	r7, r2
 8000b14:	ea40 0c01 	orr.w	ip, r0, r1
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbbc f6f8 	udiv	r6, ip, r8
 8000b24:	fa1f fe87 	uxth.w	lr, r7
 8000b28:	fb08 c116 	mls	r1, r8, r6, ip
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb06 f10e 	mul.w	r1, r6, lr
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b3e:	f080 8119 	bcs.w	8000d74 <__udivmoddi4+0x288>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8116 	bls.w	8000d74 <__udivmoddi4+0x288>
 8000b48:	3e02      	subs	r6, #2
 8000b4a:	443b      	add	r3, r7
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3310 	mls	r3, r8, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8105 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f240 8102 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b74:	3802      	subs	r0, #2
 8000b76:	443c      	add	r4, r7
 8000b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	2600      	movs	r6, #0
 8000b82:	b11d      	cbz	r5, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	b902      	cbnz	r2, 8000b96 <__udivmoddi4+0xaa>
 8000b94:	deff      	udf	#255	; 0xff
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d150      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000b9e:	1bcb      	subs	r3, r1, r7
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	2601      	movs	r6, #1
 8000baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0xe2>
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	f200 80e9 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1ac9      	subs	r1, r1, r3
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x10c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x10a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80d9 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e7bf      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <__udivmoddi4+0x282>
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c12:	4630      	mov	r0, r6
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f683 	clz	r6, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x1cc>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b8 	bhi.w	8000d9c <__udivmoddi4+0x2b0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0a8      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f603 	lsr.w	r6, r0, r3
 8000c48:	4097      	lsls	r7, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c52:	40d9      	lsrs	r1, r3
 8000c54:	4330      	orrs	r0, r6
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb06 f108 	mul.w	r1, r6, r8
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x19c>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c7a:	f080 808d 	bcs.w	8000d98 <__udivmoddi4+0x2ac>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 808a 	bls.w	8000d98 <__udivmoddi4+0x2ac>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b281      	uxth	r1, r0
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb00 f308 	mul.w	r3, r0, r8
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca6:	d273      	bcs.n	8000d90 <__udivmoddi4+0x2a4>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d971      	bls.n	8000d90 <__udivmoddi4+0x2a4>
 8000cac:	3802      	subs	r0, #2
 8000cae:	4439      	add	r1, r7
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cb6:	e778      	b.n	8000baa <__udivmoddi4+0xbe>
 8000cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cca:	fa01 f306 	lsl.w	r3, r1, r6
 8000cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fa1f f884 	uxth.w	r8, r4
 8000ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cea:	fb09 fa08 	mul.w	sl, r9, r8
 8000cee:	458a      	cmp	sl, r1
 8000cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x220>
 8000cfa:	1861      	adds	r1, r4, r1
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d00:	d248      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d02:	458a      	cmp	sl, r1
 8000d04:	d946      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4421      	add	r1, r4
 8000d0c:	eba1 010a 	sub.w	r1, r1, sl
 8000d10:	b2bf      	uxth	r7, r7
 8000d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45b8      	cmp	r8, r7
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x24a>
 8000d26:	19e7      	adds	r7, r4, r7
 8000d28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2c:	d22e      	bcs.n	8000d8c <__udivmoddi4+0x2a0>
 8000d2e:	45b8      	cmp	r8, r7
 8000d30:	d92c      	bls.n	8000d8c <__udivmoddi4+0x2a0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4427      	add	r7, r4
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba7 0708 	sub.w	r7, r7, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454f      	cmp	r7, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	4649      	mov	r1, r9
 8000d48:	d31a      	bcc.n	8000d80 <__udivmoddi4+0x294>
 8000d4a:	d017      	beq.n	8000d7c <__udivmoddi4+0x290>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x27a>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb67 0701 	sbc.w	r7, r7, r1
 8000d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d5a:	40f2      	lsrs	r2, r6
 8000d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d60:	40f7      	lsrs	r7, r6
 8000d62:	e9c5 2700 	strd	r2, r7, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e70b      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fd      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d7c:	4543      	cmp	r3, r8
 8000d7e:	d2e5      	bcs.n	8000d4c <__udivmoddi4+0x260>
 8000d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d84:	eb69 0104 	sbc.w	r1, r9, r4
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7df      	b.n	8000d4c <__udivmoddi4+0x260>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e7d2      	b.n	8000d36 <__udivmoddi4+0x24a>
 8000d90:	4660      	mov	r0, ip
 8000d92:	e78d      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d94:	4681      	mov	r9, r0
 8000d96:	e7b9      	b.n	8000d0c <__udivmoddi4+0x220>
 8000d98:	4666      	mov	r6, ip
 8000d9a:	e775      	b.n	8000c88 <__udivmoddi4+0x19c>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	e74a      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	4439      	add	r1, r7
 8000da6:	e713      	b.n	8000bd0 <__udivmoddi4+0xe4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	e724      	b.n	8000bf8 <__udivmoddi4+0x10c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <playBell>:
#include "ESP8266_HAL.h"

extern TIM_HandleTypeDef htim4;


void playBell(){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0

	uint8_t tone;

	tone = 25;
 8000dba:	2319      	movs	r3, #25
 8000dbc:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	005a      	lsls	r2, r3, #1
 8000dc2:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <playBell+0x68>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <playBell+0x68>)
 8000dd0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <playBell+0x68>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	79fa      	ldrb	r2, [r7, #7]
 8000dd8:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(300);
 8000dda:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000dde:	f004 fdd9 	bl	8005994 <HAL_Delay>

	tone = 40;
 8000de2:	2328      	movs	r3, #40	; 0x28
 8000de4:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	005a      	lsls	r2, r3, #1
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <playBell+0x68>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	62da      	str	r2, [r3, #44]	; 0x2c
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <playBell+0x68>)
 8000df8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <playBell+0x68>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	79fa      	ldrb	r2, [r7, #7]
 8000e00:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 8000e02:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000e06:	f004 fdc5 	bl	8005994 <HAL_Delay>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <playBell+0x68>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000cb4 	.word	0x20000cb4

08000e20 <playAlarm>:


void playAlarm(){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0

	uint8_t tone;

	for(tone = 40; tone >= 10; tone = tone-10){
 8000e26:	2328      	movs	r3, #40	; 0x28
 8000e28:	71fb      	strb	r3, [r7, #7]
 8000e2a:	e014      	b.n	8000e56 <playAlarm+0x36>
		__HAL_TIM_SET_AUTORELOAD(&htim4, tone*2);
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	005a      	lsls	r2, r3, #1
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <playAlarm+0x5c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <playAlarm+0x5c>)
 8000e3e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, tone);
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <playAlarm+0x5c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	79fa      	ldrb	r2, [r7, #7]
 8000e46:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(300);
 8000e48:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e4c:	f004 fda2 	bl	8005994 <HAL_Delay>
	for(tone = 40; tone >= 10; tone = tone-10){
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	3b0a      	subs	r3, #10
 8000e54:	71fb      	strb	r3, [r7, #7]
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	2b09      	cmp	r3, #9
 8000e5a:	d8e7      	bhi.n	8000e2c <playAlarm+0xc>
	}

	__HAL_TIM_SET_AUTORELOAD(&htim4, 80);
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <playAlarm+0x5c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2250      	movs	r2, #80	; 0x50
 8000e62:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <playAlarm+0x5c>)
 8000e66:	2250      	movs	r2, #80	; 0x50
 8000e68:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 40);
 8000e6a:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <playAlarm+0x5c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2228      	movs	r2, #40	; 0x28
 8000e70:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000cb4 	.word	0x20000cb4

08000e80 <DHT22_Set_Pin_Output>:
uint8_t RH_byte1, RH_byte2, Temp_byte1, Temp_byte2;
uint16_t SUM, RH, TEMP;
uint16_t DHT22_presence = 0;


void DHT22_Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	807b      	strh	r3, [r7, #2]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000e9c:	887b      	ldrh	r3, [r7, #2]
 8000e9e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	4619      	mov	r1, r3
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f005 fb04 	bl	80064bc <HAL_GPIO_Init>
}
 8000eb4:	bf00      	nop
 8000eb6:	3720      	adds	r7, #32
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <DHT22_Set_Pin_Input>:

void DHT22_Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	807b      	strh	r3, [r7, #2]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000ed8:	887b      	ldrh	r3, [r7, #2]
 8000eda:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000edc:	2300      	movs	r3, #0
 8000ede:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP; // change to PULLUP if it does not work
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	4619      	mov	r1, r3
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f005 fae6 	bl	80064bc <HAL_GPIO_Init>
}
 8000ef0:	bf00      	nop
 8000ef2:	3720      	adds	r7, #32
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <DHT22_Start>:

void DHT22_Start(void){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0

	DHT22_Set_Pin_Output(DHT22_PORT, DHT22_PIN); // set the pin as output
 8000efc:	2180      	movs	r1, #128	; 0x80
 8000efe:	4811      	ldr	r0, [pc, #68]	; (8000f44 <DHT22_Start+0x4c>)
 8000f00:	f7ff ffbe 	bl	8000e80 <DHT22_Set_Pin_Output>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin low
 8000f04:	2201      	movs	r2, #1
 8000f06:	2180      	movs	r1, #128	; 0x80
 8000f08:	480e      	ldr	r0, [pc, #56]	; (8000f44 <DHT22_Start+0x4c>)
 8000f0a:	f005 fc8b 	bl	8006824 <HAL_GPIO_WritePin>
	HAL_Delay(1200);   // wait for > 1ms
 8000f0e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000f12:	f004 fd3f 	bl	8005994 <HAL_Delay>
	HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2180      	movs	r1, #128	; 0x80
 8000f1a:	480a      	ldr	r0, [pc, #40]	; (8000f44 <DHT22_Start+0x4c>)
 8000f1c:	f005 fc82 	bl	8006824 <HAL_GPIO_WritePin>
	delay(18000);
 8000f20:	f244 6050 	movw	r0, #18000	; 0x4650
 8000f24:	f002 faea 	bl	80034fc <delay>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2180      	movs	r1, #128	; 0x80
 8000f2c:	4805      	ldr	r0, [pc, #20]	; (8000f44 <DHT22_Start+0x4c>)
 8000f2e:	f005 fc79 	bl	8006824 <HAL_GPIO_WritePin>
	delay (30);   // wait for 30us
 8000f32:	201e      	movs	r0, #30
 8000f34:	f002 fae2 	bl	80034fc <delay>

	DHT22_Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8000f38:	2180      	movs	r1, #128	; 0x80
 8000f3a:	4802      	ldr	r0, [pc, #8]	; (8000f44 <DHT22_Start+0x4c>)
 8000f3c:	f7ff ffbe 	bl	8000ebc <DHT22_Set_Pin_Input>
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40021000 	.word	0x40021000

08000f48 <DHT22_Check_Response>:

uint8_t DHT22_Check_Response(void){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0

	DHT22_Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8000f4e:	2180      	movs	r1, #128	; 0x80
 8000f50:	4815      	ldr	r0, [pc, #84]	; (8000fa8 <DHT22_Check_Response+0x60>)
 8000f52:	f7ff ffb3 	bl	8000ebc <DHT22_Set_Pin_Input>
	uint8_t Response = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	71fb      	strb	r3, [r7, #7]
	delay (40);  // wait for 40us
 8000f5a:	2028      	movs	r0, #40	; 0x28
 8000f5c:	f002 face 	bl	80034fc <delay>
	if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) // if the pin is low
 8000f60:	2180      	movs	r1, #128	; 0x80
 8000f62:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <DHT22_Check_Response+0x60>)
 8000f64:	f005 fc46 	bl	80067f4 <HAL_GPIO_ReadPin>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10e      	bne.n	8000f8c <DHT22_Check_Response+0x44>
	{
		delay (80);   // wait for 80us
 8000f6e:	2050      	movs	r0, #80	; 0x50
 8000f70:	f002 fac4 	bl	80034fc <delay>

		if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;  // if the pin is high, response is ok
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <DHT22_Check_Response+0x60>)
 8000f78:	f005 fc3c 	bl	80067f4 <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <DHT22_Check_Response+0x40>
 8000f82:	2301      	movs	r3, #1
 8000f84:	71fb      	strb	r3, [r7, #7]
 8000f86:	e001      	b.n	8000f8c <DHT22_Check_Response+0x44>
		else Response = -1;
 8000f88:	23ff      	movs	r3, #255	; 0xff
 8000f8a:	71fb      	strb	r3, [r7, #7]
	}

	while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go low
 8000f8c:	bf00      	nop
 8000f8e:	2180      	movs	r1, #128	; 0x80
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <DHT22_Check_Response+0x60>)
 8000f92:	f005 fc2f 	bl	80067f4 <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1f8      	bne.n	8000f8e <DHT22_Check_Response+0x46>
	return Response;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40021000 	.word	0x40021000

08000fac <DHT22_Read>:

uint8_t DHT22_Read(void){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0

	uint8_t i,j;
	for (j=0;j<8;j++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	71bb      	strb	r3, [r7, #6]
 8000fb6:	e037      	b.n	8001028 <DHT22_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go high
 8000fb8:	bf00      	nop
 8000fba:	2180      	movs	r1, #128	; 0x80
 8000fbc:	481e      	ldr	r0, [pc, #120]	; (8001038 <DHT22_Read+0x8c>)
 8000fbe:	f005 fc19 	bl	80067f4 <HAL_GPIO_ReadPin>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0f8      	beq.n	8000fba <DHT22_Read+0xe>
		delay (40);   // wait for 40 us
 8000fc8:	2028      	movs	r0, #40	; 0x28
 8000fca:	f002 fa97 	bl	80034fc <delay>

		if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8000fce:	2180      	movs	r1, #128	; 0x80
 8000fd0:	4819      	ldr	r0, [pc, #100]	; (8001038 <DHT22_Read+0x8c>)
 8000fd2:	f005 fc0f 	bl	80067f4 <HAL_GPIO_ReadPin>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d10e      	bne.n	8000ffa <DHT22_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000fdc:	79bb      	ldrb	r3, [r7, #6]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	b25a      	sxtb	r2, r3
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	71fb      	strb	r3, [r7, #7]
 8000ff8:	e00b      	b.n	8001012 <DHT22_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	f1c3 0307 	rsb	r3, r3, #7
 8001000:	2201      	movs	r2, #1
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	b25a      	sxtb	r2, r3
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	4313      	orrs	r3, r2
 800100e:	b25b      	sxtb	r3, r3
 8001010:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));  // wait for the pin to go low
 8001012:	bf00      	nop
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	4808      	ldr	r0, [pc, #32]	; (8001038 <DHT22_Read+0x8c>)
 8001018:	f005 fbec 	bl	80067f4 <HAL_GPIO_ReadPin>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f8      	bne.n	8001014 <DHT22_Read+0x68>
	for (j=0;j<8;j++)
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	3301      	adds	r3, #1
 8001026:	71bb      	strb	r3, [r7, #6]
 8001028:	79bb      	ldrb	r3, [r7, #6]
 800102a:	2b07      	cmp	r3, #7
 800102c:	d9c4      	bls.n	8000fb8 <DHT22_Read+0xc>
	}

	return i;
 800102e:	79fb      	ldrb	r3, [r7, #7]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000

0800103c <DHT22_getData>:

void DHT22_getData(DHT22_DataTypedef *DHT_Data){
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

	  DHT22_Start();
 8001044:	f7ff ff58 	bl	8000ef8 <DHT22_Start>
	  DHT22_presence = DHT22_Check_Response();
 8001048:	f7ff ff7e 	bl	8000f48 <DHT22_Check_Response>
 800104c:	4603      	mov	r3, r0
 800104e:	b29a      	uxth	r2, r3
 8001050:	4b30      	ldr	r3, [pc, #192]	; (8001114 <DHT22_getData+0xd8>)
 8001052:	801a      	strh	r2, [r3, #0]

	  RH_byte1 = DHT22_Read();
 8001054:	f7ff ffaa 	bl	8000fac <DHT22_Read>
 8001058:	4603      	mov	r3, r0
 800105a:	461a      	mov	r2, r3
 800105c:	4b2e      	ldr	r3, [pc, #184]	; (8001118 <DHT22_getData+0xdc>)
 800105e:	701a      	strb	r2, [r3, #0]
	  RH_byte2 = DHT22_Read();
 8001060:	f7ff ffa4 	bl	8000fac <DHT22_Read>
 8001064:	4603      	mov	r3, r0
 8001066:	461a      	mov	r2, r3
 8001068:	4b2c      	ldr	r3, [pc, #176]	; (800111c <DHT22_getData+0xe0>)
 800106a:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT22_Read();
 800106c:	f7ff ff9e 	bl	8000fac <DHT22_Read>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	4b2a      	ldr	r3, [pc, #168]	; (8001120 <DHT22_getData+0xe4>)
 8001076:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT22_Read();
 8001078:	f7ff ff98 	bl	8000fac <DHT22_Read>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	4b28      	ldr	r3, [pc, #160]	; (8001124 <DHT22_getData+0xe8>)
 8001082:	701a      	strb	r2, [r3, #0]

	  SUM = DHT22_Read();
 8001084:	f7ff ff92 	bl	8000fac <DHT22_Read>
 8001088:	4603      	mov	r3, r0
 800108a:	b29a      	uxth	r2, r3
 800108c:	4b26      	ldr	r3, [pc, #152]	; (8001128 <DHT22_getData+0xec>)
 800108e:	801a      	strh	r2, [r3, #0]

	  RH = ((RH_byte1<<8)|RH_byte2);
 8001090:	4b21      	ldr	r3, [pc, #132]	; (8001118 <DHT22_getData+0xdc>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	b21a      	sxth	r2, r3
 8001098:	4b20      	ldr	r3, [pc, #128]	; (800111c <DHT22_getData+0xe0>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	4b21      	ldr	r3, [pc, #132]	; (800112c <DHT22_getData+0xf0>)
 80010a6:	801a      	strh	r2, [r3, #0]
	  TEMP = ((Temp_byte1<<8)|Temp_byte2);
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <DHT22_getData+0xe4>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <DHT22_getData+0xe8>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <DHT22_getData+0xf4>)
 80010be:	801a      	strh	r2, [r3, #0]

	  DHT_Data->Temperature = (float) (TEMP/10.0);
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <DHT22_getData+0xf4>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fa2d 	bl	8000524 <__aeabi_i2d>
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	4b19      	ldr	r3, [pc, #100]	; (8001134 <DHT22_getData+0xf8>)
 80010d0:	f7ff fbbc 	bl	800084c <__aeabi_ddiv>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f7ff fc9e 	bl	8000a1c <__aeabi_d2f>
 80010e0:	4602      	mov	r2, r0
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	601a      	str	r2, [r3, #0]
	  DHT_Data->Humidity = (float) (RH/10.0);
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <DHT22_getData+0xf0>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fa1a 	bl	8000524 <__aeabi_i2d>
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <DHT22_getData+0xf8>)
 80010f6:	f7ff fba9 	bl	800084c <__aeabi_ddiv>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	f7ff fc8b 	bl	8000a1c <__aeabi_d2f>
 8001106:	4602      	mov	r2, r0
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	605a      	str	r2, [r3, #4]
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000008c 	.word	0x2000008c
 8001118:	2000097d 	.word	0x2000097d
 800111c:	20000981 	.word	0x20000981
 8001120:	2000097c 	.word	0x2000097c
 8001124:	20000980 	.word	0x20000980
 8001128:	2000097e 	.word	0x2000097e
 800112c:	20000978 	.word	0x20000978
 8001130:	2000097a 	.word	0x2000097a
 8001134:	40240000 	.word	0x40240000

08001138 <ESP_clearBuffer>:
char *Terminate = "</body></html>";


/*****************************************************************************************************************************************/

void ESP_clearBuffer(void){
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0

	memset(buffer_app, 0, 60);
 800113c:	223c      	movs	r2, #60	; 0x3c
 800113e:	2100      	movs	r1, #0
 8001140:	4803      	ldr	r0, [pc, #12]	; (8001150 <ESP_clearBuffer+0x18>)
 8001142:	f008 fbf5 	bl	8009930 <memset>
	buffer_index = 0;
 8001146:	4b03      	ldr	r3, [pc, #12]	; (8001154 <ESP_clearBuffer+0x1c>)
 8001148:	2200      	movs	r2, #0
 800114a:	801a      	strh	r2, [r3, #0]
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000994 	.word	0x20000994
 8001154:	20000a5a 	.word	0x20000a5a

08001158 <ESP_Init>:


void ESP_Init(char *SSID, char *PASSWD){
 8001158:	b580      	push	{r7, lr}
 800115a:	b09a      	sub	sp, #104	; 0x68
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]

	ESP_clearBuffer();
 8001162:	f7ff ffe9 	bl	8001138 <ESP_clearBuffer>
	char data[80];

	ringInit();
 8001166:	f001 fa07 	bl	8002578 <ringInit>

	HAL_Delay(1000);
 800116a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800116e:	f004 fc11 	bl	8005994 <HAL_Delay>

	/********** AT **********/

	UART_send("AT\r\n", WiFi_UART);
 8001172:	4974      	ldr	r1, [pc, #464]	; (8001344 <ESP_Init+0x1ec>)
 8001174:	4874      	ldr	r0, [pc, #464]	; (8001348 <ESP_Init+0x1f0>)
 8001176:	f001 fbbd 	bl	80028f4 <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 800117a:	bf00      	nop
 800117c:	4971      	ldr	r1, [pc, #452]	; (8001344 <ESP_Init+0x1ec>)
 800117e:	4873      	ldr	r0, [pc, #460]	; (800134c <ESP_Init+0x1f4>)
 8001180:	f001 fc4e 	bl	8002a20 <UART_waitFor>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f8      	beq.n	800117c <ESP_Init+0x24>
	UART_send("\nAT  ---->  OK\n", PC_UART);
 800118a:	4971      	ldr	r1, [pc, #452]	; (8001350 <ESP_Init+0x1f8>)
 800118c:	4871      	ldr	r0, [pc, #452]	; (8001354 <ESP_Init+0x1fc>)
 800118e:	f001 fbb1 	bl	80028f4 <UART_send>


	HAL_Delay(2000);
 8001192:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001196:	f004 fbfd 	bl	8005994 <HAL_Delay>


	/********** AT+RST **********/
	UART_send("AT+RST\r\n", WiFi_UART);
 800119a:	496a      	ldr	r1, [pc, #424]	; (8001344 <ESP_Init+0x1ec>)
 800119c:	486e      	ldr	r0, [pc, #440]	; (8001358 <ESP_Init+0x200>)
 800119e:	f001 fba9 	bl	80028f4 <UART_send>
	UART_send("\nResetting ", PC_UART);
 80011a2:	496b      	ldr	r1, [pc, #428]	; (8001350 <ESP_Init+0x1f8>)
 80011a4:	486d      	ldr	r0, [pc, #436]	; (800135c <ESP_Init+0x204>)
 80011a6:	f001 fba5 	bl	80028f4 <UART_send>

	for (int i=0; i<3; i++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	667b      	str	r3, [r7, #100]	; 0x64
 80011ae:	e00a      	b.n	80011c6 <ESP_Init+0x6e>
	{
		UART_send(" . ", PC_UART);
 80011b0:	4967      	ldr	r1, [pc, #412]	; (8001350 <ESP_Init+0x1f8>)
 80011b2:	486b      	ldr	r0, [pc, #428]	; (8001360 <ESP_Init+0x208>)
 80011b4:	f001 fb9e 	bl	80028f4 <UART_send>
		HAL_Delay(1500);
 80011b8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80011bc:	f004 fbea 	bl	8005994 <HAL_Delay>
	for (int i=0; i<3; i++)
 80011c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011c2:	3301      	adds	r3, #1
 80011c4:	667b      	str	r3, [r7, #100]	; 0x64
 80011c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	ddf1      	ble.n	80011b0 <ESP_Init+0x58>
	}


	/********** AT **********/
	UART_send("AT\r\n", WiFi_UART);
 80011cc:	495d      	ldr	r1, [pc, #372]	; (8001344 <ESP_Init+0x1ec>)
 80011ce:	485e      	ldr	r0, [pc, #376]	; (8001348 <ESP_Init+0x1f0>)
 80011d0:	f001 fb90 	bl	80028f4 <UART_send>
	while(!(UART_waitFor("OK\r\n", WiFi_UART)));
 80011d4:	bf00      	nop
 80011d6:	495b      	ldr	r1, [pc, #364]	; (8001344 <ESP_Init+0x1ec>)
 80011d8:	485c      	ldr	r0, [pc, #368]	; (800134c <ESP_Init+0x1f4>)
 80011da:	f001 fc21 	bl	8002a20 <UART_waitFor>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f8      	beq.n	80011d6 <ESP_Init+0x7e>
	UART_send("\n\nAT  ---->  OK\n\n", PC_UART);
 80011e4:	495a      	ldr	r1, [pc, #360]	; (8001350 <ESP_Init+0x1f8>)
 80011e6:	485f      	ldr	r0, [pc, #380]	; (8001364 <ESP_Init+0x20c>)
 80011e8:	f001 fb84 	bl	80028f4 <UART_send>


	HAL_Delay(2000);
 80011ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011f0:	f004 fbd0 	bl	8005994 <HAL_Delay>


	/********** AT+CWMODE=3 **********/
	UART_send("AT+CWMODE=3\r\n", WiFi_UART);
 80011f4:	4953      	ldr	r1, [pc, #332]	; (8001344 <ESP_Init+0x1ec>)
 80011f6:	485c      	ldr	r0, [pc, #368]	; (8001368 <ESP_Init+0x210>)
 80011f8:	f001 fb7c 	bl	80028f4 <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 80011fc:	bf00      	nop
 80011fe:	4951      	ldr	r1, [pc, #324]	; (8001344 <ESP_Init+0x1ec>)
 8001200:	4852      	ldr	r0, [pc, #328]	; (800134c <ESP_Init+0x1f4>)
 8001202:	f001 fc0d 	bl	8002a20 <UART_waitFor>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f8      	beq.n	80011fe <ESP_Init+0xa6>
	UART_send("CW MODE  ---->  3\n\n", PC_UART);
 800120c:	4950      	ldr	r1, [pc, #320]	; (8001350 <ESP_Init+0x1f8>)
 800120e:	4857      	ldr	r0, [pc, #348]	; (800136c <ESP_Init+0x214>)
 8001210:	f001 fb70 	bl	80028f4 <UART_send>


	/********** AT+CWJAP="SSID","PASSWD" **********/
	UART_send("Connecting ", PC_UART);
 8001214:	494e      	ldr	r1, [pc, #312]	; (8001350 <ESP_Init+0x1f8>)
 8001216:	4856      	ldr	r0, [pc, #344]	; (8001370 <ESP_Init+0x218>)
 8001218:	f001 fb6c 	bl	80028f4 <UART_send>

	for (int i=0; i<3; i++)
 800121c:	2300      	movs	r3, #0
 800121e:	663b      	str	r3, [r7, #96]	; 0x60
 8001220:	e00a      	b.n	8001238 <ESP_Init+0xe0>
	{
		UART_send(" . ", PC_UART);
 8001222:	494b      	ldr	r1, [pc, #300]	; (8001350 <ESP_Init+0x1f8>)
 8001224:	484e      	ldr	r0, [pc, #312]	; (8001360 <ESP_Init+0x208>)
 8001226:	f001 fb65 	bl	80028f4 <UART_send>
		HAL_Delay(1500);
 800122a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800122e:	f004 fbb1 	bl	8005994 <HAL_Delay>
	for (int i=0; i<3; i++)
 8001232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001234:	3301      	adds	r3, #1
 8001236:	663b      	str	r3, [r7, #96]	; 0x60
 8001238:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800123a:	2b02      	cmp	r3, #2
 800123c:	ddf1      	ble.n	8001222 <ESP_Init+0xca>
	}

	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 800123e:	f107 000c 	add.w	r0, r7, #12
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	494b      	ldr	r1, [pc, #300]	; (8001374 <ESP_Init+0x21c>)
 8001248:	f008 fb7a 	bl	8009940 <siprintf>
	UART_send(data, WiFi_UART);
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	493c      	ldr	r1, [pc, #240]	; (8001344 <ESP_Init+0x1ec>)
 8001252:	4618      	mov	r0, r3
 8001254:	f001 fb4e 	bl	80028f4 <UART_send>
	while (!(UART_waitFor("WIFI GOT IP\r\n\r\nOK\r\n", WiFi_UART)));
 8001258:	bf00      	nop
 800125a:	493a      	ldr	r1, [pc, #232]	; (8001344 <ESP_Init+0x1ec>)
 800125c:	4846      	ldr	r0, [pc, #280]	; (8001378 <ESP_Init+0x220>)
 800125e:	f001 fbdf 	bl	8002a20 <UART_waitFor>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f8      	beq.n	800125a <ESP_Init+0x102>
	sprintf (data, "\n\nConnected to \"%s\"\n\n", SSID);
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	4943      	ldr	r1, [pc, #268]	; (800137c <ESP_Init+0x224>)
 8001270:	4618      	mov	r0, r3
 8001272:	f008 fb65 	bl	8009940 <siprintf>
	UART_send(data,PC_UART);
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	4935      	ldr	r1, [pc, #212]	; (8001350 <ESP_Init+0x1f8>)
 800127c:	4618      	mov	r0, r3
 800127e:	f001 fb39 	bl	80028f4 <UART_send>
	//UART_send("AT+CIPSTA?\r\n", WiFi_UART);
	//sprintf (data, "AT+CIPSTA?\r\n");


	/********** AT+CIFSR **********/
	UART_send("AT+CIFSR\r\n", WiFi_UART);
 8001282:	4930      	ldr	r1, [pc, #192]	; (8001344 <ESP_Init+0x1ec>)
 8001284:	483e      	ldr	r0, [pc, #248]	; (8001380 <ESP_Init+0x228>)
 8001286:	f001 fb35 	bl	80028f4 <UART_send>
	while (!(UART_waitFor("CIFSR:STAIP,\"", WiFi_UART)));
 800128a:	bf00      	nop
 800128c:	492d      	ldr	r1, [pc, #180]	; (8001344 <ESP_Init+0x1ec>)
 800128e:	483d      	ldr	r0, [pc, #244]	; (8001384 <ESP_Init+0x22c>)
 8001290:	f001 fbc6 	bl	8002a20 <UART_waitFor>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f8      	beq.n	800128c <ESP_Init+0x134>
	while (!(UART_copyUpto("\"",buffer, WiFi_UART)));
 800129a:	bf00      	nop
 800129c:	4a29      	ldr	r2, [pc, #164]	; (8001344 <ESP_Init+0x1ec>)
 800129e:	493a      	ldr	r1, [pc, #232]	; (8001388 <ESP_Init+0x230>)
 80012a0:	483a      	ldr	r0, [pc, #232]	; (800138c <ESP_Init+0x234>)
 80012a2:	f001 fb3f 	bl	8002924 <UART_copyUpto>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f7      	beq.n	800129c <ESP_Init+0x144>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 80012ac:	bf00      	nop
 80012ae:	4925      	ldr	r1, [pc, #148]	; (8001344 <ESP_Init+0x1ec>)
 80012b0:	4826      	ldr	r0, [pc, #152]	; (800134c <ESP_Init+0x1f4>)
 80012b2:	f001 fbb5 	bl	8002a20 <UART_waitFor>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f8      	beq.n	80012ae <ESP_Init+0x156>
	int len = strlen (buffer);
 80012bc:	4832      	ldr	r0, [pc, #200]	; (8001388 <ESP_Init+0x230>)
 80012be:	f7fe ff87 	bl	80001d0 <strlen>
 80012c2:	4603      	mov	r3, r0
 80012c4:	65fb      	str	r3, [r7, #92]	; 0x5c
	buffer[len-1] = '\0';
 80012c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012c8:	3b01      	subs	r3, #1
 80012ca:	4a2f      	ldr	r2, [pc, #188]	; (8001388 <ESP_Init+0x230>)
 80012cc:	2100      	movs	r1, #0
 80012ce:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP :  %s\n\n", buffer);
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	4a2c      	ldr	r2, [pc, #176]	; (8001388 <ESP_Init+0x230>)
 80012d6:	492e      	ldr	r1, [pc, #184]	; (8001390 <ESP_Init+0x238>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f008 fb31 	bl	8009940 <siprintf>
	UART_send(data, PC_UART);
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	491b      	ldr	r1, [pc, #108]	; (8001350 <ESP_Init+0x1f8>)
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 fb05 	bl	80028f4 <UART_send>


	/********** AT+CIPMUX=1 **********/
	UART_send("AT+CIPMUX=1\r\n", WiFi_UART);
 80012ea:	4916      	ldr	r1, [pc, #88]	; (8001344 <ESP_Init+0x1ec>)
 80012ec:	4829      	ldr	r0, [pc, #164]	; (8001394 <ESP_Init+0x23c>)
 80012ee:	f001 fb01 	bl	80028f4 <UART_send>
	while (!(UART_waitFor("AT+CIPMUX=1\r\r\n\r\nOK\r\n", WiFi_UART)));
 80012f2:	bf00      	nop
 80012f4:	4913      	ldr	r1, [pc, #76]	; (8001344 <ESP_Init+0x1ec>)
 80012f6:	4828      	ldr	r0, [pc, #160]	; (8001398 <ESP_Init+0x240>)
 80012f8:	f001 fb92 	bl	8002a20 <UART_waitFor>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0f8      	beq.n	80012f4 <ESP_Init+0x19c>
	UART_send("CIPMUX  ---->  OK\n\n", PC_UART);
 8001302:	4913      	ldr	r1, [pc, #76]	; (8001350 <ESP_Init+0x1f8>)
 8001304:	4825      	ldr	r0, [pc, #148]	; (800139c <ESP_Init+0x244>)
 8001306:	f001 faf5 	bl	80028f4 <UART_send>
	//while (!(UART_waitFor("OK\r\n", WiFi_UART)));
	//UART_send("CIPSTART  ---->  OK\n\n", PC_UART);


	/********** AT+CIPSERVER=1,80 **********/
	UART_send("AT+CIPSERVER=1,80\r\n", WiFi_UART);
 800130a:	490e      	ldr	r1, [pc, #56]	; (8001344 <ESP_Init+0x1ec>)
 800130c:	4824      	ldr	r0, [pc, #144]	; (80013a0 <ESP_Init+0x248>)
 800130e:	f001 faf1 	bl	80028f4 <UART_send>
	while (!(UART_waitFor("OK\r\n", WiFi_UART)));
 8001312:	bf00      	nop
 8001314:	490b      	ldr	r1, [pc, #44]	; (8001344 <ESP_Init+0x1ec>)
 8001316:	480d      	ldr	r0, [pc, #52]	; (800134c <ESP_Init+0x1f4>)
 8001318:	f001 fb82 	bl	8002a20 <UART_waitFor>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f8      	beq.n	8001314 <ESP_Init+0x1bc>
	UART_send("CIPSERVER  ---->  OK\n\n", PC_UART);
 8001322:	490b      	ldr	r1, [pc, #44]	; (8001350 <ESP_Init+0x1f8>)
 8001324:	481f      	ldr	r0, [pc, #124]	; (80013a4 <ESP_Init+0x24c>)
 8001326:	f001 fae5 	bl	80028f4 <UART_send>


	/********** FIN **********/
	UART_send("Conected to the IP\n\n", PC_UART);
 800132a:	4909      	ldr	r1, [pc, #36]	; (8001350 <ESP_Init+0x1f8>)
 800132c:	481e      	ldr	r0, [pc, #120]	; (80013a8 <ESP_Init+0x250>)
 800132e:	f001 fae1 	bl	80028f4 <UART_send>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1); // CONNECTED
 8001332:	2201      	movs	r2, #1
 8001334:	2101      	movs	r1, #1
 8001336:	481d      	ldr	r0, [pc, #116]	; (80013ac <ESP_Init+0x254>)
 8001338:	f005 fa74 	bl	8006824 <HAL_GPIO_WritePin>
}
 800133c:	bf00      	nop
 800133e:	3768      	adds	r7, #104	; 0x68
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20001068 	.word	0x20001068
 8001348:	0800a768 	.word	0x0800a768
 800134c:	0800a770 	.word	0x0800a770
 8001350:	20000fdc 	.word	0x20000fdc
 8001354:	0800a778 	.word	0x0800a778
 8001358:	0800a788 	.word	0x0800a788
 800135c:	0800a794 	.word	0x0800a794
 8001360:	0800a7a0 	.word	0x0800a7a0
 8001364:	0800a7a4 	.word	0x0800a7a4
 8001368:	0800a7b8 	.word	0x0800a7b8
 800136c:	0800a7c8 	.word	0x0800a7c8
 8001370:	0800a7dc 	.word	0x0800a7dc
 8001374:	0800a7e8 	.word	0x0800a7e8
 8001378:	0800a800 	.word	0x0800a800
 800137c:	0800a814 	.word	0x0800a814
 8001380:	0800a82c 	.word	0x0800a82c
 8001384:	0800a838 	.word	0x0800a838
 8001388:	200009d0 	.word	0x200009d0
 800138c:	0800a848 	.word	0x0800a848
 8001390:	0800a84c 	.word	0x0800a84c
 8001394:	0800a858 	.word	0x0800a858
 8001398:	0800a868 	.word	0x0800a868
 800139c:	0800a880 	.word	0x0800a880
 80013a0:	0800a894 	.word	0x0800a894
 80013a4:	0800a8a8 	.word	0x0800a8a8
 80013a8:	0800a8c0 	.word	0x0800a8c0
 80013ac:	40020800 	.word	0x40020800

080013b0 <ESP_messageHandler>:
	}
	return -1;
}


void ESP_messageHandler(void){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0

	//__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);

	memset(textrc, 0, 100);
 80013b4:	2264      	movs	r2, #100	; 0x64
 80013b6:	2100      	movs	r1, #0
 80013b8:	48a7      	ldr	r0, [pc, #668]	; (8001658 <ESP_messageHandler+0x2a8>)
 80013ba:	f008 fab9 	bl	8009930 <memset>

	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) != 0){
 80013be:	2101      	movs	r1, #1
 80013c0:	48a6      	ldr	r0, [pc, #664]	; (800165c <ESP_messageHandler+0x2ac>)
 80013c2:	f005 fa17 	bl	80067f4 <HAL_GPIO_ReadPin>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d01f      	beq.n	800140c <ESP_messageHandler+0x5c>

		HAL_UART_Receive(&huart2, (uint8_t *)textrc, 100, 100); //(uint8_t *)
 80013cc:	2364      	movs	r3, #100	; 0x64
 80013ce:	2264      	movs	r2, #100	; 0x64
 80013d0:	49a1      	ldr	r1, [pc, #644]	; (8001658 <ESP_messageHandler+0x2a8>)
 80013d2:	48a3      	ldr	r0, [pc, #652]	; (8001660 <ESP_messageHandler+0x2b0>)
 80013d4:	f007 fb39 	bl	8008a4a <HAL_UART_Receive>

		HAL_UART_Transmit(&huart6, (uint8_t *)textrc, 100, HAL_MAX_DELAY);
 80013d8:	f04f 33ff 	mov.w	r3, #4294967295
 80013dc:	2264      	movs	r2, #100	; 0x64
 80013de:	499e      	ldr	r1, [pc, #632]	; (8001658 <ESP_messageHandler+0x2a8>)
 80013e0:	48a0      	ldr	r0, [pc, #640]	; (8001664 <ESP_messageHandler+0x2b4>)
 80013e2:	f007 faa0 	bl	8008926 <HAL_UART_Transmit>
		UART_send("\n", PC_UART);
 80013e6:	499f      	ldr	r1, [pc, #636]	; (8001664 <ESP_messageHandler+0x2b4>)
 80013e8:	489f      	ldr	r0, [pc, #636]	; (8001668 <ESP_messageHandler+0x2b8>)
 80013ea:	f001 fa83 	bl	80028f4 <UART_send>

		fragment[0] = textrc[25]; // Fragment assignment
 80013ee:	4b9a      	ldr	r3, [pc, #616]	; (8001658 <ESP_messageHandler+0x2a8>)
 80013f0:	7e5a      	ldrb	r2, [r3, #25]
 80013f2:	4b9e      	ldr	r3, [pc, #632]	; (800166c <ESP_messageHandler+0x2bc>)
 80013f4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart6, (uint8_t *)fragment, 1, HAL_MAX_DELAY);
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	2201      	movs	r2, #1
 80013fc:	499b      	ldr	r1, [pc, #620]	; (800166c <ESP_messageHandler+0x2bc>)
 80013fe:	4899      	ldr	r0, [pc, #612]	; (8001664 <ESP_messageHandler+0x2b4>)
 8001400:	f007 fa91 	bl	8008926 <HAL_UART_Transmit>
		UART_send("\n", PC_UART);
 8001404:	4997      	ldr	r1, [pc, #604]	; (8001664 <ESP_messageHandler+0x2b4>)
 8001406:	4898      	ldr	r0, [pc, #608]	; (8001668 <ESP_messageHandler+0x2b8>)
 8001408:	f001 fa74 	bl	80028f4 <UART_send>
	}


	// DHT22
	if (fragment[0] == 'H'){
 800140c:	4b97      	ldr	r3, [pc, #604]	; (800166c <ESP_messageHandler+0x2bc>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b48      	cmp	r3, #72	; 0x48
 8001412:	d108      	bne.n	8001426 <ESP_messageHandler+0x76>
		UART_send("LECTURA \n", PC_UART);
 8001414:	4993      	ldr	r1, [pc, #588]	; (8001664 <ESP_messageHandler+0x2b4>)
 8001416:	4896      	ldr	r0, [pc, #600]	; (8001670 <ESP_messageHandler+0x2c0>)
 8001418:	f001 fa6c 	bl	80028f4 <UART_send>
		readDHT = textrc[28]; // Orden de Lectura
 800141c:	4b8e      	ldr	r3, [pc, #568]	; (8001658 <ESP_messageHandler+0x2a8>)
 800141e:	7f1b      	ldrb	r3, [r3, #28]
 8001420:	461a      	mov	r2, r3
 8001422:	4b94      	ldr	r3, [pc, #592]	; (8001674 <ESP_messageHandler+0x2c4>)
 8001424:	601a      	str	r2, [r3, #0]
	}

	// SECURITY
	if (fragment[0] == 's'){
 8001426:	4b91      	ldr	r3, [pc, #580]	; (800166c <ESP_messageHandler+0x2bc>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b73      	cmp	r3, #115	; 0x73
 800142c:	d10b      	bne.n	8001446 <ESP_messageHandler+0x96>
		UART_send("SEGURIDAD \n", PC_UART);
 800142e:	498d      	ldr	r1, [pc, #564]	; (8001664 <ESP_messageHandler+0x2b4>)
 8001430:	4891      	ldr	r0, [pc, #580]	; (8001678 <ESP_messageHandler+0x2c8>)
 8001432:	f001 fa5f 	bl	80028f4 <UART_send>
		vSecurity[0] = textrc[28]; // Alarma Interior
 8001436:	4b88      	ldr	r3, [pc, #544]	; (8001658 <ESP_messageHandler+0x2a8>)
 8001438:	7f1a      	ldrb	r2, [r3, #28]
 800143a:	4b90      	ldr	r3, [pc, #576]	; (800167c <ESP_messageHandler+0x2cc>)
 800143c:	701a      	strb	r2, [r3, #0]
		vSecurity[1] = textrc[31]; // Alarma Exterior
 800143e:	4b86      	ldr	r3, [pc, #536]	; (8001658 <ESP_messageHandler+0x2a8>)
 8001440:	7fda      	ldrb	r2, [r3, #31]
 8001442:	4b8e      	ldr	r3, [pc, #568]	; (800167c <ESP_messageHandler+0x2cc>)
 8001444:	705a      	strb	r2, [r3, #1]
	}

	// LIGHTS
	if (fragment[0] == 'i'){
 8001446:	4b89      	ldr	r3, [pc, #548]	; (800166c <ESP_messageHandler+0x2bc>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b69      	cmp	r3, #105	; 0x69
 800144c:	f040 82cd 	bne.w	80019ea <ESP_messageHandler+0x63a>
		UART_send("ILUMINACION \n", PC_UART);
 8001450:	4984      	ldr	r1, [pc, #528]	; (8001664 <ESP_messageHandler+0x2b4>)
 8001452:	488b      	ldr	r0, [pc, #556]	; (8001680 <ESP_messageHandler+0x2d0>)
 8001454:	f001 fa4e 	bl	80028f4 <UART_send>
		vLight[0] = textrc[28]; 	// Luz Sala
 8001458:	4b7f      	ldr	r3, [pc, #508]	; (8001658 <ESP_messageHandler+0x2a8>)
 800145a:	7f1a      	ldrb	r2, [r3, #28]
 800145c:	4b89      	ldr	r3, [pc, #548]	; (8001684 <ESP_messageHandler+0x2d4>)
 800145e:	701a      	strb	r2, [r3, #0]
		vLight[1] = textrc[31]; 	// Luz Comedor
 8001460:	4b7d      	ldr	r3, [pc, #500]	; (8001658 <ESP_messageHandler+0x2a8>)
 8001462:	7fda      	ldrb	r2, [r3, #31]
 8001464:	4b87      	ldr	r3, [pc, #540]	; (8001684 <ESP_messageHandler+0x2d4>)
 8001466:	705a      	strb	r2, [r3, #1]
		vLight[2] = textrc[34]; 	// Luz Ambiente
 8001468:	4b7b      	ldr	r3, [pc, #492]	; (8001658 <ESP_messageHandler+0x2a8>)
 800146a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800146e:	4b85      	ldr	r3, [pc, #532]	; (8001684 <ESP_messageHandler+0x2d4>)
 8001470:	709a      	strb	r2, [r3, #2]
		vLight[3] = textrc[37]; 	// Luz Recibidor
 8001472:	4b79      	ldr	r3, [pc, #484]	; (8001658 <ESP_messageHandler+0x2a8>)
 8001474:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001478:	4b82      	ldr	r3, [pc, #520]	; (8001684 <ESP_messageHandler+0x2d4>)
 800147a:	70da      	strb	r2, [r3, #3]
		vLight[4] = textrc[40]; 	// Luz Cocina
 800147c:	4b76      	ldr	r3, [pc, #472]	; (8001658 <ESP_messageHandler+0x2a8>)
 800147e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001482:	4b80      	ldr	r3, [pc, #512]	; (8001684 <ESP_messageHandler+0x2d4>)
 8001484:	711a      	strb	r2, [r3, #4]
		vLight[5] = textrc[43]; 	// Luz Fregadero
 8001486:	4b74      	ldr	r3, [pc, #464]	; (8001658 <ESP_messageHandler+0x2a8>)
 8001488:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800148c:	4b7d      	ldr	r3, [pc, #500]	; (8001684 <ESP_messageHandler+0x2d4>)
 800148e:	715a      	strb	r2, [r3, #5]
		vLight[6] = textrc[46]; 	// Luz Baño
 8001490:	4b71      	ldr	r3, [pc, #452]	; (8001658 <ESP_messageHandler+0x2a8>)
 8001492:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8001496:	4b7b      	ldr	r3, [pc, #492]	; (8001684 <ESP_messageHandler+0x2d4>)
 8001498:	719a      	strb	r2, [r3, #6]
		vLight[7] = textrc[49]; 	// Luz Espejo
 800149a:	4b6f      	ldr	r3, [pc, #444]	; (8001658 <ESP_messageHandler+0x2a8>)
 800149c:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80014a0:	4b78      	ldr	r3, [pc, #480]	; (8001684 <ESP_messageHandler+0x2d4>)
 80014a2:	71da      	strb	r2, [r3, #7]
		vLight[8] = textrc[52]; 	// Luz Dormitorio
 80014a4:	4b6c      	ldr	r3, [pc, #432]	; (8001658 <ESP_messageHandler+0x2a8>)
 80014a6:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80014aa:	4b76      	ldr	r3, [pc, #472]	; (8001684 <ESP_messageHandler+0x2d4>)
 80014ac:	721a      	strb	r2, [r3, #8]
		vLight[9] = textrc[55]; 	// Luz Mesita Izq
 80014ae:	4b6a      	ldr	r3, [pc, #424]	; (8001658 <ESP_messageHandler+0x2a8>)
 80014b0:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80014b4:	4b73      	ldr	r3, [pc, #460]	; (8001684 <ESP_messageHandler+0x2d4>)
 80014b6:	725a      	strb	r2, [r3, #9]
		vLight[10] = textrc[58]; 	// Luz Mesita Dch
 80014b8:	4b67      	ldr	r3, [pc, #412]	; (8001658 <ESP_messageHandler+0x2a8>)
 80014ba:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80014be:	4b71      	ldr	r3, [pc, #452]	; (8001684 <ESP_messageHandler+0x2d4>)
 80014c0:	729a      	strb	r2, [r3, #10]
		vLight[11] = textrc[61]; 	// Luz Oficina
 80014c2:	4b65      	ldr	r3, [pc, #404]	; (8001658 <ESP_messageHandler+0x2a8>)
 80014c4:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80014c8:	4b6e      	ldr	r3, [pc, #440]	; (8001684 <ESP_messageHandler+0x2d4>)
 80014ca:	72da      	strb	r2, [r3, #11]
		vLight[12] = textrc[64]; 	// Luz Gaming
 80014cc:	4b62      	ldr	r3, [pc, #392]	; (8001658 <ESP_messageHandler+0x2a8>)
 80014ce:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80014d2:	4b6c      	ldr	r3, [pc, #432]	; (8001684 <ESP_messageHandler+0x2d4>)
 80014d4:	731a      	strb	r2, [r3, #12]
		vLight[13] = textrc[67]; 	// Luz Rx100
 80014d6:	4b60      	ldr	r3, [pc, #384]	; (8001658 <ESP_messageHandler+0x2a8>)
 80014d8:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80014dc:	4b69      	ldr	r3, [pc, #420]	; (8001684 <ESP_messageHandler+0x2d4>)
 80014de:	735a      	strb	r2, [r3, #13]
		vLight[14] = textrc[68]; 	// Luz Rx10
 80014e0:	4b5d      	ldr	r3, [pc, #372]	; (8001658 <ESP_messageHandler+0x2a8>)
 80014e2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80014e6:	4b67      	ldr	r3, [pc, #412]	; (8001684 <ESP_messageHandler+0x2d4>)
 80014e8:	739a      	strb	r2, [r3, #14]
		vLight[15] = textrc[69]; 	// Luz Rx1
 80014ea:	4b5b      	ldr	r3, [pc, #364]	; (8001658 <ESP_messageHandler+0x2a8>)
 80014ec:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80014f0:	4b64      	ldr	r3, [pc, #400]	; (8001684 <ESP_messageHandler+0x2d4>)
 80014f2:	73da      	strb	r2, [r3, #15]
		vLight[16] = textrc[72]; 	// Luz Gx100
 80014f4:	4b58      	ldr	r3, [pc, #352]	; (8001658 <ESP_messageHandler+0x2a8>)
 80014f6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80014fa:	4b62      	ldr	r3, [pc, #392]	; (8001684 <ESP_messageHandler+0x2d4>)
 80014fc:	741a      	strb	r2, [r3, #16]
		vLight[17] = textrc[73]; 	// Luz Gx10
 80014fe:	4b56      	ldr	r3, [pc, #344]	; (8001658 <ESP_messageHandler+0x2a8>)
 8001500:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8001504:	4b5f      	ldr	r3, [pc, #380]	; (8001684 <ESP_messageHandler+0x2d4>)
 8001506:	745a      	strb	r2, [r3, #17]
		vLight[18] = textrc[74]; 	// Luz Gx1
 8001508:	4b53      	ldr	r3, [pc, #332]	; (8001658 <ESP_messageHandler+0x2a8>)
 800150a:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 800150e:	4b5d      	ldr	r3, [pc, #372]	; (8001684 <ESP_messageHandler+0x2d4>)
 8001510:	749a      	strb	r2, [r3, #18]
		vLight[19] = textrc[77]; 	// Luz Bx100
 8001512:	4b51      	ldr	r3, [pc, #324]	; (8001658 <ESP_messageHandler+0x2a8>)
 8001514:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8001518:	4b5a      	ldr	r3, [pc, #360]	; (8001684 <ESP_messageHandler+0x2d4>)
 800151a:	74da      	strb	r2, [r3, #19]
		vLight[20] = textrc[78]; 	// Luz Bx10
 800151c:	4b4e      	ldr	r3, [pc, #312]	; (8001658 <ESP_messageHandler+0x2a8>)
 800151e:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8001522:	4b58      	ldr	r3, [pc, #352]	; (8001684 <ESP_messageHandler+0x2d4>)
 8001524:	751a      	strb	r2, [r3, #20]
		vLight[21] = textrc[79]; 	// Luz Bx1
 8001526:	4b4c      	ldr	r3, [pc, #304]	; (8001658 <ESP_messageHandler+0x2a8>)
 8001528:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 800152c:	4b55      	ldr	r3, [pc, #340]	; (8001684 <ESP_messageHandler+0x2d4>)
 800152e:	755a      	strb	r2, [r3, #21]
		vLight[22] = textrc[82]; 	// Luz Garaje
 8001530:	4b49      	ldr	r3, [pc, #292]	; (8001658 <ESP_messageHandler+0x2a8>)
 8001532:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8001536:	4b53      	ldr	r3, [pc, #332]	; (8001684 <ESP_messageHandler+0x2d4>)
 8001538:	759a      	strb	r2, [r3, #22]
		vLight[23] = textrc[85]; 	// Luz Jardín
 800153a:	4b47      	ldr	r3, [pc, #284]	; (8001658 <ESP_messageHandler+0x2a8>)
 800153c:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8001540:	4b50      	ldr	r3, [pc, #320]	; (8001684 <ESP_messageHandler+0x2d4>)
 8001542:	75da      	strb	r2, [r3, #23]
		vLight[24] = textrc[88]; 	// Luz Porche
 8001544:	4b44      	ldr	r3, [pc, #272]	; (8001658 <ESP_messageHandler+0x2a8>)
 8001546:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800154a:	4b4e      	ldr	r3, [pc, #312]	; (8001684 <ESP_messageHandler+0x2d4>)
 800154c:	761a      	strb	r2, [r3, #24]
		vLight[25] = textrc[91]; 	// Luz Tendedero
 800154e:	4b42      	ldr	r3, [pc, #264]	; (8001658 <ESP_messageHandler+0x2a8>)
 8001550:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 8001554:	4b4b      	ldr	r3, [pc, #300]	; (8001684 <ESP_messageHandler+0x2d4>)
 8001556:	765a      	strb	r2, [r3, #25]
		vLight[26] = textrc[94]; 	// Automático
 8001558:	4b3f      	ldr	r3, [pc, #252]	; (8001658 <ESP_messageHandler+0x2a8>)
 800155a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 800155e:	4b49      	ldr	r3, [pc, #292]	; (8001684 <ESP_messageHandler+0x2d4>)
 8001560:	769a      	strb	r2, [r3, #26]


		if(vLight[0] == '0' || vLiving[1] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, RESET); 			// Luz Sala
 8001562:	4b48      	ldr	r3, [pc, #288]	; (8001684 <ESP_messageHandler+0x2d4>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b30      	cmp	r3, #48	; 0x30
 8001568:	d003      	beq.n	8001572 <ESP_messageHandler+0x1c2>
 800156a:	4b47      	ldr	r3, [pc, #284]	; (8001688 <ESP_messageHandler+0x2d8>)
 800156c:	785b      	ldrb	r3, [r3, #1]
 800156e:	2b30      	cmp	r3, #48	; 0x30
 8001570:	d105      	bne.n	800157e <ESP_messageHandler+0x1ce>
 8001572:	2200      	movs	r2, #0
 8001574:	2108      	movs	r1, #8
 8001576:	4845      	ldr	r0, [pc, #276]	; (800168c <ESP_messageHandler+0x2dc>)
 8001578:	f005 f954 	bl	8006824 <HAL_GPIO_WritePin>
 800157c:	e00c      	b.n	8001598 <ESP_messageHandler+0x1e8>
		else if(vLight[0] == '1' || vLiving[1] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, SET);
 800157e:	4b41      	ldr	r3, [pc, #260]	; (8001684 <ESP_messageHandler+0x2d4>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b31      	cmp	r3, #49	; 0x31
 8001584:	d003      	beq.n	800158e <ESP_messageHandler+0x1de>
 8001586:	4b40      	ldr	r3, [pc, #256]	; (8001688 <ESP_messageHandler+0x2d8>)
 8001588:	785b      	ldrb	r3, [r3, #1]
 800158a:	2b31      	cmp	r3, #49	; 0x31
 800158c:	d104      	bne.n	8001598 <ESP_messageHandler+0x1e8>
 800158e:	2201      	movs	r2, #1
 8001590:	2108      	movs	r1, #8
 8001592:	483e      	ldr	r0, [pc, #248]	; (800168c <ESP_messageHandler+0x2dc>)
 8001594:	f005 f946 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[1] == '0' || vLiving[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET); 			// Luz Comedor
 8001598:	4b3a      	ldr	r3, [pc, #232]	; (8001684 <ESP_messageHandler+0x2d4>)
 800159a:	785b      	ldrb	r3, [r3, #1]
 800159c:	2b30      	cmp	r3, #48	; 0x30
 800159e:	d003      	beq.n	80015a8 <ESP_messageHandler+0x1f8>
 80015a0:	4b39      	ldr	r3, [pc, #228]	; (8001688 <ESP_messageHandler+0x2d8>)
 80015a2:	789b      	ldrb	r3, [r3, #2]
 80015a4:	2b30      	cmp	r3, #48	; 0x30
 80015a6:	d105      	bne.n	80015b4 <ESP_messageHandler+0x204>
 80015a8:	2200      	movs	r2, #0
 80015aa:	2102      	movs	r1, #2
 80015ac:	4837      	ldr	r0, [pc, #220]	; (800168c <ESP_messageHandler+0x2dc>)
 80015ae:	f005 f939 	bl	8006824 <HAL_GPIO_WritePin>
 80015b2:	e00c      	b.n	80015ce <ESP_messageHandler+0x21e>
		else if(vLight[1] == '1'|| vLiving[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, SET);
 80015b4:	4b33      	ldr	r3, [pc, #204]	; (8001684 <ESP_messageHandler+0x2d4>)
 80015b6:	785b      	ldrb	r3, [r3, #1]
 80015b8:	2b31      	cmp	r3, #49	; 0x31
 80015ba:	d003      	beq.n	80015c4 <ESP_messageHandler+0x214>
 80015bc:	4b32      	ldr	r3, [pc, #200]	; (8001688 <ESP_messageHandler+0x2d8>)
 80015be:	789b      	ldrb	r3, [r3, #2]
 80015c0:	2b31      	cmp	r3, #49	; 0x31
 80015c2:	d104      	bne.n	80015ce <ESP_messageHandler+0x21e>
 80015c4:	2201      	movs	r2, #1
 80015c6:	2102      	movs	r1, #2
 80015c8:	4830      	ldr	r0, [pc, #192]	; (800168c <ESP_messageHandler+0x2dc>)
 80015ca:	f005 f92b 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[2] == '0' || vLiving[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, RESET); 			// Luz Ambiente
 80015ce:	4b2d      	ldr	r3, [pc, #180]	; (8001684 <ESP_messageHandler+0x2d4>)
 80015d0:	789b      	ldrb	r3, [r3, #2]
 80015d2:	2b30      	cmp	r3, #48	; 0x30
 80015d4:	d003      	beq.n	80015de <ESP_messageHandler+0x22e>
 80015d6:	4b2c      	ldr	r3, [pc, #176]	; (8001688 <ESP_messageHandler+0x2d8>)
 80015d8:	78db      	ldrb	r3, [r3, #3]
 80015da:	2b30      	cmp	r3, #48	; 0x30
 80015dc:	d105      	bne.n	80015ea <ESP_messageHandler+0x23a>
 80015de:	2200      	movs	r2, #0
 80015e0:	2120      	movs	r1, #32
 80015e2:	482a      	ldr	r0, [pc, #168]	; (800168c <ESP_messageHandler+0x2dc>)
 80015e4:	f005 f91e 	bl	8006824 <HAL_GPIO_WritePin>
 80015e8:	e00c      	b.n	8001604 <ESP_messageHandler+0x254>
		else if(vLight[2] == '1' || vLiving[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, SET);
 80015ea:	4b26      	ldr	r3, [pc, #152]	; (8001684 <ESP_messageHandler+0x2d4>)
 80015ec:	789b      	ldrb	r3, [r3, #2]
 80015ee:	2b31      	cmp	r3, #49	; 0x31
 80015f0:	d003      	beq.n	80015fa <ESP_messageHandler+0x24a>
 80015f2:	4b25      	ldr	r3, [pc, #148]	; (8001688 <ESP_messageHandler+0x2d8>)
 80015f4:	78db      	ldrb	r3, [r3, #3]
 80015f6:	2b31      	cmp	r3, #49	; 0x31
 80015f8:	d104      	bne.n	8001604 <ESP_messageHandler+0x254>
 80015fa:	2201      	movs	r2, #1
 80015fc:	2120      	movs	r1, #32
 80015fe:	4823      	ldr	r0, [pc, #140]	; (800168c <ESP_messageHandler+0x2dc>)
 8001600:	f005 f910 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[3] == '0' || vLiving[4] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET); 			// Luz Recibidor
 8001604:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <ESP_messageHandler+0x2d4>)
 8001606:	78db      	ldrb	r3, [r3, #3]
 8001608:	2b30      	cmp	r3, #48	; 0x30
 800160a:	d003      	beq.n	8001614 <ESP_messageHandler+0x264>
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <ESP_messageHandler+0x2d8>)
 800160e:	791b      	ldrb	r3, [r3, #4]
 8001610:	2b30      	cmp	r3, #48	; 0x30
 8001612:	d105      	bne.n	8001620 <ESP_messageHandler+0x270>
 8001614:	2200      	movs	r2, #0
 8001616:	2101      	movs	r1, #1
 8001618:	481c      	ldr	r0, [pc, #112]	; (800168c <ESP_messageHandler+0x2dc>)
 800161a:	f005 f903 	bl	8006824 <HAL_GPIO_WritePin>
 800161e:	e00c      	b.n	800163a <ESP_messageHandler+0x28a>
		else if(vLight[3] == '1' || vLiving[4] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 8001620:	4b18      	ldr	r3, [pc, #96]	; (8001684 <ESP_messageHandler+0x2d4>)
 8001622:	78db      	ldrb	r3, [r3, #3]
 8001624:	2b31      	cmp	r3, #49	; 0x31
 8001626:	d003      	beq.n	8001630 <ESP_messageHandler+0x280>
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <ESP_messageHandler+0x2d8>)
 800162a:	791b      	ldrb	r3, [r3, #4]
 800162c:	2b31      	cmp	r3, #49	; 0x31
 800162e:	d104      	bne.n	800163a <ESP_messageHandler+0x28a>
 8001630:	2201      	movs	r2, #1
 8001632:	2101      	movs	r1, #1
 8001634:	4815      	ldr	r0, [pc, #84]	; (800168c <ESP_messageHandler+0x2dc>)
 8001636:	f005 f8f5 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[4] == '0' || vKitchen[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET); 		// Luz Cocina
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <ESP_messageHandler+0x2d4>)
 800163c:	791b      	ldrb	r3, [r3, #4]
 800163e:	2b30      	cmp	r3, #48	; 0x30
 8001640:	d003      	beq.n	800164a <ESP_messageHandler+0x29a>
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <ESP_messageHandler+0x2e0>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b30      	cmp	r3, #48	; 0x30
 8001648:	d126      	bne.n	8001698 <ESP_messageHandler+0x2e8>
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001650:	4810      	ldr	r0, [pc, #64]	; (8001694 <ESP_messageHandler+0x2e4>)
 8001652:	f005 f8e7 	bl	8006824 <HAL_GPIO_WritePin>
 8001656:	e02d      	b.n	80016b4 <ESP_messageHandler+0x304>
 8001658:	200009ec 	.word	0x200009ec
 800165c:	40021000 	.word	0x40021000
 8001660:	20001068 	.word	0x20001068
 8001664:	20000fdc 	.word	0x20000fdc
 8001668:	0800a940 	.word	0x0800a940
 800166c:	200009e4 	.word	0x200009e4
 8001670:	0800a944 	.word	0x0800a944
 8001674:	2000094c 	.word	0x2000094c
 8001678:	0800a950 	.word	0x0800a950
 800167c:	20000970 	.word	0x20000970
 8001680:	0800a95c 	.word	0x0800a95c
 8001684:	20000928 	.word	0x20000928
 8001688:	2000091c 	.word	0x2000091c
 800168c:	40020c00 	.word	0x40020c00
 8001690:	20000964 	.word	0x20000964
 8001694:	40020800 	.word	0x40020800
		else if(vLight[4] == '1' || vKitchen[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 8001698:	4b95      	ldr	r3, [pc, #596]	; (80018f0 <ESP_messageHandler+0x540>)
 800169a:	791b      	ldrb	r3, [r3, #4]
 800169c:	2b31      	cmp	r3, #49	; 0x31
 800169e:	d003      	beq.n	80016a8 <ESP_messageHandler+0x2f8>
 80016a0:	4b94      	ldr	r3, [pc, #592]	; (80018f4 <ESP_messageHandler+0x544>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b31      	cmp	r3, #49	; 0x31
 80016a6:	d105      	bne.n	80016b4 <ESP_messageHandler+0x304>
 80016a8:	2201      	movs	r2, #1
 80016aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ae:	4892      	ldr	r0, [pc, #584]	; (80018f8 <ESP_messageHandler+0x548>)
 80016b0:	f005 f8b8 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[5] == '0' || vKitchen[1] == '0') HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET); 		// Luz Fregadero
 80016b4:	4b8e      	ldr	r3, [pc, #568]	; (80018f0 <ESP_messageHandler+0x540>)
 80016b6:	795b      	ldrb	r3, [r3, #5]
 80016b8:	2b30      	cmp	r3, #48	; 0x30
 80016ba:	d003      	beq.n	80016c4 <ESP_messageHandler+0x314>
 80016bc:	4b8d      	ldr	r3, [pc, #564]	; (80018f4 <ESP_messageHandler+0x544>)
 80016be:	785b      	ldrb	r3, [r3, #1]
 80016c0:	2b30      	cmp	r3, #48	; 0x30
 80016c2:	d106      	bne.n	80016d2 <ESP_messageHandler+0x322>
 80016c4:	2200      	movs	r2, #0
 80016c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ca:	488c      	ldr	r0, [pc, #560]	; (80018fc <ESP_messageHandler+0x54c>)
 80016cc:	f005 f8aa 	bl	8006824 <HAL_GPIO_WritePin>
 80016d0:	e00d      	b.n	80016ee <ESP_messageHandler+0x33e>
		else if(vLight[5] == '1' || vKitchen[1] == '1')HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 80016d2:	4b87      	ldr	r3, [pc, #540]	; (80018f0 <ESP_messageHandler+0x540>)
 80016d4:	795b      	ldrb	r3, [r3, #5]
 80016d6:	2b31      	cmp	r3, #49	; 0x31
 80016d8:	d003      	beq.n	80016e2 <ESP_messageHandler+0x332>
 80016da:	4b86      	ldr	r3, [pc, #536]	; (80018f4 <ESP_messageHandler+0x544>)
 80016dc:	785b      	ldrb	r3, [r3, #1]
 80016de:	2b31      	cmp	r3, #49	; 0x31
 80016e0:	d105      	bne.n	80016ee <ESP_messageHandler+0x33e>
 80016e2:	2201      	movs	r2, #1
 80016e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e8:	4884      	ldr	r0, [pc, #528]	; (80018fc <ESP_messageHandler+0x54c>)
 80016ea:	f005 f89b 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[6] == '0' || vBath[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, RESET); 			// Luz Baño
 80016ee:	4b80      	ldr	r3, [pc, #512]	; (80018f0 <ESP_messageHandler+0x540>)
 80016f0:	799b      	ldrb	r3, [r3, #6]
 80016f2:	2b30      	cmp	r3, #48	; 0x30
 80016f4:	d003      	beq.n	80016fe <ESP_messageHandler+0x34e>
 80016f6:	4b82      	ldr	r3, [pc, #520]	; (8001900 <ESP_messageHandler+0x550>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b30      	cmp	r3, #48	; 0x30
 80016fc:	d105      	bne.n	800170a <ESP_messageHandler+0x35a>
 80016fe:	2200      	movs	r2, #0
 8001700:	2140      	movs	r1, #64	; 0x40
 8001702:	4880      	ldr	r0, [pc, #512]	; (8001904 <ESP_messageHandler+0x554>)
 8001704:	f005 f88e 	bl	8006824 <HAL_GPIO_WritePin>
 8001708:	e00c      	b.n	8001724 <ESP_messageHandler+0x374>
		else if(vLight[6] == '1' || vBath[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, SET);
 800170a:	4b79      	ldr	r3, [pc, #484]	; (80018f0 <ESP_messageHandler+0x540>)
 800170c:	799b      	ldrb	r3, [r3, #6]
 800170e:	2b31      	cmp	r3, #49	; 0x31
 8001710:	d003      	beq.n	800171a <ESP_messageHandler+0x36a>
 8001712:	4b7b      	ldr	r3, [pc, #492]	; (8001900 <ESP_messageHandler+0x550>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b31      	cmp	r3, #49	; 0x31
 8001718:	d104      	bne.n	8001724 <ESP_messageHandler+0x374>
 800171a:	2201      	movs	r2, #1
 800171c:	2140      	movs	r1, #64	; 0x40
 800171e:	4879      	ldr	r0, [pc, #484]	; (8001904 <ESP_messageHandler+0x554>)
 8001720:	f005 f880 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[7] == '0' || vBath[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET); 			// Luz Espejo
 8001724:	4b72      	ldr	r3, [pc, #456]	; (80018f0 <ESP_messageHandler+0x540>)
 8001726:	79db      	ldrb	r3, [r3, #7]
 8001728:	2b30      	cmp	r3, #48	; 0x30
 800172a:	d003      	beq.n	8001734 <ESP_messageHandler+0x384>
 800172c:	4b74      	ldr	r3, [pc, #464]	; (8001900 <ESP_messageHandler+0x550>)
 800172e:	785b      	ldrb	r3, [r3, #1]
 8001730:	2b30      	cmp	r3, #48	; 0x30
 8001732:	d105      	bne.n	8001740 <ESP_messageHandler+0x390>
 8001734:	2200      	movs	r2, #0
 8001736:	2108      	movs	r1, #8
 8001738:	4873      	ldr	r0, [pc, #460]	; (8001908 <ESP_messageHandler+0x558>)
 800173a:	f005 f873 	bl	8006824 <HAL_GPIO_WritePin>
 800173e:	e00c      	b.n	800175a <ESP_messageHandler+0x3aa>
		else if(vLight[7] == '1' || vBath[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8001740:	4b6b      	ldr	r3, [pc, #428]	; (80018f0 <ESP_messageHandler+0x540>)
 8001742:	79db      	ldrb	r3, [r3, #7]
 8001744:	2b31      	cmp	r3, #49	; 0x31
 8001746:	d003      	beq.n	8001750 <ESP_messageHandler+0x3a0>
 8001748:	4b6d      	ldr	r3, [pc, #436]	; (8001900 <ESP_messageHandler+0x550>)
 800174a:	785b      	ldrb	r3, [r3, #1]
 800174c:	2b31      	cmp	r3, #49	; 0x31
 800174e:	d104      	bne.n	800175a <ESP_messageHandler+0x3aa>
 8001750:	2201      	movs	r2, #1
 8001752:	2108      	movs	r1, #8
 8001754:	486c      	ldr	r0, [pc, #432]	; (8001908 <ESP_messageHandler+0x558>)
 8001756:	f005 f865 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[8] == '0' || vBedroom[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, RESET);			// Luz Dormitorio
 800175a:	4b65      	ldr	r3, [pc, #404]	; (80018f0 <ESP_messageHandler+0x540>)
 800175c:	7a1b      	ldrb	r3, [r3, #8]
 800175e:	2b30      	cmp	r3, #48	; 0x30
 8001760:	d003      	beq.n	800176a <ESP_messageHandler+0x3ba>
 8001762:	4b6a      	ldr	r3, [pc, #424]	; (800190c <ESP_messageHandler+0x55c>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b30      	cmp	r3, #48	; 0x30
 8001768:	d105      	bne.n	8001776 <ESP_messageHandler+0x3c6>
 800176a:	2200      	movs	r2, #0
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	4865      	ldr	r0, [pc, #404]	; (8001904 <ESP_messageHandler+0x554>)
 8001770:	f005 f858 	bl	8006824 <HAL_GPIO_WritePin>
 8001774:	e00c      	b.n	8001790 <ESP_messageHandler+0x3e0>
		else if(vLight[8] == '1' || vBedroom[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET);
 8001776:	4b5e      	ldr	r3, [pc, #376]	; (80018f0 <ESP_messageHandler+0x540>)
 8001778:	7a1b      	ldrb	r3, [r3, #8]
 800177a:	2b31      	cmp	r3, #49	; 0x31
 800177c:	d003      	beq.n	8001786 <ESP_messageHandler+0x3d6>
 800177e:	4b63      	ldr	r3, [pc, #396]	; (800190c <ESP_messageHandler+0x55c>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b31      	cmp	r3, #49	; 0x31
 8001784:	d104      	bne.n	8001790 <ESP_messageHandler+0x3e0>
 8001786:	2201      	movs	r2, #1
 8001788:	2180      	movs	r1, #128	; 0x80
 800178a:	485e      	ldr	r0, [pc, #376]	; (8001904 <ESP_messageHandler+0x554>)
 800178c:	f005 f84a 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[9] == '0' || vBedroom[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET); 		// Luz Mesita Izq
 8001790:	4b57      	ldr	r3, [pc, #348]	; (80018f0 <ESP_messageHandler+0x540>)
 8001792:	7a5b      	ldrb	r3, [r3, #9]
 8001794:	2b30      	cmp	r3, #48	; 0x30
 8001796:	d003      	beq.n	80017a0 <ESP_messageHandler+0x3f0>
 8001798:	4b5c      	ldr	r3, [pc, #368]	; (800190c <ESP_messageHandler+0x55c>)
 800179a:	785b      	ldrb	r3, [r3, #1]
 800179c:	2b30      	cmp	r3, #48	; 0x30
 800179e:	d105      	bne.n	80017ac <ESP_messageHandler+0x3fc>
 80017a0:	2200      	movs	r2, #0
 80017a2:	2110      	movs	r1, #16
 80017a4:	4858      	ldr	r0, [pc, #352]	; (8001908 <ESP_messageHandler+0x558>)
 80017a6:	f005 f83d 	bl	8006824 <HAL_GPIO_WritePin>
 80017aa:	e00c      	b.n	80017c6 <ESP_messageHandler+0x416>
		else if(vLight[9] == '1' || vBedroom[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80017ac:	4b50      	ldr	r3, [pc, #320]	; (80018f0 <ESP_messageHandler+0x540>)
 80017ae:	7a5b      	ldrb	r3, [r3, #9]
 80017b0:	2b31      	cmp	r3, #49	; 0x31
 80017b2:	d003      	beq.n	80017bc <ESP_messageHandler+0x40c>
 80017b4:	4b55      	ldr	r3, [pc, #340]	; (800190c <ESP_messageHandler+0x55c>)
 80017b6:	785b      	ldrb	r3, [r3, #1]
 80017b8:	2b31      	cmp	r3, #49	; 0x31
 80017ba:	d104      	bne.n	80017c6 <ESP_messageHandler+0x416>
 80017bc:	2201      	movs	r2, #1
 80017be:	2110      	movs	r1, #16
 80017c0:	4851      	ldr	r0, [pc, #324]	; (8001908 <ESP_messageHandler+0x558>)
 80017c2:	f005 f82f 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[10] == '0' || vBedroom[2] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET); 		// Luz Mesita Dch
 80017c6:	4b4a      	ldr	r3, [pc, #296]	; (80018f0 <ESP_messageHandler+0x540>)
 80017c8:	7a9b      	ldrb	r3, [r3, #10]
 80017ca:	2b30      	cmp	r3, #48	; 0x30
 80017cc:	d003      	beq.n	80017d6 <ESP_messageHandler+0x426>
 80017ce:	4b4f      	ldr	r3, [pc, #316]	; (800190c <ESP_messageHandler+0x55c>)
 80017d0:	789b      	ldrb	r3, [r3, #2]
 80017d2:	2b30      	cmp	r3, #48	; 0x30
 80017d4:	d105      	bne.n	80017e2 <ESP_messageHandler+0x432>
 80017d6:	2200      	movs	r2, #0
 80017d8:	2140      	movs	r1, #64	; 0x40
 80017da:	484b      	ldr	r0, [pc, #300]	; (8001908 <ESP_messageHandler+0x558>)
 80017dc:	f005 f822 	bl	8006824 <HAL_GPIO_WritePin>
 80017e0:	e00c      	b.n	80017fc <ESP_messageHandler+0x44c>
		else if(vLight[10] == '1' || vBedroom[2] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 80017e2:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <ESP_messageHandler+0x540>)
 80017e4:	7a9b      	ldrb	r3, [r3, #10]
 80017e6:	2b31      	cmp	r3, #49	; 0x31
 80017e8:	d003      	beq.n	80017f2 <ESP_messageHandler+0x442>
 80017ea:	4b48      	ldr	r3, [pc, #288]	; (800190c <ESP_messageHandler+0x55c>)
 80017ec:	789b      	ldrb	r3, [r3, #2]
 80017ee:	2b31      	cmp	r3, #49	; 0x31
 80017f0:	d104      	bne.n	80017fc <ESP_messageHandler+0x44c>
 80017f2:	2201      	movs	r2, #1
 80017f4:	2140      	movs	r1, #64	; 0x40
 80017f6:	4844      	ldr	r0, [pc, #272]	; (8001908 <ESP_messageHandler+0x558>)
 80017f8:	f005 f814 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[11] == '0' || vOffice[0] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET); 		// Luz Oficina
 80017fc:	4b3c      	ldr	r3, [pc, #240]	; (80018f0 <ESP_messageHandler+0x540>)
 80017fe:	7adb      	ldrb	r3, [r3, #11]
 8001800:	2b30      	cmp	r3, #48	; 0x30
 8001802:	d003      	beq.n	800180c <ESP_messageHandler+0x45c>
 8001804:	4b42      	ldr	r3, [pc, #264]	; (8001910 <ESP_messageHandler+0x560>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b30      	cmp	r3, #48	; 0x30
 800180a:	d105      	bne.n	8001818 <ESP_messageHandler+0x468>
 800180c:	2200      	movs	r2, #0
 800180e:	2120      	movs	r1, #32
 8001810:	483d      	ldr	r0, [pc, #244]	; (8001908 <ESP_messageHandler+0x558>)
 8001812:	f005 f807 	bl	8006824 <HAL_GPIO_WritePin>
 8001816:	e00c      	b.n	8001832 <ESP_messageHandler+0x482>
		else if(vLight[11] == '1' || vOffice[0] == '1') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001818:	4b35      	ldr	r3, [pc, #212]	; (80018f0 <ESP_messageHandler+0x540>)
 800181a:	7adb      	ldrb	r3, [r3, #11]
 800181c:	2b31      	cmp	r3, #49	; 0x31
 800181e:	d003      	beq.n	8001828 <ESP_messageHandler+0x478>
 8001820:	4b3b      	ldr	r3, [pc, #236]	; (8001910 <ESP_messageHandler+0x560>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b31      	cmp	r3, #49	; 0x31
 8001826:	d104      	bne.n	8001832 <ESP_messageHandler+0x482>
 8001828:	2201      	movs	r2, #1
 800182a:	2120      	movs	r1, #32
 800182c:	4836      	ldr	r0, [pc, #216]	; (8001908 <ESP_messageHandler+0x558>)
 800182e:	f004 fff9 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[12] == '0' || vOffice[1] == '0'){ 													// Luz Gaming
 8001832:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <ESP_messageHandler+0x540>)
 8001834:	7b1b      	ldrb	r3, [r3, #12]
 8001836:	2b30      	cmp	r3, #48	; 0x30
 8001838:	d003      	beq.n	8001842 <ESP_messageHandler+0x492>
 800183a:	4b35      	ldr	r3, [pc, #212]	; (8001910 <ESP_messageHandler+0x560>)
 800183c:	785b      	ldrb	r3, [r3, #1]
 800183e:	2b30      	cmp	r3, #48	; 0x30
 8001840:	d10c      	bne.n	800185c <ESP_messageHandler+0x4ac>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001842:	4b34      	ldr	r3, [pc, #208]	; (8001914 <ESP_messageHandler+0x564>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2200      	movs	r2, #0
 8001848:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800184a:	4b32      	ldr	r3, [pc, #200]	; (8001914 <ESP_messageHandler+0x564>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2200      	movs	r2, #0
 8001850:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001852:	4b30      	ldr	r3, [pc, #192]	; (8001914 <ESP_messageHandler+0x564>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2200      	movs	r2, #0
 8001858:	63da      	str	r2, [r3, #60]	; 0x3c
 800185a:	e03a      	b.n	80018d2 <ESP_messageHandler+0x522>
		}
		else if(vLight[12] == '1' || vOffice[1] == '1'){
 800185c:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <ESP_messageHandler+0x540>)
 800185e:	7b1b      	ldrb	r3, [r3, #12]
 8001860:	2b31      	cmp	r3, #49	; 0x31
 8001862:	d003      	beq.n	800186c <ESP_messageHandler+0x4bc>
 8001864:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <ESP_messageHandler+0x560>)
 8001866:	785b      	ldrb	r3, [r3, #1]
 8001868:	2b31      	cmp	r3, #49	; 0x31
 800186a:	d132      	bne.n	80018d2 <ESP_messageHandler+0x522>

			//uint8_t r, g, b;

			r = rgb_value (vLight[13],vLight[14],vLight[15]);
 800186c:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <ESP_messageHandler+0x540>)
 800186e:	7b5b      	ldrb	r3, [r3, #13]
 8001870:	4a1f      	ldr	r2, [pc, #124]	; (80018f0 <ESP_messageHandler+0x540>)
 8001872:	7b91      	ldrb	r1, [r2, #14]
 8001874:	4a1e      	ldr	r2, [pc, #120]	; (80018f0 <ESP_messageHandler+0x540>)
 8001876:	7bd2      	ldrb	r2, [r2, #15]
 8001878:	4618      	mov	r0, r3
 800187a:	f000 fd5d 	bl	8002338 <rgb_value>
 800187e:	4603      	mov	r3, r0
 8001880:	4a25      	ldr	r2, [pc, #148]	; (8001918 <ESP_messageHandler+0x568>)
 8001882:	6013      	str	r3, [r2, #0]
			g = rgb_value (vLight[16],vLight[17],vLight[18]);
 8001884:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <ESP_messageHandler+0x540>)
 8001886:	7c1b      	ldrb	r3, [r3, #16]
 8001888:	4a19      	ldr	r2, [pc, #100]	; (80018f0 <ESP_messageHandler+0x540>)
 800188a:	7c51      	ldrb	r1, [r2, #17]
 800188c:	4a18      	ldr	r2, [pc, #96]	; (80018f0 <ESP_messageHandler+0x540>)
 800188e:	7c92      	ldrb	r2, [r2, #18]
 8001890:	4618      	mov	r0, r3
 8001892:	f000 fd51 	bl	8002338 <rgb_value>
 8001896:	4603      	mov	r3, r0
 8001898:	4a20      	ldr	r2, [pc, #128]	; (800191c <ESP_messageHandler+0x56c>)
 800189a:	6013      	str	r3, [r2, #0]
			b = rgb_value (vLight[19],vLight[20],vLight[21]);
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <ESP_messageHandler+0x540>)
 800189e:	7cdb      	ldrb	r3, [r3, #19]
 80018a0:	4a13      	ldr	r2, [pc, #76]	; (80018f0 <ESP_messageHandler+0x540>)
 80018a2:	7d11      	ldrb	r1, [r2, #20]
 80018a4:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <ESP_messageHandler+0x540>)
 80018a6:	7d52      	ldrb	r2, [r2, #21]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 fd45 	bl	8002338 <rgb_value>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a1b      	ldr	r2, [pc, #108]	; (8001920 <ESP_messageHandler+0x570>)
 80018b2:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, g); // PA8
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <ESP_messageHandler+0x56c>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b16      	ldr	r3, [pc, #88]	; (8001914 <ESP_messageHandler+0x564>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, r); // PA9
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <ESP_messageHandler+0x568>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <ESP_messageHandler+0x564>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b); // PA10
 80018c8:	4b15      	ldr	r3, [pc, #84]	; (8001920 <ESP_messageHandler+0x570>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <ESP_messageHandler+0x564>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		if(vLight[22] == '0' || vGarage[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET); 		// Luz Garaje
 80018d2:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <ESP_messageHandler+0x540>)
 80018d4:	7d9b      	ldrb	r3, [r3, #22]
 80018d6:	2b30      	cmp	r3, #48	; 0x30
 80018d8:	d003      	beq.n	80018e2 <ESP_messageHandler+0x532>
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <ESP_messageHandler+0x574>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b30      	cmp	r3, #48	; 0x30
 80018e0:	d122      	bne.n	8001928 <ESP_messageHandler+0x578>
 80018e2:	2200      	movs	r2, #0
 80018e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018e8:	4803      	ldr	r0, [pc, #12]	; (80018f8 <ESP_messageHandler+0x548>)
 80018ea:	f004 ff9b 	bl	8006824 <HAL_GPIO_WritePin>
 80018ee:	e029      	b.n	8001944 <ESP_messageHandler+0x594>
 80018f0:	20000928 	.word	0x20000928
 80018f4:	20000964 	.word	0x20000964
 80018f8:	40020800 	.word	0x40020800
 80018fc:	40020000 	.word	0x40020000
 8001900:	20000948 	.word	0x20000948
 8001904:	40020c00 	.word	0x40020c00
 8001908:	40020400 	.word	0x40020400
 800190c:	20000974 	.word	0x20000974
 8001910:	20000950 	.word	0x20000950
 8001914:	20000f4c 	.word	0x20000f4c
 8001918:	20000990 	.word	0x20000990
 800191c:	2000098c 	.word	0x2000098c
 8001920:	20000984 	.word	0x20000984
 8001924:	20000968 	.word	0x20000968
		else if(vLight[22] == '1' || vGarage[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 8001928:	4b86      	ldr	r3, [pc, #536]	; (8001b44 <ESP_messageHandler+0x794>)
 800192a:	7d9b      	ldrb	r3, [r3, #22]
 800192c:	2b31      	cmp	r3, #49	; 0x31
 800192e:	d003      	beq.n	8001938 <ESP_messageHandler+0x588>
 8001930:	4b85      	ldr	r3, [pc, #532]	; (8001b48 <ESP_messageHandler+0x798>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b31      	cmp	r3, #49	; 0x31
 8001936:	d105      	bne.n	8001944 <ESP_messageHandler+0x594>
 8001938:	2201      	movs	r2, #1
 800193a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800193e:	4883      	ldr	r0, [pc, #524]	; (8001b4c <ESP_messageHandler+0x79c>)
 8001940:	f004 ff70 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[23] == '0' || vOutside[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET); 		// Luz Jardín
 8001944:	4b7f      	ldr	r3, [pc, #508]	; (8001b44 <ESP_messageHandler+0x794>)
 8001946:	7ddb      	ldrb	r3, [r3, #23]
 8001948:	2b30      	cmp	r3, #48	; 0x30
 800194a:	d003      	beq.n	8001954 <ESP_messageHandler+0x5a4>
 800194c:	4b80      	ldr	r3, [pc, #512]	; (8001b50 <ESP_messageHandler+0x7a0>)
 800194e:	78db      	ldrb	r3, [r3, #3]
 8001950:	2b30      	cmp	r3, #48	; 0x30
 8001952:	d105      	bne.n	8001960 <ESP_messageHandler+0x5b0>
 8001954:	2200      	movs	r2, #0
 8001956:	2104      	movs	r1, #4
 8001958:	487e      	ldr	r0, [pc, #504]	; (8001b54 <ESP_messageHandler+0x7a4>)
 800195a:	f004 ff63 	bl	8006824 <HAL_GPIO_WritePin>
 800195e:	e00c      	b.n	800197a <ESP_messageHandler+0x5ca>
		else if(vLight[23] == '1' || vOutside[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8001960:	4b78      	ldr	r3, [pc, #480]	; (8001b44 <ESP_messageHandler+0x794>)
 8001962:	7ddb      	ldrb	r3, [r3, #23]
 8001964:	2b31      	cmp	r3, #49	; 0x31
 8001966:	d003      	beq.n	8001970 <ESP_messageHandler+0x5c0>
 8001968:	4b79      	ldr	r3, [pc, #484]	; (8001b50 <ESP_messageHandler+0x7a0>)
 800196a:	78db      	ldrb	r3, [r3, #3]
 800196c:	2b31      	cmp	r3, #49	; 0x31
 800196e:	d104      	bne.n	800197a <ESP_messageHandler+0x5ca>
 8001970:	2201      	movs	r2, #1
 8001972:	2104      	movs	r1, #4
 8001974:	4877      	ldr	r0, [pc, #476]	; (8001b54 <ESP_messageHandler+0x7a4>)
 8001976:	f004 ff55 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[24] == '0' || vOutside[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET); 		// Luz Porche
 800197a:	4b72      	ldr	r3, [pc, #456]	; (8001b44 <ESP_messageHandler+0x794>)
 800197c:	7e1b      	ldrb	r3, [r3, #24]
 800197e:	2b30      	cmp	r3, #48	; 0x30
 8001980:	d003      	beq.n	800198a <ESP_messageHandler+0x5da>
 8001982:	4b73      	ldr	r3, [pc, #460]	; (8001b50 <ESP_messageHandler+0x7a0>)
 8001984:	789b      	ldrb	r3, [r3, #2]
 8001986:	2b30      	cmp	r3, #48	; 0x30
 8001988:	d105      	bne.n	8001996 <ESP_messageHandler+0x5e6>
 800198a:	2200      	movs	r2, #0
 800198c:	2110      	movs	r1, #16
 800198e:	4871      	ldr	r0, [pc, #452]	; (8001b54 <ESP_messageHandler+0x7a4>)
 8001990:	f004 ff48 	bl	8006824 <HAL_GPIO_WritePin>
 8001994:	e00c      	b.n	80019b0 <ESP_messageHandler+0x600>
		else if(vLight[24] == '1' || vOutside[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 8001996:	4b6b      	ldr	r3, [pc, #428]	; (8001b44 <ESP_messageHandler+0x794>)
 8001998:	7e1b      	ldrb	r3, [r3, #24]
 800199a:	2b31      	cmp	r3, #49	; 0x31
 800199c:	d003      	beq.n	80019a6 <ESP_messageHandler+0x5f6>
 800199e:	4b6c      	ldr	r3, [pc, #432]	; (8001b50 <ESP_messageHandler+0x7a0>)
 80019a0:	789b      	ldrb	r3, [r3, #2]
 80019a2:	2b31      	cmp	r3, #49	; 0x31
 80019a4:	d104      	bne.n	80019b0 <ESP_messageHandler+0x600>
 80019a6:	2201      	movs	r2, #1
 80019a8:	2110      	movs	r1, #16
 80019aa:	486a      	ldr	r0, [pc, #424]	; (8001b54 <ESP_messageHandler+0x7a4>)
 80019ac:	f004 ff3a 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[25] == '0' || vOutside[1] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET); 		// Luz Tendedero
 80019b0:	4b64      	ldr	r3, [pc, #400]	; (8001b44 <ESP_messageHandler+0x794>)
 80019b2:	7e5b      	ldrb	r3, [r3, #25]
 80019b4:	2b30      	cmp	r3, #48	; 0x30
 80019b6:	d003      	beq.n	80019c0 <ESP_messageHandler+0x610>
 80019b8:	4b65      	ldr	r3, [pc, #404]	; (8001b50 <ESP_messageHandler+0x7a0>)
 80019ba:	785b      	ldrb	r3, [r3, #1]
 80019bc:	2b30      	cmp	r3, #48	; 0x30
 80019be:	d106      	bne.n	80019ce <ESP_messageHandler+0x61e>
 80019c0:	2200      	movs	r2, #0
 80019c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019c6:	4861      	ldr	r0, [pc, #388]	; (8001b4c <ESP_messageHandler+0x79c>)
 80019c8:	f004 ff2c 	bl	8006824 <HAL_GPIO_WritePin>
 80019cc:	e00d      	b.n	80019ea <ESP_messageHandler+0x63a>
		else if(vLight[25] == '1' || vOutside[1] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 80019ce:	4b5d      	ldr	r3, [pc, #372]	; (8001b44 <ESP_messageHandler+0x794>)
 80019d0:	7e5b      	ldrb	r3, [r3, #25]
 80019d2:	2b31      	cmp	r3, #49	; 0x31
 80019d4:	d003      	beq.n	80019de <ESP_messageHandler+0x62e>
 80019d6:	4b5e      	ldr	r3, [pc, #376]	; (8001b50 <ESP_messageHandler+0x7a0>)
 80019d8:	785b      	ldrb	r3, [r3, #1]
 80019da:	2b31      	cmp	r3, #49	; 0x31
 80019dc:	d105      	bne.n	80019ea <ESP_messageHandler+0x63a>
 80019de:	2201      	movs	r2, #1
 80019e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019e4:	4859      	ldr	r0, [pc, #356]	; (8001b4c <ESP_messageHandler+0x79c>)
 80019e6:	f004 ff1d 	bl	8006824 <HAL_GPIO_WritePin>
	}

	// DOORS & WINDOWS
	if (fragment[0] == 'p'){
 80019ea:	4b5b      	ldr	r3, [pc, #364]	; (8001b58 <ESP_messageHandler+0x7a8>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b70      	cmp	r3, #112	; 0x70
 80019f0:	d107      	bne.n	8001a02 <ESP_messageHandler+0x652>
		UART_send("PUERTAS Y VENTANAS (PUERTA PARCELA)\n", PC_UART);
 80019f2:	495a      	ldr	r1, [pc, #360]	; (8001b5c <ESP_messageHandler+0x7ac>)
 80019f4:	485a      	ldr	r0, [pc, #360]	; (8001b60 <ESP_messageHandler+0x7b0>)
 80019f6:	f000 ff7d 	bl	80028f4 <UART_send>
		vWindow[0] = textrc[28]; 	// P. Parcela
 80019fa:	4b5a      	ldr	r3, [pc, #360]	; (8001b64 <ESP_messageHandler+0x7b4>)
 80019fc:	7f1a      	ldrb	r2, [r3, #28]
 80019fe:	4b5a      	ldr	r3, [pc, #360]	; (8001b68 <ESP_messageHandler+0x7b8>)
 8001a00:	701a      	strb	r2, [r3, #0]
	}
	if (fragment[0] == 'g'){
 8001a02:	4b55      	ldr	r3, [pc, #340]	; (8001b58 <ESP_messageHandler+0x7a8>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b67      	cmp	r3, #103	; 0x67
 8001a08:	d107      	bne.n	8001a1a <ESP_messageHandler+0x66a>
		UART_send("PUERTAS Y VENTANAS (PUERTA GARAJE)\n", PC_UART);
 8001a0a:	4954      	ldr	r1, [pc, #336]	; (8001b5c <ESP_messageHandler+0x7ac>)
 8001a0c:	4857      	ldr	r0, [pc, #348]	; (8001b6c <ESP_messageHandler+0x7bc>)
 8001a0e:	f000 ff71 	bl	80028f4 <UART_send>
		vWindow[1] = textrc[31]; 	// P. Garaje
 8001a12:	4b54      	ldr	r3, [pc, #336]	; (8001b64 <ESP_messageHandler+0x7b4>)
 8001a14:	7fda      	ldrb	r2, [r3, #31]
 8001a16:	4b54      	ldr	r3, [pc, #336]	; (8001b68 <ESP_messageHandler+0x7b8>)
 8001a18:	705a      	strb	r2, [r3, #1]
	}
	/*if (fragment[0] == 'l'){
		UART_send("PUERTAS Y VENTANAS (VENTANA SALÓN)\n", PC_UART);
		vWindow[2] = textrc[34]; 	// V. Salón
	}*/
	if (fragment[0] == 'd'){
 8001a1a:	4b4f      	ldr	r3, [pc, #316]	; (8001b58 <ESP_messageHandler+0x7a8>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b64      	cmp	r3, #100	; 0x64
 8001a20:	d108      	bne.n	8001a34 <ESP_messageHandler+0x684>
		UART_send("PUERTAS Y VENTANAS (VENTANA DORMITORIO)\n", PC_UART);
 8001a22:	494e      	ldr	r1, [pc, #312]	; (8001b5c <ESP_messageHandler+0x7ac>)
 8001a24:	4852      	ldr	r0, [pc, #328]	; (8001b70 <ESP_messageHandler+0x7c0>)
 8001a26:	f000 ff65 	bl	80028f4 <UART_send>
		vWindow[2] = textrc[34]; 	// V. Dormitorio
 8001a2a:	4b4e      	ldr	r3, [pc, #312]	; (8001b64 <ESP_messageHandler+0x7b4>)
 8001a2c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001a30:	4b4d      	ldr	r3, [pc, #308]	; (8001b68 <ESP_messageHandler+0x7b8>)
 8001a32:	709a      	strb	r2, [r3, #2]
	}
	if (fragment[0] == 'o'){
 8001a34:	4b48      	ldr	r3, [pc, #288]	; (8001b58 <ESP_messageHandler+0x7a8>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b6f      	cmp	r3, #111	; 0x6f
 8001a3a:	d107      	bne.n	8001a4c <ESP_messageHandler+0x69c>
		UART_send("PUERTAS Y VENTANAS (VENTANA OFICINA)\n", PC_UART);
 8001a3c:	4947      	ldr	r1, [pc, #284]	; (8001b5c <ESP_messageHandler+0x7ac>)
 8001a3e:	484d      	ldr	r0, [pc, #308]	; (8001b74 <ESP_messageHandler+0x7c4>)
 8001a40:	f000 ff58 	bl	80028f4 <UART_send>
		vWindow[3] = textrc[3]; 	// V. Oficina
 8001a44:	4b47      	ldr	r3, [pc, #284]	; (8001b64 <ESP_messageHandler+0x7b4>)
 8001a46:	78da      	ldrb	r2, [r3, #3]
 8001a48:	4b47      	ldr	r3, [pc, #284]	; (8001b68 <ESP_messageHandler+0x7b8>)
 8001a4a:	70da      	strb	r2, [r3, #3]
	}

	// WEATHER
	if (fragment[0] == 't'){
 8001a4c:	4b42      	ldr	r3, [pc, #264]	; (8001b58 <ESP_messageHandler+0x7a8>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b74      	cmp	r3, #116	; 0x74
 8001a52:	d110      	bne.n	8001a76 <ESP_messageHandler+0x6c6>
		UART_send("TIEMPO\n", PC_UART);
 8001a54:	4941      	ldr	r1, [pc, #260]	; (8001b5c <ESP_messageHandler+0x7ac>)
 8001a56:	4848      	ldr	r0, [pc, #288]	; (8001b78 <ESP_messageHandler+0x7c8>)
 8001a58:	f000 ff4c 	bl	80028f4 <UART_send>
		vWeather[0] = textrc[28]; 	// Ventilador
 8001a5c:	4b41      	ldr	r3, [pc, #260]	; (8001b64 <ESP_messageHandler+0x7b4>)
 8001a5e:	7f1a      	ldrb	r2, [r3, #28]
 8001a60:	4b46      	ldr	r3, [pc, #280]	; (8001b7c <ESP_messageHandler+0x7cc>)
 8001a62:	701a      	strb	r2, [r3, #0]
		//vWeather[1] = textrc[31]; 	// Vent. Dormitorio
		//vWeather[2] = textrc[34]; 	// Vent. Oficina
		vWeather[1] = textrc[31]; 	// Calefacción
 8001a64:	4b3f      	ldr	r3, [pc, #252]	; (8001b64 <ESP_messageHandler+0x7b4>)
 8001a66:	7fda      	ldrb	r2, [r3, #31]
 8001a68:	4b44      	ldr	r3, [pc, #272]	; (8001b7c <ESP_messageHandler+0x7cc>)
 8001a6a:	705a      	strb	r2, [r3, #1]
		vWeather[2] = textrc[34]; 	// Automático
 8001a6c:	4b3d      	ldr	r3, [pc, #244]	; (8001b64 <ESP_messageHandler+0x7b4>)
 8001a6e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001a72:	4b42      	ldr	r3, [pc, #264]	; (8001b7c <ESP_messageHandler+0x7cc>)
 8001a74:	709a      	strb	r2, [r3, #2]


    }

	// OUTSIDE
	if (fragment[0] == 'e'){
 8001a76:	4b38      	ldr	r3, [pc, #224]	; (8001b58 <ESP_messageHandler+0x7a8>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b65      	cmp	r3, #101	; 0x65
 8001a7c:	f040 808f 	bne.w	8001b9e <ESP_messageHandler+0x7ee>
		UART_send("LUCES (EXTERIOR)\n", PC_UART);
 8001a80:	4936      	ldr	r1, [pc, #216]	; (8001b5c <ESP_messageHandler+0x7ac>)
 8001a82:	483f      	ldr	r0, [pc, #252]	; (8001b80 <ESP_messageHandler+0x7d0>)
 8001a84:	f000 ff36 	bl	80028f4 <UART_send>
		//vOutside[0] = textrc[28]; 	// Toldo Tendedero
		vOutside[1] = textrc[31]; 	// Luz Tendedero
 8001a88:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <ESP_messageHandler+0x7b4>)
 8001a8a:	7fda      	ldrb	r2, [r3, #31]
 8001a8c:	4b30      	ldr	r3, [pc, #192]	; (8001b50 <ESP_messageHandler+0x7a0>)
 8001a8e:	705a      	strb	r2, [r3, #1]
		vOutside[2] = textrc[34]; 	// Luz Porche
 8001a90:	4b34      	ldr	r3, [pc, #208]	; (8001b64 <ESP_messageHandler+0x7b4>)
 8001a92:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001a96:	4b2e      	ldr	r3, [pc, #184]	; (8001b50 <ESP_messageHandler+0x7a0>)
 8001a98:	709a      	strb	r2, [r3, #2]
		vOutside[3] = textrc[37]; 	// Luz Jardín
 8001a9a:	4b32      	ldr	r3, [pc, #200]	; (8001b64 <ESP_messageHandler+0x7b4>)
 8001a9c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001aa0:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <ESP_messageHandler+0x7a0>)
 8001aa2:	70da      	strb	r2, [r3, #3]
		//vOutside[4] = textrc[40]; 	// Puerta Parcela
		vOutside[5] = textrc[43]; 	// Automático
 8001aa4:	4b2f      	ldr	r3, [pc, #188]	; (8001b64 <ESP_messageHandler+0x7b4>)
 8001aa6:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8001aaa:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <ESP_messageHandler+0x7a0>)
 8001aac:	715a      	strb	r2, [r3, #5]
		vOutside[6] = textrc[46]; 	// Ropa tendida
 8001aae:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <ESP_messageHandler+0x7b4>)
 8001ab0:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8001ab4:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <ESP_messageHandler+0x7a0>)
 8001ab6:	719a      	strb	r2, [r3, #6]

		if(vLight[25] == '0' || vOutside[1] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET); 		// Luz Tendedero
 8001ab8:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <ESP_messageHandler+0x794>)
 8001aba:	7e5b      	ldrb	r3, [r3, #25]
 8001abc:	2b30      	cmp	r3, #48	; 0x30
 8001abe:	d003      	beq.n	8001ac8 <ESP_messageHandler+0x718>
 8001ac0:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <ESP_messageHandler+0x7a0>)
 8001ac2:	785b      	ldrb	r3, [r3, #1]
 8001ac4:	2b30      	cmp	r3, #48	; 0x30
 8001ac6:	d106      	bne.n	8001ad6 <ESP_messageHandler+0x726>
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ace:	481f      	ldr	r0, [pc, #124]	; (8001b4c <ESP_messageHandler+0x79c>)
 8001ad0:	f004 fea8 	bl	8006824 <HAL_GPIO_WritePin>
 8001ad4:	e00d      	b.n	8001af2 <ESP_messageHandler+0x742>
		else if(vLight[25] == '1' || vOutside[1] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8001ad6:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <ESP_messageHandler+0x794>)
 8001ad8:	7e5b      	ldrb	r3, [r3, #25]
 8001ada:	2b31      	cmp	r3, #49	; 0x31
 8001adc:	d003      	beq.n	8001ae6 <ESP_messageHandler+0x736>
 8001ade:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <ESP_messageHandler+0x7a0>)
 8001ae0:	785b      	ldrb	r3, [r3, #1]
 8001ae2:	2b31      	cmp	r3, #49	; 0x31
 8001ae4:	d105      	bne.n	8001af2 <ESP_messageHandler+0x742>
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aec:	4817      	ldr	r0, [pc, #92]	; (8001b4c <ESP_messageHandler+0x79c>)
 8001aee:	f004 fe99 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[24] == '0' || vOutside[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET); 		// Luz Porche
 8001af2:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <ESP_messageHandler+0x794>)
 8001af4:	7e1b      	ldrb	r3, [r3, #24]
 8001af6:	2b30      	cmp	r3, #48	; 0x30
 8001af8:	d003      	beq.n	8001b02 <ESP_messageHandler+0x752>
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <ESP_messageHandler+0x7a0>)
 8001afc:	789b      	ldrb	r3, [r3, #2]
 8001afe:	2b30      	cmp	r3, #48	; 0x30
 8001b00:	d105      	bne.n	8001b0e <ESP_messageHandler+0x75e>
 8001b02:	2200      	movs	r2, #0
 8001b04:	2110      	movs	r1, #16
 8001b06:	4813      	ldr	r0, [pc, #76]	; (8001b54 <ESP_messageHandler+0x7a4>)
 8001b08:	f004 fe8c 	bl	8006824 <HAL_GPIO_WritePin>
 8001b0c:	e00c      	b.n	8001b28 <ESP_messageHandler+0x778>
		else if(vLight[24] == '1' || vOutside[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <ESP_messageHandler+0x794>)
 8001b10:	7e1b      	ldrb	r3, [r3, #24]
 8001b12:	2b31      	cmp	r3, #49	; 0x31
 8001b14:	d003      	beq.n	8001b1e <ESP_messageHandler+0x76e>
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <ESP_messageHandler+0x7a0>)
 8001b18:	789b      	ldrb	r3, [r3, #2]
 8001b1a:	2b31      	cmp	r3, #49	; 0x31
 8001b1c:	d104      	bne.n	8001b28 <ESP_messageHandler+0x778>
 8001b1e:	2201      	movs	r2, #1
 8001b20:	2110      	movs	r1, #16
 8001b22:	480c      	ldr	r0, [pc, #48]	; (8001b54 <ESP_messageHandler+0x7a4>)
 8001b24:	f004 fe7e 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[23] == '0' || vOutside[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET); 		// Luz Jardín
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <ESP_messageHandler+0x794>)
 8001b2a:	7ddb      	ldrb	r3, [r3, #23]
 8001b2c:	2b30      	cmp	r3, #48	; 0x30
 8001b2e:	d003      	beq.n	8001b38 <ESP_messageHandler+0x788>
 8001b30:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <ESP_messageHandler+0x7a0>)
 8001b32:	78db      	ldrb	r3, [r3, #3]
 8001b34:	2b30      	cmp	r3, #48	; 0x30
 8001b36:	d125      	bne.n	8001b84 <ESP_messageHandler+0x7d4>
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2104      	movs	r1, #4
 8001b3c:	4805      	ldr	r0, [pc, #20]	; (8001b54 <ESP_messageHandler+0x7a4>)
 8001b3e:	f004 fe71 	bl	8006824 <HAL_GPIO_WritePin>
 8001b42:	e02c      	b.n	8001b9e <ESP_messageHandler+0x7ee>
 8001b44:	20000928 	.word	0x20000928
 8001b48:	20000968 	.word	0x20000968
 8001b4c:	40020800 	.word	0x40020800
 8001b50:	2000095c 	.word	0x2000095c
 8001b54:	40020c00 	.word	0x40020c00
 8001b58:	200009e4 	.word	0x200009e4
 8001b5c:	20000fdc 	.word	0x20000fdc
 8001b60:	0800a96c 	.word	0x0800a96c
 8001b64:	200009ec 	.word	0x200009ec
 8001b68:	20000924 	.word	0x20000924
 8001b6c:	0800a994 	.word	0x0800a994
 8001b70:	0800a9b8 	.word	0x0800a9b8
 8001b74:	0800a9e4 	.word	0x0800a9e4
 8001b78:	0800aa0c 	.word	0x0800aa0c
 8001b7c:	20000944 	.word	0x20000944
 8001b80:	0800aa14 	.word	0x0800aa14
		else if(vLight[23] == '1' || vOutside[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8001b84:	4b96      	ldr	r3, [pc, #600]	; (8001de0 <ESP_messageHandler+0xa30>)
 8001b86:	7ddb      	ldrb	r3, [r3, #23]
 8001b88:	2b31      	cmp	r3, #49	; 0x31
 8001b8a:	d003      	beq.n	8001b94 <ESP_messageHandler+0x7e4>
 8001b8c:	4b95      	ldr	r3, [pc, #596]	; (8001de4 <ESP_messageHandler+0xa34>)
 8001b8e:	78db      	ldrb	r3, [r3, #3]
 8001b90:	2b31      	cmp	r3, #49	; 0x31
 8001b92:	d104      	bne.n	8001b9e <ESP_messageHandler+0x7ee>
 8001b94:	2201      	movs	r2, #1
 8001b96:	2104      	movs	r1, #4
 8001b98:	4893      	ldr	r0, [pc, #588]	; (8001de8 <ESP_messageHandler+0xa38>)
 8001b9a:	f004 fe43 	bl	8006824 <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'P'){
 8001b9e:	4b93      	ldr	r3, [pc, #588]	; (8001dec <ESP_messageHandler+0xa3c>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b50      	cmp	r3, #80	; 0x50
 8001ba4:	d108      	bne.n	8001bb8 <ESP_messageHandler+0x808>
		UART_send("PARCELA (EXTERIOR)\n", PC_UART);
 8001ba6:	4992      	ldr	r1, [pc, #584]	; (8001df0 <ESP_messageHandler+0xa40>)
 8001ba8:	4892      	ldr	r0, [pc, #584]	; (8001df4 <ESP_messageHandler+0xa44>)
 8001baa:	f000 fea3 	bl	80028f4 <UART_send>
		//vOutside[0] = textrc[28]; 	// Toldo Tendedero
		//vOutside[1] = textrc[31]; 	// Luz Tendedero
		//vOutside[2] = textrc[34]; 	// Luz Porche
		//vOutsidet[3] = textrc[37]; 	// Luz Jardín
		vOutside[4] = textrc[40]; 	// Puerta Parcela
 8001bae:	4b92      	ldr	r3, [pc, #584]	; (8001df8 <ESP_messageHandler+0xa48>)
 8001bb0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001bb4:	4b8b      	ldr	r3, [pc, #556]	; (8001de4 <ESP_messageHandler+0xa34>)
 8001bb6:	711a      	strb	r2, [r3, #4]
	}

	if (fragment[0] == 'R'){
 8001bb8:	4b8c      	ldr	r3, [pc, #560]	; (8001dec <ESP_messageHandler+0xa3c>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b52      	cmp	r3, #82	; 0x52
 8001bbe:	d107      	bne.n	8001bd0 <ESP_messageHandler+0x820>
		UART_send("TENDEDERO (EXTERIOR)\n", PC_UART);
 8001bc0:	498b      	ldr	r1, [pc, #556]	; (8001df0 <ESP_messageHandler+0xa40>)
 8001bc2:	488e      	ldr	r0, [pc, #568]	; (8001dfc <ESP_messageHandler+0xa4c>)
 8001bc4:	f000 fe96 	bl	80028f4 <UART_send>
		vOutside[0] = textrc[28]; 	// Toldo Tendedero
 8001bc8:	4b8b      	ldr	r3, [pc, #556]	; (8001df8 <ESP_messageHandler+0xa48>)
 8001bca:	7f1a      	ldrb	r2, [r3, #28]
 8001bcc:	4b85      	ldr	r3, [pc, #532]	; (8001de4 <ESP_messageHandler+0xa34>)
 8001bce:	701a      	strb	r2, [r3, #0]
		//vOutside[3] = textrc[37]; 	// Luz Jardín
		//vOutside[4] = textrc[40]; 	// Puerta Parcela
	}

	// LIVING ROOM
	if (fragment[0] == 'n'){
 8001bd0:	4b86      	ldr	r3, [pc, #536]	; (8001dec <ESP_messageHandler+0xa3c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b6e      	cmp	r3, #110	; 0x6e
 8001bd6:	f040 809a 	bne.w	8001d0e <ESP_messageHandler+0x95e>
		UART_send("SALON \n", PC_UART);
 8001bda:	4985      	ldr	r1, [pc, #532]	; (8001df0 <ESP_messageHandler+0xa40>)
 8001bdc:	4888      	ldr	r0, [pc, #544]	; (8001e00 <ESP_messageHandler+0xa50>)
 8001bde:	f000 fe89 	bl	80028f4 <UART_send>
		vLiving[0] = textrc[28]; 	// Televisión
 8001be2:	4b85      	ldr	r3, [pc, #532]	; (8001df8 <ESP_messageHandler+0xa48>)
 8001be4:	7f1a      	ldrb	r2, [r3, #28]
 8001be6:	4b87      	ldr	r3, [pc, #540]	; (8001e04 <ESP_messageHandler+0xa54>)
 8001be8:	701a      	strb	r2, [r3, #0]
		vLiving[1] = textrc[31]; 	// Luz Sala
 8001bea:	4b83      	ldr	r3, [pc, #524]	; (8001df8 <ESP_messageHandler+0xa48>)
 8001bec:	7fda      	ldrb	r2, [r3, #31]
 8001bee:	4b85      	ldr	r3, [pc, #532]	; (8001e04 <ESP_messageHandler+0xa54>)
 8001bf0:	705a      	strb	r2, [r3, #1]
		vLiving[2] = textrc[34]; 	// Luz Comedor
 8001bf2:	4b81      	ldr	r3, [pc, #516]	; (8001df8 <ESP_messageHandler+0xa48>)
 8001bf4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001bf8:	4b82      	ldr	r3, [pc, #520]	; (8001e04 <ESP_messageHandler+0xa54>)
 8001bfa:	709a      	strb	r2, [r3, #2]
		vLiving[3] = textrc[37]; 	// Luz Ambiente
 8001bfc:	4b7e      	ldr	r3, [pc, #504]	; (8001df8 <ESP_messageHandler+0xa48>)
 8001bfe:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001c02:	4b80      	ldr	r3, [pc, #512]	; (8001e04 <ESP_messageHandler+0xa54>)
 8001c04:	70da      	strb	r2, [r3, #3]
		vLiving[4] = textrc[40]; 	// Luz Recibidor
 8001c06:	4b7c      	ldr	r3, [pc, #496]	; (8001df8 <ESP_messageHandler+0xa48>)
 8001c08:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001c0c:	4b7d      	ldr	r3, [pc, #500]	; (8001e04 <ESP_messageHandler+0xa54>)
 8001c0e:	711a      	strb	r2, [r3, #4]


		if(vLiving[0] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET); 							// Televisión
 8001c10:	4b7c      	ldr	r3, [pc, #496]	; (8001e04 <ESP_messageHandler+0xa54>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b30      	cmp	r3, #48	; 0x30
 8001c16:	d105      	bne.n	8001c24 <ESP_messageHandler+0x874>
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2180      	movs	r1, #128	; 0x80
 8001c1c:	487a      	ldr	r0, [pc, #488]	; (8001e08 <ESP_messageHandler+0xa58>)
 8001c1e:	f004 fe01 	bl	8006824 <HAL_GPIO_WritePin>
 8001c22:	e008      	b.n	8001c36 <ESP_messageHandler+0x886>
		else if(vLiving[0] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 8001c24:	4b77      	ldr	r3, [pc, #476]	; (8001e04 <ESP_messageHandler+0xa54>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b31      	cmp	r3, #49	; 0x31
 8001c2a:	d104      	bne.n	8001c36 <ESP_messageHandler+0x886>
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	2180      	movs	r1, #128	; 0x80
 8001c30:	4875      	ldr	r0, [pc, #468]	; (8001e08 <ESP_messageHandler+0xa58>)
 8001c32:	f004 fdf7 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[0] == '0' || vLiving[1] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, RESET); 		// Luz Sala
 8001c36:	4b6a      	ldr	r3, [pc, #424]	; (8001de0 <ESP_messageHandler+0xa30>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b30      	cmp	r3, #48	; 0x30
 8001c3c:	d003      	beq.n	8001c46 <ESP_messageHandler+0x896>
 8001c3e:	4b71      	ldr	r3, [pc, #452]	; (8001e04 <ESP_messageHandler+0xa54>)
 8001c40:	785b      	ldrb	r3, [r3, #1]
 8001c42:	2b30      	cmp	r3, #48	; 0x30
 8001c44:	d105      	bne.n	8001c52 <ESP_messageHandler+0x8a2>
 8001c46:	2200      	movs	r2, #0
 8001c48:	2108      	movs	r1, #8
 8001c4a:	4867      	ldr	r0, [pc, #412]	; (8001de8 <ESP_messageHandler+0xa38>)
 8001c4c:	f004 fdea 	bl	8006824 <HAL_GPIO_WritePin>
 8001c50:	e00c      	b.n	8001c6c <ESP_messageHandler+0x8bc>
		else if(vLight[0] == '1' || vLiving[1] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, SET);
 8001c52:	4b63      	ldr	r3, [pc, #396]	; (8001de0 <ESP_messageHandler+0xa30>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b31      	cmp	r3, #49	; 0x31
 8001c58:	d003      	beq.n	8001c62 <ESP_messageHandler+0x8b2>
 8001c5a:	4b6a      	ldr	r3, [pc, #424]	; (8001e04 <ESP_messageHandler+0xa54>)
 8001c5c:	785b      	ldrb	r3, [r3, #1]
 8001c5e:	2b31      	cmp	r3, #49	; 0x31
 8001c60:	d104      	bne.n	8001c6c <ESP_messageHandler+0x8bc>
 8001c62:	2201      	movs	r2, #1
 8001c64:	2108      	movs	r1, #8
 8001c66:	4860      	ldr	r0, [pc, #384]	; (8001de8 <ESP_messageHandler+0xa38>)
 8001c68:	f004 fddc 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[1] == '0' || vLiving[2] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, RESET); 		// Luz Comedor
 8001c6c:	4b5c      	ldr	r3, [pc, #368]	; (8001de0 <ESP_messageHandler+0xa30>)
 8001c6e:	785b      	ldrb	r3, [r3, #1]
 8001c70:	2b30      	cmp	r3, #48	; 0x30
 8001c72:	d003      	beq.n	8001c7c <ESP_messageHandler+0x8cc>
 8001c74:	4b63      	ldr	r3, [pc, #396]	; (8001e04 <ESP_messageHandler+0xa54>)
 8001c76:	789b      	ldrb	r3, [r3, #2]
 8001c78:	2b30      	cmp	r3, #48	; 0x30
 8001c7a:	d105      	bne.n	8001c88 <ESP_messageHandler+0x8d8>
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2102      	movs	r1, #2
 8001c80:	4859      	ldr	r0, [pc, #356]	; (8001de8 <ESP_messageHandler+0xa38>)
 8001c82:	f004 fdcf 	bl	8006824 <HAL_GPIO_WritePin>
 8001c86:	e00c      	b.n	8001ca2 <ESP_messageHandler+0x8f2>
		else if(vLight[1] == '1' || vLiving[2] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, SET);
 8001c88:	4b55      	ldr	r3, [pc, #340]	; (8001de0 <ESP_messageHandler+0xa30>)
 8001c8a:	785b      	ldrb	r3, [r3, #1]
 8001c8c:	2b31      	cmp	r3, #49	; 0x31
 8001c8e:	d003      	beq.n	8001c98 <ESP_messageHandler+0x8e8>
 8001c90:	4b5c      	ldr	r3, [pc, #368]	; (8001e04 <ESP_messageHandler+0xa54>)
 8001c92:	789b      	ldrb	r3, [r3, #2]
 8001c94:	2b31      	cmp	r3, #49	; 0x31
 8001c96:	d104      	bne.n	8001ca2 <ESP_messageHandler+0x8f2>
 8001c98:	2201      	movs	r2, #1
 8001c9a:	2102      	movs	r1, #2
 8001c9c:	4852      	ldr	r0, [pc, #328]	; (8001de8 <ESP_messageHandler+0xa38>)
 8001c9e:	f004 fdc1 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[2] == '0' || vLiving[3] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, RESET); 		// Luz Ambiente
 8001ca2:	4b4f      	ldr	r3, [pc, #316]	; (8001de0 <ESP_messageHandler+0xa30>)
 8001ca4:	789b      	ldrb	r3, [r3, #2]
 8001ca6:	2b30      	cmp	r3, #48	; 0x30
 8001ca8:	d003      	beq.n	8001cb2 <ESP_messageHandler+0x902>
 8001caa:	4b56      	ldr	r3, [pc, #344]	; (8001e04 <ESP_messageHandler+0xa54>)
 8001cac:	78db      	ldrb	r3, [r3, #3]
 8001cae:	2b30      	cmp	r3, #48	; 0x30
 8001cb0:	d105      	bne.n	8001cbe <ESP_messageHandler+0x90e>
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2120      	movs	r1, #32
 8001cb6:	484c      	ldr	r0, [pc, #304]	; (8001de8 <ESP_messageHandler+0xa38>)
 8001cb8:	f004 fdb4 	bl	8006824 <HAL_GPIO_WritePin>
 8001cbc:	e00c      	b.n	8001cd8 <ESP_messageHandler+0x928>
		else if(vLight[2] == '1' || vLiving[3] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, SET);
 8001cbe:	4b48      	ldr	r3, [pc, #288]	; (8001de0 <ESP_messageHandler+0xa30>)
 8001cc0:	789b      	ldrb	r3, [r3, #2]
 8001cc2:	2b31      	cmp	r3, #49	; 0x31
 8001cc4:	d003      	beq.n	8001cce <ESP_messageHandler+0x91e>
 8001cc6:	4b4f      	ldr	r3, [pc, #316]	; (8001e04 <ESP_messageHandler+0xa54>)
 8001cc8:	78db      	ldrb	r3, [r3, #3]
 8001cca:	2b31      	cmp	r3, #49	; 0x31
 8001ccc:	d104      	bne.n	8001cd8 <ESP_messageHandler+0x928>
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2120      	movs	r1, #32
 8001cd2:	4845      	ldr	r0, [pc, #276]	; (8001de8 <ESP_messageHandler+0xa38>)
 8001cd4:	f004 fda6 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[3] == '0' || vLiving[4] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET); 		// Luz Recibidor
 8001cd8:	4b41      	ldr	r3, [pc, #260]	; (8001de0 <ESP_messageHandler+0xa30>)
 8001cda:	78db      	ldrb	r3, [r3, #3]
 8001cdc:	2b30      	cmp	r3, #48	; 0x30
 8001cde:	d003      	beq.n	8001ce8 <ESP_messageHandler+0x938>
 8001ce0:	4b48      	ldr	r3, [pc, #288]	; (8001e04 <ESP_messageHandler+0xa54>)
 8001ce2:	791b      	ldrb	r3, [r3, #4]
 8001ce4:	2b30      	cmp	r3, #48	; 0x30
 8001ce6:	d105      	bne.n	8001cf4 <ESP_messageHandler+0x944>
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2101      	movs	r1, #1
 8001cec:	483e      	ldr	r0, [pc, #248]	; (8001de8 <ESP_messageHandler+0xa38>)
 8001cee:	f004 fd99 	bl	8006824 <HAL_GPIO_WritePin>
 8001cf2:	e00c      	b.n	8001d0e <ESP_messageHandler+0x95e>
		else if(vLight[3] == '1' || vLiving[4] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 8001cf4:	4b3a      	ldr	r3, [pc, #232]	; (8001de0 <ESP_messageHandler+0xa30>)
 8001cf6:	78db      	ldrb	r3, [r3, #3]
 8001cf8:	2b31      	cmp	r3, #49	; 0x31
 8001cfa:	d003      	beq.n	8001d04 <ESP_messageHandler+0x954>
 8001cfc:	4b41      	ldr	r3, [pc, #260]	; (8001e04 <ESP_messageHandler+0xa54>)
 8001cfe:	791b      	ldrb	r3, [r3, #4]
 8001d00:	2b31      	cmp	r3, #49	; 0x31
 8001d02:	d104      	bne.n	8001d0e <ESP_messageHandler+0x95e>
 8001d04:	2201      	movs	r2, #1
 8001d06:	2101      	movs	r1, #1
 8001d08:	4837      	ldr	r0, [pc, #220]	; (8001de8 <ESP_messageHandler+0xa38>)
 8001d0a:	f004 fd8b 	bl	8006824 <HAL_GPIO_WritePin>
	}


	// KITCHEN
	if (fragment[0] == 'c'){
 8001d0e:	4b37      	ldr	r3, [pc, #220]	; (8001dec <ESP_messageHandler+0xa3c>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b63      	cmp	r3, #99	; 0x63
 8001d14:	d145      	bne.n	8001da2 <ESP_messageHandler+0x9f2>
		UART_send("COCINA \n", PC_UART);
 8001d16:	4936      	ldr	r1, [pc, #216]	; (8001df0 <ESP_messageHandler+0xa40>)
 8001d18:	483c      	ldr	r0, [pc, #240]	; (8001e0c <ESP_messageHandler+0xa5c>)
 8001d1a:	f000 fdeb 	bl	80028f4 <UART_send>
		vKitchen[0] = textrc[28]; 	// Luz Cocina
 8001d1e:	4b36      	ldr	r3, [pc, #216]	; (8001df8 <ESP_messageHandler+0xa48>)
 8001d20:	7f1a      	ldrb	r2, [r3, #28]
 8001d22:	4b3b      	ldr	r3, [pc, #236]	; (8001e10 <ESP_messageHandler+0xa60>)
 8001d24:	701a      	strb	r2, [r3, #0]
		vKitchen[1] = textrc[31]; 	// Luz Fregadero
 8001d26:	4b34      	ldr	r3, [pc, #208]	; (8001df8 <ESP_messageHandler+0xa48>)
 8001d28:	7fda      	ldrb	r2, [r3, #31]
 8001d2a:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <ESP_messageHandler+0xa60>)
 8001d2c:	705a      	strb	r2, [r3, #1]

		if(vLight[4] == '0' || vKitchen[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET); 		// Luz Cocina
 8001d2e:	4b2c      	ldr	r3, [pc, #176]	; (8001de0 <ESP_messageHandler+0xa30>)
 8001d30:	791b      	ldrb	r3, [r3, #4]
 8001d32:	2b30      	cmp	r3, #48	; 0x30
 8001d34:	d003      	beq.n	8001d3e <ESP_messageHandler+0x98e>
 8001d36:	4b36      	ldr	r3, [pc, #216]	; (8001e10 <ESP_messageHandler+0xa60>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b30      	cmp	r3, #48	; 0x30
 8001d3c:	d106      	bne.n	8001d4c <ESP_messageHandler+0x99c>
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d44:	4833      	ldr	r0, [pc, #204]	; (8001e14 <ESP_messageHandler+0xa64>)
 8001d46:	f004 fd6d 	bl	8006824 <HAL_GPIO_WritePin>
 8001d4a:	e00d      	b.n	8001d68 <ESP_messageHandler+0x9b8>
		else if(vLight[4] == '1' || vKitchen[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 8001d4c:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <ESP_messageHandler+0xa30>)
 8001d4e:	791b      	ldrb	r3, [r3, #4]
 8001d50:	2b31      	cmp	r3, #49	; 0x31
 8001d52:	d003      	beq.n	8001d5c <ESP_messageHandler+0x9ac>
 8001d54:	4b2e      	ldr	r3, [pc, #184]	; (8001e10 <ESP_messageHandler+0xa60>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b31      	cmp	r3, #49	; 0x31
 8001d5a:	d105      	bne.n	8001d68 <ESP_messageHandler+0x9b8>
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d62:	482c      	ldr	r0, [pc, #176]	; (8001e14 <ESP_messageHandler+0xa64>)
 8001d64:	f004 fd5e 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[5] == '0' || vKitchen[1] == '0') HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET); 		// Luz Fregadero
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <ESP_messageHandler+0xa30>)
 8001d6a:	795b      	ldrb	r3, [r3, #5]
 8001d6c:	2b30      	cmp	r3, #48	; 0x30
 8001d6e:	d003      	beq.n	8001d78 <ESP_messageHandler+0x9c8>
 8001d70:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <ESP_messageHandler+0xa60>)
 8001d72:	785b      	ldrb	r3, [r3, #1]
 8001d74:	2b30      	cmp	r3, #48	; 0x30
 8001d76:	d106      	bne.n	8001d86 <ESP_messageHandler+0x9d6>
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d7e:	4826      	ldr	r0, [pc, #152]	; (8001e18 <ESP_messageHandler+0xa68>)
 8001d80:	f004 fd50 	bl	8006824 <HAL_GPIO_WritePin>
 8001d84:	e00d      	b.n	8001da2 <ESP_messageHandler+0x9f2>
		else if(vLight[5] == '1' || vKitchen[1] == '1')HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 8001d86:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <ESP_messageHandler+0xa30>)
 8001d88:	795b      	ldrb	r3, [r3, #5]
 8001d8a:	2b31      	cmp	r3, #49	; 0x31
 8001d8c:	d003      	beq.n	8001d96 <ESP_messageHandler+0x9e6>
 8001d8e:	4b20      	ldr	r3, [pc, #128]	; (8001e10 <ESP_messageHandler+0xa60>)
 8001d90:	785b      	ldrb	r3, [r3, #1]
 8001d92:	2b31      	cmp	r3, #49	; 0x31
 8001d94:	d105      	bne.n	8001da2 <ESP_messageHandler+0x9f2>
 8001d96:	2201      	movs	r2, #1
 8001d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d9c:	481e      	ldr	r0, [pc, #120]	; (8001e18 <ESP_messageHandler+0xa68>)
 8001d9e:	f004 fd41 	bl	8006824 <HAL_GPIO_WritePin>
	}

	// BATHROOM
	if (fragment[0] == 'b'){
 8001da2:	4b12      	ldr	r3, [pc, #72]	; (8001dec <ESP_messageHandler+0xa3c>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b62      	cmp	r3, #98	; 0x62
 8001da8:	d164      	bne.n	8001e74 <ESP_messageHandler+0xac4>
		UART_send("BAÑO \n", PC_UART);
 8001daa:	4911      	ldr	r1, [pc, #68]	; (8001df0 <ESP_messageHandler+0xa40>)
 8001dac:	481b      	ldr	r0, [pc, #108]	; (8001e1c <ESP_messageHandler+0xa6c>)
 8001dae:	f000 fda1 	bl	80028f4 <UART_send>
		vBath[0] = textrc[28]; 	// Luz Baño
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <ESP_messageHandler+0xa48>)
 8001db4:	7f1a      	ldrb	r2, [r3, #28]
 8001db6:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <ESP_messageHandler+0xa70>)
 8001db8:	701a      	strb	r2, [r3, #0]
		vBath[1] = textrc[31]; 	// Luz Espejo
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <ESP_messageHandler+0xa48>)
 8001dbc:	7fda      	ldrb	r2, [r3, #31]
 8001dbe:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <ESP_messageHandler+0xa70>)
 8001dc0:	705a      	strb	r2, [r3, #1]

		if(vLight[6] == '0' || vBath[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, RESET); 		// Luz Baño
 8001dc2:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <ESP_messageHandler+0xa30>)
 8001dc4:	799b      	ldrb	r3, [r3, #6]
 8001dc6:	2b30      	cmp	r3, #48	; 0x30
 8001dc8:	d003      	beq.n	8001dd2 <ESP_messageHandler+0xa22>
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <ESP_messageHandler+0xa70>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b30      	cmp	r3, #48	; 0x30
 8001dd0:	d128      	bne.n	8001e24 <ESP_messageHandler+0xa74>
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2140      	movs	r1, #64	; 0x40
 8001dd6:	4804      	ldr	r0, [pc, #16]	; (8001de8 <ESP_messageHandler+0xa38>)
 8001dd8:	f004 fd24 	bl	8006824 <HAL_GPIO_WritePin>
 8001ddc:	e02f      	b.n	8001e3e <ESP_messageHandler+0xa8e>
 8001dde:	bf00      	nop
 8001de0:	20000928 	.word	0x20000928
 8001de4:	2000095c 	.word	0x2000095c
 8001de8:	40020c00 	.word	0x40020c00
 8001dec:	200009e4 	.word	0x200009e4
 8001df0:	20000fdc 	.word	0x20000fdc
 8001df4:	0800aa28 	.word	0x0800aa28
 8001df8:	200009ec 	.word	0x200009ec
 8001dfc:	0800aa3c 	.word	0x0800aa3c
 8001e00:	0800aa54 	.word	0x0800aa54
 8001e04:	2000091c 	.word	0x2000091c
 8001e08:	40020400 	.word	0x40020400
 8001e0c:	0800aa5c 	.word	0x0800aa5c
 8001e10:	20000964 	.word	0x20000964
 8001e14:	40020800 	.word	0x40020800
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	0800aa68 	.word	0x0800aa68
 8001e20:	20000948 	.word	0x20000948
		else if(vLight[6] == '1' || vBath[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, SET);
 8001e24:	4b84      	ldr	r3, [pc, #528]	; (8002038 <ESP_messageHandler+0xc88>)
 8001e26:	799b      	ldrb	r3, [r3, #6]
 8001e28:	2b31      	cmp	r3, #49	; 0x31
 8001e2a:	d003      	beq.n	8001e34 <ESP_messageHandler+0xa84>
 8001e2c:	4b83      	ldr	r3, [pc, #524]	; (800203c <ESP_messageHandler+0xc8c>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b31      	cmp	r3, #49	; 0x31
 8001e32:	d104      	bne.n	8001e3e <ESP_messageHandler+0xa8e>
 8001e34:	2201      	movs	r2, #1
 8001e36:	2140      	movs	r1, #64	; 0x40
 8001e38:	4881      	ldr	r0, [pc, #516]	; (8002040 <ESP_messageHandler+0xc90>)
 8001e3a:	f004 fcf3 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[7] == '0' || vBath[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET); 		// Luz Espejo
 8001e3e:	4b7e      	ldr	r3, [pc, #504]	; (8002038 <ESP_messageHandler+0xc88>)
 8001e40:	79db      	ldrb	r3, [r3, #7]
 8001e42:	2b30      	cmp	r3, #48	; 0x30
 8001e44:	d003      	beq.n	8001e4e <ESP_messageHandler+0xa9e>
 8001e46:	4b7d      	ldr	r3, [pc, #500]	; (800203c <ESP_messageHandler+0xc8c>)
 8001e48:	785b      	ldrb	r3, [r3, #1]
 8001e4a:	2b30      	cmp	r3, #48	; 0x30
 8001e4c:	d105      	bne.n	8001e5a <ESP_messageHandler+0xaaa>
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2108      	movs	r1, #8
 8001e52:	487c      	ldr	r0, [pc, #496]	; (8002044 <ESP_messageHandler+0xc94>)
 8001e54:	f004 fce6 	bl	8006824 <HAL_GPIO_WritePin>
 8001e58:	e00c      	b.n	8001e74 <ESP_messageHandler+0xac4>
		else if(vLight[7] == '1' || vBath[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8001e5a:	4b77      	ldr	r3, [pc, #476]	; (8002038 <ESP_messageHandler+0xc88>)
 8001e5c:	79db      	ldrb	r3, [r3, #7]
 8001e5e:	2b31      	cmp	r3, #49	; 0x31
 8001e60:	d003      	beq.n	8001e6a <ESP_messageHandler+0xaba>
 8001e62:	4b76      	ldr	r3, [pc, #472]	; (800203c <ESP_messageHandler+0xc8c>)
 8001e64:	785b      	ldrb	r3, [r3, #1]
 8001e66:	2b31      	cmp	r3, #49	; 0x31
 8001e68:	d104      	bne.n	8001e74 <ESP_messageHandler+0xac4>
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	2108      	movs	r1, #8
 8001e6e:	4875      	ldr	r0, [pc, #468]	; (8002044 <ESP_messageHandler+0xc94>)
 8001e70:	f004 fcd8 	bl	8006824 <HAL_GPIO_WritePin>
	}

	// BEDROOM
	if (fragment[0] == 'r'){
 8001e74:	4b74      	ldr	r3, [pc, #464]	; (8002048 <ESP_messageHandler+0xc98>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b72      	cmp	r3, #114	; 0x72
 8001e7a:	d161      	bne.n	8001f40 <ESP_messageHandler+0xb90>
		UART_send("LUCES (DORMITORIO) \n", PC_UART);
 8001e7c:	4973      	ldr	r1, [pc, #460]	; (800204c <ESP_messageHandler+0xc9c>)
 8001e7e:	4874      	ldr	r0, [pc, #464]	; (8002050 <ESP_messageHandler+0xca0>)
 8001e80:	f000 fd38 	bl	80028f4 <UART_send>
		vBedroom[0] = textrc[28]; 	// Luz Dormitorio
 8001e84:	4b73      	ldr	r3, [pc, #460]	; (8002054 <ESP_messageHandler+0xca4>)
 8001e86:	7f1a      	ldrb	r2, [r3, #28]
 8001e88:	4b73      	ldr	r3, [pc, #460]	; (8002058 <ESP_messageHandler+0xca8>)
 8001e8a:	701a      	strb	r2, [r3, #0]
		vBedroom[1] = textrc[31]; 	// Luz Mesita Izq
 8001e8c:	4b71      	ldr	r3, [pc, #452]	; (8002054 <ESP_messageHandler+0xca4>)
 8001e8e:	7fda      	ldrb	r2, [r3, #31]
 8001e90:	4b71      	ldr	r3, [pc, #452]	; (8002058 <ESP_messageHandler+0xca8>)
 8001e92:	705a      	strb	r2, [r3, #1]
		vBedroom[2] = textrc[34]; 	// Luz Mesita Dch
 8001e94:	4b6f      	ldr	r3, [pc, #444]	; (8002054 <ESP_messageHandler+0xca4>)
 8001e96:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001e9a:	4b6f      	ldr	r3, [pc, #444]	; (8002058 <ESP_messageHandler+0xca8>)
 8001e9c:	709a      	strb	r2, [r3, #2]
		//vBedroom[3] = textrc[37]; 	// V. Dormitorio

		if(vLight[8] == '0' || vBedroom[0] == '0') HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, RESET); 		// Luz Dormitorio
 8001e9e:	4b66      	ldr	r3, [pc, #408]	; (8002038 <ESP_messageHandler+0xc88>)
 8001ea0:	7a1b      	ldrb	r3, [r3, #8]
 8001ea2:	2b30      	cmp	r3, #48	; 0x30
 8001ea4:	d003      	beq.n	8001eae <ESP_messageHandler+0xafe>
 8001ea6:	4b6c      	ldr	r3, [pc, #432]	; (8002058 <ESP_messageHandler+0xca8>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b30      	cmp	r3, #48	; 0x30
 8001eac:	d105      	bne.n	8001eba <ESP_messageHandler+0xb0a>
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2180      	movs	r1, #128	; 0x80
 8001eb2:	4863      	ldr	r0, [pc, #396]	; (8002040 <ESP_messageHandler+0xc90>)
 8001eb4:	f004 fcb6 	bl	8006824 <HAL_GPIO_WritePin>
 8001eb8:	e00c      	b.n	8001ed4 <ESP_messageHandler+0xb24>
		else if(vLight[8] == '1' || vBedroom[0] == '1')HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET);
 8001eba:	4b5f      	ldr	r3, [pc, #380]	; (8002038 <ESP_messageHandler+0xc88>)
 8001ebc:	7a1b      	ldrb	r3, [r3, #8]
 8001ebe:	2b31      	cmp	r3, #49	; 0x31
 8001ec0:	d003      	beq.n	8001eca <ESP_messageHandler+0xb1a>
 8001ec2:	4b65      	ldr	r3, [pc, #404]	; (8002058 <ESP_messageHandler+0xca8>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b31      	cmp	r3, #49	; 0x31
 8001ec8:	d104      	bne.n	8001ed4 <ESP_messageHandler+0xb24>
 8001eca:	2201      	movs	r2, #1
 8001ecc:	2180      	movs	r1, #128	; 0x80
 8001ece:	485c      	ldr	r0, [pc, #368]	; (8002040 <ESP_messageHandler+0xc90>)
 8001ed0:	f004 fca8 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[9] == '0' || vBedroom[1] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET); 		// Luz Mesita Izq
 8001ed4:	4b58      	ldr	r3, [pc, #352]	; (8002038 <ESP_messageHandler+0xc88>)
 8001ed6:	7a5b      	ldrb	r3, [r3, #9]
 8001ed8:	2b30      	cmp	r3, #48	; 0x30
 8001eda:	d003      	beq.n	8001ee4 <ESP_messageHandler+0xb34>
 8001edc:	4b5e      	ldr	r3, [pc, #376]	; (8002058 <ESP_messageHandler+0xca8>)
 8001ede:	785b      	ldrb	r3, [r3, #1]
 8001ee0:	2b30      	cmp	r3, #48	; 0x30
 8001ee2:	d105      	bne.n	8001ef0 <ESP_messageHandler+0xb40>
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2110      	movs	r1, #16
 8001ee8:	4856      	ldr	r0, [pc, #344]	; (8002044 <ESP_messageHandler+0xc94>)
 8001eea:	f004 fc9b 	bl	8006824 <HAL_GPIO_WritePin>
 8001eee:	e00c      	b.n	8001f0a <ESP_messageHandler+0xb5a>
		else if(vLight[9] == '1' || vBedroom[1] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001ef0:	4b51      	ldr	r3, [pc, #324]	; (8002038 <ESP_messageHandler+0xc88>)
 8001ef2:	7a5b      	ldrb	r3, [r3, #9]
 8001ef4:	2b31      	cmp	r3, #49	; 0x31
 8001ef6:	d003      	beq.n	8001f00 <ESP_messageHandler+0xb50>
 8001ef8:	4b57      	ldr	r3, [pc, #348]	; (8002058 <ESP_messageHandler+0xca8>)
 8001efa:	785b      	ldrb	r3, [r3, #1]
 8001efc:	2b31      	cmp	r3, #49	; 0x31
 8001efe:	d104      	bne.n	8001f0a <ESP_messageHandler+0xb5a>
 8001f00:	2201      	movs	r2, #1
 8001f02:	2110      	movs	r1, #16
 8001f04:	484f      	ldr	r0, [pc, #316]	; (8002044 <ESP_messageHandler+0xc94>)
 8001f06:	f004 fc8d 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[10] == '0' || vBedroom[2] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET); 		// Luz Mesita Dch
 8001f0a:	4b4b      	ldr	r3, [pc, #300]	; (8002038 <ESP_messageHandler+0xc88>)
 8001f0c:	7a9b      	ldrb	r3, [r3, #10]
 8001f0e:	2b30      	cmp	r3, #48	; 0x30
 8001f10:	d003      	beq.n	8001f1a <ESP_messageHandler+0xb6a>
 8001f12:	4b51      	ldr	r3, [pc, #324]	; (8002058 <ESP_messageHandler+0xca8>)
 8001f14:	789b      	ldrb	r3, [r3, #2]
 8001f16:	2b30      	cmp	r3, #48	; 0x30
 8001f18:	d105      	bne.n	8001f26 <ESP_messageHandler+0xb76>
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2140      	movs	r1, #64	; 0x40
 8001f1e:	4849      	ldr	r0, [pc, #292]	; (8002044 <ESP_messageHandler+0xc94>)
 8001f20:	f004 fc80 	bl	8006824 <HAL_GPIO_WritePin>
 8001f24:	e00c      	b.n	8001f40 <ESP_messageHandler+0xb90>
		else if(vLight[10] == '1' || vBedroom[2] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8001f26:	4b44      	ldr	r3, [pc, #272]	; (8002038 <ESP_messageHandler+0xc88>)
 8001f28:	7a9b      	ldrb	r3, [r3, #10]
 8001f2a:	2b31      	cmp	r3, #49	; 0x31
 8001f2c:	d003      	beq.n	8001f36 <ESP_messageHandler+0xb86>
 8001f2e:	4b4a      	ldr	r3, [pc, #296]	; (8002058 <ESP_messageHandler+0xca8>)
 8001f30:	789b      	ldrb	r3, [r3, #2]
 8001f32:	2b31      	cmp	r3, #49	; 0x31
 8001f34:	d104      	bne.n	8001f40 <ESP_messageHandler+0xb90>
 8001f36:	2201      	movs	r2, #1
 8001f38:	2140      	movs	r1, #64	; 0x40
 8001f3a:	4842      	ldr	r0, [pc, #264]	; (8002044 <ESP_messageHandler+0xc94>)
 8001f3c:	f004 fc72 	bl	8006824 <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'D'){
 8001f40:	4b41      	ldr	r3, [pc, #260]	; (8002048 <ESP_messageHandler+0xc98>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b44      	cmp	r3, #68	; 0x44
 8001f46:	d108      	bne.n	8001f5a <ESP_messageHandler+0xbaa>
		UART_send("V. DORMITORIO (DORMITORIO) \n", PC_UART);
 8001f48:	4940      	ldr	r1, [pc, #256]	; (800204c <ESP_messageHandler+0xc9c>)
 8001f4a:	4844      	ldr	r0, [pc, #272]	; (800205c <ESP_messageHandler+0xcac>)
 8001f4c:	f000 fcd2 	bl	80028f4 <UART_send>
		//vBedroom[0] = textrc[28]; 	// Luz Dormitorio
		//vBedroom[1] = textrc[31]; 	// Luz Mesita Izq
		//vBedroom[2] = textrc[34]; 	// Luz Mesita Dch
		vBedroom[3] = textrc[37]; 	// V. Dormitorio
 8001f50:	4b40      	ldr	r3, [pc, #256]	; (8002054 <ESP_messageHandler+0xca4>)
 8001f52:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001f56:	4b40      	ldr	r3, [pc, #256]	; (8002058 <ESP_messageHandler+0xca8>)
 8001f58:	70da      	strb	r2, [r3, #3]
	}

	// OFFICE
	if (fragment[0] == 'f'){
 8001f5a:	4b3b      	ldr	r3, [pc, #236]	; (8002048 <ESP_messageHandler+0xc98>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b66      	cmp	r3, #102	; 0x66
 8001f60:	f040 80bf 	bne.w	80020e2 <ESP_messageHandler+0xd32>
		UART_send("LUCES (OFICINA) \n", PC_UART);
 8001f64:	4939      	ldr	r1, [pc, #228]	; (800204c <ESP_messageHandler+0xc9c>)
 8001f66:	483e      	ldr	r0, [pc, #248]	; (8002060 <ESP_messageHandler+0xcb0>)
 8001f68:	f000 fcc4 	bl	80028f4 <UART_send>
		vOffice[0] = textrc[28]; 	// Luz Oficina
 8001f6c:	4b39      	ldr	r3, [pc, #228]	; (8002054 <ESP_messageHandler+0xca4>)
 8001f6e:	7f1a      	ldrb	r2, [r3, #28]
 8001f70:	4b3c      	ldr	r3, [pc, #240]	; (8002064 <ESP_messageHandler+0xcb4>)
 8001f72:	701a      	strb	r2, [r3, #0]
		vOffice[1] = textrc[31]; 	// Luz Gaming
 8001f74:	4b37      	ldr	r3, [pc, #220]	; (8002054 <ESP_messageHandler+0xca4>)
 8001f76:	7fda      	ldrb	r2, [r3, #31]
 8001f78:	4b3a      	ldr	r3, [pc, #232]	; (8002064 <ESP_messageHandler+0xcb4>)
 8001f7a:	705a      	strb	r2, [r3, #1]
		vOffice[2] = textrc[34]; 	// Luz Rx100
 8001f7c:	4b35      	ldr	r3, [pc, #212]	; (8002054 <ESP_messageHandler+0xca4>)
 8001f7e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001f82:	4b38      	ldr	r3, [pc, #224]	; (8002064 <ESP_messageHandler+0xcb4>)
 8001f84:	709a      	strb	r2, [r3, #2]
		vOffice[3] = textrc[35]; 	// Luz Rx10
 8001f86:	4b33      	ldr	r3, [pc, #204]	; (8002054 <ESP_messageHandler+0xca4>)
 8001f88:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8001f8c:	4b35      	ldr	r3, [pc, #212]	; (8002064 <ESP_messageHandler+0xcb4>)
 8001f8e:	70da      	strb	r2, [r3, #3]
		vOffice[4] = textrc[36];	// Luz Rx1
 8001f90:	4b30      	ldr	r3, [pc, #192]	; (8002054 <ESP_messageHandler+0xca4>)
 8001f92:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8001f96:	4b33      	ldr	r3, [pc, #204]	; (8002064 <ESP_messageHandler+0xcb4>)
 8001f98:	711a      	strb	r2, [r3, #4]
		vOffice[5] = textrc[39]; 	// Luz Gx100
 8001f9a:	4b2e      	ldr	r3, [pc, #184]	; (8002054 <ESP_messageHandler+0xca4>)
 8001f9c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8001fa0:	4b30      	ldr	r3, [pc, #192]	; (8002064 <ESP_messageHandler+0xcb4>)
 8001fa2:	715a      	strb	r2, [r3, #5]
		vOffice[6] = textrc[40]; 	// Luz Gx10
 8001fa4:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <ESP_messageHandler+0xca4>)
 8001fa6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001faa:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <ESP_messageHandler+0xcb4>)
 8001fac:	719a      	strb	r2, [r3, #6]
		vOffice[7] = textrc[41]; 	// Luz Gx1
 8001fae:	4b29      	ldr	r3, [pc, #164]	; (8002054 <ESP_messageHandler+0xca4>)
 8001fb0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001fb4:	4b2b      	ldr	r3, [pc, #172]	; (8002064 <ESP_messageHandler+0xcb4>)
 8001fb6:	71da      	strb	r2, [r3, #7]
		vOffice[8] = textrc[44];	// Luz Bx100
 8001fb8:	4b26      	ldr	r3, [pc, #152]	; (8002054 <ESP_messageHandler+0xca4>)
 8001fba:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001fbe:	4b29      	ldr	r3, [pc, #164]	; (8002064 <ESP_messageHandler+0xcb4>)
 8001fc0:	721a      	strb	r2, [r3, #8]
		vOffice[9] = textrc[45]; 	// Luz Bx10
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <ESP_messageHandler+0xca4>)
 8001fc4:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8001fc8:	4b26      	ldr	r3, [pc, #152]	; (8002064 <ESP_messageHandler+0xcb4>)
 8001fca:	725a      	strb	r2, [r3, #9]
		vOffice[10] = textrc[46];	// Luz Bx1
 8001fcc:	4b21      	ldr	r3, [pc, #132]	; (8002054 <ESP_messageHandler+0xca4>)
 8001fce:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8001fd2:	4b24      	ldr	r3, [pc, #144]	; (8002064 <ESP_messageHandler+0xcb4>)
 8001fd4:	729a      	strb	r2, [r3, #10]
		//vOffice[11] = textrc[49]; 	// V. Oficina

		if(vLight[11] == '0' || vOffice[0] == '0') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET); 		// Luz Oficina
 8001fd6:	4b18      	ldr	r3, [pc, #96]	; (8002038 <ESP_messageHandler+0xc88>)
 8001fd8:	7adb      	ldrb	r3, [r3, #11]
 8001fda:	2b30      	cmp	r3, #48	; 0x30
 8001fdc:	d003      	beq.n	8001fe6 <ESP_messageHandler+0xc36>
 8001fde:	4b21      	ldr	r3, [pc, #132]	; (8002064 <ESP_messageHandler+0xcb4>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b30      	cmp	r3, #48	; 0x30
 8001fe4:	d105      	bne.n	8001ff2 <ESP_messageHandler+0xc42>
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2120      	movs	r1, #32
 8001fea:	4816      	ldr	r0, [pc, #88]	; (8002044 <ESP_messageHandler+0xc94>)
 8001fec:	f004 fc1a 	bl	8006824 <HAL_GPIO_WritePin>
 8001ff0:	e00c      	b.n	800200c <ESP_messageHandler+0xc5c>
		else if(vLight[11] == '1' || vOffice[0] == '1')HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <ESP_messageHandler+0xc88>)
 8001ff4:	7adb      	ldrb	r3, [r3, #11]
 8001ff6:	2b31      	cmp	r3, #49	; 0x31
 8001ff8:	d003      	beq.n	8002002 <ESP_messageHandler+0xc52>
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <ESP_messageHandler+0xcb4>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b31      	cmp	r3, #49	; 0x31
 8002000:	d104      	bne.n	800200c <ESP_messageHandler+0xc5c>
 8002002:	2201      	movs	r2, #1
 8002004:	2120      	movs	r1, #32
 8002006:	480f      	ldr	r0, [pc, #60]	; (8002044 <ESP_messageHandler+0xc94>)
 8002008:	f004 fc0c 	bl	8006824 <HAL_GPIO_WritePin>

		if(vLight[12] == '0' || vOffice[1] == '0'){
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <ESP_messageHandler+0xc88>)
 800200e:	7b1b      	ldrb	r3, [r3, #12]
 8002010:	2b30      	cmp	r3, #48	; 0x30
 8002012:	d003      	beq.n	800201c <ESP_messageHandler+0xc6c>
 8002014:	4b13      	ldr	r3, [pc, #76]	; (8002064 <ESP_messageHandler+0xcb4>)
 8002016:	785b      	ldrb	r3, [r3, #1]
 8002018:	2b30      	cmp	r3, #48	; 0x30
 800201a:	d127      	bne.n	800206c <ESP_messageHandler+0xcbc>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <ESP_messageHandler+0xcb8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2200      	movs	r2, #0
 8002022:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002024:	4b10      	ldr	r3, [pc, #64]	; (8002068 <ESP_messageHandler+0xcb8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2200      	movs	r2, #0
 800202a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800202c:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <ESP_messageHandler+0xcb8>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2200      	movs	r2, #0
 8002032:	63da      	str	r2, [r3, #60]	; 0x3c
 8002034:	e055      	b.n	80020e2 <ESP_messageHandler+0xd32>
 8002036:	bf00      	nop
 8002038:	20000928 	.word	0x20000928
 800203c:	20000948 	.word	0x20000948
 8002040:	40020c00 	.word	0x40020c00
 8002044:	40020400 	.word	0x40020400
 8002048:	200009e4 	.word	0x200009e4
 800204c:	20000fdc 	.word	0x20000fdc
 8002050:	0800aa70 	.word	0x0800aa70
 8002054:	200009ec 	.word	0x200009ec
 8002058:	20000974 	.word	0x20000974
 800205c:	0800aa88 	.word	0x0800aa88
 8002060:	0800aaa8 	.word	0x0800aaa8
 8002064:	20000950 	.word	0x20000950
 8002068:	20000f4c 	.word	0x20000f4c
		}
		else if(vLight[12] == '1' || vOffice[1] == '1'){ 												// Luz Gaming
 800206c:	4b71      	ldr	r3, [pc, #452]	; (8002234 <ESP_messageHandler+0xe84>)
 800206e:	7b1b      	ldrb	r3, [r3, #12]
 8002070:	2b31      	cmp	r3, #49	; 0x31
 8002072:	d003      	beq.n	800207c <ESP_messageHandler+0xccc>
 8002074:	4b70      	ldr	r3, [pc, #448]	; (8002238 <ESP_messageHandler+0xe88>)
 8002076:	785b      	ldrb	r3, [r3, #1]
 8002078:	2b31      	cmp	r3, #49	; 0x31
 800207a:	d132      	bne.n	80020e2 <ESP_messageHandler+0xd32>

			//uint8_t r, g, b;

			r = rgb_value(vOffice[2],vOffice[3],vOffice[4]);
 800207c:	4b6e      	ldr	r3, [pc, #440]	; (8002238 <ESP_messageHandler+0xe88>)
 800207e:	789b      	ldrb	r3, [r3, #2]
 8002080:	4a6d      	ldr	r2, [pc, #436]	; (8002238 <ESP_messageHandler+0xe88>)
 8002082:	78d1      	ldrb	r1, [r2, #3]
 8002084:	4a6c      	ldr	r2, [pc, #432]	; (8002238 <ESP_messageHandler+0xe88>)
 8002086:	7912      	ldrb	r2, [r2, #4]
 8002088:	4618      	mov	r0, r3
 800208a:	f000 f955 	bl	8002338 <rgb_value>
 800208e:	4603      	mov	r3, r0
 8002090:	4a6a      	ldr	r2, [pc, #424]	; (800223c <ESP_messageHandler+0xe8c>)
 8002092:	6013      	str	r3, [r2, #0]
			g = rgb_value(vOffice[5],vOffice[6],vOffice[7]);
 8002094:	4b68      	ldr	r3, [pc, #416]	; (8002238 <ESP_messageHandler+0xe88>)
 8002096:	795b      	ldrb	r3, [r3, #5]
 8002098:	4a67      	ldr	r2, [pc, #412]	; (8002238 <ESP_messageHandler+0xe88>)
 800209a:	7991      	ldrb	r1, [r2, #6]
 800209c:	4a66      	ldr	r2, [pc, #408]	; (8002238 <ESP_messageHandler+0xe88>)
 800209e:	79d2      	ldrb	r2, [r2, #7]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 f949 	bl	8002338 <rgb_value>
 80020a6:	4603      	mov	r3, r0
 80020a8:	4a65      	ldr	r2, [pc, #404]	; (8002240 <ESP_messageHandler+0xe90>)
 80020aa:	6013      	str	r3, [r2, #0]
			b = rgb_value(vOffice[8],vOffice[9],vOffice[10]);
 80020ac:	4b62      	ldr	r3, [pc, #392]	; (8002238 <ESP_messageHandler+0xe88>)
 80020ae:	7a1b      	ldrb	r3, [r3, #8]
 80020b0:	4a61      	ldr	r2, [pc, #388]	; (8002238 <ESP_messageHandler+0xe88>)
 80020b2:	7a51      	ldrb	r1, [r2, #9]
 80020b4:	4a60      	ldr	r2, [pc, #384]	; (8002238 <ESP_messageHandler+0xe88>)
 80020b6:	7a92      	ldrb	r2, [r2, #10]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 f93d 	bl	8002338 <rgb_value>
 80020be:	4603      	mov	r3, r0
 80020c0:	4a60      	ldr	r2, [pc, #384]	; (8002244 <ESP_messageHandler+0xe94>)
 80020c2:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, g); // PA8
 80020c4:	4b5e      	ldr	r3, [pc, #376]	; (8002240 <ESP_messageHandler+0xe90>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b5f      	ldr	r3, [pc, #380]	; (8002248 <ESP_messageHandler+0xe98>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, r); // PA9
 80020ce:	4b5b      	ldr	r3, [pc, #364]	; (800223c <ESP_messageHandler+0xe8c>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4b5d      	ldr	r3, [pc, #372]	; (8002248 <ESP_messageHandler+0xe98>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b); // PA10
 80020d8:	4b5a      	ldr	r3, [pc, #360]	; (8002244 <ESP_messageHandler+0xe94>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b5a      	ldr	r3, [pc, #360]	; (8002248 <ESP_messageHandler+0xe98>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}

	if (fragment[0] == 'F'){
 80020e2:	4b5a      	ldr	r3, [pc, #360]	; (800224c <ESP_messageHandler+0xe9c>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b46      	cmp	r3, #70	; 0x46
 80020e8:	d108      	bne.n	80020fc <ESP_messageHandler+0xd4c>
		UART_send("V. OFICINA (OFICINA) \n", PC_UART);
 80020ea:	4959      	ldr	r1, [pc, #356]	; (8002250 <ESP_messageHandler+0xea0>)
 80020ec:	4859      	ldr	r0, [pc, #356]	; (8002254 <ESP_messageHandler+0xea4>)
 80020ee:	f000 fc01 	bl	80028f4 <UART_send>
		//vOffice[6] = textrc[40]; 	// Luz Gx10
		//vOffice[7] = textrc[41]; 	// Luz Gx1
		//vOffice[8] = textrc[44]; 	// Luz Bx100
		//vOffice[9] = textrc[45]; 	// Luz Bx10
		//vOffice[10] = textrc[46]; 	// Luz Bx1
		vOffice[11] = textrc[49]; 	// V. Oficina
 80020f2:	4b59      	ldr	r3, [pc, #356]	; (8002258 <ESP_messageHandler+0xea8>)
 80020f4:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80020f8:	4b4f      	ldr	r3, [pc, #316]	; (8002238 <ESP_messageHandler+0xe88>)
 80020fa:	72da      	strb	r2, [r3, #11]
	}

	// GARAGE
	if (fragment[0] == 'j'){
 80020fc:	4b53      	ldr	r3, [pc, #332]	; (800224c <ESP_messageHandler+0xe9c>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b6a      	cmp	r3, #106	; 0x6a
 8002102:	d124      	bne.n	800214e <ESP_messageHandler+0xd9e>
		UART_send("LUZ GARAJE (GARAJE) \n", PC_UART);
 8002104:	4952      	ldr	r1, [pc, #328]	; (8002250 <ESP_messageHandler+0xea0>)
 8002106:	4855      	ldr	r0, [pc, #340]	; (800225c <ESP_messageHandler+0xeac>)
 8002108:	f000 fbf4 	bl	80028f4 <UART_send>
		vGarage[0] = textrc[28]; 	// Luz Garaje
 800210c:	4b52      	ldr	r3, [pc, #328]	; (8002258 <ESP_messageHandler+0xea8>)
 800210e:	7f1a      	ldrb	r2, [r3, #28]
 8002110:	4b53      	ldr	r3, [pc, #332]	; (8002260 <ESP_messageHandler+0xeb0>)
 8002112:	701a      	strb	r2, [r3, #0]
		//vGarage[1] = textrc[31]; 	// P. Garaje

		if(vLight[22] == '0' || vGarage[0] == '0') HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET);		// Luz Garaje
 8002114:	4b47      	ldr	r3, [pc, #284]	; (8002234 <ESP_messageHandler+0xe84>)
 8002116:	7d9b      	ldrb	r3, [r3, #22]
 8002118:	2b30      	cmp	r3, #48	; 0x30
 800211a:	d003      	beq.n	8002124 <ESP_messageHandler+0xd74>
 800211c:	4b50      	ldr	r3, [pc, #320]	; (8002260 <ESP_messageHandler+0xeb0>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b30      	cmp	r3, #48	; 0x30
 8002122:	d106      	bne.n	8002132 <ESP_messageHandler+0xd82>
 8002124:	2200      	movs	r2, #0
 8002126:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800212a:	484e      	ldr	r0, [pc, #312]	; (8002264 <ESP_messageHandler+0xeb4>)
 800212c:	f004 fb7a 	bl	8006824 <HAL_GPIO_WritePin>
 8002130:	e00d      	b.n	800214e <ESP_messageHandler+0xd9e>
		else if(vLight[22] == '1' || vGarage[0] == '1')HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 8002132:	4b40      	ldr	r3, [pc, #256]	; (8002234 <ESP_messageHandler+0xe84>)
 8002134:	7d9b      	ldrb	r3, [r3, #22]
 8002136:	2b31      	cmp	r3, #49	; 0x31
 8002138:	d003      	beq.n	8002142 <ESP_messageHandler+0xd92>
 800213a:	4b49      	ldr	r3, [pc, #292]	; (8002260 <ESP_messageHandler+0xeb0>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b31      	cmp	r3, #49	; 0x31
 8002140:	d105      	bne.n	800214e <ESP_messageHandler+0xd9e>
 8002142:	2201      	movs	r2, #1
 8002144:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002148:	4846      	ldr	r0, [pc, #280]	; (8002264 <ESP_messageHandler+0xeb4>)
 800214a:	f004 fb6b 	bl	8006824 <HAL_GPIO_WritePin>
	}

	if (fragment[0] == 'J'){
 800214e:	4b3f      	ldr	r3, [pc, #252]	; (800224c <ESP_messageHandler+0xe9c>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b4a      	cmp	r3, #74	; 0x4a
 8002154:	d107      	bne.n	8002166 <ESP_messageHandler+0xdb6>
		UART_send("P. GARAJE (GARAJE) \n", PC_UART);
 8002156:	493e      	ldr	r1, [pc, #248]	; (8002250 <ESP_messageHandler+0xea0>)
 8002158:	4843      	ldr	r0, [pc, #268]	; (8002268 <ESP_messageHandler+0xeb8>)
 800215a:	f000 fbcb 	bl	80028f4 <UART_send>
		//vGarage[0] = textrc[28]; 	// Luz Garaje
		vGarage[1] = textrc[31]; 	// P. Garaje
 800215e:	4b3e      	ldr	r3, [pc, #248]	; (8002258 <ESP_messageHandler+0xea8>)
 8002160:	7fda      	ldrb	r2, [r3, #31]
 8002162:	4b3f      	ldr	r3, [pc, #252]	; (8002260 <ESP_messageHandler+0xeb0>)
 8002164:	705a      	strb	r2, [r3, #1]
	}

	// GARDEN
	if (fragment[0] == 'h'){
 8002166:	4b39      	ldr	r3, [pc, #228]	; (800224c <ESP_messageHandler+0xe9c>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b68      	cmp	r3, #104	; 0x68
 800216c:	d10b      	bne.n	8002186 <ESP_messageHandler+0xdd6>
		UART_send("RIEGO HUERTO \n", PC_UART);
 800216e:	4938      	ldr	r1, [pc, #224]	; (8002250 <ESP_messageHandler+0xea0>)
 8002170:	483e      	ldr	r0, [pc, #248]	; (800226c <ESP_messageHandler+0xebc>)
 8002172:	f000 fbbf 	bl	80028f4 <UART_send>
		vGarden[0] = textrc[28]; 	// Riego
 8002176:	4b38      	ldr	r3, [pc, #224]	; (8002258 <ESP_messageHandler+0xea8>)
 8002178:	7f1a      	ldrb	r2, [r3, #28]
 800217a:	4b3d      	ldr	r3, [pc, #244]	; (8002270 <ESP_messageHandler+0xec0>)
 800217c:	701a      	strb	r2, [r3, #0]
		vGarden[1] = textrc[31]; 	// Automático
 800217e:	4b36      	ldr	r3, [pc, #216]	; (8002258 <ESP_messageHandler+0xea8>)
 8002180:	7fda      	ldrb	r2, [r3, #31]
 8002182:	4b3b      	ldr	r3, [pc, #236]	; (8002270 <ESP_messageHandler+0xec0>)
 8002184:	705a      	strb	r2, [r3, #1]
			else if(vHuer[0] == '1') HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
		}*/
	}

	// SETTINGS
	if (fragment[0] == 'a'){
 8002186:	4b31      	ldr	r3, [pc, #196]	; (800224c <ESP_messageHandler+0xe9c>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b61      	cmp	r3, #97	; 0x61
 800218c:	d150      	bne.n	8002230 <ESP_messageHandler+0xe80>
		UART_send("AJUSTES \n", PC_UART);
 800218e:	4930      	ldr	r1, [pc, #192]	; (8002250 <ESP_messageHandler+0xea0>)
 8002190:	4838      	ldr	r0, [pc, #224]	; (8002274 <ESP_messageHandler+0xec4>)
 8002192:	f000 fbaf 	bl	80028f4 <UART_send>
		vSettings[0] = textrc[28]; 		// Vent. Enc. x 10
 8002196:	4b30      	ldr	r3, [pc, #192]	; (8002258 <ESP_messageHandler+0xea8>)
 8002198:	7f1a      	ldrb	r2, [r3, #28]
 800219a:	4b37      	ldr	r3, [pc, #220]	; (8002278 <ESP_messageHandler+0xec8>)
 800219c:	701a      	strb	r2, [r3, #0]
		vSettings[1] = textrc[29]; 		// Vent. Enc. x 1
 800219e:	4b2e      	ldr	r3, [pc, #184]	; (8002258 <ESP_messageHandler+0xea8>)
 80021a0:	7f5a      	ldrb	r2, [r3, #29]
 80021a2:	4b35      	ldr	r3, [pc, #212]	; (8002278 <ESP_messageHandler+0xec8>)
 80021a4:	705a      	strb	r2, [r3, #1]
		vSettings[2] = textrc[31]; 		// Vent. Enc. x 0.1
 80021a6:	4b2c      	ldr	r3, [pc, #176]	; (8002258 <ESP_messageHandler+0xea8>)
 80021a8:	7fda      	ldrb	r2, [r3, #31]
 80021aa:	4b33      	ldr	r3, [pc, #204]	; (8002278 <ESP_messageHandler+0xec8>)
 80021ac:	709a      	strb	r2, [r3, #2]
		vSettings[3] = textrc[34]; 		// Vent. Apa. x 10
 80021ae:	4b2a      	ldr	r3, [pc, #168]	; (8002258 <ESP_messageHandler+0xea8>)
 80021b0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80021b4:	4b30      	ldr	r3, [pc, #192]	; (8002278 <ESP_messageHandler+0xec8>)
 80021b6:	70da      	strb	r2, [r3, #3]
		vSettings[4] = textrc[35]; 		// Vent. Apa. x 1
 80021b8:	4b27      	ldr	r3, [pc, #156]	; (8002258 <ESP_messageHandler+0xea8>)
 80021ba:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80021be:	4b2e      	ldr	r3, [pc, #184]	; (8002278 <ESP_messageHandler+0xec8>)
 80021c0:	711a      	strb	r2, [r3, #4]
		vSettings[5] = textrc[37]; 		// Vent. Apa. x 0.1
 80021c2:	4b25      	ldr	r3, [pc, #148]	; (8002258 <ESP_messageHandler+0xea8>)
 80021c4:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80021c8:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <ESP_messageHandler+0xec8>)
 80021ca:	715a      	strb	r2, [r3, #5]
		vSettings[6] = textrc[40]; 		// Calef. Enc. x 10
 80021cc:	4b22      	ldr	r3, [pc, #136]	; (8002258 <ESP_messageHandler+0xea8>)
 80021ce:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80021d2:	4b29      	ldr	r3, [pc, #164]	; (8002278 <ESP_messageHandler+0xec8>)
 80021d4:	719a      	strb	r2, [r3, #6]
		vSettings[7] = textrc[41]; 		// Calef. Enc. x 1
 80021d6:	4b20      	ldr	r3, [pc, #128]	; (8002258 <ESP_messageHandler+0xea8>)
 80021d8:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80021dc:	4b26      	ldr	r3, [pc, #152]	; (8002278 <ESP_messageHandler+0xec8>)
 80021de:	71da      	strb	r2, [r3, #7]
		vSettings[8] = textrc[43]; 		// Calef. Enc. x 0.1
 80021e0:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <ESP_messageHandler+0xea8>)
 80021e2:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80021e6:	4b24      	ldr	r3, [pc, #144]	; (8002278 <ESP_messageHandler+0xec8>)
 80021e8:	721a      	strb	r2, [r3, #8]
		vSettings[9] = textrc[46]; 		// Calef. Apa. x 10
 80021ea:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <ESP_messageHandler+0xea8>)
 80021ec:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80021f0:	4b21      	ldr	r3, [pc, #132]	; (8002278 <ESP_messageHandler+0xec8>)
 80021f2:	725a      	strb	r2, [r3, #9]
		vSettings[10] = textrc[47]; 	// Calef. Apa. x 1
 80021f4:	4b18      	ldr	r3, [pc, #96]	; (8002258 <ESP_messageHandler+0xea8>)
 80021f6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80021fa:	4b1f      	ldr	r3, [pc, #124]	; (8002278 <ESP_messageHandler+0xec8>)
 80021fc:	729a      	strb	r2, [r3, #10]
		vSettings[11] = textrc[49]; 	// Calef. Apa. x 0.1
 80021fe:	4b16      	ldr	r3, [pc, #88]	; (8002258 <ESP_messageHandler+0xea8>)
 8002200:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8002204:	4b1c      	ldr	r3, [pc, #112]	; (8002278 <ESP_messageHandler+0xec8>)
 8002206:	72da      	strb	r2, [r3, #11]
		vSettings[12] = textrc[52]; 	// RH Mínimo x 10
 8002208:	4b13      	ldr	r3, [pc, #76]	; (8002258 <ESP_messageHandler+0xea8>)
 800220a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800220e:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <ESP_messageHandler+0xec8>)
 8002210:	731a      	strb	r2, [r3, #12]
		vSettings[13] = textrc[53]; 	// RH Mínimo x 1
 8002212:	4b11      	ldr	r3, [pc, #68]	; (8002258 <ESP_messageHandler+0xea8>)
 8002214:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8002218:	4b17      	ldr	r3, [pc, #92]	; (8002278 <ESP_messageHandler+0xec8>)
 800221a:	735a      	strb	r2, [r3, #13]
		vSettings[14] = textrc[56]; 	// RH Máximo x 10
 800221c:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <ESP_messageHandler+0xea8>)
 800221e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <ESP_messageHandler+0xec8>)
 8002224:	739a      	strb	r2, [r3, #14]
		vSettings[15] = textrc[57]; 	// RH Máximo x 1
 8002226:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <ESP_messageHandler+0xea8>)
 8002228:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800222c:	4b12      	ldr	r3, [pc, #72]	; (8002278 <ESP_messageHandler+0xec8>)
 800222e:	73da      	strb	r2, [r3, #15]
	}

	//__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000928 	.word	0x20000928
 8002238:	20000950 	.word	0x20000950
 800223c:	20000990 	.word	0x20000990
 8002240:	2000098c 	.word	0x2000098c
 8002244:	20000984 	.word	0x20000984
 8002248:	20000f4c 	.word	0x20000f4c
 800224c:	200009e4 	.word	0x200009e4
 8002250:	20000fdc 	.word	0x20000fdc
 8002254:	0800aabc 	.word	0x0800aabc
 8002258:	200009ec 	.word	0x200009ec
 800225c:	0800aad4 	.word	0x0800aad4
 8002260:	20000968 	.word	0x20000968
 8002264:	40020800 	.word	0x40020800
 8002268:	0800aaec 	.word	0x0800aaec
 800226c:	0800ab04 	.word	0x0800ab04
 8002270:	2000096c 	.word	0x2000096c
 8002274:	0800ab14 	.word	0x0800ab14
 8002278:	2000090c 	.word	0x2000090c

0800227c <ldr>:


#include "LDR.h"
#include "ESP8266_HAL.h"

void ldr(uint16_t value){
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	80fb      	strh	r3, [r7, #6]


	if (vLight[26] == '1'){
 8002286:	4b28      	ldr	r3, [pc, #160]	; (8002328 <ldr+0xac>)
 8002288:	7e9b      	ldrb	r3, [r3, #26]
 800228a:	2b31      	cmp	r3, #49	; 0x31
 800228c:	d147      	bne.n	800231e <ldr+0xa2>

		if(value<90) {
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	2b59      	cmp	r3, #89	; 0x59
 8002292:	d822      	bhi.n	80022da <ldr+0x5e>
			vLight[23] = 'x';		// Jardín
 8002294:	4b24      	ldr	r3, [pc, #144]	; (8002328 <ldr+0xac>)
 8002296:	2278      	movs	r2, #120	; 0x78
 8002298:	75da      	strb	r2, [r3, #23]
			vOutside[3] = 'x';
 800229a:	4b24      	ldr	r3, [pc, #144]	; (800232c <ldr+0xb0>)
 800229c:	2278      	movs	r2, #120	; 0x78
 800229e:	70da      	strb	r2, [r3, #3]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 80022a0:	2201      	movs	r2, #1
 80022a2:	2104      	movs	r1, #4
 80022a4:	4822      	ldr	r0, [pc, #136]	; (8002330 <ldr+0xb4>)
 80022a6:	f004 fabd 	bl	8006824 <HAL_GPIO_WritePin>
			vLight[24] = 'x';		// Porche
 80022aa:	4b1f      	ldr	r3, [pc, #124]	; (8002328 <ldr+0xac>)
 80022ac:	2278      	movs	r2, #120	; 0x78
 80022ae:	761a      	strb	r2, [r3, #24]
			vOutside[2] = 'x';
 80022b0:	4b1e      	ldr	r3, [pc, #120]	; (800232c <ldr+0xb0>)
 80022b2:	2278      	movs	r2, #120	; 0x78
 80022b4:	709a      	strb	r2, [r3, #2]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
 80022b6:	2201      	movs	r2, #1
 80022b8:	2110      	movs	r1, #16
 80022ba:	481d      	ldr	r0, [pc, #116]	; (8002330 <ldr+0xb4>)
 80022bc:	f004 fab2 	bl	8006824 <HAL_GPIO_WritePin>
			vLight[25] = 'x';		// Tendedero
 80022c0:	4b19      	ldr	r3, [pc, #100]	; (8002328 <ldr+0xac>)
 80022c2:	2278      	movs	r2, #120	; 0x78
 80022c4:	765a      	strb	r2, [r3, #25]
			vOutside[1] = 'x';
 80022c6:	4b19      	ldr	r3, [pc, #100]	; (800232c <ldr+0xb0>)
 80022c8:	2278      	movs	r2, #120	; 0x78
 80022ca:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 80022cc:	2201      	movs	r2, #1
 80022ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022d2:	4818      	ldr	r0, [pc, #96]	; (8002334 <ldr+0xb8>)
 80022d4:	f004 faa6 	bl	8006824 <HAL_GPIO_WritePin>
			vLight[25] = 'x';		// Tendedero
			vOutside[1] = 'x';
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
		}
	}
}
 80022d8:	e021      	b.n	800231e <ldr+0xa2>
			vLight[23] = 'x';		// Jardín
 80022da:	4b13      	ldr	r3, [pc, #76]	; (8002328 <ldr+0xac>)
 80022dc:	2278      	movs	r2, #120	; 0x78
 80022de:	75da      	strb	r2, [r3, #23]
			vOutside[3] = 'x';
 80022e0:	4b12      	ldr	r3, [pc, #72]	; (800232c <ldr+0xb0>)
 80022e2:	2278      	movs	r2, #120	; 0x78
 80022e4:	70da      	strb	r2, [r3, #3]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2104      	movs	r1, #4
 80022ea:	4811      	ldr	r0, [pc, #68]	; (8002330 <ldr+0xb4>)
 80022ec:	f004 fa9a 	bl	8006824 <HAL_GPIO_WritePin>
			vLight[24] = 'x';		// Porche
 80022f0:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <ldr+0xac>)
 80022f2:	2278      	movs	r2, #120	; 0x78
 80022f4:	761a      	strb	r2, [r3, #24]
			vOutside[2] = 'x';
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <ldr+0xb0>)
 80022f8:	2278      	movs	r2, #120	; 0x78
 80022fa:	709a      	strb	r2, [r3, #2]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2110      	movs	r1, #16
 8002300:	480b      	ldr	r0, [pc, #44]	; (8002330 <ldr+0xb4>)
 8002302:	f004 fa8f 	bl	8006824 <HAL_GPIO_WritePin>
			vLight[25] = 'x';		// Tendedero
 8002306:	4b08      	ldr	r3, [pc, #32]	; (8002328 <ldr+0xac>)
 8002308:	2278      	movs	r2, #120	; 0x78
 800230a:	765a      	strb	r2, [r3, #25]
			vOutside[1] = 'x';
 800230c:	4b07      	ldr	r3, [pc, #28]	; (800232c <ldr+0xb0>)
 800230e:	2278      	movs	r2, #120	; 0x78
 8002310:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 8002312:	2200      	movs	r2, #0
 8002314:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002318:	4806      	ldr	r0, [pc, #24]	; (8002334 <ldr+0xb8>)
 800231a:	f004 fa83 	bl	8006824 <HAL_GPIO_WritePin>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000928 	.word	0x20000928
 800232c:	2000095c 	.word	0x2000095c
 8002330:	40020c00 	.word	0x40020c00
 8002334:	40020800 	.word	0x40020800

08002338 <rgb_value>:


#include "LED.h"


int rgb_value(char i, char j, char k){
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
 8002342:	460b      	mov	r3, r1
 8002344:	71bb      	strb	r3, [r7, #6]
 8002346:	4613      	mov	r3, r2
 8002348:	717b      	strb	r3, [r7, #5]

	//int a, b, c;

	char rgb[3];
	rgb[0] = i;
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	723b      	strb	r3, [r7, #8]
	rgb[1] = j;
 800234e:	79bb      	ldrb	r3, [r7, #6]
 8002350:	727b      	strb	r3, [r7, #9]
	rgb[2] = k;
 8002352:	797b      	ldrb	r3, [r7, #5]
 8002354:	72bb      	strb	r3, [r7, #10]

	int val = atoi(rgb) ;
 8002356:	f107 0308 	add.w	r3, r7, #8
 800235a:	4618      	mov	r0, r3
 800235c:	f007 faa0 	bl	80098a0 <atoi>
 8002360:	60f8      	str	r0, [r7, #12]

	return val;
 8002362:	68fb      	ldr	r3, [r7, #12]
	else if(k == '7') c = 7;
	else if(k == '8') c = 8;
	else if(k == '9') c = 9;

	return a+b+c;*/
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <readRFID>:

extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart6;


int readRFID(){
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af00      	add	r7, sp, #0

	  char vehicle[16] = "";
 8002372:	2300      	movs	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	f107 030c 	add.w	r3, r7, #12
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	605a      	str	r2, [r3, #4]
 8002380:	609a      	str	r2, [r3, #8]

	  char car[3] = "247";
 8002382:	4a36      	ldr	r2, [pc, #216]	; (800245c <readRFID+0xf0>)
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	4611      	mov	r1, r2
 800238a:	8019      	strh	r1, [r3, #0]
 800238c:	3302      	adds	r3, #2
 800238e:	0c12      	lsrs	r2, r2, #16
 8002390:	701a      	strb	r2, [r3, #0]
	  char motorcycle[3] = "355";
 8002392:	4a33      	ldr	r2, [pc, #204]	; (8002460 <readRFID+0xf4>)
 8002394:	463b      	mov	r3, r7
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	4611      	mov	r1, r2
 800239a:	8019      	strh	r1, [r3, #0]
 800239c:	3302      	adds	r3, #2
 800239e:	0c12      	lsrs	r2, r2, #16
 80023a0:	701a      	strb	r2, [r3, #0]

	  int family = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24

	  for(int i=0; i<16; i++) vehicle[i] = '_';
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]
 80023aa:	e008      	b.n	80023be <readRFID+0x52>
 80023ac:	f107 0208 	add.w	r2, r7, #8
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	4413      	add	r3, r2
 80023b4:	225f      	movs	r2, #95	; 0x5f
 80023b6:	701a      	strb	r2, [r3, #0]
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	3301      	adds	r3, #1
 80023bc:	623b      	str	r3, [r7, #32]
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	2b0f      	cmp	r3, #15
 80023c2:	ddf3      	ble.n	80023ac <readRFID+0x40>

	  HAL_UART_Receive(&huart3, (uint8_t *) vehicle, 16, 100);
 80023c4:	f107 0108 	add.w	r1, r7, #8
 80023c8:	2364      	movs	r3, #100	; 0x64
 80023ca:	2210      	movs	r2, #16
 80023cc:	4825      	ldr	r0, [pc, #148]	; (8002464 <readRFID+0xf8>)
 80023ce:	f006 fb3c 	bl	8008a4a <HAL_UART_Receive>

	  if (vehicle[15] == '_') return 2;
 80023d2:	7dfb      	ldrb	r3, [r7, #23]
 80023d4:	2b5f      	cmp	r3, #95	; 0x5f
 80023d6:	d101      	bne.n	80023dc <readRFID+0x70>
 80023d8:	2302      	movs	r3, #2
 80023da:	e03b      	b.n	8002454 <readRFID+0xe8>

	  else {
		  for(int i = 0; i<3; i++){
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
 80023e0:	e015      	b.n	800240e <readRFID+0xa2>
			  family = 1;
 80023e2:	2301      	movs	r3, #1
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
			  if(vehicle[i+13] != car[i]){
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	330d      	adds	r3, #13
 80023ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023ee:	4413      	add	r3, r2
 80023f0:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 80023f4:	1d39      	adds	r1, r7, #4
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	440b      	add	r3, r1
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d003      	beq.n	8002408 <readRFID+0x9c>
				  family = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
				  i = 2;
 8002404:	2302      	movs	r3, #2
 8002406:	61fb      	str	r3, [r7, #28]
		  for(int i = 0; i<3; i++){
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	3301      	adds	r3, #1
 800240c:	61fb      	str	r3, [r7, #28]
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	2b02      	cmp	r3, #2
 8002412:	dde6      	ble.n	80023e2 <readRFID+0x76>
			  }
		  }

		  if(!family){
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	2b00      	cmp	r3, #0
 8002418:	d11b      	bne.n	8002452 <readRFID+0xe6>
			  for(int i = 0; i<3; i++){
 800241a:	2300      	movs	r3, #0
 800241c:	61bb      	str	r3, [r7, #24]
 800241e:	e015      	b.n	800244c <readRFID+0xe0>
				  family = 1;
 8002420:	2301      	movs	r3, #1
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
				  if(vehicle[13+i] != motorcycle[i]){
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	330d      	adds	r3, #13
 8002428:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800242c:	4413      	add	r3, r2
 800242e:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 8002432:	4639      	mov	r1, r7
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	440b      	add	r3, r1
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d003      	beq.n	8002446 <readRFID+0xda>
					  family = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
					  i = 2;
 8002442:	2302      	movs	r3, #2
 8002444:	61bb      	str	r3, [r7, #24]
			  for(int i = 0; i<3; i++){
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	3301      	adds	r3, #1
 800244a:	61bb      	str	r3, [r7, #24]
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	2b02      	cmp	r3, #2
 8002450:	dde6      	ble.n	8002420 <readRFID+0xb4>
				  }
			  }
		  }
	  }

	  return family;
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002454:	4618      	mov	r0, r3
 8002456:	3728      	adds	r7, #40	; 0x28
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	0800ab20 	.word	0x0800ab20
 8002460:	0800ab24 	.word	0x0800ab24
 8002464:	20000d04 	.word	0x20000d04

08002468 <rh_value>:


#include "RH.h"


int rh_value(char i, char j){
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	460a      	mov	r2, r1
 8002472:	71fb      	strb	r3, [r7, #7]
 8002474:	4613      	mov	r3, r2
 8002476:	71bb      	strb	r3, [r7, #6]

	//int a, b;

	char rh[2];
	rh[0] = i;
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	723b      	strb	r3, [r7, #8]
	rh[1] = j;
 800247c:	79bb      	ldrb	r3, [r7, #6]
 800247e:	727b      	strb	r3, [r7, #9]

	int val = atoi(rh) ;
 8002480:	f107 0308 	add.w	r3, r7, #8
 8002484:	4618      	mov	r0, r3
 8002486:	f007 fa0b 	bl	80098a0 <atoi>
 800248a:	60f8      	str	r0, [r7, #12]

	return val;
 800248c:	68fb      	ldr	r3, [r7, #12]
	else if(j == '7') b = 7;
	else if(j == '8') b = 8;
	else if(j == '9') b = 9;

	return a+b;*/
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <actParcelRFID>:

extern TIM_HandleTypeDef htim2;
extern UART_HandleTypeDef huart6;


void actParcelRFID(){
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0

	// Abrir S_Parcela
	while(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == 1) __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 91);
 800249c:	e003      	b.n	80024a6 <actParcelRFID+0xe>
 800249e:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <actParcelRFID+0x70>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	225b      	movs	r2, #91	; 0x5b
 80024a4:	635a      	str	r2, [r3, #52]	; 0x34
 80024a6:	2140      	movs	r1, #64	; 0x40
 80024a8:	4818      	ldr	r0, [pc, #96]	; (800250c <actParcelRFID+0x74>)
 80024aa:	f004 f9a3 	bl	80067f4 <HAL_GPIO_ReadPin>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d0f4      	beq.n	800249e <actParcelRFID+0x6>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89); 	// Rebote
 80024b4:	4b14      	ldr	r3, [pc, #80]	; (8002508 <actParcelRFID+0x70>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2259      	movs	r2, #89	; 0x59
 80024ba:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 80024bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024c0:	f003 fa68 	bl	8005994 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 90); 	// Parar S_Parcela
 80024c4:	4b10      	ldr	r3, [pc, #64]	; (8002508 <actParcelRFID+0x70>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	225a      	movs	r2, #90	; 0x5a
 80024ca:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_Delay(5000);
 80024cc:	f241 3088 	movw	r0, #5000	; 0x1388
 80024d0:	f003 fa60 	bl	8005994 <HAL_Delay>

	// Cerrar S_Parcela
	while(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == 1) __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89);
 80024d4:	e003      	b.n	80024de <actParcelRFID+0x46>
 80024d6:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <actParcelRFID+0x70>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2259      	movs	r2, #89	; 0x59
 80024dc:	635a      	str	r2, [r3, #52]	; 0x34
 80024de:	2140      	movs	r1, #64	; 0x40
 80024e0:	480a      	ldr	r0, [pc, #40]	; (800250c <actParcelRFID+0x74>)
 80024e2:	f004 f987 	bl	80067f4 <HAL_GPIO_ReadPin>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d0f4      	beq.n	80024d6 <actParcelRFID+0x3e>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 91); 	// Rebote
 80024ec:	4b06      	ldr	r3, [pc, #24]	; (8002508 <actParcelRFID+0x70>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	225b      	movs	r2, #91	; 0x5b
 80024f2:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 80024f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024f8:	f003 fa4c 	bl	8005994 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 90); 	// Parar S_Parcela
 80024fc:	4b02      	ldr	r3, [pc, #8]	; (8002508 <actParcelRFID+0x70>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	225a      	movs	r2, #90	; 0x5a
 8002502:	635a      	str	r2, [r3, #52]	; 0x34

}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20001020 	.word	0x20001020
 800250c:	40021000 	.word	0x40021000

08002510 <temp_value>:


#include "Temperature.h"


float temp_value(char i, char j, char k){
 8002510:	b580      	push	{r7, lr}
 8002512:	b088      	sub	sp, #32
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	71fb      	strb	r3, [r7, #7]
 800251a:	460b      	mov	r3, r1
 800251c:	71bb      	strb	r3, [r7, #6]
 800251e:	4613      	mov	r3, r2
 8002520:	717b      	strb	r3, [r7, #5]

	//float a, b, c;

	char uTemp[2];
	uTemp[0] = i;
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	743b      	strb	r3, [r7, #16]
	uTemp[1] = j;
 8002526:	79bb      	ldrb	r3, [r7, #6]
 8002528:	747b      	strb	r3, [r7, #17]

	char dTemp[1];
	dTemp[0] = k;
 800252a:	797b      	ldrb	r3, [r7, #5]
 800252c:	733b      	strb	r3, [r7, #12]


	int unit = atoi(uTemp) ;
 800252e:	f107 0310 	add.w	r3, r7, #16
 8002532:	4618      	mov	r0, r3
 8002534:	f007 f9b4 	bl	80098a0 <atoi>
 8002538:	61f8      	str	r0, [r7, #28]
	int dec = atoi(dTemp);
 800253a:	f107 030c 	add.w	r3, r7, #12
 800253e:	4618      	mov	r0, r3
 8002540:	f007 f9ae 	bl	80098a0 <atoi>
 8002544:	61b8      	str	r0, [r7, #24]

	float val = unit + dec/10;
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <temp_value+0x64>)
 800254a:	fb82 1203 	smull	r1, r2, r2, r3
 800254e:	1092      	asrs	r2, r2, #2
 8002550:	17db      	asrs	r3, r3, #31
 8002552:	1ad2      	subs	r2, r2, r3
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	4413      	add	r3, r2
 8002558:	ee07 3a90 	vmov	s15, r3
 800255c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002560:	edc7 7a05 	vstr	s15, [r7, #20]

	return val;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	ee07 3a90 	vmov	s15, r3
	else if(k == '7') c = 0.7;
	else if(k == '8') c = 0.8;
	else if(k == '9') c = 0.9;

	return a+b+c;*/
}
 800256a:	eeb0 0a67 	vmov.f32	s0, s15
 800256e:	3720      	adds	r7, #32
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	66666667 	.word	0x66666667

08002578 <ringInit>:


void storeChar(unsigned char c, Ring_Buffer *buffer);


void ringInit(void){
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0

	_rx_buffer1 = &rx_buffer1;
 800257c:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <ringInit+0x68>)
 800257e:	4a19      	ldr	r2, [pc, #100]	; (80025e4 <ringInit+0x6c>)
 8002580:	601a      	str	r2, [r3, #0]
    _tx_buffer1 = &tx_buffer1;
 8002582:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <ringInit+0x70>)
 8002584:	4a19      	ldr	r2, [pc, #100]	; (80025ec <ringInit+0x74>)
 8002586:	601a      	str	r2, [r3, #0]
    _rx_buffer2 = &rx_buffer2;
 8002588:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <ringInit+0x78>)
 800258a:	4a1a      	ldr	r2, [pc, #104]	; (80025f4 <ringInit+0x7c>)
 800258c:	601a      	str	r2, [r3, #0]
    _tx_buffer2 = &tx_buffer2;
 800258e:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <ringInit+0x80>)
 8002590:	4a1a      	ldr	r2, [pc, #104]	; (80025fc <ringInit+0x84>)
 8002592:	601a      	str	r2, [r3, #0]

    /* Enable the INTERRUPTION by UART ERROR (frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_ERR);
 8002594:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <ringInit+0x88>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	4b19      	ldr	r3, [pc, #100]	; (8002600 <ringInit+0x88>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0201 	orr.w	r2, r2, #1
 80025a2:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_ERR);
 80025a4:	4b17      	ldr	r3, [pc, #92]	; (8002604 <ringInit+0x8c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	4b16      	ldr	r3, [pc, #88]	; (8002604 <ringInit+0x8c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	615a      	str	r2, [r3, #20]

    /* Enable the INTERRUPTION by EMPTY DATA REGISTER */
    __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_RXNE);
 80025b4:	4b12      	ldr	r3, [pc, #72]	; (8002600 <ringInit+0x88>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	4b11      	ldr	r3, [pc, #68]	; (8002600 <ringInit+0x88>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0220 	orr.w	r2, r2, #32
 80025c2:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(PC_UART, UART_IT_RXNE);
 80025c4:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <ringInit+0x8c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <ringInit+0x8c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0220 	orr.w	r2, r2, #32
 80025d2:	60da      	str	r2, [r3, #12]
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20000a60 	.word	0x20000a60
 80025e4:	20000090 	.word	0x20000090
 80025e8:	20000a64 	.word	0x20000a64
 80025ec:	20000298 	.word	0x20000298
 80025f0:	20000a68 	.word	0x20000a68
 80025f4:	200004a0 	.word	0x200004a0
 80025f8:	20000a5c 	.word	0x20000a5c
 80025fc:	200006a8 	.word	0x200006a8
 8002600:	20001068 	.word	0x20001068
 8002604:	20000fdc 	.word	0x20000fdc

08002608 <storeChar>:


void storeChar(unsigned char c, Ring_Buffer *buffer){
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	6039      	str	r1, [r7, #0]
 8002612:	71fb      	strb	r3, [r7, #7]

    int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800261a:	3301      	adds	r3, #1
 800261c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002620:	60fb      	str	r3, [r7, #12]

    // If we want to stock something before the TAIL, meaning that HEAD will reach the TAIL position, it will cause a BUFFER overflow

    if(i != buffer->tail)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	429a      	cmp	r2, r3
 800262c:	d009      	beq.n	8002642 <storeChar+0x3a>
    {
    	buffer->buffer[buffer->head] = c;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	79f9      	ldrb	r1, [r7, #7]
 8002638:	54d1      	strb	r1, [r2, r3]
        buffer->head = i;
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }
}
 8002642:	bf00      	nop
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <UART_peek>:
		_rx_buffer2->head = 0;
	}
}


int UART_peek(UART_HandleTypeDef *uart){
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

	if (uart == WiFi_UART)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a1c      	ldr	r2, [pc, #112]	; (80026cc <UART_peek+0x7c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d114      	bne.n	800268a <UART_peek+0x3a>
	{
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <UART_peek+0x80>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002668:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <UART_peek+0x80>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002670:	429a      	cmp	r2, r3
 8002672:	d102      	bne.n	800267a <UART_peek+0x2a>
 8002674:	f04f 33ff 	mov.w	r3, #4294967295
 8002678:	e022      	b.n	80026c0 <UART_peek+0x70>

		else return _rx_buffer1->buffer[_rx_buffer1->tail];
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <UART_peek+0x80>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <UART_peek+0x80>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002686:	5cd3      	ldrb	r3, [r2, r3]
 8002688:	e01a      	b.n	80026c0 <UART_peek+0x70>
	}

	else if (uart == PC_UART)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a11      	ldr	r2, [pc, #68]	; (80026d4 <UART_peek+0x84>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d114      	bne.n	80026bc <UART_peek+0x6c>
	{
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 8002692:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <UART_peek+0x88>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800269a:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <UART_peek+0x88>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d102      	bne.n	80026ac <UART_peek+0x5c>
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
 80026aa:	e009      	b.n	80026c0 <UART_peek+0x70>

		else return _rx_buffer2->buffer[_rx_buffer2->tail];
 80026ac:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <UART_peek+0x88>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <UART_peek+0x88>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80026b8:	5cd3      	ldrb	r3, [r2, r3]
 80026ba:	e001      	b.n	80026c0 <UART_peek+0x70>
	}

	return -1;
 80026bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	20001068 	.word	0x20001068
 80026d0:	20000a60 	.word	0x20000a60
 80026d4:	20000fdc 	.word	0x20000fdc
 80026d8:	20000a68 	.word	0x20000a68

080026dc <UART_read>:


int UART_read(UART_HandleTypeDef *uart){
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

	if (uart == WiFi_UART)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a29      	ldr	r2, [pc, #164]	; (800278c <UART_read+0xb0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d121      	bne.n	8002730 <UART_read+0x54>
	{
		// If HEAD is not before TAIL, there is not CHARACTER
		if(_rx_buffer1->head == _rx_buffer1->tail) return -1;
 80026ec:	4b28      	ldr	r3, [pc, #160]	; (8002790 <UART_read+0xb4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80026f4:	4b26      	ldr	r3, [pc, #152]	; (8002790 <UART_read+0xb4>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d102      	bne.n	8002706 <UART_read+0x2a>
 8002700:	f04f 33ff 	mov.w	r3, #4294967295
 8002704:	e03c      	b.n	8002780 <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8002706:	4b22      	ldr	r3, [pc, #136]	; (8002790 <UART_read+0xb4>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	4b21      	ldr	r3, [pc, #132]	; (8002790 <UART_read+0xb4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002712:	5cd3      	ldrb	r3, [r2, r3]
 8002714:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8002716:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <UART_read+0xb4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <UART_read+0xb4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002728:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 800272c:	7bbb      	ldrb	r3, [r7, #14]
 800272e:	e027      	b.n	8002780 <UART_read+0xa4>
		}
	}

	else if (uart == PC_UART)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a18      	ldr	r2, [pc, #96]	; (8002794 <UART_read+0xb8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d121      	bne.n	800277c <UART_read+0xa0>
	{
		// If HEAD is not before TAIL, there is not CHARACTER
		if(_rx_buffer2->head == _rx_buffer2->tail) return -1;
 8002738:	4b17      	ldr	r3, [pc, #92]	; (8002798 <UART_read+0xbc>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002740:	4b15      	ldr	r3, [pc, #84]	; (8002798 <UART_read+0xbc>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002748:	429a      	cmp	r2, r3
 800274a:	d102      	bne.n	8002752 <UART_read+0x76>
 800274c:	f04f 33ff 	mov.w	r3, #4294967295
 8002750:	e016      	b.n	8002780 <UART_read+0xa4>

		else
		{
			unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8002752:	4b11      	ldr	r3, [pc, #68]	; (8002798 <UART_read+0xbc>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4b10      	ldr	r3, [pc, #64]	; (8002798 <UART_read+0xbc>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800275e:	5cd3      	ldrb	r3, [r2, r3]
 8002760:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8002762:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <UART_read+0xbc>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <UART_read+0xbc>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002774:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	e001      	b.n	8002780 <UART_read+0xa4>
		}
	}

	else return -1;
 800277c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002780:	4618      	mov	r0, r3
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	20001068 	.word	0x20001068
 8002790:	20000a60 	.word	0x20000a60
 8002794:	20000fdc 	.word	0x20000fdc
 8002798:	20000a68 	.word	0x20000a68

0800279c <UART_write>:


void UART_write(int c, UART_HandleTypeDef *uart){
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]

	if (c>=0)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	db54      	blt.n	8002856 <UART_write+0xba>
	{
		if (uart == WiFi_UART)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	4a2d      	ldr	r2, [pc, #180]	; (8002864 <UART_write+0xc8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d126      	bne.n	8002802 <UART_write+0x66>
		{
			int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 80027b4:	4b2c      	ldr	r3, [pc, #176]	; (8002868 <UART_write+0xcc>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027bc:	3301      	adds	r3, #1
 80027be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c2:	60bb      	str	r3, [r7, #8]

			// If OUTPUT BUFFER is full, INTERRUPTION empties it
		    while (i == _tx_buffer1->tail);
 80027c4:	bf00      	nop
 80027c6:	4b28      	ldr	r3, [pc, #160]	; (8002868 <UART_write+0xcc>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d0f8      	beq.n	80027c6 <UART_write+0x2a>

		   _tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 80027d4:	4b24      	ldr	r3, [pc, #144]	; (8002868 <UART_write+0xcc>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	4b23      	ldr	r3, [pc, #140]	; (8002868 <UART_write+0xcc>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	b2c9      	uxtb	r1, r1
 80027e4:	54d1      	strb	r1, [r2, r3]
		   _tx_buffer1->head = i;
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <UART_write+0xcc>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		   // Enables INTERRUPTION in the UART TRANSMISSION
		   __HAL_UART_ENABLE_IT(WiFi_UART, UART_IT_TXE);
 80027f0:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <UART_write+0xc8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <UART_write+0xc8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027fe:	60da      	str	r2, [r3, #12]

			// Enables INTERRUPTION in the UART TRANSMISSION
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
		}
	}
}
 8002800:	e029      	b.n	8002856 <UART_write+0xba>
		else if (uart == PC_UART)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	4a19      	ldr	r2, [pc, #100]	; (800286c <UART_write+0xd0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d125      	bne.n	8002856 <UART_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 800280a:	4b19      	ldr	r3, [pc, #100]	; (8002870 <UART_write+0xd4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002812:	3301      	adds	r3, #1
 8002814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002818:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 800281a:	bf00      	nop
 800281c:	4b14      	ldr	r3, [pc, #80]	; (8002870 <UART_write+0xd4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	429a      	cmp	r2, r3
 8002828:	d0f8      	beq.n	800281c <UART_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 800282a:	4b11      	ldr	r3, [pc, #68]	; (8002870 <UART_write+0xd4>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	4b10      	ldr	r3, [pc, #64]	; (8002870 <UART_write+0xd4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	b2c9      	uxtb	r1, r1
 800283a:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 800283c:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <UART_write+0xd4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(PC_UART, UART_IT_TXE);
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <UART_write+0xd0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	4b07      	ldr	r3, [pc, #28]	; (800286c <UART_write+0xd0>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002854:	60da      	str	r2, [r3, #12]
}
 8002856:	bf00      	nop
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20001068 	.word	0x20001068
 8002868:	20000a64 	.word	0x20000a64
 800286c:	20000fdc 	.word	0x20000fdc
 8002870:	20000a5c 	.word	0x20000a5c

08002874 <UART_available>:


int UART_available(UART_HandleTypeDef *uart){
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

	if (uart == WiFi_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a19      	ldr	r2, [pc, #100]	; (80028e4 <UART_available+0x70>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d111      	bne.n	80028a8 <UART_available+0x34>
 8002884:	4b18      	ldr	r3, [pc, #96]	; (80028e8 <UART_available+0x74>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800288c:	b29a      	uxth	r2, r3
 800288e:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <UART_available+0x74>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002896:	b29b      	uxth	r3, r3
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	b29b      	uxth	r3, r3
 800289c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028a6:	e017      	b.n	80028d8 <UART_available+0x64>

	else if (uart == PC_UART) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a10      	ldr	r2, [pc, #64]	; (80028ec <UART_available+0x78>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d111      	bne.n	80028d4 <UART_available+0x60>
 80028b0:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <UART_available+0x7c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <UART_available+0x7c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028d2:	e001      	b.n	80028d8 <UART_available+0x64>

	return -1;
 80028d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	20001068 	.word	0x20001068
 80028e8:	20000a60 	.word	0x20000a60
 80028ec:	20000fdc 	.word	0x20000fdc
 80028f0:	20000a68 	.word	0x20000a68

080028f4 <UART_send>:

	return 1;
}


void UART_send (const char *s, UART_HandleTypeDef *uart){
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]

	while(*s!='\0') UART_write(*s++, uart);
 80028fe:	e007      	b.n	8002910 <UART_send+0x1c>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	6839      	ldr	r1, [r7, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff ff46 	bl	800279c <UART_write>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1f3      	bne.n	8002900 <UART_send+0xc>
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <UART_copyUpto>:

  while(*s) UART_write(*s++, uart);
}


int UART_copyUpto(char *string, char *buffertocopyinto, UART_HandleTypeDef *uart){
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]

	int so_far =0;
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f7fd fc4b 	bl	80001d0 <strlen>
 800293a:	4603      	mov	r3, r0
 800293c:	617b      	str	r3, [r7, #20]
	int indx = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	61bb      	str	r3, [r7, #24]

again:
	while (!UART_available(uart));
 8002942:	bf00      	nop
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7ff ff95 	bl	8002874 <UART_available>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f9      	beq.n	8002944 <UART_copyUpto+0x20>

	while (UART_peek(uart) != string[so_far]){
 8002950:	e01f      	b.n	8002992 <UART_copyUpto+0x6e>

		buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8002952:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <UART_copyUpto+0xf8>)
 8002954:	6819      	ldr	r1, [r3, #0]
 8002956:	4b31      	ldr	r3, [pc, #196]	; (8002a1c <UART_copyUpto+0xf8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	68b8      	ldr	r0, [r7, #8]
 8002962:	4403      	add	r3, r0
 8002964:	5c8a      	ldrb	r2, [r1, r2]
 8002966:	701a      	strb	r2, [r3, #0]
		_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8002968:	4b2c      	ldr	r3, [pc, #176]	; (8002a1c <UART_copyUpto+0xf8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	4b2a      	ldr	r3, [pc, #168]	; (8002a1c <UART_copyUpto+0xf8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800297a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		indx++;
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	3301      	adds	r3, #1
 8002982:	61bb      	str	r3, [r7, #24]
		while (!UART_available(uart));
 8002984:	bf00      	nop
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff ff74 	bl	8002874 <UART_available>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f9      	beq.n	8002986 <UART_copyUpto+0x62>
	while (UART_peek(uart) != string[so_far]){
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff fe5c 	bl	8002650 <UART_peek>
 8002998:	4601      	mov	r1, r0
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4413      	add	r3, r2
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	4299      	cmp	r1, r3
 80029a4:	d1d5      	bne.n	8002952 <UART_copyUpto+0x2e>

	}

	while (UART_peek(uart) == string [so_far]){
 80029a6:	e01b      	b.n	80029e0 <UART_copyUpto+0xbc>

		so_far++;
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	3301      	adds	r3, #1
 80029ac:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = UART_read(uart);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff fe94 	bl	80026dc <UART_read>
 80029b4:	4601      	mov	r1, r0
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	61ba      	str	r2, [r7, #24]
 80029bc:	461a      	mov	r2, r3
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	4413      	add	r3, r2
 80029c2:	b2ca      	uxtb	r2, r1
 80029c4:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 80029c6:	69fa      	ldr	r2, [r7, #28]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d101      	bne.n	80029d2 <UART_copyUpto+0xae>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e01f      	b.n	8002a12 <UART_copyUpto+0xee>
		while (!UART_available(uart));
 80029d2:	bf00      	nop
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff ff4d 	bl	8002874 <UART_available>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f9      	beq.n	80029d4 <UART_copyUpto+0xb0>
	while (UART_peek(uart) == string [so_far]){
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff fe35 	bl	8002650 <UART_peek>
 80029e6:	4601      	mov	r1, r0
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4413      	add	r3, r2
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	4299      	cmp	r1, r3
 80029f2:	d0d9      	beq.n	80029a8 <UART_copyUpto+0x84>
	}

	if (so_far != len){
 80029f4:	69fa      	ldr	r2, [r7, #28]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d002      	beq.n	8002a02 <UART_copyUpto+0xde>

		so_far = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61fb      	str	r3, [r7, #28]
		goto again;
 8002a00:	e79f      	b.n	8002942 <UART_copyUpto+0x1e>
	}

	if (so_far == len) return 1;
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d101      	bne.n	8002a0e <UART_copyUpto+0xea>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e001      	b.n	8002a12 <UART_copyUpto+0xee>

	else return -1;
 8002a0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3720      	adds	r7, #32
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000a60 	.word	0x20000a60

08002a20 <UART_waitFor>:


int UART_waitFor(char *string,UART_HandleTypeDef *uart){
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]

	int so_far =0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fd fbce 	bl	80001d0 <strlen>
 8002a34:	4603      	mov	r3, r0
 8002a36:	60bb      	str	r3, [r7, #8]

again_device:
	while (!UART_available(uart));
 8002a38:	bf00      	nop
 8002a3a:	6838      	ldr	r0, [r7, #0]
 8002a3c:	f7ff ff1a 	bl	8002874 <UART_available>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f9      	beq.n	8002a3a <UART_waitFor+0x1a>

	if (UART_peek(uart) != string[so_far]){
 8002a46:	6838      	ldr	r0, [r7, #0]
 8002a48:	f7ff fe02 	bl	8002650 <UART_peek>
 8002a4c:	4601      	mov	r1, r0
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	4413      	add	r3, r2
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	4299      	cmp	r1, r3
 8002a58:	d01e      	beq.n	8002a98 <UART_waitFor+0x78>

		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 8002a5a:	4b1e      	ldr	r3, [pc, #120]	; (8002ad4 <UART_waitFor+0xb4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <UART_waitFor+0xb4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 8002a70:	e7e2      	b.n	8002a38 <UART_waitFor+0x18>

	}

	while (UART_peek(uart) == string [so_far]){

		so_far++;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	3301      	adds	r3, #1
 8002a76:	60fb      	str	r3, [r7, #12]
		UART_read(uart);
 8002a78:	6838      	ldr	r0, [r7, #0]
 8002a7a:	f7ff fe2f 	bl	80026dc <UART_read>
		if (so_far == len) return 1;
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d101      	bne.n	8002a8a <UART_waitFor+0x6a>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e01f      	b.n	8002aca <UART_waitFor+0xaa>
		while (!UART_available(uart));
 8002a8a:	bf00      	nop
 8002a8c:	6838      	ldr	r0, [r7, #0]
 8002a8e:	f7ff fef1 	bl	8002874 <UART_available>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f9      	beq.n	8002a8c <UART_waitFor+0x6c>
	while (UART_peek(uart) == string [so_far]){
 8002a98:	6838      	ldr	r0, [r7, #0]
 8002a9a:	f7ff fdd9 	bl	8002650 <UART_peek>
 8002a9e:	4601      	mov	r1, r0
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	4299      	cmp	r1, r3
 8002aaa:	d0e2      	beq.n	8002a72 <UART_waitFor+0x52>
	}

	if (so_far != len){
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d002      	beq.n	8002aba <UART_waitFor+0x9a>

		so_far = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
		goto again_device;
 8002ab8:	e7be      	b.n	8002a38 <UART_waitFor+0x18>
	}

	if (so_far == len) return 1;
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d101      	bne.n	8002ac6 <UART_waitFor+0xa6>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e001      	b.n	8002aca <UART_waitFor+0xaa>

	else return -1;
 8002ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000a60 	.word	0x20000a60

08002ad8 <UART_isr>:


void UART_isr(UART_HandleTypeDef *huart){
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

	uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	613b      	str	r3, [r7, #16]

	/* If DR (DATA REGISTER) is not empty and RX INT is ENABLE */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d023      	beq.n	8002b42 <UART_isr+0x6a>
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01e      	beq.n	8002b42 <UART_isr+0x6a>
    	    	                USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	************************************************************************************************************/

		huart->Instance->SR;                   // Read SR (STATUS REGISTER)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR; // Read DR (DATA REGISTER)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	73fb      	strb	r3, [r7, #15]

        if (huart == WiFi_UART){
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a3f      	ldr	r2, [pc, #252]	; (8002c14 <UART_isr+0x13c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d107      	bne.n	8002b2a <UART_isr+0x52>

        	storeChar(c, _rx_buffer1); // Stock DATA in BUFFER
 8002b1a:	4b3f      	ldr	r3, [pc, #252]	; (8002c18 <UART_isr+0x140>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	4611      	mov	r1, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fd70 	bl	8002608 <storeChar>
        else if (huart == PC_UART){

        	storeChar(c, _rx_buffer2); // Stock DATA in BUFFER
        }

        return;
 8002b28:	e06d      	b.n	8002c06 <UART_isr+0x12e>
        else if (huart == PC_UART){
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a3b      	ldr	r2, [pc, #236]	; (8002c1c <UART_isr+0x144>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d169      	bne.n	8002c06 <UART_isr+0x12e>
        	storeChar(c, _rx_buffer2); // Stock DATA in BUFFER
 8002b32:	4b3b      	ldr	r3, [pc, #236]	; (8002c20 <UART_isr+0x148>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff fd64 	bl	8002608 <storeChar>
        return;
 8002b40:	e061      	b.n	8002c06 <UART_isr+0x12e>
    }

    /* If INTERRUPTION is produced by TRANSMIT DATA REGISTER EMPTY */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET)){
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d05f      	beq.n	8002c0c <UART_isr+0x134>
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d05a      	beq.n	8002c0c <UART_isr+0x134>

    	if (huart == WiFi_UART){
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a2e      	ldr	r2, [pc, #184]	; (8002c14 <UART_isr+0x13c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d127      	bne.n	8002bae <UART_isr+0xd6>

    		if(tx_buffer1.head == tx_buffer1.tail){
 8002b5e:	4b31      	ldr	r3, [pc, #196]	; (8002c24 <UART_isr+0x14c>)
 8002b60:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002b64:	4b2f      	ldr	r3, [pc, #188]	; (8002c24 <UART_isr+0x14c>)
 8002b66:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d108      	bne.n	8002b80 <UART_isr+0xa8>

    			// Empty BUFFER, disable INTERRUPTION
    	        __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b7c:	60da      	str	r2, [r3, #12]
        	     huart->Instance->DR = c;

        	}
        }

    	return;
 8002b7e:	e044      	b.n	8002c0a <UART_isr+0x132>
    			unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8002b80:	4b28      	ldr	r3, [pc, #160]	; (8002c24 <UART_isr+0x14c>)
 8002b82:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b86:	4a27      	ldr	r2, [pc, #156]	; (8002c24 <UART_isr+0x14c>)
 8002b88:	5cd3      	ldrb	r3, [r2, r3]
 8002b8a:	737b      	strb	r3, [r7, #13]
    			tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8002b8c:	4b25      	ldr	r3, [pc, #148]	; (8002c24 <UART_isr+0x14c>)
 8002b8e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b92:	3301      	adds	r3, #1
 8002b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b98:	4a22      	ldr	r2, [pc, #136]	; (8002c24 <UART_isr+0x14c>)
 8002b9a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    			huart->Instance->SR;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
    			huart->Instance->DR = c;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	7b7a      	ldrb	r2, [r7, #13]
 8002baa:	605a      	str	r2, [r3, #4]
    	return;
 8002bac:	e02d      	b.n	8002c0a <UART_isr+0x132>
    	else if (huart == PC_UART){
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a1a      	ldr	r2, [pc, #104]	; (8002c1c <UART_isr+0x144>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d129      	bne.n	8002c0a <UART_isr+0x132>
    		if(tx_buffer2.head == tx_buffer2.tail){
 8002bb6:	4b1c      	ldr	r3, [pc, #112]	; (8002c28 <UART_isr+0x150>)
 8002bb8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002bbc:	4b1a      	ldr	r3, [pc, #104]	; (8002c28 <UART_isr+0x150>)
 8002bbe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d108      	bne.n	8002bd8 <UART_isr+0x100>
        	    __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bd4:	60da      	str	r2, [r3, #12]
    	return;
 8002bd6:	e018      	b.n	8002c0a <UART_isr+0x132>
        	    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8002bd8:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <UART_isr+0x150>)
 8002bda:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002bde:	4a12      	ldr	r2, [pc, #72]	; (8002c28 <UART_isr+0x150>)
 8002be0:	5cd3      	ldrb	r3, [r2, r3]
 8002be2:	73bb      	strb	r3, [r7, #14]
        	    tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8002be4:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <UART_isr+0x150>)
 8002be6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002bea:	3301      	adds	r3, #1
 8002bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bf0:	4a0d      	ldr	r2, [pc, #52]	; (8002c28 <UART_isr+0x150>)
 8002bf2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	     huart->Instance->SR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
        	     huart->Instance->DR = c;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	7bba      	ldrb	r2, [r7, #14]
 8002c02:	605a      	str	r2, [r3, #4]
    	return;
 8002c04:	e001      	b.n	8002c0a <UART_isr+0x132>
        return;
 8002c06:	bf00      	nop
 8002c08:	e000      	b.n	8002c0c <UART_isr+0x134>
    	return;
 8002c0a:	bf00      	nop
    }
}
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20001068 	.word	0x20001068
 8002c18:	20000a60 	.word	0x20000a60
 8002c1c:	20000fdc 	.word	0x20000fdc
 8002c20:	20000a68 	.word	0x20000a68
 8002c24:	20000298 	.word	0x20000298
 8002c28:	200006a8 	.word	0x200006a8

08002c2c <draw_pixel>:

uint8_t gddram[4][128];


void draw_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	71fb      	strb	r3, [r7, #7]
 8002c36:	460b      	mov	r3, r1
 8002c38:	71bb      	strb	r3, [r7, #6]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	717b      	strb	r3, [r7, #5]
	if(x<128 && y<32)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	db3b      	blt.n	8002cbe <draw_pixel+0x92>
 8002c46:	79bb      	ldrb	r3, [r7, #6]
 8002c48:	2b1f      	cmp	r3, #31
 8002c4a:	d838      	bhi.n	8002cbe <draw_pixel+0x92>
	{
		uint8_t pixel = 0x01;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
		uint8_t line = y>>3;
 8002c50:	79bb      	ldrb	r3, [r7, #6]
 8002c52:	08db      	lsrs	r3, r3, #3
 8002c54:	73bb      	strb	r3, [r7, #14]
		uint8_t byte = pixel<<(y%8);
 8002c56:	7bfa      	ldrb	r2, [r7, #15]
 8002c58:	79bb      	ldrb	r3, [r7, #6]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	737b      	strb	r3, [r7, #13]
		if(color)
 8002c64:	797b      	ldrb	r3, [r7, #5]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d012      	beq.n	8002c90 <draw_pixel+0x64>
			gddram[line][x] |= byte;
 8002c6a:	7bba      	ldrb	r2, [r7, #14]
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	4917      	ldr	r1, [pc, #92]	; (8002ccc <draw_pixel+0xa0>)
 8002c70:	01d2      	lsls	r2, r2, #7
 8002c72:	440a      	add	r2, r1
 8002c74:	4413      	add	r3, r2
 8002c76:	7818      	ldrb	r0, [r3, #0]
 8002c78:	7bba      	ldrb	r2, [r7, #14]
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	7b79      	ldrb	r1, [r7, #13]
 8002c7e:	4301      	orrs	r1, r0
 8002c80:	b2c8      	uxtb	r0, r1
 8002c82:	4912      	ldr	r1, [pc, #72]	; (8002ccc <draw_pixel+0xa0>)
 8002c84:	01d2      	lsls	r2, r2, #7
 8002c86:	440a      	add	r2, r1
 8002c88:	4413      	add	r3, r2
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	701a      	strb	r2, [r3, #0]
		else
			gddram[line][x] &= ~byte;
	}
}
 8002c8e:	e016      	b.n	8002cbe <draw_pixel+0x92>
			gddram[line][x] &= ~byte;
 8002c90:	7bba      	ldrb	r2, [r7, #14]
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	490d      	ldr	r1, [pc, #52]	; (8002ccc <draw_pixel+0xa0>)
 8002c96:	01d2      	lsls	r2, r2, #7
 8002c98:	440a      	add	r2, r1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	b25a      	sxtb	r2, r3
 8002ca0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	b25b      	sxtb	r3, r3
 8002ca8:	4013      	ands	r3, r2
 8002caa:	b259      	sxtb	r1, r3
 8002cac:	7bba      	ldrb	r2, [r7, #14]
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	b2c8      	uxtb	r0, r1
 8002cb2:	4906      	ldr	r1, [pc, #24]	; (8002ccc <draw_pixel+0xa0>)
 8002cb4:	01d2      	lsls	r2, r2, #7
 8002cb6:	440a      	add	r2, r1
 8002cb8:	4413      	add	r3, r2
 8002cba:	4602      	mov	r2, r0
 8002cbc:	701a      	strb	r2, [r3, #0]
}
 8002cbe:	bf00      	nop
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20000a6c 	.word	0x20000a6c

08002cd0 <invert_pixel>:
				draw_pixel(x*3+i,y*3+j,color);
	}
}

void invert_pixel(uint8_t x, uint8_t y)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	460a      	mov	r2, r1
 8002cda:	71fb      	strb	r3, [r7, #7]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	71bb      	strb	r3, [r7, #6]
	if(x<128 && y<32)
 8002ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	db24      	blt.n	8002d32 <invert_pixel+0x62>
 8002ce8:	79bb      	ldrb	r3, [r7, #6]
 8002cea:	2b1f      	cmp	r3, #31
 8002cec:	d821      	bhi.n	8002d32 <invert_pixel+0x62>
	{
		uint8_t pixel = 0x01;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
		gddram[y>>3][x] ^= pixel<<(y%8);
 8002cf2:	79bb      	ldrb	r3, [r7, #6]
 8002cf4:	08db      	lsrs	r3, r3, #3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	4910      	ldr	r1, [pc, #64]	; (8002d40 <invert_pixel+0x70>)
 8002cfe:	01d2      	lsls	r2, r2, #7
 8002d00:	440a      	add	r2, r1
 8002d02:	4413      	add	r3, r2
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	b25a      	sxtb	r2, r3
 8002d08:	7bf9      	ldrb	r1, [r7, #15]
 8002d0a:	79bb      	ldrb	r3, [r7, #6]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	fa01 f303 	lsl.w	r3, r1, r3
 8002d14:	b25b      	sxtb	r3, r3
 8002d16:	4053      	eors	r3, r2
 8002d18:	b259      	sxtb	r1, r3
 8002d1a:	79bb      	ldrb	r3, [r7, #6]
 8002d1c:	08db      	lsrs	r3, r3, #3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	b2c8      	uxtb	r0, r1
 8002d26:	4906      	ldr	r1, [pc, #24]	; (8002d40 <invert_pixel+0x70>)
 8002d28:	01d2      	lsls	r2, r2, #7
 8002d2a:	440a      	add	r2, r1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	4602      	mov	r2, r0
 8002d30:	701a      	strb	r2, [r3, #0]
	}
}
 8002d32:	bf00      	nop
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	20000a6c 	.word	0x20000a6c

08002d44 <clear>:
		for(j=y0;j<y1;j++)
			invert_pixel(i,j);
}

void clear(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(i=0;i<4;i++)
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	71fb      	strb	r3, [r7, #7]
 8002d4e:	e014      	b.n	8002d7a <clear+0x36>
		for(j=0;j<128;j++)
 8002d50:	2300      	movs	r3, #0
 8002d52:	71bb      	strb	r3, [r7, #6]
 8002d54:	e00a      	b.n	8002d6c <clear+0x28>
			gddram[i][j]=0x00;
 8002d56:	79fa      	ldrb	r2, [r7, #7]
 8002d58:	79bb      	ldrb	r3, [r7, #6]
 8002d5a:	490d      	ldr	r1, [pc, #52]	; (8002d90 <clear+0x4c>)
 8002d5c:	01d2      	lsls	r2, r2, #7
 8002d5e:	440a      	add	r2, r1
 8002d60:	4413      	add	r3, r2
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]
		for(j=0;j<128;j++)
 8002d66:	79bb      	ldrb	r3, [r7, #6]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	71bb      	strb	r3, [r7, #6]
 8002d6c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	daf0      	bge.n	8002d56 <clear+0x12>
	for(i=0;i<4;i++)
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	3301      	adds	r3, #1
 8002d78:	71fb      	strb	r3, [r7, #7]
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d9e7      	bls.n	8002d50 <clear+0xc>
}
 8002d80:	bf00      	nop
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	20000a6c 	.word	0x20000a6c

08002d94 <line_v>:

void line_v(uint8_t y0, uint8_t y1, uint8_t x, uint8_t width, uint8_t mode)
{
 8002d94:	b590      	push	{r4, r7, lr}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4604      	mov	r4, r0
 8002d9c:	4608      	mov	r0, r1
 8002d9e:	4611      	mov	r1, r2
 8002da0:	461a      	mov	r2, r3
 8002da2:	4623      	mov	r3, r4
 8002da4:	71fb      	strb	r3, [r7, #7]
 8002da6:	4603      	mov	r3, r0
 8002da8:	71bb      	strb	r3, [r7, #6]
 8002daa:	460b      	mov	r3, r1
 8002dac:	717b      	strb	r3, [r7, #5]
 8002dae:	4613      	mov	r3, r2
 8002db0:	713b      	strb	r3, [r7, #4]
	if(y0>y1)
 8002db2:	79fa      	ldrb	r2, [r7, #7]
 8002db4:	79bb      	ldrb	r3, [r7, #6]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d905      	bls.n	8002dc6 <line_v+0x32>
	{
		uint8_t temp = y0;
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	757b      	strb	r3, [r7, #21]
		y0 = y1;
 8002dbe:	79bb      	ldrb	r3, [r7, #6]
 8002dc0:	71fb      	strb	r3, [r7, #7]
		y1 = temp;
 8002dc2:	7d7b      	ldrb	r3, [r7, #21]
 8002dc4:	71bb      	strb	r3, [r7, #6]
	}
	uint8_t i,j;
	switch(mode)
 8002dc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	f000 80ac 	beq.w	8002f28 <line_v+0x194>
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	f300 80fb 	bgt.w	8002fcc <line_v+0x238>
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d054      	beq.n	8002e84 <line_v+0xf0>
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	f040 80f6 	bne.w	8002fcc <line_v+0x238>
	{
		case add :
			if(width%2)
 8002de0:	793b      	ldrb	r3, [r7, #4]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d027      	beq.n	8002e3c <line_v+0xa8>
			{
				uint8_t start = x-(width-1)/2;
 8002dec:	793b      	ldrb	r3, [r7, #4]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	0fda      	lsrs	r2, r3, #31
 8002df2:	4413      	add	r3, r2
 8002df4:	105b      	asrs	r3, r3, #1
 8002df6:	425b      	negs	r3, r3
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	797b      	ldrb	r3, [r7, #5]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	747b      	strb	r3, [r7, #17]
				for(i=0;i<width;i++)
 8002e00:	2300      	movs	r3, #0
 8002e02:	75fb      	strb	r3, [r7, #23]
 8002e04:	e015      	b.n	8002e32 <line_v+0x9e>
					for(j=y0;j<y1;j++)
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	75bb      	strb	r3, [r7, #22]
 8002e0a:	e00b      	b.n	8002e24 <line_v+0x90>
						draw_pixel(start+i,j,1);
 8002e0c:	7c7a      	ldrb	r2, [r7, #17]
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
 8002e10:	4413      	add	r3, r2
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	7db9      	ldrb	r1, [r7, #22]
 8002e16:	2201      	movs	r2, #1
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ff07 	bl	8002c2c <draw_pixel>
					for(j=y0;j<y1;j++)
 8002e1e:	7dbb      	ldrb	r3, [r7, #22]
 8002e20:	3301      	adds	r3, #1
 8002e22:	75bb      	strb	r3, [r7, #22]
 8002e24:	7dba      	ldrb	r2, [r7, #22]
 8002e26:	79bb      	ldrb	r3, [r7, #6]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d3ef      	bcc.n	8002e0c <line_v+0x78>
				for(i=0;i<width;i++)
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	75fb      	strb	r3, [r7, #23]
 8002e32:	7dfa      	ldrb	r2, [r7, #23]
 8002e34:	793b      	ldrb	r3, [r7, #4]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d3e5      	bcc.n	8002e06 <line_v+0x72>
				uint8_t start = x-width/2;
				for(i=0;i<width;i++)
					for(j=y0;j<y1;j++)
						draw_pixel(start+i,j,1);
			}
			break;
 8002e3a:	e0c7      	b.n	8002fcc <line_v+0x238>
				uint8_t start = x-width/2;
 8002e3c:	793b      	ldrb	r3, [r7, #4]
 8002e3e:	085b      	lsrs	r3, r3, #1
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	797a      	ldrb	r2, [r7, #5]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	74bb      	strb	r3, [r7, #18]
				for(i=0;i<width;i++)
 8002e48:	2300      	movs	r3, #0
 8002e4a:	75fb      	strb	r3, [r7, #23]
 8002e4c:	e015      	b.n	8002e7a <line_v+0xe6>
					for(j=y0;j<y1;j++)
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	75bb      	strb	r3, [r7, #22]
 8002e52:	e00b      	b.n	8002e6c <line_v+0xd8>
						draw_pixel(start+i,j,1);
 8002e54:	7cba      	ldrb	r2, [r7, #18]
 8002e56:	7dfb      	ldrb	r3, [r7, #23]
 8002e58:	4413      	add	r3, r2
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	7db9      	ldrb	r1, [r7, #22]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff fee3 	bl	8002c2c <draw_pixel>
					for(j=y0;j<y1;j++)
 8002e66:	7dbb      	ldrb	r3, [r7, #22]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	75bb      	strb	r3, [r7, #22]
 8002e6c:	7dba      	ldrb	r2, [r7, #22]
 8002e6e:	79bb      	ldrb	r3, [r7, #6]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d3ef      	bcc.n	8002e54 <line_v+0xc0>
				for(i=0;i<width;i++)
 8002e74:	7dfb      	ldrb	r3, [r7, #23]
 8002e76:	3301      	adds	r3, #1
 8002e78:	75fb      	strb	r3, [r7, #23]
 8002e7a:	7dfa      	ldrb	r2, [r7, #23]
 8002e7c:	793b      	ldrb	r3, [r7, #4]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d3e5      	bcc.n	8002e4e <line_v+0xba>
			break;
 8002e82:	e0a3      	b.n	8002fcc <line_v+0x238>

		case erase :
			if(width%2)
 8002e84:	793b      	ldrb	r3, [r7, #4]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d027      	beq.n	8002ee0 <line_v+0x14c>
			{
				uint8_t start = x-(width-1)/2;
 8002e90:	793b      	ldrb	r3, [r7, #4]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	0fda      	lsrs	r2, r3, #31
 8002e96:	4413      	add	r3, r2
 8002e98:	105b      	asrs	r3, r3, #1
 8002e9a:	425b      	negs	r3, r3
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	797b      	ldrb	r3, [r7, #5]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	73fb      	strb	r3, [r7, #15]
				for(i=0;i<width;i++)
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	75fb      	strb	r3, [r7, #23]
 8002ea8:	e015      	b.n	8002ed6 <line_v+0x142>
					for(j=y0;j<y1;j++)
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	75bb      	strb	r3, [r7, #22]
 8002eae:	e00b      	b.n	8002ec8 <line_v+0x134>
						draw_pixel(start+i,j,0);
 8002eb0:	7bfa      	ldrb	r2, [r7, #15]
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	7db9      	ldrb	r1, [r7, #22]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff feb5 	bl	8002c2c <draw_pixel>
					for(j=y0;j<y1;j++)
 8002ec2:	7dbb      	ldrb	r3, [r7, #22]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	75bb      	strb	r3, [r7, #22]
 8002ec8:	7dba      	ldrb	r2, [r7, #22]
 8002eca:	79bb      	ldrb	r3, [r7, #6]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d3ef      	bcc.n	8002eb0 <line_v+0x11c>
				for(i=0;i<width;i++)
 8002ed0:	7dfb      	ldrb	r3, [r7, #23]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	75fb      	strb	r3, [r7, #23]
 8002ed6:	7dfa      	ldrb	r2, [r7, #23]
 8002ed8:	793b      	ldrb	r3, [r7, #4]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d3e5      	bcc.n	8002eaa <line_v+0x116>
				uint8_t start = x-width/2;
				for(i=0;i<width;i++)
					for(j=y0;j<y1;j++)
						draw_pixel(start+i,j,0);
			}
			break;
 8002ede:	e075      	b.n	8002fcc <line_v+0x238>
				uint8_t start = x-width/2;
 8002ee0:	793b      	ldrb	r3, [r7, #4]
 8002ee2:	085b      	lsrs	r3, r3, #1
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	797a      	ldrb	r2, [r7, #5]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	743b      	strb	r3, [r7, #16]
				for(i=0;i<width;i++)
 8002eec:	2300      	movs	r3, #0
 8002eee:	75fb      	strb	r3, [r7, #23]
 8002ef0:	e015      	b.n	8002f1e <line_v+0x18a>
					for(j=y0;j<y1;j++)
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	75bb      	strb	r3, [r7, #22]
 8002ef6:	e00b      	b.n	8002f10 <line_v+0x17c>
						draw_pixel(start+i,j,0);
 8002ef8:	7c3a      	ldrb	r2, [r7, #16]
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
 8002efc:	4413      	add	r3, r2
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	7db9      	ldrb	r1, [r7, #22]
 8002f02:	2200      	movs	r2, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fe91 	bl	8002c2c <draw_pixel>
					for(j=y0;j<y1;j++)
 8002f0a:	7dbb      	ldrb	r3, [r7, #22]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	75bb      	strb	r3, [r7, #22]
 8002f10:	7dba      	ldrb	r2, [r7, #22]
 8002f12:	79bb      	ldrb	r3, [r7, #6]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d3ef      	bcc.n	8002ef8 <line_v+0x164>
				for(i=0;i<width;i++)
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	75fb      	strb	r3, [r7, #23]
 8002f1e:	7dfa      	ldrb	r2, [r7, #23]
 8002f20:	793b      	ldrb	r3, [r7, #4]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d3e5      	bcc.n	8002ef2 <line_v+0x15e>
			break;
 8002f26:	e051      	b.n	8002fcc <line_v+0x238>

		case invert :
			if(width%2)
 8002f28:	793b      	ldrb	r3, [r7, #4]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d027      	beq.n	8002f84 <line_v+0x1f0>
			{
				uint8_t start = x-(width-1)/2;
 8002f34:	793b      	ldrb	r3, [r7, #4]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	0fda      	lsrs	r2, r3, #31
 8002f3a:	4413      	add	r3, r2
 8002f3c:	105b      	asrs	r3, r3, #1
 8002f3e:	425b      	negs	r3, r3
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	797b      	ldrb	r3, [r7, #5]
 8002f44:	4413      	add	r3, r2
 8002f46:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<width;i++)
 8002f48:	2300      	movs	r3, #0
 8002f4a:	75fb      	strb	r3, [r7, #23]
 8002f4c:	e015      	b.n	8002f7a <line_v+0x1e6>
					for(j=y0;j<y1;j++)
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	75bb      	strb	r3, [r7, #22]
 8002f52:	e00b      	b.n	8002f6c <line_v+0x1d8>
						invert_pixel(start+i,j);
 8002f54:	7cfa      	ldrb	r2, [r7, #19]
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
 8002f58:	4413      	add	r3, r2
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	7dba      	ldrb	r2, [r7, #22]
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff feb5 	bl	8002cd0 <invert_pixel>
					for(j=y0;j<y1;j++)
 8002f66:	7dbb      	ldrb	r3, [r7, #22]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	75bb      	strb	r3, [r7, #22]
 8002f6c:	7dba      	ldrb	r2, [r7, #22]
 8002f6e:	79bb      	ldrb	r3, [r7, #6]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d3ef      	bcc.n	8002f54 <line_v+0x1c0>
				for(i=0;i<width;i++)
 8002f74:	7dfb      	ldrb	r3, [r7, #23]
 8002f76:	3301      	adds	r3, #1
 8002f78:	75fb      	strb	r3, [r7, #23]
 8002f7a:	7dfa      	ldrb	r2, [r7, #23]
 8002f7c:	793b      	ldrb	r3, [r7, #4]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d3e5      	bcc.n	8002f4e <line_v+0x1ba>
				uint8_t start = x-width/2;
				for(i=0;i<width;i++)
					for(j=y0;j<y1;j++)
						invert_pixel(start+i,j);
			}
			break;
 8002f82:	e022      	b.n	8002fca <line_v+0x236>
				uint8_t start = x-width/2;
 8002f84:	793b      	ldrb	r3, [r7, #4]
 8002f86:	085b      	lsrs	r3, r3, #1
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	797a      	ldrb	r2, [r7, #5]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	753b      	strb	r3, [r7, #20]
				for(i=0;i<width;i++)
 8002f90:	2300      	movs	r3, #0
 8002f92:	75fb      	strb	r3, [r7, #23]
 8002f94:	e015      	b.n	8002fc2 <line_v+0x22e>
					for(j=y0;j<y1;j++)
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	75bb      	strb	r3, [r7, #22]
 8002f9a:	e00b      	b.n	8002fb4 <line_v+0x220>
						invert_pixel(start+i,j);
 8002f9c:	7d3a      	ldrb	r2, [r7, #20]
 8002f9e:	7dfb      	ldrb	r3, [r7, #23]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	7dba      	ldrb	r2, [r7, #22]
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff fe91 	bl	8002cd0 <invert_pixel>
					for(j=y0;j<y1;j++)
 8002fae:	7dbb      	ldrb	r3, [r7, #22]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	75bb      	strb	r3, [r7, #22]
 8002fb4:	7dba      	ldrb	r2, [r7, #22]
 8002fb6:	79bb      	ldrb	r3, [r7, #6]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d3ef      	bcc.n	8002f9c <line_v+0x208>
				for(i=0;i<width;i++)
 8002fbc:	7dfb      	ldrb	r3, [r7, #23]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	75fb      	strb	r3, [r7, #23]
 8002fc2:	7dfa      	ldrb	r2, [r7, #23]
 8002fc4:	793b      	ldrb	r3, [r7, #4]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d3e5      	bcc.n	8002f96 <line_v+0x202>
			break;
 8002fca:	bf00      	nop
	}
}
 8002fcc:	bf00      	nop
 8002fce:	371c      	adds	r7, #28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd90      	pop	{r4, r7, pc}

08002fd4 <line_h>:

void line_h(uint8_t x0, uint8_t x1, uint8_t y0, uint8_t width, uint8_t mode)
{
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4604      	mov	r4, r0
 8002fdc:	4608      	mov	r0, r1
 8002fde:	4611      	mov	r1, r2
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4623      	mov	r3, r4
 8002fe4:	71fb      	strb	r3, [r7, #7]
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	71bb      	strb	r3, [r7, #6]
 8002fea:	460b      	mov	r3, r1
 8002fec:	717b      	strb	r3, [r7, #5]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	713b      	strb	r3, [r7, #4]
	if(x0>x1)
 8002ff2:	79fa      	ldrb	r2, [r7, #7]
 8002ff4:	79bb      	ldrb	r3, [r7, #6]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d905      	bls.n	8003006 <line_h+0x32>
	{
		uint8_t temp = x0;
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	757b      	strb	r3, [r7, #21]
		x0 = x1;
 8002ffe:	79bb      	ldrb	r3, [r7, #6]
 8003000:	71fb      	strb	r3, [r7, #7]
		x1 = temp;
 8003002:	7d7b      	ldrb	r3, [r7, #21]
 8003004:	71bb      	strb	r3, [r7, #6]
	}
	uint8_t i,j;
	switch(mode)
 8003006:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800300a:	2b02      	cmp	r3, #2
 800300c:	f000 80ac 	beq.w	8003168 <line_h+0x194>
 8003010:	2b02      	cmp	r3, #2
 8003012:	f300 80fb 	bgt.w	800320c <line_h+0x238>
 8003016:	2b00      	cmp	r3, #0
 8003018:	d054      	beq.n	80030c4 <line_h+0xf0>
 800301a:	2b01      	cmp	r3, #1
 800301c:	f040 80f6 	bne.w	800320c <line_h+0x238>
	{
		case add :
			if(width%2)
 8003020:	793b      	ldrb	r3, [r7, #4]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d027      	beq.n	800307c <line_h+0xa8>
			{
				uint8_t start = y0-(width-1)/2;
 800302c:	793b      	ldrb	r3, [r7, #4]
 800302e:	3b01      	subs	r3, #1
 8003030:	0fda      	lsrs	r2, r3, #31
 8003032:	4413      	add	r3, r2
 8003034:	105b      	asrs	r3, r3, #1
 8003036:	425b      	negs	r3, r3
 8003038:	b2da      	uxtb	r2, r3
 800303a:	797b      	ldrb	r3, [r7, #5]
 800303c:	4413      	add	r3, r2
 800303e:	747b      	strb	r3, [r7, #17]
				for(i=0;i<width;i++)
 8003040:	2300      	movs	r3, #0
 8003042:	75fb      	strb	r3, [r7, #23]
 8003044:	e015      	b.n	8003072 <line_h+0x9e>
					for(j=x0;j<=x1;j++)
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	75bb      	strb	r3, [r7, #22]
 800304a:	e00b      	b.n	8003064 <line_h+0x90>
						draw_pixel(j,start+i,1);
 800304c:	7c7a      	ldrb	r2, [r7, #17]
 800304e:	7dfb      	ldrb	r3, [r7, #23]
 8003050:	4413      	add	r3, r2
 8003052:	b2d9      	uxtb	r1, r3
 8003054:	7dbb      	ldrb	r3, [r7, #22]
 8003056:	2201      	movs	r2, #1
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff fde7 	bl	8002c2c <draw_pixel>
					for(j=x0;j<=x1;j++)
 800305e:	7dbb      	ldrb	r3, [r7, #22]
 8003060:	3301      	adds	r3, #1
 8003062:	75bb      	strb	r3, [r7, #22]
 8003064:	7dba      	ldrb	r2, [r7, #22]
 8003066:	79bb      	ldrb	r3, [r7, #6]
 8003068:	429a      	cmp	r2, r3
 800306a:	d9ef      	bls.n	800304c <line_h+0x78>
				for(i=0;i<width;i++)
 800306c:	7dfb      	ldrb	r3, [r7, #23]
 800306e:	3301      	adds	r3, #1
 8003070:	75fb      	strb	r3, [r7, #23]
 8003072:	7dfa      	ldrb	r2, [r7, #23]
 8003074:	793b      	ldrb	r3, [r7, #4]
 8003076:	429a      	cmp	r2, r3
 8003078:	d3e5      	bcc.n	8003046 <line_h+0x72>
				uint8_t start = y0-width/2;
				for(i=0;i<width;i++)
					for(j=x0;j<=x1;j++)
						draw_pixel(j,start+i,1);
			}
			break;
 800307a:	e0c7      	b.n	800320c <line_h+0x238>
				uint8_t start = y0-width/2;
 800307c:	793b      	ldrb	r3, [r7, #4]
 800307e:	085b      	lsrs	r3, r3, #1
 8003080:	b2db      	uxtb	r3, r3
 8003082:	797a      	ldrb	r2, [r7, #5]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	74bb      	strb	r3, [r7, #18]
				for(i=0;i<width;i++)
 8003088:	2300      	movs	r3, #0
 800308a:	75fb      	strb	r3, [r7, #23]
 800308c:	e015      	b.n	80030ba <line_h+0xe6>
					for(j=x0;j<=x1;j++)
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	75bb      	strb	r3, [r7, #22]
 8003092:	e00b      	b.n	80030ac <line_h+0xd8>
						draw_pixel(j,start+i,1);
 8003094:	7cba      	ldrb	r2, [r7, #18]
 8003096:	7dfb      	ldrb	r3, [r7, #23]
 8003098:	4413      	add	r3, r2
 800309a:	b2d9      	uxtb	r1, r3
 800309c:	7dbb      	ldrb	r3, [r7, #22]
 800309e:	2201      	movs	r2, #1
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fdc3 	bl	8002c2c <draw_pixel>
					for(j=x0;j<=x1;j++)
 80030a6:	7dbb      	ldrb	r3, [r7, #22]
 80030a8:	3301      	adds	r3, #1
 80030aa:	75bb      	strb	r3, [r7, #22]
 80030ac:	7dba      	ldrb	r2, [r7, #22]
 80030ae:	79bb      	ldrb	r3, [r7, #6]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d9ef      	bls.n	8003094 <line_h+0xc0>
				for(i=0;i<width;i++)
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
 80030b6:	3301      	adds	r3, #1
 80030b8:	75fb      	strb	r3, [r7, #23]
 80030ba:	7dfa      	ldrb	r2, [r7, #23]
 80030bc:	793b      	ldrb	r3, [r7, #4]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d3e5      	bcc.n	800308e <line_h+0xba>
			break;
 80030c2:	e0a3      	b.n	800320c <line_h+0x238>

		case erase :
			if(width%2)
 80030c4:	793b      	ldrb	r3, [r7, #4]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d027      	beq.n	8003120 <line_h+0x14c>
			{
				uint8_t start = y0-(width-1)/2;
 80030d0:	793b      	ldrb	r3, [r7, #4]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	0fda      	lsrs	r2, r3, #31
 80030d6:	4413      	add	r3, r2
 80030d8:	105b      	asrs	r3, r3, #1
 80030da:	425b      	negs	r3, r3
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	797b      	ldrb	r3, [r7, #5]
 80030e0:	4413      	add	r3, r2
 80030e2:	73fb      	strb	r3, [r7, #15]
				for(i=0;i<width;i++)
 80030e4:	2300      	movs	r3, #0
 80030e6:	75fb      	strb	r3, [r7, #23]
 80030e8:	e015      	b.n	8003116 <line_h+0x142>
					for(j=x0;j<=x1;j++)
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	75bb      	strb	r3, [r7, #22]
 80030ee:	e00b      	b.n	8003108 <line_h+0x134>
						draw_pixel(j,start+i,0);
 80030f0:	7bfa      	ldrb	r2, [r7, #15]
 80030f2:	7dfb      	ldrb	r3, [r7, #23]
 80030f4:	4413      	add	r3, r2
 80030f6:	b2d9      	uxtb	r1, r3
 80030f8:	7dbb      	ldrb	r3, [r7, #22]
 80030fa:	2200      	movs	r2, #0
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fd95 	bl	8002c2c <draw_pixel>
					for(j=x0;j<=x1;j++)
 8003102:	7dbb      	ldrb	r3, [r7, #22]
 8003104:	3301      	adds	r3, #1
 8003106:	75bb      	strb	r3, [r7, #22]
 8003108:	7dba      	ldrb	r2, [r7, #22]
 800310a:	79bb      	ldrb	r3, [r7, #6]
 800310c:	429a      	cmp	r2, r3
 800310e:	d9ef      	bls.n	80030f0 <line_h+0x11c>
				for(i=0;i<width;i++)
 8003110:	7dfb      	ldrb	r3, [r7, #23]
 8003112:	3301      	adds	r3, #1
 8003114:	75fb      	strb	r3, [r7, #23]
 8003116:	7dfa      	ldrb	r2, [r7, #23]
 8003118:	793b      	ldrb	r3, [r7, #4]
 800311a:	429a      	cmp	r2, r3
 800311c:	d3e5      	bcc.n	80030ea <line_h+0x116>
				uint8_t start = y0-width/2;
				for(i=0;i<width;i++)
					for(j=x0;j<=x1;j++)
						draw_pixel(j,start+i,0);
			}
			break;
 800311e:	e075      	b.n	800320c <line_h+0x238>
				uint8_t start = y0-width/2;
 8003120:	793b      	ldrb	r3, [r7, #4]
 8003122:	085b      	lsrs	r3, r3, #1
 8003124:	b2db      	uxtb	r3, r3
 8003126:	797a      	ldrb	r2, [r7, #5]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	743b      	strb	r3, [r7, #16]
				for(i=0;i<width;i++)
 800312c:	2300      	movs	r3, #0
 800312e:	75fb      	strb	r3, [r7, #23]
 8003130:	e015      	b.n	800315e <line_h+0x18a>
					for(j=x0;j<=x1;j++)
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	75bb      	strb	r3, [r7, #22]
 8003136:	e00b      	b.n	8003150 <line_h+0x17c>
						draw_pixel(j,start+i,0);
 8003138:	7c3a      	ldrb	r2, [r7, #16]
 800313a:	7dfb      	ldrb	r3, [r7, #23]
 800313c:	4413      	add	r3, r2
 800313e:	b2d9      	uxtb	r1, r3
 8003140:	7dbb      	ldrb	r3, [r7, #22]
 8003142:	2200      	movs	r2, #0
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff fd71 	bl	8002c2c <draw_pixel>
					for(j=x0;j<=x1;j++)
 800314a:	7dbb      	ldrb	r3, [r7, #22]
 800314c:	3301      	adds	r3, #1
 800314e:	75bb      	strb	r3, [r7, #22]
 8003150:	7dba      	ldrb	r2, [r7, #22]
 8003152:	79bb      	ldrb	r3, [r7, #6]
 8003154:	429a      	cmp	r2, r3
 8003156:	d9ef      	bls.n	8003138 <line_h+0x164>
				for(i=0;i<width;i++)
 8003158:	7dfb      	ldrb	r3, [r7, #23]
 800315a:	3301      	adds	r3, #1
 800315c:	75fb      	strb	r3, [r7, #23]
 800315e:	7dfa      	ldrb	r2, [r7, #23]
 8003160:	793b      	ldrb	r3, [r7, #4]
 8003162:	429a      	cmp	r2, r3
 8003164:	d3e5      	bcc.n	8003132 <line_h+0x15e>
			break;
 8003166:	e051      	b.n	800320c <line_h+0x238>

		case invert :
			if(width%2)
 8003168:	793b      	ldrb	r3, [r7, #4]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d027      	beq.n	80031c4 <line_h+0x1f0>
			{
				uint8_t start = y0-(width-1)/2;
 8003174:	793b      	ldrb	r3, [r7, #4]
 8003176:	3b01      	subs	r3, #1
 8003178:	0fda      	lsrs	r2, r3, #31
 800317a:	4413      	add	r3, r2
 800317c:	105b      	asrs	r3, r3, #1
 800317e:	425b      	negs	r3, r3
 8003180:	b2da      	uxtb	r2, r3
 8003182:	797b      	ldrb	r3, [r7, #5]
 8003184:	4413      	add	r3, r2
 8003186:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<width;i++)
 8003188:	2300      	movs	r3, #0
 800318a:	75fb      	strb	r3, [r7, #23]
 800318c:	e015      	b.n	80031ba <line_h+0x1e6>
					for(j=x0;j<=x1;j++)
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	75bb      	strb	r3, [r7, #22]
 8003192:	e00b      	b.n	80031ac <line_h+0x1d8>
						invert_pixel(j,start+i);
 8003194:	7cfa      	ldrb	r2, [r7, #19]
 8003196:	7dfb      	ldrb	r3, [r7, #23]
 8003198:	4413      	add	r3, r2
 800319a:	b2da      	uxtb	r2, r3
 800319c:	7dbb      	ldrb	r3, [r7, #22]
 800319e:	4611      	mov	r1, r2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fd95 	bl	8002cd0 <invert_pixel>
					for(j=x0;j<=x1;j++)
 80031a6:	7dbb      	ldrb	r3, [r7, #22]
 80031a8:	3301      	adds	r3, #1
 80031aa:	75bb      	strb	r3, [r7, #22]
 80031ac:	7dba      	ldrb	r2, [r7, #22]
 80031ae:	79bb      	ldrb	r3, [r7, #6]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d9ef      	bls.n	8003194 <line_h+0x1c0>
				for(i=0;i<width;i++)
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
 80031b6:	3301      	adds	r3, #1
 80031b8:	75fb      	strb	r3, [r7, #23]
 80031ba:	7dfa      	ldrb	r2, [r7, #23]
 80031bc:	793b      	ldrb	r3, [r7, #4]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d3e5      	bcc.n	800318e <line_h+0x1ba>
				uint8_t start = y0-width/2;
				for(i=0;i<width;i++)
					for(j=x0;j<=x1;j++)
						invert_pixel(j,start+i);
			}
			break;
 80031c2:	e022      	b.n	800320a <line_h+0x236>
				uint8_t start = y0-width/2;
 80031c4:	793b      	ldrb	r3, [r7, #4]
 80031c6:	085b      	lsrs	r3, r3, #1
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	797a      	ldrb	r2, [r7, #5]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	753b      	strb	r3, [r7, #20]
				for(i=0;i<width;i++)
 80031d0:	2300      	movs	r3, #0
 80031d2:	75fb      	strb	r3, [r7, #23]
 80031d4:	e015      	b.n	8003202 <line_h+0x22e>
					for(j=x0;j<=x1;j++)
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	75bb      	strb	r3, [r7, #22]
 80031da:	e00b      	b.n	80031f4 <line_h+0x220>
						invert_pixel(j,start+i);
 80031dc:	7d3a      	ldrb	r2, [r7, #20]
 80031de:	7dfb      	ldrb	r3, [r7, #23]
 80031e0:	4413      	add	r3, r2
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	7dbb      	ldrb	r3, [r7, #22]
 80031e6:	4611      	mov	r1, r2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fd71 	bl	8002cd0 <invert_pixel>
					for(j=x0;j<=x1;j++)
 80031ee:	7dbb      	ldrb	r3, [r7, #22]
 80031f0:	3301      	adds	r3, #1
 80031f2:	75bb      	strb	r3, [r7, #22]
 80031f4:	7dba      	ldrb	r2, [r7, #22]
 80031f6:	79bb      	ldrb	r3, [r7, #6]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d9ef      	bls.n	80031dc <line_h+0x208>
				for(i=0;i<width;i++)
 80031fc:	7dfb      	ldrb	r3, [r7, #23]
 80031fe:	3301      	adds	r3, #1
 8003200:	75fb      	strb	r3, [r7, #23]
 8003202:	7dfa      	ldrb	r2, [r7, #23]
 8003204:	793b      	ldrb	r3, [r7, #4]
 8003206:	429a      	cmp	r2, r3
 8003208:	d3e5      	bcc.n	80031d6 <line_h+0x202>
			break;
 800320a:	bf00      	nop

	}
}
 800320c:	bf00      	nop
 800320e:	371c      	adds	r7, #28
 8003210:	46bd      	mov	sp, r7
 8003212:	bd90      	pop	{r4, r7, pc}

08003214 <graphics_Glyph>:


void graphics_Glyph(unsigned char left, unsigned char top,
			   unsigned char width, unsigned char height,
			   const unsigned char *glyph, unsigned char store_width)
{
 8003214:	b590      	push	{r4, r7, lr}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	4604      	mov	r4, r0
 800321c:	4608      	mov	r0, r1
 800321e:	4611      	mov	r1, r2
 8003220:	461a      	mov	r2, r3
 8003222:	4623      	mov	r3, r4
 8003224:	71fb      	strb	r3, [r7, #7]
 8003226:	4603      	mov	r3, r0
 8003228:	71bb      	strb	r3, [r7, #6]
 800322a:	460b      	mov	r3, r1
 800322c:	717b      	strb	r3, [r7, #5]
 800322e:	4613      	mov	r3, r2
 8003230:	713b      	strb	r3, [r7, #4]
	unsigned char x,b,glyph_idx, bitmask;
	int8_t y;
	const unsigned char *glyph_scan = glyph;
 8003232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003234:	613b      	str	r3, [r7, #16]

	for (x=0; x<width; x++)
 8003236:	2300      	movs	r3, #0
 8003238:	75fb      	strb	r3, [r7, #23]
 800323a:	e04d      	b.n	80032d8 <graphics_Glyph+0xc4>
	{
		for (y=0; y<height; y++)
 800323c:	2300      	movs	r3, #0
 800323e:	75bb      	strb	r3, [r7, #22]
 8003240:	e042      	b.n	80032c8 <graphics_Glyph+0xb4>
		{
			glyph_idx = (x / 8) + y*store_width;
 8003242:	7dfb      	ldrb	r3, [r7, #23]
 8003244:	08db      	lsrs	r3, r3, #3
 8003246:	b2da      	uxtb	r2, r3
 8003248:	7dbb      	ldrb	r3, [r7, #22]
 800324a:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800324e:	fb11 f303 	smulbb	r3, r1, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	4413      	add	r3, r2
 8003256:	73fb      	strb	r3, [r7, #15]
			b = glyph_scan[glyph_idx];
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4413      	add	r3, r2
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	73bb      	strb	r3, [r7, #14]
			bitmask = 1<<(7-(x % 8));
 8003262:	7dfb      	ldrb	r3, [r7, #23]
 8003264:	43db      	mvns	r3, r3
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	2201      	movs	r2, #1
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	737b      	strb	r3, [r7, #13]
			if (b & bitmask)
 8003272:	7bba      	ldrb	r2, [r7, #14]
 8003274:	7b7b      	ldrb	r3, [r7, #13]
 8003276:	4013      	ands	r3, r2
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00f      	beq.n	800329e <graphics_Glyph+0x8a>
				draw_pixel(left-width+x,top+y,1);
 800327e:	79fa      	ldrb	r2, [r7, #7]
 8003280:	797b      	ldrb	r3, [r7, #5]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	b2da      	uxtb	r2, r3
 8003286:	7dfb      	ldrb	r3, [r7, #23]
 8003288:	4413      	add	r3, r2
 800328a:	b2d8      	uxtb	r0, r3
 800328c:	7dba      	ldrb	r2, [r7, #22]
 800328e:	79bb      	ldrb	r3, [r7, #6]
 8003290:	4413      	add	r3, r2
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2201      	movs	r2, #1
 8003296:	4619      	mov	r1, r3
 8003298:	f7ff fcc8 	bl	8002c2c <draw_pixel>
 800329c:	e00e      	b.n	80032bc <graphics_Glyph+0xa8>
			else
				draw_pixel(left-width+x,top+y,0);
 800329e:	79fa      	ldrb	r2, [r7, #7]
 80032a0:	797b      	ldrb	r3, [r7, #5]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	7dfb      	ldrb	r3, [r7, #23]
 80032a8:	4413      	add	r3, r2
 80032aa:	b2d8      	uxtb	r0, r3
 80032ac:	7dba      	ldrb	r2, [r7, #22]
 80032ae:	79bb      	ldrb	r3, [r7, #6]
 80032b0:	4413      	add	r3, r2
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2200      	movs	r2, #0
 80032b6:	4619      	mov	r1, r3
 80032b8:	f7ff fcb8 	bl	8002c2c <draw_pixel>
		for (y=0; y<height; y++)
 80032bc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	3301      	adds	r3, #1
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	75bb      	strb	r3, [r7, #22]
 80032c8:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80032cc:	793b      	ldrb	r3, [r7, #4]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	dbb7      	blt.n	8003242 <graphics_Glyph+0x2e>
	for (x=0; x<width; x++)
 80032d2:	7dfb      	ldrb	r3, [r7, #23]
 80032d4:	3301      	adds	r3, #1
 80032d6:	75fb      	strb	r3, [r7, #23]
 80032d8:	7dfa      	ldrb	r2, [r7, #23]
 80032da:	797b      	ldrb	r3, [r7, #5]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d3ad      	bcc.n	800323c <graphics_Glyph+0x28>
		}
	}
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd90      	pop	{r4, r7, pc}
	...

080032ec <graphics_text>:

void graphics_text(unsigned char left, unsigned char top, unsigned char font, char *str)
{
 80032ec:	b590      	push	{r4, r7, lr}
 80032ee:	b089      	sub	sp, #36	; 0x24
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	603b      	str	r3, [r7, #0]
 80032f4:	4603      	mov	r3, r0
 80032f6:	71fb      	strb	r3, [r7, #7]
 80032f8:	460b      	mov	r3, r1
 80032fa:	71bb      	strb	r3, [r7, #6]
 80032fc:	4613      	mov	r3, r2
 80032fe:	717b      	strb	r3, [r7, #5]
	unsigned char x = left;
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	75fb      	strb	r3, [r7, #23]
 	unsigned char width;
	unsigned char height;
	unsigned char store_width;
	const unsigned char *glyph_ptr;

  while(*str != 0x00)
 8003304:	e081      	b.n	800340a <graphics_text+0x11e>
  {

		glyph = (unsigned char)*str;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	75bb      	strb	r3, [r7, #22]

		/* check to make sure the symbol is a legal one */
		/* if not then just replace it with the default character */
		if((glyph < fonts[font].glyph_beg) || (glyph > fonts[font].glyph_end))
 800330c:	797a      	ldrb	r2, [r7, #5]
 800330e:	4944      	ldr	r1, [pc, #272]	; (8003420 <graphics_text+0x134>)
 8003310:	4613      	mov	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	3310      	adds	r3, #16
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	7dba      	ldrb	r2, [r7, #22]
 8003320:	429a      	cmp	r2, r3
 8003322:	d30b      	bcc.n	800333c <graphics_text+0x50>
 8003324:	797a      	ldrb	r2, [r7, #5]
 8003326:	493e      	ldr	r1, [pc, #248]	; (8003420 <graphics_text+0x134>)
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	3311      	adds	r3, #17
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	7dba      	ldrb	r2, [r7, #22]
 8003338:	429a      	cmp	r2, r3
 800333a:	d909      	bls.n	8003350 <graphics_text+0x64>
		{
			glyph = fonts[font].glyph_def;
 800333c:	797a      	ldrb	r2, [r7, #5]
 800333e:	4938      	ldr	r1, [pc, #224]	; (8003420 <graphics_text+0x134>)
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	3312      	adds	r3, #18
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	75bb      	strb	r3, [r7, #22]
		}


		/* make zero based index into the font data arrays */
		glyph -= fonts[font].glyph_beg;
 8003350:	797a      	ldrb	r2, [r7, #5]
 8003352:	4933      	ldr	r1, [pc, #204]	; (8003420 <graphics_text+0x134>)
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	3310      	adds	r3, #16
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	7dba      	ldrb	r2, [r7, #22]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	75bb      	strb	r3, [r7, #22]
		width = fonts[font].fixed_width;	/* check if it is a fixed width */
 8003368:	797a      	ldrb	r2, [r7, #5]
 800336a:	492d      	ldr	r1, [pc, #180]	; (8003420 <graphics_text+0x134>)
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	3308      	adds	r3, #8
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	757b      	strb	r3, [r7, #21]
		if(width == 0)
 800337c:	7d7b      	ldrb	r3, [r7, #21]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10c      	bne.n	800339c <graphics_text+0xb0>
		{
			width=fonts[font].width_table[glyph];	/* get the variable width instead */
 8003382:	797a      	ldrb	r2, [r7, #5]
 8003384:	4926      	ldr	r1, [pc, #152]	; (8003420 <graphics_text+0x134>)
 8003386:	4613      	mov	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	330c      	adds	r3, #12
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	7dbb      	ldrb	r3, [r7, #22]
 8003396:	4413      	add	r3, r2
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	757b      	strb	r3, [r7, #21]
		}

		height = fonts[font].glyph_height;
 800339c:	797a      	ldrb	r2, [r7, #5]
 800339e:	4920      	ldr	r1, [pc, #128]	; (8003420 <graphics_text+0x134>)
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	3301      	adds	r3, #1
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	753b      	strb	r3, [r7, #20]
		store_width = fonts[font].store_width;
 80033b0:	797a      	ldrb	r2, [r7, #5]
 80033b2:	491b      	ldr	r1, [pc, #108]	; (8003420 <graphics_text+0x134>)
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	74fb      	strb	r3, [r7, #19]

		glyph_ptr = fonts[font].glyph_table + ((unsigned int)glyph * (unsigned int)store_width * (unsigned int)height);
 80033c2:	797a      	ldrb	r2, [r7, #5]
 80033c4:	4916      	ldr	r1, [pc, #88]	; (8003420 <graphics_text+0x134>)
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	3304      	adds	r3, #4
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	7dbb      	ldrb	r3, [r7, #22]
 80033d6:	7cf9      	ldrb	r1, [r7, #19]
 80033d8:	fb01 f303 	mul.w	r3, r1, r3
 80033dc:	7d39      	ldrb	r1, [r7, #20]
 80033de:	fb01 f303 	mul.w	r3, r1, r3
 80033e2:	4413      	add	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]


		x+=width;
 80033e6:	7dfa      	ldrb	r2, [r7, #23]
 80033e8:	7d7b      	ldrb	r3, [r7, #21]
 80033ea:	4413      	add	r3, r2
 80033ec:	75fb      	strb	r3, [r7, #23]
		graphics_Glyph(x,top,width,height,glyph_ptr,store_width);  /* plug symbol into buffer */
 80033ee:	7d3c      	ldrb	r4, [r7, #20]
 80033f0:	7d7a      	ldrb	r2, [r7, #21]
 80033f2:	79b9      	ldrb	r1, [r7, #6]
 80033f4:	7df8      	ldrb	r0, [r7, #23]
 80033f6:	7cfb      	ldrb	r3, [r7, #19]
 80033f8:	9301      	str	r3, [sp, #4]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	4623      	mov	r3, r4
 8003400:	f7ff ff08 	bl	8003214 <graphics_Glyph>
		str++;								/* point to next character in string */
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	3301      	adds	r3, #1
 8003408:	603b      	str	r3, [r7, #0]
  while(*str != 0x00)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	f47f af79 	bne.w	8003306 <graphics_text+0x1a>
	}

}
 8003414:	bf00      	nop
 8003416:	bf00      	nop
 8003418:	371c      	adds	r7, #28
 800341a:	46bd      	mov	sp, r7
 800341c:	bd90      	pop	{r4, r7, pc}
 800341e:	bf00      	nop
 8003420:	0800abac 	.word	0x0800abac

08003424 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	80fb      	strh	r3, [r7, #6]

    if (GPIO_Pin==S_In_Pin)
 800342e:	88fb      	ldrh	r3, [r7, #6]
 8003430:	2b08      	cmp	r3, #8
 8003432:	d102      	bne.n	800343a <HAL_GPIO_EXTI_Callback+0x16>
    {
        inside = 1;
 8003434:	4b07      	ldr	r3, [pc, #28]	; (8003454 <HAL_GPIO_EXTI_Callback+0x30>)
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin==S_Out_Pin)
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	2b02      	cmp	r3, #2
 800343e:	d102      	bne.n	8003446 <HAL_GPIO_EXTI_Callback+0x22>
    {
        outside = 1;
 8003440:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_GPIO_EXTI_Callback+0x34>)
 8003442:	2201      	movs	r2, #1
 8003444:	601a      	str	r2, [r3, #0]
    }
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	200008b0 	.word	0x200008b0
 8003458:	200008b4 	.word	0x200008b4

0800345c <debouncer>:

int debouncer(volatile int* button_int, GPIO_TypeDef* GPIO_port, uint16_t GPIO_number){ // Bounce Control
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	4613      	mov	r3, r2
 8003468:	80fb      	strh	r3, [r7, #6]

	static uint8_t button_count=0;
	static int counter=0;

	if (*button_int==1)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d13b      	bne.n	80034ea <debouncer+0x8e>
	{
		if (button_count==0)
 8003472:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <debouncer+0x98>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10b      	bne.n	8003492 <debouncer+0x36>
		{
			counter=HAL_GetTick();
 800347a:	f002 fa7f 	bl	800597c <HAL_GetTick>
 800347e:	4603      	mov	r3, r0
 8003480:	461a      	mov	r2, r3
 8003482:	4b1d      	ldr	r3, [pc, #116]	; (80034f8 <debouncer+0x9c>)
 8003484:	601a      	str	r2, [r3, #0]
			button_count++;
 8003486:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <debouncer+0x98>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	3301      	adds	r3, #1
 800348c:	b2da      	uxtb	r2, r3
 800348e:	4b19      	ldr	r3, [pc, #100]	; (80034f4 <debouncer+0x98>)
 8003490:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick()-counter>=20)
 8003492:	f002 fa73 	bl	800597c <HAL_GetTick>
 8003496:	4603      	mov	r3, r0
 8003498:	4a17      	ldr	r2, [pc, #92]	; (80034f8 <debouncer+0x9c>)
 800349a:	6812      	ldr	r2, [r2, #0]
 800349c:	1a9b      	subs	r3, r3, r2
 800349e:	2b13      	cmp	r3, #19
 80034a0:	d923      	bls.n	80034ea <debouncer+0x8e>
		{
			counter=HAL_GetTick();
 80034a2:	f002 fa6b 	bl	800597c <HAL_GetTick>
 80034a6:	4603      	mov	r3, r0
 80034a8:	461a      	mov	r2, r3
 80034aa:	4b13      	ldr	r3, [pc, #76]	; (80034f8 <debouncer+0x9c>)
 80034ac:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number)!=1)
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	4619      	mov	r1, r3
 80034b2:	68b8      	ldr	r0, [r7, #8]
 80034b4:	f003 f99e 	bl	80067f4 <HAL_GPIO_ReadPin>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d003      	beq.n	80034c6 <debouncer+0x6a>
			{
				button_count=1;
 80034be:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <debouncer+0x98>)
 80034c0:	2201      	movs	r2, #1
 80034c2:	701a      	strb	r2, [r3, #0]
 80034c4:	e005      	b.n	80034d2 <debouncer+0x76>
			}
			else
			{
				button_count++;
 80034c6:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <debouncer+0x98>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	3301      	adds	r3, #1
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <debouncer+0x98>)
 80034d0:	701a      	strb	r2, [r3, #0]
			}
			if (button_count==4 ) // Debounce Period
 80034d2:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <debouncer+0x98>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d107      	bne.n	80034ea <debouncer+0x8e>
			{
				button_count=0;
 80034da:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <debouncer+0x98>)
 80034dc:	2200      	movs	r2, #0
 80034de:	701a      	strb	r2, [r3, #0]
				*button_int=0;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
				return 1;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <debouncer+0x90>
			}
		}
	}
	return 0;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	200008f8 	.word	0x200008f8
 80034f8:	200008fc 	.word	0x200008fc

080034fc <delay>:


/*----------- Delay (ms) -----------*/
void delay(uint16_t time){
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim6,0);
 8003506:	4b09      	ldr	r3, [pc, #36]	; (800352c <delay+0x30>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2200      	movs	r2, #0
 800350c:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim6))<time);
 800350e:	bf00      	nop
 8003510:	4b06      	ldr	r3, [pc, #24]	; (800352c <delay+0x30>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003516:	88fb      	ldrh	r3, [r7, #6]
 8003518:	429a      	cmp	r2, r3
 800351a:	d3f9      	bcc.n	8003510 <delay+0x14>
}
 800351c:	bf00      	nop
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	20000f04 	.word	0x20000f04

08003530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003530:	b5b0      	push	{r4, r5, r7, lr}
 8003532:	b098      	sub	sp, #96	; 0x60
 8003534:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003536:	f002 f9bb 	bl	80058b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800353a:	f000 fd59 	bl	8003ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800353e:	f001 fae3 	bl	8004b08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003542:	f001 fa63 	bl	8004a0c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8003546:	f001 fab5 	bl	8004ab4 <MX_USART6_UART_Init>
  MX_TIM5_Init();
 800354a:	f001 f927 	bl	800479c <MX_TIM5_Init>
  MX_TIM1_Init();
 800354e:	f000 fedd 	bl	800430c <MX_TIM1_Init>
  MX_TIM4_Init();
 8003552:	f001 f8ad 	bl	80046b0 <MX_TIM4_Init>
  MX_TIM2_Init();
 8003556:	f000 ff91 	bl	800447c <MX_TIM2_Init>
  MX_TIM3_Init();
 800355a:	f001 f81b 	bl	8004594 <MX_TIM3_Init>
  MX_TIM8_Init();
 800355e:	f001 f9a1 	bl	80048a4 <MX_TIM8_Init>
  MX_TIM9_Init();
 8003562:	f001 f9ef 	bl	8004944 <MX_TIM9_Init>
  MX_TIM6_Init();
 8003566:	f001 f967 	bl	8004838 <MX_TIM6_Init>
  MX_ADC1_Init();
 800356a:	f000 fdab 	bl	80040c4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800356e:	f000 fdfb 	bl	8004168 <MX_ADC2_Init>
  MX_ADC3_Init();
 8003572:	f000 fe4b 	bl	800420c <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8003576:	f001 fa73 	bl	8004a60 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800357a:	f000 fe99 	bl	80042b0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // RGB Gaming LED
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800357e:	2100      	movs	r1, #0
 8003580:	484a      	ldr	r0, [pc, #296]	; (80036ac <main+0x17c>)
 8003582:	f004 fb53 	bl	8007c2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003586:	2104      	movs	r1, #4
 8003588:	4848      	ldr	r0, [pc, #288]	; (80036ac <main+0x17c>)
 800358a:	f004 fb4f 	bl	8007c2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800358e:	2108      	movs	r1, #8
 8003590:	4846      	ldr	r0, [pc, #280]	; (80036ac <main+0x17c>)
 8003592:	f004 fb4b 	bl	8007c2c <HAL_TIM_PWM_Start>

  // Parcel Servo
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003596:	2100      	movs	r1, #0
 8003598:	4845      	ldr	r0, [pc, #276]	; (80036b0 <main+0x180>)
 800359a:	f004 fb47 	bl	8007c2c <HAL_TIM_PWM_Start>

  // Garage Servo
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800359e:	2104      	movs	r1, #4
 80035a0:	4843      	ldr	r0, [pc, #268]	; (80036b0 <main+0x180>)
 80035a2:	f004 fb43 	bl	8007c2c <HAL_TIM_PWM_Start>

  // Swning Servo
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80035a6:	2108      	movs	r1, #8
 80035a8:	4841      	ldr	r0, [pc, #260]	; (80036b0 <main+0x180>)
 80035aa:	f004 fb3f 	bl	8007c2c <HAL_TIM_PWM_Start>

  // Living Room Servo
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80035ae:	210c      	movs	r1, #12
 80035b0:	4840      	ldr	r0, [pc, #256]	; (80036b4 <main+0x184>)
 80035b2:	f004 fb3b 	bl	8007c2c <HAL_TIM_PWM_Start>

  // Bedroom Servo
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80035b6:	2104      	movs	r1, #4
 80035b8:	483e      	ldr	r0, [pc, #248]	; (80036b4 <main+0x184>)
 80035ba:	f004 fb37 	bl	8007c2c <HAL_TIM_PWM_Start>

  // Office Servo
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80035be:	2108      	movs	r1, #8
 80035c0:	483c      	ldr	r0, [pc, #240]	; (80036b4 <main+0x184>)
 80035c2:	f004 fb33 	bl	8007c2c <HAL_TIM_PWM_Start>

  // Living Room DC Motor
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80035c6:	2100      	movs	r1, #0
 80035c8:	483b      	ldr	r0, [pc, #236]	; (80036b8 <main+0x188>)
 80035ca:	f004 fb2f 	bl	8007c2c <HAL_TIM_PWM_Start>

  // Buzzer
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80035ce:	2100      	movs	r1, #0
 80035d0:	483a      	ldr	r0, [pc, #232]	; (80036bc <main+0x18c>)
 80035d2:	f004 fb2b 	bl	8007c2c <HAL_TIM_PWM_Start>

  /*----------- DHT22 Sensor-----------*/
  HAL_TIM_Base_Start(&htim6);
 80035d6:	483a      	ldr	r0, [pc, #232]	; (80036c0 <main+0x190>)
 80035d8:	f004 fa66 	bl	8007aa8 <HAL_TIM_Base_Start>

  /*----------- LDR & HW390 & Rain Initialization  -----------*/
  HAL_ADC_Start(&hadc1); // LDR
 80035dc:	4839      	ldr	r0, [pc, #228]	; (80036c4 <main+0x194>)
 80035de:	f002 fa41 	bl	8005a64 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2); // HW-390
 80035e2:	4839      	ldr	r0, [pc, #228]	; (80036c8 <main+0x198>)
 80035e4:	f002 fa3e 	bl	8005a64 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3); // Rain
 80035e8:	4838      	ldr	r0, [pc, #224]	; (80036cc <main+0x19c>)
 80035ea:	f002 fa3b 	bl	8005a64 <HAL_ADC_Start>

  //__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
  ESP_Init("iPhone Carmela","pistacho");
 80035ee:	4938      	ldr	r1, [pc, #224]	; (80036d0 <main+0x1a0>)
 80035f0:	4838      	ldr	r0, [pc, #224]	; (80036d4 <main+0x1a4>)
 80035f2:	f7fd fdb1 	bl	8001158 <ESP_Init>

  // OLED Thermostat
  oled_init(); // Initialize OLED
 80035f6:	f001 fc35 	bl	8004e64 <oled_init>

  // Frame
  line_h(0, 127, 1, 2, 1);
 80035fa:	2301      	movs	r3, #1
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	2302      	movs	r3, #2
 8003600:	2201      	movs	r2, #1
 8003602:	217f      	movs	r1, #127	; 0x7f
 8003604:	2000      	movs	r0, #0
 8003606:	f7ff fce5 	bl	8002fd4 <line_h>
  line_h(0, 127, 30, 2, 1);
 800360a:	2301      	movs	r3, #1
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	2302      	movs	r3, #2
 8003610:	221e      	movs	r2, #30
 8003612:	217f      	movs	r1, #127	; 0x7f
 8003614:	2000      	movs	r0, #0
 8003616:	f7ff fcdd 	bl	8002fd4 <line_h>
  line_v(0, 31, 1, 2, 1);
 800361a:	2301      	movs	r3, #1
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	2302      	movs	r3, #2
 8003620:	2201      	movs	r2, #1
 8003622:	211f      	movs	r1, #31
 8003624:	2000      	movs	r0, #0
 8003626:	f7ff fbb5 	bl	8002d94 <line_v>
  line_v(0, 31, 127, 2, 1);
 800362a:	2301      	movs	r3, #1
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2302      	movs	r3, #2
 8003630:	227f      	movs	r2, #127	; 0x7f
 8003632:	211f      	movs	r1, #31
 8003634:	2000      	movs	r0, #0
 8003636:	f7ff fbad 	bl	8002d94 <line_v>

  // Line
  line_h(5, 122, 15, 1, 1);
 800363a:	2301      	movs	r3, #1
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	2301      	movs	r3, #1
 8003640:	220f      	movs	r2, #15
 8003642:	217a      	movs	r1, #122	; 0x7a
 8003644:	2005      	movs	r0, #5
 8003646:	f7ff fcc5 	bl	8002fd4 <line_h>

  graphics_text(7, 5, FONT_SEVEN_DOT, "IN");
 800364a:	4b23      	ldr	r3, [pc, #140]	; (80036d8 <main+0x1a8>)
 800364c:	2202      	movs	r2, #2
 800364e:	2105      	movs	r1, #5
 8003650:	2007      	movs	r0, #7
 8003652:	f7ff fe4b 	bl	80032ec <graphics_text>
  graphics_text(7, 19, FONT_SEVEN_DOT, "OUT");
 8003656:	4b21      	ldr	r3, [pc, #132]	; (80036dc <main+0x1ac>)
 8003658:	2202      	movs	r2, #2
 800365a:	2113      	movs	r1, #19
 800365c:	2007      	movs	r0, #7
 800365e:	f7ff fe45 	bl	80032ec <graphics_text>

  oled_update(); // Update OLED
 8003662:	f001 fbab 	bl	8004dbc <oled_update>
  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	ESP_messageHandler();
 8003666:	f7fd fea3 	bl	80013b0 <ESP_messageHandler>

		// Vehicle Doorbell
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) == 0){
 800366a:	2101      	movs	r1, #1
 800366c:	481c      	ldr	r0, [pc, #112]	; (80036e0 <main+0x1b0>)
 800366e:	f003 f8c1 	bl	80067f4 <HAL_GPIO_ReadPin>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d152      	bne.n	800371e <main+0x1ee>

			int known = readRFID();
 8003678:	f7fe fe78 	bl	800236c <readRFID>
 800367c:	6578      	str	r0, [r7, #84]	; 0x54
			if(known == 1){
 800367e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003680:	2b01      	cmp	r3, #1
 8003682:	d133      	bne.n	80036ec <main+0x1bc>
				char kn[15] = "OPENING DOOR \n\n";
 8003684:	4b17      	ldr	r3, [pc, #92]	; (80036e4 <main+0x1b4>)
 8003686:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800368a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800368c:	c407      	stmia	r4!, {r0, r1, r2}
 800368e:	8023      	strh	r3, [r4, #0]
 8003690:	3402      	adds	r4, #2
 8003692:	0c1b      	lsrs	r3, r3, #16
 8003694:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart6, (uint8_t *) kn, 15, HAL_MAX_DELAY);
 8003696:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800369a:	f04f 33ff 	mov.w	r3, #4294967295
 800369e:	220f      	movs	r2, #15
 80036a0:	4811      	ldr	r0, [pc, #68]	; (80036e8 <main+0x1b8>)
 80036a2:	f005 f940 	bl	8008926 <HAL_UART_Transmit>

				actParcelRFID();
 80036a6:	f7fe fef7 	bl	8002498 <actParcelRFID>
 80036aa:	e038      	b.n	800371e <main+0x1ee>
 80036ac:	20000f4c 	.word	0x20000f4c
 80036b0:	20001020 	.word	0x20001020
 80036b4:	20000e2c 	.word	0x20000e2c
 80036b8:	20000f94 	.word	0x20000f94
 80036bc:	20000cb4 	.word	0x20000cb4
 80036c0:	20000f04 	.word	0x20000f04
 80036c4:	20000e74 	.word	0x20000e74
 80036c8:	20000d48 	.word	0x20000d48
 80036cc:	20000ebc 	.word	0x20000ebc
 80036d0:	0800ab28 	.word	0x0800ab28
 80036d4:	0800ab34 	.word	0x0800ab34
 80036d8:	0800ab44 	.word	0x0800ab44
 80036dc:	0800ab48 	.word	0x0800ab48
 80036e0:	40021000 	.word	0x40021000
 80036e4:	0800ab88 	.word	0x0800ab88
 80036e8:	20000fdc 	.word	0x20000fdc
			}
			else if(known == 0){
 80036ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d115      	bne.n	800371e <main+0x1ee>
				char unkn[19] = "CALLING THE BELL \n\n";
 80036f2:	4ba6      	ldr	r3, [pc, #664]	; (800398c <main+0x45c>)
 80036f4:	f107 0418 	add.w	r4, r7, #24
 80036f8:	461d      	mov	r5, r3
 80036fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036fe:	682b      	ldr	r3, [r5, #0]
 8003700:	461a      	mov	r2, r3
 8003702:	8022      	strh	r2, [r4, #0]
 8003704:	3402      	adds	r4, #2
 8003706:	0c1b      	lsrs	r3, r3, #16
 8003708:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart6, (uint8_t *) unkn, 19, HAL_MAX_DELAY);
 800370a:	f107 0118 	add.w	r1, r7, #24
 800370e:	f04f 33ff 	mov.w	r3, #4294967295
 8003712:	2213      	movs	r2, #19
 8003714:	489e      	ldr	r0, [pc, #632]	; (8003990 <main+0x460>)
 8003716:	f005 f906 	bl	8008926 <HAL_UART_Transmit>

				playBell();
 800371a:	f7fd fb4b 	bl	8000db4 <playBell>
			}
		}

		// People Doorbell
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){
 800371e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003722:	489c      	ldr	r0, [pc, #624]	; (8003994 <main+0x464>)
 8003724:	f003 f866 	bl	80067f4 <HAL_GPIO_ReadPin>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <main+0x202>

				playBell();
 800372e:	f7fd fb41 	bl	8000db4 <playBell>
		}

		// Alarm Stop
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == 0){
 8003732:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003736:	4897      	ldr	r0, [pc, #604]	; (8003994 <main+0x464>)
 8003738:	f003 f85c 	bl	80067f4 <HAL_GPIO_ReadPin>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d103      	bne.n	800374a <main+0x21a>

			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8003742:	4b95      	ldr	r3, [pc, #596]	; (8003998 <main+0x468>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2200      	movs	r2, #0
 8003748:	635a      	str	r2, [r3, #52]	; 0x34
		}

		// Alarm
		if (debouncer(&inside, S_In_GPIO_Port, S_In_Pin)){
 800374a:	2208      	movs	r2, #8
 800374c:	4993      	ldr	r1, [pc, #588]	; (800399c <main+0x46c>)
 800374e:	4894      	ldr	r0, [pc, #592]	; (80039a0 <main+0x470>)
 8003750:	f7ff fe84 	bl	800345c <debouncer>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <main+0x236>

			if(vSecurity[0] == '1') playAlarm();
 800375a:	4b92      	ldr	r3, [pc, #584]	; (80039a4 <main+0x474>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b31      	cmp	r3, #49	; 0x31
 8003760:	d101      	bne.n	8003766 <main+0x236>
 8003762:	f7fd fb5d 	bl	8000e20 <playAlarm>
		}
		if (debouncer(&outside, S_Out_GPIO_Port, S_Out_Pin)){
 8003766:	2202      	movs	r2, #2
 8003768:	498c      	ldr	r1, [pc, #560]	; (800399c <main+0x46c>)
 800376a:	488f      	ldr	r0, [pc, #572]	; (80039a8 <main+0x478>)
 800376c:	f7ff fe76 	bl	800345c <debouncer>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d005      	beq.n	8003782 <main+0x252>

			if(vSecurity[1] == '1') playAlarm();
 8003776:	4b8b      	ldr	r3, [pc, #556]	; (80039a4 <main+0x474>)
 8003778:	785b      	ldrb	r3, [r3, #1]
 800377a:	2b31      	cmp	r3, #49	; 0x31
 800377c:	d101      	bne.n	8003782 <main+0x252>
 800377e:	f7fd fb4f 	bl	8000e20 <playAlarm>
		}

		// PARCEL DOOR (90)
		if(vWindow[0]=='1' || vOutside[4]=='1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 91);
 8003782:	4b8a      	ldr	r3, [pc, #552]	; (80039ac <main+0x47c>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b31      	cmp	r3, #49	; 0x31
 8003788:	d003      	beq.n	8003792 <main+0x262>
 800378a:	4b89      	ldr	r3, [pc, #548]	; (80039b0 <main+0x480>)
 800378c:	791b      	ldrb	r3, [r3, #4]
 800378e:	2b31      	cmp	r3, #49	; 0x31
 8003790:	d103      	bne.n	800379a <main+0x26a>
 8003792:	4b88      	ldr	r3, [pc, #544]	; (80039b4 <main+0x484>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	225b      	movs	r2, #91	; 0x5b
 8003798:	635a      	str	r2, [r3, #52]	; 0x34
		if(vWindow[0]=='0' || vOutside[4]=='0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89);
 800379a:	4b84      	ldr	r3, [pc, #528]	; (80039ac <main+0x47c>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b30      	cmp	r3, #48	; 0x30
 80037a0:	d003      	beq.n	80037aa <main+0x27a>
 80037a2:	4b83      	ldr	r3, [pc, #524]	; (80039b0 <main+0x480>)
 80037a4:	791b      	ldrb	r3, [r3, #4]
 80037a6:	2b30      	cmp	r3, #48	; 0x30
 80037a8:	d103      	bne.n	80037b2 <main+0x282>
 80037aa:	4b82      	ldr	r3, [pc, #520]	; (80039b4 <main+0x484>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2259      	movs	r2, #89	; 0x59
 80037b0:	635a      	str	r2, [r3, #52]	; 0x34

		// GARAGE DOOR (90)
		if(vWindow[1]=='1' || vGarage[1] == '1') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 92); // Faster at 30
 80037b2:	4b7e      	ldr	r3, [pc, #504]	; (80039ac <main+0x47c>)
 80037b4:	785b      	ldrb	r3, [r3, #1]
 80037b6:	2b31      	cmp	r3, #49	; 0x31
 80037b8:	d003      	beq.n	80037c2 <main+0x292>
 80037ba:	4b7f      	ldr	r3, [pc, #508]	; (80039b8 <main+0x488>)
 80037bc:	785b      	ldrb	r3, [r3, #1]
 80037be:	2b31      	cmp	r3, #49	; 0x31
 80037c0:	d103      	bne.n	80037ca <main+0x29a>
 80037c2:	4b7c      	ldr	r3, [pc, #496]	; (80039b4 <main+0x484>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	225c      	movs	r2, #92	; 0x5c
 80037c8:	639a      	str	r2, [r3, #56]	; 0x38
		if(vWindow[1]=='0' || vGarage[1] == '0') __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 89);
 80037ca:	4b78      	ldr	r3, [pc, #480]	; (80039ac <main+0x47c>)
 80037cc:	785b      	ldrb	r3, [r3, #1]
 80037ce:	2b30      	cmp	r3, #48	; 0x30
 80037d0:	d003      	beq.n	80037da <main+0x2aa>
 80037d2:	4b79      	ldr	r3, [pc, #484]	; (80039b8 <main+0x488>)
 80037d4:	785b      	ldrb	r3, [r3, #1]
 80037d6:	2b30      	cmp	r3, #48	; 0x30
 80037d8:	d103      	bne.n	80037e2 <main+0x2b2>
 80037da:	4b76      	ldr	r3, [pc, #472]	; (80039b4 <main+0x484>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2259      	movs	r2, #89	; 0x59
 80037e0:	639a      	str	r2, [r3, #56]	; 0x38

		// CLOTHES LINE AWNING (90)
		if(vOutside[0]=='1'){
 80037e2:	4b73      	ldr	r3, [pc, #460]	; (80039b0 <main+0x480>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b31      	cmp	r3, #49	; 0x31
 80037e8:	d10e      	bne.n	8003808 <main+0x2d8>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 91);
 80037ea:	4b72      	ldr	r3, [pc, #456]	; (80039b4 <main+0x484>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	225b      	movs	r2, #91	; 0x5b
 80037f0:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 80037f2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80037f6:	f002 f8cd 	bl	8005994 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90);
 80037fa:	4b6e      	ldr	r3, [pc, #440]	; (80039b4 <main+0x484>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	225a      	movs	r2, #90	; 0x5a
 8003800:	63da      	str	r2, [r3, #60]	; 0x3c
			awning = 1;
 8003802:	4b6e      	ldr	r3, [pc, #440]	; (80039bc <main+0x48c>)
 8003804:	2201      	movs	r2, #1
 8003806:	601a      	str	r2, [r3, #0]
		}
		if(vOutside[0]=='0'){
 8003808:	4b69      	ldr	r3, [pc, #420]	; (80039b0 <main+0x480>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b30      	cmp	r3, #48	; 0x30
 800380e:	d10e      	bne.n	800382e <main+0x2fe>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 88);
 8003810:	4b68      	ldr	r3, [pc, #416]	; (80039b4 <main+0x484>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2258      	movs	r2, #88	; 0x58
 8003816:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 8003818:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800381c:	f002 f8ba 	bl	8005994 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90);
 8003820:	4b64      	ldr	r3, [pc, #400]	; (80039b4 <main+0x484>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	225a      	movs	r2, #90	; 0x5a
 8003826:	63da      	str	r2, [r3, #60]	; 0x3c
			awning = 0;
 8003828:	4b64      	ldr	r3, [pc, #400]	; (80039bc <main+0x48c>)
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
		}
		vOutside[0]='x';
 800382e:	4b60      	ldr	r3, [pc, #384]	; (80039b0 <main+0x480>)
 8003830:	2278      	movs	r2, #120	; 0x78
 8003832:	701a      	strb	r2, [r3, #0]
		}
		vWindow[2]='x';
		vLiving[5]='x';*/

		// BEDROOM WINDOW (90)
		if(vWindow[3]=='1' || vBedroom[3]=='1') {
 8003834:	4b5d      	ldr	r3, [pc, #372]	; (80039ac <main+0x47c>)
 8003836:	78db      	ldrb	r3, [r3, #3]
 8003838:	2b31      	cmp	r3, #49	; 0x31
 800383a:	d003      	beq.n	8003844 <main+0x314>
 800383c:	4b60      	ldr	r3, [pc, #384]	; (80039c0 <main+0x490>)
 800383e:	78db      	ldrb	r3, [r3, #3]
 8003840:	2b31      	cmp	r3, #49	; 0x31
 8003842:	d10b      	bne.n	800385c <main+0x32c>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 92);
 8003844:	4b5f      	ldr	r3, [pc, #380]	; (80039c4 <main+0x494>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	225c      	movs	r2, #92	; 0x5c
 800384a:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(3000);
 800384c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003850:	f002 f8a0 	bl	8005994 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 90);
 8003854:	4b5b      	ldr	r3, [pc, #364]	; (80039c4 <main+0x494>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	225a      	movs	r2, #90	; 0x5a
 800385a:	639a      	str	r2, [r3, #56]	; 0x38
		}
		if(vWindow[3]=='0' || vBedroom[3]=='0') {
 800385c:	4b53      	ldr	r3, [pc, #332]	; (80039ac <main+0x47c>)
 800385e:	78db      	ldrb	r3, [r3, #3]
 8003860:	2b30      	cmp	r3, #48	; 0x30
 8003862:	d003      	beq.n	800386c <main+0x33c>
 8003864:	4b56      	ldr	r3, [pc, #344]	; (80039c0 <main+0x490>)
 8003866:	78db      	ldrb	r3, [r3, #3]
 8003868:	2b30      	cmp	r3, #48	; 0x30
 800386a:	d10b      	bne.n	8003884 <main+0x354>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 89);
 800386c:	4b55      	ldr	r3, [pc, #340]	; (80039c4 <main+0x494>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2259      	movs	r2, #89	; 0x59
 8003872:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(3000);
 8003874:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003878:	f002 f88c 	bl	8005994 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 90);
 800387c:	4b51      	ldr	r3, [pc, #324]	; (80039c4 <main+0x494>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	225a      	movs	r2, #90	; 0x5a
 8003882:	639a      	str	r2, [r3, #56]	; 0x38
		}
		vWindow[3]='x';
 8003884:	4b49      	ldr	r3, [pc, #292]	; (80039ac <main+0x47c>)
 8003886:	2278      	movs	r2, #120	; 0x78
 8003888:	70da      	strb	r2, [r3, #3]
		vBedroom[3]='x';
 800388a:	4b4d      	ldr	r3, [pc, #308]	; (80039c0 <main+0x490>)
 800388c:	2278      	movs	r2, #120	; 0x78
 800388e:	70da      	strb	r2, [r3, #3]

		// OFFICE WINDOW (90)
		if(vWindow[4]=='1' || vOffice[11]=='1') {
 8003890:	4b46      	ldr	r3, [pc, #280]	; (80039ac <main+0x47c>)
 8003892:	791b      	ldrb	r3, [r3, #4]
 8003894:	2b31      	cmp	r3, #49	; 0x31
 8003896:	d003      	beq.n	80038a0 <main+0x370>
 8003898:	4b4b      	ldr	r3, [pc, #300]	; (80039c8 <main+0x498>)
 800389a:	7adb      	ldrb	r3, [r3, #11]
 800389c:	2b31      	cmp	r3, #49	; 0x31
 800389e:	d10b      	bne.n	80038b8 <main+0x388>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 91);
 80038a0:	4b48      	ldr	r3, [pc, #288]	; (80039c4 <main+0x494>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	225b      	movs	r2, #91	; 0x5b
 80038a6:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 80038a8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80038ac:	f002 f872 	bl	8005994 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 90);
 80038b0:	4b44      	ldr	r3, [pc, #272]	; (80039c4 <main+0x494>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	225a      	movs	r2, #90	; 0x5a
 80038b6:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		if(vWindow[4]=='0' || vOffice[11]=='0') {
 80038b8:	4b3c      	ldr	r3, [pc, #240]	; (80039ac <main+0x47c>)
 80038ba:	791b      	ldrb	r3, [r3, #4]
 80038bc:	2b30      	cmp	r3, #48	; 0x30
 80038be:	d003      	beq.n	80038c8 <main+0x398>
 80038c0:	4b41      	ldr	r3, [pc, #260]	; (80039c8 <main+0x498>)
 80038c2:	7adb      	ldrb	r3, [r3, #11]
 80038c4:	2b30      	cmp	r3, #48	; 0x30
 80038c6:	d10b      	bne.n	80038e0 <main+0x3b0>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 88);
 80038c8:	4b3e      	ldr	r3, [pc, #248]	; (80039c4 <main+0x494>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2258      	movs	r2, #88	; 0x58
 80038ce:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(3000);
 80038d0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80038d4:	f002 f85e 	bl	8005994 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 90);
 80038d8:	4b3a      	ldr	r3, [pc, #232]	; (80039c4 <main+0x494>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	225a      	movs	r2, #90	; 0x5a
 80038de:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		vWindow[4]='x';
 80038e0:	4b32      	ldr	r3, [pc, #200]	; (80039ac <main+0x47c>)
 80038e2:	2278      	movs	r2, #120	; 0x78
 80038e4:	711a      	strb	r2, [r3, #4]
		vOffice[11]='x';
 80038e6:	4b38      	ldr	r3, [pc, #224]	; (80039c8 <main+0x498>)
 80038e8:	2278      	movs	r2, #120	; 0x78
 80038ea:	72da      	strb	r2, [r3, #11]

		// PARCEL LIMIT SWITCH
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == 0){
 80038ec:	2140      	movs	r1, #64	; 0x40
 80038ee:	482b      	ldr	r0, [pc, #172]	; (800399c <main+0x46c>)
 80038f0:	f002 ff80 	bl	80067f4 <HAL_GPIO_ReadPin>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d129      	bne.n	800394e <main+0x41e>

			if (vWindow[0]=='1' || vOutside[4]=='1'){
 80038fa:	4b2c      	ldr	r3, [pc, #176]	; (80039ac <main+0x47c>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b31      	cmp	r3, #49	; 0x31
 8003900:	d003      	beq.n	800390a <main+0x3da>
 8003902:	4b2b      	ldr	r3, [pc, #172]	; (80039b0 <main+0x480>)
 8003904:	791b      	ldrb	r3, [r3, #4]
 8003906:	2b31      	cmp	r3, #49	; 0x31
 8003908:	d107      	bne.n	800391a <main+0x3ea>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 89); // Parcel Servo
 800390a:	4b2a      	ldr	r3, [pc, #168]	; (80039b4 <main+0x484>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2259      	movs	r2, #89	; 0x59
 8003910:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(1000);
 8003912:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003916:	f002 f83d 	bl	8005994 <HAL_Delay>
			}
			if (vWindow[0]=='0' || vOutside[4]=='0'){
 800391a:	4b24      	ldr	r3, [pc, #144]	; (80039ac <main+0x47c>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b30      	cmp	r3, #48	; 0x30
 8003920:	d003      	beq.n	800392a <main+0x3fa>
 8003922:	4b23      	ldr	r3, [pc, #140]	; (80039b0 <main+0x480>)
 8003924:	791b      	ldrb	r3, [r3, #4]
 8003926:	2b30      	cmp	r3, #48	; 0x30
 8003928:	d107      	bne.n	800393a <main+0x40a>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 91); // Parcel Servo
 800392a:	4b22      	ldr	r3, [pc, #136]	; (80039b4 <main+0x484>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	225b      	movs	r2, #91	; 0x5b
 8003930:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(1000);
 8003932:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003936:	f002 f82d 	bl	8005994 <HAL_Delay>
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 90); // Parcel Servo
 800393a:	4b1e      	ldr	r3, [pc, #120]	; (80039b4 <main+0x484>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	225a      	movs	r2, #90	; 0x5a
 8003940:	635a      	str	r2, [r3, #52]	; 0x34
			vWindow[0]='x'; // Parcel Servo
 8003942:	4b1a      	ldr	r3, [pc, #104]	; (80039ac <main+0x47c>)
 8003944:	2278      	movs	r2, #120	; 0x78
 8003946:	701a      	strb	r2, [r3, #0]
			vOutside[4]='x'; // Parcel Servo
 8003948:	4b19      	ldr	r3, [pc, #100]	; (80039b0 <main+0x480>)
 800394a:	2278      	movs	r2, #120	; 0x78
 800394c:	711a      	strb	r2, [r3, #4]
		}

		// GARAGE LIMIT SWITCH
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == 0){
 800394e:	2110      	movs	r1, #16
 8003950:	4812      	ldr	r0, [pc, #72]	; (800399c <main+0x46c>)
 8003952:	f002 ff4f 	bl	80067f4 <HAL_GPIO_ReadPin>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d14b      	bne.n	80039f4 <main+0x4c4>

			if (vWindow[1]=='1' || vGarage[1]=='1'){
 800395c:	4b13      	ldr	r3, [pc, #76]	; (80039ac <main+0x47c>)
 800395e:	785b      	ldrb	r3, [r3, #1]
 8003960:	2b31      	cmp	r3, #49	; 0x31
 8003962:	d003      	beq.n	800396c <main+0x43c>
 8003964:	4b14      	ldr	r3, [pc, #80]	; (80039b8 <main+0x488>)
 8003966:	785b      	ldrb	r3, [r3, #1]
 8003968:	2b31      	cmp	r3, #49	; 0x31
 800396a:	d107      	bne.n	800397c <main+0x44c>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 89); // Garage Servo
 800396c:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <main+0x484>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2259      	movs	r2, #89	; 0x59
 8003972:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(1000);
 8003974:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003978:	f002 f80c 	bl	8005994 <HAL_Delay>
			}
			if (vWindow[1]=='0' || vGarage[1]=='0'){
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <main+0x47c>)
 800397e:	785b      	ldrb	r3, [r3, #1]
 8003980:	2b30      	cmp	r3, #48	; 0x30
 8003982:	d025      	beq.n	80039d0 <main+0x4a0>
 8003984:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <main+0x488>)
 8003986:	785b      	ldrb	r3, [r3, #1]
 8003988:	e020      	b.n	80039cc <main+0x49c>
 800398a:	bf00      	nop
 800398c:	0800ab98 	.word	0x0800ab98
 8003990:	20000fdc 	.word	0x20000fdc
 8003994:	40020800 	.word	0x40020800
 8003998:	20000cb4 	.word	0x20000cb4
 800399c:	40021000 	.word	0x40021000
 80039a0:	200008b0 	.word	0x200008b0
 80039a4:	20000970 	.word	0x20000970
 80039a8:	200008b4 	.word	0x200008b4
 80039ac:	20000924 	.word	0x20000924
 80039b0:	2000095c 	.word	0x2000095c
 80039b4:	20001020 	.word	0x20001020
 80039b8:	20000968 	.word	0x20000968
 80039bc:	200008d0 	.word	0x200008d0
 80039c0:	20000974 	.word	0x20000974
 80039c4:	20000e2c 	.word	0x20000e2c
 80039c8:	20000950 	.word	0x20000950
 80039cc:	2b30      	cmp	r3, #48	; 0x30
 80039ce:	d107      	bne.n	80039e0 <main+0x4b0>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 92); // Garage Servo
 80039d0:	4b5a      	ldr	r3, [pc, #360]	; (8003b3c <main+0x60c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	225c      	movs	r2, #92	; 0x5c
 80039d6:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(1000);
 80039d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039dc:	f001 ffda 	bl	8005994 <HAL_Delay>
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 90); // Garage Servo
 80039e0:	4b56      	ldr	r3, [pc, #344]	; (8003b3c <main+0x60c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	225a      	movs	r2, #90	; 0x5a
 80039e6:	639a      	str	r2, [r3, #56]	; 0x38
			vWindow[1]='x'; // Garage Servo
 80039e8:	4b55      	ldr	r3, [pc, #340]	; (8003b40 <main+0x610>)
 80039ea:	2278      	movs	r2, #120	; 0x78
 80039ec:	705a      	strb	r2, [r3, #1]
			vGarage[1]='x'; // Garage Servo
 80039ee:	4b55      	ldr	r3, [pc, #340]	; (8003b44 <main+0x614>)
 80039f0:	2278      	movs	r2, #120	; 0x78
 80039f2:	705a      	strb	r2, [r3, #1]
		}

		// SETTINGS
		f_on = temp_value(vSettings[0], vSettings[1], vSettings[2]);
 80039f4:	4b54      	ldr	r3, [pc, #336]	; (8003b48 <main+0x618>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	4a53      	ldr	r2, [pc, #332]	; (8003b48 <main+0x618>)
 80039fa:	7851      	ldrb	r1, [r2, #1]
 80039fc:	4a52      	ldr	r2, [pc, #328]	; (8003b48 <main+0x618>)
 80039fe:	7892      	ldrb	r2, [r2, #2]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fe fd85 	bl	8002510 <temp_value>
 8003a06:	eef0 7a40 	vmov.f32	s15, s0
 8003a0a:	4b50      	ldr	r3, [pc, #320]	; (8003b4c <main+0x61c>)
 8003a0c:	edc3 7a00 	vstr	s15, [r3]
		f_off = temp_value(vSettings[3], vSettings[4], vSettings[5]);
 8003a10:	4b4d      	ldr	r3, [pc, #308]	; (8003b48 <main+0x618>)
 8003a12:	78db      	ldrb	r3, [r3, #3]
 8003a14:	4a4c      	ldr	r2, [pc, #304]	; (8003b48 <main+0x618>)
 8003a16:	7911      	ldrb	r1, [r2, #4]
 8003a18:	4a4b      	ldr	r2, [pc, #300]	; (8003b48 <main+0x618>)
 8003a1a:	7952      	ldrb	r2, [r2, #5]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fe fd77 	bl	8002510 <temp_value>
 8003a22:	eef0 7a40 	vmov.f32	s15, s0
 8003a26:	4b4a      	ldr	r3, [pc, #296]	; (8003b50 <main+0x620>)
 8003a28:	edc3 7a00 	vstr	s15, [r3]
		h_on = temp_value(vSettings[6], vSettings[7], vSettings[8]);
 8003a2c:	4b46      	ldr	r3, [pc, #280]	; (8003b48 <main+0x618>)
 8003a2e:	799b      	ldrb	r3, [r3, #6]
 8003a30:	4a45      	ldr	r2, [pc, #276]	; (8003b48 <main+0x618>)
 8003a32:	79d1      	ldrb	r1, [r2, #7]
 8003a34:	4a44      	ldr	r2, [pc, #272]	; (8003b48 <main+0x618>)
 8003a36:	7a12      	ldrb	r2, [r2, #8]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fe fd69 	bl	8002510 <temp_value>
 8003a3e:	eef0 7a40 	vmov.f32	s15, s0
 8003a42:	4b44      	ldr	r3, [pc, #272]	; (8003b54 <main+0x624>)
 8003a44:	edc3 7a00 	vstr	s15, [r3]
		h_off = temp_value(vSettings[9], vSettings[10], vSettings[11]);
 8003a48:	4b3f      	ldr	r3, [pc, #252]	; (8003b48 <main+0x618>)
 8003a4a:	7a5b      	ldrb	r3, [r3, #9]
 8003a4c:	4a3e      	ldr	r2, [pc, #248]	; (8003b48 <main+0x618>)
 8003a4e:	7a91      	ldrb	r1, [r2, #10]
 8003a50:	4a3d      	ldr	r2, [pc, #244]	; (8003b48 <main+0x618>)
 8003a52:	7ad2      	ldrb	r2, [r2, #11]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fe fd5b 	bl	8002510 <temp_value>
 8003a5a:	eef0 7a40 	vmov.f32	s15, s0
 8003a5e:	4b3e      	ldr	r3, [pc, #248]	; (8003b58 <main+0x628>)
 8003a60:	edc3 7a00 	vstr	s15, [r3]

		rh_min = rh_value(vSettings[12], vSettings[13]);
 8003a64:	4b38      	ldr	r3, [pc, #224]	; (8003b48 <main+0x618>)
 8003a66:	7b1b      	ldrb	r3, [r3, #12]
 8003a68:	4a37      	ldr	r2, [pc, #220]	; (8003b48 <main+0x618>)
 8003a6a:	7b52      	ldrb	r2, [r2, #13]
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fe fcfa 	bl	8002468 <rh_value>
 8003a74:	4603      	mov	r3, r0
 8003a76:	4a39      	ldr	r2, [pc, #228]	; (8003b5c <main+0x62c>)
 8003a78:	6013      	str	r3, [r2, #0]
		rh_max = rh_value(vSettings[14], vSettings[15]);
 8003a7a:	4b33      	ldr	r3, [pc, #204]	; (8003b48 <main+0x618>)
 8003a7c:	7b9b      	ldrb	r3, [r3, #14]
 8003a7e:	4a32      	ldr	r2, [pc, #200]	; (8003b48 <main+0x618>)
 8003a80:	7bd2      	ldrb	r2, [r2, #15]
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe fcef 	bl	8002468 <rh_value>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	4a34      	ldr	r2, [pc, #208]	; (8003b60 <main+0x630>)
 8003a8e:	6013      	str	r3, [r2, #0]


		/*----------- Sensor Reading -----------*/

		// LDR
		if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8003a90:	f04f 31ff 	mov.w	r1, #4294967295
 8003a94:	4833      	ldr	r0, [pc, #204]	; (8003b64 <main+0x634>)
 8003a96:	f002 f8b7 	bl	8005c08 <HAL_ADC_PollForConversion>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d106      	bne.n	8003aae <main+0x57e>
			LDR_value = HAL_ADC_GetValue(&hadc1);
 8003aa0:	4830      	ldr	r0, [pc, #192]	; (8003b64 <main+0x634>)
 8003aa2:	f002 f93c 	bl	8005d1e <HAL_ADC_GetValue>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	4b2f      	ldr	r3, [pc, #188]	; (8003b68 <main+0x638>)
 8003aac:	801a      	strh	r2, [r3, #0]

		ldr(LDR_value);
 8003aae:	4b2e      	ldr	r3, [pc, #184]	; (8003b68 <main+0x638>)
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fe fbe2 	bl	800227c <ldr>

		// Rain
		if(HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY) == HAL_OK)
 8003ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8003abc:	482b      	ldr	r0, [pc, #172]	; (8003b6c <main+0x63c>)
 8003abe:	f002 f8a3 	bl	8005c08 <HAL_ADC_PollForConversion>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d106      	bne.n	8003ad6 <main+0x5a6>
			Rain_read = HAL_ADC_GetValue(&hadc3);
 8003ac8:	4828      	ldr	r0, [pc, #160]	; (8003b6c <main+0x63c>)
 8003aca:	f002 f928 	bl	8005d1e <HAL_ADC_GetValue>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	4b27      	ldr	r3, [pc, #156]	; (8003b70 <main+0x640>)
 8003ad4:	801a      	strh	r2, [r3, #0]

		Rain = 100 - ((100*Rain_read)/255);
 8003ad6:	4b26      	ldr	r3, [pc, #152]	; (8003b70 <main+0x640>)
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	2364      	movs	r3, #100	; 0x64
 8003ade:	fb03 f302 	mul.w	r3, r3, r2
 8003ae2:	4a24      	ldr	r2, [pc, #144]	; (8003b74 <main+0x644>)
 8003ae4:	fb82 1203 	smull	r1, r2, r2, r3
 8003ae8:	441a      	add	r2, r3
 8003aea:	11d2      	asrs	r2, r2, #7
 8003aec:	17db      	asrs	r3, r3, #31
 8003aee:	1a9b      	subs	r3, r3, r2
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	3364      	adds	r3, #100	; 0x64
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	4b20      	ldr	r3, [pc, #128]	; (8003b78 <main+0x648>)
 8003af8:	801a      	strh	r2, [r3, #0]

		if(vOutside[5] == '1'){
 8003afa:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <main+0x64c>)
 8003afc:	795b      	ldrb	r3, [r3, #5]
 8003afe:	2b31      	cmp	r3, #49	; 0x31
 8003b00:	d15e      	bne.n	8003bc0 <main+0x690>
			// There are clothes and it is raining (closed awning)
			if (Rain>5 && vOutside[6] == '1' && awning == 0){
 8003b02:	4b1d      	ldr	r3, [pc, #116]	; (8003b78 <main+0x648>)
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	2b05      	cmp	r3, #5
 8003b08:	d93c      	bls.n	8003b84 <main+0x654>
 8003b0a:	4b1c      	ldr	r3, [pc, #112]	; (8003b7c <main+0x64c>)
 8003b0c:	799b      	ldrb	r3, [r3, #6]
 8003b0e:	2b31      	cmp	r3, #49	; 0x31
 8003b10:	d138      	bne.n	8003b84 <main+0x654>
 8003b12:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <main+0x650>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d134      	bne.n	8003b84 <main+0x654>

				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 91); // Open awning
 8003b1a:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <main+0x60c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	225b      	movs	r2, #91	; 0x5b
 8003b20:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_Delay(3000);
 8003b22:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003b26:	f001 ff35 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90);
 8003b2a:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <main+0x60c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	225a      	movs	r2, #90	; 0x5a
 8003b30:	63da      	str	r2, [r3, #60]	; 0x3c
				awning = 1;
 8003b32:	4b13      	ldr	r3, [pc, #76]	; (8003b80 <main+0x650>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	e03f      	b.n	8003bba <main+0x68a>
 8003b3a:	bf00      	nop
 8003b3c:	20001020 	.word	0x20001020
 8003b40:	20000924 	.word	0x20000924
 8003b44:	20000968 	.word	0x20000968
 8003b48:	2000090c 	.word	0x2000090c
 8003b4c:	200008b8 	.word	0x200008b8
 8003b50:	200008bc 	.word	0x200008bc
 8003b54:	200008c0 	.word	0x200008c0
 8003b58:	200008c4 	.word	0x200008c4
 8003b5c:	200008c8 	.word	0x200008c8
 8003b60:	200008cc 	.word	0x200008cc
 8003b64:	20000e74 	.word	0x20000e74
 8003b68:	200008dc 	.word	0x200008dc
 8003b6c:	20000ebc 	.word	0x20000ebc
 8003b70:	200008e2 	.word	0x200008e2
 8003b74:	80808081 	.word	0x80808081
 8003b78:	200008e4 	.word	0x200008e4
 8003b7c:	2000095c 	.word	0x2000095c
 8003b80:	200008d0 	.word	0x200008d0

			// There are clothes and it is raining (opened awning)
			// There are not clothes and it is raining (closed awning)

			// There are not clothes and it is raining (opened awning)
			else if (Rain>5 && vOutside[6] == '0' && awning == 1){
 8003b84:	4bbc      	ldr	r3, [pc, #752]	; (8003e78 <main+0x948>)
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	2b05      	cmp	r3, #5
 8003b8a:	d916      	bls.n	8003bba <main+0x68a>
 8003b8c:	4bbb      	ldr	r3, [pc, #748]	; (8003e7c <main+0x94c>)
 8003b8e:	799b      	ldrb	r3, [r3, #6]
 8003b90:	2b30      	cmp	r3, #48	; 0x30
 8003b92:	d112      	bne.n	8003bba <main+0x68a>
 8003b94:	4bba      	ldr	r3, [pc, #744]	; (8003e80 <main+0x950>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d10e      	bne.n	8003bba <main+0x68a>

				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 88); // Close awning
 8003b9c:	4bb9      	ldr	r3, [pc, #740]	; (8003e84 <main+0x954>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2258      	movs	r2, #88	; 0x58
 8003ba2:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_Delay(3000);
 8003ba4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003ba8:	f001 fef4 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 90);
 8003bac:	4bb5      	ldr	r3, [pc, #724]	; (8003e84 <main+0x954>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	225a      	movs	r2, #90	; 0x5a
 8003bb2:	63da      	str	r2, [r3, #60]	; 0x3c
				awning = 0;
 8003bb4:	4bb2      	ldr	r3, [pc, #712]	; (8003e80 <main+0x950>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
			}

			// There are clothes and it is not raining (awning does not matter)
			// There are not clothes and it is not raining (awning does not matter)

			vOutside[0]='x';
 8003bba:	4bb0      	ldr	r3, [pc, #704]	; (8003e7c <main+0x94c>)
 8003bbc:	2278      	movs	r2, #120	; 0x78
 8003bbe:	701a      	strb	r2, [r3, #0]
		}

		// HW-390
		if(HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK)
 8003bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bc4:	48b0      	ldr	r0, [pc, #704]	; (8003e88 <main+0x958>)
 8003bc6:	f002 f81f 	bl	8005c08 <HAL_ADC_PollForConversion>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d106      	bne.n	8003bde <main+0x6ae>
			Hygro_read = HAL_ADC_GetValue(&hadc2);
 8003bd0:	48ad      	ldr	r0, [pc, #692]	; (8003e88 <main+0x958>)
 8003bd2:	f002 f8a4 	bl	8005d1e <HAL_ADC_GetValue>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	4bac      	ldr	r3, [pc, #688]	; (8003e8c <main+0x95c>)
 8003bdc:	801a      	strh	r2, [r3, #0]

		Hygro = 100 - ((100*Hygro_read)/255);
 8003bde:	4bab      	ldr	r3, [pc, #684]	; (8003e8c <main+0x95c>)
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	2364      	movs	r3, #100	; 0x64
 8003be6:	fb03 f302 	mul.w	r3, r3, r2
 8003bea:	4aa9      	ldr	r2, [pc, #676]	; (8003e90 <main+0x960>)
 8003bec:	fb82 1203 	smull	r1, r2, r2, r3
 8003bf0:	441a      	add	r2, r3
 8003bf2:	11d2      	asrs	r2, r2, #7
 8003bf4:	17db      	asrs	r3, r3, #31
 8003bf6:	1a9b      	subs	r3, r3, r2
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3364      	adds	r3, #100	; 0x64
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	4ba5      	ldr	r3, [pc, #660]	; (8003e94 <main+0x964>)
 8003c00:	801a      	strh	r2, [r3, #0]
			}
			else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET); // Water
		}*/

		//DHT22
		if(readDHT != 0){
 8003c02:	4ba5      	ldr	r3, [pc, #660]	; (8003e98 <main+0x968>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 810b 	beq.w	8003e22 <main+0x8f2>

		  	// Inside
		  	DHT22_getData(&DHT22_inside);
 8003c0c:	48a3      	ldr	r0, [pc, #652]	; (8003e9c <main+0x96c>)
 8003c0e:	f7fd fa15 	bl	800103c <DHT22_getData>
		  	RHInside = DHT22_inside.Humidity;
 8003c12:	4ba2      	ldr	r3, [pc, #648]	; (8003e9c <main+0x96c>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	4aa2      	ldr	r2, [pc, #648]	; (8003ea0 <main+0x970>)
 8003c18:	6013      	str	r3, [r2, #0]
		  	TempInside = DHT22_inside.Temperature;
 8003c1a:	4ba0      	ldr	r3, [pc, #640]	; (8003e9c <main+0x96c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4aa1      	ldr	r2, [pc, #644]	; (8003ea4 <main+0x974>)
 8003c20:	6013      	str	r3, [r2, #0]

		    int in_rh_unit = RHInside;
 8003c22:	4b9f      	ldr	r3, [pc, #636]	; (8003ea0 <main+0x970>)
 8003c24:	edd3 7a00 	vldr	s15, [r3]
 8003c28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c2c:	ee17 3a90 	vmov	r3, s15
 8003c30:	653b      	str	r3, [r7, #80]	; 0x50
		    int in_rh_dec = (RHInside-in_rh_unit)*10;
 8003c32:	4b9b      	ldr	r3, [pc, #620]	; (8003ea0 <main+0x970>)
 8003c34:	ed93 7a00 	vldr	s14, [r3]
 8003c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c3a:	ee07 3a90 	vmov	s15, r3
 8003c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c46:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c52:	ee17 3a90 	vmov	r3, s15
 8003c56:	64fb      	str	r3, [r7, #76]	; 0x4c
		    char c_in_rh_unit[2];
		    char c_in_rh_dec[1];
		    itoa(in_rh_unit, c_in_rh_unit, 10);
 8003c58:	f107 0314 	add.w	r3, r7, #20
 8003c5c:	220a      	movs	r2, #10
 8003c5e:	4619      	mov	r1, r3
 8003c60:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003c62:	f005 fe63 	bl	800992c <itoa>
		    itoa(in_rh_dec, c_in_rh_dec, 10);
 8003c66:	f107 0310 	add.w	r3, r7, #16
 8003c6a:	220a      	movs	r2, #10
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003c70:	f005 fe5c 	bl	800992c <itoa>

		    int in_temp_unit = TempInside;
 8003c74:	4b8b      	ldr	r3, [pc, #556]	; (8003ea4 <main+0x974>)
 8003c76:	edd3 7a00 	vldr	s15, [r3]
 8003c7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c7e:	ee17 3a90 	vmov	r3, s15
 8003c82:	64bb      	str	r3, [r7, #72]	; 0x48
		    int in_temp_dec = (TempInside-in_temp_unit)*10;
 8003c84:	4b87      	ldr	r3, [pc, #540]	; (8003ea4 <main+0x974>)
 8003c86:	ed93 7a00 	vldr	s14, [r3]
 8003c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c8c:	ee07 3a90 	vmov	s15, r3
 8003c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c98:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ca0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ca4:	ee17 3a90 	vmov	r3, s15
 8003ca8:	647b      	str	r3, [r7, #68]	; 0x44
		    char c_in_temp_unit[2];
		    char c_in_temp_dec[1];
		    itoa(in_temp_unit, c_in_temp_unit, 10);
 8003caa:	f107 030c 	add.w	r3, r7, #12
 8003cae:	220a      	movs	r2, #10
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003cb4:	f005 fe3a 	bl	800992c <itoa>
		    itoa(in_temp_dec, c_in_temp_dec, 10);
 8003cb8:	f107 0308 	add.w	r3, r7, #8
 8003cbc:	220a      	movs	r2, #10
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003cc2:	f005 fe33 	bl	800992c <itoa>

		    clear();
 8003cc6:	f7ff f83d 	bl	8002d44 <clear>

		    // Frame
		    line_h(0, 127, 1, 2, 1);
 8003cca:	2301      	movs	r3, #1
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	2302      	movs	r3, #2
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	217f      	movs	r1, #127	; 0x7f
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	f7ff f97d 	bl	8002fd4 <line_h>
		    line_h(0, 127, 30, 2, 1);
 8003cda:	2301      	movs	r3, #1
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	2302      	movs	r3, #2
 8003ce0:	221e      	movs	r2, #30
 8003ce2:	217f      	movs	r1, #127	; 0x7f
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	f7ff f975 	bl	8002fd4 <line_h>
		    line_v(0, 31, 1, 2, 1);
 8003cea:	2301      	movs	r3, #1
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	2302      	movs	r3, #2
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	211f      	movs	r1, #31
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	f7ff f84d 	bl	8002d94 <line_v>
		    line_v(0, 31, 127, 2, 1);
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	2302      	movs	r3, #2
 8003d00:	227f      	movs	r2, #127	; 0x7f
 8003d02:	211f      	movs	r1, #31
 8003d04:	2000      	movs	r0, #0
 8003d06:	f7ff f845 	bl	8002d94 <line_v>

		    // Line
		    line_h(5, 122, 15, 1, 1);
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	2301      	movs	r3, #1
 8003d10:	220f      	movs	r2, #15
 8003d12:	217a      	movs	r1, #122	; 0x7a
 8003d14:	2005      	movs	r0, #5
 8003d16:	f7ff f95d 	bl	8002fd4 <line_h>

		    graphics_text(7, 5, FONT_SEVEN_DOT, "IN");
 8003d1a:	4b63      	ldr	r3, [pc, #396]	; (8003ea8 <main+0x978>)
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	2105      	movs	r1, #5
 8003d20:	2007      	movs	r0, #7
 8003d22:	f7ff fae3 	bl	80032ec <graphics_text>
		    graphics_text(7, 19, FONT_SEVEN_DOT, "OUT");
 8003d26:	4b61      	ldr	r3, [pc, #388]	; (8003eac <main+0x97c>)
 8003d28:	2202      	movs	r2, #2
 8003d2a:	2113      	movs	r1, #19
 8003d2c:	2007      	movs	r0, #7
 8003d2e:	f7ff fadd 	bl	80032ec <graphics_text>

		    // Data
		    graphics_text(44, 6, FONT_SIX_DOT, "RH      .");
 8003d32:	4b5f      	ldr	r3, [pc, #380]	; (8003eb0 <main+0x980>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	2106      	movs	r1, #6
 8003d38:	202c      	movs	r0, #44	; 0x2c
 8003d3a:	f7ff fad7 	bl	80032ec <graphics_text>
		    graphics_text(56, 6, FONT_SIX_DOT, c_in_rh_unit);
 8003d3e:	f107 0314 	add.w	r3, r7, #20
 8003d42:	2201      	movs	r2, #1
 8003d44:	2106      	movs	r1, #6
 8003d46:	2038      	movs	r0, #56	; 0x38
 8003d48:	f7ff fad0 	bl	80032ec <graphics_text>
		    graphics_text(68, 6, FONT_SIX_DOT, c_in_rh_dec);
 8003d4c:	f107 0310 	add.w	r3, r7, #16
 8003d50:	2201      	movs	r2, #1
 8003d52:	2106      	movs	r1, #6
 8003d54:	2044      	movs	r0, #68	; 0x44
 8003d56:	f7ff fac9 	bl	80032ec <graphics_text>
		    graphics_text(75, 6, FONT_SIX_DOT, "%");
 8003d5a:	4b56      	ldr	r3, [pc, #344]	; (8003eb4 <main+0x984>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	2106      	movs	r1, #6
 8003d60:	204b      	movs	r0, #75	; 0x4b
 8003d62:	f7ff fac3 	bl	80032ec <graphics_text>

		    graphics_text(90, 6, FONT_SIX_DOT, "T      .");
 8003d66:	4b54      	ldr	r3, [pc, #336]	; (8003eb8 <main+0x988>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	2106      	movs	r1, #6
 8003d6c:	205a      	movs	r0, #90	; 0x5a
 8003d6e:	f7ff fabd 	bl	80032ec <graphics_text>
		    graphics_text(98, 6, FONT_SIX_DOT, c_in_temp_unit);
 8003d72:	f107 030c 	add.w	r3, r7, #12
 8003d76:	2201      	movs	r2, #1
 8003d78:	2106      	movs	r1, #6
 8003d7a:	2062      	movs	r0, #98	; 0x62
 8003d7c:	f7ff fab6 	bl	80032ec <graphics_text>
		    graphics_text(110, 6, FONT_SIX_DOT, c_in_temp_dec);
 8003d80:	f107 0308 	add.w	r3, r7, #8
 8003d84:	2201      	movs	r2, #1
 8003d86:	2106      	movs	r1, #6
 8003d88:	206e      	movs	r0, #110	; 0x6e
 8003d8a:	f7ff faaf 	bl	80032ec <graphics_text>
		    graphics_text(117, 6, FONT_SIX_DOT, "C");
 8003d8e:	4b4b      	ldr	r3, [pc, #300]	; (8003ebc <main+0x98c>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	2106      	movs	r1, #6
 8003d94:	2075      	movs	r0, #117	; 0x75
 8003d96:	f7ff faa9 	bl	80032ec <graphics_text>

			// Exterior
			DHT22_getData(&DHT22_outside);
 8003d9a:	4849      	ldr	r0, [pc, #292]	; (8003ec0 <main+0x990>)
 8003d9c:	f7fd f94e 	bl	800103c <DHT22_getData>
		  	RHOutside = DHT22_outside.Humidity;
 8003da0:	4b47      	ldr	r3, [pc, #284]	; (8003ec0 <main+0x990>)
 8003da2:	edd3 7a01 	vldr	s15, [r3, #4]
 8003da6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003daa:	ee17 2a90 	vmov	r2, s15
 8003dae:	4b45      	ldr	r3, [pc, #276]	; (8003ec4 <main+0x994>)
 8003db0:	601a      	str	r2, [r3, #0]
		  	TempOutside = DHT22_outside.Temperature;
 8003db2:	4b43      	ldr	r3, [pc, #268]	; (8003ec0 <main+0x990>)
 8003db4:	edd3 7a00 	vldr	s15, [r3]
 8003db8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dbc:	ee17 2a90 	vmov	r2, s15
 8003dc0:	4b41      	ldr	r3, [pc, #260]	; (8003ec8 <main+0x998>)
 8003dc2:	601a      	str	r2, [r3, #0]

		    int out_rh_unit = RHOutside;
 8003dc4:	4b3f      	ldr	r3, [pc, #252]	; (8003ec4 <main+0x994>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	643b      	str	r3, [r7, #64]	; 0x40
		    char c_out_rh_unit[2];
		    itoa(out_rh_unit, c_out_rh_unit, 10);
 8003dca:	1d3b      	adds	r3, r7, #4
 8003dcc:	220a      	movs	r2, #10
 8003dce:	4619      	mov	r1, r3
 8003dd0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003dd2:	f005 fdab 	bl	800992c <itoa>

		    int out_temp_unit = TempOutside;
 8003dd6:	4b3c      	ldr	r3, [pc, #240]	; (8003ec8 <main+0x998>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	63fb      	str	r3, [r7, #60]	; 0x3c
		    char c_out_temp_unit[2];
		    itoa(out_temp_unit, c_out_temp_unit, 10);
 8003ddc:	463b      	mov	r3, r7
 8003dde:	220a      	movs	r2, #10
 8003de0:	4619      	mov	r1, r3
 8003de2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003de4:	f005 fda2 	bl	800992c <itoa>

		    graphics_text(44, 20, FONT_SIX_DOT, "RH      .0 %");
 8003de8:	4b38      	ldr	r3, [pc, #224]	; (8003ecc <main+0x99c>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	2114      	movs	r1, #20
 8003dee:	202c      	movs	r0, #44	; 0x2c
 8003df0:	f7ff fa7c 	bl	80032ec <graphics_text>
		    graphics_text(56, 20, FONT_SIX_DOT, c_out_rh_unit);
 8003df4:	1d3b      	adds	r3, r7, #4
 8003df6:	2201      	movs	r2, #1
 8003df8:	2114      	movs	r1, #20
 8003dfa:	2038      	movs	r0, #56	; 0x38
 8003dfc:	f7ff fa76 	bl	80032ec <graphics_text>

		    graphics_text(90, 20, FONT_SIX_DOT, "T      .0 C");
 8003e00:	4b33      	ldr	r3, [pc, #204]	; (8003ed0 <main+0x9a0>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	2114      	movs	r1, #20
 8003e06:	205a      	movs	r0, #90	; 0x5a
 8003e08:	f7ff fa70 	bl	80032ec <graphics_text>
		    graphics_text(98, 20, FONT_SIX_DOT, c_out_temp_unit);
 8003e0c:	463b      	mov	r3, r7
 8003e0e:	2201      	movs	r2, #1
 8003e10:	2114      	movs	r1, #20
 8003e12:	2062      	movs	r0, #98	; 0x62
 8003e14:	f7ff fa6a 	bl	80032ec <graphics_text>


		    oled_update(); // Update OLED
 8003e18:	f000 ffd0 	bl	8004dbc <oled_update>

		  	readDHT = 0;
 8003e1c:	4b1e      	ldr	r3, [pc, #120]	; (8003e98 <main+0x968>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]
		}

		if(vWeather[2] == '1'){
 8003e22:	4b2c      	ldr	r3, [pc, #176]	; (8003ed4 <main+0x9a4>)
 8003e24:	789b      	ldrb	r3, [r3, #2]
 8003e26:	2b31      	cmp	r3, #49	; 0x31
 8003e28:	f040 8096 	bne.w	8003f58 <main+0xa28>
			// Fan is turned off and it reach the maximum temperature or it is turned off and it does not reach the minimum temperature
			if ((!fan && (TempInside>f_on)) || (fan && (TempInside>f_off))){
 8003e2c:	4b2a      	ldr	r3, [pc, #168]	; (8003ed8 <main+0x9a8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10a      	bne.n	8003e4a <main+0x91a>
 8003e34:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <main+0x974>)
 8003e36:	ed93 7a00 	vldr	s14, [r3]
 8003e3a:	4b28      	ldr	r3, [pc, #160]	; (8003edc <main+0x9ac>)
 8003e3c:	edd3 7a00 	vldr	s15, [r3]
 8003e40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e48:	dc0e      	bgt.n	8003e68 <main+0x938>
 8003e4a:	4b23      	ldr	r3, [pc, #140]	; (8003ed8 <main+0x9a8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d04a      	beq.n	8003ee8 <main+0x9b8>
 8003e52:	4b14      	ldr	r3, [pc, #80]	; (8003ea4 <main+0x974>)
 8003e54:	ed93 7a00 	vldr	s14, [r3]
 8003e58:	4b21      	ldr	r3, [pc, #132]	; (8003ee0 <main+0x9b0>)
 8003e5a:	edd3 7a00 	vldr	s15, [r3]
 8003e5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e66:	dd3f      	ble.n	8003ee8 <main+0x9b8>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 30); 	// Living Room Fan
 8003e68:	4b1e      	ldr	r3, [pc, #120]	; (8003ee4 <main+0x9b4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	221e      	movs	r2, #30
 8003e6e:	641a      	str	r2, [r3, #64]	; 0x40
				fan = 1;
 8003e70:	4b19      	ldr	r3, [pc, #100]	; (8003ed8 <main+0x9a8>)
 8003e72:	2201      	movs	r2, #1
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	e03e      	b.n	8003ef6 <main+0x9c6>
 8003e78:	200008e4 	.word	0x200008e4
 8003e7c:	2000095c 	.word	0x2000095c
 8003e80:	200008d0 	.word	0x200008d0
 8003e84:	20001020 	.word	0x20001020
 8003e88:	20000d48 	.word	0x20000d48
 8003e8c:	200008de 	.word	0x200008de
 8003e90:	80808081 	.word	0x80808081
 8003e94:	200008e0 	.word	0x200008e0
 8003e98:	2000094c 	.word	0x2000094c
 8003e9c:	200010ac 	.word	0x200010ac
 8003ea0:	200008f4 	.word	0x200008f4
 8003ea4:	200008f0 	.word	0x200008f0
 8003ea8:	0800ab44 	.word	0x0800ab44
 8003eac:	0800ab48 	.word	0x0800ab48
 8003eb0:	0800ab4c 	.word	0x0800ab4c
 8003eb4:	0800ab58 	.word	0x0800ab58
 8003eb8:	0800ab5c 	.word	0x0800ab5c
 8003ebc:	0800ab68 	.word	0x0800ab68
 8003ec0:	20000cfc 	.word	0x20000cfc
 8003ec4:	200008ec 	.word	0x200008ec
 8003ec8:	200008e8 	.word	0x200008e8
 8003ecc:	0800ab6c 	.word	0x0800ab6c
 8003ed0:	0800ab7c 	.word	0x0800ab7c
 8003ed4:	20000944 	.word	0x20000944
 8003ed8:	200008d4 	.word	0x200008d4
 8003edc:	200008b8 	.word	0x200008b8
 8003ee0:	200008bc 	.word	0x200008bc
 8003ee4:	20000e2c 	.word	0x20000e2c
			}
			else{
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 90); 	// Living Room Fan
 8003ee8:	4b39      	ldr	r3, [pc, #228]	; (8003fd0 <main+0xaa0>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	225a      	movs	r2, #90	; 0x5a
 8003eee:	641a      	str	r2, [r3, #64]	; 0x40
				fan = 0;
 8003ef0:	4b38      	ldr	r3, [pc, #224]	; (8003fd4 <main+0xaa4>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
			}

			// Heat is turned off and it does not reach the minimum temperature or it is turned on and it does not reach the maximum temperature
			if ((!heat && (TempInside<h_on)) || (heat && (TempInside<h_off))){
 8003ef6:	4b38      	ldr	r3, [pc, #224]	; (8003fd8 <main+0xaa8>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10a      	bne.n	8003f14 <main+0x9e4>
 8003efe:	4b37      	ldr	r3, [pc, #220]	; (8003fdc <main+0xaac>)
 8003f00:	ed93 7a00 	vldr	s14, [r3]
 8003f04:	4b36      	ldr	r3, [pc, #216]	; (8003fe0 <main+0xab0>)
 8003f06:	edd3 7a00 	vldr	s15, [r3]
 8003f0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f12:	d40e      	bmi.n	8003f32 <main+0xa02>
 8003f14:	4b30      	ldr	r3, [pc, #192]	; (8003fd8 <main+0xaa8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d014      	beq.n	8003f46 <main+0xa16>
 8003f1c:	4b2f      	ldr	r3, [pc, #188]	; (8003fdc <main+0xaac>)
 8003f1e:	ed93 7a00 	vldr	s14, [r3]
 8003f22:	4b30      	ldr	r3, [pc, #192]	; (8003fe4 <main+0xab4>)
 8003f24:	edd3 7a00 	vldr	s15, [r3]
 8003f28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f30:	d509      	bpl.n	8003f46 <main+0xa16>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET); 	// Heat
 8003f32:	2201      	movs	r2, #1
 8003f34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f38:	482b      	ldr	r0, [pc, #172]	; (8003fe8 <main+0xab8>)
 8003f3a:	f002 fc73 	bl	8006824 <HAL_GPIO_WritePin>
				heat = 1;
 8003f3e:	4b26      	ldr	r3, [pc, #152]	; (8003fd8 <main+0xaa8>)
 8003f40:	2201      	movs	r2, #1
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	e008      	b.n	8003f58 <main+0xa28>
			}
			else{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET); 	// Heat
 8003f46:	2200      	movs	r2, #0
 8003f48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f4c:	4826      	ldr	r0, [pc, #152]	; (8003fe8 <main+0xab8>)
 8003f4e:	f002 fc69 	bl	8006824 <HAL_GPIO_WritePin>
				heat = 0;
 8003f52:	4b21      	ldr	r3, [pc, #132]	; (8003fd8 <main+0xaa8>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
			}
		}

		if(vWeather[2] == '0'){
 8003f58:	4b24      	ldr	r3, [pc, #144]	; (8003fec <main+0xabc>)
 8003f5a:	789b      	ldrb	r3, [r3, #2]
 8003f5c:	2b30      	cmp	r3, #48	; 0x30
 8003f5e:	f47f ab82 	bne.w	8003666 <main+0x136>
			if(vWeather[0] == '0'){
 8003f62:	4b22      	ldr	r3, [pc, #136]	; (8003fec <main+0xabc>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	2b30      	cmp	r3, #48	; 0x30
 8003f68:	d107      	bne.n	8003f7a <main+0xa4a>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 90);	// Fan
 8003f6a:	4b19      	ldr	r3, [pc, #100]	; (8003fd0 <main+0xaa0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	225a      	movs	r2, #90	; 0x5a
 8003f70:	641a      	str	r2, [r3, #64]	; 0x40
				fan = 0;
 8003f72:	4b18      	ldr	r3, [pc, #96]	; (8003fd4 <main+0xaa4>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	e00a      	b.n	8003f90 <main+0xa60>
			}
			else if(vWeather[0] == '1'){
 8003f7a:	4b1c      	ldr	r3, [pc, #112]	; (8003fec <main+0xabc>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b31      	cmp	r3, #49	; 0x31
 8003f80:	d106      	bne.n	8003f90 <main+0xa60>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 30);
 8003f82:	4b13      	ldr	r3, [pc, #76]	; (8003fd0 <main+0xaa0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	221e      	movs	r2, #30
 8003f88:	641a      	str	r2, [r3, #64]	; 0x40
				fan = 1;
 8003f8a:	4b12      	ldr	r3, [pc, #72]	; (8003fd4 <main+0xaa4>)
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]
			}

			if(vWeather[1] == '0'){
 8003f90:	4b16      	ldr	r3, [pc, #88]	; (8003fec <main+0xabc>)
 8003f92:	785b      	ldrb	r3, [r3, #1]
 8003f94:	2b30      	cmp	r3, #48	; 0x30
 8003f96:	d10a      	bne.n	8003fae <main+0xa7e>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);		// Heat
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f9e:	4812      	ldr	r0, [pc, #72]	; (8003fe8 <main+0xab8>)
 8003fa0:	f002 fc40 	bl	8006824 <HAL_GPIO_WritePin>
				heat = 0;
 8003fa4:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <main+0xaa8>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	f7ff bb5c 	b.w	8003666 <main+0x136>
			}
			else if(vWeather[1] == '1'){
 8003fae:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <main+0xabc>)
 8003fb0:	785b      	ldrb	r3, [r3, #1]
 8003fb2:	2b31      	cmp	r3, #49	; 0x31
 8003fb4:	f47f ab57 	bne.w	8003666 <main+0x136>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fbe:	480a      	ldr	r0, [pc, #40]	; (8003fe8 <main+0xab8>)
 8003fc0:	f002 fc30 	bl	8006824 <HAL_GPIO_WritePin>
				heat = 1;
 8003fc4:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <main+0xaa8>)
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]
  while (1){
 8003fca:	f7ff bb4c 	b.w	8003666 <main+0x136>
 8003fce:	bf00      	nop
 8003fd0:	20000e2c 	.word	0x20000e2c
 8003fd4:	200008d4 	.word	0x200008d4
 8003fd8:	200008d8 	.word	0x200008d8
 8003fdc:	200008f0 	.word	0x200008f0
 8003fe0:	200008c0 	.word	0x200008c0
 8003fe4:	200008c4 	.word	0x200008c4
 8003fe8:	40020400 	.word	0x40020400
 8003fec:	20000944 	.word	0x20000944

08003ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b094      	sub	sp, #80	; 0x50
 8003ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ff6:	f107 0320 	add.w	r3, r7, #32
 8003ffa:	2230      	movs	r2, #48	; 0x30
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	4618      	mov	r0, r3
 8004000:	f005 fc96 	bl	8009930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004004:	f107 030c 	add.w	r3, r7, #12
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	605a      	str	r2, [r3, #4]
 800400e:	609a      	str	r2, [r3, #8]
 8004010:	60da      	str	r2, [r3, #12]
 8004012:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004014:	2300      	movs	r3, #0
 8004016:	60bb      	str	r3, [r7, #8]
 8004018:	4b28      	ldr	r3, [pc, #160]	; (80040bc <SystemClock_Config+0xcc>)
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	4a27      	ldr	r2, [pc, #156]	; (80040bc <SystemClock_Config+0xcc>)
 800401e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004022:	6413      	str	r3, [r2, #64]	; 0x40
 8004024:	4b25      	ldr	r3, [pc, #148]	; (80040bc <SystemClock_Config+0xcc>)
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004030:	2300      	movs	r3, #0
 8004032:	607b      	str	r3, [r7, #4]
 8004034:	4b22      	ldr	r3, [pc, #136]	; (80040c0 <SystemClock_Config+0xd0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a21      	ldr	r2, [pc, #132]	; (80040c0 <SystemClock_Config+0xd0>)
 800403a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	4b1f      	ldr	r3, [pc, #124]	; (80040c0 <SystemClock_Config+0xd0>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004048:	607b      	str	r3, [r7, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800404c:	2301      	movs	r3, #1
 800404e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004050:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004054:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004056:	2302      	movs	r3, #2
 8004058:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800405a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800405e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004060:	2304      	movs	r3, #4
 8004062:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8004064:	2332      	movs	r3, #50	; 0x32
 8004066:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004068:	2302      	movs	r3, #2
 800406a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800406c:	2307      	movs	r3, #7
 800406e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004070:	f107 0320 	add.w	r3, r7, #32
 8004074:	4618      	mov	r0, r3
 8004076:	f003 f853 	bl	8007120 <HAL_RCC_OscConfig>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004080:	f000 fe7e 	bl	8004d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004084:	230f      	movs	r3, #15
 8004086:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004088:	2302      	movs	r3, #2
 800408a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004094:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800409a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800409c:	f107 030c 	add.w	r3, r7, #12
 80040a0:	2101      	movs	r1, #1
 80040a2:	4618      	mov	r0, r3
 80040a4:	f003 fab4 	bl	8007610 <HAL_RCC_ClockConfig>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80040ae:	f000 fe67 	bl	8004d80 <Error_Handler>
  }
}
 80040b2:	bf00      	nop
 80040b4:	3750      	adds	r7, #80	; 0x50
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40023800 	.word	0x40023800
 80040c0:	40007000 	.word	0x40007000

080040c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80040ca:	463b      	mov	r3, r7
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	605a      	str	r2, [r3, #4]
 80040d2:	609a      	str	r2, [r3, #8]
 80040d4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80040d6:	4b21      	ldr	r3, [pc, #132]	; (800415c <MX_ADC1_Init+0x98>)
 80040d8:	4a21      	ldr	r2, [pc, #132]	; (8004160 <MX_ADC1_Init+0x9c>)
 80040da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80040dc:	4b1f      	ldr	r3, [pc, #124]	; (800415c <MX_ADC1_Init+0x98>)
 80040de:	2200      	movs	r2, #0
 80040e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80040e2:	4b1e      	ldr	r3, [pc, #120]	; (800415c <MX_ADC1_Init+0x98>)
 80040e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80040ea:	4b1c      	ldr	r3, [pc, #112]	; (800415c <MX_ADC1_Init+0x98>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80040f0:	4b1a      	ldr	r3, [pc, #104]	; (800415c <MX_ADC1_Init+0x98>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80040f6:	4b19      	ldr	r3, [pc, #100]	; (800415c <MX_ADC1_Init+0x98>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80040fe:	4b17      	ldr	r3, [pc, #92]	; (800415c <MX_ADC1_Init+0x98>)
 8004100:	2200      	movs	r2, #0
 8004102:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004104:	4b15      	ldr	r3, [pc, #84]	; (800415c <MX_ADC1_Init+0x98>)
 8004106:	4a17      	ldr	r2, [pc, #92]	; (8004164 <MX_ADC1_Init+0xa0>)
 8004108:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800410a:	4b14      	ldr	r3, [pc, #80]	; (800415c <MX_ADC1_Init+0x98>)
 800410c:	2200      	movs	r2, #0
 800410e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004110:	4b12      	ldr	r3, [pc, #72]	; (800415c <MX_ADC1_Init+0x98>)
 8004112:	2201      	movs	r2, #1
 8004114:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004116:	4b11      	ldr	r3, [pc, #68]	; (800415c <MX_ADC1_Init+0x98>)
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800411e:	4b0f      	ldr	r3, [pc, #60]	; (800415c <MX_ADC1_Init+0x98>)
 8004120:	2200      	movs	r2, #0
 8004122:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004124:	480d      	ldr	r0, [pc, #52]	; (800415c <MX_ADC1_Init+0x98>)
 8004126:	f001 fc59 	bl	80059dc <HAL_ADC_Init>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004130:	f000 fe26 	bl	8004d80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004134:	2304      	movs	r3, #4
 8004136:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004138:	2301      	movs	r3, #1
 800413a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800413c:	2307      	movs	r3, #7
 800413e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004140:	463b      	mov	r3, r7
 8004142:	4619      	mov	r1, r3
 8004144:	4805      	ldr	r0, [pc, #20]	; (800415c <MX_ADC1_Init+0x98>)
 8004146:	f001 fdf7 	bl	8005d38 <HAL_ADC_ConfigChannel>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004150:	f000 fe16 	bl	8004d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004154:	bf00      	nop
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	20000e74 	.word	0x20000e74
 8004160:	40012000 	.word	0x40012000
 8004164:	0f000001 	.word	0x0f000001

08004168 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800416e:	463b      	mov	r3, r7
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	605a      	str	r2, [r3, #4]
 8004176:	609a      	str	r2, [r3, #8]
 8004178:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800417a:	4b21      	ldr	r3, [pc, #132]	; (8004200 <MX_ADC2_Init+0x98>)
 800417c:	4a21      	ldr	r2, [pc, #132]	; (8004204 <MX_ADC2_Init+0x9c>)
 800417e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004180:	4b1f      	ldr	r3, [pc, #124]	; (8004200 <MX_ADC2_Init+0x98>)
 8004182:	2200      	movs	r2, #0
 8004184:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8004186:	4b1e      	ldr	r3, [pc, #120]	; (8004200 <MX_ADC2_Init+0x98>)
 8004188:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800418c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800418e:	4b1c      	ldr	r3, [pc, #112]	; (8004200 <MX_ADC2_Init+0x98>)
 8004190:	2200      	movs	r2, #0
 8004192:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004194:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <MX_ADC2_Init+0x98>)
 8004196:	2201      	movs	r2, #1
 8004198:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800419a:	4b19      	ldr	r3, [pc, #100]	; (8004200 <MX_ADC2_Init+0x98>)
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80041a2:	4b17      	ldr	r3, [pc, #92]	; (8004200 <MX_ADC2_Init+0x98>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80041a8:	4b15      	ldr	r3, [pc, #84]	; (8004200 <MX_ADC2_Init+0x98>)
 80041aa:	4a17      	ldr	r2, [pc, #92]	; (8004208 <MX_ADC2_Init+0xa0>)
 80041ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80041ae:	4b14      	ldr	r3, [pc, #80]	; (8004200 <MX_ADC2_Init+0x98>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80041b4:	4b12      	ldr	r3, [pc, #72]	; (8004200 <MX_ADC2_Init+0x98>)
 80041b6:	2201      	movs	r2, #1
 80041b8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80041ba:	4b11      	ldr	r3, [pc, #68]	; (8004200 <MX_ADC2_Init+0x98>)
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80041c2:	4b0f      	ldr	r3, [pc, #60]	; (8004200 <MX_ADC2_Init+0x98>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80041c8:	480d      	ldr	r0, [pc, #52]	; (8004200 <MX_ADC2_Init+0x98>)
 80041ca:	f001 fc07 	bl	80059dc <HAL_ADC_Init>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80041d4:	f000 fdd4 	bl	8004d80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80041d8:	2308      	movs	r3, #8
 80041da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80041dc:	2301      	movs	r3, #1
 80041de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80041e0:	2307      	movs	r3, #7
 80041e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80041e4:	463b      	mov	r3, r7
 80041e6:	4619      	mov	r1, r3
 80041e8:	4805      	ldr	r0, [pc, #20]	; (8004200 <MX_ADC2_Init+0x98>)
 80041ea:	f001 fda5 	bl	8005d38 <HAL_ADC_ConfigChannel>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80041f4:	f000 fdc4 	bl	8004d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80041f8:	bf00      	nop
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20000d48 	.word	0x20000d48
 8004204:	40012100 	.word	0x40012100
 8004208:	0f000001 	.word	0x0f000001

0800420c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004212:	463b      	mov	r3, r7
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	605a      	str	r2, [r3, #4]
 800421a:	609a      	str	r2, [r3, #8]
 800421c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800421e:	4b21      	ldr	r3, [pc, #132]	; (80042a4 <MX_ADC3_Init+0x98>)
 8004220:	4a21      	ldr	r2, [pc, #132]	; (80042a8 <MX_ADC3_Init+0x9c>)
 8004222:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004224:	4b1f      	ldr	r3, [pc, #124]	; (80042a4 <MX_ADC3_Init+0x98>)
 8004226:	2200      	movs	r2, #0
 8004228:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 800422a:	4b1e      	ldr	r3, [pc, #120]	; (80042a4 <MX_ADC3_Init+0x98>)
 800422c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004230:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8004232:	4b1c      	ldr	r3, [pc, #112]	; (80042a4 <MX_ADC3_Init+0x98>)
 8004234:	2200      	movs	r2, #0
 8004236:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8004238:	4b1a      	ldr	r3, [pc, #104]	; (80042a4 <MX_ADC3_Init+0x98>)
 800423a:	2201      	movs	r2, #1
 800423c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800423e:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <MX_ADC3_Init+0x98>)
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004246:	4b17      	ldr	r3, [pc, #92]	; (80042a4 <MX_ADC3_Init+0x98>)
 8004248:	2200      	movs	r2, #0
 800424a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800424c:	4b15      	ldr	r3, [pc, #84]	; (80042a4 <MX_ADC3_Init+0x98>)
 800424e:	4a17      	ldr	r2, [pc, #92]	; (80042ac <MX_ADC3_Init+0xa0>)
 8004250:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004252:	4b14      	ldr	r3, [pc, #80]	; (80042a4 <MX_ADC3_Init+0x98>)
 8004254:	2200      	movs	r2, #0
 8004256:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8004258:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <MX_ADC3_Init+0x98>)
 800425a:	2201      	movs	r2, #1
 800425c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800425e:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <MX_ADC3_Init+0x98>)
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004266:	4b0f      	ldr	r3, [pc, #60]	; (80042a4 <MX_ADC3_Init+0x98>)
 8004268:	2200      	movs	r2, #0
 800426a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800426c:	480d      	ldr	r0, [pc, #52]	; (80042a4 <MX_ADC3_Init+0x98>)
 800426e:	f001 fbb5 	bl	80059dc <HAL_ADC_Init>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8004278:	f000 fd82 	bl	8004d80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800427c:	230b      	movs	r3, #11
 800427e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004280:	2301      	movs	r3, #1
 8004282:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004284:	2307      	movs	r3, #7
 8004286:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004288:	463b      	mov	r3, r7
 800428a:	4619      	mov	r1, r3
 800428c:	4805      	ldr	r0, [pc, #20]	; (80042a4 <MX_ADC3_Init+0x98>)
 800428e:	f001 fd53 	bl	8005d38 <HAL_ADC_ConfigChannel>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8004298:	f000 fd72 	bl	8004d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800429c:	bf00      	nop
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	20000ebc 	.word	0x20000ebc
 80042a8:	40012200 	.word	0x40012200
 80042ac:	0f000001 	.word	0x0f000001

080042b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80042b4:	4b12      	ldr	r3, [pc, #72]	; (8004300 <MX_I2C1_Init+0x50>)
 80042b6:	4a13      	ldr	r2, [pc, #76]	; (8004304 <MX_I2C1_Init+0x54>)
 80042b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80042ba:	4b11      	ldr	r3, [pc, #68]	; (8004300 <MX_I2C1_Init+0x50>)
 80042bc:	4a12      	ldr	r2, [pc, #72]	; (8004308 <MX_I2C1_Init+0x58>)
 80042be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80042c0:	4b0f      	ldr	r3, [pc, #60]	; (8004300 <MX_I2C1_Init+0x50>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80042c6:	4b0e      	ldr	r3, [pc, #56]	; (8004300 <MX_I2C1_Init+0x50>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80042cc:	4b0c      	ldr	r3, [pc, #48]	; (8004300 <MX_I2C1_Init+0x50>)
 80042ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80042d4:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <MX_I2C1_Init+0x50>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80042da:	4b09      	ldr	r3, [pc, #36]	; (8004300 <MX_I2C1_Init+0x50>)
 80042dc:	2200      	movs	r2, #0
 80042de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80042e0:	4b07      	ldr	r3, [pc, #28]	; (8004300 <MX_I2C1_Init+0x50>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80042e6:	4b06      	ldr	r3, [pc, #24]	; (8004300 <MX_I2C1_Init+0x50>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80042ec:	4804      	ldr	r0, [pc, #16]	; (8004300 <MX_I2C1_Init+0x50>)
 80042ee:	f002 facb 	bl	8006888 <HAL_I2C_Init>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80042f8:	f000 fd42 	bl	8004d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80042fc:	bf00      	nop
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	20000d90 	.word	0x20000d90
 8004304:	40005400 	.word	0x40005400
 8004308:	00061a80 	.word	0x00061a80

0800430c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b096      	sub	sp, #88	; 0x58
 8004310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004312:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	605a      	str	r2, [r3, #4]
 800431c:	609a      	str	r2, [r3, #8]
 800431e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004320:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800432a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	605a      	str	r2, [r3, #4]
 8004334:	609a      	str	r2, [r3, #8]
 8004336:	60da      	str	r2, [r3, #12]
 8004338:	611a      	str	r2, [r3, #16]
 800433a:	615a      	str	r2, [r3, #20]
 800433c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800433e:	1d3b      	adds	r3, r7, #4
 8004340:	2220      	movs	r2, #32
 8004342:	2100      	movs	r1, #0
 8004344:	4618      	mov	r0, r3
 8004346:	f005 faf3 	bl	8009930 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800434a:	4b4a      	ldr	r3, [pc, #296]	; (8004474 <MX_TIM1_Init+0x168>)
 800434c:	4a4a      	ldr	r2, [pc, #296]	; (8004478 <MX_TIM1_Init+0x16c>)
 800434e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8004350:	4b48      	ldr	r3, [pc, #288]	; (8004474 <MX_TIM1_Init+0x168>)
 8004352:	225f      	movs	r2, #95	; 0x5f
 8004354:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004356:	4b47      	ldr	r3, [pc, #284]	; (8004474 <MX_TIM1_Init+0x168>)
 8004358:	2200      	movs	r2, #0
 800435a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 800435c:	4b45      	ldr	r3, [pc, #276]	; (8004474 <MX_TIM1_Init+0x168>)
 800435e:	22fe      	movs	r2, #254	; 0xfe
 8004360:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004362:	4b44      	ldr	r3, [pc, #272]	; (8004474 <MX_TIM1_Init+0x168>)
 8004364:	2200      	movs	r2, #0
 8004366:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004368:	4b42      	ldr	r3, [pc, #264]	; (8004474 <MX_TIM1_Init+0x168>)
 800436a:	2200      	movs	r2, #0
 800436c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800436e:	4b41      	ldr	r3, [pc, #260]	; (8004474 <MX_TIM1_Init+0x168>)
 8004370:	2200      	movs	r2, #0
 8004372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004374:	483f      	ldr	r0, [pc, #252]	; (8004474 <MX_TIM1_Init+0x168>)
 8004376:	f003 fb47 	bl	8007a08 <HAL_TIM_Base_Init>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8004380:	f000 fcfe 	bl	8004d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004388:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800438a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800438e:	4619      	mov	r1, r3
 8004390:	4838      	ldr	r0, [pc, #224]	; (8004474 <MX_TIM1_Init+0x168>)
 8004392:	f003 fdd5 	bl	8007f40 <HAL_TIM_ConfigClockSource>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800439c:	f000 fcf0 	bl	8004d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80043a0:	4834      	ldr	r0, [pc, #208]	; (8004474 <MX_TIM1_Init+0x168>)
 80043a2:	f003 fbe9 	bl	8007b78 <HAL_TIM_PWM_Init>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80043ac:	f000 fce8 	bl	8004d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043b0:	2300      	movs	r3, #0
 80043b2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043b4:	2300      	movs	r3, #0
 80043b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80043b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043bc:	4619      	mov	r1, r3
 80043be:	482d      	ldr	r0, [pc, #180]	; (8004474 <MX_TIM1_Init+0x168>)
 80043c0:	f004 f996 	bl	80086f0 <HAL_TIMEx_MasterConfigSynchronization>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80043ca:	f000 fcd9 	bl	8004d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043ce:	2360      	movs	r3, #96	; 0x60
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80043d2:	2300      	movs	r3, #0
 80043d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043d6:	2300      	movs	r3, #0
 80043d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80043da:	2300      	movs	r3, #0
 80043dc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043de:	2300      	movs	r3, #0
 80043e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80043e2:	2300      	movs	r3, #0
 80043e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80043e6:	2300      	movs	r3, #0
 80043e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80043ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043ee:	2200      	movs	r2, #0
 80043f0:	4619      	mov	r1, r3
 80043f2:	4820      	ldr	r0, [pc, #128]	; (8004474 <MX_TIM1_Init+0x168>)
 80043f4:	f003 fce2 	bl	8007dbc <HAL_TIM_PWM_ConfigChannel>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80043fe:	f000 fcbf 	bl	8004d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004406:	2204      	movs	r2, #4
 8004408:	4619      	mov	r1, r3
 800440a:	481a      	ldr	r0, [pc, #104]	; (8004474 <MX_TIM1_Init+0x168>)
 800440c:	f003 fcd6 	bl	8007dbc <HAL_TIM_PWM_ConfigChannel>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8004416:	f000 fcb3 	bl	8004d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800441a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800441e:	2208      	movs	r2, #8
 8004420:	4619      	mov	r1, r3
 8004422:	4814      	ldr	r0, [pc, #80]	; (8004474 <MX_TIM1_Init+0x168>)
 8004424:	f003 fcca 	bl	8007dbc <HAL_TIM_PWM_ConfigChannel>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800442e:	f000 fca7 	bl	8004d80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004432:	2300      	movs	r3, #0
 8004434:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004436:	2300      	movs	r3, #0
 8004438:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800443a:	2300      	movs	r3, #0
 800443c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800443e:	2300      	movs	r3, #0
 8004440:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004446:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800444a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800444c:	2300      	movs	r3, #0
 800444e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004450:	1d3b      	adds	r3, r7, #4
 8004452:	4619      	mov	r1, r3
 8004454:	4807      	ldr	r0, [pc, #28]	; (8004474 <MX_TIM1_Init+0x168>)
 8004456:	f004 f9c7 	bl	80087e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8004460:	f000 fc8e 	bl	8004d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004464:	4803      	ldr	r0, [pc, #12]	; (8004474 <MX_TIM1_Init+0x168>)
 8004466:	f000 ff41 	bl	80052ec <HAL_TIM_MspPostInit>

}
 800446a:	bf00      	nop
 800446c:	3758      	adds	r7, #88	; 0x58
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20000f4c 	.word	0x20000f4c
 8004478:	40010000 	.word	0x40010000

0800447c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08e      	sub	sp, #56	; 0x38
 8004480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004482:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	605a      	str	r2, [r3, #4]
 800448c:	609a      	str	r2, [r3, #8]
 800448e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004490:	f107 0320 	add.w	r3, r7, #32
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800449a:	1d3b      	adds	r3, r7, #4
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	609a      	str	r2, [r3, #8]
 80044a4:	60da      	str	r2, [r3, #12]
 80044a6:	611a      	str	r2, [r3, #16]
 80044a8:	615a      	str	r2, [r3, #20]
 80044aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80044ac:	4b38      	ldr	r3, [pc, #224]	; (8004590 <MX_TIM2_Init+0x114>)
 80044ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80044b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 500-1;
 80044b4:	4b36      	ldr	r3, [pc, #216]	; (8004590 <MX_TIM2_Init+0x114>)
 80044b6:	f240 12f3 	movw	r2, #499	; 0x1f3
 80044ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044bc:	4b34      	ldr	r3, [pc, #208]	; (8004590 <MX_TIM2_Init+0x114>)
 80044be:	2200      	movs	r2, #0
 80044c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 80044c2:	4b33      	ldr	r3, [pc, #204]	; (8004590 <MX_TIM2_Init+0x114>)
 80044c4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80044c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044ca:	4b31      	ldr	r3, [pc, #196]	; (8004590 <MX_TIM2_Init+0x114>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044d0:	4b2f      	ldr	r3, [pc, #188]	; (8004590 <MX_TIM2_Init+0x114>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80044d6:	482e      	ldr	r0, [pc, #184]	; (8004590 <MX_TIM2_Init+0x114>)
 80044d8:	f003 fa96 	bl	8007a08 <HAL_TIM_Base_Init>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80044e2:	f000 fc4d 	bl	8004d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80044ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044f0:	4619      	mov	r1, r3
 80044f2:	4827      	ldr	r0, [pc, #156]	; (8004590 <MX_TIM2_Init+0x114>)
 80044f4:	f003 fd24 	bl	8007f40 <HAL_TIM_ConfigClockSource>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80044fe:	f000 fc3f 	bl	8004d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004502:	4823      	ldr	r0, [pc, #140]	; (8004590 <MX_TIM2_Init+0x114>)
 8004504:	f003 fb38 	bl	8007b78 <HAL_TIM_PWM_Init>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800450e:	f000 fc37 	bl	8004d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004512:	2300      	movs	r3, #0
 8004514:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004516:	2300      	movs	r3, #0
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800451a:	f107 0320 	add.w	r3, r7, #32
 800451e:	4619      	mov	r1, r3
 8004520:	481b      	ldr	r0, [pc, #108]	; (8004590 <MX_TIM2_Init+0x114>)
 8004522:	f004 f8e5 	bl	80086f0 <HAL_TIMEx_MasterConfigSynchronization>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800452c:	f000 fc28 	bl	8004d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004530:	2360      	movs	r3, #96	; 0x60
 8004532:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004538:	2300      	movs	r3, #0
 800453a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800453c:	2300      	movs	r3, #0
 800453e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004540:	1d3b      	adds	r3, r7, #4
 8004542:	2200      	movs	r2, #0
 8004544:	4619      	mov	r1, r3
 8004546:	4812      	ldr	r0, [pc, #72]	; (8004590 <MX_TIM2_Init+0x114>)
 8004548:	f003 fc38 	bl	8007dbc <HAL_TIM_PWM_ConfigChannel>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004552:	f000 fc15 	bl	8004d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004556:	1d3b      	adds	r3, r7, #4
 8004558:	2204      	movs	r2, #4
 800455a:	4619      	mov	r1, r3
 800455c:	480c      	ldr	r0, [pc, #48]	; (8004590 <MX_TIM2_Init+0x114>)
 800455e:	f003 fc2d 	bl	8007dbc <HAL_TIM_PWM_ConfigChannel>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8004568:	f000 fc0a 	bl	8004d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800456c:	1d3b      	adds	r3, r7, #4
 800456e:	2208      	movs	r2, #8
 8004570:	4619      	mov	r1, r3
 8004572:	4807      	ldr	r0, [pc, #28]	; (8004590 <MX_TIM2_Init+0x114>)
 8004574:	f003 fc22 	bl	8007dbc <HAL_TIM_PWM_ConfigChannel>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 800457e:	f000 fbff 	bl	8004d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004582:	4803      	ldr	r0, [pc, #12]	; (8004590 <MX_TIM2_Init+0x114>)
 8004584:	f000 feb2 	bl	80052ec <HAL_TIM_MspPostInit>

}
 8004588:	bf00      	nop
 800458a:	3738      	adds	r7, #56	; 0x38
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	20001020 	.word	0x20001020

08004594 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08e      	sub	sp, #56	; 0x38
 8004598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800459a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	605a      	str	r2, [r3, #4]
 80045a4:	609a      	str	r2, [r3, #8]
 80045a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045a8:	f107 0320 	add.w	r3, r7, #32
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045b2:	1d3b      	adds	r3, r7, #4
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	605a      	str	r2, [r3, #4]
 80045ba:	609a      	str	r2, [r3, #8]
 80045bc:	60da      	str	r2, [r3, #12]
 80045be:	611a      	str	r2, [r3, #16]
 80045c0:	615a      	str	r2, [r3, #20]
 80045c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80045c4:	4b38      	ldr	r3, [pc, #224]	; (80046a8 <MX_TIM3_Init+0x114>)
 80045c6:	4a39      	ldr	r2, [pc, #228]	; (80046ac <MX_TIM3_Init+0x118>)
 80045c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 80045ca:	4b37      	ldr	r3, [pc, #220]	; (80046a8 <MX_TIM3_Init+0x114>)
 80045cc:	f240 12f3 	movw	r2, #499	; 0x1f3
 80045d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045d2:	4b35      	ldr	r3, [pc, #212]	; (80046a8 <MX_TIM3_Init+0x114>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80045d8:	4b33      	ldr	r3, [pc, #204]	; (80046a8 <MX_TIM3_Init+0x114>)
 80045da:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80045de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045e0:	4b31      	ldr	r3, [pc, #196]	; (80046a8 <MX_TIM3_Init+0x114>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045e6:	4b30      	ldr	r3, [pc, #192]	; (80046a8 <MX_TIM3_Init+0x114>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80045ec:	482e      	ldr	r0, [pc, #184]	; (80046a8 <MX_TIM3_Init+0x114>)
 80045ee:	f003 fa0b 	bl	8007a08 <HAL_TIM_Base_Init>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80045f8:	f000 fbc2 	bl	8004d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004600:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004606:	4619      	mov	r1, r3
 8004608:	4827      	ldr	r0, [pc, #156]	; (80046a8 <MX_TIM3_Init+0x114>)
 800460a:	f003 fc99 	bl	8007f40 <HAL_TIM_ConfigClockSource>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004614:	f000 fbb4 	bl	8004d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004618:	4823      	ldr	r0, [pc, #140]	; (80046a8 <MX_TIM3_Init+0x114>)
 800461a:	f003 faad 	bl	8007b78 <HAL_TIM_PWM_Init>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004624:	f000 fbac 	bl	8004d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004628:	2300      	movs	r3, #0
 800462a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800462c:	2300      	movs	r3, #0
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004630:	f107 0320 	add.w	r3, r7, #32
 8004634:	4619      	mov	r1, r3
 8004636:	481c      	ldr	r0, [pc, #112]	; (80046a8 <MX_TIM3_Init+0x114>)
 8004638:	f004 f85a 	bl	80086f0 <HAL_TIMEx_MasterConfigSynchronization>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004642:	f000 fb9d 	bl	8004d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004646:	2360      	movs	r3, #96	; 0x60
 8004648:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800464a:	2300      	movs	r3, #0
 800464c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800464e:	2300      	movs	r3, #0
 8004650:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004656:	1d3b      	adds	r3, r7, #4
 8004658:	2204      	movs	r2, #4
 800465a:	4619      	mov	r1, r3
 800465c:	4812      	ldr	r0, [pc, #72]	; (80046a8 <MX_TIM3_Init+0x114>)
 800465e:	f003 fbad 	bl	8007dbc <HAL_TIM_PWM_ConfigChannel>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004668:	f000 fb8a 	bl	8004d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800466c:	1d3b      	adds	r3, r7, #4
 800466e:	2208      	movs	r2, #8
 8004670:	4619      	mov	r1, r3
 8004672:	480d      	ldr	r0, [pc, #52]	; (80046a8 <MX_TIM3_Init+0x114>)
 8004674:	f003 fba2 	bl	8007dbc <HAL_TIM_PWM_ConfigChannel>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800467e:	f000 fb7f 	bl	8004d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004682:	1d3b      	adds	r3, r7, #4
 8004684:	220c      	movs	r2, #12
 8004686:	4619      	mov	r1, r3
 8004688:	4807      	ldr	r0, [pc, #28]	; (80046a8 <MX_TIM3_Init+0x114>)
 800468a:	f003 fb97 	bl	8007dbc <HAL_TIM_PWM_ConfigChannel>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8004694:	f000 fb74 	bl	8004d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004698:	4803      	ldr	r0, [pc, #12]	; (80046a8 <MX_TIM3_Init+0x114>)
 800469a:	f000 fe27 	bl	80052ec <HAL_TIM_MspPostInit>

}
 800469e:	bf00      	nop
 80046a0:	3738      	adds	r7, #56	; 0x38
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20000e2c 	.word	0x20000e2c
 80046ac:	40000400 	.word	0x40000400

080046b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08e      	sub	sp, #56	; 0x38
 80046b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	605a      	str	r2, [r3, #4]
 80046c0:	609a      	str	r2, [r3, #8]
 80046c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046c4:	f107 0320 	add.w	r3, r7, #32
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80046ce:	1d3b      	adds	r3, r7, #4
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	605a      	str	r2, [r3, #4]
 80046d6:	609a      	str	r2, [r3, #8]
 80046d8:	60da      	str	r2, [r3, #12]
 80046da:	611a      	str	r2, [r3, #16]
 80046dc:	615a      	str	r2, [r3, #20]
 80046de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80046e0:	4b2c      	ldr	r3, [pc, #176]	; (8004794 <MX_TIM4_Init+0xe4>)
 80046e2:	4a2d      	ldr	r2, [pc, #180]	; (8004798 <MX_TIM4_Init+0xe8>)
 80046e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 80046e6:	4b2b      	ldr	r3, [pc, #172]	; (8004794 <MX_TIM4_Init+0xe4>)
 80046e8:	225f      	movs	r2, #95	; 0x5f
 80046ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046ec:	4b29      	ldr	r3, [pc, #164]	; (8004794 <MX_TIM4_Init+0xe4>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20;
 80046f2:	4b28      	ldr	r3, [pc, #160]	; (8004794 <MX_TIM4_Init+0xe4>)
 80046f4:	2214      	movs	r2, #20
 80046f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046f8:	4b26      	ldr	r3, [pc, #152]	; (8004794 <MX_TIM4_Init+0xe4>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046fe:	4b25      	ldr	r3, [pc, #148]	; (8004794 <MX_TIM4_Init+0xe4>)
 8004700:	2200      	movs	r2, #0
 8004702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004704:	4823      	ldr	r0, [pc, #140]	; (8004794 <MX_TIM4_Init+0xe4>)
 8004706:	f003 f97f 	bl	8007a08 <HAL_TIM_Base_Init>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8004710:	f000 fb36 	bl	8004d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004718:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800471a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800471e:	4619      	mov	r1, r3
 8004720:	481c      	ldr	r0, [pc, #112]	; (8004794 <MX_TIM4_Init+0xe4>)
 8004722:	f003 fc0d 	bl	8007f40 <HAL_TIM_ConfigClockSource>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 800472c:	f000 fb28 	bl	8004d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004730:	4818      	ldr	r0, [pc, #96]	; (8004794 <MX_TIM4_Init+0xe4>)
 8004732:	f003 fa21 	bl	8007b78 <HAL_TIM_PWM_Init>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 800473c:	f000 fb20 	bl	8004d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004740:	2300      	movs	r3, #0
 8004742:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004744:	2300      	movs	r3, #0
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004748:	f107 0320 	add.w	r3, r7, #32
 800474c:	4619      	mov	r1, r3
 800474e:	4811      	ldr	r0, [pc, #68]	; (8004794 <MX_TIM4_Init+0xe4>)
 8004750:	f003 ffce 	bl	80086f0 <HAL_TIMEx_MasterConfigSynchronization>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800475a:	f000 fb11 	bl	8004d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800475e:	2360      	movs	r3, #96	; 0x60
 8004760:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800476a:	2300      	movs	r3, #0
 800476c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800476e:	1d3b      	adds	r3, r7, #4
 8004770:	2200      	movs	r2, #0
 8004772:	4619      	mov	r1, r3
 8004774:	4807      	ldr	r0, [pc, #28]	; (8004794 <MX_TIM4_Init+0xe4>)
 8004776:	f003 fb21 	bl	8007dbc <HAL_TIM_PWM_ConfigChannel>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8004780:	f000 fafe 	bl	8004d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004784:	4803      	ldr	r0, [pc, #12]	; (8004794 <MX_TIM4_Init+0xe4>)
 8004786:	f000 fdb1 	bl	80052ec <HAL_TIM_MspPostInit>

}
 800478a:	bf00      	nop
 800478c:	3738      	adds	r7, #56	; 0x38
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20000cb4 	.word	0x20000cb4
 8004798:	40000800 	.word	0x40000800

0800479c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047a2:	f107 0308 	add.w	r3, r7, #8
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	605a      	str	r2, [r3, #4]
 80047ac:	609a      	str	r2, [r3, #8]
 80047ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047b0:	463b      	mov	r3, r7
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80047b8:	4b1d      	ldr	r3, [pc, #116]	; (8004830 <MX_TIM5_Init+0x94>)
 80047ba:	4a1e      	ldr	r2, [pc, #120]	; (8004834 <MX_TIM5_Init+0x98>)
 80047bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 96-1;
 80047be:	4b1c      	ldr	r3, [pc, #112]	; (8004830 <MX_TIM5_Init+0x94>)
 80047c0:	225f      	movs	r2, #95	; 0x5f
 80047c2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047c4:	4b1a      	ldr	r3, [pc, #104]	; (8004830 <MX_TIM5_Init+0x94>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 80047ca:	4b19      	ldr	r3, [pc, #100]	; (8004830 <MX_TIM5_Init+0x94>)
 80047cc:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80047d0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047d2:	4b17      	ldr	r3, [pc, #92]	; (8004830 <MX_TIM5_Init+0x94>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047d8:	4b15      	ldr	r3, [pc, #84]	; (8004830 <MX_TIM5_Init+0x94>)
 80047da:	2200      	movs	r2, #0
 80047dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80047de:	4814      	ldr	r0, [pc, #80]	; (8004830 <MX_TIM5_Init+0x94>)
 80047e0:	f003 f912 	bl	8007a08 <HAL_TIM_Base_Init>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80047ea:	f000 fac9 	bl	8004d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80047f4:	f107 0308 	add.w	r3, r7, #8
 80047f8:	4619      	mov	r1, r3
 80047fa:	480d      	ldr	r0, [pc, #52]	; (8004830 <MX_TIM5_Init+0x94>)
 80047fc:	f003 fba0 	bl	8007f40 <HAL_TIM_ConfigClockSource>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8004806:	f000 fabb 	bl	8004d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800480a:	2300      	movs	r3, #0
 800480c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800480e:	2300      	movs	r3, #0
 8004810:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004812:	463b      	mov	r3, r7
 8004814:	4619      	mov	r1, r3
 8004816:	4806      	ldr	r0, [pc, #24]	; (8004830 <MX_TIM5_Init+0x94>)
 8004818:	f003 ff6a 	bl	80086f0 <HAL_TIMEx_MasterConfigSynchronization>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8004822:	f000 faad 	bl	8004d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004826:	bf00      	nop
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	20000de4 	.word	0x20000de4
 8004834:	40000c00 	.word	0x40000c00

08004838 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800483e:	463b      	mov	r3, r7
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004846:	4b15      	ldr	r3, [pc, #84]	; (800489c <MX_TIM6_Init+0x64>)
 8004848:	4a15      	ldr	r2, [pc, #84]	; (80048a0 <MX_TIM6_Init+0x68>)
 800484a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 800484c:	4b13      	ldr	r3, [pc, #76]	; (800489c <MX_TIM6_Init+0x64>)
 800484e:	2231      	movs	r2, #49	; 0x31
 8004850:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004852:	4b12      	ldr	r3, [pc, #72]	; (800489c <MX_TIM6_Init+0x64>)
 8004854:	2200      	movs	r2, #0
 8004856:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8004858:	4b10      	ldr	r3, [pc, #64]	; (800489c <MX_TIM6_Init+0x64>)
 800485a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800485e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004860:	4b0e      	ldr	r3, [pc, #56]	; (800489c <MX_TIM6_Init+0x64>)
 8004862:	2200      	movs	r2, #0
 8004864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004866:	480d      	ldr	r0, [pc, #52]	; (800489c <MX_TIM6_Init+0x64>)
 8004868:	f003 f8ce 	bl	8007a08 <HAL_TIM_Base_Init>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004872:	f000 fa85 	bl	8004d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004876:	2300      	movs	r3, #0
 8004878:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800487a:	2300      	movs	r3, #0
 800487c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800487e:	463b      	mov	r3, r7
 8004880:	4619      	mov	r1, r3
 8004882:	4806      	ldr	r0, [pc, #24]	; (800489c <MX_TIM6_Init+0x64>)
 8004884:	f003 ff34 	bl	80086f0 <HAL_TIMEx_MasterConfigSynchronization>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800488e:	f000 fa77 	bl	8004d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004892:	bf00      	nop
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	20000f04 	.word	0x20000f04
 80048a0:	40001000 	.word	0x40001000

080048a4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048aa:	f107 0308 	add.w	r3, r7, #8
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	605a      	str	r2, [r3, #4]
 80048b4:	609a      	str	r2, [r3, #8]
 80048b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048b8:	463b      	mov	r3, r7
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80048c0:	4b1e      	ldr	r3, [pc, #120]	; (800493c <MX_TIM8_Init+0x98>)
 80048c2:	4a1f      	ldr	r2, [pc, #124]	; (8004940 <MX_TIM8_Init+0x9c>)
 80048c4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80048c6:	4b1d      	ldr	r3, [pc, #116]	; (800493c <MX_TIM8_Init+0x98>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048cc:	4b1b      	ldr	r3, [pc, #108]	; (800493c <MX_TIM8_Init+0x98>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80048d2:	4b1a      	ldr	r3, [pc, #104]	; (800493c <MX_TIM8_Init+0x98>)
 80048d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048d8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048da:	4b18      	ldr	r3, [pc, #96]	; (800493c <MX_TIM8_Init+0x98>)
 80048dc:	2200      	movs	r2, #0
 80048de:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80048e0:	4b16      	ldr	r3, [pc, #88]	; (800493c <MX_TIM8_Init+0x98>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048e6:	4b15      	ldr	r3, [pc, #84]	; (800493c <MX_TIM8_Init+0x98>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80048ec:	4813      	ldr	r0, [pc, #76]	; (800493c <MX_TIM8_Init+0x98>)
 80048ee:	f003 f88b 	bl	8007a08 <HAL_TIM_Base_Init>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80048f8:	f000 fa42 	bl	8004d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004900:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004902:	f107 0308 	add.w	r3, r7, #8
 8004906:	4619      	mov	r1, r3
 8004908:	480c      	ldr	r0, [pc, #48]	; (800493c <MX_TIM8_Init+0x98>)
 800490a:	f003 fb19 	bl	8007f40 <HAL_TIM_ConfigClockSource>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8004914:	f000 fa34 	bl	8004d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004918:	2300      	movs	r3, #0
 800491a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800491c:	2300      	movs	r3, #0
 800491e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004920:	463b      	mov	r3, r7
 8004922:	4619      	mov	r1, r3
 8004924:	4805      	ldr	r0, [pc, #20]	; (800493c <MX_TIM8_Init+0x98>)
 8004926:	f003 fee3 	bl	80086f0 <HAL_TIMEx_MasterConfigSynchronization>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8004930:	f000 fa26 	bl	8004d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004934:	bf00      	nop
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	20000c6c 	.word	0x20000c6c
 8004940:	40010400 	.word	0x40010400

08004944 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08c      	sub	sp, #48	; 0x30
 8004948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800494a:	f107 0320 	add.w	r3, r7, #32
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	605a      	str	r2, [r3, #4]
 8004954:	609a      	str	r2, [r3, #8]
 8004956:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004958:	1d3b      	adds	r3, r7, #4
 800495a:	2200      	movs	r2, #0
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	605a      	str	r2, [r3, #4]
 8004960:	609a      	str	r2, [r3, #8]
 8004962:	60da      	str	r2, [r3, #12]
 8004964:	611a      	str	r2, [r3, #16]
 8004966:	615a      	str	r2, [r3, #20]
 8004968:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800496a:	4b26      	ldr	r3, [pc, #152]	; (8004a04 <MX_TIM9_Init+0xc0>)
 800496c:	4a26      	ldr	r2, [pc, #152]	; (8004a08 <MX_TIM9_Init+0xc4>)
 800496e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 500-1;
 8004970:	4b24      	ldr	r3, [pc, #144]	; (8004a04 <MX_TIM9_Init+0xc0>)
 8004972:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004976:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004978:	4b22      	ldr	r3, [pc, #136]	; (8004a04 <MX_TIM9_Init+0xc0>)
 800497a:	2200      	movs	r2, #0
 800497c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2000-1;
 800497e:	4b21      	ldr	r3, [pc, #132]	; (8004a04 <MX_TIM9_Init+0xc0>)
 8004980:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8004984:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004986:	4b1f      	ldr	r3, [pc, #124]	; (8004a04 <MX_TIM9_Init+0xc0>)
 8004988:	2200      	movs	r2, #0
 800498a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800498c:	4b1d      	ldr	r3, [pc, #116]	; (8004a04 <MX_TIM9_Init+0xc0>)
 800498e:	2200      	movs	r2, #0
 8004990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8004992:	481c      	ldr	r0, [pc, #112]	; (8004a04 <MX_TIM9_Init+0xc0>)
 8004994:	f003 f838 	bl	8007a08 <HAL_TIM_Base_Init>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 800499e:	f000 f9ef 	bl	8004d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80049a8:	f107 0320 	add.w	r3, r7, #32
 80049ac:	4619      	mov	r1, r3
 80049ae:	4815      	ldr	r0, [pc, #84]	; (8004a04 <MX_TIM9_Init+0xc0>)
 80049b0:	f003 fac6 	bl	8007f40 <HAL_TIM_ConfigClockSource>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 80049ba:	f000 f9e1 	bl	8004d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80049be:	4811      	ldr	r0, [pc, #68]	; (8004a04 <MX_TIM9_Init+0xc0>)
 80049c0:	f003 f8da 	bl	8007b78 <HAL_TIM_PWM_Init>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80049ca:	f000 f9d9 	bl	8004d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80049ce:	2360      	movs	r3, #96	; 0x60
 80049d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80049d6:	2300      	movs	r3, #0
 80049d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80049da:	2300      	movs	r3, #0
 80049dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80049de:	1d3b      	adds	r3, r7, #4
 80049e0:	2200      	movs	r2, #0
 80049e2:	4619      	mov	r1, r3
 80049e4:	4807      	ldr	r0, [pc, #28]	; (8004a04 <MX_TIM9_Init+0xc0>)
 80049e6:	f003 f9e9 	bl	8007dbc <HAL_TIM_PWM_ConfigChannel>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 80049f0:	f000 f9c6 	bl	8004d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80049f4:	4803      	ldr	r0, [pc, #12]	; (8004a04 <MX_TIM9_Init+0xc0>)
 80049f6:	f000 fc79 	bl	80052ec <HAL_TIM_MspPostInit>

}
 80049fa:	bf00      	nop
 80049fc:	3730      	adds	r7, #48	; 0x30
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	20000f94 	.word	0x20000f94
 8004a08:	40014000 	.word	0x40014000

08004a0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004a10:	4b11      	ldr	r3, [pc, #68]	; (8004a58 <MX_USART2_UART_Init+0x4c>)
 8004a12:	4a12      	ldr	r2, [pc, #72]	; (8004a5c <MX_USART2_UART_Init+0x50>)
 8004a14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004a16:	4b10      	ldr	r3, [pc, #64]	; (8004a58 <MX_USART2_UART_Init+0x4c>)
 8004a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a1e:	4b0e      	ldr	r3, [pc, #56]	; (8004a58 <MX_USART2_UART_Init+0x4c>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004a24:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <MX_USART2_UART_Init+0x4c>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004a2a:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <MX_USART2_UART_Init+0x4c>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a30:	4b09      	ldr	r3, [pc, #36]	; (8004a58 <MX_USART2_UART_Init+0x4c>)
 8004a32:	220c      	movs	r2, #12
 8004a34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a36:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <MX_USART2_UART_Init+0x4c>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a3c:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <MX_USART2_UART_Init+0x4c>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004a42:	4805      	ldr	r0, [pc, #20]	; (8004a58 <MX_USART2_UART_Init+0x4c>)
 8004a44:	f003 ff22 	bl	800888c <HAL_UART_Init>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004a4e:	f000 f997 	bl	8004d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004a52:	bf00      	nop
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20001068 	.word	0x20001068
 8004a5c:	40004400 	.word	0x40004400

08004a60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004a64:	4b11      	ldr	r3, [pc, #68]	; (8004aac <MX_USART3_UART_Init+0x4c>)
 8004a66:	4a12      	ldr	r2, [pc, #72]	; (8004ab0 <MX_USART3_UART_Init+0x50>)
 8004a68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004a6a:	4b10      	ldr	r3, [pc, #64]	; (8004aac <MX_USART3_UART_Init+0x4c>)
 8004a6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004a70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004a72:	4b0e      	ldr	r3, [pc, #56]	; (8004aac <MX_USART3_UART_Init+0x4c>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004a78:	4b0c      	ldr	r3, [pc, #48]	; (8004aac <MX_USART3_UART_Init+0x4c>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <MX_USART3_UART_Init+0x4c>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004a84:	4b09      	ldr	r3, [pc, #36]	; (8004aac <MX_USART3_UART_Init+0x4c>)
 8004a86:	220c      	movs	r2, #12
 8004a88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a8a:	4b08      	ldr	r3, [pc, #32]	; (8004aac <MX_USART3_UART_Init+0x4c>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a90:	4b06      	ldr	r3, [pc, #24]	; (8004aac <MX_USART3_UART_Init+0x4c>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004a96:	4805      	ldr	r0, [pc, #20]	; (8004aac <MX_USART3_UART_Init+0x4c>)
 8004a98:	f003 fef8 	bl	800888c <HAL_UART_Init>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004aa2:	f000 f96d 	bl	8004d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004aa6:	bf00      	nop
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20000d04 	.word	0x20000d04
 8004ab0:	40004800 	.word	0x40004800

08004ab4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004ab8:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <MX_USART6_UART_Init+0x4c>)
 8004aba:	4a12      	ldr	r2, [pc, #72]	; (8004b04 <MX_USART6_UART_Init+0x50>)
 8004abc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004abe:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <MX_USART6_UART_Init+0x4c>)
 8004ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ac4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004ac6:	4b0e      	ldr	r3, [pc, #56]	; (8004b00 <MX_USART6_UART_Init+0x4c>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004acc:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <MX_USART6_UART_Init+0x4c>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <MX_USART6_UART_Init+0x4c>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004ad8:	4b09      	ldr	r3, [pc, #36]	; (8004b00 <MX_USART6_UART_Init+0x4c>)
 8004ada:	220c      	movs	r2, #12
 8004adc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ade:	4b08      	ldr	r3, [pc, #32]	; (8004b00 <MX_USART6_UART_Init+0x4c>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ae4:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <MX_USART6_UART_Init+0x4c>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004aea:	4805      	ldr	r0, [pc, #20]	; (8004b00 <MX_USART6_UART_Init+0x4c>)
 8004aec:	f003 fece 	bl	800888c <HAL_UART_Init>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004af6:	f000 f943 	bl	8004d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004afa:	bf00      	nop
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20000fdc 	.word	0x20000fdc
 8004b04:	40011400 	.word	0x40011400

08004b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08c      	sub	sp, #48	; 0x30
 8004b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b0e:	f107 031c 	add.w	r3, r7, #28
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	605a      	str	r2, [r3, #4]
 8004b18:	609a      	str	r2, [r3, #8]
 8004b1a:	60da      	str	r2, [r3, #12]
 8004b1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61bb      	str	r3, [r7, #24]
 8004b22:	4b91      	ldr	r3, [pc, #580]	; (8004d68 <MX_GPIO_Init+0x260>)
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	4a90      	ldr	r2, [pc, #576]	; (8004d68 <MX_GPIO_Init+0x260>)
 8004b28:	f043 0310 	orr.w	r3, r3, #16
 8004b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b2e:	4b8e      	ldr	r3, [pc, #568]	; (8004d68 <MX_GPIO_Init+0x260>)
 8004b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b32:	f003 0310 	and.w	r3, r3, #16
 8004b36:	61bb      	str	r3, [r7, #24]
 8004b38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	617b      	str	r3, [r7, #20]
 8004b3e:	4b8a      	ldr	r3, [pc, #552]	; (8004d68 <MX_GPIO_Init+0x260>)
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	4a89      	ldr	r2, [pc, #548]	; (8004d68 <MX_GPIO_Init+0x260>)
 8004b44:	f043 0304 	orr.w	r3, r3, #4
 8004b48:	6313      	str	r3, [r2, #48]	; 0x30
 8004b4a:	4b87      	ldr	r3, [pc, #540]	; (8004d68 <MX_GPIO_Init+0x260>)
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	f003 0304 	and.w	r3, r3, #4
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b56:	2300      	movs	r3, #0
 8004b58:	613b      	str	r3, [r7, #16]
 8004b5a:	4b83      	ldr	r3, [pc, #524]	; (8004d68 <MX_GPIO_Init+0x260>)
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	4a82      	ldr	r2, [pc, #520]	; (8004d68 <MX_GPIO_Init+0x260>)
 8004b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b64:	6313      	str	r3, [r2, #48]	; 0x30
 8004b66:	4b80      	ldr	r3, [pc, #512]	; (8004d68 <MX_GPIO_Init+0x260>)
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	4b7c      	ldr	r3, [pc, #496]	; (8004d68 <MX_GPIO_Init+0x260>)
 8004b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7a:	4a7b      	ldr	r2, [pc, #492]	; (8004d68 <MX_GPIO_Init+0x260>)
 8004b7c:	f043 0301 	orr.w	r3, r3, #1
 8004b80:	6313      	str	r3, [r2, #48]	; 0x30
 8004b82:	4b79      	ldr	r3, [pc, #484]	; (8004d68 <MX_GPIO_Init+0x260>)
 8004b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60bb      	str	r3, [r7, #8]
 8004b92:	4b75      	ldr	r3, [pc, #468]	; (8004d68 <MX_GPIO_Init+0x260>)
 8004b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b96:	4a74      	ldr	r2, [pc, #464]	; (8004d68 <MX_GPIO_Init+0x260>)
 8004b98:	f043 0302 	orr.w	r3, r3, #2
 8004b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b9e:	4b72      	ldr	r3, [pc, #456]	; (8004d68 <MX_GPIO_Init+0x260>)
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	60bb      	str	r3, [r7, #8]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004baa:	2300      	movs	r3, #0
 8004bac:	607b      	str	r3, [r7, #4]
 8004bae:	4b6e      	ldr	r3, [pc, #440]	; (8004d68 <MX_GPIO_Init+0x260>)
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb2:	4a6d      	ldr	r2, [pc, #436]	; (8004d68 <MX_GPIO_Init+0x260>)
 8004bb4:	f043 0308 	orr.w	r3, r3, #8
 8004bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bba:	4b6b      	ldr	r3, [pc, #428]	; (8004d68 <MX_GPIO_Init+0x260>)
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	607b      	str	r3, [r7, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WiFi_OK_Pin|L_Kitchen_Pin|L_Garage_Pin|L_ClothesLine_Pin, GPIO_PIN_RESET);
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f641 4101 	movw	r1, #7169	; 0x1c01
 8004bcc:	4867      	ldr	r0, [pc, #412]	; (8004d6c <MX_GPIO_Init+0x264>)
 8004bce:	f001 fe29 	bl	8006824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DHT22_In_Pin|DHT22_Out_Pin, GPIO_PIN_RESET);
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8004bd8:	4865      	ldr	r0, [pc, #404]	; (8004d70 <MX_GPIO_Init+0x268>)
 8004bda:	f001 fe23 	bl	8006824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Water_Pin|Heat_Pin|L_Mirror_Pin|L_Left_Pin
 8004bde:	2200      	movs	r2, #0
 8004be0:	f24a 01f8 	movw	r1, #41208	; 0xa0f8
 8004be4:	4863      	ldr	r0, [pc, #396]	; (8004d74 <MX_GPIO_Init+0x26c>)
 8004be6:	f001 fe1d 	bl	8006824 <HAL_GPIO_WritePin>
                          |L_Office_Pin|L_Right_Pin|L_TV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L_Sink_GPIO_Port, L_Sink_Pin, GPIO_PIN_RESET);
 8004bea:	2200      	movs	r2, #0
 8004bec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bf0:	4861      	ldr	r0, [pc, #388]	; (8004d78 <MX_GPIO_Init+0x270>)
 8004bf2:	f001 fe17 	bl	8006824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, L_Hall_Pin|L_Dining_Pin|L_Garden_Pin|L_Living_Pin
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	21ff      	movs	r1, #255	; 0xff
 8004bfa:	4860      	ldr	r0, [pc, #384]	; (8004d7c <MX_GPIO_Init+0x274>)
 8004bfc:	f001 fe12 	bl	8006824 <HAL_GPIO_WritePin>
                          |L_Porch_Pin|L_Relax_Pin|L_Bathroom_Pin|L_Bedroom_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : S_In_Pin Parcel_Limit_Pin S_Out_Pin */
  GPIO_InitStruct.Pin = S_In_Pin|Parcel_Limit_Pin|S_Out_Pin;
 8004c00:	231a      	movs	r3, #26
 8004c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004c04:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c0e:	f107 031c 	add.w	r3, r7, #28
 8004c12:	4619      	mov	r1, r3
 8004c14:	4856      	ldr	r0, [pc, #344]	; (8004d70 <MX_GPIO_Init+0x268>)
 8004c16:	f001 fc51 	bl	80064bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Garage_Limit_Pin */
  GPIO_InitStruct.Pin = Garage_Limit_Pin;
 8004c1a:	2340      	movs	r3, #64	; 0x40
 8004c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004c1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004c22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c24:	2300      	movs	r3, #0
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Garage_Limit_GPIO_Port, &GPIO_InitStruct);
 8004c28:	f107 031c 	add.w	r3, r7, #28
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4850      	ldr	r0, [pc, #320]	; (8004d70 <MX_GPIO_Init+0x268>)
 8004c30:	f001 fc44 	bl	80064bc <HAL_GPIO_Init>

  /*Configure GPIO pins : B_People_Bell_Pin B_Stop_Pin */
  GPIO_InitStruct.Pin = B_People_Bell_Pin|B_Stop_Pin;
 8004c34:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004c3a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004c3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c40:	2300      	movs	r3, #0
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c44:	f107 031c 	add.w	r3, r7, #28
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4848      	ldr	r0, [pc, #288]	; (8004d6c <MX_GPIO_Init+0x264>)
 8004c4c:	f001 fc36 	bl	80064bc <HAL_GPIO_Init>

  /*Configure GPIO pins : WiFi_OK_Pin L_Kitchen_Pin L_Garage_Pin L_ClothesLine_Pin */
  GPIO_InitStruct.Pin = WiFi_OK_Pin|L_Kitchen_Pin|L_Garage_Pin|L_ClothesLine_Pin;
 8004c50:	f641 4301 	movw	r3, #7169	; 0x1c01
 8004c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c56:	2301      	movs	r3, #1
 8004c58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c62:	f107 031c 	add.w	r3, r7, #28
 8004c66:	4619      	mov	r1, r3
 8004c68:	4840      	ldr	r0, [pc, #256]	; (8004d6c <MX_GPIO_Init+0x264>)
 8004c6a:	f001 fc27 	bl	80064bc <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT22_In_Pin DHT22_Out_Pin */
  GPIO_InitStruct.Pin = DHT22_In_Pin|DHT22_Out_Pin;
 8004c6e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c74:	2301      	movs	r3, #1
 8004c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c80:	f107 031c 	add.w	r3, r7, #28
 8004c84:	4619      	mov	r1, r3
 8004c86:	483a      	ldr	r0, [pc, #232]	; (8004d70 <MX_GPIO_Init+0x268>)
 8004c88:	f001 fc18 	bl	80064bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Water_Pin Heat_Pin L_Mirror_Pin L_Left_Pin
                           L_Office_Pin L_Right_Pin L_TV_Pin */
  GPIO_InitStruct.Pin = Water_Pin|Heat_Pin|L_Mirror_Pin|L_Left_Pin
 8004c8c:	f24a 03f8 	movw	r3, #41208	; 0xa0f8
 8004c90:	61fb      	str	r3, [r7, #28]
                          |L_Office_Pin|L_Right_Pin|L_TV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c92:	2301      	movs	r3, #1
 8004c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c96:	2300      	movs	r3, #0
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c9e:	f107 031c 	add.w	r3, r7, #28
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4833      	ldr	r0, [pc, #204]	; (8004d74 <MX_GPIO_Init+0x26c>)
 8004ca6:	f001 fc09 	bl	80064bc <HAL_GPIO_Init>

  /*Configure GPIO pin : L_Sink_Pin */
  GPIO_InitStruct.Pin = L_Sink_Pin;
 8004caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(L_Sink_GPIO_Port, &GPIO_InitStruct);
 8004cbc:	f107 031c 	add.w	r3, r7, #28
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	482d      	ldr	r0, [pc, #180]	; (8004d78 <MX_GPIO_Init+0x270>)
 8004cc4:	f001 fbfa 	bl	80064bc <HAL_GPIO_Init>

  /*Configure GPIO pins : L_Hall_Pin L_Dining_Pin L_Garden_Pin L_Living_Pin
                           L_Porch_Pin L_Relax_Pin L_Bathroom_Pin L_Bedroom_Pin */
  GPIO_InitStruct.Pin = L_Hall_Pin|L_Dining_Pin|L_Garden_Pin|L_Living_Pin
 8004cc8:	23ff      	movs	r3, #255	; 0xff
 8004cca:	61fb      	str	r3, [r7, #28]
                          |L_Porch_Pin|L_Relax_Pin|L_Bathroom_Pin|L_Bedroom_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cd8:	f107 031c 	add.w	r3, r7, #28
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4827      	ldr	r0, [pc, #156]	; (8004d7c <MX_GPIO_Init+0x274>)
 8004ce0:	f001 fbec 	bl	80064bc <HAL_GPIO_Init>

  /*Configure GPIO pin : B_Vehicle_Bell_Pin */
  GPIO_InitStruct.Pin = B_Vehicle_Bell_Pin;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004ce8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004cee:	2302      	movs	r3, #2
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B_Vehicle_Bell_GPIO_Port, &GPIO_InitStruct);
 8004cf2:	f107 031c 	add.w	r3, r7, #28
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	481d      	ldr	r0, [pc, #116]	; (8004d70 <MX_GPIO_Init+0x268>)
 8004cfa:	f001 fbdf 	bl	80064bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2100      	movs	r1, #0
 8004d02:	2006      	movs	r0, #6
 8004d04:	f001 fb11 	bl	800632a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004d08:	2006      	movs	r0, #6
 8004d0a:	f001 fb2a 	bl	8006362 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8004d0e:	2200      	movs	r2, #0
 8004d10:	2100      	movs	r1, #0
 8004d12:	2007      	movs	r0, #7
 8004d14:	f001 fb09 	bl	800632a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004d18:	2007      	movs	r0, #7
 8004d1a:	f001 fb22 	bl	8006362 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8004d1e:	2200      	movs	r2, #0
 8004d20:	2100      	movs	r1, #0
 8004d22:	2009      	movs	r0, #9
 8004d24:	f001 fb01 	bl	800632a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004d28:	2009      	movs	r0, #9
 8004d2a:	f001 fb1a 	bl	8006362 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004d2e:	2200      	movs	r2, #0
 8004d30:	2100      	movs	r1, #0
 8004d32:	200a      	movs	r0, #10
 8004d34:	f001 faf9 	bl	800632a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004d38:	200a      	movs	r0, #10
 8004d3a:	f001 fb12 	bl	8006362 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004d3e:	2200      	movs	r2, #0
 8004d40:	2100      	movs	r1, #0
 8004d42:	2017      	movs	r0, #23
 8004d44:	f001 faf1 	bl	800632a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004d48:	2017      	movs	r0, #23
 8004d4a:	f001 fb0a 	bl	8006362 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004d4e:	2200      	movs	r2, #0
 8004d50:	2100      	movs	r1, #0
 8004d52:	2028      	movs	r0, #40	; 0x28
 8004d54:	f001 fae9 	bl	800632a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004d58:	2028      	movs	r0, #40	; 0x28
 8004d5a:	f001 fb02 	bl	8006362 <HAL_NVIC_EnableIRQ>

}
 8004d5e:	bf00      	nop
 8004d60:	3730      	adds	r7, #48	; 0x30
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	40020800 	.word	0x40020800
 8004d70:	40021000 	.word	0x40021000
 8004d74:	40020400 	.word	0x40020400
 8004d78:	40020000 	.word	0x40020000
 8004d7c:	40020c00 	.word	0x40020c00

08004d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d84:	b672      	cpsid	i
}
 8004d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004d88:	e7fe      	b.n	8004d88 <Error_Handler+0x8>
	...

08004d8c <ssd1306_command>:
extern I2C_HandleTypeDef hi2c1;

extern uint8_t gddram[4][128];

void ssd1306_command(uint8_t byte)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af02      	add	r7, sp, #8
 8004d92:	4603      	mov	r3, r0
 8004d94:	71fb      	strb	r3, [r7, #7]
   uint8_t buffer[2];
	buffer[0] = 0x00;
 8004d96:	2300      	movs	r3, #0
 8004d98:	733b      	strb	r3, [r7, #12]
	buffer[1] = byte;
 8004d9a:	79fb      	ldrb	r3, [r7, #7]
 8004d9c:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1,0x78,buffer,2,50);
 8004d9e:	f107 020c 	add.w	r2, r7, #12
 8004da2:	2332      	movs	r3, #50	; 0x32
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	2302      	movs	r3, #2
 8004da8:	2178      	movs	r1, #120	; 0x78
 8004daa:	4803      	ldr	r0, [pc, #12]	; (8004db8 <ssd1306_command+0x2c>)
 8004dac:	f001 feb0 	bl	8006b10 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&hi2c1,0x78,&buffer[1],1,50);

}
 8004db0:	bf00      	nop
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	20000d90 	.word	0x20000d90

08004dbc <oled_update>:

void oled_update(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af02      	add	r7, sp, #8
  ssd1306_command(SSD1306_COLUMNADDR);
 8004dc2:	2021      	movs	r0, #33	; 0x21
 8004dc4:	f7ff ffe2 	bl	8004d8c <ssd1306_command>
  ssd1306_command(0);   // Column start address (0 = reset)
 8004dc8:	2000      	movs	r0, #0
 8004dca:	f7ff ffdf 	bl	8004d8c <ssd1306_command>
  ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
 8004dce:	207f      	movs	r0, #127	; 0x7f
 8004dd0:	f7ff ffdc 	bl	8004d8c <ssd1306_command>

  ssd1306_command(SSD1306_PAGEADDR);
 8004dd4:	2022      	movs	r0, #34	; 0x22
 8004dd6:	f7ff ffd9 	bl	8004d8c <ssd1306_command>
  ssd1306_command(0); // Page start address (0 = reset)
 8004dda:	2000      	movs	r0, #0
 8004ddc:	f7ff ffd6 	bl	8004d8c <ssd1306_command>
  ssd1306_command(3); // Page end address
 8004de0:	2003      	movs	r0, #3
 8004de2:	f7ff ffd3 	bl	8004d8c <ssd1306_command>

	//SEND data in 16byte packs
	uint8_t buffer[17];
	buffer[0] = 0x40;
 8004de6:	2340      	movs	r3, #64	; 0x40
 8004de8:	703b      	strb	r3, [r7, #0]
	for(uint16_t line=0; line<4; line++)
 8004dea:	2300      	movs	r3, #0
 8004dec:	82fb      	strh	r3, [r7, #22]
 8004dee:	e02d      	b.n	8004e4c <oled_update+0x90>
	{
		for(uint8_t x=0;x<127;x+=16)
 8004df0:	2300      	movs	r3, #0
 8004df2:	757b      	strb	r3, [r7, #21]
 8004df4:	e024      	b.n	8004e40 <oled_update+0x84>
		{
			for(uint8_t i=1;i<17;i++)
 8004df6:	2301      	movs	r3, #1
 8004df8:	753b      	strb	r3, [r7, #20]
 8004dfa:	e012      	b.n	8004e22 <oled_update+0x66>
			{
				buffer[i] = gddram[line][x+i-1];
 8004dfc:	8af9      	ldrh	r1, [r7, #22]
 8004dfe:	7d7a      	ldrb	r2, [r7, #21]
 8004e00:	7d3b      	ldrb	r3, [r7, #20]
 8004e02:	4413      	add	r3, r2
 8004e04:	1e5a      	subs	r2, r3, #1
 8004e06:	7d3b      	ldrb	r3, [r7, #20]
 8004e08:	4814      	ldr	r0, [pc, #80]	; (8004e5c <oled_update+0xa0>)
 8004e0a:	01c9      	lsls	r1, r1, #7
 8004e0c:	4401      	add	r1, r0
 8004e0e:	440a      	add	r2, r1
 8004e10:	7812      	ldrb	r2, [r2, #0]
 8004e12:	f107 0118 	add.w	r1, r7, #24
 8004e16:	440b      	add	r3, r1
 8004e18:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(uint8_t i=1;i<17;i++)
 8004e1c:	7d3b      	ldrb	r3, [r7, #20]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	753b      	strb	r3, [r7, #20]
 8004e22:	7d3b      	ldrb	r3, [r7, #20]
 8004e24:	2b10      	cmp	r3, #16
 8004e26:	d9e9      	bls.n	8004dfc <oled_update+0x40>
			}
			HAL_I2C_Master_Transmit(&hi2c1,0x78,buffer,17,1000);
 8004e28:	463a      	mov	r2, r7
 8004e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	2311      	movs	r3, #17
 8004e32:	2178      	movs	r1, #120	; 0x78
 8004e34:	480a      	ldr	r0, [pc, #40]	; (8004e60 <oled_update+0xa4>)
 8004e36:	f001 fe6b 	bl	8006b10 <HAL_I2C_Master_Transmit>
		for(uint8_t x=0;x<127;x+=16)
 8004e3a:	7d7b      	ldrb	r3, [r7, #21]
 8004e3c:	3310      	adds	r3, #16
 8004e3e:	757b      	strb	r3, [r7, #21]
 8004e40:	7d7b      	ldrb	r3, [r7, #21]
 8004e42:	2b7e      	cmp	r3, #126	; 0x7e
 8004e44:	d9d7      	bls.n	8004df6 <oled_update+0x3a>
	for(uint16_t line=0; line<4; line++)
 8004e46:	8afb      	ldrh	r3, [r7, #22]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	82fb      	strh	r3, [r7, #22]
 8004e4c:	8afb      	ldrh	r3, [r7, #22]
 8004e4e:	2b03      	cmp	r3, #3
 8004e50:	d9ce      	bls.n	8004df0 <oled_update+0x34>
		}
	}

}
 8004e52:	bf00      	nop
 8004e54:	bf00      	nop
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	20000a6c 	.word	0x20000a6c
 8004e60:	20000d90 	.word	0x20000d90

08004e64 <oled_init>:

void oled_init(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
	// Init sequence
  ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 8004e6a:	20ae      	movs	r0, #174	; 0xae
 8004e6c:	f7ff ff8e 	bl	8004d8c <ssd1306_command>
  ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 8004e70:	20d5      	movs	r0, #213	; 0xd5
 8004e72:	f7ff ff8b 	bl	8004d8c <ssd1306_command>
  ssd1306_command(0x80);                                  // the suggested ratio 0x80
 8004e76:	2080      	movs	r0, #128	; 0x80
 8004e78:	f7ff ff88 	bl	8004d8c <ssd1306_command>

  ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 8004e7c:	20a8      	movs	r0, #168	; 0xa8
 8004e7e:	f7ff ff85 	bl	8004d8c <ssd1306_command>
  ssd1306_command(SSD1306_LCDHEIGHT - 1);
 8004e82:	201f      	movs	r0, #31
 8004e84:	f7ff ff82 	bl	8004d8c <ssd1306_command>

  ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 8004e88:	20d3      	movs	r0, #211	; 0xd3
 8004e8a:	f7ff ff7f 	bl	8004d8c <ssd1306_command>
  ssd1306_command(0x0);                                   // no offset
 8004e8e:	2000      	movs	r0, #0
 8004e90:	f7ff ff7c 	bl	8004d8c <ssd1306_command>
  ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 8004e94:	2040      	movs	r0, #64	; 0x40
 8004e96:	f7ff ff79 	bl	8004d8c <ssd1306_command>
  ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 8004e9a:	208d      	movs	r0, #141	; 0x8d
 8004e9c:	f7ff ff76 	bl	8004d8c <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x10); }
  else
    { ssd1306_command(0x14); }
 8004ea0:	2014      	movs	r0, #20
 8004ea2:	f7ff ff73 	bl	8004d8c <ssd1306_command>
  ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 8004ea6:	2020      	movs	r0, #32
 8004ea8:	f7ff ff70 	bl	8004d8c <ssd1306_command>
  ssd1306_command(0x00);                                  // 0x0 act like ks0108
 8004eac:	2000      	movs	r0, #0
 8004eae:	f7ff ff6d 	bl	8004d8c <ssd1306_command>
  ssd1306_command(SSD1306_SEGREMAP | 0x1);
 8004eb2:	20a1      	movs	r0, #161	; 0xa1
 8004eb4:	f7ff ff6a 	bl	8004d8c <ssd1306_command>
  ssd1306_command(SSD1306_COMSCANDEC);
 8004eb8:	20c8      	movs	r0, #200	; 0xc8
 8004eba:	f7ff ff67 	bl	8004d8c <ssd1306_command>

 #if defined SSD1306_128_32
  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 8004ebe:	20da      	movs	r0, #218	; 0xda
 8004ec0:	f7ff ff64 	bl	8004d8c <ssd1306_command>
  ssd1306_command(0x02);
 8004ec4:	2002      	movs	r0, #2
 8004ec6:	f7ff ff61 	bl	8004d8c <ssd1306_command>
  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 8004eca:	2081      	movs	r0, #129	; 0x81
 8004ecc:	f7ff ff5e 	bl	8004d8c <ssd1306_command>
  ssd1306_command(0x8F);
 8004ed0:	208f      	movs	r0, #143	; 0x8f
 8004ed2:	f7ff ff5b 	bl	8004d8c <ssd1306_command>
  else
    { ssd1306_command(0xAF); }

#endif

  ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 8004ed6:	20d9      	movs	r0, #217	; 0xd9
 8004ed8:	f7ff ff58 	bl	8004d8c <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x22); }
  else
    { ssd1306_command(0xF1); }
 8004edc:	20f1      	movs	r0, #241	; 0xf1
 8004ede:	f7ff ff55 	bl	8004d8c <ssd1306_command>
  ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 8004ee2:	20db      	movs	r0, #219	; 0xdb
 8004ee4:	f7ff ff52 	bl	8004d8c <ssd1306_command>
  ssd1306_command(0x40);
 8004ee8:	2040      	movs	r0, #64	; 0x40
 8004eea:	f7ff ff4f 	bl	8004d8c <ssd1306_command>
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 8004eee:	20a4      	movs	r0, #164	; 0xa4
 8004ef0:	f7ff ff4c 	bl	8004d8c <ssd1306_command>
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 8004ef4:	20a6      	movs	r0, #166	; 0xa6
 8004ef6:	f7ff ff49 	bl	8004d8c <ssd1306_command>

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
 8004efa:	202e      	movs	r0, #46	; 0x2e
 8004efc:	f7ff ff46 	bl	8004d8c <ssd1306_command>

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 8004f00:	20af      	movs	r0, #175	; 0xaf
 8004f02:	f7ff ff43 	bl	8004d8c <ssd1306_command>

	//init buffer
	 for(int i = 0; i<4; i++)
 8004f06:	2300      	movs	r3, #0
 8004f08:	607b      	str	r3, [r7, #4]
 8004f0a:	e013      	b.n	8004f34 <oled_init+0xd0>
		for(int j = 0; j<128; j++)
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	603b      	str	r3, [r7, #0]
 8004f10:	e00a      	b.n	8004f28 <oled_init+0xc4>
			gddram[i][j] = 0x00;
 8004f12:	4a0c      	ldr	r2, [pc, #48]	; (8004f44 <oled_init+0xe0>)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	01db      	lsls	r3, r3, #7
 8004f18:	441a      	add	r2, r3
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	2200      	movs	r2, #0
 8004f20:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j<128; j++)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	3301      	adds	r3, #1
 8004f26:	603b      	str	r3, [r7, #0]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f2c:	ddf1      	ble.n	8004f12 <oled_init+0xae>
	 for(int i = 0; i<4; i++)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3301      	adds	r3, #1
 8004f32:	607b      	str	r3, [r7, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	dde8      	ble.n	8004f0c <oled_init+0xa8>
}
 8004f3a:	bf00      	nop
 8004f3c:	bf00      	nop
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	20000a6c 	.word	0x20000a6c

08004f48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f4e:	2300      	movs	r3, #0
 8004f50:	607b      	str	r3, [r7, #4]
 8004f52:	4b10      	ldr	r3, [pc, #64]	; (8004f94 <HAL_MspInit+0x4c>)
 8004f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f56:	4a0f      	ldr	r2, [pc, #60]	; (8004f94 <HAL_MspInit+0x4c>)
 8004f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f5e:	4b0d      	ldr	r3, [pc, #52]	; (8004f94 <HAL_MspInit+0x4c>)
 8004f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f66:	607b      	str	r3, [r7, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	603b      	str	r3, [r7, #0]
 8004f6e:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <HAL_MspInit+0x4c>)
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	4a08      	ldr	r2, [pc, #32]	; (8004f94 <HAL_MspInit+0x4c>)
 8004f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f78:	6413      	str	r3, [r2, #64]	; 0x40
 8004f7a:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <HAL_MspInit+0x4c>)
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f82:	603b      	str	r3, [r7, #0]
 8004f84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004f86:	2007      	movs	r0, #7
 8004f88:	f001 f9c4 	bl	8006314 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f8c:	bf00      	nop
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40023800 	.word	0x40023800

08004f98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08e      	sub	sp, #56	; 0x38
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	605a      	str	r2, [r3, #4]
 8004faa:	609a      	str	r2, [r3, #8]
 8004fac:	60da      	str	r2, [r3, #12]
 8004fae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a45      	ldr	r2, [pc, #276]	; (80050cc <HAL_ADC_MspInit+0x134>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d128      	bne.n	800500c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004fba:	2300      	movs	r3, #0
 8004fbc:	623b      	str	r3, [r7, #32]
 8004fbe:	4b44      	ldr	r3, [pc, #272]	; (80050d0 <HAL_ADC_MspInit+0x138>)
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc2:	4a43      	ldr	r2, [pc, #268]	; (80050d0 <HAL_ADC_MspInit+0x138>)
 8004fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8004fca:	4b41      	ldr	r3, [pc, #260]	; (80050d0 <HAL_ADC_MspInit+0x138>)
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd2:	623b      	str	r3, [r7, #32]
 8004fd4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61fb      	str	r3, [r7, #28]
 8004fda:	4b3d      	ldr	r3, [pc, #244]	; (80050d0 <HAL_ADC_MspInit+0x138>)
 8004fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fde:	4a3c      	ldr	r2, [pc, #240]	; (80050d0 <HAL_ADC_MspInit+0x138>)
 8004fe0:	f043 0301 	orr.w	r3, r3, #1
 8004fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fe6:	4b3a      	ldr	r3, [pc, #232]	; (80050d0 <HAL_ADC_MspInit+0x138>)
 8004fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	61fb      	str	r3, [r7, #28]
 8004ff0:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = LDR_Pin;
 8004ff2:	2310      	movs	r3, #16
 8004ff4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 8004ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005002:	4619      	mov	r1, r3
 8005004:	4833      	ldr	r0, [pc, #204]	; (80050d4 <HAL_ADC_MspInit+0x13c>)
 8005006:	f001 fa59 	bl	80064bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800500a:	e05a      	b.n	80050c2 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a31      	ldr	r2, [pc, #196]	; (80050d8 <HAL_ADC_MspInit+0x140>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d128      	bne.n	8005068 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005016:	2300      	movs	r3, #0
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	4b2d      	ldr	r3, [pc, #180]	; (80050d0 <HAL_ADC_MspInit+0x138>)
 800501c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501e:	4a2c      	ldr	r2, [pc, #176]	; (80050d0 <HAL_ADC_MspInit+0x138>)
 8005020:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005024:	6453      	str	r3, [r2, #68]	; 0x44
 8005026:	4b2a      	ldr	r3, [pc, #168]	; (80050d0 <HAL_ADC_MspInit+0x138>)
 8005028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800502e:	61bb      	str	r3, [r7, #24]
 8005030:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	4b26      	ldr	r3, [pc, #152]	; (80050d0 <HAL_ADC_MspInit+0x138>)
 8005038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503a:	4a25      	ldr	r2, [pc, #148]	; (80050d0 <HAL_ADC_MspInit+0x138>)
 800503c:	f043 0302 	orr.w	r3, r3, #2
 8005040:	6313      	str	r3, [r2, #48]	; 0x30
 8005042:	4b23      	ldr	r3, [pc, #140]	; (80050d0 <HAL_ADC_MspInit+0x138>)
 8005044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = HW_390_Pin;
 800504e:	2301      	movs	r3, #1
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005052:	2303      	movs	r3, #3
 8005054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005056:	2300      	movs	r3, #0
 8005058:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HW_390_GPIO_Port, &GPIO_InitStruct);
 800505a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800505e:	4619      	mov	r1, r3
 8005060:	481e      	ldr	r0, [pc, #120]	; (80050dc <HAL_ADC_MspInit+0x144>)
 8005062:	f001 fa2b 	bl	80064bc <HAL_GPIO_Init>
}
 8005066:	e02c      	b.n	80050c2 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1c      	ldr	r2, [pc, #112]	; (80050e0 <HAL_ADC_MspInit+0x148>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d127      	bne.n	80050c2 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005072:	2300      	movs	r3, #0
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	4b16      	ldr	r3, [pc, #88]	; (80050d0 <HAL_ADC_MspInit+0x138>)
 8005078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507a:	4a15      	ldr	r2, [pc, #84]	; (80050d0 <HAL_ADC_MspInit+0x138>)
 800507c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005080:	6453      	str	r3, [r2, #68]	; 0x44
 8005082:	4b13      	ldr	r3, [pc, #76]	; (80050d0 <HAL_ADC_MspInit+0x138>)
 8005084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	4b0f      	ldr	r3, [pc, #60]	; (80050d0 <HAL_ADC_MspInit+0x138>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	4a0e      	ldr	r2, [pc, #56]	; (80050d0 <HAL_ADC_MspInit+0x138>)
 8005098:	f043 0304 	orr.w	r3, r3, #4
 800509c:	6313      	str	r3, [r2, #48]	; 0x30
 800509e:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <HAL_ADC_MspInit+0x138>)
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	f003 0304 	and.w	r3, r3, #4
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Rain_Pin;
 80050aa:	2302      	movs	r3, #2
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050ae:	2303      	movs	r3, #3
 80050b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Rain_GPIO_Port, &GPIO_InitStruct);
 80050b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050ba:	4619      	mov	r1, r3
 80050bc:	4809      	ldr	r0, [pc, #36]	; (80050e4 <HAL_ADC_MspInit+0x14c>)
 80050be:	f001 f9fd 	bl	80064bc <HAL_GPIO_Init>
}
 80050c2:	bf00      	nop
 80050c4:	3738      	adds	r7, #56	; 0x38
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	40012000 	.word	0x40012000
 80050d0:	40023800 	.word	0x40023800
 80050d4:	40020000 	.word	0x40020000
 80050d8:	40012100 	.word	0x40012100
 80050dc:	40020400 	.word	0x40020400
 80050e0:	40012200 	.word	0x40012200
 80050e4:	40020800 	.word	0x40020800

080050e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08a      	sub	sp, #40	; 0x28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050f0:	f107 0314 	add.w	r3, r7, #20
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	605a      	str	r2, [r3, #4]
 80050fa:	609a      	str	r2, [r3, #8]
 80050fc:	60da      	str	r2, [r3, #12]
 80050fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a19      	ldr	r2, [pc, #100]	; (800516c <HAL_I2C_MspInit+0x84>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d12c      	bne.n	8005164 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800510a:	2300      	movs	r3, #0
 800510c:	613b      	str	r3, [r7, #16]
 800510e:	4b18      	ldr	r3, [pc, #96]	; (8005170 <HAL_I2C_MspInit+0x88>)
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	4a17      	ldr	r2, [pc, #92]	; (8005170 <HAL_I2C_MspInit+0x88>)
 8005114:	f043 0302 	orr.w	r3, r3, #2
 8005118:	6313      	str	r3, [r2, #48]	; 0x30
 800511a:	4b15      	ldr	r3, [pc, #84]	; (8005170 <HAL_I2C_MspInit+0x88>)
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	613b      	str	r3, [r7, #16]
 8005124:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCK_Pin|OLED_SDA_Pin;
 8005126:	f44f 7340 	mov.w	r3, #768	; 0x300
 800512a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800512c:	2312      	movs	r3, #18
 800512e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005130:	2300      	movs	r3, #0
 8005132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005134:	2303      	movs	r3, #3
 8005136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005138:	2304      	movs	r3, #4
 800513a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800513c:	f107 0314 	add.w	r3, r7, #20
 8005140:	4619      	mov	r1, r3
 8005142:	480c      	ldr	r0, [pc, #48]	; (8005174 <HAL_I2C_MspInit+0x8c>)
 8005144:	f001 f9ba 	bl	80064bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005148:	2300      	movs	r3, #0
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	4b08      	ldr	r3, [pc, #32]	; (8005170 <HAL_I2C_MspInit+0x88>)
 800514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005150:	4a07      	ldr	r2, [pc, #28]	; (8005170 <HAL_I2C_MspInit+0x88>)
 8005152:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005156:	6413      	str	r3, [r2, #64]	; 0x40
 8005158:	4b05      	ldr	r3, [pc, #20]	; (8005170 <HAL_I2C_MspInit+0x88>)
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005164:	bf00      	nop
 8005166:	3728      	adds	r7, #40	; 0x28
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	40005400 	.word	0x40005400
 8005170:	40023800 	.word	0x40023800
 8005174:	40020400 	.word	0x40020400

08005178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005178:	b480      	push	{r7}
 800517a:	b08b      	sub	sp, #44	; 0x2c
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a51      	ldr	r2, [pc, #324]	; (80052cc <HAL_TIM_Base_MspInit+0x154>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d10e      	bne.n	80051a8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800518a:	2300      	movs	r3, #0
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
 800518e:	4b50      	ldr	r3, [pc, #320]	; (80052d0 <HAL_TIM_Base_MspInit+0x158>)
 8005190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005192:	4a4f      	ldr	r2, [pc, #316]	; (80052d0 <HAL_TIM_Base_MspInit+0x158>)
 8005194:	f043 0301 	orr.w	r3, r3, #1
 8005198:	6453      	str	r3, [r2, #68]	; 0x44
 800519a:	4b4d      	ldr	r3, [pc, #308]	; (80052d0 <HAL_TIM_Base_MspInit+0x158>)
 800519c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80051a6:	e08a      	b.n	80052be <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM2)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b0:	d10e      	bne.n	80051d0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80051b2:	2300      	movs	r3, #0
 80051b4:	623b      	str	r3, [r7, #32]
 80051b6:	4b46      	ldr	r3, [pc, #280]	; (80052d0 <HAL_TIM_Base_MspInit+0x158>)
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	4a45      	ldr	r2, [pc, #276]	; (80052d0 <HAL_TIM_Base_MspInit+0x158>)
 80051bc:	f043 0301 	orr.w	r3, r3, #1
 80051c0:	6413      	str	r3, [r2, #64]	; 0x40
 80051c2:	4b43      	ldr	r3, [pc, #268]	; (80052d0 <HAL_TIM_Base_MspInit+0x158>)
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	623b      	str	r3, [r7, #32]
 80051cc:	6a3b      	ldr	r3, [r7, #32]
}
 80051ce:	e076      	b.n	80052be <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM3)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a3f      	ldr	r2, [pc, #252]	; (80052d4 <HAL_TIM_Base_MspInit+0x15c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d10e      	bne.n	80051f8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80051da:	2300      	movs	r3, #0
 80051dc:	61fb      	str	r3, [r7, #28]
 80051de:	4b3c      	ldr	r3, [pc, #240]	; (80052d0 <HAL_TIM_Base_MspInit+0x158>)
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	4a3b      	ldr	r2, [pc, #236]	; (80052d0 <HAL_TIM_Base_MspInit+0x158>)
 80051e4:	f043 0302 	orr.w	r3, r3, #2
 80051e8:	6413      	str	r3, [r2, #64]	; 0x40
 80051ea:	4b39      	ldr	r3, [pc, #228]	; (80052d0 <HAL_TIM_Base_MspInit+0x158>)
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	61fb      	str	r3, [r7, #28]
 80051f4:	69fb      	ldr	r3, [r7, #28]
}
 80051f6:	e062      	b.n	80052be <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM4)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a36      	ldr	r2, [pc, #216]	; (80052d8 <HAL_TIM_Base_MspInit+0x160>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d10e      	bne.n	8005220 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005202:	2300      	movs	r3, #0
 8005204:	61bb      	str	r3, [r7, #24]
 8005206:	4b32      	ldr	r3, [pc, #200]	; (80052d0 <HAL_TIM_Base_MspInit+0x158>)
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	4a31      	ldr	r2, [pc, #196]	; (80052d0 <HAL_TIM_Base_MspInit+0x158>)
 800520c:	f043 0304 	orr.w	r3, r3, #4
 8005210:	6413      	str	r3, [r2, #64]	; 0x40
 8005212:	4b2f      	ldr	r3, [pc, #188]	; (80052d0 <HAL_TIM_Base_MspInit+0x158>)
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	f003 0304 	and.w	r3, r3, #4
 800521a:	61bb      	str	r3, [r7, #24]
 800521c:	69bb      	ldr	r3, [r7, #24]
}
 800521e:	e04e      	b.n	80052be <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM5)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a2d      	ldr	r2, [pc, #180]	; (80052dc <HAL_TIM_Base_MspInit+0x164>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d10e      	bne.n	8005248 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800522a:	2300      	movs	r3, #0
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	4b28      	ldr	r3, [pc, #160]	; (80052d0 <HAL_TIM_Base_MspInit+0x158>)
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	4a27      	ldr	r2, [pc, #156]	; (80052d0 <HAL_TIM_Base_MspInit+0x158>)
 8005234:	f043 0308 	orr.w	r3, r3, #8
 8005238:	6413      	str	r3, [r2, #64]	; 0x40
 800523a:	4b25      	ldr	r3, [pc, #148]	; (80052d0 <HAL_TIM_Base_MspInit+0x158>)
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	617b      	str	r3, [r7, #20]
 8005244:	697b      	ldr	r3, [r7, #20]
}
 8005246:	e03a      	b.n	80052be <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM6)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a24      	ldr	r2, [pc, #144]	; (80052e0 <HAL_TIM_Base_MspInit+0x168>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d10e      	bne.n	8005270 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005252:	2300      	movs	r3, #0
 8005254:	613b      	str	r3, [r7, #16]
 8005256:	4b1e      	ldr	r3, [pc, #120]	; (80052d0 <HAL_TIM_Base_MspInit+0x158>)
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	4a1d      	ldr	r2, [pc, #116]	; (80052d0 <HAL_TIM_Base_MspInit+0x158>)
 800525c:	f043 0310 	orr.w	r3, r3, #16
 8005260:	6413      	str	r3, [r2, #64]	; 0x40
 8005262:	4b1b      	ldr	r3, [pc, #108]	; (80052d0 <HAL_TIM_Base_MspInit+0x158>)
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	f003 0310 	and.w	r3, r3, #16
 800526a:	613b      	str	r3, [r7, #16]
 800526c:	693b      	ldr	r3, [r7, #16]
}
 800526e:	e026      	b.n	80052be <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM8)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1b      	ldr	r2, [pc, #108]	; (80052e4 <HAL_TIM_Base_MspInit+0x16c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d10e      	bne.n	8005298 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	4b14      	ldr	r3, [pc, #80]	; (80052d0 <HAL_TIM_Base_MspInit+0x158>)
 8005280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005282:	4a13      	ldr	r2, [pc, #76]	; (80052d0 <HAL_TIM_Base_MspInit+0x158>)
 8005284:	f043 0302 	orr.w	r3, r3, #2
 8005288:	6453      	str	r3, [r2, #68]	; 0x44
 800528a:	4b11      	ldr	r3, [pc, #68]	; (80052d0 <HAL_TIM_Base_MspInit+0x158>)
 800528c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	68fb      	ldr	r3, [r7, #12]
}
 8005296:	e012      	b.n	80052be <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM9)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a12      	ldr	r2, [pc, #72]	; (80052e8 <HAL_TIM_Base_MspInit+0x170>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d10d      	bne.n	80052be <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80052a2:	2300      	movs	r3, #0
 80052a4:	60bb      	str	r3, [r7, #8]
 80052a6:	4b0a      	ldr	r3, [pc, #40]	; (80052d0 <HAL_TIM_Base_MspInit+0x158>)
 80052a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052aa:	4a09      	ldr	r2, [pc, #36]	; (80052d0 <HAL_TIM_Base_MspInit+0x158>)
 80052ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052b0:	6453      	str	r3, [r2, #68]	; 0x44
 80052b2:	4b07      	ldr	r3, [pc, #28]	; (80052d0 <HAL_TIM_Base_MspInit+0x158>)
 80052b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ba:	60bb      	str	r3, [r7, #8]
 80052bc:	68bb      	ldr	r3, [r7, #8]
}
 80052be:	bf00      	nop
 80052c0:	372c      	adds	r7, #44	; 0x2c
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40010000 	.word	0x40010000
 80052d0:	40023800 	.word	0x40023800
 80052d4:	40000400 	.word	0x40000400
 80052d8:	40000800 	.word	0x40000800
 80052dc:	40000c00 	.word	0x40000c00
 80052e0:	40001000 	.word	0x40001000
 80052e4:	40010400 	.word	0x40010400
 80052e8:	40014000 	.word	0x40014000

080052ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08e      	sub	sp, #56	; 0x38
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	605a      	str	r2, [r3, #4]
 80052fe:	609a      	str	r2, [r3, #8]
 8005300:	60da      	str	r2, [r3, #12]
 8005302:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a7a      	ldr	r2, [pc, #488]	; (80054f4 <HAL_TIM_MspPostInit+0x208>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d11f      	bne.n	800534e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800530e:	2300      	movs	r3, #0
 8005310:	623b      	str	r3, [r7, #32]
 8005312:	4b79      	ldr	r3, [pc, #484]	; (80054f8 <HAL_TIM_MspPostInit+0x20c>)
 8005314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005316:	4a78      	ldr	r2, [pc, #480]	; (80054f8 <HAL_TIM_MspPostInit+0x20c>)
 8005318:	f043 0301 	orr.w	r3, r3, #1
 800531c:	6313      	str	r3, [r2, #48]	; 0x30
 800531e:	4b76      	ldr	r3, [pc, #472]	; (80054f8 <HAL_TIM_MspPostInit+0x20c>)
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	623b      	str	r3, [r7, #32]
 8005328:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = L_GamingG_Pin|L_GamingR_Pin|L_GamingB_Pin;
 800532a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800532e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005330:	2302      	movs	r3, #2
 8005332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005334:	2300      	movs	r3, #0
 8005336:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005338:	2300      	movs	r3, #0
 800533a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800533c:	2301      	movs	r3, #1
 800533e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005344:	4619      	mov	r1, r3
 8005346:	486d      	ldr	r0, [pc, #436]	; (80054fc <HAL_TIM_MspPostInit+0x210>)
 8005348:	f001 f8b8 	bl	80064bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800534c:	e0cd      	b.n	80054ea <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM2)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005356:	d13d      	bne.n	80053d4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005358:	2300      	movs	r3, #0
 800535a:	61fb      	str	r3, [r7, #28]
 800535c:	4b66      	ldr	r3, [pc, #408]	; (80054f8 <HAL_TIM_MspPostInit+0x20c>)
 800535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005360:	4a65      	ldr	r2, [pc, #404]	; (80054f8 <HAL_TIM_MspPostInit+0x20c>)
 8005362:	f043 0301 	orr.w	r3, r3, #1
 8005366:	6313      	str	r3, [r2, #48]	; 0x30
 8005368:	4b63      	ldr	r3, [pc, #396]	; (80054f8 <HAL_TIM_MspPostInit+0x20c>)
 800536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	61fb      	str	r3, [r7, #28]
 8005372:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005374:	2300      	movs	r3, #0
 8005376:	61bb      	str	r3, [r7, #24]
 8005378:	4b5f      	ldr	r3, [pc, #380]	; (80054f8 <HAL_TIM_MspPostInit+0x20c>)
 800537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537c:	4a5e      	ldr	r2, [pc, #376]	; (80054f8 <HAL_TIM_MspPostInit+0x20c>)
 800537e:	f043 0302 	orr.w	r3, r3, #2
 8005382:	6313      	str	r3, [r2, #48]	; 0x30
 8005384:	4b5c      	ldr	r3, [pc, #368]	; (80054f8 <HAL_TIM_MspPostInit+0x20c>)
 8005386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = Parcel_Servo_Pin|Garage_Servo_Pin;
 8005390:	2303      	movs	r3, #3
 8005392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005394:	2302      	movs	r3, #2
 8005396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005398:	2300      	movs	r3, #0
 800539a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800539c:	2300      	movs	r3, #0
 800539e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80053a0:	2301      	movs	r3, #1
 80053a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053a8:	4619      	mov	r1, r3
 80053aa:	4854      	ldr	r0, [pc, #336]	; (80054fc <HAL_TIM_MspPostInit+0x210>)
 80053ac:	f001 f886 	bl	80064bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Awning_Servo_Pin;
 80053b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053b6:	2302      	movs	r3, #2
 80053b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ba:	2300      	movs	r3, #0
 80053bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053be:	2300      	movs	r3, #0
 80053c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80053c2:	2301      	movs	r3, #1
 80053c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Awning_Servo_GPIO_Port, &GPIO_InitStruct);
 80053c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053ca:	4619      	mov	r1, r3
 80053cc:	484c      	ldr	r0, [pc, #304]	; (8005500 <HAL_TIM_MspPostInit+0x214>)
 80053ce:	f001 f875 	bl	80064bc <HAL_GPIO_Init>
}
 80053d2:	e08a      	b.n	80054ea <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM3)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a4a      	ldr	r2, [pc, #296]	; (8005504 <HAL_TIM_MspPostInit+0x218>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d13d      	bne.n	800545a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053de:	2300      	movs	r3, #0
 80053e0:	617b      	str	r3, [r7, #20]
 80053e2:	4b45      	ldr	r3, [pc, #276]	; (80054f8 <HAL_TIM_MspPostInit+0x20c>)
 80053e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e6:	4a44      	ldr	r2, [pc, #272]	; (80054f8 <HAL_TIM_MspPostInit+0x20c>)
 80053e8:	f043 0301 	orr.w	r3, r3, #1
 80053ec:	6313      	str	r3, [r2, #48]	; 0x30
 80053ee:	4b42      	ldr	r3, [pc, #264]	; (80054f8 <HAL_TIM_MspPostInit+0x20c>)
 80053f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053fa:	2300      	movs	r3, #0
 80053fc:	613b      	str	r3, [r7, #16]
 80053fe:	4b3e      	ldr	r3, [pc, #248]	; (80054f8 <HAL_TIM_MspPostInit+0x20c>)
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	4a3d      	ldr	r2, [pc, #244]	; (80054f8 <HAL_TIM_MspPostInit+0x20c>)
 8005404:	f043 0304 	orr.w	r3, r3, #4
 8005408:	6313      	str	r3, [r2, #48]	; 0x30
 800540a:	4b3b      	ldr	r3, [pc, #236]	; (80054f8 <HAL_TIM_MspPostInit+0x20c>)
 800540c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	613b      	str	r3, [r7, #16]
 8005414:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Bedroom_Servo_Pin;
 8005416:	2380      	movs	r3, #128	; 0x80
 8005418:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800541a:	2302      	movs	r3, #2
 800541c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800541e:	2300      	movs	r3, #0
 8005420:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005422:	2300      	movs	r3, #0
 8005424:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005426:	2302      	movs	r3, #2
 8005428:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Bedroom_Servo_GPIO_Port, &GPIO_InitStruct);
 800542a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800542e:	4619      	mov	r1, r3
 8005430:	4832      	ldr	r0, [pc, #200]	; (80054fc <HAL_TIM_MspPostInit+0x210>)
 8005432:	f001 f843 	bl	80064bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Office_Servo_Pin|Living_Servo_Pin;
 8005436:	f44f 7340 	mov.w	r3, #768	; 0x300
 800543a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800543c:	2302      	movs	r3, #2
 800543e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005440:	2300      	movs	r3, #0
 8005442:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005444:	2300      	movs	r3, #0
 8005446:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005448:	2302      	movs	r3, #2
 800544a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800544c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005450:	4619      	mov	r1, r3
 8005452:	482d      	ldr	r0, [pc, #180]	; (8005508 <HAL_TIM_MspPostInit+0x21c>)
 8005454:	f001 f832 	bl	80064bc <HAL_GPIO_Init>
}
 8005458:	e047      	b.n	80054ea <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM4)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a2b      	ldr	r2, [pc, #172]	; (800550c <HAL_TIM_MspPostInit+0x220>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d11f      	bne.n	80054a4 <HAL_TIM_MspPostInit+0x1b8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	4b23      	ldr	r3, [pc, #140]	; (80054f8 <HAL_TIM_MspPostInit+0x20c>)
 800546a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546c:	4a22      	ldr	r2, [pc, #136]	; (80054f8 <HAL_TIM_MspPostInit+0x20c>)
 800546e:	f043 0308 	orr.w	r3, r3, #8
 8005472:	6313      	str	r3, [r2, #48]	; 0x30
 8005474:	4b20      	ldr	r3, [pc, #128]	; (80054f8 <HAL_TIM_MspPostInit+0x20c>)
 8005476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8005480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005486:	2302      	movs	r3, #2
 8005488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800548a:	2300      	movs	r3, #0
 800548c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800548e:	2300      	movs	r3, #0
 8005490:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005492:	2302      	movs	r3, #2
 8005494:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8005496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800549a:	4619      	mov	r1, r3
 800549c:	481c      	ldr	r0, [pc, #112]	; (8005510 <HAL_TIM_MspPostInit+0x224>)
 800549e:	f001 f80d 	bl	80064bc <HAL_GPIO_Init>
}
 80054a2:	e022      	b.n	80054ea <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM9)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a1a      	ldr	r2, [pc, #104]	; (8005514 <HAL_TIM_MspPostInit+0x228>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d11d      	bne.n	80054ea <HAL_TIM_MspPostInit+0x1fe>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80054ae:	2300      	movs	r3, #0
 80054b0:	60bb      	str	r3, [r7, #8]
 80054b2:	4b11      	ldr	r3, [pc, #68]	; (80054f8 <HAL_TIM_MspPostInit+0x20c>)
 80054b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b6:	4a10      	ldr	r2, [pc, #64]	; (80054f8 <HAL_TIM_MspPostInit+0x20c>)
 80054b8:	f043 0310 	orr.w	r3, r3, #16
 80054bc:	6313      	str	r3, [r2, #48]	; 0x30
 80054be:	4b0e      	ldr	r3, [pc, #56]	; (80054f8 <HAL_TIM_MspPostInit+0x20c>)
 80054c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c2:	f003 0310 	and.w	r3, r3, #16
 80054c6:	60bb      	str	r3, [r7, #8]
 80054c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80054ca:	2320      	movs	r3, #32
 80054cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ce:	2302      	movs	r3, #2
 80054d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054d6:	2300      	movs	r3, #0
 80054d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80054da:	2303      	movs	r3, #3
 80054dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80054de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054e2:	4619      	mov	r1, r3
 80054e4:	480c      	ldr	r0, [pc, #48]	; (8005518 <HAL_TIM_MspPostInit+0x22c>)
 80054e6:	f000 ffe9 	bl	80064bc <HAL_GPIO_Init>
}
 80054ea:	bf00      	nop
 80054ec:	3738      	adds	r7, #56	; 0x38
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40010000 	.word	0x40010000
 80054f8:	40023800 	.word	0x40023800
 80054fc:	40020000 	.word	0x40020000
 8005500:	40020400 	.word	0x40020400
 8005504:	40000400 	.word	0x40000400
 8005508:	40020800 	.word	0x40020800
 800550c:	40000800 	.word	0x40000800
 8005510:	40020c00 	.word	0x40020c00
 8005514:	40014000 	.word	0x40014000
 8005518:	40021000 	.word	0x40021000

0800551c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08e      	sub	sp, #56	; 0x38
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005528:	2200      	movs	r2, #0
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	605a      	str	r2, [r3, #4]
 800552e:	609a      	str	r2, [r3, #8]
 8005530:	60da      	str	r2, [r3, #12]
 8005532:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a63      	ldr	r2, [pc, #396]	; (80056c8 <HAL_UART_MspInit+0x1ac>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d134      	bne.n	80055a8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800553e:	2300      	movs	r3, #0
 8005540:	623b      	str	r3, [r7, #32]
 8005542:	4b62      	ldr	r3, [pc, #392]	; (80056cc <HAL_UART_MspInit+0x1b0>)
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	4a61      	ldr	r2, [pc, #388]	; (80056cc <HAL_UART_MspInit+0x1b0>)
 8005548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800554c:	6413      	str	r3, [r2, #64]	; 0x40
 800554e:	4b5f      	ldr	r3, [pc, #380]	; (80056cc <HAL_UART_MspInit+0x1b0>)
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005556:	623b      	str	r3, [r7, #32]
 8005558:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800555a:	2300      	movs	r3, #0
 800555c:	61fb      	str	r3, [r7, #28]
 800555e:	4b5b      	ldr	r3, [pc, #364]	; (80056cc <HAL_UART_MspInit+0x1b0>)
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	4a5a      	ldr	r2, [pc, #360]	; (80056cc <HAL_UART_MspInit+0x1b0>)
 8005564:	f043 0301 	orr.w	r3, r3, #1
 8005568:	6313      	str	r3, [r2, #48]	; 0x30
 800556a:	4b58      	ldr	r3, [pc, #352]	; (80056cc <HAL_UART_MspInit+0x1b0>)
 800556c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	61fb      	str	r3, [r7, #28]
 8005574:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005576:	230c      	movs	r3, #12
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800557a:	2302      	movs	r3, #2
 800557c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800557e:	2300      	movs	r3, #0
 8005580:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005582:	2303      	movs	r3, #3
 8005584:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005586:	2307      	movs	r3, #7
 8005588:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800558a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800558e:	4619      	mov	r1, r3
 8005590:	484f      	ldr	r0, [pc, #316]	; (80056d0 <HAL_UART_MspInit+0x1b4>)
 8005592:	f000 ff93 	bl	80064bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005596:	2200      	movs	r2, #0
 8005598:	2100      	movs	r1, #0
 800559a:	2026      	movs	r0, #38	; 0x26
 800559c:	f000 fec5 	bl	800632a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80055a0:	2026      	movs	r0, #38	; 0x26
 80055a2:	f000 fede 	bl	8006362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80055a6:	e08a      	b.n	80056be <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART3)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a49      	ldr	r2, [pc, #292]	; (80056d4 <HAL_UART_MspInit+0x1b8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d14c      	bne.n	800564c <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART3_CLK_ENABLE();
 80055b2:	2300      	movs	r3, #0
 80055b4:	61bb      	str	r3, [r7, #24]
 80055b6:	4b45      	ldr	r3, [pc, #276]	; (80056cc <HAL_UART_MspInit+0x1b0>)
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	4a44      	ldr	r2, [pc, #272]	; (80056cc <HAL_UART_MspInit+0x1b0>)
 80055bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055c0:	6413      	str	r3, [r2, #64]	; 0x40
 80055c2:	4b42      	ldr	r3, [pc, #264]	; (80056cc <HAL_UART_MspInit+0x1b0>)
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055ca:	61bb      	str	r3, [r7, #24]
 80055cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	4b3e      	ldr	r3, [pc, #248]	; (80056cc <HAL_UART_MspInit+0x1b0>)
 80055d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d6:	4a3d      	ldr	r2, [pc, #244]	; (80056cc <HAL_UART_MspInit+0x1b0>)
 80055d8:	f043 0302 	orr.w	r3, r3, #2
 80055dc:	6313      	str	r3, [r2, #48]	; 0x30
 80055de:	4b3b      	ldr	r3, [pc, #236]	; (80056cc <HAL_UART_MspInit+0x1b0>)
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80055ea:	2300      	movs	r3, #0
 80055ec:	613b      	str	r3, [r7, #16]
 80055ee:	4b37      	ldr	r3, [pc, #220]	; (80056cc <HAL_UART_MspInit+0x1b0>)
 80055f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f2:	4a36      	ldr	r2, [pc, #216]	; (80056cc <HAL_UART_MspInit+0x1b0>)
 80055f4:	f043 0308 	orr.w	r3, r3, #8
 80055f8:	6313      	str	r3, [r2, #48]	; 0x30
 80055fa:	4b34      	ldr	r3, [pc, #208]	; (80056cc <HAL_UART_MspInit+0x1b0>)
 80055fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	613b      	str	r3, [r7, #16]
 8005604:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005606:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800560c:	2302      	movs	r3, #2
 800560e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005610:	2300      	movs	r3, #0
 8005612:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005614:	2303      	movs	r3, #3
 8005616:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005618:	2307      	movs	r3, #7
 800561a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800561c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005620:	4619      	mov	r1, r3
 8005622:	482d      	ldr	r0, [pc, #180]	; (80056d8 <HAL_UART_MspInit+0x1bc>)
 8005624:	f000 ff4a 	bl	80064bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800562c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800562e:	2302      	movs	r3, #2
 8005630:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005632:	2300      	movs	r3, #0
 8005634:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005636:	2303      	movs	r3, #3
 8005638:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800563a:	2307      	movs	r3, #7
 800563c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800563e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005642:	4619      	mov	r1, r3
 8005644:	4825      	ldr	r0, [pc, #148]	; (80056dc <HAL_UART_MspInit+0x1c0>)
 8005646:	f000 ff39 	bl	80064bc <HAL_GPIO_Init>
}
 800564a:	e038      	b.n	80056be <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART6)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a23      	ldr	r2, [pc, #140]	; (80056e0 <HAL_UART_MspInit+0x1c4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d133      	bne.n	80056be <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005656:	2300      	movs	r3, #0
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	4b1c      	ldr	r3, [pc, #112]	; (80056cc <HAL_UART_MspInit+0x1b0>)
 800565c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565e:	4a1b      	ldr	r2, [pc, #108]	; (80056cc <HAL_UART_MspInit+0x1b0>)
 8005660:	f043 0320 	orr.w	r3, r3, #32
 8005664:	6453      	str	r3, [r2, #68]	; 0x44
 8005666:	4b19      	ldr	r3, [pc, #100]	; (80056cc <HAL_UART_MspInit+0x1b0>)
 8005668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005672:	2300      	movs	r3, #0
 8005674:	60bb      	str	r3, [r7, #8]
 8005676:	4b15      	ldr	r3, [pc, #84]	; (80056cc <HAL_UART_MspInit+0x1b0>)
 8005678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567a:	4a14      	ldr	r2, [pc, #80]	; (80056cc <HAL_UART_MspInit+0x1b0>)
 800567c:	f043 0304 	orr.w	r3, r3, #4
 8005680:	6313      	str	r3, [r2, #48]	; 0x30
 8005682:	4b12      	ldr	r3, [pc, #72]	; (80056cc <HAL_UART_MspInit+0x1b0>)
 8005684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005686:	f003 0304 	and.w	r3, r3, #4
 800568a:	60bb      	str	r3, [r7, #8]
 800568c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800568e:	23c0      	movs	r3, #192	; 0xc0
 8005690:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005692:	2302      	movs	r3, #2
 8005694:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005696:	2300      	movs	r3, #0
 8005698:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800569a:	2303      	movs	r3, #3
 800569c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800569e:	2308      	movs	r3, #8
 80056a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056a6:	4619      	mov	r1, r3
 80056a8:	480e      	ldr	r0, [pc, #56]	; (80056e4 <HAL_UART_MspInit+0x1c8>)
 80056aa:	f000 ff07 	bl	80064bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80056ae:	2200      	movs	r2, #0
 80056b0:	2100      	movs	r1, #0
 80056b2:	2047      	movs	r0, #71	; 0x47
 80056b4:	f000 fe39 	bl	800632a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80056b8:	2047      	movs	r0, #71	; 0x47
 80056ba:	f000 fe52 	bl	8006362 <HAL_NVIC_EnableIRQ>
}
 80056be:	bf00      	nop
 80056c0:	3738      	adds	r7, #56	; 0x38
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	40004400 	.word	0x40004400
 80056cc:	40023800 	.word	0x40023800
 80056d0:	40020000 	.word	0x40020000
 80056d4:	40004800 	.word	0x40004800
 80056d8:	40020400 	.word	0x40020400
 80056dc:	40020c00 	.word	0x40020c00
 80056e0:	40011400 	.word	0x40011400
 80056e4:	40020800 	.word	0x40020800

080056e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80056ec:	e7fe      	b.n	80056ec <NMI_Handler+0x4>

080056ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056ee:	b480      	push	{r7}
 80056f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056f2:	e7fe      	b.n	80056f2 <HardFault_Handler+0x4>

080056f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056f8:	e7fe      	b.n	80056f8 <MemManage_Handler+0x4>

080056fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056fa:	b480      	push	{r7}
 80056fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056fe:	e7fe      	b.n	80056fe <BusFault_Handler+0x4>

08005700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005704:	e7fe      	b.n	8005704 <UsageFault_Handler+0x4>

08005706 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005706:	b480      	push	{r7}
 8005708:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800570a:	bf00      	nop
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005718:	bf00      	nop
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005722:	b480      	push	{r7}
 8005724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005726:	bf00      	nop
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005734:	f000 f90e 	bl	8005954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005738:	bf00      	nop
 800573a:	bd80      	pop	{r7, pc}

0800573c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005740:	2001      	movs	r0, #1
 8005742:	f001 f889 	bl	8006858 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005746:	bf00      	nop
 8005748:	bd80      	pop	{r7, pc}

0800574a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800574e:	2002      	movs	r0, #2
 8005750:	f001 f882 	bl	8006858 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005754:	bf00      	nop
 8005756:	bd80      	pop	{r7, pc}

08005758 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800575c:	2008      	movs	r0, #8
 800575e:	f001 f87b 	bl	8006858 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005762:	bf00      	nop
 8005764:	bd80      	pop	{r7, pc}

08005766 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800576a:	2010      	movs	r0, #16
 800576c:	f001 f874 	bl	8006858 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005770:	bf00      	nop
 8005772:	bd80      	pop	{r7, pc}

08005774 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8005778:	2040      	movs	r0, #64	; 0x40
 800577a:	f001 f86d 	bl	8006858 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800577e:	bf00      	nop
 8005780:	bd80      	pop	{r7, pc}
	...

08005784 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UART_isr(&huart2);
 8005788:	4803      	ldr	r0, [pc, #12]	; (8005798 <USART2_IRQHandler+0x14>)
 800578a:	f7fd f9a5 	bl	8002ad8 <UART_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800578e:	4802      	ldr	r0, [pc, #8]	; (8005798 <USART2_IRQHandler+0x14>)
 8005790:	f003 f9fe 	bl	8008b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005794:	bf00      	nop
 8005796:	bd80      	pop	{r7, pc}
 8005798:	20001068 	.word	0x20001068

0800579c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80057a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80057a4:	f001 f858 	bl	8006858 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80057a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80057ac:	f001 f854 	bl	8006858 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80057b0:	bf00      	nop
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	UART_isr(&huart6);
 80057b8:	4803      	ldr	r0, [pc, #12]	; (80057c8 <USART6_IRQHandler+0x14>)
 80057ba:	f7fd f98d 	bl	8002ad8 <UART_isr>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80057be:	4802      	ldr	r0, [pc, #8]	; (80057c8 <USART6_IRQHandler+0x14>)
 80057c0:	f003 f9e6 	bl	8008b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80057c4:	bf00      	nop
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	20000fdc 	.word	0x20000fdc

080057cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80057d4:	4a14      	ldr	r2, [pc, #80]	; (8005828 <_sbrk+0x5c>)
 80057d6:	4b15      	ldr	r3, [pc, #84]	; (800582c <_sbrk+0x60>)
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80057e0:	4b13      	ldr	r3, [pc, #76]	; (8005830 <_sbrk+0x64>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d102      	bne.n	80057ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80057e8:	4b11      	ldr	r3, [pc, #68]	; (8005830 <_sbrk+0x64>)
 80057ea:	4a12      	ldr	r2, [pc, #72]	; (8005834 <_sbrk+0x68>)
 80057ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80057ee:	4b10      	ldr	r3, [pc, #64]	; (8005830 <_sbrk+0x64>)
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4413      	add	r3, r2
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d207      	bcs.n	800580c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80057fc:	f004 f854 	bl	80098a8 <__errno>
 8005800:	4603      	mov	r3, r0
 8005802:	220c      	movs	r2, #12
 8005804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005806:	f04f 33ff 	mov.w	r3, #4294967295
 800580a:	e009      	b.n	8005820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800580c:	4b08      	ldr	r3, [pc, #32]	; (8005830 <_sbrk+0x64>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005812:	4b07      	ldr	r3, [pc, #28]	; (8005830 <_sbrk+0x64>)
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4413      	add	r3, r2
 800581a:	4a05      	ldr	r2, [pc, #20]	; (8005830 <_sbrk+0x64>)
 800581c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800581e:	68fb      	ldr	r3, [r7, #12]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	20020000 	.word	0x20020000
 800582c:	00000400 	.word	0x00000400
 8005830:	20000900 	.word	0x20000900
 8005834:	200010c8 	.word	0x200010c8

08005838 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800583c:	4b06      	ldr	r3, [pc, #24]	; (8005858 <SystemInit+0x20>)
 800583e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005842:	4a05      	ldr	r2, [pc, #20]	; (8005858 <SystemInit+0x20>)
 8005844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800584c:	bf00      	nop
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	e000ed00 	.word	0xe000ed00

0800585c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800585c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005894 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005860:	480d      	ldr	r0, [pc, #52]	; (8005898 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005862:	490e      	ldr	r1, [pc, #56]	; (800589c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005864:	4a0e      	ldr	r2, [pc, #56]	; (80058a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005868:	e002      	b.n	8005870 <LoopCopyDataInit>

0800586a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800586a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800586c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800586e:	3304      	adds	r3, #4

08005870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005874:	d3f9      	bcc.n	800586a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005876:	4a0b      	ldr	r2, [pc, #44]	; (80058a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005878:	4c0b      	ldr	r4, [pc, #44]	; (80058a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800587a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800587c:	e001      	b.n	8005882 <LoopFillZerobss>

0800587e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800587e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005880:	3204      	adds	r2, #4

08005882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005884:	d3fb      	bcc.n	800587e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005886:	f7ff ffd7 	bl	8005838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800588a:	f004 f813 	bl	80098b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800588e:	f7fd fe4f 	bl	8003530 <main>
  bx  lr    
 8005892:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005894:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800589c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80058a0:	0800d198 	.word	0x0800d198
  ldr r2, =_sbss
 80058a4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80058a8:	200010c8 	.word	0x200010c8

080058ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80058ac:	e7fe      	b.n	80058ac <ADC_IRQHandler>
	...

080058b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80058b4:	4b0e      	ldr	r3, [pc, #56]	; (80058f0 <HAL_Init+0x40>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a0d      	ldr	r2, [pc, #52]	; (80058f0 <HAL_Init+0x40>)
 80058ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80058c0:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <HAL_Init+0x40>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a0a      	ldr	r2, [pc, #40]	; (80058f0 <HAL_Init+0x40>)
 80058c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80058cc:	4b08      	ldr	r3, [pc, #32]	; (80058f0 <HAL_Init+0x40>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a07      	ldr	r2, [pc, #28]	; (80058f0 <HAL_Init+0x40>)
 80058d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058d8:	2003      	movs	r0, #3
 80058da:	f000 fd1b 	bl	8006314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80058de:	2000      	movs	r0, #0
 80058e0:	f000 f808 	bl	80058f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80058e4:	f7ff fb30 	bl	8004f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	40023c00 	.word	0x40023c00

080058f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80058fc:	4b12      	ldr	r3, [pc, #72]	; (8005948 <HAL_InitTick+0x54>)
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	4b12      	ldr	r3, [pc, #72]	; (800594c <HAL_InitTick+0x58>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	4619      	mov	r1, r3
 8005906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800590a:	fbb3 f3f1 	udiv	r3, r3, r1
 800590e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fd33 	bl	800637e <HAL_SYSTICK_Config>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e00e      	b.n	8005940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b0f      	cmp	r3, #15
 8005926:	d80a      	bhi.n	800593e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005928:	2200      	movs	r2, #0
 800592a:	6879      	ldr	r1, [r7, #4]
 800592c:	f04f 30ff 	mov.w	r0, #4294967295
 8005930:	f000 fcfb 	bl	800632a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005934:	4a06      	ldr	r2, [pc, #24]	; (8005950 <HAL_InitTick+0x5c>)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	e000      	b.n	8005940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
}
 8005940:	4618      	mov	r0, r3
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	20000000 	.word	0x20000000
 800594c:	20000008 	.word	0x20000008
 8005950:	20000004 	.word	0x20000004

08005954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005958:	4b06      	ldr	r3, [pc, #24]	; (8005974 <HAL_IncTick+0x20>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	461a      	mov	r2, r3
 800595e:	4b06      	ldr	r3, [pc, #24]	; (8005978 <HAL_IncTick+0x24>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4413      	add	r3, r2
 8005964:	4a04      	ldr	r2, [pc, #16]	; (8005978 <HAL_IncTick+0x24>)
 8005966:	6013      	str	r3, [r2, #0]
}
 8005968:	bf00      	nop
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	20000008 	.word	0x20000008
 8005978:	200010b4 	.word	0x200010b4

0800597c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
  return uwTick;
 8005980:	4b03      	ldr	r3, [pc, #12]	; (8005990 <HAL_GetTick+0x14>)
 8005982:	681b      	ldr	r3, [r3, #0]
}
 8005984:	4618      	mov	r0, r3
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	200010b4 	.word	0x200010b4

08005994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800599c:	f7ff ffee 	bl	800597c <HAL_GetTick>
 80059a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ac:	d005      	beq.n	80059ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80059ae:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <HAL_Delay+0x44>)
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4413      	add	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80059ba:	bf00      	nop
 80059bc:	f7ff ffde 	bl	800597c <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d8f7      	bhi.n	80059bc <HAL_Delay+0x28>
  {
  }
}
 80059cc:	bf00      	nop
 80059ce:	bf00      	nop
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	20000008 	.word	0x20000008

080059dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059e4:	2300      	movs	r3, #0
 80059e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e033      	b.n	8005a5a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d109      	bne.n	8005a0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7ff facc 	bl	8004f98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	f003 0310 	and.w	r3, r3, #16
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d118      	bne.n	8005a4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005a22:	f023 0302 	bic.w	r3, r3, #2
 8005a26:	f043 0202 	orr.w	r2, r3, #2
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 faa4 	bl	8005f7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	f023 0303 	bic.w	r3, r3, #3
 8005a42:	f043 0201 	orr.w	r2, r3, #1
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	641a      	str	r2, [r3, #64]	; 0x40
 8005a4a:	e001      	b.n	8005a50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <HAL_ADC_Start+0x1a>
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e0b2      	b.n	8005be4 <HAL_ADC_Start+0x180>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d018      	beq.n	8005ac6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0201 	orr.w	r2, r2, #1
 8005aa2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005aa4:	4b52      	ldr	r3, [pc, #328]	; (8005bf0 <HAL_ADC_Start+0x18c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a52      	ldr	r2, [pc, #328]	; (8005bf4 <HAL_ADC_Start+0x190>)
 8005aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005aae:	0c9a      	lsrs	r2, r3, #18
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	4413      	add	r3, r2
 8005ab6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005ab8:	e002      	b.n	8005ac0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	3b01      	subs	r3, #1
 8005abe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1f9      	bne.n	8005aba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d17a      	bne.n	8005bca <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005adc:	f023 0301 	bic.w	r3, r3, #1
 8005ae0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d007      	beq.n	8005b06 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005afe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b12:	d106      	bne.n	8005b22 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b18:	f023 0206 	bic.w	r2, r3, #6
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	645a      	str	r2, [r3, #68]	; 0x44
 8005b20:	e002      	b.n	8005b28 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b30:	4b31      	ldr	r3, [pc, #196]	; (8005bf8 <HAL_ADC_Start+0x194>)
 8005b32:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005b3c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f003 031f 	and.w	r3, r3, #31
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d12a      	bne.n	8005ba0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a2b      	ldr	r2, [pc, #172]	; (8005bfc <HAL_ADC_Start+0x198>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d015      	beq.n	8005b80 <HAL_ADC_Start+0x11c>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a29      	ldr	r2, [pc, #164]	; (8005c00 <HAL_ADC_Start+0x19c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d105      	bne.n	8005b6a <HAL_ADC_Start+0x106>
 8005b5e:	4b26      	ldr	r3, [pc, #152]	; (8005bf8 <HAL_ADC_Start+0x194>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f003 031f 	and.w	r3, r3, #31
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00a      	beq.n	8005b80 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a25      	ldr	r2, [pc, #148]	; (8005c04 <HAL_ADC_Start+0x1a0>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d136      	bne.n	8005be2 <HAL_ADC_Start+0x17e>
 8005b74:	4b20      	ldr	r3, [pc, #128]	; (8005bf8 <HAL_ADC_Start+0x194>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f003 0310 	and.w	r3, r3, #16
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d130      	bne.n	8005be2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d129      	bne.n	8005be2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005b9c:	609a      	str	r2, [r3, #8]
 8005b9e:	e020      	b.n	8005be2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a15      	ldr	r2, [pc, #84]	; (8005bfc <HAL_ADC_Start+0x198>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d11b      	bne.n	8005be2 <HAL_ADC_Start+0x17e>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d114      	bne.n	8005be2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005bc6:	609a      	str	r2, [r3, #8]
 8005bc8:	e00b      	b.n	8005be2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	f043 0210 	orr.w	r2, r3, #16
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bda:	f043 0201 	orr.w	r2, r3, #1
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	20000000 	.word	0x20000000
 8005bf4:	431bde83 	.word	0x431bde83
 8005bf8:	40012300 	.word	0x40012300
 8005bfc:	40012000 	.word	0x40012000
 8005c00:	40012100 	.word	0x40012100
 8005c04:	40012200 	.word	0x40012200

08005c08 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c24:	d113      	bne.n	8005c4e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c34:	d10b      	bne.n	8005c4e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	f043 0220 	orr.w	r2, r3, #32
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e063      	b.n	8005d16 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005c4e:	f7ff fe95 	bl	800597c <HAL_GetTick>
 8005c52:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c54:	e021      	b.n	8005c9a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5c:	d01d      	beq.n	8005c9a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d007      	beq.n	8005c74 <HAL_ADC_PollForConversion+0x6c>
 8005c64:	f7ff fe8a 	bl	800597c <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d212      	bcs.n	8005c9a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d00b      	beq.n	8005c9a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	f043 0204 	orr.w	r2, r3, #4
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e03d      	b.n	8005d16 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d1d6      	bne.n	8005c56 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f06f 0212 	mvn.w	r2, #18
 8005cb0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d123      	bne.n	8005d14 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d11f      	bne.n	8005d14 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d006      	beq.n	8005cf0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d111      	bne.n	8005d14 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d105      	bne.n	8005d14 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0c:	f043 0201 	orr.w	r2, r3, #1
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005d1e:	b480      	push	{r7}
 8005d20:	b083      	sub	sp, #12
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d101      	bne.n	8005d54 <HAL_ADC_ConfigChannel+0x1c>
 8005d50:	2302      	movs	r3, #2
 8005d52:	e105      	b.n	8005f60 <HAL_ADC_ConfigChannel+0x228>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b09      	cmp	r3, #9
 8005d62:	d925      	bls.n	8005db0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68d9      	ldr	r1, [r3, #12]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	461a      	mov	r2, r3
 8005d72:	4613      	mov	r3, r2
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	4413      	add	r3, r2
 8005d78:	3b1e      	subs	r3, #30
 8005d7a:	2207      	movs	r2, #7
 8005d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d80:	43da      	mvns	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	400a      	ands	r2, r1
 8005d88:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68d9      	ldr	r1, [r3, #12]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	4403      	add	r3, r0
 8005da2:	3b1e      	subs	r3, #30
 8005da4:	409a      	lsls	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	60da      	str	r2, [r3, #12]
 8005dae:	e022      	b.n	8005df6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6919      	ldr	r1, [r3, #16]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	4413      	add	r3, r2
 8005dc4:	2207      	movs	r2, #7
 8005dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dca:	43da      	mvns	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	400a      	ands	r2, r1
 8005dd2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6919      	ldr	r1, [r3, #16]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	4618      	mov	r0, r3
 8005de6:	4603      	mov	r3, r0
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	4403      	add	r3, r0
 8005dec:	409a      	lsls	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2b06      	cmp	r3, #6
 8005dfc:	d824      	bhi.n	8005e48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	3b05      	subs	r3, #5
 8005e10:	221f      	movs	r2, #31
 8005e12:	fa02 f303 	lsl.w	r3, r2, r3
 8005e16:	43da      	mvns	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	400a      	ands	r2, r1
 8005e1e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	4613      	mov	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	3b05      	subs	r3, #5
 8005e3a:	fa00 f203 	lsl.w	r2, r0, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	635a      	str	r2, [r3, #52]	; 0x34
 8005e46:	e04c      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	2b0c      	cmp	r3, #12
 8005e4e:	d824      	bhi.n	8005e9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	3b23      	subs	r3, #35	; 0x23
 8005e62:	221f      	movs	r2, #31
 8005e64:	fa02 f303 	lsl.w	r3, r2, r3
 8005e68:	43da      	mvns	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	400a      	ands	r2, r1
 8005e70:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	4618      	mov	r0, r3
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	4613      	mov	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	3b23      	subs	r3, #35	; 0x23
 8005e8c:	fa00 f203 	lsl.w	r2, r0, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	631a      	str	r2, [r3, #48]	; 0x30
 8005e98:	e023      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	3b41      	subs	r3, #65	; 0x41
 8005eac:	221f      	movs	r2, #31
 8005eae:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb2:	43da      	mvns	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	400a      	ands	r2, r1
 8005eba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	4618      	mov	r0, r3
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	3b41      	subs	r3, #65	; 0x41
 8005ed6:	fa00 f203 	lsl.w	r2, r0, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ee2:	4b22      	ldr	r3, [pc, #136]	; (8005f6c <HAL_ADC_ConfigChannel+0x234>)
 8005ee4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a21      	ldr	r2, [pc, #132]	; (8005f70 <HAL_ADC_ConfigChannel+0x238>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d109      	bne.n	8005f04 <HAL_ADC_ConfigChannel+0x1cc>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b12      	cmp	r3, #18
 8005ef6:	d105      	bne.n	8005f04 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a19      	ldr	r2, [pc, #100]	; (8005f70 <HAL_ADC_ConfigChannel+0x238>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d123      	bne.n	8005f56 <HAL_ADC_ConfigChannel+0x21e>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b10      	cmp	r3, #16
 8005f14:	d003      	beq.n	8005f1e <HAL_ADC_ConfigChannel+0x1e6>
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b11      	cmp	r3, #17
 8005f1c:	d11b      	bne.n	8005f56 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b10      	cmp	r3, #16
 8005f30:	d111      	bne.n	8005f56 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005f32:	4b10      	ldr	r3, [pc, #64]	; (8005f74 <HAL_ADC_ConfigChannel+0x23c>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a10      	ldr	r2, [pc, #64]	; (8005f78 <HAL_ADC_ConfigChannel+0x240>)
 8005f38:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3c:	0c9a      	lsrs	r2, r3, #18
 8005f3e:	4613      	mov	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005f48:	e002      	b.n	8005f50 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1f9      	bne.n	8005f4a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	40012300 	.word	0x40012300
 8005f70:	40012000 	.word	0x40012000
 8005f74:	20000000 	.word	0x20000000
 8005f78:	431bde83 	.word	0x431bde83

08005f7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f84:	4b79      	ldr	r3, [pc, #484]	; (800616c <ADC_Init+0x1f0>)
 8005f86:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6859      	ldr	r1, [r3, #4]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	021a      	lsls	r2, r3, #8
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005fd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6859      	ldr	r1, [r3, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ff6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6899      	ldr	r1, [r3, #8]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600e:	4a58      	ldr	r2, [pc, #352]	; (8006170 <ADC_Init+0x1f4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d022      	beq.n	800605a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006022:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6899      	ldr	r1, [r3, #8]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006044:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6899      	ldr	r1, [r3, #8]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	609a      	str	r2, [r3, #8]
 8006058:	e00f      	b.n	800607a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006068:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006078:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0202 	bic.w	r2, r2, #2
 8006088:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6899      	ldr	r1, [r3, #8]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	7e1b      	ldrb	r3, [r3, #24]
 8006094:	005a      	lsls	r2, r3, #1
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d01b      	beq.n	80060e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80060c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6859      	ldr	r1, [r3, #4]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	3b01      	subs	r3, #1
 80060d4:	035a      	lsls	r2, r3, #13
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	605a      	str	r2, [r3, #4]
 80060de:	e007      	b.n	80060f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80060fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	3b01      	subs	r3, #1
 800610c:	051a      	lsls	r2, r3, #20
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006124:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6899      	ldr	r1, [r3, #8]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006132:	025a      	lsls	r2, r3, #9
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689a      	ldr	r2, [r3, #8]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800614a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6899      	ldr	r1, [r3, #8]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	029a      	lsls	r2, r3, #10
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	609a      	str	r2, [r3, #8]
}
 8006160:	bf00      	nop
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	40012300 	.word	0x40012300
 8006170:	0f000001 	.word	0x0f000001

08006174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f003 0307 	and.w	r3, r3, #7
 8006182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006184:	4b0c      	ldr	r3, [pc, #48]	; (80061b8 <__NVIC_SetPriorityGrouping+0x44>)
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006190:	4013      	ands	r3, r2
 8006192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800619c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061a6:	4a04      	ldr	r2, [pc, #16]	; (80061b8 <__NVIC_SetPriorityGrouping+0x44>)
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	60d3      	str	r3, [r2, #12]
}
 80061ac:	bf00      	nop
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	e000ed00 	.word	0xe000ed00

080061bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061c0:	4b04      	ldr	r3, [pc, #16]	; (80061d4 <__NVIC_GetPriorityGrouping+0x18>)
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	0a1b      	lsrs	r3, r3, #8
 80061c6:	f003 0307 	and.w	r3, r3, #7
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	e000ed00 	.word	0xe000ed00

080061d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	4603      	mov	r3, r0
 80061e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	db0b      	blt.n	8006202 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061ea:	79fb      	ldrb	r3, [r7, #7]
 80061ec:	f003 021f 	and.w	r2, r3, #31
 80061f0:	4907      	ldr	r1, [pc, #28]	; (8006210 <__NVIC_EnableIRQ+0x38>)
 80061f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061f6:	095b      	lsrs	r3, r3, #5
 80061f8:	2001      	movs	r0, #1
 80061fa:	fa00 f202 	lsl.w	r2, r0, r2
 80061fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	e000e100 	.word	0xe000e100

08006214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	4603      	mov	r3, r0
 800621c:	6039      	str	r1, [r7, #0]
 800621e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006224:	2b00      	cmp	r3, #0
 8006226:	db0a      	blt.n	800623e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	b2da      	uxtb	r2, r3
 800622c:	490c      	ldr	r1, [pc, #48]	; (8006260 <__NVIC_SetPriority+0x4c>)
 800622e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006232:	0112      	lsls	r2, r2, #4
 8006234:	b2d2      	uxtb	r2, r2
 8006236:	440b      	add	r3, r1
 8006238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800623c:	e00a      	b.n	8006254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	b2da      	uxtb	r2, r3
 8006242:	4908      	ldr	r1, [pc, #32]	; (8006264 <__NVIC_SetPriority+0x50>)
 8006244:	79fb      	ldrb	r3, [r7, #7]
 8006246:	f003 030f 	and.w	r3, r3, #15
 800624a:	3b04      	subs	r3, #4
 800624c:	0112      	lsls	r2, r2, #4
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	440b      	add	r3, r1
 8006252:	761a      	strb	r2, [r3, #24]
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	e000e100 	.word	0xe000e100
 8006264:	e000ed00 	.word	0xe000ed00

08006268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006268:	b480      	push	{r7}
 800626a:	b089      	sub	sp, #36	; 0x24
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f003 0307 	and.w	r3, r3, #7
 800627a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	f1c3 0307 	rsb	r3, r3, #7
 8006282:	2b04      	cmp	r3, #4
 8006284:	bf28      	it	cs
 8006286:	2304      	movcs	r3, #4
 8006288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	3304      	adds	r3, #4
 800628e:	2b06      	cmp	r3, #6
 8006290:	d902      	bls.n	8006298 <NVIC_EncodePriority+0x30>
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	3b03      	subs	r3, #3
 8006296:	e000      	b.n	800629a <NVIC_EncodePriority+0x32>
 8006298:	2300      	movs	r3, #0
 800629a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800629c:	f04f 32ff 	mov.w	r2, #4294967295
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	fa02 f303 	lsl.w	r3, r2, r3
 80062a6:	43da      	mvns	r2, r3
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	401a      	ands	r2, r3
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062b0:	f04f 31ff 	mov.w	r1, #4294967295
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	fa01 f303 	lsl.w	r3, r1, r3
 80062ba:	43d9      	mvns	r1, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062c0:	4313      	orrs	r3, r2
         );
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3724      	adds	r7, #36	; 0x24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
	...

080062d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3b01      	subs	r3, #1
 80062dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062e0:	d301      	bcc.n	80062e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80062e2:	2301      	movs	r3, #1
 80062e4:	e00f      	b.n	8006306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80062e6:	4a0a      	ldr	r2, [pc, #40]	; (8006310 <SysTick_Config+0x40>)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3b01      	subs	r3, #1
 80062ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80062ee:	210f      	movs	r1, #15
 80062f0:	f04f 30ff 	mov.w	r0, #4294967295
 80062f4:	f7ff ff8e 	bl	8006214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80062f8:	4b05      	ldr	r3, [pc, #20]	; (8006310 <SysTick_Config+0x40>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062fe:	4b04      	ldr	r3, [pc, #16]	; (8006310 <SysTick_Config+0x40>)
 8006300:	2207      	movs	r2, #7
 8006302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	e000e010 	.word	0xe000e010

08006314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f7ff ff29 	bl	8006174 <__NVIC_SetPriorityGrouping>
}
 8006322:	bf00      	nop
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800632a:	b580      	push	{r7, lr}
 800632c:	b086      	sub	sp, #24
 800632e:	af00      	add	r7, sp, #0
 8006330:	4603      	mov	r3, r0
 8006332:	60b9      	str	r1, [r7, #8]
 8006334:	607a      	str	r2, [r7, #4]
 8006336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006338:	2300      	movs	r3, #0
 800633a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800633c:	f7ff ff3e 	bl	80061bc <__NVIC_GetPriorityGrouping>
 8006340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	68b9      	ldr	r1, [r7, #8]
 8006346:	6978      	ldr	r0, [r7, #20]
 8006348:	f7ff ff8e 	bl	8006268 <NVIC_EncodePriority>
 800634c:	4602      	mov	r2, r0
 800634e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006352:	4611      	mov	r1, r2
 8006354:	4618      	mov	r0, r3
 8006356:	f7ff ff5d 	bl	8006214 <__NVIC_SetPriority>
}
 800635a:	bf00      	nop
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b082      	sub	sp, #8
 8006366:	af00      	add	r7, sp, #0
 8006368:	4603      	mov	r3, r0
 800636a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800636c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006370:	4618      	mov	r0, r3
 8006372:	f7ff ff31 	bl	80061d8 <__NVIC_EnableIRQ>
}
 8006376:	bf00      	nop
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b082      	sub	sp, #8
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7ff ffa2 	bl	80062d0 <SysTick_Config>
 800638c:	4603      	mov	r3, r0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b084      	sub	sp, #16
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80063a4:	f7ff faea 	bl	800597c <HAL_GetTick>
 80063a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d008      	beq.n	80063c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2280      	movs	r2, #128	; 0x80
 80063ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e052      	b.n	800646e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0216 	bic.w	r2, r2, #22
 80063d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	695a      	ldr	r2, [r3, #20]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d103      	bne.n	80063f8 <HAL_DMA_Abort+0x62>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d007      	beq.n	8006408 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0208 	bic.w	r2, r2, #8
 8006406:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 0201 	bic.w	r2, r2, #1
 8006416:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006418:	e013      	b.n	8006442 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800641a:	f7ff faaf 	bl	800597c <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b05      	cmp	r3, #5
 8006426:	d90c      	bls.n	8006442 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2220      	movs	r2, #32
 800642c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2203      	movs	r2, #3
 8006432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e015      	b.n	800646e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1e4      	bne.n	800641a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006454:	223f      	movs	r2, #63	; 0x3f
 8006456:	409a      	lsls	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b02      	cmp	r3, #2
 8006488:	d004      	beq.n	8006494 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2280      	movs	r2, #128	; 0x80
 800648e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e00c      	b.n	80064ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2205      	movs	r2, #5
 8006498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0201 	bic.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
	...

080064bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064bc:	b480      	push	{r7}
 80064be:	b089      	sub	sp, #36	; 0x24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064d2:	2300      	movs	r3, #0
 80064d4:	61fb      	str	r3, [r7, #28]
 80064d6:	e16b      	b.n	80067b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80064d8:	2201      	movs	r2, #1
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	fa02 f303 	lsl.w	r3, r2, r3
 80064e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	4013      	ands	r3, r2
 80064ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	f040 815a 	bne.w	80067aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f003 0303 	and.w	r3, r3, #3
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d005      	beq.n	800650e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800650a:	2b02      	cmp	r3, #2
 800650c:	d130      	bne.n	8006570 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	005b      	lsls	r3, r3, #1
 8006518:	2203      	movs	r2, #3
 800651a:	fa02 f303 	lsl.w	r3, r2, r3
 800651e:	43db      	mvns	r3, r3
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	4013      	ands	r3, r2
 8006524:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	68da      	ldr	r2, [r3, #12]
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	005b      	lsls	r3, r3, #1
 800652e:	fa02 f303 	lsl.w	r3, r2, r3
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	4313      	orrs	r3, r2
 8006536:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006544:	2201      	movs	r2, #1
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	fa02 f303 	lsl.w	r3, r2, r3
 800654c:	43db      	mvns	r3, r3
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	4013      	ands	r3, r2
 8006552:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	091b      	lsrs	r3, r3, #4
 800655a:	f003 0201 	and.w	r2, r3, #1
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	fa02 f303 	lsl.w	r3, r2, r3
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	4313      	orrs	r3, r2
 8006568:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f003 0303 	and.w	r3, r3, #3
 8006578:	2b03      	cmp	r3, #3
 800657a:	d017      	beq.n	80065ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	2203      	movs	r2, #3
 8006588:	fa02 f303 	lsl.w	r3, r2, r3
 800658c:	43db      	mvns	r3, r3
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	4013      	ands	r3, r2
 8006592:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	689a      	ldr	r2, [r3, #8]
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	fa02 f303 	lsl.w	r3, r2, r3
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f003 0303 	and.w	r3, r3, #3
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d123      	bne.n	8006600 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	08da      	lsrs	r2, r3, #3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3208      	adds	r2, #8
 80065c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	f003 0307 	and.w	r3, r3, #7
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	220f      	movs	r2, #15
 80065d0:	fa02 f303 	lsl.w	r3, r2, r3
 80065d4:	43db      	mvns	r3, r3
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	4013      	ands	r3, r2
 80065da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	691a      	ldr	r2, [r3, #16]
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	f003 0307 	and.w	r3, r3, #7
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	fa02 f303 	lsl.w	r3, r2, r3
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	08da      	lsrs	r2, r3, #3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3208      	adds	r2, #8
 80065fa:	69b9      	ldr	r1, [r7, #24]
 80065fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	2203      	movs	r2, #3
 800660c:	fa02 f303 	lsl.w	r3, r2, r3
 8006610:	43db      	mvns	r3, r3
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	4013      	ands	r3, r2
 8006616:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f003 0203 	and.w	r2, r3, #3
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	fa02 f303 	lsl.w	r3, r2, r3
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	4313      	orrs	r3, r2
 800662c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 80b4 	beq.w	80067aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006642:	2300      	movs	r3, #0
 8006644:	60fb      	str	r3, [r7, #12]
 8006646:	4b60      	ldr	r3, [pc, #384]	; (80067c8 <HAL_GPIO_Init+0x30c>)
 8006648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664a:	4a5f      	ldr	r2, [pc, #380]	; (80067c8 <HAL_GPIO_Init+0x30c>)
 800664c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006650:	6453      	str	r3, [r2, #68]	; 0x44
 8006652:	4b5d      	ldr	r3, [pc, #372]	; (80067c8 <HAL_GPIO_Init+0x30c>)
 8006654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800665a:	60fb      	str	r3, [r7, #12]
 800665c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800665e:	4a5b      	ldr	r2, [pc, #364]	; (80067cc <HAL_GPIO_Init+0x310>)
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	089b      	lsrs	r3, r3, #2
 8006664:	3302      	adds	r3, #2
 8006666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800666a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	220f      	movs	r2, #15
 8006676:	fa02 f303 	lsl.w	r3, r2, r3
 800667a:	43db      	mvns	r3, r3
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	4013      	ands	r3, r2
 8006680:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a52      	ldr	r2, [pc, #328]	; (80067d0 <HAL_GPIO_Init+0x314>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d02b      	beq.n	80066e2 <HAL_GPIO_Init+0x226>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a51      	ldr	r2, [pc, #324]	; (80067d4 <HAL_GPIO_Init+0x318>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d025      	beq.n	80066de <HAL_GPIO_Init+0x222>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a50      	ldr	r2, [pc, #320]	; (80067d8 <HAL_GPIO_Init+0x31c>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d01f      	beq.n	80066da <HAL_GPIO_Init+0x21e>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a4f      	ldr	r2, [pc, #316]	; (80067dc <HAL_GPIO_Init+0x320>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d019      	beq.n	80066d6 <HAL_GPIO_Init+0x21a>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a4e      	ldr	r2, [pc, #312]	; (80067e0 <HAL_GPIO_Init+0x324>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d013      	beq.n	80066d2 <HAL_GPIO_Init+0x216>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a4d      	ldr	r2, [pc, #308]	; (80067e4 <HAL_GPIO_Init+0x328>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d00d      	beq.n	80066ce <HAL_GPIO_Init+0x212>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a4c      	ldr	r2, [pc, #304]	; (80067e8 <HAL_GPIO_Init+0x32c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d007      	beq.n	80066ca <HAL_GPIO_Init+0x20e>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a4b      	ldr	r2, [pc, #300]	; (80067ec <HAL_GPIO_Init+0x330>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d101      	bne.n	80066c6 <HAL_GPIO_Init+0x20a>
 80066c2:	2307      	movs	r3, #7
 80066c4:	e00e      	b.n	80066e4 <HAL_GPIO_Init+0x228>
 80066c6:	2308      	movs	r3, #8
 80066c8:	e00c      	b.n	80066e4 <HAL_GPIO_Init+0x228>
 80066ca:	2306      	movs	r3, #6
 80066cc:	e00a      	b.n	80066e4 <HAL_GPIO_Init+0x228>
 80066ce:	2305      	movs	r3, #5
 80066d0:	e008      	b.n	80066e4 <HAL_GPIO_Init+0x228>
 80066d2:	2304      	movs	r3, #4
 80066d4:	e006      	b.n	80066e4 <HAL_GPIO_Init+0x228>
 80066d6:	2303      	movs	r3, #3
 80066d8:	e004      	b.n	80066e4 <HAL_GPIO_Init+0x228>
 80066da:	2302      	movs	r3, #2
 80066dc:	e002      	b.n	80066e4 <HAL_GPIO_Init+0x228>
 80066de:	2301      	movs	r3, #1
 80066e0:	e000      	b.n	80066e4 <HAL_GPIO_Init+0x228>
 80066e2:	2300      	movs	r3, #0
 80066e4:	69fa      	ldr	r2, [r7, #28]
 80066e6:	f002 0203 	and.w	r2, r2, #3
 80066ea:	0092      	lsls	r2, r2, #2
 80066ec:	4093      	lsls	r3, r2
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066f4:	4935      	ldr	r1, [pc, #212]	; (80067cc <HAL_GPIO_Init+0x310>)
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	089b      	lsrs	r3, r3, #2
 80066fa:	3302      	adds	r3, #2
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006702:	4b3b      	ldr	r3, [pc, #236]	; (80067f0 <HAL_GPIO_Init+0x334>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	43db      	mvns	r3, r3
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	4013      	ands	r3, r2
 8006710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	4313      	orrs	r3, r2
 8006724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006726:	4a32      	ldr	r2, [pc, #200]	; (80067f0 <HAL_GPIO_Init+0x334>)
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800672c:	4b30      	ldr	r3, [pc, #192]	; (80067f0 <HAL_GPIO_Init+0x334>)
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	43db      	mvns	r3, r3
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	4013      	ands	r3, r2
 800673a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006750:	4a27      	ldr	r2, [pc, #156]	; (80067f0 <HAL_GPIO_Init+0x334>)
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006756:	4b26      	ldr	r3, [pc, #152]	; (80067f0 <HAL_GPIO_Init+0x334>)
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	43db      	mvns	r3, r3
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	4013      	ands	r3, r2
 8006764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	4313      	orrs	r3, r2
 8006778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800677a:	4a1d      	ldr	r2, [pc, #116]	; (80067f0 <HAL_GPIO_Init+0x334>)
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006780:	4b1b      	ldr	r3, [pc, #108]	; (80067f0 <HAL_GPIO_Init+0x334>)
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	43db      	mvns	r3, r3
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	4013      	ands	r3, r2
 800678e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80067a4:	4a12      	ldr	r2, [pc, #72]	; (80067f0 <HAL_GPIO_Init+0x334>)
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	3301      	adds	r3, #1
 80067ae:	61fb      	str	r3, [r7, #28]
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	2b0f      	cmp	r3, #15
 80067b4:	f67f ae90 	bls.w	80064d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80067b8:	bf00      	nop
 80067ba:	bf00      	nop
 80067bc:	3724      	adds	r7, #36	; 0x24
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	40023800 	.word	0x40023800
 80067cc:	40013800 	.word	0x40013800
 80067d0:	40020000 	.word	0x40020000
 80067d4:	40020400 	.word	0x40020400
 80067d8:	40020800 	.word	0x40020800
 80067dc:	40020c00 	.word	0x40020c00
 80067e0:	40021000 	.word	0x40021000
 80067e4:	40021400 	.word	0x40021400
 80067e8:	40021800 	.word	0x40021800
 80067ec:	40021c00 	.word	0x40021c00
 80067f0:	40013c00 	.word	0x40013c00

080067f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691a      	ldr	r2, [r3, #16]
 8006804:	887b      	ldrh	r3, [r7, #2]
 8006806:	4013      	ands	r3, r2
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800680c:	2301      	movs	r3, #1
 800680e:	73fb      	strb	r3, [r7, #15]
 8006810:	e001      	b.n	8006816 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006812:	2300      	movs	r3, #0
 8006814:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006816:	7bfb      	ldrb	r3, [r7, #15]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	807b      	strh	r3, [r7, #2]
 8006830:	4613      	mov	r3, r2
 8006832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006834:	787b      	ldrb	r3, [r7, #1]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800683a:	887a      	ldrh	r2, [r7, #2]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006840:	e003      	b.n	800684a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006842:	887b      	ldrh	r3, [r7, #2]
 8006844:	041a      	lsls	r2, r3, #16
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	619a      	str	r2, [r3, #24]
}
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
	...

08006858 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	4603      	mov	r3, r0
 8006860:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006862:	4b08      	ldr	r3, [pc, #32]	; (8006884 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006864:	695a      	ldr	r2, [r3, #20]
 8006866:	88fb      	ldrh	r3, [r7, #6]
 8006868:	4013      	ands	r3, r2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d006      	beq.n	800687c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800686e:	4a05      	ldr	r2, [pc, #20]	; (8006884 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006870:	88fb      	ldrh	r3, [r7, #6]
 8006872:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006874:	88fb      	ldrh	r3, [r7, #6]
 8006876:	4618      	mov	r0, r3
 8006878:	f7fc fdd4 	bl	8003424 <HAL_GPIO_EXTI_Callback>
  }
}
 800687c:	bf00      	nop
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	40013c00 	.word	0x40013c00

08006888 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e12b      	b.n	8006af2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d106      	bne.n	80068b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7fe fc1a 	bl	80050e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2224      	movs	r2, #36	; 0x24
 80068b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f022 0201 	bic.w	r2, r2, #1
 80068ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80068ec:	f001 f864 	bl	80079b8 <HAL_RCC_GetPCLK1Freq>
 80068f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	4a81      	ldr	r2, [pc, #516]	; (8006afc <HAL_I2C_Init+0x274>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d807      	bhi.n	800690c <HAL_I2C_Init+0x84>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4a80      	ldr	r2, [pc, #512]	; (8006b00 <HAL_I2C_Init+0x278>)
 8006900:	4293      	cmp	r3, r2
 8006902:	bf94      	ite	ls
 8006904:	2301      	movls	r3, #1
 8006906:	2300      	movhi	r3, #0
 8006908:	b2db      	uxtb	r3, r3
 800690a:	e006      	b.n	800691a <HAL_I2C_Init+0x92>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4a7d      	ldr	r2, [pc, #500]	; (8006b04 <HAL_I2C_Init+0x27c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	bf94      	ite	ls
 8006914:	2301      	movls	r3, #1
 8006916:	2300      	movhi	r3, #0
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e0e7      	b.n	8006af2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4a78      	ldr	r2, [pc, #480]	; (8006b08 <HAL_I2C_Init+0x280>)
 8006926:	fba2 2303 	umull	r2, r3, r2, r3
 800692a:	0c9b      	lsrs	r3, r3, #18
 800692c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	430a      	orrs	r2, r1
 8006940:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	4a6a      	ldr	r2, [pc, #424]	; (8006afc <HAL_I2C_Init+0x274>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d802      	bhi.n	800695c <HAL_I2C_Init+0xd4>
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	3301      	adds	r3, #1
 800695a:	e009      	b.n	8006970 <HAL_I2C_Init+0xe8>
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006962:	fb02 f303 	mul.w	r3, r2, r3
 8006966:	4a69      	ldr	r2, [pc, #420]	; (8006b0c <HAL_I2C_Init+0x284>)
 8006968:	fba2 2303 	umull	r2, r3, r2, r3
 800696c:	099b      	lsrs	r3, r3, #6
 800696e:	3301      	adds	r3, #1
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	6812      	ldr	r2, [r2, #0]
 8006974:	430b      	orrs	r3, r1
 8006976:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006982:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	495c      	ldr	r1, [pc, #368]	; (8006afc <HAL_I2C_Init+0x274>)
 800698c:	428b      	cmp	r3, r1
 800698e:	d819      	bhi.n	80069c4 <HAL_I2C_Init+0x13c>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	1e59      	subs	r1, r3, #1
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	005b      	lsls	r3, r3, #1
 800699a:	fbb1 f3f3 	udiv	r3, r1, r3
 800699e:	1c59      	adds	r1, r3, #1
 80069a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80069a4:	400b      	ands	r3, r1
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00a      	beq.n	80069c0 <HAL_I2C_Init+0x138>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	1e59      	subs	r1, r3, #1
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	005b      	lsls	r3, r3, #1
 80069b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80069b8:	3301      	adds	r3, #1
 80069ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069be:	e051      	b.n	8006a64 <HAL_I2C_Init+0x1dc>
 80069c0:	2304      	movs	r3, #4
 80069c2:	e04f      	b.n	8006a64 <HAL_I2C_Init+0x1dc>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d111      	bne.n	80069f0 <HAL_I2C_Init+0x168>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	1e58      	subs	r0, r3, #1
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6859      	ldr	r1, [r3, #4]
 80069d4:	460b      	mov	r3, r1
 80069d6:	005b      	lsls	r3, r3, #1
 80069d8:	440b      	add	r3, r1
 80069da:	fbb0 f3f3 	udiv	r3, r0, r3
 80069de:	3301      	adds	r3, #1
 80069e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	bf0c      	ite	eq
 80069e8:	2301      	moveq	r3, #1
 80069ea:	2300      	movne	r3, #0
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	e012      	b.n	8006a16 <HAL_I2C_Init+0x18e>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	1e58      	subs	r0, r3, #1
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6859      	ldr	r1, [r3, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	440b      	add	r3, r1
 80069fe:	0099      	lsls	r1, r3, #2
 8006a00:	440b      	add	r3, r1
 8006a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a06:	3301      	adds	r3, #1
 8006a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	bf0c      	ite	eq
 8006a10:	2301      	moveq	r3, #1
 8006a12:	2300      	movne	r3, #0
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <HAL_I2C_Init+0x196>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e022      	b.n	8006a64 <HAL_I2C_Init+0x1dc>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10e      	bne.n	8006a44 <HAL_I2C_Init+0x1bc>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	1e58      	subs	r0, r3, #1
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6859      	ldr	r1, [r3, #4]
 8006a2e:	460b      	mov	r3, r1
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	440b      	add	r3, r1
 8006a34:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a38:	3301      	adds	r3, #1
 8006a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a42:	e00f      	b.n	8006a64 <HAL_I2C_Init+0x1dc>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	1e58      	subs	r0, r3, #1
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6859      	ldr	r1, [r3, #4]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	440b      	add	r3, r1
 8006a52:	0099      	lsls	r1, r3, #2
 8006a54:	440b      	add	r3, r1
 8006a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a64:	6879      	ldr	r1, [r7, #4]
 8006a66:	6809      	ldr	r1, [r1, #0]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	69da      	ldr	r2, [r3, #28]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006a92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	6911      	ldr	r1, [r2, #16]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	68d2      	ldr	r2, [r2, #12]
 8006a9e:	4311      	orrs	r1, r2
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	6812      	ldr	r2, [r2, #0]
 8006aa4:	430b      	orrs	r3, r1
 8006aa6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	695a      	ldr	r2, [r3, #20]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	431a      	orrs	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f042 0201 	orr.w	r2, r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2220      	movs	r2, #32
 8006ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	000186a0 	.word	0x000186a0
 8006b00:	001e847f 	.word	0x001e847f
 8006b04:	003d08ff 	.word	0x003d08ff
 8006b08:	431bde83 	.word	0x431bde83
 8006b0c:	10624dd3 	.word	0x10624dd3

08006b10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af02      	add	r7, sp, #8
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	607a      	str	r2, [r7, #4]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	817b      	strh	r3, [r7, #10]
 8006b20:	4613      	mov	r3, r2
 8006b22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b24:	f7fe ff2a 	bl	800597c <HAL_GetTick>
 8006b28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b20      	cmp	r3, #32
 8006b34:	f040 80e0 	bne.w	8006cf8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	2319      	movs	r3, #25
 8006b3e:	2201      	movs	r2, #1
 8006b40:	4970      	ldr	r1, [pc, #448]	; (8006d04 <HAL_I2C_Master_Transmit+0x1f4>)
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f000 f964 	bl	8006e10 <I2C_WaitOnFlagUntilTimeout>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006b4e:	2302      	movs	r3, #2
 8006b50:	e0d3      	b.n	8006cfa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d101      	bne.n	8006b60 <HAL_I2C_Master_Transmit+0x50>
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	e0cc      	b.n	8006cfa <HAL_I2C_Master_Transmit+0x1ea>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d007      	beq.n	8006b86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f042 0201 	orr.w	r2, r2, #1
 8006b84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2221      	movs	r2, #33	; 0x21
 8006b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2210      	movs	r2, #16
 8006ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	893a      	ldrh	r2, [r7, #8]
 8006bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	4a50      	ldr	r2, [pc, #320]	; (8006d08 <HAL_I2C_Master_Transmit+0x1f8>)
 8006bc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006bc8:	8979      	ldrh	r1, [r7, #10]
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	6a3a      	ldr	r2, [r7, #32]
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f000 f89c 	bl	8006d0c <I2C_MasterRequestWrite>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e08d      	b.n	8006cfa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bde:	2300      	movs	r3, #0
 8006be0:	613b      	str	r3, [r7, #16]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	613b      	str	r3, [r7, #16]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	613b      	str	r3, [r7, #16]
 8006bf2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006bf4:	e066      	b.n	8006cc4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	6a39      	ldr	r1, [r7, #32]
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 f9de 	bl	8006fbc <I2C_WaitOnTXEFlagUntilTimeout>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00d      	beq.n	8006c22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	d107      	bne.n	8006c1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e06b      	b.n	8006cfa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c26:	781a      	ldrb	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c32:	1c5a      	adds	r2, r3, #1
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d11b      	bne.n	8006c98 <HAL_I2C_Master_Transmit+0x188>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d017      	beq.n	8006c98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6c:	781a      	ldrb	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	3b01      	subs	r3, #1
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c90:	3b01      	subs	r3, #1
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	6a39      	ldr	r1, [r7, #32]
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 f9ce 	bl	800703e <I2C_WaitOnBTFFlagUntilTimeout>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00d      	beq.n	8006cc4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cac:	2b04      	cmp	r3, #4
 8006cae:	d107      	bne.n	8006cc0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cbe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e01a      	b.n	8006cfa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d194      	bne.n	8006bf6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	e000      	b.n	8006cfa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006cf8:	2302      	movs	r3, #2
  }
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3718      	adds	r7, #24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	00100002 	.word	0x00100002
 8006d08:	ffff0000 	.word	0xffff0000

08006d0c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b088      	sub	sp, #32
 8006d10:	af02      	add	r7, sp, #8
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	607a      	str	r2, [r7, #4]
 8006d16:	603b      	str	r3, [r7, #0]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d20:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2b08      	cmp	r3, #8
 8006d26:	d006      	beq.n	8006d36 <I2C_MasterRequestWrite+0x2a>
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d003      	beq.n	8006d36 <I2C_MasterRequestWrite+0x2a>
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d34:	d108      	bne.n	8006d48 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	e00b      	b.n	8006d60 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4c:	2b12      	cmp	r3, #18
 8006d4e:	d107      	bne.n	8006d60 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f000 f84f 	bl	8006e10 <I2C_WaitOnFlagUntilTimeout>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00d      	beq.n	8006d94 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d86:	d103      	bne.n	8006d90 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e035      	b.n	8006e00 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d9c:	d108      	bne.n	8006db0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d9e:	897b      	ldrh	r3, [r7, #10]
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	461a      	mov	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006dac:	611a      	str	r2, [r3, #16]
 8006dae:	e01b      	b.n	8006de8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006db0:	897b      	ldrh	r3, [r7, #10]
 8006db2:	11db      	asrs	r3, r3, #7
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	f003 0306 	and.w	r3, r3, #6
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	f063 030f 	orn	r3, r3, #15
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	490e      	ldr	r1, [pc, #56]	; (8006e08 <I2C_MasterRequestWrite+0xfc>)
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 f875 	bl	8006ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d001      	beq.n	8006dde <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e010      	b.n	8006e00 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006dde:	897b      	ldrh	r3, [r7, #10]
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	4907      	ldr	r1, [pc, #28]	; (8006e0c <I2C_MasterRequestWrite+0x100>)
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 f865 	bl	8006ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d001      	beq.n	8006dfe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e000      	b.n	8006e00 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	00010008 	.word	0x00010008
 8006e0c:	00010002 	.word	0x00010002

08006e10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	603b      	str	r3, [r7, #0]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e20:	e025      	b.n	8006e6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e28:	d021      	beq.n	8006e6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e2a:	f7fe fda7 	bl	800597c <HAL_GetTick>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d302      	bcc.n	8006e40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d116      	bne.n	8006e6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5a:	f043 0220 	orr.w	r2, r3, #32
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e023      	b.n	8006eb6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	0c1b      	lsrs	r3, r3, #16
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d10d      	bne.n	8006e94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	43da      	mvns	r2, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	4013      	ands	r3, r2
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	bf0c      	ite	eq
 8006e8a:	2301      	moveq	r3, #1
 8006e8c:	2300      	movne	r3, #0
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	461a      	mov	r2, r3
 8006e92:	e00c      	b.n	8006eae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	43da      	mvns	r2, r3
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	bf0c      	ite	eq
 8006ea6:	2301      	moveq	r3, #1
 8006ea8:	2300      	movne	r3, #0
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	461a      	mov	r2, r3
 8006eae:	79fb      	ldrb	r3, [r7, #7]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d0b6      	beq.n	8006e22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	607a      	str	r2, [r7, #4]
 8006eca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ecc:	e051      	b.n	8006f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006edc:	d123      	bne.n	8006f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ef6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2220      	movs	r2, #32
 8006f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f12:	f043 0204 	orr.w	r2, r3, #4
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e046      	b.n	8006fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2c:	d021      	beq.n	8006f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f2e:	f7fe fd25 	bl	800597c <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d302      	bcc.n	8006f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d116      	bne.n	8006f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	f043 0220 	orr.w	r2, r3, #32
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e020      	b.n	8006fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	0c1b      	lsrs	r3, r3, #16
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d10c      	bne.n	8006f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	43da      	mvns	r2, r3
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	4013      	ands	r3, r2
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	bf14      	ite	ne
 8006f8e:	2301      	movne	r3, #1
 8006f90:	2300      	moveq	r3, #0
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	e00b      	b.n	8006fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	43da      	mvns	r2, r3
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	bf14      	ite	ne
 8006fa8:	2301      	movne	r3, #1
 8006faa:	2300      	moveq	r3, #0
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d18d      	bne.n	8006ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fc8:	e02d      	b.n	8007026 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f000 f878 	bl	80070c0 <I2C_IsAcknowledgeFailed>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e02d      	b.n	8007036 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe0:	d021      	beq.n	8007026 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fe2:	f7fe fccb 	bl	800597c <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d302      	bcc.n	8006ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d116      	bne.n	8007026 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2220      	movs	r2, #32
 8007002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007012:	f043 0220 	orr.w	r2, r3, #32
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e007      	b.n	8007036 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007030:	2b80      	cmp	r3, #128	; 0x80
 8007032:	d1ca      	bne.n	8006fca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	60f8      	str	r0, [r7, #12]
 8007046:	60b9      	str	r1, [r7, #8]
 8007048:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800704a:	e02d      	b.n	80070a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f000 f837 	bl	80070c0 <I2C_IsAcknowledgeFailed>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e02d      	b.n	80070b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007062:	d021      	beq.n	80070a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007064:	f7fe fc8a 	bl	800597c <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	68ba      	ldr	r2, [r7, #8]
 8007070:	429a      	cmp	r2, r3
 8007072:	d302      	bcc.n	800707a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d116      	bne.n	80070a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2220      	movs	r2, #32
 8007084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007094:	f043 0220 	orr.w	r2, r3, #32
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e007      	b.n	80070b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	f003 0304 	and.w	r3, r3, #4
 80070b2:	2b04      	cmp	r3, #4
 80070b4:	d1ca      	bne.n	800704c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070d6:	d11b      	bne.n	8007110 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fc:	f043 0204 	orr.w	r2, r3, #4
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e000      	b.n	8007112 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
	...

08007120 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e264      	b.n	80075fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b00      	cmp	r3, #0
 800713c:	d075      	beq.n	800722a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800713e:	4ba3      	ldr	r3, [pc, #652]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f003 030c 	and.w	r3, r3, #12
 8007146:	2b04      	cmp	r3, #4
 8007148:	d00c      	beq.n	8007164 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800714a:	4ba0      	ldr	r3, [pc, #640]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007152:	2b08      	cmp	r3, #8
 8007154:	d112      	bne.n	800717c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007156:	4b9d      	ldr	r3, [pc, #628]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800715e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007162:	d10b      	bne.n	800717c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007164:	4b99      	ldr	r3, [pc, #612]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d05b      	beq.n	8007228 <HAL_RCC_OscConfig+0x108>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d157      	bne.n	8007228 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e23f      	b.n	80075fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007184:	d106      	bne.n	8007194 <HAL_RCC_OscConfig+0x74>
 8007186:	4b91      	ldr	r3, [pc, #580]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a90      	ldr	r2, [pc, #576]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 800718c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007190:	6013      	str	r3, [r2, #0]
 8007192:	e01d      	b.n	80071d0 <HAL_RCC_OscConfig+0xb0>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800719c:	d10c      	bne.n	80071b8 <HAL_RCC_OscConfig+0x98>
 800719e:	4b8b      	ldr	r3, [pc, #556]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a8a      	ldr	r2, [pc, #552]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 80071a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071a8:	6013      	str	r3, [r2, #0]
 80071aa:	4b88      	ldr	r3, [pc, #544]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a87      	ldr	r2, [pc, #540]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 80071b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071b4:	6013      	str	r3, [r2, #0]
 80071b6:	e00b      	b.n	80071d0 <HAL_RCC_OscConfig+0xb0>
 80071b8:	4b84      	ldr	r3, [pc, #528]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a83      	ldr	r2, [pc, #524]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 80071be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071c2:	6013      	str	r3, [r2, #0]
 80071c4:	4b81      	ldr	r3, [pc, #516]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a80      	ldr	r2, [pc, #512]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 80071ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d013      	beq.n	8007200 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071d8:	f7fe fbd0 	bl	800597c <HAL_GetTick>
 80071dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071de:	e008      	b.n	80071f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071e0:	f7fe fbcc 	bl	800597c <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	2b64      	cmp	r3, #100	; 0x64
 80071ec:	d901      	bls.n	80071f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e204      	b.n	80075fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071f2:	4b76      	ldr	r3, [pc, #472]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0f0      	beq.n	80071e0 <HAL_RCC_OscConfig+0xc0>
 80071fe:	e014      	b.n	800722a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007200:	f7fe fbbc 	bl	800597c <HAL_GetTick>
 8007204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007206:	e008      	b.n	800721a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007208:	f7fe fbb8 	bl	800597c <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	2b64      	cmp	r3, #100	; 0x64
 8007214:	d901      	bls.n	800721a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e1f0      	b.n	80075fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800721a:	4b6c      	ldr	r3, [pc, #432]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1f0      	bne.n	8007208 <HAL_RCC_OscConfig+0xe8>
 8007226:	e000      	b.n	800722a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d063      	beq.n	80072fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007236:	4b65      	ldr	r3, [pc, #404]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f003 030c 	and.w	r3, r3, #12
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00b      	beq.n	800725a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007242:	4b62      	ldr	r3, [pc, #392]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800724a:	2b08      	cmp	r3, #8
 800724c:	d11c      	bne.n	8007288 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800724e:	4b5f      	ldr	r3, [pc, #380]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d116      	bne.n	8007288 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800725a:	4b5c      	ldr	r3, [pc, #368]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0302 	and.w	r3, r3, #2
 8007262:	2b00      	cmp	r3, #0
 8007264:	d005      	beq.n	8007272 <HAL_RCC_OscConfig+0x152>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d001      	beq.n	8007272 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e1c4      	b.n	80075fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007272:	4b56      	ldr	r3, [pc, #344]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	4952      	ldr	r1, [pc, #328]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 8007282:	4313      	orrs	r3, r2
 8007284:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007286:	e03a      	b.n	80072fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d020      	beq.n	80072d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007290:	4b4f      	ldr	r3, [pc, #316]	; (80073d0 <HAL_RCC_OscConfig+0x2b0>)
 8007292:	2201      	movs	r2, #1
 8007294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007296:	f7fe fb71 	bl	800597c <HAL_GetTick>
 800729a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800729c:	e008      	b.n	80072b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800729e:	f7fe fb6d 	bl	800597c <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d901      	bls.n	80072b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e1a5      	b.n	80075fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072b0:	4b46      	ldr	r3, [pc, #280]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d0f0      	beq.n	800729e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072bc:	4b43      	ldr	r3, [pc, #268]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	00db      	lsls	r3, r3, #3
 80072ca:	4940      	ldr	r1, [pc, #256]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 80072cc:	4313      	orrs	r3, r2
 80072ce:	600b      	str	r3, [r1, #0]
 80072d0:	e015      	b.n	80072fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072d2:	4b3f      	ldr	r3, [pc, #252]	; (80073d0 <HAL_RCC_OscConfig+0x2b0>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d8:	f7fe fb50 	bl	800597c <HAL_GetTick>
 80072dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072de:	e008      	b.n	80072f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072e0:	f7fe fb4c 	bl	800597c <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d901      	bls.n	80072f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e184      	b.n	80075fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072f2:	4b36      	ldr	r3, [pc, #216]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0302 	and.w	r3, r3, #2
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1f0      	bne.n	80072e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0308 	and.w	r3, r3, #8
 8007306:	2b00      	cmp	r3, #0
 8007308:	d030      	beq.n	800736c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d016      	beq.n	8007340 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007312:	4b30      	ldr	r3, [pc, #192]	; (80073d4 <HAL_RCC_OscConfig+0x2b4>)
 8007314:	2201      	movs	r2, #1
 8007316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007318:	f7fe fb30 	bl	800597c <HAL_GetTick>
 800731c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800731e:	e008      	b.n	8007332 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007320:	f7fe fb2c 	bl	800597c <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	2b02      	cmp	r3, #2
 800732c:	d901      	bls.n	8007332 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e164      	b.n	80075fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007332:	4b26      	ldr	r3, [pc, #152]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 8007334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0f0      	beq.n	8007320 <HAL_RCC_OscConfig+0x200>
 800733e:	e015      	b.n	800736c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007340:	4b24      	ldr	r3, [pc, #144]	; (80073d4 <HAL_RCC_OscConfig+0x2b4>)
 8007342:	2200      	movs	r2, #0
 8007344:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007346:	f7fe fb19 	bl	800597c <HAL_GetTick>
 800734a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800734c:	e008      	b.n	8007360 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800734e:	f7fe fb15 	bl	800597c <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	2b02      	cmp	r3, #2
 800735a:	d901      	bls.n	8007360 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e14d      	b.n	80075fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007360:	4b1a      	ldr	r3, [pc, #104]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 8007362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007364:	f003 0302 	and.w	r3, r3, #2
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1f0      	bne.n	800734e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0304 	and.w	r3, r3, #4
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 80a0 	beq.w	80074ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800737a:	2300      	movs	r3, #0
 800737c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800737e:	4b13      	ldr	r3, [pc, #76]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10f      	bne.n	80073aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800738a:	2300      	movs	r3, #0
 800738c:	60bb      	str	r3, [r7, #8]
 800738e:	4b0f      	ldr	r3, [pc, #60]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 8007390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007392:	4a0e      	ldr	r2, [pc, #56]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 8007394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007398:	6413      	str	r3, [r2, #64]	; 0x40
 800739a:	4b0c      	ldr	r3, [pc, #48]	; (80073cc <HAL_RCC_OscConfig+0x2ac>)
 800739c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073a2:	60bb      	str	r3, [r7, #8]
 80073a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073a6:	2301      	movs	r3, #1
 80073a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073aa:	4b0b      	ldr	r3, [pc, #44]	; (80073d8 <HAL_RCC_OscConfig+0x2b8>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d121      	bne.n	80073fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073b6:	4b08      	ldr	r3, [pc, #32]	; (80073d8 <HAL_RCC_OscConfig+0x2b8>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a07      	ldr	r2, [pc, #28]	; (80073d8 <HAL_RCC_OscConfig+0x2b8>)
 80073bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073c2:	f7fe fadb 	bl	800597c <HAL_GetTick>
 80073c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073c8:	e011      	b.n	80073ee <HAL_RCC_OscConfig+0x2ce>
 80073ca:	bf00      	nop
 80073cc:	40023800 	.word	0x40023800
 80073d0:	42470000 	.word	0x42470000
 80073d4:	42470e80 	.word	0x42470e80
 80073d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073dc:	f7fe face 	bl	800597c <HAL_GetTick>
 80073e0:	4602      	mov	r2, r0
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d901      	bls.n	80073ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e106      	b.n	80075fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073ee:	4b85      	ldr	r3, [pc, #532]	; (8007604 <HAL_RCC_OscConfig+0x4e4>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d0f0      	beq.n	80073dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d106      	bne.n	8007410 <HAL_RCC_OscConfig+0x2f0>
 8007402:	4b81      	ldr	r3, [pc, #516]	; (8007608 <HAL_RCC_OscConfig+0x4e8>)
 8007404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007406:	4a80      	ldr	r2, [pc, #512]	; (8007608 <HAL_RCC_OscConfig+0x4e8>)
 8007408:	f043 0301 	orr.w	r3, r3, #1
 800740c:	6713      	str	r3, [r2, #112]	; 0x70
 800740e:	e01c      	b.n	800744a <HAL_RCC_OscConfig+0x32a>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	2b05      	cmp	r3, #5
 8007416:	d10c      	bne.n	8007432 <HAL_RCC_OscConfig+0x312>
 8007418:	4b7b      	ldr	r3, [pc, #492]	; (8007608 <HAL_RCC_OscConfig+0x4e8>)
 800741a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800741c:	4a7a      	ldr	r2, [pc, #488]	; (8007608 <HAL_RCC_OscConfig+0x4e8>)
 800741e:	f043 0304 	orr.w	r3, r3, #4
 8007422:	6713      	str	r3, [r2, #112]	; 0x70
 8007424:	4b78      	ldr	r3, [pc, #480]	; (8007608 <HAL_RCC_OscConfig+0x4e8>)
 8007426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007428:	4a77      	ldr	r2, [pc, #476]	; (8007608 <HAL_RCC_OscConfig+0x4e8>)
 800742a:	f043 0301 	orr.w	r3, r3, #1
 800742e:	6713      	str	r3, [r2, #112]	; 0x70
 8007430:	e00b      	b.n	800744a <HAL_RCC_OscConfig+0x32a>
 8007432:	4b75      	ldr	r3, [pc, #468]	; (8007608 <HAL_RCC_OscConfig+0x4e8>)
 8007434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007436:	4a74      	ldr	r2, [pc, #464]	; (8007608 <HAL_RCC_OscConfig+0x4e8>)
 8007438:	f023 0301 	bic.w	r3, r3, #1
 800743c:	6713      	str	r3, [r2, #112]	; 0x70
 800743e:	4b72      	ldr	r3, [pc, #456]	; (8007608 <HAL_RCC_OscConfig+0x4e8>)
 8007440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007442:	4a71      	ldr	r2, [pc, #452]	; (8007608 <HAL_RCC_OscConfig+0x4e8>)
 8007444:	f023 0304 	bic.w	r3, r3, #4
 8007448:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d015      	beq.n	800747e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007452:	f7fe fa93 	bl	800597c <HAL_GetTick>
 8007456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007458:	e00a      	b.n	8007470 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800745a:	f7fe fa8f 	bl	800597c <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	f241 3288 	movw	r2, #5000	; 0x1388
 8007468:	4293      	cmp	r3, r2
 800746a:	d901      	bls.n	8007470 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e0c5      	b.n	80075fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007470:	4b65      	ldr	r3, [pc, #404]	; (8007608 <HAL_RCC_OscConfig+0x4e8>)
 8007472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d0ee      	beq.n	800745a <HAL_RCC_OscConfig+0x33a>
 800747c:	e014      	b.n	80074a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800747e:	f7fe fa7d 	bl	800597c <HAL_GetTick>
 8007482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007484:	e00a      	b.n	800749c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007486:	f7fe fa79 	bl	800597c <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	f241 3288 	movw	r2, #5000	; 0x1388
 8007494:	4293      	cmp	r3, r2
 8007496:	d901      	bls.n	800749c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e0af      	b.n	80075fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800749c:	4b5a      	ldr	r3, [pc, #360]	; (8007608 <HAL_RCC_OscConfig+0x4e8>)
 800749e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a0:	f003 0302 	and.w	r3, r3, #2
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1ee      	bne.n	8007486 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074a8:	7dfb      	ldrb	r3, [r7, #23]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d105      	bne.n	80074ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074ae:	4b56      	ldr	r3, [pc, #344]	; (8007608 <HAL_RCC_OscConfig+0x4e8>)
 80074b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b2:	4a55      	ldr	r2, [pc, #340]	; (8007608 <HAL_RCC_OscConfig+0x4e8>)
 80074b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 809b 	beq.w	80075fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80074c4:	4b50      	ldr	r3, [pc, #320]	; (8007608 <HAL_RCC_OscConfig+0x4e8>)
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	f003 030c 	and.w	r3, r3, #12
 80074cc:	2b08      	cmp	r3, #8
 80074ce:	d05c      	beq.n	800758a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	699b      	ldr	r3, [r3, #24]
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d141      	bne.n	800755c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074d8:	4b4c      	ldr	r3, [pc, #304]	; (800760c <HAL_RCC_OscConfig+0x4ec>)
 80074da:	2200      	movs	r2, #0
 80074dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074de:	f7fe fa4d 	bl	800597c <HAL_GetTick>
 80074e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074e4:	e008      	b.n	80074f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074e6:	f7fe fa49 	bl	800597c <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d901      	bls.n	80074f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e081      	b.n	80075fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074f8:	4b43      	ldr	r3, [pc, #268]	; (8007608 <HAL_RCC_OscConfig+0x4e8>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1f0      	bne.n	80074e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	69da      	ldr	r2, [r3, #28]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a1b      	ldr	r3, [r3, #32]
 800750c:	431a      	orrs	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007512:	019b      	lsls	r3, r3, #6
 8007514:	431a      	orrs	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751a:	085b      	lsrs	r3, r3, #1
 800751c:	3b01      	subs	r3, #1
 800751e:	041b      	lsls	r3, r3, #16
 8007520:	431a      	orrs	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007526:	061b      	lsls	r3, r3, #24
 8007528:	4937      	ldr	r1, [pc, #220]	; (8007608 <HAL_RCC_OscConfig+0x4e8>)
 800752a:	4313      	orrs	r3, r2
 800752c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800752e:	4b37      	ldr	r3, [pc, #220]	; (800760c <HAL_RCC_OscConfig+0x4ec>)
 8007530:	2201      	movs	r2, #1
 8007532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007534:	f7fe fa22 	bl	800597c <HAL_GetTick>
 8007538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800753a:	e008      	b.n	800754e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800753c:	f7fe fa1e 	bl	800597c <HAL_GetTick>
 8007540:	4602      	mov	r2, r0
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	2b02      	cmp	r3, #2
 8007548:	d901      	bls.n	800754e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e056      	b.n	80075fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800754e:	4b2e      	ldr	r3, [pc, #184]	; (8007608 <HAL_RCC_OscConfig+0x4e8>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d0f0      	beq.n	800753c <HAL_RCC_OscConfig+0x41c>
 800755a:	e04e      	b.n	80075fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800755c:	4b2b      	ldr	r3, [pc, #172]	; (800760c <HAL_RCC_OscConfig+0x4ec>)
 800755e:	2200      	movs	r2, #0
 8007560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007562:	f7fe fa0b 	bl	800597c <HAL_GetTick>
 8007566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007568:	e008      	b.n	800757c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800756a:	f7fe fa07 	bl	800597c <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	2b02      	cmp	r3, #2
 8007576:	d901      	bls.n	800757c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e03f      	b.n	80075fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800757c:	4b22      	ldr	r3, [pc, #136]	; (8007608 <HAL_RCC_OscConfig+0x4e8>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1f0      	bne.n	800756a <HAL_RCC_OscConfig+0x44a>
 8007588:	e037      	b.n	80075fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d101      	bne.n	8007596 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e032      	b.n	80075fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007596:	4b1c      	ldr	r3, [pc, #112]	; (8007608 <HAL_RCC_OscConfig+0x4e8>)
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d028      	beq.n	80075f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d121      	bne.n	80075f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075bc:	429a      	cmp	r2, r3
 80075be:	d11a      	bne.n	80075f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80075c6:	4013      	ands	r3, r2
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80075cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d111      	bne.n	80075f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075dc:	085b      	lsrs	r3, r3, #1
 80075de:	3b01      	subs	r3, #1
 80075e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d107      	bne.n	80075f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d001      	beq.n	80075fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e000      	b.n	80075fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3718      	adds	r7, #24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	40007000 	.word	0x40007000
 8007608:	40023800 	.word	0x40023800
 800760c:	42470060 	.word	0x42470060

08007610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e0cc      	b.n	80077be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007624:	4b68      	ldr	r3, [pc, #416]	; (80077c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0307 	and.w	r3, r3, #7
 800762c:	683a      	ldr	r2, [r7, #0]
 800762e:	429a      	cmp	r2, r3
 8007630:	d90c      	bls.n	800764c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007632:	4b65      	ldr	r3, [pc, #404]	; (80077c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800763a:	4b63      	ldr	r3, [pc, #396]	; (80077c8 <HAL_RCC_ClockConfig+0x1b8>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0307 	and.w	r3, r3, #7
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	429a      	cmp	r2, r3
 8007646:	d001      	beq.n	800764c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e0b8      	b.n	80077be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0302 	and.w	r3, r3, #2
 8007654:	2b00      	cmp	r3, #0
 8007656:	d020      	beq.n	800769a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0304 	and.w	r3, r3, #4
 8007660:	2b00      	cmp	r3, #0
 8007662:	d005      	beq.n	8007670 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007664:	4b59      	ldr	r3, [pc, #356]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	4a58      	ldr	r2, [pc, #352]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 800766a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800766e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0308 	and.w	r3, r3, #8
 8007678:	2b00      	cmp	r3, #0
 800767a:	d005      	beq.n	8007688 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800767c:	4b53      	ldr	r3, [pc, #332]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	4a52      	ldr	r2, [pc, #328]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 8007682:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007686:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007688:	4b50      	ldr	r3, [pc, #320]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	494d      	ldr	r1, [pc, #308]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 8007696:	4313      	orrs	r3, r2
 8007698:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d044      	beq.n	8007730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d107      	bne.n	80076be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076ae:	4b47      	ldr	r3, [pc, #284]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d119      	bne.n	80076ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e07f      	b.n	80077be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d003      	beq.n	80076ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d107      	bne.n	80076de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076ce:	4b3f      	ldr	r3, [pc, #252]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d109      	bne.n	80076ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e06f      	b.n	80077be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076de:	4b3b      	ldr	r3, [pc, #236]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0302 	and.w	r3, r3, #2
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e067      	b.n	80077be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076ee:	4b37      	ldr	r3, [pc, #220]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f023 0203 	bic.w	r2, r3, #3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	4934      	ldr	r1, [pc, #208]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007700:	f7fe f93c 	bl	800597c <HAL_GetTick>
 8007704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007706:	e00a      	b.n	800771e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007708:	f7fe f938 	bl	800597c <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	f241 3288 	movw	r2, #5000	; 0x1388
 8007716:	4293      	cmp	r3, r2
 8007718:	d901      	bls.n	800771e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e04f      	b.n	80077be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800771e:	4b2b      	ldr	r3, [pc, #172]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f003 020c 	and.w	r2, r3, #12
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	429a      	cmp	r2, r3
 800772e:	d1eb      	bne.n	8007708 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007730:	4b25      	ldr	r3, [pc, #148]	; (80077c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 0307 	and.w	r3, r3, #7
 8007738:	683a      	ldr	r2, [r7, #0]
 800773a:	429a      	cmp	r2, r3
 800773c:	d20c      	bcs.n	8007758 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800773e:	4b22      	ldr	r3, [pc, #136]	; (80077c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	b2d2      	uxtb	r2, r2
 8007744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007746:	4b20      	ldr	r3, [pc, #128]	; (80077c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0307 	and.w	r3, r3, #7
 800774e:	683a      	ldr	r2, [r7, #0]
 8007750:	429a      	cmp	r2, r3
 8007752:	d001      	beq.n	8007758 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e032      	b.n	80077be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0304 	and.w	r3, r3, #4
 8007760:	2b00      	cmp	r3, #0
 8007762:	d008      	beq.n	8007776 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007764:	4b19      	ldr	r3, [pc, #100]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	4916      	ldr	r1, [pc, #88]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 8007772:	4313      	orrs	r3, r2
 8007774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0308 	and.w	r3, r3, #8
 800777e:	2b00      	cmp	r3, #0
 8007780:	d009      	beq.n	8007796 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007782:	4b12      	ldr	r3, [pc, #72]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	00db      	lsls	r3, r3, #3
 8007790:	490e      	ldr	r1, [pc, #56]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 8007792:	4313      	orrs	r3, r2
 8007794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007796:	f000 f821 	bl	80077dc <HAL_RCC_GetSysClockFreq>
 800779a:	4602      	mov	r2, r0
 800779c:	4b0b      	ldr	r3, [pc, #44]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	091b      	lsrs	r3, r3, #4
 80077a2:	f003 030f 	and.w	r3, r3, #15
 80077a6:	490a      	ldr	r1, [pc, #40]	; (80077d0 <HAL_RCC_ClockConfig+0x1c0>)
 80077a8:	5ccb      	ldrb	r3, [r1, r3]
 80077aa:	fa22 f303 	lsr.w	r3, r2, r3
 80077ae:	4a09      	ldr	r2, [pc, #36]	; (80077d4 <HAL_RCC_ClockConfig+0x1c4>)
 80077b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80077b2:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <HAL_RCC_ClockConfig+0x1c8>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fe f89c 	bl	80058f4 <HAL_InitTick>

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	40023c00 	.word	0x40023c00
 80077cc:	40023800 	.word	0x40023800
 80077d0:	0800d014 	.word	0x0800d014
 80077d4:	20000000 	.word	0x20000000
 80077d8:	20000004 	.word	0x20000004

080077dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80077e0:	b084      	sub	sp, #16
 80077e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	607b      	str	r3, [r7, #4]
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	2300      	movs	r3, #0
 80077ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80077f0:	2300      	movs	r3, #0
 80077f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077f4:	4b67      	ldr	r3, [pc, #412]	; (8007994 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f003 030c 	and.w	r3, r3, #12
 80077fc:	2b08      	cmp	r3, #8
 80077fe:	d00d      	beq.n	800781c <HAL_RCC_GetSysClockFreq+0x40>
 8007800:	2b08      	cmp	r3, #8
 8007802:	f200 80bd 	bhi.w	8007980 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007806:	2b00      	cmp	r3, #0
 8007808:	d002      	beq.n	8007810 <HAL_RCC_GetSysClockFreq+0x34>
 800780a:	2b04      	cmp	r3, #4
 800780c:	d003      	beq.n	8007816 <HAL_RCC_GetSysClockFreq+0x3a>
 800780e:	e0b7      	b.n	8007980 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007810:	4b61      	ldr	r3, [pc, #388]	; (8007998 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007812:	60bb      	str	r3, [r7, #8]
       break;
 8007814:	e0b7      	b.n	8007986 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007816:	4b61      	ldr	r3, [pc, #388]	; (800799c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007818:	60bb      	str	r3, [r7, #8]
      break;
 800781a:	e0b4      	b.n	8007986 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800781c:	4b5d      	ldr	r3, [pc, #372]	; (8007994 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007824:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007826:	4b5b      	ldr	r3, [pc, #364]	; (8007994 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d04d      	beq.n	80078ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007832:	4b58      	ldr	r3, [pc, #352]	; (8007994 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	099b      	lsrs	r3, r3, #6
 8007838:	461a      	mov	r2, r3
 800783a:	f04f 0300 	mov.w	r3, #0
 800783e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007842:	f04f 0100 	mov.w	r1, #0
 8007846:	ea02 0800 	and.w	r8, r2, r0
 800784a:	ea03 0901 	and.w	r9, r3, r1
 800784e:	4640      	mov	r0, r8
 8007850:	4649      	mov	r1, r9
 8007852:	f04f 0200 	mov.w	r2, #0
 8007856:	f04f 0300 	mov.w	r3, #0
 800785a:	014b      	lsls	r3, r1, #5
 800785c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007860:	0142      	lsls	r2, r0, #5
 8007862:	4610      	mov	r0, r2
 8007864:	4619      	mov	r1, r3
 8007866:	ebb0 0008 	subs.w	r0, r0, r8
 800786a:	eb61 0109 	sbc.w	r1, r1, r9
 800786e:	f04f 0200 	mov.w	r2, #0
 8007872:	f04f 0300 	mov.w	r3, #0
 8007876:	018b      	lsls	r3, r1, #6
 8007878:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800787c:	0182      	lsls	r2, r0, #6
 800787e:	1a12      	subs	r2, r2, r0
 8007880:	eb63 0301 	sbc.w	r3, r3, r1
 8007884:	f04f 0000 	mov.w	r0, #0
 8007888:	f04f 0100 	mov.w	r1, #0
 800788c:	00d9      	lsls	r1, r3, #3
 800788e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007892:	00d0      	lsls	r0, r2, #3
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
 8007898:	eb12 0208 	adds.w	r2, r2, r8
 800789c:	eb43 0309 	adc.w	r3, r3, r9
 80078a0:	f04f 0000 	mov.w	r0, #0
 80078a4:	f04f 0100 	mov.w	r1, #0
 80078a8:	0259      	lsls	r1, r3, #9
 80078aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80078ae:	0250      	lsls	r0, r2, #9
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	4610      	mov	r0, r2
 80078b6:	4619      	mov	r1, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	461a      	mov	r2, r3
 80078bc:	f04f 0300 	mov.w	r3, #0
 80078c0:	f7f9 f8fc 	bl	8000abc <__aeabi_uldivmod>
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	4613      	mov	r3, r2
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	e04a      	b.n	8007964 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078ce:	4b31      	ldr	r3, [pc, #196]	; (8007994 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	099b      	lsrs	r3, r3, #6
 80078d4:	461a      	mov	r2, r3
 80078d6:	f04f 0300 	mov.w	r3, #0
 80078da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80078de:	f04f 0100 	mov.w	r1, #0
 80078e2:	ea02 0400 	and.w	r4, r2, r0
 80078e6:	ea03 0501 	and.w	r5, r3, r1
 80078ea:	4620      	mov	r0, r4
 80078ec:	4629      	mov	r1, r5
 80078ee:	f04f 0200 	mov.w	r2, #0
 80078f2:	f04f 0300 	mov.w	r3, #0
 80078f6:	014b      	lsls	r3, r1, #5
 80078f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80078fc:	0142      	lsls	r2, r0, #5
 80078fe:	4610      	mov	r0, r2
 8007900:	4619      	mov	r1, r3
 8007902:	1b00      	subs	r0, r0, r4
 8007904:	eb61 0105 	sbc.w	r1, r1, r5
 8007908:	f04f 0200 	mov.w	r2, #0
 800790c:	f04f 0300 	mov.w	r3, #0
 8007910:	018b      	lsls	r3, r1, #6
 8007912:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007916:	0182      	lsls	r2, r0, #6
 8007918:	1a12      	subs	r2, r2, r0
 800791a:	eb63 0301 	sbc.w	r3, r3, r1
 800791e:	f04f 0000 	mov.w	r0, #0
 8007922:	f04f 0100 	mov.w	r1, #0
 8007926:	00d9      	lsls	r1, r3, #3
 8007928:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800792c:	00d0      	lsls	r0, r2, #3
 800792e:	4602      	mov	r2, r0
 8007930:	460b      	mov	r3, r1
 8007932:	1912      	adds	r2, r2, r4
 8007934:	eb45 0303 	adc.w	r3, r5, r3
 8007938:	f04f 0000 	mov.w	r0, #0
 800793c:	f04f 0100 	mov.w	r1, #0
 8007940:	0299      	lsls	r1, r3, #10
 8007942:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007946:	0290      	lsls	r0, r2, #10
 8007948:	4602      	mov	r2, r0
 800794a:	460b      	mov	r3, r1
 800794c:	4610      	mov	r0, r2
 800794e:	4619      	mov	r1, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	461a      	mov	r2, r3
 8007954:	f04f 0300 	mov.w	r3, #0
 8007958:	f7f9 f8b0 	bl	8000abc <__aeabi_uldivmod>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	4613      	mov	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007964:	4b0b      	ldr	r3, [pc, #44]	; (8007994 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	0c1b      	lsrs	r3, r3, #16
 800796a:	f003 0303 	and.w	r3, r3, #3
 800796e:	3301      	adds	r3, #1
 8007970:	005b      	lsls	r3, r3, #1
 8007972:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	fbb2 f3f3 	udiv	r3, r2, r3
 800797c:	60bb      	str	r3, [r7, #8]
      break;
 800797e:	e002      	b.n	8007986 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007980:	4b05      	ldr	r3, [pc, #20]	; (8007998 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007982:	60bb      	str	r3, [r7, #8]
      break;
 8007984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007986:	68bb      	ldr	r3, [r7, #8]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007992:	bf00      	nop
 8007994:	40023800 	.word	0x40023800
 8007998:	00f42400 	.word	0x00f42400
 800799c:	007a1200 	.word	0x007a1200

080079a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079a0:	b480      	push	{r7}
 80079a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079a4:	4b03      	ldr	r3, [pc, #12]	; (80079b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80079a6:	681b      	ldr	r3, [r3, #0]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	20000000 	.word	0x20000000

080079b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80079bc:	f7ff fff0 	bl	80079a0 <HAL_RCC_GetHCLKFreq>
 80079c0:	4602      	mov	r2, r0
 80079c2:	4b05      	ldr	r3, [pc, #20]	; (80079d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	0a9b      	lsrs	r3, r3, #10
 80079c8:	f003 0307 	and.w	r3, r3, #7
 80079cc:	4903      	ldr	r1, [pc, #12]	; (80079dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80079ce:	5ccb      	ldrb	r3, [r1, r3]
 80079d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	40023800 	.word	0x40023800
 80079dc:	0800d024 	.word	0x0800d024

080079e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80079e4:	f7ff ffdc 	bl	80079a0 <HAL_RCC_GetHCLKFreq>
 80079e8:	4602      	mov	r2, r0
 80079ea:	4b05      	ldr	r3, [pc, #20]	; (8007a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	0b5b      	lsrs	r3, r3, #13
 80079f0:	f003 0307 	and.w	r3, r3, #7
 80079f4:	4903      	ldr	r1, [pc, #12]	; (8007a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079f6:	5ccb      	ldrb	r3, [r1, r3]
 80079f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	40023800 	.word	0x40023800
 8007a04:	0800d024 	.word	0x0800d024

08007a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e041      	b.n	8007a9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d106      	bne.n	8007a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7fd fba2 	bl	8005178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	3304      	adds	r3, #4
 8007a44:	4619      	mov	r1, r3
 8007a46:	4610      	mov	r0, r2
 8007a48:	f000 fb42 	bl	80080d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
	...

08007aa8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d001      	beq.n	8007ac0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e046      	b.n	8007b4e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a23      	ldr	r2, [pc, #140]	; (8007b5c <HAL_TIM_Base_Start+0xb4>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d022      	beq.n	8007b18 <HAL_TIM_Base_Start+0x70>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ada:	d01d      	beq.n	8007b18 <HAL_TIM_Base_Start+0x70>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a1f      	ldr	r2, [pc, #124]	; (8007b60 <HAL_TIM_Base_Start+0xb8>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d018      	beq.n	8007b18 <HAL_TIM_Base_Start+0x70>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a1e      	ldr	r2, [pc, #120]	; (8007b64 <HAL_TIM_Base_Start+0xbc>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d013      	beq.n	8007b18 <HAL_TIM_Base_Start+0x70>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a1c      	ldr	r2, [pc, #112]	; (8007b68 <HAL_TIM_Base_Start+0xc0>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d00e      	beq.n	8007b18 <HAL_TIM_Base_Start+0x70>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a1b      	ldr	r2, [pc, #108]	; (8007b6c <HAL_TIM_Base_Start+0xc4>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d009      	beq.n	8007b18 <HAL_TIM_Base_Start+0x70>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a19      	ldr	r2, [pc, #100]	; (8007b70 <HAL_TIM_Base_Start+0xc8>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d004      	beq.n	8007b18 <HAL_TIM_Base_Start+0x70>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a18      	ldr	r2, [pc, #96]	; (8007b74 <HAL_TIM_Base_Start+0xcc>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d111      	bne.n	8007b3c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f003 0307 	and.w	r3, r3, #7
 8007b22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b06      	cmp	r3, #6
 8007b28:	d010      	beq.n	8007b4c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f042 0201 	orr.w	r2, r2, #1
 8007b38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b3a:	e007      	b.n	8007b4c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f042 0201 	orr.w	r2, r2, #1
 8007b4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	40010000 	.word	0x40010000
 8007b60:	40000400 	.word	0x40000400
 8007b64:	40000800 	.word	0x40000800
 8007b68:	40000c00 	.word	0x40000c00
 8007b6c:	40010400 	.word	0x40010400
 8007b70:	40014000 	.word	0x40014000
 8007b74:	40001800 	.word	0x40001800

08007b78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e041      	b.n	8007c0e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d106      	bne.n	8007ba4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f839 	bl	8007c16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	3304      	adds	r3, #4
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	f000 fa8a 	bl	80080d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b083      	sub	sp, #12
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c1e:	bf00      	nop
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
	...

08007c2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d109      	bne.n	8007c50 <HAL_TIM_PWM_Start+0x24>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	bf14      	ite	ne
 8007c48:	2301      	movne	r3, #1
 8007c4a:	2300      	moveq	r3, #0
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	e022      	b.n	8007c96 <HAL_TIM_PWM_Start+0x6a>
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	2b04      	cmp	r3, #4
 8007c54:	d109      	bne.n	8007c6a <HAL_TIM_PWM_Start+0x3e>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	bf14      	ite	ne
 8007c62:	2301      	movne	r3, #1
 8007c64:	2300      	moveq	r3, #0
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	e015      	b.n	8007c96 <HAL_TIM_PWM_Start+0x6a>
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	d109      	bne.n	8007c84 <HAL_TIM_PWM_Start+0x58>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	bf14      	ite	ne
 8007c7c:	2301      	movne	r3, #1
 8007c7e:	2300      	moveq	r3, #0
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	e008      	b.n	8007c96 <HAL_TIM_PWM_Start+0x6a>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	bf14      	ite	ne
 8007c90:	2301      	movne	r3, #1
 8007c92:	2300      	moveq	r3, #0
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d001      	beq.n	8007c9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e07c      	b.n	8007d98 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d104      	bne.n	8007cae <HAL_TIM_PWM_Start+0x82>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cac:	e013      	b.n	8007cd6 <HAL_TIM_PWM_Start+0xaa>
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	2b04      	cmp	r3, #4
 8007cb2:	d104      	bne.n	8007cbe <HAL_TIM_PWM_Start+0x92>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cbc:	e00b      	b.n	8007cd6 <HAL_TIM_PWM_Start+0xaa>
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b08      	cmp	r3, #8
 8007cc2:	d104      	bne.n	8007cce <HAL_TIM_PWM_Start+0xa2>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ccc:	e003      	b.n	8007cd6 <HAL_TIM_PWM_Start+0xaa>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f000 fce0 	bl	80086a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a2d      	ldr	r2, [pc, #180]	; (8007da0 <HAL_TIM_PWM_Start+0x174>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d004      	beq.n	8007cf8 <HAL_TIM_PWM_Start+0xcc>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a2c      	ldr	r2, [pc, #176]	; (8007da4 <HAL_TIM_PWM_Start+0x178>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d101      	bne.n	8007cfc <HAL_TIM_PWM_Start+0xd0>
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e000      	b.n	8007cfe <HAL_TIM_PWM_Start+0xd2>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d007      	beq.n	8007d12 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a22      	ldr	r2, [pc, #136]	; (8007da0 <HAL_TIM_PWM_Start+0x174>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d022      	beq.n	8007d62 <HAL_TIM_PWM_Start+0x136>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d24:	d01d      	beq.n	8007d62 <HAL_TIM_PWM_Start+0x136>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a1f      	ldr	r2, [pc, #124]	; (8007da8 <HAL_TIM_PWM_Start+0x17c>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d018      	beq.n	8007d62 <HAL_TIM_PWM_Start+0x136>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a1d      	ldr	r2, [pc, #116]	; (8007dac <HAL_TIM_PWM_Start+0x180>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d013      	beq.n	8007d62 <HAL_TIM_PWM_Start+0x136>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a1c      	ldr	r2, [pc, #112]	; (8007db0 <HAL_TIM_PWM_Start+0x184>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d00e      	beq.n	8007d62 <HAL_TIM_PWM_Start+0x136>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a16      	ldr	r2, [pc, #88]	; (8007da4 <HAL_TIM_PWM_Start+0x178>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d009      	beq.n	8007d62 <HAL_TIM_PWM_Start+0x136>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a18      	ldr	r2, [pc, #96]	; (8007db4 <HAL_TIM_PWM_Start+0x188>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d004      	beq.n	8007d62 <HAL_TIM_PWM_Start+0x136>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a16      	ldr	r2, [pc, #88]	; (8007db8 <HAL_TIM_PWM_Start+0x18c>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d111      	bne.n	8007d86 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f003 0307 	and.w	r3, r3, #7
 8007d6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2b06      	cmp	r3, #6
 8007d72:	d010      	beq.n	8007d96 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f042 0201 	orr.w	r2, r2, #1
 8007d82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d84:	e007      	b.n	8007d96 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f042 0201 	orr.w	r2, r2, #1
 8007d94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	40010000 	.word	0x40010000
 8007da4:	40010400 	.word	0x40010400
 8007da8:	40000400 	.word	0x40000400
 8007dac:	40000800 	.word	0x40000800
 8007db0:	40000c00 	.word	0x40000c00
 8007db4:	40014000 	.word	0x40014000
 8007db8:	40001800 	.word	0x40001800

08007dbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d101      	bne.n	8007dda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	e0ae      	b.n	8007f38 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2b0c      	cmp	r3, #12
 8007de6:	f200 809f 	bhi.w	8007f28 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007dea:	a201      	add	r2, pc, #4	; (adr r2, 8007df0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df0:	08007e25 	.word	0x08007e25
 8007df4:	08007f29 	.word	0x08007f29
 8007df8:	08007f29 	.word	0x08007f29
 8007dfc:	08007f29 	.word	0x08007f29
 8007e00:	08007e65 	.word	0x08007e65
 8007e04:	08007f29 	.word	0x08007f29
 8007e08:	08007f29 	.word	0x08007f29
 8007e0c:	08007f29 	.word	0x08007f29
 8007e10:	08007ea7 	.word	0x08007ea7
 8007e14:	08007f29 	.word	0x08007f29
 8007e18:	08007f29 	.word	0x08007f29
 8007e1c:	08007f29 	.word	0x08007f29
 8007e20:	08007ee7 	.word	0x08007ee7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68b9      	ldr	r1, [r7, #8]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 f9f0 	bl	8008210 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	699a      	ldr	r2, [r3, #24]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f042 0208 	orr.w	r2, r2, #8
 8007e3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	699a      	ldr	r2, [r3, #24]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f022 0204 	bic.w	r2, r2, #4
 8007e4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6999      	ldr	r1, [r3, #24]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	691a      	ldr	r2, [r3, #16]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	430a      	orrs	r2, r1
 8007e60:	619a      	str	r2, [r3, #24]
      break;
 8007e62:	e064      	b.n	8007f2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68b9      	ldr	r1, [r7, #8]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 fa40 	bl	80082f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	699a      	ldr	r2, [r3, #24]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	699a      	ldr	r2, [r3, #24]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6999      	ldr	r1, [r3, #24]
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	021a      	lsls	r2, r3, #8
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	619a      	str	r2, [r3, #24]
      break;
 8007ea4:	e043      	b.n	8007f2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68b9      	ldr	r1, [r7, #8]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 fa95 	bl	80083dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	69da      	ldr	r2, [r3, #28]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f042 0208 	orr.w	r2, r2, #8
 8007ec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	69da      	ldr	r2, [r3, #28]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f022 0204 	bic.w	r2, r2, #4
 8007ed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	69d9      	ldr	r1, [r3, #28]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	691a      	ldr	r2, [r3, #16]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	430a      	orrs	r2, r1
 8007ee2:	61da      	str	r2, [r3, #28]
      break;
 8007ee4:	e023      	b.n	8007f2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68b9      	ldr	r1, [r7, #8]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f000 fae9 	bl	80084c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	69da      	ldr	r2, [r3, #28]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	69da      	ldr	r2, [r3, #28]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	69d9      	ldr	r1, [r3, #28]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	021a      	lsls	r2, r3, #8
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	430a      	orrs	r2, r1
 8007f24:	61da      	str	r2, [r3, #28]
      break;
 8007f26:	e002      	b.n	8007f2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3718      	adds	r7, #24
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d101      	bne.n	8007f5c <HAL_TIM_ConfigClockSource+0x1c>
 8007f58:	2302      	movs	r3, #2
 8007f5a:	e0b4      	b.n	80080c6 <HAL_TIM_ConfigClockSource+0x186>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2202      	movs	r2, #2
 8007f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f94:	d03e      	beq.n	8008014 <HAL_TIM_ConfigClockSource+0xd4>
 8007f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f9a:	f200 8087 	bhi.w	80080ac <HAL_TIM_ConfigClockSource+0x16c>
 8007f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fa2:	f000 8086 	beq.w	80080b2 <HAL_TIM_ConfigClockSource+0x172>
 8007fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007faa:	d87f      	bhi.n	80080ac <HAL_TIM_ConfigClockSource+0x16c>
 8007fac:	2b70      	cmp	r3, #112	; 0x70
 8007fae:	d01a      	beq.n	8007fe6 <HAL_TIM_ConfigClockSource+0xa6>
 8007fb0:	2b70      	cmp	r3, #112	; 0x70
 8007fb2:	d87b      	bhi.n	80080ac <HAL_TIM_ConfigClockSource+0x16c>
 8007fb4:	2b60      	cmp	r3, #96	; 0x60
 8007fb6:	d050      	beq.n	800805a <HAL_TIM_ConfigClockSource+0x11a>
 8007fb8:	2b60      	cmp	r3, #96	; 0x60
 8007fba:	d877      	bhi.n	80080ac <HAL_TIM_ConfigClockSource+0x16c>
 8007fbc:	2b50      	cmp	r3, #80	; 0x50
 8007fbe:	d03c      	beq.n	800803a <HAL_TIM_ConfigClockSource+0xfa>
 8007fc0:	2b50      	cmp	r3, #80	; 0x50
 8007fc2:	d873      	bhi.n	80080ac <HAL_TIM_ConfigClockSource+0x16c>
 8007fc4:	2b40      	cmp	r3, #64	; 0x40
 8007fc6:	d058      	beq.n	800807a <HAL_TIM_ConfigClockSource+0x13a>
 8007fc8:	2b40      	cmp	r3, #64	; 0x40
 8007fca:	d86f      	bhi.n	80080ac <HAL_TIM_ConfigClockSource+0x16c>
 8007fcc:	2b30      	cmp	r3, #48	; 0x30
 8007fce:	d064      	beq.n	800809a <HAL_TIM_ConfigClockSource+0x15a>
 8007fd0:	2b30      	cmp	r3, #48	; 0x30
 8007fd2:	d86b      	bhi.n	80080ac <HAL_TIM_ConfigClockSource+0x16c>
 8007fd4:	2b20      	cmp	r3, #32
 8007fd6:	d060      	beq.n	800809a <HAL_TIM_ConfigClockSource+0x15a>
 8007fd8:	2b20      	cmp	r3, #32
 8007fda:	d867      	bhi.n	80080ac <HAL_TIM_ConfigClockSource+0x16c>
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d05c      	beq.n	800809a <HAL_TIM_ConfigClockSource+0x15a>
 8007fe0:	2b10      	cmp	r3, #16
 8007fe2:	d05a      	beq.n	800809a <HAL_TIM_ConfigClockSource+0x15a>
 8007fe4:	e062      	b.n	80080ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6818      	ldr	r0, [r3, #0]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	6899      	ldr	r1, [r3, #8]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	685a      	ldr	r2, [r3, #4]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	f000 fb35 	bl	8008664 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008008:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	609a      	str	r2, [r3, #8]
      break;
 8008012:	e04f      	b.n	80080b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6818      	ldr	r0, [r3, #0]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	6899      	ldr	r1, [r3, #8]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	685a      	ldr	r2, [r3, #4]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	f000 fb1e 	bl	8008664 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	689a      	ldr	r2, [r3, #8]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008036:	609a      	str	r2, [r3, #8]
      break;
 8008038:	e03c      	b.n	80080b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6818      	ldr	r0, [r3, #0]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	6859      	ldr	r1, [r3, #4]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	461a      	mov	r2, r3
 8008048:	f000 fa92 	bl	8008570 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2150      	movs	r1, #80	; 0x50
 8008052:	4618      	mov	r0, r3
 8008054:	f000 faeb 	bl	800862e <TIM_ITRx_SetConfig>
      break;
 8008058:	e02c      	b.n	80080b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6818      	ldr	r0, [r3, #0]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	6859      	ldr	r1, [r3, #4]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	461a      	mov	r2, r3
 8008068:	f000 fab1 	bl	80085ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2160      	movs	r1, #96	; 0x60
 8008072:	4618      	mov	r0, r3
 8008074:	f000 fadb 	bl	800862e <TIM_ITRx_SetConfig>
      break;
 8008078:	e01c      	b.n	80080b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6818      	ldr	r0, [r3, #0]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	6859      	ldr	r1, [r3, #4]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	461a      	mov	r2, r3
 8008088:	f000 fa72 	bl	8008570 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2140      	movs	r1, #64	; 0x40
 8008092:	4618      	mov	r0, r3
 8008094:	f000 facb 	bl	800862e <TIM_ITRx_SetConfig>
      break;
 8008098:	e00c      	b.n	80080b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4619      	mov	r1, r3
 80080a4:	4610      	mov	r0, r2
 80080a6:	f000 fac2 	bl	800862e <TIM_ITRx_SetConfig>
      break;
 80080aa:	e003      	b.n	80080b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	73fb      	strb	r3, [r7, #15]
      break;
 80080b0:	e000      	b.n	80080b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80080b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
	...

080080d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a40      	ldr	r2, [pc, #256]	; (80081e4 <TIM_Base_SetConfig+0x114>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d013      	beq.n	8008110 <TIM_Base_SetConfig+0x40>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ee:	d00f      	beq.n	8008110 <TIM_Base_SetConfig+0x40>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a3d      	ldr	r2, [pc, #244]	; (80081e8 <TIM_Base_SetConfig+0x118>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d00b      	beq.n	8008110 <TIM_Base_SetConfig+0x40>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a3c      	ldr	r2, [pc, #240]	; (80081ec <TIM_Base_SetConfig+0x11c>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d007      	beq.n	8008110 <TIM_Base_SetConfig+0x40>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a3b      	ldr	r2, [pc, #236]	; (80081f0 <TIM_Base_SetConfig+0x120>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d003      	beq.n	8008110 <TIM_Base_SetConfig+0x40>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a3a      	ldr	r2, [pc, #232]	; (80081f4 <TIM_Base_SetConfig+0x124>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d108      	bne.n	8008122 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	4313      	orrs	r3, r2
 8008120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a2f      	ldr	r2, [pc, #188]	; (80081e4 <TIM_Base_SetConfig+0x114>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d02b      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008130:	d027      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a2c      	ldr	r2, [pc, #176]	; (80081e8 <TIM_Base_SetConfig+0x118>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d023      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a2b      	ldr	r2, [pc, #172]	; (80081ec <TIM_Base_SetConfig+0x11c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d01f      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a2a      	ldr	r2, [pc, #168]	; (80081f0 <TIM_Base_SetConfig+0x120>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d01b      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a29      	ldr	r2, [pc, #164]	; (80081f4 <TIM_Base_SetConfig+0x124>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d017      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a28      	ldr	r2, [pc, #160]	; (80081f8 <TIM_Base_SetConfig+0x128>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d013      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a27      	ldr	r2, [pc, #156]	; (80081fc <TIM_Base_SetConfig+0x12c>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d00f      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a26      	ldr	r2, [pc, #152]	; (8008200 <TIM_Base_SetConfig+0x130>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d00b      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a25      	ldr	r2, [pc, #148]	; (8008204 <TIM_Base_SetConfig+0x134>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d007      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a24      	ldr	r2, [pc, #144]	; (8008208 <TIM_Base_SetConfig+0x138>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d003      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a23      	ldr	r2, [pc, #140]	; (800820c <TIM_Base_SetConfig+0x13c>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d108      	bne.n	8008194 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	4313      	orrs	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	4313      	orrs	r3, r2
 80081a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	689a      	ldr	r2, [r3, #8]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a0a      	ldr	r2, [pc, #40]	; (80081e4 <TIM_Base_SetConfig+0x114>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d003      	beq.n	80081c8 <TIM_Base_SetConfig+0xf8>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a0c      	ldr	r2, [pc, #48]	; (80081f4 <TIM_Base_SetConfig+0x124>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d103      	bne.n	80081d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	691a      	ldr	r2, [r3, #16]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	615a      	str	r2, [r3, #20]
}
 80081d6:	bf00      	nop
 80081d8:	3714      	adds	r7, #20
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	40010000 	.word	0x40010000
 80081e8:	40000400 	.word	0x40000400
 80081ec:	40000800 	.word	0x40000800
 80081f0:	40000c00 	.word	0x40000c00
 80081f4:	40010400 	.word	0x40010400
 80081f8:	40014000 	.word	0x40014000
 80081fc:	40014400 	.word	0x40014400
 8008200:	40014800 	.word	0x40014800
 8008204:	40001800 	.word	0x40001800
 8008208:	40001c00 	.word	0x40001c00
 800820c:	40002000 	.word	0x40002000

08008210 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008210:	b480      	push	{r7}
 8008212:	b087      	sub	sp, #28
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a1b      	ldr	r3, [r3, #32]
 800821e:	f023 0201 	bic.w	r2, r3, #1
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800823e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f023 0303 	bic.w	r3, r3, #3
 8008246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	4313      	orrs	r3, r2
 8008250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	f023 0302 	bic.w	r3, r3, #2
 8008258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	4313      	orrs	r3, r2
 8008262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a20      	ldr	r2, [pc, #128]	; (80082e8 <TIM_OC1_SetConfig+0xd8>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d003      	beq.n	8008274 <TIM_OC1_SetConfig+0x64>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a1f      	ldr	r2, [pc, #124]	; (80082ec <TIM_OC1_SetConfig+0xdc>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d10c      	bne.n	800828e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	f023 0308 	bic.w	r3, r3, #8
 800827a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	697a      	ldr	r2, [r7, #20]
 8008282:	4313      	orrs	r3, r2
 8008284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	f023 0304 	bic.w	r3, r3, #4
 800828c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a15      	ldr	r2, [pc, #84]	; (80082e8 <TIM_OC1_SetConfig+0xd8>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d003      	beq.n	800829e <TIM_OC1_SetConfig+0x8e>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a14      	ldr	r2, [pc, #80]	; (80082ec <TIM_OC1_SetConfig+0xdc>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d111      	bne.n	80082c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	4313      	orrs	r3, r2
 80082c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	693a      	ldr	r2, [r7, #16]
 80082c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	685a      	ldr	r2, [r3, #4]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	697a      	ldr	r2, [r7, #20]
 80082da:	621a      	str	r2, [r3, #32]
}
 80082dc:	bf00      	nop
 80082de:	371c      	adds	r7, #28
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	40010000 	.word	0x40010000
 80082ec:	40010400 	.word	0x40010400

080082f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	f023 0210 	bic.w	r2, r3, #16
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800831e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	021b      	lsls	r3, r3, #8
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	4313      	orrs	r3, r2
 8008332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	f023 0320 	bic.w	r3, r3, #32
 800833a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	011b      	lsls	r3, r3, #4
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	4313      	orrs	r3, r2
 8008346:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a22      	ldr	r2, [pc, #136]	; (80083d4 <TIM_OC2_SetConfig+0xe4>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d003      	beq.n	8008358 <TIM_OC2_SetConfig+0x68>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a21      	ldr	r2, [pc, #132]	; (80083d8 <TIM_OC2_SetConfig+0xe8>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d10d      	bne.n	8008374 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800835e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	011b      	lsls	r3, r3, #4
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	4313      	orrs	r3, r2
 800836a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008372:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a17      	ldr	r2, [pc, #92]	; (80083d4 <TIM_OC2_SetConfig+0xe4>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d003      	beq.n	8008384 <TIM_OC2_SetConfig+0x94>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a16      	ldr	r2, [pc, #88]	; (80083d8 <TIM_OC2_SetConfig+0xe8>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d113      	bne.n	80083ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800838a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008392:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	695b      	ldr	r3, [r3, #20]
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	693a      	ldr	r2, [r7, #16]
 800839c:	4313      	orrs	r3, r2
 800839e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	685a      	ldr	r2, [r3, #4]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	697a      	ldr	r2, [r7, #20]
 80083c4:	621a      	str	r2, [r3, #32]
}
 80083c6:	bf00      	nop
 80083c8:	371c      	adds	r7, #28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	40010000 	.word	0x40010000
 80083d8:	40010400 	.word	0x40010400

080083dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083dc:	b480      	push	{r7}
 80083de:	b087      	sub	sp, #28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a1b      	ldr	r3, [r3, #32]
 80083ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a1b      	ldr	r3, [r3, #32]
 80083f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	69db      	ldr	r3, [r3, #28]
 8008402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800840a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f023 0303 	bic.w	r3, r3, #3
 8008412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	4313      	orrs	r3, r2
 800841c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	021b      	lsls	r3, r3, #8
 800842c:	697a      	ldr	r2, [r7, #20]
 800842e:	4313      	orrs	r3, r2
 8008430:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a21      	ldr	r2, [pc, #132]	; (80084bc <TIM_OC3_SetConfig+0xe0>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d003      	beq.n	8008442 <TIM_OC3_SetConfig+0x66>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a20      	ldr	r2, [pc, #128]	; (80084c0 <TIM_OC3_SetConfig+0xe4>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d10d      	bne.n	800845e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008448:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	021b      	lsls	r3, r3, #8
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	4313      	orrs	r3, r2
 8008454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800845c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a16      	ldr	r2, [pc, #88]	; (80084bc <TIM_OC3_SetConfig+0xe0>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d003      	beq.n	800846e <TIM_OC3_SetConfig+0x92>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a15      	ldr	r2, [pc, #84]	; (80084c0 <TIM_OC3_SetConfig+0xe4>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d113      	bne.n	8008496 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800847c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	011b      	lsls	r3, r3, #4
 8008484:	693a      	ldr	r2, [r7, #16]
 8008486:	4313      	orrs	r3, r2
 8008488:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	011b      	lsls	r3, r3, #4
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	4313      	orrs	r3, r2
 8008494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	685a      	ldr	r2, [r3, #4]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	621a      	str	r2, [r3, #32]
}
 80084b0:	bf00      	nop
 80084b2:	371c      	adds	r7, #28
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr
 80084bc:	40010000 	.word	0x40010000
 80084c0:	40010400 	.word	0x40010400

080084c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b087      	sub	sp, #28
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a1b      	ldr	r3, [r3, #32]
 80084de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	021b      	lsls	r3, r3, #8
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	4313      	orrs	r3, r2
 8008506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800850e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	031b      	lsls	r3, r3, #12
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	4313      	orrs	r3, r2
 800851a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a12      	ldr	r2, [pc, #72]	; (8008568 <TIM_OC4_SetConfig+0xa4>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d003      	beq.n	800852c <TIM_OC4_SetConfig+0x68>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a11      	ldr	r2, [pc, #68]	; (800856c <TIM_OC4_SetConfig+0xa8>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d109      	bne.n	8008540 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008532:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	695b      	ldr	r3, [r3, #20]
 8008538:	019b      	lsls	r3, r3, #6
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	4313      	orrs	r3, r2
 800853e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	685a      	ldr	r2, [r3, #4]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	621a      	str	r2, [r3, #32]
}
 800855a:	bf00      	nop
 800855c:	371c      	adds	r7, #28
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	40010000 	.word	0x40010000
 800856c:	40010400 	.word	0x40010400

08008570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008570:	b480      	push	{r7}
 8008572:	b087      	sub	sp, #28
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6a1b      	ldr	r3, [r3, #32]
 8008580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	f023 0201 	bic.w	r2, r3, #1
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800859a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	011b      	lsls	r3, r3, #4
 80085a0:	693a      	ldr	r2, [r7, #16]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	f023 030a 	bic.w	r3, r3, #10
 80085ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	621a      	str	r2, [r3, #32]
}
 80085c2:	bf00      	nop
 80085c4:	371c      	adds	r7, #28
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b087      	sub	sp, #28
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	60f8      	str	r0, [r7, #12]
 80085d6:	60b9      	str	r1, [r7, #8]
 80085d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6a1b      	ldr	r3, [r3, #32]
 80085de:	f023 0210 	bic.w	r2, r3, #16
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6a1b      	ldr	r3, [r3, #32]
 80085f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	031b      	lsls	r3, r3, #12
 80085fe:	697a      	ldr	r2, [r7, #20]
 8008600:	4313      	orrs	r3, r2
 8008602:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800860a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	011b      	lsls	r3, r3, #4
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	4313      	orrs	r3, r2
 8008614:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	621a      	str	r2, [r3, #32]
}
 8008622:	bf00      	nop
 8008624:	371c      	adds	r7, #28
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800862e:	b480      	push	{r7}
 8008630:	b085      	sub	sp, #20
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008644:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	4313      	orrs	r3, r2
 800864c:	f043 0307 	orr.w	r3, r3, #7
 8008650:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	609a      	str	r2, [r3, #8]
}
 8008658:	bf00      	nop
 800865a:	3714      	adds	r7, #20
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008664:	b480      	push	{r7}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
 8008670:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800867e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	021a      	lsls	r2, r3, #8
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	431a      	orrs	r2, r3
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	4313      	orrs	r3, r2
 800868c:	697a      	ldr	r2, [r7, #20]
 800868e:	4313      	orrs	r3, r2
 8008690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	609a      	str	r2, [r3, #8]
}
 8008698:	bf00      	nop
 800869a:	371c      	adds	r7, #28
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	f003 031f 	and.w	r3, r3, #31
 80086b6:	2201      	movs	r2, #1
 80086b8:	fa02 f303 	lsl.w	r3, r2, r3
 80086bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6a1a      	ldr	r2, [r3, #32]
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	43db      	mvns	r3, r3
 80086c6:	401a      	ands	r2, r3
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6a1a      	ldr	r2, [r3, #32]
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f003 031f 	and.w	r3, r3, #31
 80086d6:	6879      	ldr	r1, [r7, #4]
 80086d8:	fa01 f303 	lsl.w	r3, r1, r3
 80086dc:	431a      	orrs	r2, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	621a      	str	r2, [r3, #32]
}
 80086e2:	bf00      	nop
 80086e4:	371c      	adds	r7, #28
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
	...

080086f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008700:	2b01      	cmp	r3, #1
 8008702:	d101      	bne.n	8008708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008704:	2302      	movs	r3, #2
 8008706:	e05a      	b.n	80087be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2202      	movs	r2, #2
 8008714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800872e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	4313      	orrs	r3, r2
 8008738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a21      	ldr	r2, [pc, #132]	; (80087cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d022      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008754:	d01d      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a1d      	ldr	r2, [pc, #116]	; (80087d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d018      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a1b      	ldr	r2, [pc, #108]	; (80087d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d013      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a1a      	ldr	r2, [pc, #104]	; (80087d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d00e      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a18      	ldr	r2, [pc, #96]	; (80087dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d009      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a17      	ldr	r2, [pc, #92]	; (80087e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d004      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a15      	ldr	r2, [pc, #84]	; (80087e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d10c      	bne.n	80087ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008798:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	40010000 	.word	0x40010000
 80087d0:	40000400 	.word	0x40000400
 80087d4:	40000800 	.word	0x40000800
 80087d8:	40000c00 	.word	0x40000c00
 80087dc:	40010400 	.word	0x40010400
 80087e0:	40014000 	.word	0x40014000
 80087e4:	40001800 	.word	0x40001800

080087e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80087f2:	2300      	movs	r3, #0
 80087f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d101      	bne.n	8008804 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008800:	2302      	movs	r3, #2
 8008802:	e03d      	b.n	8008880 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	4313      	orrs	r3, r2
 8008818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	4313      	orrs	r3, r2
 8008826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	4313      	orrs	r3, r2
 8008834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4313      	orrs	r3, r2
 8008842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	4313      	orrs	r3, r2
 8008850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	695b      	ldr	r3, [r3, #20]
 800885c:	4313      	orrs	r3, r2
 800885e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	69db      	ldr	r3, [r3, #28]
 800886a:	4313      	orrs	r3, r2
 800886c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3714      	adds	r7, #20
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d101      	bne.n	800889e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e03f      	b.n	800891e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d106      	bne.n	80088b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7fc fe32 	bl	800551c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2224      	movs	r2, #36	; 0x24
 80088bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68da      	ldr	r2, [r3, #12]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80088ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fe1d 	bl	8009510 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	691a      	ldr	r2, [r3, #16]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	695a      	ldr	r2, [r3, #20]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68da      	ldr	r2, [r3, #12]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008904:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2220      	movs	r2, #32
 8008910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2220      	movs	r2, #32
 8008918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3708      	adds	r7, #8
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b08a      	sub	sp, #40	; 0x28
 800892a:	af02      	add	r7, sp, #8
 800892c:	60f8      	str	r0, [r7, #12]
 800892e:	60b9      	str	r1, [r7, #8]
 8008930:	603b      	str	r3, [r7, #0]
 8008932:	4613      	mov	r3, r2
 8008934:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008936:	2300      	movs	r3, #0
 8008938:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b20      	cmp	r3, #32
 8008944:	d17c      	bne.n	8008a40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d002      	beq.n	8008952 <HAL_UART_Transmit+0x2c>
 800894c:	88fb      	ldrh	r3, [r7, #6]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d101      	bne.n	8008956 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e075      	b.n	8008a42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800895c:	2b01      	cmp	r3, #1
 800895e:	d101      	bne.n	8008964 <HAL_UART_Transmit+0x3e>
 8008960:	2302      	movs	r3, #2
 8008962:	e06e      	b.n	8008a42 <HAL_UART_Transmit+0x11c>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2221      	movs	r2, #33	; 0x21
 8008976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800897a:	f7fc ffff 	bl	800597c <HAL_GetTick>
 800897e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	88fa      	ldrh	r2, [r7, #6]
 8008984:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	88fa      	ldrh	r2, [r7, #6]
 800898a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008994:	d108      	bne.n	80089a8 <HAL_UART_Transmit+0x82>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d104      	bne.n	80089a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800899e:	2300      	movs	r3, #0
 80089a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	61bb      	str	r3, [r7, #24]
 80089a6:	e003      	b.n	80089b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089ac:	2300      	movs	r3, #0
 80089ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80089b8:	e02a      	b.n	8008a10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	9300      	str	r3, [sp, #0]
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2200      	movs	r2, #0
 80089c2:	2180      	movs	r1, #128	; 0x80
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f000 fb9b 	bl	8009100 <UART_WaitOnFlagUntilTimeout>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d001      	beq.n	80089d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e036      	b.n	8008a42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d10b      	bne.n	80089f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	881b      	ldrh	r3, [r3, #0]
 80089de:	461a      	mov	r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	3302      	adds	r3, #2
 80089ee:	61bb      	str	r3, [r7, #24]
 80089f0:	e007      	b.n	8008a02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	781a      	ldrb	r2, [r3, #0]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	3301      	adds	r3, #1
 8008a00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1cf      	bne.n	80089ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	2200      	movs	r2, #0
 8008a22:	2140      	movs	r1, #64	; 0x40
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f000 fb6b 	bl	8009100 <UART_WaitOnFlagUntilTimeout>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d001      	beq.n	8008a34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e006      	b.n	8008a42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2220      	movs	r2, #32
 8008a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	e000      	b.n	8008a42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008a40:	2302      	movs	r3, #2
  }
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3720      	adds	r7, #32
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b08a      	sub	sp, #40	; 0x28
 8008a4e:	af02      	add	r7, sp, #8
 8008a50:	60f8      	str	r0, [r7, #12]
 8008a52:	60b9      	str	r1, [r7, #8]
 8008a54:	603b      	str	r3, [r7, #0]
 8008a56:	4613      	mov	r3, r2
 8008a58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2b20      	cmp	r3, #32
 8008a68:	f040 808c 	bne.w	8008b84 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d002      	beq.n	8008a78 <HAL_UART_Receive+0x2e>
 8008a72:	88fb      	ldrh	r3, [r7, #6]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d101      	bne.n	8008a7c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e084      	b.n	8008b86 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d101      	bne.n	8008a8a <HAL_UART_Receive+0x40>
 8008a86:	2302      	movs	r3, #2
 8008a88:	e07d      	b.n	8008b86 <HAL_UART_Receive+0x13c>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2222      	movs	r2, #34	; 0x22
 8008a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008aa6:	f7fc ff69 	bl	800597c <HAL_GetTick>
 8008aaa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	88fa      	ldrh	r2, [r7, #6]
 8008ab0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	88fa      	ldrh	r2, [r7, #6]
 8008ab6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ac0:	d108      	bne.n	8008ad4 <HAL_UART_Receive+0x8a>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d104      	bne.n	8008ad4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8008aca:	2300      	movs	r3, #0
 8008acc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	61bb      	str	r3, [r7, #24]
 8008ad2:	e003      	b.n	8008adc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008ae4:	e043      	b.n	8008b6e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	2200      	movs	r2, #0
 8008aee:	2120      	movs	r1, #32
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f000 fb05 	bl	8009100 <UART_WaitOnFlagUntilTimeout>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d001      	beq.n	8008b00 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e042      	b.n	8008b86 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10c      	bne.n	8008b20 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	3302      	adds	r3, #2
 8008b1c:	61bb      	str	r3, [r7, #24]
 8008b1e:	e01f      	b.n	8008b60 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b28:	d007      	beq.n	8008b3a <HAL_UART_Receive+0xf0>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10a      	bne.n	8008b48 <HAL_UART_Receive+0xfe>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d106      	bne.n	8008b48 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	b2da      	uxtb	r2, r3
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	701a      	strb	r2, [r3, #0]
 8008b46:	e008      	b.n	8008b5a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b54:	b2da      	uxtb	r2, r3
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	3b01      	subs	r3, #1
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1b6      	bne.n	8008ae6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2220      	movs	r2, #32
 8008b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008b80:	2300      	movs	r3, #0
 8008b82:	e000      	b.n	8008b86 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008b84:	2302      	movs	r3, #2
  }
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3720      	adds	r7, #32
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
	...

08008b90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b0ba      	sub	sp, #232	; 0xe8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	695b      	ldr	r3, [r3, #20]
 8008bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bc6:	f003 030f 	and.w	r3, r3, #15
 8008bca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008bce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10f      	bne.n	8008bf6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bda:	f003 0320 	and.w	r3, r3, #32
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d009      	beq.n	8008bf6 <HAL_UART_IRQHandler+0x66>
 8008be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008be6:	f003 0320 	and.w	r3, r3, #32
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d003      	beq.n	8008bf6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fbd3 	bl	800939a <UART_Receive_IT>
      return;
 8008bf4:	e256      	b.n	80090a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008bf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f000 80de 	beq.w	8008dbc <HAL_UART_IRQHandler+0x22c>
 8008c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c04:	f003 0301 	and.w	r3, r3, #1
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d106      	bne.n	8008c1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f000 80d1 	beq.w	8008dbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c1e:	f003 0301 	and.w	r3, r3, #1
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00b      	beq.n	8008c3e <HAL_UART_IRQHandler+0xae>
 8008c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d005      	beq.n	8008c3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c36:	f043 0201 	orr.w	r2, r3, #1
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c42:	f003 0304 	and.w	r3, r3, #4
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00b      	beq.n	8008c62 <HAL_UART_IRQHandler+0xd2>
 8008c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d005      	beq.n	8008c62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5a:	f043 0202 	orr.w	r2, r3, #2
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c66:	f003 0302 	and.w	r3, r3, #2
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00b      	beq.n	8008c86 <HAL_UART_IRQHandler+0xf6>
 8008c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d005      	beq.n	8008c86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7e:	f043 0204 	orr.w	r2, r3, #4
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c8a:	f003 0308 	and.w	r3, r3, #8
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d011      	beq.n	8008cb6 <HAL_UART_IRQHandler+0x126>
 8008c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c96:	f003 0320 	and.w	r3, r3, #32
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d105      	bne.n	8008caa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d005      	beq.n	8008cb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cae:	f043 0208 	orr.w	r2, r3, #8
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f000 81ed 	beq.w	800909a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cc4:	f003 0320 	and.w	r3, r3, #32
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d008      	beq.n	8008cde <HAL_UART_IRQHandler+0x14e>
 8008ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cd0:	f003 0320 	and.w	r3, r3, #32
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d002      	beq.n	8008cde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fb5e 	bl	800939a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	695b      	ldr	r3, [r3, #20]
 8008ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce8:	2b40      	cmp	r3, #64	; 0x40
 8008cea:	bf0c      	ite	eq
 8008cec:	2301      	moveq	r3, #1
 8008cee:	2300      	movne	r3, #0
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfa:	f003 0308 	and.w	r3, r3, #8
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d103      	bne.n	8008d0a <HAL_UART_IRQHandler+0x17a>
 8008d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d04f      	beq.n	8008daa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fa66 	bl	80091dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	695b      	ldr	r3, [r3, #20]
 8008d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d1a:	2b40      	cmp	r3, #64	; 0x40
 8008d1c:	d141      	bne.n	8008da2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3314      	adds	r3, #20
 8008d24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d2c:	e853 3f00 	ldrex	r3, [r3]
 8008d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	3314      	adds	r3, #20
 8008d46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008d4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008d56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008d5a:	e841 2300 	strex	r3, r2, [r1]
 8008d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008d62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1d9      	bne.n	8008d1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d013      	beq.n	8008d9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d76:	4a7d      	ldr	r2, [pc, #500]	; (8008f6c <HAL_UART_IRQHandler+0x3dc>)
 8008d78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7fd fb79 	bl	8006476 <HAL_DMA_Abort_IT>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d016      	beq.n	8008db8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008d94:	4610      	mov	r0, r2
 8008d96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d98:	e00e      	b.n	8008db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f99a 	bl	80090d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008da0:	e00a      	b.n	8008db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f996 	bl	80090d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008da8:	e006      	b.n	8008db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f992 	bl	80090d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008db6:	e170      	b.n	800909a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008db8:	bf00      	nop
    return;
 8008dba:	e16e      	b.n	800909a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	f040 814a 	bne.w	800905a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dca:	f003 0310 	and.w	r3, r3, #16
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f000 8143 	beq.w	800905a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dd8:	f003 0310 	and.w	r3, r3, #16
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f000 813c 	beq.w	800905a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008de2:	2300      	movs	r3, #0
 8008de4:	60bb      	str	r3, [r7, #8]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	60bb      	str	r3, [r7, #8]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	60bb      	str	r3, [r7, #8]
 8008df6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	695b      	ldr	r3, [r3, #20]
 8008dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e02:	2b40      	cmp	r3, #64	; 0x40
 8008e04:	f040 80b4 	bne.w	8008f70 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f000 8140 	beq.w	800909e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e26:	429a      	cmp	r2, r3
 8008e28:	f080 8139 	bcs.w	800909e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e38:	69db      	ldr	r3, [r3, #28]
 8008e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e3e:	f000 8088 	beq.w	8008f52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	330c      	adds	r3, #12
 8008e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e50:	e853 3f00 	ldrex	r3, [r3]
 8008e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008e58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	330c      	adds	r3, #12
 8008e6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008e6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008e7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008e7e:	e841 2300 	strex	r3, r2, [r1]
 8008e82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1d9      	bne.n	8008e42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	3314      	adds	r3, #20
 8008e94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e98:	e853 3f00 	ldrex	r3, [r3]
 8008e9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ea0:	f023 0301 	bic.w	r3, r3, #1
 8008ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3314      	adds	r3, #20
 8008eae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008eb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008eba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ebe:	e841 2300 	strex	r3, r2, [r1]
 8008ec2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008ec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1e1      	bne.n	8008e8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3314      	adds	r3, #20
 8008ed0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ed4:	e853 3f00 	ldrex	r3, [r3]
 8008ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	3314      	adds	r3, #20
 8008eea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008eee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008ef0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ef4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ef6:	e841 2300 	strex	r3, r2, [r1]
 8008efa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008efc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1e3      	bne.n	8008eca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2220      	movs	r2, #32
 8008f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	330c      	adds	r3, #12
 8008f16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f1a:	e853 3f00 	ldrex	r3, [r3]
 8008f1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f22:	f023 0310 	bic.w	r3, r3, #16
 8008f26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	330c      	adds	r3, #12
 8008f30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008f34:	65ba      	str	r2, [r7, #88]	; 0x58
 8008f36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f3c:	e841 2300 	strex	r3, r2, [r1]
 8008f40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d1e3      	bne.n	8008f10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7fd fa22 	bl	8006396 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	4619      	mov	r1, r3
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 f8c0 	bl	80090e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f68:	e099      	b.n	800909e <HAL_UART_IRQHandler+0x50e>
 8008f6a:	bf00      	nop
 8008f6c:	080092a3 	.word	0x080092a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	1ad3      	subs	r3, r2, r3
 8008f7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	f000 808b 	beq.w	80090a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008f8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 8086 	beq.w	80090a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	330c      	adds	r3, #12
 8008f9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa0:	e853 3f00 	ldrex	r3, [r3]
 8008fa4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	330c      	adds	r3, #12
 8008fb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008fba:	647a      	str	r2, [r7, #68]	; 0x44
 8008fbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008fc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fc2:	e841 2300 	strex	r3, r2, [r1]
 8008fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1e3      	bne.n	8008f96 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	3314      	adds	r3, #20
 8008fd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd8:	e853 3f00 	ldrex	r3, [r3]
 8008fdc:	623b      	str	r3, [r7, #32]
   return(result);
 8008fde:	6a3b      	ldr	r3, [r7, #32]
 8008fe0:	f023 0301 	bic.w	r3, r3, #1
 8008fe4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	3314      	adds	r3, #20
 8008fee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008ff2:	633a      	str	r2, [r7, #48]	; 0x30
 8008ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ffa:	e841 2300 	strex	r3, r2, [r1]
 8008ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1e3      	bne.n	8008fce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2220      	movs	r2, #32
 800900a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	330c      	adds	r3, #12
 800901a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	e853 3f00 	ldrex	r3, [r3]
 8009022:	60fb      	str	r3, [r7, #12]
   return(result);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f023 0310 	bic.w	r3, r3, #16
 800902a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	330c      	adds	r3, #12
 8009034:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009038:	61fa      	str	r2, [r7, #28]
 800903a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903c:	69b9      	ldr	r1, [r7, #24]
 800903e:	69fa      	ldr	r2, [r7, #28]
 8009040:	e841 2300 	strex	r3, r2, [r1]
 8009044:	617b      	str	r3, [r7, #20]
   return(result);
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1e3      	bne.n	8009014 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800904c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009050:	4619      	mov	r1, r3
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f848 	bl	80090e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009058:	e023      	b.n	80090a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800905a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800905e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009062:	2b00      	cmp	r3, #0
 8009064:	d009      	beq.n	800907a <HAL_UART_IRQHandler+0x4ea>
 8009066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800906a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800906e:	2b00      	cmp	r3, #0
 8009070:	d003      	beq.n	800907a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f929 	bl	80092ca <UART_Transmit_IT>
    return;
 8009078:	e014      	b.n	80090a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800907a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800907e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00e      	beq.n	80090a4 <HAL_UART_IRQHandler+0x514>
 8009086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800908a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800908e:	2b00      	cmp	r3, #0
 8009090:	d008      	beq.n	80090a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 f969 	bl	800936a <UART_EndTransmit_IT>
    return;
 8009098:	e004      	b.n	80090a4 <HAL_UART_IRQHandler+0x514>
    return;
 800909a:	bf00      	nop
 800909c:	e002      	b.n	80090a4 <HAL_UART_IRQHandler+0x514>
      return;
 800909e:	bf00      	nop
 80090a0:	e000      	b.n	80090a4 <HAL_UART_IRQHandler+0x514>
      return;
 80090a2:	bf00      	nop
  }
}
 80090a4:	37e8      	adds	r7, #232	; 0xe8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop

080090ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	460b      	mov	r3, r1
 80090f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80090f4:	bf00      	nop
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b090      	sub	sp, #64	; 0x40
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	603b      	str	r3, [r7, #0]
 800910c:	4613      	mov	r3, r2
 800910e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009110:	e050      	b.n	80091b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009118:	d04c      	beq.n	80091b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800911a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800911c:	2b00      	cmp	r3, #0
 800911e:	d007      	beq.n	8009130 <UART_WaitOnFlagUntilTimeout+0x30>
 8009120:	f7fc fc2c 	bl	800597c <HAL_GetTick>
 8009124:	4602      	mov	r2, r0
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800912c:	429a      	cmp	r2, r3
 800912e:	d241      	bcs.n	80091b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	330c      	adds	r3, #12
 8009136:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913a:	e853 3f00 	ldrex	r3, [r3]
 800913e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009142:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009146:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	330c      	adds	r3, #12
 800914e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009150:	637a      	str	r2, [r7, #52]	; 0x34
 8009152:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009154:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009158:	e841 2300 	strex	r3, r2, [r1]
 800915c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800915e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009160:	2b00      	cmp	r3, #0
 8009162:	d1e5      	bne.n	8009130 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	3314      	adds	r3, #20
 800916a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	e853 3f00 	ldrex	r3, [r3]
 8009172:	613b      	str	r3, [r7, #16]
   return(result);
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	f023 0301 	bic.w	r3, r3, #1
 800917a:	63bb      	str	r3, [r7, #56]	; 0x38
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	3314      	adds	r3, #20
 8009182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009184:	623a      	str	r2, [r7, #32]
 8009186:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009188:	69f9      	ldr	r1, [r7, #28]
 800918a:	6a3a      	ldr	r2, [r7, #32]
 800918c:	e841 2300 	strex	r3, r2, [r1]
 8009190:	61bb      	str	r3, [r7, #24]
   return(result);
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d1e5      	bne.n	8009164 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2220      	movs	r2, #32
 800919c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2220      	movs	r2, #32
 80091a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80091b0:	2303      	movs	r3, #3
 80091b2:	e00f      	b.n	80091d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	4013      	ands	r3, r2
 80091be:	68ba      	ldr	r2, [r7, #8]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	bf0c      	ite	eq
 80091c4:	2301      	moveq	r3, #1
 80091c6:	2300      	movne	r3, #0
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	461a      	mov	r2, r3
 80091cc:	79fb      	ldrb	r3, [r7, #7]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d09f      	beq.n	8009112 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3740      	adds	r7, #64	; 0x40
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091dc:	b480      	push	{r7}
 80091de:	b095      	sub	sp, #84	; 0x54
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	330c      	adds	r3, #12
 80091ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ee:	e853 3f00 	ldrex	r3, [r3]
 80091f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	330c      	adds	r3, #12
 8009202:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009204:	643a      	str	r2, [r7, #64]	; 0x40
 8009206:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009208:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800920a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800920c:	e841 2300 	strex	r3, r2, [r1]
 8009210:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1e5      	bne.n	80091e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	3314      	adds	r3, #20
 800921e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009220:	6a3b      	ldr	r3, [r7, #32]
 8009222:	e853 3f00 	ldrex	r3, [r3]
 8009226:	61fb      	str	r3, [r7, #28]
   return(result);
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	f023 0301 	bic.w	r3, r3, #1
 800922e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	3314      	adds	r3, #20
 8009236:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009238:	62fa      	str	r2, [r7, #44]	; 0x2c
 800923a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800923e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009240:	e841 2300 	strex	r3, r2, [r1]
 8009244:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1e5      	bne.n	8009218 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009250:	2b01      	cmp	r3, #1
 8009252:	d119      	bne.n	8009288 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	330c      	adds	r3, #12
 800925a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	e853 3f00 	ldrex	r3, [r3]
 8009262:	60bb      	str	r3, [r7, #8]
   return(result);
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	f023 0310 	bic.w	r3, r3, #16
 800926a:	647b      	str	r3, [r7, #68]	; 0x44
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	330c      	adds	r3, #12
 8009272:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009274:	61ba      	str	r2, [r7, #24]
 8009276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009278:	6979      	ldr	r1, [r7, #20]
 800927a:	69ba      	ldr	r2, [r7, #24]
 800927c:	e841 2300 	strex	r3, r2, [r1]
 8009280:	613b      	str	r3, [r7, #16]
   return(result);
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d1e5      	bne.n	8009254 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2220      	movs	r2, #32
 800928c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009296:	bf00      	nop
 8009298:	3754      	adds	r7, #84	; 0x54
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr

080092a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b084      	sub	sp, #16
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2200      	movs	r2, #0
 80092b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2200      	movs	r2, #0
 80092ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f7ff ff09 	bl	80090d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092c2:	bf00      	nop
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80092ca:	b480      	push	{r7}
 80092cc:	b085      	sub	sp, #20
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	2b21      	cmp	r3, #33	; 0x21
 80092dc:	d13e      	bne.n	800935c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092e6:	d114      	bne.n	8009312 <UART_Transmit_IT+0x48>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d110      	bne.n	8009312 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a1b      	ldr	r3, [r3, #32]
 80092f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	881b      	ldrh	r3, [r3, #0]
 80092fa:	461a      	mov	r2, r3
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009304:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a1b      	ldr	r3, [r3, #32]
 800930a:	1c9a      	adds	r2, r3, #2
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	621a      	str	r2, [r3, #32]
 8009310:	e008      	b.n	8009324 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a1b      	ldr	r3, [r3, #32]
 8009316:	1c59      	adds	r1, r3, #1
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	6211      	str	r1, [r2, #32]
 800931c:	781a      	ldrb	r2, [r3, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009328:	b29b      	uxth	r3, r3
 800932a:	3b01      	subs	r3, #1
 800932c:	b29b      	uxth	r3, r3
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	4619      	mov	r1, r3
 8009332:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10f      	bne.n	8009358 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68da      	ldr	r2, [r3, #12]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009346:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	68da      	ldr	r2, [r3, #12]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009356:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009358:	2300      	movs	r3, #0
 800935a:	e000      	b.n	800935e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800935c:	2302      	movs	r3, #2
  }
}
 800935e:	4618      	mov	r0, r3
 8009360:	3714      	adds	r7, #20
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b082      	sub	sp, #8
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68da      	ldr	r2, [r3, #12]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009380:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2220      	movs	r2, #32
 8009386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f7ff fe8e 	bl	80090ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b08c      	sub	sp, #48	; 0x30
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	2b22      	cmp	r3, #34	; 0x22
 80093ac:	f040 80ab 	bne.w	8009506 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093b8:	d117      	bne.n	80093ea <UART_Receive_IT+0x50>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d113      	bne.n	80093ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80093c2:	2300      	movs	r3, #0
 80093c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d8:	b29a      	uxth	r2, r3
 80093da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e2:	1c9a      	adds	r2, r3, #2
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	629a      	str	r2, [r3, #40]	; 0x28
 80093e8:	e026      	b.n	8009438 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80093f0:	2300      	movs	r3, #0
 80093f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093fc:	d007      	beq.n	800940e <UART_Receive_IT+0x74>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10a      	bne.n	800941c <UART_Receive_IT+0x82>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d106      	bne.n	800941c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	b2da      	uxtb	r2, r3
 8009416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009418:	701a      	strb	r2, [r3, #0]
 800941a:	e008      	b.n	800942e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	b2db      	uxtb	r3, r3
 8009424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009428:	b2da      	uxtb	r2, r3
 800942a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009432:	1c5a      	adds	r2, r3, #1
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800943c:	b29b      	uxth	r3, r3
 800943e:	3b01      	subs	r3, #1
 8009440:	b29b      	uxth	r3, r3
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	4619      	mov	r1, r3
 8009446:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009448:	2b00      	cmp	r3, #0
 800944a:	d15a      	bne.n	8009502 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68da      	ldr	r2, [r3, #12]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f022 0220 	bic.w	r2, r2, #32
 800945a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	68da      	ldr	r2, [r3, #12]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800946a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	695a      	ldr	r2, [r3, #20]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f022 0201 	bic.w	r2, r2, #1
 800947a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2220      	movs	r2, #32
 8009480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009488:	2b01      	cmp	r3, #1
 800948a:	d135      	bne.n	80094f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	330c      	adds	r3, #12
 8009498:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	e853 3f00 	ldrex	r3, [r3]
 80094a0:	613b      	str	r3, [r7, #16]
   return(result);
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	f023 0310 	bic.w	r3, r3, #16
 80094a8:	627b      	str	r3, [r7, #36]	; 0x24
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	330c      	adds	r3, #12
 80094b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094b2:	623a      	str	r2, [r7, #32]
 80094b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b6:	69f9      	ldr	r1, [r7, #28]
 80094b8:	6a3a      	ldr	r2, [r7, #32]
 80094ba:	e841 2300 	strex	r3, r2, [r1]
 80094be:	61bb      	str	r3, [r7, #24]
   return(result);
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1e5      	bne.n	8009492 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f003 0310 	and.w	r3, r3, #16
 80094d0:	2b10      	cmp	r3, #16
 80094d2:	d10a      	bne.n	80094ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094d4:	2300      	movs	r3, #0
 80094d6:	60fb      	str	r3, [r7, #12]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	60fb      	str	r3, [r7, #12]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	60fb      	str	r3, [r7, #12]
 80094e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7ff fdf9 	bl	80090e8 <HAL_UARTEx_RxEventCallback>
 80094f6:	e002      	b.n	80094fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f7ff fde1 	bl	80090c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80094fe:	2300      	movs	r3, #0
 8009500:	e002      	b.n	8009508 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009502:	2300      	movs	r3, #0
 8009504:	e000      	b.n	8009508 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009506:	2302      	movs	r3, #2
  }
}
 8009508:	4618      	mov	r0, r3
 800950a:	3730      	adds	r7, #48	; 0x30
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009514:	b09f      	sub	sp, #124	; 0x7c
 8009516:	af00      	add	r7, sp, #0
 8009518:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800951a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009526:	68d9      	ldr	r1, [r3, #12]
 8009528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	ea40 0301 	orr.w	r3, r0, r1
 8009530:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009534:	689a      	ldr	r2, [r3, #8]
 8009536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	431a      	orrs	r2, r3
 800953c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800953e:	695b      	ldr	r3, [r3, #20]
 8009540:	431a      	orrs	r2, r3
 8009542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009544:	69db      	ldr	r3, [r3, #28]
 8009546:	4313      	orrs	r3, r2
 8009548:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800954a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009554:	f021 010c 	bic.w	r1, r1, #12
 8009558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800955e:	430b      	orrs	r3, r1
 8009560:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	695b      	ldr	r3, [r3, #20]
 8009568:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800956c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800956e:	6999      	ldr	r1, [r3, #24]
 8009570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	ea40 0301 	orr.w	r3, r0, r1
 8009578:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800957a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	4bc5      	ldr	r3, [pc, #788]	; (8009894 <UART_SetConfig+0x384>)
 8009580:	429a      	cmp	r2, r3
 8009582:	d004      	beq.n	800958e <UART_SetConfig+0x7e>
 8009584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	4bc3      	ldr	r3, [pc, #780]	; (8009898 <UART_SetConfig+0x388>)
 800958a:	429a      	cmp	r2, r3
 800958c:	d103      	bne.n	8009596 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800958e:	f7fe fa27 	bl	80079e0 <HAL_RCC_GetPCLK2Freq>
 8009592:	6778      	str	r0, [r7, #116]	; 0x74
 8009594:	e002      	b.n	800959c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009596:	f7fe fa0f 	bl	80079b8 <HAL_RCC_GetPCLK1Freq>
 800959a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800959c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800959e:	69db      	ldr	r3, [r3, #28]
 80095a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095a4:	f040 80b6 	bne.w	8009714 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095aa:	461c      	mov	r4, r3
 80095ac:	f04f 0500 	mov.w	r5, #0
 80095b0:	4622      	mov	r2, r4
 80095b2:	462b      	mov	r3, r5
 80095b4:	1891      	adds	r1, r2, r2
 80095b6:	6439      	str	r1, [r7, #64]	; 0x40
 80095b8:	415b      	adcs	r3, r3
 80095ba:	647b      	str	r3, [r7, #68]	; 0x44
 80095bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80095c0:	1912      	adds	r2, r2, r4
 80095c2:	eb45 0303 	adc.w	r3, r5, r3
 80095c6:	f04f 0000 	mov.w	r0, #0
 80095ca:	f04f 0100 	mov.w	r1, #0
 80095ce:	00d9      	lsls	r1, r3, #3
 80095d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80095d4:	00d0      	lsls	r0, r2, #3
 80095d6:	4602      	mov	r2, r0
 80095d8:	460b      	mov	r3, r1
 80095da:	1911      	adds	r1, r2, r4
 80095dc:	6639      	str	r1, [r7, #96]	; 0x60
 80095de:	416b      	adcs	r3, r5
 80095e0:	667b      	str	r3, [r7, #100]	; 0x64
 80095e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	461a      	mov	r2, r3
 80095e8:	f04f 0300 	mov.w	r3, #0
 80095ec:	1891      	adds	r1, r2, r2
 80095ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80095f0:	415b      	adcs	r3, r3
 80095f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80095f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80095fc:	f7f7 fa5e 	bl	8000abc <__aeabi_uldivmod>
 8009600:	4602      	mov	r2, r0
 8009602:	460b      	mov	r3, r1
 8009604:	4ba5      	ldr	r3, [pc, #660]	; (800989c <UART_SetConfig+0x38c>)
 8009606:	fba3 2302 	umull	r2, r3, r3, r2
 800960a:	095b      	lsrs	r3, r3, #5
 800960c:	011e      	lsls	r6, r3, #4
 800960e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009610:	461c      	mov	r4, r3
 8009612:	f04f 0500 	mov.w	r5, #0
 8009616:	4622      	mov	r2, r4
 8009618:	462b      	mov	r3, r5
 800961a:	1891      	adds	r1, r2, r2
 800961c:	6339      	str	r1, [r7, #48]	; 0x30
 800961e:	415b      	adcs	r3, r3
 8009620:	637b      	str	r3, [r7, #52]	; 0x34
 8009622:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009626:	1912      	adds	r2, r2, r4
 8009628:	eb45 0303 	adc.w	r3, r5, r3
 800962c:	f04f 0000 	mov.w	r0, #0
 8009630:	f04f 0100 	mov.w	r1, #0
 8009634:	00d9      	lsls	r1, r3, #3
 8009636:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800963a:	00d0      	lsls	r0, r2, #3
 800963c:	4602      	mov	r2, r0
 800963e:	460b      	mov	r3, r1
 8009640:	1911      	adds	r1, r2, r4
 8009642:	65b9      	str	r1, [r7, #88]	; 0x58
 8009644:	416b      	adcs	r3, r5
 8009646:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	461a      	mov	r2, r3
 800964e:	f04f 0300 	mov.w	r3, #0
 8009652:	1891      	adds	r1, r2, r2
 8009654:	62b9      	str	r1, [r7, #40]	; 0x28
 8009656:	415b      	adcs	r3, r3
 8009658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800965a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800965e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009662:	f7f7 fa2b 	bl	8000abc <__aeabi_uldivmod>
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	4b8c      	ldr	r3, [pc, #560]	; (800989c <UART_SetConfig+0x38c>)
 800966c:	fba3 1302 	umull	r1, r3, r3, r2
 8009670:	095b      	lsrs	r3, r3, #5
 8009672:	2164      	movs	r1, #100	; 0x64
 8009674:	fb01 f303 	mul.w	r3, r1, r3
 8009678:	1ad3      	subs	r3, r2, r3
 800967a:	00db      	lsls	r3, r3, #3
 800967c:	3332      	adds	r3, #50	; 0x32
 800967e:	4a87      	ldr	r2, [pc, #540]	; (800989c <UART_SetConfig+0x38c>)
 8009680:	fba2 2303 	umull	r2, r3, r2, r3
 8009684:	095b      	lsrs	r3, r3, #5
 8009686:	005b      	lsls	r3, r3, #1
 8009688:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800968c:	441e      	add	r6, r3
 800968e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009690:	4618      	mov	r0, r3
 8009692:	f04f 0100 	mov.w	r1, #0
 8009696:	4602      	mov	r2, r0
 8009698:	460b      	mov	r3, r1
 800969a:	1894      	adds	r4, r2, r2
 800969c:	623c      	str	r4, [r7, #32]
 800969e:	415b      	adcs	r3, r3
 80096a0:	627b      	str	r3, [r7, #36]	; 0x24
 80096a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80096a6:	1812      	adds	r2, r2, r0
 80096a8:	eb41 0303 	adc.w	r3, r1, r3
 80096ac:	f04f 0400 	mov.w	r4, #0
 80096b0:	f04f 0500 	mov.w	r5, #0
 80096b4:	00dd      	lsls	r5, r3, #3
 80096b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80096ba:	00d4      	lsls	r4, r2, #3
 80096bc:	4622      	mov	r2, r4
 80096be:	462b      	mov	r3, r5
 80096c0:	1814      	adds	r4, r2, r0
 80096c2:	653c      	str	r4, [r7, #80]	; 0x50
 80096c4:	414b      	adcs	r3, r1
 80096c6:	657b      	str	r3, [r7, #84]	; 0x54
 80096c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	461a      	mov	r2, r3
 80096ce:	f04f 0300 	mov.w	r3, #0
 80096d2:	1891      	adds	r1, r2, r2
 80096d4:	61b9      	str	r1, [r7, #24]
 80096d6:	415b      	adcs	r3, r3
 80096d8:	61fb      	str	r3, [r7, #28]
 80096da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80096de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80096e2:	f7f7 f9eb 	bl	8000abc <__aeabi_uldivmod>
 80096e6:	4602      	mov	r2, r0
 80096e8:	460b      	mov	r3, r1
 80096ea:	4b6c      	ldr	r3, [pc, #432]	; (800989c <UART_SetConfig+0x38c>)
 80096ec:	fba3 1302 	umull	r1, r3, r3, r2
 80096f0:	095b      	lsrs	r3, r3, #5
 80096f2:	2164      	movs	r1, #100	; 0x64
 80096f4:	fb01 f303 	mul.w	r3, r1, r3
 80096f8:	1ad3      	subs	r3, r2, r3
 80096fa:	00db      	lsls	r3, r3, #3
 80096fc:	3332      	adds	r3, #50	; 0x32
 80096fe:	4a67      	ldr	r2, [pc, #412]	; (800989c <UART_SetConfig+0x38c>)
 8009700:	fba2 2303 	umull	r2, r3, r2, r3
 8009704:	095b      	lsrs	r3, r3, #5
 8009706:	f003 0207 	and.w	r2, r3, #7
 800970a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4432      	add	r2, r6
 8009710:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009712:	e0b9      	b.n	8009888 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009714:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009716:	461c      	mov	r4, r3
 8009718:	f04f 0500 	mov.w	r5, #0
 800971c:	4622      	mov	r2, r4
 800971e:	462b      	mov	r3, r5
 8009720:	1891      	adds	r1, r2, r2
 8009722:	6139      	str	r1, [r7, #16]
 8009724:	415b      	adcs	r3, r3
 8009726:	617b      	str	r3, [r7, #20]
 8009728:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800972c:	1912      	adds	r2, r2, r4
 800972e:	eb45 0303 	adc.w	r3, r5, r3
 8009732:	f04f 0000 	mov.w	r0, #0
 8009736:	f04f 0100 	mov.w	r1, #0
 800973a:	00d9      	lsls	r1, r3, #3
 800973c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009740:	00d0      	lsls	r0, r2, #3
 8009742:	4602      	mov	r2, r0
 8009744:	460b      	mov	r3, r1
 8009746:	eb12 0804 	adds.w	r8, r2, r4
 800974a:	eb43 0905 	adc.w	r9, r3, r5
 800974e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	4618      	mov	r0, r3
 8009754:	f04f 0100 	mov.w	r1, #0
 8009758:	f04f 0200 	mov.w	r2, #0
 800975c:	f04f 0300 	mov.w	r3, #0
 8009760:	008b      	lsls	r3, r1, #2
 8009762:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009766:	0082      	lsls	r2, r0, #2
 8009768:	4640      	mov	r0, r8
 800976a:	4649      	mov	r1, r9
 800976c:	f7f7 f9a6 	bl	8000abc <__aeabi_uldivmod>
 8009770:	4602      	mov	r2, r0
 8009772:	460b      	mov	r3, r1
 8009774:	4b49      	ldr	r3, [pc, #292]	; (800989c <UART_SetConfig+0x38c>)
 8009776:	fba3 2302 	umull	r2, r3, r3, r2
 800977a:	095b      	lsrs	r3, r3, #5
 800977c:	011e      	lsls	r6, r3, #4
 800977e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009780:	4618      	mov	r0, r3
 8009782:	f04f 0100 	mov.w	r1, #0
 8009786:	4602      	mov	r2, r0
 8009788:	460b      	mov	r3, r1
 800978a:	1894      	adds	r4, r2, r2
 800978c:	60bc      	str	r4, [r7, #8]
 800978e:	415b      	adcs	r3, r3
 8009790:	60fb      	str	r3, [r7, #12]
 8009792:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009796:	1812      	adds	r2, r2, r0
 8009798:	eb41 0303 	adc.w	r3, r1, r3
 800979c:	f04f 0400 	mov.w	r4, #0
 80097a0:	f04f 0500 	mov.w	r5, #0
 80097a4:	00dd      	lsls	r5, r3, #3
 80097a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80097aa:	00d4      	lsls	r4, r2, #3
 80097ac:	4622      	mov	r2, r4
 80097ae:	462b      	mov	r3, r5
 80097b0:	1814      	adds	r4, r2, r0
 80097b2:	64bc      	str	r4, [r7, #72]	; 0x48
 80097b4:	414b      	adcs	r3, r1
 80097b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	4618      	mov	r0, r3
 80097be:	f04f 0100 	mov.w	r1, #0
 80097c2:	f04f 0200 	mov.w	r2, #0
 80097c6:	f04f 0300 	mov.w	r3, #0
 80097ca:	008b      	lsls	r3, r1, #2
 80097cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80097d0:	0082      	lsls	r2, r0, #2
 80097d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80097d6:	f7f7 f971 	bl	8000abc <__aeabi_uldivmod>
 80097da:	4602      	mov	r2, r0
 80097dc:	460b      	mov	r3, r1
 80097de:	4b2f      	ldr	r3, [pc, #188]	; (800989c <UART_SetConfig+0x38c>)
 80097e0:	fba3 1302 	umull	r1, r3, r3, r2
 80097e4:	095b      	lsrs	r3, r3, #5
 80097e6:	2164      	movs	r1, #100	; 0x64
 80097e8:	fb01 f303 	mul.w	r3, r1, r3
 80097ec:	1ad3      	subs	r3, r2, r3
 80097ee:	011b      	lsls	r3, r3, #4
 80097f0:	3332      	adds	r3, #50	; 0x32
 80097f2:	4a2a      	ldr	r2, [pc, #168]	; (800989c <UART_SetConfig+0x38c>)
 80097f4:	fba2 2303 	umull	r2, r3, r2, r3
 80097f8:	095b      	lsrs	r3, r3, #5
 80097fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097fe:	441e      	add	r6, r3
 8009800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009802:	4618      	mov	r0, r3
 8009804:	f04f 0100 	mov.w	r1, #0
 8009808:	4602      	mov	r2, r0
 800980a:	460b      	mov	r3, r1
 800980c:	1894      	adds	r4, r2, r2
 800980e:	603c      	str	r4, [r7, #0]
 8009810:	415b      	adcs	r3, r3
 8009812:	607b      	str	r3, [r7, #4]
 8009814:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009818:	1812      	adds	r2, r2, r0
 800981a:	eb41 0303 	adc.w	r3, r1, r3
 800981e:	f04f 0400 	mov.w	r4, #0
 8009822:	f04f 0500 	mov.w	r5, #0
 8009826:	00dd      	lsls	r5, r3, #3
 8009828:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800982c:	00d4      	lsls	r4, r2, #3
 800982e:	4622      	mov	r2, r4
 8009830:	462b      	mov	r3, r5
 8009832:	eb12 0a00 	adds.w	sl, r2, r0
 8009836:	eb43 0b01 	adc.w	fp, r3, r1
 800983a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	4618      	mov	r0, r3
 8009840:	f04f 0100 	mov.w	r1, #0
 8009844:	f04f 0200 	mov.w	r2, #0
 8009848:	f04f 0300 	mov.w	r3, #0
 800984c:	008b      	lsls	r3, r1, #2
 800984e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009852:	0082      	lsls	r2, r0, #2
 8009854:	4650      	mov	r0, sl
 8009856:	4659      	mov	r1, fp
 8009858:	f7f7 f930 	bl	8000abc <__aeabi_uldivmod>
 800985c:	4602      	mov	r2, r0
 800985e:	460b      	mov	r3, r1
 8009860:	4b0e      	ldr	r3, [pc, #56]	; (800989c <UART_SetConfig+0x38c>)
 8009862:	fba3 1302 	umull	r1, r3, r3, r2
 8009866:	095b      	lsrs	r3, r3, #5
 8009868:	2164      	movs	r1, #100	; 0x64
 800986a:	fb01 f303 	mul.w	r3, r1, r3
 800986e:	1ad3      	subs	r3, r2, r3
 8009870:	011b      	lsls	r3, r3, #4
 8009872:	3332      	adds	r3, #50	; 0x32
 8009874:	4a09      	ldr	r2, [pc, #36]	; (800989c <UART_SetConfig+0x38c>)
 8009876:	fba2 2303 	umull	r2, r3, r2, r3
 800987a:	095b      	lsrs	r3, r3, #5
 800987c:	f003 020f 	and.w	r2, r3, #15
 8009880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4432      	add	r2, r6
 8009886:	609a      	str	r2, [r3, #8]
}
 8009888:	bf00      	nop
 800988a:	377c      	adds	r7, #124	; 0x7c
 800988c:	46bd      	mov	sp, r7
 800988e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009892:	bf00      	nop
 8009894:	40011000 	.word	0x40011000
 8009898:	40011400 	.word	0x40011400
 800989c:	51eb851f 	.word	0x51eb851f

080098a0 <atoi>:
 80098a0:	220a      	movs	r2, #10
 80098a2:	2100      	movs	r1, #0
 80098a4:	f000 b8f0 	b.w	8009a88 <strtol>

080098a8 <__errno>:
 80098a8:	4b01      	ldr	r3, [pc, #4]	; (80098b0 <__errno+0x8>)
 80098aa:	6818      	ldr	r0, [r3, #0]
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	2000000c 	.word	0x2000000c

080098b4 <__libc_init_array>:
 80098b4:	b570      	push	{r4, r5, r6, lr}
 80098b6:	4d0d      	ldr	r5, [pc, #52]	; (80098ec <__libc_init_array+0x38>)
 80098b8:	4c0d      	ldr	r4, [pc, #52]	; (80098f0 <__libc_init_array+0x3c>)
 80098ba:	1b64      	subs	r4, r4, r5
 80098bc:	10a4      	asrs	r4, r4, #2
 80098be:	2600      	movs	r6, #0
 80098c0:	42a6      	cmp	r6, r4
 80098c2:	d109      	bne.n	80098d8 <__libc_init_array+0x24>
 80098c4:	4d0b      	ldr	r5, [pc, #44]	; (80098f4 <__libc_init_array+0x40>)
 80098c6:	4c0c      	ldr	r4, [pc, #48]	; (80098f8 <__libc_init_array+0x44>)
 80098c8:	f000 fd38 	bl	800a33c <_init>
 80098cc:	1b64      	subs	r4, r4, r5
 80098ce:	10a4      	asrs	r4, r4, #2
 80098d0:	2600      	movs	r6, #0
 80098d2:	42a6      	cmp	r6, r4
 80098d4:	d105      	bne.n	80098e2 <__libc_init_array+0x2e>
 80098d6:	bd70      	pop	{r4, r5, r6, pc}
 80098d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80098dc:	4798      	blx	r3
 80098de:	3601      	adds	r6, #1
 80098e0:	e7ee      	b.n	80098c0 <__libc_init_array+0xc>
 80098e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80098e6:	4798      	blx	r3
 80098e8:	3601      	adds	r6, #1
 80098ea:	e7f2      	b.n	80098d2 <__libc_init_array+0x1e>
 80098ec:	0800d190 	.word	0x0800d190
 80098f0:	0800d190 	.word	0x0800d190
 80098f4:	0800d190 	.word	0x0800d190
 80098f8:	0800d194 	.word	0x0800d194

080098fc <__itoa>:
 80098fc:	1e93      	subs	r3, r2, #2
 80098fe:	2b22      	cmp	r3, #34	; 0x22
 8009900:	b510      	push	{r4, lr}
 8009902:	460c      	mov	r4, r1
 8009904:	d904      	bls.n	8009910 <__itoa+0x14>
 8009906:	2300      	movs	r3, #0
 8009908:	700b      	strb	r3, [r1, #0]
 800990a:	461c      	mov	r4, r3
 800990c:	4620      	mov	r0, r4
 800990e:	bd10      	pop	{r4, pc}
 8009910:	2a0a      	cmp	r2, #10
 8009912:	d109      	bne.n	8009928 <__itoa+0x2c>
 8009914:	2800      	cmp	r0, #0
 8009916:	da07      	bge.n	8009928 <__itoa+0x2c>
 8009918:	232d      	movs	r3, #45	; 0x2d
 800991a:	700b      	strb	r3, [r1, #0]
 800991c:	4240      	negs	r0, r0
 800991e:	2101      	movs	r1, #1
 8009920:	4421      	add	r1, r4
 8009922:	f000 f8bb 	bl	8009a9c <__utoa>
 8009926:	e7f1      	b.n	800990c <__itoa+0x10>
 8009928:	2100      	movs	r1, #0
 800992a:	e7f9      	b.n	8009920 <__itoa+0x24>

0800992c <itoa>:
 800992c:	f7ff bfe6 	b.w	80098fc <__itoa>

08009930 <memset>:
 8009930:	4402      	add	r2, r0
 8009932:	4603      	mov	r3, r0
 8009934:	4293      	cmp	r3, r2
 8009936:	d100      	bne.n	800993a <memset+0xa>
 8009938:	4770      	bx	lr
 800993a:	f803 1b01 	strb.w	r1, [r3], #1
 800993e:	e7f9      	b.n	8009934 <memset+0x4>

08009940 <siprintf>:
 8009940:	b40e      	push	{r1, r2, r3}
 8009942:	b500      	push	{lr}
 8009944:	b09c      	sub	sp, #112	; 0x70
 8009946:	ab1d      	add	r3, sp, #116	; 0x74
 8009948:	9002      	str	r0, [sp, #8]
 800994a:	9006      	str	r0, [sp, #24]
 800994c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009950:	4809      	ldr	r0, [pc, #36]	; (8009978 <siprintf+0x38>)
 8009952:	9107      	str	r1, [sp, #28]
 8009954:	9104      	str	r1, [sp, #16]
 8009956:	4909      	ldr	r1, [pc, #36]	; (800997c <siprintf+0x3c>)
 8009958:	f853 2b04 	ldr.w	r2, [r3], #4
 800995c:	9105      	str	r1, [sp, #20]
 800995e:	6800      	ldr	r0, [r0, #0]
 8009960:	9301      	str	r3, [sp, #4]
 8009962:	a902      	add	r1, sp, #8
 8009964:	f000 f938 	bl	8009bd8 <_svfiprintf_r>
 8009968:	9b02      	ldr	r3, [sp, #8]
 800996a:	2200      	movs	r2, #0
 800996c:	701a      	strb	r2, [r3, #0]
 800996e:	b01c      	add	sp, #112	; 0x70
 8009970:	f85d eb04 	ldr.w	lr, [sp], #4
 8009974:	b003      	add	sp, #12
 8009976:	4770      	bx	lr
 8009978:	2000000c 	.word	0x2000000c
 800997c:	ffff0208 	.word	0xffff0208

08009980 <_strtol_l.isra.0>:
 8009980:	2b01      	cmp	r3, #1
 8009982:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009986:	d001      	beq.n	800998c <_strtol_l.isra.0+0xc>
 8009988:	2b24      	cmp	r3, #36	; 0x24
 800998a:	d906      	bls.n	800999a <_strtol_l.isra.0+0x1a>
 800998c:	f7ff ff8c 	bl	80098a8 <__errno>
 8009990:	2316      	movs	r3, #22
 8009992:	6003      	str	r3, [r0, #0]
 8009994:	2000      	movs	r0, #0
 8009996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800999a:	4f3a      	ldr	r7, [pc, #232]	; (8009a84 <_strtol_l.isra.0+0x104>)
 800999c:	468e      	mov	lr, r1
 800999e:	4676      	mov	r6, lr
 80099a0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80099a4:	5de5      	ldrb	r5, [r4, r7]
 80099a6:	f015 0508 	ands.w	r5, r5, #8
 80099aa:	d1f8      	bne.n	800999e <_strtol_l.isra.0+0x1e>
 80099ac:	2c2d      	cmp	r4, #45	; 0x2d
 80099ae:	d134      	bne.n	8009a1a <_strtol_l.isra.0+0x9a>
 80099b0:	f89e 4000 	ldrb.w	r4, [lr]
 80099b4:	f04f 0801 	mov.w	r8, #1
 80099b8:	f106 0e02 	add.w	lr, r6, #2
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d05c      	beq.n	8009a7a <_strtol_l.isra.0+0xfa>
 80099c0:	2b10      	cmp	r3, #16
 80099c2:	d10c      	bne.n	80099de <_strtol_l.isra.0+0x5e>
 80099c4:	2c30      	cmp	r4, #48	; 0x30
 80099c6:	d10a      	bne.n	80099de <_strtol_l.isra.0+0x5e>
 80099c8:	f89e 4000 	ldrb.w	r4, [lr]
 80099cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80099d0:	2c58      	cmp	r4, #88	; 0x58
 80099d2:	d14d      	bne.n	8009a70 <_strtol_l.isra.0+0xf0>
 80099d4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80099d8:	2310      	movs	r3, #16
 80099da:	f10e 0e02 	add.w	lr, lr, #2
 80099de:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80099e2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80099e6:	2600      	movs	r6, #0
 80099e8:	fbbc f9f3 	udiv	r9, ip, r3
 80099ec:	4635      	mov	r5, r6
 80099ee:	fb03 ca19 	mls	sl, r3, r9, ip
 80099f2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80099f6:	2f09      	cmp	r7, #9
 80099f8:	d818      	bhi.n	8009a2c <_strtol_l.isra.0+0xac>
 80099fa:	463c      	mov	r4, r7
 80099fc:	42a3      	cmp	r3, r4
 80099fe:	dd24      	ble.n	8009a4a <_strtol_l.isra.0+0xca>
 8009a00:	2e00      	cmp	r6, #0
 8009a02:	db1f      	blt.n	8009a44 <_strtol_l.isra.0+0xc4>
 8009a04:	45a9      	cmp	r9, r5
 8009a06:	d31d      	bcc.n	8009a44 <_strtol_l.isra.0+0xc4>
 8009a08:	d101      	bne.n	8009a0e <_strtol_l.isra.0+0x8e>
 8009a0a:	45a2      	cmp	sl, r4
 8009a0c:	db1a      	blt.n	8009a44 <_strtol_l.isra.0+0xc4>
 8009a0e:	fb05 4503 	mla	r5, r5, r3, r4
 8009a12:	2601      	movs	r6, #1
 8009a14:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009a18:	e7eb      	b.n	80099f2 <_strtol_l.isra.0+0x72>
 8009a1a:	2c2b      	cmp	r4, #43	; 0x2b
 8009a1c:	bf08      	it	eq
 8009a1e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009a22:	46a8      	mov	r8, r5
 8009a24:	bf08      	it	eq
 8009a26:	f106 0e02 	addeq.w	lr, r6, #2
 8009a2a:	e7c7      	b.n	80099bc <_strtol_l.isra.0+0x3c>
 8009a2c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009a30:	2f19      	cmp	r7, #25
 8009a32:	d801      	bhi.n	8009a38 <_strtol_l.isra.0+0xb8>
 8009a34:	3c37      	subs	r4, #55	; 0x37
 8009a36:	e7e1      	b.n	80099fc <_strtol_l.isra.0+0x7c>
 8009a38:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009a3c:	2f19      	cmp	r7, #25
 8009a3e:	d804      	bhi.n	8009a4a <_strtol_l.isra.0+0xca>
 8009a40:	3c57      	subs	r4, #87	; 0x57
 8009a42:	e7db      	b.n	80099fc <_strtol_l.isra.0+0x7c>
 8009a44:	f04f 36ff 	mov.w	r6, #4294967295
 8009a48:	e7e4      	b.n	8009a14 <_strtol_l.isra.0+0x94>
 8009a4a:	2e00      	cmp	r6, #0
 8009a4c:	da05      	bge.n	8009a5a <_strtol_l.isra.0+0xda>
 8009a4e:	2322      	movs	r3, #34	; 0x22
 8009a50:	6003      	str	r3, [r0, #0]
 8009a52:	4665      	mov	r5, ip
 8009a54:	b942      	cbnz	r2, 8009a68 <_strtol_l.isra.0+0xe8>
 8009a56:	4628      	mov	r0, r5
 8009a58:	e79d      	b.n	8009996 <_strtol_l.isra.0+0x16>
 8009a5a:	f1b8 0f00 	cmp.w	r8, #0
 8009a5e:	d000      	beq.n	8009a62 <_strtol_l.isra.0+0xe2>
 8009a60:	426d      	negs	r5, r5
 8009a62:	2a00      	cmp	r2, #0
 8009a64:	d0f7      	beq.n	8009a56 <_strtol_l.isra.0+0xd6>
 8009a66:	b10e      	cbz	r6, 8009a6c <_strtol_l.isra.0+0xec>
 8009a68:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009a6c:	6011      	str	r1, [r2, #0]
 8009a6e:	e7f2      	b.n	8009a56 <_strtol_l.isra.0+0xd6>
 8009a70:	2430      	movs	r4, #48	; 0x30
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d1b3      	bne.n	80099de <_strtol_l.isra.0+0x5e>
 8009a76:	2308      	movs	r3, #8
 8009a78:	e7b1      	b.n	80099de <_strtol_l.isra.0+0x5e>
 8009a7a:	2c30      	cmp	r4, #48	; 0x30
 8009a7c:	d0a4      	beq.n	80099c8 <_strtol_l.isra.0+0x48>
 8009a7e:	230a      	movs	r3, #10
 8009a80:	e7ad      	b.n	80099de <_strtol_l.isra.0+0x5e>
 8009a82:	bf00      	nop
 8009a84:	0800d052 	.word	0x0800d052

08009a88 <strtol>:
 8009a88:	4613      	mov	r3, r2
 8009a8a:	460a      	mov	r2, r1
 8009a8c:	4601      	mov	r1, r0
 8009a8e:	4802      	ldr	r0, [pc, #8]	; (8009a98 <strtol+0x10>)
 8009a90:	6800      	ldr	r0, [r0, #0]
 8009a92:	f7ff bf75 	b.w	8009980 <_strtol_l.isra.0>
 8009a96:	bf00      	nop
 8009a98:	2000000c 	.word	0x2000000c

08009a9c <__utoa>:
 8009a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a9e:	4c1f      	ldr	r4, [pc, #124]	; (8009b1c <__utoa+0x80>)
 8009aa0:	b08b      	sub	sp, #44	; 0x2c
 8009aa2:	4605      	mov	r5, r0
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	466e      	mov	r6, sp
 8009aa8:	f104 0c20 	add.w	ip, r4, #32
 8009aac:	6820      	ldr	r0, [r4, #0]
 8009aae:	6861      	ldr	r1, [r4, #4]
 8009ab0:	4637      	mov	r7, r6
 8009ab2:	c703      	stmia	r7!, {r0, r1}
 8009ab4:	3408      	adds	r4, #8
 8009ab6:	4564      	cmp	r4, ip
 8009ab8:	463e      	mov	r6, r7
 8009aba:	d1f7      	bne.n	8009aac <__utoa+0x10>
 8009abc:	7921      	ldrb	r1, [r4, #4]
 8009abe:	7139      	strb	r1, [r7, #4]
 8009ac0:	1e91      	subs	r1, r2, #2
 8009ac2:	6820      	ldr	r0, [r4, #0]
 8009ac4:	6038      	str	r0, [r7, #0]
 8009ac6:	2922      	cmp	r1, #34	; 0x22
 8009ac8:	f04f 0100 	mov.w	r1, #0
 8009acc:	d904      	bls.n	8009ad8 <__utoa+0x3c>
 8009ace:	7019      	strb	r1, [r3, #0]
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	b00b      	add	sp, #44	; 0x2c
 8009ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ad8:	1e58      	subs	r0, r3, #1
 8009ada:	4684      	mov	ip, r0
 8009adc:	fbb5 f7f2 	udiv	r7, r5, r2
 8009ae0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8009ae4:	fb02 5617 	mls	r6, r2, r7, r5
 8009ae8:	4476      	add	r6, lr
 8009aea:	460c      	mov	r4, r1
 8009aec:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009af0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009af4:	462e      	mov	r6, r5
 8009af6:	42b2      	cmp	r2, r6
 8009af8:	f101 0101 	add.w	r1, r1, #1
 8009afc:	463d      	mov	r5, r7
 8009afe:	d9ed      	bls.n	8009adc <__utoa+0x40>
 8009b00:	2200      	movs	r2, #0
 8009b02:	545a      	strb	r2, [r3, r1]
 8009b04:	1919      	adds	r1, r3, r4
 8009b06:	1aa5      	subs	r5, r4, r2
 8009b08:	42aa      	cmp	r2, r5
 8009b0a:	dae2      	bge.n	8009ad2 <__utoa+0x36>
 8009b0c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009b10:	780e      	ldrb	r6, [r1, #0]
 8009b12:	7006      	strb	r6, [r0, #0]
 8009b14:	3201      	adds	r2, #1
 8009b16:	f801 5901 	strb.w	r5, [r1], #-1
 8009b1a:	e7f4      	b.n	8009b06 <__utoa+0x6a>
 8009b1c:	0800d02c 	.word	0x0800d02c

08009b20 <__ssputs_r>:
 8009b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b24:	688e      	ldr	r6, [r1, #8]
 8009b26:	429e      	cmp	r6, r3
 8009b28:	4682      	mov	sl, r0
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	4690      	mov	r8, r2
 8009b2e:	461f      	mov	r7, r3
 8009b30:	d838      	bhi.n	8009ba4 <__ssputs_r+0x84>
 8009b32:	898a      	ldrh	r2, [r1, #12]
 8009b34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b38:	d032      	beq.n	8009ba0 <__ssputs_r+0x80>
 8009b3a:	6825      	ldr	r5, [r4, #0]
 8009b3c:	6909      	ldr	r1, [r1, #16]
 8009b3e:	eba5 0901 	sub.w	r9, r5, r1
 8009b42:	6965      	ldr	r5, [r4, #20]
 8009b44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	444b      	add	r3, r9
 8009b50:	106d      	asrs	r5, r5, #1
 8009b52:	429d      	cmp	r5, r3
 8009b54:	bf38      	it	cc
 8009b56:	461d      	movcc	r5, r3
 8009b58:	0553      	lsls	r3, r2, #21
 8009b5a:	d531      	bpl.n	8009bc0 <__ssputs_r+0xa0>
 8009b5c:	4629      	mov	r1, r5
 8009b5e:	f000 fb47 	bl	800a1f0 <_malloc_r>
 8009b62:	4606      	mov	r6, r0
 8009b64:	b950      	cbnz	r0, 8009b7c <__ssputs_r+0x5c>
 8009b66:	230c      	movs	r3, #12
 8009b68:	f8ca 3000 	str.w	r3, [sl]
 8009b6c:	89a3      	ldrh	r3, [r4, #12]
 8009b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b72:	81a3      	strh	r3, [r4, #12]
 8009b74:	f04f 30ff 	mov.w	r0, #4294967295
 8009b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b7c:	6921      	ldr	r1, [r4, #16]
 8009b7e:	464a      	mov	r2, r9
 8009b80:	f000 fabe 	bl	800a100 <memcpy>
 8009b84:	89a3      	ldrh	r3, [r4, #12]
 8009b86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b8e:	81a3      	strh	r3, [r4, #12]
 8009b90:	6126      	str	r6, [r4, #16]
 8009b92:	6165      	str	r5, [r4, #20]
 8009b94:	444e      	add	r6, r9
 8009b96:	eba5 0509 	sub.w	r5, r5, r9
 8009b9a:	6026      	str	r6, [r4, #0]
 8009b9c:	60a5      	str	r5, [r4, #8]
 8009b9e:	463e      	mov	r6, r7
 8009ba0:	42be      	cmp	r6, r7
 8009ba2:	d900      	bls.n	8009ba6 <__ssputs_r+0x86>
 8009ba4:	463e      	mov	r6, r7
 8009ba6:	4632      	mov	r2, r6
 8009ba8:	6820      	ldr	r0, [r4, #0]
 8009baa:	4641      	mov	r1, r8
 8009bac:	f000 fab6 	bl	800a11c <memmove>
 8009bb0:	68a3      	ldr	r3, [r4, #8]
 8009bb2:	6822      	ldr	r2, [r4, #0]
 8009bb4:	1b9b      	subs	r3, r3, r6
 8009bb6:	4432      	add	r2, r6
 8009bb8:	60a3      	str	r3, [r4, #8]
 8009bba:	6022      	str	r2, [r4, #0]
 8009bbc:	2000      	movs	r0, #0
 8009bbe:	e7db      	b.n	8009b78 <__ssputs_r+0x58>
 8009bc0:	462a      	mov	r2, r5
 8009bc2:	f000 fb6f 	bl	800a2a4 <_realloc_r>
 8009bc6:	4606      	mov	r6, r0
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	d1e1      	bne.n	8009b90 <__ssputs_r+0x70>
 8009bcc:	6921      	ldr	r1, [r4, #16]
 8009bce:	4650      	mov	r0, sl
 8009bd0:	f000 fabe 	bl	800a150 <_free_r>
 8009bd4:	e7c7      	b.n	8009b66 <__ssputs_r+0x46>
	...

08009bd8 <_svfiprintf_r>:
 8009bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bdc:	4698      	mov	r8, r3
 8009bde:	898b      	ldrh	r3, [r1, #12]
 8009be0:	061b      	lsls	r3, r3, #24
 8009be2:	b09d      	sub	sp, #116	; 0x74
 8009be4:	4607      	mov	r7, r0
 8009be6:	460d      	mov	r5, r1
 8009be8:	4614      	mov	r4, r2
 8009bea:	d50e      	bpl.n	8009c0a <_svfiprintf_r+0x32>
 8009bec:	690b      	ldr	r3, [r1, #16]
 8009bee:	b963      	cbnz	r3, 8009c0a <_svfiprintf_r+0x32>
 8009bf0:	2140      	movs	r1, #64	; 0x40
 8009bf2:	f000 fafd 	bl	800a1f0 <_malloc_r>
 8009bf6:	6028      	str	r0, [r5, #0]
 8009bf8:	6128      	str	r0, [r5, #16]
 8009bfa:	b920      	cbnz	r0, 8009c06 <_svfiprintf_r+0x2e>
 8009bfc:	230c      	movs	r3, #12
 8009bfe:	603b      	str	r3, [r7, #0]
 8009c00:	f04f 30ff 	mov.w	r0, #4294967295
 8009c04:	e0d1      	b.n	8009daa <_svfiprintf_r+0x1d2>
 8009c06:	2340      	movs	r3, #64	; 0x40
 8009c08:	616b      	str	r3, [r5, #20]
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c0e:	2320      	movs	r3, #32
 8009c10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c14:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c18:	2330      	movs	r3, #48	; 0x30
 8009c1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009dc4 <_svfiprintf_r+0x1ec>
 8009c1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c22:	f04f 0901 	mov.w	r9, #1
 8009c26:	4623      	mov	r3, r4
 8009c28:	469a      	mov	sl, r3
 8009c2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c2e:	b10a      	cbz	r2, 8009c34 <_svfiprintf_r+0x5c>
 8009c30:	2a25      	cmp	r2, #37	; 0x25
 8009c32:	d1f9      	bne.n	8009c28 <_svfiprintf_r+0x50>
 8009c34:	ebba 0b04 	subs.w	fp, sl, r4
 8009c38:	d00b      	beq.n	8009c52 <_svfiprintf_r+0x7a>
 8009c3a:	465b      	mov	r3, fp
 8009c3c:	4622      	mov	r2, r4
 8009c3e:	4629      	mov	r1, r5
 8009c40:	4638      	mov	r0, r7
 8009c42:	f7ff ff6d 	bl	8009b20 <__ssputs_r>
 8009c46:	3001      	adds	r0, #1
 8009c48:	f000 80aa 	beq.w	8009da0 <_svfiprintf_r+0x1c8>
 8009c4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c4e:	445a      	add	r2, fp
 8009c50:	9209      	str	r2, [sp, #36]	; 0x24
 8009c52:	f89a 3000 	ldrb.w	r3, [sl]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f000 80a2 	beq.w	8009da0 <_svfiprintf_r+0x1c8>
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c66:	f10a 0a01 	add.w	sl, sl, #1
 8009c6a:	9304      	str	r3, [sp, #16]
 8009c6c:	9307      	str	r3, [sp, #28]
 8009c6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c72:	931a      	str	r3, [sp, #104]	; 0x68
 8009c74:	4654      	mov	r4, sl
 8009c76:	2205      	movs	r2, #5
 8009c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c7c:	4851      	ldr	r0, [pc, #324]	; (8009dc4 <_svfiprintf_r+0x1ec>)
 8009c7e:	f7f6 faaf 	bl	80001e0 <memchr>
 8009c82:	9a04      	ldr	r2, [sp, #16]
 8009c84:	b9d8      	cbnz	r0, 8009cbe <_svfiprintf_r+0xe6>
 8009c86:	06d0      	lsls	r0, r2, #27
 8009c88:	bf44      	itt	mi
 8009c8a:	2320      	movmi	r3, #32
 8009c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c90:	0711      	lsls	r1, r2, #28
 8009c92:	bf44      	itt	mi
 8009c94:	232b      	movmi	r3, #43	; 0x2b
 8009c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c9e:	2b2a      	cmp	r3, #42	; 0x2a
 8009ca0:	d015      	beq.n	8009cce <_svfiprintf_r+0xf6>
 8009ca2:	9a07      	ldr	r2, [sp, #28]
 8009ca4:	4654      	mov	r4, sl
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	f04f 0c0a 	mov.w	ip, #10
 8009cac:	4621      	mov	r1, r4
 8009cae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cb2:	3b30      	subs	r3, #48	; 0x30
 8009cb4:	2b09      	cmp	r3, #9
 8009cb6:	d94e      	bls.n	8009d56 <_svfiprintf_r+0x17e>
 8009cb8:	b1b0      	cbz	r0, 8009ce8 <_svfiprintf_r+0x110>
 8009cba:	9207      	str	r2, [sp, #28]
 8009cbc:	e014      	b.n	8009ce8 <_svfiprintf_r+0x110>
 8009cbe:	eba0 0308 	sub.w	r3, r0, r8
 8009cc2:	fa09 f303 	lsl.w	r3, r9, r3
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	9304      	str	r3, [sp, #16]
 8009cca:	46a2      	mov	sl, r4
 8009ccc:	e7d2      	b.n	8009c74 <_svfiprintf_r+0x9c>
 8009cce:	9b03      	ldr	r3, [sp, #12]
 8009cd0:	1d19      	adds	r1, r3, #4
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	9103      	str	r1, [sp, #12]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	bfbb      	ittet	lt
 8009cda:	425b      	neglt	r3, r3
 8009cdc:	f042 0202 	orrlt.w	r2, r2, #2
 8009ce0:	9307      	strge	r3, [sp, #28]
 8009ce2:	9307      	strlt	r3, [sp, #28]
 8009ce4:	bfb8      	it	lt
 8009ce6:	9204      	strlt	r2, [sp, #16]
 8009ce8:	7823      	ldrb	r3, [r4, #0]
 8009cea:	2b2e      	cmp	r3, #46	; 0x2e
 8009cec:	d10c      	bne.n	8009d08 <_svfiprintf_r+0x130>
 8009cee:	7863      	ldrb	r3, [r4, #1]
 8009cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8009cf2:	d135      	bne.n	8009d60 <_svfiprintf_r+0x188>
 8009cf4:	9b03      	ldr	r3, [sp, #12]
 8009cf6:	1d1a      	adds	r2, r3, #4
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	9203      	str	r2, [sp, #12]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	bfb8      	it	lt
 8009d00:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d04:	3402      	adds	r4, #2
 8009d06:	9305      	str	r3, [sp, #20]
 8009d08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009dd4 <_svfiprintf_r+0x1fc>
 8009d0c:	7821      	ldrb	r1, [r4, #0]
 8009d0e:	2203      	movs	r2, #3
 8009d10:	4650      	mov	r0, sl
 8009d12:	f7f6 fa65 	bl	80001e0 <memchr>
 8009d16:	b140      	cbz	r0, 8009d2a <_svfiprintf_r+0x152>
 8009d18:	2340      	movs	r3, #64	; 0x40
 8009d1a:	eba0 000a 	sub.w	r0, r0, sl
 8009d1e:	fa03 f000 	lsl.w	r0, r3, r0
 8009d22:	9b04      	ldr	r3, [sp, #16]
 8009d24:	4303      	orrs	r3, r0
 8009d26:	3401      	adds	r4, #1
 8009d28:	9304      	str	r3, [sp, #16]
 8009d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d2e:	4826      	ldr	r0, [pc, #152]	; (8009dc8 <_svfiprintf_r+0x1f0>)
 8009d30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d34:	2206      	movs	r2, #6
 8009d36:	f7f6 fa53 	bl	80001e0 <memchr>
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	d038      	beq.n	8009db0 <_svfiprintf_r+0x1d8>
 8009d3e:	4b23      	ldr	r3, [pc, #140]	; (8009dcc <_svfiprintf_r+0x1f4>)
 8009d40:	bb1b      	cbnz	r3, 8009d8a <_svfiprintf_r+0x1b2>
 8009d42:	9b03      	ldr	r3, [sp, #12]
 8009d44:	3307      	adds	r3, #7
 8009d46:	f023 0307 	bic.w	r3, r3, #7
 8009d4a:	3308      	adds	r3, #8
 8009d4c:	9303      	str	r3, [sp, #12]
 8009d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d50:	4433      	add	r3, r6
 8009d52:	9309      	str	r3, [sp, #36]	; 0x24
 8009d54:	e767      	b.n	8009c26 <_svfiprintf_r+0x4e>
 8009d56:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d5a:	460c      	mov	r4, r1
 8009d5c:	2001      	movs	r0, #1
 8009d5e:	e7a5      	b.n	8009cac <_svfiprintf_r+0xd4>
 8009d60:	2300      	movs	r3, #0
 8009d62:	3401      	adds	r4, #1
 8009d64:	9305      	str	r3, [sp, #20]
 8009d66:	4619      	mov	r1, r3
 8009d68:	f04f 0c0a 	mov.w	ip, #10
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d72:	3a30      	subs	r2, #48	; 0x30
 8009d74:	2a09      	cmp	r2, #9
 8009d76:	d903      	bls.n	8009d80 <_svfiprintf_r+0x1a8>
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d0c5      	beq.n	8009d08 <_svfiprintf_r+0x130>
 8009d7c:	9105      	str	r1, [sp, #20]
 8009d7e:	e7c3      	b.n	8009d08 <_svfiprintf_r+0x130>
 8009d80:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d84:	4604      	mov	r4, r0
 8009d86:	2301      	movs	r3, #1
 8009d88:	e7f0      	b.n	8009d6c <_svfiprintf_r+0x194>
 8009d8a:	ab03      	add	r3, sp, #12
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	462a      	mov	r2, r5
 8009d90:	4b0f      	ldr	r3, [pc, #60]	; (8009dd0 <_svfiprintf_r+0x1f8>)
 8009d92:	a904      	add	r1, sp, #16
 8009d94:	4638      	mov	r0, r7
 8009d96:	f3af 8000 	nop.w
 8009d9a:	1c42      	adds	r2, r0, #1
 8009d9c:	4606      	mov	r6, r0
 8009d9e:	d1d6      	bne.n	8009d4e <_svfiprintf_r+0x176>
 8009da0:	89ab      	ldrh	r3, [r5, #12]
 8009da2:	065b      	lsls	r3, r3, #25
 8009da4:	f53f af2c 	bmi.w	8009c00 <_svfiprintf_r+0x28>
 8009da8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009daa:	b01d      	add	sp, #116	; 0x74
 8009dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009db0:	ab03      	add	r3, sp, #12
 8009db2:	9300      	str	r3, [sp, #0]
 8009db4:	462a      	mov	r2, r5
 8009db6:	4b06      	ldr	r3, [pc, #24]	; (8009dd0 <_svfiprintf_r+0x1f8>)
 8009db8:	a904      	add	r1, sp, #16
 8009dba:	4638      	mov	r0, r7
 8009dbc:	f000 f87a 	bl	8009eb4 <_printf_i>
 8009dc0:	e7eb      	b.n	8009d9a <_svfiprintf_r+0x1c2>
 8009dc2:	bf00      	nop
 8009dc4:	0800d152 	.word	0x0800d152
 8009dc8:	0800d15c 	.word	0x0800d15c
 8009dcc:	00000000 	.word	0x00000000
 8009dd0:	08009b21 	.word	0x08009b21
 8009dd4:	0800d158 	.word	0x0800d158

08009dd8 <_printf_common>:
 8009dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ddc:	4616      	mov	r6, r2
 8009dde:	4699      	mov	r9, r3
 8009de0:	688a      	ldr	r2, [r1, #8]
 8009de2:	690b      	ldr	r3, [r1, #16]
 8009de4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009de8:	4293      	cmp	r3, r2
 8009dea:	bfb8      	it	lt
 8009dec:	4613      	movlt	r3, r2
 8009dee:	6033      	str	r3, [r6, #0]
 8009df0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009df4:	4607      	mov	r7, r0
 8009df6:	460c      	mov	r4, r1
 8009df8:	b10a      	cbz	r2, 8009dfe <_printf_common+0x26>
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	6033      	str	r3, [r6, #0]
 8009dfe:	6823      	ldr	r3, [r4, #0]
 8009e00:	0699      	lsls	r1, r3, #26
 8009e02:	bf42      	ittt	mi
 8009e04:	6833      	ldrmi	r3, [r6, #0]
 8009e06:	3302      	addmi	r3, #2
 8009e08:	6033      	strmi	r3, [r6, #0]
 8009e0a:	6825      	ldr	r5, [r4, #0]
 8009e0c:	f015 0506 	ands.w	r5, r5, #6
 8009e10:	d106      	bne.n	8009e20 <_printf_common+0x48>
 8009e12:	f104 0a19 	add.w	sl, r4, #25
 8009e16:	68e3      	ldr	r3, [r4, #12]
 8009e18:	6832      	ldr	r2, [r6, #0]
 8009e1a:	1a9b      	subs	r3, r3, r2
 8009e1c:	42ab      	cmp	r3, r5
 8009e1e:	dc26      	bgt.n	8009e6e <_printf_common+0x96>
 8009e20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e24:	1e13      	subs	r3, r2, #0
 8009e26:	6822      	ldr	r2, [r4, #0]
 8009e28:	bf18      	it	ne
 8009e2a:	2301      	movne	r3, #1
 8009e2c:	0692      	lsls	r2, r2, #26
 8009e2e:	d42b      	bmi.n	8009e88 <_printf_common+0xb0>
 8009e30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e34:	4649      	mov	r1, r9
 8009e36:	4638      	mov	r0, r7
 8009e38:	47c0      	blx	r8
 8009e3a:	3001      	adds	r0, #1
 8009e3c:	d01e      	beq.n	8009e7c <_printf_common+0xa4>
 8009e3e:	6823      	ldr	r3, [r4, #0]
 8009e40:	68e5      	ldr	r5, [r4, #12]
 8009e42:	6832      	ldr	r2, [r6, #0]
 8009e44:	f003 0306 	and.w	r3, r3, #6
 8009e48:	2b04      	cmp	r3, #4
 8009e4a:	bf08      	it	eq
 8009e4c:	1aad      	subeq	r5, r5, r2
 8009e4e:	68a3      	ldr	r3, [r4, #8]
 8009e50:	6922      	ldr	r2, [r4, #16]
 8009e52:	bf0c      	ite	eq
 8009e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e58:	2500      	movne	r5, #0
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	bfc4      	itt	gt
 8009e5e:	1a9b      	subgt	r3, r3, r2
 8009e60:	18ed      	addgt	r5, r5, r3
 8009e62:	2600      	movs	r6, #0
 8009e64:	341a      	adds	r4, #26
 8009e66:	42b5      	cmp	r5, r6
 8009e68:	d11a      	bne.n	8009ea0 <_printf_common+0xc8>
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	e008      	b.n	8009e80 <_printf_common+0xa8>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	4652      	mov	r2, sl
 8009e72:	4649      	mov	r1, r9
 8009e74:	4638      	mov	r0, r7
 8009e76:	47c0      	blx	r8
 8009e78:	3001      	adds	r0, #1
 8009e7a:	d103      	bne.n	8009e84 <_printf_common+0xac>
 8009e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e84:	3501      	adds	r5, #1
 8009e86:	e7c6      	b.n	8009e16 <_printf_common+0x3e>
 8009e88:	18e1      	adds	r1, r4, r3
 8009e8a:	1c5a      	adds	r2, r3, #1
 8009e8c:	2030      	movs	r0, #48	; 0x30
 8009e8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e92:	4422      	add	r2, r4
 8009e94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e9c:	3302      	adds	r3, #2
 8009e9e:	e7c7      	b.n	8009e30 <_printf_common+0x58>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	4622      	mov	r2, r4
 8009ea4:	4649      	mov	r1, r9
 8009ea6:	4638      	mov	r0, r7
 8009ea8:	47c0      	blx	r8
 8009eaa:	3001      	adds	r0, #1
 8009eac:	d0e6      	beq.n	8009e7c <_printf_common+0xa4>
 8009eae:	3601      	adds	r6, #1
 8009eb0:	e7d9      	b.n	8009e66 <_printf_common+0x8e>
	...

08009eb4 <_printf_i>:
 8009eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009eb8:	460c      	mov	r4, r1
 8009eba:	4691      	mov	r9, r2
 8009ebc:	7e27      	ldrb	r7, [r4, #24]
 8009ebe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009ec0:	2f78      	cmp	r7, #120	; 0x78
 8009ec2:	4680      	mov	r8, r0
 8009ec4:	469a      	mov	sl, r3
 8009ec6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009eca:	d807      	bhi.n	8009edc <_printf_i+0x28>
 8009ecc:	2f62      	cmp	r7, #98	; 0x62
 8009ece:	d80a      	bhi.n	8009ee6 <_printf_i+0x32>
 8009ed0:	2f00      	cmp	r7, #0
 8009ed2:	f000 80d8 	beq.w	800a086 <_printf_i+0x1d2>
 8009ed6:	2f58      	cmp	r7, #88	; 0x58
 8009ed8:	f000 80a3 	beq.w	800a022 <_printf_i+0x16e>
 8009edc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009ee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ee4:	e03a      	b.n	8009f5c <_printf_i+0xa8>
 8009ee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009eea:	2b15      	cmp	r3, #21
 8009eec:	d8f6      	bhi.n	8009edc <_printf_i+0x28>
 8009eee:	a001      	add	r0, pc, #4	; (adr r0, 8009ef4 <_printf_i+0x40>)
 8009ef0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009ef4:	08009f4d 	.word	0x08009f4d
 8009ef8:	08009f61 	.word	0x08009f61
 8009efc:	08009edd 	.word	0x08009edd
 8009f00:	08009edd 	.word	0x08009edd
 8009f04:	08009edd 	.word	0x08009edd
 8009f08:	08009edd 	.word	0x08009edd
 8009f0c:	08009f61 	.word	0x08009f61
 8009f10:	08009edd 	.word	0x08009edd
 8009f14:	08009edd 	.word	0x08009edd
 8009f18:	08009edd 	.word	0x08009edd
 8009f1c:	08009edd 	.word	0x08009edd
 8009f20:	0800a06d 	.word	0x0800a06d
 8009f24:	08009f91 	.word	0x08009f91
 8009f28:	0800a04f 	.word	0x0800a04f
 8009f2c:	08009edd 	.word	0x08009edd
 8009f30:	08009edd 	.word	0x08009edd
 8009f34:	0800a08f 	.word	0x0800a08f
 8009f38:	08009edd 	.word	0x08009edd
 8009f3c:	08009f91 	.word	0x08009f91
 8009f40:	08009edd 	.word	0x08009edd
 8009f44:	08009edd 	.word	0x08009edd
 8009f48:	0800a057 	.word	0x0800a057
 8009f4c:	680b      	ldr	r3, [r1, #0]
 8009f4e:	1d1a      	adds	r2, r3, #4
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	600a      	str	r2, [r1, #0]
 8009f54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e0a3      	b.n	800a0a8 <_printf_i+0x1f4>
 8009f60:	6825      	ldr	r5, [r4, #0]
 8009f62:	6808      	ldr	r0, [r1, #0]
 8009f64:	062e      	lsls	r6, r5, #24
 8009f66:	f100 0304 	add.w	r3, r0, #4
 8009f6a:	d50a      	bpl.n	8009f82 <_printf_i+0xce>
 8009f6c:	6805      	ldr	r5, [r0, #0]
 8009f6e:	600b      	str	r3, [r1, #0]
 8009f70:	2d00      	cmp	r5, #0
 8009f72:	da03      	bge.n	8009f7c <_printf_i+0xc8>
 8009f74:	232d      	movs	r3, #45	; 0x2d
 8009f76:	426d      	negs	r5, r5
 8009f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f7c:	485e      	ldr	r0, [pc, #376]	; (800a0f8 <_printf_i+0x244>)
 8009f7e:	230a      	movs	r3, #10
 8009f80:	e019      	b.n	8009fb6 <_printf_i+0x102>
 8009f82:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009f86:	6805      	ldr	r5, [r0, #0]
 8009f88:	600b      	str	r3, [r1, #0]
 8009f8a:	bf18      	it	ne
 8009f8c:	b22d      	sxthne	r5, r5
 8009f8e:	e7ef      	b.n	8009f70 <_printf_i+0xbc>
 8009f90:	680b      	ldr	r3, [r1, #0]
 8009f92:	6825      	ldr	r5, [r4, #0]
 8009f94:	1d18      	adds	r0, r3, #4
 8009f96:	6008      	str	r0, [r1, #0]
 8009f98:	0628      	lsls	r0, r5, #24
 8009f9a:	d501      	bpl.n	8009fa0 <_printf_i+0xec>
 8009f9c:	681d      	ldr	r5, [r3, #0]
 8009f9e:	e002      	b.n	8009fa6 <_printf_i+0xf2>
 8009fa0:	0669      	lsls	r1, r5, #25
 8009fa2:	d5fb      	bpl.n	8009f9c <_printf_i+0xe8>
 8009fa4:	881d      	ldrh	r5, [r3, #0]
 8009fa6:	4854      	ldr	r0, [pc, #336]	; (800a0f8 <_printf_i+0x244>)
 8009fa8:	2f6f      	cmp	r7, #111	; 0x6f
 8009faa:	bf0c      	ite	eq
 8009fac:	2308      	moveq	r3, #8
 8009fae:	230a      	movne	r3, #10
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009fb6:	6866      	ldr	r6, [r4, #4]
 8009fb8:	60a6      	str	r6, [r4, #8]
 8009fba:	2e00      	cmp	r6, #0
 8009fbc:	bfa2      	ittt	ge
 8009fbe:	6821      	ldrge	r1, [r4, #0]
 8009fc0:	f021 0104 	bicge.w	r1, r1, #4
 8009fc4:	6021      	strge	r1, [r4, #0]
 8009fc6:	b90d      	cbnz	r5, 8009fcc <_printf_i+0x118>
 8009fc8:	2e00      	cmp	r6, #0
 8009fca:	d04d      	beq.n	800a068 <_printf_i+0x1b4>
 8009fcc:	4616      	mov	r6, r2
 8009fce:	fbb5 f1f3 	udiv	r1, r5, r3
 8009fd2:	fb03 5711 	mls	r7, r3, r1, r5
 8009fd6:	5dc7      	ldrb	r7, [r0, r7]
 8009fd8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009fdc:	462f      	mov	r7, r5
 8009fde:	42bb      	cmp	r3, r7
 8009fe0:	460d      	mov	r5, r1
 8009fe2:	d9f4      	bls.n	8009fce <_printf_i+0x11a>
 8009fe4:	2b08      	cmp	r3, #8
 8009fe6:	d10b      	bne.n	800a000 <_printf_i+0x14c>
 8009fe8:	6823      	ldr	r3, [r4, #0]
 8009fea:	07df      	lsls	r7, r3, #31
 8009fec:	d508      	bpl.n	800a000 <_printf_i+0x14c>
 8009fee:	6923      	ldr	r3, [r4, #16]
 8009ff0:	6861      	ldr	r1, [r4, #4]
 8009ff2:	4299      	cmp	r1, r3
 8009ff4:	bfde      	ittt	le
 8009ff6:	2330      	movle	r3, #48	; 0x30
 8009ff8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009ffc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a000:	1b92      	subs	r2, r2, r6
 800a002:	6122      	str	r2, [r4, #16]
 800a004:	f8cd a000 	str.w	sl, [sp]
 800a008:	464b      	mov	r3, r9
 800a00a:	aa03      	add	r2, sp, #12
 800a00c:	4621      	mov	r1, r4
 800a00e:	4640      	mov	r0, r8
 800a010:	f7ff fee2 	bl	8009dd8 <_printf_common>
 800a014:	3001      	adds	r0, #1
 800a016:	d14c      	bne.n	800a0b2 <_printf_i+0x1fe>
 800a018:	f04f 30ff 	mov.w	r0, #4294967295
 800a01c:	b004      	add	sp, #16
 800a01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a022:	4835      	ldr	r0, [pc, #212]	; (800a0f8 <_printf_i+0x244>)
 800a024:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a028:	6823      	ldr	r3, [r4, #0]
 800a02a:	680e      	ldr	r6, [r1, #0]
 800a02c:	061f      	lsls	r7, r3, #24
 800a02e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a032:	600e      	str	r6, [r1, #0]
 800a034:	d514      	bpl.n	800a060 <_printf_i+0x1ac>
 800a036:	07d9      	lsls	r1, r3, #31
 800a038:	bf44      	itt	mi
 800a03a:	f043 0320 	orrmi.w	r3, r3, #32
 800a03e:	6023      	strmi	r3, [r4, #0]
 800a040:	b91d      	cbnz	r5, 800a04a <_printf_i+0x196>
 800a042:	6823      	ldr	r3, [r4, #0]
 800a044:	f023 0320 	bic.w	r3, r3, #32
 800a048:	6023      	str	r3, [r4, #0]
 800a04a:	2310      	movs	r3, #16
 800a04c:	e7b0      	b.n	8009fb0 <_printf_i+0xfc>
 800a04e:	6823      	ldr	r3, [r4, #0]
 800a050:	f043 0320 	orr.w	r3, r3, #32
 800a054:	6023      	str	r3, [r4, #0]
 800a056:	2378      	movs	r3, #120	; 0x78
 800a058:	4828      	ldr	r0, [pc, #160]	; (800a0fc <_printf_i+0x248>)
 800a05a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a05e:	e7e3      	b.n	800a028 <_printf_i+0x174>
 800a060:	065e      	lsls	r6, r3, #25
 800a062:	bf48      	it	mi
 800a064:	b2ad      	uxthmi	r5, r5
 800a066:	e7e6      	b.n	800a036 <_printf_i+0x182>
 800a068:	4616      	mov	r6, r2
 800a06a:	e7bb      	b.n	8009fe4 <_printf_i+0x130>
 800a06c:	680b      	ldr	r3, [r1, #0]
 800a06e:	6826      	ldr	r6, [r4, #0]
 800a070:	6960      	ldr	r0, [r4, #20]
 800a072:	1d1d      	adds	r5, r3, #4
 800a074:	600d      	str	r5, [r1, #0]
 800a076:	0635      	lsls	r5, r6, #24
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	d501      	bpl.n	800a080 <_printf_i+0x1cc>
 800a07c:	6018      	str	r0, [r3, #0]
 800a07e:	e002      	b.n	800a086 <_printf_i+0x1d2>
 800a080:	0671      	lsls	r1, r6, #25
 800a082:	d5fb      	bpl.n	800a07c <_printf_i+0x1c8>
 800a084:	8018      	strh	r0, [r3, #0]
 800a086:	2300      	movs	r3, #0
 800a088:	6123      	str	r3, [r4, #16]
 800a08a:	4616      	mov	r6, r2
 800a08c:	e7ba      	b.n	800a004 <_printf_i+0x150>
 800a08e:	680b      	ldr	r3, [r1, #0]
 800a090:	1d1a      	adds	r2, r3, #4
 800a092:	600a      	str	r2, [r1, #0]
 800a094:	681e      	ldr	r6, [r3, #0]
 800a096:	6862      	ldr	r2, [r4, #4]
 800a098:	2100      	movs	r1, #0
 800a09a:	4630      	mov	r0, r6
 800a09c:	f7f6 f8a0 	bl	80001e0 <memchr>
 800a0a0:	b108      	cbz	r0, 800a0a6 <_printf_i+0x1f2>
 800a0a2:	1b80      	subs	r0, r0, r6
 800a0a4:	6060      	str	r0, [r4, #4]
 800a0a6:	6863      	ldr	r3, [r4, #4]
 800a0a8:	6123      	str	r3, [r4, #16]
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0b0:	e7a8      	b.n	800a004 <_printf_i+0x150>
 800a0b2:	6923      	ldr	r3, [r4, #16]
 800a0b4:	4632      	mov	r2, r6
 800a0b6:	4649      	mov	r1, r9
 800a0b8:	4640      	mov	r0, r8
 800a0ba:	47d0      	blx	sl
 800a0bc:	3001      	adds	r0, #1
 800a0be:	d0ab      	beq.n	800a018 <_printf_i+0x164>
 800a0c0:	6823      	ldr	r3, [r4, #0]
 800a0c2:	079b      	lsls	r3, r3, #30
 800a0c4:	d413      	bmi.n	800a0ee <_printf_i+0x23a>
 800a0c6:	68e0      	ldr	r0, [r4, #12]
 800a0c8:	9b03      	ldr	r3, [sp, #12]
 800a0ca:	4298      	cmp	r0, r3
 800a0cc:	bfb8      	it	lt
 800a0ce:	4618      	movlt	r0, r3
 800a0d0:	e7a4      	b.n	800a01c <_printf_i+0x168>
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	4632      	mov	r2, r6
 800a0d6:	4649      	mov	r1, r9
 800a0d8:	4640      	mov	r0, r8
 800a0da:	47d0      	blx	sl
 800a0dc:	3001      	adds	r0, #1
 800a0de:	d09b      	beq.n	800a018 <_printf_i+0x164>
 800a0e0:	3501      	adds	r5, #1
 800a0e2:	68e3      	ldr	r3, [r4, #12]
 800a0e4:	9903      	ldr	r1, [sp, #12]
 800a0e6:	1a5b      	subs	r3, r3, r1
 800a0e8:	42ab      	cmp	r3, r5
 800a0ea:	dcf2      	bgt.n	800a0d2 <_printf_i+0x21e>
 800a0ec:	e7eb      	b.n	800a0c6 <_printf_i+0x212>
 800a0ee:	2500      	movs	r5, #0
 800a0f0:	f104 0619 	add.w	r6, r4, #25
 800a0f4:	e7f5      	b.n	800a0e2 <_printf_i+0x22e>
 800a0f6:	bf00      	nop
 800a0f8:	0800d163 	.word	0x0800d163
 800a0fc:	0800d174 	.word	0x0800d174

0800a100 <memcpy>:
 800a100:	440a      	add	r2, r1
 800a102:	4291      	cmp	r1, r2
 800a104:	f100 33ff 	add.w	r3, r0, #4294967295
 800a108:	d100      	bne.n	800a10c <memcpy+0xc>
 800a10a:	4770      	bx	lr
 800a10c:	b510      	push	{r4, lr}
 800a10e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a112:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a116:	4291      	cmp	r1, r2
 800a118:	d1f9      	bne.n	800a10e <memcpy+0xe>
 800a11a:	bd10      	pop	{r4, pc}

0800a11c <memmove>:
 800a11c:	4288      	cmp	r0, r1
 800a11e:	b510      	push	{r4, lr}
 800a120:	eb01 0402 	add.w	r4, r1, r2
 800a124:	d902      	bls.n	800a12c <memmove+0x10>
 800a126:	4284      	cmp	r4, r0
 800a128:	4623      	mov	r3, r4
 800a12a:	d807      	bhi.n	800a13c <memmove+0x20>
 800a12c:	1e43      	subs	r3, r0, #1
 800a12e:	42a1      	cmp	r1, r4
 800a130:	d008      	beq.n	800a144 <memmove+0x28>
 800a132:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a136:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a13a:	e7f8      	b.n	800a12e <memmove+0x12>
 800a13c:	4402      	add	r2, r0
 800a13e:	4601      	mov	r1, r0
 800a140:	428a      	cmp	r2, r1
 800a142:	d100      	bne.n	800a146 <memmove+0x2a>
 800a144:	bd10      	pop	{r4, pc}
 800a146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a14a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a14e:	e7f7      	b.n	800a140 <memmove+0x24>

0800a150 <_free_r>:
 800a150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a152:	2900      	cmp	r1, #0
 800a154:	d048      	beq.n	800a1e8 <_free_r+0x98>
 800a156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a15a:	9001      	str	r0, [sp, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	f1a1 0404 	sub.w	r4, r1, #4
 800a162:	bfb8      	it	lt
 800a164:	18e4      	addlt	r4, r4, r3
 800a166:	f000 f8d3 	bl	800a310 <__malloc_lock>
 800a16a:	4a20      	ldr	r2, [pc, #128]	; (800a1ec <_free_r+0x9c>)
 800a16c:	9801      	ldr	r0, [sp, #4]
 800a16e:	6813      	ldr	r3, [r2, #0]
 800a170:	4615      	mov	r5, r2
 800a172:	b933      	cbnz	r3, 800a182 <_free_r+0x32>
 800a174:	6063      	str	r3, [r4, #4]
 800a176:	6014      	str	r4, [r2, #0]
 800a178:	b003      	add	sp, #12
 800a17a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a17e:	f000 b8cd 	b.w	800a31c <__malloc_unlock>
 800a182:	42a3      	cmp	r3, r4
 800a184:	d90b      	bls.n	800a19e <_free_r+0x4e>
 800a186:	6821      	ldr	r1, [r4, #0]
 800a188:	1862      	adds	r2, r4, r1
 800a18a:	4293      	cmp	r3, r2
 800a18c:	bf04      	itt	eq
 800a18e:	681a      	ldreq	r2, [r3, #0]
 800a190:	685b      	ldreq	r3, [r3, #4]
 800a192:	6063      	str	r3, [r4, #4]
 800a194:	bf04      	itt	eq
 800a196:	1852      	addeq	r2, r2, r1
 800a198:	6022      	streq	r2, [r4, #0]
 800a19a:	602c      	str	r4, [r5, #0]
 800a19c:	e7ec      	b.n	800a178 <_free_r+0x28>
 800a19e:	461a      	mov	r2, r3
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	b10b      	cbz	r3, 800a1a8 <_free_r+0x58>
 800a1a4:	42a3      	cmp	r3, r4
 800a1a6:	d9fa      	bls.n	800a19e <_free_r+0x4e>
 800a1a8:	6811      	ldr	r1, [r2, #0]
 800a1aa:	1855      	adds	r5, r2, r1
 800a1ac:	42a5      	cmp	r5, r4
 800a1ae:	d10b      	bne.n	800a1c8 <_free_r+0x78>
 800a1b0:	6824      	ldr	r4, [r4, #0]
 800a1b2:	4421      	add	r1, r4
 800a1b4:	1854      	adds	r4, r2, r1
 800a1b6:	42a3      	cmp	r3, r4
 800a1b8:	6011      	str	r1, [r2, #0]
 800a1ba:	d1dd      	bne.n	800a178 <_free_r+0x28>
 800a1bc:	681c      	ldr	r4, [r3, #0]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	6053      	str	r3, [r2, #4]
 800a1c2:	4421      	add	r1, r4
 800a1c4:	6011      	str	r1, [r2, #0]
 800a1c6:	e7d7      	b.n	800a178 <_free_r+0x28>
 800a1c8:	d902      	bls.n	800a1d0 <_free_r+0x80>
 800a1ca:	230c      	movs	r3, #12
 800a1cc:	6003      	str	r3, [r0, #0]
 800a1ce:	e7d3      	b.n	800a178 <_free_r+0x28>
 800a1d0:	6825      	ldr	r5, [r4, #0]
 800a1d2:	1961      	adds	r1, r4, r5
 800a1d4:	428b      	cmp	r3, r1
 800a1d6:	bf04      	itt	eq
 800a1d8:	6819      	ldreq	r1, [r3, #0]
 800a1da:	685b      	ldreq	r3, [r3, #4]
 800a1dc:	6063      	str	r3, [r4, #4]
 800a1de:	bf04      	itt	eq
 800a1e0:	1949      	addeq	r1, r1, r5
 800a1e2:	6021      	streq	r1, [r4, #0]
 800a1e4:	6054      	str	r4, [r2, #4]
 800a1e6:	e7c7      	b.n	800a178 <_free_r+0x28>
 800a1e8:	b003      	add	sp, #12
 800a1ea:	bd30      	pop	{r4, r5, pc}
 800a1ec:	20000904 	.word	0x20000904

0800a1f0 <_malloc_r>:
 800a1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1f2:	1ccd      	adds	r5, r1, #3
 800a1f4:	f025 0503 	bic.w	r5, r5, #3
 800a1f8:	3508      	adds	r5, #8
 800a1fa:	2d0c      	cmp	r5, #12
 800a1fc:	bf38      	it	cc
 800a1fe:	250c      	movcc	r5, #12
 800a200:	2d00      	cmp	r5, #0
 800a202:	4606      	mov	r6, r0
 800a204:	db01      	blt.n	800a20a <_malloc_r+0x1a>
 800a206:	42a9      	cmp	r1, r5
 800a208:	d903      	bls.n	800a212 <_malloc_r+0x22>
 800a20a:	230c      	movs	r3, #12
 800a20c:	6033      	str	r3, [r6, #0]
 800a20e:	2000      	movs	r0, #0
 800a210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a212:	f000 f87d 	bl	800a310 <__malloc_lock>
 800a216:	4921      	ldr	r1, [pc, #132]	; (800a29c <_malloc_r+0xac>)
 800a218:	680a      	ldr	r2, [r1, #0]
 800a21a:	4614      	mov	r4, r2
 800a21c:	b99c      	cbnz	r4, 800a246 <_malloc_r+0x56>
 800a21e:	4f20      	ldr	r7, [pc, #128]	; (800a2a0 <_malloc_r+0xb0>)
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	b923      	cbnz	r3, 800a22e <_malloc_r+0x3e>
 800a224:	4621      	mov	r1, r4
 800a226:	4630      	mov	r0, r6
 800a228:	f000 f862 	bl	800a2f0 <_sbrk_r>
 800a22c:	6038      	str	r0, [r7, #0]
 800a22e:	4629      	mov	r1, r5
 800a230:	4630      	mov	r0, r6
 800a232:	f000 f85d 	bl	800a2f0 <_sbrk_r>
 800a236:	1c43      	adds	r3, r0, #1
 800a238:	d123      	bne.n	800a282 <_malloc_r+0x92>
 800a23a:	230c      	movs	r3, #12
 800a23c:	6033      	str	r3, [r6, #0]
 800a23e:	4630      	mov	r0, r6
 800a240:	f000 f86c 	bl	800a31c <__malloc_unlock>
 800a244:	e7e3      	b.n	800a20e <_malloc_r+0x1e>
 800a246:	6823      	ldr	r3, [r4, #0]
 800a248:	1b5b      	subs	r3, r3, r5
 800a24a:	d417      	bmi.n	800a27c <_malloc_r+0x8c>
 800a24c:	2b0b      	cmp	r3, #11
 800a24e:	d903      	bls.n	800a258 <_malloc_r+0x68>
 800a250:	6023      	str	r3, [r4, #0]
 800a252:	441c      	add	r4, r3
 800a254:	6025      	str	r5, [r4, #0]
 800a256:	e004      	b.n	800a262 <_malloc_r+0x72>
 800a258:	6863      	ldr	r3, [r4, #4]
 800a25a:	42a2      	cmp	r2, r4
 800a25c:	bf0c      	ite	eq
 800a25e:	600b      	streq	r3, [r1, #0]
 800a260:	6053      	strne	r3, [r2, #4]
 800a262:	4630      	mov	r0, r6
 800a264:	f000 f85a 	bl	800a31c <__malloc_unlock>
 800a268:	f104 000b 	add.w	r0, r4, #11
 800a26c:	1d23      	adds	r3, r4, #4
 800a26e:	f020 0007 	bic.w	r0, r0, #7
 800a272:	1ac2      	subs	r2, r0, r3
 800a274:	d0cc      	beq.n	800a210 <_malloc_r+0x20>
 800a276:	1a1b      	subs	r3, r3, r0
 800a278:	50a3      	str	r3, [r4, r2]
 800a27a:	e7c9      	b.n	800a210 <_malloc_r+0x20>
 800a27c:	4622      	mov	r2, r4
 800a27e:	6864      	ldr	r4, [r4, #4]
 800a280:	e7cc      	b.n	800a21c <_malloc_r+0x2c>
 800a282:	1cc4      	adds	r4, r0, #3
 800a284:	f024 0403 	bic.w	r4, r4, #3
 800a288:	42a0      	cmp	r0, r4
 800a28a:	d0e3      	beq.n	800a254 <_malloc_r+0x64>
 800a28c:	1a21      	subs	r1, r4, r0
 800a28e:	4630      	mov	r0, r6
 800a290:	f000 f82e 	bl	800a2f0 <_sbrk_r>
 800a294:	3001      	adds	r0, #1
 800a296:	d1dd      	bne.n	800a254 <_malloc_r+0x64>
 800a298:	e7cf      	b.n	800a23a <_malloc_r+0x4a>
 800a29a:	bf00      	nop
 800a29c:	20000904 	.word	0x20000904
 800a2a0:	20000908 	.word	0x20000908

0800a2a4 <_realloc_r>:
 800a2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a6:	4607      	mov	r7, r0
 800a2a8:	4614      	mov	r4, r2
 800a2aa:	460e      	mov	r6, r1
 800a2ac:	b921      	cbnz	r1, 800a2b8 <_realloc_r+0x14>
 800a2ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	f7ff bf9c 	b.w	800a1f0 <_malloc_r>
 800a2b8:	b922      	cbnz	r2, 800a2c4 <_realloc_r+0x20>
 800a2ba:	f7ff ff49 	bl	800a150 <_free_r>
 800a2be:	4625      	mov	r5, r4
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2c4:	f000 f830 	bl	800a328 <_malloc_usable_size_r>
 800a2c8:	42a0      	cmp	r0, r4
 800a2ca:	d20f      	bcs.n	800a2ec <_realloc_r+0x48>
 800a2cc:	4621      	mov	r1, r4
 800a2ce:	4638      	mov	r0, r7
 800a2d0:	f7ff ff8e 	bl	800a1f0 <_malloc_r>
 800a2d4:	4605      	mov	r5, r0
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	d0f2      	beq.n	800a2c0 <_realloc_r+0x1c>
 800a2da:	4631      	mov	r1, r6
 800a2dc:	4622      	mov	r2, r4
 800a2de:	f7ff ff0f 	bl	800a100 <memcpy>
 800a2e2:	4631      	mov	r1, r6
 800a2e4:	4638      	mov	r0, r7
 800a2e6:	f7ff ff33 	bl	800a150 <_free_r>
 800a2ea:	e7e9      	b.n	800a2c0 <_realloc_r+0x1c>
 800a2ec:	4635      	mov	r5, r6
 800a2ee:	e7e7      	b.n	800a2c0 <_realloc_r+0x1c>

0800a2f0 <_sbrk_r>:
 800a2f0:	b538      	push	{r3, r4, r5, lr}
 800a2f2:	4d06      	ldr	r5, [pc, #24]	; (800a30c <_sbrk_r+0x1c>)
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	4608      	mov	r0, r1
 800a2fa:	602b      	str	r3, [r5, #0]
 800a2fc:	f7fb fa66 	bl	80057cc <_sbrk>
 800a300:	1c43      	adds	r3, r0, #1
 800a302:	d102      	bne.n	800a30a <_sbrk_r+0x1a>
 800a304:	682b      	ldr	r3, [r5, #0]
 800a306:	b103      	cbz	r3, 800a30a <_sbrk_r+0x1a>
 800a308:	6023      	str	r3, [r4, #0]
 800a30a:	bd38      	pop	{r3, r4, r5, pc}
 800a30c:	200010b8 	.word	0x200010b8

0800a310 <__malloc_lock>:
 800a310:	4801      	ldr	r0, [pc, #4]	; (800a318 <__malloc_lock+0x8>)
 800a312:	f000 b811 	b.w	800a338 <__retarget_lock_acquire_recursive>
 800a316:	bf00      	nop
 800a318:	200010c0 	.word	0x200010c0

0800a31c <__malloc_unlock>:
 800a31c:	4801      	ldr	r0, [pc, #4]	; (800a324 <__malloc_unlock+0x8>)
 800a31e:	f000 b80c 	b.w	800a33a <__retarget_lock_release_recursive>
 800a322:	bf00      	nop
 800a324:	200010c0 	.word	0x200010c0

0800a328 <_malloc_usable_size_r>:
 800a328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a32c:	1f18      	subs	r0, r3, #4
 800a32e:	2b00      	cmp	r3, #0
 800a330:	bfbc      	itt	lt
 800a332:	580b      	ldrlt	r3, [r1, r0]
 800a334:	18c0      	addlt	r0, r0, r3
 800a336:	4770      	bx	lr

0800a338 <__retarget_lock_acquire_recursive>:
 800a338:	4770      	bx	lr

0800a33a <__retarget_lock_release_recursive>:
 800a33a:	4770      	bx	lr

0800a33c <_init>:
 800a33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33e:	bf00      	nop
 800a340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a342:	bc08      	pop	{r3}
 800a344:	469e      	mov	lr, r3
 800a346:	4770      	bx	lr

0800a348 <_fini>:
 800a348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a34a:	bf00      	nop
 800a34c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a34e:	bc08      	pop	{r3}
 800a350:	469e      	mov	lr, r3
 800a352:	4770      	bx	lr
